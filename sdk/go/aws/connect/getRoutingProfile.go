// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides details about a specific Amazon Connect Routing Profile.
//
// ## Example Usage
//
// By `name`
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/connect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := connect.LookupRoutingProfile(ctx, &connect.LookupRoutingProfileArgs{
//				InstanceId: "aaaaaaaa-bbbb-cccc-dddd-111111111111",
//				Name:       pulumi.StringRef("Example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// By `routingProfileId`
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/connect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := connect.LookupRoutingProfile(ctx, &connect.LookupRoutingProfileArgs{
//				InstanceId:       "aaaaaaaa-bbbb-cccc-dddd-111111111111",
//				RoutingProfileId: pulumi.StringRef("cccccccc-bbbb-cccc-dddd-111111111111"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRoutingProfile(ctx *pulumi.Context, args *LookupRoutingProfileArgs, opts ...pulumi.InvokeOption) (*LookupRoutingProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRoutingProfileResult
	err := ctx.Invoke("aws:connect/getRoutingProfile:getRoutingProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRoutingProfile.
type LookupRoutingProfileArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId string `pulumi:"instanceId"`
	// Returns information on a specific Routing Profile by name
	Name *string `pulumi:"name"`
	// Returns information on a specific Routing Profile by Routing Profile id
	RoutingProfileId *string `pulumi:"routingProfileId"`
	// Map of tags to assign to the Routing Profile.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getRoutingProfile.
type LookupRoutingProfileResult struct {
	// ARN of the Routing Profile.
	Arn string `pulumi:"arn"`
	// Specifies the default outbound queue for the Routing Profile.
	DefaultOutboundQueueId string `pulumi:"defaultOutboundQueueId"`
	// Description of the Routing Profile.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// One or more `mediaConcurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `mediaConcurrencies` block is documented below.
	MediaConcurrencies []GetRoutingProfileMediaConcurrency `pulumi:"mediaConcurrencies"`
	Name               string                              `pulumi:"name"`
	// One or more `queueConfigs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queueConfigs` block is documented below.
	QueueConfigs     []GetRoutingProfileQueueConfig `pulumi:"queueConfigs"`
	RoutingProfileId string                         `pulumi:"routingProfileId"`
	// Map of tags to assign to the Routing Profile.
	Tags map[string]string `pulumi:"tags"`
}

func LookupRoutingProfileOutput(ctx *pulumi.Context, args LookupRoutingProfileOutputArgs, opts ...pulumi.InvokeOption) LookupRoutingProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRoutingProfileResult, error) {
			args := v.(LookupRoutingProfileArgs)
			r, err := LookupRoutingProfile(ctx, &args, opts...)
			var s LookupRoutingProfileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRoutingProfileResultOutput)
}

// A collection of arguments for invoking getRoutingProfile.
type LookupRoutingProfileOutputArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Returns information on a specific Routing Profile by name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Returns information on a specific Routing Profile by Routing Profile id
	RoutingProfileId pulumi.StringPtrInput `pulumi:"routingProfileId"`
	// Map of tags to assign to the Routing Profile.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupRoutingProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoutingProfileArgs)(nil)).Elem()
}

// A collection of values returned by getRoutingProfile.
type LookupRoutingProfileResultOutput struct{ *pulumi.OutputState }

func (LookupRoutingProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoutingProfileResult)(nil)).Elem()
}

func (o LookupRoutingProfileResultOutput) ToLookupRoutingProfileResultOutput() LookupRoutingProfileResultOutput {
	return o
}

func (o LookupRoutingProfileResultOutput) ToLookupRoutingProfileResultOutputWithContext(ctx context.Context) LookupRoutingProfileResultOutput {
	return o
}

// ARN of the Routing Profile.
func (o LookupRoutingProfileResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoutingProfileResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Specifies the default outbound queue for the Routing Profile.
func (o LookupRoutingProfileResultOutput) DefaultOutboundQueueId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoutingProfileResult) string { return v.DefaultOutboundQueueId }).(pulumi.StringOutput)
}

// Description of the Routing Profile.
func (o LookupRoutingProfileResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoutingProfileResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRoutingProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoutingProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRoutingProfileResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoutingProfileResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// One or more `mediaConcurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `mediaConcurrencies` block is documented below.
func (o LookupRoutingProfileResultOutput) MediaConcurrencies() GetRoutingProfileMediaConcurrencyArrayOutput {
	return o.ApplyT(func(v LookupRoutingProfileResult) []GetRoutingProfileMediaConcurrency { return v.MediaConcurrencies }).(GetRoutingProfileMediaConcurrencyArrayOutput)
}

func (o LookupRoutingProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoutingProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

// One or more `queueConfigs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queueConfigs` block is documented below.
func (o LookupRoutingProfileResultOutput) QueueConfigs() GetRoutingProfileQueueConfigArrayOutput {
	return o.ApplyT(func(v LookupRoutingProfileResult) []GetRoutingProfileQueueConfig { return v.QueueConfigs }).(GetRoutingProfileQueueConfigArrayOutput)
}

func (o LookupRoutingProfileResultOutput) RoutingProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoutingProfileResult) string { return v.RoutingProfileId }).(pulumi.StringOutput)
}

// Map of tags to assign to the Routing Profile.
func (o LookupRoutingProfileResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRoutingProfileResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRoutingProfileResultOutput{})
}
