// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type QuickConnect struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput                  `pulumi:"arn"`
	Description        pulumi.StringPtrOutput               `pulumi:"description"`
	InstanceId         pulumi.StringOutput                  `pulumi:"instanceId"`
	Name               pulumi.StringOutput                  `pulumi:"name"`
	QuickConnectConfig QuickConnectQuickConnectConfigOutput `pulumi:"quickConnectConfig"`
	QuickConnectId     pulumi.StringOutput                  `pulumi:"quickConnectId"`
	Tags               pulumi.StringMapOutput               `pulumi:"tags"`
	TagsAll            pulumi.StringMapOutput               `pulumi:"tagsAll"`
}

// NewQuickConnect registers a new resource with the given unique name, arguments, and options.
func NewQuickConnect(ctx *pulumi.Context,
	name string, args *QuickConnectArgs, opts ...pulumi.ResourceOption) (*QuickConnect, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.QuickConnectConfig == nil {
		return nil, errors.New("invalid value for required argument 'QuickConnectConfig'")
	}
	var resource QuickConnect
	err := ctx.RegisterResource("aws:connect/quickConnect:QuickConnect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQuickConnect gets an existing QuickConnect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQuickConnect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QuickConnectState, opts ...pulumi.ResourceOption) (*QuickConnect, error) {
	var resource QuickConnect
	err := ctx.ReadResource("aws:connect/quickConnect:QuickConnect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QuickConnect resources.
type quickConnectState struct {
	Arn                *string                         `pulumi:"arn"`
	Description        *string                         `pulumi:"description"`
	InstanceId         *string                         `pulumi:"instanceId"`
	Name               *string                         `pulumi:"name"`
	QuickConnectConfig *QuickConnectQuickConnectConfig `pulumi:"quickConnectConfig"`
	QuickConnectId     *string                         `pulumi:"quickConnectId"`
	Tags               map[string]string               `pulumi:"tags"`
	TagsAll            map[string]string               `pulumi:"tagsAll"`
}

type QuickConnectState struct {
	Arn                pulumi.StringPtrInput
	Description        pulumi.StringPtrInput
	InstanceId         pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	QuickConnectConfig QuickConnectQuickConnectConfigPtrInput
	QuickConnectId     pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	TagsAll            pulumi.StringMapInput
}

func (QuickConnectState) ElementType() reflect.Type {
	return reflect.TypeOf((*quickConnectState)(nil)).Elem()
}

type quickConnectArgs struct {
	Description        *string                        `pulumi:"description"`
	InstanceId         string                         `pulumi:"instanceId"`
	Name               *string                        `pulumi:"name"`
	QuickConnectConfig QuickConnectQuickConnectConfig `pulumi:"quickConnectConfig"`
	Tags               map[string]string              `pulumi:"tags"`
}

// The set of arguments for constructing a QuickConnect resource.
type QuickConnectArgs struct {
	Description        pulumi.StringPtrInput
	InstanceId         pulumi.StringInput
	Name               pulumi.StringPtrInput
	QuickConnectConfig QuickConnectQuickConnectConfigInput
	Tags               pulumi.StringMapInput
}

func (QuickConnectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*quickConnectArgs)(nil)).Elem()
}

type QuickConnectInput interface {
	pulumi.Input

	ToQuickConnectOutput() QuickConnectOutput
	ToQuickConnectOutputWithContext(ctx context.Context) QuickConnectOutput
}

func (*QuickConnect) ElementType() reflect.Type {
	return reflect.TypeOf((**QuickConnect)(nil)).Elem()
}

func (i *QuickConnect) ToQuickConnectOutput() QuickConnectOutput {
	return i.ToQuickConnectOutputWithContext(context.Background())
}

func (i *QuickConnect) ToQuickConnectOutputWithContext(ctx context.Context) QuickConnectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectOutput)
}

// QuickConnectArrayInput is an input type that accepts QuickConnectArray and QuickConnectArrayOutput values.
// You can construct a concrete instance of `QuickConnectArrayInput` via:
//
//	QuickConnectArray{ QuickConnectArgs{...} }
type QuickConnectArrayInput interface {
	pulumi.Input

	ToQuickConnectArrayOutput() QuickConnectArrayOutput
	ToQuickConnectArrayOutputWithContext(context.Context) QuickConnectArrayOutput
}

type QuickConnectArray []QuickConnectInput

func (QuickConnectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QuickConnect)(nil)).Elem()
}

func (i QuickConnectArray) ToQuickConnectArrayOutput() QuickConnectArrayOutput {
	return i.ToQuickConnectArrayOutputWithContext(context.Background())
}

func (i QuickConnectArray) ToQuickConnectArrayOutputWithContext(ctx context.Context) QuickConnectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectArrayOutput)
}

// QuickConnectMapInput is an input type that accepts QuickConnectMap and QuickConnectMapOutput values.
// You can construct a concrete instance of `QuickConnectMapInput` via:
//
//	QuickConnectMap{ "key": QuickConnectArgs{...} }
type QuickConnectMapInput interface {
	pulumi.Input

	ToQuickConnectMapOutput() QuickConnectMapOutput
	ToQuickConnectMapOutputWithContext(context.Context) QuickConnectMapOutput
}

type QuickConnectMap map[string]QuickConnectInput

func (QuickConnectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QuickConnect)(nil)).Elem()
}

func (i QuickConnectMap) ToQuickConnectMapOutput() QuickConnectMapOutput {
	return i.ToQuickConnectMapOutputWithContext(context.Background())
}

func (i QuickConnectMap) ToQuickConnectMapOutputWithContext(ctx context.Context) QuickConnectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectMapOutput)
}

type QuickConnectOutput struct{ *pulumi.OutputState }

func (QuickConnectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuickConnect)(nil)).Elem()
}

func (o QuickConnectOutput) ToQuickConnectOutput() QuickConnectOutput {
	return o
}

func (o QuickConnectOutput) ToQuickConnectOutputWithContext(ctx context.Context) QuickConnectOutput {
	return o
}

func (o QuickConnectOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *QuickConnect) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o QuickConnectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuickConnect) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o QuickConnectOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *QuickConnect) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o QuickConnectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *QuickConnect) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o QuickConnectOutput) QuickConnectConfig() QuickConnectQuickConnectConfigOutput {
	return o.ApplyT(func(v *QuickConnect) QuickConnectQuickConnectConfigOutput { return v.QuickConnectConfig }).(QuickConnectQuickConnectConfigOutput)
}

func (o QuickConnectOutput) QuickConnectId() pulumi.StringOutput {
	return o.ApplyT(func(v *QuickConnect) pulumi.StringOutput { return v.QuickConnectId }).(pulumi.StringOutput)
}

func (o QuickConnectOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *QuickConnect) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o QuickConnectOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *QuickConnect) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type QuickConnectArrayOutput struct{ *pulumi.OutputState }

func (QuickConnectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QuickConnect)(nil)).Elem()
}

func (o QuickConnectArrayOutput) ToQuickConnectArrayOutput() QuickConnectArrayOutput {
	return o
}

func (o QuickConnectArrayOutput) ToQuickConnectArrayOutputWithContext(ctx context.Context) QuickConnectArrayOutput {
	return o
}

func (o QuickConnectArrayOutput) Index(i pulumi.IntInput) QuickConnectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QuickConnect {
		return vs[0].([]*QuickConnect)[vs[1].(int)]
	}).(QuickConnectOutput)
}

type QuickConnectMapOutput struct{ *pulumi.OutputState }

func (QuickConnectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QuickConnect)(nil)).Elem()
}

func (o QuickConnectMapOutput) ToQuickConnectMapOutput() QuickConnectMapOutput {
	return o
}

func (o QuickConnectMapOutput) ToQuickConnectMapOutputWithContext(ctx context.Context) QuickConnectMapOutput {
	return o
}

func (o QuickConnectMapOutput) MapIndex(k pulumi.StringInput) QuickConnectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QuickConnect {
		return vs[0].(map[string]*QuickConnect)[vs[1].(string)]
	}).(QuickConnectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectInput)(nil)).Elem(), &QuickConnect{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectArrayInput)(nil)).Elem(), QuickConnectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectMapInput)(nil)).Elem(), QuickConnectMap{})
	pulumi.RegisterOutputType(QuickConnectOutput{})
	pulumi.RegisterOutputType(QuickConnectArrayOutput{})
	pulumi.RegisterOutputType(QuickConnectMapOutput{})
}
