// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scheduler

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an EventBridge Scheduler Schedule resource.
//
// You can find out more about EventBridge Scheduler in the [User Guide](https://docs.aws.amazon.com/scheduler/latest/UserGuide/what-is-scheduler.html).
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/scheduler"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scheduler.NewSchedule(ctx, "example", &scheduler.ScheduleArgs{
//				GroupName: pulumi.String("default"),
//				FlexibleTimeWindow: &scheduler.ScheduleFlexibleTimeWindowArgs{
//					Mode: pulumi.String("OFF"),
//				},
//				ScheduleExpression: pulumi.String("rate(1 hours)"),
//				Target: &scheduler.ScheduleTargetArgs{
//					Arn:     pulumi.Any(aws_sqs_queue.Example.Arn),
//					RoleArn: pulumi.Any(aws_iam_role.Example.Arn),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Universal Target
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/scheduler"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/sqs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleQueue, err := sqs.NewQueue(ctx, "exampleQueue", nil)
//			if err != nil {
//				return err
//			}
//			_, err = scheduler.NewSchedule(ctx, "exampleSchedule", &scheduler.ScheduleArgs{
//				FlexibleTimeWindow: &scheduler.ScheduleFlexibleTimeWindowArgs{
//					Mode: pulumi.String("OFF"),
//				},
//				ScheduleExpression: pulumi.String("rate(1 hours)"),
//				Target: &scheduler.ScheduleTargetArgs{
//					Arn:     pulumi.String("arn:aws:scheduler:::aws-sdk:sqs:sendMessage"),
//					RoleArn: pulumi.Any(aws_iam_role.Example.Arn),
//					Input: exampleQueue.Url.ApplyT(func(url string) (pulumi.String, error) {
//						var _zero pulumi.String
//						tmpJSON0, err := json.Marshal(map[string]interface{}{
//							"MessageBody": "Greetings, programs!",
//							"QueueUrl":    url,
//						})
//						if err != nil {
//							return _zero, err
//						}
//						json0 := string(tmpJSON0)
//						return pulumi.String(json0), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Schedules can be imported using the combination `group_name/name`. For example
//
// ```sh
//
//	$ pulumi import aws:scheduler/schedule:Schedule example my-schedule-group/my-schedule
//
// ```
type Schedule struct {
	pulumi.CustomResourceState

	// ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a [Service ARN specific to the target service](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html#supported-universal-targets).
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Brief description of the schedule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	EndDate pulumi.StringPtrOutput `pulumi:"endDate"`
	// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
	FlexibleTimeWindow ScheduleFlexibleTimeWindowOutput `pulumi:"flexibleTimeWindow"`
	// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
	KmsKeyArn pulumi.StringPtrOutput `pulumi:"kmsKeyArn"`
	// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
	// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
	ScheduleExpression pulumi.StringOutput `pulumi:"scheduleExpression"`
	// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
	ScheduleExpressionTimezone pulumi.StringPtrOutput `pulumi:"scheduleExpressionTimezone"`
	// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	StartDate pulumi.StringPtrOutput `pulumi:"startDate"`
	// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// Configures the target of the schedule. Detailed below.
	//
	// The following arguments are optional:
	Target ScheduleTargetOutput `pulumi:"target"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlexibleTimeWindow == nil {
		return nil, errors.New("invalid value for required argument 'FlexibleTimeWindow'")
	}
	if args.ScheduleExpression == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleExpression'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	var resource Schedule
	err := ctx.RegisterResource("aws:scheduler/schedule:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("aws:scheduler/schedule:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
	// ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a [Service ARN specific to the target service](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html#supported-universal-targets).
	Arn *string `pulumi:"arn"`
	// Brief description of the schedule.
	Description *string `pulumi:"description"`
	// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	EndDate *string `pulumi:"endDate"`
	// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
	FlexibleTimeWindow *ScheduleFlexibleTimeWindow `pulumi:"flexibleTimeWindow"`
	// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
	GroupName *string `pulumi:"groupName"`
	// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
	ScheduleExpression *string `pulumi:"scheduleExpression"`
	// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
	ScheduleExpressionTimezone *string `pulumi:"scheduleExpressionTimezone"`
	// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	StartDate *string `pulumi:"startDate"`
	// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
	State *string `pulumi:"state"`
	// Configures the target of the schedule. Detailed below.
	//
	// The following arguments are optional:
	Target *ScheduleTarget `pulumi:"target"`
}

type ScheduleState struct {
	// ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a [Service ARN specific to the target service](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html#supported-universal-targets).
	Arn pulumi.StringPtrInput
	// Brief description of the schedule.
	Description pulumi.StringPtrInput
	// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	EndDate pulumi.StringPtrInput
	// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
	FlexibleTimeWindow ScheduleFlexibleTimeWindowPtrInput
	// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
	GroupName pulumi.StringPtrInput
	// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
	KmsKeyArn pulumi.StringPtrInput
	// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
	ScheduleExpression pulumi.StringPtrInput
	// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
	ScheduleExpressionTimezone pulumi.StringPtrInput
	// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	StartDate pulumi.StringPtrInput
	// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
	State pulumi.StringPtrInput
	// Configures the target of the schedule. Detailed below.
	//
	// The following arguments are optional:
	Target ScheduleTargetPtrInput
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	// Brief description of the schedule.
	Description *string `pulumi:"description"`
	// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	EndDate *string `pulumi:"endDate"`
	// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
	FlexibleTimeWindow ScheduleFlexibleTimeWindow `pulumi:"flexibleTimeWindow"`
	// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
	GroupName *string `pulumi:"groupName"`
	// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
	ScheduleExpression string `pulumi:"scheduleExpression"`
	// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
	ScheduleExpressionTimezone *string `pulumi:"scheduleExpressionTimezone"`
	// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	StartDate *string `pulumi:"startDate"`
	// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
	State *string `pulumi:"state"`
	// Configures the target of the schedule. Detailed below.
	//
	// The following arguments are optional:
	Target ScheduleTarget `pulumi:"target"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// Brief description of the schedule.
	Description pulumi.StringPtrInput
	// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	EndDate pulumi.StringPtrInput
	// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
	FlexibleTimeWindow ScheduleFlexibleTimeWindowInput
	// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
	GroupName pulumi.StringPtrInput
	// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
	KmsKeyArn pulumi.StringPtrInput
	// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
	ScheduleExpression pulumi.StringInput
	// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
	ScheduleExpressionTimezone pulumi.StringPtrInput
	// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
	StartDate pulumi.StringPtrInput
	// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
	State pulumi.StringPtrInput
	// Configures the target of the schedule. Detailed below.
	//
	// The following arguments are optional:
	Target ScheduleTargetInput
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput
}

func (*Schedule) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *Schedule) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i *Schedule) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

// ScheduleArrayInput is an input type that accepts ScheduleArray and ScheduleArrayOutput values.
// You can construct a concrete instance of `ScheduleArrayInput` via:
//
//	ScheduleArray{ ScheduleArgs{...} }
type ScheduleArrayInput interface {
	pulumi.Input

	ToScheduleArrayOutput() ScheduleArrayOutput
	ToScheduleArrayOutputWithContext(context.Context) ScheduleArrayOutput
}

type ScheduleArray []ScheduleInput

func (ScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schedule)(nil)).Elem()
}

func (i ScheduleArray) ToScheduleArrayOutput() ScheduleArrayOutput {
	return i.ToScheduleArrayOutputWithContext(context.Background())
}

func (i ScheduleArray) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleArrayOutput)
}

// ScheduleMapInput is an input type that accepts ScheduleMap and ScheduleMapOutput values.
// You can construct a concrete instance of `ScheduleMapInput` via:
//
//	ScheduleMap{ "key": ScheduleArgs{...} }
type ScheduleMapInput interface {
	pulumi.Input

	ToScheduleMapOutput() ScheduleMapOutput
	ToScheduleMapOutputWithContext(context.Context) ScheduleMapOutput
}

type ScheduleMap map[string]ScheduleInput

func (ScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schedule)(nil)).Elem()
}

func (i ScheduleMap) ToScheduleMapOutput() ScheduleMapOutput {
	return i.ToScheduleMapOutputWithContext(context.Background())
}

func (i ScheduleMap) ToScheduleMapOutputWithContext(ctx context.Context) ScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleMapOutput)
}

type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

// ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a [Service ARN specific to the target service](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html#supported-universal-targets).
func (o ScheduleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Brief description of the schedule.
func (o ScheduleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the end date you specify. EventBridge Scheduler ignores the end date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
func (o ScheduleOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.EndDate }).(pulumi.StringPtrOutput)
}

// Configures a time window during which EventBridge Scheduler invokes the schedule. Detailed below.
func (o ScheduleOutput) FlexibleTimeWindow() ScheduleFlexibleTimeWindowOutput {
	return o.ApplyT(func(v *Schedule) ScheduleFlexibleTimeWindowOutput { return v.FlexibleTimeWindow }).(ScheduleFlexibleTimeWindowOutput)
}

// Name of the schedule group to associate with this schedule. When omitted, the `default` schedule group is used.
func (o ScheduleOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// ARN for the customer managed KMS key that EventBridge Scheduler will use to encrypt and decrypt your data.
func (o ScheduleOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// Name of the schedule. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o ScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o ScheduleOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

// Defines when the schedule runs. Read more in [Schedule types on EventBridge Scheduler](https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html).
func (o ScheduleOutput) ScheduleExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.ScheduleExpression }).(pulumi.StringOutput)
}

// Timezone in which the scheduling expression is evaluated. Defaults to `UTC`. Example: `Australia/Sydney`.
func (o ScheduleOutput) ScheduleExpressionTimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.ScheduleExpressionTimezone }).(pulumi.StringPtrOutput)
}

// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the start date you specify. EventBridge Scheduler ignores the start date for one-time schedules. Example: `2030-01-01T01:00:00Z`.
func (o ScheduleOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Specifies whether the schedule is enabled or disabled. One of: `ENABLED` (default), `DISABLED`.
func (o ScheduleOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// Configures the target of the schedule. Detailed below.
//
// The following arguments are optional:
func (o ScheduleOutput) Target() ScheduleTargetOutput {
	return o.ApplyT(func(v *Schedule) ScheduleTargetOutput { return v.Target }).(ScheduleTargetOutput)
}

type ScheduleArrayOutput struct{ *pulumi.OutputState }

func (ScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schedule)(nil)).Elem()
}

func (o ScheduleArrayOutput) ToScheduleArrayOutput() ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) Index(i pulumi.IntInput) ScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Schedule {
		return vs[0].([]*Schedule)[vs[1].(int)]
	}).(ScheduleOutput)
}

type ScheduleMapOutput struct{ *pulumi.OutputState }

func (ScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schedule)(nil)).Elem()
}

func (o ScheduleMapOutput) ToScheduleMapOutput() ScheduleMapOutput {
	return o
}

func (o ScheduleMapOutput) ToScheduleMapOutputWithContext(ctx context.Context) ScheduleMapOutput {
	return o
}

func (o ScheduleMapOutput) MapIndex(k pulumi.StringInput) ScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Schedule {
		return vs[0].(map[string]*Schedule)[vs[1].(string)]
	}).(ScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleInput)(nil)).Elem(), &Schedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleArrayInput)(nil)).Elem(), ScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleMapInput)(nil)).Elem(), ScheduleMap{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(ScheduleArrayOutput{})
	pulumi.RegisterOutputType(ScheduleMapOutput{})
}
