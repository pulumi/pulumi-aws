// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecrpublic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Public ECR Authorization Token data source allows the authorization token, token expiration date, user name, and password to be retrieved for a Public ECR repository.
//
// > **NOTE:** This data source can only be used in the `us-east-1` region.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ecrpublic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecrpublic.GetAuthorizationToken(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAuthorizationToken(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetAuthorizationTokenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAuthorizationTokenResult
	err := ctx.Invoke("aws:ecrpublic/getAuthorizationToken:getAuthorizationToken", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getAuthorizationToken.
type GetAuthorizationTokenResult struct {
	// Temporary IAM authentication credentials to access the ECR repository encoded in base64 in the form of `user_name:password`.
	AuthorizationToken string `pulumi:"authorizationToken"`
	// Time in UTC RFC3339 format when the authorization token expires.
	ExpiresAt string `pulumi:"expiresAt"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Password decoded from the authorization token.
	Password string `pulumi:"password"`
	// User name decoded from the authorization token.
	UserName string `pulumi:"userName"`
}

func GetAuthorizationTokenOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetAuthorizationTokenResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetAuthorizationTokenResult, error) {
		r, err := GetAuthorizationToken(ctx, opts...)
		var s GetAuthorizationTokenResult
		if r != nil {
			s = *r
		}
		return s, err
	}).(GetAuthorizationTokenResultOutput)
}

// A collection of values returned by getAuthorizationToken.
type GetAuthorizationTokenResultOutput struct{ *pulumi.OutputState }

func (GetAuthorizationTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthorizationTokenResult)(nil)).Elem()
}

func (o GetAuthorizationTokenResultOutput) ToGetAuthorizationTokenResultOutput() GetAuthorizationTokenResultOutput {
	return o
}

func (o GetAuthorizationTokenResultOutput) ToGetAuthorizationTokenResultOutputWithContext(ctx context.Context) GetAuthorizationTokenResultOutput {
	return o
}

// Temporary IAM authentication credentials to access the ECR repository encoded in base64 in the form of `user_name:password`.
func (o GetAuthorizationTokenResultOutput) AuthorizationToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthorizationTokenResult) string { return v.AuthorizationToken }).(pulumi.StringOutput)
}

// Time in UTC RFC3339 format when the authorization token expires.
func (o GetAuthorizationTokenResultOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthorizationTokenResult) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAuthorizationTokenResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthorizationTokenResult) string { return v.Id }).(pulumi.StringOutput)
}

// Password decoded from the authorization token.
func (o GetAuthorizationTokenResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthorizationTokenResult) string { return v.Password }).(pulumi.StringOutput)
}

// User name decoded from the authorization token.
func (o GetAuthorizationTokenResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthorizationTokenResult) string { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAuthorizationTokenResultOutput{})
}
