// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type MeshSpec struct {
	EgressFilter *MeshSpecEgressFilter `pulumi:"egressFilter"`
}

// MeshSpecInput is an input type that accepts MeshSpecArgs and MeshSpecOutput values.
// You can construct a concrete instance of `MeshSpecInput` via:
//
// 		 MeshSpecArgs{...}
//
type MeshSpecInput interface {
	pulumi.Input

	ToMeshSpecOutput() MeshSpecOutput
	ToMeshSpecOutputWithContext(context.Context) MeshSpecOutput
}

type MeshSpecArgs struct {
	EgressFilter MeshSpecEgressFilterPtrInput `pulumi:"egressFilter"`
}

func (MeshSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshSpec)(nil)).Elem()
}

func (i MeshSpecArgs) ToMeshSpecOutput() MeshSpecOutput {
	return i.ToMeshSpecOutputWithContext(context.Background())
}

func (i MeshSpecArgs) ToMeshSpecOutputWithContext(ctx context.Context) MeshSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshSpecOutput)
}

func (i MeshSpecArgs) ToMeshSpecPtrOutput() MeshSpecPtrOutput {
	return i.ToMeshSpecPtrOutputWithContext(context.Background())
}

func (i MeshSpecArgs) ToMeshSpecPtrOutputWithContext(ctx context.Context) MeshSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshSpecOutput).ToMeshSpecPtrOutputWithContext(ctx)
}

// MeshSpecPtrInput is an input type that accepts MeshSpecArgs, MeshSpecPtr and MeshSpecPtrOutput values.
// You can construct a concrete instance of `MeshSpecPtrInput` via:
//
// 		 MeshSpecArgs{...}
//
//  or:
//
// 		 nil
//
type MeshSpecPtrInput interface {
	pulumi.Input

	ToMeshSpecPtrOutput() MeshSpecPtrOutput
	ToMeshSpecPtrOutputWithContext(context.Context) MeshSpecPtrOutput
}

type meshSpecPtrType MeshSpecArgs

func MeshSpecPtr(v *MeshSpecArgs) MeshSpecPtrInput {
	return (*meshSpecPtrType)(v)
}

func (*meshSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MeshSpec)(nil)).Elem()
}

func (i *meshSpecPtrType) ToMeshSpecPtrOutput() MeshSpecPtrOutput {
	return i.ToMeshSpecPtrOutputWithContext(context.Background())
}

func (i *meshSpecPtrType) ToMeshSpecPtrOutputWithContext(ctx context.Context) MeshSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshSpecPtrOutput)
}

type MeshSpecOutput struct{ *pulumi.OutputState }

func (MeshSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshSpec)(nil)).Elem()
}

func (o MeshSpecOutput) ToMeshSpecOutput() MeshSpecOutput {
	return o
}

func (o MeshSpecOutput) ToMeshSpecOutputWithContext(ctx context.Context) MeshSpecOutput {
	return o
}

func (o MeshSpecOutput) ToMeshSpecPtrOutput() MeshSpecPtrOutput {
	return o.ToMeshSpecPtrOutputWithContext(context.Background())
}

func (o MeshSpecOutput) ToMeshSpecPtrOutputWithContext(ctx context.Context) MeshSpecPtrOutput {
	return o.ApplyT(func(v MeshSpec) *MeshSpec {
		return &v
	}).(MeshSpecPtrOutput)
}
func (o MeshSpecOutput) EgressFilter() MeshSpecEgressFilterPtrOutput {
	return o.ApplyT(func(v MeshSpec) *MeshSpecEgressFilter { return v.EgressFilter }).(MeshSpecEgressFilterPtrOutput)
}

type MeshSpecPtrOutput struct{ *pulumi.OutputState }

func (MeshSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeshSpec)(nil)).Elem()
}

func (o MeshSpecPtrOutput) ToMeshSpecPtrOutput() MeshSpecPtrOutput {
	return o
}

func (o MeshSpecPtrOutput) ToMeshSpecPtrOutputWithContext(ctx context.Context) MeshSpecPtrOutput {
	return o
}

func (o MeshSpecPtrOutput) Elem() MeshSpecOutput {
	return o.ApplyT(func(v *MeshSpec) MeshSpec { return *v }).(MeshSpecOutput)
}

func (o MeshSpecPtrOutput) EgressFilter() MeshSpecEgressFilterPtrOutput {
	return o.ApplyT(func(v MeshSpec) *MeshSpecEgressFilter { return v.EgressFilter }).(MeshSpecEgressFilterPtrOutput)
}

type MeshSpecEgressFilter struct {
	// The egress filter type. By default, the type is `DROP_ALL`.
	// Valid values are `ALLOW_ALL` and `DROP_ALL`.
	Type *string `pulumi:"type"`
}

// MeshSpecEgressFilterInput is an input type that accepts MeshSpecEgressFilterArgs and MeshSpecEgressFilterOutput values.
// You can construct a concrete instance of `MeshSpecEgressFilterInput` via:
//
// 		 MeshSpecEgressFilterArgs{...}
//
type MeshSpecEgressFilterInput interface {
	pulumi.Input

	ToMeshSpecEgressFilterOutput() MeshSpecEgressFilterOutput
	ToMeshSpecEgressFilterOutputWithContext(context.Context) MeshSpecEgressFilterOutput
}

type MeshSpecEgressFilterArgs struct {
	// The egress filter type. By default, the type is `DROP_ALL`.
	// Valid values are `ALLOW_ALL` and `DROP_ALL`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MeshSpecEgressFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshSpecEgressFilter)(nil)).Elem()
}

func (i MeshSpecEgressFilterArgs) ToMeshSpecEgressFilterOutput() MeshSpecEgressFilterOutput {
	return i.ToMeshSpecEgressFilterOutputWithContext(context.Background())
}

func (i MeshSpecEgressFilterArgs) ToMeshSpecEgressFilterOutputWithContext(ctx context.Context) MeshSpecEgressFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshSpecEgressFilterOutput)
}

func (i MeshSpecEgressFilterArgs) ToMeshSpecEgressFilterPtrOutput() MeshSpecEgressFilterPtrOutput {
	return i.ToMeshSpecEgressFilterPtrOutputWithContext(context.Background())
}

func (i MeshSpecEgressFilterArgs) ToMeshSpecEgressFilterPtrOutputWithContext(ctx context.Context) MeshSpecEgressFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshSpecEgressFilterOutput).ToMeshSpecEgressFilterPtrOutputWithContext(ctx)
}

// MeshSpecEgressFilterPtrInput is an input type that accepts MeshSpecEgressFilterArgs, MeshSpecEgressFilterPtr and MeshSpecEgressFilterPtrOutput values.
// You can construct a concrete instance of `MeshSpecEgressFilterPtrInput` via:
//
// 		 MeshSpecEgressFilterArgs{...}
//
//  or:
//
// 		 nil
//
type MeshSpecEgressFilterPtrInput interface {
	pulumi.Input

	ToMeshSpecEgressFilterPtrOutput() MeshSpecEgressFilterPtrOutput
	ToMeshSpecEgressFilterPtrOutputWithContext(context.Context) MeshSpecEgressFilterPtrOutput
}

type meshSpecEgressFilterPtrType MeshSpecEgressFilterArgs

func MeshSpecEgressFilterPtr(v *MeshSpecEgressFilterArgs) MeshSpecEgressFilterPtrInput {
	return (*meshSpecEgressFilterPtrType)(v)
}

func (*meshSpecEgressFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MeshSpecEgressFilter)(nil)).Elem()
}

func (i *meshSpecEgressFilterPtrType) ToMeshSpecEgressFilterPtrOutput() MeshSpecEgressFilterPtrOutput {
	return i.ToMeshSpecEgressFilterPtrOutputWithContext(context.Background())
}

func (i *meshSpecEgressFilterPtrType) ToMeshSpecEgressFilterPtrOutputWithContext(ctx context.Context) MeshSpecEgressFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshSpecEgressFilterPtrOutput)
}

type MeshSpecEgressFilterOutput struct{ *pulumi.OutputState }

func (MeshSpecEgressFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshSpecEgressFilter)(nil)).Elem()
}

func (o MeshSpecEgressFilterOutput) ToMeshSpecEgressFilterOutput() MeshSpecEgressFilterOutput {
	return o
}

func (o MeshSpecEgressFilterOutput) ToMeshSpecEgressFilterOutputWithContext(ctx context.Context) MeshSpecEgressFilterOutput {
	return o
}

func (o MeshSpecEgressFilterOutput) ToMeshSpecEgressFilterPtrOutput() MeshSpecEgressFilterPtrOutput {
	return o.ToMeshSpecEgressFilterPtrOutputWithContext(context.Background())
}

func (o MeshSpecEgressFilterOutput) ToMeshSpecEgressFilterPtrOutputWithContext(ctx context.Context) MeshSpecEgressFilterPtrOutput {
	return o.ApplyT(func(v MeshSpecEgressFilter) *MeshSpecEgressFilter {
		return &v
	}).(MeshSpecEgressFilterPtrOutput)
}

// The egress filter type. By default, the type is `DROP_ALL`.
// Valid values are `ALLOW_ALL` and `DROP_ALL`.
func (o MeshSpecEgressFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MeshSpecEgressFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MeshSpecEgressFilterPtrOutput struct{ *pulumi.OutputState }

func (MeshSpecEgressFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeshSpecEgressFilter)(nil)).Elem()
}

func (o MeshSpecEgressFilterPtrOutput) ToMeshSpecEgressFilterPtrOutput() MeshSpecEgressFilterPtrOutput {
	return o
}

func (o MeshSpecEgressFilterPtrOutput) ToMeshSpecEgressFilterPtrOutputWithContext(ctx context.Context) MeshSpecEgressFilterPtrOutput {
	return o
}

func (o MeshSpecEgressFilterPtrOutput) Elem() MeshSpecEgressFilterOutput {
	return o.ApplyT(func(v *MeshSpecEgressFilter) MeshSpecEgressFilter { return *v }).(MeshSpecEgressFilterOutput)
}

// The egress filter type. By default, the type is `DROP_ALL`.
// Valid values are `ALLOW_ALL` and `DROP_ALL`.
func (o MeshSpecEgressFilterPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MeshSpecEgressFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RouteSpec struct {
	// The HTTP routing information for the route.
	HttpRoute *RouteSpecHttpRoute `pulumi:"httpRoute"`
	// The priority for the route, between `0` and `1000`.
	// Routes are matched based on the specified value, where `0` is the highest priority.
	Priority *int `pulumi:"priority"`
	// The TCP routing information for the route.
	TcpRoute *RouteSpecTcpRoute `pulumi:"tcpRoute"`
}

// RouteSpecInput is an input type that accepts RouteSpecArgs and RouteSpecOutput values.
// You can construct a concrete instance of `RouteSpecInput` via:
//
// 		 RouteSpecArgs{...}
//
type RouteSpecInput interface {
	pulumi.Input

	ToRouteSpecOutput() RouteSpecOutput
	ToRouteSpecOutputWithContext(context.Context) RouteSpecOutput
}

type RouteSpecArgs struct {
	// The HTTP routing information for the route.
	HttpRoute RouteSpecHttpRoutePtrInput `pulumi:"httpRoute"`
	// The priority for the route, between `0` and `1000`.
	// Routes are matched based on the specified value, where `0` is the highest priority.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The TCP routing information for the route.
	TcpRoute RouteSpecTcpRoutePtrInput `pulumi:"tcpRoute"`
}

func (RouteSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpec)(nil)).Elem()
}

func (i RouteSpecArgs) ToRouteSpecOutput() RouteSpecOutput {
	return i.ToRouteSpecOutputWithContext(context.Background())
}

func (i RouteSpecArgs) ToRouteSpecOutputWithContext(ctx context.Context) RouteSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecOutput)
}

func (i RouteSpecArgs) ToRouteSpecPtrOutput() RouteSpecPtrOutput {
	return i.ToRouteSpecPtrOutputWithContext(context.Background())
}

func (i RouteSpecArgs) ToRouteSpecPtrOutputWithContext(ctx context.Context) RouteSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecOutput).ToRouteSpecPtrOutputWithContext(ctx)
}

// RouteSpecPtrInput is an input type that accepts RouteSpecArgs, RouteSpecPtr and RouteSpecPtrOutput values.
// You can construct a concrete instance of `RouteSpecPtrInput` via:
//
// 		 RouteSpecArgs{...}
//
//  or:
//
// 		 nil
//
type RouteSpecPtrInput interface {
	pulumi.Input

	ToRouteSpecPtrOutput() RouteSpecPtrOutput
	ToRouteSpecPtrOutputWithContext(context.Context) RouteSpecPtrOutput
}

type routeSpecPtrType RouteSpecArgs

func RouteSpecPtr(v *RouteSpecArgs) RouteSpecPtrInput {
	return (*routeSpecPtrType)(v)
}

func (*routeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpec)(nil)).Elem()
}

func (i *routeSpecPtrType) ToRouteSpecPtrOutput() RouteSpecPtrOutput {
	return i.ToRouteSpecPtrOutputWithContext(context.Background())
}

func (i *routeSpecPtrType) ToRouteSpecPtrOutputWithContext(ctx context.Context) RouteSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecPtrOutput)
}

type RouteSpecOutput struct{ *pulumi.OutputState }

func (RouteSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpec)(nil)).Elem()
}

func (o RouteSpecOutput) ToRouteSpecOutput() RouteSpecOutput {
	return o
}

func (o RouteSpecOutput) ToRouteSpecOutputWithContext(ctx context.Context) RouteSpecOutput {
	return o
}

func (o RouteSpecOutput) ToRouteSpecPtrOutput() RouteSpecPtrOutput {
	return o.ToRouteSpecPtrOutputWithContext(context.Background())
}

func (o RouteSpecOutput) ToRouteSpecPtrOutputWithContext(ctx context.Context) RouteSpecPtrOutput {
	return o.ApplyT(func(v RouteSpec) *RouteSpec {
		return &v
	}).(RouteSpecPtrOutput)
}

// The HTTP routing information for the route.
func (o RouteSpecOutput) HttpRoute() RouteSpecHttpRoutePtrOutput {
	return o.ApplyT(func(v RouteSpec) *RouteSpecHttpRoute { return v.HttpRoute }).(RouteSpecHttpRoutePtrOutput)
}

// The priority for the route, between `0` and `1000`.
// Routes are matched based on the specified value, where `0` is the highest priority.
func (o RouteSpecOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteSpec) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The TCP routing information for the route.
func (o RouteSpecOutput) TcpRoute() RouteSpecTcpRoutePtrOutput {
	return o.ApplyT(func(v RouteSpec) *RouteSpecTcpRoute { return v.TcpRoute }).(RouteSpecTcpRoutePtrOutput)
}

type RouteSpecPtrOutput struct{ *pulumi.OutputState }

func (RouteSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpec)(nil)).Elem()
}

func (o RouteSpecPtrOutput) ToRouteSpecPtrOutput() RouteSpecPtrOutput {
	return o
}

func (o RouteSpecPtrOutput) ToRouteSpecPtrOutputWithContext(ctx context.Context) RouteSpecPtrOutput {
	return o
}

func (o RouteSpecPtrOutput) Elem() RouteSpecOutput {
	return o.ApplyT(func(v *RouteSpec) RouteSpec { return *v }).(RouteSpecOutput)
}

// The HTTP routing information for the route.
func (o RouteSpecPtrOutput) HttpRoute() RouteSpecHttpRoutePtrOutput {
	return o.ApplyT(func(v RouteSpec) *RouteSpecHttpRoute { return v.HttpRoute }).(RouteSpecHttpRoutePtrOutput)
}

// The priority for the route, between `0` and `1000`.
// Routes are matched based on the specified value, where `0` is the highest priority.
func (o RouteSpecPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteSpec) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The TCP routing information for the route.
func (o RouteSpecPtrOutput) TcpRoute() RouteSpecTcpRoutePtrOutput {
	return o.ApplyT(func(v RouteSpec) *RouteSpecTcpRoute { return v.TcpRoute }).(RouteSpecTcpRoutePtrOutput)
}

type RouteSpecHttpRoute struct {
	// The action to take if a match is determined.
	Action RouteSpecHttpRouteAction `pulumi:"action"`
	// The criteria for determining an HTTP request match.
	Match RouteSpecHttpRouteMatch `pulumi:"match"`
}

// RouteSpecHttpRouteInput is an input type that accepts RouteSpecHttpRouteArgs and RouteSpecHttpRouteOutput values.
// You can construct a concrete instance of `RouteSpecHttpRouteInput` via:
//
// 		 RouteSpecHttpRouteArgs{...}
//
type RouteSpecHttpRouteInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteOutput() RouteSpecHttpRouteOutput
	ToRouteSpecHttpRouteOutputWithContext(context.Context) RouteSpecHttpRouteOutput
}

type RouteSpecHttpRouteArgs struct {
	// The action to take if a match is determined.
	Action RouteSpecHttpRouteActionInput `pulumi:"action"`
	// The criteria for determining an HTTP request match.
	Match RouteSpecHttpRouteMatchInput `pulumi:"match"`
}

func (RouteSpecHttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRoute)(nil)).Elem()
}

func (i RouteSpecHttpRouteArgs) ToRouteSpecHttpRouteOutput() RouteSpecHttpRouteOutput {
	return i.ToRouteSpecHttpRouteOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteArgs) ToRouteSpecHttpRouteOutputWithContext(ctx context.Context) RouteSpecHttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteOutput)
}

func (i RouteSpecHttpRouteArgs) ToRouteSpecHttpRoutePtrOutput() RouteSpecHttpRoutePtrOutput {
	return i.ToRouteSpecHttpRoutePtrOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteArgs) ToRouteSpecHttpRoutePtrOutputWithContext(ctx context.Context) RouteSpecHttpRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteOutput).ToRouteSpecHttpRoutePtrOutputWithContext(ctx)
}

// RouteSpecHttpRoutePtrInput is an input type that accepts RouteSpecHttpRouteArgs, RouteSpecHttpRoutePtr and RouteSpecHttpRoutePtrOutput values.
// You can construct a concrete instance of `RouteSpecHttpRoutePtrInput` via:
//
// 		 RouteSpecHttpRouteArgs{...}
//
//  or:
//
// 		 nil
//
type RouteSpecHttpRoutePtrInput interface {
	pulumi.Input

	ToRouteSpecHttpRoutePtrOutput() RouteSpecHttpRoutePtrOutput
	ToRouteSpecHttpRoutePtrOutputWithContext(context.Context) RouteSpecHttpRoutePtrOutput
}

type routeSpecHttpRoutePtrType RouteSpecHttpRouteArgs

func RouteSpecHttpRoutePtr(v *RouteSpecHttpRouteArgs) RouteSpecHttpRoutePtrInput {
	return (*routeSpecHttpRoutePtrType)(v)
}

func (*routeSpecHttpRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecHttpRoute)(nil)).Elem()
}

func (i *routeSpecHttpRoutePtrType) ToRouteSpecHttpRoutePtrOutput() RouteSpecHttpRoutePtrOutput {
	return i.ToRouteSpecHttpRoutePtrOutputWithContext(context.Background())
}

func (i *routeSpecHttpRoutePtrType) ToRouteSpecHttpRoutePtrOutputWithContext(ctx context.Context) RouteSpecHttpRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRoutePtrOutput)
}

type RouteSpecHttpRouteOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRoute)(nil)).Elem()
}

func (o RouteSpecHttpRouteOutput) ToRouteSpecHttpRouteOutput() RouteSpecHttpRouteOutput {
	return o
}

func (o RouteSpecHttpRouteOutput) ToRouteSpecHttpRouteOutputWithContext(ctx context.Context) RouteSpecHttpRouteOutput {
	return o
}

func (o RouteSpecHttpRouteOutput) ToRouteSpecHttpRoutePtrOutput() RouteSpecHttpRoutePtrOutput {
	return o.ToRouteSpecHttpRoutePtrOutputWithContext(context.Background())
}

func (o RouteSpecHttpRouteOutput) ToRouteSpecHttpRoutePtrOutputWithContext(ctx context.Context) RouteSpecHttpRoutePtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRoute) *RouteSpecHttpRoute {
		return &v
	}).(RouteSpecHttpRoutePtrOutput)
}

// The action to take if a match is determined.
func (o RouteSpecHttpRouteOutput) Action() RouteSpecHttpRouteActionOutput {
	return o.ApplyT(func(v RouteSpecHttpRoute) RouteSpecHttpRouteAction { return v.Action }).(RouteSpecHttpRouteActionOutput)
}

// The criteria for determining an HTTP request match.
func (o RouteSpecHttpRouteOutput) Match() RouteSpecHttpRouteMatchOutput {
	return o.ApplyT(func(v RouteSpecHttpRoute) RouteSpecHttpRouteMatch { return v.Match }).(RouteSpecHttpRouteMatchOutput)
}

type RouteSpecHttpRoutePtrOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecHttpRoute)(nil)).Elem()
}

func (o RouteSpecHttpRoutePtrOutput) ToRouteSpecHttpRoutePtrOutput() RouteSpecHttpRoutePtrOutput {
	return o
}

func (o RouteSpecHttpRoutePtrOutput) ToRouteSpecHttpRoutePtrOutputWithContext(ctx context.Context) RouteSpecHttpRoutePtrOutput {
	return o
}

func (o RouteSpecHttpRoutePtrOutput) Elem() RouteSpecHttpRouteOutput {
	return o.ApplyT(func(v *RouteSpecHttpRoute) RouteSpecHttpRoute { return *v }).(RouteSpecHttpRouteOutput)
}

// The action to take if a match is determined.
func (o RouteSpecHttpRoutePtrOutput) Action() RouteSpecHttpRouteActionOutput {
	return o.ApplyT(func(v RouteSpecHttpRoute) RouteSpecHttpRouteAction { return v.Action }).(RouteSpecHttpRouteActionOutput)
}

// The criteria for determining an HTTP request match.
func (o RouteSpecHttpRoutePtrOutput) Match() RouteSpecHttpRouteMatchOutput {
	return o.ApplyT(func(v RouteSpecHttpRoute) RouteSpecHttpRouteMatch { return v.Match }).(RouteSpecHttpRouteMatchOutput)
}

type RouteSpecHttpRouteAction struct {
	// The targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets []RouteSpecHttpRouteActionWeightedTarget `pulumi:"weightedTargets"`
}

// RouteSpecHttpRouteActionInput is an input type that accepts RouteSpecHttpRouteActionArgs and RouteSpecHttpRouteActionOutput values.
// You can construct a concrete instance of `RouteSpecHttpRouteActionInput` via:
//
// 		 RouteSpecHttpRouteActionArgs{...}
//
type RouteSpecHttpRouteActionInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteActionOutput() RouteSpecHttpRouteActionOutput
	ToRouteSpecHttpRouteActionOutputWithContext(context.Context) RouteSpecHttpRouteActionOutput
}

type RouteSpecHttpRouteActionArgs struct {
	// The targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets RouteSpecHttpRouteActionWeightedTargetArrayInput `pulumi:"weightedTargets"`
}

func (RouteSpecHttpRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteAction)(nil)).Elem()
}

func (i RouteSpecHttpRouteActionArgs) ToRouteSpecHttpRouteActionOutput() RouteSpecHttpRouteActionOutput {
	return i.ToRouteSpecHttpRouteActionOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteActionArgs) ToRouteSpecHttpRouteActionOutputWithContext(ctx context.Context) RouteSpecHttpRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteActionOutput)
}

type RouteSpecHttpRouteActionOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteAction)(nil)).Elem()
}

func (o RouteSpecHttpRouteActionOutput) ToRouteSpecHttpRouteActionOutput() RouteSpecHttpRouteActionOutput {
	return o
}

func (o RouteSpecHttpRouteActionOutput) ToRouteSpecHttpRouteActionOutputWithContext(ctx context.Context) RouteSpecHttpRouteActionOutput {
	return o
}

// The targets that traffic is routed to when a request matches the route.
// You can specify one or more targets and their relative weights with which to distribute traffic.
func (o RouteSpecHttpRouteActionOutput) WeightedTargets() RouteSpecHttpRouteActionWeightedTargetArrayOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteAction) []RouteSpecHttpRouteActionWeightedTarget { return v.WeightedTargets }).(RouteSpecHttpRouteActionWeightedTargetArrayOutput)
}

type RouteSpecHttpRouteActionWeightedTarget struct {
	// The virtual node to associate with the weighted target.
	VirtualNode string `pulumi:"virtualNode"`
	// The relative weight of the weighted target. An integer between 0 and 100.
	Weight int `pulumi:"weight"`
}

// RouteSpecHttpRouteActionWeightedTargetInput is an input type that accepts RouteSpecHttpRouteActionWeightedTargetArgs and RouteSpecHttpRouteActionWeightedTargetOutput values.
// You can construct a concrete instance of `RouteSpecHttpRouteActionWeightedTargetInput` via:
//
// 		 RouteSpecHttpRouteActionWeightedTargetArgs{...}
//
type RouteSpecHttpRouteActionWeightedTargetInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteActionWeightedTargetOutput() RouteSpecHttpRouteActionWeightedTargetOutput
	ToRouteSpecHttpRouteActionWeightedTargetOutputWithContext(context.Context) RouteSpecHttpRouteActionWeightedTargetOutput
}

type RouteSpecHttpRouteActionWeightedTargetArgs struct {
	// The virtual node to associate with the weighted target.
	VirtualNode pulumi.StringInput `pulumi:"virtualNode"`
	// The relative weight of the weighted target. An integer between 0 and 100.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RouteSpecHttpRouteActionWeightedTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteActionWeightedTarget)(nil)).Elem()
}

func (i RouteSpecHttpRouteActionWeightedTargetArgs) ToRouteSpecHttpRouteActionWeightedTargetOutput() RouteSpecHttpRouteActionWeightedTargetOutput {
	return i.ToRouteSpecHttpRouteActionWeightedTargetOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteActionWeightedTargetArgs) ToRouteSpecHttpRouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecHttpRouteActionWeightedTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteActionWeightedTargetOutput)
}

// RouteSpecHttpRouteActionWeightedTargetArrayInput is an input type that accepts RouteSpecHttpRouteActionWeightedTargetArray and RouteSpecHttpRouteActionWeightedTargetArrayOutput values.
// You can construct a concrete instance of `RouteSpecHttpRouteActionWeightedTargetArrayInput` via:
//
// 		 RouteSpecHttpRouteActionWeightedTargetArray{ RouteSpecHttpRouteActionWeightedTargetArgs{...} }
//
type RouteSpecHttpRouteActionWeightedTargetArrayInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteActionWeightedTargetArrayOutput() RouteSpecHttpRouteActionWeightedTargetArrayOutput
	ToRouteSpecHttpRouteActionWeightedTargetArrayOutputWithContext(context.Context) RouteSpecHttpRouteActionWeightedTargetArrayOutput
}

type RouteSpecHttpRouteActionWeightedTargetArray []RouteSpecHttpRouteActionWeightedTargetInput

func (RouteSpecHttpRouteActionWeightedTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteSpecHttpRouteActionWeightedTarget)(nil)).Elem()
}

func (i RouteSpecHttpRouteActionWeightedTargetArray) ToRouteSpecHttpRouteActionWeightedTargetArrayOutput() RouteSpecHttpRouteActionWeightedTargetArrayOutput {
	return i.ToRouteSpecHttpRouteActionWeightedTargetArrayOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteActionWeightedTargetArray) ToRouteSpecHttpRouteActionWeightedTargetArrayOutputWithContext(ctx context.Context) RouteSpecHttpRouteActionWeightedTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteActionWeightedTargetArrayOutput)
}

type RouteSpecHttpRouteActionWeightedTargetOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteActionWeightedTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteActionWeightedTarget)(nil)).Elem()
}

func (o RouteSpecHttpRouteActionWeightedTargetOutput) ToRouteSpecHttpRouteActionWeightedTargetOutput() RouteSpecHttpRouteActionWeightedTargetOutput {
	return o
}

func (o RouteSpecHttpRouteActionWeightedTargetOutput) ToRouteSpecHttpRouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecHttpRouteActionWeightedTargetOutput {
	return o
}

// The virtual node to associate with the weighted target.
func (o RouteSpecHttpRouteActionWeightedTargetOutput) VirtualNode() pulumi.StringOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteActionWeightedTarget) string { return v.VirtualNode }).(pulumi.StringOutput)
}

// The relative weight of the weighted target. An integer between 0 and 100.
func (o RouteSpecHttpRouteActionWeightedTargetOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteActionWeightedTarget) int { return v.Weight }).(pulumi.IntOutput)
}

type RouteSpecHttpRouteActionWeightedTargetArrayOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteActionWeightedTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteSpecHttpRouteActionWeightedTarget)(nil)).Elem()
}

func (o RouteSpecHttpRouteActionWeightedTargetArrayOutput) ToRouteSpecHttpRouteActionWeightedTargetArrayOutput() RouteSpecHttpRouteActionWeightedTargetArrayOutput {
	return o
}

func (o RouteSpecHttpRouteActionWeightedTargetArrayOutput) ToRouteSpecHttpRouteActionWeightedTargetArrayOutputWithContext(ctx context.Context) RouteSpecHttpRouteActionWeightedTargetArrayOutput {
	return o
}

func (o RouteSpecHttpRouteActionWeightedTargetArrayOutput) Index(i pulumi.IntInput) RouteSpecHttpRouteActionWeightedTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteSpecHttpRouteActionWeightedTarget {
		return vs[0].([]RouteSpecHttpRouteActionWeightedTarget)[vs[1].(int)]
	}).(RouteSpecHttpRouteActionWeightedTargetOutput)
}

type RouteSpecHttpRouteMatch struct {
	// The client request headers to match on.
	Headers []RouteSpecHttpRouteMatchHeader `pulumi:"headers"`
	// The client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
	Method *string `pulumi:"method"`
	// Specifies the path with which to match requests.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	// * `range`- (Optional) The object that specifies the range of numbers that the header value sent by the client must be included in.
	Prefix string `pulumi:"prefix"`
	// The client request header scheme to match on. Valid values: `http`, `https`.
	Scheme *string `pulumi:"scheme"`
}

// RouteSpecHttpRouteMatchInput is an input type that accepts RouteSpecHttpRouteMatchArgs and RouteSpecHttpRouteMatchOutput values.
// You can construct a concrete instance of `RouteSpecHttpRouteMatchInput` via:
//
// 		 RouteSpecHttpRouteMatchArgs{...}
//
type RouteSpecHttpRouteMatchInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteMatchOutput() RouteSpecHttpRouteMatchOutput
	ToRouteSpecHttpRouteMatchOutputWithContext(context.Context) RouteSpecHttpRouteMatchOutput
}

type RouteSpecHttpRouteMatchArgs struct {
	// The client request headers to match on.
	Headers RouteSpecHttpRouteMatchHeaderArrayInput `pulumi:"headers"`
	// The client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Specifies the path with which to match requests.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	// * `range`- (Optional) The object that specifies the range of numbers that the header value sent by the client must be included in.
	Prefix pulumi.StringInput `pulumi:"prefix"`
	// The client request header scheme to match on. Valid values: `http`, `https`.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (RouteSpecHttpRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatch)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchArgs) ToRouteSpecHttpRouteMatchOutput() RouteSpecHttpRouteMatchOutput {
	return i.ToRouteSpecHttpRouteMatchOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchArgs) ToRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchOutput)
}

type RouteSpecHttpRouteMatchOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatch)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchOutput) ToRouteSpecHttpRouteMatchOutput() RouteSpecHttpRouteMatchOutput {
	return o
}

func (o RouteSpecHttpRouteMatchOutput) ToRouteSpecHttpRouteMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchOutput {
	return o
}

// The client request headers to match on.
func (o RouteSpecHttpRouteMatchOutput) Headers() RouteSpecHttpRouteMatchHeaderArrayOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatch) []RouteSpecHttpRouteMatchHeader { return v.Headers }).(RouteSpecHttpRouteMatchHeaderArrayOutput)
}

// The client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
func (o RouteSpecHttpRouteMatchOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatch) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Specifies the path with which to match requests.
// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
// * `range`- (Optional) The object that specifies the range of numbers that the header value sent by the client must be included in.
func (o RouteSpecHttpRouteMatchOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatch) string { return v.Prefix }).(pulumi.StringOutput)
}

// The client request header scheme to match on. Valid values: `http`, `https`.
func (o RouteSpecHttpRouteMatchOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatch) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type RouteSpecHttpRouteMatchHeader struct {
	// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
	Invert *bool `pulumi:"invert"`
	// The method and value to match the header value sent with a request. Specify one match method.
	Match *RouteSpecHttpRouteMatchHeaderMatch `pulumi:"match"`
	// A name for the HTTP header in the client request that will be matched on.
	Name string `pulumi:"name"`
}

// RouteSpecHttpRouteMatchHeaderInput is an input type that accepts RouteSpecHttpRouteMatchHeaderArgs and RouteSpecHttpRouteMatchHeaderOutput values.
// You can construct a concrete instance of `RouteSpecHttpRouteMatchHeaderInput` via:
//
// 		 RouteSpecHttpRouteMatchHeaderArgs{...}
//
type RouteSpecHttpRouteMatchHeaderInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteMatchHeaderOutput() RouteSpecHttpRouteMatchHeaderOutput
	ToRouteSpecHttpRouteMatchHeaderOutputWithContext(context.Context) RouteSpecHttpRouteMatchHeaderOutput
}

type RouteSpecHttpRouteMatchHeaderArgs struct {
	// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
	Invert pulumi.BoolPtrInput `pulumi:"invert"`
	// The method and value to match the header value sent with a request. Specify one match method.
	Match RouteSpecHttpRouteMatchHeaderMatchPtrInput `pulumi:"match"`
	// A name for the HTTP header in the client request that will be matched on.
	Name pulumi.StringInput `pulumi:"name"`
}

func (RouteSpecHttpRouteMatchHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchHeaderArgs) ToRouteSpecHttpRouteMatchHeaderOutput() RouteSpecHttpRouteMatchHeaderOutput {
	return i.ToRouteSpecHttpRouteMatchHeaderOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchHeaderArgs) ToRouteSpecHttpRouteMatchHeaderOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchHeaderOutput)
}

// RouteSpecHttpRouteMatchHeaderArrayInput is an input type that accepts RouteSpecHttpRouteMatchHeaderArray and RouteSpecHttpRouteMatchHeaderArrayOutput values.
// You can construct a concrete instance of `RouteSpecHttpRouteMatchHeaderArrayInput` via:
//
// 		 RouteSpecHttpRouteMatchHeaderArray{ RouteSpecHttpRouteMatchHeaderArgs{...} }
//
type RouteSpecHttpRouteMatchHeaderArrayInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteMatchHeaderArrayOutput() RouteSpecHttpRouteMatchHeaderArrayOutput
	ToRouteSpecHttpRouteMatchHeaderArrayOutputWithContext(context.Context) RouteSpecHttpRouteMatchHeaderArrayOutput
}

type RouteSpecHttpRouteMatchHeaderArray []RouteSpecHttpRouteMatchHeaderInput

func (RouteSpecHttpRouteMatchHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchHeaderArray) ToRouteSpecHttpRouteMatchHeaderArrayOutput() RouteSpecHttpRouteMatchHeaderArrayOutput {
	return i.ToRouteSpecHttpRouteMatchHeaderArrayOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchHeaderArray) ToRouteSpecHttpRouteMatchHeaderArrayOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchHeaderArrayOutput)
}

type RouteSpecHttpRouteMatchHeaderOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchHeaderOutput) ToRouteSpecHttpRouteMatchHeaderOutput() RouteSpecHttpRouteMatchHeaderOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderOutput) ToRouteSpecHttpRouteMatchHeaderOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderOutput {
	return o
}

// If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
func (o RouteSpecHttpRouteMatchHeaderOutput) Invert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeader) *bool { return v.Invert }).(pulumi.BoolPtrOutput)
}

// The method and value to match the header value sent with a request. Specify one match method.
func (o RouteSpecHttpRouteMatchHeaderOutput) Match() RouteSpecHttpRouteMatchHeaderMatchPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeader) *RouteSpecHttpRouteMatchHeaderMatch { return v.Match }).(RouteSpecHttpRouteMatchHeaderMatchPtrOutput)
}

// A name for the HTTP header in the client request that will be matched on.
func (o RouteSpecHttpRouteMatchHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeader) string { return v.Name }).(pulumi.StringOutput)
}

type RouteSpecHttpRouteMatchHeaderArrayOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteSpecHttpRouteMatchHeader)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchHeaderArrayOutput) ToRouteSpecHttpRouteMatchHeaderArrayOutput() RouteSpecHttpRouteMatchHeaderArrayOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderArrayOutput) ToRouteSpecHttpRouteMatchHeaderArrayOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderArrayOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderArrayOutput) Index(i pulumi.IntInput) RouteSpecHttpRouteMatchHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteSpecHttpRouteMatchHeader {
		return vs[0].([]RouteSpecHttpRouteMatchHeader)[vs[1].(int)]
	}).(RouteSpecHttpRouteMatchHeaderOutput)
}

type RouteSpecHttpRouteMatchHeaderMatch struct {
	// The header value sent by the client must match the specified value exactly.
	Exact *string `pulumi:"exact"`
	// Specifies the path with which to match requests.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	// * `range`- (Optional) The object that specifies the range of numbers that the header value sent by the client must be included in.
	Prefix *string                                  `pulumi:"prefix"`
	Range  *RouteSpecHttpRouteMatchHeaderMatchRange `pulumi:"range"`
	// The header value sent by the client must include the specified characters.
	Regex *string `pulumi:"regex"`
	// The header value sent by the client must end with the specified characters.
	Suffix *string `pulumi:"suffix"`
}

// RouteSpecHttpRouteMatchHeaderMatchInput is an input type that accepts RouteSpecHttpRouteMatchHeaderMatchArgs and RouteSpecHttpRouteMatchHeaderMatchOutput values.
// You can construct a concrete instance of `RouteSpecHttpRouteMatchHeaderMatchInput` via:
//
// 		 RouteSpecHttpRouteMatchHeaderMatchArgs{...}
//
type RouteSpecHttpRouteMatchHeaderMatchInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteMatchHeaderMatchOutput() RouteSpecHttpRouteMatchHeaderMatchOutput
	ToRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(context.Context) RouteSpecHttpRouteMatchHeaderMatchOutput
}

type RouteSpecHttpRouteMatchHeaderMatchArgs struct {
	// The header value sent by the client must match the specified value exactly.
	Exact pulumi.StringPtrInput `pulumi:"exact"`
	// Specifies the path with which to match requests.
	// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
	// * `range`- (Optional) The object that specifies the range of numbers that the header value sent by the client must be included in.
	Prefix pulumi.StringPtrInput                           `pulumi:"prefix"`
	Range  RouteSpecHttpRouteMatchHeaderMatchRangePtrInput `pulumi:"range"`
	// The header value sent by the client must include the specified characters.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// The header value sent by the client must end with the specified characters.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (RouteSpecHttpRouteMatchHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchHeaderMatchArgs) ToRouteSpecHttpRouteMatchHeaderMatchOutput() RouteSpecHttpRouteMatchHeaderMatchOutput {
	return i.ToRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchHeaderMatchArgs) ToRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchHeaderMatchOutput)
}

func (i RouteSpecHttpRouteMatchHeaderMatchArgs) ToRouteSpecHttpRouteMatchHeaderMatchPtrOutput() RouteSpecHttpRouteMatchHeaderMatchPtrOutput {
	return i.ToRouteSpecHttpRouteMatchHeaderMatchPtrOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchHeaderMatchArgs) ToRouteSpecHttpRouteMatchHeaderMatchPtrOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchHeaderMatchOutput).ToRouteSpecHttpRouteMatchHeaderMatchPtrOutputWithContext(ctx)
}

// RouteSpecHttpRouteMatchHeaderMatchPtrInput is an input type that accepts RouteSpecHttpRouteMatchHeaderMatchArgs, RouteSpecHttpRouteMatchHeaderMatchPtr and RouteSpecHttpRouteMatchHeaderMatchPtrOutput values.
// You can construct a concrete instance of `RouteSpecHttpRouteMatchHeaderMatchPtrInput` via:
//
// 		 RouteSpecHttpRouteMatchHeaderMatchArgs{...}
//
//  or:
//
// 		 nil
//
type RouteSpecHttpRouteMatchHeaderMatchPtrInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteMatchHeaderMatchPtrOutput() RouteSpecHttpRouteMatchHeaderMatchPtrOutput
	ToRouteSpecHttpRouteMatchHeaderMatchPtrOutputWithContext(context.Context) RouteSpecHttpRouteMatchHeaderMatchPtrOutput
}

type routeSpecHttpRouteMatchHeaderMatchPtrType RouteSpecHttpRouteMatchHeaderMatchArgs

func RouteSpecHttpRouteMatchHeaderMatchPtr(v *RouteSpecHttpRouteMatchHeaderMatchArgs) RouteSpecHttpRouteMatchHeaderMatchPtrInput {
	return (*routeSpecHttpRouteMatchHeaderMatchPtrType)(v)
}

func (*routeSpecHttpRouteMatchHeaderMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (i *routeSpecHttpRouteMatchHeaderMatchPtrType) ToRouteSpecHttpRouteMatchHeaderMatchPtrOutput() RouteSpecHttpRouteMatchHeaderMatchPtrOutput {
	return i.ToRouteSpecHttpRouteMatchHeaderMatchPtrOutputWithContext(context.Background())
}

func (i *routeSpecHttpRouteMatchHeaderMatchPtrType) ToRouteSpecHttpRouteMatchHeaderMatchPtrOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchHeaderMatchPtrOutput)
}

type RouteSpecHttpRouteMatchHeaderMatchOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchHeaderMatchOutput) ToRouteSpecHttpRouteMatchHeaderMatchOutput() RouteSpecHttpRouteMatchHeaderMatchOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchOutput) ToRouteSpecHttpRouteMatchHeaderMatchOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchOutput) ToRouteSpecHttpRouteMatchHeaderMatchPtrOutput() RouteSpecHttpRouteMatchHeaderMatchPtrOutput {
	return o.ToRouteSpecHttpRouteMatchHeaderMatchPtrOutputWithContext(context.Background())
}

func (o RouteSpecHttpRouteMatchHeaderMatchOutput) ToRouteSpecHttpRouteMatchHeaderMatchPtrOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatch) *RouteSpecHttpRouteMatchHeaderMatch {
		return &v
	}).(RouteSpecHttpRouteMatchHeaderMatchPtrOutput)
}

// The header value sent by the client must match the specified value exactly.
func (o RouteSpecHttpRouteMatchHeaderMatchOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// Specifies the path with which to match requests.
// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
// * `range`- (Optional) The object that specifies the range of numbers that the header value sent by the client must be included in.
func (o RouteSpecHttpRouteMatchHeaderMatchOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o RouteSpecHttpRouteMatchHeaderMatchOutput) Range() RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatch) *RouteSpecHttpRouteMatchHeaderMatchRange { return v.Range }).(RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput)
}

// The header value sent by the client must include the specified characters.
func (o RouteSpecHttpRouteMatchHeaderMatchOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// The header value sent by the client must end with the specified characters.
func (o RouteSpecHttpRouteMatchHeaderMatchOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type RouteSpecHttpRouteMatchHeaderMatchPtrOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchHeaderMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecHttpRouteMatchHeaderMatch)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchHeaderMatchPtrOutput) ToRouteSpecHttpRouteMatchHeaderMatchPtrOutput() RouteSpecHttpRouteMatchHeaderMatchPtrOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchPtrOutput) ToRouteSpecHttpRouteMatchHeaderMatchPtrOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchPtrOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchPtrOutput) Elem() RouteSpecHttpRouteMatchHeaderMatchOutput {
	return o.ApplyT(func(v *RouteSpecHttpRouteMatchHeaderMatch) RouteSpecHttpRouteMatchHeaderMatch { return *v }).(RouteSpecHttpRouteMatchHeaderMatchOutput)
}

// The header value sent by the client must match the specified value exactly.
func (o RouteSpecHttpRouteMatchHeaderMatchPtrOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

// Specifies the path with which to match requests.
// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
// * `range`- (Optional) The object that specifies the range of numbers that the header value sent by the client must be included in.
func (o RouteSpecHttpRouteMatchHeaderMatchPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o RouteSpecHttpRouteMatchHeaderMatchPtrOutput) Range() RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatch) *RouteSpecHttpRouteMatchHeaderMatchRange { return v.Range }).(RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput)
}

// The header value sent by the client must include the specified characters.
func (o RouteSpecHttpRouteMatchHeaderMatchPtrOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// The header value sent by the client must end with the specified characters.
func (o RouteSpecHttpRouteMatchHeaderMatchPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatch) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type RouteSpecHttpRouteMatchHeaderMatchRange struct {
	// The end of the range.
	End int `pulumi:"end"`
	// The start of the range.
	Start int `pulumi:"start"`
}

// RouteSpecHttpRouteMatchHeaderMatchRangeInput is an input type that accepts RouteSpecHttpRouteMatchHeaderMatchRangeArgs and RouteSpecHttpRouteMatchHeaderMatchRangeOutput values.
// You can construct a concrete instance of `RouteSpecHttpRouteMatchHeaderMatchRangeInput` via:
//
// 		 RouteSpecHttpRouteMatchHeaderMatchRangeArgs{...}
//
type RouteSpecHttpRouteMatchHeaderMatchRangeInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteMatchHeaderMatchRangeOutput() RouteSpecHttpRouteMatchHeaderMatchRangeOutput
	ToRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(context.Context) RouteSpecHttpRouteMatchHeaderMatchRangeOutput
}

type RouteSpecHttpRouteMatchHeaderMatchRangeArgs struct {
	// The end of the range.
	End pulumi.IntInput `pulumi:"end"`
	// The start of the range.
	Start pulumi.IntInput `pulumi:"start"`
}

func (RouteSpecHttpRouteMatchHeaderMatchRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (i RouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToRouteSpecHttpRouteMatchHeaderMatchRangeOutput() RouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return i.ToRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchHeaderMatchRangeOutput)
}

func (i RouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutput() RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput {
	return i.ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutputWithContext(context.Background())
}

func (i RouteSpecHttpRouteMatchHeaderMatchRangeArgs) ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchHeaderMatchRangeOutput).ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutputWithContext(ctx)
}

// RouteSpecHttpRouteMatchHeaderMatchRangePtrInput is an input type that accepts RouteSpecHttpRouteMatchHeaderMatchRangeArgs, RouteSpecHttpRouteMatchHeaderMatchRangePtr and RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput values.
// You can construct a concrete instance of `RouteSpecHttpRouteMatchHeaderMatchRangePtrInput` via:
//
// 		 RouteSpecHttpRouteMatchHeaderMatchRangeArgs{...}
//
//  or:
//
// 		 nil
//
type RouteSpecHttpRouteMatchHeaderMatchRangePtrInput interface {
	pulumi.Input

	ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutput() RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput
	ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutputWithContext(context.Context) RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput
}

type routeSpecHttpRouteMatchHeaderMatchRangePtrType RouteSpecHttpRouteMatchHeaderMatchRangeArgs

func RouteSpecHttpRouteMatchHeaderMatchRangePtr(v *RouteSpecHttpRouteMatchHeaderMatchRangeArgs) RouteSpecHttpRouteMatchHeaderMatchRangePtrInput {
	return (*routeSpecHttpRouteMatchHeaderMatchRangePtrType)(v)
}

func (*routeSpecHttpRouteMatchHeaderMatchRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (i *routeSpecHttpRouteMatchHeaderMatchRangePtrType) ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutput() RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput {
	return i.ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutputWithContext(context.Background())
}

func (i *routeSpecHttpRouteMatchHeaderMatchRangePtrType) ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput)
}

type RouteSpecHttpRouteMatchHeaderMatchRangeOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchHeaderMatchRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToRouteSpecHttpRouteMatchHeaderMatchRangeOutput() RouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToRouteSpecHttpRouteMatchHeaderMatchRangeOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutput() RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput {
	return o.ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutputWithContext(context.Background())
}

func (o RouteSpecHttpRouteMatchHeaderMatchRangeOutput) ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatchRange) *RouteSpecHttpRouteMatchHeaderMatchRange {
		return &v
	}).(RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput)
}

// The end of the range.
func (o RouteSpecHttpRouteMatchHeaderMatchRangeOutput) End() pulumi.IntOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatchRange) int { return v.End }).(pulumi.IntOutput)
}

// The start of the range.
func (o RouteSpecHttpRouteMatchHeaderMatchRangeOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatchRange) int { return v.Start }).(pulumi.IntOutput)
}

type RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput struct{ *pulumi.OutputState }

func (RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecHttpRouteMatchHeaderMatchRange)(nil)).Elem()
}

func (o RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput) ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutput() RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput) ToRouteSpecHttpRouteMatchHeaderMatchRangePtrOutputWithContext(ctx context.Context) RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput {
	return o
}

func (o RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput) Elem() RouteSpecHttpRouteMatchHeaderMatchRangeOutput {
	return o.ApplyT(func(v *RouteSpecHttpRouteMatchHeaderMatchRange) RouteSpecHttpRouteMatchHeaderMatchRange { return *v }).(RouteSpecHttpRouteMatchHeaderMatchRangeOutput)
}

// The end of the range.
func (o RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput) End() pulumi.IntOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatchRange) int { return v.End }).(pulumi.IntOutput)
}

// The start of the range.
func (o RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v RouteSpecHttpRouteMatchHeaderMatchRange) int { return v.Start }).(pulumi.IntOutput)
}

type RouteSpecTcpRoute struct {
	// The action to take if a match is determined.
	Action RouteSpecTcpRouteAction `pulumi:"action"`
}

// RouteSpecTcpRouteInput is an input type that accepts RouteSpecTcpRouteArgs and RouteSpecTcpRouteOutput values.
// You can construct a concrete instance of `RouteSpecTcpRouteInput` via:
//
// 		 RouteSpecTcpRouteArgs{...}
//
type RouteSpecTcpRouteInput interface {
	pulumi.Input

	ToRouteSpecTcpRouteOutput() RouteSpecTcpRouteOutput
	ToRouteSpecTcpRouteOutputWithContext(context.Context) RouteSpecTcpRouteOutput
}

type RouteSpecTcpRouteArgs struct {
	// The action to take if a match is determined.
	Action RouteSpecTcpRouteActionInput `pulumi:"action"`
}

func (RouteSpecTcpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRoute)(nil)).Elem()
}

func (i RouteSpecTcpRouteArgs) ToRouteSpecTcpRouteOutput() RouteSpecTcpRouteOutput {
	return i.ToRouteSpecTcpRouteOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteArgs) ToRouteSpecTcpRouteOutputWithContext(ctx context.Context) RouteSpecTcpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteOutput)
}

func (i RouteSpecTcpRouteArgs) ToRouteSpecTcpRoutePtrOutput() RouteSpecTcpRoutePtrOutput {
	return i.ToRouteSpecTcpRoutePtrOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteArgs) ToRouteSpecTcpRoutePtrOutputWithContext(ctx context.Context) RouteSpecTcpRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteOutput).ToRouteSpecTcpRoutePtrOutputWithContext(ctx)
}

// RouteSpecTcpRoutePtrInput is an input type that accepts RouteSpecTcpRouteArgs, RouteSpecTcpRoutePtr and RouteSpecTcpRoutePtrOutput values.
// You can construct a concrete instance of `RouteSpecTcpRoutePtrInput` via:
//
// 		 RouteSpecTcpRouteArgs{...}
//
//  or:
//
// 		 nil
//
type RouteSpecTcpRoutePtrInput interface {
	pulumi.Input

	ToRouteSpecTcpRoutePtrOutput() RouteSpecTcpRoutePtrOutput
	ToRouteSpecTcpRoutePtrOutputWithContext(context.Context) RouteSpecTcpRoutePtrOutput
}

type routeSpecTcpRoutePtrType RouteSpecTcpRouteArgs

func RouteSpecTcpRoutePtr(v *RouteSpecTcpRouteArgs) RouteSpecTcpRoutePtrInput {
	return (*routeSpecTcpRoutePtrType)(v)
}

func (*routeSpecTcpRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecTcpRoute)(nil)).Elem()
}

func (i *routeSpecTcpRoutePtrType) ToRouteSpecTcpRoutePtrOutput() RouteSpecTcpRoutePtrOutput {
	return i.ToRouteSpecTcpRoutePtrOutputWithContext(context.Background())
}

func (i *routeSpecTcpRoutePtrType) ToRouteSpecTcpRoutePtrOutputWithContext(ctx context.Context) RouteSpecTcpRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRoutePtrOutput)
}

type RouteSpecTcpRouteOutput struct{ *pulumi.OutputState }

func (RouteSpecTcpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRoute)(nil)).Elem()
}

func (o RouteSpecTcpRouteOutput) ToRouteSpecTcpRouteOutput() RouteSpecTcpRouteOutput {
	return o
}

func (o RouteSpecTcpRouteOutput) ToRouteSpecTcpRouteOutputWithContext(ctx context.Context) RouteSpecTcpRouteOutput {
	return o
}

func (o RouteSpecTcpRouteOutput) ToRouteSpecTcpRoutePtrOutput() RouteSpecTcpRoutePtrOutput {
	return o.ToRouteSpecTcpRoutePtrOutputWithContext(context.Background())
}

func (o RouteSpecTcpRouteOutput) ToRouteSpecTcpRoutePtrOutputWithContext(ctx context.Context) RouteSpecTcpRoutePtrOutput {
	return o.ApplyT(func(v RouteSpecTcpRoute) *RouteSpecTcpRoute {
		return &v
	}).(RouteSpecTcpRoutePtrOutput)
}

// The action to take if a match is determined.
func (o RouteSpecTcpRouteOutput) Action() RouteSpecTcpRouteActionOutput {
	return o.ApplyT(func(v RouteSpecTcpRoute) RouteSpecTcpRouteAction { return v.Action }).(RouteSpecTcpRouteActionOutput)
}

type RouteSpecTcpRoutePtrOutput struct{ *pulumi.OutputState }

func (RouteSpecTcpRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteSpecTcpRoute)(nil)).Elem()
}

func (o RouteSpecTcpRoutePtrOutput) ToRouteSpecTcpRoutePtrOutput() RouteSpecTcpRoutePtrOutput {
	return o
}

func (o RouteSpecTcpRoutePtrOutput) ToRouteSpecTcpRoutePtrOutputWithContext(ctx context.Context) RouteSpecTcpRoutePtrOutput {
	return o
}

func (o RouteSpecTcpRoutePtrOutput) Elem() RouteSpecTcpRouteOutput {
	return o.ApplyT(func(v *RouteSpecTcpRoute) RouteSpecTcpRoute { return *v }).(RouteSpecTcpRouteOutput)
}

// The action to take if a match is determined.
func (o RouteSpecTcpRoutePtrOutput) Action() RouteSpecTcpRouteActionOutput {
	return o.ApplyT(func(v RouteSpecTcpRoute) RouteSpecTcpRouteAction { return v.Action }).(RouteSpecTcpRouteActionOutput)
}

type RouteSpecTcpRouteAction struct {
	// The targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets []RouteSpecTcpRouteActionWeightedTarget `pulumi:"weightedTargets"`
}

// RouteSpecTcpRouteActionInput is an input type that accepts RouteSpecTcpRouteActionArgs and RouteSpecTcpRouteActionOutput values.
// You can construct a concrete instance of `RouteSpecTcpRouteActionInput` via:
//
// 		 RouteSpecTcpRouteActionArgs{...}
//
type RouteSpecTcpRouteActionInput interface {
	pulumi.Input

	ToRouteSpecTcpRouteActionOutput() RouteSpecTcpRouteActionOutput
	ToRouteSpecTcpRouteActionOutputWithContext(context.Context) RouteSpecTcpRouteActionOutput
}

type RouteSpecTcpRouteActionArgs struct {
	// The targets that traffic is routed to when a request matches the route.
	// You can specify one or more targets and their relative weights with which to distribute traffic.
	WeightedTargets RouteSpecTcpRouteActionWeightedTargetArrayInput `pulumi:"weightedTargets"`
}

func (RouteSpecTcpRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteAction)(nil)).Elem()
}

func (i RouteSpecTcpRouteActionArgs) ToRouteSpecTcpRouteActionOutput() RouteSpecTcpRouteActionOutput {
	return i.ToRouteSpecTcpRouteActionOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteActionArgs) ToRouteSpecTcpRouteActionOutputWithContext(ctx context.Context) RouteSpecTcpRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteActionOutput)
}

type RouteSpecTcpRouteActionOutput struct{ *pulumi.OutputState }

func (RouteSpecTcpRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteAction)(nil)).Elem()
}

func (o RouteSpecTcpRouteActionOutput) ToRouteSpecTcpRouteActionOutput() RouteSpecTcpRouteActionOutput {
	return o
}

func (o RouteSpecTcpRouteActionOutput) ToRouteSpecTcpRouteActionOutputWithContext(ctx context.Context) RouteSpecTcpRouteActionOutput {
	return o
}

// The targets that traffic is routed to when a request matches the route.
// You can specify one or more targets and their relative weights with which to distribute traffic.
func (o RouteSpecTcpRouteActionOutput) WeightedTargets() RouteSpecTcpRouteActionWeightedTargetArrayOutput {
	return o.ApplyT(func(v RouteSpecTcpRouteAction) []RouteSpecTcpRouteActionWeightedTarget { return v.WeightedTargets }).(RouteSpecTcpRouteActionWeightedTargetArrayOutput)
}

type RouteSpecTcpRouteActionWeightedTarget struct {
	// The virtual node to associate with the weighted target.
	VirtualNode string `pulumi:"virtualNode"`
	// The relative weight of the weighted target. An integer between 0 and 100.
	Weight int `pulumi:"weight"`
}

// RouteSpecTcpRouteActionWeightedTargetInput is an input type that accepts RouteSpecTcpRouteActionWeightedTargetArgs and RouteSpecTcpRouteActionWeightedTargetOutput values.
// You can construct a concrete instance of `RouteSpecTcpRouteActionWeightedTargetInput` via:
//
// 		 RouteSpecTcpRouteActionWeightedTargetArgs{...}
//
type RouteSpecTcpRouteActionWeightedTargetInput interface {
	pulumi.Input

	ToRouteSpecTcpRouteActionWeightedTargetOutput() RouteSpecTcpRouteActionWeightedTargetOutput
	ToRouteSpecTcpRouteActionWeightedTargetOutputWithContext(context.Context) RouteSpecTcpRouteActionWeightedTargetOutput
}

type RouteSpecTcpRouteActionWeightedTargetArgs struct {
	// The virtual node to associate with the weighted target.
	VirtualNode pulumi.StringInput `pulumi:"virtualNode"`
	// The relative weight of the weighted target. An integer between 0 and 100.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RouteSpecTcpRouteActionWeightedTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteActionWeightedTarget)(nil)).Elem()
}

func (i RouteSpecTcpRouteActionWeightedTargetArgs) ToRouteSpecTcpRouteActionWeightedTargetOutput() RouteSpecTcpRouteActionWeightedTargetOutput {
	return i.ToRouteSpecTcpRouteActionWeightedTargetOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteActionWeightedTargetArgs) ToRouteSpecTcpRouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecTcpRouteActionWeightedTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteActionWeightedTargetOutput)
}

// RouteSpecTcpRouteActionWeightedTargetArrayInput is an input type that accepts RouteSpecTcpRouteActionWeightedTargetArray and RouteSpecTcpRouteActionWeightedTargetArrayOutput values.
// You can construct a concrete instance of `RouteSpecTcpRouteActionWeightedTargetArrayInput` via:
//
// 		 RouteSpecTcpRouteActionWeightedTargetArray{ RouteSpecTcpRouteActionWeightedTargetArgs{...} }
//
type RouteSpecTcpRouteActionWeightedTargetArrayInput interface {
	pulumi.Input

	ToRouteSpecTcpRouteActionWeightedTargetArrayOutput() RouteSpecTcpRouteActionWeightedTargetArrayOutput
	ToRouteSpecTcpRouteActionWeightedTargetArrayOutputWithContext(context.Context) RouteSpecTcpRouteActionWeightedTargetArrayOutput
}

type RouteSpecTcpRouteActionWeightedTargetArray []RouteSpecTcpRouteActionWeightedTargetInput

func (RouteSpecTcpRouteActionWeightedTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteSpecTcpRouteActionWeightedTarget)(nil)).Elem()
}

func (i RouteSpecTcpRouteActionWeightedTargetArray) ToRouteSpecTcpRouteActionWeightedTargetArrayOutput() RouteSpecTcpRouteActionWeightedTargetArrayOutput {
	return i.ToRouteSpecTcpRouteActionWeightedTargetArrayOutputWithContext(context.Background())
}

func (i RouteSpecTcpRouteActionWeightedTargetArray) ToRouteSpecTcpRouteActionWeightedTargetArrayOutputWithContext(ctx context.Context) RouteSpecTcpRouteActionWeightedTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteSpecTcpRouteActionWeightedTargetArrayOutput)
}

type RouteSpecTcpRouteActionWeightedTargetOutput struct{ *pulumi.OutputState }

func (RouteSpecTcpRouteActionWeightedTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteSpecTcpRouteActionWeightedTarget)(nil)).Elem()
}

func (o RouteSpecTcpRouteActionWeightedTargetOutput) ToRouteSpecTcpRouteActionWeightedTargetOutput() RouteSpecTcpRouteActionWeightedTargetOutput {
	return o
}

func (o RouteSpecTcpRouteActionWeightedTargetOutput) ToRouteSpecTcpRouteActionWeightedTargetOutputWithContext(ctx context.Context) RouteSpecTcpRouteActionWeightedTargetOutput {
	return o
}

// The virtual node to associate with the weighted target.
func (o RouteSpecTcpRouteActionWeightedTargetOutput) VirtualNode() pulumi.StringOutput {
	return o.ApplyT(func(v RouteSpecTcpRouteActionWeightedTarget) string { return v.VirtualNode }).(pulumi.StringOutput)
}

// The relative weight of the weighted target. An integer between 0 and 100.
func (o RouteSpecTcpRouteActionWeightedTargetOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RouteSpecTcpRouteActionWeightedTarget) int { return v.Weight }).(pulumi.IntOutput)
}

type RouteSpecTcpRouteActionWeightedTargetArrayOutput struct{ *pulumi.OutputState }

func (RouteSpecTcpRouteActionWeightedTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteSpecTcpRouteActionWeightedTarget)(nil)).Elem()
}

func (o RouteSpecTcpRouteActionWeightedTargetArrayOutput) ToRouteSpecTcpRouteActionWeightedTargetArrayOutput() RouteSpecTcpRouteActionWeightedTargetArrayOutput {
	return o
}

func (o RouteSpecTcpRouteActionWeightedTargetArrayOutput) ToRouteSpecTcpRouteActionWeightedTargetArrayOutputWithContext(ctx context.Context) RouteSpecTcpRouteActionWeightedTargetArrayOutput {
	return o
}

func (o RouteSpecTcpRouteActionWeightedTargetArrayOutput) Index(i pulumi.IntInput) RouteSpecTcpRouteActionWeightedTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteSpecTcpRouteActionWeightedTarget {
		return vs[0].([]RouteSpecTcpRouteActionWeightedTarget)[vs[1].(int)]
	}).(RouteSpecTcpRouteActionWeightedTargetOutput)
}

type VirtualNodeSpec struct {
	// The backends to which the virtual node is expected to send outbound traffic.
	Backends []VirtualNodeSpecBackend `pulumi:"backends"`
	// The listeners from which the virtual node is expected to receive inbound traffic.
	Listener *VirtualNodeSpecListener `pulumi:"listener"`
	// The inbound and outbound access logging information for the virtual node.
	Logging *VirtualNodeSpecLogging `pulumi:"logging"`
	// The service discovery information for the virtual node.
	ServiceDiscovery *VirtualNodeSpecServiceDiscovery `pulumi:"serviceDiscovery"`
}

// VirtualNodeSpecInput is an input type that accepts VirtualNodeSpecArgs and VirtualNodeSpecOutput values.
// You can construct a concrete instance of `VirtualNodeSpecInput` via:
//
// 		 VirtualNodeSpecArgs{...}
//
type VirtualNodeSpecInput interface {
	pulumi.Input

	ToVirtualNodeSpecOutput() VirtualNodeSpecOutput
	ToVirtualNodeSpecOutputWithContext(context.Context) VirtualNodeSpecOutput
}

type VirtualNodeSpecArgs struct {
	// The backends to which the virtual node is expected to send outbound traffic.
	Backends VirtualNodeSpecBackendArrayInput `pulumi:"backends"`
	// The listeners from which the virtual node is expected to receive inbound traffic.
	Listener VirtualNodeSpecListenerPtrInput `pulumi:"listener"`
	// The inbound and outbound access logging information for the virtual node.
	Logging VirtualNodeSpecLoggingPtrInput `pulumi:"logging"`
	// The service discovery information for the virtual node.
	ServiceDiscovery VirtualNodeSpecServiceDiscoveryPtrInput `pulumi:"serviceDiscovery"`
}

func (VirtualNodeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpec)(nil)).Elem()
}

func (i VirtualNodeSpecArgs) ToVirtualNodeSpecOutput() VirtualNodeSpecOutput {
	return i.ToVirtualNodeSpecOutputWithContext(context.Background())
}

func (i VirtualNodeSpecArgs) ToVirtualNodeSpecOutputWithContext(ctx context.Context) VirtualNodeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecOutput)
}

func (i VirtualNodeSpecArgs) ToVirtualNodeSpecPtrOutput() VirtualNodeSpecPtrOutput {
	return i.ToVirtualNodeSpecPtrOutputWithContext(context.Background())
}

func (i VirtualNodeSpecArgs) ToVirtualNodeSpecPtrOutputWithContext(ctx context.Context) VirtualNodeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecOutput).ToVirtualNodeSpecPtrOutputWithContext(ctx)
}

// VirtualNodeSpecPtrInput is an input type that accepts VirtualNodeSpecArgs, VirtualNodeSpecPtr and VirtualNodeSpecPtrOutput values.
// You can construct a concrete instance of `VirtualNodeSpecPtrInput` via:
//
// 		 VirtualNodeSpecArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualNodeSpecPtrInput interface {
	pulumi.Input

	ToVirtualNodeSpecPtrOutput() VirtualNodeSpecPtrOutput
	ToVirtualNodeSpecPtrOutputWithContext(context.Context) VirtualNodeSpecPtrOutput
}

type virtualNodeSpecPtrType VirtualNodeSpecArgs

func VirtualNodeSpecPtr(v *VirtualNodeSpecArgs) VirtualNodeSpecPtrInput {
	return (*virtualNodeSpecPtrType)(v)
}

func (*virtualNodeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpec)(nil)).Elem()
}

func (i *virtualNodeSpecPtrType) ToVirtualNodeSpecPtrOutput() VirtualNodeSpecPtrOutput {
	return i.ToVirtualNodeSpecPtrOutputWithContext(context.Background())
}

func (i *virtualNodeSpecPtrType) ToVirtualNodeSpecPtrOutputWithContext(ctx context.Context) VirtualNodeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecPtrOutput)
}

type VirtualNodeSpecOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpec)(nil)).Elem()
}

func (o VirtualNodeSpecOutput) ToVirtualNodeSpecOutput() VirtualNodeSpecOutput {
	return o
}

func (o VirtualNodeSpecOutput) ToVirtualNodeSpecOutputWithContext(ctx context.Context) VirtualNodeSpecOutput {
	return o
}

func (o VirtualNodeSpecOutput) ToVirtualNodeSpecPtrOutput() VirtualNodeSpecPtrOutput {
	return o.ToVirtualNodeSpecPtrOutputWithContext(context.Background())
}

func (o VirtualNodeSpecOutput) ToVirtualNodeSpecPtrOutputWithContext(ctx context.Context) VirtualNodeSpecPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpec) *VirtualNodeSpec {
		return &v
	}).(VirtualNodeSpecPtrOutput)
}

// The backends to which the virtual node is expected to send outbound traffic.
func (o VirtualNodeSpecOutput) Backends() VirtualNodeSpecBackendArrayOutput {
	return o.ApplyT(func(v VirtualNodeSpec) []VirtualNodeSpecBackend { return v.Backends }).(VirtualNodeSpecBackendArrayOutput)
}

// The listeners from which the virtual node is expected to receive inbound traffic.
func (o VirtualNodeSpecOutput) Listener() VirtualNodeSpecListenerPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpec) *VirtualNodeSpecListener { return v.Listener }).(VirtualNodeSpecListenerPtrOutput)
}

// The inbound and outbound access logging information for the virtual node.
func (o VirtualNodeSpecOutput) Logging() VirtualNodeSpecLoggingPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpec) *VirtualNodeSpecLogging { return v.Logging }).(VirtualNodeSpecLoggingPtrOutput)
}

// The service discovery information for the virtual node.
func (o VirtualNodeSpecOutput) ServiceDiscovery() VirtualNodeSpecServiceDiscoveryPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpec) *VirtualNodeSpecServiceDiscovery { return v.ServiceDiscovery }).(VirtualNodeSpecServiceDiscoveryPtrOutput)
}

type VirtualNodeSpecPtrOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpec)(nil)).Elem()
}

func (o VirtualNodeSpecPtrOutput) ToVirtualNodeSpecPtrOutput() VirtualNodeSpecPtrOutput {
	return o
}

func (o VirtualNodeSpecPtrOutput) ToVirtualNodeSpecPtrOutputWithContext(ctx context.Context) VirtualNodeSpecPtrOutput {
	return o
}

func (o VirtualNodeSpecPtrOutput) Elem() VirtualNodeSpecOutput {
	return o.ApplyT(func(v *VirtualNodeSpec) VirtualNodeSpec { return *v }).(VirtualNodeSpecOutput)
}

// The backends to which the virtual node is expected to send outbound traffic.
func (o VirtualNodeSpecPtrOutput) Backends() VirtualNodeSpecBackendArrayOutput {
	return o.ApplyT(func(v VirtualNodeSpec) []VirtualNodeSpecBackend { return v.Backends }).(VirtualNodeSpecBackendArrayOutput)
}

// The listeners from which the virtual node is expected to receive inbound traffic.
func (o VirtualNodeSpecPtrOutput) Listener() VirtualNodeSpecListenerPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpec) *VirtualNodeSpecListener { return v.Listener }).(VirtualNodeSpecListenerPtrOutput)
}

// The inbound and outbound access logging information for the virtual node.
func (o VirtualNodeSpecPtrOutput) Logging() VirtualNodeSpecLoggingPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpec) *VirtualNodeSpecLogging { return v.Logging }).(VirtualNodeSpecLoggingPtrOutput)
}

// The service discovery information for the virtual node.
func (o VirtualNodeSpecPtrOutput) ServiceDiscovery() VirtualNodeSpecServiceDiscoveryPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpec) *VirtualNodeSpecServiceDiscovery { return v.ServiceDiscovery }).(VirtualNodeSpecServiceDiscoveryPtrOutput)
}

type VirtualNodeSpecBackend struct {
	// Specifies a virtual service to use as a backend for a virtual node.
	VirtualService *VirtualNodeSpecBackendVirtualService `pulumi:"virtualService"`
}

// VirtualNodeSpecBackendInput is an input type that accepts VirtualNodeSpecBackendArgs and VirtualNodeSpecBackendOutput values.
// You can construct a concrete instance of `VirtualNodeSpecBackendInput` via:
//
// 		 VirtualNodeSpecBackendArgs{...}
//
type VirtualNodeSpecBackendInput interface {
	pulumi.Input

	ToVirtualNodeSpecBackendOutput() VirtualNodeSpecBackendOutput
	ToVirtualNodeSpecBackendOutputWithContext(context.Context) VirtualNodeSpecBackendOutput
}

type VirtualNodeSpecBackendArgs struct {
	// Specifies a virtual service to use as a backend for a virtual node.
	VirtualService VirtualNodeSpecBackendVirtualServicePtrInput `pulumi:"virtualService"`
}

func (VirtualNodeSpecBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackend)(nil)).Elem()
}

func (i VirtualNodeSpecBackendArgs) ToVirtualNodeSpecBackendOutput() VirtualNodeSpecBackendOutput {
	return i.ToVirtualNodeSpecBackendOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendArgs) ToVirtualNodeSpecBackendOutputWithContext(ctx context.Context) VirtualNodeSpecBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendOutput)
}

// VirtualNodeSpecBackendArrayInput is an input type that accepts VirtualNodeSpecBackendArray and VirtualNodeSpecBackendArrayOutput values.
// You can construct a concrete instance of `VirtualNodeSpecBackendArrayInput` via:
//
// 		 VirtualNodeSpecBackendArray{ VirtualNodeSpecBackendArgs{...} }
//
type VirtualNodeSpecBackendArrayInput interface {
	pulumi.Input

	ToVirtualNodeSpecBackendArrayOutput() VirtualNodeSpecBackendArrayOutput
	ToVirtualNodeSpecBackendArrayOutputWithContext(context.Context) VirtualNodeSpecBackendArrayOutput
}

type VirtualNodeSpecBackendArray []VirtualNodeSpecBackendInput

func (VirtualNodeSpecBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNodeSpecBackend)(nil)).Elem()
}

func (i VirtualNodeSpecBackendArray) ToVirtualNodeSpecBackendArrayOutput() VirtualNodeSpecBackendArrayOutput {
	return i.ToVirtualNodeSpecBackendArrayOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendArray) ToVirtualNodeSpecBackendArrayOutputWithContext(ctx context.Context) VirtualNodeSpecBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendArrayOutput)
}

type VirtualNodeSpecBackendOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackend)(nil)).Elem()
}

func (o VirtualNodeSpecBackendOutput) ToVirtualNodeSpecBackendOutput() VirtualNodeSpecBackendOutput {
	return o
}

func (o VirtualNodeSpecBackendOutput) ToVirtualNodeSpecBackendOutputWithContext(ctx context.Context) VirtualNodeSpecBackendOutput {
	return o
}

// Specifies a virtual service to use as a backend for a virtual node.
func (o VirtualNodeSpecBackendOutput) VirtualService() VirtualNodeSpecBackendVirtualServicePtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecBackend) *VirtualNodeSpecBackendVirtualService { return v.VirtualService }).(VirtualNodeSpecBackendVirtualServicePtrOutput)
}

type VirtualNodeSpecBackendArrayOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNodeSpecBackend)(nil)).Elem()
}

func (o VirtualNodeSpecBackendArrayOutput) ToVirtualNodeSpecBackendArrayOutput() VirtualNodeSpecBackendArrayOutput {
	return o
}

func (o VirtualNodeSpecBackendArrayOutput) ToVirtualNodeSpecBackendArrayOutputWithContext(ctx context.Context) VirtualNodeSpecBackendArrayOutput {
	return o
}

func (o VirtualNodeSpecBackendArrayOutput) Index(i pulumi.IntInput) VirtualNodeSpecBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNodeSpecBackend {
		return vs[0].([]VirtualNodeSpecBackend)[vs[1].(int)]
	}).(VirtualNodeSpecBackendOutput)
}

type VirtualNodeSpecBackendVirtualService struct {
	// The name of the virtual service that is acting as a virtual node backend.
	VirtualServiceName string `pulumi:"virtualServiceName"`
}

// VirtualNodeSpecBackendVirtualServiceInput is an input type that accepts VirtualNodeSpecBackendVirtualServiceArgs and VirtualNodeSpecBackendVirtualServiceOutput values.
// You can construct a concrete instance of `VirtualNodeSpecBackendVirtualServiceInput` via:
//
// 		 VirtualNodeSpecBackendVirtualServiceArgs{...}
//
type VirtualNodeSpecBackendVirtualServiceInput interface {
	pulumi.Input

	ToVirtualNodeSpecBackendVirtualServiceOutput() VirtualNodeSpecBackendVirtualServiceOutput
	ToVirtualNodeSpecBackendVirtualServiceOutputWithContext(context.Context) VirtualNodeSpecBackendVirtualServiceOutput
}

type VirtualNodeSpecBackendVirtualServiceArgs struct {
	// The name of the virtual service that is acting as a virtual node backend.
	VirtualServiceName pulumi.StringInput `pulumi:"virtualServiceName"`
}

func (VirtualNodeSpecBackendVirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualService)(nil)).Elem()
}

func (i VirtualNodeSpecBackendVirtualServiceArgs) ToVirtualNodeSpecBackendVirtualServiceOutput() VirtualNodeSpecBackendVirtualServiceOutput {
	return i.ToVirtualNodeSpecBackendVirtualServiceOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceArgs) ToVirtualNodeSpecBackendVirtualServiceOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceOutput)
}

func (i VirtualNodeSpecBackendVirtualServiceArgs) ToVirtualNodeSpecBackendVirtualServicePtrOutput() VirtualNodeSpecBackendVirtualServicePtrOutput {
	return i.ToVirtualNodeSpecBackendVirtualServicePtrOutputWithContext(context.Background())
}

func (i VirtualNodeSpecBackendVirtualServiceArgs) ToVirtualNodeSpecBackendVirtualServicePtrOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServiceOutput).ToVirtualNodeSpecBackendVirtualServicePtrOutputWithContext(ctx)
}

// VirtualNodeSpecBackendVirtualServicePtrInput is an input type that accepts VirtualNodeSpecBackendVirtualServiceArgs, VirtualNodeSpecBackendVirtualServicePtr and VirtualNodeSpecBackendVirtualServicePtrOutput values.
// You can construct a concrete instance of `VirtualNodeSpecBackendVirtualServicePtrInput` via:
//
// 		 VirtualNodeSpecBackendVirtualServiceArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualNodeSpecBackendVirtualServicePtrInput interface {
	pulumi.Input

	ToVirtualNodeSpecBackendVirtualServicePtrOutput() VirtualNodeSpecBackendVirtualServicePtrOutput
	ToVirtualNodeSpecBackendVirtualServicePtrOutputWithContext(context.Context) VirtualNodeSpecBackendVirtualServicePtrOutput
}

type virtualNodeSpecBackendVirtualServicePtrType VirtualNodeSpecBackendVirtualServiceArgs

func VirtualNodeSpecBackendVirtualServicePtr(v *VirtualNodeSpecBackendVirtualServiceArgs) VirtualNodeSpecBackendVirtualServicePtrInput {
	return (*virtualNodeSpecBackendVirtualServicePtrType)(v)
}

func (*virtualNodeSpecBackendVirtualServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecBackendVirtualService)(nil)).Elem()
}

func (i *virtualNodeSpecBackendVirtualServicePtrType) ToVirtualNodeSpecBackendVirtualServicePtrOutput() VirtualNodeSpecBackendVirtualServicePtrOutput {
	return i.ToVirtualNodeSpecBackendVirtualServicePtrOutputWithContext(context.Background())
}

func (i *virtualNodeSpecBackendVirtualServicePtrType) ToVirtualNodeSpecBackendVirtualServicePtrOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecBackendVirtualServicePtrOutput)
}

type VirtualNodeSpecBackendVirtualServiceOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecBackendVirtualService)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServiceOutput) ToVirtualNodeSpecBackendVirtualServiceOutput() VirtualNodeSpecBackendVirtualServiceOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceOutput) ToVirtualNodeSpecBackendVirtualServiceOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServiceOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServiceOutput) ToVirtualNodeSpecBackendVirtualServicePtrOutput() VirtualNodeSpecBackendVirtualServicePtrOutput {
	return o.ToVirtualNodeSpecBackendVirtualServicePtrOutputWithContext(context.Background())
}

func (o VirtualNodeSpecBackendVirtualServiceOutput) ToVirtualNodeSpecBackendVirtualServicePtrOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServicePtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecBackendVirtualService) *VirtualNodeSpecBackendVirtualService {
		return &v
	}).(VirtualNodeSpecBackendVirtualServicePtrOutput)
}

// The name of the virtual service that is acting as a virtual node backend.
func (o VirtualNodeSpecBackendVirtualServiceOutput) VirtualServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecBackendVirtualService) string { return v.VirtualServiceName }).(pulumi.StringOutput)
}

type VirtualNodeSpecBackendVirtualServicePtrOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecBackendVirtualServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecBackendVirtualService)(nil)).Elem()
}

func (o VirtualNodeSpecBackendVirtualServicePtrOutput) ToVirtualNodeSpecBackendVirtualServicePtrOutput() VirtualNodeSpecBackendVirtualServicePtrOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServicePtrOutput) ToVirtualNodeSpecBackendVirtualServicePtrOutputWithContext(ctx context.Context) VirtualNodeSpecBackendVirtualServicePtrOutput {
	return o
}

func (o VirtualNodeSpecBackendVirtualServicePtrOutput) Elem() VirtualNodeSpecBackendVirtualServiceOutput {
	return o.ApplyT(func(v *VirtualNodeSpecBackendVirtualService) VirtualNodeSpecBackendVirtualService { return *v }).(VirtualNodeSpecBackendVirtualServiceOutput)
}

// The name of the virtual service that is acting as a virtual node backend.
func (o VirtualNodeSpecBackendVirtualServicePtrOutput) VirtualServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecBackendVirtualService) string { return v.VirtualServiceName }).(pulumi.StringOutput)
}

type VirtualNodeSpecListener struct {
	// The health check information for the listener.
	HealthCheck *VirtualNodeSpecListenerHealthCheck `pulumi:"healthCheck"`
	// The port mapping information for the listener.
	PortMapping VirtualNodeSpecListenerPortMapping `pulumi:"portMapping"`
}

// VirtualNodeSpecListenerInput is an input type that accepts VirtualNodeSpecListenerArgs and VirtualNodeSpecListenerOutput values.
// You can construct a concrete instance of `VirtualNodeSpecListenerInput` via:
//
// 		 VirtualNodeSpecListenerArgs{...}
//
type VirtualNodeSpecListenerInput interface {
	pulumi.Input

	ToVirtualNodeSpecListenerOutput() VirtualNodeSpecListenerOutput
	ToVirtualNodeSpecListenerOutputWithContext(context.Context) VirtualNodeSpecListenerOutput
}

type VirtualNodeSpecListenerArgs struct {
	// The health check information for the listener.
	HealthCheck VirtualNodeSpecListenerHealthCheckPtrInput `pulumi:"healthCheck"`
	// The port mapping information for the listener.
	PortMapping VirtualNodeSpecListenerPortMappingInput `pulumi:"portMapping"`
}

func (VirtualNodeSpecListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListener)(nil)).Elem()
}

func (i VirtualNodeSpecListenerArgs) ToVirtualNodeSpecListenerOutput() VirtualNodeSpecListenerOutput {
	return i.ToVirtualNodeSpecListenerOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerArgs) ToVirtualNodeSpecListenerOutputWithContext(ctx context.Context) VirtualNodeSpecListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerOutput)
}

func (i VirtualNodeSpecListenerArgs) ToVirtualNodeSpecListenerPtrOutput() VirtualNodeSpecListenerPtrOutput {
	return i.ToVirtualNodeSpecListenerPtrOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerArgs) ToVirtualNodeSpecListenerPtrOutputWithContext(ctx context.Context) VirtualNodeSpecListenerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerOutput).ToVirtualNodeSpecListenerPtrOutputWithContext(ctx)
}

// VirtualNodeSpecListenerPtrInput is an input type that accepts VirtualNodeSpecListenerArgs, VirtualNodeSpecListenerPtr and VirtualNodeSpecListenerPtrOutput values.
// You can construct a concrete instance of `VirtualNodeSpecListenerPtrInput` via:
//
// 		 VirtualNodeSpecListenerArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualNodeSpecListenerPtrInput interface {
	pulumi.Input

	ToVirtualNodeSpecListenerPtrOutput() VirtualNodeSpecListenerPtrOutput
	ToVirtualNodeSpecListenerPtrOutputWithContext(context.Context) VirtualNodeSpecListenerPtrOutput
}

type virtualNodeSpecListenerPtrType VirtualNodeSpecListenerArgs

func VirtualNodeSpecListenerPtr(v *VirtualNodeSpecListenerArgs) VirtualNodeSpecListenerPtrInput {
	return (*virtualNodeSpecListenerPtrType)(v)
}

func (*virtualNodeSpecListenerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecListener)(nil)).Elem()
}

func (i *virtualNodeSpecListenerPtrType) ToVirtualNodeSpecListenerPtrOutput() VirtualNodeSpecListenerPtrOutput {
	return i.ToVirtualNodeSpecListenerPtrOutputWithContext(context.Background())
}

func (i *virtualNodeSpecListenerPtrType) ToVirtualNodeSpecListenerPtrOutputWithContext(ctx context.Context) VirtualNodeSpecListenerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerPtrOutput)
}

type VirtualNodeSpecListenerOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListener)(nil)).Elem()
}

func (o VirtualNodeSpecListenerOutput) ToVirtualNodeSpecListenerOutput() VirtualNodeSpecListenerOutput {
	return o
}

func (o VirtualNodeSpecListenerOutput) ToVirtualNodeSpecListenerOutputWithContext(ctx context.Context) VirtualNodeSpecListenerOutput {
	return o
}

func (o VirtualNodeSpecListenerOutput) ToVirtualNodeSpecListenerPtrOutput() VirtualNodeSpecListenerPtrOutput {
	return o.ToVirtualNodeSpecListenerPtrOutputWithContext(context.Background())
}

func (o VirtualNodeSpecListenerOutput) ToVirtualNodeSpecListenerPtrOutputWithContext(ctx context.Context) VirtualNodeSpecListenerPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecListener) *VirtualNodeSpecListener {
		return &v
	}).(VirtualNodeSpecListenerPtrOutput)
}

// The health check information for the listener.
func (o VirtualNodeSpecListenerOutput) HealthCheck() VirtualNodeSpecListenerHealthCheckPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecListener) *VirtualNodeSpecListenerHealthCheck { return v.HealthCheck }).(VirtualNodeSpecListenerHealthCheckPtrOutput)
}

// The port mapping information for the listener.
func (o VirtualNodeSpecListenerOutput) PortMapping() VirtualNodeSpecListenerPortMappingOutput {
	return o.ApplyT(func(v VirtualNodeSpecListener) VirtualNodeSpecListenerPortMapping { return v.PortMapping }).(VirtualNodeSpecListenerPortMappingOutput)
}

type VirtualNodeSpecListenerPtrOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecListener)(nil)).Elem()
}

func (o VirtualNodeSpecListenerPtrOutput) ToVirtualNodeSpecListenerPtrOutput() VirtualNodeSpecListenerPtrOutput {
	return o
}

func (o VirtualNodeSpecListenerPtrOutput) ToVirtualNodeSpecListenerPtrOutputWithContext(ctx context.Context) VirtualNodeSpecListenerPtrOutput {
	return o
}

func (o VirtualNodeSpecListenerPtrOutput) Elem() VirtualNodeSpecListenerOutput {
	return o.ApplyT(func(v *VirtualNodeSpecListener) VirtualNodeSpecListener { return *v }).(VirtualNodeSpecListenerOutput)
}

// The health check information for the listener.
func (o VirtualNodeSpecListenerPtrOutput) HealthCheck() VirtualNodeSpecListenerHealthCheckPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecListener) *VirtualNodeSpecListenerHealthCheck { return v.HealthCheck }).(VirtualNodeSpecListenerHealthCheckPtrOutput)
}

// The port mapping information for the listener.
func (o VirtualNodeSpecListenerPtrOutput) PortMapping() VirtualNodeSpecListenerPortMappingOutput {
	return o.ApplyT(func(v VirtualNodeSpecListener) VirtualNodeSpecListenerPortMapping { return v.PortMapping }).(VirtualNodeSpecListenerPortMappingOutput)
}

type VirtualNodeSpecListenerHealthCheck struct {
	// The number of consecutive successful health checks that must occur before declaring listener healthy.
	// * `intervalMillis`- (Required) The time period in milliseconds between each health check execution.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	IntervalMillis   int `pulumi:"intervalMillis"`
	// The destination path for the health check request. This is only required if the specified protocol is `http`.
	Path *string `pulumi:"path"`
	// The destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
	Port *int `pulumi:"port"`
	// The protocol for the health check request. Valid values are `http` and `tcp`.
	Protocol string `pulumi:"protocol"`
	// The amount of time to wait when receiving a response from the health check, in milliseconds.
	TimeoutMillis int `pulumi:"timeoutMillis"`
	// The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

// VirtualNodeSpecListenerHealthCheckInput is an input type that accepts VirtualNodeSpecListenerHealthCheckArgs and VirtualNodeSpecListenerHealthCheckOutput values.
// You can construct a concrete instance of `VirtualNodeSpecListenerHealthCheckInput` via:
//
// 		 VirtualNodeSpecListenerHealthCheckArgs{...}
//
type VirtualNodeSpecListenerHealthCheckInput interface {
	pulumi.Input

	ToVirtualNodeSpecListenerHealthCheckOutput() VirtualNodeSpecListenerHealthCheckOutput
	ToVirtualNodeSpecListenerHealthCheckOutputWithContext(context.Context) VirtualNodeSpecListenerHealthCheckOutput
}

type VirtualNodeSpecListenerHealthCheckArgs struct {
	// The number of consecutive successful health checks that must occur before declaring listener healthy.
	// * `intervalMillis`- (Required) The time period in milliseconds between each health check execution.
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	IntervalMillis   pulumi.IntInput `pulumi:"intervalMillis"`
	// The destination path for the health check request. This is only required if the specified protocol is `http`.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The protocol for the health check request. Valid values are `http` and `tcp`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The amount of time to wait when receiving a response from the health check, in milliseconds.
	TimeoutMillis pulumi.IntInput `pulumi:"timeoutMillis"`
	// The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
}

func (VirtualNodeSpecListenerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerHealthCheck)(nil)).Elem()
}

func (i VirtualNodeSpecListenerHealthCheckArgs) ToVirtualNodeSpecListenerHealthCheckOutput() VirtualNodeSpecListenerHealthCheckOutput {
	return i.ToVirtualNodeSpecListenerHealthCheckOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerHealthCheckArgs) ToVirtualNodeSpecListenerHealthCheckOutputWithContext(ctx context.Context) VirtualNodeSpecListenerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerHealthCheckOutput)
}

func (i VirtualNodeSpecListenerHealthCheckArgs) ToVirtualNodeSpecListenerHealthCheckPtrOutput() VirtualNodeSpecListenerHealthCheckPtrOutput {
	return i.ToVirtualNodeSpecListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerHealthCheckArgs) ToVirtualNodeSpecListenerHealthCheckPtrOutputWithContext(ctx context.Context) VirtualNodeSpecListenerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerHealthCheckOutput).ToVirtualNodeSpecListenerHealthCheckPtrOutputWithContext(ctx)
}

// VirtualNodeSpecListenerHealthCheckPtrInput is an input type that accepts VirtualNodeSpecListenerHealthCheckArgs, VirtualNodeSpecListenerHealthCheckPtr and VirtualNodeSpecListenerHealthCheckPtrOutput values.
// You can construct a concrete instance of `VirtualNodeSpecListenerHealthCheckPtrInput` via:
//
// 		 VirtualNodeSpecListenerHealthCheckArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualNodeSpecListenerHealthCheckPtrInput interface {
	pulumi.Input

	ToVirtualNodeSpecListenerHealthCheckPtrOutput() VirtualNodeSpecListenerHealthCheckPtrOutput
	ToVirtualNodeSpecListenerHealthCheckPtrOutputWithContext(context.Context) VirtualNodeSpecListenerHealthCheckPtrOutput
}

type virtualNodeSpecListenerHealthCheckPtrType VirtualNodeSpecListenerHealthCheckArgs

func VirtualNodeSpecListenerHealthCheckPtr(v *VirtualNodeSpecListenerHealthCheckArgs) VirtualNodeSpecListenerHealthCheckPtrInput {
	return (*virtualNodeSpecListenerHealthCheckPtrType)(v)
}

func (*virtualNodeSpecListenerHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecListenerHealthCheck)(nil)).Elem()
}

func (i *virtualNodeSpecListenerHealthCheckPtrType) ToVirtualNodeSpecListenerHealthCheckPtrOutput() VirtualNodeSpecListenerHealthCheckPtrOutput {
	return i.ToVirtualNodeSpecListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (i *virtualNodeSpecListenerHealthCheckPtrType) ToVirtualNodeSpecListenerHealthCheckPtrOutputWithContext(ctx context.Context) VirtualNodeSpecListenerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerHealthCheckPtrOutput)
}

type VirtualNodeSpecListenerHealthCheckOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerHealthCheck)(nil)).Elem()
}

func (o VirtualNodeSpecListenerHealthCheckOutput) ToVirtualNodeSpecListenerHealthCheckOutput() VirtualNodeSpecListenerHealthCheckOutput {
	return o
}

func (o VirtualNodeSpecListenerHealthCheckOutput) ToVirtualNodeSpecListenerHealthCheckOutputWithContext(ctx context.Context) VirtualNodeSpecListenerHealthCheckOutput {
	return o
}

func (o VirtualNodeSpecListenerHealthCheckOutput) ToVirtualNodeSpecListenerHealthCheckPtrOutput() VirtualNodeSpecListenerHealthCheckPtrOutput {
	return o.ToVirtualNodeSpecListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (o VirtualNodeSpecListenerHealthCheckOutput) ToVirtualNodeSpecListenerHealthCheckPtrOutputWithContext(ctx context.Context) VirtualNodeSpecListenerHealthCheckPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) *VirtualNodeSpecListenerHealthCheck {
		return &v
	}).(VirtualNodeSpecListenerHealthCheckPtrOutput)
}

// The number of consecutive successful health checks that must occur before declaring listener healthy.
// * `intervalMillis`- (Required) The time period in milliseconds between each health check execution.
func (o VirtualNodeSpecListenerHealthCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

func (o VirtualNodeSpecListenerHealthCheckOutput) IntervalMillis() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) int { return v.IntervalMillis }).(pulumi.IntOutput)
}

// The destination path for the health check request. This is only required if the specified protocol is `http`.
func (o VirtualNodeSpecListenerHealthCheckOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
func (o VirtualNodeSpecListenerHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The protocol for the health check request. Valid values are `http` and `tcp`.
func (o VirtualNodeSpecListenerHealthCheckOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) string { return v.Protocol }).(pulumi.StringOutput)
}

// The amount of time to wait when receiving a response from the health check, in milliseconds.
func (o VirtualNodeSpecListenerHealthCheckOutput) TimeoutMillis() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) int { return v.TimeoutMillis }).(pulumi.IntOutput)
}

// The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
func (o VirtualNodeSpecListenerHealthCheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type VirtualNodeSpecListenerHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecListenerHealthCheck)(nil)).Elem()
}

func (o VirtualNodeSpecListenerHealthCheckPtrOutput) ToVirtualNodeSpecListenerHealthCheckPtrOutput() VirtualNodeSpecListenerHealthCheckPtrOutput {
	return o
}

func (o VirtualNodeSpecListenerHealthCheckPtrOutput) ToVirtualNodeSpecListenerHealthCheckPtrOutputWithContext(ctx context.Context) VirtualNodeSpecListenerHealthCheckPtrOutput {
	return o
}

func (o VirtualNodeSpecListenerHealthCheckPtrOutput) Elem() VirtualNodeSpecListenerHealthCheckOutput {
	return o.ApplyT(func(v *VirtualNodeSpecListenerHealthCheck) VirtualNodeSpecListenerHealthCheck { return *v }).(VirtualNodeSpecListenerHealthCheckOutput)
}

// The number of consecutive successful health checks that must occur before declaring listener healthy.
// * `intervalMillis`- (Required) The time period in milliseconds between each health check execution.
func (o VirtualNodeSpecListenerHealthCheckPtrOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

func (o VirtualNodeSpecListenerHealthCheckPtrOutput) IntervalMillis() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) int { return v.IntervalMillis }).(pulumi.IntOutput)
}

// The destination path for the health check request. This is only required if the specified protocol is `http`.
func (o VirtualNodeSpecListenerHealthCheckPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
func (o VirtualNodeSpecListenerHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The protocol for the health check request. Valid values are `http` and `tcp`.
func (o VirtualNodeSpecListenerHealthCheckPtrOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) string { return v.Protocol }).(pulumi.StringOutput)
}

// The amount of time to wait when receiving a response from the health check, in milliseconds.
func (o VirtualNodeSpecListenerHealthCheckPtrOutput) TimeoutMillis() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) int { return v.TimeoutMillis }).(pulumi.IntOutput)
}

// The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
func (o VirtualNodeSpecListenerHealthCheckPtrOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type VirtualNodeSpecListenerPortMapping struct {
	// The port used for the port mapping.
	Port int `pulumi:"port"`
	// The protocol used for the port mapping. Valid values are `http` and `tcp`.
	Protocol string `pulumi:"protocol"`
}

// VirtualNodeSpecListenerPortMappingInput is an input type that accepts VirtualNodeSpecListenerPortMappingArgs and VirtualNodeSpecListenerPortMappingOutput values.
// You can construct a concrete instance of `VirtualNodeSpecListenerPortMappingInput` via:
//
// 		 VirtualNodeSpecListenerPortMappingArgs{...}
//
type VirtualNodeSpecListenerPortMappingInput interface {
	pulumi.Input

	ToVirtualNodeSpecListenerPortMappingOutput() VirtualNodeSpecListenerPortMappingOutput
	ToVirtualNodeSpecListenerPortMappingOutputWithContext(context.Context) VirtualNodeSpecListenerPortMappingOutput
}

type VirtualNodeSpecListenerPortMappingArgs struct {
	// The port used for the port mapping.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol used for the port mapping. Valid values are `http` and `tcp`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (VirtualNodeSpecListenerPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerPortMapping)(nil)).Elem()
}

func (i VirtualNodeSpecListenerPortMappingArgs) ToVirtualNodeSpecListenerPortMappingOutput() VirtualNodeSpecListenerPortMappingOutput {
	return i.ToVirtualNodeSpecListenerPortMappingOutputWithContext(context.Background())
}

func (i VirtualNodeSpecListenerPortMappingArgs) ToVirtualNodeSpecListenerPortMappingOutputWithContext(ctx context.Context) VirtualNodeSpecListenerPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecListenerPortMappingOutput)
}

type VirtualNodeSpecListenerPortMappingOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecListenerPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecListenerPortMapping)(nil)).Elem()
}

func (o VirtualNodeSpecListenerPortMappingOutput) ToVirtualNodeSpecListenerPortMappingOutput() VirtualNodeSpecListenerPortMappingOutput {
	return o
}

func (o VirtualNodeSpecListenerPortMappingOutput) ToVirtualNodeSpecListenerPortMappingOutputWithContext(ctx context.Context) VirtualNodeSpecListenerPortMappingOutput {
	return o
}

// The port used for the port mapping.
func (o VirtualNodeSpecListenerPortMappingOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerPortMapping) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol used for the port mapping. Valid values are `http` and `tcp`.
func (o VirtualNodeSpecListenerPortMappingOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecListenerPortMapping) string { return v.Protocol }).(pulumi.StringOutput)
}

type VirtualNodeSpecLogging struct {
	// The access log configuration for a virtual node.
	AccessLog *VirtualNodeSpecLoggingAccessLog `pulumi:"accessLog"`
}

// VirtualNodeSpecLoggingInput is an input type that accepts VirtualNodeSpecLoggingArgs and VirtualNodeSpecLoggingOutput values.
// You can construct a concrete instance of `VirtualNodeSpecLoggingInput` via:
//
// 		 VirtualNodeSpecLoggingArgs{...}
//
type VirtualNodeSpecLoggingInput interface {
	pulumi.Input

	ToVirtualNodeSpecLoggingOutput() VirtualNodeSpecLoggingOutput
	ToVirtualNodeSpecLoggingOutputWithContext(context.Context) VirtualNodeSpecLoggingOutput
}

type VirtualNodeSpecLoggingArgs struct {
	// The access log configuration for a virtual node.
	AccessLog VirtualNodeSpecLoggingAccessLogPtrInput `pulumi:"accessLog"`
}

func (VirtualNodeSpecLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLogging)(nil)).Elem()
}

func (i VirtualNodeSpecLoggingArgs) ToVirtualNodeSpecLoggingOutput() VirtualNodeSpecLoggingOutput {
	return i.ToVirtualNodeSpecLoggingOutputWithContext(context.Background())
}

func (i VirtualNodeSpecLoggingArgs) ToVirtualNodeSpecLoggingOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingOutput)
}

func (i VirtualNodeSpecLoggingArgs) ToVirtualNodeSpecLoggingPtrOutput() VirtualNodeSpecLoggingPtrOutput {
	return i.ToVirtualNodeSpecLoggingPtrOutputWithContext(context.Background())
}

func (i VirtualNodeSpecLoggingArgs) ToVirtualNodeSpecLoggingPtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingOutput).ToVirtualNodeSpecLoggingPtrOutputWithContext(ctx)
}

// VirtualNodeSpecLoggingPtrInput is an input type that accepts VirtualNodeSpecLoggingArgs, VirtualNodeSpecLoggingPtr and VirtualNodeSpecLoggingPtrOutput values.
// You can construct a concrete instance of `VirtualNodeSpecLoggingPtrInput` via:
//
// 		 VirtualNodeSpecLoggingArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualNodeSpecLoggingPtrInput interface {
	pulumi.Input

	ToVirtualNodeSpecLoggingPtrOutput() VirtualNodeSpecLoggingPtrOutput
	ToVirtualNodeSpecLoggingPtrOutputWithContext(context.Context) VirtualNodeSpecLoggingPtrOutput
}

type virtualNodeSpecLoggingPtrType VirtualNodeSpecLoggingArgs

func VirtualNodeSpecLoggingPtr(v *VirtualNodeSpecLoggingArgs) VirtualNodeSpecLoggingPtrInput {
	return (*virtualNodeSpecLoggingPtrType)(v)
}

func (*virtualNodeSpecLoggingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecLogging)(nil)).Elem()
}

func (i *virtualNodeSpecLoggingPtrType) ToVirtualNodeSpecLoggingPtrOutput() VirtualNodeSpecLoggingPtrOutput {
	return i.ToVirtualNodeSpecLoggingPtrOutputWithContext(context.Background())
}

func (i *virtualNodeSpecLoggingPtrType) ToVirtualNodeSpecLoggingPtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingPtrOutput)
}

type VirtualNodeSpecLoggingOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLogging)(nil)).Elem()
}

func (o VirtualNodeSpecLoggingOutput) ToVirtualNodeSpecLoggingOutput() VirtualNodeSpecLoggingOutput {
	return o
}

func (o VirtualNodeSpecLoggingOutput) ToVirtualNodeSpecLoggingOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingOutput {
	return o
}

func (o VirtualNodeSpecLoggingOutput) ToVirtualNodeSpecLoggingPtrOutput() VirtualNodeSpecLoggingPtrOutput {
	return o.ToVirtualNodeSpecLoggingPtrOutputWithContext(context.Background())
}

func (o VirtualNodeSpecLoggingOutput) ToVirtualNodeSpecLoggingPtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecLogging) *VirtualNodeSpecLogging {
		return &v
	}).(VirtualNodeSpecLoggingPtrOutput)
}

// The access log configuration for a virtual node.
func (o VirtualNodeSpecLoggingOutput) AccessLog() VirtualNodeSpecLoggingAccessLogPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecLogging) *VirtualNodeSpecLoggingAccessLog { return v.AccessLog }).(VirtualNodeSpecLoggingAccessLogPtrOutput)
}

type VirtualNodeSpecLoggingPtrOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecLoggingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecLogging)(nil)).Elem()
}

func (o VirtualNodeSpecLoggingPtrOutput) ToVirtualNodeSpecLoggingPtrOutput() VirtualNodeSpecLoggingPtrOutput {
	return o
}

func (o VirtualNodeSpecLoggingPtrOutput) ToVirtualNodeSpecLoggingPtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingPtrOutput {
	return o
}

func (o VirtualNodeSpecLoggingPtrOutput) Elem() VirtualNodeSpecLoggingOutput {
	return o.ApplyT(func(v *VirtualNodeSpecLogging) VirtualNodeSpecLogging { return *v }).(VirtualNodeSpecLoggingOutput)
}

// The access log configuration for a virtual node.
func (o VirtualNodeSpecLoggingPtrOutput) AccessLog() VirtualNodeSpecLoggingAccessLogPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecLogging) *VirtualNodeSpecLoggingAccessLog { return v.AccessLog }).(VirtualNodeSpecLoggingAccessLogPtrOutput)
}

type VirtualNodeSpecLoggingAccessLog struct {
	// The file object to send virtual node access logs to.
	File *VirtualNodeSpecLoggingAccessLogFile `pulumi:"file"`
}

// VirtualNodeSpecLoggingAccessLogInput is an input type that accepts VirtualNodeSpecLoggingAccessLogArgs and VirtualNodeSpecLoggingAccessLogOutput values.
// You can construct a concrete instance of `VirtualNodeSpecLoggingAccessLogInput` via:
//
// 		 VirtualNodeSpecLoggingAccessLogArgs{...}
//
type VirtualNodeSpecLoggingAccessLogInput interface {
	pulumi.Input

	ToVirtualNodeSpecLoggingAccessLogOutput() VirtualNodeSpecLoggingAccessLogOutput
	ToVirtualNodeSpecLoggingAccessLogOutputWithContext(context.Context) VirtualNodeSpecLoggingAccessLogOutput
}

type VirtualNodeSpecLoggingAccessLogArgs struct {
	// The file object to send virtual node access logs to.
	File VirtualNodeSpecLoggingAccessLogFilePtrInput `pulumi:"file"`
}

func (VirtualNodeSpecLoggingAccessLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLog)(nil)).Elem()
}

func (i VirtualNodeSpecLoggingAccessLogArgs) ToVirtualNodeSpecLoggingAccessLogOutput() VirtualNodeSpecLoggingAccessLogOutput {
	return i.ToVirtualNodeSpecLoggingAccessLogOutputWithContext(context.Background())
}

func (i VirtualNodeSpecLoggingAccessLogArgs) ToVirtualNodeSpecLoggingAccessLogOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingAccessLogOutput)
}

func (i VirtualNodeSpecLoggingAccessLogArgs) ToVirtualNodeSpecLoggingAccessLogPtrOutput() VirtualNodeSpecLoggingAccessLogPtrOutput {
	return i.ToVirtualNodeSpecLoggingAccessLogPtrOutputWithContext(context.Background())
}

func (i VirtualNodeSpecLoggingAccessLogArgs) ToVirtualNodeSpecLoggingAccessLogPtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingAccessLogOutput).ToVirtualNodeSpecLoggingAccessLogPtrOutputWithContext(ctx)
}

// VirtualNodeSpecLoggingAccessLogPtrInput is an input type that accepts VirtualNodeSpecLoggingAccessLogArgs, VirtualNodeSpecLoggingAccessLogPtr and VirtualNodeSpecLoggingAccessLogPtrOutput values.
// You can construct a concrete instance of `VirtualNodeSpecLoggingAccessLogPtrInput` via:
//
// 		 VirtualNodeSpecLoggingAccessLogArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualNodeSpecLoggingAccessLogPtrInput interface {
	pulumi.Input

	ToVirtualNodeSpecLoggingAccessLogPtrOutput() VirtualNodeSpecLoggingAccessLogPtrOutput
	ToVirtualNodeSpecLoggingAccessLogPtrOutputWithContext(context.Context) VirtualNodeSpecLoggingAccessLogPtrOutput
}

type virtualNodeSpecLoggingAccessLogPtrType VirtualNodeSpecLoggingAccessLogArgs

func VirtualNodeSpecLoggingAccessLogPtr(v *VirtualNodeSpecLoggingAccessLogArgs) VirtualNodeSpecLoggingAccessLogPtrInput {
	return (*virtualNodeSpecLoggingAccessLogPtrType)(v)
}

func (*virtualNodeSpecLoggingAccessLogPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecLoggingAccessLog)(nil)).Elem()
}

func (i *virtualNodeSpecLoggingAccessLogPtrType) ToVirtualNodeSpecLoggingAccessLogPtrOutput() VirtualNodeSpecLoggingAccessLogPtrOutput {
	return i.ToVirtualNodeSpecLoggingAccessLogPtrOutputWithContext(context.Background())
}

func (i *virtualNodeSpecLoggingAccessLogPtrType) ToVirtualNodeSpecLoggingAccessLogPtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingAccessLogPtrOutput)
}

type VirtualNodeSpecLoggingAccessLogOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecLoggingAccessLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLog)(nil)).Elem()
}

func (o VirtualNodeSpecLoggingAccessLogOutput) ToVirtualNodeSpecLoggingAccessLogOutput() VirtualNodeSpecLoggingAccessLogOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogOutput) ToVirtualNodeSpecLoggingAccessLogOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogOutput) ToVirtualNodeSpecLoggingAccessLogPtrOutput() VirtualNodeSpecLoggingAccessLogPtrOutput {
	return o.ToVirtualNodeSpecLoggingAccessLogPtrOutputWithContext(context.Background())
}

func (o VirtualNodeSpecLoggingAccessLogOutput) ToVirtualNodeSpecLoggingAccessLogPtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecLoggingAccessLog) *VirtualNodeSpecLoggingAccessLog {
		return &v
	}).(VirtualNodeSpecLoggingAccessLogPtrOutput)
}

// The file object to send virtual node access logs to.
func (o VirtualNodeSpecLoggingAccessLogOutput) File() VirtualNodeSpecLoggingAccessLogFilePtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecLoggingAccessLog) *VirtualNodeSpecLoggingAccessLogFile { return v.File }).(VirtualNodeSpecLoggingAccessLogFilePtrOutput)
}

type VirtualNodeSpecLoggingAccessLogPtrOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecLoggingAccessLogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecLoggingAccessLog)(nil)).Elem()
}

func (o VirtualNodeSpecLoggingAccessLogPtrOutput) ToVirtualNodeSpecLoggingAccessLogPtrOutput() VirtualNodeSpecLoggingAccessLogPtrOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogPtrOutput) ToVirtualNodeSpecLoggingAccessLogPtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogPtrOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogPtrOutput) Elem() VirtualNodeSpecLoggingAccessLogOutput {
	return o.ApplyT(func(v *VirtualNodeSpecLoggingAccessLog) VirtualNodeSpecLoggingAccessLog { return *v }).(VirtualNodeSpecLoggingAccessLogOutput)
}

// The file object to send virtual node access logs to.
func (o VirtualNodeSpecLoggingAccessLogPtrOutput) File() VirtualNodeSpecLoggingAccessLogFilePtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecLoggingAccessLog) *VirtualNodeSpecLoggingAccessLogFile { return v.File }).(VirtualNodeSpecLoggingAccessLogFilePtrOutput)
}

type VirtualNodeSpecLoggingAccessLogFile struct {
	// The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out.
	Path string `pulumi:"path"`
}

// VirtualNodeSpecLoggingAccessLogFileInput is an input type that accepts VirtualNodeSpecLoggingAccessLogFileArgs and VirtualNodeSpecLoggingAccessLogFileOutput values.
// You can construct a concrete instance of `VirtualNodeSpecLoggingAccessLogFileInput` via:
//
// 		 VirtualNodeSpecLoggingAccessLogFileArgs{...}
//
type VirtualNodeSpecLoggingAccessLogFileInput interface {
	pulumi.Input

	ToVirtualNodeSpecLoggingAccessLogFileOutput() VirtualNodeSpecLoggingAccessLogFileOutput
	ToVirtualNodeSpecLoggingAccessLogFileOutputWithContext(context.Context) VirtualNodeSpecLoggingAccessLogFileOutput
}

type VirtualNodeSpecLoggingAccessLogFileArgs struct {
	// The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out.
	Path pulumi.StringInput `pulumi:"path"`
}

func (VirtualNodeSpecLoggingAccessLogFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLogFile)(nil)).Elem()
}

func (i VirtualNodeSpecLoggingAccessLogFileArgs) ToVirtualNodeSpecLoggingAccessLogFileOutput() VirtualNodeSpecLoggingAccessLogFileOutput {
	return i.ToVirtualNodeSpecLoggingAccessLogFileOutputWithContext(context.Background())
}

func (i VirtualNodeSpecLoggingAccessLogFileArgs) ToVirtualNodeSpecLoggingAccessLogFileOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingAccessLogFileOutput)
}

func (i VirtualNodeSpecLoggingAccessLogFileArgs) ToVirtualNodeSpecLoggingAccessLogFilePtrOutput() VirtualNodeSpecLoggingAccessLogFilePtrOutput {
	return i.ToVirtualNodeSpecLoggingAccessLogFilePtrOutputWithContext(context.Background())
}

func (i VirtualNodeSpecLoggingAccessLogFileArgs) ToVirtualNodeSpecLoggingAccessLogFilePtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingAccessLogFileOutput).ToVirtualNodeSpecLoggingAccessLogFilePtrOutputWithContext(ctx)
}

// VirtualNodeSpecLoggingAccessLogFilePtrInput is an input type that accepts VirtualNodeSpecLoggingAccessLogFileArgs, VirtualNodeSpecLoggingAccessLogFilePtr and VirtualNodeSpecLoggingAccessLogFilePtrOutput values.
// You can construct a concrete instance of `VirtualNodeSpecLoggingAccessLogFilePtrInput` via:
//
// 		 VirtualNodeSpecLoggingAccessLogFileArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualNodeSpecLoggingAccessLogFilePtrInput interface {
	pulumi.Input

	ToVirtualNodeSpecLoggingAccessLogFilePtrOutput() VirtualNodeSpecLoggingAccessLogFilePtrOutput
	ToVirtualNodeSpecLoggingAccessLogFilePtrOutputWithContext(context.Context) VirtualNodeSpecLoggingAccessLogFilePtrOutput
}

type virtualNodeSpecLoggingAccessLogFilePtrType VirtualNodeSpecLoggingAccessLogFileArgs

func VirtualNodeSpecLoggingAccessLogFilePtr(v *VirtualNodeSpecLoggingAccessLogFileArgs) VirtualNodeSpecLoggingAccessLogFilePtrInput {
	return (*virtualNodeSpecLoggingAccessLogFilePtrType)(v)
}

func (*virtualNodeSpecLoggingAccessLogFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecLoggingAccessLogFile)(nil)).Elem()
}

func (i *virtualNodeSpecLoggingAccessLogFilePtrType) ToVirtualNodeSpecLoggingAccessLogFilePtrOutput() VirtualNodeSpecLoggingAccessLogFilePtrOutput {
	return i.ToVirtualNodeSpecLoggingAccessLogFilePtrOutputWithContext(context.Background())
}

func (i *virtualNodeSpecLoggingAccessLogFilePtrType) ToVirtualNodeSpecLoggingAccessLogFilePtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecLoggingAccessLogFilePtrOutput)
}

type VirtualNodeSpecLoggingAccessLogFileOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecLoggingAccessLogFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecLoggingAccessLogFile)(nil)).Elem()
}

func (o VirtualNodeSpecLoggingAccessLogFileOutput) ToVirtualNodeSpecLoggingAccessLogFileOutput() VirtualNodeSpecLoggingAccessLogFileOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogFileOutput) ToVirtualNodeSpecLoggingAccessLogFileOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFileOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogFileOutput) ToVirtualNodeSpecLoggingAccessLogFilePtrOutput() VirtualNodeSpecLoggingAccessLogFilePtrOutput {
	return o.ToVirtualNodeSpecLoggingAccessLogFilePtrOutputWithContext(context.Background())
}

func (o VirtualNodeSpecLoggingAccessLogFileOutput) ToVirtualNodeSpecLoggingAccessLogFilePtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFilePtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecLoggingAccessLogFile) *VirtualNodeSpecLoggingAccessLogFile {
		return &v
	}).(VirtualNodeSpecLoggingAccessLogFilePtrOutput)
}

// The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out.
func (o VirtualNodeSpecLoggingAccessLogFileOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecLoggingAccessLogFile) string { return v.Path }).(pulumi.StringOutput)
}

type VirtualNodeSpecLoggingAccessLogFilePtrOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecLoggingAccessLogFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecLoggingAccessLogFile)(nil)).Elem()
}

func (o VirtualNodeSpecLoggingAccessLogFilePtrOutput) ToVirtualNodeSpecLoggingAccessLogFilePtrOutput() VirtualNodeSpecLoggingAccessLogFilePtrOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogFilePtrOutput) ToVirtualNodeSpecLoggingAccessLogFilePtrOutputWithContext(ctx context.Context) VirtualNodeSpecLoggingAccessLogFilePtrOutput {
	return o
}

func (o VirtualNodeSpecLoggingAccessLogFilePtrOutput) Elem() VirtualNodeSpecLoggingAccessLogFileOutput {
	return o.ApplyT(func(v *VirtualNodeSpecLoggingAccessLogFile) VirtualNodeSpecLoggingAccessLogFile { return *v }).(VirtualNodeSpecLoggingAccessLogFileOutput)
}

// The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out.
func (o VirtualNodeSpecLoggingAccessLogFilePtrOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecLoggingAccessLogFile) string { return v.Path }).(pulumi.StringOutput)
}

type VirtualNodeSpecServiceDiscovery struct {
	// Specifies any AWS Cloud Map information for the virtual node.
	AwsCloudMap *VirtualNodeSpecServiceDiscoveryAwsCloudMap `pulumi:"awsCloudMap"`
	// Specifies the DNS service name for the virtual node.
	Dns *VirtualNodeSpecServiceDiscoveryDns `pulumi:"dns"`
}

// VirtualNodeSpecServiceDiscoveryInput is an input type that accepts VirtualNodeSpecServiceDiscoveryArgs and VirtualNodeSpecServiceDiscoveryOutput values.
// You can construct a concrete instance of `VirtualNodeSpecServiceDiscoveryInput` via:
//
// 		 VirtualNodeSpecServiceDiscoveryArgs{...}
//
type VirtualNodeSpecServiceDiscoveryInput interface {
	pulumi.Input

	ToVirtualNodeSpecServiceDiscoveryOutput() VirtualNodeSpecServiceDiscoveryOutput
	ToVirtualNodeSpecServiceDiscoveryOutputWithContext(context.Context) VirtualNodeSpecServiceDiscoveryOutput
}

type VirtualNodeSpecServiceDiscoveryArgs struct {
	// Specifies any AWS Cloud Map information for the virtual node.
	AwsCloudMap VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrInput `pulumi:"awsCloudMap"`
	// Specifies the DNS service name for the virtual node.
	Dns VirtualNodeSpecServiceDiscoveryDnsPtrInput `pulumi:"dns"`
}

func (VirtualNodeSpecServiceDiscoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscovery)(nil)).Elem()
}

func (i VirtualNodeSpecServiceDiscoveryArgs) ToVirtualNodeSpecServiceDiscoveryOutput() VirtualNodeSpecServiceDiscoveryOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryOutputWithContext(context.Background())
}

func (i VirtualNodeSpecServiceDiscoveryArgs) ToVirtualNodeSpecServiceDiscoveryOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryOutput)
}

func (i VirtualNodeSpecServiceDiscoveryArgs) ToVirtualNodeSpecServiceDiscoveryPtrOutput() VirtualNodeSpecServiceDiscoveryPtrOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryPtrOutputWithContext(context.Background())
}

func (i VirtualNodeSpecServiceDiscoveryArgs) ToVirtualNodeSpecServiceDiscoveryPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryOutput).ToVirtualNodeSpecServiceDiscoveryPtrOutputWithContext(ctx)
}

// VirtualNodeSpecServiceDiscoveryPtrInput is an input type that accepts VirtualNodeSpecServiceDiscoveryArgs, VirtualNodeSpecServiceDiscoveryPtr and VirtualNodeSpecServiceDiscoveryPtrOutput values.
// You can construct a concrete instance of `VirtualNodeSpecServiceDiscoveryPtrInput` via:
//
// 		 VirtualNodeSpecServiceDiscoveryArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualNodeSpecServiceDiscoveryPtrInput interface {
	pulumi.Input

	ToVirtualNodeSpecServiceDiscoveryPtrOutput() VirtualNodeSpecServiceDiscoveryPtrOutput
	ToVirtualNodeSpecServiceDiscoveryPtrOutputWithContext(context.Context) VirtualNodeSpecServiceDiscoveryPtrOutput
}

type virtualNodeSpecServiceDiscoveryPtrType VirtualNodeSpecServiceDiscoveryArgs

func VirtualNodeSpecServiceDiscoveryPtr(v *VirtualNodeSpecServiceDiscoveryArgs) VirtualNodeSpecServiceDiscoveryPtrInput {
	return (*virtualNodeSpecServiceDiscoveryPtrType)(v)
}

func (*virtualNodeSpecServiceDiscoveryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecServiceDiscovery)(nil)).Elem()
}

func (i *virtualNodeSpecServiceDiscoveryPtrType) ToVirtualNodeSpecServiceDiscoveryPtrOutput() VirtualNodeSpecServiceDiscoveryPtrOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryPtrOutputWithContext(context.Background())
}

func (i *virtualNodeSpecServiceDiscoveryPtrType) ToVirtualNodeSpecServiceDiscoveryPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryPtrOutput)
}

type VirtualNodeSpecServiceDiscoveryOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecServiceDiscoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscovery)(nil)).Elem()
}

func (o VirtualNodeSpecServiceDiscoveryOutput) ToVirtualNodeSpecServiceDiscoveryOutput() VirtualNodeSpecServiceDiscoveryOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryOutput) ToVirtualNodeSpecServiceDiscoveryOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryOutput) ToVirtualNodeSpecServiceDiscoveryPtrOutput() VirtualNodeSpecServiceDiscoveryPtrOutput {
	return o.ToVirtualNodeSpecServiceDiscoveryPtrOutputWithContext(context.Background())
}

func (o VirtualNodeSpecServiceDiscoveryOutput) ToVirtualNodeSpecServiceDiscoveryPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscovery) *VirtualNodeSpecServiceDiscovery {
		return &v
	}).(VirtualNodeSpecServiceDiscoveryPtrOutput)
}

// Specifies any AWS Cloud Map information for the virtual node.
func (o VirtualNodeSpecServiceDiscoveryOutput) AwsCloudMap() VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscovery) *VirtualNodeSpecServiceDiscoveryAwsCloudMap {
		return v.AwsCloudMap
	}).(VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput)
}

// Specifies the DNS service name for the virtual node.
func (o VirtualNodeSpecServiceDiscoveryOutput) Dns() VirtualNodeSpecServiceDiscoveryDnsPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscovery) *VirtualNodeSpecServiceDiscoveryDns { return v.Dns }).(VirtualNodeSpecServiceDiscoveryDnsPtrOutput)
}

type VirtualNodeSpecServiceDiscoveryPtrOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecServiceDiscoveryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecServiceDiscovery)(nil)).Elem()
}

func (o VirtualNodeSpecServiceDiscoveryPtrOutput) ToVirtualNodeSpecServiceDiscoveryPtrOutput() VirtualNodeSpecServiceDiscoveryPtrOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryPtrOutput) ToVirtualNodeSpecServiceDiscoveryPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryPtrOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryPtrOutput) Elem() VirtualNodeSpecServiceDiscoveryOutput {
	return o.ApplyT(func(v *VirtualNodeSpecServiceDiscovery) VirtualNodeSpecServiceDiscovery { return *v }).(VirtualNodeSpecServiceDiscoveryOutput)
}

// Specifies any AWS Cloud Map information for the virtual node.
func (o VirtualNodeSpecServiceDiscoveryPtrOutput) AwsCloudMap() VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscovery) *VirtualNodeSpecServiceDiscoveryAwsCloudMap {
		return v.AwsCloudMap
	}).(VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput)
}

// Specifies the DNS service name for the virtual node.
func (o VirtualNodeSpecServiceDiscoveryPtrOutput) Dns() VirtualNodeSpecServiceDiscoveryDnsPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscovery) *VirtualNodeSpecServiceDiscoveryDns { return v.Dns }).(VirtualNodeSpecServiceDiscoveryDnsPtrOutput)
}

type VirtualNodeSpecServiceDiscoveryAwsCloudMap struct {
	// A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
	Attributes map[string]string `pulumi:"attributes"`
	// The name of the AWS Cloud Map namespace to use.
	// Use the [`servicediscovery.HttpNamespace`](https://www.terraform.io/docs/providers/aws/r/service_discovery_http_namespace.html) resource to configure a Cloud Map namespace.
	NamespaceName string `pulumi:"namespaceName"`
	// The name of the AWS Cloud Map service to use. Use the [`servicediscovery.Service`](https://www.terraform.io/docs/providers/aws/r/service_discovery_service.html) resource to configure a Cloud Map service.
	ServiceName string `pulumi:"serviceName"`
}

// VirtualNodeSpecServiceDiscoveryAwsCloudMapInput is an input type that accepts VirtualNodeSpecServiceDiscoveryAwsCloudMap and VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput values.
// You can construct a concrete instance of `VirtualNodeSpecServiceDiscoveryAwsCloudMapInput` via:
//
// 		 VirtualNodeSpecServiceDiscoveryAwsCloudMap{ "key": VirtualNodeSpecServiceDiscoveryAwsCloudArgs{...} }
//
type VirtualNodeSpecServiceDiscoveryAwsCloudMapInput interface {
	pulumi.Input

	ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput() VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput
	ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputWithContext(context.Context) VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput
}

type VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs struct {
	// A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
	Attributes pulumi.StringMapInput `pulumi:"attributes"`
	// The name of the AWS Cloud Map namespace to use.
	// Use the [`servicediscovery.HttpNamespace`](https://www.terraform.io/docs/providers/aws/r/service_discovery_http_namespace.html) resource to configure a Cloud Map namespace.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// The name of the AWS Cloud Map service to use. Use the [`servicediscovery.Service`](https://www.terraform.io/docs/providers/aws/r/service_discovery_service.html) resource to configure a Cloud Map service.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscoveryAwsCloudMap)(nil)).Elem()
}

func (i VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput() VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputWithContext(context.Background())
}

func (i VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput)
}

func (i VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput() VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutputWithContext(context.Background())
}

func (i VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput).ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutputWithContext(ctx)
}

// VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrInput is an input type that accepts VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs, VirtualNodeSpecServiceDiscoveryAwsCloudMapPtr and VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput values.
// You can construct a concrete instance of `VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrInput` via:
//
// 		 VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrInput interface {
	pulumi.Input

	ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput() VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput
	ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutputWithContext(context.Context) VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput
}

type virtualNodeSpecServiceDiscoveryAwsCloudMapPtrType VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs

func VirtualNodeSpecServiceDiscoveryAwsCloudMapPtr(v *VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs) VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrInput {
	return (*virtualNodeSpecServiceDiscoveryAwsCloudMapPtrType)(v)
}

func (*virtualNodeSpecServiceDiscoveryAwsCloudMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecServiceDiscoveryAwsCloudMap)(nil)).Elem()
}

func (i *virtualNodeSpecServiceDiscoveryAwsCloudMapPtrType) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput() VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutputWithContext(context.Background())
}

func (i *virtualNodeSpecServiceDiscoveryAwsCloudMapPtrType) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput)
}

type VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscoveryAwsCloudMap)(nil)).Elem()
}

func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutput() VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput() VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput {
	return o.ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutputWithContext(context.Background())
}

func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscoveryAwsCloudMap) *VirtualNodeSpecServiceDiscoveryAwsCloudMap {
		return &v
	}).(VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput)
}

// A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscoveryAwsCloudMap) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

// The name of the AWS Cloud Map namespace to use.
// Use the [`servicediscovery.HttpNamespace`](https://www.terraform.io/docs/providers/aws/r/service_discovery_http_namespace.html) resource to configure a Cloud Map namespace.
func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscoveryAwsCloudMap) string { return v.NamespaceName }).(pulumi.StringOutput)
}

// The name of the AWS Cloud Map service to use. Use the [`servicediscovery.Service`](https://www.terraform.io/docs/providers/aws/r/service_discovery_service.html) resource to configure a Cloud Map service.
func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscoveryAwsCloudMap) string { return v.ServiceName }).(pulumi.StringOutput)
}

type VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecServiceDiscoveryAwsCloudMap)(nil)).Elem()
}

func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput() VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput) ToVirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput) Elem() VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput {
	return o.ApplyT(func(v *VirtualNodeSpecServiceDiscoveryAwsCloudMap) VirtualNodeSpecServiceDiscoveryAwsCloudMap {
		return *v
	}).(VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput)
}

// A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscoveryAwsCloudMap) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

// The name of the AWS Cloud Map namespace to use.
// Use the [`servicediscovery.HttpNamespace`](https://www.terraform.io/docs/providers/aws/r/service_discovery_http_namespace.html) resource to configure a Cloud Map namespace.
func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscoveryAwsCloudMap) string { return v.NamespaceName }).(pulumi.StringOutput)
}

// The name of the AWS Cloud Map service to use. Use the [`servicediscovery.Service`](https://www.terraform.io/docs/providers/aws/r/service_discovery_service.html) resource to configure a Cloud Map service.
func (o VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscoveryAwsCloudMap) string { return v.ServiceName }).(pulumi.StringOutput)
}

type VirtualNodeSpecServiceDiscoveryDns struct {
	// The DNS host name for your virtual node.
	Hostname string `pulumi:"hostname"`
}

// VirtualNodeSpecServiceDiscoveryDnsInput is an input type that accepts VirtualNodeSpecServiceDiscoveryDnsArgs and VirtualNodeSpecServiceDiscoveryDnsOutput values.
// You can construct a concrete instance of `VirtualNodeSpecServiceDiscoveryDnsInput` via:
//
// 		 VirtualNodeSpecServiceDiscoveryDnsArgs{...}
//
type VirtualNodeSpecServiceDiscoveryDnsInput interface {
	pulumi.Input

	ToVirtualNodeSpecServiceDiscoveryDnsOutput() VirtualNodeSpecServiceDiscoveryDnsOutput
	ToVirtualNodeSpecServiceDiscoveryDnsOutputWithContext(context.Context) VirtualNodeSpecServiceDiscoveryDnsOutput
}

type VirtualNodeSpecServiceDiscoveryDnsArgs struct {
	// The DNS host name for your virtual node.
	Hostname pulumi.StringInput `pulumi:"hostname"`
}

func (VirtualNodeSpecServiceDiscoveryDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscoveryDns)(nil)).Elem()
}

func (i VirtualNodeSpecServiceDiscoveryDnsArgs) ToVirtualNodeSpecServiceDiscoveryDnsOutput() VirtualNodeSpecServiceDiscoveryDnsOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryDnsOutputWithContext(context.Background())
}

func (i VirtualNodeSpecServiceDiscoveryDnsArgs) ToVirtualNodeSpecServiceDiscoveryDnsOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryDnsOutput)
}

func (i VirtualNodeSpecServiceDiscoveryDnsArgs) ToVirtualNodeSpecServiceDiscoveryDnsPtrOutput() VirtualNodeSpecServiceDiscoveryDnsPtrOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryDnsPtrOutputWithContext(context.Background())
}

func (i VirtualNodeSpecServiceDiscoveryDnsArgs) ToVirtualNodeSpecServiceDiscoveryDnsPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryDnsOutput).ToVirtualNodeSpecServiceDiscoveryDnsPtrOutputWithContext(ctx)
}

// VirtualNodeSpecServiceDiscoveryDnsPtrInput is an input type that accepts VirtualNodeSpecServiceDiscoveryDnsArgs, VirtualNodeSpecServiceDiscoveryDnsPtr and VirtualNodeSpecServiceDiscoveryDnsPtrOutput values.
// You can construct a concrete instance of `VirtualNodeSpecServiceDiscoveryDnsPtrInput` via:
//
// 		 VirtualNodeSpecServiceDiscoveryDnsArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualNodeSpecServiceDiscoveryDnsPtrInput interface {
	pulumi.Input

	ToVirtualNodeSpecServiceDiscoveryDnsPtrOutput() VirtualNodeSpecServiceDiscoveryDnsPtrOutput
	ToVirtualNodeSpecServiceDiscoveryDnsPtrOutputWithContext(context.Context) VirtualNodeSpecServiceDiscoveryDnsPtrOutput
}

type virtualNodeSpecServiceDiscoveryDnsPtrType VirtualNodeSpecServiceDiscoveryDnsArgs

func VirtualNodeSpecServiceDiscoveryDnsPtr(v *VirtualNodeSpecServiceDiscoveryDnsArgs) VirtualNodeSpecServiceDiscoveryDnsPtrInput {
	return (*virtualNodeSpecServiceDiscoveryDnsPtrType)(v)
}

func (*virtualNodeSpecServiceDiscoveryDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecServiceDiscoveryDns)(nil)).Elem()
}

func (i *virtualNodeSpecServiceDiscoveryDnsPtrType) ToVirtualNodeSpecServiceDiscoveryDnsPtrOutput() VirtualNodeSpecServiceDiscoveryDnsPtrOutput {
	return i.ToVirtualNodeSpecServiceDiscoveryDnsPtrOutputWithContext(context.Background())
}

func (i *virtualNodeSpecServiceDiscoveryDnsPtrType) ToVirtualNodeSpecServiceDiscoveryDnsPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodeSpecServiceDiscoveryDnsPtrOutput)
}

type VirtualNodeSpecServiceDiscoveryDnsOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecServiceDiscoveryDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNodeSpecServiceDiscoveryDns)(nil)).Elem()
}

func (o VirtualNodeSpecServiceDiscoveryDnsOutput) ToVirtualNodeSpecServiceDiscoveryDnsOutput() VirtualNodeSpecServiceDiscoveryDnsOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryDnsOutput) ToVirtualNodeSpecServiceDiscoveryDnsOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryDnsOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryDnsOutput) ToVirtualNodeSpecServiceDiscoveryDnsPtrOutput() VirtualNodeSpecServiceDiscoveryDnsPtrOutput {
	return o.ToVirtualNodeSpecServiceDiscoveryDnsPtrOutputWithContext(context.Background())
}

func (o VirtualNodeSpecServiceDiscoveryDnsOutput) ToVirtualNodeSpecServiceDiscoveryDnsPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryDnsPtrOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscoveryDns) *VirtualNodeSpecServiceDiscoveryDns {
		return &v
	}).(VirtualNodeSpecServiceDiscoveryDnsPtrOutput)
}

// The DNS host name for your virtual node.
func (o VirtualNodeSpecServiceDiscoveryDnsOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscoveryDns) string { return v.Hostname }).(pulumi.StringOutput)
}

type VirtualNodeSpecServiceDiscoveryDnsPtrOutput struct{ *pulumi.OutputState }

func (VirtualNodeSpecServiceDiscoveryDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodeSpecServiceDiscoveryDns)(nil)).Elem()
}

func (o VirtualNodeSpecServiceDiscoveryDnsPtrOutput) ToVirtualNodeSpecServiceDiscoveryDnsPtrOutput() VirtualNodeSpecServiceDiscoveryDnsPtrOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryDnsPtrOutput) ToVirtualNodeSpecServiceDiscoveryDnsPtrOutputWithContext(ctx context.Context) VirtualNodeSpecServiceDiscoveryDnsPtrOutput {
	return o
}

func (o VirtualNodeSpecServiceDiscoveryDnsPtrOutput) Elem() VirtualNodeSpecServiceDiscoveryDnsOutput {
	return o.ApplyT(func(v *VirtualNodeSpecServiceDiscoveryDns) VirtualNodeSpecServiceDiscoveryDns { return *v }).(VirtualNodeSpecServiceDiscoveryDnsOutput)
}

// The DNS host name for your virtual node.
func (o VirtualNodeSpecServiceDiscoveryDnsPtrOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNodeSpecServiceDiscoveryDns) string { return v.Hostname }).(pulumi.StringOutput)
}

type VirtualRouterSpec struct {
	// The listeners that the virtual router is expected to receive inbound traffic from.
	// Currently only one listener is supported per virtual router.
	Listener VirtualRouterSpecListener `pulumi:"listener"`
}

// VirtualRouterSpecInput is an input type that accepts VirtualRouterSpecArgs and VirtualRouterSpecOutput values.
// You can construct a concrete instance of `VirtualRouterSpecInput` via:
//
// 		 VirtualRouterSpecArgs{...}
//
type VirtualRouterSpecInput interface {
	pulumi.Input

	ToVirtualRouterSpecOutput() VirtualRouterSpecOutput
	ToVirtualRouterSpecOutputWithContext(context.Context) VirtualRouterSpecOutput
}

type VirtualRouterSpecArgs struct {
	// The listeners that the virtual router is expected to receive inbound traffic from.
	// Currently only one listener is supported per virtual router.
	Listener VirtualRouterSpecListenerInput `pulumi:"listener"`
}

func (VirtualRouterSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpec)(nil)).Elem()
}

func (i VirtualRouterSpecArgs) ToVirtualRouterSpecOutput() VirtualRouterSpecOutput {
	return i.ToVirtualRouterSpecOutputWithContext(context.Background())
}

func (i VirtualRouterSpecArgs) ToVirtualRouterSpecOutputWithContext(ctx context.Context) VirtualRouterSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRouterSpecOutput)
}

func (i VirtualRouterSpecArgs) ToVirtualRouterSpecPtrOutput() VirtualRouterSpecPtrOutput {
	return i.ToVirtualRouterSpecPtrOutputWithContext(context.Background())
}

func (i VirtualRouterSpecArgs) ToVirtualRouterSpecPtrOutputWithContext(ctx context.Context) VirtualRouterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRouterSpecOutput).ToVirtualRouterSpecPtrOutputWithContext(ctx)
}

// VirtualRouterSpecPtrInput is an input type that accepts VirtualRouterSpecArgs, VirtualRouterSpecPtr and VirtualRouterSpecPtrOutput values.
// You can construct a concrete instance of `VirtualRouterSpecPtrInput` via:
//
// 		 VirtualRouterSpecArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualRouterSpecPtrInput interface {
	pulumi.Input

	ToVirtualRouterSpecPtrOutput() VirtualRouterSpecPtrOutput
	ToVirtualRouterSpecPtrOutputWithContext(context.Context) VirtualRouterSpecPtrOutput
}

type virtualRouterSpecPtrType VirtualRouterSpecArgs

func VirtualRouterSpecPtr(v *VirtualRouterSpecArgs) VirtualRouterSpecPtrInput {
	return (*virtualRouterSpecPtrType)(v)
}

func (*virtualRouterSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualRouterSpec)(nil)).Elem()
}

func (i *virtualRouterSpecPtrType) ToVirtualRouterSpecPtrOutput() VirtualRouterSpecPtrOutput {
	return i.ToVirtualRouterSpecPtrOutputWithContext(context.Background())
}

func (i *virtualRouterSpecPtrType) ToVirtualRouterSpecPtrOutputWithContext(ctx context.Context) VirtualRouterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRouterSpecPtrOutput)
}

type VirtualRouterSpecOutput struct{ *pulumi.OutputState }

func (VirtualRouterSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpec)(nil)).Elem()
}

func (o VirtualRouterSpecOutput) ToVirtualRouterSpecOutput() VirtualRouterSpecOutput {
	return o
}

func (o VirtualRouterSpecOutput) ToVirtualRouterSpecOutputWithContext(ctx context.Context) VirtualRouterSpecOutput {
	return o
}

func (o VirtualRouterSpecOutput) ToVirtualRouterSpecPtrOutput() VirtualRouterSpecPtrOutput {
	return o.ToVirtualRouterSpecPtrOutputWithContext(context.Background())
}

func (o VirtualRouterSpecOutput) ToVirtualRouterSpecPtrOutputWithContext(ctx context.Context) VirtualRouterSpecPtrOutput {
	return o.ApplyT(func(v VirtualRouterSpec) *VirtualRouterSpec {
		return &v
	}).(VirtualRouterSpecPtrOutput)
}

// The listeners that the virtual router is expected to receive inbound traffic from.
// Currently only one listener is supported per virtual router.
func (o VirtualRouterSpecOutput) Listener() VirtualRouterSpecListenerOutput {
	return o.ApplyT(func(v VirtualRouterSpec) VirtualRouterSpecListener { return v.Listener }).(VirtualRouterSpecListenerOutput)
}

type VirtualRouterSpecPtrOutput struct{ *pulumi.OutputState }

func (VirtualRouterSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualRouterSpec)(nil)).Elem()
}

func (o VirtualRouterSpecPtrOutput) ToVirtualRouterSpecPtrOutput() VirtualRouterSpecPtrOutput {
	return o
}

func (o VirtualRouterSpecPtrOutput) ToVirtualRouterSpecPtrOutputWithContext(ctx context.Context) VirtualRouterSpecPtrOutput {
	return o
}

func (o VirtualRouterSpecPtrOutput) Elem() VirtualRouterSpecOutput {
	return o.ApplyT(func(v *VirtualRouterSpec) VirtualRouterSpec { return *v }).(VirtualRouterSpecOutput)
}

// The listeners that the virtual router is expected to receive inbound traffic from.
// Currently only one listener is supported per virtual router.
func (o VirtualRouterSpecPtrOutput) Listener() VirtualRouterSpecListenerOutput {
	return o.ApplyT(func(v VirtualRouterSpec) VirtualRouterSpecListener { return v.Listener }).(VirtualRouterSpecListenerOutput)
}

type VirtualRouterSpecListener struct {
	// The port mapping information for the listener.
	PortMapping VirtualRouterSpecListenerPortMapping `pulumi:"portMapping"`
}

// VirtualRouterSpecListenerInput is an input type that accepts VirtualRouterSpecListenerArgs and VirtualRouterSpecListenerOutput values.
// You can construct a concrete instance of `VirtualRouterSpecListenerInput` via:
//
// 		 VirtualRouterSpecListenerArgs{...}
//
type VirtualRouterSpecListenerInput interface {
	pulumi.Input

	ToVirtualRouterSpecListenerOutput() VirtualRouterSpecListenerOutput
	ToVirtualRouterSpecListenerOutputWithContext(context.Context) VirtualRouterSpecListenerOutput
}

type VirtualRouterSpecListenerArgs struct {
	// The port mapping information for the listener.
	PortMapping VirtualRouterSpecListenerPortMappingInput `pulumi:"portMapping"`
}

func (VirtualRouterSpecListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpecListener)(nil)).Elem()
}

func (i VirtualRouterSpecListenerArgs) ToVirtualRouterSpecListenerOutput() VirtualRouterSpecListenerOutput {
	return i.ToVirtualRouterSpecListenerOutputWithContext(context.Background())
}

func (i VirtualRouterSpecListenerArgs) ToVirtualRouterSpecListenerOutputWithContext(ctx context.Context) VirtualRouterSpecListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRouterSpecListenerOutput)
}

type VirtualRouterSpecListenerOutput struct{ *pulumi.OutputState }

func (VirtualRouterSpecListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpecListener)(nil)).Elem()
}

func (o VirtualRouterSpecListenerOutput) ToVirtualRouterSpecListenerOutput() VirtualRouterSpecListenerOutput {
	return o
}

func (o VirtualRouterSpecListenerOutput) ToVirtualRouterSpecListenerOutputWithContext(ctx context.Context) VirtualRouterSpecListenerOutput {
	return o
}

// The port mapping information for the listener.
func (o VirtualRouterSpecListenerOutput) PortMapping() VirtualRouterSpecListenerPortMappingOutput {
	return o.ApplyT(func(v VirtualRouterSpecListener) VirtualRouterSpecListenerPortMapping { return v.PortMapping }).(VirtualRouterSpecListenerPortMappingOutput)
}

type VirtualRouterSpecListenerPortMapping struct {
	// The port used for the port mapping.
	Port int `pulumi:"port"`
	// The protocol used for the port mapping. Valid values are `http` and `tcp`.
	Protocol string `pulumi:"protocol"`
}

// VirtualRouterSpecListenerPortMappingInput is an input type that accepts VirtualRouterSpecListenerPortMappingArgs and VirtualRouterSpecListenerPortMappingOutput values.
// You can construct a concrete instance of `VirtualRouterSpecListenerPortMappingInput` via:
//
// 		 VirtualRouterSpecListenerPortMappingArgs{...}
//
type VirtualRouterSpecListenerPortMappingInput interface {
	pulumi.Input

	ToVirtualRouterSpecListenerPortMappingOutput() VirtualRouterSpecListenerPortMappingOutput
	ToVirtualRouterSpecListenerPortMappingOutputWithContext(context.Context) VirtualRouterSpecListenerPortMappingOutput
}

type VirtualRouterSpecListenerPortMappingArgs struct {
	// The port used for the port mapping.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol used for the port mapping. Valid values are `http` and `tcp`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (VirtualRouterSpecListenerPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpecListenerPortMapping)(nil)).Elem()
}

func (i VirtualRouterSpecListenerPortMappingArgs) ToVirtualRouterSpecListenerPortMappingOutput() VirtualRouterSpecListenerPortMappingOutput {
	return i.ToVirtualRouterSpecListenerPortMappingOutputWithContext(context.Background())
}

func (i VirtualRouterSpecListenerPortMappingArgs) ToVirtualRouterSpecListenerPortMappingOutputWithContext(ctx context.Context) VirtualRouterSpecListenerPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRouterSpecListenerPortMappingOutput)
}

type VirtualRouterSpecListenerPortMappingOutput struct{ *pulumi.OutputState }

func (VirtualRouterSpecListenerPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRouterSpecListenerPortMapping)(nil)).Elem()
}

func (o VirtualRouterSpecListenerPortMappingOutput) ToVirtualRouterSpecListenerPortMappingOutput() VirtualRouterSpecListenerPortMappingOutput {
	return o
}

func (o VirtualRouterSpecListenerPortMappingOutput) ToVirtualRouterSpecListenerPortMappingOutputWithContext(ctx context.Context) VirtualRouterSpecListenerPortMappingOutput {
	return o
}

// The port used for the port mapping.
func (o VirtualRouterSpecListenerPortMappingOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualRouterSpecListenerPortMapping) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol used for the port mapping. Valid values are `http` and `tcp`.
func (o VirtualRouterSpecListenerPortMappingOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualRouterSpecListenerPortMapping) string { return v.Protocol }).(pulumi.StringOutput)
}

type VirtualServiceSpec struct {
	Provider *VirtualServiceSpecProvider `pulumi:"provider"`
}

// VirtualServiceSpecInput is an input type that accepts VirtualServiceSpecArgs and VirtualServiceSpecOutput values.
// You can construct a concrete instance of `VirtualServiceSpecInput` via:
//
// 		 VirtualServiceSpecArgs{...}
//
type VirtualServiceSpecInput interface {
	pulumi.Input

	ToVirtualServiceSpecOutput() VirtualServiceSpecOutput
	ToVirtualServiceSpecOutputWithContext(context.Context) VirtualServiceSpecOutput
}

type VirtualServiceSpecArgs struct {
	Provider VirtualServiceSpecProviderPtrInput `pulumi:"provider"`
}

func (VirtualServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpec)(nil)).Elem()
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecOutput() VirtualServiceSpecOutput {
	return i.ToVirtualServiceSpecOutputWithContext(context.Background())
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecOutputWithContext(ctx context.Context) VirtualServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecOutput)
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return i.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecOutput).ToVirtualServiceSpecPtrOutputWithContext(ctx)
}

// VirtualServiceSpecPtrInput is an input type that accepts VirtualServiceSpecArgs, VirtualServiceSpecPtr and VirtualServiceSpecPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecPtrInput` via:
//
// 		 VirtualServiceSpecArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualServiceSpecPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput
	ToVirtualServiceSpecPtrOutputWithContext(context.Context) VirtualServiceSpecPtrOutput
}

type virtualServiceSpecPtrType VirtualServiceSpecArgs

func VirtualServiceSpecPtr(v *VirtualServiceSpecArgs) VirtualServiceSpecPtrInput {
	return (*virtualServiceSpecPtrType)(v)
}

func (*virtualServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpec)(nil)).Elem()
}

func (i *virtualServiceSpecPtrType) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return i.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecPtrType) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecPtrOutput)
}

type VirtualServiceSpecOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpec)(nil)).Elem()
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecOutput() VirtualServiceSpecOutput {
	return o
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecOutputWithContext(ctx context.Context) VirtualServiceSpecOutput {
	return o
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return o.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpec) *VirtualServiceSpec {
		return &v
	}).(VirtualServiceSpecPtrOutput)
}
func (o VirtualServiceSpecOutput) Provider() VirtualServiceSpecProviderPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpec) *VirtualServiceSpecProvider { return v.Provider }).(VirtualServiceSpecProviderPtrOutput)
}

type VirtualServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpec)(nil)).Elem()
}

func (o VirtualServiceSpecPtrOutput) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return o
}

func (o VirtualServiceSpecPtrOutput) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return o
}

func (o VirtualServiceSpecPtrOutput) Elem() VirtualServiceSpecOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) VirtualServiceSpec { return *v }).(VirtualServiceSpecOutput)
}

func (o VirtualServiceSpecPtrOutput) Provider() VirtualServiceSpecProviderPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpec) *VirtualServiceSpecProvider { return v.Provider }).(VirtualServiceSpecProviderPtrOutput)
}

type VirtualServiceSpecProvider struct {
	// The virtual node associated with a virtual service.
	VirtualNode *VirtualServiceSpecProviderVirtualNode `pulumi:"virtualNode"`
	// The virtual router associated with a virtual service.
	VirtualRouter *VirtualServiceSpecProviderVirtualRouter `pulumi:"virtualRouter"`
}

// VirtualServiceSpecProviderInput is an input type that accepts VirtualServiceSpecProviderArgs and VirtualServiceSpecProviderOutput values.
// You can construct a concrete instance of `VirtualServiceSpecProviderInput` via:
//
// 		 VirtualServiceSpecProviderArgs{...}
//
type VirtualServiceSpecProviderInput interface {
	pulumi.Input

	ToVirtualServiceSpecProviderOutput() VirtualServiceSpecProviderOutput
	ToVirtualServiceSpecProviderOutputWithContext(context.Context) VirtualServiceSpecProviderOutput
}

type VirtualServiceSpecProviderArgs struct {
	// The virtual node associated with a virtual service.
	VirtualNode VirtualServiceSpecProviderVirtualNodePtrInput `pulumi:"virtualNode"`
	// The virtual router associated with a virtual service.
	VirtualRouter VirtualServiceSpecProviderVirtualRouterPtrInput `pulumi:"virtualRouter"`
}

func (VirtualServiceSpecProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProvider)(nil)).Elem()
}

func (i VirtualServiceSpecProviderArgs) ToVirtualServiceSpecProviderOutput() VirtualServiceSpecProviderOutput {
	return i.ToVirtualServiceSpecProviderOutputWithContext(context.Background())
}

func (i VirtualServiceSpecProviderArgs) ToVirtualServiceSpecProviderOutputWithContext(ctx context.Context) VirtualServiceSpecProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderOutput)
}

func (i VirtualServiceSpecProviderArgs) ToVirtualServiceSpecProviderPtrOutput() VirtualServiceSpecProviderPtrOutput {
	return i.ToVirtualServiceSpecProviderPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecProviderArgs) ToVirtualServiceSpecProviderPtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderOutput).ToVirtualServiceSpecProviderPtrOutputWithContext(ctx)
}

// VirtualServiceSpecProviderPtrInput is an input type that accepts VirtualServiceSpecProviderArgs, VirtualServiceSpecProviderPtr and VirtualServiceSpecProviderPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecProviderPtrInput` via:
//
// 		 VirtualServiceSpecProviderArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualServiceSpecProviderPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecProviderPtrOutput() VirtualServiceSpecProviderPtrOutput
	ToVirtualServiceSpecProviderPtrOutputWithContext(context.Context) VirtualServiceSpecProviderPtrOutput
}

type virtualServiceSpecProviderPtrType VirtualServiceSpecProviderArgs

func VirtualServiceSpecProviderPtr(v *VirtualServiceSpecProviderArgs) VirtualServiceSpecProviderPtrInput {
	return (*virtualServiceSpecProviderPtrType)(v)
}

func (*virtualServiceSpecProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecProvider)(nil)).Elem()
}

func (i *virtualServiceSpecProviderPtrType) ToVirtualServiceSpecProviderPtrOutput() VirtualServiceSpecProviderPtrOutput {
	return i.ToVirtualServiceSpecProviderPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecProviderPtrType) ToVirtualServiceSpecProviderPtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderPtrOutput)
}

type VirtualServiceSpecProviderOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProvider)(nil)).Elem()
}

func (o VirtualServiceSpecProviderOutput) ToVirtualServiceSpecProviderOutput() VirtualServiceSpecProviderOutput {
	return o
}

func (o VirtualServiceSpecProviderOutput) ToVirtualServiceSpecProviderOutputWithContext(ctx context.Context) VirtualServiceSpecProviderOutput {
	return o
}

func (o VirtualServiceSpecProviderOutput) ToVirtualServiceSpecProviderPtrOutput() VirtualServiceSpecProviderPtrOutput {
	return o.ToVirtualServiceSpecProviderPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecProviderOutput) ToVirtualServiceSpecProviderPtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecProvider) *VirtualServiceSpecProvider {
		return &v
	}).(VirtualServiceSpecProviderPtrOutput)
}

// The virtual node associated with a virtual service.
func (o VirtualServiceSpecProviderOutput) VirtualNode() VirtualServiceSpecProviderVirtualNodePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecProvider) *VirtualServiceSpecProviderVirtualNode { return v.VirtualNode }).(VirtualServiceSpecProviderVirtualNodePtrOutput)
}

// The virtual router associated with a virtual service.
func (o VirtualServiceSpecProviderOutput) VirtualRouter() VirtualServiceSpecProviderVirtualRouterPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecProvider) *VirtualServiceSpecProviderVirtualRouter { return v.VirtualRouter }).(VirtualServiceSpecProviderVirtualRouterPtrOutput)
}

type VirtualServiceSpecProviderPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecProvider)(nil)).Elem()
}

func (o VirtualServiceSpecProviderPtrOutput) ToVirtualServiceSpecProviderPtrOutput() VirtualServiceSpecProviderPtrOutput {
	return o
}

func (o VirtualServiceSpecProviderPtrOutput) ToVirtualServiceSpecProviderPtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderPtrOutput {
	return o
}

func (o VirtualServiceSpecProviderPtrOutput) Elem() VirtualServiceSpecProviderOutput {
	return o.ApplyT(func(v *VirtualServiceSpecProvider) VirtualServiceSpecProvider { return *v }).(VirtualServiceSpecProviderOutput)
}

// The virtual node associated with a virtual service.
func (o VirtualServiceSpecProviderPtrOutput) VirtualNode() VirtualServiceSpecProviderVirtualNodePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecProvider) *VirtualServiceSpecProviderVirtualNode { return v.VirtualNode }).(VirtualServiceSpecProviderVirtualNodePtrOutput)
}

// The virtual router associated with a virtual service.
func (o VirtualServiceSpecProviderPtrOutput) VirtualRouter() VirtualServiceSpecProviderVirtualRouterPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecProvider) *VirtualServiceSpecProviderVirtualRouter { return v.VirtualRouter }).(VirtualServiceSpecProviderVirtualRouterPtrOutput)
}

type VirtualServiceSpecProviderVirtualNode struct {
	// The name of the virtual node that is acting as a service provider.
	VirtualNodeName string `pulumi:"virtualNodeName"`
}

// VirtualServiceSpecProviderVirtualNodeInput is an input type that accepts VirtualServiceSpecProviderVirtualNodeArgs and VirtualServiceSpecProviderVirtualNodeOutput values.
// You can construct a concrete instance of `VirtualServiceSpecProviderVirtualNodeInput` via:
//
// 		 VirtualServiceSpecProviderVirtualNodeArgs{...}
//
type VirtualServiceSpecProviderVirtualNodeInput interface {
	pulumi.Input

	ToVirtualServiceSpecProviderVirtualNodeOutput() VirtualServiceSpecProviderVirtualNodeOutput
	ToVirtualServiceSpecProviderVirtualNodeOutputWithContext(context.Context) VirtualServiceSpecProviderVirtualNodeOutput
}

type VirtualServiceSpecProviderVirtualNodeArgs struct {
	// The name of the virtual node that is acting as a service provider.
	VirtualNodeName pulumi.StringInput `pulumi:"virtualNodeName"`
}

func (VirtualServiceSpecProviderVirtualNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProviderVirtualNode)(nil)).Elem()
}

func (i VirtualServiceSpecProviderVirtualNodeArgs) ToVirtualServiceSpecProviderVirtualNodeOutput() VirtualServiceSpecProviderVirtualNodeOutput {
	return i.ToVirtualServiceSpecProviderVirtualNodeOutputWithContext(context.Background())
}

func (i VirtualServiceSpecProviderVirtualNodeArgs) ToVirtualServiceSpecProviderVirtualNodeOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderVirtualNodeOutput)
}

func (i VirtualServiceSpecProviderVirtualNodeArgs) ToVirtualServiceSpecProviderVirtualNodePtrOutput() VirtualServiceSpecProviderVirtualNodePtrOutput {
	return i.ToVirtualServiceSpecProviderVirtualNodePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecProviderVirtualNodeArgs) ToVirtualServiceSpecProviderVirtualNodePtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderVirtualNodeOutput).ToVirtualServiceSpecProviderVirtualNodePtrOutputWithContext(ctx)
}

// VirtualServiceSpecProviderVirtualNodePtrInput is an input type that accepts VirtualServiceSpecProviderVirtualNodeArgs, VirtualServiceSpecProviderVirtualNodePtr and VirtualServiceSpecProviderVirtualNodePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecProviderVirtualNodePtrInput` via:
//
// 		 VirtualServiceSpecProviderVirtualNodeArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualServiceSpecProviderVirtualNodePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecProviderVirtualNodePtrOutput() VirtualServiceSpecProviderVirtualNodePtrOutput
	ToVirtualServiceSpecProviderVirtualNodePtrOutputWithContext(context.Context) VirtualServiceSpecProviderVirtualNodePtrOutput
}

type virtualServiceSpecProviderVirtualNodePtrType VirtualServiceSpecProviderVirtualNodeArgs

func VirtualServiceSpecProviderVirtualNodePtr(v *VirtualServiceSpecProviderVirtualNodeArgs) VirtualServiceSpecProviderVirtualNodePtrInput {
	return (*virtualServiceSpecProviderVirtualNodePtrType)(v)
}

func (*virtualServiceSpecProviderVirtualNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecProviderVirtualNode)(nil)).Elem()
}

func (i *virtualServiceSpecProviderVirtualNodePtrType) ToVirtualServiceSpecProviderVirtualNodePtrOutput() VirtualServiceSpecProviderVirtualNodePtrOutput {
	return i.ToVirtualServiceSpecProviderVirtualNodePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecProviderVirtualNodePtrType) ToVirtualServiceSpecProviderVirtualNodePtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderVirtualNodePtrOutput)
}

type VirtualServiceSpecProviderVirtualNodeOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecProviderVirtualNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProviderVirtualNode)(nil)).Elem()
}

func (o VirtualServiceSpecProviderVirtualNodeOutput) ToVirtualServiceSpecProviderVirtualNodeOutput() VirtualServiceSpecProviderVirtualNodeOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualNodeOutput) ToVirtualServiceSpecProviderVirtualNodeOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualNodeOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualNodeOutput) ToVirtualServiceSpecProviderVirtualNodePtrOutput() VirtualServiceSpecProviderVirtualNodePtrOutput {
	return o.ToVirtualServiceSpecProviderVirtualNodePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecProviderVirtualNodeOutput) ToVirtualServiceSpecProviderVirtualNodePtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualNodePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecProviderVirtualNode) *VirtualServiceSpecProviderVirtualNode {
		return &v
	}).(VirtualServiceSpecProviderVirtualNodePtrOutput)
}

// The name of the virtual node that is acting as a service provider.
func (o VirtualServiceSpecProviderVirtualNodeOutput) VirtualNodeName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualServiceSpecProviderVirtualNode) string { return v.VirtualNodeName }).(pulumi.StringOutput)
}

type VirtualServiceSpecProviderVirtualNodePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecProviderVirtualNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecProviderVirtualNode)(nil)).Elem()
}

func (o VirtualServiceSpecProviderVirtualNodePtrOutput) ToVirtualServiceSpecProviderVirtualNodePtrOutput() VirtualServiceSpecProviderVirtualNodePtrOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualNodePtrOutput) ToVirtualServiceSpecProviderVirtualNodePtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualNodePtrOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualNodePtrOutput) Elem() VirtualServiceSpecProviderVirtualNodeOutput {
	return o.ApplyT(func(v *VirtualServiceSpecProviderVirtualNode) VirtualServiceSpecProviderVirtualNode { return *v }).(VirtualServiceSpecProviderVirtualNodeOutput)
}

// The name of the virtual node that is acting as a service provider.
func (o VirtualServiceSpecProviderVirtualNodePtrOutput) VirtualNodeName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualServiceSpecProviderVirtualNode) string { return v.VirtualNodeName }).(pulumi.StringOutput)
}

type VirtualServiceSpecProviderVirtualRouter struct {
	// The name of the virtual router that is acting as a service provider.
	VirtualRouterName string `pulumi:"virtualRouterName"`
}

// VirtualServiceSpecProviderVirtualRouterInput is an input type that accepts VirtualServiceSpecProviderVirtualRouterArgs and VirtualServiceSpecProviderVirtualRouterOutput values.
// You can construct a concrete instance of `VirtualServiceSpecProviderVirtualRouterInput` via:
//
// 		 VirtualServiceSpecProviderVirtualRouterArgs{...}
//
type VirtualServiceSpecProviderVirtualRouterInput interface {
	pulumi.Input

	ToVirtualServiceSpecProviderVirtualRouterOutput() VirtualServiceSpecProviderVirtualRouterOutput
	ToVirtualServiceSpecProviderVirtualRouterOutputWithContext(context.Context) VirtualServiceSpecProviderVirtualRouterOutput
}

type VirtualServiceSpecProviderVirtualRouterArgs struct {
	// The name of the virtual router that is acting as a service provider.
	VirtualRouterName pulumi.StringInput `pulumi:"virtualRouterName"`
}

func (VirtualServiceSpecProviderVirtualRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProviderVirtualRouter)(nil)).Elem()
}

func (i VirtualServiceSpecProviderVirtualRouterArgs) ToVirtualServiceSpecProviderVirtualRouterOutput() VirtualServiceSpecProviderVirtualRouterOutput {
	return i.ToVirtualServiceSpecProviderVirtualRouterOutputWithContext(context.Background())
}

func (i VirtualServiceSpecProviderVirtualRouterArgs) ToVirtualServiceSpecProviderVirtualRouterOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderVirtualRouterOutput)
}

func (i VirtualServiceSpecProviderVirtualRouterArgs) ToVirtualServiceSpecProviderVirtualRouterPtrOutput() VirtualServiceSpecProviderVirtualRouterPtrOutput {
	return i.ToVirtualServiceSpecProviderVirtualRouterPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecProviderVirtualRouterArgs) ToVirtualServiceSpecProviderVirtualRouterPtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualRouterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderVirtualRouterOutput).ToVirtualServiceSpecProviderVirtualRouterPtrOutputWithContext(ctx)
}

// VirtualServiceSpecProviderVirtualRouterPtrInput is an input type that accepts VirtualServiceSpecProviderVirtualRouterArgs, VirtualServiceSpecProviderVirtualRouterPtr and VirtualServiceSpecProviderVirtualRouterPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecProviderVirtualRouterPtrInput` via:
//
// 		 VirtualServiceSpecProviderVirtualRouterArgs{...}
//
//  or:
//
// 		 nil
//
type VirtualServiceSpecProviderVirtualRouterPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecProviderVirtualRouterPtrOutput() VirtualServiceSpecProviderVirtualRouterPtrOutput
	ToVirtualServiceSpecProviderVirtualRouterPtrOutputWithContext(context.Context) VirtualServiceSpecProviderVirtualRouterPtrOutput
}

type virtualServiceSpecProviderVirtualRouterPtrType VirtualServiceSpecProviderVirtualRouterArgs

func VirtualServiceSpecProviderVirtualRouterPtr(v *VirtualServiceSpecProviderVirtualRouterArgs) VirtualServiceSpecProviderVirtualRouterPtrInput {
	return (*virtualServiceSpecProviderVirtualRouterPtrType)(v)
}

func (*virtualServiceSpecProviderVirtualRouterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecProviderVirtualRouter)(nil)).Elem()
}

func (i *virtualServiceSpecProviderVirtualRouterPtrType) ToVirtualServiceSpecProviderVirtualRouterPtrOutput() VirtualServiceSpecProviderVirtualRouterPtrOutput {
	return i.ToVirtualServiceSpecProviderVirtualRouterPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecProviderVirtualRouterPtrType) ToVirtualServiceSpecProviderVirtualRouterPtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualRouterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecProviderVirtualRouterPtrOutput)
}

type VirtualServiceSpecProviderVirtualRouterOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecProviderVirtualRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecProviderVirtualRouter)(nil)).Elem()
}

func (o VirtualServiceSpecProviderVirtualRouterOutput) ToVirtualServiceSpecProviderVirtualRouterOutput() VirtualServiceSpecProviderVirtualRouterOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualRouterOutput) ToVirtualServiceSpecProviderVirtualRouterOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualRouterOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualRouterOutput) ToVirtualServiceSpecProviderVirtualRouterPtrOutput() VirtualServiceSpecProviderVirtualRouterPtrOutput {
	return o.ToVirtualServiceSpecProviderVirtualRouterPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecProviderVirtualRouterOutput) ToVirtualServiceSpecProviderVirtualRouterPtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualRouterPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecProviderVirtualRouter) *VirtualServiceSpecProviderVirtualRouter {
		return &v
	}).(VirtualServiceSpecProviderVirtualRouterPtrOutput)
}

// The name of the virtual router that is acting as a service provider.
func (o VirtualServiceSpecProviderVirtualRouterOutput) VirtualRouterName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualServiceSpecProviderVirtualRouter) string { return v.VirtualRouterName }).(pulumi.StringOutput)
}

type VirtualServiceSpecProviderVirtualRouterPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecProviderVirtualRouterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecProviderVirtualRouter)(nil)).Elem()
}

func (o VirtualServiceSpecProviderVirtualRouterPtrOutput) ToVirtualServiceSpecProviderVirtualRouterPtrOutput() VirtualServiceSpecProviderVirtualRouterPtrOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualRouterPtrOutput) ToVirtualServiceSpecProviderVirtualRouterPtrOutputWithContext(ctx context.Context) VirtualServiceSpecProviderVirtualRouterPtrOutput {
	return o
}

func (o VirtualServiceSpecProviderVirtualRouterPtrOutput) Elem() VirtualServiceSpecProviderVirtualRouterOutput {
	return o.ApplyT(func(v *VirtualServiceSpecProviderVirtualRouter) VirtualServiceSpecProviderVirtualRouter { return *v }).(VirtualServiceSpecProviderVirtualRouterOutput)
}

// The name of the virtual router that is acting as a service provider.
func (o VirtualServiceSpecProviderVirtualRouterPtrOutput) VirtualRouterName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualServiceSpecProviderVirtualRouter) string { return v.VirtualRouterName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(MeshSpecOutput{})
	pulumi.RegisterOutputType(MeshSpecPtrOutput{})
	pulumi.RegisterOutputType(MeshSpecEgressFilterOutput{})
	pulumi.RegisterOutputType(MeshSpecEgressFilterPtrOutput{})
	pulumi.RegisterOutputType(RouteSpecOutput{})
	pulumi.RegisterOutputType(RouteSpecPtrOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRoutePtrOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteActionOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteActionWeightedTargetOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteActionWeightedTargetArrayOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchHeaderOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchHeaderArrayOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchHeaderMatchOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchHeaderMatchPtrOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchHeaderMatchRangeOutput{})
	pulumi.RegisterOutputType(RouteSpecHttpRouteMatchHeaderMatchRangePtrOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRouteOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRoutePtrOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRouteActionOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRouteActionWeightedTargetOutput{})
	pulumi.RegisterOutputType(RouteSpecTcpRouteActionWeightedTargetArrayOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecPtrOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendArrayOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServiceOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecBackendVirtualServicePtrOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerPtrOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerHealthCheckOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecListenerPortMappingOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecLoggingOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecLoggingPtrOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecLoggingAccessLogOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecLoggingAccessLogPtrOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecLoggingAccessLogFileOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecLoggingAccessLogFilePtrOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecServiceDiscoveryOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecServiceDiscoveryPtrOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecServiceDiscoveryAwsCloudMapOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecServiceDiscoveryAwsCloudMapPtrOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecServiceDiscoveryDnsOutput{})
	pulumi.RegisterOutputType(VirtualNodeSpecServiceDiscoveryDnsPtrOutput{})
	pulumi.RegisterOutputType(VirtualRouterSpecOutput{})
	pulumi.RegisterOutputType(VirtualRouterSpecPtrOutput{})
	pulumi.RegisterOutputType(VirtualRouterSpecListenerOutput{})
	pulumi.RegisterOutputType(VirtualRouterSpecListenerPortMappingOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecProviderOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecProviderPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecProviderVirtualNodeOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecProviderVirtualNodePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecProviderVirtualRouterOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecProviderVirtualRouterPtrOutput{})
}
