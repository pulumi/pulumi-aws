// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VirtualGateway struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput      `pulumi:"arn"`
	CreatedDate     pulumi.StringOutput      `pulumi:"createdDate"`
	LastUpdatedDate pulumi.StringOutput      `pulumi:"lastUpdatedDate"`
	MeshName        pulumi.StringOutput      `pulumi:"meshName"`
	MeshOwner       pulumi.StringOutput      `pulumi:"meshOwner"`
	Name            pulumi.StringOutput      `pulumi:"name"`
	ResourceOwner   pulumi.StringOutput      `pulumi:"resourceOwner"`
	Spec            VirtualGatewaySpecOutput `pulumi:"spec"`
	Tags            pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput   `pulumi:"tagsAll"`
}

// NewVirtualGateway registers a new resource with the given unique name, arguments, and options.
func NewVirtualGateway(ctx *pulumi.Context,
	name string, args *VirtualGatewayArgs, opts ...pulumi.ResourceOption) (*VirtualGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MeshName == nil {
		return nil, errors.New("invalid value for required argument 'MeshName'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	var resource VirtualGateway
	err := ctx.RegisterResource("aws:appmesh/virtualGateway:VirtualGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualGateway gets an existing VirtualGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualGatewayState, opts ...pulumi.ResourceOption) (*VirtualGateway, error) {
	var resource VirtualGateway
	err := ctx.ReadResource("aws:appmesh/virtualGateway:VirtualGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualGateway resources.
type virtualGatewayState struct {
	Arn             *string             `pulumi:"arn"`
	CreatedDate     *string             `pulumi:"createdDate"`
	LastUpdatedDate *string             `pulumi:"lastUpdatedDate"`
	MeshName        *string             `pulumi:"meshName"`
	MeshOwner       *string             `pulumi:"meshOwner"`
	Name            *string             `pulumi:"name"`
	ResourceOwner   *string             `pulumi:"resourceOwner"`
	Spec            *VirtualGatewaySpec `pulumi:"spec"`
	Tags            map[string]string   `pulumi:"tags"`
	TagsAll         map[string]string   `pulumi:"tagsAll"`
}

type VirtualGatewayState struct {
	Arn             pulumi.StringPtrInput
	CreatedDate     pulumi.StringPtrInput
	LastUpdatedDate pulumi.StringPtrInput
	MeshName        pulumi.StringPtrInput
	MeshOwner       pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	ResourceOwner   pulumi.StringPtrInput
	Spec            VirtualGatewaySpecPtrInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
}

func (VirtualGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualGatewayState)(nil)).Elem()
}

type virtualGatewayArgs struct {
	MeshName  string             `pulumi:"meshName"`
	MeshOwner *string            `pulumi:"meshOwner"`
	Name      *string            `pulumi:"name"`
	Spec      VirtualGatewaySpec `pulumi:"spec"`
	Tags      map[string]string  `pulumi:"tags"`
}

// The set of arguments for constructing a VirtualGateway resource.
type VirtualGatewayArgs struct {
	MeshName  pulumi.StringInput
	MeshOwner pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Spec      VirtualGatewaySpecInput
	Tags      pulumi.StringMapInput
}

func (VirtualGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualGatewayArgs)(nil)).Elem()
}

type VirtualGatewayInput interface {
	pulumi.Input

	ToVirtualGatewayOutput() VirtualGatewayOutput
	ToVirtualGatewayOutputWithContext(ctx context.Context) VirtualGatewayOutput
}

func (*VirtualGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualGateway)(nil)).Elem()
}

func (i *VirtualGateway) ToVirtualGatewayOutput() VirtualGatewayOutput {
	return i.ToVirtualGatewayOutputWithContext(context.Background())
}

func (i *VirtualGateway) ToVirtualGatewayOutputWithContext(ctx context.Context) VirtualGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewayOutput)
}

// VirtualGatewayArrayInput is an input type that accepts VirtualGatewayArray and VirtualGatewayArrayOutput values.
// You can construct a concrete instance of `VirtualGatewayArrayInput` via:
//
//	VirtualGatewayArray{ VirtualGatewayArgs{...} }
type VirtualGatewayArrayInput interface {
	pulumi.Input

	ToVirtualGatewayArrayOutput() VirtualGatewayArrayOutput
	ToVirtualGatewayArrayOutputWithContext(context.Context) VirtualGatewayArrayOutput
}

type VirtualGatewayArray []VirtualGatewayInput

func (VirtualGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualGateway)(nil)).Elem()
}

func (i VirtualGatewayArray) ToVirtualGatewayArrayOutput() VirtualGatewayArrayOutput {
	return i.ToVirtualGatewayArrayOutputWithContext(context.Background())
}

func (i VirtualGatewayArray) ToVirtualGatewayArrayOutputWithContext(ctx context.Context) VirtualGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewayArrayOutput)
}

// VirtualGatewayMapInput is an input type that accepts VirtualGatewayMap and VirtualGatewayMapOutput values.
// You can construct a concrete instance of `VirtualGatewayMapInput` via:
//
//	VirtualGatewayMap{ "key": VirtualGatewayArgs{...} }
type VirtualGatewayMapInput interface {
	pulumi.Input

	ToVirtualGatewayMapOutput() VirtualGatewayMapOutput
	ToVirtualGatewayMapOutputWithContext(context.Context) VirtualGatewayMapOutput
}

type VirtualGatewayMap map[string]VirtualGatewayInput

func (VirtualGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualGateway)(nil)).Elem()
}

func (i VirtualGatewayMap) ToVirtualGatewayMapOutput() VirtualGatewayMapOutput {
	return i.ToVirtualGatewayMapOutputWithContext(context.Background())
}

func (i VirtualGatewayMap) ToVirtualGatewayMapOutputWithContext(ctx context.Context) VirtualGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualGatewayMapOutput)
}

type VirtualGatewayOutput struct{ *pulumi.OutputState }

func (VirtualGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualGateway)(nil)).Elem()
}

func (o VirtualGatewayOutput) ToVirtualGatewayOutput() VirtualGatewayOutput {
	return o
}

func (o VirtualGatewayOutput) ToVirtualGatewayOutputWithContext(ctx context.Context) VirtualGatewayOutput {
	return o
}

func (o VirtualGatewayOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualGateway) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o VirtualGatewayOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualGateway) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

func (o VirtualGatewayOutput) LastUpdatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualGateway) pulumi.StringOutput { return v.LastUpdatedDate }).(pulumi.StringOutput)
}

func (o VirtualGatewayOutput) MeshName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualGateway) pulumi.StringOutput { return v.MeshName }).(pulumi.StringOutput)
}

func (o VirtualGatewayOutput) MeshOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualGateway) pulumi.StringOutput { return v.MeshOwner }).(pulumi.StringOutput)
}

func (o VirtualGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VirtualGatewayOutput) ResourceOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualGateway) pulumi.StringOutput { return v.ResourceOwner }).(pulumi.StringOutput)
}

func (o VirtualGatewayOutput) Spec() VirtualGatewaySpecOutput {
	return o.ApplyT(func(v *VirtualGateway) VirtualGatewaySpecOutput { return v.Spec }).(VirtualGatewaySpecOutput)
}

func (o VirtualGatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualGateway) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VirtualGatewayOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualGateway) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type VirtualGatewayArrayOutput struct{ *pulumi.OutputState }

func (VirtualGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualGateway)(nil)).Elem()
}

func (o VirtualGatewayArrayOutput) ToVirtualGatewayArrayOutput() VirtualGatewayArrayOutput {
	return o
}

func (o VirtualGatewayArrayOutput) ToVirtualGatewayArrayOutputWithContext(ctx context.Context) VirtualGatewayArrayOutput {
	return o
}

func (o VirtualGatewayArrayOutput) Index(i pulumi.IntInput) VirtualGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualGateway {
		return vs[0].([]*VirtualGateway)[vs[1].(int)]
	}).(VirtualGatewayOutput)
}

type VirtualGatewayMapOutput struct{ *pulumi.OutputState }

func (VirtualGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualGateway)(nil)).Elem()
}

func (o VirtualGatewayMapOutput) ToVirtualGatewayMapOutput() VirtualGatewayMapOutput {
	return o
}

func (o VirtualGatewayMapOutput) ToVirtualGatewayMapOutputWithContext(ctx context.Context) VirtualGatewayMapOutput {
	return o
}

func (o VirtualGatewayMapOutput) MapIndex(k pulumi.StringInput) VirtualGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualGateway {
		return vs[0].(map[string]*VirtualGateway)[vs[1].(string)]
	}).(VirtualGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualGatewayInput)(nil)).Elem(), &VirtualGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualGatewayArrayInput)(nil)).Elem(), VirtualGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualGatewayMapInput)(nil)).Elem(), VirtualGatewayMap{})
	pulumi.RegisterOutputType(VirtualGatewayOutput{})
	pulumi.RegisterOutputType(VirtualGatewayArrayOutput{})
	pulumi.RegisterOutputType(VirtualGatewayMapOutput{})
}
