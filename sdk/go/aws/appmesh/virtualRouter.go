// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VirtualRouter struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput     `pulumi:"arn"`
	CreatedDate     pulumi.StringOutput     `pulumi:"createdDate"`
	LastUpdatedDate pulumi.StringOutput     `pulumi:"lastUpdatedDate"`
	MeshName        pulumi.StringOutput     `pulumi:"meshName"`
	MeshOwner       pulumi.StringOutput     `pulumi:"meshOwner"`
	Name            pulumi.StringOutput     `pulumi:"name"`
	ResourceOwner   pulumi.StringOutput     `pulumi:"resourceOwner"`
	Spec            VirtualRouterSpecOutput `pulumi:"spec"`
	Tags            pulumi.StringMapOutput  `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput  `pulumi:"tagsAll"`
}

// NewVirtualRouter registers a new resource with the given unique name, arguments, and options.
func NewVirtualRouter(ctx *pulumi.Context,
	name string, args *VirtualRouterArgs, opts ...pulumi.ResourceOption) (*VirtualRouter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MeshName == nil {
		return nil, errors.New("invalid value for required argument 'MeshName'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	var resource VirtualRouter
	err := ctx.RegisterResource("aws:appmesh/virtualRouter:VirtualRouter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualRouter gets an existing VirtualRouter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualRouter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualRouterState, opts ...pulumi.ResourceOption) (*VirtualRouter, error) {
	var resource VirtualRouter
	err := ctx.ReadResource("aws:appmesh/virtualRouter:VirtualRouter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualRouter resources.
type virtualRouterState struct {
	Arn             *string            `pulumi:"arn"`
	CreatedDate     *string            `pulumi:"createdDate"`
	LastUpdatedDate *string            `pulumi:"lastUpdatedDate"`
	MeshName        *string            `pulumi:"meshName"`
	MeshOwner       *string            `pulumi:"meshOwner"`
	Name            *string            `pulumi:"name"`
	ResourceOwner   *string            `pulumi:"resourceOwner"`
	Spec            *VirtualRouterSpec `pulumi:"spec"`
	Tags            map[string]string  `pulumi:"tags"`
	TagsAll         map[string]string  `pulumi:"tagsAll"`
}

type VirtualRouterState struct {
	Arn             pulumi.StringPtrInput
	CreatedDate     pulumi.StringPtrInput
	LastUpdatedDate pulumi.StringPtrInput
	MeshName        pulumi.StringPtrInput
	MeshOwner       pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	ResourceOwner   pulumi.StringPtrInput
	Spec            VirtualRouterSpecPtrInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
}

func (VirtualRouterState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualRouterState)(nil)).Elem()
}

type virtualRouterArgs struct {
	MeshName  string            `pulumi:"meshName"`
	MeshOwner *string           `pulumi:"meshOwner"`
	Name      *string           `pulumi:"name"`
	Spec      VirtualRouterSpec `pulumi:"spec"`
	Tags      map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VirtualRouter resource.
type VirtualRouterArgs struct {
	MeshName  pulumi.StringInput
	MeshOwner pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Spec      VirtualRouterSpecInput
	Tags      pulumi.StringMapInput
}

func (VirtualRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualRouterArgs)(nil)).Elem()
}

type VirtualRouterInput interface {
	pulumi.Input

	ToVirtualRouterOutput() VirtualRouterOutput
	ToVirtualRouterOutputWithContext(ctx context.Context) VirtualRouterOutput
}

func (*VirtualRouter) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualRouter)(nil)).Elem()
}

func (i *VirtualRouter) ToVirtualRouterOutput() VirtualRouterOutput {
	return i.ToVirtualRouterOutputWithContext(context.Background())
}

func (i *VirtualRouter) ToVirtualRouterOutputWithContext(ctx context.Context) VirtualRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRouterOutput)
}

// VirtualRouterArrayInput is an input type that accepts VirtualRouterArray and VirtualRouterArrayOutput values.
// You can construct a concrete instance of `VirtualRouterArrayInput` via:
//
//	VirtualRouterArray{ VirtualRouterArgs{...} }
type VirtualRouterArrayInput interface {
	pulumi.Input

	ToVirtualRouterArrayOutput() VirtualRouterArrayOutput
	ToVirtualRouterArrayOutputWithContext(context.Context) VirtualRouterArrayOutput
}

type VirtualRouterArray []VirtualRouterInput

func (VirtualRouterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualRouter)(nil)).Elem()
}

func (i VirtualRouterArray) ToVirtualRouterArrayOutput() VirtualRouterArrayOutput {
	return i.ToVirtualRouterArrayOutputWithContext(context.Background())
}

func (i VirtualRouterArray) ToVirtualRouterArrayOutputWithContext(ctx context.Context) VirtualRouterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRouterArrayOutput)
}

// VirtualRouterMapInput is an input type that accepts VirtualRouterMap and VirtualRouterMapOutput values.
// You can construct a concrete instance of `VirtualRouterMapInput` via:
//
//	VirtualRouterMap{ "key": VirtualRouterArgs{...} }
type VirtualRouterMapInput interface {
	pulumi.Input

	ToVirtualRouterMapOutput() VirtualRouterMapOutput
	ToVirtualRouterMapOutputWithContext(context.Context) VirtualRouterMapOutput
}

type VirtualRouterMap map[string]VirtualRouterInput

func (VirtualRouterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualRouter)(nil)).Elem()
}

func (i VirtualRouterMap) ToVirtualRouterMapOutput() VirtualRouterMapOutput {
	return i.ToVirtualRouterMapOutputWithContext(context.Background())
}

func (i VirtualRouterMap) ToVirtualRouterMapOutputWithContext(ctx context.Context) VirtualRouterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRouterMapOutput)
}

type VirtualRouterOutput struct{ *pulumi.OutputState }

func (VirtualRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualRouter)(nil)).Elem()
}

func (o VirtualRouterOutput) ToVirtualRouterOutput() VirtualRouterOutput {
	return o
}

func (o VirtualRouterOutput) ToVirtualRouterOutputWithContext(ctx context.Context) VirtualRouterOutput {
	return o
}

func (o VirtualRouterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualRouter) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o VirtualRouterOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualRouter) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

func (o VirtualRouterOutput) LastUpdatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualRouter) pulumi.StringOutput { return v.LastUpdatedDate }).(pulumi.StringOutput)
}

func (o VirtualRouterOutput) MeshName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualRouter) pulumi.StringOutput { return v.MeshName }).(pulumi.StringOutput)
}

func (o VirtualRouterOutput) MeshOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualRouter) pulumi.StringOutput { return v.MeshOwner }).(pulumi.StringOutput)
}

func (o VirtualRouterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualRouter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VirtualRouterOutput) ResourceOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualRouter) pulumi.StringOutput { return v.ResourceOwner }).(pulumi.StringOutput)
}

func (o VirtualRouterOutput) Spec() VirtualRouterSpecOutput {
	return o.ApplyT(func(v *VirtualRouter) VirtualRouterSpecOutput { return v.Spec }).(VirtualRouterSpecOutput)
}

func (o VirtualRouterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualRouter) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VirtualRouterOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualRouter) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type VirtualRouterArrayOutput struct{ *pulumi.OutputState }

func (VirtualRouterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualRouter)(nil)).Elem()
}

func (o VirtualRouterArrayOutput) ToVirtualRouterArrayOutput() VirtualRouterArrayOutput {
	return o
}

func (o VirtualRouterArrayOutput) ToVirtualRouterArrayOutputWithContext(ctx context.Context) VirtualRouterArrayOutput {
	return o
}

func (o VirtualRouterArrayOutput) Index(i pulumi.IntInput) VirtualRouterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualRouter {
		return vs[0].([]*VirtualRouter)[vs[1].(int)]
	}).(VirtualRouterOutput)
}

type VirtualRouterMapOutput struct{ *pulumi.OutputState }

func (VirtualRouterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualRouter)(nil)).Elem()
}

func (o VirtualRouterMapOutput) ToVirtualRouterMapOutput() VirtualRouterMapOutput {
	return o
}

func (o VirtualRouterMapOutput) ToVirtualRouterMapOutputWithContext(ctx context.Context) VirtualRouterMapOutput {
	return o
}

func (o VirtualRouterMapOutput) MapIndex(k pulumi.StringInput) VirtualRouterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualRouter {
		return vs[0].(map[string]*VirtualRouter)[vs[1].(string)]
	}).(VirtualRouterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualRouterInput)(nil)).Elem(), &VirtualRouter{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualRouterArrayInput)(nil)).Elem(), VirtualRouterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualRouterMapInput)(nil)).Elem(), VirtualRouterMap{})
	pulumi.RegisterOutputType(VirtualRouterOutput{})
	pulumi.RegisterOutputType(VirtualRouterArrayOutput{})
	pulumi.RegisterOutputType(VirtualRouterMapOutput{})
}
