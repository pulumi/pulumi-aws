// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides an AWS App Mesh route resource.
//
// ## Example Usage
// ### HTTP Routing
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v2/go/aws/appmesh"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := appmesh.NewRoute(ctx, "serviceb", &appmesh.RouteArgs{
// 			MeshName:          pulumi.Any(aws_appmesh_mesh.Simple.Id),
// 			VirtualRouterName: pulumi.Any(aws_appmesh_virtual_router.Serviceb.Name),
// 			Spec: &appmesh.RouteSpecArgs{
// 				HttpRoute: &appmesh.RouteSpecHttpRouteArgs{
// 					Match: &appmesh.RouteSpecHttpRouteMatchArgs{
// 						Prefix: pulumi.String("/"),
// 					},
// 					Action: &appmesh.RouteSpecHttpRouteActionArgs{
// 						WeightedTargets: appmesh.RouteSpecHttpRouteActionWeightedTargetArray{
// 							&appmesh.RouteSpecHttpRouteActionWeightedTargetArgs{
// 								VirtualNode: pulumi.Any(aws_appmesh_virtual_node.Serviceb1.Name),
// 								Weight:      pulumi.Int(90),
// 							},
// 							&appmesh.RouteSpecHttpRouteActionWeightedTargetArgs{
// 								VirtualNode: pulumi.Any(aws_appmesh_virtual_node.Serviceb2.Name),
// 								Weight:      pulumi.Int(10),
// 							},
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### HTTP Header Routing
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v2/go/aws/appmesh"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := appmesh.NewRoute(ctx, "serviceb", &appmesh.RouteArgs{
// 			MeshName:          pulumi.Any(aws_appmesh_mesh.Simple.Id),
// 			VirtualRouterName: pulumi.Any(aws_appmesh_virtual_router.Serviceb.Name),
// 			Spec: &appmesh.RouteSpecArgs{
// 				HttpRoute: &appmesh.RouteSpecHttpRouteArgs{
// 					Match: &appmesh.RouteSpecHttpRouteMatchArgs{
// 						Method: pulumi.String("POST"),
// 						Prefix: pulumi.String("/"),
// 						Scheme: pulumi.String("https"),
// 						Headers: appmesh.RouteSpecHttpRouteMatchHeaderArray{
// 							&appmesh.RouteSpecHttpRouteMatchHeaderArgs{
// 								Name: pulumi.String("clientRequestId"),
// 								Match: &appmesh.RouteSpecHttpRouteMatchHeaderMatchArgs{
// 									Prefix: pulumi.String("123"),
// 								},
// 							},
// 						},
// 					},
// 					Action: &appmesh.RouteSpecHttpRouteActionArgs{
// 						WeightedTargets: appmesh.RouteSpecHttpRouteActionWeightedTargetArray{
// 							&appmesh.RouteSpecHttpRouteActionWeightedTargetArgs{
// 								VirtualNode: pulumi.Any(aws_appmesh_virtual_node.Serviceb.Name),
// 								Weight:      pulumi.Int(100),
// 							},
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### TCP Routing
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v2/go/aws/appmesh"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := appmesh.NewRoute(ctx, "serviceb", &appmesh.RouteArgs{
// 			MeshName:          pulumi.Any(aws_appmesh_mesh.Simple.Id),
// 			VirtualRouterName: pulumi.Any(aws_appmesh_virtual_router.Serviceb.Name),
// 			Spec: &appmesh.RouteSpecArgs{
// 				TcpRoute: &appmesh.RouteSpecTcpRouteArgs{
// 					Action: &appmesh.RouteSpecTcpRouteActionArgs{
// 						WeightedTargets: appmesh.RouteSpecTcpRouteActionWeightedTargetArray{
// 							&appmesh.RouteSpecTcpRouteActionWeightedTargetArgs{
// 								VirtualNode: pulumi.Any(aws_appmesh_virtual_node.Serviceb1.Name),
// 								Weight:      pulumi.Int(100),
// 							},
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Route struct {
	pulumi.CustomResourceState

	// The ARN of the route.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The creation date of the route.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`
	// The last update date of the route.
	LastUpdatedDate pulumi.StringOutput `pulumi:"lastUpdatedDate"`
	// The name of the service mesh in which to create the route.
	MeshName pulumi.StringOutput `pulumi:"meshName"`
	// The name to use for the route.
	Name pulumi.StringOutput `pulumi:"name"`
	// The route specification to apply.
	Spec RouteSpecOutput `pulumi:"spec"`
	// A map of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The name of the virtual router in which to create the route.
	VirtualRouterName pulumi.StringOutput `pulumi:"virtualRouterName"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil || args.MeshName == nil {
		return nil, errors.New("missing required argument 'MeshName'")
	}
	if args == nil || args.Spec == nil {
		return nil, errors.New("missing required argument 'Spec'")
	}
	if args == nil || args.VirtualRouterName == nil {
		return nil, errors.New("missing required argument 'VirtualRouterName'")
	}
	if args == nil {
		args = &RouteArgs{}
	}
	var resource Route
	err := ctx.RegisterResource("aws:appmesh/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("aws:appmesh/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// The ARN of the route.
	Arn *string `pulumi:"arn"`
	// The creation date of the route.
	CreatedDate *string `pulumi:"createdDate"`
	// The last update date of the route.
	LastUpdatedDate *string `pulumi:"lastUpdatedDate"`
	// The name of the service mesh in which to create the route.
	MeshName *string `pulumi:"meshName"`
	// The name to use for the route.
	Name *string `pulumi:"name"`
	// The route specification to apply.
	Spec *RouteSpec `pulumi:"spec"`
	// A map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The name of the virtual router in which to create the route.
	VirtualRouterName *string `pulumi:"virtualRouterName"`
}

type RouteState struct {
	// The ARN of the route.
	Arn pulumi.StringPtrInput
	// The creation date of the route.
	CreatedDate pulumi.StringPtrInput
	// The last update date of the route.
	LastUpdatedDate pulumi.StringPtrInput
	// The name of the service mesh in which to create the route.
	MeshName pulumi.StringPtrInput
	// The name to use for the route.
	Name pulumi.StringPtrInput
	// The route specification to apply.
	Spec RouteSpecPtrInput
	// A map of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The name of the virtual router in which to create the route.
	VirtualRouterName pulumi.StringPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// The name of the service mesh in which to create the route.
	MeshName string `pulumi:"meshName"`
	// The name to use for the route.
	Name *string `pulumi:"name"`
	// The route specification to apply.
	Spec RouteSpec `pulumi:"spec"`
	// A map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The name of the virtual router in which to create the route.
	VirtualRouterName string `pulumi:"virtualRouterName"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// The name of the service mesh in which to create the route.
	MeshName pulumi.StringInput
	// The name to use for the route.
	Name pulumi.StringPtrInput
	// The route specification to apply.
	Spec RouteSpecInput
	// A map of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The name of the virtual router in which to create the route.
	VirtualRouterName pulumi.StringInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}
