// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticloadbalancing

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a load balancer policy, which can be attached to an ELB listener or backend server.
type LoadBalancerPolicy struct {
	s *pulumi.ResourceState
}

// NewLoadBalancerPolicy registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerPolicy(ctx *pulumi.Context,
	name string, args *LoadBalancerPolicyArgs, opts ...pulumi.ResourceOpt) (*LoadBalancerPolicy, error) {
	if args == nil || args.LoadBalancerName == nil {
		return nil, errors.New("missing required argument 'LoadBalancerName'")
	}
	if args == nil || args.PolicyName == nil {
		return nil, errors.New("missing required argument 'PolicyName'")
	}
	if args == nil || args.PolicyTypeName == nil {
		return nil, errors.New("missing required argument 'PolicyTypeName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["loadBalancerName"] = nil
		inputs["policyAttributes"] = nil
		inputs["policyName"] = nil
		inputs["policyTypeName"] = nil
	} else {
		inputs["loadBalancerName"] = args.LoadBalancerName
		inputs["policyAttributes"] = args.PolicyAttributes
		inputs["policyName"] = args.PolicyName
		inputs["policyTypeName"] = args.PolicyTypeName
	}
	s, err := ctx.RegisterResource("aws:elasticloadbalancing/loadBalancerPolicy:LoadBalancerPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LoadBalancerPolicy{s: s}, nil
}

// GetLoadBalancerPolicy gets an existing LoadBalancerPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LoadBalancerPolicyState, opts ...pulumi.ResourceOpt) (*LoadBalancerPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["loadBalancerName"] = state.LoadBalancerName
		inputs["policyAttributes"] = state.PolicyAttributes
		inputs["policyName"] = state.PolicyName
		inputs["policyTypeName"] = state.PolicyTypeName
	}
	s, err := ctx.ReadResource("aws:elasticloadbalancing/loadBalancerPolicy:LoadBalancerPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LoadBalancerPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LoadBalancerPolicy) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LoadBalancerPolicy) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The load balancer on which the policy is defined.
func (r *LoadBalancerPolicy) LoadBalancerName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadBalancerName"])
}

// Policy attribute to apply to the policy.
func (r *LoadBalancerPolicy) PolicyAttributes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["policyAttributes"])
}

// The name of the load balancer policy.
func (r *LoadBalancerPolicy) PolicyName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policyName"])
}

// The policy type.
func (r *LoadBalancerPolicy) PolicyTypeName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policyTypeName"])
}

// Input properties used for looking up and filtering LoadBalancerPolicy resources.
type LoadBalancerPolicyState struct {
	// The load balancer on which the policy is defined.
	LoadBalancerName interface{}
	// Policy attribute to apply to the policy.
	PolicyAttributes interface{}
	// The name of the load balancer policy.
	PolicyName interface{}
	// The policy type.
	PolicyTypeName interface{}
}

// The set of arguments for constructing a LoadBalancerPolicy resource.
type LoadBalancerPolicyArgs struct {
	// The load balancer on which the policy is defined.
	LoadBalancerName interface{}
	// Policy attribute to apply to the policy.
	PolicyAttributes interface{}
	// The name of the load balancer policy.
	PolicyName interface{}
	// The policy type.
	PolicyTypeName interface{}
}
