// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticloadbalancing

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a load balancer cookie stickiness policy, which allows an ELB to control the sticky session lifetime of the browser.
type LoadBalancerCookieStickinessPolicy struct {
	s *pulumi.ResourceState
}

// NewLoadBalancerCookieStickinessPolicy registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerCookieStickinessPolicy(ctx *pulumi.Context,
	name string, args *LoadBalancerCookieStickinessPolicyArgs, opts ...pulumi.ResourceOpt) (*LoadBalancerCookieStickinessPolicy, error) {
	if args == nil || args.LbPort == nil {
		return nil, errors.New("missing required argument 'LbPort'")
	}
	if args == nil || args.LoadBalancer == nil {
		return nil, errors.New("missing required argument 'LoadBalancer'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cookieExpirationPeriod"] = nil
		inputs["lbPort"] = nil
		inputs["loadBalancer"] = nil
		inputs["name"] = nil
	} else {
		inputs["cookieExpirationPeriod"] = args.CookieExpirationPeriod
		inputs["lbPort"] = args.LbPort
		inputs["loadBalancer"] = args.LoadBalancer
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("aws:elasticloadbalancing/loadBalancerCookieStickinessPolicy:LoadBalancerCookieStickinessPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LoadBalancerCookieStickinessPolicy{s: s}, nil
}

// GetLoadBalancerCookieStickinessPolicy gets an existing LoadBalancerCookieStickinessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerCookieStickinessPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LoadBalancerCookieStickinessPolicyState, opts ...pulumi.ResourceOpt) (*LoadBalancerCookieStickinessPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cookieExpirationPeriod"] = state.CookieExpirationPeriod
		inputs["lbPort"] = state.LbPort
		inputs["loadBalancer"] = state.LoadBalancer
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("aws:elasticloadbalancing/loadBalancerCookieStickinessPolicy:LoadBalancerCookieStickinessPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LoadBalancerCookieStickinessPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LoadBalancerCookieStickinessPolicy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LoadBalancerCookieStickinessPolicy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The time period after which
// the session cookie should be considered stale, expressed in seconds.
func (r *LoadBalancerCookieStickinessPolicy) CookieExpirationPeriod() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["cookieExpirationPeriod"])
}

// The load balancer port to which the policy
// should be applied. This must be an active listener on the load
// balancer.
func (r *LoadBalancerCookieStickinessPolicy) LbPort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["lbPort"])
}

// The load balancer to which the policy
// should be attached.
func (r *LoadBalancerCookieStickinessPolicy) LoadBalancer() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadBalancer"])
}

// The name of the stickiness policy.
func (r *LoadBalancerCookieStickinessPolicy) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering LoadBalancerCookieStickinessPolicy resources.
type LoadBalancerCookieStickinessPolicyState struct {
	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	CookieExpirationPeriod interface{}
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort interface{}
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer interface{}
	// The name of the stickiness policy.
	Name interface{}
}

// The set of arguments for constructing a LoadBalancerCookieStickinessPolicy resource.
type LoadBalancerCookieStickinessPolicyArgs struct {
	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	CookieExpirationPeriod interface{}
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort interface{}
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer interface{}
	// The name of the stickiness policy.
	Name interface{}
}
