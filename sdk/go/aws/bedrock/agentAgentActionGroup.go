// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bedrock

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Agents for Amazon Bedrock Agent Action Group.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/bedrock"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bedrock.NewAgentAgentActionGroup(ctx, "example", &bedrock.AgentAgentActionGroupArgs{
//				ActionGroupName:        pulumi.String("example"),
//				AgentId:                pulumi.String("ABDJFOWER1"),
//				AgentVersion:           pulumi.String("DRAFT"),
//				SkipResourceInUseCheck: pulumi.Bool(true),
//				ActionGroupExecutor: &bedrock.AgentAgentActionGroupActionGroupExecutorArgs{
//					Lambda: pulumi.String("arn:aws:lambda:us-east-1:123456789012:function:example-function"),
//				},
//				ApiSchema: &bedrock.AgentAgentActionGroupApiSchemaArgs{
//					S3: &bedrock.AgentAgentActionGroupApiSchemaS3Args{
//						S3BucketName: pulumi.String("example-bucket"),
//						S3ObjectKey:  pulumi.String("path/to/schema.json"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Agents for Amazon Bedrock Agent Action Group using the `example_id_arg`. For example:
//
// ```sh
// $ pulumi import aws:bedrock/agentAgentActionGroup:AgentAgentActionGroup example ABDJFOWER1,HSKTNKANI4,DRAFT
// ```
type AgentAgentActionGroup struct {
	pulumi.CustomResourceState

	// Configuration of the executor for the Action Group.
	ActionGroupExecutor AgentAgentActionGroupActionGroupExecutorPtrOutput `pulumi:"actionGroupExecutor"`
	ActionGroupId       pulumi.StringOutput                               `pulumi:"actionGroupId"`
	// Name of the Agent Action Group.
	ActionGroupName  pulumi.StringOutput `pulumi:"actionGroupName"`
	ActionGroupState pulumi.StringOutput `pulumi:"actionGroupState"`
	// Id of the Agent for the Action Group.
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// Version of the Agent to attach the Action Group to.
	AgentVersion pulumi.StringOutput `pulumi:"agentVersion"`
	// Configuration of the API Schema for the Action Group.
	ApiSchema                  AgentAgentActionGroupApiSchemaPtrOutput `pulumi:"apiSchema"`
	Description                pulumi.StringPtrOutput                  `pulumi:"description"`
	ParentActionGroupSignature pulumi.StringPtrOutput                  `pulumi:"parentActionGroupSignature"`
	SkipResourceInUseCheck     pulumi.BoolOutput                       `pulumi:"skipResourceInUseCheck"`
}

// NewAgentAgentActionGroup registers a new resource with the given unique name, arguments, and options.
func NewAgentAgentActionGroup(ctx *pulumi.Context,
	name string, args *AgentAgentActionGroupArgs, opts ...pulumi.ResourceOption) (*AgentAgentActionGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ActionGroupName'")
	}
	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.AgentVersion == nil {
		return nil, errors.New("invalid value for required argument 'AgentVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AgentAgentActionGroup
	err := ctx.RegisterResource("aws:bedrock/agentAgentActionGroup:AgentAgentActionGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgentAgentActionGroup gets an existing AgentAgentActionGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgentAgentActionGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgentAgentActionGroupState, opts ...pulumi.ResourceOption) (*AgentAgentActionGroup, error) {
	var resource AgentAgentActionGroup
	err := ctx.ReadResource("aws:bedrock/agentAgentActionGroup:AgentAgentActionGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AgentAgentActionGroup resources.
type agentAgentActionGroupState struct {
	// Configuration of the executor for the Action Group.
	ActionGroupExecutor *AgentAgentActionGroupActionGroupExecutor `pulumi:"actionGroupExecutor"`
	ActionGroupId       *string                                   `pulumi:"actionGroupId"`
	// Name of the Agent Action Group.
	ActionGroupName  *string `pulumi:"actionGroupName"`
	ActionGroupState *string `pulumi:"actionGroupState"`
	// Id of the Agent for the Action Group.
	AgentId *string `pulumi:"agentId"`
	// Version of the Agent to attach the Action Group to.
	AgentVersion *string `pulumi:"agentVersion"`
	// Configuration of the API Schema for the Action Group.
	ApiSchema                  *AgentAgentActionGroupApiSchema `pulumi:"apiSchema"`
	Description                *string                         `pulumi:"description"`
	ParentActionGroupSignature *string                         `pulumi:"parentActionGroupSignature"`
	SkipResourceInUseCheck     *bool                           `pulumi:"skipResourceInUseCheck"`
}

type AgentAgentActionGroupState struct {
	// Configuration of the executor for the Action Group.
	ActionGroupExecutor AgentAgentActionGroupActionGroupExecutorPtrInput
	ActionGroupId       pulumi.StringPtrInput
	// Name of the Agent Action Group.
	ActionGroupName  pulumi.StringPtrInput
	ActionGroupState pulumi.StringPtrInput
	// Id of the Agent for the Action Group.
	AgentId pulumi.StringPtrInput
	// Version of the Agent to attach the Action Group to.
	AgentVersion pulumi.StringPtrInput
	// Configuration of the API Schema for the Action Group.
	ApiSchema                  AgentAgentActionGroupApiSchemaPtrInput
	Description                pulumi.StringPtrInput
	ParentActionGroupSignature pulumi.StringPtrInput
	SkipResourceInUseCheck     pulumi.BoolPtrInput
}

func (AgentAgentActionGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*agentAgentActionGroupState)(nil)).Elem()
}

type agentAgentActionGroupArgs struct {
	// Configuration of the executor for the Action Group.
	ActionGroupExecutor *AgentAgentActionGroupActionGroupExecutor `pulumi:"actionGroupExecutor"`
	// Name of the Agent Action Group.
	ActionGroupName  string  `pulumi:"actionGroupName"`
	ActionGroupState *string `pulumi:"actionGroupState"`
	// Id of the Agent for the Action Group.
	AgentId string `pulumi:"agentId"`
	// Version of the Agent to attach the Action Group to.
	AgentVersion string `pulumi:"agentVersion"`
	// Configuration of the API Schema for the Action Group.
	ApiSchema                  *AgentAgentActionGroupApiSchema `pulumi:"apiSchema"`
	Description                *string                         `pulumi:"description"`
	ParentActionGroupSignature *string                         `pulumi:"parentActionGroupSignature"`
	SkipResourceInUseCheck     *bool                           `pulumi:"skipResourceInUseCheck"`
}

// The set of arguments for constructing a AgentAgentActionGroup resource.
type AgentAgentActionGroupArgs struct {
	// Configuration of the executor for the Action Group.
	ActionGroupExecutor AgentAgentActionGroupActionGroupExecutorPtrInput
	// Name of the Agent Action Group.
	ActionGroupName  pulumi.StringInput
	ActionGroupState pulumi.StringPtrInput
	// Id of the Agent for the Action Group.
	AgentId pulumi.StringInput
	// Version of the Agent to attach the Action Group to.
	AgentVersion pulumi.StringInput
	// Configuration of the API Schema for the Action Group.
	ApiSchema                  AgentAgentActionGroupApiSchemaPtrInput
	Description                pulumi.StringPtrInput
	ParentActionGroupSignature pulumi.StringPtrInput
	SkipResourceInUseCheck     pulumi.BoolPtrInput
}

func (AgentAgentActionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agentAgentActionGroupArgs)(nil)).Elem()
}

type AgentAgentActionGroupInput interface {
	pulumi.Input

	ToAgentAgentActionGroupOutput() AgentAgentActionGroupOutput
	ToAgentAgentActionGroupOutputWithContext(ctx context.Context) AgentAgentActionGroupOutput
}

func (*AgentAgentActionGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentAgentActionGroup)(nil)).Elem()
}

func (i *AgentAgentActionGroup) ToAgentAgentActionGroupOutput() AgentAgentActionGroupOutput {
	return i.ToAgentAgentActionGroupOutputWithContext(context.Background())
}

func (i *AgentAgentActionGroup) ToAgentAgentActionGroupOutputWithContext(ctx context.Context) AgentAgentActionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentAgentActionGroupOutput)
}

// AgentAgentActionGroupArrayInput is an input type that accepts AgentAgentActionGroupArray and AgentAgentActionGroupArrayOutput values.
// You can construct a concrete instance of `AgentAgentActionGroupArrayInput` via:
//
//	AgentAgentActionGroupArray{ AgentAgentActionGroupArgs{...} }
type AgentAgentActionGroupArrayInput interface {
	pulumi.Input

	ToAgentAgentActionGroupArrayOutput() AgentAgentActionGroupArrayOutput
	ToAgentAgentActionGroupArrayOutputWithContext(context.Context) AgentAgentActionGroupArrayOutput
}

type AgentAgentActionGroupArray []AgentAgentActionGroupInput

func (AgentAgentActionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentAgentActionGroup)(nil)).Elem()
}

func (i AgentAgentActionGroupArray) ToAgentAgentActionGroupArrayOutput() AgentAgentActionGroupArrayOutput {
	return i.ToAgentAgentActionGroupArrayOutputWithContext(context.Background())
}

func (i AgentAgentActionGroupArray) ToAgentAgentActionGroupArrayOutputWithContext(ctx context.Context) AgentAgentActionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentAgentActionGroupArrayOutput)
}

// AgentAgentActionGroupMapInput is an input type that accepts AgentAgentActionGroupMap and AgentAgentActionGroupMapOutput values.
// You can construct a concrete instance of `AgentAgentActionGroupMapInput` via:
//
//	AgentAgentActionGroupMap{ "key": AgentAgentActionGroupArgs{...} }
type AgentAgentActionGroupMapInput interface {
	pulumi.Input

	ToAgentAgentActionGroupMapOutput() AgentAgentActionGroupMapOutput
	ToAgentAgentActionGroupMapOutputWithContext(context.Context) AgentAgentActionGroupMapOutput
}

type AgentAgentActionGroupMap map[string]AgentAgentActionGroupInput

func (AgentAgentActionGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentAgentActionGroup)(nil)).Elem()
}

func (i AgentAgentActionGroupMap) ToAgentAgentActionGroupMapOutput() AgentAgentActionGroupMapOutput {
	return i.ToAgentAgentActionGroupMapOutputWithContext(context.Background())
}

func (i AgentAgentActionGroupMap) ToAgentAgentActionGroupMapOutputWithContext(ctx context.Context) AgentAgentActionGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentAgentActionGroupMapOutput)
}

type AgentAgentActionGroupOutput struct{ *pulumi.OutputState }

func (AgentAgentActionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentAgentActionGroup)(nil)).Elem()
}

func (o AgentAgentActionGroupOutput) ToAgentAgentActionGroupOutput() AgentAgentActionGroupOutput {
	return o
}

func (o AgentAgentActionGroupOutput) ToAgentAgentActionGroupOutputWithContext(ctx context.Context) AgentAgentActionGroupOutput {
	return o
}

// Configuration of the executor for the Action Group.
func (o AgentAgentActionGroupOutput) ActionGroupExecutor() AgentAgentActionGroupActionGroupExecutorPtrOutput {
	return o.ApplyT(func(v *AgentAgentActionGroup) AgentAgentActionGroupActionGroupExecutorPtrOutput {
		return v.ActionGroupExecutor
	}).(AgentAgentActionGroupActionGroupExecutorPtrOutput)
}

func (o AgentAgentActionGroupOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgentActionGroup) pulumi.StringOutput { return v.ActionGroupId }).(pulumi.StringOutput)
}

// Name of the Agent Action Group.
func (o AgentAgentActionGroupOutput) ActionGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgentActionGroup) pulumi.StringOutput { return v.ActionGroupName }).(pulumi.StringOutput)
}

func (o AgentAgentActionGroupOutput) ActionGroupState() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgentActionGroup) pulumi.StringOutput { return v.ActionGroupState }).(pulumi.StringOutput)
}

// Id of the Agent for the Action Group.
func (o AgentAgentActionGroupOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgentActionGroup) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// Version of the Agent to attach the Action Group to.
func (o AgentAgentActionGroupOutput) AgentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgentActionGroup) pulumi.StringOutput { return v.AgentVersion }).(pulumi.StringOutput)
}

// Configuration of the API Schema for the Action Group.
func (o AgentAgentActionGroupOutput) ApiSchema() AgentAgentActionGroupApiSchemaPtrOutput {
	return o.ApplyT(func(v *AgentAgentActionGroup) AgentAgentActionGroupApiSchemaPtrOutput { return v.ApiSchema }).(AgentAgentActionGroupApiSchemaPtrOutput)
}

func (o AgentAgentActionGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentAgentActionGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AgentAgentActionGroupOutput) ParentActionGroupSignature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentAgentActionGroup) pulumi.StringPtrOutput { return v.ParentActionGroupSignature }).(pulumi.StringPtrOutput)
}

func (o AgentAgentActionGroupOutput) SkipResourceInUseCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v *AgentAgentActionGroup) pulumi.BoolOutput { return v.SkipResourceInUseCheck }).(pulumi.BoolOutput)
}

type AgentAgentActionGroupArrayOutput struct{ *pulumi.OutputState }

func (AgentAgentActionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentAgentActionGroup)(nil)).Elem()
}

func (o AgentAgentActionGroupArrayOutput) ToAgentAgentActionGroupArrayOutput() AgentAgentActionGroupArrayOutput {
	return o
}

func (o AgentAgentActionGroupArrayOutput) ToAgentAgentActionGroupArrayOutputWithContext(ctx context.Context) AgentAgentActionGroupArrayOutput {
	return o
}

func (o AgentAgentActionGroupArrayOutput) Index(i pulumi.IntInput) AgentAgentActionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AgentAgentActionGroup {
		return vs[0].([]*AgentAgentActionGroup)[vs[1].(int)]
	}).(AgentAgentActionGroupOutput)
}

type AgentAgentActionGroupMapOutput struct{ *pulumi.OutputState }

func (AgentAgentActionGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentAgentActionGroup)(nil)).Elem()
}

func (o AgentAgentActionGroupMapOutput) ToAgentAgentActionGroupMapOutput() AgentAgentActionGroupMapOutput {
	return o
}

func (o AgentAgentActionGroupMapOutput) ToAgentAgentActionGroupMapOutputWithContext(ctx context.Context) AgentAgentActionGroupMapOutput {
	return o
}

func (o AgentAgentActionGroupMapOutput) MapIndex(k pulumi.StringInput) AgentAgentActionGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AgentAgentActionGroup {
		return vs[0].(map[string]*AgentAgentActionGroup)[vs[1].(string)]
	}).(AgentAgentActionGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgentAgentActionGroupInput)(nil)).Elem(), &AgentAgentActionGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentAgentActionGroupArrayInput)(nil)).Elem(), AgentAgentActionGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentAgentActionGroupMapInput)(nil)).Elem(), AgentAgentActionGroupMap{})
	pulumi.RegisterOutputType(AgentAgentActionGroupOutput{})
	pulumi.RegisterOutputType(AgentAgentActionGroupArrayOutput{})
	pulumi.RegisterOutputType(AgentAgentActionGroupMapOutput{})
}
