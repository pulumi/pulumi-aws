// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bedrock

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AWS Bedrock AgentCore Memory Strategy. Memory strategies define how the agent processes and organizes information within a memory, such as semantic understanding, summarization, or custom processing logic.
//
// **Important Limitations:**
//
// - Each memory can have a maximum of 6 strategies total
// - Only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory
// - Multiple `CUSTOM` strategies are allowed (subject to the total limit of 6)
//
// ## Example Usage
//
// ### Semantic Strategy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/bedrock"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bedrock.NewAgentcoreMemoryStrategy(ctx, "semantic", &bedrock.AgentcoreMemoryStrategyArgs{
//				Name:        pulumi.String("semantic-strategy"),
//				MemoryId:    pulumi.Any(example.Id),
//				Type:        pulumi.String("SEMANTIC"),
//				Description: pulumi.String("Semantic understanding strategy"),
//				Namespaces: pulumi.StringArray{
//					pulumi.String("default"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Summarization Strategy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/bedrock"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bedrock.NewAgentcoreMemoryStrategy(ctx, "summary", &bedrock.AgentcoreMemoryStrategyArgs{
//				Name:        pulumi.String("summary-strategy"),
//				MemoryId:    pulumi.Any(example.Id),
//				Type:        pulumi.String("SUMMARIZATION"),
//				Description: pulumi.String("Text summarization strategy"),
//				Namespaces: pulumi.StringArray{
//					pulumi.String("{sessionId}"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### User Preference Strategy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/bedrock"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bedrock.NewAgentcoreMemoryStrategy(ctx, "user_pref", &bedrock.AgentcoreMemoryStrategyArgs{
//				Name:        pulumi.String("user-preference-strategy"),
//				MemoryId:    pulumi.Any(example.Id),
//				Type:        pulumi.String("USER_PREFERENCE"),
//				Description: pulumi.String("User preference tracking strategy"),
//				Namespaces: pulumi.StringArray{
//					pulumi.String("preferences"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Custom Strategy with Semantic Override
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/bedrock"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bedrock.NewAgentcoreMemoryStrategy(ctx, "custom_semantic", &bedrock.AgentcoreMemoryStrategyArgs{
//				Name:                   pulumi.String("custom-semantic-strategy"),
//				MemoryId:               pulumi.Any(example.Id),
//				MemoryExecutionRoleArn: pulumi.Any(example.MemoryExecutionRoleArn),
//				Type:                   pulumi.String("CUSTOM"),
//				Description:            pulumi.String("Custom semantic processing strategy"),
//				Namespaces: pulumi.StringArray{
//					pulumi.String("{sessionId}"),
//				},
//				Configuration: &bedrock.AgentcoreMemoryStrategyConfigurationArgs{
//					Type: pulumi.String("SEMANTIC_OVERRIDE"),
//					Consolidation: &bedrock.AgentcoreMemoryStrategyConfigurationConsolidationArgs{
//						AppendToPrompt: pulumi.String("Focus on extracting key semantic relationships and concepts"),
//						ModelId:        pulumi.String("anthropic.claude-3-sonnet-20240229-v1:0"),
//					},
//					Extraction: &bedrock.AgentcoreMemoryStrategyConfigurationExtractionArgs{
//						AppendToPrompt: pulumi.String("Extract and categorize semantic information"),
//						ModelId:        pulumi.String("anthropic.claude-3-haiku-20240307-v1:0"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Custom Strategy with Summary Override
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/bedrock"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bedrock.NewAgentcoreMemoryStrategy(ctx, "custom_summary", &bedrock.AgentcoreMemoryStrategyArgs{
//				Name:        pulumi.String("custom-summary-strategy"),
//				MemoryId:    pulumi.Any(example.Id),
//				Type:        pulumi.String("CUSTOM"),
//				Description: pulumi.String("Custom summarization strategy"),
//				Namespaces: pulumi.StringArray{
//					pulumi.String("summaries"),
//				},
//				Configuration: &bedrock.AgentcoreMemoryStrategyConfigurationArgs{
//					Type: pulumi.String("SUMMARY_OVERRIDE"),
//					Consolidation: &bedrock.AgentcoreMemoryStrategyConfigurationConsolidationArgs{
//						AppendToPrompt: pulumi.String("Create concise summaries while preserving key details"),
//						ModelId:        pulumi.String("anthropic.claude-3-sonnet-20240229-v1:0"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Custom Strategy with User Preference Override
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/bedrock"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bedrock.NewAgentcoreMemoryStrategy(ctx, "custom_user_pref", &bedrock.AgentcoreMemoryStrategyArgs{
//				Name:        pulumi.String("custom-user-preference-strategy"),
//				MemoryId:    pulumi.Any(example.Id),
//				Type:        pulumi.String("CUSTOM"),
//				Description: pulumi.String("Custom user preference tracking strategy"),
//				Namespaces: pulumi.StringArray{
//					pulumi.String("user_prefs"),
//				},
//				Configuration: &bedrock.AgentcoreMemoryStrategyConfigurationArgs{
//					Type: pulumi.String("USER_PREFERENCE_OVERRIDE"),
//					Consolidation: &bedrock.AgentcoreMemoryStrategyConfigurationConsolidationArgs{
//						AppendToPrompt: pulumi.String("Consolidate user preferences and behavioral patterns"),
//						ModelId:        pulumi.String("anthropic.claude-3-sonnet-20240229-v1:0"),
//					},
//					Extraction: &bedrock.AgentcoreMemoryStrategyConfigurationExtractionArgs{
//						AppendToPrompt: pulumi.String("Extract user preferences and interaction patterns"),
//						ModelId:        pulumi.String("anthropic.claude-3-haiku-20240307-v1:0"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Bedrock AgentCore Memory Strategy using the `memory_id,strategy_id`. For example:
//
// ```sh
// $ pulumi import aws:bedrock/agentcoreMemoryStrategy:AgentcoreMemoryStrategy example MEMORY1234567890,STRATEGY0987654321
// ```
type AgentcoreMemoryStrategy struct {
	pulumi.CustomResourceState

	// Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
	Configuration AgentcoreMemoryStrategyConfigurationPtrOutput `pulumi:"configuration"`
	// Description of the memory strategy.
	Description            pulumi.StringPtrOutput `pulumi:"description"`
	MemoryExecutionRoleArn pulumi.StringPtrOutput `pulumi:"memoryExecutionRoleArn"`
	// ID of the memory to associate with this strategy. Changing this forces a new resource.
	MemoryId         pulumi.StringOutput `pulumi:"memoryId"`
	MemoryStrategyId pulumi.StringOutput `pulumi:"memoryStrategyId"`
	// Name of the memory strategy.
	Name pulumi.StringOutput `pulumi:"name"`
	// Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
	//
	// The following arguments are optional:
	Namespaces pulumi.StringArrayOutput `pulumi:"namespaces"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   pulumi.StringOutput                      `pulumi:"region"`
	Timeouts AgentcoreMemoryStrategyTimeoutsPtrOutput `pulumi:"timeouts"`
	// Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAgentcoreMemoryStrategy registers a new resource with the given unique name, arguments, and options.
func NewAgentcoreMemoryStrategy(ctx *pulumi.Context,
	name string, args *AgentcoreMemoryStrategyArgs, opts ...pulumi.ResourceOption) (*AgentcoreMemoryStrategy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MemoryId == nil {
		return nil, errors.New("invalid value for required argument 'MemoryId'")
	}
	if args.Namespaces == nil {
		return nil, errors.New("invalid value for required argument 'Namespaces'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AgentcoreMemoryStrategy
	err := ctx.RegisterResource("aws:bedrock/agentcoreMemoryStrategy:AgentcoreMemoryStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgentcoreMemoryStrategy gets an existing AgentcoreMemoryStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgentcoreMemoryStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgentcoreMemoryStrategyState, opts ...pulumi.ResourceOption) (*AgentcoreMemoryStrategy, error) {
	var resource AgentcoreMemoryStrategy
	err := ctx.ReadResource("aws:bedrock/agentcoreMemoryStrategy:AgentcoreMemoryStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AgentcoreMemoryStrategy resources.
type agentcoreMemoryStrategyState struct {
	// Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
	Configuration *AgentcoreMemoryStrategyConfiguration `pulumi:"configuration"`
	// Description of the memory strategy.
	Description            *string `pulumi:"description"`
	MemoryExecutionRoleArn *string `pulumi:"memoryExecutionRoleArn"`
	// ID of the memory to associate with this strategy. Changing this forces a new resource.
	MemoryId         *string `pulumi:"memoryId"`
	MemoryStrategyId *string `pulumi:"memoryStrategyId"`
	// Name of the memory strategy.
	Name *string `pulumi:"name"`
	// Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
	//
	// The following arguments are optional:
	Namespaces []string `pulumi:"namespaces"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   *string                          `pulumi:"region"`
	Timeouts *AgentcoreMemoryStrategyTimeouts `pulumi:"timeouts"`
	// Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
	Type *string `pulumi:"type"`
}

type AgentcoreMemoryStrategyState struct {
	// Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
	Configuration AgentcoreMemoryStrategyConfigurationPtrInput
	// Description of the memory strategy.
	Description            pulumi.StringPtrInput
	MemoryExecutionRoleArn pulumi.StringPtrInput
	// ID of the memory to associate with this strategy. Changing this forces a new resource.
	MemoryId         pulumi.StringPtrInput
	MemoryStrategyId pulumi.StringPtrInput
	// Name of the memory strategy.
	Name pulumi.StringPtrInput
	// Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
	//
	// The following arguments are optional:
	Namespaces pulumi.StringArrayInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   pulumi.StringPtrInput
	Timeouts AgentcoreMemoryStrategyTimeoutsPtrInput
	// Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
	Type pulumi.StringPtrInput
}

func (AgentcoreMemoryStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*agentcoreMemoryStrategyState)(nil)).Elem()
}

type agentcoreMemoryStrategyArgs struct {
	// Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
	Configuration *AgentcoreMemoryStrategyConfiguration `pulumi:"configuration"`
	// Description of the memory strategy.
	Description            *string `pulumi:"description"`
	MemoryExecutionRoleArn *string `pulumi:"memoryExecutionRoleArn"`
	// ID of the memory to associate with this strategy. Changing this forces a new resource.
	MemoryId string `pulumi:"memoryId"`
	// Name of the memory strategy.
	Name *string `pulumi:"name"`
	// Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
	//
	// The following arguments are optional:
	Namespaces []string `pulumi:"namespaces"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   *string                          `pulumi:"region"`
	Timeouts *AgentcoreMemoryStrategyTimeouts `pulumi:"timeouts"`
	// Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a AgentcoreMemoryStrategy resource.
type AgentcoreMemoryStrategyArgs struct {
	// Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
	Configuration AgentcoreMemoryStrategyConfigurationPtrInput
	// Description of the memory strategy.
	Description            pulumi.StringPtrInput
	MemoryExecutionRoleArn pulumi.StringPtrInput
	// ID of the memory to associate with this strategy. Changing this forces a new resource.
	MemoryId pulumi.StringInput
	// Name of the memory strategy.
	Name pulumi.StringPtrInput
	// Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
	//
	// The following arguments are optional:
	Namespaces pulumi.StringArrayInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   pulumi.StringPtrInput
	Timeouts AgentcoreMemoryStrategyTimeoutsPtrInput
	// Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
	Type pulumi.StringInput
}

func (AgentcoreMemoryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agentcoreMemoryStrategyArgs)(nil)).Elem()
}

type AgentcoreMemoryStrategyInput interface {
	pulumi.Input

	ToAgentcoreMemoryStrategyOutput() AgentcoreMemoryStrategyOutput
	ToAgentcoreMemoryStrategyOutputWithContext(ctx context.Context) AgentcoreMemoryStrategyOutput
}

func (*AgentcoreMemoryStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentcoreMemoryStrategy)(nil)).Elem()
}

func (i *AgentcoreMemoryStrategy) ToAgentcoreMemoryStrategyOutput() AgentcoreMemoryStrategyOutput {
	return i.ToAgentcoreMemoryStrategyOutputWithContext(context.Background())
}

func (i *AgentcoreMemoryStrategy) ToAgentcoreMemoryStrategyOutputWithContext(ctx context.Context) AgentcoreMemoryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentcoreMemoryStrategyOutput)
}

// AgentcoreMemoryStrategyArrayInput is an input type that accepts AgentcoreMemoryStrategyArray and AgentcoreMemoryStrategyArrayOutput values.
// You can construct a concrete instance of `AgentcoreMemoryStrategyArrayInput` via:
//
//	AgentcoreMemoryStrategyArray{ AgentcoreMemoryStrategyArgs{...} }
type AgentcoreMemoryStrategyArrayInput interface {
	pulumi.Input

	ToAgentcoreMemoryStrategyArrayOutput() AgentcoreMemoryStrategyArrayOutput
	ToAgentcoreMemoryStrategyArrayOutputWithContext(context.Context) AgentcoreMemoryStrategyArrayOutput
}

type AgentcoreMemoryStrategyArray []AgentcoreMemoryStrategyInput

func (AgentcoreMemoryStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentcoreMemoryStrategy)(nil)).Elem()
}

func (i AgentcoreMemoryStrategyArray) ToAgentcoreMemoryStrategyArrayOutput() AgentcoreMemoryStrategyArrayOutput {
	return i.ToAgentcoreMemoryStrategyArrayOutputWithContext(context.Background())
}

func (i AgentcoreMemoryStrategyArray) ToAgentcoreMemoryStrategyArrayOutputWithContext(ctx context.Context) AgentcoreMemoryStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentcoreMemoryStrategyArrayOutput)
}

// AgentcoreMemoryStrategyMapInput is an input type that accepts AgentcoreMemoryStrategyMap and AgentcoreMemoryStrategyMapOutput values.
// You can construct a concrete instance of `AgentcoreMemoryStrategyMapInput` via:
//
//	AgentcoreMemoryStrategyMap{ "key": AgentcoreMemoryStrategyArgs{...} }
type AgentcoreMemoryStrategyMapInput interface {
	pulumi.Input

	ToAgentcoreMemoryStrategyMapOutput() AgentcoreMemoryStrategyMapOutput
	ToAgentcoreMemoryStrategyMapOutputWithContext(context.Context) AgentcoreMemoryStrategyMapOutput
}

type AgentcoreMemoryStrategyMap map[string]AgentcoreMemoryStrategyInput

func (AgentcoreMemoryStrategyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentcoreMemoryStrategy)(nil)).Elem()
}

func (i AgentcoreMemoryStrategyMap) ToAgentcoreMemoryStrategyMapOutput() AgentcoreMemoryStrategyMapOutput {
	return i.ToAgentcoreMemoryStrategyMapOutputWithContext(context.Background())
}

func (i AgentcoreMemoryStrategyMap) ToAgentcoreMemoryStrategyMapOutputWithContext(ctx context.Context) AgentcoreMemoryStrategyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentcoreMemoryStrategyMapOutput)
}

type AgentcoreMemoryStrategyOutput struct{ *pulumi.OutputState }

func (AgentcoreMemoryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentcoreMemoryStrategy)(nil)).Elem()
}

func (o AgentcoreMemoryStrategyOutput) ToAgentcoreMemoryStrategyOutput() AgentcoreMemoryStrategyOutput {
	return o
}

func (o AgentcoreMemoryStrategyOutput) ToAgentcoreMemoryStrategyOutputWithContext(ctx context.Context) AgentcoreMemoryStrategyOutput {
	return o
}

// Custom configuration block. Required when `type` is `CUSTOM`, must be omitted for other types. See `configuration` below.
func (o AgentcoreMemoryStrategyOutput) Configuration() AgentcoreMemoryStrategyConfigurationPtrOutput {
	return o.ApplyT(func(v *AgentcoreMemoryStrategy) AgentcoreMemoryStrategyConfigurationPtrOutput { return v.Configuration }).(AgentcoreMemoryStrategyConfigurationPtrOutput)
}

// Description of the memory strategy.
func (o AgentcoreMemoryStrategyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentcoreMemoryStrategy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AgentcoreMemoryStrategyOutput) MemoryExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentcoreMemoryStrategy) pulumi.StringPtrOutput { return v.MemoryExecutionRoleArn }).(pulumi.StringPtrOutput)
}

// ID of the memory to associate with this strategy. Changing this forces a new resource.
func (o AgentcoreMemoryStrategyOutput) MemoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentcoreMemoryStrategy) pulumi.StringOutput { return v.MemoryId }).(pulumi.StringOutput)
}

func (o AgentcoreMemoryStrategyOutput) MemoryStrategyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentcoreMemoryStrategy) pulumi.StringOutput { return v.MemoryStrategyId }).(pulumi.StringOutput)
}

// Name of the memory strategy.
func (o AgentcoreMemoryStrategyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentcoreMemoryStrategy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
//
// The following arguments are optional:
func (o AgentcoreMemoryStrategyOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AgentcoreMemoryStrategy) pulumi.StringArrayOutput { return v.Namespaces }).(pulumi.StringArrayOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o AgentcoreMemoryStrategyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentcoreMemoryStrategy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o AgentcoreMemoryStrategyOutput) Timeouts() AgentcoreMemoryStrategyTimeoutsPtrOutput {
	return o.ApplyT(func(v *AgentcoreMemoryStrategy) AgentcoreMemoryStrategyTimeoutsPtrOutput { return v.Timeouts }).(AgentcoreMemoryStrategyTimeoutsPtrOutput)
}

// Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
func (o AgentcoreMemoryStrategyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentcoreMemoryStrategy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type AgentcoreMemoryStrategyArrayOutput struct{ *pulumi.OutputState }

func (AgentcoreMemoryStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentcoreMemoryStrategy)(nil)).Elem()
}

func (o AgentcoreMemoryStrategyArrayOutput) ToAgentcoreMemoryStrategyArrayOutput() AgentcoreMemoryStrategyArrayOutput {
	return o
}

func (o AgentcoreMemoryStrategyArrayOutput) ToAgentcoreMemoryStrategyArrayOutputWithContext(ctx context.Context) AgentcoreMemoryStrategyArrayOutput {
	return o
}

func (o AgentcoreMemoryStrategyArrayOutput) Index(i pulumi.IntInput) AgentcoreMemoryStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AgentcoreMemoryStrategy {
		return vs[0].([]*AgentcoreMemoryStrategy)[vs[1].(int)]
	}).(AgentcoreMemoryStrategyOutput)
}

type AgentcoreMemoryStrategyMapOutput struct{ *pulumi.OutputState }

func (AgentcoreMemoryStrategyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentcoreMemoryStrategy)(nil)).Elem()
}

func (o AgentcoreMemoryStrategyMapOutput) ToAgentcoreMemoryStrategyMapOutput() AgentcoreMemoryStrategyMapOutput {
	return o
}

func (o AgentcoreMemoryStrategyMapOutput) ToAgentcoreMemoryStrategyMapOutputWithContext(ctx context.Context) AgentcoreMemoryStrategyMapOutput {
	return o
}

func (o AgentcoreMemoryStrategyMapOutput) MapIndex(k pulumi.StringInput) AgentcoreMemoryStrategyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AgentcoreMemoryStrategy {
		return vs[0].(map[string]*AgentcoreMemoryStrategy)[vs[1].(string)]
	}).(AgentcoreMemoryStrategyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgentcoreMemoryStrategyInput)(nil)).Elem(), &AgentcoreMemoryStrategy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentcoreMemoryStrategyArrayInput)(nil)).Elem(), AgentcoreMemoryStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentcoreMemoryStrategyMapInput)(nil)).Elem(), AgentcoreMemoryStrategyMap{})
	pulumi.RegisterOutputType(AgentcoreMemoryStrategyOutput{})
	pulumi.RegisterOutputType(AgentcoreMemoryStrategyArrayOutput{})
	pulumi.RegisterOutputType(AgentcoreMemoryStrategyMapOutput{})
}
