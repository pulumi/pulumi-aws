// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bedrock

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages [Provisioned Throughput](https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html) for an Amazon Bedrock model.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/bedrock"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bedrock.NewProvisionedModelThroughput(ctx, "example", &bedrock.ProvisionedModelThroughputArgs{
//				ProvisionedModelName: pulumi.String("example-model"),
//				ModelArn:             pulumi.String("arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-v2"),
//				CommitmentDuration:   pulumi.String("SixMonths"),
//				ModelUnits:           pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import Provisioned Throughput using the `provisioned_model_arn`. For example:
//
// ```sh
// $ pulumi import aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput example arn:aws:bedrock:us-west-2:123456789012:provisioned-model/1y5n57gh5y2e
// ```
type ProvisionedModelThroughput struct {
	pulumi.CustomResourceState

	// Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
	CommitmentDuration pulumi.StringPtrOutput `pulumi:"commitmentDuration"`
	// ARN of the model to associate with this Provisioned Throughput.
	ModelArn pulumi.StringOutput `pulumi:"modelArn"`
	// Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
	ModelUnits pulumi.IntOutput `pulumi:"modelUnits"`
	// The ARN of the Provisioned Throughput.
	ProvisionedModelArn pulumi.StringOutput `pulumi:"provisionedModelArn"`
	// Unique name for this Provisioned Throughput.
	ProvisionedModelName pulumi.StringOutput `pulumi:"provisionedModelName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput                      `pulumi:"tagsAll"`
	Timeouts ProvisionedModelThroughputTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewProvisionedModelThroughput registers a new resource with the given unique name, arguments, and options.
func NewProvisionedModelThroughput(ctx *pulumi.Context,
	name string, args *ProvisionedModelThroughputArgs, opts ...pulumi.ResourceOption) (*ProvisionedModelThroughput, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ModelArn == nil {
		return nil, errors.New("invalid value for required argument 'ModelArn'")
	}
	if args.ModelUnits == nil {
		return nil, errors.New("invalid value for required argument 'ModelUnits'")
	}
	if args.ProvisionedModelName == nil {
		return nil, errors.New("invalid value for required argument 'ProvisionedModelName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProvisionedModelThroughput
	err := ctx.RegisterResource("aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProvisionedModelThroughput gets an existing ProvisionedModelThroughput resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProvisionedModelThroughput(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProvisionedModelThroughputState, opts ...pulumi.ResourceOption) (*ProvisionedModelThroughput, error) {
	var resource ProvisionedModelThroughput
	err := ctx.ReadResource("aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProvisionedModelThroughput resources.
type provisionedModelThroughputState struct {
	// Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
	CommitmentDuration *string `pulumi:"commitmentDuration"`
	// ARN of the model to associate with this Provisioned Throughput.
	ModelArn *string `pulumi:"modelArn"`
	// Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
	ModelUnits *int `pulumi:"modelUnits"`
	// The ARN of the Provisioned Throughput.
	ProvisionedModelArn *string `pulumi:"provisionedModelArn"`
	// Unique name for this Provisioned Throughput.
	ProvisionedModelName *string `pulumi:"provisionedModelName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string                   `pulumi:"tagsAll"`
	Timeouts *ProvisionedModelThroughputTimeouts `pulumi:"timeouts"`
}

type ProvisionedModelThroughputState struct {
	// Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
	CommitmentDuration pulumi.StringPtrInput
	// ARN of the model to associate with this Provisioned Throughput.
	ModelArn pulumi.StringPtrInput
	// Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
	ModelUnits pulumi.IntPtrInput
	// The ARN of the Provisioned Throughput.
	ProvisionedModelArn pulumi.StringPtrInput
	// Unique name for this Provisioned Throughput.
	ProvisionedModelName pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts ProvisionedModelThroughputTimeoutsPtrInput
}

func (ProvisionedModelThroughputState) ElementType() reflect.Type {
	return reflect.TypeOf((*provisionedModelThroughputState)(nil)).Elem()
}

type provisionedModelThroughputArgs struct {
	// Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
	CommitmentDuration *string `pulumi:"commitmentDuration"`
	// ARN of the model to associate with this Provisioned Throughput.
	ModelArn string `pulumi:"modelArn"`
	// Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
	ModelUnits int `pulumi:"modelUnits"`
	// Unique name for this Provisioned Throughput.
	ProvisionedModelName string `pulumi:"provisionedModelName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string                   `pulumi:"tags"`
	Timeouts *ProvisionedModelThroughputTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ProvisionedModelThroughput resource.
type ProvisionedModelThroughputArgs struct {
	// Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
	CommitmentDuration pulumi.StringPtrInput
	// ARN of the model to associate with this Provisioned Throughput.
	ModelArn pulumi.StringInput
	// Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
	ModelUnits pulumi.IntInput
	// Unique name for this Provisioned Throughput.
	ProvisionedModelName pulumi.StringInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts ProvisionedModelThroughputTimeoutsPtrInput
}

func (ProvisionedModelThroughputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*provisionedModelThroughputArgs)(nil)).Elem()
}

type ProvisionedModelThroughputInput interface {
	pulumi.Input

	ToProvisionedModelThroughputOutput() ProvisionedModelThroughputOutput
	ToProvisionedModelThroughputOutputWithContext(ctx context.Context) ProvisionedModelThroughputOutput
}

func (*ProvisionedModelThroughput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedModelThroughput)(nil)).Elem()
}

func (i *ProvisionedModelThroughput) ToProvisionedModelThroughputOutput() ProvisionedModelThroughputOutput {
	return i.ToProvisionedModelThroughputOutputWithContext(context.Background())
}

func (i *ProvisionedModelThroughput) ToProvisionedModelThroughputOutputWithContext(ctx context.Context) ProvisionedModelThroughputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedModelThroughputOutput)
}

// ProvisionedModelThroughputArrayInput is an input type that accepts ProvisionedModelThroughputArray and ProvisionedModelThroughputArrayOutput values.
// You can construct a concrete instance of `ProvisionedModelThroughputArrayInput` via:
//
//	ProvisionedModelThroughputArray{ ProvisionedModelThroughputArgs{...} }
type ProvisionedModelThroughputArrayInput interface {
	pulumi.Input

	ToProvisionedModelThroughputArrayOutput() ProvisionedModelThroughputArrayOutput
	ToProvisionedModelThroughputArrayOutputWithContext(context.Context) ProvisionedModelThroughputArrayOutput
}

type ProvisionedModelThroughputArray []ProvisionedModelThroughputInput

func (ProvisionedModelThroughputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProvisionedModelThroughput)(nil)).Elem()
}

func (i ProvisionedModelThroughputArray) ToProvisionedModelThroughputArrayOutput() ProvisionedModelThroughputArrayOutput {
	return i.ToProvisionedModelThroughputArrayOutputWithContext(context.Background())
}

func (i ProvisionedModelThroughputArray) ToProvisionedModelThroughputArrayOutputWithContext(ctx context.Context) ProvisionedModelThroughputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedModelThroughputArrayOutput)
}

// ProvisionedModelThroughputMapInput is an input type that accepts ProvisionedModelThroughputMap and ProvisionedModelThroughputMapOutput values.
// You can construct a concrete instance of `ProvisionedModelThroughputMapInput` via:
//
//	ProvisionedModelThroughputMap{ "key": ProvisionedModelThroughputArgs{...} }
type ProvisionedModelThroughputMapInput interface {
	pulumi.Input

	ToProvisionedModelThroughputMapOutput() ProvisionedModelThroughputMapOutput
	ToProvisionedModelThroughputMapOutputWithContext(context.Context) ProvisionedModelThroughputMapOutput
}

type ProvisionedModelThroughputMap map[string]ProvisionedModelThroughputInput

func (ProvisionedModelThroughputMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProvisionedModelThroughput)(nil)).Elem()
}

func (i ProvisionedModelThroughputMap) ToProvisionedModelThroughputMapOutput() ProvisionedModelThroughputMapOutput {
	return i.ToProvisionedModelThroughputMapOutputWithContext(context.Background())
}

func (i ProvisionedModelThroughputMap) ToProvisionedModelThroughputMapOutputWithContext(ctx context.Context) ProvisionedModelThroughputMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedModelThroughputMapOutput)
}

type ProvisionedModelThroughputOutput struct{ *pulumi.OutputState }

func (ProvisionedModelThroughputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedModelThroughput)(nil)).Elem()
}

func (o ProvisionedModelThroughputOutput) ToProvisionedModelThroughputOutput() ProvisionedModelThroughputOutput {
	return o
}

func (o ProvisionedModelThroughputOutput) ToProvisionedModelThroughputOutputWithContext(ctx context.Context) ProvisionedModelThroughputOutput {
	return o
}

// Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
func (o ProvisionedModelThroughputOutput) CommitmentDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedModelThroughput) pulumi.StringPtrOutput { return v.CommitmentDuration }).(pulumi.StringPtrOutput)
}

// ARN of the model to associate with this Provisioned Throughput.
func (o ProvisionedModelThroughputOutput) ModelArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ProvisionedModelThroughput) pulumi.StringOutput { return v.ModelArn }).(pulumi.StringOutput)
}

// Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
func (o ProvisionedModelThroughputOutput) ModelUnits() pulumi.IntOutput {
	return o.ApplyT(func(v *ProvisionedModelThroughput) pulumi.IntOutput { return v.ModelUnits }).(pulumi.IntOutput)
}

// The ARN of the Provisioned Throughput.
func (o ProvisionedModelThroughputOutput) ProvisionedModelArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ProvisionedModelThroughput) pulumi.StringOutput { return v.ProvisionedModelArn }).(pulumi.StringOutput)
}

// Unique name for this Provisioned Throughput.
func (o ProvisionedModelThroughputOutput) ProvisionedModelName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProvisionedModelThroughput) pulumi.StringOutput { return v.ProvisionedModelName }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ProvisionedModelThroughputOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProvisionedModelThroughput) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ProvisionedModelThroughputOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProvisionedModelThroughput) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ProvisionedModelThroughputOutput) Timeouts() ProvisionedModelThroughputTimeoutsPtrOutput {
	return o.ApplyT(func(v *ProvisionedModelThroughput) ProvisionedModelThroughputTimeoutsPtrOutput { return v.Timeouts }).(ProvisionedModelThroughputTimeoutsPtrOutput)
}

type ProvisionedModelThroughputArrayOutput struct{ *pulumi.OutputState }

func (ProvisionedModelThroughputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProvisionedModelThroughput)(nil)).Elem()
}

func (o ProvisionedModelThroughputArrayOutput) ToProvisionedModelThroughputArrayOutput() ProvisionedModelThroughputArrayOutput {
	return o
}

func (o ProvisionedModelThroughputArrayOutput) ToProvisionedModelThroughputArrayOutputWithContext(ctx context.Context) ProvisionedModelThroughputArrayOutput {
	return o
}

func (o ProvisionedModelThroughputArrayOutput) Index(i pulumi.IntInput) ProvisionedModelThroughputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProvisionedModelThroughput {
		return vs[0].([]*ProvisionedModelThroughput)[vs[1].(int)]
	}).(ProvisionedModelThroughputOutput)
}

type ProvisionedModelThroughputMapOutput struct{ *pulumi.OutputState }

func (ProvisionedModelThroughputMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProvisionedModelThroughput)(nil)).Elem()
}

func (o ProvisionedModelThroughputMapOutput) ToProvisionedModelThroughputMapOutput() ProvisionedModelThroughputMapOutput {
	return o
}

func (o ProvisionedModelThroughputMapOutput) ToProvisionedModelThroughputMapOutputWithContext(ctx context.Context) ProvisionedModelThroughputMapOutput {
	return o
}

func (o ProvisionedModelThroughputMapOutput) MapIndex(k pulumi.StringInput) ProvisionedModelThroughputOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProvisionedModelThroughput {
		return vs[0].(map[string]*ProvisionedModelThroughput)[vs[1].(string)]
	}).(ProvisionedModelThroughputOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionedModelThroughputInput)(nil)).Elem(), &ProvisionedModelThroughput{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionedModelThroughputArrayInput)(nil)).Elem(), ProvisionedModelThroughputArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionedModelThroughputMapInput)(nil)).Elem(), ProvisionedModelThroughputMap{})
	pulumi.RegisterOutputType(ProvisionedModelThroughputOutput{})
	pulumi.RegisterOutputType(ProvisionedModelThroughputArrayOutput{})
	pulumi.RegisterOutputType(ProvisionedModelThroughputMapOutput{})
}
