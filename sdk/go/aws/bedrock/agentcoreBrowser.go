// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bedrock

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AWS Bedrock AgentCore Browser. Browser provides AI agents with web browsing capabilities, allowing them to navigate websites, extract information, and interact with web content in a controlled environment.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/bedrock"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bedrock.NewAgentcoreBrowser(ctx, "example", &bedrock.AgentcoreBrowserArgs{
//				Name:        pulumi.String("example-browser"),
//				Description: pulumi.String("Browser for web data extraction"),
//				NetworkConfiguration: &bedrock.AgentcoreBrowserNetworkConfigurationArgs{
//					NetworkMode: pulumi.String("PUBLIC"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Browser with Execution Role and Recording
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/bedrock"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			assumeRole, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
//				Statements: []iam.GetPolicyDocumentStatement{
//					{
//						Effect: pulumi.StringRef("Allow"),
//						Actions: []string{
//							"sts:AssumeRole",
//						},
//						Principals: []iam.GetPolicyDocumentStatementPrincipal{
//							{
//								Type: "Service",
//								Identifiers: []string{
//									"bedrock-agentcore.amazonaws.com",
//								},
//							},
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := iam.NewRole(ctx, "example", &iam.RoleArgs{
//				Name:             pulumi.String("bedrock-agentcore-browser-role"),
//				AssumeRolePolicy: pulumi.String(assumeRole.Json),
//			})
//			if err != nil {
//				return err
//			}
//			recording, err := s3.NewBucket(ctx, "recording", &s3.BucketArgs{
//				Bucket: pulumi.String("browser-recording-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bedrock.NewAgentcoreBrowser(ctx, "example", &bedrock.AgentcoreBrowserArgs{
//				Name:             pulumi.String("example-browser"),
//				Description:      pulumi.String("Browser with recording enabled"),
//				ExecutionRoleArn: example.Arn,
//				NetworkConfiguration: &bedrock.AgentcoreBrowserNetworkConfigurationArgs{
//					NetworkMode: pulumi.String("PUBLIC"),
//				},
//				Recording: &bedrock.AgentcoreBrowserRecordingArgs{
//					Enabled: pulumi.Bool(true),
//					S3Location: &bedrock.AgentcoreBrowserRecordingS3LocationArgs{
//						Bucket: recording.Bucket,
//						Prefix: pulumi.String("browser-sessions/"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Bedrock AgentCore Browser using the browser ID. For example:
//
// ```sh
// $ pulumi import aws:bedrock/agentcoreBrowser:AgentcoreBrowser example BROWSER1234567890
// ```
type AgentcoreBrowser struct {
	pulumi.CustomResourceState

	// ARN of the Browser.
	BrowserArn pulumi.StringOutput `pulumi:"browserArn"`
	// Unique identifier of the Browser.
	BrowserId pulumi.StringOutput `pulumi:"browserId"`
	// Description of the browser.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ARN of the IAM role that the browser assumes for execution.
	ExecutionRoleArn pulumi.StringPtrOutput `pulumi:"executionRoleArn"`
	// Name of the browser.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network configuration for the browser. See `networkConfiguration` below.
	//
	// The following arguments are optional:
	NetworkConfiguration AgentcoreBrowserNetworkConfigurationPtrOutput `pulumi:"networkConfiguration"`
	// Recording configuration for browser sessions. See `recording` below.
	Recording AgentcoreBrowserRecordingPtrOutput `pulumi:"recording"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumi.StringMapOutput            `pulumi:"tagsAll"`
	Timeouts AgentcoreBrowserTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewAgentcoreBrowser registers a new resource with the given unique name, arguments, and options.
func NewAgentcoreBrowser(ctx *pulumi.Context,
	name string, args *AgentcoreBrowserArgs, opts ...pulumi.ResourceOption) (*AgentcoreBrowser, error) {
	if args == nil {
		args = &AgentcoreBrowserArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AgentcoreBrowser
	err := ctx.RegisterResource("aws:bedrock/agentcoreBrowser:AgentcoreBrowser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgentcoreBrowser gets an existing AgentcoreBrowser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgentcoreBrowser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgentcoreBrowserState, opts ...pulumi.ResourceOption) (*AgentcoreBrowser, error) {
	var resource AgentcoreBrowser
	err := ctx.ReadResource("aws:bedrock/agentcoreBrowser:AgentcoreBrowser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AgentcoreBrowser resources.
type agentcoreBrowserState struct {
	// ARN of the Browser.
	BrowserArn *string `pulumi:"browserArn"`
	// Unique identifier of the Browser.
	BrowserId *string `pulumi:"browserId"`
	// Description of the browser.
	Description *string `pulumi:"description"`
	// ARN of the IAM role that the browser assumes for execution.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// Name of the browser.
	Name *string `pulumi:"name"`
	// Network configuration for the browser. See `networkConfiguration` below.
	//
	// The following arguments are optional:
	NetworkConfiguration *AgentcoreBrowserNetworkConfiguration `pulumi:"networkConfiguration"`
	// Recording configuration for browser sessions. See `recording` below.
	Recording *AgentcoreBrowserRecording `pulumi:"recording"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  map[string]string         `pulumi:"tagsAll"`
	Timeouts *AgentcoreBrowserTimeouts `pulumi:"timeouts"`
}

type AgentcoreBrowserState struct {
	// ARN of the Browser.
	BrowserArn pulumi.StringPtrInput
	// Unique identifier of the Browser.
	BrowserId pulumi.StringPtrInput
	// Description of the browser.
	Description pulumi.StringPtrInput
	// ARN of the IAM role that the browser assumes for execution.
	ExecutionRoleArn pulumi.StringPtrInput
	// Name of the browser.
	Name pulumi.StringPtrInput
	// Network configuration for the browser. See `networkConfiguration` below.
	//
	// The following arguments are optional:
	NetworkConfiguration AgentcoreBrowserNetworkConfigurationPtrInput
	// Recording configuration for browser sessions. See `recording` below.
	Recording AgentcoreBrowserRecordingPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumi.StringMapInput
	Timeouts AgentcoreBrowserTimeoutsPtrInput
}

func (AgentcoreBrowserState) ElementType() reflect.Type {
	return reflect.TypeOf((*agentcoreBrowserState)(nil)).Elem()
}

type agentcoreBrowserArgs struct {
	// Description of the browser.
	Description *string `pulumi:"description"`
	// ARN of the IAM role that the browser assumes for execution.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// Name of the browser.
	Name *string `pulumi:"name"`
	// Network configuration for the browser. See `networkConfiguration` below.
	//
	// The following arguments are optional:
	NetworkConfiguration *AgentcoreBrowserNetworkConfiguration `pulumi:"networkConfiguration"`
	// Recording configuration for browser sessions. See `recording` below.
	Recording *AgentcoreBrowserRecording `pulumi:"recording"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string         `pulumi:"tags"`
	Timeouts *AgentcoreBrowserTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a AgentcoreBrowser resource.
type AgentcoreBrowserArgs struct {
	// Description of the browser.
	Description pulumi.StringPtrInput
	// ARN of the IAM role that the browser assumes for execution.
	ExecutionRoleArn pulumi.StringPtrInput
	// Name of the browser.
	Name pulumi.StringPtrInput
	// Network configuration for the browser. See `networkConfiguration` below.
	//
	// The following arguments are optional:
	NetworkConfiguration AgentcoreBrowserNetworkConfigurationPtrInput
	// Recording configuration for browser sessions. See `recording` below.
	Recording AgentcoreBrowserRecordingPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts AgentcoreBrowserTimeoutsPtrInput
}

func (AgentcoreBrowserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agentcoreBrowserArgs)(nil)).Elem()
}

type AgentcoreBrowserInput interface {
	pulumi.Input

	ToAgentcoreBrowserOutput() AgentcoreBrowserOutput
	ToAgentcoreBrowserOutputWithContext(ctx context.Context) AgentcoreBrowserOutput
}

func (*AgentcoreBrowser) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentcoreBrowser)(nil)).Elem()
}

func (i *AgentcoreBrowser) ToAgentcoreBrowserOutput() AgentcoreBrowserOutput {
	return i.ToAgentcoreBrowserOutputWithContext(context.Background())
}

func (i *AgentcoreBrowser) ToAgentcoreBrowserOutputWithContext(ctx context.Context) AgentcoreBrowserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentcoreBrowserOutput)
}

// AgentcoreBrowserArrayInput is an input type that accepts AgentcoreBrowserArray and AgentcoreBrowserArrayOutput values.
// You can construct a concrete instance of `AgentcoreBrowserArrayInput` via:
//
//	AgentcoreBrowserArray{ AgentcoreBrowserArgs{...} }
type AgentcoreBrowserArrayInput interface {
	pulumi.Input

	ToAgentcoreBrowserArrayOutput() AgentcoreBrowserArrayOutput
	ToAgentcoreBrowserArrayOutputWithContext(context.Context) AgentcoreBrowserArrayOutput
}

type AgentcoreBrowserArray []AgentcoreBrowserInput

func (AgentcoreBrowserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentcoreBrowser)(nil)).Elem()
}

func (i AgentcoreBrowserArray) ToAgentcoreBrowserArrayOutput() AgentcoreBrowserArrayOutput {
	return i.ToAgentcoreBrowserArrayOutputWithContext(context.Background())
}

func (i AgentcoreBrowserArray) ToAgentcoreBrowserArrayOutputWithContext(ctx context.Context) AgentcoreBrowserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentcoreBrowserArrayOutput)
}

// AgentcoreBrowserMapInput is an input type that accepts AgentcoreBrowserMap and AgentcoreBrowserMapOutput values.
// You can construct a concrete instance of `AgentcoreBrowserMapInput` via:
//
//	AgentcoreBrowserMap{ "key": AgentcoreBrowserArgs{...} }
type AgentcoreBrowserMapInput interface {
	pulumi.Input

	ToAgentcoreBrowserMapOutput() AgentcoreBrowserMapOutput
	ToAgentcoreBrowserMapOutputWithContext(context.Context) AgentcoreBrowserMapOutput
}

type AgentcoreBrowserMap map[string]AgentcoreBrowserInput

func (AgentcoreBrowserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentcoreBrowser)(nil)).Elem()
}

func (i AgentcoreBrowserMap) ToAgentcoreBrowserMapOutput() AgentcoreBrowserMapOutput {
	return i.ToAgentcoreBrowserMapOutputWithContext(context.Background())
}

func (i AgentcoreBrowserMap) ToAgentcoreBrowserMapOutputWithContext(ctx context.Context) AgentcoreBrowserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentcoreBrowserMapOutput)
}

type AgentcoreBrowserOutput struct{ *pulumi.OutputState }

func (AgentcoreBrowserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentcoreBrowser)(nil)).Elem()
}

func (o AgentcoreBrowserOutput) ToAgentcoreBrowserOutput() AgentcoreBrowserOutput {
	return o
}

func (o AgentcoreBrowserOutput) ToAgentcoreBrowserOutputWithContext(ctx context.Context) AgentcoreBrowserOutput {
	return o
}

// ARN of the Browser.
func (o AgentcoreBrowserOutput) BrowserArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentcoreBrowser) pulumi.StringOutput { return v.BrowserArn }).(pulumi.StringOutput)
}

// Unique identifier of the Browser.
func (o AgentcoreBrowserOutput) BrowserId() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentcoreBrowser) pulumi.StringOutput { return v.BrowserId }).(pulumi.StringOutput)
}

// Description of the browser.
func (o AgentcoreBrowserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentcoreBrowser) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ARN of the IAM role that the browser assumes for execution.
func (o AgentcoreBrowserOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentcoreBrowser) pulumi.StringPtrOutput { return v.ExecutionRoleArn }).(pulumi.StringPtrOutput)
}

// Name of the browser.
func (o AgentcoreBrowserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentcoreBrowser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network configuration for the browser. See `networkConfiguration` below.
//
// The following arguments are optional:
func (o AgentcoreBrowserOutput) NetworkConfiguration() AgentcoreBrowserNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *AgentcoreBrowser) AgentcoreBrowserNetworkConfigurationPtrOutput { return v.NetworkConfiguration }).(AgentcoreBrowserNetworkConfigurationPtrOutput)
}

// Recording configuration for browser sessions. See `recording` below.
func (o AgentcoreBrowserOutput) Recording() AgentcoreBrowserRecordingPtrOutput {
	return o.ApplyT(func(v *AgentcoreBrowser) AgentcoreBrowserRecordingPtrOutput { return v.Recording }).(AgentcoreBrowserRecordingPtrOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o AgentcoreBrowserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentcoreBrowser) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AgentcoreBrowserOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AgentcoreBrowser) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o AgentcoreBrowserOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AgentcoreBrowser) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o AgentcoreBrowserOutput) Timeouts() AgentcoreBrowserTimeoutsPtrOutput {
	return o.ApplyT(func(v *AgentcoreBrowser) AgentcoreBrowserTimeoutsPtrOutput { return v.Timeouts }).(AgentcoreBrowserTimeoutsPtrOutput)
}

type AgentcoreBrowserArrayOutput struct{ *pulumi.OutputState }

func (AgentcoreBrowserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentcoreBrowser)(nil)).Elem()
}

func (o AgentcoreBrowserArrayOutput) ToAgentcoreBrowserArrayOutput() AgentcoreBrowserArrayOutput {
	return o
}

func (o AgentcoreBrowserArrayOutput) ToAgentcoreBrowserArrayOutputWithContext(ctx context.Context) AgentcoreBrowserArrayOutput {
	return o
}

func (o AgentcoreBrowserArrayOutput) Index(i pulumi.IntInput) AgentcoreBrowserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AgentcoreBrowser {
		return vs[0].([]*AgentcoreBrowser)[vs[1].(int)]
	}).(AgentcoreBrowserOutput)
}

type AgentcoreBrowserMapOutput struct{ *pulumi.OutputState }

func (AgentcoreBrowserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentcoreBrowser)(nil)).Elem()
}

func (o AgentcoreBrowserMapOutput) ToAgentcoreBrowserMapOutput() AgentcoreBrowserMapOutput {
	return o
}

func (o AgentcoreBrowserMapOutput) ToAgentcoreBrowserMapOutputWithContext(ctx context.Context) AgentcoreBrowserMapOutput {
	return o
}

func (o AgentcoreBrowserMapOutput) MapIndex(k pulumi.StringInput) AgentcoreBrowserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AgentcoreBrowser {
		return vs[0].(map[string]*AgentcoreBrowser)[vs[1].(string)]
	}).(AgentcoreBrowserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgentcoreBrowserInput)(nil)).Elem(), &AgentcoreBrowser{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentcoreBrowserArrayInput)(nil)).Elem(), AgentcoreBrowserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentcoreBrowserMapInput)(nil)).Elem(), AgentcoreBrowserMap{})
	pulumi.RegisterOutputType(AgentcoreBrowserOutput{})
	pulumi.RegisterOutputType(AgentcoreBrowserArrayOutput{})
	pulumi.RegisterOutputType(AgentcoreBrowserMapOutput{})
}
