// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bedrock

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Agents for Amazon Bedrock Data Source.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/bedrock"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bedrock.NewAgentDataSource(ctx, "example", &bedrock.AgentDataSourceArgs{
//				KnowledgeBaseId: pulumi.String("EMDPPAYPZI"),
//				Name:            pulumi.String("example"),
//				DataSourceConfiguration: &bedrock.AgentDataSourceDataSourceConfigurationArgs{
//					Type: pulumi.String("S3"),
//					S3Configuration: &bedrock.AgentDataSourceDataSourceConfigurationS3ConfigurationArgs{
//						BucketArn: pulumi.String("arn:aws:s3:::example-bucket"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Agents for Amazon Bedrock Data Source using the data source ID and the knowledge base ID. For example:
//
// ```sh
// $ pulumi import aws:bedrock/agentDataSource:AgentDataSource example GWCMFMQF6T,EMDPPAYPZI
// ```
type AgentDataSource struct {
	pulumi.CustomResourceState

	// Data deletion policy for a data source. Valid values: `RETAIN`, `DELETE`.
	DataDeletionPolicy pulumi.StringOutput `pulumi:"dataDeletionPolicy"`
	// Details about how the data source is stored. See `dataSourceConfiguration` block for details.
	DataSourceConfiguration AgentDataSourceDataSourceConfigurationPtrOutput `pulumi:"dataSourceConfiguration"`
	// Unique identifier of the data source.
	DataSourceId pulumi.StringOutput `pulumi:"dataSourceId"`
	// Description of the data source.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the knowledge base to which the data source belongs.
	KnowledgeBaseId pulumi.StringOutput `pulumi:"knowledgeBaseId"`
	// Name of the data source.
	//
	// The following arguments are optional:
	Name pulumi.StringOutput `pulumi:"name"`
	// Details about the configuration of the server-side encryption. See `serverSideEncryptionConfiguration` block for details.
	ServerSideEncryptionConfiguration AgentDataSourceServerSideEncryptionConfigurationPtrOutput `pulumi:"serverSideEncryptionConfiguration"`
	Timeouts                          AgentDataSourceTimeoutsPtrOutput                          `pulumi:"timeouts"`
	// Details about the configuration of the server-side encryption. See `vectorIngestionConfiguration` block for details.
	VectorIngestionConfiguration AgentDataSourceVectorIngestionConfigurationPtrOutput `pulumi:"vectorIngestionConfiguration"`
}

// NewAgentDataSource registers a new resource with the given unique name, arguments, and options.
func NewAgentDataSource(ctx *pulumi.Context,
	name string, args *AgentDataSourceArgs, opts ...pulumi.ResourceOption) (*AgentDataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KnowledgeBaseId == nil {
		return nil, errors.New("invalid value for required argument 'KnowledgeBaseId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AgentDataSource
	err := ctx.RegisterResource("aws:bedrock/agentDataSource:AgentDataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgentDataSource gets an existing AgentDataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgentDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgentDataSourceState, opts ...pulumi.ResourceOption) (*AgentDataSource, error) {
	var resource AgentDataSource
	err := ctx.ReadResource("aws:bedrock/agentDataSource:AgentDataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AgentDataSource resources.
type agentDataSourceState struct {
	// Data deletion policy for a data source. Valid values: `RETAIN`, `DELETE`.
	DataDeletionPolicy *string `pulumi:"dataDeletionPolicy"`
	// Details about how the data source is stored. See `dataSourceConfiguration` block for details.
	DataSourceConfiguration *AgentDataSourceDataSourceConfiguration `pulumi:"dataSourceConfiguration"`
	// Unique identifier of the data source.
	DataSourceId *string `pulumi:"dataSourceId"`
	// Description of the data source.
	Description *string `pulumi:"description"`
	// Unique identifier of the knowledge base to which the data source belongs.
	KnowledgeBaseId *string `pulumi:"knowledgeBaseId"`
	// Name of the data source.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Details about the configuration of the server-side encryption. See `serverSideEncryptionConfiguration` block for details.
	ServerSideEncryptionConfiguration *AgentDataSourceServerSideEncryptionConfiguration `pulumi:"serverSideEncryptionConfiguration"`
	Timeouts                          *AgentDataSourceTimeouts                          `pulumi:"timeouts"`
	// Details about the configuration of the server-side encryption. See `vectorIngestionConfiguration` block for details.
	VectorIngestionConfiguration *AgentDataSourceVectorIngestionConfiguration `pulumi:"vectorIngestionConfiguration"`
}

type AgentDataSourceState struct {
	// Data deletion policy for a data source. Valid values: `RETAIN`, `DELETE`.
	DataDeletionPolicy pulumi.StringPtrInput
	// Details about how the data source is stored. See `dataSourceConfiguration` block for details.
	DataSourceConfiguration AgentDataSourceDataSourceConfigurationPtrInput
	// Unique identifier of the data source.
	DataSourceId pulumi.StringPtrInput
	// Description of the data source.
	Description pulumi.StringPtrInput
	// Unique identifier of the knowledge base to which the data source belongs.
	KnowledgeBaseId pulumi.StringPtrInput
	// Name of the data source.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Details about the configuration of the server-side encryption. See `serverSideEncryptionConfiguration` block for details.
	ServerSideEncryptionConfiguration AgentDataSourceServerSideEncryptionConfigurationPtrInput
	Timeouts                          AgentDataSourceTimeoutsPtrInput
	// Details about the configuration of the server-side encryption. See `vectorIngestionConfiguration` block for details.
	VectorIngestionConfiguration AgentDataSourceVectorIngestionConfigurationPtrInput
}

func (AgentDataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*agentDataSourceState)(nil)).Elem()
}

type agentDataSourceArgs struct {
	// Data deletion policy for a data source. Valid values: `RETAIN`, `DELETE`.
	DataDeletionPolicy *string `pulumi:"dataDeletionPolicy"`
	// Details about how the data source is stored. See `dataSourceConfiguration` block for details.
	DataSourceConfiguration *AgentDataSourceDataSourceConfiguration `pulumi:"dataSourceConfiguration"`
	// Description of the data source.
	Description *string `pulumi:"description"`
	// Unique identifier of the knowledge base to which the data source belongs.
	KnowledgeBaseId string `pulumi:"knowledgeBaseId"`
	// Name of the data source.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Details about the configuration of the server-side encryption. See `serverSideEncryptionConfiguration` block for details.
	ServerSideEncryptionConfiguration *AgentDataSourceServerSideEncryptionConfiguration `pulumi:"serverSideEncryptionConfiguration"`
	Timeouts                          *AgentDataSourceTimeouts                          `pulumi:"timeouts"`
	// Details about the configuration of the server-side encryption. See `vectorIngestionConfiguration` block for details.
	VectorIngestionConfiguration *AgentDataSourceVectorIngestionConfiguration `pulumi:"vectorIngestionConfiguration"`
}

// The set of arguments for constructing a AgentDataSource resource.
type AgentDataSourceArgs struct {
	// Data deletion policy for a data source. Valid values: `RETAIN`, `DELETE`.
	DataDeletionPolicy pulumi.StringPtrInput
	// Details about how the data source is stored. See `dataSourceConfiguration` block for details.
	DataSourceConfiguration AgentDataSourceDataSourceConfigurationPtrInput
	// Description of the data source.
	Description pulumi.StringPtrInput
	// Unique identifier of the knowledge base to which the data source belongs.
	KnowledgeBaseId pulumi.StringInput
	// Name of the data source.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Details about the configuration of the server-side encryption. See `serverSideEncryptionConfiguration` block for details.
	ServerSideEncryptionConfiguration AgentDataSourceServerSideEncryptionConfigurationPtrInput
	Timeouts                          AgentDataSourceTimeoutsPtrInput
	// Details about the configuration of the server-side encryption. See `vectorIngestionConfiguration` block for details.
	VectorIngestionConfiguration AgentDataSourceVectorIngestionConfigurationPtrInput
}

func (AgentDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agentDataSourceArgs)(nil)).Elem()
}

type AgentDataSourceInput interface {
	pulumi.Input

	ToAgentDataSourceOutput() AgentDataSourceOutput
	ToAgentDataSourceOutputWithContext(ctx context.Context) AgentDataSourceOutput
}

func (*AgentDataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentDataSource)(nil)).Elem()
}

func (i *AgentDataSource) ToAgentDataSourceOutput() AgentDataSourceOutput {
	return i.ToAgentDataSourceOutputWithContext(context.Background())
}

func (i *AgentDataSource) ToAgentDataSourceOutputWithContext(ctx context.Context) AgentDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentDataSourceOutput)
}

// AgentDataSourceArrayInput is an input type that accepts AgentDataSourceArray and AgentDataSourceArrayOutput values.
// You can construct a concrete instance of `AgentDataSourceArrayInput` via:
//
//	AgentDataSourceArray{ AgentDataSourceArgs{...} }
type AgentDataSourceArrayInput interface {
	pulumi.Input

	ToAgentDataSourceArrayOutput() AgentDataSourceArrayOutput
	ToAgentDataSourceArrayOutputWithContext(context.Context) AgentDataSourceArrayOutput
}

type AgentDataSourceArray []AgentDataSourceInput

func (AgentDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentDataSource)(nil)).Elem()
}

func (i AgentDataSourceArray) ToAgentDataSourceArrayOutput() AgentDataSourceArrayOutput {
	return i.ToAgentDataSourceArrayOutputWithContext(context.Background())
}

func (i AgentDataSourceArray) ToAgentDataSourceArrayOutputWithContext(ctx context.Context) AgentDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentDataSourceArrayOutput)
}

// AgentDataSourceMapInput is an input type that accepts AgentDataSourceMap and AgentDataSourceMapOutput values.
// You can construct a concrete instance of `AgentDataSourceMapInput` via:
//
//	AgentDataSourceMap{ "key": AgentDataSourceArgs{...} }
type AgentDataSourceMapInput interface {
	pulumi.Input

	ToAgentDataSourceMapOutput() AgentDataSourceMapOutput
	ToAgentDataSourceMapOutputWithContext(context.Context) AgentDataSourceMapOutput
}

type AgentDataSourceMap map[string]AgentDataSourceInput

func (AgentDataSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentDataSource)(nil)).Elem()
}

func (i AgentDataSourceMap) ToAgentDataSourceMapOutput() AgentDataSourceMapOutput {
	return i.ToAgentDataSourceMapOutputWithContext(context.Background())
}

func (i AgentDataSourceMap) ToAgentDataSourceMapOutputWithContext(ctx context.Context) AgentDataSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentDataSourceMapOutput)
}

type AgentDataSourceOutput struct{ *pulumi.OutputState }

func (AgentDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentDataSource)(nil)).Elem()
}

func (o AgentDataSourceOutput) ToAgentDataSourceOutput() AgentDataSourceOutput {
	return o
}

func (o AgentDataSourceOutput) ToAgentDataSourceOutputWithContext(ctx context.Context) AgentDataSourceOutput {
	return o
}

// Data deletion policy for a data source. Valid values: `RETAIN`, `DELETE`.
func (o AgentDataSourceOutput) DataDeletionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentDataSource) pulumi.StringOutput { return v.DataDeletionPolicy }).(pulumi.StringOutput)
}

// Details about how the data source is stored. See `dataSourceConfiguration` block for details.
func (o AgentDataSourceOutput) DataSourceConfiguration() AgentDataSourceDataSourceConfigurationPtrOutput {
	return o.ApplyT(func(v *AgentDataSource) AgentDataSourceDataSourceConfigurationPtrOutput {
		return v.DataSourceConfiguration
	}).(AgentDataSourceDataSourceConfigurationPtrOutput)
}

// Unique identifier of the data source.
func (o AgentDataSourceOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentDataSource) pulumi.StringOutput { return v.DataSourceId }).(pulumi.StringOutput)
}

// Description of the data source.
func (o AgentDataSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentDataSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the knowledge base to which the data source belongs.
func (o AgentDataSourceOutput) KnowledgeBaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentDataSource) pulumi.StringOutput { return v.KnowledgeBaseId }).(pulumi.StringOutput)
}

// Name of the data source.
//
// The following arguments are optional:
func (o AgentDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentDataSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Details about the configuration of the server-side encryption. See `serverSideEncryptionConfiguration` block for details.
func (o AgentDataSourceOutput) ServerSideEncryptionConfiguration() AgentDataSourceServerSideEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *AgentDataSource) AgentDataSourceServerSideEncryptionConfigurationPtrOutput {
		return v.ServerSideEncryptionConfiguration
	}).(AgentDataSourceServerSideEncryptionConfigurationPtrOutput)
}

func (o AgentDataSourceOutput) Timeouts() AgentDataSourceTimeoutsPtrOutput {
	return o.ApplyT(func(v *AgentDataSource) AgentDataSourceTimeoutsPtrOutput { return v.Timeouts }).(AgentDataSourceTimeoutsPtrOutput)
}

// Details about the configuration of the server-side encryption. See `vectorIngestionConfiguration` block for details.
func (o AgentDataSourceOutput) VectorIngestionConfiguration() AgentDataSourceVectorIngestionConfigurationPtrOutput {
	return o.ApplyT(func(v *AgentDataSource) AgentDataSourceVectorIngestionConfigurationPtrOutput {
		return v.VectorIngestionConfiguration
	}).(AgentDataSourceVectorIngestionConfigurationPtrOutput)
}

type AgentDataSourceArrayOutput struct{ *pulumi.OutputState }

func (AgentDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentDataSource)(nil)).Elem()
}

func (o AgentDataSourceArrayOutput) ToAgentDataSourceArrayOutput() AgentDataSourceArrayOutput {
	return o
}

func (o AgentDataSourceArrayOutput) ToAgentDataSourceArrayOutputWithContext(ctx context.Context) AgentDataSourceArrayOutput {
	return o
}

func (o AgentDataSourceArrayOutput) Index(i pulumi.IntInput) AgentDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AgentDataSource {
		return vs[0].([]*AgentDataSource)[vs[1].(int)]
	}).(AgentDataSourceOutput)
}

type AgentDataSourceMapOutput struct{ *pulumi.OutputState }

func (AgentDataSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentDataSource)(nil)).Elem()
}

func (o AgentDataSourceMapOutput) ToAgentDataSourceMapOutput() AgentDataSourceMapOutput {
	return o
}

func (o AgentDataSourceMapOutput) ToAgentDataSourceMapOutputWithContext(ctx context.Context) AgentDataSourceMapOutput {
	return o
}

func (o AgentDataSourceMapOutput) MapIndex(k pulumi.StringInput) AgentDataSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AgentDataSource {
		return vs[0].(map[string]*AgentDataSource)[vs[1].(string)]
	}).(AgentDataSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgentDataSourceInput)(nil)).Elem(), &AgentDataSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentDataSourceArrayInput)(nil)).Elem(), AgentDataSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentDataSourceMapInput)(nil)).Elem(), AgentDataSourceMap{})
	pulumi.RegisterOutputType(AgentDataSourceOutput{})
	pulumi.RegisterOutputType(AgentDataSourceArrayOutput{})
	pulumi.RegisterOutputType(AgentDataSourceMapOutput{})
}
