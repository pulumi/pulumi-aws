// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bedrock

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Agents for Amazon Bedrock Agent.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/bedrock"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// current, err := aws.GetCallerIdentity(ctx, nil, nil);
// if err != nil {
// return err
// }
// currentGetRegion, err := aws.GetRegion(ctx, nil, nil);
// if err != nil {
// return err
// }
// exampleAgentTrust, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
// Statements: []iam.GetPolicyDocumentStatement{
// {
// Actions: []string{
// "sts:AssumeRole",
// },
// Principals: []iam.GetPolicyDocumentStatementPrincipal{
// {
// Identifiers: []string{
// "bedrock.amazonaws.com",
// },
// Type: "Service",
// },
// },
// Conditions: []iam.GetPolicyDocumentStatementCondition{
// {
// Test: "StringEquals",
// Values: interface{}{
// current.AccountId,
// },
// Variable: "aws:SourceAccount",
// },
// {
// Test: "ArnLike",
// Values: []string{
// fmt.Sprintf("arn:aws:bedrock:%v:%v:agent/*", currentGetRegion.Name, current.AccountId),
// },
// Variable: "AWS:SourceArn",
// },
// },
// },
// },
// }, nil);
// if err != nil {
// return err
// }
// example, err := iam.NewRole(ctx, "example", &iam.RoleArgs{
// AssumeRolePolicy: pulumi.String(exampleAgentTrust.Json),
// NamePrefix: pulumi.String("AmazonBedrockExecutionRoleForAgents_"),
// })
// if err != nil {
// return err
// }
// exampleAgentPermissions, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
// Statements: []iam.GetPolicyDocumentStatement{
// {
// Actions: []string{
// "bedrock:InvokeModel",
// },
// Resources: []string{
// fmt.Sprintf("arn:aws:bedrock:%v::foundation-model/anthropic.claude-v2", currentGetRegion.Name),
// },
// },
// },
// }, nil);
// if err != nil {
// return err
// }
// _, err = iam.NewRolePolicy(ctx, "example", &iam.RolePolicyArgs{
// Policy: pulumi.String(exampleAgentPermissions.Json),
// Role: example.ID(),
// })
// if err != nil {
// return err
// }
// _, err = bedrock.NewAgentAgent(ctx, "test", &bedrock.AgentAgentArgs{
// AgentName: pulumi.String("my-agent-name"),
// AgentResourceRoleArn: example.Arn,
// IdleSessionTtlInSeconds: pulumi.Int(500),
// FoundationModel: pulumi.String("anthropic.claude-v2"),
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Using `pulumi import`, import Agents for Amazon Bedrock Agent using the `id`. For example:
//
// ```sh
// $ pulumi import aws:bedrock/agentAgent:AgentAgent example agent-abcd1234
// ```
type AgentAgent struct {
	pulumi.CustomResourceState

	// ARN of the Agent.
	AgentArn pulumi.StringOutput `pulumi:"agentArn"`
	// ID of the Agent.
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// Name for the agent.
	AgentName pulumi.StringOutput `pulumi:"agentName"`
	// ARN of the Role for the agent.
	AgentResourceRoleArn pulumi.StringOutput `pulumi:"agentResourceRoleArn"`
	// Version of the Agent.
	AgentVersion pulumi.StringOutput `pulumi:"agentVersion"`
	// ARN of customer manager key to use for encryption.
	CustomerEncryptionKeyArn pulumi.StringPtrOutput `pulumi:"customerEncryptionKeyArn"`
	// Description of the agent.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Foundation model for the agent to use.
	//
	// The following arguments are optional:
	FoundationModel pulumi.StringOutput `pulumi:"foundationModel"`
	// TTL in seconds for the agent to idle.
	IdleSessionTtlInSeconds pulumi.IntOutput `pulumi:"idleSessionTtlInSeconds"`
	// Instructions to tell agent what it should do.
	Instruction pulumi.StringOutput `pulumi:"instruction"`
	// Whether or not to prepare the agent after creation or modification. Defaults to `true`.
	PrepareAgent pulumi.BoolOutput `pulumi:"prepareAgent"`
	// Prompt override configuration.
	PromptOverrideConfigurations AgentAgentPromptOverrideConfigurationArrayOutput `pulumi:"promptOverrideConfigurations"`
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput      `pulumi:"tagsAll"`
	Timeouts AgentAgentTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewAgentAgent registers a new resource with the given unique name, arguments, and options.
func NewAgentAgent(ctx *pulumi.Context,
	name string, args *AgentAgentArgs, opts ...pulumi.ResourceOption) (*AgentAgent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentName == nil {
		return nil, errors.New("invalid value for required argument 'AgentName'")
	}
	if args.AgentResourceRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'AgentResourceRoleArn'")
	}
	if args.FoundationModel == nil {
		return nil, errors.New("invalid value for required argument 'FoundationModel'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AgentAgent
	err := ctx.RegisterResource("aws:bedrock/agentAgent:AgentAgent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgentAgent gets an existing AgentAgent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgentAgent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgentAgentState, opts ...pulumi.ResourceOption) (*AgentAgent, error) {
	var resource AgentAgent
	err := ctx.ReadResource("aws:bedrock/agentAgent:AgentAgent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AgentAgent resources.
type agentAgentState struct {
	// ARN of the Agent.
	AgentArn *string `pulumi:"agentArn"`
	// ID of the Agent.
	AgentId *string `pulumi:"agentId"`
	// Name for the agent.
	AgentName *string `pulumi:"agentName"`
	// ARN of the Role for the agent.
	AgentResourceRoleArn *string `pulumi:"agentResourceRoleArn"`
	// Version of the Agent.
	AgentVersion *string `pulumi:"agentVersion"`
	// ARN of customer manager key to use for encryption.
	CustomerEncryptionKeyArn *string `pulumi:"customerEncryptionKeyArn"`
	// Description of the agent.
	Description *string `pulumi:"description"`
	// Foundation model for the agent to use.
	//
	// The following arguments are optional:
	FoundationModel *string `pulumi:"foundationModel"`
	// TTL in seconds for the agent to idle.
	IdleSessionTtlInSeconds *int `pulumi:"idleSessionTtlInSeconds"`
	// Instructions to tell agent what it should do.
	Instruction *string `pulumi:"instruction"`
	// Whether or not to prepare the agent after creation or modification. Defaults to `true`.
	PrepareAgent *bool `pulumi:"prepareAgent"`
	// Prompt override configuration.
	PromptOverrideConfigurations []AgentAgentPromptOverrideConfiguration `pulumi:"promptOverrideConfigurations"`
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string   `pulumi:"tagsAll"`
	Timeouts *AgentAgentTimeouts `pulumi:"timeouts"`
}

type AgentAgentState struct {
	// ARN of the Agent.
	AgentArn pulumi.StringPtrInput
	// ID of the Agent.
	AgentId pulumi.StringPtrInput
	// Name for the agent.
	AgentName pulumi.StringPtrInput
	// ARN of the Role for the agent.
	AgentResourceRoleArn pulumi.StringPtrInput
	// Version of the Agent.
	AgentVersion pulumi.StringPtrInput
	// ARN of customer manager key to use for encryption.
	CustomerEncryptionKeyArn pulumi.StringPtrInput
	// Description of the agent.
	Description pulumi.StringPtrInput
	// Foundation model for the agent to use.
	//
	// The following arguments are optional:
	FoundationModel pulumi.StringPtrInput
	// TTL in seconds for the agent to idle.
	IdleSessionTtlInSeconds pulumi.IntPtrInput
	// Instructions to tell agent what it should do.
	Instruction pulumi.StringPtrInput
	// Whether or not to prepare the agent after creation or modification. Defaults to `true`.
	PrepareAgent pulumi.BoolPtrInput
	// Prompt override configuration.
	PromptOverrideConfigurations AgentAgentPromptOverrideConfigurationArrayInput
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts AgentAgentTimeoutsPtrInput
}

func (AgentAgentState) ElementType() reflect.Type {
	return reflect.TypeOf((*agentAgentState)(nil)).Elem()
}

type agentAgentArgs struct {
	// Name for the agent.
	AgentName string `pulumi:"agentName"`
	// ARN of the Role for the agent.
	AgentResourceRoleArn string `pulumi:"agentResourceRoleArn"`
	// ARN of customer manager key to use for encryption.
	CustomerEncryptionKeyArn *string `pulumi:"customerEncryptionKeyArn"`
	// Description of the agent.
	Description *string `pulumi:"description"`
	// Foundation model for the agent to use.
	//
	// The following arguments are optional:
	FoundationModel string `pulumi:"foundationModel"`
	// TTL in seconds for the agent to idle.
	IdleSessionTtlInSeconds *int `pulumi:"idleSessionTtlInSeconds"`
	// Instructions to tell agent what it should do.
	Instruction *string `pulumi:"instruction"`
	// Whether or not to prepare the agent after creation or modification. Defaults to `true`.
	PrepareAgent *bool `pulumi:"prepareAgent"`
	// Prompt override configuration.
	PromptOverrideConfigurations []AgentAgentPromptOverrideConfiguration `pulumi:"promptOverrideConfigurations"`
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string   `pulumi:"tags"`
	Timeouts *AgentAgentTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a AgentAgent resource.
type AgentAgentArgs struct {
	// Name for the agent.
	AgentName pulumi.StringInput
	// ARN of the Role for the agent.
	AgentResourceRoleArn pulumi.StringInput
	// ARN of customer manager key to use for encryption.
	CustomerEncryptionKeyArn pulumi.StringPtrInput
	// Description of the agent.
	Description pulumi.StringPtrInput
	// Foundation model for the agent to use.
	//
	// The following arguments are optional:
	FoundationModel pulumi.StringInput
	// TTL in seconds for the agent to idle.
	IdleSessionTtlInSeconds pulumi.IntPtrInput
	// Instructions to tell agent what it should do.
	Instruction pulumi.StringPtrInput
	// Whether or not to prepare the agent after creation or modification. Defaults to `true`.
	PrepareAgent pulumi.BoolPtrInput
	// Prompt override configuration.
	PromptOverrideConfigurations AgentAgentPromptOverrideConfigurationArrayInput
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts AgentAgentTimeoutsPtrInput
}

func (AgentAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agentAgentArgs)(nil)).Elem()
}

type AgentAgentInput interface {
	pulumi.Input

	ToAgentAgentOutput() AgentAgentOutput
	ToAgentAgentOutputWithContext(ctx context.Context) AgentAgentOutput
}

func (*AgentAgent) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentAgent)(nil)).Elem()
}

func (i *AgentAgent) ToAgentAgentOutput() AgentAgentOutput {
	return i.ToAgentAgentOutputWithContext(context.Background())
}

func (i *AgentAgent) ToAgentAgentOutputWithContext(ctx context.Context) AgentAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentAgentOutput)
}

// AgentAgentArrayInput is an input type that accepts AgentAgentArray and AgentAgentArrayOutput values.
// You can construct a concrete instance of `AgentAgentArrayInput` via:
//
//	AgentAgentArray{ AgentAgentArgs{...} }
type AgentAgentArrayInput interface {
	pulumi.Input

	ToAgentAgentArrayOutput() AgentAgentArrayOutput
	ToAgentAgentArrayOutputWithContext(context.Context) AgentAgentArrayOutput
}

type AgentAgentArray []AgentAgentInput

func (AgentAgentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentAgent)(nil)).Elem()
}

func (i AgentAgentArray) ToAgentAgentArrayOutput() AgentAgentArrayOutput {
	return i.ToAgentAgentArrayOutputWithContext(context.Background())
}

func (i AgentAgentArray) ToAgentAgentArrayOutputWithContext(ctx context.Context) AgentAgentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentAgentArrayOutput)
}

// AgentAgentMapInput is an input type that accepts AgentAgentMap and AgentAgentMapOutput values.
// You can construct a concrete instance of `AgentAgentMapInput` via:
//
//	AgentAgentMap{ "key": AgentAgentArgs{...} }
type AgentAgentMapInput interface {
	pulumi.Input

	ToAgentAgentMapOutput() AgentAgentMapOutput
	ToAgentAgentMapOutputWithContext(context.Context) AgentAgentMapOutput
}

type AgentAgentMap map[string]AgentAgentInput

func (AgentAgentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentAgent)(nil)).Elem()
}

func (i AgentAgentMap) ToAgentAgentMapOutput() AgentAgentMapOutput {
	return i.ToAgentAgentMapOutputWithContext(context.Background())
}

func (i AgentAgentMap) ToAgentAgentMapOutputWithContext(ctx context.Context) AgentAgentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentAgentMapOutput)
}

type AgentAgentOutput struct{ *pulumi.OutputState }

func (AgentAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentAgent)(nil)).Elem()
}

func (o AgentAgentOutput) ToAgentAgentOutput() AgentAgentOutput {
	return o
}

func (o AgentAgentOutput) ToAgentAgentOutputWithContext(ctx context.Context) AgentAgentOutput {
	return o
}

// ARN of the Agent.
func (o AgentAgentOutput) AgentArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.StringOutput { return v.AgentArn }).(pulumi.StringOutput)
}

// ID of the Agent.
func (o AgentAgentOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// Name for the agent.
func (o AgentAgentOutput) AgentName() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.StringOutput { return v.AgentName }).(pulumi.StringOutput)
}

// ARN of the Role for the agent.
func (o AgentAgentOutput) AgentResourceRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.StringOutput { return v.AgentResourceRoleArn }).(pulumi.StringOutput)
}

// Version of the Agent.
func (o AgentAgentOutput) AgentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.StringOutput { return v.AgentVersion }).(pulumi.StringOutput)
}

// ARN of customer manager key to use for encryption.
func (o AgentAgentOutput) CustomerEncryptionKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.StringPtrOutput { return v.CustomerEncryptionKeyArn }).(pulumi.StringPtrOutput)
}

// Description of the agent.
func (o AgentAgentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Foundation model for the agent to use.
//
// The following arguments are optional:
func (o AgentAgentOutput) FoundationModel() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.StringOutput { return v.FoundationModel }).(pulumi.StringOutput)
}

// TTL in seconds for the agent to idle.
func (o AgentAgentOutput) IdleSessionTtlInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.IntOutput { return v.IdleSessionTtlInSeconds }).(pulumi.IntOutput)
}

// Instructions to tell agent what it should do.
func (o AgentAgentOutput) Instruction() pulumi.StringOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.StringOutput { return v.Instruction }).(pulumi.StringOutput)
}

// Whether or not to prepare the agent after creation or modification. Defaults to `true`.
func (o AgentAgentOutput) PrepareAgent() pulumi.BoolOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.BoolOutput { return v.PrepareAgent }).(pulumi.BoolOutput)
}

// Prompt override configuration.
func (o AgentAgentOutput) PromptOverrideConfigurations() AgentAgentPromptOverrideConfigurationArrayOutput {
	return o.ApplyT(func(v *AgentAgent) AgentAgentPromptOverrideConfigurationArrayOutput {
		return v.PromptOverrideConfigurations
	}).(AgentAgentPromptOverrideConfigurationArrayOutput)
}

// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AgentAgentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o AgentAgentOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AgentAgent) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o AgentAgentOutput) Timeouts() AgentAgentTimeoutsPtrOutput {
	return o.ApplyT(func(v *AgentAgent) AgentAgentTimeoutsPtrOutput { return v.Timeouts }).(AgentAgentTimeoutsPtrOutput)
}

type AgentAgentArrayOutput struct{ *pulumi.OutputState }

func (AgentAgentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AgentAgent)(nil)).Elem()
}

func (o AgentAgentArrayOutput) ToAgentAgentArrayOutput() AgentAgentArrayOutput {
	return o
}

func (o AgentAgentArrayOutput) ToAgentAgentArrayOutputWithContext(ctx context.Context) AgentAgentArrayOutput {
	return o
}

func (o AgentAgentArrayOutput) Index(i pulumi.IntInput) AgentAgentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AgentAgent {
		return vs[0].([]*AgentAgent)[vs[1].(int)]
	}).(AgentAgentOutput)
}

type AgentAgentMapOutput struct{ *pulumi.OutputState }

func (AgentAgentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AgentAgent)(nil)).Elem()
}

func (o AgentAgentMapOutput) ToAgentAgentMapOutput() AgentAgentMapOutput {
	return o
}

func (o AgentAgentMapOutput) ToAgentAgentMapOutputWithContext(ctx context.Context) AgentAgentMapOutput {
	return o
}

func (o AgentAgentMapOutput) MapIndex(k pulumi.StringInput) AgentAgentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AgentAgent {
		return vs[0].(map[string]*AgentAgent)[vs[1].(string)]
	}).(AgentAgentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgentAgentInput)(nil)).Elem(), &AgentAgent{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentAgentArrayInput)(nil)).Elem(), AgentAgentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentAgentMapInput)(nil)).Elem(), AgentAgentMap{})
	pulumi.RegisterOutputType(AgentAgentOutput{})
	pulumi.RegisterOutputType(AgentAgentArrayOutput{})
	pulumi.RegisterOutputType(AgentAgentMapOutput{})
}
