// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an API Gateway Gateway Response for a REST API Gateway.
type Response struct {
	s *pulumi.ResourceState
}

// NewResponse registers a new resource with the given unique name, arguments, and options.
func NewResponse(ctx *pulumi.Context,
	name string, args *ResponseArgs, opts ...pulumi.ResourceOpt) (*Response, error) {
	if args == nil || args.ResponseType == nil {
		return nil, errors.New("missing required argument 'ResponseType'")
	}
	if args == nil || args.RestApiId == nil {
		return nil, errors.New("missing required argument 'RestApiId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["responseParameters"] = nil
		inputs["responseTemplates"] = nil
		inputs["responseType"] = nil
		inputs["restApiId"] = nil
		inputs["statusCode"] = nil
	} else {
		inputs["responseParameters"] = args.ResponseParameters
		inputs["responseTemplates"] = args.ResponseTemplates
		inputs["responseType"] = args.ResponseType
		inputs["restApiId"] = args.RestApiId
		inputs["statusCode"] = args.StatusCode
	}
	s, err := ctx.RegisterResource("aws:apigateway/response:Response", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Response{s: s}, nil
}

// GetResponse gets an existing Response resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResponse(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ResponseState, opts ...pulumi.ResourceOpt) (*Response, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["responseParameters"] = state.ResponseParameters
		inputs["responseTemplates"] = state.ResponseTemplates
		inputs["responseType"] = state.ResponseType
		inputs["restApiId"] = state.RestApiId
		inputs["statusCode"] = state.StatusCode
	}
	s, err := ctx.ReadResource("aws:apigateway/response:Response", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Response{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Response) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Response) ID() *pulumi.IDOutput {
	return r.s.ID
}

// A map specifying the templates used to transform the response body.
func (r *Response) ResponseParameters() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["responseParameters"])
}

// A map specifying the parameters (paths, query strings and headers) of the Gateway Response.
func (r *Response) ResponseTemplates() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["responseTemplates"])
}

// The response type of the associated GatewayResponse.
func (r *Response) ResponseType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["responseType"])
}

// The string identifier of the associated REST API.
func (r *Response) RestApiId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["restApiId"])
}

// The HTTP status code of the Gateway Response.
func (r *Response) StatusCode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["statusCode"])
}

// Input properties used for looking up and filtering Response resources.
type ResponseState struct {
	// A map specifying the templates used to transform the response body.
	ResponseParameters interface{}
	// A map specifying the parameters (paths, query strings and headers) of the Gateway Response.
	ResponseTemplates interface{}
	// The response type of the associated GatewayResponse.
	ResponseType interface{}
	// The string identifier of the associated REST API.
	RestApiId interface{}
	// The HTTP status code of the Gateway Response.
	StatusCode interface{}
}

// The set of arguments for constructing a Response resource.
type ResponseArgs struct {
	// A map specifying the templates used to transform the response body.
	ResponseParameters interface{}
	// A map specifying the parameters (paths, query strings and headers) of the Gateway Response.
	ResponseTemplates interface{}
	// The response type of the associated GatewayResponse.
	ResponseType interface{}
	// The string identifier of the associated REST API.
	RestApiId interface{}
	// The HTTP status code of the Gateway Response.
	StatusCode interface{}
}
