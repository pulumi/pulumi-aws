// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BasePathMapping struct {
	pulumi.CustomResourceState

	BasePath   pulumi.StringPtrOutput `pulumi:"basePath"`
	DomainName pulumi.StringOutput    `pulumi:"domainName"`
	RestApi    pulumi.StringOutput    `pulumi:"restApi"`
	StageName  pulumi.StringPtrOutput `pulumi:"stageName"`
}

// NewBasePathMapping registers a new resource with the given unique name, arguments, and options.
func NewBasePathMapping(ctx *pulumi.Context,
	name string, args *BasePathMappingArgs, opts ...pulumi.ResourceOption) (*BasePathMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	var resource BasePathMapping
	err := ctx.RegisterResource("aws:apigateway/basePathMapping:BasePathMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBasePathMapping gets an existing BasePathMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBasePathMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BasePathMappingState, opts ...pulumi.ResourceOption) (*BasePathMapping, error) {
	var resource BasePathMapping
	err := ctx.ReadResource("aws:apigateway/basePathMapping:BasePathMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BasePathMapping resources.
type basePathMappingState struct {
	BasePath   *string     `pulumi:"basePath"`
	DomainName *string     `pulumi:"domainName"`
	RestApi    interface{} `pulumi:"restApi"`
	StageName  *string     `pulumi:"stageName"`
}

type BasePathMappingState struct {
	BasePath   pulumi.StringPtrInput
	DomainName pulumi.StringPtrInput
	RestApi    pulumi.Input
	StageName  pulumi.StringPtrInput
}

func (BasePathMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*basePathMappingState)(nil)).Elem()
}

type basePathMappingArgs struct {
	BasePath   *string     `pulumi:"basePath"`
	DomainName string      `pulumi:"domainName"`
	RestApi    interface{} `pulumi:"restApi"`
	StageName  *string     `pulumi:"stageName"`
}

// The set of arguments for constructing a BasePathMapping resource.
type BasePathMappingArgs struct {
	BasePath   pulumi.StringPtrInput
	DomainName pulumi.StringInput
	RestApi    pulumi.Input
	StageName  pulumi.StringPtrInput
}

func (BasePathMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*basePathMappingArgs)(nil)).Elem()
}

type BasePathMappingInput interface {
	pulumi.Input

	ToBasePathMappingOutput() BasePathMappingOutput
	ToBasePathMappingOutputWithContext(ctx context.Context) BasePathMappingOutput
}

func (*BasePathMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**BasePathMapping)(nil)).Elem()
}

func (i *BasePathMapping) ToBasePathMappingOutput() BasePathMappingOutput {
	return i.ToBasePathMappingOutputWithContext(context.Background())
}

func (i *BasePathMapping) ToBasePathMappingOutputWithContext(ctx context.Context) BasePathMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasePathMappingOutput)
}

// BasePathMappingArrayInput is an input type that accepts BasePathMappingArray and BasePathMappingArrayOutput values.
// You can construct a concrete instance of `BasePathMappingArrayInput` via:
//
//	BasePathMappingArray{ BasePathMappingArgs{...} }
type BasePathMappingArrayInput interface {
	pulumi.Input

	ToBasePathMappingArrayOutput() BasePathMappingArrayOutput
	ToBasePathMappingArrayOutputWithContext(context.Context) BasePathMappingArrayOutput
}

type BasePathMappingArray []BasePathMappingInput

func (BasePathMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BasePathMapping)(nil)).Elem()
}

func (i BasePathMappingArray) ToBasePathMappingArrayOutput() BasePathMappingArrayOutput {
	return i.ToBasePathMappingArrayOutputWithContext(context.Background())
}

func (i BasePathMappingArray) ToBasePathMappingArrayOutputWithContext(ctx context.Context) BasePathMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasePathMappingArrayOutput)
}

// BasePathMappingMapInput is an input type that accepts BasePathMappingMap and BasePathMappingMapOutput values.
// You can construct a concrete instance of `BasePathMappingMapInput` via:
//
//	BasePathMappingMap{ "key": BasePathMappingArgs{...} }
type BasePathMappingMapInput interface {
	pulumi.Input

	ToBasePathMappingMapOutput() BasePathMappingMapOutput
	ToBasePathMappingMapOutputWithContext(context.Context) BasePathMappingMapOutput
}

type BasePathMappingMap map[string]BasePathMappingInput

func (BasePathMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BasePathMapping)(nil)).Elem()
}

func (i BasePathMappingMap) ToBasePathMappingMapOutput() BasePathMappingMapOutput {
	return i.ToBasePathMappingMapOutputWithContext(context.Background())
}

func (i BasePathMappingMap) ToBasePathMappingMapOutputWithContext(ctx context.Context) BasePathMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasePathMappingMapOutput)
}

type BasePathMappingOutput struct{ *pulumi.OutputState }

func (BasePathMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasePathMapping)(nil)).Elem()
}

func (o BasePathMappingOutput) ToBasePathMappingOutput() BasePathMappingOutput {
	return o
}

func (o BasePathMappingOutput) ToBasePathMappingOutputWithContext(ctx context.Context) BasePathMappingOutput {
	return o
}

func (o BasePathMappingOutput) BasePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BasePathMapping) pulumi.StringPtrOutput { return v.BasePath }).(pulumi.StringPtrOutput)
}

func (o BasePathMappingOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *BasePathMapping) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

func (o BasePathMappingOutput) RestApi() pulumi.StringOutput {
	return o.ApplyT(func(v *BasePathMapping) pulumi.StringOutput { return v.RestApi }).(pulumi.StringOutput)
}

func (o BasePathMappingOutput) StageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BasePathMapping) pulumi.StringPtrOutput { return v.StageName }).(pulumi.StringPtrOutput)
}

type BasePathMappingArrayOutput struct{ *pulumi.OutputState }

func (BasePathMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BasePathMapping)(nil)).Elem()
}

func (o BasePathMappingArrayOutput) ToBasePathMappingArrayOutput() BasePathMappingArrayOutput {
	return o
}

func (o BasePathMappingArrayOutput) ToBasePathMappingArrayOutputWithContext(ctx context.Context) BasePathMappingArrayOutput {
	return o
}

func (o BasePathMappingArrayOutput) Index(i pulumi.IntInput) BasePathMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BasePathMapping {
		return vs[0].([]*BasePathMapping)[vs[1].(int)]
	}).(BasePathMappingOutput)
}

type BasePathMappingMapOutput struct{ *pulumi.OutputState }

func (BasePathMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BasePathMapping)(nil)).Elem()
}

func (o BasePathMappingMapOutput) ToBasePathMappingMapOutput() BasePathMappingMapOutput {
	return o
}

func (o BasePathMappingMapOutput) ToBasePathMappingMapOutputWithContext(ctx context.Context) BasePathMappingMapOutput {
	return o
}

func (o BasePathMappingMapOutput) MapIndex(k pulumi.StringInput) BasePathMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BasePathMapping {
		return vs[0].(map[string]*BasePathMapping)[vs[1].(string)]
	}).(BasePathMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BasePathMappingInput)(nil)).Elem(), &BasePathMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasePathMappingArrayInput)(nil)).Elem(), BasePathMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasePathMappingMapInput)(nil)).Elem(), BasePathMappingMap{})
	pulumi.RegisterOutputType(BasePathMappingOutput{})
	pulumi.RegisterOutputType(BasePathMappingArrayOutput{})
	pulumi.RegisterOutputType(BasePathMappingMapOutput{})
}
