// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IntegrationResponse struct {
	pulumi.CustomResourceState

	ContentHandling    pulumi.StringPtrOutput `pulumi:"contentHandling"`
	HttpMethod         pulumi.StringOutput    `pulumi:"httpMethod"`
	ResourceId         pulumi.StringOutput    `pulumi:"resourceId"`
	ResponseParameters pulumi.StringMapOutput `pulumi:"responseParameters"`
	ResponseTemplates  pulumi.StringMapOutput `pulumi:"responseTemplates"`
	RestApi            pulumi.StringOutput    `pulumi:"restApi"`
	SelectionPattern   pulumi.StringPtrOutput `pulumi:"selectionPattern"`
	StatusCode         pulumi.StringOutput    `pulumi:"statusCode"`
}

// NewIntegrationResponse registers a new resource with the given unique name, arguments, and options.
func NewIntegrationResponse(ctx *pulumi.Context,
	name string, args *IntegrationResponseArgs, opts ...pulumi.ResourceOption) (*IntegrationResponse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	if args.StatusCode == nil {
		return nil, errors.New("invalid value for required argument 'StatusCode'")
	}
	var resource IntegrationResponse
	err := ctx.RegisterResource("aws:apigateway/integrationResponse:IntegrationResponse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationResponse gets an existing IntegrationResponse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationResponse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationResponseState, opts ...pulumi.ResourceOption) (*IntegrationResponse, error) {
	var resource IntegrationResponse
	err := ctx.ReadResource("aws:apigateway/integrationResponse:IntegrationResponse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationResponse resources.
type integrationResponseState struct {
	ContentHandling    *string           `pulumi:"contentHandling"`
	HttpMethod         *string           `pulumi:"httpMethod"`
	ResourceId         *string           `pulumi:"resourceId"`
	ResponseParameters map[string]string `pulumi:"responseParameters"`
	ResponseTemplates  map[string]string `pulumi:"responseTemplates"`
	RestApi            interface{}       `pulumi:"restApi"`
	SelectionPattern   *string           `pulumi:"selectionPattern"`
	StatusCode         *string           `pulumi:"statusCode"`
}

type IntegrationResponseState struct {
	ContentHandling    pulumi.StringPtrInput
	HttpMethod         pulumi.StringPtrInput
	ResourceId         pulumi.StringPtrInput
	ResponseParameters pulumi.StringMapInput
	ResponseTemplates  pulumi.StringMapInput
	RestApi            pulumi.Input
	SelectionPattern   pulumi.StringPtrInput
	StatusCode         pulumi.StringPtrInput
}

func (IntegrationResponseState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationResponseState)(nil)).Elem()
}

type integrationResponseArgs struct {
	ContentHandling    *string           `pulumi:"contentHandling"`
	HttpMethod         string            `pulumi:"httpMethod"`
	ResourceId         string            `pulumi:"resourceId"`
	ResponseParameters map[string]string `pulumi:"responseParameters"`
	ResponseTemplates  map[string]string `pulumi:"responseTemplates"`
	RestApi            interface{}       `pulumi:"restApi"`
	SelectionPattern   *string           `pulumi:"selectionPattern"`
	StatusCode         string            `pulumi:"statusCode"`
}

// The set of arguments for constructing a IntegrationResponse resource.
type IntegrationResponseArgs struct {
	ContentHandling    pulumi.StringPtrInput
	HttpMethod         pulumi.StringInput
	ResourceId         pulumi.StringInput
	ResponseParameters pulumi.StringMapInput
	ResponseTemplates  pulumi.StringMapInput
	RestApi            pulumi.Input
	SelectionPattern   pulumi.StringPtrInput
	StatusCode         pulumi.StringInput
}

func (IntegrationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationResponseArgs)(nil)).Elem()
}

type IntegrationResponseInput interface {
	pulumi.Input

	ToIntegrationResponseOutput() IntegrationResponseOutput
	ToIntegrationResponseOutputWithContext(ctx context.Context) IntegrationResponseOutput
}

func (*IntegrationResponse) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationResponse)(nil)).Elem()
}

func (i *IntegrationResponse) ToIntegrationResponseOutput() IntegrationResponseOutput {
	return i.ToIntegrationResponseOutputWithContext(context.Background())
}

func (i *IntegrationResponse) ToIntegrationResponseOutputWithContext(ctx context.Context) IntegrationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationResponseOutput)
}

// IntegrationResponseArrayInput is an input type that accepts IntegrationResponseArray and IntegrationResponseArrayOutput values.
// You can construct a concrete instance of `IntegrationResponseArrayInput` via:
//
//	IntegrationResponseArray{ IntegrationResponseArgs{...} }
type IntegrationResponseArrayInput interface {
	pulumi.Input

	ToIntegrationResponseArrayOutput() IntegrationResponseArrayOutput
	ToIntegrationResponseArrayOutputWithContext(context.Context) IntegrationResponseArrayOutput
}

type IntegrationResponseArray []IntegrationResponseInput

func (IntegrationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationResponse)(nil)).Elem()
}

func (i IntegrationResponseArray) ToIntegrationResponseArrayOutput() IntegrationResponseArrayOutput {
	return i.ToIntegrationResponseArrayOutputWithContext(context.Background())
}

func (i IntegrationResponseArray) ToIntegrationResponseArrayOutputWithContext(ctx context.Context) IntegrationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationResponseArrayOutput)
}

// IntegrationResponseMapInput is an input type that accepts IntegrationResponseMap and IntegrationResponseMapOutput values.
// You can construct a concrete instance of `IntegrationResponseMapInput` via:
//
//	IntegrationResponseMap{ "key": IntegrationResponseArgs{...} }
type IntegrationResponseMapInput interface {
	pulumi.Input

	ToIntegrationResponseMapOutput() IntegrationResponseMapOutput
	ToIntegrationResponseMapOutputWithContext(context.Context) IntegrationResponseMapOutput
}

type IntegrationResponseMap map[string]IntegrationResponseInput

func (IntegrationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationResponse)(nil)).Elem()
}

func (i IntegrationResponseMap) ToIntegrationResponseMapOutput() IntegrationResponseMapOutput {
	return i.ToIntegrationResponseMapOutputWithContext(context.Background())
}

func (i IntegrationResponseMap) ToIntegrationResponseMapOutputWithContext(ctx context.Context) IntegrationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationResponseMapOutput)
}

type IntegrationResponseOutput struct{ *pulumi.OutputState }

func (IntegrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationResponse)(nil)).Elem()
}

func (o IntegrationResponseOutput) ToIntegrationResponseOutput() IntegrationResponseOutput {
	return o
}

func (o IntegrationResponseOutput) ToIntegrationResponseOutputWithContext(ctx context.Context) IntegrationResponseOutput {
	return o
}

func (o IntegrationResponseOutput) ContentHandling() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationResponse) pulumi.StringPtrOutput { return v.ContentHandling }).(pulumi.StringPtrOutput)
}

func (o IntegrationResponseOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationResponse) pulumi.StringOutput { return v.HttpMethod }).(pulumi.StringOutput)
}

func (o IntegrationResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationResponse) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

func (o IntegrationResponseOutput) ResponseParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IntegrationResponse) pulumi.StringMapOutput { return v.ResponseParameters }).(pulumi.StringMapOutput)
}

func (o IntegrationResponseOutput) ResponseTemplates() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IntegrationResponse) pulumi.StringMapOutput { return v.ResponseTemplates }).(pulumi.StringMapOutput)
}

func (o IntegrationResponseOutput) RestApi() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationResponse) pulumi.StringOutput { return v.RestApi }).(pulumi.StringOutput)
}

func (o IntegrationResponseOutput) SelectionPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationResponse) pulumi.StringPtrOutput { return v.SelectionPattern }).(pulumi.StringPtrOutput)
}

func (o IntegrationResponseOutput) StatusCode() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationResponse) pulumi.StringOutput { return v.StatusCode }).(pulumi.StringOutput)
}

type IntegrationResponseArrayOutput struct{ *pulumi.OutputState }

func (IntegrationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationResponse)(nil)).Elem()
}

func (o IntegrationResponseArrayOutput) ToIntegrationResponseArrayOutput() IntegrationResponseArrayOutput {
	return o
}

func (o IntegrationResponseArrayOutput) ToIntegrationResponseArrayOutputWithContext(ctx context.Context) IntegrationResponseArrayOutput {
	return o
}

func (o IntegrationResponseArrayOutput) Index(i pulumi.IntInput) IntegrationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationResponse {
		return vs[0].([]*IntegrationResponse)[vs[1].(int)]
	}).(IntegrationResponseOutput)
}

type IntegrationResponseMapOutput struct{ *pulumi.OutputState }

func (IntegrationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationResponse)(nil)).Elem()
}

func (o IntegrationResponseMapOutput) ToIntegrationResponseMapOutput() IntegrationResponseMapOutput {
	return o
}

func (o IntegrationResponseMapOutput) ToIntegrationResponseMapOutputWithContext(ctx context.Context) IntegrationResponseMapOutput {
	return o
}

func (o IntegrationResponseMapOutput) MapIndex(k pulumi.StringInput) IntegrationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationResponse {
		return vs[0].(map[string]*IntegrationResponse)[vs[1].(string)]
	}).(IntegrationResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationResponseInput)(nil)).Elem(), &IntegrationResponse{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationResponseArrayInput)(nil)).Elem(), IntegrationResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationResponseMapInput)(nil)).Elem(), IntegrationResponseMap{})
	pulumi.RegisterOutputType(IntegrationResponseOutput{})
	pulumi.RegisterOutputType(IntegrationResponseArrayOutput{})
	pulumi.RegisterOutputType(IntegrationResponseMapOutput{})
}
