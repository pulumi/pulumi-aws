// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides an HTTP Method Integration Response for an API Gateway Resource.
//
// > **Note:** Depends on having `apigateway.Integration` inside your rest api. To ensure this
// you might need to add an explicit `dependsOn` for clean runs.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v2/go/aws/apigateway"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		myDemoAPI, err := apigateway.NewRestApi(ctx, "myDemoAPI", &apigateway.RestApiArgs{
// 			Description: pulumi.String("This is my API for demonstration purposes"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		myDemoResource, err := apigateway.NewResource(ctx, "myDemoResource", &apigateway.ResourceArgs{
// 			ParentId: myDemoAPI.RootResourceId,
// 			PathPart: pulumi.String("mydemoresource"),
// 			RestApi:  myDemoAPI.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		myDemoMethod, err := apigateway.NewMethod(ctx, "myDemoMethod", &apigateway.MethodArgs{
// 			Authorization: pulumi.String("NONE"),
// 			HttpMethod:    pulumi.String("GET"),
// 			ResourceId:    myDemoResource.ID(),
// 			RestApi:       myDemoAPI.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = apigateway.NewIntegration(ctx, "myDemoIntegration", &apigateway.IntegrationArgs{
// 			HttpMethod: myDemoMethod.HttpMethod,
// 			ResourceId: myDemoResource.ID(),
// 			RestApi:    myDemoAPI.ID(),
// 			Type:       pulumi.String("MOCK"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		response200, err := apigateway.NewMethodResponse(ctx, "response200", &apigateway.MethodResponseArgs{
// 			HttpMethod: myDemoMethod.HttpMethod,
// 			ResourceId: myDemoResource.ID(),
// 			RestApi:    myDemoAPI.ID(),
// 			StatusCode: pulumi.String("200"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = apigateway.NewIntegrationResponse(ctx, "myDemoIntegrationResponse", &apigateway.IntegrationResponseArgs{
// 			HttpMethod: myDemoMethod.HttpMethod,
// 			ResourceId: myDemoResource.ID(),
// 			ResponseTemplates: pulumi.StringMap{
// 				"application/xml": pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "#set(", "$", "inputRoot = ", "$", "input.path('", "$", "'))\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", "<message>\n", "    ", "$", "inputRoot.body\n", "</message>\n", "\n")),
// 			},
// 			RestApi:    myDemoAPI.ID(),
// 			StatusCode: response200.StatusCode,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IntegrationResponse struct {
	pulumi.CustomResourceState

	// Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
	ContentHandling pulumi.StringPtrOutput `pulumi:"contentHandling"`
	// The HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod pulumi.StringOutput `pulumi:"httpMethod"`
	// The API resource ID
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// A map of response parameters that can be read from the backend response.
	// For example: `responseParameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`
	ResponseParameters pulumi.StringMapOutput `pulumi:"responseParameters"`
	// A map specifying the templates used to transform the integration response body
	ResponseTemplates pulumi.StringMapOutput `pulumi:"responseTemplates"`
	// The ID of the associated REST API
	RestApi pulumi.StringOutput `pulumi:"restApi"`
	// Specifies the regular expression pattern used to choose
	// an integration response based on the response from the backend. Setting this to `-` makes the integration the default one.
	// If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched.
	// For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
	SelectionPattern pulumi.StringPtrOutput `pulumi:"selectionPattern"`
	// The HTTP status code
	StatusCode pulumi.StringOutput `pulumi:"statusCode"`
}

// NewIntegrationResponse registers a new resource with the given unique name, arguments, and options.
func NewIntegrationResponse(ctx *pulumi.Context,
	name string, args *IntegrationResponseArgs, opts ...pulumi.ResourceOption) (*IntegrationResponse, error) {
	if args == nil || args.HttpMethod == nil {
		return nil, errors.New("missing required argument 'HttpMethod'")
	}
	if args == nil || args.ResourceId == nil {
		return nil, errors.New("missing required argument 'ResourceId'")
	}
	if args == nil || args.RestApi == nil {
		return nil, errors.New("missing required argument 'RestApi'")
	}
	if args == nil || args.StatusCode == nil {
		return nil, errors.New("missing required argument 'StatusCode'")
	}
	if args == nil {
		args = &IntegrationResponseArgs{}
	}
	var resource IntegrationResponse
	err := ctx.RegisterResource("aws:apigateway/integrationResponse:IntegrationResponse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationResponse gets an existing IntegrationResponse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationResponse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationResponseState, opts ...pulumi.ResourceOption) (*IntegrationResponse, error) {
	var resource IntegrationResponse
	err := ctx.ReadResource("aws:apigateway/integrationResponse:IntegrationResponse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationResponse resources.
type integrationResponseState struct {
	// Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
	ContentHandling *string `pulumi:"contentHandling"`
	// The HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod *string `pulumi:"httpMethod"`
	// The API resource ID
	ResourceId *string `pulumi:"resourceId"`
	// A map of response parameters that can be read from the backend response.
	// For example: `responseParameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`
	ResponseParameters map[string]string `pulumi:"responseParameters"`
	// A map specifying the templates used to transform the integration response body
	ResponseTemplates map[string]string `pulumi:"responseTemplates"`
	// The ID of the associated REST API
	RestApi *string `pulumi:"restApi"`
	// Specifies the regular expression pattern used to choose
	// an integration response based on the response from the backend. Setting this to `-` makes the integration the default one.
	// If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched.
	// For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
	SelectionPattern *string `pulumi:"selectionPattern"`
	// The HTTP status code
	StatusCode *string `pulumi:"statusCode"`
}

type IntegrationResponseState struct {
	// Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
	ContentHandling pulumi.StringPtrInput
	// The HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod pulumi.StringPtrInput
	// The API resource ID
	ResourceId pulumi.StringPtrInput
	// A map of response parameters that can be read from the backend response.
	// For example: `responseParameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`
	ResponseParameters pulumi.StringMapInput
	// A map specifying the templates used to transform the integration response body
	ResponseTemplates pulumi.StringMapInput
	// The ID of the associated REST API
	RestApi pulumi.StringPtrInput
	// Specifies the regular expression pattern used to choose
	// an integration response based on the response from the backend. Setting this to `-` makes the integration the default one.
	// If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched.
	// For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
	SelectionPattern pulumi.StringPtrInput
	// The HTTP status code
	StatusCode pulumi.StringPtrInput
}

func (IntegrationResponseState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationResponseState)(nil)).Elem()
}

type integrationResponseArgs struct {
	// Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
	ContentHandling *string `pulumi:"contentHandling"`
	// The HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod string `pulumi:"httpMethod"`
	// The API resource ID
	ResourceId string `pulumi:"resourceId"`
	// A map of response parameters that can be read from the backend response.
	// For example: `responseParameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`
	ResponseParameters map[string]string `pulumi:"responseParameters"`
	// A map specifying the templates used to transform the integration response body
	ResponseTemplates map[string]string `pulumi:"responseTemplates"`
	// The ID of the associated REST API
	RestApi interface{} `pulumi:"restApi"`
	// Specifies the regular expression pattern used to choose
	// an integration response based on the response from the backend. Setting this to `-` makes the integration the default one.
	// If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched.
	// For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
	SelectionPattern *string `pulumi:"selectionPattern"`
	// The HTTP status code
	StatusCode string `pulumi:"statusCode"`
}

// The set of arguments for constructing a IntegrationResponse resource.
type IntegrationResponseArgs struct {
	// Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
	ContentHandling pulumi.StringPtrInput
	// The HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod pulumi.StringInput
	// The API resource ID
	ResourceId pulumi.StringInput
	// A map of response parameters that can be read from the backend response.
	// For example: `responseParameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`
	ResponseParameters pulumi.StringMapInput
	// A map specifying the templates used to transform the integration response body
	ResponseTemplates pulumi.StringMapInput
	// The ID of the associated REST API
	RestApi pulumi.Input
	// Specifies the regular expression pattern used to choose
	// an integration response based on the response from the backend. Setting this to `-` makes the integration the default one.
	// If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched.
	// For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
	SelectionPattern pulumi.StringPtrInput
	// The HTTP status code
	StatusCode pulumi.StringInput
}

func (IntegrationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationResponseArgs)(nil)).Elem()
}
