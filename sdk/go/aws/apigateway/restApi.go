// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RestApi struct {
	pulumi.CustomResourceState

	ApiKeySource              pulumi.StringOutput                `pulumi:"apiKeySource"`
	Arn                       pulumi.StringOutput                `pulumi:"arn"`
	BinaryMediaTypes          pulumi.StringArrayOutput           `pulumi:"binaryMediaTypes"`
	Body                      pulumi.StringPtrOutput             `pulumi:"body"`
	CreatedDate               pulumi.StringOutput                `pulumi:"createdDate"`
	Description               pulumi.StringOutput                `pulumi:"description"`
	DisableExecuteApiEndpoint pulumi.BoolOutput                  `pulumi:"disableExecuteApiEndpoint"`
	EndpointConfiguration     RestApiEndpointConfigurationOutput `pulumi:"endpointConfiguration"`
	ExecutionArn              pulumi.StringOutput                `pulumi:"executionArn"`
	MinimumCompressionSize    pulumi.IntPtrOutput                `pulumi:"minimumCompressionSize"`
	Name                      pulumi.StringOutput                `pulumi:"name"`
	Parameters                pulumi.StringMapOutput             `pulumi:"parameters"`
	Policy                    pulumi.StringOutput                `pulumi:"policy"`
	PutRestApiMode            pulumi.StringPtrOutput             `pulumi:"putRestApiMode"`
	RootResourceId            pulumi.StringOutput                `pulumi:"rootResourceId"`
	Tags                      pulumi.StringMapOutput             `pulumi:"tags"`
	TagsAll                   pulumi.StringMapOutput             `pulumi:"tagsAll"`
}

// NewRestApi registers a new resource with the given unique name, arguments, and options.
func NewRestApi(ctx *pulumi.Context,
	name string, args *RestApiArgs, opts ...pulumi.ResourceOption) (*RestApi, error) {
	if args == nil {
		args = &RestApiArgs{}
	}

	var resource RestApi
	err := ctx.RegisterResource("aws:apigateway/restApi:RestApi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestApi gets an existing RestApi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestApiState, opts ...pulumi.ResourceOption) (*RestApi, error) {
	var resource RestApi
	err := ctx.ReadResource("aws:apigateway/restApi:RestApi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestApi resources.
type restApiState struct {
	ApiKeySource              *string                       `pulumi:"apiKeySource"`
	Arn                       *string                       `pulumi:"arn"`
	BinaryMediaTypes          []string                      `pulumi:"binaryMediaTypes"`
	Body                      *string                       `pulumi:"body"`
	CreatedDate               *string                       `pulumi:"createdDate"`
	Description               *string                       `pulumi:"description"`
	DisableExecuteApiEndpoint *bool                         `pulumi:"disableExecuteApiEndpoint"`
	EndpointConfiguration     *RestApiEndpointConfiguration `pulumi:"endpointConfiguration"`
	ExecutionArn              *string                       `pulumi:"executionArn"`
	MinimumCompressionSize    *int                          `pulumi:"minimumCompressionSize"`
	Name                      *string                       `pulumi:"name"`
	Parameters                map[string]string             `pulumi:"parameters"`
	Policy                    *string                       `pulumi:"policy"`
	PutRestApiMode            *string                       `pulumi:"putRestApiMode"`
	RootResourceId            *string                       `pulumi:"rootResourceId"`
	Tags                      map[string]string             `pulumi:"tags"`
	TagsAll                   map[string]string             `pulumi:"tagsAll"`
}

type RestApiState struct {
	ApiKeySource              pulumi.StringPtrInput
	Arn                       pulumi.StringPtrInput
	BinaryMediaTypes          pulumi.StringArrayInput
	Body                      pulumi.StringPtrInput
	CreatedDate               pulumi.StringPtrInput
	Description               pulumi.StringPtrInput
	DisableExecuteApiEndpoint pulumi.BoolPtrInput
	EndpointConfiguration     RestApiEndpointConfigurationPtrInput
	ExecutionArn              pulumi.StringPtrInput
	MinimumCompressionSize    pulumi.IntPtrInput
	Name                      pulumi.StringPtrInput
	Parameters                pulumi.StringMapInput
	Policy                    pulumi.StringPtrInput
	PutRestApiMode            pulumi.StringPtrInput
	RootResourceId            pulumi.StringPtrInput
	Tags                      pulumi.StringMapInput
	TagsAll                   pulumi.StringMapInput
}

func (RestApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*restApiState)(nil)).Elem()
}

type restApiArgs struct {
	ApiKeySource              *string                       `pulumi:"apiKeySource"`
	BinaryMediaTypes          []string                      `pulumi:"binaryMediaTypes"`
	Body                      *string                       `pulumi:"body"`
	Description               *string                       `pulumi:"description"`
	DisableExecuteApiEndpoint *bool                         `pulumi:"disableExecuteApiEndpoint"`
	EndpointConfiguration     *RestApiEndpointConfiguration `pulumi:"endpointConfiguration"`
	MinimumCompressionSize    *int                          `pulumi:"minimumCompressionSize"`
	Name                      *string                       `pulumi:"name"`
	Parameters                map[string]string             `pulumi:"parameters"`
	Policy                    *string                       `pulumi:"policy"`
	PutRestApiMode            *string                       `pulumi:"putRestApiMode"`
	Tags                      map[string]string             `pulumi:"tags"`
}

// The set of arguments for constructing a RestApi resource.
type RestApiArgs struct {
	ApiKeySource              pulumi.StringPtrInput
	BinaryMediaTypes          pulumi.StringArrayInput
	Body                      pulumi.StringPtrInput
	Description               pulumi.StringPtrInput
	DisableExecuteApiEndpoint pulumi.BoolPtrInput
	EndpointConfiguration     RestApiEndpointConfigurationPtrInput
	MinimumCompressionSize    pulumi.IntPtrInput
	Name                      pulumi.StringPtrInput
	Parameters                pulumi.StringMapInput
	Policy                    pulumi.StringPtrInput
	PutRestApiMode            pulumi.StringPtrInput
	Tags                      pulumi.StringMapInput
}

func (RestApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restApiArgs)(nil)).Elem()
}

type RestApiInput interface {
	pulumi.Input

	ToRestApiOutput() RestApiOutput
	ToRestApiOutputWithContext(ctx context.Context) RestApiOutput
}

func (*RestApi) ElementType() reflect.Type {
	return reflect.TypeOf((**RestApi)(nil)).Elem()
}

func (i *RestApi) ToRestApiOutput() RestApiOutput {
	return i.ToRestApiOutputWithContext(context.Background())
}

func (i *RestApi) ToRestApiOutputWithContext(ctx context.Context) RestApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestApiOutput)
}

// RestApiArrayInput is an input type that accepts RestApiArray and RestApiArrayOutput values.
// You can construct a concrete instance of `RestApiArrayInput` via:
//
//	RestApiArray{ RestApiArgs{...} }
type RestApiArrayInput interface {
	pulumi.Input

	ToRestApiArrayOutput() RestApiArrayOutput
	ToRestApiArrayOutputWithContext(context.Context) RestApiArrayOutput
}

type RestApiArray []RestApiInput

func (RestApiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestApi)(nil)).Elem()
}

func (i RestApiArray) ToRestApiArrayOutput() RestApiArrayOutput {
	return i.ToRestApiArrayOutputWithContext(context.Background())
}

func (i RestApiArray) ToRestApiArrayOutputWithContext(ctx context.Context) RestApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestApiArrayOutput)
}

// RestApiMapInput is an input type that accepts RestApiMap and RestApiMapOutput values.
// You can construct a concrete instance of `RestApiMapInput` via:
//
//	RestApiMap{ "key": RestApiArgs{...} }
type RestApiMapInput interface {
	pulumi.Input

	ToRestApiMapOutput() RestApiMapOutput
	ToRestApiMapOutputWithContext(context.Context) RestApiMapOutput
}

type RestApiMap map[string]RestApiInput

func (RestApiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestApi)(nil)).Elem()
}

func (i RestApiMap) ToRestApiMapOutput() RestApiMapOutput {
	return i.ToRestApiMapOutputWithContext(context.Background())
}

func (i RestApiMap) ToRestApiMapOutputWithContext(ctx context.Context) RestApiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestApiMapOutput)
}

type RestApiOutput struct{ *pulumi.OutputState }

func (RestApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestApi)(nil)).Elem()
}

func (o RestApiOutput) ToRestApiOutput() RestApiOutput {
	return o
}

func (o RestApiOutput) ToRestApiOutputWithContext(ctx context.Context) RestApiOutput {
	return o
}

func (o RestApiOutput) ApiKeySource() pulumi.StringOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringOutput { return v.ApiKeySource }).(pulumi.StringOutput)
}

func (o RestApiOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o RestApiOutput) BinaryMediaTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringArrayOutput { return v.BinaryMediaTypes }).(pulumi.StringArrayOutput)
}

func (o RestApiOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringPtrOutput { return v.Body }).(pulumi.StringPtrOutput)
}

func (o RestApiOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

func (o RestApiOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o RestApiOutput) DisableExecuteApiEndpoint() pulumi.BoolOutput {
	return o.ApplyT(func(v *RestApi) pulumi.BoolOutput { return v.DisableExecuteApiEndpoint }).(pulumi.BoolOutput)
}

func (o RestApiOutput) EndpointConfiguration() RestApiEndpointConfigurationOutput {
	return o.ApplyT(func(v *RestApi) RestApiEndpointConfigurationOutput { return v.EndpointConfiguration }).(RestApiEndpointConfigurationOutput)
}

func (o RestApiOutput) ExecutionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringOutput { return v.ExecutionArn }).(pulumi.StringOutput)
}

func (o RestApiOutput) MinimumCompressionSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RestApi) pulumi.IntPtrOutput { return v.MinimumCompressionSize }).(pulumi.IntPtrOutput)
}

func (o RestApiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RestApiOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

func (o RestApiOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

func (o RestApiOutput) PutRestApiMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringPtrOutput { return v.PutRestApiMode }).(pulumi.StringPtrOutput)
}

func (o RestApiOutput) RootResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringOutput { return v.RootResourceId }).(pulumi.StringOutput)
}

func (o RestApiOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o RestApiOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RestApi) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type RestApiArrayOutput struct{ *pulumi.OutputState }

func (RestApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestApi)(nil)).Elem()
}

func (o RestApiArrayOutput) ToRestApiArrayOutput() RestApiArrayOutput {
	return o
}

func (o RestApiArrayOutput) ToRestApiArrayOutputWithContext(ctx context.Context) RestApiArrayOutput {
	return o
}

func (o RestApiArrayOutput) Index(i pulumi.IntInput) RestApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RestApi {
		return vs[0].([]*RestApi)[vs[1].(int)]
	}).(RestApiOutput)
}

type RestApiMapOutput struct{ *pulumi.OutputState }

func (RestApiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestApi)(nil)).Elem()
}

func (o RestApiMapOutput) ToRestApiMapOutput() RestApiMapOutput {
	return o
}

func (o RestApiMapOutput) ToRestApiMapOutputWithContext(ctx context.Context) RestApiMapOutput {
	return o
}

func (o RestApiMapOutput) MapIndex(k pulumi.StringInput) RestApiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RestApi {
		return vs[0].(map[string]*RestApi)[vs[1].(string)]
	}).(RestApiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestApiInput)(nil)).Elem(), &RestApi{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestApiArrayInput)(nil)).Elem(), RestApiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestApiMapInput)(nil)).Elem(), RestApiMap{})
	pulumi.RegisterOutputType(RestApiOutput{})
	pulumi.RegisterOutputType(RestApiArrayOutput{})
	pulumi.RegisterOutputType(RestApiMapOutput{})
}
