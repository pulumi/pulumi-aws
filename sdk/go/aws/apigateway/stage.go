// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an API Gateway Stage.
type Stage struct {
	s *pulumi.ResourceState
}

// NewStage registers a new resource with the given unique name, arguments, and options.
func NewStage(ctx *pulumi.Context,
	name string, args *StageArgs, opts ...pulumi.ResourceOpt) (*Stage, error) {
	if args == nil || args.Deployment == nil {
		return nil, errors.New("missing required argument 'Deployment'")
	}
	if args == nil || args.RestApi == nil {
		return nil, errors.New("missing required argument 'RestApi'")
	}
	if args == nil || args.StageName == nil {
		return nil, errors.New("missing required argument 'StageName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessLogSettings"] = nil
		inputs["cacheClusterEnabled"] = nil
		inputs["cacheClusterSize"] = nil
		inputs["clientCertificateId"] = nil
		inputs["deployment"] = nil
		inputs["description"] = nil
		inputs["documentationVersion"] = nil
		inputs["restApi"] = nil
		inputs["stageName"] = nil
		inputs["tags"] = nil
		inputs["variables"] = nil
	} else {
		inputs["accessLogSettings"] = args.AccessLogSettings
		inputs["cacheClusterEnabled"] = args.CacheClusterEnabled
		inputs["cacheClusterSize"] = args.CacheClusterSize
		inputs["clientCertificateId"] = args.ClientCertificateId
		inputs["deployment"] = args.Deployment
		inputs["description"] = args.Description
		inputs["documentationVersion"] = args.DocumentationVersion
		inputs["restApi"] = args.RestApi
		inputs["stageName"] = args.StageName
		inputs["tags"] = args.Tags
		inputs["variables"] = args.Variables
	}
	inputs["executionArn"] = nil
	inputs["invokeUrl"] = nil
	s, err := ctx.RegisterResource("aws:apigateway/stage:Stage", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Stage{s: s}, nil
}

// GetStage gets an existing Stage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStage(ctx *pulumi.Context,
	name string, id pulumi.ID, state *StageState, opts ...pulumi.ResourceOpt) (*Stage, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessLogSettings"] = state.AccessLogSettings
		inputs["cacheClusterEnabled"] = state.CacheClusterEnabled
		inputs["cacheClusterSize"] = state.CacheClusterSize
		inputs["clientCertificateId"] = state.ClientCertificateId
		inputs["deployment"] = state.Deployment
		inputs["description"] = state.Description
		inputs["documentationVersion"] = state.DocumentationVersion
		inputs["executionArn"] = state.ExecutionArn
		inputs["invokeUrl"] = state.InvokeUrl
		inputs["restApi"] = state.RestApi
		inputs["stageName"] = state.StageName
		inputs["tags"] = state.Tags
		inputs["variables"] = state.Variables
	}
	s, err := ctx.ReadResource("aws:apigateway/stage:Stage", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Stage{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Stage) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Stage) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Enables access logs for the API stage. Detailed below.
func (r *Stage) AccessLogSettings() *pulumi.Output {
	return r.s.State["accessLogSettings"]
}

// Specifies whether a cache cluster is enabled for the stage
func (r *Stage) CacheClusterEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["cacheClusterEnabled"])
}

// The size of the cache cluster for the stage, if enabled.
// Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
func (r *Stage) CacheClusterSize() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cacheClusterSize"])
}

// The identifier of a client certificate for the stage.
func (r *Stage) ClientCertificateId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["clientCertificateId"])
}

// The ID of the deployment that the stage points to
func (r *Stage) Deployment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deployment"])
}

// The description of the stage
func (r *Stage) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The version of the associated API documentation
func (r *Stage) DocumentationVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["documentationVersion"])
}

// The execution ARN to be used in [`lambda_permission`](/docs/providers/aws/r/lambda_permission.html)'s `source_arn`
// when allowing API Gateway to invoke a Lambda function,
// e.g. `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
func (r *Stage) ExecutionArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["executionArn"])
}

// The URL to invoke the API pointing to the stage,
// e.g. `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
func (r *Stage) InvokeUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["invokeUrl"])
}

// The ID of the associated REST API
func (r *Stage) RestApi() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["restApi"])
}

// The name of the stage
func (r *Stage) StageName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["stageName"])
}

// A mapping of tags to assign to the resource.
func (r *Stage) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// A map that defines the stage variables
func (r *Stage) Variables() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["variables"])
}

// Input properties used for looking up and filtering Stage resources.
type StageState struct {
	// Enables access logs for the API stage. Detailed below.
	AccessLogSettings interface{}
	// Specifies whether a cache cluster is enabled for the stage
	CacheClusterEnabled interface{}
	// The size of the cache cluster for the stage, if enabled.
	// Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
	CacheClusterSize interface{}
	// The identifier of a client certificate for the stage.
	ClientCertificateId interface{}
	// The ID of the deployment that the stage points to
	Deployment interface{}
	// The description of the stage
	Description interface{}
	// The version of the associated API documentation
	DocumentationVersion interface{}
	// The execution ARN to be used in [`lambda_permission`](/docs/providers/aws/r/lambda_permission.html)'s `source_arn`
	// when allowing API Gateway to invoke a Lambda function,
	// e.g. `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
	ExecutionArn interface{}
	// The URL to invoke the API pointing to the stage,
	// e.g. `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
	InvokeUrl interface{}
	// The ID of the associated REST API
	RestApi interface{}
	// The name of the stage
	StageName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// A map that defines the stage variables
	Variables interface{}
}

// The set of arguments for constructing a Stage resource.
type StageArgs struct {
	// Enables access logs for the API stage. Detailed below.
	AccessLogSettings interface{}
	// Specifies whether a cache cluster is enabled for the stage
	CacheClusterEnabled interface{}
	// The size of the cache cluster for the stage, if enabled.
	// Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
	CacheClusterSize interface{}
	// The identifier of a client certificate for the stage.
	ClientCertificateId interface{}
	// The ID of the deployment that the stage points to
	Deployment interface{}
	// The description of the stage
	Description interface{}
	// The version of the associated API documentation
	DocumentationVersion interface{}
	// The ID of the associated REST API
	RestApi interface{}
	// The name of the stage
	StageName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// A map that defines the stage variables
	Variables interface{}
}
