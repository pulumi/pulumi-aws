// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MethodResponse struct {
	pulumi.CustomResourceState

	HttpMethod         pulumi.StringOutput    `pulumi:"httpMethod"`
	ResourceId         pulumi.StringOutput    `pulumi:"resourceId"`
	ResponseModels     pulumi.StringMapOutput `pulumi:"responseModels"`
	ResponseParameters pulumi.BoolMapOutput   `pulumi:"responseParameters"`
	RestApi            pulumi.StringOutput    `pulumi:"restApi"`
	StatusCode         pulumi.StringOutput    `pulumi:"statusCode"`
}

// NewMethodResponse registers a new resource with the given unique name, arguments, and options.
func NewMethodResponse(ctx *pulumi.Context,
	name string, args *MethodResponseArgs, opts ...pulumi.ResourceOption) (*MethodResponse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	if args.StatusCode == nil {
		return nil, errors.New("invalid value for required argument 'StatusCode'")
	}
	var resource MethodResponse
	err := ctx.RegisterResource("aws:apigateway/methodResponse:MethodResponse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMethodResponse gets an existing MethodResponse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMethodResponse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MethodResponseState, opts ...pulumi.ResourceOption) (*MethodResponse, error) {
	var resource MethodResponse
	err := ctx.ReadResource("aws:apigateway/methodResponse:MethodResponse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MethodResponse resources.
type methodResponseState struct {
	HttpMethod         *string           `pulumi:"httpMethod"`
	ResourceId         *string           `pulumi:"resourceId"`
	ResponseModels     map[string]string `pulumi:"responseModels"`
	ResponseParameters map[string]bool   `pulumi:"responseParameters"`
	RestApi            interface{}       `pulumi:"restApi"`
	StatusCode         *string           `pulumi:"statusCode"`
}

type MethodResponseState struct {
	HttpMethod         pulumi.StringPtrInput
	ResourceId         pulumi.StringPtrInput
	ResponseModels     pulumi.StringMapInput
	ResponseParameters pulumi.BoolMapInput
	RestApi            pulumi.Input
	StatusCode         pulumi.StringPtrInput
}

func (MethodResponseState) ElementType() reflect.Type {
	return reflect.TypeOf((*methodResponseState)(nil)).Elem()
}

type methodResponseArgs struct {
	HttpMethod         string            `pulumi:"httpMethod"`
	ResourceId         string            `pulumi:"resourceId"`
	ResponseModels     map[string]string `pulumi:"responseModels"`
	ResponseParameters map[string]bool   `pulumi:"responseParameters"`
	RestApi            interface{}       `pulumi:"restApi"`
	StatusCode         string            `pulumi:"statusCode"`
}

// The set of arguments for constructing a MethodResponse resource.
type MethodResponseArgs struct {
	HttpMethod         pulumi.StringInput
	ResourceId         pulumi.StringInput
	ResponseModels     pulumi.StringMapInput
	ResponseParameters pulumi.BoolMapInput
	RestApi            pulumi.Input
	StatusCode         pulumi.StringInput
}

func (MethodResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*methodResponseArgs)(nil)).Elem()
}

type MethodResponseInput interface {
	pulumi.Input

	ToMethodResponseOutput() MethodResponseOutput
	ToMethodResponseOutputWithContext(ctx context.Context) MethodResponseOutput
}

func (*MethodResponse) ElementType() reflect.Type {
	return reflect.TypeOf((**MethodResponse)(nil)).Elem()
}

func (i *MethodResponse) ToMethodResponseOutput() MethodResponseOutput {
	return i.ToMethodResponseOutputWithContext(context.Background())
}

func (i *MethodResponse) ToMethodResponseOutputWithContext(ctx context.Context) MethodResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodResponseOutput)
}

// MethodResponseArrayInput is an input type that accepts MethodResponseArray and MethodResponseArrayOutput values.
// You can construct a concrete instance of `MethodResponseArrayInput` via:
//
//	MethodResponseArray{ MethodResponseArgs{...} }
type MethodResponseArrayInput interface {
	pulumi.Input

	ToMethodResponseArrayOutput() MethodResponseArrayOutput
	ToMethodResponseArrayOutputWithContext(context.Context) MethodResponseArrayOutput
}

type MethodResponseArray []MethodResponseInput

func (MethodResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MethodResponse)(nil)).Elem()
}

func (i MethodResponseArray) ToMethodResponseArrayOutput() MethodResponseArrayOutput {
	return i.ToMethodResponseArrayOutputWithContext(context.Background())
}

func (i MethodResponseArray) ToMethodResponseArrayOutputWithContext(ctx context.Context) MethodResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodResponseArrayOutput)
}

// MethodResponseMapInput is an input type that accepts MethodResponseMap and MethodResponseMapOutput values.
// You can construct a concrete instance of `MethodResponseMapInput` via:
//
//	MethodResponseMap{ "key": MethodResponseArgs{...} }
type MethodResponseMapInput interface {
	pulumi.Input

	ToMethodResponseMapOutput() MethodResponseMapOutput
	ToMethodResponseMapOutputWithContext(context.Context) MethodResponseMapOutput
}

type MethodResponseMap map[string]MethodResponseInput

func (MethodResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MethodResponse)(nil)).Elem()
}

func (i MethodResponseMap) ToMethodResponseMapOutput() MethodResponseMapOutput {
	return i.ToMethodResponseMapOutputWithContext(context.Background())
}

func (i MethodResponseMap) ToMethodResponseMapOutputWithContext(ctx context.Context) MethodResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodResponseMapOutput)
}

type MethodResponseOutput struct{ *pulumi.OutputState }

func (MethodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MethodResponse)(nil)).Elem()
}

func (o MethodResponseOutput) ToMethodResponseOutput() MethodResponseOutput {
	return o
}

func (o MethodResponseOutput) ToMethodResponseOutputWithContext(ctx context.Context) MethodResponseOutput {
	return o
}

func (o MethodResponseOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *MethodResponse) pulumi.StringOutput { return v.HttpMethod }).(pulumi.StringOutput)
}

func (o MethodResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MethodResponse) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

func (o MethodResponseOutput) ResponseModels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MethodResponse) pulumi.StringMapOutput { return v.ResponseModels }).(pulumi.StringMapOutput)
}

func (o MethodResponseOutput) ResponseParameters() pulumi.BoolMapOutput {
	return o.ApplyT(func(v *MethodResponse) pulumi.BoolMapOutput { return v.ResponseParameters }).(pulumi.BoolMapOutput)
}

func (o MethodResponseOutput) RestApi() pulumi.StringOutput {
	return o.ApplyT(func(v *MethodResponse) pulumi.StringOutput { return v.RestApi }).(pulumi.StringOutput)
}

func (o MethodResponseOutput) StatusCode() pulumi.StringOutput {
	return o.ApplyT(func(v *MethodResponse) pulumi.StringOutput { return v.StatusCode }).(pulumi.StringOutput)
}

type MethodResponseArrayOutput struct{ *pulumi.OutputState }

func (MethodResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MethodResponse)(nil)).Elem()
}

func (o MethodResponseArrayOutput) ToMethodResponseArrayOutput() MethodResponseArrayOutput {
	return o
}

func (o MethodResponseArrayOutput) ToMethodResponseArrayOutputWithContext(ctx context.Context) MethodResponseArrayOutput {
	return o
}

func (o MethodResponseArrayOutput) Index(i pulumi.IntInput) MethodResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MethodResponse {
		return vs[0].([]*MethodResponse)[vs[1].(int)]
	}).(MethodResponseOutput)
}

type MethodResponseMapOutput struct{ *pulumi.OutputState }

func (MethodResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MethodResponse)(nil)).Elem()
}

func (o MethodResponseMapOutput) ToMethodResponseMapOutput() MethodResponseMapOutput {
	return o
}

func (o MethodResponseMapOutput) ToMethodResponseMapOutputWithContext(ctx context.Context) MethodResponseMapOutput {
	return o
}

func (o MethodResponseMapOutput) MapIndex(k pulumi.StringInput) MethodResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MethodResponse {
		return vs[0].(map[string]*MethodResponse)[vs[1].(string)]
	}).(MethodResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MethodResponseInput)(nil)).Elem(), &MethodResponse{})
	pulumi.RegisterInputType(reflect.TypeOf((*MethodResponseArrayInput)(nil)).Elem(), MethodResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MethodResponseMapInput)(nil)).Elem(), MethodResponseMap{})
	pulumi.RegisterOutputType(MethodResponseOutput{})
	pulumi.RegisterOutputType(MethodResponseArrayOutput{})
	pulumi.RegisterOutputType(MethodResponseMapOutput{})
}
