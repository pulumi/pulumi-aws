// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Method struct {
	pulumi.CustomResourceState

	ApiKeyRequired      pulumi.BoolPtrOutput     `pulumi:"apiKeyRequired"`
	Authorization       pulumi.StringOutput      `pulumi:"authorization"`
	AuthorizationScopes pulumi.StringArrayOutput `pulumi:"authorizationScopes"`
	AuthorizerId        pulumi.StringPtrOutput   `pulumi:"authorizerId"`
	HttpMethod          pulumi.StringOutput      `pulumi:"httpMethod"`
	OperationName       pulumi.StringPtrOutput   `pulumi:"operationName"`
	RequestModels       pulumi.StringMapOutput   `pulumi:"requestModels"`
	RequestParameters   pulumi.BoolMapOutput     `pulumi:"requestParameters"`
	RequestValidatorId  pulumi.StringPtrOutput   `pulumi:"requestValidatorId"`
	ResourceId          pulumi.StringOutput      `pulumi:"resourceId"`
	RestApi             pulumi.StringOutput      `pulumi:"restApi"`
}

// NewMethod registers a new resource with the given unique name, arguments, and options.
func NewMethod(ctx *pulumi.Context,
	name string, args *MethodArgs, opts ...pulumi.ResourceOption) (*Method, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authorization == nil {
		return nil, errors.New("invalid value for required argument 'Authorization'")
	}
	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	var resource Method
	err := ctx.RegisterResource("aws:apigateway/method:Method", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMethod gets an existing Method resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMethod(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MethodState, opts ...pulumi.ResourceOption) (*Method, error) {
	var resource Method
	err := ctx.ReadResource("aws:apigateway/method:Method", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Method resources.
type methodState struct {
	ApiKeyRequired      *bool             `pulumi:"apiKeyRequired"`
	Authorization       *string           `pulumi:"authorization"`
	AuthorizationScopes []string          `pulumi:"authorizationScopes"`
	AuthorizerId        *string           `pulumi:"authorizerId"`
	HttpMethod          *string           `pulumi:"httpMethod"`
	OperationName       *string           `pulumi:"operationName"`
	RequestModels       map[string]string `pulumi:"requestModels"`
	RequestParameters   map[string]bool   `pulumi:"requestParameters"`
	RequestValidatorId  *string           `pulumi:"requestValidatorId"`
	ResourceId          *string           `pulumi:"resourceId"`
	RestApi             interface{}       `pulumi:"restApi"`
}

type MethodState struct {
	ApiKeyRequired      pulumi.BoolPtrInput
	Authorization       pulumi.StringPtrInput
	AuthorizationScopes pulumi.StringArrayInput
	AuthorizerId        pulumi.StringPtrInput
	HttpMethod          pulumi.StringPtrInput
	OperationName       pulumi.StringPtrInput
	RequestModels       pulumi.StringMapInput
	RequestParameters   pulumi.BoolMapInput
	RequestValidatorId  pulumi.StringPtrInput
	ResourceId          pulumi.StringPtrInput
	RestApi             pulumi.Input
}

func (MethodState) ElementType() reflect.Type {
	return reflect.TypeOf((*methodState)(nil)).Elem()
}

type methodArgs struct {
	ApiKeyRequired      *bool             `pulumi:"apiKeyRequired"`
	Authorization       string            `pulumi:"authorization"`
	AuthorizationScopes []string          `pulumi:"authorizationScopes"`
	AuthorizerId        *string           `pulumi:"authorizerId"`
	HttpMethod          string            `pulumi:"httpMethod"`
	OperationName       *string           `pulumi:"operationName"`
	RequestModels       map[string]string `pulumi:"requestModels"`
	RequestParameters   map[string]bool   `pulumi:"requestParameters"`
	RequestValidatorId  *string           `pulumi:"requestValidatorId"`
	ResourceId          string            `pulumi:"resourceId"`
	RestApi             interface{}       `pulumi:"restApi"`
}

// The set of arguments for constructing a Method resource.
type MethodArgs struct {
	ApiKeyRequired      pulumi.BoolPtrInput
	Authorization       pulumi.StringInput
	AuthorizationScopes pulumi.StringArrayInput
	AuthorizerId        pulumi.StringPtrInput
	HttpMethod          pulumi.StringInput
	OperationName       pulumi.StringPtrInput
	RequestModels       pulumi.StringMapInput
	RequestParameters   pulumi.BoolMapInput
	RequestValidatorId  pulumi.StringPtrInput
	ResourceId          pulumi.StringInput
	RestApi             pulumi.Input
}

func (MethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*methodArgs)(nil)).Elem()
}

type MethodInput interface {
	pulumi.Input

	ToMethodOutput() MethodOutput
	ToMethodOutputWithContext(ctx context.Context) MethodOutput
}

func (*Method) ElementType() reflect.Type {
	return reflect.TypeOf((**Method)(nil)).Elem()
}

func (i *Method) ToMethodOutput() MethodOutput {
	return i.ToMethodOutputWithContext(context.Background())
}

func (i *Method) ToMethodOutputWithContext(ctx context.Context) MethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodOutput)
}

// MethodArrayInput is an input type that accepts MethodArray and MethodArrayOutput values.
// You can construct a concrete instance of `MethodArrayInput` via:
//
//	MethodArray{ MethodArgs{...} }
type MethodArrayInput interface {
	pulumi.Input

	ToMethodArrayOutput() MethodArrayOutput
	ToMethodArrayOutputWithContext(context.Context) MethodArrayOutput
}

type MethodArray []MethodInput

func (MethodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Method)(nil)).Elem()
}

func (i MethodArray) ToMethodArrayOutput() MethodArrayOutput {
	return i.ToMethodArrayOutputWithContext(context.Background())
}

func (i MethodArray) ToMethodArrayOutputWithContext(ctx context.Context) MethodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodArrayOutput)
}

// MethodMapInput is an input type that accepts MethodMap and MethodMapOutput values.
// You can construct a concrete instance of `MethodMapInput` via:
//
//	MethodMap{ "key": MethodArgs{...} }
type MethodMapInput interface {
	pulumi.Input

	ToMethodMapOutput() MethodMapOutput
	ToMethodMapOutputWithContext(context.Context) MethodMapOutput
}

type MethodMap map[string]MethodInput

func (MethodMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Method)(nil)).Elem()
}

func (i MethodMap) ToMethodMapOutput() MethodMapOutput {
	return i.ToMethodMapOutputWithContext(context.Background())
}

func (i MethodMap) ToMethodMapOutputWithContext(ctx context.Context) MethodMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodMapOutput)
}

type MethodOutput struct{ *pulumi.OutputState }

func (MethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Method)(nil)).Elem()
}

func (o MethodOutput) ToMethodOutput() MethodOutput {
	return o
}

func (o MethodOutput) ToMethodOutputWithContext(ctx context.Context) MethodOutput {
	return o
}

func (o MethodOutput) ApiKeyRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Method) pulumi.BoolPtrOutput { return v.ApiKeyRequired }).(pulumi.BoolPtrOutput)
}

func (o MethodOutput) Authorization() pulumi.StringOutput {
	return o.ApplyT(func(v *Method) pulumi.StringOutput { return v.Authorization }).(pulumi.StringOutput)
}

func (o MethodOutput) AuthorizationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Method) pulumi.StringArrayOutput { return v.AuthorizationScopes }).(pulumi.StringArrayOutput)
}

func (o MethodOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Method) pulumi.StringPtrOutput { return v.AuthorizerId }).(pulumi.StringPtrOutput)
}

func (o MethodOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Method) pulumi.StringOutput { return v.HttpMethod }).(pulumi.StringOutput)
}

func (o MethodOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Method) pulumi.StringPtrOutput { return v.OperationName }).(pulumi.StringPtrOutput)
}

func (o MethodOutput) RequestModels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Method) pulumi.StringMapOutput { return v.RequestModels }).(pulumi.StringMapOutput)
}

func (o MethodOutput) RequestParameters() pulumi.BoolMapOutput {
	return o.ApplyT(func(v *Method) pulumi.BoolMapOutput { return v.RequestParameters }).(pulumi.BoolMapOutput)
}

func (o MethodOutput) RequestValidatorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Method) pulumi.StringPtrOutput { return v.RequestValidatorId }).(pulumi.StringPtrOutput)
}

func (o MethodOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Method) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

func (o MethodOutput) RestApi() pulumi.StringOutput {
	return o.ApplyT(func(v *Method) pulumi.StringOutput { return v.RestApi }).(pulumi.StringOutput)
}

type MethodArrayOutput struct{ *pulumi.OutputState }

func (MethodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Method)(nil)).Elem()
}

func (o MethodArrayOutput) ToMethodArrayOutput() MethodArrayOutput {
	return o
}

func (o MethodArrayOutput) ToMethodArrayOutputWithContext(ctx context.Context) MethodArrayOutput {
	return o
}

func (o MethodArrayOutput) Index(i pulumi.IntInput) MethodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Method {
		return vs[0].([]*Method)[vs[1].(int)]
	}).(MethodOutput)
}

type MethodMapOutput struct{ *pulumi.OutputState }

func (MethodMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Method)(nil)).Elem()
}

func (o MethodMapOutput) ToMethodMapOutput() MethodMapOutput {
	return o
}

func (o MethodMapOutput) ToMethodMapOutputWithContext(ctx context.Context) MethodMapOutput {
	return o
}

func (o MethodMapOutput) MapIndex(k pulumi.StringInput) MethodOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Method {
		return vs[0].(map[string]*Method)[vs[1].(string)]
	}).(MethodOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MethodInput)(nil)).Elem(), &Method{})
	pulumi.RegisterInputType(reflect.TypeOf((*MethodArrayInput)(nil)).Elem(), MethodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MethodMapInput)(nil)).Elem(), MethodMap{})
	pulumi.RegisterOutputType(MethodOutput{})
	pulumi.RegisterOutputType(MethodArrayOutput{})
	pulumi.RegisterOutputType(MethodMapOutput{})
}
