// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a domain name access association resource between an access association source and a private custom domain name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := apigateway.NewDomainNameAccessAssociation(ctx, "example", &apigateway.DomainNameAccessAssociationArgs{
//				AccessAssociationSource:     pulumi.Any(exampleAwsVpcEndpoint.Id),
//				AccessAssociationSourceType: pulumi.String("VPCE"),
//				DomainNameArn:               pulumi.Any(exampleAwsApiGatewayDomainName.Arn),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import API Gateway domain name acces associations as using their `arn`. For example:
//
// ```sh
// $ pulumi import aws:apigateway/domainNameAccessAssociation:DomainNameAccessAssociation example arn:aws:apigateway:us-west-2:123456789012:/domainnameaccessassociations/domainname/12qmzgp2.9m7ilski.test+hykg7a12e7/vpcesource/vpce-05de3f8f82740a748
// ```
type DomainNameAccessAssociation struct {
	pulumi.CustomResourceState

	// The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
	AccessAssociationSource pulumi.StringOutput `pulumi:"accessAssociationSource"`
	// The type of the domain name access association source. Valid values are `VPCE`.
	AccessAssociationSourceType pulumi.StringOutput `pulumi:"accessAssociationSourceType"`
	// ARN of the domain name access association.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ARN of the domain name.
	DomainNameArn pulumi.StringOutput `pulumi:"domainNameArn"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewDomainNameAccessAssociation registers a new resource with the given unique name, arguments, and options.
func NewDomainNameAccessAssociation(ctx *pulumi.Context,
	name string, args *DomainNameAccessAssociationArgs, opts ...pulumi.ResourceOption) (*DomainNameAccessAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessAssociationSource == nil {
		return nil, errors.New("invalid value for required argument 'AccessAssociationSource'")
	}
	if args.AccessAssociationSourceType == nil {
		return nil, errors.New("invalid value for required argument 'AccessAssociationSourceType'")
	}
	if args.DomainNameArn == nil {
		return nil, errors.New("invalid value for required argument 'DomainNameArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainNameAccessAssociation
	err := ctx.RegisterResource("aws:apigateway/domainNameAccessAssociation:DomainNameAccessAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainNameAccessAssociation gets an existing DomainNameAccessAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainNameAccessAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainNameAccessAssociationState, opts ...pulumi.ResourceOption) (*DomainNameAccessAssociation, error) {
	var resource DomainNameAccessAssociation
	err := ctx.ReadResource("aws:apigateway/domainNameAccessAssociation:DomainNameAccessAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainNameAccessAssociation resources.
type domainNameAccessAssociationState struct {
	// The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
	AccessAssociationSource *string `pulumi:"accessAssociationSource"`
	// The type of the domain name access association source. Valid values are `VPCE`.
	AccessAssociationSourceType *string `pulumi:"accessAssociationSourceType"`
	// ARN of the domain name access association.
	Arn *string `pulumi:"arn"`
	// The ARN of the domain name.
	DomainNameArn *string `pulumi:"domainNameArn"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type DomainNameAccessAssociationState struct {
	// The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
	AccessAssociationSource pulumi.StringPtrInput
	// The type of the domain name access association source. Valid values are `VPCE`.
	AccessAssociationSourceType pulumi.StringPtrInput
	// ARN of the domain name access association.
	Arn pulumi.StringPtrInput
	// The ARN of the domain name.
	DomainNameArn pulumi.StringPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (DomainNameAccessAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameAccessAssociationState)(nil)).Elem()
}

type domainNameAccessAssociationArgs struct {
	// The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
	AccessAssociationSource string `pulumi:"accessAssociationSource"`
	// The type of the domain name access association source. Valid values are `VPCE`.
	AccessAssociationSourceType string `pulumi:"accessAssociationSourceType"`
	// The ARN of the domain name.
	DomainNameArn string `pulumi:"domainNameArn"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DomainNameAccessAssociation resource.
type DomainNameAccessAssociationArgs struct {
	// The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
	AccessAssociationSource pulumi.StringInput
	// The type of the domain name access association source. Valid values are `VPCE`.
	AccessAssociationSourceType pulumi.StringInput
	// The ARN of the domain name.
	DomainNameArn pulumi.StringInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (DomainNameAccessAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameAccessAssociationArgs)(nil)).Elem()
}

type DomainNameAccessAssociationInput interface {
	pulumi.Input

	ToDomainNameAccessAssociationOutput() DomainNameAccessAssociationOutput
	ToDomainNameAccessAssociationOutputWithContext(ctx context.Context) DomainNameAccessAssociationOutput
}

func (*DomainNameAccessAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameAccessAssociation)(nil)).Elem()
}

func (i *DomainNameAccessAssociation) ToDomainNameAccessAssociationOutput() DomainNameAccessAssociationOutput {
	return i.ToDomainNameAccessAssociationOutputWithContext(context.Background())
}

func (i *DomainNameAccessAssociation) ToDomainNameAccessAssociationOutputWithContext(ctx context.Context) DomainNameAccessAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameAccessAssociationOutput)
}

// DomainNameAccessAssociationArrayInput is an input type that accepts DomainNameAccessAssociationArray and DomainNameAccessAssociationArrayOutput values.
// You can construct a concrete instance of `DomainNameAccessAssociationArrayInput` via:
//
//	DomainNameAccessAssociationArray{ DomainNameAccessAssociationArgs{...} }
type DomainNameAccessAssociationArrayInput interface {
	pulumi.Input

	ToDomainNameAccessAssociationArrayOutput() DomainNameAccessAssociationArrayOutput
	ToDomainNameAccessAssociationArrayOutputWithContext(context.Context) DomainNameAccessAssociationArrayOutput
}

type DomainNameAccessAssociationArray []DomainNameAccessAssociationInput

func (DomainNameAccessAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainNameAccessAssociation)(nil)).Elem()
}

func (i DomainNameAccessAssociationArray) ToDomainNameAccessAssociationArrayOutput() DomainNameAccessAssociationArrayOutput {
	return i.ToDomainNameAccessAssociationArrayOutputWithContext(context.Background())
}

func (i DomainNameAccessAssociationArray) ToDomainNameAccessAssociationArrayOutputWithContext(ctx context.Context) DomainNameAccessAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameAccessAssociationArrayOutput)
}

// DomainNameAccessAssociationMapInput is an input type that accepts DomainNameAccessAssociationMap and DomainNameAccessAssociationMapOutput values.
// You can construct a concrete instance of `DomainNameAccessAssociationMapInput` via:
//
//	DomainNameAccessAssociationMap{ "key": DomainNameAccessAssociationArgs{...} }
type DomainNameAccessAssociationMapInput interface {
	pulumi.Input

	ToDomainNameAccessAssociationMapOutput() DomainNameAccessAssociationMapOutput
	ToDomainNameAccessAssociationMapOutputWithContext(context.Context) DomainNameAccessAssociationMapOutput
}

type DomainNameAccessAssociationMap map[string]DomainNameAccessAssociationInput

func (DomainNameAccessAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainNameAccessAssociation)(nil)).Elem()
}

func (i DomainNameAccessAssociationMap) ToDomainNameAccessAssociationMapOutput() DomainNameAccessAssociationMapOutput {
	return i.ToDomainNameAccessAssociationMapOutputWithContext(context.Background())
}

func (i DomainNameAccessAssociationMap) ToDomainNameAccessAssociationMapOutputWithContext(ctx context.Context) DomainNameAccessAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameAccessAssociationMapOutput)
}

type DomainNameAccessAssociationOutput struct{ *pulumi.OutputState }

func (DomainNameAccessAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameAccessAssociation)(nil)).Elem()
}

func (o DomainNameAccessAssociationOutput) ToDomainNameAccessAssociationOutput() DomainNameAccessAssociationOutput {
	return o
}

func (o DomainNameAccessAssociationOutput) ToDomainNameAccessAssociationOutputWithContext(ctx context.Context) DomainNameAccessAssociationOutput {
	return o
}

// The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
func (o DomainNameAccessAssociationOutput) AccessAssociationSource() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainNameAccessAssociation) pulumi.StringOutput { return v.AccessAssociationSource }).(pulumi.StringOutput)
}

// The type of the domain name access association source. Valid values are `VPCE`.
func (o DomainNameAccessAssociationOutput) AccessAssociationSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainNameAccessAssociation) pulumi.StringOutput { return v.AccessAssociationSourceType }).(pulumi.StringOutput)
}

// ARN of the domain name access association.
func (o DomainNameAccessAssociationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainNameAccessAssociation) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ARN of the domain name.
func (o DomainNameAccessAssociationOutput) DomainNameArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainNameAccessAssociation) pulumi.StringOutput { return v.DomainNameArn }).(pulumi.StringOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DomainNameAccessAssociationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DomainNameAccessAssociation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o DomainNameAccessAssociationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DomainNameAccessAssociation) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type DomainNameAccessAssociationArrayOutput struct{ *pulumi.OutputState }

func (DomainNameAccessAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainNameAccessAssociation)(nil)).Elem()
}

func (o DomainNameAccessAssociationArrayOutput) ToDomainNameAccessAssociationArrayOutput() DomainNameAccessAssociationArrayOutput {
	return o
}

func (o DomainNameAccessAssociationArrayOutput) ToDomainNameAccessAssociationArrayOutputWithContext(ctx context.Context) DomainNameAccessAssociationArrayOutput {
	return o
}

func (o DomainNameAccessAssociationArrayOutput) Index(i pulumi.IntInput) DomainNameAccessAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainNameAccessAssociation {
		return vs[0].([]*DomainNameAccessAssociation)[vs[1].(int)]
	}).(DomainNameAccessAssociationOutput)
}

type DomainNameAccessAssociationMapOutput struct{ *pulumi.OutputState }

func (DomainNameAccessAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainNameAccessAssociation)(nil)).Elem()
}

func (o DomainNameAccessAssociationMapOutput) ToDomainNameAccessAssociationMapOutput() DomainNameAccessAssociationMapOutput {
	return o
}

func (o DomainNameAccessAssociationMapOutput) ToDomainNameAccessAssociationMapOutputWithContext(ctx context.Context) DomainNameAccessAssociationMapOutput {
	return o
}

func (o DomainNameAccessAssociationMapOutput) MapIndex(k pulumi.StringInput) DomainNameAccessAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainNameAccessAssociation {
		return vs[0].(map[string]*DomainNameAccessAssociation)[vs[1].(string)]
	}).(DomainNameAccessAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameAccessAssociationInput)(nil)).Elem(), &DomainNameAccessAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameAccessAssociationArrayInput)(nil)).Elem(), DomainNameAccessAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameAccessAssociationMapInput)(nil)).Elem(), DomainNameAccessAssociationMap{})
	pulumi.RegisterOutputType(DomainNameAccessAssociationOutput{})
	pulumi.RegisterOutputType(DomainNameAccessAssociationArrayOutput{})
	pulumi.RegisterOutputType(DomainNameAccessAssociationMapOutput{})
}
