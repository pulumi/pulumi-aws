// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an API Gateway Usage Plan.
//
// ## Import
//
// Using `pulumi import`, import AWS API Gateway Usage Plan using the `id`. For example:
//
// ```sh
// $ pulumi import aws:apigateway/usagePlan:UsagePlan myusageplan <usage_plan_id>
// ```
type UsagePlan struct {
	pulumi.CustomResourceState

	// Associated API stages of the usage plan.
	ApiStages UsagePlanApiStageArrayOutput `pulumi:"apiStages"`
	// ARN
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Description of a usage plan.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the usage plan.
	Name pulumi.StringOutput `pulumi:"name"`
	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	ProductCode pulumi.StringPtrOutput `pulumi:"productCode"`
	// Quota of the usage plan.
	QuotaSettings UsagePlanQuotaSettingsPtrOutput `pulumi:"quotaSettings"`
	Tags          pulumi.StringMapOutput          `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Throttling limits of the usage plan.
	ThrottleSettings UsagePlanThrottleSettingsPtrOutput `pulumi:"throttleSettings"`
}

// NewUsagePlan registers a new resource with the given unique name, arguments, and options.
func NewUsagePlan(ctx *pulumi.Context,
	name string, args *UsagePlanArgs, opts ...pulumi.ResourceOption) (*UsagePlan, error) {
	if args == nil {
		args = &UsagePlanArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UsagePlan
	err := ctx.RegisterResource("aws:apigateway/usagePlan:UsagePlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsagePlan gets an existing UsagePlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsagePlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsagePlanState, opts ...pulumi.ResourceOption) (*UsagePlan, error) {
	var resource UsagePlan
	err := ctx.ReadResource("aws:apigateway/usagePlan:UsagePlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsagePlan resources.
type usagePlanState struct {
	// Associated API stages of the usage plan.
	ApiStages []UsagePlanApiStage `pulumi:"apiStages"`
	// ARN
	Arn *string `pulumi:"arn"`
	// Description of a usage plan.
	Description *string `pulumi:"description"`
	// Name of the usage plan.
	Name *string `pulumi:"name"`
	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	ProductCode *string `pulumi:"productCode"`
	// Quota of the usage plan.
	QuotaSettings *UsagePlanQuotaSettings `pulumi:"quotaSettings"`
	Tags          map[string]string       `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Throttling limits of the usage plan.
	ThrottleSettings *UsagePlanThrottleSettings `pulumi:"throttleSettings"`
}

type UsagePlanState struct {
	// Associated API stages of the usage plan.
	ApiStages UsagePlanApiStageArrayInput
	// ARN
	Arn pulumi.StringPtrInput
	// Description of a usage plan.
	Description pulumi.StringPtrInput
	// Name of the usage plan.
	Name pulumi.StringPtrInput
	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	ProductCode pulumi.StringPtrInput
	// Quota of the usage plan.
	QuotaSettings UsagePlanQuotaSettingsPtrInput
	Tags          pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// Throttling limits of the usage plan.
	ThrottleSettings UsagePlanThrottleSettingsPtrInput
}

func (UsagePlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanState)(nil)).Elem()
}

type usagePlanArgs struct {
	// Associated API stages of the usage plan.
	ApiStages []UsagePlanApiStage `pulumi:"apiStages"`
	// Description of a usage plan.
	Description *string `pulumi:"description"`
	// Name of the usage plan.
	Name *string `pulumi:"name"`
	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	ProductCode *string `pulumi:"productCode"`
	// Quota of the usage plan.
	QuotaSettings *UsagePlanQuotaSettings `pulumi:"quotaSettings"`
	Tags          map[string]string       `pulumi:"tags"`
	// Throttling limits of the usage plan.
	ThrottleSettings *UsagePlanThrottleSettings `pulumi:"throttleSettings"`
}

// The set of arguments for constructing a UsagePlan resource.
type UsagePlanArgs struct {
	// Associated API stages of the usage plan.
	ApiStages UsagePlanApiStageArrayInput
	// Description of a usage plan.
	Description pulumi.StringPtrInput
	// Name of the usage plan.
	Name pulumi.StringPtrInput
	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	ProductCode pulumi.StringPtrInput
	// Quota of the usage plan.
	QuotaSettings UsagePlanQuotaSettingsPtrInput
	Tags          pulumi.StringMapInput
	// Throttling limits of the usage plan.
	ThrottleSettings UsagePlanThrottleSettingsPtrInput
}

func (UsagePlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanArgs)(nil)).Elem()
}

type UsagePlanInput interface {
	pulumi.Input

	ToUsagePlanOutput() UsagePlanOutput
	ToUsagePlanOutputWithContext(ctx context.Context) UsagePlanOutput
}

func (*UsagePlan) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlan)(nil)).Elem()
}

func (i *UsagePlan) ToUsagePlanOutput() UsagePlanOutput {
	return i.ToUsagePlanOutputWithContext(context.Background())
}

func (i *UsagePlan) ToUsagePlanOutputWithContext(ctx context.Context) UsagePlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanOutput)
}

// UsagePlanArrayInput is an input type that accepts UsagePlanArray and UsagePlanArrayOutput values.
// You can construct a concrete instance of `UsagePlanArrayInput` via:
//
//	UsagePlanArray{ UsagePlanArgs{...} }
type UsagePlanArrayInput interface {
	pulumi.Input

	ToUsagePlanArrayOutput() UsagePlanArrayOutput
	ToUsagePlanArrayOutputWithContext(context.Context) UsagePlanArrayOutput
}

type UsagePlanArray []UsagePlanInput

func (UsagePlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsagePlan)(nil)).Elem()
}

func (i UsagePlanArray) ToUsagePlanArrayOutput() UsagePlanArrayOutput {
	return i.ToUsagePlanArrayOutputWithContext(context.Background())
}

func (i UsagePlanArray) ToUsagePlanArrayOutputWithContext(ctx context.Context) UsagePlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanArrayOutput)
}

// UsagePlanMapInput is an input type that accepts UsagePlanMap and UsagePlanMapOutput values.
// You can construct a concrete instance of `UsagePlanMapInput` via:
//
//	UsagePlanMap{ "key": UsagePlanArgs{...} }
type UsagePlanMapInput interface {
	pulumi.Input

	ToUsagePlanMapOutput() UsagePlanMapOutput
	ToUsagePlanMapOutputWithContext(context.Context) UsagePlanMapOutput
}

type UsagePlanMap map[string]UsagePlanInput

func (UsagePlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsagePlan)(nil)).Elem()
}

func (i UsagePlanMap) ToUsagePlanMapOutput() UsagePlanMapOutput {
	return i.ToUsagePlanMapOutputWithContext(context.Background())
}

func (i UsagePlanMap) ToUsagePlanMapOutputWithContext(ctx context.Context) UsagePlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanMapOutput)
}

type UsagePlanOutput struct{ *pulumi.OutputState }

func (UsagePlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlan)(nil)).Elem()
}

func (o UsagePlanOutput) ToUsagePlanOutput() UsagePlanOutput {
	return o
}

func (o UsagePlanOutput) ToUsagePlanOutputWithContext(ctx context.Context) UsagePlanOutput {
	return o
}

// Associated API stages of the usage plan.
func (o UsagePlanOutput) ApiStages() UsagePlanApiStageArrayOutput {
	return o.ApplyT(func(v *UsagePlan) UsagePlanApiStageArrayOutput { return v.ApiStages }).(UsagePlanApiStageArrayOutput)
}

// ARN
func (o UsagePlanOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Description of a usage plan.
func (o UsagePlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the usage plan.
func (o UsagePlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
func (o UsagePlanOutput) ProductCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringPtrOutput { return v.ProductCode }).(pulumi.StringPtrOutput)
}

// Quota of the usage plan.
func (o UsagePlanOutput) QuotaSettings() UsagePlanQuotaSettingsPtrOutput {
	return o.ApplyT(func(v *UsagePlan) UsagePlanQuotaSettingsPtrOutput { return v.QuotaSettings }).(UsagePlanQuotaSettingsPtrOutput)
}

func (o UsagePlanOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o UsagePlanOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Throttling limits of the usage plan.
func (o UsagePlanOutput) ThrottleSettings() UsagePlanThrottleSettingsPtrOutput {
	return o.ApplyT(func(v *UsagePlan) UsagePlanThrottleSettingsPtrOutput { return v.ThrottleSettings }).(UsagePlanThrottleSettingsPtrOutput)
}

type UsagePlanArrayOutput struct{ *pulumi.OutputState }

func (UsagePlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsagePlan)(nil)).Elem()
}

func (o UsagePlanArrayOutput) ToUsagePlanArrayOutput() UsagePlanArrayOutput {
	return o
}

func (o UsagePlanArrayOutput) ToUsagePlanArrayOutputWithContext(ctx context.Context) UsagePlanArrayOutput {
	return o
}

func (o UsagePlanArrayOutput) Index(i pulumi.IntInput) UsagePlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UsagePlan {
		return vs[0].([]*UsagePlan)[vs[1].(int)]
	}).(UsagePlanOutput)
}

type UsagePlanMapOutput struct{ *pulumi.OutputState }

func (UsagePlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsagePlan)(nil)).Elem()
}

func (o UsagePlanMapOutput) ToUsagePlanMapOutput() UsagePlanMapOutput {
	return o
}

func (o UsagePlanMapOutput) ToUsagePlanMapOutputWithContext(ctx context.Context) UsagePlanMapOutput {
	return o
}

func (o UsagePlanMapOutput) MapIndex(k pulumi.StringInput) UsagePlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UsagePlan {
		return vs[0].(map[string]*UsagePlan)[vs[1].(string)]
	}).(UsagePlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsagePlanInput)(nil)).Elem(), &UsagePlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsagePlanArrayInput)(nil)).Elem(), UsagePlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsagePlanMapInput)(nil)).Elem(), UsagePlanMap{})
	pulumi.RegisterOutputType(UsagePlanOutput{})
	pulumi.RegisterOutputType(UsagePlanArrayOutput{})
	pulumi.RegisterOutputType(UsagePlanMapOutput{})
}
