// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an API Gateway Deployment.
// 
// > **Note:** Depends on having `aws_api_gateway_integration` inside your rest api (which in turn depends on `aws_api_gateway_method`). To avoid race conditions
// you might need to add an explicit `depends_on = ["aws_api_gateway_integration.name"]`.
type Deployment struct {
	s *pulumi.ResourceState
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOpt) (*Deployment, error) {
	if args == nil || args.RestApi == nil {
		return nil, errors.New("missing required argument 'RestApi'")
	}
	if args == nil || args.StageName == nil {
		return nil, errors.New("missing required argument 'StageName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["restApi"] = nil
		inputs["stageDescription"] = nil
		inputs["stageName"] = nil
		inputs["variables"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["restApi"] = args.RestApi
		inputs["stageDescription"] = args.StageDescription
		inputs["stageName"] = args.StageName
		inputs["variables"] = args.Variables
	}
	inputs["createdDate"] = nil
	inputs["executionArn"] = nil
	inputs["invokeUrl"] = nil
	s, err := ctx.RegisterResource("aws:apigateway/deployment:Deployment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Deployment{s: s}, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DeploymentState, opts ...pulumi.ResourceOpt) (*Deployment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["createdDate"] = state.CreatedDate
		inputs["description"] = state.Description
		inputs["executionArn"] = state.ExecutionArn
		inputs["invokeUrl"] = state.InvokeUrl
		inputs["restApi"] = state.RestApi
		inputs["stageDescription"] = state.StageDescription
		inputs["stageName"] = state.StageName
		inputs["variables"] = state.Variables
	}
	s, err := ctx.ReadResource("aws:apigateway/deployment:Deployment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Deployment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Deployment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Deployment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The creation date of the deployment
func (r *Deployment) CreatedDate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdDate"])
}

// The description of the deployment
func (r *Deployment) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The execution ARN to be used in [`lambda_permission`](https://www.terraform.io/docs/providers/aws/r/lambda_permission.html)'s `source_arn`
// when allowing API Gateway to invoke a Lambda function,
// e.g. `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
func (r *Deployment) ExecutionArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["executionArn"])
}

// The URL to invoke the API pointing to the stage,
// e.g. `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
func (r *Deployment) InvokeUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["invokeUrl"])
}

// The ID of the associated REST API
func (r *Deployment) RestApi() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["restApi"])
}

// The description of the stage
func (r *Deployment) StageDescription() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["stageDescription"])
}

// The name of the stage. If the specified stage already exists, it will be updated to point to the new deployment. If the stage does not exist, a new one will be created and point to this deployment. Use `""` to point at the default stage.
func (r *Deployment) StageName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["stageName"])
}

// A map that defines variables for the stage
func (r *Deployment) Variables() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["variables"])
}

// Input properties used for looking up and filtering Deployment resources.
type DeploymentState struct {
	// The creation date of the deployment
	CreatedDate interface{}
	// The description of the deployment
	Description interface{}
	// The execution ARN to be used in [`lambda_permission`](https://www.terraform.io/docs/providers/aws/r/lambda_permission.html)'s `source_arn`
	// when allowing API Gateway to invoke a Lambda function,
	// e.g. `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
	ExecutionArn interface{}
	// The URL to invoke the API pointing to the stage,
	// e.g. `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
	InvokeUrl interface{}
	// The ID of the associated REST API
	RestApi interface{}
	// The description of the stage
	StageDescription interface{}
	// The name of the stage. If the specified stage already exists, it will be updated to point to the new deployment. If the stage does not exist, a new one will be created and point to this deployment. Use `""` to point at the default stage.
	StageName interface{}
	// A map that defines variables for the stage
	Variables interface{}
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	// The description of the deployment
	Description interface{}
	// The ID of the associated REST API
	RestApi interface{}
	// The description of the stage
	StageDescription interface{}
	// The name of the stage. If the specified stage already exists, it will be updated to point to the new deployment. If the stage does not exist, a new one will be created and point to this deployment. Use `""` to point at the default stage.
	StageName interface{}
	// A map that defines variables for the stage
	Variables interface{}
}
