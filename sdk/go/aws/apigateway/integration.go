// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Integration struct {
	pulumi.CustomResourceState

	CacheKeyParameters    pulumi.StringArrayOutput      `pulumi:"cacheKeyParameters"`
	CacheNamespace        pulumi.StringOutput           `pulumi:"cacheNamespace"`
	ConnectionId          pulumi.StringPtrOutput        `pulumi:"connectionId"`
	ConnectionType        pulumi.StringPtrOutput        `pulumi:"connectionType"`
	ContentHandling       pulumi.StringPtrOutput        `pulumi:"contentHandling"`
	Credentials           pulumi.StringPtrOutput        `pulumi:"credentials"`
	HttpMethod            pulumi.StringOutput           `pulumi:"httpMethod"`
	IntegrationHttpMethod pulumi.StringPtrOutput        `pulumi:"integrationHttpMethod"`
	PassthroughBehavior   pulumi.StringOutput           `pulumi:"passthroughBehavior"`
	RequestParameters     pulumi.StringMapOutput        `pulumi:"requestParameters"`
	RequestTemplates      pulumi.StringMapOutput        `pulumi:"requestTemplates"`
	ResourceId            pulumi.StringOutput           `pulumi:"resourceId"`
	RestApi               pulumi.StringOutput           `pulumi:"restApi"`
	TimeoutMilliseconds   pulumi.IntPtrOutput           `pulumi:"timeoutMilliseconds"`
	TlsConfig             IntegrationTlsConfigPtrOutput `pulumi:"tlsConfig"`
	Type                  pulumi.StringOutput           `pulumi:"type"`
	Uri                   pulumi.StringPtrOutput        `pulumi:"uri"`
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOption) (*Integration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Integration
	err := ctx.RegisterResource("aws:apigateway/integration:Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationState, opts ...pulumi.ResourceOption) (*Integration, error) {
	var resource Integration
	err := ctx.ReadResource("aws:apigateway/integration:Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Integration resources.
type integrationState struct {
	CacheKeyParameters    []string              `pulumi:"cacheKeyParameters"`
	CacheNamespace        *string               `pulumi:"cacheNamespace"`
	ConnectionId          *string               `pulumi:"connectionId"`
	ConnectionType        *string               `pulumi:"connectionType"`
	ContentHandling       *string               `pulumi:"contentHandling"`
	Credentials           *string               `pulumi:"credentials"`
	HttpMethod            *string               `pulumi:"httpMethod"`
	IntegrationHttpMethod *string               `pulumi:"integrationHttpMethod"`
	PassthroughBehavior   *string               `pulumi:"passthroughBehavior"`
	RequestParameters     map[string]string     `pulumi:"requestParameters"`
	RequestTemplates      map[string]string     `pulumi:"requestTemplates"`
	ResourceId            *string               `pulumi:"resourceId"`
	RestApi               interface{}           `pulumi:"restApi"`
	TimeoutMilliseconds   *int                  `pulumi:"timeoutMilliseconds"`
	TlsConfig             *IntegrationTlsConfig `pulumi:"tlsConfig"`
	Type                  *string               `pulumi:"type"`
	Uri                   *string               `pulumi:"uri"`
}

type IntegrationState struct {
	CacheKeyParameters    pulumi.StringArrayInput
	CacheNamespace        pulumi.StringPtrInput
	ConnectionId          pulumi.StringPtrInput
	ConnectionType        pulumi.StringPtrInput
	ContentHandling       pulumi.StringPtrInput
	Credentials           pulumi.StringPtrInput
	HttpMethod            pulumi.StringPtrInput
	IntegrationHttpMethod pulumi.StringPtrInput
	PassthroughBehavior   pulumi.StringPtrInput
	RequestParameters     pulumi.StringMapInput
	RequestTemplates      pulumi.StringMapInput
	ResourceId            pulumi.StringPtrInput
	RestApi               pulumi.Input
	TimeoutMilliseconds   pulumi.IntPtrInput
	TlsConfig             IntegrationTlsConfigPtrInput
	Type                  pulumi.StringPtrInput
	Uri                   pulumi.StringPtrInput
}

func (IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationState)(nil)).Elem()
}

type integrationArgs struct {
	CacheKeyParameters    []string              `pulumi:"cacheKeyParameters"`
	CacheNamespace        *string               `pulumi:"cacheNamespace"`
	ConnectionId          *string               `pulumi:"connectionId"`
	ConnectionType        *string               `pulumi:"connectionType"`
	ContentHandling       *string               `pulumi:"contentHandling"`
	Credentials           *string               `pulumi:"credentials"`
	HttpMethod            string                `pulumi:"httpMethod"`
	IntegrationHttpMethod *string               `pulumi:"integrationHttpMethod"`
	PassthroughBehavior   *string               `pulumi:"passthroughBehavior"`
	RequestParameters     map[string]string     `pulumi:"requestParameters"`
	RequestTemplates      map[string]string     `pulumi:"requestTemplates"`
	ResourceId            string                `pulumi:"resourceId"`
	RestApi               interface{}           `pulumi:"restApi"`
	TimeoutMilliseconds   *int                  `pulumi:"timeoutMilliseconds"`
	TlsConfig             *IntegrationTlsConfig `pulumi:"tlsConfig"`
	Type                  string                `pulumi:"type"`
	Uri                   *string               `pulumi:"uri"`
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	CacheKeyParameters    pulumi.StringArrayInput
	CacheNamespace        pulumi.StringPtrInput
	ConnectionId          pulumi.StringPtrInput
	ConnectionType        pulumi.StringPtrInput
	ContentHandling       pulumi.StringPtrInput
	Credentials           pulumi.StringPtrInput
	HttpMethod            pulumi.StringInput
	IntegrationHttpMethod pulumi.StringPtrInput
	PassthroughBehavior   pulumi.StringPtrInput
	RequestParameters     pulumi.StringMapInput
	RequestTemplates      pulumi.StringMapInput
	ResourceId            pulumi.StringInput
	RestApi               pulumi.Input
	TimeoutMilliseconds   pulumi.IntPtrInput
	TlsConfig             IntegrationTlsConfigPtrInput
	Type                  pulumi.StringInput
	Uri                   pulumi.StringPtrInput
}

func (IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationArgs)(nil)).Elem()
}

type IntegrationInput interface {
	pulumi.Input

	ToIntegrationOutput() IntegrationOutput
	ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput
}

func (*Integration) ElementType() reflect.Type {
	return reflect.TypeOf((**Integration)(nil)).Elem()
}

func (i *Integration) ToIntegrationOutput() IntegrationOutput {
	return i.ToIntegrationOutputWithContext(context.Background())
}

func (i *Integration) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOutput)
}

// IntegrationArrayInput is an input type that accepts IntegrationArray and IntegrationArrayOutput values.
// You can construct a concrete instance of `IntegrationArrayInput` via:
//
//	IntegrationArray{ IntegrationArgs{...} }
type IntegrationArrayInput interface {
	pulumi.Input

	ToIntegrationArrayOutput() IntegrationArrayOutput
	ToIntegrationArrayOutputWithContext(context.Context) IntegrationArrayOutput
}

type IntegrationArray []IntegrationInput

func (IntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Integration)(nil)).Elem()
}

func (i IntegrationArray) ToIntegrationArrayOutput() IntegrationArrayOutput {
	return i.ToIntegrationArrayOutputWithContext(context.Background())
}

func (i IntegrationArray) ToIntegrationArrayOutputWithContext(ctx context.Context) IntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationArrayOutput)
}

// IntegrationMapInput is an input type that accepts IntegrationMap and IntegrationMapOutput values.
// You can construct a concrete instance of `IntegrationMapInput` via:
//
//	IntegrationMap{ "key": IntegrationArgs{...} }
type IntegrationMapInput interface {
	pulumi.Input

	ToIntegrationMapOutput() IntegrationMapOutput
	ToIntegrationMapOutputWithContext(context.Context) IntegrationMapOutput
}

type IntegrationMap map[string]IntegrationInput

func (IntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Integration)(nil)).Elem()
}

func (i IntegrationMap) ToIntegrationMapOutput() IntegrationMapOutput {
	return i.ToIntegrationMapOutputWithContext(context.Background())
}

func (i IntegrationMap) ToIntegrationMapOutputWithContext(ctx context.Context) IntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMapOutput)
}

type IntegrationOutput struct{ *pulumi.OutputState }

func (IntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Integration)(nil)).Elem()
}

func (o IntegrationOutput) ToIntegrationOutput() IntegrationOutput {
	return o
}

func (o IntegrationOutput) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return o
}

func (o IntegrationOutput) CacheKeyParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringArrayOutput { return v.CacheKeyParameters }).(pulumi.StringArrayOutput)
}

func (o IntegrationOutput) CacheNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.CacheNamespace }).(pulumi.StringOutput)
}

func (o IntegrationOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

func (o IntegrationOutput) ConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.ConnectionType }).(pulumi.StringPtrOutput)
}

func (o IntegrationOutput) ContentHandling() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.ContentHandling }).(pulumi.StringPtrOutput)
}

func (o IntegrationOutput) Credentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.Credentials }).(pulumi.StringPtrOutput)
}

func (o IntegrationOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.HttpMethod }).(pulumi.StringOutput)
}

func (o IntegrationOutput) IntegrationHttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.IntegrationHttpMethod }).(pulumi.StringPtrOutput)
}

func (o IntegrationOutput) PassthroughBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.PassthroughBehavior }).(pulumi.StringOutput)
}

func (o IntegrationOutput) RequestParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringMapOutput { return v.RequestParameters }).(pulumi.StringMapOutput)
}

func (o IntegrationOutput) RequestTemplates() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringMapOutput { return v.RequestTemplates }).(pulumi.StringMapOutput)
}

func (o IntegrationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

func (o IntegrationOutput) RestApi() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.RestApi }).(pulumi.StringOutput)
}

func (o IntegrationOutput) TimeoutMilliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.IntPtrOutput { return v.TimeoutMilliseconds }).(pulumi.IntPtrOutput)
}

func (o IntegrationOutput) TlsConfig() IntegrationTlsConfigPtrOutput {
	return o.ApplyT(func(v *Integration) IntegrationTlsConfigPtrOutput { return v.TlsConfig }).(IntegrationTlsConfigPtrOutput)
}

func (o IntegrationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o IntegrationOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.Uri }).(pulumi.StringPtrOutput)
}

type IntegrationArrayOutput struct{ *pulumi.OutputState }

func (IntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Integration)(nil)).Elem()
}

func (o IntegrationArrayOutput) ToIntegrationArrayOutput() IntegrationArrayOutput {
	return o
}

func (o IntegrationArrayOutput) ToIntegrationArrayOutputWithContext(ctx context.Context) IntegrationArrayOutput {
	return o
}

func (o IntegrationArrayOutput) Index(i pulumi.IntInput) IntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Integration {
		return vs[0].([]*Integration)[vs[1].(int)]
	}).(IntegrationOutput)
}

type IntegrationMapOutput struct{ *pulumi.OutputState }

func (IntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Integration)(nil)).Elem()
}

func (o IntegrationMapOutput) ToIntegrationMapOutput() IntegrationMapOutput {
	return o
}

func (o IntegrationMapOutput) ToIntegrationMapOutputWithContext(ctx context.Context) IntegrationMapOutput {
	return o
}

func (o IntegrationMapOutput) MapIndex(k pulumi.StringInput) IntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Integration {
		return vs[0].(map[string]*Integration)[vs[1].(string)]
	}).(IntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationInput)(nil)).Elem(), &Integration{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationArrayInput)(nil)).Elem(), IntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationMapInput)(nil)).Elem(), IntegrationMap{})
	pulumi.RegisterOutputType(IntegrationOutput{})
	pulumi.RegisterOutputType(IntegrationArrayOutput{})
	pulumi.RegisterOutputType(IntegrationMapOutput{})
}
