// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an HTTP Method Integration for an API Gateway Integration.
type Integration struct {
	s *pulumi.ResourceState
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOpt) (*Integration, error) {
	if args == nil || args.HttpMethod == nil {
		return nil, errors.New("missing required argument 'HttpMethod'")
	}
	if args == nil || args.ResourceId == nil {
		return nil, errors.New("missing required argument 'ResourceId'")
	}
	if args == nil || args.RestApi == nil {
		return nil, errors.New("missing required argument 'RestApi'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cacheKeyParameters"] = nil
		inputs["cacheNamespace"] = nil
		inputs["connectionId"] = nil
		inputs["connectionType"] = nil
		inputs["contentHandling"] = nil
		inputs["credentials"] = nil
		inputs["httpMethod"] = nil
		inputs["integrationHttpMethod"] = nil
		inputs["passthroughBehavior"] = nil
		inputs["requestParameters"] = nil
		inputs["requestTemplates"] = nil
		inputs["resourceId"] = nil
		inputs["restApi"] = nil
		inputs["timeoutMilliseconds"] = nil
		inputs["type"] = nil
		inputs["uri"] = nil
	} else {
		inputs["cacheKeyParameters"] = args.CacheKeyParameters
		inputs["cacheNamespace"] = args.CacheNamespace
		inputs["connectionId"] = args.ConnectionId
		inputs["connectionType"] = args.ConnectionType
		inputs["contentHandling"] = args.ContentHandling
		inputs["credentials"] = args.Credentials
		inputs["httpMethod"] = args.HttpMethod
		inputs["integrationHttpMethod"] = args.IntegrationHttpMethod
		inputs["passthroughBehavior"] = args.PassthroughBehavior
		inputs["requestParameters"] = args.RequestParameters
		inputs["requestTemplates"] = args.RequestTemplates
		inputs["resourceId"] = args.ResourceId
		inputs["restApi"] = args.RestApi
		inputs["timeoutMilliseconds"] = args.TimeoutMilliseconds
		inputs["type"] = args.Type
		inputs["uri"] = args.Uri
	}
	s, err := ctx.RegisterResource("aws:apigateway/integration:Integration", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Integration{s: s}, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IntegrationState, opts ...pulumi.ResourceOpt) (*Integration, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cacheKeyParameters"] = state.CacheKeyParameters
		inputs["cacheNamespace"] = state.CacheNamespace
		inputs["connectionId"] = state.ConnectionId
		inputs["connectionType"] = state.ConnectionType
		inputs["contentHandling"] = state.ContentHandling
		inputs["credentials"] = state.Credentials
		inputs["httpMethod"] = state.HttpMethod
		inputs["integrationHttpMethod"] = state.IntegrationHttpMethod
		inputs["passthroughBehavior"] = state.PassthroughBehavior
		inputs["requestParameters"] = state.RequestParameters
		inputs["requestTemplates"] = state.RequestTemplates
		inputs["resourceId"] = state.ResourceId
		inputs["restApi"] = state.RestApi
		inputs["timeoutMilliseconds"] = state.TimeoutMilliseconds
		inputs["type"] = state.Type
		inputs["uri"] = state.Uri
	}
	s, err := ctx.ReadResource("aws:apigateway/integration:Integration", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Integration{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Integration) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Integration) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A list of cache key parameters for the integration.
func (r *Integration) CacheKeyParameters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["cacheKeyParameters"])
}

// The integration's cache namespace.
func (r *Integration) CacheNamespace() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cacheNamespace"])
}

// The id of the VpcLink used for the integration. **Required** if `connection_type` is `VPC_LINK`
func (r *Integration) ConnectionId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["connectionId"])
}

// The integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
func (r *Integration) ConnectionType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["connectionType"])
}

// Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
func (r *Integration) ContentHandling() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["contentHandling"])
}

// The credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
func (r *Integration) Credentials() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["credentials"])
}

// The HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
// when calling the associated resource.
func (r *Integration) HttpMethod() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["httpMethod"])
}

// The integration HTTP method
// (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`) specifying how API Gateway will interact with the back end.
// **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
// Not all methods are compatible with all `AWS` integrations.
// e.g. Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
func (r *Integration) IntegrationHttpMethod() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["integrationHttpMethod"])
}

// The integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `request_templates` is used.
func (r *Integration) PassthroughBehavior() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["passthroughBehavior"])
}

// A map of request query string parameters and headers that should be passed to the backend responder.
// For example: `request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
func (r *Integration) RequestParameters() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["requestParameters"])
}

// A map of the integration's request templates.
func (r *Integration) RequestTemplates() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["requestTemplates"])
}

// The API resource ID.
func (r *Integration) ResourceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceId"])
}

// The ID of the associated REST API.
func (r *Integration) RestApi() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["restApi"])
}

// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
func (r *Integration) TimeoutMilliseconds() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["timeoutMilliseconds"])
}

// The integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connection_type` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
func (r *Integration) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// The input's URI (HTTP, AWS). **Required** if `type` is `HTTP` or `AWS`.
// For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
// e.g. `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`
func (r *Integration) Uri() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["uri"])
}

// Input properties used for looking up and filtering Integration resources.
type IntegrationState struct {
	// A list of cache key parameters for the integration.
	CacheKeyParameters interface{}
	// The integration's cache namespace.
	CacheNamespace interface{}
	// The id of the VpcLink used for the integration. **Required** if `connection_type` is `VPC_LINK`
	ConnectionId interface{}
	// The integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
	ConnectionType interface{}
	// Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling interface{}
	// The credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
	Credentials interface{}
	// The HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
	// when calling the associated resource.
	HttpMethod interface{}
	// The integration HTTP method
	// (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`) specifying how API Gateway will interact with the back end.
	// **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// Not all methods are compatible with all `AWS` integrations.
	// e.g. Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
	IntegrationHttpMethod interface{}
	// The integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `request_templates` is used.
	PassthroughBehavior interface{}
	// A map of request query string parameters and headers that should be passed to the backend responder.
	// For example: `request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
	RequestParameters interface{}
	// A map of the integration's request templates.
	RequestTemplates interface{}
	// The API resource ID.
	ResourceId interface{}
	// The ID of the associated REST API.
	RestApi interface{}
	// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
	TimeoutMilliseconds interface{}
	// The integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connection_type` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
	Type interface{}
	// The input's URI (HTTP, AWS). **Required** if `type` is `HTTP` or `AWS`.
	// For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
	// e.g. `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`
	Uri interface{}
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	// A list of cache key parameters for the integration.
	CacheKeyParameters interface{}
	// The integration's cache namespace.
	CacheNamespace interface{}
	// The id of the VpcLink used for the integration. **Required** if `connection_type` is `VPC_LINK`
	ConnectionId interface{}
	// The integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
	ConnectionType interface{}
	// Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling interface{}
	// The credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
	Credentials interface{}
	// The HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
	// when calling the associated resource.
	HttpMethod interface{}
	// The integration HTTP method
	// (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`) specifying how API Gateway will interact with the back end.
	// **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// Not all methods are compatible with all `AWS` integrations.
	// e.g. Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
	IntegrationHttpMethod interface{}
	// The integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `request_templates` is used.
	PassthroughBehavior interface{}
	// A map of request query string parameters and headers that should be passed to the backend responder.
	// For example: `request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
	RequestParameters interface{}
	// A map of the integration's request templates.
	RequestTemplates interface{}
	// The API resource ID.
	ResourceId interface{}
	// The ID of the associated REST API.
	RestApi interface{}
	// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
	TimeoutMilliseconds interface{}
	// The integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connection_type` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
	Type interface{}
	// The input's URI (HTTP, AWS). **Required** if `type` is `HTTP` or `AWS`.
	// For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
	// e.g. `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`
	Uri interface{}
}
