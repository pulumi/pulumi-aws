// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TableReplica struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput    `pulumi:"arn"`
	GlobalTableArn      pulumi.StringOutput    `pulumi:"globalTableArn"`
	KmsKeyArn           pulumi.StringOutput    `pulumi:"kmsKeyArn"`
	PointInTimeRecovery pulumi.BoolPtrOutput   `pulumi:"pointInTimeRecovery"`
	TableClassOverride  pulumi.StringPtrOutput `pulumi:"tableClassOverride"`
	Tags                pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewTableReplica registers a new resource with the given unique name, arguments, and options.
func NewTableReplica(ctx *pulumi.Context,
	name string, args *TableReplicaArgs, opts ...pulumi.ResourceOption) (*TableReplica, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalTableArn == nil {
		return nil, errors.New("invalid value for required argument 'GlobalTableArn'")
	}
	var resource TableReplica
	err := ctx.RegisterResource("aws:dynamodb/tableReplica:TableReplica", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableReplica gets an existing TableReplica resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableReplica(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableReplicaState, opts ...pulumi.ResourceOption) (*TableReplica, error) {
	var resource TableReplica
	err := ctx.ReadResource("aws:dynamodb/tableReplica:TableReplica", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableReplica resources.
type tableReplicaState struct {
	Arn                 *string           `pulumi:"arn"`
	GlobalTableArn      *string           `pulumi:"globalTableArn"`
	KmsKeyArn           *string           `pulumi:"kmsKeyArn"`
	PointInTimeRecovery *bool             `pulumi:"pointInTimeRecovery"`
	TableClassOverride  *string           `pulumi:"tableClassOverride"`
	Tags                map[string]string `pulumi:"tags"`
	TagsAll             map[string]string `pulumi:"tagsAll"`
}

type TableReplicaState struct {
	Arn                 pulumi.StringPtrInput
	GlobalTableArn      pulumi.StringPtrInput
	KmsKeyArn           pulumi.StringPtrInput
	PointInTimeRecovery pulumi.BoolPtrInput
	TableClassOverride  pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
}

func (TableReplicaState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableReplicaState)(nil)).Elem()
}

type tableReplicaArgs struct {
	GlobalTableArn      string            `pulumi:"globalTableArn"`
	KmsKeyArn           *string           `pulumi:"kmsKeyArn"`
	PointInTimeRecovery *bool             `pulumi:"pointInTimeRecovery"`
	TableClassOverride  *string           `pulumi:"tableClassOverride"`
	Tags                map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a TableReplica resource.
type TableReplicaArgs struct {
	GlobalTableArn      pulumi.StringInput
	KmsKeyArn           pulumi.StringPtrInput
	PointInTimeRecovery pulumi.BoolPtrInput
	TableClassOverride  pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
}

func (TableReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableReplicaArgs)(nil)).Elem()
}

type TableReplicaInput interface {
	pulumi.Input

	ToTableReplicaOutput() TableReplicaOutput
	ToTableReplicaOutputWithContext(ctx context.Context) TableReplicaOutput
}

func (*TableReplica) ElementType() reflect.Type {
	return reflect.TypeOf((**TableReplica)(nil)).Elem()
}

func (i *TableReplica) ToTableReplicaOutput() TableReplicaOutput {
	return i.ToTableReplicaOutputWithContext(context.Background())
}

func (i *TableReplica) ToTableReplicaOutputWithContext(ctx context.Context) TableReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicaOutput)
}

// TableReplicaArrayInput is an input type that accepts TableReplicaArray and TableReplicaArrayOutput values.
// You can construct a concrete instance of `TableReplicaArrayInput` via:
//
//	TableReplicaArray{ TableReplicaArgs{...} }
type TableReplicaArrayInput interface {
	pulumi.Input

	ToTableReplicaArrayOutput() TableReplicaArrayOutput
	ToTableReplicaArrayOutputWithContext(context.Context) TableReplicaArrayOutput
}

type TableReplicaArray []TableReplicaInput

func (TableReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableReplica)(nil)).Elem()
}

func (i TableReplicaArray) ToTableReplicaArrayOutput() TableReplicaArrayOutput {
	return i.ToTableReplicaArrayOutputWithContext(context.Background())
}

func (i TableReplicaArray) ToTableReplicaArrayOutputWithContext(ctx context.Context) TableReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicaArrayOutput)
}

// TableReplicaMapInput is an input type that accepts TableReplicaMap and TableReplicaMapOutput values.
// You can construct a concrete instance of `TableReplicaMapInput` via:
//
//	TableReplicaMap{ "key": TableReplicaArgs{...} }
type TableReplicaMapInput interface {
	pulumi.Input

	ToTableReplicaMapOutput() TableReplicaMapOutput
	ToTableReplicaMapOutputWithContext(context.Context) TableReplicaMapOutput
}

type TableReplicaMap map[string]TableReplicaInput

func (TableReplicaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableReplica)(nil)).Elem()
}

func (i TableReplicaMap) ToTableReplicaMapOutput() TableReplicaMapOutput {
	return i.ToTableReplicaMapOutputWithContext(context.Background())
}

func (i TableReplicaMap) ToTableReplicaMapOutputWithContext(ctx context.Context) TableReplicaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicaMapOutput)
}

type TableReplicaOutput struct{ *pulumi.OutputState }

func (TableReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableReplica)(nil)).Elem()
}

func (o TableReplicaOutput) ToTableReplicaOutput() TableReplicaOutput {
	return o
}

func (o TableReplicaOutput) ToTableReplicaOutputWithContext(ctx context.Context) TableReplicaOutput {
	return o
}

func (o TableReplicaOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *TableReplica) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TableReplicaOutput) GlobalTableArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TableReplica) pulumi.StringOutput { return v.GlobalTableArn }).(pulumi.StringOutput)
}

func (o TableReplicaOutput) KmsKeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TableReplica) pulumi.StringOutput { return v.KmsKeyArn }).(pulumi.StringOutput)
}

func (o TableReplicaOutput) PointInTimeRecovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableReplica) pulumi.BoolPtrOutput { return v.PointInTimeRecovery }).(pulumi.BoolPtrOutput)
}

func (o TableReplicaOutput) TableClassOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableReplica) pulumi.StringPtrOutput { return v.TableClassOverride }).(pulumi.StringPtrOutput)
}

func (o TableReplicaOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TableReplica) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o TableReplicaOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TableReplica) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type TableReplicaArrayOutput struct{ *pulumi.OutputState }

func (TableReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableReplica)(nil)).Elem()
}

func (o TableReplicaArrayOutput) ToTableReplicaArrayOutput() TableReplicaArrayOutput {
	return o
}

func (o TableReplicaArrayOutput) ToTableReplicaArrayOutputWithContext(ctx context.Context) TableReplicaArrayOutput {
	return o
}

func (o TableReplicaArrayOutput) Index(i pulumi.IntInput) TableReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TableReplica {
		return vs[0].([]*TableReplica)[vs[1].(int)]
	}).(TableReplicaOutput)
}

type TableReplicaMapOutput struct{ *pulumi.OutputState }

func (TableReplicaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableReplica)(nil)).Elem()
}

func (o TableReplicaMapOutput) ToTableReplicaMapOutput() TableReplicaMapOutput {
	return o
}

func (o TableReplicaMapOutput) ToTableReplicaMapOutputWithContext(ctx context.Context) TableReplicaMapOutput {
	return o
}

func (o TableReplicaMapOutput) MapIndex(k pulumi.StringInput) TableReplicaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TableReplica {
		return vs[0].(map[string]*TableReplica)[vs[1].(string)]
	}).(TableReplicaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableReplicaInput)(nil)).Elem(), &TableReplica{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReplicaArrayInput)(nil)).Elem(), TableReplicaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReplicaMapInput)(nil)).Elem(), TableReplicaMap{})
	pulumi.RegisterOutputType(TableReplicaOutput{})
	pulumi.RegisterOutputType(TableReplicaArrayOutput{})
	pulumi.RegisterOutputType(TableReplicaMapOutput{})
}
