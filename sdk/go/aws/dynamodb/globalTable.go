// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage a DynamoDB Global Table. These are layered on top of existing DynamoDB Tables.
// 
// ~> Note: There are many restrictions before you can properly create DynamoDB Global Tables in multiple regions. See the [AWS DynamoDB Global Table Requirements](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables_reqs_bestpractices.html) for more information.
type GlobalTable struct {
	s *pulumi.ResourceState
}

// NewGlobalTable registers a new resource with the given unique name, arguments, and options.
func NewGlobalTable(ctx *pulumi.Context,
	name string, args *GlobalTableArgs, opts ...pulumi.ResourceOpt) (*GlobalTable, error) {
	if args == nil || args.Replicas == nil {
		return nil, errors.New("missing required argument 'Replicas'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["replicas"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["replicas"] = args.Replicas
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:dynamodb/globalTable:GlobalTable", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GlobalTable{s: s}, nil
}

// GetGlobalTable gets an existing GlobalTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalTable(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GlobalTableState, opts ...pulumi.ResourceOpt) (*GlobalTable, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["name"] = state.Name
		inputs["replicas"] = state.Replicas
	}
	s, err := ctx.ReadResource("aws:dynamodb/globalTable:GlobalTable", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GlobalTable{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GlobalTable) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GlobalTable) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The ARN of the DynamoDB Global Table
func (r *GlobalTable) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The name of the global table. Must match underlying DynamoDB Table names in all regions.
func (r *GlobalTable) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
func (r *GlobalTable) Replicas() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["replicas"])
}

// Input properties used for looking up and filtering GlobalTable resources.
type GlobalTableState struct {
	// The ARN of the DynamoDB Global Table
	Arn interface{}
	// The name of the global table. Must match underlying DynamoDB Table names in all regions.
	Name interface{}
	// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
	Replicas interface{}
}

// The set of arguments for constructing a GlobalTable resource.
type GlobalTableArgs struct {
	// The name of the global table. Must match underlying DynamoDB Table names in all regions.
	Name interface{}
	// Underlying DynamoDB Table. At least 1 replica must be defined. See below.
	Replicas interface{}
}
