// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DynamoDB table resource
// 
// ~> **Note:** It is recommended to use `lifecycle` [`ignore_changes`](https://www.terraform.io/docs/configuration/resources.html#ignore_changes) for `read_capacity` and/or `write_capacity` if there's [autoscaling policy](https://www.terraform.io/docs/providers/aws/r/appautoscaling_policy.html) attached to the table.
type Table struct {
	s *pulumi.ResourceState
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOpt) (*Table, error) {
	if args == nil || args.Attributes == nil {
		return nil, errors.New("missing required argument 'Attributes'")
	}
	if args == nil || args.HashKey == nil {
		return nil, errors.New("missing required argument 'HashKey'")
	}
	if args == nil || args.ReadCapacity == nil {
		return nil, errors.New("missing required argument 'ReadCapacity'")
	}
	if args == nil || args.WriteCapacity == nil {
		return nil, errors.New("missing required argument 'WriteCapacity'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["attributes"] = nil
		inputs["globalSecondaryIndexes"] = nil
		inputs["hashKey"] = nil
		inputs["localSecondaryIndexes"] = nil
		inputs["name"] = nil
		inputs["pointInTimeRecovery"] = nil
		inputs["rangeKey"] = nil
		inputs["readCapacity"] = nil
		inputs["serverSideEncryption"] = nil
		inputs["streamEnabled"] = nil
		inputs["streamViewType"] = nil
		inputs["tags"] = nil
		inputs["ttl"] = nil
		inputs["writeCapacity"] = nil
	} else {
		inputs["attributes"] = args.Attributes
		inputs["globalSecondaryIndexes"] = args.GlobalSecondaryIndexes
		inputs["hashKey"] = args.HashKey
		inputs["localSecondaryIndexes"] = args.LocalSecondaryIndexes
		inputs["name"] = args.Name
		inputs["pointInTimeRecovery"] = args.PointInTimeRecovery
		inputs["rangeKey"] = args.RangeKey
		inputs["readCapacity"] = args.ReadCapacity
		inputs["serverSideEncryption"] = args.ServerSideEncryption
		inputs["streamEnabled"] = args.StreamEnabled
		inputs["streamViewType"] = args.StreamViewType
		inputs["tags"] = args.Tags
		inputs["ttl"] = args.Ttl
		inputs["writeCapacity"] = args.WriteCapacity
	}
	inputs["arn"] = nil
	inputs["streamArn"] = nil
	inputs["streamLabel"] = nil
	s, err := ctx.RegisterResource("aws:dynamodb/table:Table", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Table{s: s}, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TableState, opts ...pulumi.ResourceOpt) (*Table, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["attributes"] = state.Attributes
		inputs["globalSecondaryIndexes"] = state.GlobalSecondaryIndexes
		inputs["hashKey"] = state.HashKey
		inputs["localSecondaryIndexes"] = state.LocalSecondaryIndexes
		inputs["name"] = state.Name
		inputs["pointInTimeRecovery"] = state.PointInTimeRecovery
		inputs["rangeKey"] = state.RangeKey
		inputs["readCapacity"] = state.ReadCapacity
		inputs["serverSideEncryption"] = state.ServerSideEncryption
		inputs["streamArn"] = state.StreamArn
		inputs["streamEnabled"] = state.StreamEnabled
		inputs["streamLabel"] = state.StreamLabel
		inputs["streamViewType"] = state.StreamViewType
		inputs["tags"] = state.Tags
		inputs["ttl"] = state.Ttl
		inputs["writeCapacity"] = state.WriteCapacity
	}
	s, err := ctx.ReadResource("aws:dynamodb/table:Table", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Table{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Table) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Table) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The arn of the table
func (r *Table) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes. Each attribute has two properties:
func (r *Table) Attributes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["attributes"])
}

// Describe a GSO for the table;
// subject to the normal limits on the number of GSIs, projected
// attributes, etc.
func (r *Table) GlobalSecondaryIndexes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["globalSecondaryIndexes"])
}

// The name of the hash key in the index; must be
// defined as an attribute in the resource.
func (r *Table) HashKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hashKey"])
}

// Describe an LSI on the table;
// these can only be allocated *at creation* so you cannot change this
// definition after you have created the resource.
func (r *Table) LocalSecondaryIndexes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["localSecondaryIndexes"])
}

// The name of the index
func (r *Table) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Point-in-time recovery options.
func (r *Table) PointInTimeRecovery() *pulumi.Output {
	return r.s.State["pointInTimeRecovery"]
}

// The name of the range key; must be defined
func (r *Table) RangeKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["rangeKey"])
}

// The number of read units for this index
func (r *Table) ReadCapacity() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["readCapacity"])
}

// Encrypt at rest options.
func (r *Table) ServerSideEncryption() *pulumi.Output {
	return r.s.State["serverSideEncryption"]
}

// The ARN of the Table Stream. Only available when `stream_enabled = true`
func (r *Table) StreamArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["streamArn"])
}

// Indicates whether Streams are to be enabled (true) or disabled (false).
func (r *Table) StreamEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["streamEnabled"])
}

// A timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not
// a unique identifier for the stream on its own. However, the combination of AWS customer ID,
// table name and this field is guaranteed to be unique.
// It can be used for creating CloudWatch Alarms. Only available when `stream_enabled = true`
func (r *Table) StreamLabel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["streamLabel"])
}

// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
func (r *Table) StreamViewType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["streamViewType"])
}

// A map of tags to populate on the created table.
func (r *Table) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Defines ttl, has two properties, and can only be specified once:
func (r *Table) Ttl() *pulumi.Output {
	return r.s.State["ttl"]
}

// The number of write units for this index
func (r *Table) WriteCapacity() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["writeCapacity"])
}

// Input properties used for looking up and filtering Table resources.
type TableState struct {
	// The arn of the table
	Arn interface{}
	// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes. Each attribute has two properties:
	Attributes interface{}
	// Describe a GSO for the table;
	// subject to the normal limits on the number of GSIs, projected
	// attributes, etc.
	GlobalSecondaryIndexes interface{}
	// The name of the hash key in the index; must be
	// defined as an attribute in the resource.
	HashKey interface{}
	// Describe an LSI on the table;
	// these can only be allocated *at creation* so you cannot change this
	// definition after you have created the resource.
	LocalSecondaryIndexes interface{}
	// The name of the index
	Name interface{}
	// Point-in-time recovery options.
	PointInTimeRecovery interface{}
	// The name of the range key; must be defined
	RangeKey interface{}
	// The number of read units for this index
	ReadCapacity interface{}
	// Encrypt at rest options.
	ServerSideEncryption interface{}
	// The ARN of the Table Stream. Only available when `stream_enabled = true`
	StreamArn interface{}
	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled interface{}
	// A timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not
	// a unique identifier for the stream on its own. However, the combination of AWS customer ID,
	// table name and this field is guaranteed to be unique.
	// It can be used for creating CloudWatch Alarms. Only available when `stream_enabled = true`
	StreamLabel interface{}
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType interface{}
	// A map of tags to populate on the created table.
	Tags interface{}
	// Defines ttl, has two properties, and can only be specified once:
	Ttl interface{}
	// The number of write units for this index
	WriteCapacity interface{}
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes. Each attribute has two properties:
	Attributes interface{}
	// Describe a GSO for the table;
	// subject to the normal limits on the number of GSIs, projected
	// attributes, etc.
	GlobalSecondaryIndexes interface{}
	// The name of the hash key in the index; must be
	// defined as an attribute in the resource.
	HashKey interface{}
	// Describe an LSI on the table;
	// these can only be allocated *at creation* so you cannot change this
	// definition after you have created the resource.
	LocalSecondaryIndexes interface{}
	// The name of the index
	Name interface{}
	// Point-in-time recovery options.
	PointInTimeRecovery interface{}
	// The name of the range key; must be defined
	RangeKey interface{}
	// The number of read units for this index
	ReadCapacity interface{}
	// Encrypt at rest options.
	ServerSideEncryption interface{}
	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled interface{}
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType interface{}
	// A map of tags to populate on the created table.
	Tags interface{}
	// Defines ttl, has two properties, and can only be specified once:
	Ttl interface{}
	// The number of write units for this index
	WriteCapacity interface{}
}
