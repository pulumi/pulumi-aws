// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DynamoDB contributor insights resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/dynamodb"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := dynamodb.NewContributorInsights(ctx, "test", &dynamodb.ContributorInsightsArgs{
// 			TableName: pulumi.String("ExampleTableName"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `aws_dynamodb_contributor_insights` can be imported using the format `name:table_name/index:index_name`, followed by the account number, e.g.,
//
// ```sh
//  $ pulumi import aws:dynamodb/contributorInsights:ContributorInsights test name:ExampleTableName/index:ExampleIndexName/123456789012
// ```
type ContributorInsights struct {
	pulumi.CustomResourceState

	// The global secondary index name
	IndexName pulumi.StringPtrOutput `pulumi:"indexName"`
	// The name of the table to enable contributor insights
	TableName pulumi.StringOutput `pulumi:"tableName"`
}

// NewContributorInsights registers a new resource with the given unique name, arguments, and options.
func NewContributorInsights(ctx *pulumi.Context,
	name string, args *ContributorInsightsArgs, opts ...pulumi.ResourceOption) (*ContributorInsights, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	var resource ContributorInsights
	err := ctx.RegisterResource("aws:dynamodb/contributorInsights:ContributorInsights", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContributorInsights gets an existing ContributorInsights resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContributorInsights(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContributorInsightsState, opts ...pulumi.ResourceOption) (*ContributorInsights, error) {
	var resource ContributorInsights
	err := ctx.ReadResource("aws:dynamodb/contributorInsights:ContributorInsights", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContributorInsights resources.
type contributorInsightsState struct {
	// The global secondary index name
	IndexName *string `pulumi:"indexName"`
	// The name of the table to enable contributor insights
	TableName *string `pulumi:"tableName"`
}

type ContributorInsightsState struct {
	// The global secondary index name
	IndexName pulumi.StringPtrInput
	// The name of the table to enable contributor insights
	TableName pulumi.StringPtrInput
}

func (ContributorInsightsState) ElementType() reflect.Type {
	return reflect.TypeOf((*contributorInsightsState)(nil)).Elem()
}

type contributorInsightsArgs struct {
	// The global secondary index name
	IndexName *string `pulumi:"indexName"`
	// The name of the table to enable contributor insights
	TableName string `pulumi:"tableName"`
}

// The set of arguments for constructing a ContributorInsights resource.
type ContributorInsightsArgs struct {
	// The global secondary index name
	IndexName pulumi.StringPtrInput
	// The name of the table to enable contributor insights
	TableName pulumi.StringInput
}

func (ContributorInsightsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contributorInsightsArgs)(nil)).Elem()
}

type ContributorInsightsInput interface {
	pulumi.Input

	ToContributorInsightsOutput() ContributorInsightsOutput
	ToContributorInsightsOutputWithContext(ctx context.Context) ContributorInsightsOutput
}

func (*ContributorInsights) ElementType() reflect.Type {
	return reflect.TypeOf((**ContributorInsights)(nil)).Elem()
}

func (i *ContributorInsights) ToContributorInsightsOutput() ContributorInsightsOutput {
	return i.ToContributorInsightsOutputWithContext(context.Background())
}

func (i *ContributorInsights) ToContributorInsightsOutputWithContext(ctx context.Context) ContributorInsightsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContributorInsightsOutput)
}

// ContributorInsightsArrayInput is an input type that accepts ContributorInsightsArray and ContributorInsightsArrayOutput values.
// You can construct a concrete instance of `ContributorInsightsArrayInput` via:
//
//          ContributorInsightsArray{ ContributorInsightsArgs{...} }
type ContributorInsightsArrayInput interface {
	pulumi.Input

	ToContributorInsightsArrayOutput() ContributorInsightsArrayOutput
	ToContributorInsightsArrayOutputWithContext(context.Context) ContributorInsightsArrayOutput
}

type ContributorInsightsArray []ContributorInsightsInput

func (ContributorInsightsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContributorInsights)(nil)).Elem()
}

func (i ContributorInsightsArray) ToContributorInsightsArrayOutput() ContributorInsightsArrayOutput {
	return i.ToContributorInsightsArrayOutputWithContext(context.Background())
}

func (i ContributorInsightsArray) ToContributorInsightsArrayOutputWithContext(ctx context.Context) ContributorInsightsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContributorInsightsArrayOutput)
}

// ContributorInsightsMapInput is an input type that accepts ContributorInsightsMap and ContributorInsightsMapOutput values.
// You can construct a concrete instance of `ContributorInsightsMapInput` via:
//
//          ContributorInsightsMap{ "key": ContributorInsightsArgs{...} }
type ContributorInsightsMapInput interface {
	pulumi.Input

	ToContributorInsightsMapOutput() ContributorInsightsMapOutput
	ToContributorInsightsMapOutputWithContext(context.Context) ContributorInsightsMapOutput
}

type ContributorInsightsMap map[string]ContributorInsightsInput

func (ContributorInsightsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContributorInsights)(nil)).Elem()
}

func (i ContributorInsightsMap) ToContributorInsightsMapOutput() ContributorInsightsMapOutput {
	return i.ToContributorInsightsMapOutputWithContext(context.Background())
}

func (i ContributorInsightsMap) ToContributorInsightsMapOutputWithContext(ctx context.Context) ContributorInsightsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContributorInsightsMapOutput)
}

type ContributorInsightsOutput struct{ *pulumi.OutputState }

func (ContributorInsightsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContributorInsights)(nil)).Elem()
}

func (o ContributorInsightsOutput) ToContributorInsightsOutput() ContributorInsightsOutput {
	return o
}

func (o ContributorInsightsOutput) ToContributorInsightsOutputWithContext(ctx context.Context) ContributorInsightsOutput {
	return o
}

// The global secondary index name
func (o ContributorInsightsOutput) IndexName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContributorInsights) pulumi.StringPtrOutput { return v.IndexName }).(pulumi.StringPtrOutput)
}

// The name of the table to enable contributor insights
func (o ContributorInsightsOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContributorInsights) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

type ContributorInsightsArrayOutput struct{ *pulumi.OutputState }

func (ContributorInsightsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContributorInsights)(nil)).Elem()
}

func (o ContributorInsightsArrayOutput) ToContributorInsightsArrayOutput() ContributorInsightsArrayOutput {
	return o
}

func (o ContributorInsightsArrayOutput) ToContributorInsightsArrayOutputWithContext(ctx context.Context) ContributorInsightsArrayOutput {
	return o
}

func (o ContributorInsightsArrayOutput) Index(i pulumi.IntInput) ContributorInsightsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContributorInsights {
		return vs[0].([]*ContributorInsights)[vs[1].(int)]
	}).(ContributorInsightsOutput)
}

type ContributorInsightsMapOutput struct{ *pulumi.OutputState }

func (ContributorInsightsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContributorInsights)(nil)).Elem()
}

func (o ContributorInsightsMapOutput) ToContributorInsightsMapOutput() ContributorInsightsMapOutput {
	return o
}

func (o ContributorInsightsMapOutput) ToContributorInsightsMapOutputWithContext(ctx context.Context) ContributorInsightsMapOutput {
	return o
}

func (o ContributorInsightsMapOutput) MapIndex(k pulumi.StringInput) ContributorInsightsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContributorInsights {
		return vs[0].(map[string]*ContributorInsights)[vs[1].(string)]
	}).(ContributorInsightsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContributorInsightsInput)(nil)).Elem(), &ContributorInsights{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContributorInsightsArrayInput)(nil)).Elem(), ContributorInsightsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContributorInsightsMapInput)(nil)).Elem(), ContributorInsightsMap{})
	pulumi.RegisterOutputType(ContributorInsightsOutput{})
	pulumi.RegisterOutputType(ContributorInsightsArrayOutput{})
	pulumi.RegisterOutputType(ContributorInsightsMapOutput{})
}
