// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GlobalTableReplica struct {
	// AWS region name of replica DynamoDB TableE.g., `us-east-1`
	RegionName string `pulumi:"regionName"`
}

// GlobalTableReplicaInput is an input type that accepts GlobalTableReplicaArgs and GlobalTableReplicaOutput values.
// You can construct a concrete instance of `GlobalTableReplicaInput` via:
//
//	GlobalTableReplicaArgs{...}
type GlobalTableReplicaInput interface {
	pulumi.Input

	ToGlobalTableReplicaOutput() GlobalTableReplicaOutput
	ToGlobalTableReplicaOutputWithContext(context.Context) GlobalTableReplicaOutput
}

type GlobalTableReplicaArgs struct {
	// AWS region name of replica DynamoDB TableE.g., `us-east-1`
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (GlobalTableReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalTableReplica)(nil)).Elem()
}

func (i GlobalTableReplicaArgs) ToGlobalTableReplicaOutput() GlobalTableReplicaOutput {
	return i.ToGlobalTableReplicaOutputWithContext(context.Background())
}

func (i GlobalTableReplicaArgs) ToGlobalTableReplicaOutputWithContext(ctx context.Context) GlobalTableReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalTableReplicaOutput)
}

// GlobalTableReplicaArrayInput is an input type that accepts GlobalTableReplicaArray and GlobalTableReplicaArrayOutput values.
// You can construct a concrete instance of `GlobalTableReplicaArrayInput` via:
//
//	GlobalTableReplicaArray{ GlobalTableReplicaArgs{...} }
type GlobalTableReplicaArrayInput interface {
	pulumi.Input

	ToGlobalTableReplicaArrayOutput() GlobalTableReplicaArrayOutput
	ToGlobalTableReplicaArrayOutputWithContext(context.Context) GlobalTableReplicaArrayOutput
}

type GlobalTableReplicaArray []GlobalTableReplicaInput

func (GlobalTableReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalTableReplica)(nil)).Elem()
}

func (i GlobalTableReplicaArray) ToGlobalTableReplicaArrayOutput() GlobalTableReplicaArrayOutput {
	return i.ToGlobalTableReplicaArrayOutputWithContext(context.Background())
}

func (i GlobalTableReplicaArray) ToGlobalTableReplicaArrayOutputWithContext(ctx context.Context) GlobalTableReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalTableReplicaArrayOutput)
}

type GlobalTableReplicaOutput struct{ *pulumi.OutputState }

func (GlobalTableReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalTableReplica)(nil)).Elem()
}

func (o GlobalTableReplicaOutput) ToGlobalTableReplicaOutput() GlobalTableReplicaOutput {
	return o
}

func (o GlobalTableReplicaOutput) ToGlobalTableReplicaOutputWithContext(ctx context.Context) GlobalTableReplicaOutput {
	return o
}

// AWS region name of replica DynamoDB TableE.g., `us-east-1`
func (o GlobalTableReplicaOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalTableReplica) string { return v.RegionName }).(pulumi.StringOutput)
}

type GlobalTableReplicaArrayOutput struct{ *pulumi.OutputState }

func (GlobalTableReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalTableReplica)(nil)).Elem()
}

func (o GlobalTableReplicaArrayOutput) ToGlobalTableReplicaArrayOutput() GlobalTableReplicaArrayOutput {
	return o
}

func (o GlobalTableReplicaArrayOutput) ToGlobalTableReplicaArrayOutputWithContext(ctx context.Context) GlobalTableReplicaArrayOutput {
	return o
}

func (o GlobalTableReplicaArrayOutput) Index(i pulumi.IntInput) GlobalTableReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalTableReplica {
		return vs[0].([]GlobalTableReplica)[vs[1].(int)]
	}).(GlobalTableReplicaOutput)
}

type TableAttribute struct {
	// Name of the attribute
	Name string `pulumi:"name"`
	// Attribute type. Valid values are `S` (string), `N` (number), `B` (binary).
	Type string `pulumi:"type"`
}

// TableAttributeInput is an input type that accepts TableAttributeArgs and TableAttributeOutput values.
// You can construct a concrete instance of `TableAttributeInput` via:
//
//	TableAttributeArgs{...}
type TableAttributeInput interface {
	pulumi.Input

	ToTableAttributeOutput() TableAttributeOutput
	ToTableAttributeOutputWithContext(context.Context) TableAttributeOutput
}

type TableAttributeArgs struct {
	// Name of the attribute
	Name pulumi.StringInput `pulumi:"name"`
	// Attribute type. Valid values are `S` (string), `N` (number), `B` (binary).
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableAttribute)(nil)).Elem()
}

func (i TableAttributeArgs) ToTableAttributeOutput() TableAttributeOutput {
	return i.ToTableAttributeOutputWithContext(context.Background())
}

func (i TableAttributeArgs) ToTableAttributeOutputWithContext(ctx context.Context) TableAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAttributeOutput)
}

// TableAttributeArrayInput is an input type that accepts TableAttributeArray and TableAttributeArrayOutput values.
// You can construct a concrete instance of `TableAttributeArrayInput` via:
//
//	TableAttributeArray{ TableAttributeArgs{...} }
type TableAttributeArrayInput interface {
	pulumi.Input

	ToTableAttributeArrayOutput() TableAttributeArrayOutput
	ToTableAttributeArrayOutputWithContext(context.Context) TableAttributeArrayOutput
}

type TableAttributeArray []TableAttributeInput

func (TableAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableAttribute)(nil)).Elem()
}

func (i TableAttributeArray) ToTableAttributeArrayOutput() TableAttributeArrayOutput {
	return i.ToTableAttributeArrayOutputWithContext(context.Background())
}

func (i TableAttributeArray) ToTableAttributeArrayOutputWithContext(ctx context.Context) TableAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAttributeArrayOutput)
}

type TableAttributeOutput struct{ *pulumi.OutputState }

func (TableAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableAttribute)(nil)).Elem()
}

func (o TableAttributeOutput) ToTableAttributeOutput() TableAttributeOutput {
	return o
}

func (o TableAttributeOutput) ToTableAttributeOutputWithContext(ctx context.Context) TableAttributeOutput {
	return o
}

// Name of the attribute
func (o TableAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// Attribute type. Valid values are `S` (string), `N` (number), `B` (binary).
func (o TableAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableAttribute) string { return v.Type }).(pulumi.StringOutput)
}

type TableAttributeArrayOutput struct{ *pulumi.OutputState }

func (TableAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableAttribute)(nil)).Elem()
}

func (o TableAttributeArrayOutput) ToTableAttributeArrayOutput() TableAttributeArrayOutput {
	return o
}

func (o TableAttributeArrayOutput) ToTableAttributeArrayOutputWithContext(ctx context.Context) TableAttributeArrayOutput {
	return o
}

func (o TableAttributeArrayOutput) Index(i pulumi.IntInput) TableAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableAttribute {
		return vs[0].([]TableAttribute)[vs[1].(int)]
	}).(TableAttributeOutput)
}

type TableGlobalSecondaryIndex struct {
	// Name of the hash key in the index; must be defined as an attribute in the resource.
	HashKey string `pulumi:"hashKey"`
	// Name of the index.
	Name string `pulumi:"name"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
	ProjectionType string `pulumi:"projectionType"`
	// Name of the range key; must be defined
	RangeKey *string `pulumi:"rangeKey"`
	// Number of read units for this index. Must be set if billingMode is set to PROVISIONED.
	ReadCapacity *int `pulumi:"readCapacity"`
	// Number of write units for this index. Must be set if billingMode is set to PROVISIONED.
	WriteCapacity *int `pulumi:"writeCapacity"`
}

// TableGlobalSecondaryIndexInput is an input type that accepts TableGlobalSecondaryIndexArgs and TableGlobalSecondaryIndexOutput values.
// You can construct a concrete instance of `TableGlobalSecondaryIndexInput` via:
//
//	TableGlobalSecondaryIndexArgs{...}
type TableGlobalSecondaryIndexInput interface {
	pulumi.Input

	ToTableGlobalSecondaryIndexOutput() TableGlobalSecondaryIndexOutput
	ToTableGlobalSecondaryIndexOutputWithContext(context.Context) TableGlobalSecondaryIndexOutput
}

type TableGlobalSecondaryIndexArgs struct {
	// Name of the hash key in the index; must be defined as an attribute in the resource.
	HashKey pulumi.StringInput `pulumi:"hashKey"`
	// Name of the index.
	Name pulumi.StringInput `pulumi:"name"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
	NonKeyAttributes pulumi.StringArrayInput `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
	ProjectionType pulumi.StringInput `pulumi:"projectionType"`
	// Name of the range key; must be defined
	RangeKey pulumi.StringPtrInput `pulumi:"rangeKey"`
	// Number of read units for this index. Must be set if billingMode is set to PROVISIONED.
	ReadCapacity pulumi.IntPtrInput `pulumi:"readCapacity"`
	// Number of write units for this index. Must be set if billingMode is set to PROVISIONED.
	WriteCapacity pulumi.IntPtrInput `pulumi:"writeCapacity"`
}

func (TableGlobalSecondaryIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableGlobalSecondaryIndex)(nil)).Elem()
}

func (i TableGlobalSecondaryIndexArgs) ToTableGlobalSecondaryIndexOutput() TableGlobalSecondaryIndexOutput {
	return i.ToTableGlobalSecondaryIndexOutputWithContext(context.Background())
}

func (i TableGlobalSecondaryIndexArgs) ToTableGlobalSecondaryIndexOutputWithContext(ctx context.Context) TableGlobalSecondaryIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableGlobalSecondaryIndexOutput)
}

// TableGlobalSecondaryIndexArrayInput is an input type that accepts TableGlobalSecondaryIndexArray and TableGlobalSecondaryIndexArrayOutput values.
// You can construct a concrete instance of `TableGlobalSecondaryIndexArrayInput` via:
//
//	TableGlobalSecondaryIndexArray{ TableGlobalSecondaryIndexArgs{...} }
type TableGlobalSecondaryIndexArrayInput interface {
	pulumi.Input

	ToTableGlobalSecondaryIndexArrayOutput() TableGlobalSecondaryIndexArrayOutput
	ToTableGlobalSecondaryIndexArrayOutputWithContext(context.Context) TableGlobalSecondaryIndexArrayOutput
}

type TableGlobalSecondaryIndexArray []TableGlobalSecondaryIndexInput

func (TableGlobalSecondaryIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableGlobalSecondaryIndex)(nil)).Elem()
}

func (i TableGlobalSecondaryIndexArray) ToTableGlobalSecondaryIndexArrayOutput() TableGlobalSecondaryIndexArrayOutput {
	return i.ToTableGlobalSecondaryIndexArrayOutputWithContext(context.Background())
}

func (i TableGlobalSecondaryIndexArray) ToTableGlobalSecondaryIndexArrayOutputWithContext(ctx context.Context) TableGlobalSecondaryIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableGlobalSecondaryIndexArrayOutput)
}

type TableGlobalSecondaryIndexOutput struct{ *pulumi.OutputState }

func (TableGlobalSecondaryIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableGlobalSecondaryIndex)(nil)).Elem()
}

func (o TableGlobalSecondaryIndexOutput) ToTableGlobalSecondaryIndexOutput() TableGlobalSecondaryIndexOutput {
	return o
}

func (o TableGlobalSecondaryIndexOutput) ToTableGlobalSecondaryIndexOutputWithContext(ctx context.Context) TableGlobalSecondaryIndexOutput {
	return o
}

// Name of the hash key in the index; must be defined as an attribute in the resource.
func (o TableGlobalSecondaryIndexOutput) HashKey() pulumi.StringOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) string { return v.HashKey }).(pulumi.StringOutput)
}

// Name of the index.
func (o TableGlobalSecondaryIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) string { return v.Name }).(pulumi.StringOutput)
}

// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
func (o TableGlobalSecondaryIndexOutput) NonKeyAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) []string { return v.NonKeyAttributes }).(pulumi.StringArrayOutput)
}

// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
func (o TableGlobalSecondaryIndexOutput) ProjectionType() pulumi.StringOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) string { return v.ProjectionType }).(pulumi.StringOutput)
}

// Name of the range key; must be defined
func (o TableGlobalSecondaryIndexOutput) RangeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) *string { return v.RangeKey }).(pulumi.StringPtrOutput)
}

// Number of read units for this index. Must be set if billingMode is set to PROVISIONED.
func (o TableGlobalSecondaryIndexOutput) ReadCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) *int { return v.ReadCapacity }).(pulumi.IntPtrOutput)
}

// Number of write units for this index. Must be set if billingMode is set to PROVISIONED.
func (o TableGlobalSecondaryIndexOutput) WriteCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableGlobalSecondaryIndex) *int { return v.WriteCapacity }).(pulumi.IntPtrOutput)
}

type TableGlobalSecondaryIndexArrayOutput struct{ *pulumi.OutputState }

func (TableGlobalSecondaryIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableGlobalSecondaryIndex)(nil)).Elem()
}

func (o TableGlobalSecondaryIndexArrayOutput) ToTableGlobalSecondaryIndexArrayOutput() TableGlobalSecondaryIndexArrayOutput {
	return o
}

func (o TableGlobalSecondaryIndexArrayOutput) ToTableGlobalSecondaryIndexArrayOutputWithContext(ctx context.Context) TableGlobalSecondaryIndexArrayOutput {
	return o
}

func (o TableGlobalSecondaryIndexArrayOutput) Index(i pulumi.IntInput) TableGlobalSecondaryIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableGlobalSecondaryIndex {
		return vs[0].([]TableGlobalSecondaryIndex)[vs[1].(int)]
	}).(TableGlobalSecondaryIndexOutput)
}

type TableImportTable struct {
	// Type of compression to be used on the input coming from the imported table. Valid values are `GZIP`, `ZSTD` and `NONE`.
	InputCompressionType *string `pulumi:"inputCompressionType"`
	// The format of the source data. Valid values are `CSV`, `DYNAMODB_JSON` and `ION`.
	InputFormat string `pulumi:"inputFormat"`
	// Describe the format options for the data that was imported into the target table. There is one value, `csv`. See below.
	InputFormatOptions *TableImportTableInputFormatOptions `pulumi:"inputFormatOptions"`
	// Values for the S3 bucket the source file is imported from. See below.
	S3BucketSource TableImportTableS3BucketSource `pulumi:"s3BucketSource"`
}

// TableImportTableInput is an input type that accepts TableImportTableArgs and TableImportTableOutput values.
// You can construct a concrete instance of `TableImportTableInput` via:
//
//	TableImportTableArgs{...}
type TableImportTableInput interface {
	pulumi.Input

	ToTableImportTableOutput() TableImportTableOutput
	ToTableImportTableOutputWithContext(context.Context) TableImportTableOutput
}

type TableImportTableArgs struct {
	// Type of compression to be used on the input coming from the imported table. Valid values are `GZIP`, `ZSTD` and `NONE`.
	InputCompressionType pulumi.StringPtrInput `pulumi:"inputCompressionType"`
	// The format of the source data. Valid values are `CSV`, `DYNAMODB_JSON` and `ION`.
	InputFormat pulumi.StringInput `pulumi:"inputFormat"`
	// Describe the format options for the data that was imported into the target table. There is one value, `csv`. See below.
	InputFormatOptions TableImportTableInputFormatOptionsPtrInput `pulumi:"inputFormatOptions"`
	// Values for the S3 bucket the source file is imported from. See below.
	S3BucketSource TableImportTableS3BucketSourceInput `pulumi:"s3BucketSource"`
}

func (TableImportTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableImportTable)(nil)).Elem()
}

func (i TableImportTableArgs) ToTableImportTableOutput() TableImportTableOutput {
	return i.ToTableImportTableOutputWithContext(context.Background())
}

func (i TableImportTableArgs) ToTableImportTableOutputWithContext(ctx context.Context) TableImportTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTableOutput)
}

func (i TableImportTableArgs) ToTableImportTablePtrOutput() TableImportTablePtrOutput {
	return i.ToTableImportTablePtrOutputWithContext(context.Background())
}

func (i TableImportTableArgs) ToTableImportTablePtrOutputWithContext(ctx context.Context) TableImportTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTableOutput).ToTableImportTablePtrOutputWithContext(ctx)
}

// TableImportTablePtrInput is an input type that accepts TableImportTableArgs, TableImportTablePtr and TableImportTablePtrOutput values.
// You can construct a concrete instance of `TableImportTablePtrInput` via:
//
//	        TableImportTableArgs{...}
//
//	or:
//
//	        nil
type TableImportTablePtrInput interface {
	pulumi.Input

	ToTableImportTablePtrOutput() TableImportTablePtrOutput
	ToTableImportTablePtrOutputWithContext(context.Context) TableImportTablePtrOutput
}

type tableImportTablePtrType TableImportTableArgs

func TableImportTablePtr(v *TableImportTableArgs) TableImportTablePtrInput {
	return (*tableImportTablePtrType)(v)
}

func (*tableImportTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableImportTable)(nil)).Elem()
}

func (i *tableImportTablePtrType) ToTableImportTablePtrOutput() TableImportTablePtrOutput {
	return i.ToTableImportTablePtrOutputWithContext(context.Background())
}

func (i *tableImportTablePtrType) ToTableImportTablePtrOutputWithContext(ctx context.Context) TableImportTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTablePtrOutput)
}

type TableImportTableOutput struct{ *pulumi.OutputState }

func (TableImportTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableImportTable)(nil)).Elem()
}

func (o TableImportTableOutput) ToTableImportTableOutput() TableImportTableOutput {
	return o
}

func (o TableImportTableOutput) ToTableImportTableOutputWithContext(ctx context.Context) TableImportTableOutput {
	return o
}

func (o TableImportTableOutput) ToTableImportTablePtrOutput() TableImportTablePtrOutput {
	return o.ToTableImportTablePtrOutputWithContext(context.Background())
}

func (o TableImportTableOutput) ToTableImportTablePtrOutputWithContext(ctx context.Context) TableImportTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableImportTable) *TableImportTable {
		return &v
	}).(TableImportTablePtrOutput)
}

// Type of compression to be used on the input coming from the imported table. Valid values are `GZIP`, `ZSTD` and `NONE`.
func (o TableImportTableOutput) InputCompressionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableImportTable) *string { return v.InputCompressionType }).(pulumi.StringPtrOutput)
}

// The format of the source data. Valid values are `CSV`, `DYNAMODB_JSON` and `ION`.
func (o TableImportTableOutput) InputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v TableImportTable) string { return v.InputFormat }).(pulumi.StringOutput)
}

// Describe the format options for the data that was imported into the target table. There is one value, `csv`. See below.
func (o TableImportTableOutput) InputFormatOptions() TableImportTableInputFormatOptionsPtrOutput {
	return o.ApplyT(func(v TableImportTable) *TableImportTableInputFormatOptions { return v.InputFormatOptions }).(TableImportTableInputFormatOptionsPtrOutput)
}

// Values for the S3 bucket the source file is imported from. See below.
func (o TableImportTableOutput) S3BucketSource() TableImportTableS3BucketSourceOutput {
	return o.ApplyT(func(v TableImportTable) TableImportTableS3BucketSource { return v.S3BucketSource }).(TableImportTableS3BucketSourceOutput)
}

type TableImportTablePtrOutput struct{ *pulumi.OutputState }

func (TableImportTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableImportTable)(nil)).Elem()
}

func (o TableImportTablePtrOutput) ToTableImportTablePtrOutput() TableImportTablePtrOutput {
	return o
}

func (o TableImportTablePtrOutput) ToTableImportTablePtrOutputWithContext(ctx context.Context) TableImportTablePtrOutput {
	return o
}

func (o TableImportTablePtrOutput) Elem() TableImportTableOutput {
	return o.ApplyT(func(v *TableImportTable) TableImportTable {
		if v != nil {
			return *v
		}
		var ret TableImportTable
		return ret
	}).(TableImportTableOutput)
}

// Type of compression to be used on the input coming from the imported table. Valid values are `GZIP`, `ZSTD` and `NONE`.
func (o TableImportTablePtrOutput) InputCompressionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableImportTable) *string {
		if v == nil {
			return nil
		}
		return v.InputCompressionType
	}).(pulumi.StringPtrOutput)
}

// The format of the source data. Valid values are `CSV`, `DYNAMODB_JSON` and `ION`.
func (o TableImportTablePtrOutput) InputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableImportTable) *string {
		if v == nil {
			return nil
		}
		return &v.InputFormat
	}).(pulumi.StringPtrOutput)
}

// Describe the format options for the data that was imported into the target table. There is one value, `csv`. See below.
func (o TableImportTablePtrOutput) InputFormatOptions() TableImportTableInputFormatOptionsPtrOutput {
	return o.ApplyT(func(v *TableImportTable) *TableImportTableInputFormatOptions {
		if v == nil {
			return nil
		}
		return v.InputFormatOptions
	}).(TableImportTableInputFormatOptionsPtrOutput)
}

// Values for the S3 bucket the source file is imported from. See below.
func (o TableImportTablePtrOutput) S3BucketSource() TableImportTableS3BucketSourcePtrOutput {
	return o.ApplyT(func(v *TableImportTable) *TableImportTableS3BucketSource {
		if v == nil {
			return nil
		}
		return &v.S3BucketSource
	}).(TableImportTableS3BucketSourcePtrOutput)
}

type TableImportTableInputFormatOptions struct {
	// This block contains the processing options for the CSV file being imported:
	Csv *TableImportTableInputFormatOptionsCsv `pulumi:"csv"`
}

// TableImportTableInputFormatOptionsInput is an input type that accepts TableImportTableInputFormatOptionsArgs and TableImportTableInputFormatOptionsOutput values.
// You can construct a concrete instance of `TableImportTableInputFormatOptionsInput` via:
//
//	TableImportTableInputFormatOptionsArgs{...}
type TableImportTableInputFormatOptionsInput interface {
	pulumi.Input

	ToTableImportTableInputFormatOptionsOutput() TableImportTableInputFormatOptionsOutput
	ToTableImportTableInputFormatOptionsOutputWithContext(context.Context) TableImportTableInputFormatOptionsOutput
}

type TableImportTableInputFormatOptionsArgs struct {
	// This block contains the processing options for the CSV file being imported:
	Csv TableImportTableInputFormatOptionsCsvPtrInput `pulumi:"csv"`
}

func (TableImportTableInputFormatOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableImportTableInputFormatOptions)(nil)).Elem()
}

func (i TableImportTableInputFormatOptionsArgs) ToTableImportTableInputFormatOptionsOutput() TableImportTableInputFormatOptionsOutput {
	return i.ToTableImportTableInputFormatOptionsOutputWithContext(context.Background())
}

func (i TableImportTableInputFormatOptionsArgs) ToTableImportTableInputFormatOptionsOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTableInputFormatOptionsOutput)
}

func (i TableImportTableInputFormatOptionsArgs) ToTableImportTableInputFormatOptionsPtrOutput() TableImportTableInputFormatOptionsPtrOutput {
	return i.ToTableImportTableInputFormatOptionsPtrOutputWithContext(context.Background())
}

func (i TableImportTableInputFormatOptionsArgs) ToTableImportTableInputFormatOptionsPtrOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTableInputFormatOptionsOutput).ToTableImportTableInputFormatOptionsPtrOutputWithContext(ctx)
}

// TableImportTableInputFormatOptionsPtrInput is an input type that accepts TableImportTableInputFormatOptionsArgs, TableImportTableInputFormatOptionsPtr and TableImportTableInputFormatOptionsPtrOutput values.
// You can construct a concrete instance of `TableImportTableInputFormatOptionsPtrInput` via:
//
//	        TableImportTableInputFormatOptionsArgs{...}
//
//	or:
//
//	        nil
type TableImportTableInputFormatOptionsPtrInput interface {
	pulumi.Input

	ToTableImportTableInputFormatOptionsPtrOutput() TableImportTableInputFormatOptionsPtrOutput
	ToTableImportTableInputFormatOptionsPtrOutputWithContext(context.Context) TableImportTableInputFormatOptionsPtrOutput
}

type tableImportTableInputFormatOptionsPtrType TableImportTableInputFormatOptionsArgs

func TableImportTableInputFormatOptionsPtr(v *TableImportTableInputFormatOptionsArgs) TableImportTableInputFormatOptionsPtrInput {
	return (*tableImportTableInputFormatOptionsPtrType)(v)
}

func (*tableImportTableInputFormatOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableImportTableInputFormatOptions)(nil)).Elem()
}

func (i *tableImportTableInputFormatOptionsPtrType) ToTableImportTableInputFormatOptionsPtrOutput() TableImportTableInputFormatOptionsPtrOutput {
	return i.ToTableImportTableInputFormatOptionsPtrOutputWithContext(context.Background())
}

func (i *tableImportTableInputFormatOptionsPtrType) ToTableImportTableInputFormatOptionsPtrOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTableInputFormatOptionsPtrOutput)
}

type TableImportTableInputFormatOptionsOutput struct{ *pulumi.OutputState }

func (TableImportTableInputFormatOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableImportTableInputFormatOptions)(nil)).Elem()
}

func (o TableImportTableInputFormatOptionsOutput) ToTableImportTableInputFormatOptionsOutput() TableImportTableInputFormatOptionsOutput {
	return o
}

func (o TableImportTableInputFormatOptionsOutput) ToTableImportTableInputFormatOptionsOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsOutput {
	return o
}

func (o TableImportTableInputFormatOptionsOutput) ToTableImportTableInputFormatOptionsPtrOutput() TableImportTableInputFormatOptionsPtrOutput {
	return o.ToTableImportTableInputFormatOptionsPtrOutputWithContext(context.Background())
}

func (o TableImportTableInputFormatOptionsOutput) ToTableImportTableInputFormatOptionsPtrOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableImportTableInputFormatOptions) *TableImportTableInputFormatOptions {
		return &v
	}).(TableImportTableInputFormatOptionsPtrOutput)
}

// This block contains the processing options for the CSV file being imported:
func (o TableImportTableInputFormatOptionsOutput) Csv() TableImportTableInputFormatOptionsCsvPtrOutput {
	return o.ApplyT(func(v TableImportTableInputFormatOptions) *TableImportTableInputFormatOptionsCsv { return v.Csv }).(TableImportTableInputFormatOptionsCsvPtrOutput)
}

type TableImportTableInputFormatOptionsPtrOutput struct{ *pulumi.OutputState }

func (TableImportTableInputFormatOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableImportTableInputFormatOptions)(nil)).Elem()
}

func (o TableImportTableInputFormatOptionsPtrOutput) ToTableImportTableInputFormatOptionsPtrOutput() TableImportTableInputFormatOptionsPtrOutput {
	return o
}

func (o TableImportTableInputFormatOptionsPtrOutput) ToTableImportTableInputFormatOptionsPtrOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsPtrOutput {
	return o
}

func (o TableImportTableInputFormatOptionsPtrOutput) Elem() TableImportTableInputFormatOptionsOutput {
	return o.ApplyT(func(v *TableImportTableInputFormatOptions) TableImportTableInputFormatOptions {
		if v != nil {
			return *v
		}
		var ret TableImportTableInputFormatOptions
		return ret
	}).(TableImportTableInputFormatOptionsOutput)
}

// This block contains the processing options for the CSV file being imported:
func (o TableImportTableInputFormatOptionsPtrOutput) Csv() TableImportTableInputFormatOptionsCsvPtrOutput {
	return o.ApplyT(func(v *TableImportTableInputFormatOptions) *TableImportTableInputFormatOptionsCsv {
		if v == nil {
			return nil
		}
		return v.Csv
	}).(TableImportTableInputFormatOptionsCsvPtrOutput)
}

type TableImportTableInputFormatOptionsCsv struct {
	// The delimiter used for separating items in the CSV file being imported.
	Delimiter *string `pulumi:"delimiter"`
	// List of the headers used to specify a common header for all source CSV files being imported.
	HeaderLists []string `pulumi:"headerLists"`
}

// TableImportTableInputFormatOptionsCsvInput is an input type that accepts TableImportTableInputFormatOptionsCsvArgs and TableImportTableInputFormatOptionsCsvOutput values.
// You can construct a concrete instance of `TableImportTableInputFormatOptionsCsvInput` via:
//
//	TableImportTableInputFormatOptionsCsvArgs{...}
type TableImportTableInputFormatOptionsCsvInput interface {
	pulumi.Input

	ToTableImportTableInputFormatOptionsCsvOutput() TableImportTableInputFormatOptionsCsvOutput
	ToTableImportTableInputFormatOptionsCsvOutputWithContext(context.Context) TableImportTableInputFormatOptionsCsvOutput
}

type TableImportTableInputFormatOptionsCsvArgs struct {
	// The delimiter used for separating items in the CSV file being imported.
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
	// List of the headers used to specify a common header for all source CSV files being imported.
	HeaderLists pulumi.StringArrayInput `pulumi:"headerLists"`
}

func (TableImportTableInputFormatOptionsCsvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableImportTableInputFormatOptionsCsv)(nil)).Elem()
}

func (i TableImportTableInputFormatOptionsCsvArgs) ToTableImportTableInputFormatOptionsCsvOutput() TableImportTableInputFormatOptionsCsvOutput {
	return i.ToTableImportTableInputFormatOptionsCsvOutputWithContext(context.Background())
}

func (i TableImportTableInputFormatOptionsCsvArgs) ToTableImportTableInputFormatOptionsCsvOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsCsvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTableInputFormatOptionsCsvOutput)
}

func (i TableImportTableInputFormatOptionsCsvArgs) ToTableImportTableInputFormatOptionsCsvPtrOutput() TableImportTableInputFormatOptionsCsvPtrOutput {
	return i.ToTableImportTableInputFormatOptionsCsvPtrOutputWithContext(context.Background())
}

func (i TableImportTableInputFormatOptionsCsvArgs) ToTableImportTableInputFormatOptionsCsvPtrOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTableInputFormatOptionsCsvOutput).ToTableImportTableInputFormatOptionsCsvPtrOutputWithContext(ctx)
}

// TableImportTableInputFormatOptionsCsvPtrInput is an input type that accepts TableImportTableInputFormatOptionsCsvArgs, TableImportTableInputFormatOptionsCsvPtr and TableImportTableInputFormatOptionsCsvPtrOutput values.
// You can construct a concrete instance of `TableImportTableInputFormatOptionsCsvPtrInput` via:
//
//	        TableImportTableInputFormatOptionsCsvArgs{...}
//
//	or:
//
//	        nil
type TableImportTableInputFormatOptionsCsvPtrInput interface {
	pulumi.Input

	ToTableImportTableInputFormatOptionsCsvPtrOutput() TableImportTableInputFormatOptionsCsvPtrOutput
	ToTableImportTableInputFormatOptionsCsvPtrOutputWithContext(context.Context) TableImportTableInputFormatOptionsCsvPtrOutput
}

type tableImportTableInputFormatOptionsCsvPtrType TableImportTableInputFormatOptionsCsvArgs

func TableImportTableInputFormatOptionsCsvPtr(v *TableImportTableInputFormatOptionsCsvArgs) TableImportTableInputFormatOptionsCsvPtrInput {
	return (*tableImportTableInputFormatOptionsCsvPtrType)(v)
}

func (*tableImportTableInputFormatOptionsCsvPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableImportTableInputFormatOptionsCsv)(nil)).Elem()
}

func (i *tableImportTableInputFormatOptionsCsvPtrType) ToTableImportTableInputFormatOptionsCsvPtrOutput() TableImportTableInputFormatOptionsCsvPtrOutput {
	return i.ToTableImportTableInputFormatOptionsCsvPtrOutputWithContext(context.Background())
}

func (i *tableImportTableInputFormatOptionsCsvPtrType) ToTableImportTableInputFormatOptionsCsvPtrOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTableInputFormatOptionsCsvPtrOutput)
}

type TableImportTableInputFormatOptionsCsvOutput struct{ *pulumi.OutputState }

func (TableImportTableInputFormatOptionsCsvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableImportTableInputFormatOptionsCsv)(nil)).Elem()
}

func (o TableImportTableInputFormatOptionsCsvOutput) ToTableImportTableInputFormatOptionsCsvOutput() TableImportTableInputFormatOptionsCsvOutput {
	return o
}

func (o TableImportTableInputFormatOptionsCsvOutput) ToTableImportTableInputFormatOptionsCsvOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsCsvOutput {
	return o
}

func (o TableImportTableInputFormatOptionsCsvOutput) ToTableImportTableInputFormatOptionsCsvPtrOutput() TableImportTableInputFormatOptionsCsvPtrOutput {
	return o.ToTableImportTableInputFormatOptionsCsvPtrOutputWithContext(context.Background())
}

func (o TableImportTableInputFormatOptionsCsvOutput) ToTableImportTableInputFormatOptionsCsvPtrOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsCsvPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableImportTableInputFormatOptionsCsv) *TableImportTableInputFormatOptionsCsv {
		return &v
	}).(TableImportTableInputFormatOptionsCsvPtrOutput)
}

// The delimiter used for separating items in the CSV file being imported.
func (o TableImportTableInputFormatOptionsCsvOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableImportTableInputFormatOptionsCsv) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

// List of the headers used to specify a common header for all source CSV files being imported.
func (o TableImportTableInputFormatOptionsCsvOutput) HeaderLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableImportTableInputFormatOptionsCsv) []string { return v.HeaderLists }).(pulumi.StringArrayOutput)
}

type TableImportTableInputFormatOptionsCsvPtrOutput struct{ *pulumi.OutputState }

func (TableImportTableInputFormatOptionsCsvPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableImportTableInputFormatOptionsCsv)(nil)).Elem()
}

func (o TableImportTableInputFormatOptionsCsvPtrOutput) ToTableImportTableInputFormatOptionsCsvPtrOutput() TableImportTableInputFormatOptionsCsvPtrOutput {
	return o
}

func (o TableImportTableInputFormatOptionsCsvPtrOutput) ToTableImportTableInputFormatOptionsCsvPtrOutputWithContext(ctx context.Context) TableImportTableInputFormatOptionsCsvPtrOutput {
	return o
}

func (o TableImportTableInputFormatOptionsCsvPtrOutput) Elem() TableImportTableInputFormatOptionsCsvOutput {
	return o.ApplyT(func(v *TableImportTableInputFormatOptionsCsv) TableImportTableInputFormatOptionsCsv {
		if v != nil {
			return *v
		}
		var ret TableImportTableInputFormatOptionsCsv
		return ret
	}).(TableImportTableInputFormatOptionsCsvOutput)
}

// The delimiter used for separating items in the CSV file being imported.
func (o TableImportTableInputFormatOptionsCsvPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableImportTableInputFormatOptionsCsv) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

// List of the headers used to specify a common header for all source CSV files being imported.
func (o TableImportTableInputFormatOptionsCsvPtrOutput) HeaderLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableImportTableInputFormatOptionsCsv) []string {
		if v == nil {
			return nil
		}
		return v.HeaderLists
	}).(pulumi.StringArrayOutput)
}

type TableImportTableS3BucketSource struct {
	// The S3 bucket that is being imported from.
	Bucket string `pulumi:"bucket"`
	// The account number of the S3 bucket that is being imported from.
	BucketOwner *string `pulumi:"bucketOwner"`
	// The key prefix shared by all S3 Objects that are being imported.
	KeyPrefix *string `pulumi:"keyPrefix"`
}

// TableImportTableS3BucketSourceInput is an input type that accepts TableImportTableS3BucketSourceArgs and TableImportTableS3BucketSourceOutput values.
// You can construct a concrete instance of `TableImportTableS3BucketSourceInput` via:
//
//	TableImportTableS3BucketSourceArgs{...}
type TableImportTableS3BucketSourceInput interface {
	pulumi.Input

	ToTableImportTableS3BucketSourceOutput() TableImportTableS3BucketSourceOutput
	ToTableImportTableS3BucketSourceOutputWithContext(context.Context) TableImportTableS3BucketSourceOutput
}

type TableImportTableS3BucketSourceArgs struct {
	// The S3 bucket that is being imported from.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The account number of the S3 bucket that is being imported from.
	BucketOwner pulumi.StringPtrInput `pulumi:"bucketOwner"`
	// The key prefix shared by all S3 Objects that are being imported.
	KeyPrefix pulumi.StringPtrInput `pulumi:"keyPrefix"`
}

func (TableImportTableS3BucketSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableImportTableS3BucketSource)(nil)).Elem()
}

func (i TableImportTableS3BucketSourceArgs) ToTableImportTableS3BucketSourceOutput() TableImportTableS3BucketSourceOutput {
	return i.ToTableImportTableS3BucketSourceOutputWithContext(context.Background())
}

func (i TableImportTableS3BucketSourceArgs) ToTableImportTableS3BucketSourceOutputWithContext(ctx context.Context) TableImportTableS3BucketSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTableS3BucketSourceOutput)
}

func (i TableImportTableS3BucketSourceArgs) ToTableImportTableS3BucketSourcePtrOutput() TableImportTableS3BucketSourcePtrOutput {
	return i.ToTableImportTableS3BucketSourcePtrOutputWithContext(context.Background())
}

func (i TableImportTableS3BucketSourceArgs) ToTableImportTableS3BucketSourcePtrOutputWithContext(ctx context.Context) TableImportTableS3BucketSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTableS3BucketSourceOutput).ToTableImportTableS3BucketSourcePtrOutputWithContext(ctx)
}

// TableImportTableS3BucketSourcePtrInput is an input type that accepts TableImportTableS3BucketSourceArgs, TableImportTableS3BucketSourcePtr and TableImportTableS3BucketSourcePtrOutput values.
// You can construct a concrete instance of `TableImportTableS3BucketSourcePtrInput` via:
//
//	        TableImportTableS3BucketSourceArgs{...}
//
//	or:
//
//	        nil
type TableImportTableS3BucketSourcePtrInput interface {
	pulumi.Input

	ToTableImportTableS3BucketSourcePtrOutput() TableImportTableS3BucketSourcePtrOutput
	ToTableImportTableS3BucketSourcePtrOutputWithContext(context.Context) TableImportTableS3BucketSourcePtrOutput
}

type tableImportTableS3BucketSourcePtrType TableImportTableS3BucketSourceArgs

func TableImportTableS3BucketSourcePtr(v *TableImportTableS3BucketSourceArgs) TableImportTableS3BucketSourcePtrInput {
	return (*tableImportTableS3BucketSourcePtrType)(v)
}

func (*tableImportTableS3BucketSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableImportTableS3BucketSource)(nil)).Elem()
}

func (i *tableImportTableS3BucketSourcePtrType) ToTableImportTableS3BucketSourcePtrOutput() TableImportTableS3BucketSourcePtrOutput {
	return i.ToTableImportTableS3BucketSourcePtrOutputWithContext(context.Background())
}

func (i *tableImportTableS3BucketSourcePtrType) ToTableImportTableS3BucketSourcePtrOutputWithContext(ctx context.Context) TableImportTableS3BucketSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableImportTableS3BucketSourcePtrOutput)
}

type TableImportTableS3BucketSourceOutput struct{ *pulumi.OutputState }

func (TableImportTableS3BucketSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableImportTableS3BucketSource)(nil)).Elem()
}

func (o TableImportTableS3BucketSourceOutput) ToTableImportTableS3BucketSourceOutput() TableImportTableS3BucketSourceOutput {
	return o
}

func (o TableImportTableS3BucketSourceOutput) ToTableImportTableS3BucketSourceOutputWithContext(ctx context.Context) TableImportTableS3BucketSourceOutput {
	return o
}

func (o TableImportTableS3BucketSourceOutput) ToTableImportTableS3BucketSourcePtrOutput() TableImportTableS3BucketSourcePtrOutput {
	return o.ToTableImportTableS3BucketSourcePtrOutputWithContext(context.Background())
}

func (o TableImportTableS3BucketSourceOutput) ToTableImportTableS3BucketSourcePtrOutputWithContext(ctx context.Context) TableImportTableS3BucketSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableImportTableS3BucketSource) *TableImportTableS3BucketSource {
		return &v
	}).(TableImportTableS3BucketSourcePtrOutput)
}

// The S3 bucket that is being imported from.
func (o TableImportTableS3BucketSourceOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v TableImportTableS3BucketSource) string { return v.Bucket }).(pulumi.StringOutput)
}

// The account number of the S3 bucket that is being imported from.
func (o TableImportTableS3BucketSourceOutput) BucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableImportTableS3BucketSource) *string { return v.BucketOwner }).(pulumi.StringPtrOutput)
}

// The key prefix shared by all S3 Objects that are being imported.
func (o TableImportTableS3BucketSourceOutput) KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableImportTableS3BucketSource) *string { return v.KeyPrefix }).(pulumi.StringPtrOutput)
}

type TableImportTableS3BucketSourcePtrOutput struct{ *pulumi.OutputState }

func (TableImportTableS3BucketSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableImportTableS3BucketSource)(nil)).Elem()
}

func (o TableImportTableS3BucketSourcePtrOutput) ToTableImportTableS3BucketSourcePtrOutput() TableImportTableS3BucketSourcePtrOutput {
	return o
}

func (o TableImportTableS3BucketSourcePtrOutput) ToTableImportTableS3BucketSourcePtrOutputWithContext(ctx context.Context) TableImportTableS3BucketSourcePtrOutput {
	return o
}

func (o TableImportTableS3BucketSourcePtrOutput) Elem() TableImportTableS3BucketSourceOutput {
	return o.ApplyT(func(v *TableImportTableS3BucketSource) TableImportTableS3BucketSource {
		if v != nil {
			return *v
		}
		var ret TableImportTableS3BucketSource
		return ret
	}).(TableImportTableS3BucketSourceOutput)
}

// The S3 bucket that is being imported from.
func (o TableImportTableS3BucketSourcePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableImportTableS3BucketSource) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// The account number of the S3 bucket that is being imported from.
func (o TableImportTableS3BucketSourcePtrOutput) BucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableImportTableS3BucketSource) *string {
		if v == nil {
			return nil
		}
		return v.BucketOwner
	}).(pulumi.StringPtrOutput)
}

// The key prefix shared by all S3 Objects that are being imported.
func (o TableImportTableS3BucketSourcePtrOutput) KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableImportTableS3BucketSource) *string {
		if v == nil {
			return nil
		}
		return v.KeyPrefix
	}).(pulumi.StringPtrOutput)
}

type TableLocalSecondaryIndex struct {
	// Name of the index
	Name string `pulumi:"name"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
	ProjectionType string `pulumi:"projectionType"`
	// Name of the range key.
	RangeKey string `pulumi:"rangeKey"`
}

// TableLocalSecondaryIndexInput is an input type that accepts TableLocalSecondaryIndexArgs and TableLocalSecondaryIndexOutput values.
// You can construct a concrete instance of `TableLocalSecondaryIndexInput` via:
//
//	TableLocalSecondaryIndexArgs{...}
type TableLocalSecondaryIndexInput interface {
	pulumi.Input

	ToTableLocalSecondaryIndexOutput() TableLocalSecondaryIndexOutput
	ToTableLocalSecondaryIndexOutputWithContext(context.Context) TableLocalSecondaryIndexOutput
}

type TableLocalSecondaryIndexArgs struct {
	// Name of the index
	Name pulumi.StringInput `pulumi:"name"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
	NonKeyAttributes pulumi.StringArrayInput `pulumi:"nonKeyAttributes"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
	ProjectionType pulumi.StringInput `pulumi:"projectionType"`
	// Name of the range key.
	RangeKey pulumi.StringInput `pulumi:"rangeKey"`
}

func (TableLocalSecondaryIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableLocalSecondaryIndex)(nil)).Elem()
}

func (i TableLocalSecondaryIndexArgs) ToTableLocalSecondaryIndexOutput() TableLocalSecondaryIndexOutput {
	return i.ToTableLocalSecondaryIndexOutputWithContext(context.Background())
}

func (i TableLocalSecondaryIndexArgs) ToTableLocalSecondaryIndexOutputWithContext(ctx context.Context) TableLocalSecondaryIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableLocalSecondaryIndexOutput)
}

// TableLocalSecondaryIndexArrayInput is an input type that accepts TableLocalSecondaryIndexArray and TableLocalSecondaryIndexArrayOutput values.
// You can construct a concrete instance of `TableLocalSecondaryIndexArrayInput` via:
//
//	TableLocalSecondaryIndexArray{ TableLocalSecondaryIndexArgs{...} }
type TableLocalSecondaryIndexArrayInput interface {
	pulumi.Input

	ToTableLocalSecondaryIndexArrayOutput() TableLocalSecondaryIndexArrayOutput
	ToTableLocalSecondaryIndexArrayOutputWithContext(context.Context) TableLocalSecondaryIndexArrayOutput
}

type TableLocalSecondaryIndexArray []TableLocalSecondaryIndexInput

func (TableLocalSecondaryIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableLocalSecondaryIndex)(nil)).Elem()
}

func (i TableLocalSecondaryIndexArray) ToTableLocalSecondaryIndexArrayOutput() TableLocalSecondaryIndexArrayOutput {
	return i.ToTableLocalSecondaryIndexArrayOutputWithContext(context.Background())
}

func (i TableLocalSecondaryIndexArray) ToTableLocalSecondaryIndexArrayOutputWithContext(ctx context.Context) TableLocalSecondaryIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableLocalSecondaryIndexArrayOutput)
}

type TableLocalSecondaryIndexOutput struct{ *pulumi.OutputState }

func (TableLocalSecondaryIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableLocalSecondaryIndex)(nil)).Elem()
}

func (o TableLocalSecondaryIndexOutput) ToTableLocalSecondaryIndexOutput() TableLocalSecondaryIndexOutput {
	return o
}

func (o TableLocalSecondaryIndexOutput) ToTableLocalSecondaryIndexOutputWithContext(ctx context.Context) TableLocalSecondaryIndexOutput {
	return o
}

// Name of the index
func (o TableLocalSecondaryIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableLocalSecondaryIndex) string { return v.Name }).(pulumi.StringOutput)
}

// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index. These do not need to be defined as attributes on the table.
func (o TableLocalSecondaryIndexOutput) NonKeyAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableLocalSecondaryIndex) []string { return v.NonKeyAttributes }).(pulumi.StringArrayOutput)
}

// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where `ALL` projects every attribute into the index, `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,  `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to the attributes that that`KEYS_ONLY` project.
func (o TableLocalSecondaryIndexOutput) ProjectionType() pulumi.StringOutput {
	return o.ApplyT(func(v TableLocalSecondaryIndex) string { return v.ProjectionType }).(pulumi.StringOutput)
}

// Name of the range key.
func (o TableLocalSecondaryIndexOutput) RangeKey() pulumi.StringOutput {
	return o.ApplyT(func(v TableLocalSecondaryIndex) string { return v.RangeKey }).(pulumi.StringOutput)
}

type TableLocalSecondaryIndexArrayOutput struct{ *pulumi.OutputState }

func (TableLocalSecondaryIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableLocalSecondaryIndex)(nil)).Elem()
}

func (o TableLocalSecondaryIndexArrayOutput) ToTableLocalSecondaryIndexArrayOutput() TableLocalSecondaryIndexArrayOutput {
	return o
}

func (o TableLocalSecondaryIndexArrayOutput) ToTableLocalSecondaryIndexArrayOutputWithContext(ctx context.Context) TableLocalSecondaryIndexArrayOutput {
	return o
}

func (o TableLocalSecondaryIndexArrayOutput) Index(i pulumi.IntInput) TableLocalSecondaryIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableLocalSecondaryIndex {
		return vs[0].([]TableLocalSecondaryIndex)[vs[1].(int)]
	}).(TableLocalSecondaryIndexOutput)
}

type TablePointInTimeRecovery struct {
	// Whether to enable point-in-time recovery. It can take 10 minutes to enable for new tables. If the `pointInTimeRecovery` block is not provided, this defaults to `false`.
	Enabled bool `pulumi:"enabled"`
}

// TablePointInTimeRecoveryInput is an input type that accepts TablePointInTimeRecoveryArgs and TablePointInTimeRecoveryOutput values.
// You can construct a concrete instance of `TablePointInTimeRecoveryInput` via:
//
//	TablePointInTimeRecoveryArgs{...}
type TablePointInTimeRecoveryInput interface {
	pulumi.Input

	ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput
	ToTablePointInTimeRecoveryOutputWithContext(context.Context) TablePointInTimeRecoveryOutput
}

type TablePointInTimeRecoveryArgs struct {
	// Whether to enable point-in-time recovery. It can take 10 minutes to enable for new tables. If the `pointInTimeRecovery` block is not provided, this defaults to `false`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (TablePointInTimeRecoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return i.ToTablePointInTimeRecoveryOutputWithContext(context.Background())
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryOutput)
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return i.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryOutput).ToTablePointInTimeRecoveryPtrOutputWithContext(ctx)
}

// TablePointInTimeRecoveryPtrInput is an input type that accepts TablePointInTimeRecoveryArgs, TablePointInTimeRecoveryPtr and TablePointInTimeRecoveryPtrOutput values.
// You can construct a concrete instance of `TablePointInTimeRecoveryPtrInput` via:
//
//	        TablePointInTimeRecoveryArgs{...}
//
//	or:
//
//	        nil
type TablePointInTimeRecoveryPtrInput interface {
	pulumi.Input

	ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput
	ToTablePointInTimeRecoveryPtrOutputWithContext(context.Context) TablePointInTimeRecoveryPtrOutput
}

type tablePointInTimeRecoveryPtrType TablePointInTimeRecoveryArgs

func TablePointInTimeRecoveryPtr(v *TablePointInTimeRecoveryArgs) TablePointInTimeRecoveryPtrInput {
	return (*tablePointInTimeRecoveryPtrType)(v)
}

func (*tablePointInTimeRecoveryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePointInTimeRecovery)(nil)).Elem()
}

func (i *tablePointInTimeRecoveryPtrType) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return i.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (i *tablePointInTimeRecoveryPtrType) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryPtrOutput)
}

type TablePointInTimeRecoveryOutput struct{ *pulumi.OutputState }

func (TablePointInTimeRecoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return o.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TablePointInTimeRecovery) *TablePointInTimeRecovery {
		return &v
	}).(TablePointInTimeRecoveryPtrOutput)
}

// Whether to enable point-in-time recovery. It can take 10 minutes to enable for new tables. If the `pointInTimeRecovery` block is not provided, this defaults to `false`.
func (o TablePointInTimeRecoveryOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v TablePointInTimeRecovery) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type TablePointInTimeRecoveryPtrOutput struct{ *pulumi.OutputState }

func (TablePointInTimeRecoveryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePointInTimeRecovery)(nil)).Elem()
}

func (o TablePointInTimeRecoveryPtrOutput) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return o
}

func (o TablePointInTimeRecoveryPtrOutput) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return o
}

func (o TablePointInTimeRecoveryPtrOutput) Elem() TablePointInTimeRecoveryOutput {
	return o.ApplyT(func(v *TablePointInTimeRecovery) TablePointInTimeRecovery {
		if v != nil {
			return *v
		}
		var ret TablePointInTimeRecovery
		return ret
	}).(TablePointInTimeRecoveryOutput)
}

// Whether to enable point-in-time recovery. It can take 10 minutes to enable for new tables. If the `pointInTimeRecovery` block is not provided, this defaults to `false`.
func (o TablePointInTimeRecoveryPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TablePointInTimeRecovery) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type TableReplicaType struct {
	// ARN of the table
	Arn *string `pulumi:"arn"`
	// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Whether to enable Point In Time Recovery for the replica. Default is `false`.
	PointInTimeRecovery *bool `pulumi:"pointInTimeRecovery"`
	// Whether to propagate the global table's tags to a replica. Default is `false`. Changes to tags only move in one direction: from global (source) to replica. In other words, tag drift on a replica will not trigger an update. Tag or replica changes on the global table, whether from drift or configuration changes, are propagated to replicas. Changing from `true` to `false` on a subsequent `apply` means replica tags are left as they were, unmanaged, not deleted.
	PropagateTags *bool `pulumi:"propagateTags"`
	// Region name of the replica.
	RegionName string `pulumi:"regionName"`
	// ARN of the Table Stream. Only available when `streamEnabled = true`
	StreamArn *string `pulumi:"streamArn"`
	// Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`.
	StreamLabel *string `pulumi:"streamLabel"`
}

// TableReplicaTypeInput is an input type that accepts TableReplicaTypeArgs and TableReplicaTypeOutput values.
// You can construct a concrete instance of `TableReplicaTypeInput` via:
//
//	TableReplicaTypeArgs{...}
type TableReplicaTypeInput interface {
	pulumi.Input

	ToTableReplicaTypeOutput() TableReplicaTypeOutput
	ToTableReplicaTypeOutputWithContext(context.Context) TableReplicaTypeOutput
}

type TableReplicaTypeArgs struct {
	// ARN of the table
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
	KmsKeyArn pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
	// Whether to enable Point In Time Recovery for the replica. Default is `false`.
	PointInTimeRecovery pulumi.BoolPtrInput `pulumi:"pointInTimeRecovery"`
	// Whether to propagate the global table's tags to a replica. Default is `false`. Changes to tags only move in one direction: from global (source) to replica. In other words, tag drift on a replica will not trigger an update. Tag or replica changes on the global table, whether from drift or configuration changes, are propagated to replicas. Changing from `true` to `false` on a subsequent `apply` means replica tags are left as they were, unmanaged, not deleted.
	PropagateTags pulumi.BoolPtrInput `pulumi:"propagateTags"`
	// Region name of the replica.
	RegionName pulumi.StringInput `pulumi:"regionName"`
	// ARN of the Table Stream. Only available when `streamEnabled = true`
	StreamArn pulumi.StringPtrInput `pulumi:"streamArn"`
	// Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`.
	StreamLabel pulumi.StringPtrInput `pulumi:"streamLabel"`
}

func (TableReplicaTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReplicaType)(nil)).Elem()
}

func (i TableReplicaTypeArgs) ToTableReplicaTypeOutput() TableReplicaTypeOutput {
	return i.ToTableReplicaTypeOutputWithContext(context.Background())
}

func (i TableReplicaTypeArgs) ToTableReplicaTypeOutputWithContext(ctx context.Context) TableReplicaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicaTypeOutput)
}

// TableReplicaTypeArrayInput is an input type that accepts TableReplicaTypeArray and TableReplicaTypeArrayOutput values.
// You can construct a concrete instance of `TableReplicaTypeArrayInput` via:
//
//	TableReplicaTypeArray{ TableReplicaTypeArgs{...} }
type TableReplicaTypeArrayInput interface {
	pulumi.Input

	ToTableReplicaTypeArrayOutput() TableReplicaTypeArrayOutput
	ToTableReplicaTypeArrayOutputWithContext(context.Context) TableReplicaTypeArrayOutput
}

type TableReplicaTypeArray []TableReplicaTypeInput

func (TableReplicaTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReplicaType)(nil)).Elem()
}

func (i TableReplicaTypeArray) ToTableReplicaTypeArrayOutput() TableReplicaTypeArrayOutput {
	return i.ToTableReplicaTypeArrayOutputWithContext(context.Background())
}

func (i TableReplicaTypeArray) ToTableReplicaTypeArrayOutputWithContext(ctx context.Context) TableReplicaTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicaTypeArrayOutput)
}

type TableReplicaTypeOutput struct{ *pulumi.OutputState }

func (TableReplicaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReplicaType)(nil)).Elem()
}

func (o TableReplicaTypeOutput) ToTableReplicaTypeOutput() TableReplicaTypeOutput {
	return o
}

func (o TableReplicaTypeOutput) ToTableReplicaTypeOutputWithContext(ctx context.Context) TableReplicaTypeOutput {
	return o
}

// ARN of the table
func (o TableReplicaTypeOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableReplicaType) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
func (o TableReplicaTypeOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableReplicaType) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// Whether to enable Point In Time Recovery for the replica. Default is `false`.
func (o TableReplicaTypeOutput) PointInTimeRecovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableReplicaType) *bool { return v.PointInTimeRecovery }).(pulumi.BoolPtrOutput)
}

// Whether to propagate the global table's tags to a replica. Default is `false`. Changes to tags only move in one direction: from global (source) to replica. In other words, tag drift on a replica will not trigger an update. Tag or replica changes on the global table, whether from drift or configuration changes, are propagated to replicas. Changing from `true` to `false` on a subsequent `apply` means replica tags are left as they were, unmanaged, not deleted.
func (o TableReplicaTypeOutput) PropagateTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableReplicaType) *bool { return v.PropagateTags }).(pulumi.BoolPtrOutput)
}

// Region name of the replica.
func (o TableReplicaTypeOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v TableReplicaType) string { return v.RegionName }).(pulumi.StringOutput)
}

// ARN of the Table Stream. Only available when `streamEnabled = true`
func (o TableReplicaTypeOutput) StreamArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableReplicaType) *string { return v.StreamArn }).(pulumi.StringPtrOutput)
}

// Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`.
func (o TableReplicaTypeOutput) StreamLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableReplicaType) *string { return v.StreamLabel }).(pulumi.StringPtrOutput)
}

type TableReplicaTypeArrayOutput struct{ *pulumi.OutputState }

func (TableReplicaTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReplicaType)(nil)).Elem()
}

func (o TableReplicaTypeArrayOutput) ToTableReplicaTypeArrayOutput() TableReplicaTypeArrayOutput {
	return o
}

func (o TableReplicaTypeArrayOutput) ToTableReplicaTypeArrayOutputWithContext(ctx context.Context) TableReplicaTypeArrayOutput {
	return o
}

func (o TableReplicaTypeArrayOutput) Index(i pulumi.IntInput) TableReplicaTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableReplicaType {
		return vs[0].([]TableReplicaType)[vs[1].(int)]
	}).(TableReplicaTypeOutput)
}

type TableServerSideEncryption struct {
	// Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK). If `enabled` is `false` then server-side encryption is set to AWS-_owned_ key (shown as `DEFAULT` in the AWS console). Potentially confusingly, if `enabled` is `true` and no `kmsKeyArn` is specified then server-side encryption is set to the _default_ KMS-_managed_ key (shown as `KMS` in the AWS console). The [AWS KMS documentation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html) explains the difference between AWS-_owned_ and KMS-_managed_ keys.
	Enabled bool `pulumi:"enabled"`
	// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
}

// TableServerSideEncryptionInput is an input type that accepts TableServerSideEncryptionArgs and TableServerSideEncryptionOutput values.
// You can construct a concrete instance of `TableServerSideEncryptionInput` via:
//
//	TableServerSideEncryptionArgs{...}
type TableServerSideEncryptionInput interface {
	pulumi.Input

	ToTableServerSideEncryptionOutput() TableServerSideEncryptionOutput
	ToTableServerSideEncryptionOutputWithContext(context.Context) TableServerSideEncryptionOutput
}

type TableServerSideEncryptionArgs struct {
	// Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK). If `enabled` is `false` then server-side encryption is set to AWS-_owned_ key (shown as `DEFAULT` in the AWS console). Potentially confusingly, if `enabled` is `true` and no `kmsKeyArn` is specified then server-side encryption is set to the _default_ KMS-_managed_ key (shown as `KMS` in the AWS console). The [AWS KMS documentation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html) explains the difference between AWS-_owned_ and KMS-_managed_ keys.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
	KmsKeyArn pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
}

func (TableServerSideEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableServerSideEncryption)(nil)).Elem()
}

func (i TableServerSideEncryptionArgs) ToTableServerSideEncryptionOutput() TableServerSideEncryptionOutput {
	return i.ToTableServerSideEncryptionOutputWithContext(context.Background())
}

func (i TableServerSideEncryptionArgs) ToTableServerSideEncryptionOutputWithContext(ctx context.Context) TableServerSideEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableServerSideEncryptionOutput)
}

func (i TableServerSideEncryptionArgs) ToTableServerSideEncryptionPtrOutput() TableServerSideEncryptionPtrOutput {
	return i.ToTableServerSideEncryptionPtrOutputWithContext(context.Background())
}

func (i TableServerSideEncryptionArgs) ToTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) TableServerSideEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableServerSideEncryptionOutput).ToTableServerSideEncryptionPtrOutputWithContext(ctx)
}

// TableServerSideEncryptionPtrInput is an input type that accepts TableServerSideEncryptionArgs, TableServerSideEncryptionPtr and TableServerSideEncryptionPtrOutput values.
// You can construct a concrete instance of `TableServerSideEncryptionPtrInput` via:
//
//	        TableServerSideEncryptionArgs{...}
//
//	or:
//
//	        nil
type TableServerSideEncryptionPtrInput interface {
	pulumi.Input

	ToTableServerSideEncryptionPtrOutput() TableServerSideEncryptionPtrOutput
	ToTableServerSideEncryptionPtrOutputWithContext(context.Context) TableServerSideEncryptionPtrOutput
}

type tableServerSideEncryptionPtrType TableServerSideEncryptionArgs

func TableServerSideEncryptionPtr(v *TableServerSideEncryptionArgs) TableServerSideEncryptionPtrInput {
	return (*tableServerSideEncryptionPtrType)(v)
}

func (*tableServerSideEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableServerSideEncryption)(nil)).Elem()
}

func (i *tableServerSideEncryptionPtrType) ToTableServerSideEncryptionPtrOutput() TableServerSideEncryptionPtrOutput {
	return i.ToTableServerSideEncryptionPtrOutputWithContext(context.Background())
}

func (i *tableServerSideEncryptionPtrType) ToTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) TableServerSideEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableServerSideEncryptionPtrOutput)
}

type TableServerSideEncryptionOutput struct{ *pulumi.OutputState }

func (TableServerSideEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableServerSideEncryption)(nil)).Elem()
}

func (o TableServerSideEncryptionOutput) ToTableServerSideEncryptionOutput() TableServerSideEncryptionOutput {
	return o
}

func (o TableServerSideEncryptionOutput) ToTableServerSideEncryptionOutputWithContext(ctx context.Context) TableServerSideEncryptionOutput {
	return o
}

func (o TableServerSideEncryptionOutput) ToTableServerSideEncryptionPtrOutput() TableServerSideEncryptionPtrOutput {
	return o.ToTableServerSideEncryptionPtrOutputWithContext(context.Background())
}

func (o TableServerSideEncryptionOutput) ToTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) TableServerSideEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableServerSideEncryption) *TableServerSideEncryption {
		return &v
	}).(TableServerSideEncryptionPtrOutput)
}

// Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK). If `enabled` is `false` then server-side encryption is set to AWS-_owned_ key (shown as `DEFAULT` in the AWS console). Potentially confusingly, if `enabled` is `true` and no `kmsKeyArn` is specified then server-side encryption is set to the _default_ KMS-_managed_ key (shown as `KMS` in the AWS console). The [AWS KMS documentation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html) explains the difference between AWS-_owned_ and KMS-_managed_ keys.
func (o TableServerSideEncryptionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v TableServerSideEncryption) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
func (o TableServerSideEncryptionOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableServerSideEncryption) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

type TableServerSideEncryptionPtrOutput struct{ *pulumi.OutputState }

func (TableServerSideEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableServerSideEncryption)(nil)).Elem()
}

func (o TableServerSideEncryptionPtrOutput) ToTableServerSideEncryptionPtrOutput() TableServerSideEncryptionPtrOutput {
	return o
}

func (o TableServerSideEncryptionPtrOutput) ToTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) TableServerSideEncryptionPtrOutput {
	return o
}

func (o TableServerSideEncryptionPtrOutput) Elem() TableServerSideEncryptionOutput {
	return o.ApplyT(func(v *TableServerSideEncryption) TableServerSideEncryption {
		if v != nil {
			return *v
		}
		var ret TableServerSideEncryption
		return ret
	}).(TableServerSideEncryptionOutput)
}

// Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK). If `enabled` is `false` then server-side encryption is set to AWS-_owned_ key (shown as `DEFAULT` in the AWS console). Potentially confusingly, if `enabled` is `true` and no `kmsKeyArn` is specified then server-side encryption is set to the _default_ KMS-_managed_ key (shown as `KMS` in the AWS console). The [AWS KMS documentation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html) explains the difference between AWS-_owned_ and KMS-_managed_ keys.
func (o TableServerSideEncryptionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableServerSideEncryption) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// ARN of the CMK that should be used for the AWS KMS encryption. This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`. **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
func (o TableServerSideEncryptionPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableServerSideEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

type TableTtl struct {
	// Name of the table attribute to store the TTL timestamp in.
	AttributeName string `pulumi:"attributeName"`
	// Whether TTL is enabled.
	Enabled *bool `pulumi:"enabled"`
}

// TableTtlInput is an input type that accepts TableTtlArgs and TableTtlOutput values.
// You can construct a concrete instance of `TableTtlInput` via:
//
//	TableTtlArgs{...}
type TableTtlInput interface {
	pulumi.Input

	ToTableTtlOutput() TableTtlOutput
	ToTableTtlOutputWithContext(context.Context) TableTtlOutput
}

type TableTtlArgs struct {
	// Name of the table attribute to store the TTL timestamp in.
	AttributeName pulumi.StringInput `pulumi:"attributeName"`
	// Whether TTL is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (TableTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTtl)(nil)).Elem()
}

func (i TableTtlArgs) ToTableTtlOutput() TableTtlOutput {
	return i.ToTableTtlOutputWithContext(context.Background())
}

func (i TableTtlArgs) ToTableTtlOutputWithContext(ctx context.Context) TableTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTtlOutput)
}

func (i TableTtlArgs) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return i.ToTableTtlPtrOutputWithContext(context.Background())
}

func (i TableTtlArgs) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTtlOutput).ToTableTtlPtrOutputWithContext(ctx)
}

// TableTtlPtrInput is an input type that accepts TableTtlArgs, TableTtlPtr and TableTtlPtrOutput values.
// You can construct a concrete instance of `TableTtlPtrInput` via:
//
//	        TableTtlArgs{...}
//
//	or:
//
//	        nil
type TableTtlPtrInput interface {
	pulumi.Input

	ToTableTtlPtrOutput() TableTtlPtrOutput
	ToTableTtlPtrOutputWithContext(context.Context) TableTtlPtrOutput
}

type tableTtlPtrType TableTtlArgs

func TableTtlPtr(v *TableTtlArgs) TableTtlPtrInput {
	return (*tableTtlPtrType)(v)
}

func (*tableTtlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTtl)(nil)).Elem()
}

func (i *tableTtlPtrType) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return i.ToTableTtlPtrOutputWithContext(context.Background())
}

func (i *tableTtlPtrType) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTtlPtrOutput)
}

type TableTtlOutput struct{ *pulumi.OutputState }

func (TableTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTtl)(nil)).Elem()
}

func (o TableTtlOutput) ToTableTtlOutput() TableTtlOutput {
	return o
}

func (o TableTtlOutput) ToTableTtlOutputWithContext(ctx context.Context) TableTtlOutput {
	return o
}

func (o TableTtlOutput) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return o.ToTableTtlPtrOutputWithContext(context.Background())
}

func (o TableTtlOutput) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableTtl) *TableTtl {
		return &v
	}).(TableTtlPtrOutput)
}

// Name of the table attribute to store the TTL timestamp in.
func (o TableTtlOutput) AttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v TableTtl) string { return v.AttributeName }).(pulumi.StringOutput)
}

// Whether TTL is enabled.
func (o TableTtlOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableTtl) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type TableTtlPtrOutput struct{ *pulumi.OutputState }

func (TableTtlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTtl)(nil)).Elem()
}

func (o TableTtlPtrOutput) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return o
}

func (o TableTtlPtrOutput) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return o
}

func (o TableTtlPtrOutput) Elem() TableTtlOutput {
	return o.ApplyT(func(v *TableTtl) TableTtl {
		if v != nil {
			return *v
		}
		var ret TableTtl
		return ret
	}).(TableTtlOutput)
}

// Name of the table attribute to store the TTL timestamp in.
func (o TableTtlPtrOutput) AttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableTtl) *string {
		if v == nil {
			return nil
		}
		return &v.AttributeName
	}).(pulumi.StringPtrOutput)
}

// Whether TTL is enabled.
func (o TableTtlPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableTtl) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type GetTableAttribute struct {
	// Name of the DynamoDB table.
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

// GetTableAttributeInput is an input type that accepts GetTableAttributeArgs and GetTableAttributeOutput values.
// You can construct a concrete instance of `GetTableAttributeInput` via:
//
//	GetTableAttributeArgs{...}
type GetTableAttributeInput interface {
	pulumi.Input

	ToGetTableAttributeOutput() GetTableAttributeOutput
	ToGetTableAttributeOutputWithContext(context.Context) GetTableAttributeOutput
}

type GetTableAttributeArgs struct {
	// Name of the DynamoDB table.
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetTableAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableAttribute)(nil)).Elem()
}

func (i GetTableAttributeArgs) ToGetTableAttributeOutput() GetTableAttributeOutput {
	return i.ToGetTableAttributeOutputWithContext(context.Background())
}

func (i GetTableAttributeArgs) ToGetTableAttributeOutputWithContext(ctx context.Context) GetTableAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableAttributeOutput)
}

// GetTableAttributeArrayInput is an input type that accepts GetTableAttributeArray and GetTableAttributeArrayOutput values.
// You can construct a concrete instance of `GetTableAttributeArrayInput` via:
//
//	GetTableAttributeArray{ GetTableAttributeArgs{...} }
type GetTableAttributeArrayInput interface {
	pulumi.Input

	ToGetTableAttributeArrayOutput() GetTableAttributeArrayOutput
	ToGetTableAttributeArrayOutputWithContext(context.Context) GetTableAttributeArrayOutput
}

type GetTableAttributeArray []GetTableAttributeInput

func (GetTableAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableAttribute)(nil)).Elem()
}

func (i GetTableAttributeArray) ToGetTableAttributeArrayOutput() GetTableAttributeArrayOutput {
	return i.ToGetTableAttributeArrayOutputWithContext(context.Background())
}

func (i GetTableAttributeArray) ToGetTableAttributeArrayOutputWithContext(ctx context.Context) GetTableAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableAttributeArrayOutput)
}

type GetTableAttributeOutput struct{ *pulumi.OutputState }

func (GetTableAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableAttribute)(nil)).Elem()
}

func (o GetTableAttributeOutput) ToGetTableAttributeOutput() GetTableAttributeOutput {
	return o
}

func (o GetTableAttributeOutput) ToGetTableAttributeOutputWithContext(ctx context.Context) GetTableAttributeOutput {
	return o
}

// Name of the DynamoDB table.
func (o GetTableAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableAttribute) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetTableAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableAttribute) string { return v.Type }).(pulumi.StringOutput)
}

type GetTableAttributeArrayOutput struct{ *pulumi.OutputState }

func (GetTableAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableAttribute)(nil)).Elem()
}

func (o GetTableAttributeArrayOutput) ToGetTableAttributeArrayOutput() GetTableAttributeArrayOutput {
	return o
}

func (o GetTableAttributeArrayOutput) ToGetTableAttributeArrayOutputWithContext(ctx context.Context) GetTableAttributeArrayOutput {
	return o
}

func (o GetTableAttributeArrayOutput) Index(i pulumi.IntInput) GetTableAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTableAttribute {
		return vs[0].([]GetTableAttribute)[vs[1].(int)]
	}).(GetTableAttributeOutput)
}

type GetTableGlobalSecondaryIndex struct {
	HashKey string `pulumi:"hashKey"`
	// Name of the DynamoDB table.
	Name             string   `pulumi:"name"`
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	ProjectionType   string   `pulumi:"projectionType"`
	RangeKey         string   `pulumi:"rangeKey"`
	ReadCapacity     int      `pulumi:"readCapacity"`
	WriteCapacity    int      `pulumi:"writeCapacity"`
}

// GetTableGlobalSecondaryIndexInput is an input type that accepts GetTableGlobalSecondaryIndexArgs and GetTableGlobalSecondaryIndexOutput values.
// You can construct a concrete instance of `GetTableGlobalSecondaryIndexInput` via:
//
//	GetTableGlobalSecondaryIndexArgs{...}
type GetTableGlobalSecondaryIndexInput interface {
	pulumi.Input

	ToGetTableGlobalSecondaryIndexOutput() GetTableGlobalSecondaryIndexOutput
	ToGetTableGlobalSecondaryIndexOutputWithContext(context.Context) GetTableGlobalSecondaryIndexOutput
}

type GetTableGlobalSecondaryIndexArgs struct {
	HashKey pulumi.StringInput `pulumi:"hashKey"`
	// Name of the DynamoDB table.
	Name             pulumi.StringInput      `pulumi:"name"`
	NonKeyAttributes pulumi.StringArrayInput `pulumi:"nonKeyAttributes"`
	ProjectionType   pulumi.StringInput      `pulumi:"projectionType"`
	RangeKey         pulumi.StringInput      `pulumi:"rangeKey"`
	ReadCapacity     pulumi.IntInput         `pulumi:"readCapacity"`
	WriteCapacity    pulumi.IntInput         `pulumi:"writeCapacity"`
}

func (GetTableGlobalSecondaryIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableGlobalSecondaryIndex)(nil)).Elem()
}

func (i GetTableGlobalSecondaryIndexArgs) ToGetTableGlobalSecondaryIndexOutput() GetTableGlobalSecondaryIndexOutput {
	return i.ToGetTableGlobalSecondaryIndexOutputWithContext(context.Background())
}

func (i GetTableGlobalSecondaryIndexArgs) ToGetTableGlobalSecondaryIndexOutputWithContext(ctx context.Context) GetTableGlobalSecondaryIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableGlobalSecondaryIndexOutput)
}

// GetTableGlobalSecondaryIndexArrayInput is an input type that accepts GetTableGlobalSecondaryIndexArray and GetTableGlobalSecondaryIndexArrayOutput values.
// You can construct a concrete instance of `GetTableGlobalSecondaryIndexArrayInput` via:
//
//	GetTableGlobalSecondaryIndexArray{ GetTableGlobalSecondaryIndexArgs{...} }
type GetTableGlobalSecondaryIndexArrayInput interface {
	pulumi.Input

	ToGetTableGlobalSecondaryIndexArrayOutput() GetTableGlobalSecondaryIndexArrayOutput
	ToGetTableGlobalSecondaryIndexArrayOutputWithContext(context.Context) GetTableGlobalSecondaryIndexArrayOutput
}

type GetTableGlobalSecondaryIndexArray []GetTableGlobalSecondaryIndexInput

func (GetTableGlobalSecondaryIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableGlobalSecondaryIndex)(nil)).Elem()
}

func (i GetTableGlobalSecondaryIndexArray) ToGetTableGlobalSecondaryIndexArrayOutput() GetTableGlobalSecondaryIndexArrayOutput {
	return i.ToGetTableGlobalSecondaryIndexArrayOutputWithContext(context.Background())
}

func (i GetTableGlobalSecondaryIndexArray) ToGetTableGlobalSecondaryIndexArrayOutputWithContext(ctx context.Context) GetTableGlobalSecondaryIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableGlobalSecondaryIndexArrayOutput)
}

type GetTableGlobalSecondaryIndexOutput struct{ *pulumi.OutputState }

func (GetTableGlobalSecondaryIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableGlobalSecondaryIndex)(nil)).Elem()
}

func (o GetTableGlobalSecondaryIndexOutput) ToGetTableGlobalSecondaryIndexOutput() GetTableGlobalSecondaryIndexOutput {
	return o
}

func (o GetTableGlobalSecondaryIndexOutput) ToGetTableGlobalSecondaryIndexOutputWithContext(ctx context.Context) GetTableGlobalSecondaryIndexOutput {
	return o
}

func (o GetTableGlobalSecondaryIndexOutput) HashKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableGlobalSecondaryIndex) string { return v.HashKey }).(pulumi.StringOutput)
}

// Name of the DynamoDB table.
func (o GetTableGlobalSecondaryIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableGlobalSecondaryIndex) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetTableGlobalSecondaryIndexOutput) NonKeyAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTableGlobalSecondaryIndex) []string { return v.NonKeyAttributes }).(pulumi.StringArrayOutput)
}

func (o GetTableGlobalSecondaryIndexOutput) ProjectionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableGlobalSecondaryIndex) string { return v.ProjectionType }).(pulumi.StringOutput)
}

func (o GetTableGlobalSecondaryIndexOutput) RangeKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableGlobalSecondaryIndex) string { return v.RangeKey }).(pulumi.StringOutput)
}

func (o GetTableGlobalSecondaryIndexOutput) ReadCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v GetTableGlobalSecondaryIndex) int { return v.ReadCapacity }).(pulumi.IntOutput)
}

func (o GetTableGlobalSecondaryIndexOutput) WriteCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v GetTableGlobalSecondaryIndex) int { return v.WriteCapacity }).(pulumi.IntOutput)
}

type GetTableGlobalSecondaryIndexArrayOutput struct{ *pulumi.OutputState }

func (GetTableGlobalSecondaryIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableGlobalSecondaryIndex)(nil)).Elem()
}

func (o GetTableGlobalSecondaryIndexArrayOutput) ToGetTableGlobalSecondaryIndexArrayOutput() GetTableGlobalSecondaryIndexArrayOutput {
	return o
}

func (o GetTableGlobalSecondaryIndexArrayOutput) ToGetTableGlobalSecondaryIndexArrayOutputWithContext(ctx context.Context) GetTableGlobalSecondaryIndexArrayOutput {
	return o
}

func (o GetTableGlobalSecondaryIndexArrayOutput) Index(i pulumi.IntInput) GetTableGlobalSecondaryIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTableGlobalSecondaryIndex {
		return vs[0].([]GetTableGlobalSecondaryIndex)[vs[1].(int)]
	}).(GetTableGlobalSecondaryIndexOutput)
}

type GetTableLocalSecondaryIndex struct {
	// Name of the DynamoDB table.
	Name             string   `pulumi:"name"`
	NonKeyAttributes []string `pulumi:"nonKeyAttributes"`
	ProjectionType   string   `pulumi:"projectionType"`
	RangeKey         string   `pulumi:"rangeKey"`
}

// GetTableLocalSecondaryIndexInput is an input type that accepts GetTableLocalSecondaryIndexArgs and GetTableLocalSecondaryIndexOutput values.
// You can construct a concrete instance of `GetTableLocalSecondaryIndexInput` via:
//
//	GetTableLocalSecondaryIndexArgs{...}
type GetTableLocalSecondaryIndexInput interface {
	pulumi.Input

	ToGetTableLocalSecondaryIndexOutput() GetTableLocalSecondaryIndexOutput
	ToGetTableLocalSecondaryIndexOutputWithContext(context.Context) GetTableLocalSecondaryIndexOutput
}

type GetTableLocalSecondaryIndexArgs struct {
	// Name of the DynamoDB table.
	Name             pulumi.StringInput      `pulumi:"name"`
	NonKeyAttributes pulumi.StringArrayInput `pulumi:"nonKeyAttributes"`
	ProjectionType   pulumi.StringInput      `pulumi:"projectionType"`
	RangeKey         pulumi.StringInput      `pulumi:"rangeKey"`
}

func (GetTableLocalSecondaryIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableLocalSecondaryIndex)(nil)).Elem()
}

func (i GetTableLocalSecondaryIndexArgs) ToGetTableLocalSecondaryIndexOutput() GetTableLocalSecondaryIndexOutput {
	return i.ToGetTableLocalSecondaryIndexOutputWithContext(context.Background())
}

func (i GetTableLocalSecondaryIndexArgs) ToGetTableLocalSecondaryIndexOutputWithContext(ctx context.Context) GetTableLocalSecondaryIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableLocalSecondaryIndexOutput)
}

// GetTableLocalSecondaryIndexArrayInput is an input type that accepts GetTableLocalSecondaryIndexArray and GetTableLocalSecondaryIndexArrayOutput values.
// You can construct a concrete instance of `GetTableLocalSecondaryIndexArrayInput` via:
//
//	GetTableLocalSecondaryIndexArray{ GetTableLocalSecondaryIndexArgs{...} }
type GetTableLocalSecondaryIndexArrayInput interface {
	pulumi.Input

	ToGetTableLocalSecondaryIndexArrayOutput() GetTableLocalSecondaryIndexArrayOutput
	ToGetTableLocalSecondaryIndexArrayOutputWithContext(context.Context) GetTableLocalSecondaryIndexArrayOutput
}

type GetTableLocalSecondaryIndexArray []GetTableLocalSecondaryIndexInput

func (GetTableLocalSecondaryIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableLocalSecondaryIndex)(nil)).Elem()
}

func (i GetTableLocalSecondaryIndexArray) ToGetTableLocalSecondaryIndexArrayOutput() GetTableLocalSecondaryIndexArrayOutput {
	return i.ToGetTableLocalSecondaryIndexArrayOutputWithContext(context.Background())
}

func (i GetTableLocalSecondaryIndexArray) ToGetTableLocalSecondaryIndexArrayOutputWithContext(ctx context.Context) GetTableLocalSecondaryIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableLocalSecondaryIndexArrayOutput)
}

type GetTableLocalSecondaryIndexOutput struct{ *pulumi.OutputState }

func (GetTableLocalSecondaryIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableLocalSecondaryIndex)(nil)).Elem()
}

func (o GetTableLocalSecondaryIndexOutput) ToGetTableLocalSecondaryIndexOutput() GetTableLocalSecondaryIndexOutput {
	return o
}

func (o GetTableLocalSecondaryIndexOutput) ToGetTableLocalSecondaryIndexOutputWithContext(ctx context.Context) GetTableLocalSecondaryIndexOutput {
	return o
}

// Name of the DynamoDB table.
func (o GetTableLocalSecondaryIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableLocalSecondaryIndex) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetTableLocalSecondaryIndexOutput) NonKeyAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTableLocalSecondaryIndex) []string { return v.NonKeyAttributes }).(pulumi.StringArrayOutput)
}

func (o GetTableLocalSecondaryIndexOutput) ProjectionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableLocalSecondaryIndex) string { return v.ProjectionType }).(pulumi.StringOutput)
}

func (o GetTableLocalSecondaryIndexOutput) RangeKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableLocalSecondaryIndex) string { return v.RangeKey }).(pulumi.StringOutput)
}

type GetTableLocalSecondaryIndexArrayOutput struct{ *pulumi.OutputState }

func (GetTableLocalSecondaryIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableLocalSecondaryIndex)(nil)).Elem()
}

func (o GetTableLocalSecondaryIndexArrayOutput) ToGetTableLocalSecondaryIndexArrayOutput() GetTableLocalSecondaryIndexArrayOutput {
	return o
}

func (o GetTableLocalSecondaryIndexArrayOutput) ToGetTableLocalSecondaryIndexArrayOutputWithContext(ctx context.Context) GetTableLocalSecondaryIndexArrayOutput {
	return o
}

func (o GetTableLocalSecondaryIndexArrayOutput) Index(i pulumi.IntInput) GetTableLocalSecondaryIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTableLocalSecondaryIndex {
		return vs[0].([]GetTableLocalSecondaryIndex)[vs[1].(int)]
	}).(GetTableLocalSecondaryIndexOutput)
}

type GetTablePointInTimeRecovery struct {
	Enabled bool `pulumi:"enabled"`
}

// GetTablePointInTimeRecoveryInput is an input type that accepts GetTablePointInTimeRecoveryArgs and GetTablePointInTimeRecoveryOutput values.
// You can construct a concrete instance of `GetTablePointInTimeRecoveryInput` via:
//
//	GetTablePointInTimeRecoveryArgs{...}
type GetTablePointInTimeRecoveryInput interface {
	pulumi.Input

	ToGetTablePointInTimeRecoveryOutput() GetTablePointInTimeRecoveryOutput
	ToGetTablePointInTimeRecoveryOutputWithContext(context.Context) GetTablePointInTimeRecoveryOutput
}

type GetTablePointInTimeRecoveryArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (GetTablePointInTimeRecoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablePointInTimeRecovery)(nil)).Elem()
}

func (i GetTablePointInTimeRecoveryArgs) ToGetTablePointInTimeRecoveryOutput() GetTablePointInTimeRecoveryOutput {
	return i.ToGetTablePointInTimeRecoveryOutputWithContext(context.Background())
}

func (i GetTablePointInTimeRecoveryArgs) ToGetTablePointInTimeRecoveryOutputWithContext(ctx context.Context) GetTablePointInTimeRecoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablePointInTimeRecoveryOutput)
}

type GetTablePointInTimeRecoveryOutput struct{ *pulumi.OutputState }

func (GetTablePointInTimeRecoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablePointInTimeRecovery)(nil)).Elem()
}

func (o GetTablePointInTimeRecoveryOutput) ToGetTablePointInTimeRecoveryOutput() GetTablePointInTimeRecoveryOutput {
	return o
}

func (o GetTablePointInTimeRecoveryOutput) ToGetTablePointInTimeRecoveryOutputWithContext(ctx context.Context) GetTablePointInTimeRecoveryOutput {
	return o
}

func (o GetTablePointInTimeRecoveryOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTablePointInTimeRecovery) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type GetTableReplicaType struct {
	KmsKeyArn  string `pulumi:"kmsKeyArn"`
	RegionName string `pulumi:"regionName"`
}

// GetTableReplicaTypeInput is an input type that accepts GetTableReplicaTypeArgs and GetTableReplicaTypeOutput values.
// You can construct a concrete instance of `GetTableReplicaTypeInput` via:
//
//	GetTableReplicaTypeArgs{...}
type GetTableReplicaTypeInput interface {
	pulumi.Input

	ToGetTableReplicaTypeOutput() GetTableReplicaTypeOutput
	ToGetTableReplicaTypeOutputWithContext(context.Context) GetTableReplicaTypeOutput
}

type GetTableReplicaTypeArgs struct {
	KmsKeyArn  pulumi.StringInput `pulumi:"kmsKeyArn"`
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (GetTableReplicaTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableReplicaType)(nil)).Elem()
}

func (i GetTableReplicaTypeArgs) ToGetTableReplicaTypeOutput() GetTableReplicaTypeOutput {
	return i.ToGetTableReplicaTypeOutputWithContext(context.Background())
}

func (i GetTableReplicaTypeArgs) ToGetTableReplicaTypeOutputWithContext(ctx context.Context) GetTableReplicaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableReplicaTypeOutput)
}

// GetTableReplicaTypeArrayInput is an input type that accepts GetTableReplicaTypeArray and GetTableReplicaTypeArrayOutput values.
// You can construct a concrete instance of `GetTableReplicaTypeArrayInput` via:
//
//	GetTableReplicaTypeArray{ GetTableReplicaTypeArgs{...} }
type GetTableReplicaTypeArrayInput interface {
	pulumi.Input

	ToGetTableReplicaTypeArrayOutput() GetTableReplicaTypeArrayOutput
	ToGetTableReplicaTypeArrayOutputWithContext(context.Context) GetTableReplicaTypeArrayOutput
}

type GetTableReplicaTypeArray []GetTableReplicaTypeInput

func (GetTableReplicaTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableReplicaType)(nil)).Elem()
}

func (i GetTableReplicaTypeArray) ToGetTableReplicaTypeArrayOutput() GetTableReplicaTypeArrayOutput {
	return i.ToGetTableReplicaTypeArrayOutputWithContext(context.Background())
}

func (i GetTableReplicaTypeArray) ToGetTableReplicaTypeArrayOutputWithContext(ctx context.Context) GetTableReplicaTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableReplicaTypeArrayOutput)
}

type GetTableReplicaTypeOutput struct{ *pulumi.OutputState }

func (GetTableReplicaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableReplicaType)(nil)).Elem()
}

func (o GetTableReplicaTypeOutput) ToGetTableReplicaTypeOutput() GetTableReplicaTypeOutput {
	return o
}

func (o GetTableReplicaTypeOutput) ToGetTableReplicaTypeOutputWithContext(ctx context.Context) GetTableReplicaTypeOutput {
	return o
}

func (o GetTableReplicaTypeOutput) KmsKeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableReplicaType) string { return v.KmsKeyArn }).(pulumi.StringOutput)
}

func (o GetTableReplicaTypeOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableReplicaType) string { return v.RegionName }).(pulumi.StringOutput)
}

type GetTableReplicaTypeArrayOutput struct{ *pulumi.OutputState }

func (GetTableReplicaTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableReplicaType)(nil)).Elem()
}

func (o GetTableReplicaTypeArrayOutput) ToGetTableReplicaTypeArrayOutput() GetTableReplicaTypeArrayOutput {
	return o
}

func (o GetTableReplicaTypeArrayOutput) ToGetTableReplicaTypeArrayOutputWithContext(ctx context.Context) GetTableReplicaTypeArrayOutput {
	return o
}

func (o GetTableReplicaTypeArrayOutput) Index(i pulumi.IntInput) GetTableReplicaTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTableReplicaType {
		return vs[0].([]GetTableReplicaType)[vs[1].(int)]
	}).(GetTableReplicaTypeOutput)
}

type GetTableServerSideEncryption struct {
	Enabled   bool   `pulumi:"enabled"`
	KmsKeyArn string `pulumi:"kmsKeyArn"`
}

// GetTableServerSideEncryptionInput is an input type that accepts GetTableServerSideEncryptionArgs and GetTableServerSideEncryptionOutput values.
// You can construct a concrete instance of `GetTableServerSideEncryptionInput` via:
//
//	GetTableServerSideEncryptionArgs{...}
type GetTableServerSideEncryptionInput interface {
	pulumi.Input

	ToGetTableServerSideEncryptionOutput() GetTableServerSideEncryptionOutput
	ToGetTableServerSideEncryptionOutputWithContext(context.Context) GetTableServerSideEncryptionOutput
}

type GetTableServerSideEncryptionArgs struct {
	Enabled   pulumi.BoolInput   `pulumi:"enabled"`
	KmsKeyArn pulumi.StringInput `pulumi:"kmsKeyArn"`
}

func (GetTableServerSideEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableServerSideEncryption)(nil)).Elem()
}

func (i GetTableServerSideEncryptionArgs) ToGetTableServerSideEncryptionOutput() GetTableServerSideEncryptionOutput {
	return i.ToGetTableServerSideEncryptionOutputWithContext(context.Background())
}

func (i GetTableServerSideEncryptionArgs) ToGetTableServerSideEncryptionOutputWithContext(ctx context.Context) GetTableServerSideEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableServerSideEncryptionOutput)
}

func (i GetTableServerSideEncryptionArgs) ToGetTableServerSideEncryptionPtrOutput() GetTableServerSideEncryptionPtrOutput {
	return i.ToGetTableServerSideEncryptionPtrOutputWithContext(context.Background())
}

func (i GetTableServerSideEncryptionArgs) ToGetTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) GetTableServerSideEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableServerSideEncryptionOutput).ToGetTableServerSideEncryptionPtrOutputWithContext(ctx)
}

// GetTableServerSideEncryptionPtrInput is an input type that accepts GetTableServerSideEncryptionArgs, GetTableServerSideEncryptionPtr and GetTableServerSideEncryptionPtrOutput values.
// You can construct a concrete instance of `GetTableServerSideEncryptionPtrInput` via:
//
//	        GetTableServerSideEncryptionArgs{...}
//
//	or:
//
//	        nil
type GetTableServerSideEncryptionPtrInput interface {
	pulumi.Input

	ToGetTableServerSideEncryptionPtrOutput() GetTableServerSideEncryptionPtrOutput
	ToGetTableServerSideEncryptionPtrOutputWithContext(context.Context) GetTableServerSideEncryptionPtrOutput
}

type getTableServerSideEncryptionPtrType GetTableServerSideEncryptionArgs

func GetTableServerSideEncryptionPtr(v *GetTableServerSideEncryptionArgs) GetTableServerSideEncryptionPtrInput {
	return (*getTableServerSideEncryptionPtrType)(v)
}

func (*getTableServerSideEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTableServerSideEncryption)(nil)).Elem()
}

func (i *getTableServerSideEncryptionPtrType) ToGetTableServerSideEncryptionPtrOutput() GetTableServerSideEncryptionPtrOutput {
	return i.ToGetTableServerSideEncryptionPtrOutputWithContext(context.Background())
}

func (i *getTableServerSideEncryptionPtrType) ToGetTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) GetTableServerSideEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableServerSideEncryptionPtrOutput)
}

type GetTableServerSideEncryptionOutput struct{ *pulumi.OutputState }

func (GetTableServerSideEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableServerSideEncryption)(nil)).Elem()
}

func (o GetTableServerSideEncryptionOutput) ToGetTableServerSideEncryptionOutput() GetTableServerSideEncryptionOutput {
	return o
}

func (o GetTableServerSideEncryptionOutput) ToGetTableServerSideEncryptionOutputWithContext(ctx context.Context) GetTableServerSideEncryptionOutput {
	return o
}

func (o GetTableServerSideEncryptionOutput) ToGetTableServerSideEncryptionPtrOutput() GetTableServerSideEncryptionPtrOutput {
	return o.ToGetTableServerSideEncryptionPtrOutputWithContext(context.Background())
}

func (o GetTableServerSideEncryptionOutput) ToGetTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) GetTableServerSideEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTableServerSideEncryption) *GetTableServerSideEncryption {
		return &v
	}).(GetTableServerSideEncryptionPtrOutput)
}

func (o GetTableServerSideEncryptionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTableServerSideEncryption) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetTableServerSideEncryptionOutput) KmsKeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableServerSideEncryption) string { return v.KmsKeyArn }).(pulumi.StringOutput)
}

type GetTableServerSideEncryptionPtrOutput struct{ *pulumi.OutputState }

func (GetTableServerSideEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTableServerSideEncryption)(nil)).Elem()
}

func (o GetTableServerSideEncryptionPtrOutput) ToGetTableServerSideEncryptionPtrOutput() GetTableServerSideEncryptionPtrOutput {
	return o
}

func (o GetTableServerSideEncryptionPtrOutput) ToGetTableServerSideEncryptionPtrOutputWithContext(ctx context.Context) GetTableServerSideEncryptionPtrOutput {
	return o
}

func (o GetTableServerSideEncryptionPtrOutput) Elem() GetTableServerSideEncryptionOutput {
	return o.ApplyT(func(v *GetTableServerSideEncryption) GetTableServerSideEncryption {
		if v != nil {
			return *v
		}
		var ret GetTableServerSideEncryption
		return ret
	}).(GetTableServerSideEncryptionOutput)
}

func (o GetTableServerSideEncryptionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetTableServerSideEncryption) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o GetTableServerSideEncryptionPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTableServerSideEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

type GetTableTtl struct {
	AttributeName string `pulumi:"attributeName"`
	Enabled       bool   `pulumi:"enabled"`
}

// GetTableTtlInput is an input type that accepts GetTableTtlArgs and GetTableTtlOutput values.
// You can construct a concrete instance of `GetTableTtlInput` via:
//
//	GetTableTtlArgs{...}
type GetTableTtlInput interface {
	pulumi.Input

	ToGetTableTtlOutput() GetTableTtlOutput
	ToGetTableTtlOutputWithContext(context.Context) GetTableTtlOutput
}

type GetTableTtlArgs struct {
	AttributeName pulumi.StringInput `pulumi:"attributeName"`
	Enabled       pulumi.BoolInput   `pulumi:"enabled"`
}

func (GetTableTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableTtl)(nil)).Elem()
}

func (i GetTableTtlArgs) ToGetTableTtlOutput() GetTableTtlOutput {
	return i.ToGetTableTtlOutputWithContext(context.Background())
}

func (i GetTableTtlArgs) ToGetTableTtlOutputWithContext(ctx context.Context) GetTableTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableTtlOutput)
}

type GetTableTtlOutput struct{ *pulumi.OutputState }

func (GetTableTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableTtl)(nil)).Elem()
}

func (o GetTableTtlOutput) ToGetTableTtlOutput() GetTableTtlOutput {
	return o
}

func (o GetTableTtlOutput) ToGetTableTtlOutputWithContext(ctx context.Context) GetTableTtlOutput {
	return o
}

func (o GetTableTtlOutput) AttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableTtl) string { return v.AttributeName }).(pulumi.StringOutput)
}

func (o GetTableTtlOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTableTtl) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalTableReplicaInput)(nil)).Elem(), GlobalTableReplicaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalTableReplicaArrayInput)(nil)).Elem(), GlobalTableReplicaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableAttributeInput)(nil)).Elem(), TableAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableAttributeArrayInput)(nil)).Elem(), TableAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableGlobalSecondaryIndexInput)(nil)).Elem(), TableGlobalSecondaryIndexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableGlobalSecondaryIndexArrayInput)(nil)).Elem(), TableGlobalSecondaryIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableImportTableInput)(nil)).Elem(), TableImportTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableImportTablePtrInput)(nil)).Elem(), TableImportTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableImportTableInputFormatOptionsInput)(nil)).Elem(), TableImportTableInputFormatOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableImportTableInputFormatOptionsPtrInput)(nil)).Elem(), TableImportTableInputFormatOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableImportTableInputFormatOptionsCsvInput)(nil)).Elem(), TableImportTableInputFormatOptionsCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableImportTableInputFormatOptionsCsvPtrInput)(nil)).Elem(), TableImportTableInputFormatOptionsCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableImportTableS3BucketSourceInput)(nil)).Elem(), TableImportTableS3BucketSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableImportTableS3BucketSourcePtrInput)(nil)).Elem(), TableImportTableS3BucketSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableLocalSecondaryIndexInput)(nil)).Elem(), TableLocalSecondaryIndexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableLocalSecondaryIndexArrayInput)(nil)).Elem(), TableLocalSecondaryIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePointInTimeRecoveryInput)(nil)).Elem(), TablePointInTimeRecoveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePointInTimeRecoveryPtrInput)(nil)).Elem(), TablePointInTimeRecoveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReplicaTypeInput)(nil)).Elem(), TableReplicaTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReplicaTypeArrayInput)(nil)).Elem(), TableReplicaTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableServerSideEncryptionInput)(nil)).Elem(), TableServerSideEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableServerSideEncryptionPtrInput)(nil)).Elem(), TableServerSideEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTtlInput)(nil)).Elem(), TableTtlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTtlPtrInput)(nil)).Elem(), TableTtlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableAttributeInput)(nil)).Elem(), GetTableAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableAttributeArrayInput)(nil)).Elem(), GetTableAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableGlobalSecondaryIndexInput)(nil)).Elem(), GetTableGlobalSecondaryIndexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableGlobalSecondaryIndexArrayInput)(nil)).Elem(), GetTableGlobalSecondaryIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableLocalSecondaryIndexInput)(nil)).Elem(), GetTableLocalSecondaryIndexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableLocalSecondaryIndexArrayInput)(nil)).Elem(), GetTableLocalSecondaryIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablePointInTimeRecoveryInput)(nil)).Elem(), GetTablePointInTimeRecoveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableReplicaTypeInput)(nil)).Elem(), GetTableReplicaTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableReplicaTypeArrayInput)(nil)).Elem(), GetTableReplicaTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableServerSideEncryptionInput)(nil)).Elem(), GetTableServerSideEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableServerSideEncryptionPtrInput)(nil)).Elem(), GetTableServerSideEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableTtlInput)(nil)).Elem(), GetTableTtlArgs{})
	pulumi.RegisterOutputType(GlobalTableReplicaOutput{})
	pulumi.RegisterOutputType(GlobalTableReplicaArrayOutput{})
	pulumi.RegisterOutputType(TableAttributeOutput{})
	pulumi.RegisterOutputType(TableAttributeArrayOutput{})
	pulumi.RegisterOutputType(TableGlobalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(TableGlobalSecondaryIndexArrayOutput{})
	pulumi.RegisterOutputType(TableImportTableOutput{})
	pulumi.RegisterOutputType(TableImportTablePtrOutput{})
	pulumi.RegisterOutputType(TableImportTableInputFormatOptionsOutput{})
	pulumi.RegisterOutputType(TableImportTableInputFormatOptionsPtrOutput{})
	pulumi.RegisterOutputType(TableImportTableInputFormatOptionsCsvOutput{})
	pulumi.RegisterOutputType(TableImportTableInputFormatOptionsCsvPtrOutput{})
	pulumi.RegisterOutputType(TableImportTableS3BucketSourceOutput{})
	pulumi.RegisterOutputType(TableImportTableS3BucketSourcePtrOutput{})
	pulumi.RegisterOutputType(TableLocalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(TableLocalSecondaryIndexArrayOutput{})
	pulumi.RegisterOutputType(TablePointInTimeRecoveryOutput{})
	pulumi.RegisterOutputType(TablePointInTimeRecoveryPtrOutput{})
	pulumi.RegisterOutputType(TableReplicaTypeOutput{})
	pulumi.RegisterOutputType(TableReplicaTypeArrayOutput{})
	pulumi.RegisterOutputType(TableServerSideEncryptionOutput{})
	pulumi.RegisterOutputType(TableServerSideEncryptionPtrOutput{})
	pulumi.RegisterOutputType(TableTtlOutput{})
	pulumi.RegisterOutputType(TableTtlPtrOutput{})
	pulumi.RegisterOutputType(GetTableAttributeOutput{})
	pulumi.RegisterOutputType(GetTableAttributeArrayOutput{})
	pulumi.RegisterOutputType(GetTableGlobalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(GetTableGlobalSecondaryIndexArrayOutput{})
	pulumi.RegisterOutputType(GetTableLocalSecondaryIndexOutput{})
	pulumi.RegisterOutputType(GetTableLocalSecondaryIndexArrayOutput{})
	pulumi.RegisterOutputType(GetTablePointInTimeRecoveryOutput{})
	pulumi.RegisterOutputType(GetTableReplicaTypeOutput{})
	pulumi.RegisterOutputType(GetTableReplicaTypeArrayOutput{})
	pulumi.RegisterOutputType(GetTableServerSideEncryptionOutput{})
	pulumi.RegisterOutputType(GetTableServerSideEncryptionPtrOutput{})
	pulumi.RegisterOutputType(GetTableTtlOutput{})
}
