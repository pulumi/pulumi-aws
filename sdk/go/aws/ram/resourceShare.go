// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Resource Access Manager (RAM) Resource Share. To association principals with the share, see the [`aws_ram_principal_association` resource](https://www.terraform.io/docs/providers/aws/r/ram_principal_association.html). To associate resources with the share, see the [`aws_ram_resource_association` resource](https://www.terraform.io/docs/providers/aws/r/ram_resource_association.html).
type ResourceShare struct {
	s *pulumi.ResourceState
}

// NewResourceShare registers a new resource with the given unique name, arguments, and options.
func NewResourceShare(ctx *pulumi.Context,
	name string, args *ResourceShareArgs, opts ...pulumi.ResourceOpt) (*ResourceShare, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowExternalPrincipals"] = nil
		inputs["name"] = nil
		inputs["tags"] = nil
	} else {
		inputs["allowExternalPrincipals"] = args.AllowExternalPrincipals
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("aws:ram/resourceShare:ResourceShare", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ResourceShare{s: s}, nil
}

// GetResourceShare gets an existing ResourceShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceShare(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ResourceShareState, opts ...pulumi.ResourceOpt) (*ResourceShare, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowExternalPrincipals"] = state.AllowExternalPrincipals
		inputs["name"] = state.Name
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("aws:ram/resourceShare:ResourceShare", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ResourceShare{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ResourceShare) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ResourceShare) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Indicates whether principals outside your organization can be associated with a resource share.
func (r *ResourceShare) AllowExternalPrincipals() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowExternalPrincipals"])
}

// The name of the resource share.
func (r *ResourceShare) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A mapping of tags to assign to the resource share.
func (r *ResourceShare) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering ResourceShare resources.
type ResourceShareState struct {
	// Indicates whether principals outside your organization can be associated with a resource share.
	AllowExternalPrincipals interface{}
	// The name of the resource share.
	Name interface{}
	// A mapping of tags to assign to the resource share.
	Tags interface{}
}

// The set of arguments for constructing a ResourceShare resource.
type ResourceShareArgs struct {
	// Indicates whether principals outside your organization can be associated with a resource share.
	AllowExternalPrincipals interface{}
	// The name of the resource share.
	Name interface{}
	// A mapping of tags to assign to the resource share.
	Tags interface{}
}
