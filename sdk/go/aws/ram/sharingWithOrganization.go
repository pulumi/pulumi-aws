// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages Resource Access Manager (RAM) Resource Sharing with AWS Organizations. If you enable sharing with your organization, you can share resources without using invitations. Refer to the [AWS RAM user guide](https://docs.aws.amazon.com/ram/latest/userguide/getting-started-sharing.html#getting-started-sharing-orgs) for more details.
//
// > **NOTE:** Use this resource to manage resource sharing within your organization, **not** the `organizations.Organization` resource with `ram.amazonaws.com` configured in `awsServiceAccessPrincipals`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ram"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ram.NewSharingWithOrganization(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// In TODO v1.5.0 and later, use an `import` block to import the resource using the current AWS account ID. For exampleterraform import {
//
//	to = aws_ram_sharing_with_organization.example
//
//	id = "123456789012" } Using `TODO import`, import the resource using the current AWS account ID. For exampleconsole % TODO import aws_ram_sharing_with_organization.example 123456789012
type SharingWithOrganization struct {
	pulumi.CustomResourceState
}

// NewSharingWithOrganization registers a new resource with the given unique name, arguments, and options.
func NewSharingWithOrganization(ctx *pulumi.Context,
	name string, args *SharingWithOrganizationArgs, opts ...pulumi.ResourceOption) (*SharingWithOrganization, error) {
	if args == nil {
		args = &SharingWithOrganizationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SharingWithOrganization
	err := ctx.RegisterResource("aws:ram/sharingWithOrganization:SharingWithOrganization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharingWithOrganization gets an existing SharingWithOrganization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharingWithOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharingWithOrganizationState, opts ...pulumi.ResourceOption) (*SharingWithOrganization, error) {
	var resource SharingWithOrganization
	err := ctx.ReadResource("aws:ram/sharingWithOrganization:SharingWithOrganization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharingWithOrganization resources.
type sharingWithOrganizationState struct {
}

type SharingWithOrganizationState struct {
}

func (SharingWithOrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharingWithOrganizationState)(nil)).Elem()
}

type sharingWithOrganizationArgs struct {
}

// The set of arguments for constructing a SharingWithOrganization resource.
type SharingWithOrganizationArgs struct {
}

func (SharingWithOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharingWithOrganizationArgs)(nil)).Elem()
}

type SharingWithOrganizationInput interface {
	pulumi.Input

	ToSharingWithOrganizationOutput() SharingWithOrganizationOutput
	ToSharingWithOrganizationOutputWithContext(ctx context.Context) SharingWithOrganizationOutput
}

func (*SharingWithOrganization) ElementType() reflect.Type {
	return reflect.TypeOf((**SharingWithOrganization)(nil)).Elem()
}

func (i *SharingWithOrganization) ToSharingWithOrganizationOutput() SharingWithOrganizationOutput {
	return i.ToSharingWithOrganizationOutputWithContext(context.Background())
}

func (i *SharingWithOrganization) ToSharingWithOrganizationOutputWithContext(ctx context.Context) SharingWithOrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharingWithOrganizationOutput)
}

func (i *SharingWithOrganization) ToOutput(ctx context.Context) pulumix.Output[*SharingWithOrganization] {
	return pulumix.Output[*SharingWithOrganization]{
		OutputState: i.ToSharingWithOrganizationOutputWithContext(ctx).OutputState,
	}
}

// SharingWithOrganizationArrayInput is an input type that accepts SharingWithOrganizationArray and SharingWithOrganizationArrayOutput values.
// You can construct a concrete instance of `SharingWithOrganizationArrayInput` via:
//
//	SharingWithOrganizationArray{ SharingWithOrganizationArgs{...} }
type SharingWithOrganizationArrayInput interface {
	pulumi.Input

	ToSharingWithOrganizationArrayOutput() SharingWithOrganizationArrayOutput
	ToSharingWithOrganizationArrayOutputWithContext(context.Context) SharingWithOrganizationArrayOutput
}

type SharingWithOrganizationArray []SharingWithOrganizationInput

func (SharingWithOrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharingWithOrganization)(nil)).Elem()
}

func (i SharingWithOrganizationArray) ToSharingWithOrganizationArrayOutput() SharingWithOrganizationArrayOutput {
	return i.ToSharingWithOrganizationArrayOutputWithContext(context.Background())
}

func (i SharingWithOrganizationArray) ToSharingWithOrganizationArrayOutputWithContext(ctx context.Context) SharingWithOrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharingWithOrganizationArrayOutput)
}

func (i SharingWithOrganizationArray) ToOutput(ctx context.Context) pulumix.Output[[]*SharingWithOrganization] {
	return pulumix.Output[[]*SharingWithOrganization]{
		OutputState: i.ToSharingWithOrganizationArrayOutputWithContext(ctx).OutputState,
	}
}

// SharingWithOrganizationMapInput is an input type that accepts SharingWithOrganizationMap and SharingWithOrganizationMapOutput values.
// You can construct a concrete instance of `SharingWithOrganizationMapInput` via:
//
//	SharingWithOrganizationMap{ "key": SharingWithOrganizationArgs{...} }
type SharingWithOrganizationMapInput interface {
	pulumi.Input

	ToSharingWithOrganizationMapOutput() SharingWithOrganizationMapOutput
	ToSharingWithOrganizationMapOutputWithContext(context.Context) SharingWithOrganizationMapOutput
}

type SharingWithOrganizationMap map[string]SharingWithOrganizationInput

func (SharingWithOrganizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharingWithOrganization)(nil)).Elem()
}

func (i SharingWithOrganizationMap) ToSharingWithOrganizationMapOutput() SharingWithOrganizationMapOutput {
	return i.ToSharingWithOrganizationMapOutputWithContext(context.Background())
}

func (i SharingWithOrganizationMap) ToSharingWithOrganizationMapOutputWithContext(ctx context.Context) SharingWithOrganizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharingWithOrganizationMapOutput)
}

func (i SharingWithOrganizationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SharingWithOrganization] {
	return pulumix.Output[map[string]*SharingWithOrganization]{
		OutputState: i.ToSharingWithOrganizationMapOutputWithContext(ctx).OutputState,
	}
}

type SharingWithOrganizationOutput struct{ *pulumi.OutputState }

func (SharingWithOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharingWithOrganization)(nil)).Elem()
}

func (o SharingWithOrganizationOutput) ToSharingWithOrganizationOutput() SharingWithOrganizationOutput {
	return o
}

func (o SharingWithOrganizationOutput) ToSharingWithOrganizationOutputWithContext(ctx context.Context) SharingWithOrganizationOutput {
	return o
}

func (o SharingWithOrganizationOutput) ToOutput(ctx context.Context) pulumix.Output[*SharingWithOrganization] {
	return pulumix.Output[*SharingWithOrganization]{
		OutputState: o.OutputState,
	}
}

type SharingWithOrganizationArrayOutput struct{ *pulumi.OutputState }

func (SharingWithOrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharingWithOrganization)(nil)).Elem()
}

func (o SharingWithOrganizationArrayOutput) ToSharingWithOrganizationArrayOutput() SharingWithOrganizationArrayOutput {
	return o
}

func (o SharingWithOrganizationArrayOutput) ToSharingWithOrganizationArrayOutputWithContext(ctx context.Context) SharingWithOrganizationArrayOutput {
	return o
}

func (o SharingWithOrganizationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SharingWithOrganization] {
	return pulumix.Output[[]*SharingWithOrganization]{
		OutputState: o.OutputState,
	}
}

func (o SharingWithOrganizationArrayOutput) Index(i pulumi.IntInput) SharingWithOrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SharingWithOrganization {
		return vs[0].([]*SharingWithOrganization)[vs[1].(int)]
	}).(SharingWithOrganizationOutput)
}

type SharingWithOrganizationMapOutput struct{ *pulumi.OutputState }

func (SharingWithOrganizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharingWithOrganization)(nil)).Elem()
}

func (o SharingWithOrganizationMapOutput) ToSharingWithOrganizationMapOutput() SharingWithOrganizationMapOutput {
	return o
}

func (o SharingWithOrganizationMapOutput) ToSharingWithOrganizationMapOutputWithContext(ctx context.Context) SharingWithOrganizationMapOutput {
	return o
}

func (o SharingWithOrganizationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SharingWithOrganization] {
	return pulumix.Output[map[string]*SharingWithOrganization]{
		OutputState: o.OutputState,
	}
}

func (o SharingWithOrganizationMapOutput) MapIndex(k pulumi.StringInput) SharingWithOrganizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SharingWithOrganization {
		return vs[0].(map[string]*SharingWithOrganization)[vs[1].(string)]
	}).(SharingWithOrganizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SharingWithOrganizationInput)(nil)).Elem(), &SharingWithOrganization{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharingWithOrganizationArrayInput)(nil)).Elem(), SharingWithOrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharingWithOrganizationMapInput)(nil)).Elem(), SharingWithOrganizationMap{})
	pulumi.RegisterOutputType(SharingWithOrganizationOutput{})
	pulumi.RegisterOutputType(SharingWithOrganizationArrayOutput{})
	pulumi.RegisterOutputType(SharingWithOrganizationMapOutput{})
}
