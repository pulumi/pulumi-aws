// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Stack struct {
	pulumi.CustomResourceState

	Capabilities     pulumi.StringArrayOutput `pulumi:"capabilities"`
	DisableRollback  pulumi.BoolPtrOutput     `pulumi:"disableRollback"`
	IamRoleArn       pulumi.StringPtrOutput   `pulumi:"iamRoleArn"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	NotificationArns pulumi.StringArrayOutput `pulumi:"notificationArns"`
	OnFailure        pulumi.StringPtrOutput   `pulumi:"onFailure"`
	Outputs          pulumi.StringMapOutput   `pulumi:"outputs"`
	Parameters       pulumi.StringMapOutput   `pulumi:"parameters"`
	PolicyBody       pulumi.StringOutput      `pulumi:"policyBody"`
	PolicyUrl        pulumi.StringPtrOutput   `pulumi:"policyUrl"`
	Tags             pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll          pulumi.StringMapOutput   `pulumi:"tagsAll"`
	TemplateBody     pulumi.StringOutput      `pulumi:"templateBody"`
	TemplateUrl      pulumi.StringPtrOutput   `pulumi:"templateUrl"`
	TimeoutInMinutes pulumi.IntPtrOutput      `pulumi:"timeoutInMinutes"`
}

// NewStack registers a new resource with the given unique name, arguments, and options.
func NewStack(ctx *pulumi.Context,
	name string, args *StackArgs, opts ...pulumi.ResourceOption) (*Stack, error) {
	if args == nil {
		args = &StackArgs{}
	}

	var resource Stack
	err := ctx.RegisterResource("aws:cloudformation/stack:Stack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStack gets an existing Stack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackState, opts ...pulumi.ResourceOption) (*Stack, error) {
	var resource Stack
	err := ctx.ReadResource("aws:cloudformation/stack:Stack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stack resources.
type stackState struct {
	Capabilities     []string          `pulumi:"capabilities"`
	DisableRollback  *bool             `pulumi:"disableRollback"`
	IamRoleArn       *string           `pulumi:"iamRoleArn"`
	Name             *string           `pulumi:"name"`
	NotificationArns []string          `pulumi:"notificationArns"`
	OnFailure        *string           `pulumi:"onFailure"`
	Outputs          map[string]string `pulumi:"outputs"`
	Parameters       map[string]string `pulumi:"parameters"`
	PolicyBody       *string           `pulumi:"policyBody"`
	PolicyUrl        *string           `pulumi:"policyUrl"`
	Tags             map[string]string `pulumi:"tags"`
	TagsAll          map[string]string `pulumi:"tagsAll"`
	TemplateBody     *string           `pulumi:"templateBody"`
	TemplateUrl      *string           `pulumi:"templateUrl"`
	TimeoutInMinutes *int              `pulumi:"timeoutInMinutes"`
}

type StackState struct {
	Capabilities     pulumi.StringArrayInput
	DisableRollback  pulumi.BoolPtrInput
	IamRoleArn       pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	NotificationArns pulumi.StringArrayInput
	OnFailure        pulumi.StringPtrInput
	Outputs          pulumi.StringMapInput
	Parameters       pulumi.StringMapInput
	PolicyBody       pulumi.StringPtrInput
	PolicyUrl        pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	TagsAll          pulumi.StringMapInput
	TemplateBody     pulumi.StringPtrInput
	TemplateUrl      pulumi.StringPtrInput
	TimeoutInMinutes pulumi.IntPtrInput
}

func (StackState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackState)(nil)).Elem()
}

type stackArgs struct {
	Capabilities     []string          `pulumi:"capabilities"`
	DisableRollback  *bool             `pulumi:"disableRollback"`
	IamRoleArn       *string           `pulumi:"iamRoleArn"`
	Name             *string           `pulumi:"name"`
	NotificationArns []string          `pulumi:"notificationArns"`
	OnFailure        *string           `pulumi:"onFailure"`
	Parameters       map[string]string `pulumi:"parameters"`
	PolicyBody       *string           `pulumi:"policyBody"`
	PolicyUrl        *string           `pulumi:"policyUrl"`
	Tags             map[string]string `pulumi:"tags"`
	TemplateBody     *string           `pulumi:"templateBody"`
	TemplateUrl      *string           `pulumi:"templateUrl"`
	TimeoutInMinutes *int              `pulumi:"timeoutInMinutes"`
}

// The set of arguments for constructing a Stack resource.
type StackArgs struct {
	Capabilities     pulumi.StringArrayInput
	DisableRollback  pulumi.BoolPtrInput
	IamRoleArn       pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	NotificationArns pulumi.StringArrayInput
	OnFailure        pulumi.StringPtrInput
	Parameters       pulumi.StringMapInput
	PolicyBody       pulumi.StringPtrInput
	PolicyUrl        pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	TemplateBody     pulumi.StringPtrInput
	TemplateUrl      pulumi.StringPtrInput
	TimeoutInMinutes pulumi.IntPtrInput
}

func (StackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackArgs)(nil)).Elem()
}

type StackInput interface {
	pulumi.Input

	ToStackOutput() StackOutput
	ToStackOutputWithContext(ctx context.Context) StackOutput
}

func (*Stack) ElementType() reflect.Type {
	return reflect.TypeOf((**Stack)(nil)).Elem()
}

func (i *Stack) ToStackOutput() StackOutput {
	return i.ToStackOutputWithContext(context.Background())
}

func (i *Stack) ToStackOutputWithContext(ctx context.Context) StackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackOutput)
}

// StackArrayInput is an input type that accepts StackArray and StackArrayOutput values.
// You can construct a concrete instance of `StackArrayInput` via:
//
//	StackArray{ StackArgs{...} }
type StackArrayInput interface {
	pulumi.Input

	ToStackArrayOutput() StackArrayOutput
	ToStackArrayOutputWithContext(context.Context) StackArrayOutput
}

type StackArray []StackInput

func (StackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stack)(nil)).Elem()
}

func (i StackArray) ToStackArrayOutput() StackArrayOutput {
	return i.ToStackArrayOutputWithContext(context.Background())
}

func (i StackArray) ToStackArrayOutputWithContext(ctx context.Context) StackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackArrayOutput)
}

// StackMapInput is an input type that accepts StackMap and StackMapOutput values.
// You can construct a concrete instance of `StackMapInput` via:
//
//	StackMap{ "key": StackArgs{...} }
type StackMapInput interface {
	pulumi.Input

	ToStackMapOutput() StackMapOutput
	ToStackMapOutputWithContext(context.Context) StackMapOutput
}

type StackMap map[string]StackInput

func (StackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stack)(nil)).Elem()
}

func (i StackMap) ToStackMapOutput() StackMapOutput {
	return i.ToStackMapOutputWithContext(context.Background())
}

func (i StackMap) ToStackMapOutputWithContext(ctx context.Context) StackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackMapOutput)
}

type StackOutput struct{ *pulumi.OutputState }

func (StackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Stack)(nil)).Elem()
}

func (o StackOutput) ToStackOutput() StackOutput {
	return o
}

func (o StackOutput) ToStackOutputWithContext(ctx context.Context) StackOutput {
	return o
}

func (o StackOutput) Capabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.Capabilities }).(pulumi.StringArrayOutput)
}

func (o StackOutput) DisableRollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.BoolPtrOutput { return v.DisableRollback }).(pulumi.BoolPtrOutput)
}

func (o StackOutput) IamRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.IamRoleArn }).(pulumi.StringPtrOutput)
}

func (o StackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o StackOutput) NotificationArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringArrayOutput { return v.NotificationArns }).(pulumi.StringArrayOutput)
}

func (o StackOutput) OnFailure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.OnFailure }).(pulumi.StringPtrOutput)
}

func (o StackOutput) Outputs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringMapOutput { return v.Outputs }).(pulumi.StringMapOutput)
}

func (o StackOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

func (o StackOutput) PolicyBody() pulumi.StringOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringOutput { return v.PolicyBody }).(pulumi.StringOutput)
}

func (o StackOutput) PolicyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.PolicyUrl }).(pulumi.StringPtrOutput)
}

func (o StackOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o StackOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o StackOutput) TemplateBody() pulumi.StringOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringOutput { return v.TemplateBody }).(pulumi.StringOutput)
}

func (o StackOutput) TemplateUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.StringPtrOutput { return v.TemplateUrl }).(pulumi.StringPtrOutput)
}

func (o StackOutput) TimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Stack) pulumi.IntPtrOutput { return v.TimeoutInMinutes }).(pulumi.IntPtrOutput)
}

type StackArrayOutput struct{ *pulumi.OutputState }

func (StackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stack)(nil)).Elem()
}

func (o StackArrayOutput) ToStackArrayOutput() StackArrayOutput {
	return o
}

func (o StackArrayOutput) ToStackArrayOutputWithContext(ctx context.Context) StackArrayOutput {
	return o
}

func (o StackArrayOutput) Index(i pulumi.IntInput) StackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Stack {
		return vs[0].([]*Stack)[vs[1].(int)]
	}).(StackOutput)
}

type StackMapOutput struct{ *pulumi.OutputState }

func (StackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stack)(nil)).Elem()
}

func (o StackMapOutput) ToStackMapOutput() StackMapOutput {
	return o
}

func (o StackMapOutput) ToStackMapOutputWithContext(ctx context.Context) StackMapOutput {
	return o
}

func (o StackMapOutput) MapIndex(k pulumi.StringInput) StackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Stack {
		return vs[0].(map[string]*Stack)[vs[1].(string)]
	}).(StackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackInput)(nil)).Elem(), &Stack{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackArrayInput)(nil)).Elem(), StackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackMapInput)(nil)).Elem(), StackMap{})
	pulumi.RegisterOutputType(StackOutput{})
	pulumi.RegisterOutputType(StackArrayOutput{})
	pulumi.RegisterOutputType(StackMapOutput{})
}
