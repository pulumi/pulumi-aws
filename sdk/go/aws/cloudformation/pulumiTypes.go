// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CloudFormationTypeLoggingConfig struct {
	// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName string `pulumi:"logGroupName"`
	// Amazon Resource Name (ARN) of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
	LogRoleArn string `pulumi:"logRoleArn"`
}

// CloudFormationTypeLoggingConfigInput is an input type that accepts CloudFormationTypeLoggingConfigArgs and CloudFormationTypeLoggingConfigOutput values.
// You can construct a concrete instance of `CloudFormationTypeLoggingConfigInput` via:
//
//	CloudFormationTypeLoggingConfigArgs{...}
type CloudFormationTypeLoggingConfigInput interface {
	pulumi.Input

	ToCloudFormationTypeLoggingConfigOutput() CloudFormationTypeLoggingConfigOutput
	ToCloudFormationTypeLoggingConfigOutputWithContext(context.Context) CloudFormationTypeLoggingConfigOutput
}

type CloudFormationTypeLoggingConfigArgs struct {
	// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName pulumi.StringInput `pulumi:"logGroupName"`
	// Amazon Resource Name (ARN) of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
	LogRoleArn pulumi.StringInput `pulumi:"logRoleArn"`
}

func (CloudFormationTypeLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (i CloudFormationTypeLoggingConfigArgs) ToCloudFormationTypeLoggingConfigOutput() CloudFormationTypeLoggingConfigOutput {
	return i.ToCloudFormationTypeLoggingConfigOutputWithContext(context.Background())
}

func (i CloudFormationTypeLoggingConfigArgs) ToCloudFormationTypeLoggingConfigOutputWithContext(ctx context.Context) CloudFormationTypeLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudFormationTypeLoggingConfigOutput)
}

func (i CloudFormationTypeLoggingConfigArgs) ToCloudFormationTypeLoggingConfigPtrOutput() CloudFormationTypeLoggingConfigPtrOutput {
	return i.ToCloudFormationTypeLoggingConfigPtrOutputWithContext(context.Background())
}

func (i CloudFormationTypeLoggingConfigArgs) ToCloudFormationTypeLoggingConfigPtrOutputWithContext(ctx context.Context) CloudFormationTypeLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudFormationTypeLoggingConfigOutput).ToCloudFormationTypeLoggingConfigPtrOutputWithContext(ctx)
}

// CloudFormationTypeLoggingConfigPtrInput is an input type that accepts CloudFormationTypeLoggingConfigArgs, CloudFormationTypeLoggingConfigPtr and CloudFormationTypeLoggingConfigPtrOutput values.
// You can construct a concrete instance of `CloudFormationTypeLoggingConfigPtrInput` via:
//
//	        CloudFormationTypeLoggingConfigArgs{...}
//
//	or:
//
//	        nil
type CloudFormationTypeLoggingConfigPtrInput interface {
	pulumi.Input

	ToCloudFormationTypeLoggingConfigPtrOutput() CloudFormationTypeLoggingConfigPtrOutput
	ToCloudFormationTypeLoggingConfigPtrOutputWithContext(context.Context) CloudFormationTypeLoggingConfigPtrOutput
}

type cloudFormationTypeLoggingConfigPtrType CloudFormationTypeLoggingConfigArgs

func CloudFormationTypeLoggingConfigPtr(v *CloudFormationTypeLoggingConfigArgs) CloudFormationTypeLoggingConfigPtrInput {
	return (*cloudFormationTypeLoggingConfigPtrType)(v)
}

func (*cloudFormationTypeLoggingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (i *cloudFormationTypeLoggingConfigPtrType) ToCloudFormationTypeLoggingConfigPtrOutput() CloudFormationTypeLoggingConfigPtrOutput {
	return i.ToCloudFormationTypeLoggingConfigPtrOutputWithContext(context.Background())
}

func (i *cloudFormationTypeLoggingConfigPtrType) ToCloudFormationTypeLoggingConfigPtrOutputWithContext(ctx context.Context) CloudFormationTypeLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudFormationTypeLoggingConfigPtrOutput)
}

type CloudFormationTypeLoggingConfigOutput struct{ *pulumi.OutputState }

func (CloudFormationTypeLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (o CloudFormationTypeLoggingConfigOutput) ToCloudFormationTypeLoggingConfigOutput() CloudFormationTypeLoggingConfigOutput {
	return o
}

func (o CloudFormationTypeLoggingConfigOutput) ToCloudFormationTypeLoggingConfigOutputWithContext(ctx context.Context) CloudFormationTypeLoggingConfigOutput {
	return o
}

func (o CloudFormationTypeLoggingConfigOutput) ToCloudFormationTypeLoggingConfigPtrOutput() CloudFormationTypeLoggingConfigPtrOutput {
	return o.ToCloudFormationTypeLoggingConfigPtrOutputWithContext(context.Background())
}

func (o CloudFormationTypeLoggingConfigOutput) ToCloudFormationTypeLoggingConfigPtrOutputWithContext(ctx context.Context) CloudFormationTypeLoggingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudFormationTypeLoggingConfig) *CloudFormationTypeLoggingConfig {
		return &v
	}).(CloudFormationTypeLoggingConfigPtrOutput)
}

// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
func (o CloudFormationTypeLoggingConfigOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v CloudFormationTypeLoggingConfig) string { return v.LogGroupName }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
func (o CloudFormationTypeLoggingConfigOutput) LogRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v CloudFormationTypeLoggingConfig) string { return v.LogRoleArn }).(pulumi.StringOutput)
}

type CloudFormationTypeLoggingConfigPtrOutput struct{ *pulumi.OutputState }

func (CloudFormationTypeLoggingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (o CloudFormationTypeLoggingConfigPtrOutput) ToCloudFormationTypeLoggingConfigPtrOutput() CloudFormationTypeLoggingConfigPtrOutput {
	return o
}

func (o CloudFormationTypeLoggingConfigPtrOutput) ToCloudFormationTypeLoggingConfigPtrOutputWithContext(ctx context.Context) CloudFormationTypeLoggingConfigPtrOutput {
	return o
}

func (o CloudFormationTypeLoggingConfigPtrOutput) Elem() CloudFormationTypeLoggingConfigOutput {
	return o.ApplyT(func(v *CloudFormationTypeLoggingConfig) CloudFormationTypeLoggingConfig {
		if v != nil {
			return *v
		}
		var ret CloudFormationTypeLoggingConfig
		return ret
	}).(CloudFormationTypeLoggingConfigOutput)
}

// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
func (o CloudFormationTypeLoggingConfigPtrOutput) LogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudFormationTypeLoggingConfig) *string {
		if v == nil {
			return nil
		}
		return &v.LogGroupName
	}).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
func (o CloudFormationTypeLoggingConfigPtrOutput) LogRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudFormationTypeLoggingConfig) *string {
		if v == nil {
			return nil
		}
		return &v.LogRoleArn
	}).(pulumi.StringPtrOutput)
}

type StackInstancesDeploymentTargets struct {
	// Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: `INTERSECTION`, `DIFFERENCE`, `UNION`, `NONE`.
	AccountFilterType *string `pulumi:"accountFilterType"`
	// List of accounts to deploy stack set updates.
	Accounts []string `pulumi:"accounts"`
	// S3 URL of the file containing the list of accounts.
	AccountsUrl *string `pulumi:"accountsUrl"`
	// Organization root ID or organizational unit (OU) IDs to which stack sets deploy.
	OrganizationalUnitIds []string `pulumi:"organizationalUnitIds"`
}

// StackInstancesDeploymentTargetsInput is an input type that accepts StackInstancesDeploymentTargetsArgs and StackInstancesDeploymentTargetsOutput values.
// You can construct a concrete instance of `StackInstancesDeploymentTargetsInput` via:
//
//	StackInstancesDeploymentTargetsArgs{...}
type StackInstancesDeploymentTargetsInput interface {
	pulumi.Input

	ToStackInstancesDeploymentTargetsOutput() StackInstancesDeploymentTargetsOutput
	ToStackInstancesDeploymentTargetsOutputWithContext(context.Context) StackInstancesDeploymentTargetsOutput
}

type StackInstancesDeploymentTargetsArgs struct {
	// Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: `INTERSECTION`, `DIFFERENCE`, `UNION`, `NONE`.
	AccountFilterType pulumi.StringPtrInput `pulumi:"accountFilterType"`
	// List of accounts to deploy stack set updates.
	Accounts pulumi.StringArrayInput `pulumi:"accounts"`
	// S3 URL of the file containing the list of accounts.
	AccountsUrl pulumi.StringPtrInput `pulumi:"accountsUrl"`
	// Organization root ID or organizational unit (OU) IDs to which stack sets deploy.
	OrganizationalUnitIds pulumi.StringArrayInput `pulumi:"organizationalUnitIds"`
}

func (StackInstancesDeploymentTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackInstancesDeploymentTargets)(nil)).Elem()
}

func (i StackInstancesDeploymentTargetsArgs) ToStackInstancesDeploymentTargetsOutput() StackInstancesDeploymentTargetsOutput {
	return i.ToStackInstancesDeploymentTargetsOutputWithContext(context.Background())
}

func (i StackInstancesDeploymentTargetsArgs) ToStackInstancesDeploymentTargetsOutputWithContext(ctx context.Context) StackInstancesDeploymentTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackInstancesDeploymentTargetsOutput)
}

func (i StackInstancesDeploymentTargetsArgs) ToStackInstancesDeploymentTargetsPtrOutput() StackInstancesDeploymentTargetsPtrOutput {
	return i.ToStackInstancesDeploymentTargetsPtrOutputWithContext(context.Background())
}

func (i StackInstancesDeploymentTargetsArgs) ToStackInstancesDeploymentTargetsPtrOutputWithContext(ctx context.Context) StackInstancesDeploymentTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackInstancesDeploymentTargetsOutput).ToStackInstancesDeploymentTargetsPtrOutputWithContext(ctx)
}

// StackInstancesDeploymentTargetsPtrInput is an input type that accepts StackInstancesDeploymentTargetsArgs, StackInstancesDeploymentTargetsPtr and StackInstancesDeploymentTargetsPtrOutput values.
// You can construct a concrete instance of `StackInstancesDeploymentTargetsPtrInput` via:
//
//	        StackInstancesDeploymentTargetsArgs{...}
//
//	or:
//
//	        nil
type StackInstancesDeploymentTargetsPtrInput interface {
	pulumi.Input

	ToStackInstancesDeploymentTargetsPtrOutput() StackInstancesDeploymentTargetsPtrOutput
	ToStackInstancesDeploymentTargetsPtrOutputWithContext(context.Context) StackInstancesDeploymentTargetsPtrOutput
}

type stackInstancesDeploymentTargetsPtrType StackInstancesDeploymentTargetsArgs

func StackInstancesDeploymentTargetsPtr(v *StackInstancesDeploymentTargetsArgs) StackInstancesDeploymentTargetsPtrInput {
	return (*stackInstancesDeploymentTargetsPtrType)(v)
}

func (*stackInstancesDeploymentTargetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackInstancesDeploymentTargets)(nil)).Elem()
}

func (i *stackInstancesDeploymentTargetsPtrType) ToStackInstancesDeploymentTargetsPtrOutput() StackInstancesDeploymentTargetsPtrOutput {
	return i.ToStackInstancesDeploymentTargetsPtrOutputWithContext(context.Background())
}

func (i *stackInstancesDeploymentTargetsPtrType) ToStackInstancesDeploymentTargetsPtrOutputWithContext(ctx context.Context) StackInstancesDeploymentTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackInstancesDeploymentTargetsPtrOutput)
}

type StackInstancesDeploymentTargetsOutput struct{ *pulumi.OutputState }

func (StackInstancesDeploymentTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackInstancesDeploymentTargets)(nil)).Elem()
}

func (o StackInstancesDeploymentTargetsOutput) ToStackInstancesDeploymentTargetsOutput() StackInstancesDeploymentTargetsOutput {
	return o
}

func (o StackInstancesDeploymentTargetsOutput) ToStackInstancesDeploymentTargetsOutputWithContext(ctx context.Context) StackInstancesDeploymentTargetsOutput {
	return o
}

func (o StackInstancesDeploymentTargetsOutput) ToStackInstancesDeploymentTargetsPtrOutput() StackInstancesDeploymentTargetsPtrOutput {
	return o.ToStackInstancesDeploymentTargetsPtrOutputWithContext(context.Background())
}

func (o StackInstancesDeploymentTargetsOutput) ToStackInstancesDeploymentTargetsPtrOutputWithContext(ctx context.Context) StackInstancesDeploymentTargetsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackInstancesDeploymentTargets) *StackInstancesDeploymentTargets {
		return &v
	}).(StackInstancesDeploymentTargetsPtrOutput)
}

// Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: `INTERSECTION`, `DIFFERENCE`, `UNION`, `NONE`.
func (o StackInstancesDeploymentTargetsOutput) AccountFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesDeploymentTargets) *string { return v.AccountFilterType }).(pulumi.StringPtrOutput)
}

// List of accounts to deploy stack set updates.
func (o StackInstancesDeploymentTargetsOutput) Accounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackInstancesDeploymentTargets) []string { return v.Accounts }).(pulumi.StringArrayOutput)
}

// S3 URL of the file containing the list of accounts.
func (o StackInstancesDeploymentTargetsOutput) AccountsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesDeploymentTargets) *string { return v.AccountsUrl }).(pulumi.StringPtrOutput)
}

// Organization root ID or organizational unit (OU) IDs to which stack sets deploy.
func (o StackInstancesDeploymentTargetsOutput) OrganizationalUnitIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackInstancesDeploymentTargets) []string { return v.OrganizationalUnitIds }).(pulumi.StringArrayOutput)
}

type StackInstancesDeploymentTargetsPtrOutput struct{ *pulumi.OutputState }

func (StackInstancesDeploymentTargetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackInstancesDeploymentTargets)(nil)).Elem()
}

func (o StackInstancesDeploymentTargetsPtrOutput) ToStackInstancesDeploymentTargetsPtrOutput() StackInstancesDeploymentTargetsPtrOutput {
	return o
}

func (o StackInstancesDeploymentTargetsPtrOutput) ToStackInstancesDeploymentTargetsPtrOutputWithContext(ctx context.Context) StackInstancesDeploymentTargetsPtrOutput {
	return o
}

func (o StackInstancesDeploymentTargetsPtrOutput) Elem() StackInstancesDeploymentTargetsOutput {
	return o.ApplyT(func(v *StackInstancesDeploymentTargets) StackInstancesDeploymentTargets {
		if v != nil {
			return *v
		}
		var ret StackInstancesDeploymentTargets
		return ret
	}).(StackInstancesDeploymentTargetsOutput)
}

// Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: `INTERSECTION`, `DIFFERENCE`, `UNION`, `NONE`.
func (o StackInstancesDeploymentTargetsPtrOutput) AccountFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackInstancesDeploymentTargets) *string {
		if v == nil {
			return nil
		}
		return v.AccountFilterType
	}).(pulumi.StringPtrOutput)
}

// List of accounts to deploy stack set updates.
func (o StackInstancesDeploymentTargetsPtrOutput) Accounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackInstancesDeploymentTargets) []string {
		if v == nil {
			return nil
		}
		return v.Accounts
	}).(pulumi.StringArrayOutput)
}

// S3 URL of the file containing the list of accounts.
func (o StackInstancesDeploymentTargetsPtrOutput) AccountsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackInstancesDeploymentTargets) *string {
		if v == nil {
			return nil
		}
		return v.AccountsUrl
	}).(pulumi.StringPtrOutput)
}

// Organization root ID or organizational unit (OU) IDs to which stack sets deploy.
func (o StackInstancesDeploymentTargetsPtrOutput) OrganizationalUnitIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackInstancesDeploymentTargets) []string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnitIds
	}).(pulumi.StringArrayOutput)
}

type StackInstancesOperationPreferences struct {
	// How the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
	ConcurrencyMode *string `pulumi:"concurrencyMode"`
	// Number of accounts, per region, for which this operation can fail before CloudFormation stops the operation in that region.
	FailureToleranceCount *int `pulumi:"failureToleranceCount"`
	// Percentage of accounts, per region, for which this stack operation can fail before CloudFormation stops the operation in that region.
	FailureTolerancePercentage *int `pulumi:"failureTolerancePercentage"`
	// Maximum number of accounts in which to perform this operation at one time.
	MaxConcurrentCount *int `pulumi:"maxConcurrentCount"`
	// Maximum percentage of accounts in which to perform this operation at one time.
	MaxConcurrentPercentage *int `pulumi:"maxConcurrentPercentage"`
	// Concurrency type of deploying stack sets operations in regions, could be in parallel or one region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
	RegionConcurrencyType *string `pulumi:"regionConcurrencyType"`
	// Order of the regions where you want to perform the stack operation.
	RegionOrders []string `pulumi:"regionOrders"`
}

// StackInstancesOperationPreferencesInput is an input type that accepts StackInstancesOperationPreferencesArgs and StackInstancesOperationPreferencesOutput values.
// You can construct a concrete instance of `StackInstancesOperationPreferencesInput` via:
//
//	StackInstancesOperationPreferencesArgs{...}
type StackInstancesOperationPreferencesInput interface {
	pulumi.Input

	ToStackInstancesOperationPreferencesOutput() StackInstancesOperationPreferencesOutput
	ToStackInstancesOperationPreferencesOutputWithContext(context.Context) StackInstancesOperationPreferencesOutput
}

type StackInstancesOperationPreferencesArgs struct {
	// How the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
	ConcurrencyMode pulumi.StringPtrInput `pulumi:"concurrencyMode"`
	// Number of accounts, per region, for which this operation can fail before CloudFormation stops the operation in that region.
	FailureToleranceCount pulumi.IntPtrInput `pulumi:"failureToleranceCount"`
	// Percentage of accounts, per region, for which this stack operation can fail before CloudFormation stops the operation in that region.
	FailureTolerancePercentage pulumi.IntPtrInput `pulumi:"failureTolerancePercentage"`
	// Maximum number of accounts in which to perform this operation at one time.
	MaxConcurrentCount pulumi.IntPtrInput `pulumi:"maxConcurrentCount"`
	// Maximum percentage of accounts in which to perform this operation at one time.
	MaxConcurrentPercentage pulumi.IntPtrInput `pulumi:"maxConcurrentPercentage"`
	// Concurrency type of deploying stack sets operations in regions, could be in parallel or one region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
	RegionConcurrencyType pulumi.StringPtrInput `pulumi:"regionConcurrencyType"`
	// Order of the regions where you want to perform the stack operation.
	RegionOrders pulumi.StringArrayInput `pulumi:"regionOrders"`
}

func (StackInstancesOperationPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackInstancesOperationPreferences)(nil)).Elem()
}

func (i StackInstancesOperationPreferencesArgs) ToStackInstancesOperationPreferencesOutput() StackInstancesOperationPreferencesOutput {
	return i.ToStackInstancesOperationPreferencesOutputWithContext(context.Background())
}

func (i StackInstancesOperationPreferencesArgs) ToStackInstancesOperationPreferencesOutputWithContext(ctx context.Context) StackInstancesOperationPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackInstancesOperationPreferencesOutput)
}

func (i StackInstancesOperationPreferencesArgs) ToStackInstancesOperationPreferencesPtrOutput() StackInstancesOperationPreferencesPtrOutput {
	return i.ToStackInstancesOperationPreferencesPtrOutputWithContext(context.Background())
}

func (i StackInstancesOperationPreferencesArgs) ToStackInstancesOperationPreferencesPtrOutputWithContext(ctx context.Context) StackInstancesOperationPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackInstancesOperationPreferencesOutput).ToStackInstancesOperationPreferencesPtrOutputWithContext(ctx)
}

// StackInstancesOperationPreferencesPtrInput is an input type that accepts StackInstancesOperationPreferencesArgs, StackInstancesOperationPreferencesPtr and StackInstancesOperationPreferencesPtrOutput values.
// You can construct a concrete instance of `StackInstancesOperationPreferencesPtrInput` via:
//
//	        StackInstancesOperationPreferencesArgs{...}
//
//	or:
//
//	        nil
type StackInstancesOperationPreferencesPtrInput interface {
	pulumi.Input

	ToStackInstancesOperationPreferencesPtrOutput() StackInstancesOperationPreferencesPtrOutput
	ToStackInstancesOperationPreferencesPtrOutputWithContext(context.Context) StackInstancesOperationPreferencesPtrOutput
}

type stackInstancesOperationPreferencesPtrType StackInstancesOperationPreferencesArgs

func StackInstancesOperationPreferencesPtr(v *StackInstancesOperationPreferencesArgs) StackInstancesOperationPreferencesPtrInput {
	return (*stackInstancesOperationPreferencesPtrType)(v)
}

func (*stackInstancesOperationPreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackInstancesOperationPreferences)(nil)).Elem()
}

func (i *stackInstancesOperationPreferencesPtrType) ToStackInstancesOperationPreferencesPtrOutput() StackInstancesOperationPreferencesPtrOutput {
	return i.ToStackInstancesOperationPreferencesPtrOutputWithContext(context.Background())
}

func (i *stackInstancesOperationPreferencesPtrType) ToStackInstancesOperationPreferencesPtrOutputWithContext(ctx context.Context) StackInstancesOperationPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackInstancesOperationPreferencesPtrOutput)
}

type StackInstancesOperationPreferencesOutput struct{ *pulumi.OutputState }

func (StackInstancesOperationPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackInstancesOperationPreferences)(nil)).Elem()
}

func (o StackInstancesOperationPreferencesOutput) ToStackInstancesOperationPreferencesOutput() StackInstancesOperationPreferencesOutput {
	return o
}

func (o StackInstancesOperationPreferencesOutput) ToStackInstancesOperationPreferencesOutputWithContext(ctx context.Context) StackInstancesOperationPreferencesOutput {
	return o
}

func (o StackInstancesOperationPreferencesOutput) ToStackInstancesOperationPreferencesPtrOutput() StackInstancesOperationPreferencesPtrOutput {
	return o.ToStackInstancesOperationPreferencesPtrOutputWithContext(context.Background())
}

func (o StackInstancesOperationPreferencesOutput) ToStackInstancesOperationPreferencesPtrOutputWithContext(ctx context.Context) StackInstancesOperationPreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackInstancesOperationPreferences) *StackInstancesOperationPreferences {
		return &v
	}).(StackInstancesOperationPreferencesPtrOutput)
}

// How the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
func (o StackInstancesOperationPreferencesOutput) ConcurrencyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesOperationPreferences) *string { return v.ConcurrencyMode }).(pulumi.StringPtrOutput)
}

// Number of accounts, per region, for which this operation can fail before CloudFormation stops the operation in that region.
func (o StackInstancesOperationPreferencesOutput) FailureToleranceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackInstancesOperationPreferences) *int { return v.FailureToleranceCount }).(pulumi.IntPtrOutput)
}

// Percentage of accounts, per region, for which this stack operation can fail before CloudFormation stops the operation in that region.
func (o StackInstancesOperationPreferencesOutput) FailureTolerancePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackInstancesOperationPreferences) *int { return v.FailureTolerancePercentage }).(pulumi.IntPtrOutput)
}

// Maximum number of accounts in which to perform this operation at one time.
func (o StackInstancesOperationPreferencesOutput) MaxConcurrentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackInstancesOperationPreferences) *int { return v.MaxConcurrentCount }).(pulumi.IntPtrOutput)
}

// Maximum percentage of accounts in which to perform this operation at one time.
func (o StackInstancesOperationPreferencesOutput) MaxConcurrentPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackInstancesOperationPreferences) *int { return v.MaxConcurrentPercentage }).(pulumi.IntPtrOutput)
}

// Concurrency type of deploying stack sets operations in regions, could be in parallel or one region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
func (o StackInstancesOperationPreferencesOutput) RegionConcurrencyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesOperationPreferences) *string { return v.RegionConcurrencyType }).(pulumi.StringPtrOutput)
}

// Order of the regions where you want to perform the stack operation.
func (o StackInstancesOperationPreferencesOutput) RegionOrders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackInstancesOperationPreferences) []string { return v.RegionOrders }).(pulumi.StringArrayOutput)
}

type StackInstancesOperationPreferencesPtrOutput struct{ *pulumi.OutputState }

func (StackInstancesOperationPreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackInstancesOperationPreferences)(nil)).Elem()
}

func (o StackInstancesOperationPreferencesPtrOutput) ToStackInstancesOperationPreferencesPtrOutput() StackInstancesOperationPreferencesPtrOutput {
	return o
}

func (o StackInstancesOperationPreferencesPtrOutput) ToStackInstancesOperationPreferencesPtrOutputWithContext(ctx context.Context) StackInstancesOperationPreferencesPtrOutput {
	return o
}

func (o StackInstancesOperationPreferencesPtrOutput) Elem() StackInstancesOperationPreferencesOutput {
	return o.ApplyT(func(v *StackInstancesOperationPreferences) StackInstancesOperationPreferences {
		if v != nil {
			return *v
		}
		var ret StackInstancesOperationPreferences
		return ret
	}).(StackInstancesOperationPreferencesOutput)
}

// How the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
func (o StackInstancesOperationPreferencesPtrOutput) ConcurrencyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackInstancesOperationPreferences) *string {
		if v == nil {
			return nil
		}
		return v.ConcurrencyMode
	}).(pulumi.StringPtrOutput)
}

// Number of accounts, per region, for which this operation can fail before CloudFormation stops the operation in that region.
func (o StackInstancesOperationPreferencesPtrOutput) FailureToleranceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackInstancesOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.FailureToleranceCount
	}).(pulumi.IntPtrOutput)
}

// Percentage of accounts, per region, for which this stack operation can fail before CloudFormation stops the operation in that region.
func (o StackInstancesOperationPreferencesPtrOutput) FailureTolerancePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackInstancesOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.FailureTolerancePercentage
	}).(pulumi.IntPtrOutput)
}

// Maximum number of accounts in which to perform this operation at one time.
func (o StackInstancesOperationPreferencesPtrOutput) MaxConcurrentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackInstancesOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentCount
	}).(pulumi.IntPtrOutput)
}

// Maximum percentage of accounts in which to perform this operation at one time.
func (o StackInstancesOperationPreferencesPtrOutput) MaxConcurrentPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackInstancesOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentPercentage
	}).(pulumi.IntPtrOutput)
}

// Concurrency type of deploying stack sets operations in regions, could be in parallel or one region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
func (o StackInstancesOperationPreferencesPtrOutput) RegionConcurrencyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackInstancesOperationPreferences) *string {
		if v == nil {
			return nil
		}
		return v.RegionConcurrencyType
	}).(pulumi.StringPtrOutput)
}

// Order of the regions where you want to perform the stack operation.
func (o StackInstancesOperationPreferencesPtrOutput) RegionOrders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackInstancesOperationPreferences) []string {
		if v == nil {
			return nil
		}
		return v.RegionOrders
	}).(pulumi.StringArrayOutput)
}

type StackInstancesStackInstanceSummary struct {
	// Account ID in which the instance is deployed.
	AccountId *string `pulumi:"accountId"`
	// Detailed status of the stack instance. Values include `PENDING`, `RUNNING`, `SUCCEEDED`, `FAILED`, `CANCELLED`, `INOPERABLE`, `SKIPPED_SUSPENDED_ACCOUNT`, `FAILED_IMPORT`.
	DetailedStatus *string `pulumi:"detailedStatus"`
	// Status of the stack instance's actual configuration compared to the expected template and parameter configuration of the stack set to which it belongs. Values include `DRIFTED`, `IN_SYNC`, `UNKNOWN`, `NOT_CHECKED`.
	DriftStatus *string `pulumi:"driftStatus"`
	// Organization root ID or organizational unit (OU) IDs that you specified for `deploymentTargets`.
	OrganizationalUnitId *string `pulumi:"organizationalUnitId"`
	// Region that the stack instance is associated with.
	Region *string `pulumi:"region"`
	// ID of the stack instance.
	StackId *string `pulumi:"stackId"`
	// Name or unique ID of the stack set that the stack instance is associated with.
	StackSetId *string `pulumi:"stackSetId"`
	// Status of the stack instance, in terms of its synchronization with its associated stack set. Values include `CURRENT`, `OUTDATED`, `INOPERABLE`.
	Status *string `pulumi:"status"`
	// Explanation for the specific status code assigned to this stack instance.
	StatusReason *string `pulumi:"statusReason"`
}

// StackInstancesStackInstanceSummaryInput is an input type that accepts StackInstancesStackInstanceSummaryArgs and StackInstancesStackInstanceSummaryOutput values.
// You can construct a concrete instance of `StackInstancesStackInstanceSummaryInput` via:
//
//	StackInstancesStackInstanceSummaryArgs{...}
type StackInstancesStackInstanceSummaryInput interface {
	pulumi.Input

	ToStackInstancesStackInstanceSummaryOutput() StackInstancesStackInstanceSummaryOutput
	ToStackInstancesStackInstanceSummaryOutputWithContext(context.Context) StackInstancesStackInstanceSummaryOutput
}

type StackInstancesStackInstanceSummaryArgs struct {
	// Account ID in which the instance is deployed.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Detailed status of the stack instance. Values include `PENDING`, `RUNNING`, `SUCCEEDED`, `FAILED`, `CANCELLED`, `INOPERABLE`, `SKIPPED_SUSPENDED_ACCOUNT`, `FAILED_IMPORT`.
	DetailedStatus pulumi.StringPtrInput `pulumi:"detailedStatus"`
	// Status of the stack instance's actual configuration compared to the expected template and parameter configuration of the stack set to which it belongs. Values include `DRIFTED`, `IN_SYNC`, `UNKNOWN`, `NOT_CHECKED`.
	DriftStatus pulumi.StringPtrInput `pulumi:"driftStatus"`
	// Organization root ID or organizational unit (OU) IDs that you specified for `deploymentTargets`.
	OrganizationalUnitId pulumi.StringPtrInput `pulumi:"organizationalUnitId"`
	// Region that the stack instance is associated with.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// ID of the stack instance.
	StackId pulumi.StringPtrInput `pulumi:"stackId"`
	// Name or unique ID of the stack set that the stack instance is associated with.
	StackSetId pulumi.StringPtrInput `pulumi:"stackSetId"`
	// Status of the stack instance, in terms of its synchronization with its associated stack set. Values include `CURRENT`, `OUTDATED`, `INOPERABLE`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Explanation for the specific status code assigned to this stack instance.
	StatusReason pulumi.StringPtrInput `pulumi:"statusReason"`
}

func (StackInstancesStackInstanceSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackInstancesStackInstanceSummary)(nil)).Elem()
}

func (i StackInstancesStackInstanceSummaryArgs) ToStackInstancesStackInstanceSummaryOutput() StackInstancesStackInstanceSummaryOutput {
	return i.ToStackInstancesStackInstanceSummaryOutputWithContext(context.Background())
}

func (i StackInstancesStackInstanceSummaryArgs) ToStackInstancesStackInstanceSummaryOutputWithContext(ctx context.Context) StackInstancesStackInstanceSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackInstancesStackInstanceSummaryOutput)
}

// StackInstancesStackInstanceSummaryArrayInput is an input type that accepts StackInstancesStackInstanceSummaryArray and StackInstancesStackInstanceSummaryArrayOutput values.
// You can construct a concrete instance of `StackInstancesStackInstanceSummaryArrayInput` via:
//
//	StackInstancesStackInstanceSummaryArray{ StackInstancesStackInstanceSummaryArgs{...} }
type StackInstancesStackInstanceSummaryArrayInput interface {
	pulumi.Input

	ToStackInstancesStackInstanceSummaryArrayOutput() StackInstancesStackInstanceSummaryArrayOutput
	ToStackInstancesStackInstanceSummaryArrayOutputWithContext(context.Context) StackInstancesStackInstanceSummaryArrayOutput
}

type StackInstancesStackInstanceSummaryArray []StackInstancesStackInstanceSummaryInput

func (StackInstancesStackInstanceSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackInstancesStackInstanceSummary)(nil)).Elem()
}

func (i StackInstancesStackInstanceSummaryArray) ToStackInstancesStackInstanceSummaryArrayOutput() StackInstancesStackInstanceSummaryArrayOutput {
	return i.ToStackInstancesStackInstanceSummaryArrayOutputWithContext(context.Background())
}

func (i StackInstancesStackInstanceSummaryArray) ToStackInstancesStackInstanceSummaryArrayOutputWithContext(ctx context.Context) StackInstancesStackInstanceSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackInstancesStackInstanceSummaryArrayOutput)
}

type StackInstancesStackInstanceSummaryOutput struct{ *pulumi.OutputState }

func (StackInstancesStackInstanceSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackInstancesStackInstanceSummary)(nil)).Elem()
}

func (o StackInstancesStackInstanceSummaryOutput) ToStackInstancesStackInstanceSummaryOutput() StackInstancesStackInstanceSummaryOutput {
	return o
}

func (o StackInstancesStackInstanceSummaryOutput) ToStackInstancesStackInstanceSummaryOutputWithContext(ctx context.Context) StackInstancesStackInstanceSummaryOutput {
	return o
}

// Account ID in which the instance is deployed.
func (o StackInstancesStackInstanceSummaryOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesStackInstanceSummary) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Detailed status of the stack instance. Values include `PENDING`, `RUNNING`, `SUCCEEDED`, `FAILED`, `CANCELLED`, `INOPERABLE`, `SKIPPED_SUSPENDED_ACCOUNT`, `FAILED_IMPORT`.
func (o StackInstancesStackInstanceSummaryOutput) DetailedStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesStackInstanceSummary) *string { return v.DetailedStatus }).(pulumi.StringPtrOutput)
}

// Status of the stack instance's actual configuration compared to the expected template and parameter configuration of the stack set to which it belongs. Values include `DRIFTED`, `IN_SYNC`, `UNKNOWN`, `NOT_CHECKED`.
func (o StackInstancesStackInstanceSummaryOutput) DriftStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesStackInstanceSummary) *string { return v.DriftStatus }).(pulumi.StringPtrOutput)
}

// Organization root ID or organizational unit (OU) IDs that you specified for `deploymentTargets`.
func (o StackInstancesStackInstanceSummaryOutput) OrganizationalUnitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesStackInstanceSummary) *string { return v.OrganizationalUnitId }).(pulumi.StringPtrOutput)
}

// Region that the stack instance is associated with.
func (o StackInstancesStackInstanceSummaryOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesStackInstanceSummary) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// ID of the stack instance.
func (o StackInstancesStackInstanceSummaryOutput) StackId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesStackInstanceSummary) *string { return v.StackId }).(pulumi.StringPtrOutput)
}

// Name or unique ID of the stack set that the stack instance is associated with.
func (o StackInstancesStackInstanceSummaryOutput) StackSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesStackInstanceSummary) *string { return v.StackSetId }).(pulumi.StringPtrOutput)
}

// Status of the stack instance, in terms of its synchronization with its associated stack set. Values include `CURRENT`, `OUTDATED`, `INOPERABLE`.
func (o StackInstancesStackInstanceSummaryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesStackInstanceSummary) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Explanation for the specific status code assigned to this stack instance.
func (o StackInstancesStackInstanceSummaryOutput) StatusReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackInstancesStackInstanceSummary) *string { return v.StatusReason }).(pulumi.StringPtrOutput)
}

type StackInstancesStackInstanceSummaryArrayOutput struct{ *pulumi.OutputState }

func (StackInstancesStackInstanceSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackInstancesStackInstanceSummary)(nil)).Elem()
}

func (o StackInstancesStackInstanceSummaryArrayOutput) ToStackInstancesStackInstanceSummaryArrayOutput() StackInstancesStackInstanceSummaryArrayOutput {
	return o
}

func (o StackInstancesStackInstanceSummaryArrayOutput) ToStackInstancesStackInstanceSummaryArrayOutputWithContext(ctx context.Context) StackInstancesStackInstanceSummaryArrayOutput {
	return o
}

func (o StackInstancesStackInstanceSummaryArrayOutput) Index(i pulumi.IntInput) StackInstancesStackInstanceSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackInstancesStackInstanceSummary {
		return vs[0].([]StackInstancesStackInstanceSummary)[vs[1].(int)]
	}).(StackInstancesStackInstanceSummaryOutput)
}

type StackSetAutoDeployment struct {
	// Whether or not auto-deployment is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Whether or not to retain stacks when the account is removed.
	RetainStacksOnAccountRemoval *bool `pulumi:"retainStacksOnAccountRemoval"`
}

// StackSetAutoDeploymentInput is an input type that accepts StackSetAutoDeploymentArgs and StackSetAutoDeploymentOutput values.
// You can construct a concrete instance of `StackSetAutoDeploymentInput` via:
//
//	StackSetAutoDeploymentArgs{...}
type StackSetAutoDeploymentInput interface {
	pulumi.Input

	ToStackSetAutoDeploymentOutput() StackSetAutoDeploymentOutput
	ToStackSetAutoDeploymentOutputWithContext(context.Context) StackSetAutoDeploymentOutput
}

type StackSetAutoDeploymentArgs struct {
	// Whether or not auto-deployment is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Whether or not to retain stacks when the account is removed.
	RetainStacksOnAccountRemoval pulumi.BoolPtrInput `pulumi:"retainStacksOnAccountRemoval"`
}

func (StackSetAutoDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetAutoDeployment)(nil)).Elem()
}

func (i StackSetAutoDeploymentArgs) ToStackSetAutoDeploymentOutput() StackSetAutoDeploymentOutput {
	return i.ToStackSetAutoDeploymentOutputWithContext(context.Background())
}

func (i StackSetAutoDeploymentArgs) ToStackSetAutoDeploymentOutputWithContext(ctx context.Context) StackSetAutoDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetAutoDeploymentOutput)
}

func (i StackSetAutoDeploymentArgs) ToStackSetAutoDeploymentPtrOutput() StackSetAutoDeploymentPtrOutput {
	return i.ToStackSetAutoDeploymentPtrOutputWithContext(context.Background())
}

func (i StackSetAutoDeploymentArgs) ToStackSetAutoDeploymentPtrOutputWithContext(ctx context.Context) StackSetAutoDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetAutoDeploymentOutput).ToStackSetAutoDeploymentPtrOutputWithContext(ctx)
}

// StackSetAutoDeploymentPtrInput is an input type that accepts StackSetAutoDeploymentArgs, StackSetAutoDeploymentPtr and StackSetAutoDeploymentPtrOutput values.
// You can construct a concrete instance of `StackSetAutoDeploymentPtrInput` via:
//
//	        StackSetAutoDeploymentArgs{...}
//
//	or:
//
//	        nil
type StackSetAutoDeploymentPtrInput interface {
	pulumi.Input

	ToStackSetAutoDeploymentPtrOutput() StackSetAutoDeploymentPtrOutput
	ToStackSetAutoDeploymentPtrOutputWithContext(context.Context) StackSetAutoDeploymentPtrOutput
}

type stackSetAutoDeploymentPtrType StackSetAutoDeploymentArgs

func StackSetAutoDeploymentPtr(v *StackSetAutoDeploymentArgs) StackSetAutoDeploymentPtrInput {
	return (*stackSetAutoDeploymentPtrType)(v)
}

func (*stackSetAutoDeploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetAutoDeployment)(nil)).Elem()
}

func (i *stackSetAutoDeploymentPtrType) ToStackSetAutoDeploymentPtrOutput() StackSetAutoDeploymentPtrOutput {
	return i.ToStackSetAutoDeploymentPtrOutputWithContext(context.Background())
}

func (i *stackSetAutoDeploymentPtrType) ToStackSetAutoDeploymentPtrOutputWithContext(ctx context.Context) StackSetAutoDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetAutoDeploymentPtrOutput)
}

type StackSetAutoDeploymentOutput struct{ *pulumi.OutputState }

func (StackSetAutoDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetAutoDeployment)(nil)).Elem()
}

func (o StackSetAutoDeploymentOutput) ToStackSetAutoDeploymentOutput() StackSetAutoDeploymentOutput {
	return o
}

func (o StackSetAutoDeploymentOutput) ToStackSetAutoDeploymentOutputWithContext(ctx context.Context) StackSetAutoDeploymentOutput {
	return o
}

func (o StackSetAutoDeploymentOutput) ToStackSetAutoDeploymentPtrOutput() StackSetAutoDeploymentPtrOutput {
	return o.ToStackSetAutoDeploymentPtrOutputWithContext(context.Background())
}

func (o StackSetAutoDeploymentOutput) ToStackSetAutoDeploymentPtrOutputWithContext(ctx context.Context) StackSetAutoDeploymentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackSetAutoDeployment) *StackSetAutoDeployment {
		return &v
	}).(StackSetAutoDeploymentPtrOutput)
}

// Whether or not auto-deployment is enabled.
func (o StackSetAutoDeploymentOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StackSetAutoDeployment) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether or not to retain stacks when the account is removed.
func (o StackSetAutoDeploymentOutput) RetainStacksOnAccountRemoval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StackSetAutoDeployment) *bool { return v.RetainStacksOnAccountRemoval }).(pulumi.BoolPtrOutput)
}

type StackSetAutoDeploymentPtrOutput struct{ *pulumi.OutputState }

func (StackSetAutoDeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetAutoDeployment)(nil)).Elem()
}

func (o StackSetAutoDeploymentPtrOutput) ToStackSetAutoDeploymentPtrOutput() StackSetAutoDeploymentPtrOutput {
	return o
}

func (o StackSetAutoDeploymentPtrOutput) ToStackSetAutoDeploymentPtrOutputWithContext(ctx context.Context) StackSetAutoDeploymentPtrOutput {
	return o
}

func (o StackSetAutoDeploymentPtrOutput) Elem() StackSetAutoDeploymentOutput {
	return o.ApplyT(func(v *StackSetAutoDeployment) StackSetAutoDeployment {
		if v != nil {
			return *v
		}
		var ret StackSetAutoDeployment
		return ret
	}).(StackSetAutoDeploymentOutput)
}

// Whether or not auto-deployment is enabled.
func (o StackSetAutoDeploymentPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StackSetAutoDeployment) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Whether or not to retain stacks when the account is removed.
func (o StackSetAutoDeploymentPtrOutput) RetainStacksOnAccountRemoval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StackSetAutoDeployment) *bool {
		if v == nil {
			return nil
		}
		return v.RetainStacksOnAccountRemoval
	}).(pulumi.BoolPtrOutput)
}

type StackSetInstanceDeploymentTargets struct {
	// Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: `INTERSECTION`, `DIFFERENCE`, `UNION`, `NONE`.
	AccountFilterType *string `pulumi:"accountFilterType"`
	// List of accounts to deploy stack set updates.
	Accounts []string `pulumi:"accounts"`
	// S3 URL of the file containing the list of accounts.
	AccountsUrl *string `pulumi:"accountsUrl"`
	// Organization root ID or organizational unit (OU) IDs to which StackSets deploys.
	OrganizationalUnitIds []string `pulumi:"organizationalUnitIds"`
}

// StackSetInstanceDeploymentTargetsInput is an input type that accepts StackSetInstanceDeploymentTargetsArgs and StackSetInstanceDeploymentTargetsOutput values.
// You can construct a concrete instance of `StackSetInstanceDeploymentTargetsInput` via:
//
//	StackSetInstanceDeploymentTargetsArgs{...}
type StackSetInstanceDeploymentTargetsInput interface {
	pulumi.Input

	ToStackSetInstanceDeploymentTargetsOutput() StackSetInstanceDeploymentTargetsOutput
	ToStackSetInstanceDeploymentTargetsOutputWithContext(context.Context) StackSetInstanceDeploymentTargetsOutput
}

type StackSetInstanceDeploymentTargetsArgs struct {
	// Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: `INTERSECTION`, `DIFFERENCE`, `UNION`, `NONE`.
	AccountFilterType pulumi.StringPtrInput `pulumi:"accountFilterType"`
	// List of accounts to deploy stack set updates.
	Accounts pulumi.StringArrayInput `pulumi:"accounts"`
	// S3 URL of the file containing the list of accounts.
	AccountsUrl pulumi.StringPtrInput `pulumi:"accountsUrl"`
	// Organization root ID or organizational unit (OU) IDs to which StackSets deploys.
	OrganizationalUnitIds pulumi.StringArrayInput `pulumi:"organizationalUnitIds"`
}

func (StackSetInstanceDeploymentTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceDeploymentTargets)(nil)).Elem()
}

func (i StackSetInstanceDeploymentTargetsArgs) ToStackSetInstanceDeploymentTargetsOutput() StackSetInstanceDeploymentTargetsOutput {
	return i.ToStackSetInstanceDeploymentTargetsOutputWithContext(context.Background())
}

func (i StackSetInstanceDeploymentTargetsArgs) ToStackSetInstanceDeploymentTargetsOutputWithContext(ctx context.Context) StackSetInstanceDeploymentTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetInstanceDeploymentTargetsOutput)
}

func (i StackSetInstanceDeploymentTargetsArgs) ToStackSetInstanceDeploymentTargetsPtrOutput() StackSetInstanceDeploymentTargetsPtrOutput {
	return i.ToStackSetInstanceDeploymentTargetsPtrOutputWithContext(context.Background())
}

func (i StackSetInstanceDeploymentTargetsArgs) ToStackSetInstanceDeploymentTargetsPtrOutputWithContext(ctx context.Context) StackSetInstanceDeploymentTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetInstanceDeploymentTargetsOutput).ToStackSetInstanceDeploymentTargetsPtrOutputWithContext(ctx)
}

// StackSetInstanceDeploymentTargetsPtrInput is an input type that accepts StackSetInstanceDeploymentTargetsArgs, StackSetInstanceDeploymentTargetsPtr and StackSetInstanceDeploymentTargetsPtrOutput values.
// You can construct a concrete instance of `StackSetInstanceDeploymentTargetsPtrInput` via:
//
//	        StackSetInstanceDeploymentTargetsArgs{...}
//
//	or:
//
//	        nil
type StackSetInstanceDeploymentTargetsPtrInput interface {
	pulumi.Input

	ToStackSetInstanceDeploymentTargetsPtrOutput() StackSetInstanceDeploymentTargetsPtrOutput
	ToStackSetInstanceDeploymentTargetsPtrOutputWithContext(context.Context) StackSetInstanceDeploymentTargetsPtrOutput
}

type stackSetInstanceDeploymentTargetsPtrType StackSetInstanceDeploymentTargetsArgs

func StackSetInstanceDeploymentTargetsPtr(v *StackSetInstanceDeploymentTargetsArgs) StackSetInstanceDeploymentTargetsPtrInput {
	return (*stackSetInstanceDeploymentTargetsPtrType)(v)
}

func (*stackSetInstanceDeploymentTargetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetInstanceDeploymentTargets)(nil)).Elem()
}

func (i *stackSetInstanceDeploymentTargetsPtrType) ToStackSetInstanceDeploymentTargetsPtrOutput() StackSetInstanceDeploymentTargetsPtrOutput {
	return i.ToStackSetInstanceDeploymentTargetsPtrOutputWithContext(context.Background())
}

func (i *stackSetInstanceDeploymentTargetsPtrType) ToStackSetInstanceDeploymentTargetsPtrOutputWithContext(ctx context.Context) StackSetInstanceDeploymentTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetInstanceDeploymentTargetsPtrOutput)
}

type StackSetInstanceDeploymentTargetsOutput struct{ *pulumi.OutputState }

func (StackSetInstanceDeploymentTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceDeploymentTargets)(nil)).Elem()
}

func (o StackSetInstanceDeploymentTargetsOutput) ToStackSetInstanceDeploymentTargetsOutput() StackSetInstanceDeploymentTargetsOutput {
	return o
}

func (o StackSetInstanceDeploymentTargetsOutput) ToStackSetInstanceDeploymentTargetsOutputWithContext(ctx context.Context) StackSetInstanceDeploymentTargetsOutput {
	return o
}

func (o StackSetInstanceDeploymentTargetsOutput) ToStackSetInstanceDeploymentTargetsPtrOutput() StackSetInstanceDeploymentTargetsPtrOutput {
	return o.ToStackSetInstanceDeploymentTargetsPtrOutputWithContext(context.Background())
}

func (o StackSetInstanceDeploymentTargetsOutput) ToStackSetInstanceDeploymentTargetsPtrOutputWithContext(ctx context.Context) StackSetInstanceDeploymentTargetsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackSetInstanceDeploymentTargets) *StackSetInstanceDeploymentTargets {
		return &v
	}).(StackSetInstanceDeploymentTargetsPtrOutput)
}

// Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: `INTERSECTION`, `DIFFERENCE`, `UNION`, `NONE`.
func (o StackSetInstanceDeploymentTargetsOutput) AccountFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSetInstanceDeploymentTargets) *string { return v.AccountFilterType }).(pulumi.StringPtrOutput)
}

// List of accounts to deploy stack set updates.
func (o StackSetInstanceDeploymentTargetsOutput) Accounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackSetInstanceDeploymentTargets) []string { return v.Accounts }).(pulumi.StringArrayOutput)
}

// S3 URL of the file containing the list of accounts.
func (o StackSetInstanceDeploymentTargetsOutput) AccountsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSetInstanceDeploymentTargets) *string { return v.AccountsUrl }).(pulumi.StringPtrOutput)
}

// Organization root ID or organizational unit (OU) IDs to which StackSets deploys.
func (o StackSetInstanceDeploymentTargetsOutput) OrganizationalUnitIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackSetInstanceDeploymentTargets) []string { return v.OrganizationalUnitIds }).(pulumi.StringArrayOutput)
}

type StackSetInstanceDeploymentTargetsPtrOutput struct{ *pulumi.OutputState }

func (StackSetInstanceDeploymentTargetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetInstanceDeploymentTargets)(nil)).Elem()
}

func (o StackSetInstanceDeploymentTargetsPtrOutput) ToStackSetInstanceDeploymentTargetsPtrOutput() StackSetInstanceDeploymentTargetsPtrOutput {
	return o
}

func (o StackSetInstanceDeploymentTargetsPtrOutput) ToStackSetInstanceDeploymentTargetsPtrOutputWithContext(ctx context.Context) StackSetInstanceDeploymentTargetsPtrOutput {
	return o
}

func (o StackSetInstanceDeploymentTargetsPtrOutput) Elem() StackSetInstanceDeploymentTargetsOutput {
	return o.ApplyT(func(v *StackSetInstanceDeploymentTargets) StackSetInstanceDeploymentTargets {
		if v != nil {
			return *v
		}
		var ret StackSetInstanceDeploymentTargets
		return ret
	}).(StackSetInstanceDeploymentTargetsOutput)
}

// Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: `INTERSECTION`, `DIFFERENCE`, `UNION`, `NONE`.
func (o StackSetInstanceDeploymentTargetsPtrOutput) AccountFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSetInstanceDeploymentTargets) *string {
		if v == nil {
			return nil
		}
		return v.AccountFilterType
	}).(pulumi.StringPtrOutput)
}

// List of accounts to deploy stack set updates.
func (o StackSetInstanceDeploymentTargetsPtrOutput) Accounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackSetInstanceDeploymentTargets) []string {
		if v == nil {
			return nil
		}
		return v.Accounts
	}).(pulumi.StringArrayOutput)
}

// S3 URL of the file containing the list of accounts.
func (o StackSetInstanceDeploymentTargetsPtrOutput) AccountsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSetInstanceDeploymentTargets) *string {
		if v == nil {
			return nil
		}
		return v.AccountsUrl
	}).(pulumi.StringPtrOutput)
}

// Organization root ID or organizational unit (OU) IDs to which StackSets deploys.
func (o StackSetInstanceDeploymentTargetsPtrOutput) OrganizationalUnitIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackSetInstanceDeploymentTargets) []string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnitIds
	}).(pulumi.StringArrayOutput)
}

type StackSetInstanceOperationPreferences struct {
	// Specifies how the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
	ConcurrencyMode *string `pulumi:"concurrencyMode"`
	// Number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureToleranceCount *int `pulumi:"failureToleranceCount"`
	// Percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureTolerancePercentage *int `pulumi:"failureTolerancePercentage"`
	// Maximum number of accounts in which to perform this operation at one time.
	MaxConcurrentCount *int `pulumi:"maxConcurrentCount"`
	// Maximum percentage of accounts in which to perform this operation at one time.
	MaxConcurrentPercentage *int `pulumi:"maxConcurrentPercentage"`
	// Concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
	RegionConcurrencyType *string `pulumi:"regionConcurrencyType"`
	// Order of the Regions in where you want to perform the stack operation.
	RegionOrders []string `pulumi:"regionOrders"`
}

// StackSetInstanceOperationPreferencesInput is an input type that accepts StackSetInstanceOperationPreferencesArgs and StackSetInstanceOperationPreferencesOutput values.
// You can construct a concrete instance of `StackSetInstanceOperationPreferencesInput` via:
//
//	StackSetInstanceOperationPreferencesArgs{...}
type StackSetInstanceOperationPreferencesInput interface {
	pulumi.Input

	ToStackSetInstanceOperationPreferencesOutput() StackSetInstanceOperationPreferencesOutput
	ToStackSetInstanceOperationPreferencesOutputWithContext(context.Context) StackSetInstanceOperationPreferencesOutput
}

type StackSetInstanceOperationPreferencesArgs struct {
	// Specifies how the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
	ConcurrencyMode pulumi.StringPtrInput `pulumi:"concurrencyMode"`
	// Number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureToleranceCount pulumi.IntPtrInput `pulumi:"failureToleranceCount"`
	// Percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureTolerancePercentage pulumi.IntPtrInput `pulumi:"failureTolerancePercentage"`
	// Maximum number of accounts in which to perform this operation at one time.
	MaxConcurrentCount pulumi.IntPtrInput `pulumi:"maxConcurrentCount"`
	// Maximum percentage of accounts in which to perform this operation at one time.
	MaxConcurrentPercentage pulumi.IntPtrInput `pulumi:"maxConcurrentPercentage"`
	// Concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
	RegionConcurrencyType pulumi.StringPtrInput `pulumi:"regionConcurrencyType"`
	// Order of the Regions in where you want to perform the stack operation.
	RegionOrders pulumi.StringArrayInput `pulumi:"regionOrders"`
}

func (StackSetInstanceOperationPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceOperationPreferences)(nil)).Elem()
}

func (i StackSetInstanceOperationPreferencesArgs) ToStackSetInstanceOperationPreferencesOutput() StackSetInstanceOperationPreferencesOutput {
	return i.ToStackSetInstanceOperationPreferencesOutputWithContext(context.Background())
}

func (i StackSetInstanceOperationPreferencesArgs) ToStackSetInstanceOperationPreferencesOutputWithContext(ctx context.Context) StackSetInstanceOperationPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetInstanceOperationPreferencesOutput)
}

func (i StackSetInstanceOperationPreferencesArgs) ToStackSetInstanceOperationPreferencesPtrOutput() StackSetInstanceOperationPreferencesPtrOutput {
	return i.ToStackSetInstanceOperationPreferencesPtrOutputWithContext(context.Background())
}

func (i StackSetInstanceOperationPreferencesArgs) ToStackSetInstanceOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetInstanceOperationPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetInstanceOperationPreferencesOutput).ToStackSetInstanceOperationPreferencesPtrOutputWithContext(ctx)
}

// StackSetInstanceOperationPreferencesPtrInput is an input type that accepts StackSetInstanceOperationPreferencesArgs, StackSetInstanceOperationPreferencesPtr and StackSetInstanceOperationPreferencesPtrOutput values.
// You can construct a concrete instance of `StackSetInstanceOperationPreferencesPtrInput` via:
//
//	        StackSetInstanceOperationPreferencesArgs{...}
//
//	or:
//
//	        nil
type StackSetInstanceOperationPreferencesPtrInput interface {
	pulumi.Input

	ToStackSetInstanceOperationPreferencesPtrOutput() StackSetInstanceOperationPreferencesPtrOutput
	ToStackSetInstanceOperationPreferencesPtrOutputWithContext(context.Context) StackSetInstanceOperationPreferencesPtrOutput
}

type stackSetInstanceOperationPreferencesPtrType StackSetInstanceOperationPreferencesArgs

func StackSetInstanceOperationPreferencesPtr(v *StackSetInstanceOperationPreferencesArgs) StackSetInstanceOperationPreferencesPtrInput {
	return (*stackSetInstanceOperationPreferencesPtrType)(v)
}

func (*stackSetInstanceOperationPreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetInstanceOperationPreferences)(nil)).Elem()
}

func (i *stackSetInstanceOperationPreferencesPtrType) ToStackSetInstanceOperationPreferencesPtrOutput() StackSetInstanceOperationPreferencesPtrOutput {
	return i.ToStackSetInstanceOperationPreferencesPtrOutputWithContext(context.Background())
}

func (i *stackSetInstanceOperationPreferencesPtrType) ToStackSetInstanceOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetInstanceOperationPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetInstanceOperationPreferencesPtrOutput)
}

type StackSetInstanceOperationPreferencesOutput struct{ *pulumi.OutputState }

func (StackSetInstanceOperationPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceOperationPreferences)(nil)).Elem()
}

func (o StackSetInstanceOperationPreferencesOutput) ToStackSetInstanceOperationPreferencesOutput() StackSetInstanceOperationPreferencesOutput {
	return o
}

func (o StackSetInstanceOperationPreferencesOutput) ToStackSetInstanceOperationPreferencesOutputWithContext(ctx context.Context) StackSetInstanceOperationPreferencesOutput {
	return o
}

func (o StackSetInstanceOperationPreferencesOutput) ToStackSetInstanceOperationPreferencesPtrOutput() StackSetInstanceOperationPreferencesPtrOutput {
	return o.ToStackSetInstanceOperationPreferencesPtrOutputWithContext(context.Background())
}

func (o StackSetInstanceOperationPreferencesOutput) ToStackSetInstanceOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetInstanceOperationPreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackSetInstanceOperationPreferences) *StackSetInstanceOperationPreferences {
		return &v
	}).(StackSetInstanceOperationPreferencesPtrOutput)
}

// Specifies how the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
func (o StackSetInstanceOperationPreferencesOutput) ConcurrencyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSetInstanceOperationPreferences) *string { return v.ConcurrencyMode }).(pulumi.StringPtrOutput)
}

// Number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetInstanceOperationPreferencesOutput) FailureToleranceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetInstanceOperationPreferences) *int { return v.FailureToleranceCount }).(pulumi.IntPtrOutput)
}

// Percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetInstanceOperationPreferencesOutput) FailureTolerancePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetInstanceOperationPreferences) *int { return v.FailureTolerancePercentage }).(pulumi.IntPtrOutput)
}

// Maximum number of accounts in which to perform this operation at one time.
func (o StackSetInstanceOperationPreferencesOutput) MaxConcurrentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetInstanceOperationPreferences) *int { return v.MaxConcurrentCount }).(pulumi.IntPtrOutput)
}

// Maximum percentage of accounts in which to perform this operation at one time.
func (o StackSetInstanceOperationPreferencesOutput) MaxConcurrentPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetInstanceOperationPreferences) *int { return v.MaxConcurrentPercentage }).(pulumi.IntPtrOutput)
}

// Concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
func (o StackSetInstanceOperationPreferencesOutput) RegionConcurrencyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSetInstanceOperationPreferences) *string { return v.RegionConcurrencyType }).(pulumi.StringPtrOutput)
}

// Order of the Regions in where you want to perform the stack operation.
func (o StackSetInstanceOperationPreferencesOutput) RegionOrders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackSetInstanceOperationPreferences) []string { return v.RegionOrders }).(pulumi.StringArrayOutput)
}

type StackSetInstanceOperationPreferencesPtrOutput struct{ *pulumi.OutputState }

func (StackSetInstanceOperationPreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetInstanceOperationPreferences)(nil)).Elem()
}

func (o StackSetInstanceOperationPreferencesPtrOutput) ToStackSetInstanceOperationPreferencesPtrOutput() StackSetInstanceOperationPreferencesPtrOutput {
	return o
}

func (o StackSetInstanceOperationPreferencesPtrOutput) ToStackSetInstanceOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetInstanceOperationPreferencesPtrOutput {
	return o
}

func (o StackSetInstanceOperationPreferencesPtrOutput) Elem() StackSetInstanceOperationPreferencesOutput {
	return o.ApplyT(func(v *StackSetInstanceOperationPreferences) StackSetInstanceOperationPreferences {
		if v != nil {
			return *v
		}
		var ret StackSetInstanceOperationPreferences
		return ret
	}).(StackSetInstanceOperationPreferencesOutput)
}

// Specifies how the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
func (o StackSetInstanceOperationPreferencesPtrOutput) ConcurrencyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSetInstanceOperationPreferences) *string {
		if v == nil {
			return nil
		}
		return v.ConcurrencyMode
	}).(pulumi.StringPtrOutput)
}

// Number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetInstanceOperationPreferencesPtrOutput) FailureToleranceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetInstanceOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.FailureToleranceCount
	}).(pulumi.IntPtrOutput)
}

// Percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetInstanceOperationPreferencesPtrOutput) FailureTolerancePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetInstanceOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.FailureTolerancePercentage
	}).(pulumi.IntPtrOutput)
}

// Maximum number of accounts in which to perform this operation at one time.
func (o StackSetInstanceOperationPreferencesPtrOutput) MaxConcurrentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetInstanceOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentCount
	}).(pulumi.IntPtrOutput)
}

// Maximum percentage of accounts in which to perform this operation at one time.
func (o StackSetInstanceOperationPreferencesPtrOutput) MaxConcurrentPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetInstanceOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentPercentage
	}).(pulumi.IntPtrOutput)
}

// Concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
func (o StackSetInstanceOperationPreferencesPtrOutput) RegionConcurrencyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSetInstanceOperationPreferences) *string {
		if v == nil {
			return nil
		}
		return v.RegionConcurrencyType
	}).(pulumi.StringPtrOutput)
}

// Order of the Regions in where you want to perform the stack operation.
func (o StackSetInstanceOperationPreferencesPtrOutput) RegionOrders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackSetInstanceOperationPreferences) []string {
		if v == nil {
			return nil
		}
		return v.RegionOrders
	}).(pulumi.StringArrayOutput)
}

type StackSetInstanceStackInstanceSummary struct {
	// Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
	AccountId *string `pulumi:"accountId"`
	// Organizational unit ID in which the stack is deployed.
	OrganizationalUnitId *string `pulumi:"organizationalUnitId"`
	// Stack identifier.
	StackId *string `pulumi:"stackId"`
}

// StackSetInstanceStackInstanceSummaryInput is an input type that accepts StackSetInstanceStackInstanceSummaryArgs and StackSetInstanceStackInstanceSummaryOutput values.
// You can construct a concrete instance of `StackSetInstanceStackInstanceSummaryInput` via:
//
//	StackSetInstanceStackInstanceSummaryArgs{...}
type StackSetInstanceStackInstanceSummaryInput interface {
	pulumi.Input

	ToStackSetInstanceStackInstanceSummaryOutput() StackSetInstanceStackInstanceSummaryOutput
	ToStackSetInstanceStackInstanceSummaryOutputWithContext(context.Context) StackSetInstanceStackInstanceSummaryOutput
}

type StackSetInstanceStackInstanceSummaryArgs struct {
	// Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Organizational unit ID in which the stack is deployed.
	OrganizationalUnitId pulumi.StringPtrInput `pulumi:"organizationalUnitId"`
	// Stack identifier.
	StackId pulumi.StringPtrInput `pulumi:"stackId"`
}

func (StackSetInstanceStackInstanceSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceStackInstanceSummary)(nil)).Elem()
}

func (i StackSetInstanceStackInstanceSummaryArgs) ToStackSetInstanceStackInstanceSummaryOutput() StackSetInstanceStackInstanceSummaryOutput {
	return i.ToStackSetInstanceStackInstanceSummaryOutputWithContext(context.Background())
}

func (i StackSetInstanceStackInstanceSummaryArgs) ToStackSetInstanceStackInstanceSummaryOutputWithContext(ctx context.Context) StackSetInstanceStackInstanceSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetInstanceStackInstanceSummaryOutput)
}

// StackSetInstanceStackInstanceSummaryArrayInput is an input type that accepts StackSetInstanceStackInstanceSummaryArray and StackSetInstanceStackInstanceSummaryArrayOutput values.
// You can construct a concrete instance of `StackSetInstanceStackInstanceSummaryArrayInput` via:
//
//	StackSetInstanceStackInstanceSummaryArray{ StackSetInstanceStackInstanceSummaryArgs{...} }
type StackSetInstanceStackInstanceSummaryArrayInput interface {
	pulumi.Input

	ToStackSetInstanceStackInstanceSummaryArrayOutput() StackSetInstanceStackInstanceSummaryArrayOutput
	ToStackSetInstanceStackInstanceSummaryArrayOutputWithContext(context.Context) StackSetInstanceStackInstanceSummaryArrayOutput
}

type StackSetInstanceStackInstanceSummaryArray []StackSetInstanceStackInstanceSummaryInput

func (StackSetInstanceStackInstanceSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackSetInstanceStackInstanceSummary)(nil)).Elem()
}

func (i StackSetInstanceStackInstanceSummaryArray) ToStackSetInstanceStackInstanceSummaryArrayOutput() StackSetInstanceStackInstanceSummaryArrayOutput {
	return i.ToStackSetInstanceStackInstanceSummaryArrayOutputWithContext(context.Background())
}

func (i StackSetInstanceStackInstanceSummaryArray) ToStackSetInstanceStackInstanceSummaryArrayOutputWithContext(ctx context.Context) StackSetInstanceStackInstanceSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetInstanceStackInstanceSummaryArrayOutput)
}

type StackSetInstanceStackInstanceSummaryOutput struct{ *pulumi.OutputState }

func (StackSetInstanceStackInstanceSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetInstanceStackInstanceSummary)(nil)).Elem()
}

func (o StackSetInstanceStackInstanceSummaryOutput) ToStackSetInstanceStackInstanceSummaryOutput() StackSetInstanceStackInstanceSummaryOutput {
	return o
}

func (o StackSetInstanceStackInstanceSummaryOutput) ToStackSetInstanceStackInstanceSummaryOutputWithContext(ctx context.Context) StackSetInstanceStackInstanceSummaryOutput {
	return o
}

// Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
func (o StackSetInstanceStackInstanceSummaryOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSetInstanceStackInstanceSummary) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Organizational unit ID in which the stack is deployed.
func (o StackSetInstanceStackInstanceSummaryOutput) OrganizationalUnitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSetInstanceStackInstanceSummary) *string { return v.OrganizationalUnitId }).(pulumi.StringPtrOutput)
}

// Stack identifier.
func (o StackSetInstanceStackInstanceSummaryOutput) StackId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSetInstanceStackInstanceSummary) *string { return v.StackId }).(pulumi.StringPtrOutput)
}

type StackSetInstanceStackInstanceSummaryArrayOutput struct{ *pulumi.OutputState }

func (StackSetInstanceStackInstanceSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackSetInstanceStackInstanceSummary)(nil)).Elem()
}

func (o StackSetInstanceStackInstanceSummaryArrayOutput) ToStackSetInstanceStackInstanceSummaryArrayOutput() StackSetInstanceStackInstanceSummaryArrayOutput {
	return o
}

func (o StackSetInstanceStackInstanceSummaryArrayOutput) ToStackSetInstanceStackInstanceSummaryArrayOutputWithContext(ctx context.Context) StackSetInstanceStackInstanceSummaryArrayOutput {
	return o
}

func (o StackSetInstanceStackInstanceSummaryArrayOutput) Index(i pulumi.IntInput) StackSetInstanceStackInstanceSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackSetInstanceStackInstanceSummary {
		return vs[0].([]StackSetInstanceStackInstanceSummary)[vs[1].(int)]
	}).(StackSetInstanceStackInstanceSummaryOutput)
}

type StackSetManagedExecution struct {
	// When set to true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. Default is false.
	Active *bool `pulumi:"active"`
}

// StackSetManagedExecutionInput is an input type that accepts StackSetManagedExecutionArgs and StackSetManagedExecutionOutput values.
// You can construct a concrete instance of `StackSetManagedExecutionInput` via:
//
//	StackSetManagedExecutionArgs{...}
type StackSetManagedExecutionInput interface {
	pulumi.Input

	ToStackSetManagedExecutionOutput() StackSetManagedExecutionOutput
	ToStackSetManagedExecutionOutputWithContext(context.Context) StackSetManagedExecutionOutput
}

type StackSetManagedExecutionArgs struct {
	// When set to true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. Default is false.
	Active pulumi.BoolPtrInput `pulumi:"active"`
}

func (StackSetManagedExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetManagedExecution)(nil)).Elem()
}

func (i StackSetManagedExecutionArgs) ToStackSetManagedExecutionOutput() StackSetManagedExecutionOutput {
	return i.ToStackSetManagedExecutionOutputWithContext(context.Background())
}

func (i StackSetManagedExecutionArgs) ToStackSetManagedExecutionOutputWithContext(ctx context.Context) StackSetManagedExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetManagedExecutionOutput)
}

func (i StackSetManagedExecutionArgs) ToStackSetManagedExecutionPtrOutput() StackSetManagedExecutionPtrOutput {
	return i.ToStackSetManagedExecutionPtrOutputWithContext(context.Background())
}

func (i StackSetManagedExecutionArgs) ToStackSetManagedExecutionPtrOutputWithContext(ctx context.Context) StackSetManagedExecutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetManagedExecutionOutput).ToStackSetManagedExecutionPtrOutputWithContext(ctx)
}

// StackSetManagedExecutionPtrInput is an input type that accepts StackSetManagedExecutionArgs, StackSetManagedExecutionPtr and StackSetManagedExecutionPtrOutput values.
// You can construct a concrete instance of `StackSetManagedExecutionPtrInput` via:
//
//	        StackSetManagedExecutionArgs{...}
//
//	or:
//
//	        nil
type StackSetManagedExecutionPtrInput interface {
	pulumi.Input

	ToStackSetManagedExecutionPtrOutput() StackSetManagedExecutionPtrOutput
	ToStackSetManagedExecutionPtrOutputWithContext(context.Context) StackSetManagedExecutionPtrOutput
}

type stackSetManagedExecutionPtrType StackSetManagedExecutionArgs

func StackSetManagedExecutionPtr(v *StackSetManagedExecutionArgs) StackSetManagedExecutionPtrInput {
	return (*stackSetManagedExecutionPtrType)(v)
}

func (*stackSetManagedExecutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetManagedExecution)(nil)).Elem()
}

func (i *stackSetManagedExecutionPtrType) ToStackSetManagedExecutionPtrOutput() StackSetManagedExecutionPtrOutput {
	return i.ToStackSetManagedExecutionPtrOutputWithContext(context.Background())
}

func (i *stackSetManagedExecutionPtrType) ToStackSetManagedExecutionPtrOutputWithContext(ctx context.Context) StackSetManagedExecutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetManagedExecutionPtrOutput)
}

type StackSetManagedExecutionOutput struct{ *pulumi.OutputState }

func (StackSetManagedExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetManagedExecution)(nil)).Elem()
}

func (o StackSetManagedExecutionOutput) ToStackSetManagedExecutionOutput() StackSetManagedExecutionOutput {
	return o
}

func (o StackSetManagedExecutionOutput) ToStackSetManagedExecutionOutputWithContext(ctx context.Context) StackSetManagedExecutionOutput {
	return o
}

func (o StackSetManagedExecutionOutput) ToStackSetManagedExecutionPtrOutput() StackSetManagedExecutionPtrOutput {
	return o.ToStackSetManagedExecutionPtrOutputWithContext(context.Background())
}

func (o StackSetManagedExecutionOutput) ToStackSetManagedExecutionPtrOutputWithContext(ctx context.Context) StackSetManagedExecutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackSetManagedExecution) *StackSetManagedExecution {
		return &v
	}).(StackSetManagedExecutionPtrOutput)
}

// When set to true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. Default is false.
func (o StackSetManagedExecutionOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StackSetManagedExecution) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

type StackSetManagedExecutionPtrOutput struct{ *pulumi.OutputState }

func (StackSetManagedExecutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetManagedExecution)(nil)).Elem()
}

func (o StackSetManagedExecutionPtrOutput) ToStackSetManagedExecutionPtrOutput() StackSetManagedExecutionPtrOutput {
	return o
}

func (o StackSetManagedExecutionPtrOutput) ToStackSetManagedExecutionPtrOutputWithContext(ctx context.Context) StackSetManagedExecutionPtrOutput {
	return o
}

func (o StackSetManagedExecutionPtrOutput) Elem() StackSetManagedExecutionOutput {
	return o.ApplyT(func(v *StackSetManagedExecution) StackSetManagedExecution {
		if v != nil {
			return *v
		}
		var ret StackSetManagedExecution
		return ret
	}).(StackSetManagedExecutionOutput)
}

// When set to true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. Default is false.
func (o StackSetManagedExecutionPtrOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StackSetManagedExecution) *bool {
		if v == nil {
			return nil
		}
		return v.Active
	}).(pulumi.BoolPtrOutput)
}

type StackSetOperationPreferences struct {
	// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureToleranceCount *int `pulumi:"failureToleranceCount"`
	// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureTolerancePercentage *int `pulumi:"failureTolerancePercentage"`
	// The maximum number of accounts in which to perform this operation at one time.
	MaxConcurrentCount *int `pulumi:"maxConcurrentCount"`
	// The maximum percentage of accounts in which to perform this operation at one time.
	MaxConcurrentPercentage *int `pulumi:"maxConcurrentPercentage"`
	// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
	RegionConcurrencyType *string `pulumi:"regionConcurrencyType"`
	// The order of the Regions in where you want to perform the stack operation.
	RegionOrders []string `pulumi:"regionOrders"`
}

// StackSetOperationPreferencesInput is an input type that accepts StackSetOperationPreferencesArgs and StackSetOperationPreferencesOutput values.
// You can construct a concrete instance of `StackSetOperationPreferencesInput` via:
//
//	StackSetOperationPreferencesArgs{...}
type StackSetOperationPreferencesInput interface {
	pulumi.Input

	ToStackSetOperationPreferencesOutput() StackSetOperationPreferencesOutput
	ToStackSetOperationPreferencesOutputWithContext(context.Context) StackSetOperationPreferencesOutput
}

type StackSetOperationPreferencesArgs struct {
	// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureToleranceCount pulumi.IntPtrInput `pulumi:"failureToleranceCount"`
	// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
	FailureTolerancePercentage pulumi.IntPtrInput `pulumi:"failureTolerancePercentage"`
	// The maximum number of accounts in which to perform this operation at one time.
	MaxConcurrentCount pulumi.IntPtrInput `pulumi:"maxConcurrentCount"`
	// The maximum percentage of accounts in which to perform this operation at one time.
	MaxConcurrentPercentage pulumi.IntPtrInput `pulumi:"maxConcurrentPercentage"`
	// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
	RegionConcurrencyType pulumi.StringPtrInput `pulumi:"regionConcurrencyType"`
	// The order of the Regions in where you want to perform the stack operation.
	RegionOrders pulumi.StringArrayInput `pulumi:"regionOrders"`
}

func (StackSetOperationPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetOperationPreferences)(nil)).Elem()
}

func (i StackSetOperationPreferencesArgs) ToStackSetOperationPreferencesOutput() StackSetOperationPreferencesOutput {
	return i.ToStackSetOperationPreferencesOutputWithContext(context.Background())
}

func (i StackSetOperationPreferencesArgs) ToStackSetOperationPreferencesOutputWithContext(ctx context.Context) StackSetOperationPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetOperationPreferencesOutput)
}

func (i StackSetOperationPreferencesArgs) ToStackSetOperationPreferencesPtrOutput() StackSetOperationPreferencesPtrOutput {
	return i.ToStackSetOperationPreferencesPtrOutputWithContext(context.Background())
}

func (i StackSetOperationPreferencesArgs) ToStackSetOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetOperationPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetOperationPreferencesOutput).ToStackSetOperationPreferencesPtrOutputWithContext(ctx)
}

// StackSetOperationPreferencesPtrInput is an input type that accepts StackSetOperationPreferencesArgs, StackSetOperationPreferencesPtr and StackSetOperationPreferencesPtrOutput values.
// You can construct a concrete instance of `StackSetOperationPreferencesPtrInput` via:
//
//	        StackSetOperationPreferencesArgs{...}
//
//	or:
//
//	        nil
type StackSetOperationPreferencesPtrInput interface {
	pulumi.Input

	ToStackSetOperationPreferencesPtrOutput() StackSetOperationPreferencesPtrOutput
	ToStackSetOperationPreferencesPtrOutputWithContext(context.Context) StackSetOperationPreferencesPtrOutput
}

type stackSetOperationPreferencesPtrType StackSetOperationPreferencesArgs

func StackSetOperationPreferencesPtr(v *StackSetOperationPreferencesArgs) StackSetOperationPreferencesPtrInput {
	return (*stackSetOperationPreferencesPtrType)(v)
}

func (*stackSetOperationPreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetOperationPreferences)(nil)).Elem()
}

func (i *stackSetOperationPreferencesPtrType) ToStackSetOperationPreferencesPtrOutput() StackSetOperationPreferencesPtrOutput {
	return i.ToStackSetOperationPreferencesPtrOutputWithContext(context.Background())
}

func (i *stackSetOperationPreferencesPtrType) ToStackSetOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetOperationPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetOperationPreferencesPtrOutput)
}

type StackSetOperationPreferencesOutput struct{ *pulumi.OutputState }

func (StackSetOperationPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetOperationPreferences)(nil)).Elem()
}

func (o StackSetOperationPreferencesOutput) ToStackSetOperationPreferencesOutput() StackSetOperationPreferencesOutput {
	return o
}

func (o StackSetOperationPreferencesOutput) ToStackSetOperationPreferencesOutputWithContext(ctx context.Context) StackSetOperationPreferencesOutput {
	return o
}

func (o StackSetOperationPreferencesOutput) ToStackSetOperationPreferencesPtrOutput() StackSetOperationPreferencesPtrOutput {
	return o.ToStackSetOperationPreferencesPtrOutputWithContext(context.Background())
}

func (o StackSetOperationPreferencesOutput) ToStackSetOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetOperationPreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackSetOperationPreferences) *StackSetOperationPreferences {
		return &v
	}).(StackSetOperationPreferencesPtrOutput)
}

// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetOperationPreferencesOutput) FailureToleranceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) *int { return v.FailureToleranceCount }).(pulumi.IntPtrOutput)
}

// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetOperationPreferencesOutput) FailureTolerancePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) *int { return v.FailureTolerancePercentage }).(pulumi.IntPtrOutput)
}

// The maximum number of accounts in which to perform this operation at one time.
func (o StackSetOperationPreferencesOutput) MaxConcurrentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) *int { return v.MaxConcurrentCount }).(pulumi.IntPtrOutput)
}

// The maximum percentage of accounts in which to perform this operation at one time.
func (o StackSetOperationPreferencesOutput) MaxConcurrentPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) *int { return v.MaxConcurrentPercentage }).(pulumi.IntPtrOutput)
}

// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
func (o StackSetOperationPreferencesOutput) RegionConcurrencyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) *string { return v.RegionConcurrencyType }).(pulumi.StringPtrOutput)
}

// The order of the Regions in where you want to perform the stack operation.
func (o StackSetOperationPreferencesOutput) RegionOrders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) []string { return v.RegionOrders }).(pulumi.StringArrayOutput)
}

type StackSetOperationPreferencesPtrOutput struct{ *pulumi.OutputState }

func (StackSetOperationPreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetOperationPreferences)(nil)).Elem()
}

func (o StackSetOperationPreferencesPtrOutput) ToStackSetOperationPreferencesPtrOutput() StackSetOperationPreferencesPtrOutput {
	return o
}

func (o StackSetOperationPreferencesPtrOutput) ToStackSetOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetOperationPreferencesPtrOutput {
	return o
}

func (o StackSetOperationPreferencesPtrOutput) Elem() StackSetOperationPreferencesOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) StackSetOperationPreferences {
		if v != nil {
			return *v
		}
		var ret StackSetOperationPreferences
		return ret
	}).(StackSetOperationPreferencesOutput)
}

// The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetOperationPreferencesPtrOutput) FailureToleranceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.FailureToleranceCount
	}).(pulumi.IntPtrOutput)
}

// The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
func (o StackSetOperationPreferencesPtrOutput) FailureTolerancePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.FailureTolerancePercentage
	}).(pulumi.IntPtrOutput)
}

// The maximum number of accounts in which to perform this operation at one time.
func (o StackSetOperationPreferencesPtrOutput) MaxConcurrentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentCount
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of accounts in which to perform this operation at one time.
func (o StackSetOperationPreferencesPtrOutput) MaxConcurrentPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentPercentage
	}).(pulumi.IntPtrOutput)
}

// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
func (o StackSetOperationPreferencesPtrOutput) RegionConcurrencyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) *string {
		if v == nil {
			return nil
		}
		return v.RegionConcurrencyType
	}).(pulumi.StringPtrOutput)
}

// The order of the Regions in where you want to perform the stack operation.
func (o StackSetOperationPreferencesPtrOutput) RegionOrders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) []string {
		if v == nil {
			return nil
		}
		return v.RegionOrders
	}).(pulumi.StringArrayOutput)
}

type GetCloudFormationTypeLoggingConfig struct {
	// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName string `pulumi:"logGroupName"`
	// ARN of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
	LogRoleArn string `pulumi:"logRoleArn"`
}

// GetCloudFormationTypeLoggingConfigInput is an input type that accepts GetCloudFormationTypeLoggingConfigArgs and GetCloudFormationTypeLoggingConfigOutput values.
// You can construct a concrete instance of `GetCloudFormationTypeLoggingConfigInput` via:
//
//	GetCloudFormationTypeLoggingConfigArgs{...}
type GetCloudFormationTypeLoggingConfigInput interface {
	pulumi.Input

	ToGetCloudFormationTypeLoggingConfigOutput() GetCloudFormationTypeLoggingConfigOutput
	ToGetCloudFormationTypeLoggingConfigOutputWithContext(context.Context) GetCloudFormationTypeLoggingConfigOutput
}

type GetCloudFormationTypeLoggingConfigArgs struct {
	// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName pulumi.StringInput `pulumi:"logGroupName"`
	// ARN of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
	LogRoleArn pulumi.StringInput `pulumi:"logRoleArn"`
}

func (GetCloudFormationTypeLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (i GetCloudFormationTypeLoggingConfigArgs) ToGetCloudFormationTypeLoggingConfigOutput() GetCloudFormationTypeLoggingConfigOutput {
	return i.ToGetCloudFormationTypeLoggingConfigOutputWithContext(context.Background())
}

func (i GetCloudFormationTypeLoggingConfigArgs) ToGetCloudFormationTypeLoggingConfigOutputWithContext(ctx context.Context) GetCloudFormationTypeLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCloudFormationTypeLoggingConfigOutput)
}

// GetCloudFormationTypeLoggingConfigArrayInput is an input type that accepts GetCloudFormationTypeLoggingConfigArray and GetCloudFormationTypeLoggingConfigArrayOutput values.
// You can construct a concrete instance of `GetCloudFormationTypeLoggingConfigArrayInput` via:
//
//	GetCloudFormationTypeLoggingConfigArray{ GetCloudFormationTypeLoggingConfigArgs{...} }
type GetCloudFormationTypeLoggingConfigArrayInput interface {
	pulumi.Input

	ToGetCloudFormationTypeLoggingConfigArrayOutput() GetCloudFormationTypeLoggingConfigArrayOutput
	ToGetCloudFormationTypeLoggingConfigArrayOutputWithContext(context.Context) GetCloudFormationTypeLoggingConfigArrayOutput
}

type GetCloudFormationTypeLoggingConfigArray []GetCloudFormationTypeLoggingConfigInput

func (GetCloudFormationTypeLoggingConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (i GetCloudFormationTypeLoggingConfigArray) ToGetCloudFormationTypeLoggingConfigArrayOutput() GetCloudFormationTypeLoggingConfigArrayOutput {
	return i.ToGetCloudFormationTypeLoggingConfigArrayOutputWithContext(context.Background())
}

func (i GetCloudFormationTypeLoggingConfigArray) ToGetCloudFormationTypeLoggingConfigArrayOutputWithContext(ctx context.Context) GetCloudFormationTypeLoggingConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCloudFormationTypeLoggingConfigArrayOutput)
}

type GetCloudFormationTypeLoggingConfigOutput struct{ *pulumi.OutputState }

func (GetCloudFormationTypeLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (o GetCloudFormationTypeLoggingConfigOutput) ToGetCloudFormationTypeLoggingConfigOutput() GetCloudFormationTypeLoggingConfigOutput {
	return o
}

func (o GetCloudFormationTypeLoggingConfigOutput) ToGetCloudFormationTypeLoggingConfigOutputWithContext(ctx context.Context) GetCloudFormationTypeLoggingConfigOutput {
	return o
}

// Name of the CloudWatch Log Group where CloudFormation sends error logging information when invoking the type's handlers.
func (o GetCloudFormationTypeLoggingConfigOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudFormationTypeLoggingConfig) string { return v.LogGroupName }).(pulumi.StringOutput)
}

// ARN of the IAM Role CloudFormation assumes when sending error logging information to CloudWatch Logs.
func (o GetCloudFormationTypeLoggingConfigOutput) LogRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudFormationTypeLoggingConfig) string { return v.LogRoleArn }).(pulumi.StringOutput)
}

type GetCloudFormationTypeLoggingConfigArrayOutput struct{ *pulumi.OutputState }

func (GetCloudFormationTypeLoggingConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCloudFormationTypeLoggingConfig)(nil)).Elem()
}

func (o GetCloudFormationTypeLoggingConfigArrayOutput) ToGetCloudFormationTypeLoggingConfigArrayOutput() GetCloudFormationTypeLoggingConfigArrayOutput {
	return o
}

func (o GetCloudFormationTypeLoggingConfigArrayOutput) ToGetCloudFormationTypeLoggingConfigArrayOutputWithContext(ctx context.Context) GetCloudFormationTypeLoggingConfigArrayOutput {
	return o
}

func (o GetCloudFormationTypeLoggingConfigArrayOutput) Index(i pulumi.IntInput) GetCloudFormationTypeLoggingConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCloudFormationTypeLoggingConfig {
		return vs[0].([]GetCloudFormationTypeLoggingConfig)[vs[1].(int)]
	}).(GetCloudFormationTypeLoggingConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudFormationTypeLoggingConfigInput)(nil)).Elem(), CloudFormationTypeLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudFormationTypeLoggingConfigPtrInput)(nil)).Elem(), CloudFormationTypeLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackInstancesDeploymentTargetsInput)(nil)).Elem(), StackInstancesDeploymentTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackInstancesDeploymentTargetsPtrInput)(nil)).Elem(), StackInstancesDeploymentTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackInstancesOperationPreferencesInput)(nil)).Elem(), StackInstancesOperationPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackInstancesOperationPreferencesPtrInput)(nil)).Elem(), StackInstancesOperationPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackInstancesStackInstanceSummaryInput)(nil)).Elem(), StackInstancesStackInstanceSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackInstancesStackInstanceSummaryArrayInput)(nil)).Elem(), StackInstancesStackInstanceSummaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetAutoDeploymentInput)(nil)).Elem(), StackSetAutoDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetAutoDeploymentPtrInput)(nil)).Elem(), StackSetAutoDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetInstanceDeploymentTargetsInput)(nil)).Elem(), StackSetInstanceDeploymentTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetInstanceDeploymentTargetsPtrInput)(nil)).Elem(), StackSetInstanceDeploymentTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetInstanceOperationPreferencesInput)(nil)).Elem(), StackSetInstanceOperationPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetInstanceOperationPreferencesPtrInput)(nil)).Elem(), StackSetInstanceOperationPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetInstanceStackInstanceSummaryInput)(nil)).Elem(), StackSetInstanceStackInstanceSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetInstanceStackInstanceSummaryArrayInput)(nil)).Elem(), StackSetInstanceStackInstanceSummaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetManagedExecutionInput)(nil)).Elem(), StackSetManagedExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetManagedExecutionPtrInput)(nil)).Elem(), StackSetManagedExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetOperationPreferencesInput)(nil)).Elem(), StackSetOperationPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetOperationPreferencesPtrInput)(nil)).Elem(), StackSetOperationPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCloudFormationTypeLoggingConfigInput)(nil)).Elem(), GetCloudFormationTypeLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCloudFormationTypeLoggingConfigArrayInput)(nil)).Elem(), GetCloudFormationTypeLoggingConfigArray{})
	pulumi.RegisterOutputType(CloudFormationTypeLoggingConfigOutput{})
	pulumi.RegisterOutputType(CloudFormationTypeLoggingConfigPtrOutput{})
	pulumi.RegisterOutputType(StackInstancesDeploymentTargetsOutput{})
	pulumi.RegisterOutputType(StackInstancesDeploymentTargetsPtrOutput{})
	pulumi.RegisterOutputType(StackInstancesOperationPreferencesOutput{})
	pulumi.RegisterOutputType(StackInstancesOperationPreferencesPtrOutput{})
	pulumi.RegisterOutputType(StackInstancesStackInstanceSummaryOutput{})
	pulumi.RegisterOutputType(StackInstancesStackInstanceSummaryArrayOutput{})
	pulumi.RegisterOutputType(StackSetAutoDeploymentOutput{})
	pulumi.RegisterOutputType(StackSetAutoDeploymentPtrOutput{})
	pulumi.RegisterOutputType(StackSetInstanceDeploymentTargetsOutput{})
	pulumi.RegisterOutputType(StackSetInstanceDeploymentTargetsPtrOutput{})
	pulumi.RegisterOutputType(StackSetInstanceOperationPreferencesOutput{})
	pulumi.RegisterOutputType(StackSetInstanceOperationPreferencesPtrOutput{})
	pulumi.RegisterOutputType(StackSetInstanceStackInstanceSummaryOutput{})
	pulumi.RegisterOutputType(StackSetInstanceStackInstanceSummaryArrayOutput{})
	pulumi.RegisterOutputType(StackSetManagedExecutionOutput{})
	pulumi.RegisterOutputType(StackSetManagedExecutionPtrOutput{})
	pulumi.RegisterOutputType(StackSetOperationPreferencesOutput{})
	pulumi.RegisterOutputType(StackSetOperationPreferencesPtrOutput{})
	pulumi.RegisterOutputType(GetCloudFormationTypeLoggingConfigOutput{})
	pulumi.RegisterOutputType(GetCloudFormationTypeLoggingConfigArrayOutput{})
}
