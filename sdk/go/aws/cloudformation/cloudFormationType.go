// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudFormationType struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput                      `pulumi:"arn"`
	DefaultVersionId     pulumi.StringOutput                      `pulumi:"defaultVersionId"`
	DeprecatedStatus     pulumi.StringOutput                      `pulumi:"deprecatedStatus"`
	Description          pulumi.StringOutput                      `pulumi:"description"`
	DocumentationUrl     pulumi.StringOutput                      `pulumi:"documentationUrl"`
	ExecutionRoleArn     pulumi.StringPtrOutput                   `pulumi:"executionRoleArn"`
	IsDefaultVersion     pulumi.BoolOutput                        `pulumi:"isDefaultVersion"`
	LoggingConfig        CloudFormationTypeLoggingConfigPtrOutput `pulumi:"loggingConfig"`
	ProvisioningType     pulumi.StringOutput                      `pulumi:"provisioningType"`
	Schema               pulumi.StringOutput                      `pulumi:"schema"`
	SchemaHandlerPackage pulumi.StringOutput                      `pulumi:"schemaHandlerPackage"`
	SourceUrl            pulumi.StringOutput                      `pulumi:"sourceUrl"`
	Type                 pulumi.StringOutput                      `pulumi:"type"`
	TypeArn              pulumi.StringOutput                      `pulumi:"typeArn"`
	TypeName             pulumi.StringOutput                      `pulumi:"typeName"`
	VersionId            pulumi.StringOutput                      `pulumi:"versionId"`
	Visibility           pulumi.StringOutput                      `pulumi:"visibility"`
}

// NewCloudFormationType registers a new resource with the given unique name, arguments, and options.
func NewCloudFormationType(ctx *pulumi.Context,
	name string, args *CloudFormationTypeArgs, opts ...pulumi.ResourceOption) (*CloudFormationType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SchemaHandlerPackage == nil {
		return nil, errors.New("invalid value for required argument 'SchemaHandlerPackage'")
	}
	if args.TypeName == nil {
		return nil, errors.New("invalid value for required argument 'TypeName'")
	}
	var resource CloudFormationType
	err := ctx.RegisterResource("aws:cloudformation/cloudFormationType:CloudFormationType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudFormationType gets an existing CloudFormationType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudFormationType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudFormationTypeState, opts ...pulumi.ResourceOption) (*CloudFormationType, error) {
	var resource CloudFormationType
	err := ctx.ReadResource("aws:cloudformation/cloudFormationType:CloudFormationType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudFormationType resources.
type cloudFormationTypeState struct {
	Arn                  *string                          `pulumi:"arn"`
	DefaultVersionId     *string                          `pulumi:"defaultVersionId"`
	DeprecatedStatus     *string                          `pulumi:"deprecatedStatus"`
	Description          *string                          `pulumi:"description"`
	DocumentationUrl     *string                          `pulumi:"documentationUrl"`
	ExecutionRoleArn     *string                          `pulumi:"executionRoleArn"`
	IsDefaultVersion     *bool                            `pulumi:"isDefaultVersion"`
	LoggingConfig        *CloudFormationTypeLoggingConfig `pulumi:"loggingConfig"`
	ProvisioningType     *string                          `pulumi:"provisioningType"`
	Schema               *string                          `pulumi:"schema"`
	SchemaHandlerPackage *string                          `pulumi:"schemaHandlerPackage"`
	SourceUrl            *string                          `pulumi:"sourceUrl"`
	Type                 *string                          `pulumi:"type"`
	TypeArn              *string                          `pulumi:"typeArn"`
	TypeName             *string                          `pulumi:"typeName"`
	VersionId            *string                          `pulumi:"versionId"`
	Visibility           *string                          `pulumi:"visibility"`
}

type CloudFormationTypeState struct {
	Arn                  pulumi.StringPtrInput
	DefaultVersionId     pulumi.StringPtrInput
	DeprecatedStatus     pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	DocumentationUrl     pulumi.StringPtrInput
	ExecutionRoleArn     pulumi.StringPtrInput
	IsDefaultVersion     pulumi.BoolPtrInput
	LoggingConfig        CloudFormationTypeLoggingConfigPtrInput
	ProvisioningType     pulumi.StringPtrInput
	Schema               pulumi.StringPtrInput
	SchemaHandlerPackage pulumi.StringPtrInput
	SourceUrl            pulumi.StringPtrInput
	Type                 pulumi.StringPtrInput
	TypeArn              pulumi.StringPtrInput
	TypeName             pulumi.StringPtrInput
	VersionId            pulumi.StringPtrInput
	Visibility           pulumi.StringPtrInput
}

func (CloudFormationTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudFormationTypeState)(nil)).Elem()
}

type cloudFormationTypeArgs struct {
	ExecutionRoleArn     *string                          `pulumi:"executionRoleArn"`
	LoggingConfig        *CloudFormationTypeLoggingConfig `pulumi:"loggingConfig"`
	SchemaHandlerPackage string                           `pulumi:"schemaHandlerPackage"`
	Type                 *string                          `pulumi:"type"`
	TypeName             string                           `pulumi:"typeName"`
}

// The set of arguments for constructing a CloudFormationType resource.
type CloudFormationTypeArgs struct {
	ExecutionRoleArn     pulumi.StringPtrInput
	LoggingConfig        CloudFormationTypeLoggingConfigPtrInput
	SchemaHandlerPackage pulumi.StringInput
	Type                 pulumi.StringPtrInput
	TypeName             pulumi.StringInput
}

func (CloudFormationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudFormationTypeArgs)(nil)).Elem()
}

type CloudFormationTypeInput interface {
	pulumi.Input

	ToCloudFormationTypeOutput() CloudFormationTypeOutput
	ToCloudFormationTypeOutputWithContext(ctx context.Context) CloudFormationTypeOutput
}

func (*CloudFormationType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudFormationType)(nil)).Elem()
}

func (i *CloudFormationType) ToCloudFormationTypeOutput() CloudFormationTypeOutput {
	return i.ToCloudFormationTypeOutputWithContext(context.Background())
}

func (i *CloudFormationType) ToCloudFormationTypeOutputWithContext(ctx context.Context) CloudFormationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudFormationTypeOutput)
}

// CloudFormationTypeArrayInput is an input type that accepts CloudFormationTypeArray and CloudFormationTypeArrayOutput values.
// You can construct a concrete instance of `CloudFormationTypeArrayInput` via:
//
//	CloudFormationTypeArray{ CloudFormationTypeArgs{...} }
type CloudFormationTypeArrayInput interface {
	pulumi.Input

	ToCloudFormationTypeArrayOutput() CloudFormationTypeArrayOutput
	ToCloudFormationTypeArrayOutputWithContext(context.Context) CloudFormationTypeArrayOutput
}

type CloudFormationTypeArray []CloudFormationTypeInput

func (CloudFormationTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudFormationType)(nil)).Elem()
}

func (i CloudFormationTypeArray) ToCloudFormationTypeArrayOutput() CloudFormationTypeArrayOutput {
	return i.ToCloudFormationTypeArrayOutputWithContext(context.Background())
}

func (i CloudFormationTypeArray) ToCloudFormationTypeArrayOutputWithContext(ctx context.Context) CloudFormationTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudFormationTypeArrayOutput)
}

// CloudFormationTypeMapInput is an input type that accepts CloudFormationTypeMap and CloudFormationTypeMapOutput values.
// You can construct a concrete instance of `CloudFormationTypeMapInput` via:
//
//	CloudFormationTypeMap{ "key": CloudFormationTypeArgs{...} }
type CloudFormationTypeMapInput interface {
	pulumi.Input

	ToCloudFormationTypeMapOutput() CloudFormationTypeMapOutput
	ToCloudFormationTypeMapOutputWithContext(context.Context) CloudFormationTypeMapOutput
}

type CloudFormationTypeMap map[string]CloudFormationTypeInput

func (CloudFormationTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudFormationType)(nil)).Elem()
}

func (i CloudFormationTypeMap) ToCloudFormationTypeMapOutput() CloudFormationTypeMapOutput {
	return i.ToCloudFormationTypeMapOutputWithContext(context.Background())
}

func (i CloudFormationTypeMap) ToCloudFormationTypeMapOutputWithContext(ctx context.Context) CloudFormationTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudFormationTypeMapOutput)
}

type CloudFormationTypeOutput struct{ *pulumi.OutputState }

func (CloudFormationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudFormationType)(nil)).Elem()
}

func (o CloudFormationTypeOutput) ToCloudFormationTypeOutput() CloudFormationTypeOutput {
	return o
}

func (o CloudFormationTypeOutput) ToCloudFormationTypeOutputWithContext(ctx context.Context) CloudFormationTypeOutput {
	return o
}

func (o CloudFormationTypeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) DefaultVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.DefaultVersionId }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) DeprecatedStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.DeprecatedStatus }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) DocumentationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.DocumentationUrl }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringPtrOutput { return v.ExecutionRoleArn }).(pulumi.StringPtrOutput)
}

func (o CloudFormationTypeOutput) IsDefaultVersion() pulumi.BoolOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.BoolOutput { return v.IsDefaultVersion }).(pulumi.BoolOutput)
}

func (o CloudFormationTypeOutput) LoggingConfig() CloudFormationTypeLoggingConfigPtrOutput {
	return o.ApplyT(func(v *CloudFormationType) CloudFormationTypeLoggingConfigPtrOutput { return v.LoggingConfig }).(CloudFormationTypeLoggingConfigPtrOutput)
}

func (o CloudFormationTypeOutput) ProvisioningType() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.ProvisioningType }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) SchemaHandlerPackage() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.SchemaHandlerPackage }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) SourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.SourceUrl }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) TypeArn() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.TypeArn }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) TypeName() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.TypeName }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

func (o CloudFormationTypeOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationType) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type CloudFormationTypeArrayOutput struct{ *pulumi.OutputState }

func (CloudFormationTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudFormationType)(nil)).Elem()
}

func (o CloudFormationTypeArrayOutput) ToCloudFormationTypeArrayOutput() CloudFormationTypeArrayOutput {
	return o
}

func (o CloudFormationTypeArrayOutput) ToCloudFormationTypeArrayOutputWithContext(ctx context.Context) CloudFormationTypeArrayOutput {
	return o
}

func (o CloudFormationTypeArrayOutput) Index(i pulumi.IntInput) CloudFormationTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudFormationType {
		return vs[0].([]*CloudFormationType)[vs[1].(int)]
	}).(CloudFormationTypeOutput)
}

type CloudFormationTypeMapOutput struct{ *pulumi.OutputState }

func (CloudFormationTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudFormationType)(nil)).Elem()
}

func (o CloudFormationTypeMapOutput) ToCloudFormationTypeMapOutput() CloudFormationTypeMapOutput {
	return o
}

func (o CloudFormationTypeMapOutput) ToCloudFormationTypeMapOutputWithContext(ctx context.Context) CloudFormationTypeMapOutput {
	return o
}

func (o CloudFormationTypeMapOutput) MapIndex(k pulumi.StringInput) CloudFormationTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudFormationType {
		return vs[0].(map[string]*CloudFormationType)[vs[1].(string)]
	}).(CloudFormationTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudFormationTypeInput)(nil)).Elem(), &CloudFormationType{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudFormationTypeArrayInput)(nil)).Elem(), CloudFormationTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudFormationTypeMapInput)(nil)).Elem(), CloudFormationTypeMap{})
	pulumi.RegisterOutputType(CloudFormationTypeOutput{})
	pulumi.RegisterOutputType(CloudFormationTypeArrayOutput{})
	pulumi.RegisterOutputType(CloudFormationTypeMapOutput{})
}
