// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StackSet struct {
	pulumi.CustomResourceState

	AdministrationRoleArn pulumi.StringPtrOutput                `pulumi:"administrationRoleArn"`
	Arn                   pulumi.StringOutput                   `pulumi:"arn"`
	AutoDeployment        StackSetAutoDeploymentPtrOutput       `pulumi:"autoDeployment"`
	CallAs                pulumi.StringPtrOutput                `pulumi:"callAs"`
	Capabilities          pulumi.StringArrayOutput              `pulumi:"capabilities"`
	Description           pulumi.StringPtrOutput                `pulumi:"description"`
	ExecutionRoleName     pulumi.StringOutput                   `pulumi:"executionRoleName"`
	Name                  pulumi.StringOutput                   `pulumi:"name"`
	OperationPreferences  StackSetOperationPreferencesPtrOutput `pulumi:"operationPreferences"`
	Parameters            pulumi.StringMapOutput                `pulumi:"parameters"`
	PermissionModel       pulumi.StringPtrOutput                `pulumi:"permissionModel"`
	StackSetId            pulumi.StringOutput                   `pulumi:"stackSetId"`
	Tags                  pulumi.StringMapOutput                `pulumi:"tags"`
	TagsAll               pulumi.StringMapOutput                `pulumi:"tagsAll"`
	TemplateBody          pulumi.StringOutput                   `pulumi:"templateBody"`
	TemplateUrl           pulumi.StringPtrOutput                `pulumi:"templateUrl"`
}

// NewStackSet registers a new resource with the given unique name, arguments, and options.
func NewStackSet(ctx *pulumi.Context,
	name string, args *StackSetArgs, opts ...pulumi.ResourceOption) (*StackSet, error) {
	if args == nil {
		args = &StackSetArgs{}
	}

	var resource StackSet
	err := ctx.RegisterResource("aws:cloudformation/stackSet:StackSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackSet gets an existing StackSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackSetState, opts ...pulumi.ResourceOption) (*StackSet, error) {
	var resource StackSet
	err := ctx.ReadResource("aws:cloudformation/stackSet:StackSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackSet resources.
type stackSetState struct {
	AdministrationRoleArn *string                       `pulumi:"administrationRoleArn"`
	Arn                   *string                       `pulumi:"arn"`
	AutoDeployment        *StackSetAutoDeployment       `pulumi:"autoDeployment"`
	CallAs                *string                       `pulumi:"callAs"`
	Capabilities          []string                      `pulumi:"capabilities"`
	Description           *string                       `pulumi:"description"`
	ExecutionRoleName     *string                       `pulumi:"executionRoleName"`
	Name                  *string                       `pulumi:"name"`
	OperationPreferences  *StackSetOperationPreferences `pulumi:"operationPreferences"`
	Parameters            map[string]string             `pulumi:"parameters"`
	PermissionModel       *string                       `pulumi:"permissionModel"`
	StackSetId            *string                       `pulumi:"stackSetId"`
	Tags                  map[string]string             `pulumi:"tags"`
	TagsAll               map[string]string             `pulumi:"tagsAll"`
	TemplateBody          *string                       `pulumi:"templateBody"`
	TemplateUrl           *string                       `pulumi:"templateUrl"`
}

type StackSetState struct {
	AdministrationRoleArn pulumi.StringPtrInput
	Arn                   pulumi.StringPtrInput
	AutoDeployment        StackSetAutoDeploymentPtrInput
	CallAs                pulumi.StringPtrInput
	Capabilities          pulumi.StringArrayInput
	Description           pulumi.StringPtrInput
	ExecutionRoleName     pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	OperationPreferences  StackSetOperationPreferencesPtrInput
	Parameters            pulumi.StringMapInput
	PermissionModel       pulumi.StringPtrInput
	StackSetId            pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
	TagsAll               pulumi.StringMapInput
	TemplateBody          pulumi.StringPtrInput
	TemplateUrl           pulumi.StringPtrInput
}

func (StackSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackSetState)(nil)).Elem()
}

type stackSetArgs struct {
	AdministrationRoleArn *string                       `pulumi:"administrationRoleArn"`
	AutoDeployment        *StackSetAutoDeployment       `pulumi:"autoDeployment"`
	CallAs                *string                       `pulumi:"callAs"`
	Capabilities          []string                      `pulumi:"capabilities"`
	Description           *string                       `pulumi:"description"`
	ExecutionRoleName     *string                       `pulumi:"executionRoleName"`
	Name                  *string                       `pulumi:"name"`
	OperationPreferences  *StackSetOperationPreferences `pulumi:"operationPreferences"`
	Parameters            map[string]string             `pulumi:"parameters"`
	PermissionModel       *string                       `pulumi:"permissionModel"`
	Tags                  map[string]string             `pulumi:"tags"`
	TemplateBody          *string                       `pulumi:"templateBody"`
	TemplateUrl           *string                       `pulumi:"templateUrl"`
}

// The set of arguments for constructing a StackSet resource.
type StackSetArgs struct {
	AdministrationRoleArn pulumi.StringPtrInput
	AutoDeployment        StackSetAutoDeploymentPtrInput
	CallAs                pulumi.StringPtrInput
	Capabilities          pulumi.StringArrayInput
	Description           pulumi.StringPtrInput
	ExecutionRoleName     pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	OperationPreferences  StackSetOperationPreferencesPtrInput
	Parameters            pulumi.StringMapInput
	PermissionModel       pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
	TemplateBody          pulumi.StringPtrInput
	TemplateUrl           pulumi.StringPtrInput
}

func (StackSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackSetArgs)(nil)).Elem()
}

type StackSetInput interface {
	pulumi.Input

	ToStackSetOutput() StackSetOutput
	ToStackSetOutputWithContext(ctx context.Context) StackSetOutput
}

func (*StackSet) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSet)(nil)).Elem()
}

func (i *StackSet) ToStackSetOutput() StackSetOutput {
	return i.ToStackSetOutputWithContext(context.Background())
}

func (i *StackSet) ToStackSetOutputWithContext(ctx context.Context) StackSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetOutput)
}

// StackSetArrayInput is an input type that accepts StackSetArray and StackSetArrayOutput values.
// You can construct a concrete instance of `StackSetArrayInput` via:
//
//	StackSetArray{ StackSetArgs{...} }
type StackSetArrayInput interface {
	pulumi.Input

	ToStackSetArrayOutput() StackSetArrayOutput
	ToStackSetArrayOutputWithContext(context.Context) StackSetArrayOutput
}

type StackSetArray []StackSetInput

func (StackSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackSet)(nil)).Elem()
}

func (i StackSetArray) ToStackSetArrayOutput() StackSetArrayOutput {
	return i.ToStackSetArrayOutputWithContext(context.Background())
}

func (i StackSetArray) ToStackSetArrayOutputWithContext(ctx context.Context) StackSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetArrayOutput)
}

// StackSetMapInput is an input type that accepts StackSetMap and StackSetMapOutput values.
// You can construct a concrete instance of `StackSetMapInput` via:
//
//	StackSetMap{ "key": StackSetArgs{...} }
type StackSetMapInput interface {
	pulumi.Input

	ToStackSetMapOutput() StackSetMapOutput
	ToStackSetMapOutputWithContext(context.Context) StackSetMapOutput
}

type StackSetMap map[string]StackSetInput

func (StackSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackSet)(nil)).Elem()
}

func (i StackSetMap) ToStackSetMapOutput() StackSetMapOutput {
	return i.ToStackSetMapOutputWithContext(context.Background())
}

func (i StackSetMap) ToStackSetMapOutputWithContext(ctx context.Context) StackSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetMapOutput)
}

type StackSetOutput struct{ *pulumi.OutputState }

func (StackSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSet)(nil)).Elem()
}

func (o StackSetOutput) ToStackSetOutput() StackSetOutput {
	return o
}

func (o StackSetOutput) ToStackSetOutputWithContext(ctx context.Context) StackSetOutput {
	return o
}

func (o StackSetOutput) AdministrationRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringPtrOutput { return v.AdministrationRoleArn }).(pulumi.StringPtrOutput)
}

func (o StackSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o StackSetOutput) AutoDeployment() StackSetAutoDeploymentPtrOutput {
	return o.ApplyT(func(v *StackSet) StackSetAutoDeploymentPtrOutput { return v.AutoDeployment }).(StackSetAutoDeploymentPtrOutput)
}

func (o StackSetOutput) CallAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringPtrOutput { return v.CallAs }).(pulumi.StringPtrOutput)
}

func (o StackSetOutput) Capabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringArrayOutput { return v.Capabilities }).(pulumi.StringArrayOutput)
}

func (o StackSetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o StackSetOutput) ExecutionRoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringOutput { return v.ExecutionRoleName }).(pulumi.StringOutput)
}

func (o StackSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o StackSetOutput) OperationPreferences() StackSetOperationPreferencesPtrOutput {
	return o.ApplyT(func(v *StackSet) StackSetOperationPreferencesPtrOutput { return v.OperationPreferences }).(StackSetOperationPreferencesPtrOutput)
}

func (o StackSetOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

func (o StackSetOutput) PermissionModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringPtrOutput { return v.PermissionModel }).(pulumi.StringPtrOutput)
}

func (o StackSetOutput) StackSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringOutput { return v.StackSetId }).(pulumi.StringOutput)
}

func (o StackSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o StackSetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o StackSetOutput) TemplateBody() pulumi.StringOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringOutput { return v.TemplateBody }).(pulumi.StringOutput)
}

func (o StackSetOutput) TemplateUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackSet) pulumi.StringPtrOutput { return v.TemplateUrl }).(pulumi.StringPtrOutput)
}

type StackSetArrayOutput struct{ *pulumi.OutputState }

func (StackSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackSet)(nil)).Elem()
}

func (o StackSetArrayOutput) ToStackSetArrayOutput() StackSetArrayOutput {
	return o
}

func (o StackSetArrayOutput) ToStackSetArrayOutputWithContext(ctx context.Context) StackSetArrayOutput {
	return o
}

func (o StackSetArrayOutput) Index(i pulumi.IntInput) StackSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StackSet {
		return vs[0].([]*StackSet)[vs[1].(int)]
	}).(StackSetOutput)
}

type StackSetMapOutput struct{ *pulumi.OutputState }

func (StackSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackSet)(nil)).Elem()
}

func (o StackSetMapOutput) ToStackSetMapOutput() StackSetMapOutput {
	return o
}

func (o StackSetMapOutput) ToStackSetMapOutputWithContext(ctx context.Context) StackSetMapOutput {
	return o
}

func (o StackSetMapOutput) MapIndex(k pulumi.StringInput) StackSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StackSet {
		return vs[0].(map[string]*StackSet)[vs[1].(string)]
	}).(StackSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetInput)(nil)).Elem(), &StackSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetArrayInput)(nil)).Elem(), StackSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetMapInput)(nil)).Elem(), StackSetMap{})
	pulumi.RegisterOutputType(StackSetOutput{})
	pulumi.RegisterOutputType(StackSetArrayOutput{})
	pulumi.RegisterOutputType(StackSetMapOutput{})
}
