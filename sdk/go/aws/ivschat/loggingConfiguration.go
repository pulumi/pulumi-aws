// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivschat

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoggingConfiguration struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput                                   `pulumi:"arn"`
	DestinationConfiguration LoggingConfigurationDestinationConfigurationPtrOutput `pulumi:"destinationConfiguration"`
	Name                     pulumi.StringOutput                                   `pulumi:"name"`
	State                    pulumi.StringOutput                                   `pulumi:"state"`
	Tags                     pulumi.StringMapOutput                                `pulumi:"tags"`
	TagsAll                  pulumi.StringMapOutput                                `pulumi:"tagsAll"`
}

// NewLoggingConfiguration registers a new resource with the given unique name, arguments, and options.
func NewLoggingConfiguration(ctx *pulumi.Context,
	name string, args *LoggingConfigurationArgs, opts ...pulumi.ResourceOption) (*LoggingConfiguration, error) {
	if args == nil {
		args = &LoggingConfigurationArgs{}
	}

	var resource LoggingConfiguration
	err := ctx.RegisterResource("aws:ivschat/loggingConfiguration:LoggingConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingConfiguration gets an existing LoggingConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingConfigurationState, opts ...pulumi.ResourceOption) (*LoggingConfiguration, error) {
	var resource LoggingConfiguration
	err := ctx.ReadResource("aws:ivschat/loggingConfiguration:LoggingConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingConfiguration resources.
type loggingConfigurationState struct {
	Arn                      *string                                       `pulumi:"arn"`
	DestinationConfiguration *LoggingConfigurationDestinationConfiguration `pulumi:"destinationConfiguration"`
	Name                     *string                                       `pulumi:"name"`
	State                    *string                                       `pulumi:"state"`
	Tags                     map[string]string                             `pulumi:"tags"`
	TagsAll                  map[string]string                             `pulumi:"tagsAll"`
}

type LoggingConfigurationState struct {
	Arn                      pulumi.StringPtrInput
	DestinationConfiguration LoggingConfigurationDestinationConfigurationPtrInput
	Name                     pulumi.StringPtrInput
	State                    pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
	TagsAll                  pulumi.StringMapInput
}

func (LoggingConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingConfigurationState)(nil)).Elem()
}

type loggingConfigurationArgs struct {
	DestinationConfiguration *LoggingConfigurationDestinationConfiguration `pulumi:"destinationConfiguration"`
	Name                     *string                                       `pulumi:"name"`
	Tags                     map[string]string                             `pulumi:"tags"`
}

// The set of arguments for constructing a LoggingConfiguration resource.
type LoggingConfigurationArgs struct {
	DestinationConfiguration LoggingConfigurationDestinationConfigurationPtrInput
	Name                     pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
}

func (LoggingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingConfigurationArgs)(nil)).Elem()
}

type LoggingConfigurationInput interface {
	pulumi.Input

	ToLoggingConfigurationOutput() LoggingConfigurationOutput
	ToLoggingConfigurationOutputWithContext(ctx context.Context) LoggingConfigurationOutput
}

func (*LoggingConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingConfiguration)(nil)).Elem()
}

func (i *LoggingConfiguration) ToLoggingConfigurationOutput() LoggingConfigurationOutput {
	return i.ToLoggingConfigurationOutputWithContext(context.Background())
}

func (i *LoggingConfiguration) ToLoggingConfigurationOutputWithContext(ctx context.Context) LoggingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingConfigurationOutput)
}

// LoggingConfigurationArrayInput is an input type that accepts LoggingConfigurationArray and LoggingConfigurationArrayOutput values.
// You can construct a concrete instance of `LoggingConfigurationArrayInput` via:
//
//	LoggingConfigurationArray{ LoggingConfigurationArgs{...} }
type LoggingConfigurationArrayInput interface {
	pulumi.Input

	ToLoggingConfigurationArrayOutput() LoggingConfigurationArrayOutput
	ToLoggingConfigurationArrayOutputWithContext(context.Context) LoggingConfigurationArrayOutput
}

type LoggingConfigurationArray []LoggingConfigurationInput

func (LoggingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingConfiguration)(nil)).Elem()
}

func (i LoggingConfigurationArray) ToLoggingConfigurationArrayOutput() LoggingConfigurationArrayOutput {
	return i.ToLoggingConfigurationArrayOutputWithContext(context.Background())
}

func (i LoggingConfigurationArray) ToLoggingConfigurationArrayOutputWithContext(ctx context.Context) LoggingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingConfigurationArrayOutput)
}

// LoggingConfigurationMapInput is an input type that accepts LoggingConfigurationMap and LoggingConfigurationMapOutput values.
// You can construct a concrete instance of `LoggingConfigurationMapInput` via:
//
//	LoggingConfigurationMap{ "key": LoggingConfigurationArgs{...} }
type LoggingConfigurationMapInput interface {
	pulumi.Input

	ToLoggingConfigurationMapOutput() LoggingConfigurationMapOutput
	ToLoggingConfigurationMapOutputWithContext(context.Context) LoggingConfigurationMapOutput
}

type LoggingConfigurationMap map[string]LoggingConfigurationInput

func (LoggingConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingConfiguration)(nil)).Elem()
}

func (i LoggingConfigurationMap) ToLoggingConfigurationMapOutput() LoggingConfigurationMapOutput {
	return i.ToLoggingConfigurationMapOutputWithContext(context.Background())
}

func (i LoggingConfigurationMap) ToLoggingConfigurationMapOutputWithContext(ctx context.Context) LoggingConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingConfigurationMapOutput)
}

type LoggingConfigurationOutput struct{ *pulumi.OutputState }

func (LoggingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingConfiguration)(nil)).Elem()
}

func (o LoggingConfigurationOutput) ToLoggingConfigurationOutput() LoggingConfigurationOutput {
	return o
}

func (o LoggingConfigurationOutput) ToLoggingConfigurationOutputWithContext(ctx context.Context) LoggingConfigurationOutput {
	return o
}

func (o LoggingConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LoggingConfigurationOutput) DestinationConfiguration() LoggingConfigurationDestinationConfigurationPtrOutput {
	return o.ApplyT(func(v *LoggingConfiguration) LoggingConfigurationDestinationConfigurationPtrOutput {
		return v.DestinationConfiguration
	}).(LoggingConfigurationDestinationConfigurationPtrOutput)
}

func (o LoggingConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LoggingConfigurationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingConfiguration) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o LoggingConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoggingConfiguration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LoggingConfigurationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoggingConfiguration) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LoggingConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LoggingConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingConfiguration)(nil)).Elem()
}

func (o LoggingConfigurationArrayOutput) ToLoggingConfigurationArrayOutput() LoggingConfigurationArrayOutput {
	return o
}

func (o LoggingConfigurationArrayOutput) ToLoggingConfigurationArrayOutputWithContext(ctx context.Context) LoggingConfigurationArrayOutput {
	return o
}

func (o LoggingConfigurationArrayOutput) Index(i pulumi.IntInput) LoggingConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoggingConfiguration {
		return vs[0].([]*LoggingConfiguration)[vs[1].(int)]
	}).(LoggingConfigurationOutput)
}

type LoggingConfigurationMapOutput struct{ *pulumi.OutputState }

func (LoggingConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingConfiguration)(nil)).Elem()
}

func (o LoggingConfigurationMapOutput) ToLoggingConfigurationMapOutput() LoggingConfigurationMapOutput {
	return o
}

func (o LoggingConfigurationMapOutput) ToLoggingConfigurationMapOutputWithContext(ctx context.Context) LoggingConfigurationMapOutput {
	return o
}

func (o LoggingConfigurationMapOutput) MapIndex(k pulumi.StringInput) LoggingConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoggingConfiguration {
		return vs[0].(map[string]*LoggingConfiguration)[vs[1].(string)]
	}).(LoggingConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingConfigurationInput)(nil)).Elem(), &LoggingConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingConfigurationArrayInput)(nil)).Elem(), LoggingConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingConfigurationMapInput)(nil)).Elem(), LoggingConfigurationMap{})
	pulumi.RegisterOutputType(LoggingConfigurationOutput{})
	pulumi.RegisterOutputType(LoggingConfigurationArrayOutput{})
	pulumi.RegisterOutputType(LoggingConfigurationMapOutput{})
}
