// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivschat

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS IVS (Interactive Video) Chat Room.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ivschat"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ivschat.NewRoom(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Usage with Logging Configuration to S3 Bucket
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ivschat"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleBucketV2, err := s3.NewBucketV2(ctx, "exampleBucketV2", &s3.BucketV2Args{
//				BucketPrefix: pulumi.String("tf-ivschat-logging-bucket-"),
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLoggingConfiguration, err := ivschat.NewLoggingConfiguration(ctx, "exampleLoggingConfiguration", &ivschat.LoggingConfigurationArgs{
//				DestinationConfiguration: &ivschat.LoggingConfigurationDestinationConfigurationArgs{
//					S3: &ivschat.LoggingConfigurationDestinationConfigurationS3Args{
//						BucketName: exampleBucketV2.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ivschat.NewRoom(ctx, "exampleRoom", &ivschat.RoomArgs{
//				LoggingConfigurationIdentifiers: pulumi.StringArray{
//					exampleLoggingConfiguration.Arn,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import IVS (Interactive Video) Chat Room using the ARN. For example:
//
// ```sh
//
//	$ pulumi import aws:ivschat/room:Room example arn:aws:ivschat:us-west-2:326937407773:room/GoXEXyB4VwHb
//
// ```
type Room struct {
	pulumi.CustomResourceState

	// ARN of the Room.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// List of Logging Configuration
	// ARNs to attach to the room.
	LoggingConfigurationIdentifiers pulumi.StringArrayOutput `pulumi:"loggingConfigurationIdentifiers"`
	// Maximum number of characters in a single
	// message. Messages are expected to be UTF-8 encoded and this limit applies
	// specifically to rune/code-point count, not number of bytes.
	MaximumMessageLength pulumi.IntOutput `pulumi:"maximumMessageLength"`
	// Maximum number of messages per
	// second that can be sent to the room (by all clients).
	MaximumMessageRatePerSecond pulumi.IntOutput `pulumi:"maximumMessageRatePerSecond"`
	// Configuration information for optional
	// review of messages.
	MessageReviewHandler RoomMessageReviewHandlerPtrOutput `pulumi:"messageReviewHandler"`
	// Room name.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewRoom registers a new resource with the given unique name, arguments, and options.
func NewRoom(ctx *pulumi.Context,
	name string, args *RoomArgs, opts ...pulumi.ResourceOption) (*Room, error) {
	if args == nil {
		args = &RoomArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Room
	err := ctx.RegisterResource("aws:ivschat/room:Room", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoom gets an existing Room resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoom(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoomState, opts ...pulumi.ResourceOption) (*Room, error) {
	var resource Room
	err := ctx.ReadResource("aws:ivschat/room:Room", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Room resources.
type roomState struct {
	// ARN of the Room.
	Arn *string `pulumi:"arn"`
	// List of Logging Configuration
	// ARNs to attach to the room.
	LoggingConfigurationIdentifiers []string `pulumi:"loggingConfigurationIdentifiers"`
	// Maximum number of characters in a single
	// message. Messages are expected to be UTF-8 encoded and this limit applies
	// specifically to rune/code-point count, not number of bytes.
	MaximumMessageLength *int `pulumi:"maximumMessageLength"`
	// Maximum number of messages per
	// second that can be sent to the room (by all clients).
	MaximumMessageRatePerSecond *int `pulumi:"maximumMessageRatePerSecond"`
	// Configuration information for optional
	// review of messages.
	MessageReviewHandler *RoomMessageReviewHandler `pulumi:"messageReviewHandler"`
	// Room name.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RoomState struct {
	// ARN of the Room.
	Arn pulumi.StringPtrInput
	// List of Logging Configuration
	// ARNs to attach to the room.
	LoggingConfigurationIdentifiers pulumi.StringArrayInput
	// Maximum number of characters in a single
	// message. Messages are expected to be UTF-8 encoded and this limit applies
	// specifically to rune/code-point count, not number of bytes.
	MaximumMessageLength pulumi.IntPtrInput
	// Maximum number of messages per
	// second that can be sent to the room (by all clients).
	MaximumMessageRatePerSecond pulumi.IntPtrInput
	// Configuration information for optional
	// review of messages.
	MessageReviewHandler RoomMessageReviewHandlerPtrInput
	// Room name.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (RoomState) ElementType() reflect.Type {
	return reflect.TypeOf((*roomState)(nil)).Elem()
}

type roomArgs struct {
	// List of Logging Configuration
	// ARNs to attach to the room.
	LoggingConfigurationIdentifiers []string `pulumi:"loggingConfigurationIdentifiers"`
	// Maximum number of characters in a single
	// message. Messages are expected to be UTF-8 encoded and this limit applies
	// specifically to rune/code-point count, not number of bytes.
	MaximumMessageLength *int `pulumi:"maximumMessageLength"`
	// Maximum number of messages per
	// second that can be sent to the room (by all clients).
	MaximumMessageRatePerSecond *int `pulumi:"maximumMessageRatePerSecond"`
	// Configuration information for optional
	// review of messages.
	MessageReviewHandler *RoomMessageReviewHandler `pulumi:"messageReviewHandler"`
	// Room name.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Room resource.
type RoomArgs struct {
	// List of Logging Configuration
	// ARNs to attach to the room.
	LoggingConfigurationIdentifiers pulumi.StringArrayInput
	// Maximum number of characters in a single
	// message. Messages are expected to be UTF-8 encoded and this limit applies
	// specifically to rune/code-point count, not number of bytes.
	MaximumMessageLength pulumi.IntPtrInput
	// Maximum number of messages per
	// second that can be sent to the room (by all clients).
	MaximumMessageRatePerSecond pulumi.IntPtrInput
	// Configuration information for optional
	// review of messages.
	MessageReviewHandler RoomMessageReviewHandlerPtrInput
	// Room name.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (RoomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roomArgs)(nil)).Elem()
}

type RoomInput interface {
	pulumi.Input

	ToRoomOutput() RoomOutput
	ToRoomOutputWithContext(ctx context.Context) RoomOutput
}

func (*Room) ElementType() reflect.Type {
	return reflect.TypeOf((**Room)(nil)).Elem()
}

func (i *Room) ToRoomOutput() RoomOutput {
	return i.ToRoomOutputWithContext(context.Background())
}

func (i *Room) ToRoomOutputWithContext(ctx context.Context) RoomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoomOutput)
}

func (i *Room) ToOutput(ctx context.Context) pulumix.Output[*Room] {
	return pulumix.Output[*Room]{
		OutputState: i.ToRoomOutputWithContext(ctx).OutputState,
	}
}

// RoomArrayInput is an input type that accepts RoomArray and RoomArrayOutput values.
// You can construct a concrete instance of `RoomArrayInput` via:
//
//	RoomArray{ RoomArgs{...} }
type RoomArrayInput interface {
	pulumi.Input

	ToRoomArrayOutput() RoomArrayOutput
	ToRoomArrayOutputWithContext(context.Context) RoomArrayOutput
}

type RoomArray []RoomInput

func (RoomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Room)(nil)).Elem()
}

func (i RoomArray) ToRoomArrayOutput() RoomArrayOutput {
	return i.ToRoomArrayOutputWithContext(context.Background())
}

func (i RoomArray) ToRoomArrayOutputWithContext(ctx context.Context) RoomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoomArrayOutput)
}

func (i RoomArray) ToOutput(ctx context.Context) pulumix.Output[[]*Room] {
	return pulumix.Output[[]*Room]{
		OutputState: i.ToRoomArrayOutputWithContext(ctx).OutputState,
	}
}

// RoomMapInput is an input type that accepts RoomMap and RoomMapOutput values.
// You can construct a concrete instance of `RoomMapInput` via:
//
//	RoomMap{ "key": RoomArgs{...} }
type RoomMapInput interface {
	pulumi.Input

	ToRoomMapOutput() RoomMapOutput
	ToRoomMapOutputWithContext(context.Context) RoomMapOutput
}

type RoomMap map[string]RoomInput

func (RoomMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Room)(nil)).Elem()
}

func (i RoomMap) ToRoomMapOutput() RoomMapOutput {
	return i.ToRoomMapOutputWithContext(context.Background())
}

func (i RoomMap) ToRoomMapOutputWithContext(ctx context.Context) RoomMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoomMapOutput)
}

func (i RoomMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Room] {
	return pulumix.Output[map[string]*Room]{
		OutputState: i.ToRoomMapOutputWithContext(ctx).OutputState,
	}
}

type RoomOutput struct{ *pulumi.OutputState }

func (RoomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Room)(nil)).Elem()
}

func (o RoomOutput) ToRoomOutput() RoomOutput {
	return o
}

func (o RoomOutput) ToRoomOutputWithContext(ctx context.Context) RoomOutput {
	return o
}

func (o RoomOutput) ToOutput(ctx context.Context) pulumix.Output[*Room] {
	return pulumix.Output[*Room]{
		OutputState: o.OutputState,
	}
}

// ARN of the Room.
func (o RoomOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Room) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// List of Logging Configuration
// ARNs to attach to the room.
func (o RoomOutput) LoggingConfigurationIdentifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Room) pulumi.StringArrayOutput { return v.LoggingConfigurationIdentifiers }).(pulumi.StringArrayOutput)
}

// Maximum number of characters in a single
// message. Messages are expected to be UTF-8 encoded and this limit applies
// specifically to rune/code-point count, not number of bytes.
func (o RoomOutput) MaximumMessageLength() pulumi.IntOutput {
	return o.ApplyT(func(v *Room) pulumi.IntOutput { return v.MaximumMessageLength }).(pulumi.IntOutput)
}

// Maximum number of messages per
// second that can be sent to the room (by all clients).
func (o RoomOutput) MaximumMessageRatePerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v *Room) pulumi.IntOutput { return v.MaximumMessageRatePerSecond }).(pulumi.IntOutput)
}

// Configuration information for optional
// review of messages.
func (o RoomOutput) MessageReviewHandler() RoomMessageReviewHandlerPtrOutput {
	return o.ApplyT(func(v *Room) RoomMessageReviewHandlerPtrOutput { return v.MessageReviewHandler }).(RoomMessageReviewHandlerPtrOutput)
}

// Room name.
func (o RoomOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Room) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RoomOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Room) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RoomOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Room) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type RoomArrayOutput struct{ *pulumi.OutputState }

func (RoomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Room)(nil)).Elem()
}

func (o RoomArrayOutput) ToRoomArrayOutput() RoomArrayOutput {
	return o
}

func (o RoomArrayOutput) ToRoomArrayOutputWithContext(ctx context.Context) RoomArrayOutput {
	return o
}

func (o RoomArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Room] {
	return pulumix.Output[[]*Room]{
		OutputState: o.OutputState,
	}
}

func (o RoomArrayOutput) Index(i pulumi.IntInput) RoomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Room {
		return vs[0].([]*Room)[vs[1].(int)]
	}).(RoomOutput)
}

type RoomMapOutput struct{ *pulumi.OutputState }

func (RoomMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Room)(nil)).Elem()
}

func (o RoomMapOutput) ToRoomMapOutput() RoomMapOutput {
	return o
}

func (o RoomMapOutput) ToRoomMapOutputWithContext(ctx context.Context) RoomMapOutput {
	return o
}

func (o RoomMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Room] {
	return pulumix.Output[map[string]*Room]{
		OutputState: o.OutputState,
	}
}

func (o RoomMapOutput) MapIndex(k pulumi.StringInput) RoomOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Room {
		return vs[0].(map[string]*Room)[vs[1].(string)]
	}).(RoomOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoomInput)(nil)).Elem(), &Room{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoomArrayInput)(nil)).Elem(), RoomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoomMapInput)(nil)).Elem(), RoomMap{})
	pulumi.RegisterOutputType(RoomOutput{})
	pulumi.RegisterOutputType(RoomArrayOutput{})
	pulumi.RegisterOutputType(RoomMapOutput{})
}
