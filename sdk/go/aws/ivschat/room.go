// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivschat

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Room struct {
	pulumi.CustomResourceState

	Arn                             pulumi.StringOutput               `pulumi:"arn"`
	LoggingConfigurationIdentifiers pulumi.StringArrayOutput          `pulumi:"loggingConfigurationIdentifiers"`
	MaximumMessageLength            pulumi.IntOutput                  `pulumi:"maximumMessageLength"`
	MaximumMessageRatePerSecond     pulumi.IntOutput                  `pulumi:"maximumMessageRatePerSecond"`
	MessageReviewHandler            RoomMessageReviewHandlerPtrOutput `pulumi:"messageReviewHandler"`
	Name                            pulumi.StringOutput               `pulumi:"name"`
	Tags                            pulumi.StringMapOutput            `pulumi:"tags"`
	TagsAll                         pulumi.StringMapOutput            `pulumi:"tagsAll"`
}

// NewRoom registers a new resource with the given unique name, arguments, and options.
func NewRoom(ctx *pulumi.Context,
	name string, args *RoomArgs, opts ...pulumi.ResourceOption) (*Room, error) {
	if args == nil {
		args = &RoomArgs{}
	}

	var resource Room
	err := ctx.RegisterResource("aws:ivschat/room:Room", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoom gets an existing Room resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoom(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoomState, opts ...pulumi.ResourceOption) (*Room, error) {
	var resource Room
	err := ctx.ReadResource("aws:ivschat/room:Room", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Room resources.
type roomState struct {
	Arn                             *string                   `pulumi:"arn"`
	LoggingConfigurationIdentifiers []string                  `pulumi:"loggingConfigurationIdentifiers"`
	MaximumMessageLength            *int                      `pulumi:"maximumMessageLength"`
	MaximumMessageRatePerSecond     *int                      `pulumi:"maximumMessageRatePerSecond"`
	MessageReviewHandler            *RoomMessageReviewHandler `pulumi:"messageReviewHandler"`
	Name                            *string                   `pulumi:"name"`
	Tags                            map[string]string         `pulumi:"tags"`
	TagsAll                         map[string]string         `pulumi:"tagsAll"`
}

type RoomState struct {
	Arn                             pulumi.StringPtrInput
	LoggingConfigurationIdentifiers pulumi.StringArrayInput
	MaximumMessageLength            pulumi.IntPtrInput
	MaximumMessageRatePerSecond     pulumi.IntPtrInput
	MessageReviewHandler            RoomMessageReviewHandlerPtrInput
	Name                            pulumi.StringPtrInput
	Tags                            pulumi.StringMapInput
	TagsAll                         pulumi.StringMapInput
}

func (RoomState) ElementType() reflect.Type {
	return reflect.TypeOf((*roomState)(nil)).Elem()
}

type roomArgs struct {
	LoggingConfigurationIdentifiers []string                  `pulumi:"loggingConfigurationIdentifiers"`
	MaximumMessageLength            *int                      `pulumi:"maximumMessageLength"`
	MaximumMessageRatePerSecond     *int                      `pulumi:"maximumMessageRatePerSecond"`
	MessageReviewHandler            *RoomMessageReviewHandler `pulumi:"messageReviewHandler"`
	Name                            *string                   `pulumi:"name"`
	Tags                            map[string]string         `pulumi:"tags"`
}

// The set of arguments for constructing a Room resource.
type RoomArgs struct {
	LoggingConfigurationIdentifiers pulumi.StringArrayInput
	MaximumMessageLength            pulumi.IntPtrInput
	MaximumMessageRatePerSecond     pulumi.IntPtrInput
	MessageReviewHandler            RoomMessageReviewHandlerPtrInput
	Name                            pulumi.StringPtrInput
	Tags                            pulumi.StringMapInput
}

func (RoomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roomArgs)(nil)).Elem()
}

type RoomInput interface {
	pulumi.Input

	ToRoomOutput() RoomOutput
	ToRoomOutputWithContext(ctx context.Context) RoomOutput
}

func (*Room) ElementType() reflect.Type {
	return reflect.TypeOf((**Room)(nil)).Elem()
}

func (i *Room) ToRoomOutput() RoomOutput {
	return i.ToRoomOutputWithContext(context.Background())
}

func (i *Room) ToRoomOutputWithContext(ctx context.Context) RoomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoomOutput)
}

// RoomArrayInput is an input type that accepts RoomArray and RoomArrayOutput values.
// You can construct a concrete instance of `RoomArrayInput` via:
//
//	RoomArray{ RoomArgs{...} }
type RoomArrayInput interface {
	pulumi.Input

	ToRoomArrayOutput() RoomArrayOutput
	ToRoomArrayOutputWithContext(context.Context) RoomArrayOutput
}

type RoomArray []RoomInput

func (RoomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Room)(nil)).Elem()
}

func (i RoomArray) ToRoomArrayOutput() RoomArrayOutput {
	return i.ToRoomArrayOutputWithContext(context.Background())
}

func (i RoomArray) ToRoomArrayOutputWithContext(ctx context.Context) RoomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoomArrayOutput)
}

// RoomMapInput is an input type that accepts RoomMap and RoomMapOutput values.
// You can construct a concrete instance of `RoomMapInput` via:
//
//	RoomMap{ "key": RoomArgs{...} }
type RoomMapInput interface {
	pulumi.Input

	ToRoomMapOutput() RoomMapOutput
	ToRoomMapOutputWithContext(context.Context) RoomMapOutput
}

type RoomMap map[string]RoomInput

func (RoomMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Room)(nil)).Elem()
}

func (i RoomMap) ToRoomMapOutput() RoomMapOutput {
	return i.ToRoomMapOutputWithContext(context.Background())
}

func (i RoomMap) ToRoomMapOutputWithContext(ctx context.Context) RoomMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoomMapOutput)
}

type RoomOutput struct{ *pulumi.OutputState }

func (RoomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Room)(nil)).Elem()
}

func (o RoomOutput) ToRoomOutput() RoomOutput {
	return o
}

func (o RoomOutput) ToRoomOutputWithContext(ctx context.Context) RoomOutput {
	return o
}

func (o RoomOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Room) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o RoomOutput) LoggingConfigurationIdentifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Room) pulumi.StringArrayOutput { return v.LoggingConfigurationIdentifiers }).(pulumi.StringArrayOutput)
}

func (o RoomOutput) MaximumMessageLength() pulumi.IntOutput {
	return o.ApplyT(func(v *Room) pulumi.IntOutput { return v.MaximumMessageLength }).(pulumi.IntOutput)
}

func (o RoomOutput) MaximumMessageRatePerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v *Room) pulumi.IntOutput { return v.MaximumMessageRatePerSecond }).(pulumi.IntOutput)
}

func (o RoomOutput) MessageReviewHandler() RoomMessageReviewHandlerPtrOutput {
	return o.ApplyT(func(v *Room) RoomMessageReviewHandlerPtrOutput { return v.MessageReviewHandler }).(RoomMessageReviewHandlerPtrOutput)
}

func (o RoomOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Room) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RoomOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Room) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o RoomOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Room) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type RoomArrayOutput struct{ *pulumi.OutputState }

func (RoomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Room)(nil)).Elem()
}

func (o RoomArrayOutput) ToRoomArrayOutput() RoomArrayOutput {
	return o
}

func (o RoomArrayOutput) ToRoomArrayOutputWithContext(ctx context.Context) RoomArrayOutput {
	return o
}

func (o RoomArrayOutput) Index(i pulumi.IntInput) RoomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Room {
		return vs[0].([]*Room)[vs[1].(int)]
	}).(RoomOutput)
}

type RoomMapOutput struct{ *pulumi.OutputState }

func (RoomMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Room)(nil)).Elem()
}

func (o RoomMapOutput) ToRoomMapOutput() RoomMapOutput {
	return o
}

func (o RoomMapOutput) ToRoomMapOutputWithContext(ctx context.Context) RoomMapOutput {
	return o
}

func (o RoomMapOutput) MapIndex(k pulumi.StringInput) RoomOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Room {
		return vs[0].(map[string]*Room)[vs[1].(string)]
	}).(RoomOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoomInput)(nil)).Elem(), &Room{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoomArrayInput)(nil)).Elem(), RoomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoomMapInput)(nil)).Elem(), RoomMap{})
	pulumi.RegisterOutputType(RoomOutput{})
	pulumi.RegisterOutputType(RoomArrayOutput{})
	pulumi.RegisterOutputType(RoomMapOutput{})
}
