// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ComputeEnvironmentComputeResources struct {
	// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	AllocationStrategy *string `pulumi:"allocationStrategy"`
	// Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	BidPercentage *int `pulumi:"bidPercentage"`
	// The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	DesiredVcpus *int `pulumi:"desiredVcpus"`
	// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
	Ec2Configurations []ComputeEnvironmentComputeResourcesEc2Configuration `pulumi:"ec2Configurations"`
	// The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	Ec2KeyPair *string `pulumi:"ec2KeyPair"`
	// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use `ec2Configuration` `imageIdOverride` instead)
	ImageId *string `pulumi:"imageId"`
	// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	InstanceRole *string `pulumi:"instanceRole"`
	// A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	LaunchTemplate *ComputeEnvironmentComputeResourcesLaunchTemplate `pulumi:"launchTemplate"`
	// The maximum number of EC2 vCPUs that an environment can reach.
	MaxVcpus int `pulumi:"maxVcpus"`
	// The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	MinVcpus *int `pulumi:"minVcpus"`
	// The Amazon EC2 placement group to associate with your compute resources.
	PlacementGroup *string `pulumi:"placementGroup"`
	// A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	SpotIamFleetRole *string `pulumi:"spotIamFleetRole"`
	// A list of VPC subnets into which the compute resources are launched.
	Subnets []string `pulumi:"subnets"`
	// Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	Tags map[string]string `pulumi:"tags"`
	// The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
	Type string `pulumi:"type"`
}

// ComputeEnvironmentComputeResourcesInput is an input type that accepts ComputeEnvironmentComputeResourcesArgs and ComputeEnvironmentComputeResourcesOutput values.
// You can construct a concrete instance of `ComputeEnvironmentComputeResourcesInput` via:
//
//	ComputeEnvironmentComputeResourcesArgs{...}
type ComputeEnvironmentComputeResourcesInput interface {
	pulumi.Input

	ToComputeEnvironmentComputeResourcesOutput() ComputeEnvironmentComputeResourcesOutput
	ToComputeEnvironmentComputeResourcesOutputWithContext(context.Context) ComputeEnvironmentComputeResourcesOutput
}

type ComputeEnvironmentComputeResourcesArgs struct {
	// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	AllocationStrategy pulumi.StringPtrInput `pulumi:"allocationStrategy"`
	// Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	BidPercentage pulumi.IntPtrInput `pulumi:"bidPercentage"`
	// The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	DesiredVcpus pulumi.IntPtrInput `pulumi:"desiredVcpus"`
	// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
	Ec2Configurations ComputeEnvironmentComputeResourcesEc2ConfigurationArrayInput `pulumi:"ec2Configurations"`
	// The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	Ec2KeyPair pulumi.StringPtrInput `pulumi:"ec2KeyPair"`
	// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use `ec2Configuration` `imageIdOverride` instead)
	ImageId pulumi.StringPtrInput `pulumi:"imageId"`
	// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	InstanceRole pulumi.StringPtrInput `pulumi:"instanceRole"`
	// A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	InstanceTypes pulumi.StringArrayInput `pulumi:"instanceTypes"`
	// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	LaunchTemplate ComputeEnvironmentComputeResourcesLaunchTemplatePtrInput `pulumi:"launchTemplate"`
	// The maximum number of EC2 vCPUs that an environment can reach.
	MaxVcpus pulumi.IntInput `pulumi:"maxVcpus"`
	// The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	MinVcpus pulumi.IntPtrInput `pulumi:"minVcpus"`
	// The Amazon EC2 placement group to associate with your compute resources.
	PlacementGroup pulumi.StringPtrInput `pulumi:"placementGroup"`
	// A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	SpotIamFleetRole pulumi.StringPtrInput `pulumi:"spotIamFleetRole"`
	// A list of VPC subnets into which the compute resources are launched.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
	// Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ComputeEnvironmentComputeResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesOutput() ComputeEnvironmentComputeResourcesOutput {
	return i.ToComputeEnvironmentComputeResourcesOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesOutput)
}

func (i ComputeEnvironmentComputeResourcesArgs) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentComputeResources] {
	return pulumix.Output[ComputeEnvironmentComputeResources]{
		OutputState: i.ToComputeEnvironmentComputeResourcesOutputWithContext(ctx).OutputState,
	}
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return i.ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesOutput).ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx)
}

// ComputeEnvironmentComputeResourcesPtrInput is an input type that accepts ComputeEnvironmentComputeResourcesArgs, ComputeEnvironmentComputeResourcesPtr and ComputeEnvironmentComputeResourcesPtrOutput values.
// You can construct a concrete instance of `ComputeEnvironmentComputeResourcesPtrInput` via:
//
//	        ComputeEnvironmentComputeResourcesArgs{...}
//
//	or:
//
//	        nil
type ComputeEnvironmentComputeResourcesPtrInput interface {
	pulumi.Input

	ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput
	ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Context) ComputeEnvironmentComputeResourcesPtrOutput
}

type computeEnvironmentComputeResourcesPtrType ComputeEnvironmentComputeResourcesArgs

func ComputeEnvironmentComputeResourcesPtr(v *ComputeEnvironmentComputeResourcesArgs) ComputeEnvironmentComputeResourcesPtrInput {
	return (*computeEnvironmentComputeResourcesPtrType)(v)
}

func (*computeEnvironmentComputeResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (i *computeEnvironmentComputeResourcesPtrType) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return i.ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Background())
}

func (i *computeEnvironmentComputeResourcesPtrType) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesPtrOutput)
}

func (i *computeEnvironmentComputeResourcesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ComputeEnvironmentComputeResources] {
	return pulumix.Output[*ComputeEnvironmentComputeResources]{
		OutputState: i.ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx).OutputState,
	}
}

type ComputeEnvironmentComputeResourcesOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesOutput() ComputeEnvironmentComputeResourcesOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return o.ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Background())
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEnvironmentComputeResources) *ComputeEnvironmentComputeResources {
		return &v
	}).(ComputeEnvironmentComputeResourcesPtrOutput)
}

func (o ComputeEnvironmentComputeResourcesOutput) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentComputeResources] {
	return pulumix.Output[ComputeEnvironmentComputeResources]{
		OutputState: o.OutputState,
	}
}

// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.AllocationStrategy }).(pulumi.StringPtrOutput)
}

// Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) BidPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *int { return v.BidPercentage }).(pulumi.IntPtrOutput)
}

// The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) DesiredVcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *int { return v.DesiredVcpus }).(pulumi.IntPtrOutput)
}

// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) Ec2Configurations() ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) []ComputeEnvironmentComputeResourcesEc2Configuration {
		return v.Ec2Configurations
	}).(ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput)
}

// The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) Ec2KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.Ec2KeyPair }).(pulumi.StringPtrOutput)
}

// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use `ec2Configuration` `imageIdOverride` instead)
func (o ComputeEnvironmentComputeResourcesOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) InstanceRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.InstanceRole }).(pulumi.StringPtrOutput)
}

// A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) []string { return v.InstanceTypes }).(pulumi.StringArrayOutput)
}

// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) LaunchTemplate() ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *ComputeEnvironmentComputeResourcesLaunchTemplate {
		return v.LaunchTemplate
	}).(ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput)
}

// The maximum number of EC2 vCPUs that an environment can reach.
func (o ComputeEnvironmentComputeResourcesOutput) MaxVcpus() pulumi.IntOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) int { return v.MaxVcpus }).(pulumi.IntOutput)
}

// The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) MinVcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *int { return v.MinVcpus }).(pulumi.IntPtrOutput)
}

// The Amazon EC2 placement group to associate with your compute resources.
func (o ComputeEnvironmentComputeResourcesOutput) PlacementGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.PlacementGroup }).(pulumi.StringPtrOutput)
}

// A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
func (o ComputeEnvironmentComputeResourcesOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) SpotIamFleetRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.SpotIamFleetRole }).(pulumi.StringPtrOutput)
}

// A list of VPC subnets into which the compute resources are launched.
func (o ComputeEnvironmentComputeResourcesOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
func (o ComputeEnvironmentComputeResourcesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) string { return v.Type }).(pulumi.StringOutput)
}

type ComputeEnvironmentComputeResourcesPtrOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesPtrOutput) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesPtrOutput) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ComputeEnvironmentComputeResources] {
	return pulumix.Output[*ComputeEnvironmentComputeResources]{
		OutputState: o.OutputState,
	}
}

func (o ComputeEnvironmentComputeResourcesPtrOutput) Elem() ComputeEnvironmentComputeResourcesOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) ComputeEnvironmentComputeResources {
		if v != nil {
			return *v
		}
		var ret ComputeEnvironmentComputeResources
		return ret
	}).(ComputeEnvironmentComputeResourcesOutput)
}

// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.AllocationStrategy
	}).(pulumi.StringPtrOutput)
}

// Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) BidPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *int {
		if v == nil {
			return nil
		}
		return v.BidPercentage
	}).(pulumi.IntPtrOutput)
}

// The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) DesiredVcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *int {
		if v == nil {
			return nil
		}
		return v.DesiredVcpus
	}).(pulumi.IntPtrOutput)
}

// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Ec2Configurations() ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) []ComputeEnvironmentComputeResourcesEc2Configuration {
		if v == nil {
			return nil
		}
		return v.Ec2Configurations
	}).(ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput)
}

// The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Ec2KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.Ec2KeyPair
	}).(pulumi.StringPtrOutput)
}

// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use `ec2Configuration` `imageIdOverride` instead)
func (o ComputeEnvironmentComputeResourcesPtrOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.ImageId
	}).(pulumi.StringPtrOutput)
}

// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) InstanceRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.InstanceRole
	}).(pulumi.StringPtrOutput)
}

// A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) []string {
		if v == nil {
			return nil
		}
		return v.InstanceTypes
	}).(pulumi.StringArrayOutput)
}

// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) LaunchTemplate() ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *ComputeEnvironmentComputeResourcesLaunchTemplate {
		if v == nil {
			return nil
		}
		return v.LaunchTemplate
	}).(ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput)
}

// The maximum number of EC2 vCPUs that an environment can reach.
func (o ComputeEnvironmentComputeResourcesPtrOutput) MaxVcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *int {
		if v == nil {
			return nil
		}
		return &v.MaxVcpus
	}).(pulumi.IntPtrOutput)
}

// The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) MinVcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *int {
		if v == nil {
			return nil
		}
		return v.MinVcpus
	}).(pulumi.IntPtrOutput)
}

// The Amazon EC2 placement group to associate with your compute resources.
func (o ComputeEnvironmentComputeResourcesPtrOutput) PlacementGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.PlacementGroup
	}).(pulumi.StringPtrOutput)
}

// A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
func (o ComputeEnvironmentComputeResourcesPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) SpotIamFleetRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.SpotIamFleetRole
	}).(pulumi.StringPtrOutput)
}

// A list of VPC subnets into which the compute resources are launched.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

// Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ComputeEnvironmentComputeResourcesEc2Configuration struct {
	// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `imageId` argument in the `computeResources` block.
	ImageIdOverride *string `pulumi:"imageIdOverride"`
	// The image type to match with the instance type to select an AMI. If the `imageIdOverride` parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) (`ECS_AL2`) is used.
	ImageType *string `pulumi:"imageType"`
}

// ComputeEnvironmentComputeResourcesEc2ConfigurationInput is an input type that accepts ComputeEnvironmentComputeResourcesEc2ConfigurationArgs and ComputeEnvironmentComputeResourcesEc2ConfigurationOutput values.
// You can construct a concrete instance of `ComputeEnvironmentComputeResourcesEc2ConfigurationInput` via:
//
//	ComputeEnvironmentComputeResourcesEc2ConfigurationArgs{...}
type ComputeEnvironmentComputeResourcesEc2ConfigurationInput interface {
	pulumi.Input

	ToComputeEnvironmentComputeResourcesEc2ConfigurationOutput() ComputeEnvironmentComputeResourcesEc2ConfigurationOutput
	ToComputeEnvironmentComputeResourcesEc2ConfigurationOutputWithContext(context.Context) ComputeEnvironmentComputeResourcesEc2ConfigurationOutput
}

type ComputeEnvironmentComputeResourcesEc2ConfigurationArgs struct {
	// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `imageId` argument in the `computeResources` block.
	ImageIdOverride pulumi.StringPtrInput `pulumi:"imageIdOverride"`
	// The image type to match with the instance type to select an AMI. If the `imageIdOverride` parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) (`ECS_AL2`) is used.
	ImageType pulumi.StringPtrInput `pulumi:"imageType"`
}

func (ComputeEnvironmentComputeResourcesEc2ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResourcesEc2Configuration)(nil)).Elem()
}

func (i ComputeEnvironmentComputeResourcesEc2ConfigurationArgs) ToComputeEnvironmentComputeResourcesEc2ConfigurationOutput() ComputeEnvironmentComputeResourcesEc2ConfigurationOutput {
	return i.ToComputeEnvironmentComputeResourcesEc2ConfigurationOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesEc2ConfigurationArgs) ToComputeEnvironmentComputeResourcesEc2ConfigurationOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesEc2ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesEc2ConfigurationOutput)
}

func (i ComputeEnvironmentComputeResourcesEc2ConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentComputeResourcesEc2Configuration] {
	return pulumix.Output[ComputeEnvironmentComputeResourcesEc2Configuration]{
		OutputState: i.ToComputeEnvironmentComputeResourcesEc2ConfigurationOutputWithContext(ctx).OutputState,
	}
}

// ComputeEnvironmentComputeResourcesEc2ConfigurationArrayInput is an input type that accepts ComputeEnvironmentComputeResourcesEc2ConfigurationArray and ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput values.
// You can construct a concrete instance of `ComputeEnvironmentComputeResourcesEc2ConfigurationArrayInput` via:
//
//	ComputeEnvironmentComputeResourcesEc2ConfigurationArray{ ComputeEnvironmentComputeResourcesEc2ConfigurationArgs{...} }
type ComputeEnvironmentComputeResourcesEc2ConfigurationArrayInput interface {
	pulumi.Input

	ToComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput() ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput
	ToComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutputWithContext(context.Context) ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput
}

type ComputeEnvironmentComputeResourcesEc2ConfigurationArray []ComputeEnvironmentComputeResourcesEc2ConfigurationInput

func (ComputeEnvironmentComputeResourcesEc2ConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeEnvironmentComputeResourcesEc2Configuration)(nil)).Elem()
}

func (i ComputeEnvironmentComputeResourcesEc2ConfigurationArray) ToComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput() ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput {
	return i.ToComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesEc2ConfigurationArray) ToComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput)
}

func (i ComputeEnvironmentComputeResourcesEc2ConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]ComputeEnvironmentComputeResourcesEc2Configuration] {
	return pulumix.Output[[]ComputeEnvironmentComputeResourcesEc2Configuration]{
		OutputState: i.ToComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

type ComputeEnvironmentComputeResourcesEc2ConfigurationOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResourcesEc2Configuration)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ToComputeEnvironmentComputeResourcesEc2ConfigurationOutput() ComputeEnvironmentComputeResourcesEc2ConfigurationOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ToComputeEnvironmentComputeResourcesEc2ConfigurationOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesEc2ConfigurationOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentComputeResourcesEc2Configuration] {
	return pulumix.Output[ComputeEnvironmentComputeResourcesEc2Configuration]{
		OutputState: o.OutputState,
	}
}

// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `imageId` argument in the `computeResources` block.
func (o ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ImageIdOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResourcesEc2Configuration) *string { return v.ImageIdOverride }).(pulumi.StringPtrOutput)
}

// The image type to match with the instance type to select an AMI. If the `imageIdOverride` parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) (`ECS_AL2`) is used.
func (o ComputeEnvironmentComputeResourcesEc2ConfigurationOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResourcesEc2Configuration) *string { return v.ImageType }).(pulumi.StringPtrOutput)
}

type ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeEnvironmentComputeResourcesEc2Configuration)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput) ToComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput() ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput) ToComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ComputeEnvironmentComputeResourcesEc2Configuration] {
	return pulumix.Output[[]ComputeEnvironmentComputeResourcesEc2Configuration]{
		OutputState: o.OutputState,
	}
}

func (o ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput) Index(i pulumi.IntInput) ComputeEnvironmentComputeResourcesEc2ConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeEnvironmentComputeResourcesEc2Configuration {
		return vs[0].([]ComputeEnvironmentComputeResourcesEc2Configuration)[vs[1].(int)]
	}).(ComputeEnvironmentComputeResourcesEc2ConfigurationOutput)
}

type ComputeEnvironmentComputeResourcesLaunchTemplate struct {
	// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
	LaunchTemplateId *string `pulumi:"launchTemplateId"`
	// Name of the launch template.
	LaunchTemplateName *string `pulumi:"launchTemplateName"`
	// The version number of the launch template. Default: The default version of the launch template.
	Version *string `pulumi:"version"`
}

// ComputeEnvironmentComputeResourcesLaunchTemplateInput is an input type that accepts ComputeEnvironmentComputeResourcesLaunchTemplateArgs and ComputeEnvironmentComputeResourcesLaunchTemplateOutput values.
// You can construct a concrete instance of `ComputeEnvironmentComputeResourcesLaunchTemplateInput` via:
//
//	ComputeEnvironmentComputeResourcesLaunchTemplateArgs{...}
type ComputeEnvironmentComputeResourcesLaunchTemplateInput interface {
	pulumi.Input

	ToComputeEnvironmentComputeResourcesLaunchTemplateOutput() ComputeEnvironmentComputeResourcesLaunchTemplateOutput
	ToComputeEnvironmentComputeResourcesLaunchTemplateOutputWithContext(context.Context) ComputeEnvironmentComputeResourcesLaunchTemplateOutput
}

type ComputeEnvironmentComputeResourcesLaunchTemplateArgs struct {
	// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
	LaunchTemplateId pulumi.StringPtrInput `pulumi:"launchTemplateId"`
	// Name of the launch template.
	LaunchTemplateName pulumi.StringPtrInput `pulumi:"launchTemplateName"`
	// The version number of the launch template. Default: The default version of the launch template.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ComputeEnvironmentComputeResourcesLaunchTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResourcesLaunchTemplate)(nil)).Elem()
}

func (i ComputeEnvironmentComputeResourcesLaunchTemplateArgs) ToComputeEnvironmentComputeResourcesLaunchTemplateOutput() ComputeEnvironmentComputeResourcesLaunchTemplateOutput {
	return i.ToComputeEnvironmentComputeResourcesLaunchTemplateOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesLaunchTemplateArgs) ToComputeEnvironmentComputeResourcesLaunchTemplateOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesLaunchTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesLaunchTemplateOutput)
}

func (i ComputeEnvironmentComputeResourcesLaunchTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentComputeResourcesLaunchTemplate] {
	return pulumix.Output[ComputeEnvironmentComputeResourcesLaunchTemplate]{
		OutputState: i.ToComputeEnvironmentComputeResourcesLaunchTemplateOutputWithContext(ctx).OutputState,
	}
}

func (i ComputeEnvironmentComputeResourcesLaunchTemplateArgs) ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput() ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return i.ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesLaunchTemplateArgs) ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesLaunchTemplateOutput).ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutputWithContext(ctx)
}

// ComputeEnvironmentComputeResourcesLaunchTemplatePtrInput is an input type that accepts ComputeEnvironmentComputeResourcesLaunchTemplateArgs, ComputeEnvironmentComputeResourcesLaunchTemplatePtr and ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput values.
// You can construct a concrete instance of `ComputeEnvironmentComputeResourcesLaunchTemplatePtrInput` via:
//
//	        ComputeEnvironmentComputeResourcesLaunchTemplateArgs{...}
//
//	or:
//
//	        nil
type ComputeEnvironmentComputeResourcesLaunchTemplatePtrInput interface {
	pulumi.Input

	ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput() ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput
	ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutputWithContext(context.Context) ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput
}

type computeEnvironmentComputeResourcesLaunchTemplatePtrType ComputeEnvironmentComputeResourcesLaunchTemplateArgs

func ComputeEnvironmentComputeResourcesLaunchTemplatePtr(v *ComputeEnvironmentComputeResourcesLaunchTemplateArgs) ComputeEnvironmentComputeResourcesLaunchTemplatePtrInput {
	return (*computeEnvironmentComputeResourcesLaunchTemplatePtrType)(v)
}

func (*computeEnvironmentComputeResourcesLaunchTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentComputeResourcesLaunchTemplate)(nil)).Elem()
}

func (i *computeEnvironmentComputeResourcesLaunchTemplatePtrType) ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput() ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return i.ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutputWithContext(context.Background())
}

func (i *computeEnvironmentComputeResourcesLaunchTemplatePtrType) ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput)
}

func (i *computeEnvironmentComputeResourcesLaunchTemplatePtrType) ToOutput(ctx context.Context) pulumix.Output[*ComputeEnvironmentComputeResourcesLaunchTemplate] {
	return pulumix.Output[*ComputeEnvironmentComputeResourcesLaunchTemplate]{
		OutputState: i.ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutputWithContext(ctx).OutputState,
	}
}

type ComputeEnvironmentComputeResourcesLaunchTemplateOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesLaunchTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResourcesLaunchTemplate)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) ToComputeEnvironmentComputeResourcesLaunchTemplateOutput() ComputeEnvironmentComputeResourcesLaunchTemplateOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) ToComputeEnvironmentComputeResourcesLaunchTemplateOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesLaunchTemplateOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput() ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return o.ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutputWithContext(context.Background())
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEnvironmentComputeResourcesLaunchTemplate) *ComputeEnvironmentComputeResourcesLaunchTemplate {
		return &v
	}).(ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput)
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentComputeResourcesLaunchTemplate] {
	return pulumix.Output[ComputeEnvironmentComputeResourcesLaunchTemplate]{
		OutputState: o.OutputState,
	}
}

// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) LaunchTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResourcesLaunchTemplate) *string { return v.LaunchTemplateId }).(pulumi.StringPtrOutput)
}

// Name of the launch template.
func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) LaunchTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResourcesLaunchTemplate) *string { return v.LaunchTemplateName }).(pulumi.StringPtrOutput)
}

// The version number of the launch template. Default: The default version of the launch template.
func (o ComputeEnvironmentComputeResourcesLaunchTemplateOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResourcesLaunchTemplate) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentComputeResourcesLaunchTemplate)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput) ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput() ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput) ToComputeEnvironmentComputeResourcesLaunchTemplatePtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ComputeEnvironmentComputeResourcesLaunchTemplate] {
	return pulumix.Output[*ComputeEnvironmentComputeResourcesLaunchTemplate]{
		OutputState: o.OutputState,
	}
}

func (o ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput) Elem() ComputeEnvironmentComputeResourcesLaunchTemplateOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResourcesLaunchTemplate) ComputeEnvironmentComputeResourcesLaunchTemplate {
		if v != nil {
			return *v
		}
		var ret ComputeEnvironmentComputeResourcesLaunchTemplate
		return ret
	}).(ComputeEnvironmentComputeResourcesLaunchTemplateOutput)
}

// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
func (o ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput) LaunchTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResourcesLaunchTemplate) *string {
		if v == nil {
			return nil
		}
		return v.LaunchTemplateId
	}).(pulumi.StringPtrOutput)
}

// Name of the launch template.
func (o ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput) LaunchTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResourcesLaunchTemplate) *string {
		if v == nil {
			return nil
		}
		return v.LaunchTemplateName
	}).(pulumi.StringPtrOutput)
}

// The version number of the launch template. Default: The default version of the launch template.
func (o ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResourcesLaunchTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type ComputeEnvironmentEksConfiguration struct {
	// The Amazon Resource Name (ARN) of the Amazon EKS cluster.
	EksClusterArn string `pulumi:"eksClusterArn"`
	// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace.
	KubernetesNamespace string `pulumi:"kubernetesNamespace"`
}

// ComputeEnvironmentEksConfigurationInput is an input type that accepts ComputeEnvironmentEksConfigurationArgs and ComputeEnvironmentEksConfigurationOutput values.
// You can construct a concrete instance of `ComputeEnvironmentEksConfigurationInput` via:
//
//	ComputeEnvironmentEksConfigurationArgs{...}
type ComputeEnvironmentEksConfigurationInput interface {
	pulumi.Input

	ToComputeEnvironmentEksConfigurationOutput() ComputeEnvironmentEksConfigurationOutput
	ToComputeEnvironmentEksConfigurationOutputWithContext(context.Context) ComputeEnvironmentEksConfigurationOutput
}

type ComputeEnvironmentEksConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the Amazon EKS cluster.
	EksClusterArn pulumi.StringInput `pulumi:"eksClusterArn"`
	// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace.
	KubernetesNamespace pulumi.StringInput `pulumi:"kubernetesNamespace"`
}

func (ComputeEnvironmentEksConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentEksConfiguration)(nil)).Elem()
}

func (i ComputeEnvironmentEksConfigurationArgs) ToComputeEnvironmentEksConfigurationOutput() ComputeEnvironmentEksConfigurationOutput {
	return i.ToComputeEnvironmentEksConfigurationOutputWithContext(context.Background())
}

func (i ComputeEnvironmentEksConfigurationArgs) ToComputeEnvironmentEksConfigurationOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentEksConfigurationOutput)
}

func (i ComputeEnvironmentEksConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentEksConfiguration] {
	return pulumix.Output[ComputeEnvironmentEksConfiguration]{
		OutputState: i.ToComputeEnvironmentEksConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ComputeEnvironmentEksConfigurationArgs) ToComputeEnvironmentEksConfigurationPtrOutput() ComputeEnvironmentEksConfigurationPtrOutput {
	return i.ToComputeEnvironmentEksConfigurationPtrOutputWithContext(context.Background())
}

func (i ComputeEnvironmentEksConfigurationArgs) ToComputeEnvironmentEksConfigurationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentEksConfigurationOutput).ToComputeEnvironmentEksConfigurationPtrOutputWithContext(ctx)
}

// ComputeEnvironmentEksConfigurationPtrInput is an input type that accepts ComputeEnvironmentEksConfigurationArgs, ComputeEnvironmentEksConfigurationPtr and ComputeEnvironmentEksConfigurationPtrOutput values.
// You can construct a concrete instance of `ComputeEnvironmentEksConfigurationPtrInput` via:
//
//	        ComputeEnvironmentEksConfigurationArgs{...}
//
//	or:
//
//	        nil
type ComputeEnvironmentEksConfigurationPtrInput interface {
	pulumi.Input

	ToComputeEnvironmentEksConfigurationPtrOutput() ComputeEnvironmentEksConfigurationPtrOutput
	ToComputeEnvironmentEksConfigurationPtrOutputWithContext(context.Context) ComputeEnvironmentEksConfigurationPtrOutput
}

type computeEnvironmentEksConfigurationPtrType ComputeEnvironmentEksConfigurationArgs

func ComputeEnvironmentEksConfigurationPtr(v *ComputeEnvironmentEksConfigurationArgs) ComputeEnvironmentEksConfigurationPtrInput {
	return (*computeEnvironmentEksConfigurationPtrType)(v)
}

func (*computeEnvironmentEksConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentEksConfiguration)(nil)).Elem()
}

func (i *computeEnvironmentEksConfigurationPtrType) ToComputeEnvironmentEksConfigurationPtrOutput() ComputeEnvironmentEksConfigurationPtrOutput {
	return i.ToComputeEnvironmentEksConfigurationPtrOutputWithContext(context.Background())
}

func (i *computeEnvironmentEksConfigurationPtrType) ToComputeEnvironmentEksConfigurationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentEksConfigurationPtrOutput)
}

func (i *computeEnvironmentEksConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ComputeEnvironmentEksConfiguration] {
	return pulumix.Output[*ComputeEnvironmentEksConfiguration]{
		OutputState: i.ToComputeEnvironmentEksConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type ComputeEnvironmentEksConfigurationOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentEksConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentEksConfiguration)(nil)).Elem()
}

func (o ComputeEnvironmentEksConfigurationOutput) ToComputeEnvironmentEksConfigurationOutput() ComputeEnvironmentEksConfigurationOutput {
	return o
}

func (o ComputeEnvironmentEksConfigurationOutput) ToComputeEnvironmentEksConfigurationOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationOutput {
	return o
}

func (o ComputeEnvironmentEksConfigurationOutput) ToComputeEnvironmentEksConfigurationPtrOutput() ComputeEnvironmentEksConfigurationPtrOutput {
	return o.ToComputeEnvironmentEksConfigurationPtrOutputWithContext(context.Background())
}

func (o ComputeEnvironmentEksConfigurationOutput) ToComputeEnvironmentEksConfigurationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEnvironmentEksConfiguration) *ComputeEnvironmentEksConfiguration {
		return &v
	}).(ComputeEnvironmentEksConfigurationPtrOutput)
}

func (o ComputeEnvironmentEksConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironmentEksConfiguration] {
	return pulumix.Output[ComputeEnvironmentEksConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the Amazon EKS cluster.
func (o ComputeEnvironmentEksConfigurationOutput) EksClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEnvironmentEksConfiguration) string { return v.EksClusterArn }).(pulumi.StringOutput)
}

// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace.
func (o ComputeEnvironmentEksConfigurationOutput) KubernetesNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEnvironmentEksConfiguration) string { return v.KubernetesNamespace }).(pulumi.StringOutput)
}

type ComputeEnvironmentEksConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentEksConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentEksConfiguration)(nil)).Elem()
}

func (o ComputeEnvironmentEksConfigurationPtrOutput) ToComputeEnvironmentEksConfigurationPtrOutput() ComputeEnvironmentEksConfigurationPtrOutput {
	return o
}

func (o ComputeEnvironmentEksConfigurationPtrOutput) ToComputeEnvironmentEksConfigurationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationPtrOutput {
	return o
}

func (o ComputeEnvironmentEksConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ComputeEnvironmentEksConfiguration] {
	return pulumix.Output[*ComputeEnvironmentEksConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ComputeEnvironmentEksConfigurationPtrOutput) Elem() ComputeEnvironmentEksConfigurationOutput {
	return o.ApplyT(func(v *ComputeEnvironmentEksConfiguration) ComputeEnvironmentEksConfiguration {
		if v != nil {
			return *v
		}
		var ret ComputeEnvironmentEksConfiguration
		return ret
	}).(ComputeEnvironmentEksConfigurationOutput)
}

// The Amazon Resource Name (ARN) of the Amazon EKS cluster.
func (o ComputeEnvironmentEksConfigurationPtrOutput) EksClusterArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentEksConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.EksClusterArn
	}).(pulumi.StringPtrOutput)
}

// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace.
func (o ComputeEnvironmentEksConfigurationPtrOutput) KubernetesNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentEksConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KubernetesNamespace
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionRetryStrategy struct {
	// The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
	Attempts *int `pulumi:"attempts"`
	// The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. You may specify up to 5 configuration blocks.
	EvaluateOnExits []JobDefinitionRetryStrategyEvaluateOnExit `pulumi:"evaluateOnExits"`
}

// JobDefinitionRetryStrategyInput is an input type that accepts JobDefinitionRetryStrategyArgs and JobDefinitionRetryStrategyOutput values.
// You can construct a concrete instance of `JobDefinitionRetryStrategyInput` via:
//
//	JobDefinitionRetryStrategyArgs{...}
type JobDefinitionRetryStrategyInput interface {
	pulumi.Input

	ToJobDefinitionRetryStrategyOutput() JobDefinitionRetryStrategyOutput
	ToJobDefinitionRetryStrategyOutputWithContext(context.Context) JobDefinitionRetryStrategyOutput
}

type JobDefinitionRetryStrategyArgs struct {
	// The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
	Attempts pulumi.IntPtrInput `pulumi:"attempts"`
	// The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. You may specify up to 5 configuration blocks.
	EvaluateOnExits JobDefinitionRetryStrategyEvaluateOnExitArrayInput `pulumi:"evaluateOnExits"`
}

func (JobDefinitionRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRetryStrategy)(nil)).Elem()
}

func (i JobDefinitionRetryStrategyArgs) ToJobDefinitionRetryStrategyOutput() JobDefinitionRetryStrategyOutput {
	return i.ToJobDefinitionRetryStrategyOutputWithContext(context.Background())
}

func (i JobDefinitionRetryStrategyArgs) ToJobDefinitionRetryStrategyOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRetryStrategyOutput)
}

func (i JobDefinitionRetryStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[JobDefinitionRetryStrategy] {
	return pulumix.Output[JobDefinitionRetryStrategy]{
		OutputState: i.ToJobDefinitionRetryStrategyOutputWithContext(ctx).OutputState,
	}
}

func (i JobDefinitionRetryStrategyArgs) ToJobDefinitionRetryStrategyPtrOutput() JobDefinitionRetryStrategyPtrOutput {
	return i.ToJobDefinitionRetryStrategyPtrOutputWithContext(context.Background())
}

func (i JobDefinitionRetryStrategyArgs) ToJobDefinitionRetryStrategyPtrOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRetryStrategyOutput).ToJobDefinitionRetryStrategyPtrOutputWithContext(ctx)
}

// JobDefinitionRetryStrategyPtrInput is an input type that accepts JobDefinitionRetryStrategyArgs, JobDefinitionRetryStrategyPtr and JobDefinitionRetryStrategyPtrOutput values.
// You can construct a concrete instance of `JobDefinitionRetryStrategyPtrInput` via:
//
//	        JobDefinitionRetryStrategyArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionRetryStrategyPtrInput interface {
	pulumi.Input

	ToJobDefinitionRetryStrategyPtrOutput() JobDefinitionRetryStrategyPtrOutput
	ToJobDefinitionRetryStrategyPtrOutputWithContext(context.Context) JobDefinitionRetryStrategyPtrOutput
}

type jobDefinitionRetryStrategyPtrType JobDefinitionRetryStrategyArgs

func JobDefinitionRetryStrategyPtr(v *JobDefinitionRetryStrategyArgs) JobDefinitionRetryStrategyPtrInput {
	return (*jobDefinitionRetryStrategyPtrType)(v)
}

func (*jobDefinitionRetryStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionRetryStrategy)(nil)).Elem()
}

func (i *jobDefinitionRetryStrategyPtrType) ToJobDefinitionRetryStrategyPtrOutput() JobDefinitionRetryStrategyPtrOutput {
	return i.ToJobDefinitionRetryStrategyPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionRetryStrategyPtrType) ToJobDefinitionRetryStrategyPtrOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRetryStrategyPtrOutput)
}

func (i *jobDefinitionRetryStrategyPtrType) ToOutput(ctx context.Context) pulumix.Output[*JobDefinitionRetryStrategy] {
	return pulumix.Output[*JobDefinitionRetryStrategy]{
		OutputState: i.ToJobDefinitionRetryStrategyPtrOutputWithContext(ctx).OutputState,
	}
}

type JobDefinitionRetryStrategyOutput struct{ *pulumi.OutputState }

func (JobDefinitionRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRetryStrategy)(nil)).Elem()
}

func (o JobDefinitionRetryStrategyOutput) ToJobDefinitionRetryStrategyOutput() JobDefinitionRetryStrategyOutput {
	return o
}

func (o JobDefinitionRetryStrategyOutput) ToJobDefinitionRetryStrategyOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyOutput {
	return o
}

func (o JobDefinitionRetryStrategyOutput) ToJobDefinitionRetryStrategyPtrOutput() JobDefinitionRetryStrategyPtrOutput {
	return o.ToJobDefinitionRetryStrategyPtrOutputWithContext(context.Background())
}

func (o JobDefinitionRetryStrategyOutput) ToJobDefinitionRetryStrategyPtrOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionRetryStrategy) *JobDefinitionRetryStrategy {
		return &v
	}).(JobDefinitionRetryStrategyPtrOutput)
}

func (o JobDefinitionRetryStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[JobDefinitionRetryStrategy] {
	return pulumix.Output[JobDefinitionRetryStrategy]{
		OutputState: o.OutputState,
	}
}

// The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
func (o JobDefinitionRetryStrategyOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionRetryStrategy) *int { return v.Attempts }).(pulumi.IntPtrOutput)
}

// The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. You may specify up to 5 configuration blocks.
func (o JobDefinitionRetryStrategyOutput) EvaluateOnExits() JobDefinitionRetryStrategyEvaluateOnExitArrayOutput {
	return o.ApplyT(func(v JobDefinitionRetryStrategy) []JobDefinitionRetryStrategyEvaluateOnExit {
		return v.EvaluateOnExits
	}).(JobDefinitionRetryStrategyEvaluateOnExitArrayOutput)
}

type JobDefinitionRetryStrategyPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionRetryStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionRetryStrategy)(nil)).Elem()
}

func (o JobDefinitionRetryStrategyPtrOutput) ToJobDefinitionRetryStrategyPtrOutput() JobDefinitionRetryStrategyPtrOutput {
	return o
}

func (o JobDefinitionRetryStrategyPtrOutput) ToJobDefinitionRetryStrategyPtrOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyPtrOutput {
	return o
}

func (o JobDefinitionRetryStrategyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobDefinitionRetryStrategy] {
	return pulumix.Output[*JobDefinitionRetryStrategy]{
		OutputState: o.OutputState,
	}
}

func (o JobDefinitionRetryStrategyPtrOutput) Elem() JobDefinitionRetryStrategyOutput {
	return o.ApplyT(func(v *JobDefinitionRetryStrategy) JobDefinitionRetryStrategy {
		if v != nil {
			return *v
		}
		var ret JobDefinitionRetryStrategy
		return ret
	}).(JobDefinitionRetryStrategyOutput)
}

// The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
func (o JobDefinitionRetryStrategyPtrOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.Attempts
	}).(pulumi.IntPtrOutput)
}

// The evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. You may specify up to 5 configuration blocks.
func (o JobDefinitionRetryStrategyPtrOutput) EvaluateOnExits() JobDefinitionRetryStrategyEvaluateOnExitArrayOutput {
	return o.ApplyT(func(v *JobDefinitionRetryStrategy) []JobDefinitionRetryStrategyEvaluateOnExit {
		if v == nil {
			return nil
		}
		return v.EvaluateOnExits
	}).(JobDefinitionRetryStrategyEvaluateOnExitArrayOutput)
}

type JobDefinitionRetryStrategyEvaluateOnExit struct {
	// Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: `RETRY`, `EXIT`.
	Action string `pulumi:"action"`
	// A glob pattern to match against the decimal representation of the exit code returned for a job.
	OnExitCode *string `pulumi:"onExitCode"`
	// A glob pattern to match against the reason returned for a job.
	OnReason *string `pulumi:"onReason"`
	// A glob pattern to match against the status reason returned for a job.
	OnStatusReason *string `pulumi:"onStatusReason"`
}

// JobDefinitionRetryStrategyEvaluateOnExitInput is an input type that accepts JobDefinitionRetryStrategyEvaluateOnExitArgs and JobDefinitionRetryStrategyEvaluateOnExitOutput values.
// You can construct a concrete instance of `JobDefinitionRetryStrategyEvaluateOnExitInput` via:
//
//	JobDefinitionRetryStrategyEvaluateOnExitArgs{...}
type JobDefinitionRetryStrategyEvaluateOnExitInput interface {
	pulumi.Input

	ToJobDefinitionRetryStrategyEvaluateOnExitOutput() JobDefinitionRetryStrategyEvaluateOnExitOutput
	ToJobDefinitionRetryStrategyEvaluateOnExitOutputWithContext(context.Context) JobDefinitionRetryStrategyEvaluateOnExitOutput
}

type JobDefinitionRetryStrategyEvaluateOnExitArgs struct {
	// Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: `RETRY`, `EXIT`.
	Action pulumi.StringInput `pulumi:"action"`
	// A glob pattern to match against the decimal representation of the exit code returned for a job.
	OnExitCode pulumi.StringPtrInput `pulumi:"onExitCode"`
	// A glob pattern to match against the reason returned for a job.
	OnReason pulumi.StringPtrInput `pulumi:"onReason"`
	// A glob pattern to match against the status reason returned for a job.
	OnStatusReason pulumi.StringPtrInput `pulumi:"onStatusReason"`
}

func (JobDefinitionRetryStrategyEvaluateOnExitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRetryStrategyEvaluateOnExit)(nil)).Elem()
}

func (i JobDefinitionRetryStrategyEvaluateOnExitArgs) ToJobDefinitionRetryStrategyEvaluateOnExitOutput() JobDefinitionRetryStrategyEvaluateOnExitOutput {
	return i.ToJobDefinitionRetryStrategyEvaluateOnExitOutputWithContext(context.Background())
}

func (i JobDefinitionRetryStrategyEvaluateOnExitArgs) ToJobDefinitionRetryStrategyEvaluateOnExitOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyEvaluateOnExitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRetryStrategyEvaluateOnExitOutput)
}

func (i JobDefinitionRetryStrategyEvaluateOnExitArgs) ToOutput(ctx context.Context) pulumix.Output[JobDefinitionRetryStrategyEvaluateOnExit] {
	return pulumix.Output[JobDefinitionRetryStrategyEvaluateOnExit]{
		OutputState: i.ToJobDefinitionRetryStrategyEvaluateOnExitOutputWithContext(ctx).OutputState,
	}
}

// JobDefinitionRetryStrategyEvaluateOnExitArrayInput is an input type that accepts JobDefinitionRetryStrategyEvaluateOnExitArray and JobDefinitionRetryStrategyEvaluateOnExitArrayOutput values.
// You can construct a concrete instance of `JobDefinitionRetryStrategyEvaluateOnExitArrayInput` via:
//
//	JobDefinitionRetryStrategyEvaluateOnExitArray{ JobDefinitionRetryStrategyEvaluateOnExitArgs{...} }
type JobDefinitionRetryStrategyEvaluateOnExitArrayInput interface {
	pulumi.Input

	ToJobDefinitionRetryStrategyEvaluateOnExitArrayOutput() JobDefinitionRetryStrategyEvaluateOnExitArrayOutput
	ToJobDefinitionRetryStrategyEvaluateOnExitArrayOutputWithContext(context.Context) JobDefinitionRetryStrategyEvaluateOnExitArrayOutput
}

type JobDefinitionRetryStrategyEvaluateOnExitArray []JobDefinitionRetryStrategyEvaluateOnExitInput

func (JobDefinitionRetryStrategyEvaluateOnExitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionRetryStrategyEvaluateOnExit)(nil)).Elem()
}

func (i JobDefinitionRetryStrategyEvaluateOnExitArray) ToJobDefinitionRetryStrategyEvaluateOnExitArrayOutput() JobDefinitionRetryStrategyEvaluateOnExitArrayOutput {
	return i.ToJobDefinitionRetryStrategyEvaluateOnExitArrayOutputWithContext(context.Background())
}

func (i JobDefinitionRetryStrategyEvaluateOnExitArray) ToJobDefinitionRetryStrategyEvaluateOnExitArrayOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyEvaluateOnExitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRetryStrategyEvaluateOnExitArrayOutput)
}

func (i JobDefinitionRetryStrategyEvaluateOnExitArray) ToOutput(ctx context.Context) pulumix.Output[[]JobDefinitionRetryStrategyEvaluateOnExit] {
	return pulumix.Output[[]JobDefinitionRetryStrategyEvaluateOnExit]{
		OutputState: i.ToJobDefinitionRetryStrategyEvaluateOnExitArrayOutputWithContext(ctx).OutputState,
	}
}

type JobDefinitionRetryStrategyEvaluateOnExitOutput struct{ *pulumi.OutputState }

func (JobDefinitionRetryStrategyEvaluateOnExitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRetryStrategyEvaluateOnExit)(nil)).Elem()
}

func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) ToJobDefinitionRetryStrategyEvaluateOnExitOutput() JobDefinitionRetryStrategyEvaluateOnExitOutput {
	return o
}

func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) ToJobDefinitionRetryStrategyEvaluateOnExitOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyEvaluateOnExitOutput {
	return o
}

func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) ToOutput(ctx context.Context) pulumix.Output[JobDefinitionRetryStrategyEvaluateOnExit] {
	return pulumix.Output[JobDefinitionRetryStrategyEvaluateOnExit]{
		OutputState: o.OutputState,
	}
}

// Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: `RETRY`, `EXIT`.
func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionRetryStrategyEvaluateOnExit) string { return v.Action }).(pulumi.StringOutput)
}

// A glob pattern to match against the decimal representation of the exit code returned for a job.
func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) OnExitCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionRetryStrategyEvaluateOnExit) *string { return v.OnExitCode }).(pulumi.StringPtrOutput)
}

// A glob pattern to match against the reason returned for a job.
func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) OnReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionRetryStrategyEvaluateOnExit) *string { return v.OnReason }).(pulumi.StringPtrOutput)
}

// A glob pattern to match against the status reason returned for a job.
func (o JobDefinitionRetryStrategyEvaluateOnExitOutput) OnStatusReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionRetryStrategyEvaluateOnExit) *string { return v.OnStatusReason }).(pulumi.StringPtrOutput)
}

type JobDefinitionRetryStrategyEvaluateOnExitArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionRetryStrategyEvaluateOnExitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionRetryStrategyEvaluateOnExit)(nil)).Elem()
}

func (o JobDefinitionRetryStrategyEvaluateOnExitArrayOutput) ToJobDefinitionRetryStrategyEvaluateOnExitArrayOutput() JobDefinitionRetryStrategyEvaluateOnExitArrayOutput {
	return o
}

func (o JobDefinitionRetryStrategyEvaluateOnExitArrayOutput) ToJobDefinitionRetryStrategyEvaluateOnExitArrayOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyEvaluateOnExitArrayOutput {
	return o
}

func (o JobDefinitionRetryStrategyEvaluateOnExitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]JobDefinitionRetryStrategyEvaluateOnExit] {
	return pulumix.Output[[]JobDefinitionRetryStrategyEvaluateOnExit]{
		OutputState: o.OutputState,
	}
}

func (o JobDefinitionRetryStrategyEvaluateOnExitArrayOutput) Index(i pulumi.IntInput) JobDefinitionRetryStrategyEvaluateOnExitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionRetryStrategyEvaluateOnExit {
		return vs[0].([]JobDefinitionRetryStrategyEvaluateOnExit)[vs[1].(int)]
	}).(JobDefinitionRetryStrategyEvaluateOnExitOutput)
}

type JobDefinitionTimeout struct {
	// The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.
	AttemptDurationSeconds *int `pulumi:"attemptDurationSeconds"`
}

// JobDefinitionTimeoutInput is an input type that accepts JobDefinitionTimeoutArgs and JobDefinitionTimeoutOutput values.
// You can construct a concrete instance of `JobDefinitionTimeoutInput` via:
//
//	JobDefinitionTimeoutArgs{...}
type JobDefinitionTimeoutInput interface {
	pulumi.Input

	ToJobDefinitionTimeoutOutput() JobDefinitionTimeoutOutput
	ToJobDefinitionTimeoutOutputWithContext(context.Context) JobDefinitionTimeoutOutput
}

type JobDefinitionTimeoutArgs struct {
	// The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.
	AttemptDurationSeconds pulumi.IntPtrInput `pulumi:"attemptDurationSeconds"`
}

func (JobDefinitionTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTimeout)(nil)).Elem()
}

func (i JobDefinitionTimeoutArgs) ToJobDefinitionTimeoutOutput() JobDefinitionTimeoutOutput {
	return i.ToJobDefinitionTimeoutOutputWithContext(context.Background())
}

func (i JobDefinitionTimeoutArgs) ToJobDefinitionTimeoutOutputWithContext(ctx context.Context) JobDefinitionTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTimeoutOutput)
}

func (i JobDefinitionTimeoutArgs) ToOutput(ctx context.Context) pulumix.Output[JobDefinitionTimeout] {
	return pulumix.Output[JobDefinitionTimeout]{
		OutputState: i.ToJobDefinitionTimeoutOutputWithContext(ctx).OutputState,
	}
}

func (i JobDefinitionTimeoutArgs) ToJobDefinitionTimeoutPtrOutput() JobDefinitionTimeoutPtrOutput {
	return i.ToJobDefinitionTimeoutPtrOutputWithContext(context.Background())
}

func (i JobDefinitionTimeoutArgs) ToJobDefinitionTimeoutPtrOutputWithContext(ctx context.Context) JobDefinitionTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTimeoutOutput).ToJobDefinitionTimeoutPtrOutputWithContext(ctx)
}

// JobDefinitionTimeoutPtrInput is an input type that accepts JobDefinitionTimeoutArgs, JobDefinitionTimeoutPtr and JobDefinitionTimeoutPtrOutput values.
// You can construct a concrete instance of `JobDefinitionTimeoutPtrInput` via:
//
//	        JobDefinitionTimeoutArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionTimeoutPtrInput interface {
	pulumi.Input

	ToJobDefinitionTimeoutPtrOutput() JobDefinitionTimeoutPtrOutput
	ToJobDefinitionTimeoutPtrOutputWithContext(context.Context) JobDefinitionTimeoutPtrOutput
}

type jobDefinitionTimeoutPtrType JobDefinitionTimeoutArgs

func JobDefinitionTimeoutPtr(v *JobDefinitionTimeoutArgs) JobDefinitionTimeoutPtrInput {
	return (*jobDefinitionTimeoutPtrType)(v)
}

func (*jobDefinitionTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionTimeout)(nil)).Elem()
}

func (i *jobDefinitionTimeoutPtrType) ToJobDefinitionTimeoutPtrOutput() JobDefinitionTimeoutPtrOutput {
	return i.ToJobDefinitionTimeoutPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionTimeoutPtrType) ToJobDefinitionTimeoutPtrOutputWithContext(ctx context.Context) JobDefinitionTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTimeoutPtrOutput)
}

func (i *jobDefinitionTimeoutPtrType) ToOutput(ctx context.Context) pulumix.Output[*JobDefinitionTimeout] {
	return pulumix.Output[*JobDefinitionTimeout]{
		OutputState: i.ToJobDefinitionTimeoutPtrOutputWithContext(ctx).OutputState,
	}
}

type JobDefinitionTimeoutOutput struct{ *pulumi.OutputState }

func (JobDefinitionTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTimeout)(nil)).Elem()
}

func (o JobDefinitionTimeoutOutput) ToJobDefinitionTimeoutOutput() JobDefinitionTimeoutOutput {
	return o
}

func (o JobDefinitionTimeoutOutput) ToJobDefinitionTimeoutOutputWithContext(ctx context.Context) JobDefinitionTimeoutOutput {
	return o
}

func (o JobDefinitionTimeoutOutput) ToJobDefinitionTimeoutPtrOutput() JobDefinitionTimeoutPtrOutput {
	return o.ToJobDefinitionTimeoutPtrOutputWithContext(context.Background())
}

func (o JobDefinitionTimeoutOutput) ToJobDefinitionTimeoutPtrOutputWithContext(ctx context.Context) JobDefinitionTimeoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionTimeout) *JobDefinitionTimeout {
		return &v
	}).(JobDefinitionTimeoutPtrOutput)
}

func (o JobDefinitionTimeoutOutput) ToOutput(ctx context.Context) pulumix.Output[JobDefinitionTimeout] {
	return pulumix.Output[JobDefinitionTimeout]{
		OutputState: o.OutputState,
	}
}

// The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.
func (o JobDefinitionTimeoutOutput) AttemptDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionTimeout) *int { return v.AttemptDurationSeconds }).(pulumi.IntPtrOutput)
}

type JobDefinitionTimeoutPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionTimeout)(nil)).Elem()
}

func (o JobDefinitionTimeoutPtrOutput) ToJobDefinitionTimeoutPtrOutput() JobDefinitionTimeoutPtrOutput {
	return o
}

func (o JobDefinitionTimeoutPtrOutput) ToJobDefinitionTimeoutPtrOutputWithContext(ctx context.Context) JobDefinitionTimeoutPtrOutput {
	return o
}

func (o JobDefinitionTimeoutPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobDefinitionTimeout] {
	return pulumix.Output[*JobDefinitionTimeout]{
		OutputState: o.OutputState,
	}
}

func (o JobDefinitionTimeoutPtrOutput) Elem() JobDefinitionTimeoutOutput {
	return o.ApplyT(func(v *JobDefinitionTimeout) JobDefinitionTimeout {
		if v != nil {
			return *v
		}
		var ret JobDefinitionTimeout
		return ret
	}).(JobDefinitionTimeoutOutput)
}

// The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.
func (o JobDefinitionTimeoutPtrOutput) AttemptDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionTimeout) *int {
		if v == nil {
			return nil
		}
		return v.AttemptDurationSeconds
	}).(pulumi.IntPtrOutput)
}

type JobQueueTimeouts struct {
	Create *string `pulumi:"create"`
	Delete *string `pulumi:"delete"`
	Update *string `pulumi:"update"`
}

// JobQueueTimeoutsInput is an input type that accepts JobQueueTimeoutsArgs and JobQueueTimeoutsOutput values.
// You can construct a concrete instance of `JobQueueTimeoutsInput` via:
//
//	JobQueueTimeoutsArgs{...}
type JobQueueTimeoutsInput interface {
	pulumi.Input

	ToJobQueueTimeoutsOutput() JobQueueTimeoutsOutput
	ToJobQueueTimeoutsOutputWithContext(context.Context) JobQueueTimeoutsOutput
}

type JobQueueTimeoutsArgs struct {
	Create pulumi.StringPtrInput `pulumi:"create"`
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (JobQueueTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueueTimeouts)(nil)).Elem()
}

func (i JobQueueTimeoutsArgs) ToJobQueueTimeoutsOutput() JobQueueTimeoutsOutput {
	return i.ToJobQueueTimeoutsOutputWithContext(context.Background())
}

func (i JobQueueTimeoutsArgs) ToJobQueueTimeoutsOutputWithContext(ctx context.Context) JobQueueTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueueTimeoutsOutput)
}

func (i JobQueueTimeoutsArgs) ToOutput(ctx context.Context) pulumix.Output[JobQueueTimeouts] {
	return pulumix.Output[JobQueueTimeouts]{
		OutputState: i.ToJobQueueTimeoutsOutputWithContext(ctx).OutputState,
	}
}

func (i JobQueueTimeoutsArgs) ToJobQueueTimeoutsPtrOutput() JobQueueTimeoutsPtrOutput {
	return i.ToJobQueueTimeoutsPtrOutputWithContext(context.Background())
}

func (i JobQueueTimeoutsArgs) ToJobQueueTimeoutsPtrOutputWithContext(ctx context.Context) JobQueueTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueueTimeoutsOutput).ToJobQueueTimeoutsPtrOutputWithContext(ctx)
}

// JobQueueTimeoutsPtrInput is an input type that accepts JobQueueTimeoutsArgs, JobQueueTimeoutsPtr and JobQueueTimeoutsPtrOutput values.
// You can construct a concrete instance of `JobQueueTimeoutsPtrInput` via:
//
//	        JobQueueTimeoutsArgs{...}
//
//	or:
//
//	        nil
type JobQueueTimeoutsPtrInput interface {
	pulumi.Input

	ToJobQueueTimeoutsPtrOutput() JobQueueTimeoutsPtrOutput
	ToJobQueueTimeoutsPtrOutputWithContext(context.Context) JobQueueTimeoutsPtrOutput
}

type jobQueueTimeoutsPtrType JobQueueTimeoutsArgs

func JobQueueTimeoutsPtr(v *JobQueueTimeoutsArgs) JobQueueTimeoutsPtrInput {
	return (*jobQueueTimeoutsPtrType)(v)
}

func (*jobQueueTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQueueTimeouts)(nil)).Elem()
}

func (i *jobQueueTimeoutsPtrType) ToJobQueueTimeoutsPtrOutput() JobQueueTimeoutsPtrOutput {
	return i.ToJobQueueTimeoutsPtrOutputWithContext(context.Background())
}

func (i *jobQueueTimeoutsPtrType) ToJobQueueTimeoutsPtrOutputWithContext(ctx context.Context) JobQueueTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueueTimeoutsPtrOutput)
}

func (i *jobQueueTimeoutsPtrType) ToOutput(ctx context.Context) pulumix.Output[*JobQueueTimeouts] {
	return pulumix.Output[*JobQueueTimeouts]{
		OutputState: i.ToJobQueueTimeoutsPtrOutputWithContext(ctx).OutputState,
	}
}

type JobQueueTimeoutsOutput struct{ *pulumi.OutputState }

func (JobQueueTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueueTimeouts)(nil)).Elem()
}

func (o JobQueueTimeoutsOutput) ToJobQueueTimeoutsOutput() JobQueueTimeoutsOutput {
	return o
}

func (o JobQueueTimeoutsOutput) ToJobQueueTimeoutsOutputWithContext(ctx context.Context) JobQueueTimeoutsOutput {
	return o
}

func (o JobQueueTimeoutsOutput) ToJobQueueTimeoutsPtrOutput() JobQueueTimeoutsPtrOutput {
	return o.ToJobQueueTimeoutsPtrOutputWithContext(context.Background())
}

func (o JobQueueTimeoutsOutput) ToJobQueueTimeoutsPtrOutputWithContext(ctx context.Context) JobQueueTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobQueueTimeouts) *JobQueueTimeouts {
		return &v
	}).(JobQueueTimeoutsPtrOutput)
}

func (o JobQueueTimeoutsOutput) ToOutput(ctx context.Context) pulumix.Output[JobQueueTimeouts] {
	return pulumix.Output[JobQueueTimeouts]{
		OutputState: o.OutputState,
	}
}

func (o JobQueueTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueueTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

func (o JobQueueTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueueTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

func (o JobQueueTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueueTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type JobQueueTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (JobQueueTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQueueTimeouts)(nil)).Elem()
}

func (o JobQueueTimeoutsPtrOutput) ToJobQueueTimeoutsPtrOutput() JobQueueTimeoutsPtrOutput {
	return o
}

func (o JobQueueTimeoutsPtrOutput) ToJobQueueTimeoutsPtrOutputWithContext(ctx context.Context) JobQueueTimeoutsPtrOutput {
	return o
}

func (o JobQueueTimeoutsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobQueueTimeouts] {
	return pulumix.Output[*JobQueueTimeouts]{
		OutputState: o.OutputState,
	}
}

func (o JobQueueTimeoutsPtrOutput) Elem() JobQueueTimeoutsOutput {
	return o.ApplyT(func(v *JobQueueTimeouts) JobQueueTimeouts {
		if v != nil {
			return *v
		}
		var ret JobQueueTimeouts
		return ret
	}).(JobQueueTimeoutsOutput)
}

func (o JobQueueTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueueTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

func (o JobQueueTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueueTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

func (o JobQueueTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueueTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type SchedulingPolicyFairSharePolicy struct {
	// A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
	ComputeReservation *int `pulumi:"computeReservation"`
	ShareDecaySeconds  *int `pulumi:"shareDecaySeconds"`
	// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
	ShareDistributions []SchedulingPolicyFairSharePolicyShareDistribution `pulumi:"shareDistributions"`
}

// SchedulingPolicyFairSharePolicyInput is an input type that accepts SchedulingPolicyFairSharePolicyArgs and SchedulingPolicyFairSharePolicyOutput values.
// You can construct a concrete instance of `SchedulingPolicyFairSharePolicyInput` via:
//
//	SchedulingPolicyFairSharePolicyArgs{...}
type SchedulingPolicyFairSharePolicyInput interface {
	pulumi.Input

	ToSchedulingPolicyFairSharePolicyOutput() SchedulingPolicyFairSharePolicyOutput
	ToSchedulingPolicyFairSharePolicyOutputWithContext(context.Context) SchedulingPolicyFairSharePolicyOutput
}

type SchedulingPolicyFairSharePolicyArgs struct {
	// A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
	ComputeReservation pulumi.IntPtrInput `pulumi:"computeReservation"`
	ShareDecaySeconds  pulumi.IntPtrInput `pulumi:"shareDecaySeconds"`
	// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
	ShareDistributions SchedulingPolicyFairSharePolicyShareDistributionArrayInput `pulumi:"shareDistributions"`
}

func (SchedulingPolicyFairSharePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (i SchedulingPolicyFairSharePolicyArgs) ToSchedulingPolicyFairSharePolicyOutput() SchedulingPolicyFairSharePolicyOutput {
	return i.ToSchedulingPolicyFairSharePolicyOutputWithContext(context.Background())
}

func (i SchedulingPolicyFairSharePolicyArgs) ToSchedulingPolicyFairSharePolicyOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyFairSharePolicyOutput)
}

func (i SchedulingPolicyFairSharePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[SchedulingPolicyFairSharePolicy] {
	return pulumix.Output[SchedulingPolicyFairSharePolicy]{
		OutputState: i.ToSchedulingPolicyFairSharePolicyOutputWithContext(ctx).OutputState,
	}
}

func (i SchedulingPolicyFairSharePolicyArgs) ToSchedulingPolicyFairSharePolicyPtrOutput() SchedulingPolicyFairSharePolicyPtrOutput {
	return i.ToSchedulingPolicyFairSharePolicyPtrOutputWithContext(context.Background())
}

func (i SchedulingPolicyFairSharePolicyArgs) ToSchedulingPolicyFairSharePolicyPtrOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyFairSharePolicyOutput).ToSchedulingPolicyFairSharePolicyPtrOutputWithContext(ctx)
}

// SchedulingPolicyFairSharePolicyPtrInput is an input type that accepts SchedulingPolicyFairSharePolicyArgs, SchedulingPolicyFairSharePolicyPtr and SchedulingPolicyFairSharePolicyPtrOutput values.
// You can construct a concrete instance of `SchedulingPolicyFairSharePolicyPtrInput` via:
//
//	        SchedulingPolicyFairSharePolicyArgs{...}
//
//	or:
//
//	        nil
type SchedulingPolicyFairSharePolicyPtrInput interface {
	pulumi.Input

	ToSchedulingPolicyFairSharePolicyPtrOutput() SchedulingPolicyFairSharePolicyPtrOutput
	ToSchedulingPolicyFairSharePolicyPtrOutputWithContext(context.Context) SchedulingPolicyFairSharePolicyPtrOutput
}

type schedulingPolicyFairSharePolicyPtrType SchedulingPolicyFairSharePolicyArgs

func SchedulingPolicyFairSharePolicyPtr(v *SchedulingPolicyFairSharePolicyArgs) SchedulingPolicyFairSharePolicyPtrInput {
	return (*schedulingPolicyFairSharePolicyPtrType)(v)
}

func (*schedulingPolicyFairSharePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (i *schedulingPolicyFairSharePolicyPtrType) ToSchedulingPolicyFairSharePolicyPtrOutput() SchedulingPolicyFairSharePolicyPtrOutput {
	return i.ToSchedulingPolicyFairSharePolicyPtrOutputWithContext(context.Background())
}

func (i *schedulingPolicyFairSharePolicyPtrType) ToSchedulingPolicyFairSharePolicyPtrOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyFairSharePolicyPtrOutput)
}

func (i *schedulingPolicyFairSharePolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*SchedulingPolicyFairSharePolicy] {
	return pulumix.Output[*SchedulingPolicyFairSharePolicy]{
		OutputState: i.ToSchedulingPolicyFairSharePolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type SchedulingPolicyFairSharePolicyOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyFairSharePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (o SchedulingPolicyFairSharePolicyOutput) ToSchedulingPolicyFairSharePolicyOutput() SchedulingPolicyFairSharePolicyOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyOutput) ToSchedulingPolicyFairSharePolicyOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyOutput) ToSchedulingPolicyFairSharePolicyPtrOutput() SchedulingPolicyFairSharePolicyPtrOutput {
	return o.ToSchedulingPolicyFairSharePolicyPtrOutputWithContext(context.Background())
}

func (o SchedulingPolicyFairSharePolicyOutput) ToSchedulingPolicyFairSharePolicyPtrOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulingPolicyFairSharePolicy) *SchedulingPolicyFairSharePolicy {
		return &v
	}).(SchedulingPolicyFairSharePolicyPtrOutput)
}

func (o SchedulingPolicyFairSharePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[SchedulingPolicyFairSharePolicy] {
	return pulumix.Output[SchedulingPolicyFairSharePolicy]{
		OutputState: o.OutputState,
	}
}

// A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
func (o SchedulingPolicyFairSharePolicyOutput) ComputeReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchedulingPolicyFairSharePolicy) *int { return v.ComputeReservation }).(pulumi.IntPtrOutput)
}

func (o SchedulingPolicyFairSharePolicyOutput) ShareDecaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchedulingPolicyFairSharePolicy) *int { return v.ShareDecaySeconds }).(pulumi.IntPtrOutput)
}

// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
func (o SchedulingPolicyFairSharePolicyOutput) ShareDistributions() SchedulingPolicyFairSharePolicyShareDistributionArrayOutput {
	return o.ApplyT(func(v SchedulingPolicyFairSharePolicy) []SchedulingPolicyFairSharePolicyShareDistribution {
		return v.ShareDistributions
	}).(SchedulingPolicyFairSharePolicyShareDistributionArrayOutput)
}

type SchedulingPolicyFairSharePolicyPtrOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyFairSharePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (o SchedulingPolicyFairSharePolicyPtrOutput) ToSchedulingPolicyFairSharePolicyPtrOutput() SchedulingPolicyFairSharePolicyPtrOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyPtrOutput) ToSchedulingPolicyFairSharePolicyPtrOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyPtrOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchedulingPolicyFairSharePolicy] {
	return pulumix.Output[*SchedulingPolicyFairSharePolicy]{
		OutputState: o.OutputState,
	}
}

func (o SchedulingPolicyFairSharePolicyPtrOutput) Elem() SchedulingPolicyFairSharePolicyOutput {
	return o.ApplyT(func(v *SchedulingPolicyFairSharePolicy) SchedulingPolicyFairSharePolicy {
		if v != nil {
			return *v
		}
		var ret SchedulingPolicyFairSharePolicy
		return ret
	}).(SchedulingPolicyFairSharePolicyOutput)
}

// A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
func (o SchedulingPolicyFairSharePolicyPtrOutput) ComputeReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchedulingPolicyFairSharePolicy) *int {
		if v == nil {
			return nil
		}
		return v.ComputeReservation
	}).(pulumi.IntPtrOutput)
}

func (o SchedulingPolicyFairSharePolicyPtrOutput) ShareDecaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchedulingPolicyFairSharePolicy) *int {
		if v == nil {
			return nil
		}
		return v.ShareDecaySeconds
	}).(pulumi.IntPtrOutput)
}

// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
func (o SchedulingPolicyFairSharePolicyPtrOutput) ShareDistributions() SchedulingPolicyFairSharePolicyShareDistributionArrayOutput {
	return o.ApplyT(func(v *SchedulingPolicyFairSharePolicy) []SchedulingPolicyFairSharePolicyShareDistribution {
		if v == nil {
			return nil
		}
		return v.ShareDistributions
	}).(SchedulingPolicyFairSharePolicyShareDistributionArrayOutput)
}

type SchedulingPolicyFairSharePolicyShareDistribution struct {
	// A fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	ShareIdentifier string `pulumi:"shareIdentifier"`
	// The weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	WeightFactor *float64 `pulumi:"weightFactor"`
}

// SchedulingPolicyFairSharePolicyShareDistributionInput is an input type that accepts SchedulingPolicyFairSharePolicyShareDistributionArgs and SchedulingPolicyFairSharePolicyShareDistributionOutput values.
// You can construct a concrete instance of `SchedulingPolicyFairSharePolicyShareDistributionInput` via:
//
//	SchedulingPolicyFairSharePolicyShareDistributionArgs{...}
type SchedulingPolicyFairSharePolicyShareDistributionInput interface {
	pulumi.Input

	ToSchedulingPolicyFairSharePolicyShareDistributionOutput() SchedulingPolicyFairSharePolicyShareDistributionOutput
	ToSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(context.Context) SchedulingPolicyFairSharePolicyShareDistributionOutput
}

type SchedulingPolicyFairSharePolicyShareDistributionArgs struct {
	// A fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	ShareIdentifier pulumi.StringInput `pulumi:"shareIdentifier"`
	// The weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	WeightFactor pulumi.Float64PtrInput `pulumi:"weightFactor"`
}

func (SchedulingPolicyFairSharePolicyShareDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (i SchedulingPolicyFairSharePolicyShareDistributionArgs) ToSchedulingPolicyFairSharePolicyShareDistributionOutput() SchedulingPolicyFairSharePolicyShareDistributionOutput {
	return i.ToSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(context.Background())
}

func (i SchedulingPolicyFairSharePolicyShareDistributionArgs) ToSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyShareDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyFairSharePolicyShareDistributionOutput)
}

func (i SchedulingPolicyFairSharePolicyShareDistributionArgs) ToOutput(ctx context.Context) pulumix.Output[SchedulingPolicyFairSharePolicyShareDistribution] {
	return pulumix.Output[SchedulingPolicyFairSharePolicyShareDistribution]{
		OutputState: i.ToSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(ctx).OutputState,
	}
}

// SchedulingPolicyFairSharePolicyShareDistributionArrayInput is an input type that accepts SchedulingPolicyFairSharePolicyShareDistributionArray and SchedulingPolicyFairSharePolicyShareDistributionArrayOutput values.
// You can construct a concrete instance of `SchedulingPolicyFairSharePolicyShareDistributionArrayInput` via:
//
//	SchedulingPolicyFairSharePolicyShareDistributionArray{ SchedulingPolicyFairSharePolicyShareDistributionArgs{...} }
type SchedulingPolicyFairSharePolicyShareDistributionArrayInput interface {
	pulumi.Input

	ToSchedulingPolicyFairSharePolicyShareDistributionArrayOutput() SchedulingPolicyFairSharePolicyShareDistributionArrayOutput
	ToSchedulingPolicyFairSharePolicyShareDistributionArrayOutputWithContext(context.Context) SchedulingPolicyFairSharePolicyShareDistributionArrayOutput
}

type SchedulingPolicyFairSharePolicyShareDistributionArray []SchedulingPolicyFairSharePolicyShareDistributionInput

func (SchedulingPolicyFairSharePolicyShareDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (i SchedulingPolicyFairSharePolicyShareDistributionArray) ToSchedulingPolicyFairSharePolicyShareDistributionArrayOutput() SchedulingPolicyFairSharePolicyShareDistributionArrayOutput {
	return i.ToSchedulingPolicyFairSharePolicyShareDistributionArrayOutputWithContext(context.Background())
}

func (i SchedulingPolicyFairSharePolicyShareDistributionArray) ToSchedulingPolicyFairSharePolicyShareDistributionArrayOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyShareDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyFairSharePolicyShareDistributionArrayOutput)
}

func (i SchedulingPolicyFairSharePolicyShareDistributionArray) ToOutput(ctx context.Context) pulumix.Output[[]SchedulingPolicyFairSharePolicyShareDistribution] {
	return pulumix.Output[[]SchedulingPolicyFairSharePolicyShareDistribution]{
		OutputState: i.ToSchedulingPolicyFairSharePolicyShareDistributionArrayOutputWithContext(ctx).OutputState,
	}
}

type SchedulingPolicyFairSharePolicyShareDistributionOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyFairSharePolicyShareDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (o SchedulingPolicyFairSharePolicyShareDistributionOutput) ToSchedulingPolicyFairSharePolicyShareDistributionOutput() SchedulingPolicyFairSharePolicyShareDistributionOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyShareDistributionOutput) ToSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyShareDistributionOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyShareDistributionOutput) ToOutput(ctx context.Context) pulumix.Output[SchedulingPolicyFairSharePolicyShareDistribution] {
	return pulumix.Output[SchedulingPolicyFairSharePolicyShareDistribution]{
		OutputState: o.OutputState,
	}
}

// A fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
func (o SchedulingPolicyFairSharePolicyShareDistributionOutput) ShareIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulingPolicyFairSharePolicyShareDistribution) string { return v.ShareIdentifier }).(pulumi.StringOutput)
}

// The weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
func (o SchedulingPolicyFairSharePolicyShareDistributionOutput) WeightFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SchedulingPolicyFairSharePolicyShareDistribution) *float64 { return v.WeightFactor }).(pulumi.Float64PtrOutput)
}

type SchedulingPolicyFairSharePolicyShareDistributionArrayOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyFairSharePolicyShareDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (o SchedulingPolicyFairSharePolicyShareDistributionArrayOutput) ToSchedulingPolicyFairSharePolicyShareDistributionArrayOutput() SchedulingPolicyFairSharePolicyShareDistributionArrayOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyShareDistributionArrayOutput) ToSchedulingPolicyFairSharePolicyShareDistributionArrayOutputWithContext(ctx context.Context) SchedulingPolicyFairSharePolicyShareDistributionArrayOutput {
	return o
}

func (o SchedulingPolicyFairSharePolicyShareDistributionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SchedulingPolicyFairSharePolicyShareDistribution] {
	return pulumix.Output[[]SchedulingPolicyFairSharePolicyShareDistribution]{
		OutputState: o.OutputState,
	}
}

func (o SchedulingPolicyFairSharePolicyShareDistributionArrayOutput) Index(i pulumi.IntInput) SchedulingPolicyFairSharePolicyShareDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchedulingPolicyFairSharePolicyShareDistribution {
		return vs[0].([]SchedulingPolicyFairSharePolicyShareDistribution)[vs[1].(int)]
	}).(SchedulingPolicyFairSharePolicyShareDistributionOutput)
}

type GetJobQueueComputeEnvironmentOrder struct {
	ComputeEnvironment string `pulumi:"computeEnvironment"`
	Order              int    `pulumi:"order"`
}

// GetJobQueueComputeEnvironmentOrderInput is an input type that accepts GetJobQueueComputeEnvironmentOrderArgs and GetJobQueueComputeEnvironmentOrderOutput values.
// You can construct a concrete instance of `GetJobQueueComputeEnvironmentOrderInput` via:
//
//	GetJobQueueComputeEnvironmentOrderArgs{...}
type GetJobQueueComputeEnvironmentOrderInput interface {
	pulumi.Input

	ToGetJobQueueComputeEnvironmentOrderOutput() GetJobQueueComputeEnvironmentOrderOutput
	ToGetJobQueueComputeEnvironmentOrderOutputWithContext(context.Context) GetJobQueueComputeEnvironmentOrderOutput
}

type GetJobQueueComputeEnvironmentOrderArgs struct {
	ComputeEnvironment pulumi.StringInput `pulumi:"computeEnvironment"`
	Order              pulumi.IntInput    `pulumi:"order"`
}

func (GetJobQueueComputeEnvironmentOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobQueueComputeEnvironmentOrder)(nil)).Elem()
}

func (i GetJobQueueComputeEnvironmentOrderArgs) ToGetJobQueueComputeEnvironmentOrderOutput() GetJobQueueComputeEnvironmentOrderOutput {
	return i.ToGetJobQueueComputeEnvironmentOrderOutputWithContext(context.Background())
}

func (i GetJobQueueComputeEnvironmentOrderArgs) ToGetJobQueueComputeEnvironmentOrderOutputWithContext(ctx context.Context) GetJobQueueComputeEnvironmentOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobQueueComputeEnvironmentOrderOutput)
}

func (i GetJobQueueComputeEnvironmentOrderArgs) ToOutput(ctx context.Context) pulumix.Output[GetJobQueueComputeEnvironmentOrder] {
	return pulumix.Output[GetJobQueueComputeEnvironmentOrder]{
		OutputState: i.ToGetJobQueueComputeEnvironmentOrderOutputWithContext(ctx).OutputState,
	}
}

// GetJobQueueComputeEnvironmentOrderArrayInput is an input type that accepts GetJobQueueComputeEnvironmentOrderArray and GetJobQueueComputeEnvironmentOrderArrayOutput values.
// You can construct a concrete instance of `GetJobQueueComputeEnvironmentOrderArrayInput` via:
//
//	GetJobQueueComputeEnvironmentOrderArray{ GetJobQueueComputeEnvironmentOrderArgs{...} }
type GetJobQueueComputeEnvironmentOrderArrayInput interface {
	pulumi.Input

	ToGetJobQueueComputeEnvironmentOrderArrayOutput() GetJobQueueComputeEnvironmentOrderArrayOutput
	ToGetJobQueueComputeEnvironmentOrderArrayOutputWithContext(context.Context) GetJobQueueComputeEnvironmentOrderArrayOutput
}

type GetJobQueueComputeEnvironmentOrderArray []GetJobQueueComputeEnvironmentOrderInput

func (GetJobQueueComputeEnvironmentOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobQueueComputeEnvironmentOrder)(nil)).Elem()
}

func (i GetJobQueueComputeEnvironmentOrderArray) ToGetJobQueueComputeEnvironmentOrderArrayOutput() GetJobQueueComputeEnvironmentOrderArrayOutput {
	return i.ToGetJobQueueComputeEnvironmentOrderArrayOutputWithContext(context.Background())
}

func (i GetJobQueueComputeEnvironmentOrderArray) ToGetJobQueueComputeEnvironmentOrderArrayOutputWithContext(ctx context.Context) GetJobQueueComputeEnvironmentOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobQueueComputeEnvironmentOrderArrayOutput)
}

func (i GetJobQueueComputeEnvironmentOrderArray) ToOutput(ctx context.Context) pulumix.Output[[]GetJobQueueComputeEnvironmentOrder] {
	return pulumix.Output[[]GetJobQueueComputeEnvironmentOrder]{
		OutputState: i.ToGetJobQueueComputeEnvironmentOrderArrayOutputWithContext(ctx).OutputState,
	}
}

type GetJobQueueComputeEnvironmentOrderOutput struct{ *pulumi.OutputState }

func (GetJobQueueComputeEnvironmentOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobQueueComputeEnvironmentOrder)(nil)).Elem()
}

func (o GetJobQueueComputeEnvironmentOrderOutput) ToGetJobQueueComputeEnvironmentOrderOutput() GetJobQueueComputeEnvironmentOrderOutput {
	return o
}

func (o GetJobQueueComputeEnvironmentOrderOutput) ToGetJobQueueComputeEnvironmentOrderOutputWithContext(ctx context.Context) GetJobQueueComputeEnvironmentOrderOutput {
	return o
}

func (o GetJobQueueComputeEnvironmentOrderOutput) ToOutput(ctx context.Context) pulumix.Output[GetJobQueueComputeEnvironmentOrder] {
	return pulumix.Output[GetJobQueueComputeEnvironmentOrder]{
		OutputState: o.OutputState,
	}
}

func (o GetJobQueueComputeEnvironmentOrderOutput) ComputeEnvironment() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobQueueComputeEnvironmentOrder) string { return v.ComputeEnvironment }).(pulumi.StringOutput)
}

func (o GetJobQueueComputeEnvironmentOrderOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v GetJobQueueComputeEnvironmentOrder) int { return v.Order }).(pulumi.IntOutput)
}

type GetJobQueueComputeEnvironmentOrderArrayOutput struct{ *pulumi.OutputState }

func (GetJobQueueComputeEnvironmentOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobQueueComputeEnvironmentOrder)(nil)).Elem()
}

func (o GetJobQueueComputeEnvironmentOrderArrayOutput) ToGetJobQueueComputeEnvironmentOrderArrayOutput() GetJobQueueComputeEnvironmentOrderArrayOutput {
	return o
}

func (o GetJobQueueComputeEnvironmentOrderArrayOutput) ToGetJobQueueComputeEnvironmentOrderArrayOutputWithContext(ctx context.Context) GetJobQueueComputeEnvironmentOrderArrayOutput {
	return o
}

func (o GetJobQueueComputeEnvironmentOrderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetJobQueueComputeEnvironmentOrder] {
	return pulumix.Output[[]GetJobQueueComputeEnvironmentOrder]{
		OutputState: o.OutputState,
	}
}

func (o GetJobQueueComputeEnvironmentOrderArrayOutput) Index(i pulumi.IntInput) GetJobQueueComputeEnvironmentOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobQueueComputeEnvironmentOrder {
		return vs[0].([]GetJobQueueComputeEnvironmentOrder)[vs[1].(int)]
	}).(GetJobQueueComputeEnvironmentOrderOutput)
}

type GetSchedulingPolicyFairSharePolicy struct {
	// Value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
	ComputeReservation int `pulumi:"computeReservation"`
	ShareDecaySeconds  int `pulumi:"shareDecaySeconds"`
	// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
	ShareDistributions []GetSchedulingPolicyFairSharePolicyShareDistribution `pulumi:"shareDistributions"`
}

// GetSchedulingPolicyFairSharePolicyInput is an input type that accepts GetSchedulingPolicyFairSharePolicyArgs and GetSchedulingPolicyFairSharePolicyOutput values.
// You can construct a concrete instance of `GetSchedulingPolicyFairSharePolicyInput` via:
//
//	GetSchedulingPolicyFairSharePolicyArgs{...}
type GetSchedulingPolicyFairSharePolicyInput interface {
	pulumi.Input

	ToGetSchedulingPolicyFairSharePolicyOutput() GetSchedulingPolicyFairSharePolicyOutput
	ToGetSchedulingPolicyFairSharePolicyOutputWithContext(context.Context) GetSchedulingPolicyFairSharePolicyOutput
}

type GetSchedulingPolicyFairSharePolicyArgs struct {
	// Value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
	ComputeReservation pulumi.IntInput `pulumi:"computeReservation"`
	ShareDecaySeconds  pulumi.IntInput `pulumi:"shareDecaySeconds"`
	// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
	ShareDistributions GetSchedulingPolicyFairSharePolicyShareDistributionArrayInput `pulumi:"shareDistributions"`
}

func (GetSchedulingPolicyFairSharePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (i GetSchedulingPolicyFairSharePolicyArgs) ToGetSchedulingPolicyFairSharePolicyOutput() GetSchedulingPolicyFairSharePolicyOutput {
	return i.ToGetSchedulingPolicyFairSharePolicyOutputWithContext(context.Background())
}

func (i GetSchedulingPolicyFairSharePolicyArgs) ToGetSchedulingPolicyFairSharePolicyOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchedulingPolicyFairSharePolicyOutput)
}

func (i GetSchedulingPolicyFairSharePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchedulingPolicyFairSharePolicy] {
	return pulumix.Output[GetSchedulingPolicyFairSharePolicy]{
		OutputState: i.ToGetSchedulingPolicyFairSharePolicyOutputWithContext(ctx).OutputState,
	}
}

// GetSchedulingPolicyFairSharePolicyArrayInput is an input type that accepts GetSchedulingPolicyFairSharePolicyArray and GetSchedulingPolicyFairSharePolicyArrayOutput values.
// You can construct a concrete instance of `GetSchedulingPolicyFairSharePolicyArrayInput` via:
//
//	GetSchedulingPolicyFairSharePolicyArray{ GetSchedulingPolicyFairSharePolicyArgs{...} }
type GetSchedulingPolicyFairSharePolicyArrayInput interface {
	pulumi.Input

	ToGetSchedulingPolicyFairSharePolicyArrayOutput() GetSchedulingPolicyFairSharePolicyArrayOutput
	ToGetSchedulingPolicyFairSharePolicyArrayOutputWithContext(context.Context) GetSchedulingPolicyFairSharePolicyArrayOutput
}

type GetSchedulingPolicyFairSharePolicyArray []GetSchedulingPolicyFairSharePolicyInput

func (GetSchedulingPolicyFairSharePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (i GetSchedulingPolicyFairSharePolicyArray) ToGetSchedulingPolicyFairSharePolicyArrayOutput() GetSchedulingPolicyFairSharePolicyArrayOutput {
	return i.ToGetSchedulingPolicyFairSharePolicyArrayOutputWithContext(context.Background())
}

func (i GetSchedulingPolicyFairSharePolicyArray) ToGetSchedulingPolicyFairSharePolicyArrayOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchedulingPolicyFairSharePolicyArrayOutput)
}

func (i GetSchedulingPolicyFairSharePolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSchedulingPolicyFairSharePolicy] {
	return pulumix.Output[[]GetSchedulingPolicyFairSharePolicy]{
		OutputState: i.ToGetSchedulingPolicyFairSharePolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSchedulingPolicyFairSharePolicyOutput struct{ *pulumi.OutputState }

func (GetSchedulingPolicyFairSharePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (o GetSchedulingPolicyFairSharePolicyOutput) ToGetSchedulingPolicyFairSharePolicyOutput() GetSchedulingPolicyFairSharePolicyOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyOutput) ToGetSchedulingPolicyFairSharePolicyOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchedulingPolicyFairSharePolicy] {
	return pulumix.Output[GetSchedulingPolicyFairSharePolicy]{
		OutputState: o.OutputState,
	}
}

// Value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html).
func (o GetSchedulingPolicyFairSharePolicyOutput) ComputeReservation() pulumi.IntOutput {
	return o.ApplyT(func(v GetSchedulingPolicyFairSharePolicy) int { return v.ComputeReservation }).(pulumi.IntOutput)
}

func (o GetSchedulingPolicyFairSharePolicyOutput) ShareDecaySeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetSchedulingPolicyFairSharePolicy) int { return v.ShareDecaySeconds }).(pulumi.IntOutput)
}

// One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see [FairsharePolicy](https://docs.aws.amazon.com/batch/latest/APIReference/API_FairsharePolicy.html). The `shareDistribution` block is documented below.
func (o GetSchedulingPolicyFairSharePolicyOutput) ShareDistributions() GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput {
	return o.ApplyT(func(v GetSchedulingPolicyFairSharePolicy) []GetSchedulingPolicyFairSharePolicyShareDistribution {
		return v.ShareDistributions
	}).(GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput)
}

type GetSchedulingPolicyFairSharePolicyArrayOutput struct{ *pulumi.OutputState }

func (GetSchedulingPolicyFairSharePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchedulingPolicyFairSharePolicy)(nil)).Elem()
}

func (o GetSchedulingPolicyFairSharePolicyArrayOutput) ToGetSchedulingPolicyFairSharePolicyArrayOutput() GetSchedulingPolicyFairSharePolicyArrayOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyArrayOutput) ToGetSchedulingPolicyFairSharePolicyArrayOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyArrayOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSchedulingPolicyFairSharePolicy] {
	return pulumix.Output[[]GetSchedulingPolicyFairSharePolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetSchedulingPolicyFairSharePolicyArrayOutput) Index(i pulumi.IntInput) GetSchedulingPolicyFairSharePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchedulingPolicyFairSharePolicy {
		return vs[0].([]GetSchedulingPolicyFairSharePolicy)[vs[1].(int)]
	}).(GetSchedulingPolicyFairSharePolicyOutput)
}

type GetSchedulingPolicyFairSharePolicyShareDistribution struct {
	// Fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	ShareIdentifier string `pulumi:"shareIdentifier"`
	// Weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	WeightFactor float64 `pulumi:"weightFactor"`
}

// GetSchedulingPolicyFairSharePolicyShareDistributionInput is an input type that accepts GetSchedulingPolicyFairSharePolicyShareDistributionArgs and GetSchedulingPolicyFairSharePolicyShareDistributionOutput values.
// You can construct a concrete instance of `GetSchedulingPolicyFairSharePolicyShareDistributionInput` via:
//
//	GetSchedulingPolicyFairSharePolicyShareDistributionArgs{...}
type GetSchedulingPolicyFairSharePolicyShareDistributionInput interface {
	pulumi.Input

	ToGetSchedulingPolicyFairSharePolicyShareDistributionOutput() GetSchedulingPolicyFairSharePolicyShareDistributionOutput
	ToGetSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(context.Context) GetSchedulingPolicyFairSharePolicyShareDistributionOutput
}

type GetSchedulingPolicyFairSharePolicyShareDistributionArgs struct {
	// Fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	ShareIdentifier pulumi.StringInput `pulumi:"shareIdentifier"`
	// Weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
	WeightFactor pulumi.Float64Input `pulumi:"weightFactor"`
}

func (GetSchedulingPolicyFairSharePolicyShareDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (i GetSchedulingPolicyFairSharePolicyShareDistributionArgs) ToGetSchedulingPolicyFairSharePolicyShareDistributionOutput() GetSchedulingPolicyFairSharePolicyShareDistributionOutput {
	return i.ToGetSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(context.Background())
}

func (i GetSchedulingPolicyFairSharePolicyShareDistributionArgs) ToGetSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyShareDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchedulingPolicyFairSharePolicyShareDistributionOutput)
}

func (i GetSchedulingPolicyFairSharePolicyShareDistributionArgs) ToOutput(ctx context.Context) pulumix.Output[GetSchedulingPolicyFairSharePolicyShareDistribution] {
	return pulumix.Output[GetSchedulingPolicyFairSharePolicyShareDistribution]{
		OutputState: i.ToGetSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(ctx).OutputState,
	}
}

// GetSchedulingPolicyFairSharePolicyShareDistributionArrayInput is an input type that accepts GetSchedulingPolicyFairSharePolicyShareDistributionArray and GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput values.
// You can construct a concrete instance of `GetSchedulingPolicyFairSharePolicyShareDistributionArrayInput` via:
//
//	GetSchedulingPolicyFairSharePolicyShareDistributionArray{ GetSchedulingPolicyFairSharePolicyShareDistributionArgs{...} }
type GetSchedulingPolicyFairSharePolicyShareDistributionArrayInput interface {
	pulumi.Input

	ToGetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput() GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput
	ToGetSchedulingPolicyFairSharePolicyShareDistributionArrayOutputWithContext(context.Context) GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput
}

type GetSchedulingPolicyFairSharePolicyShareDistributionArray []GetSchedulingPolicyFairSharePolicyShareDistributionInput

func (GetSchedulingPolicyFairSharePolicyShareDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (i GetSchedulingPolicyFairSharePolicyShareDistributionArray) ToGetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput() GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput {
	return i.ToGetSchedulingPolicyFairSharePolicyShareDistributionArrayOutputWithContext(context.Background())
}

func (i GetSchedulingPolicyFairSharePolicyShareDistributionArray) ToGetSchedulingPolicyFairSharePolicyShareDistributionArrayOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput)
}

func (i GetSchedulingPolicyFairSharePolicyShareDistributionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSchedulingPolicyFairSharePolicyShareDistribution] {
	return pulumix.Output[[]GetSchedulingPolicyFairSharePolicyShareDistribution]{
		OutputState: i.ToGetSchedulingPolicyFairSharePolicyShareDistributionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSchedulingPolicyFairSharePolicyShareDistributionOutput struct{ *pulumi.OutputState }

func (GetSchedulingPolicyFairSharePolicyShareDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (o GetSchedulingPolicyFairSharePolicyShareDistributionOutput) ToGetSchedulingPolicyFairSharePolicyShareDistributionOutput() GetSchedulingPolicyFairSharePolicyShareDistributionOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyShareDistributionOutput) ToGetSchedulingPolicyFairSharePolicyShareDistributionOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyShareDistributionOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyShareDistributionOutput) ToOutput(ctx context.Context) pulumix.Output[GetSchedulingPolicyFairSharePolicyShareDistribution] {
	return pulumix.Output[GetSchedulingPolicyFairSharePolicyShareDistribution]{
		OutputState: o.OutputState,
	}
}

// Fair share identifier or fair share identifier prefix. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
func (o GetSchedulingPolicyFairSharePolicyShareDistributionOutput) ShareIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchedulingPolicyFairSharePolicyShareDistribution) string { return v.ShareIdentifier }).(pulumi.StringOutput)
}

// Weight factor for the fair share identifier. For more information, see [ShareAttributes](https://docs.aws.amazon.com/batch/latest/APIReference/API_ShareAttributes.html).
func (o GetSchedulingPolicyFairSharePolicyShareDistributionOutput) WeightFactor() pulumi.Float64Output {
	return o.ApplyT(func(v GetSchedulingPolicyFairSharePolicyShareDistribution) float64 { return v.WeightFactor }).(pulumi.Float64Output)
}

type GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput struct{ *pulumi.OutputState }

func (GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchedulingPolicyFairSharePolicyShareDistribution)(nil)).Elem()
}

func (o GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput) ToGetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput() GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput) ToGetSchedulingPolicyFairSharePolicyShareDistributionArrayOutputWithContext(ctx context.Context) GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput {
	return o
}

func (o GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSchedulingPolicyFairSharePolicyShareDistribution] {
	return pulumix.Output[[]GetSchedulingPolicyFairSharePolicyShareDistribution]{
		OutputState: o.OutputState,
	}
}

func (o GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput) Index(i pulumi.IntInput) GetSchedulingPolicyFairSharePolicyShareDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchedulingPolicyFairSharePolicyShareDistribution {
		return vs[0].([]GetSchedulingPolicyFairSharePolicyShareDistribution)[vs[1].(int)]
	}).(GetSchedulingPolicyFairSharePolicyShareDistributionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentComputeResourcesInput)(nil)).Elem(), ComputeEnvironmentComputeResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentComputeResourcesPtrInput)(nil)).Elem(), ComputeEnvironmentComputeResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentComputeResourcesEc2ConfigurationInput)(nil)).Elem(), ComputeEnvironmentComputeResourcesEc2ConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentComputeResourcesEc2ConfigurationArrayInput)(nil)).Elem(), ComputeEnvironmentComputeResourcesEc2ConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentComputeResourcesLaunchTemplateInput)(nil)).Elem(), ComputeEnvironmentComputeResourcesLaunchTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentComputeResourcesLaunchTemplatePtrInput)(nil)).Elem(), ComputeEnvironmentComputeResourcesLaunchTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentEksConfigurationInput)(nil)).Elem(), ComputeEnvironmentEksConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentEksConfigurationPtrInput)(nil)).Elem(), ComputeEnvironmentEksConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionRetryStrategyInput)(nil)).Elem(), JobDefinitionRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionRetryStrategyPtrInput)(nil)).Elem(), JobDefinitionRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionRetryStrategyEvaluateOnExitInput)(nil)).Elem(), JobDefinitionRetryStrategyEvaluateOnExitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionRetryStrategyEvaluateOnExitArrayInput)(nil)).Elem(), JobDefinitionRetryStrategyEvaluateOnExitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionTimeoutInput)(nil)).Elem(), JobDefinitionTimeoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionTimeoutPtrInput)(nil)).Elem(), JobDefinitionTimeoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueueTimeoutsInput)(nil)).Elem(), JobQueueTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueueTimeoutsPtrInput)(nil)).Elem(), JobQueueTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicyFairSharePolicyInput)(nil)).Elem(), SchedulingPolicyFairSharePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicyFairSharePolicyPtrInput)(nil)).Elem(), SchedulingPolicyFairSharePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicyFairSharePolicyShareDistributionInput)(nil)).Elem(), SchedulingPolicyFairSharePolicyShareDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicyFairSharePolicyShareDistributionArrayInput)(nil)).Elem(), SchedulingPolicyFairSharePolicyShareDistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobQueueComputeEnvironmentOrderInput)(nil)).Elem(), GetJobQueueComputeEnvironmentOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobQueueComputeEnvironmentOrderArrayInput)(nil)).Elem(), GetJobQueueComputeEnvironmentOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchedulingPolicyFairSharePolicyInput)(nil)).Elem(), GetSchedulingPolicyFairSharePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchedulingPolicyFairSharePolicyArrayInput)(nil)).Elem(), GetSchedulingPolicyFairSharePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchedulingPolicyFairSharePolicyShareDistributionInput)(nil)).Elem(), GetSchedulingPolicyFairSharePolicyShareDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchedulingPolicyFairSharePolicyShareDistributionArrayInput)(nil)).Elem(), GetSchedulingPolicyFairSharePolicyShareDistributionArray{})
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesPtrOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesEc2ConfigurationOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesEc2ConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesLaunchTemplateOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesLaunchTemplatePtrOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentEksConfigurationOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentEksConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionRetryStrategyOutput{})
	pulumi.RegisterOutputType(JobDefinitionRetryStrategyPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionRetryStrategyEvaluateOnExitOutput{})
	pulumi.RegisterOutputType(JobDefinitionRetryStrategyEvaluateOnExitArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionTimeoutOutput{})
	pulumi.RegisterOutputType(JobDefinitionTimeoutPtrOutput{})
	pulumi.RegisterOutputType(JobQueueTimeoutsOutput{})
	pulumi.RegisterOutputType(JobQueueTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyFairSharePolicyOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyFairSharePolicyPtrOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyFairSharePolicyShareDistributionOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyFairSharePolicyShareDistributionArrayOutput{})
	pulumi.RegisterOutputType(GetJobQueueComputeEnvironmentOrderOutput{})
	pulumi.RegisterOutputType(GetJobQueueComputeEnvironmentOrderArrayOutput{})
	pulumi.RegisterOutputType(GetSchedulingPolicyFairSharePolicyOutput{})
	pulumi.RegisterOutputType(GetSchedulingPolicyFairSharePolicyArrayOutput{})
	pulumi.RegisterOutputType(GetSchedulingPolicyFairSharePolicyShareDistributionOutput{})
	pulumi.RegisterOutputType(GetSchedulingPolicyFairSharePolicyShareDistributionArrayOutput{})
}
