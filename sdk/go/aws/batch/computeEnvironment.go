// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeEnvironment struct {
	pulumi.CustomResourceState

	Arn                          pulumi.StringOutput                         `pulumi:"arn"`
	ComputeEnvironmentName       pulumi.StringOutput                         `pulumi:"computeEnvironmentName"`
	ComputeEnvironmentNamePrefix pulumi.StringOutput                         `pulumi:"computeEnvironmentNamePrefix"`
	ComputeResources             ComputeEnvironmentComputeResourcesPtrOutput `pulumi:"computeResources"`
	EcsClusterArn                pulumi.StringOutput                         `pulumi:"ecsClusterArn"`
	EksConfiguration             ComputeEnvironmentEksConfigurationPtrOutput `pulumi:"eksConfiguration"`
	ServiceRole                  pulumi.StringOutput                         `pulumi:"serviceRole"`
	State                        pulumi.StringPtrOutput                      `pulumi:"state"`
	Status                       pulumi.StringOutput                         `pulumi:"status"`
	StatusReason                 pulumi.StringOutput                         `pulumi:"statusReason"`
	Tags                         pulumi.StringMapOutput                      `pulumi:"tags"`
	TagsAll                      pulumi.StringMapOutput                      `pulumi:"tagsAll"`
	Type                         pulumi.StringOutput                         `pulumi:"type"`
}

// NewComputeEnvironment registers a new resource with the given unique name, arguments, and options.
func NewComputeEnvironment(ctx *pulumi.Context,
	name string, args *ComputeEnvironmentArgs, opts ...pulumi.ResourceOption) (*ComputeEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource ComputeEnvironment
	err := ctx.RegisterResource("aws:batch/computeEnvironment:ComputeEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeEnvironment gets an existing ComputeEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeEnvironmentState, opts ...pulumi.ResourceOption) (*ComputeEnvironment, error) {
	var resource ComputeEnvironment
	err := ctx.ReadResource("aws:batch/computeEnvironment:ComputeEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeEnvironment resources.
type computeEnvironmentState struct {
	Arn                          *string                             `pulumi:"arn"`
	ComputeEnvironmentName       *string                             `pulumi:"computeEnvironmentName"`
	ComputeEnvironmentNamePrefix *string                             `pulumi:"computeEnvironmentNamePrefix"`
	ComputeResources             *ComputeEnvironmentComputeResources `pulumi:"computeResources"`
	EcsClusterArn                *string                             `pulumi:"ecsClusterArn"`
	EksConfiguration             *ComputeEnvironmentEksConfiguration `pulumi:"eksConfiguration"`
	ServiceRole                  *string                             `pulumi:"serviceRole"`
	State                        *string                             `pulumi:"state"`
	Status                       *string                             `pulumi:"status"`
	StatusReason                 *string                             `pulumi:"statusReason"`
	Tags                         map[string]string                   `pulumi:"tags"`
	TagsAll                      map[string]string                   `pulumi:"tagsAll"`
	Type                         *string                             `pulumi:"type"`
}

type ComputeEnvironmentState struct {
	Arn                          pulumi.StringPtrInput
	ComputeEnvironmentName       pulumi.StringPtrInput
	ComputeEnvironmentNamePrefix pulumi.StringPtrInput
	ComputeResources             ComputeEnvironmentComputeResourcesPtrInput
	EcsClusterArn                pulumi.StringPtrInput
	EksConfiguration             ComputeEnvironmentEksConfigurationPtrInput
	ServiceRole                  pulumi.StringPtrInput
	State                        pulumi.StringPtrInput
	Status                       pulumi.StringPtrInput
	StatusReason                 pulumi.StringPtrInput
	Tags                         pulumi.StringMapInput
	TagsAll                      pulumi.StringMapInput
	Type                         pulumi.StringPtrInput
}

func (ComputeEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeEnvironmentState)(nil)).Elem()
}

type computeEnvironmentArgs struct {
	ComputeEnvironmentName       *string                             `pulumi:"computeEnvironmentName"`
	ComputeEnvironmentNamePrefix *string                             `pulumi:"computeEnvironmentNamePrefix"`
	ComputeResources             *ComputeEnvironmentComputeResources `pulumi:"computeResources"`
	EksConfiguration             *ComputeEnvironmentEksConfiguration `pulumi:"eksConfiguration"`
	ServiceRole                  *string                             `pulumi:"serviceRole"`
	State                        *string                             `pulumi:"state"`
	Tags                         map[string]string                   `pulumi:"tags"`
	Type                         string                              `pulumi:"type"`
}

// The set of arguments for constructing a ComputeEnvironment resource.
type ComputeEnvironmentArgs struct {
	ComputeEnvironmentName       pulumi.StringPtrInput
	ComputeEnvironmentNamePrefix pulumi.StringPtrInput
	ComputeResources             ComputeEnvironmentComputeResourcesPtrInput
	EksConfiguration             ComputeEnvironmentEksConfigurationPtrInput
	ServiceRole                  pulumi.StringPtrInput
	State                        pulumi.StringPtrInput
	Tags                         pulumi.StringMapInput
	Type                         pulumi.StringInput
}

func (ComputeEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeEnvironmentArgs)(nil)).Elem()
}

type ComputeEnvironmentInput interface {
	pulumi.Input

	ToComputeEnvironmentOutput() ComputeEnvironmentOutput
	ToComputeEnvironmentOutputWithContext(ctx context.Context) ComputeEnvironmentOutput
}

func (*ComputeEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironment)(nil)).Elem()
}

func (i *ComputeEnvironment) ToComputeEnvironmentOutput() ComputeEnvironmentOutput {
	return i.ToComputeEnvironmentOutputWithContext(context.Background())
}

func (i *ComputeEnvironment) ToComputeEnvironmentOutputWithContext(ctx context.Context) ComputeEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentOutput)
}

// ComputeEnvironmentArrayInput is an input type that accepts ComputeEnvironmentArray and ComputeEnvironmentArrayOutput values.
// You can construct a concrete instance of `ComputeEnvironmentArrayInput` via:
//
//	ComputeEnvironmentArray{ ComputeEnvironmentArgs{...} }
type ComputeEnvironmentArrayInput interface {
	pulumi.Input

	ToComputeEnvironmentArrayOutput() ComputeEnvironmentArrayOutput
	ToComputeEnvironmentArrayOutputWithContext(context.Context) ComputeEnvironmentArrayOutput
}

type ComputeEnvironmentArray []ComputeEnvironmentInput

func (ComputeEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeEnvironment)(nil)).Elem()
}

func (i ComputeEnvironmentArray) ToComputeEnvironmentArrayOutput() ComputeEnvironmentArrayOutput {
	return i.ToComputeEnvironmentArrayOutputWithContext(context.Background())
}

func (i ComputeEnvironmentArray) ToComputeEnvironmentArrayOutputWithContext(ctx context.Context) ComputeEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentArrayOutput)
}

// ComputeEnvironmentMapInput is an input type that accepts ComputeEnvironmentMap and ComputeEnvironmentMapOutput values.
// You can construct a concrete instance of `ComputeEnvironmentMapInput` via:
//
//	ComputeEnvironmentMap{ "key": ComputeEnvironmentArgs{...} }
type ComputeEnvironmentMapInput interface {
	pulumi.Input

	ToComputeEnvironmentMapOutput() ComputeEnvironmentMapOutput
	ToComputeEnvironmentMapOutputWithContext(context.Context) ComputeEnvironmentMapOutput
}

type ComputeEnvironmentMap map[string]ComputeEnvironmentInput

func (ComputeEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeEnvironment)(nil)).Elem()
}

func (i ComputeEnvironmentMap) ToComputeEnvironmentMapOutput() ComputeEnvironmentMapOutput {
	return i.ToComputeEnvironmentMapOutputWithContext(context.Background())
}

func (i ComputeEnvironmentMap) ToComputeEnvironmentMapOutputWithContext(ctx context.Context) ComputeEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentMapOutput)
}

type ComputeEnvironmentOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironment)(nil)).Elem()
}

func (o ComputeEnvironmentOutput) ToComputeEnvironmentOutput() ComputeEnvironmentOutput {
	return o
}

func (o ComputeEnvironmentOutput) ToComputeEnvironmentOutputWithContext(ctx context.Context) ComputeEnvironmentOutput {
	return o
}

func (o ComputeEnvironmentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEnvironment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ComputeEnvironmentOutput) ComputeEnvironmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEnvironment) pulumi.StringOutput { return v.ComputeEnvironmentName }).(pulumi.StringOutput)
}

func (o ComputeEnvironmentOutput) ComputeEnvironmentNamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEnvironment) pulumi.StringOutput { return v.ComputeEnvironmentNamePrefix }).(pulumi.StringOutput)
}

func (o ComputeEnvironmentOutput) ComputeResources() ComputeEnvironmentComputeResourcesPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironment) ComputeEnvironmentComputeResourcesPtrOutput { return v.ComputeResources }).(ComputeEnvironmentComputeResourcesPtrOutput)
}

func (o ComputeEnvironmentOutput) EcsClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEnvironment) pulumi.StringOutput { return v.EcsClusterArn }).(pulumi.StringOutput)
}

func (o ComputeEnvironmentOutput) EksConfiguration() ComputeEnvironmentEksConfigurationPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironment) ComputeEnvironmentEksConfigurationPtrOutput { return v.EksConfiguration }).(ComputeEnvironmentEksConfigurationPtrOutput)
}

func (o ComputeEnvironmentOutput) ServiceRole() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEnvironment) pulumi.StringOutput { return v.ServiceRole }).(pulumi.StringOutput)
}

func (o ComputeEnvironmentOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironment) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

func (o ComputeEnvironmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEnvironment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ComputeEnvironmentOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEnvironment) pulumi.StringOutput { return v.StatusReason }).(pulumi.StringOutput)
}

func (o ComputeEnvironmentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeEnvironment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ComputeEnvironmentOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeEnvironment) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ComputeEnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEnvironment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ComputeEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeEnvironment)(nil)).Elem()
}

func (o ComputeEnvironmentArrayOutput) ToComputeEnvironmentArrayOutput() ComputeEnvironmentArrayOutput {
	return o
}

func (o ComputeEnvironmentArrayOutput) ToComputeEnvironmentArrayOutputWithContext(ctx context.Context) ComputeEnvironmentArrayOutput {
	return o
}

func (o ComputeEnvironmentArrayOutput) Index(i pulumi.IntInput) ComputeEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeEnvironment {
		return vs[0].([]*ComputeEnvironment)[vs[1].(int)]
	}).(ComputeEnvironmentOutput)
}

type ComputeEnvironmentMapOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeEnvironment)(nil)).Elem()
}

func (o ComputeEnvironmentMapOutput) ToComputeEnvironmentMapOutput() ComputeEnvironmentMapOutput {
	return o
}

func (o ComputeEnvironmentMapOutput) ToComputeEnvironmentMapOutputWithContext(ctx context.Context) ComputeEnvironmentMapOutput {
	return o
}

func (o ComputeEnvironmentMapOutput) MapIndex(k pulumi.StringInput) ComputeEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeEnvironment {
		return vs[0].(map[string]*ComputeEnvironment)[vs[1].(string)]
	}).(ComputeEnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentInput)(nil)).Elem(), &ComputeEnvironment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentArrayInput)(nil)).Elem(), ComputeEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentMapInput)(nil)).Elem(), ComputeEnvironmentMap{})
	pulumi.RegisterOutputType(ComputeEnvironmentOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentMapOutput{})
}
