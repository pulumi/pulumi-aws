// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SchedulingPolicy struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput                      `pulumi:"arn"`
	FairSharePolicy SchedulingPolicyFairSharePolicyPtrOutput `pulumi:"fairSharePolicy"`
	Name            pulumi.StringOutput                      `pulumi:"name"`
	Tags            pulumi.StringMapOutput                   `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput                   `pulumi:"tagsAll"`
}

// NewSchedulingPolicy registers a new resource with the given unique name, arguments, and options.
func NewSchedulingPolicy(ctx *pulumi.Context,
	name string, args *SchedulingPolicyArgs, opts ...pulumi.ResourceOption) (*SchedulingPolicy, error) {
	if args == nil {
		args = &SchedulingPolicyArgs{}
	}

	var resource SchedulingPolicy
	err := ctx.RegisterResource("aws:batch/schedulingPolicy:SchedulingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedulingPolicy gets an existing SchedulingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedulingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchedulingPolicyState, opts ...pulumi.ResourceOption) (*SchedulingPolicy, error) {
	var resource SchedulingPolicy
	err := ctx.ReadResource("aws:batch/schedulingPolicy:SchedulingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchedulingPolicy resources.
type schedulingPolicyState struct {
	Arn             *string                          `pulumi:"arn"`
	FairSharePolicy *SchedulingPolicyFairSharePolicy `pulumi:"fairSharePolicy"`
	Name            *string                          `pulumi:"name"`
	Tags            map[string]string                `pulumi:"tags"`
	TagsAll         map[string]string                `pulumi:"tagsAll"`
}

type SchedulingPolicyState struct {
	Arn             pulumi.StringPtrInput
	FairSharePolicy SchedulingPolicyFairSharePolicyPtrInput
	Name            pulumi.StringPtrInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
}

func (SchedulingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*schedulingPolicyState)(nil)).Elem()
}

type schedulingPolicyArgs struct {
	FairSharePolicy *SchedulingPolicyFairSharePolicy `pulumi:"fairSharePolicy"`
	Name            *string                          `pulumi:"name"`
	Tags            map[string]string                `pulumi:"tags"`
}

// The set of arguments for constructing a SchedulingPolicy resource.
type SchedulingPolicyArgs struct {
	FairSharePolicy SchedulingPolicyFairSharePolicyPtrInput
	Name            pulumi.StringPtrInput
	Tags            pulumi.StringMapInput
}

func (SchedulingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schedulingPolicyArgs)(nil)).Elem()
}

type SchedulingPolicyInput interface {
	pulumi.Input

	ToSchedulingPolicyOutput() SchedulingPolicyOutput
	ToSchedulingPolicyOutputWithContext(ctx context.Context) SchedulingPolicyOutput
}

func (*SchedulingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingPolicy)(nil)).Elem()
}

func (i *SchedulingPolicy) ToSchedulingPolicyOutput() SchedulingPolicyOutput {
	return i.ToSchedulingPolicyOutputWithContext(context.Background())
}

func (i *SchedulingPolicy) ToSchedulingPolicyOutputWithContext(ctx context.Context) SchedulingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyOutput)
}

// SchedulingPolicyArrayInput is an input type that accepts SchedulingPolicyArray and SchedulingPolicyArrayOutput values.
// You can construct a concrete instance of `SchedulingPolicyArrayInput` via:
//
//	SchedulingPolicyArray{ SchedulingPolicyArgs{...} }
type SchedulingPolicyArrayInput interface {
	pulumi.Input

	ToSchedulingPolicyArrayOutput() SchedulingPolicyArrayOutput
	ToSchedulingPolicyArrayOutputWithContext(context.Context) SchedulingPolicyArrayOutput
}

type SchedulingPolicyArray []SchedulingPolicyInput

func (SchedulingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchedulingPolicy)(nil)).Elem()
}

func (i SchedulingPolicyArray) ToSchedulingPolicyArrayOutput() SchedulingPolicyArrayOutput {
	return i.ToSchedulingPolicyArrayOutputWithContext(context.Background())
}

func (i SchedulingPolicyArray) ToSchedulingPolicyArrayOutputWithContext(ctx context.Context) SchedulingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyArrayOutput)
}

// SchedulingPolicyMapInput is an input type that accepts SchedulingPolicyMap and SchedulingPolicyMapOutput values.
// You can construct a concrete instance of `SchedulingPolicyMapInput` via:
//
//	SchedulingPolicyMap{ "key": SchedulingPolicyArgs{...} }
type SchedulingPolicyMapInput interface {
	pulumi.Input

	ToSchedulingPolicyMapOutput() SchedulingPolicyMapOutput
	ToSchedulingPolicyMapOutputWithContext(context.Context) SchedulingPolicyMapOutput
}

type SchedulingPolicyMap map[string]SchedulingPolicyInput

func (SchedulingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchedulingPolicy)(nil)).Elem()
}

func (i SchedulingPolicyMap) ToSchedulingPolicyMapOutput() SchedulingPolicyMapOutput {
	return i.ToSchedulingPolicyMapOutputWithContext(context.Background())
}

func (i SchedulingPolicyMap) ToSchedulingPolicyMapOutputWithContext(ctx context.Context) SchedulingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyMapOutput)
}

type SchedulingPolicyOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingPolicy)(nil)).Elem()
}

func (o SchedulingPolicyOutput) ToSchedulingPolicyOutput() SchedulingPolicyOutput {
	return o
}

func (o SchedulingPolicyOutput) ToSchedulingPolicyOutputWithContext(ctx context.Context) SchedulingPolicyOutput {
	return o
}

func (o SchedulingPolicyOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SchedulingPolicy) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o SchedulingPolicyOutput) FairSharePolicy() SchedulingPolicyFairSharePolicyPtrOutput {
	return o.ApplyT(func(v *SchedulingPolicy) SchedulingPolicyFairSharePolicyPtrOutput { return v.FairSharePolicy }).(SchedulingPolicyFairSharePolicyPtrOutput)
}

func (o SchedulingPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SchedulingPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SchedulingPolicyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SchedulingPolicy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o SchedulingPolicyOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SchedulingPolicy) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type SchedulingPolicyArrayOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchedulingPolicy)(nil)).Elem()
}

func (o SchedulingPolicyArrayOutput) ToSchedulingPolicyArrayOutput() SchedulingPolicyArrayOutput {
	return o
}

func (o SchedulingPolicyArrayOutput) ToSchedulingPolicyArrayOutputWithContext(ctx context.Context) SchedulingPolicyArrayOutput {
	return o
}

func (o SchedulingPolicyArrayOutput) Index(i pulumi.IntInput) SchedulingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchedulingPolicy {
		return vs[0].([]*SchedulingPolicy)[vs[1].(int)]
	}).(SchedulingPolicyOutput)
}

type SchedulingPolicyMapOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchedulingPolicy)(nil)).Elem()
}

func (o SchedulingPolicyMapOutput) ToSchedulingPolicyMapOutput() SchedulingPolicyMapOutput {
	return o
}

func (o SchedulingPolicyMapOutput) ToSchedulingPolicyMapOutputWithContext(ctx context.Context) SchedulingPolicyMapOutput {
	return o
}

func (o SchedulingPolicyMapOutput) MapIndex(k pulumi.StringInput) SchedulingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchedulingPolicy {
		return vs[0].(map[string]*SchedulingPolicy)[vs[1].(string)]
	}).(SchedulingPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicyInput)(nil)).Elem(), &SchedulingPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicyArrayInput)(nil)).Elem(), SchedulingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicyMapInput)(nil)).Elem(), SchedulingPolicyMap{})
	pulumi.RegisterOutputType(SchedulingPolicyOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyArrayOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyMapOutput{})
}
