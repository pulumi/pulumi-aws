// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The Batch Compute Environment data source allows access to details of a specific
// compute environment within AWS Batch.
func LookupomputeEnvironment(ctx *pulumi.Context, args *GetComputeEnvironmentArgs) (*GetComputeEnvironmentResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["computeEnvironmentName"] = args.ComputeEnvironmentName
	}
	outputs, err := ctx.Invoke("aws:batch/getComputeEnvironment:getComputeEnvironment", inputs)
	if err != nil {
		return nil, err
	}
	ret := GetComputeEnvironmentResult{}
	if v, ok := outputs["arn"]; ok {
		ret.Arn = v
	}
	if v, ok := outputs["ecsClusterArn"]; ok {
		ret.EcsClusterArn = v
	}
	if v, ok := outputs["serviceRole"]; ok {
		ret.ServiceRole = v
	}
	if v, ok := outputs["state"]; ok {
		ret.State = v
	}
	if v, ok := outputs["status"]; ok {
		ret.Status = v
	}
	if v, ok := outputs["statusReason"]; ok {
		ret.StatusReason = v
	}
	if v, ok := outputs["type"]; ok {
		ret.Type = v
	}
	return &ret, nil
}

// A collection of arguments for invoking getComputeEnvironment.
type GetComputeEnvironmentArgs struct {
	// The name of the Batch Compute Environment
	ComputeEnvironmentName interface{}
}

// A collection of values returned by getComputeEnvironment.
type GetComputeEnvironmentResult struct {
	// The ARN of the compute environment.
	Arn interface{}
	// The ARN of the underlying Amazon ECS cluster used by the compute environment.
	EcsClusterArn interface{}
	// The ARN of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
	ServiceRole interface{}
	// The state of the compute environment (for example, `ENABLED` or `DISABLED`). If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues.
	State interface{}
	// The current status of the compute environment (for example, `CREATING` or `VALID`).
	Status interface{}
	// A short, human-readable string to provide additional details about the current status of the compute environment.
	StatusReason interface{}
	// The type of the compute environment (for example, `MANAGED` or `UNMANAGED`).
	Type interface{}
}
