// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ExperimentTemplateAction struct {
	// ID of the action. To find out what actions are supported see [AWS FIS actions reference](https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html).
	ActionId string `pulumi:"actionId"`
	// Description of the action.
	Description *string `pulumi:"description"`
	// Friendly name given to the target.
	Name string `pulumi:"name"`
	// Parameter(s) for the action, if applicable. See below.
	Parameters []ExperimentTemplateActionParameter `pulumi:"parameters"`
	// Set of action names that must complete before this action can be executed.
	StartAfters []string `pulumi:"startAfters"`
	// Action's target, if applicable. See below.
	Target *ExperimentTemplateActionTarget `pulumi:"target"`
}

// ExperimentTemplateActionInput is an input type that accepts ExperimentTemplateActionArgs and ExperimentTemplateActionOutput values.
// You can construct a concrete instance of `ExperimentTemplateActionInput` via:
//
//          ExperimentTemplateActionArgs{...}
type ExperimentTemplateActionInput interface {
	pulumi.Input

	ToExperimentTemplateActionOutput() ExperimentTemplateActionOutput
	ToExperimentTemplateActionOutputWithContext(context.Context) ExperimentTemplateActionOutput
}

type ExperimentTemplateActionArgs struct {
	// ID of the action. To find out what actions are supported see [AWS FIS actions reference](https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html).
	ActionId pulumi.StringInput `pulumi:"actionId"`
	// Description of the action.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Friendly name given to the target.
	Name pulumi.StringInput `pulumi:"name"`
	// Parameter(s) for the action, if applicable. See below.
	Parameters ExperimentTemplateActionParameterArrayInput `pulumi:"parameters"`
	// Set of action names that must complete before this action can be executed.
	StartAfters pulumi.StringArrayInput `pulumi:"startAfters"`
	// Action's target, if applicable. See below.
	Target ExperimentTemplateActionTargetPtrInput `pulumi:"target"`
}

func (ExperimentTemplateActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateAction)(nil)).Elem()
}

func (i ExperimentTemplateActionArgs) ToExperimentTemplateActionOutput() ExperimentTemplateActionOutput {
	return i.ToExperimentTemplateActionOutputWithContext(context.Background())
}

func (i ExperimentTemplateActionArgs) ToExperimentTemplateActionOutputWithContext(ctx context.Context) ExperimentTemplateActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionOutput)
}

// ExperimentTemplateActionArrayInput is an input type that accepts ExperimentTemplateActionArray and ExperimentTemplateActionArrayOutput values.
// You can construct a concrete instance of `ExperimentTemplateActionArrayInput` via:
//
//          ExperimentTemplateActionArray{ ExperimentTemplateActionArgs{...} }
type ExperimentTemplateActionArrayInput interface {
	pulumi.Input

	ToExperimentTemplateActionArrayOutput() ExperimentTemplateActionArrayOutput
	ToExperimentTemplateActionArrayOutputWithContext(context.Context) ExperimentTemplateActionArrayOutput
}

type ExperimentTemplateActionArray []ExperimentTemplateActionInput

func (ExperimentTemplateActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateAction)(nil)).Elem()
}

func (i ExperimentTemplateActionArray) ToExperimentTemplateActionArrayOutput() ExperimentTemplateActionArrayOutput {
	return i.ToExperimentTemplateActionArrayOutputWithContext(context.Background())
}

func (i ExperimentTemplateActionArray) ToExperimentTemplateActionArrayOutputWithContext(ctx context.Context) ExperimentTemplateActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionArrayOutput)
}

type ExperimentTemplateActionOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateAction)(nil)).Elem()
}

func (o ExperimentTemplateActionOutput) ToExperimentTemplateActionOutput() ExperimentTemplateActionOutput {
	return o
}

func (o ExperimentTemplateActionOutput) ToExperimentTemplateActionOutputWithContext(ctx context.Context) ExperimentTemplateActionOutput {
	return o
}

// ID of the action. To find out what actions are supported see [AWS FIS actions reference](https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html).
func (o ExperimentTemplateActionOutput) ActionId() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateAction) string { return v.ActionId }).(pulumi.StringOutput)
}

// Description of the action.
func (o ExperimentTemplateActionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentTemplateAction) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Friendly name given to the target.
func (o ExperimentTemplateActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateAction) string { return v.Name }).(pulumi.StringOutput)
}

// Parameter(s) for the action, if applicable. See below.
func (o ExperimentTemplateActionOutput) Parameters() ExperimentTemplateActionParameterArrayOutput {
	return o.ApplyT(func(v ExperimentTemplateAction) []ExperimentTemplateActionParameter { return v.Parameters }).(ExperimentTemplateActionParameterArrayOutput)
}

// Set of action names that must complete before this action can be executed.
func (o ExperimentTemplateActionOutput) StartAfters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExperimentTemplateAction) []string { return v.StartAfters }).(pulumi.StringArrayOutput)
}

// Action's target, if applicable. See below.
func (o ExperimentTemplateActionOutput) Target() ExperimentTemplateActionTargetPtrOutput {
	return o.ApplyT(func(v ExperimentTemplateAction) *ExperimentTemplateActionTarget { return v.Target }).(ExperimentTemplateActionTargetPtrOutput)
}

type ExperimentTemplateActionArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateAction)(nil)).Elem()
}

func (o ExperimentTemplateActionArrayOutput) ToExperimentTemplateActionArrayOutput() ExperimentTemplateActionArrayOutput {
	return o
}

func (o ExperimentTemplateActionArrayOutput) ToExperimentTemplateActionArrayOutputWithContext(ctx context.Context) ExperimentTemplateActionArrayOutput {
	return o
}

func (o ExperimentTemplateActionArrayOutput) Index(i pulumi.IntInput) ExperimentTemplateActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTemplateAction {
		return vs[0].([]ExperimentTemplateAction)[vs[1].(int)]
	}).(ExperimentTemplateActionOutput)
}

type ExperimentTemplateActionParameter struct {
	// Tag key.
	Key string `pulumi:"key"`
	// Tag value.
	Value string `pulumi:"value"`
}

// ExperimentTemplateActionParameterInput is an input type that accepts ExperimentTemplateActionParameterArgs and ExperimentTemplateActionParameterOutput values.
// You can construct a concrete instance of `ExperimentTemplateActionParameterInput` via:
//
//          ExperimentTemplateActionParameterArgs{...}
type ExperimentTemplateActionParameterInput interface {
	pulumi.Input

	ToExperimentTemplateActionParameterOutput() ExperimentTemplateActionParameterOutput
	ToExperimentTemplateActionParameterOutputWithContext(context.Context) ExperimentTemplateActionParameterOutput
}

type ExperimentTemplateActionParameterArgs struct {
	// Tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// Tag value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExperimentTemplateActionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateActionParameter)(nil)).Elem()
}

func (i ExperimentTemplateActionParameterArgs) ToExperimentTemplateActionParameterOutput() ExperimentTemplateActionParameterOutput {
	return i.ToExperimentTemplateActionParameterOutputWithContext(context.Background())
}

func (i ExperimentTemplateActionParameterArgs) ToExperimentTemplateActionParameterOutputWithContext(ctx context.Context) ExperimentTemplateActionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionParameterOutput)
}

// ExperimentTemplateActionParameterArrayInput is an input type that accepts ExperimentTemplateActionParameterArray and ExperimentTemplateActionParameterArrayOutput values.
// You can construct a concrete instance of `ExperimentTemplateActionParameterArrayInput` via:
//
//          ExperimentTemplateActionParameterArray{ ExperimentTemplateActionParameterArgs{...} }
type ExperimentTemplateActionParameterArrayInput interface {
	pulumi.Input

	ToExperimentTemplateActionParameterArrayOutput() ExperimentTemplateActionParameterArrayOutput
	ToExperimentTemplateActionParameterArrayOutputWithContext(context.Context) ExperimentTemplateActionParameterArrayOutput
}

type ExperimentTemplateActionParameterArray []ExperimentTemplateActionParameterInput

func (ExperimentTemplateActionParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateActionParameter)(nil)).Elem()
}

func (i ExperimentTemplateActionParameterArray) ToExperimentTemplateActionParameterArrayOutput() ExperimentTemplateActionParameterArrayOutput {
	return i.ToExperimentTemplateActionParameterArrayOutputWithContext(context.Background())
}

func (i ExperimentTemplateActionParameterArray) ToExperimentTemplateActionParameterArrayOutputWithContext(ctx context.Context) ExperimentTemplateActionParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionParameterArrayOutput)
}

type ExperimentTemplateActionParameterOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateActionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateActionParameter)(nil)).Elem()
}

func (o ExperimentTemplateActionParameterOutput) ToExperimentTemplateActionParameterOutput() ExperimentTemplateActionParameterOutput {
	return o
}

func (o ExperimentTemplateActionParameterOutput) ToExperimentTemplateActionParameterOutputWithContext(ctx context.Context) ExperimentTemplateActionParameterOutput {
	return o
}

// Tag key.
func (o ExperimentTemplateActionParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateActionParameter) string { return v.Key }).(pulumi.StringOutput)
}

// Tag value.
func (o ExperimentTemplateActionParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateActionParameter) string { return v.Value }).(pulumi.StringOutput)
}

type ExperimentTemplateActionParameterArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateActionParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateActionParameter)(nil)).Elem()
}

func (o ExperimentTemplateActionParameterArrayOutput) ToExperimentTemplateActionParameterArrayOutput() ExperimentTemplateActionParameterArrayOutput {
	return o
}

func (o ExperimentTemplateActionParameterArrayOutput) ToExperimentTemplateActionParameterArrayOutputWithContext(ctx context.Context) ExperimentTemplateActionParameterArrayOutput {
	return o
}

func (o ExperimentTemplateActionParameterArrayOutput) Index(i pulumi.IntInput) ExperimentTemplateActionParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTemplateActionParameter {
		return vs[0].([]ExperimentTemplateActionParameter)[vs[1].(int)]
	}).(ExperimentTemplateActionParameterOutput)
}

type ExperimentTemplateActionTarget struct {
	// Tag key.
	Key string `pulumi:"key"`
	// Tag value.
	Value string `pulumi:"value"`
}

// ExperimentTemplateActionTargetInput is an input type that accepts ExperimentTemplateActionTargetArgs and ExperimentTemplateActionTargetOutput values.
// You can construct a concrete instance of `ExperimentTemplateActionTargetInput` via:
//
//          ExperimentTemplateActionTargetArgs{...}
type ExperimentTemplateActionTargetInput interface {
	pulumi.Input

	ToExperimentTemplateActionTargetOutput() ExperimentTemplateActionTargetOutput
	ToExperimentTemplateActionTargetOutputWithContext(context.Context) ExperimentTemplateActionTargetOutput
}

type ExperimentTemplateActionTargetArgs struct {
	// Tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// Tag value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExperimentTemplateActionTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateActionTarget)(nil)).Elem()
}

func (i ExperimentTemplateActionTargetArgs) ToExperimentTemplateActionTargetOutput() ExperimentTemplateActionTargetOutput {
	return i.ToExperimentTemplateActionTargetOutputWithContext(context.Background())
}

func (i ExperimentTemplateActionTargetArgs) ToExperimentTemplateActionTargetOutputWithContext(ctx context.Context) ExperimentTemplateActionTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionTargetOutput)
}

func (i ExperimentTemplateActionTargetArgs) ToExperimentTemplateActionTargetPtrOutput() ExperimentTemplateActionTargetPtrOutput {
	return i.ToExperimentTemplateActionTargetPtrOutputWithContext(context.Background())
}

func (i ExperimentTemplateActionTargetArgs) ToExperimentTemplateActionTargetPtrOutputWithContext(ctx context.Context) ExperimentTemplateActionTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionTargetOutput).ToExperimentTemplateActionTargetPtrOutputWithContext(ctx)
}

// ExperimentTemplateActionTargetPtrInput is an input type that accepts ExperimentTemplateActionTargetArgs, ExperimentTemplateActionTargetPtr and ExperimentTemplateActionTargetPtrOutput values.
// You can construct a concrete instance of `ExperimentTemplateActionTargetPtrInput` via:
//
//          ExperimentTemplateActionTargetArgs{...}
//
//  or:
//
//          nil
type ExperimentTemplateActionTargetPtrInput interface {
	pulumi.Input

	ToExperimentTemplateActionTargetPtrOutput() ExperimentTemplateActionTargetPtrOutput
	ToExperimentTemplateActionTargetPtrOutputWithContext(context.Context) ExperimentTemplateActionTargetPtrOutput
}

type experimentTemplateActionTargetPtrType ExperimentTemplateActionTargetArgs

func ExperimentTemplateActionTargetPtr(v *ExperimentTemplateActionTargetArgs) ExperimentTemplateActionTargetPtrInput {
	return (*experimentTemplateActionTargetPtrType)(v)
}

func (*experimentTemplateActionTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentTemplateActionTarget)(nil)).Elem()
}

func (i *experimentTemplateActionTargetPtrType) ToExperimentTemplateActionTargetPtrOutput() ExperimentTemplateActionTargetPtrOutput {
	return i.ToExperimentTemplateActionTargetPtrOutputWithContext(context.Background())
}

func (i *experimentTemplateActionTargetPtrType) ToExperimentTemplateActionTargetPtrOutputWithContext(ctx context.Context) ExperimentTemplateActionTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionTargetPtrOutput)
}

type ExperimentTemplateActionTargetOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateActionTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateActionTarget)(nil)).Elem()
}

func (o ExperimentTemplateActionTargetOutput) ToExperimentTemplateActionTargetOutput() ExperimentTemplateActionTargetOutput {
	return o
}

func (o ExperimentTemplateActionTargetOutput) ToExperimentTemplateActionTargetOutputWithContext(ctx context.Context) ExperimentTemplateActionTargetOutput {
	return o
}

func (o ExperimentTemplateActionTargetOutput) ToExperimentTemplateActionTargetPtrOutput() ExperimentTemplateActionTargetPtrOutput {
	return o.ToExperimentTemplateActionTargetPtrOutputWithContext(context.Background())
}

func (o ExperimentTemplateActionTargetOutput) ToExperimentTemplateActionTargetPtrOutputWithContext(ctx context.Context) ExperimentTemplateActionTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExperimentTemplateActionTarget) *ExperimentTemplateActionTarget {
		return &v
	}).(ExperimentTemplateActionTargetPtrOutput)
}

// Tag key.
func (o ExperimentTemplateActionTargetOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateActionTarget) string { return v.Key }).(pulumi.StringOutput)
}

// Tag value.
func (o ExperimentTemplateActionTargetOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateActionTarget) string { return v.Value }).(pulumi.StringOutput)
}

type ExperimentTemplateActionTargetPtrOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateActionTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentTemplateActionTarget)(nil)).Elem()
}

func (o ExperimentTemplateActionTargetPtrOutput) ToExperimentTemplateActionTargetPtrOutput() ExperimentTemplateActionTargetPtrOutput {
	return o
}

func (o ExperimentTemplateActionTargetPtrOutput) ToExperimentTemplateActionTargetPtrOutputWithContext(ctx context.Context) ExperimentTemplateActionTargetPtrOutput {
	return o
}

func (o ExperimentTemplateActionTargetPtrOutput) Elem() ExperimentTemplateActionTargetOutput {
	return o.ApplyT(func(v *ExperimentTemplateActionTarget) ExperimentTemplateActionTarget {
		if v != nil {
			return *v
		}
		var ret ExperimentTemplateActionTarget
		return ret
	}).(ExperimentTemplateActionTargetOutput)
}

// Tag key.
func (o ExperimentTemplateActionTargetPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExperimentTemplateActionTarget) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Tag value.
func (o ExperimentTemplateActionTargetPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExperimentTemplateActionTarget) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type ExperimentTemplateStopCondition struct {
	// Source of the condition. One of `none`, `aws:cloudwatch:alarm`.
	Source string `pulumi:"source"`
	// Tag value.
	Value *string `pulumi:"value"`
}

// ExperimentTemplateStopConditionInput is an input type that accepts ExperimentTemplateStopConditionArgs and ExperimentTemplateStopConditionOutput values.
// You can construct a concrete instance of `ExperimentTemplateStopConditionInput` via:
//
//          ExperimentTemplateStopConditionArgs{...}
type ExperimentTemplateStopConditionInput interface {
	pulumi.Input

	ToExperimentTemplateStopConditionOutput() ExperimentTemplateStopConditionOutput
	ToExperimentTemplateStopConditionOutputWithContext(context.Context) ExperimentTemplateStopConditionOutput
}

type ExperimentTemplateStopConditionArgs struct {
	// Source of the condition. One of `none`, `aws:cloudwatch:alarm`.
	Source pulumi.StringInput `pulumi:"source"`
	// Tag value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ExperimentTemplateStopConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateStopCondition)(nil)).Elem()
}

func (i ExperimentTemplateStopConditionArgs) ToExperimentTemplateStopConditionOutput() ExperimentTemplateStopConditionOutput {
	return i.ToExperimentTemplateStopConditionOutputWithContext(context.Background())
}

func (i ExperimentTemplateStopConditionArgs) ToExperimentTemplateStopConditionOutputWithContext(ctx context.Context) ExperimentTemplateStopConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateStopConditionOutput)
}

// ExperimentTemplateStopConditionArrayInput is an input type that accepts ExperimentTemplateStopConditionArray and ExperimentTemplateStopConditionArrayOutput values.
// You can construct a concrete instance of `ExperimentTemplateStopConditionArrayInput` via:
//
//          ExperimentTemplateStopConditionArray{ ExperimentTemplateStopConditionArgs{...} }
type ExperimentTemplateStopConditionArrayInput interface {
	pulumi.Input

	ToExperimentTemplateStopConditionArrayOutput() ExperimentTemplateStopConditionArrayOutput
	ToExperimentTemplateStopConditionArrayOutputWithContext(context.Context) ExperimentTemplateStopConditionArrayOutput
}

type ExperimentTemplateStopConditionArray []ExperimentTemplateStopConditionInput

func (ExperimentTemplateStopConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateStopCondition)(nil)).Elem()
}

func (i ExperimentTemplateStopConditionArray) ToExperimentTemplateStopConditionArrayOutput() ExperimentTemplateStopConditionArrayOutput {
	return i.ToExperimentTemplateStopConditionArrayOutputWithContext(context.Background())
}

func (i ExperimentTemplateStopConditionArray) ToExperimentTemplateStopConditionArrayOutputWithContext(ctx context.Context) ExperimentTemplateStopConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateStopConditionArrayOutput)
}

type ExperimentTemplateStopConditionOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateStopConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateStopCondition)(nil)).Elem()
}

func (o ExperimentTemplateStopConditionOutput) ToExperimentTemplateStopConditionOutput() ExperimentTemplateStopConditionOutput {
	return o
}

func (o ExperimentTemplateStopConditionOutput) ToExperimentTemplateStopConditionOutputWithContext(ctx context.Context) ExperimentTemplateStopConditionOutput {
	return o
}

// Source of the condition. One of `none`, `aws:cloudwatch:alarm`.
func (o ExperimentTemplateStopConditionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateStopCondition) string { return v.Source }).(pulumi.StringOutput)
}

// Tag value.
func (o ExperimentTemplateStopConditionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentTemplateStopCondition) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ExperimentTemplateStopConditionArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateStopConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateStopCondition)(nil)).Elem()
}

func (o ExperimentTemplateStopConditionArrayOutput) ToExperimentTemplateStopConditionArrayOutput() ExperimentTemplateStopConditionArrayOutput {
	return o
}

func (o ExperimentTemplateStopConditionArrayOutput) ToExperimentTemplateStopConditionArrayOutputWithContext(ctx context.Context) ExperimentTemplateStopConditionArrayOutput {
	return o
}

func (o ExperimentTemplateStopConditionArrayOutput) Index(i pulumi.IntInput) ExperimentTemplateStopConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTemplateStopCondition {
		return vs[0].([]ExperimentTemplateStopCondition)[vs[1].(int)]
	}).(ExperimentTemplateStopConditionOutput)
}

type ExperimentTemplateTarget struct {
	// Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters). See below.
	Filters []ExperimentTemplateTargetFilter `pulumi:"filters"`
	// Friendly name given to the target.
	Name string `pulumi:"name"`
	// Set of ARNs of the resources to target with an action. Conflicts with `resourceTag`.
	ResourceArns []string `pulumi:"resourceArns"`
	// Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with `resourceArns`. See below.
	ResourceTags []ExperimentTemplateTargetResourceTag `pulumi:"resourceTags"`
	// AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#resource-types).
	ResourceType string `pulumi:"resourceType"`
	// Scopes the identified resources. Valid values are `ALL` (all identified resources), `COUNT(n)` (randomly select `n` of the identified resources), `PERCENT(n)` (randomly select `n` percent of the identified resources).
	SelectionMode string `pulumi:"selectionMode"`
}

// ExperimentTemplateTargetInput is an input type that accepts ExperimentTemplateTargetArgs and ExperimentTemplateTargetOutput values.
// You can construct a concrete instance of `ExperimentTemplateTargetInput` via:
//
//          ExperimentTemplateTargetArgs{...}
type ExperimentTemplateTargetInput interface {
	pulumi.Input

	ToExperimentTemplateTargetOutput() ExperimentTemplateTargetOutput
	ToExperimentTemplateTargetOutputWithContext(context.Context) ExperimentTemplateTargetOutput
}

type ExperimentTemplateTargetArgs struct {
	// Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters). See below.
	Filters ExperimentTemplateTargetFilterArrayInput `pulumi:"filters"`
	// Friendly name given to the target.
	Name pulumi.StringInput `pulumi:"name"`
	// Set of ARNs of the resources to target with an action. Conflicts with `resourceTag`.
	ResourceArns pulumi.StringArrayInput `pulumi:"resourceArns"`
	// Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with `resourceArns`. See below.
	ResourceTags ExperimentTemplateTargetResourceTagArrayInput `pulumi:"resourceTags"`
	// AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#resource-types).
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// Scopes the identified resources. Valid values are `ALL` (all identified resources), `COUNT(n)` (randomly select `n` of the identified resources), `PERCENT(n)` (randomly select `n` percent of the identified resources).
	SelectionMode pulumi.StringInput `pulumi:"selectionMode"`
}

func (ExperimentTemplateTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTarget)(nil)).Elem()
}

func (i ExperimentTemplateTargetArgs) ToExperimentTemplateTargetOutput() ExperimentTemplateTargetOutput {
	return i.ToExperimentTemplateTargetOutputWithContext(context.Background())
}

func (i ExperimentTemplateTargetArgs) ToExperimentTemplateTargetOutputWithContext(ctx context.Context) ExperimentTemplateTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateTargetOutput)
}

// ExperimentTemplateTargetArrayInput is an input type that accepts ExperimentTemplateTargetArray and ExperimentTemplateTargetArrayOutput values.
// You can construct a concrete instance of `ExperimentTemplateTargetArrayInput` via:
//
//          ExperimentTemplateTargetArray{ ExperimentTemplateTargetArgs{...} }
type ExperimentTemplateTargetArrayInput interface {
	pulumi.Input

	ToExperimentTemplateTargetArrayOutput() ExperimentTemplateTargetArrayOutput
	ToExperimentTemplateTargetArrayOutputWithContext(context.Context) ExperimentTemplateTargetArrayOutput
}

type ExperimentTemplateTargetArray []ExperimentTemplateTargetInput

func (ExperimentTemplateTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateTarget)(nil)).Elem()
}

func (i ExperimentTemplateTargetArray) ToExperimentTemplateTargetArrayOutput() ExperimentTemplateTargetArrayOutput {
	return i.ToExperimentTemplateTargetArrayOutputWithContext(context.Background())
}

func (i ExperimentTemplateTargetArray) ToExperimentTemplateTargetArrayOutputWithContext(ctx context.Context) ExperimentTemplateTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateTargetArrayOutput)
}

type ExperimentTemplateTargetOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTarget)(nil)).Elem()
}

func (o ExperimentTemplateTargetOutput) ToExperimentTemplateTargetOutput() ExperimentTemplateTargetOutput {
	return o
}

func (o ExperimentTemplateTargetOutput) ToExperimentTemplateTargetOutputWithContext(ctx context.Context) ExperimentTemplateTargetOutput {
	return o
}

// Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters). See below.
func (o ExperimentTemplateTargetOutput) Filters() ExperimentTemplateTargetFilterArrayOutput {
	return o.ApplyT(func(v ExperimentTemplateTarget) []ExperimentTemplateTargetFilter { return v.Filters }).(ExperimentTemplateTargetFilterArrayOutput)
}

// Friendly name given to the target.
func (o ExperimentTemplateTargetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateTarget) string { return v.Name }).(pulumi.StringOutput)
}

// Set of ARNs of the resources to target with an action. Conflicts with `resourceTag`.
func (o ExperimentTemplateTargetOutput) ResourceArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExperimentTemplateTarget) []string { return v.ResourceArns }).(pulumi.StringArrayOutput)
}

// Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with `resourceArns`. See below.
func (o ExperimentTemplateTargetOutput) ResourceTags() ExperimentTemplateTargetResourceTagArrayOutput {
	return o.ApplyT(func(v ExperimentTemplateTarget) []ExperimentTemplateTargetResourceTag { return v.ResourceTags }).(ExperimentTemplateTargetResourceTagArrayOutput)
}

// AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see [Targets for AWS FIS](https://docs.aws.amazon.com/fis/latest/userguide/targets.html#resource-types).
func (o ExperimentTemplateTargetOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateTarget) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Scopes the identified resources. Valid values are `ALL` (all identified resources), `COUNT(n)` (randomly select `n` of the identified resources), `PERCENT(n)` (randomly select `n` percent of the identified resources).
func (o ExperimentTemplateTargetOutput) SelectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateTarget) string { return v.SelectionMode }).(pulumi.StringOutput)
}

type ExperimentTemplateTargetArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateTarget)(nil)).Elem()
}

func (o ExperimentTemplateTargetArrayOutput) ToExperimentTemplateTargetArrayOutput() ExperimentTemplateTargetArrayOutput {
	return o
}

func (o ExperimentTemplateTargetArrayOutput) ToExperimentTemplateTargetArrayOutputWithContext(ctx context.Context) ExperimentTemplateTargetArrayOutput {
	return o
}

func (o ExperimentTemplateTargetArrayOutput) Index(i pulumi.IntInput) ExperimentTemplateTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTemplateTarget {
		return vs[0].([]ExperimentTemplateTarget)[vs[1].(int)]
	}).(ExperimentTemplateTargetOutput)
}

type ExperimentTemplateTargetFilter struct {
	// Attribute path for the filter.
	Path string `pulumi:"path"`
	// Set of attribute values for the filter.
	Values []string `pulumi:"values"`
}

// ExperimentTemplateTargetFilterInput is an input type that accepts ExperimentTemplateTargetFilterArgs and ExperimentTemplateTargetFilterOutput values.
// You can construct a concrete instance of `ExperimentTemplateTargetFilterInput` via:
//
//          ExperimentTemplateTargetFilterArgs{...}
type ExperimentTemplateTargetFilterInput interface {
	pulumi.Input

	ToExperimentTemplateTargetFilterOutput() ExperimentTemplateTargetFilterOutput
	ToExperimentTemplateTargetFilterOutputWithContext(context.Context) ExperimentTemplateTargetFilterOutput
}

type ExperimentTemplateTargetFilterArgs struct {
	// Attribute path for the filter.
	Path pulumi.StringInput `pulumi:"path"`
	// Set of attribute values for the filter.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ExperimentTemplateTargetFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTargetFilter)(nil)).Elem()
}

func (i ExperimentTemplateTargetFilterArgs) ToExperimentTemplateTargetFilterOutput() ExperimentTemplateTargetFilterOutput {
	return i.ToExperimentTemplateTargetFilterOutputWithContext(context.Background())
}

func (i ExperimentTemplateTargetFilterArgs) ToExperimentTemplateTargetFilterOutputWithContext(ctx context.Context) ExperimentTemplateTargetFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateTargetFilterOutput)
}

// ExperimentTemplateTargetFilterArrayInput is an input type that accepts ExperimentTemplateTargetFilterArray and ExperimentTemplateTargetFilterArrayOutput values.
// You can construct a concrete instance of `ExperimentTemplateTargetFilterArrayInput` via:
//
//          ExperimentTemplateTargetFilterArray{ ExperimentTemplateTargetFilterArgs{...} }
type ExperimentTemplateTargetFilterArrayInput interface {
	pulumi.Input

	ToExperimentTemplateTargetFilterArrayOutput() ExperimentTemplateTargetFilterArrayOutput
	ToExperimentTemplateTargetFilterArrayOutputWithContext(context.Context) ExperimentTemplateTargetFilterArrayOutput
}

type ExperimentTemplateTargetFilterArray []ExperimentTemplateTargetFilterInput

func (ExperimentTemplateTargetFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateTargetFilter)(nil)).Elem()
}

func (i ExperimentTemplateTargetFilterArray) ToExperimentTemplateTargetFilterArrayOutput() ExperimentTemplateTargetFilterArrayOutput {
	return i.ToExperimentTemplateTargetFilterArrayOutputWithContext(context.Background())
}

func (i ExperimentTemplateTargetFilterArray) ToExperimentTemplateTargetFilterArrayOutputWithContext(ctx context.Context) ExperimentTemplateTargetFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateTargetFilterArrayOutput)
}

type ExperimentTemplateTargetFilterOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateTargetFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTargetFilter)(nil)).Elem()
}

func (o ExperimentTemplateTargetFilterOutput) ToExperimentTemplateTargetFilterOutput() ExperimentTemplateTargetFilterOutput {
	return o
}

func (o ExperimentTemplateTargetFilterOutput) ToExperimentTemplateTargetFilterOutputWithContext(ctx context.Context) ExperimentTemplateTargetFilterOutput {
	return o
}

// Attribute path for the filter.
func (o ExperimentTemplateTargetFilterOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateTargetFilter) string { return v.Path }).(pulumi.StringOutput)
}

// Set of attribute values for the filter.
func (o ExperimentTemplateTargetFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExperimentTemplateTargetFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ExperimentTemplateTargetFilterArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateTargetFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateTargetFilter)(nil)).Elem()
}

func (o ExperimentTemplateTargetFilterArrayOutput) ToExperimentTemplateTargetFilterArrayOutput() ExperimentTemplateTargetFilterArrayOutput {
	return o
}

func (o ExperimentTemplateTargetFilterArrayOutput) ToExperimentTemplateTargetFilterArrayOutputWithContext(ctx context.Context) ExperimentTemplateTargetFilterArrayOutput {
	return o
}

func (o ExperimentTemplateTargetFilterArrayOutput) Index(i pulumi.IntInput) ExperimentTemplateTargetFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTemplateTargetFilter {
		return vs[0].([]ExperimentTemplateTargetFilter)[vs[1].(int)]
	}).(ExperimentTemplateTargetFilterOutput)
}

type ExperimentTemplateTargetResourceTag struct {
	// Tag key.
	Key string `pulumi:"key"`
	// Tag value.
	Value string `pulumi:"value"`
}

// ExperimentTemplateTargetResourceTagInput is an input type that accepts ExperimentTemplateTargetResourceTagArgs and ExperimentTemplateTargetResourceTagOutput values.
// You can construct a concrete instance of `ExperimentTemplateTargetResourceTagInput` via:
//
//          ExperimentTemplateTargetResourceTagArgs{...}
type ExperimentTemplateTargetResourceTagInput interface {
	pulumi.Input

	ToExperimentTemplateTargetResourceTagOutput() ExperimentTemplateTargetResourceTagOutput
	ToExperimentTemplateTargetResourceTagOutputWithContext(context.Context) ExperimentTemplateTargetResourceTagOutput
}

type ExperimentTemplateTargetResourceTagArgs struct {
	// Tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// Tag value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExperimentTemplateTargetResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTargetResourceTag)(nil)).Elem()
}

func (i ExperimentTemplateTargetResourceTagArgs) ToExperimentTemplateTargetResourceTagOutput() ExperimentTemplateTargetResourceTagOutput {
	return i.ToExperimentTemplateTargetResourceTagOutputWithContext(context.Background())
}

func (i ExperimentTemplateTargetResourceTagArgs) ToExperimentTemplateTargetResourceTagOutputWithContext(ctx context.Context) ExperimentTemplateTargetResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateTargetResourceTagOutput)
}

// ExperimentTemplateTargetResourceTagArrayInput is an input type that accepts ExperimentTemplateTargetResourceTagArray and ExperimentTemplateTargetResourceTagArrayOutput values.
// You can construct a concrete instance of `ExperimentTemplateTargetResourceTagArrayInput` via:
//
//          ExperimentTemplateTargetResourceTagArray{ ExperimentTemplateTargetResourceTagArgs{...} }
type ExperimentTemplateTargetResourceTagArrayInput interface {
	pulumi.Input

	ToExperimentTemplateTargetResourceTagArrayOutput() ExperimentTemplateTargetResourceTagArrayOutput
	ToExperimentTemplateTargetResourceTagArrayOutputWithContext(context.Context) ExperimentTemplateTargetResourceTagArrayOutput
}

type ExperimentTemplateTargetResourceTagArray []ExperimentTemplateTargetResourceTagInput

func (ExperimentTemplateTargetResourceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateTargetResourceTag)(nil)).Elem()
}

func (i ExperimentTemplateTargetResourceTagArray) ToExperimentTemplateTargetResourceTagArrayOutput() ExperimentTemplateTargetResourceTagArrayOutput {
	return i.ToExperimentTemplateTargetResourceTagArrayOutputWithContext(context.Background())
}

func (i ExperimentTemplateTargetResourceTagArray) ToExperimentTemplateTargetResourceTagArrayOutputWithContext(ctx context.Context) ExperimentTemplateTargetResourceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateTargetResourceTagArrayOutput)
}

type ExperimentTemplateTargetResourceTagOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateTargetResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTargetResourceTag)(nil)).Elem()
}

func (o ExperimentTemplateTargetResourceTagOutput) ToExperimentTemplateTargetResourceTagOutput() ExperimentTemplateTargetResourceTagOutput {
	return o
}

func (o ExperimentTemplateTargetResourceTagOutput) ToExperimentTemplateTargetResourceTagOutputWithContext(ctx context.Context) ExperimentTemplateTargetResourceTagOutput {
	return o
}

// Tag key.
func (o ExperimentTemplateTargetResourceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateTargetResourceTag) string { return v.Key }).(pulumi.StringOutput)
}

// Tag value.
func (o ExperimentTemplateTargetResourceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateTargetResourceTag) string { return v.Value }).(pulumi.StringOutput)
}

type ExperimentTemplateTargetResourceTagArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateTargetResourceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateTargetResourceTag)(nil)).Elem()
}

func (o ExperimentTemplateTargetResourceTagArrayOutput) ToExperimentTemplateTargetResourceTagArrayOutput() ExperimentTemplateTargetResourceTagArrayOutput {
	return o
}

func (o ExperimentTemplateTargetResourceTagArrayOutput) ToExperimentTemplateTargetResourceTagArrayOutputWithContext(ctx context.Context) ExperimentTemplateTargetResourceTagArrayOutput {
	return o
}

func (o ExperimentTemplateTargetResourceTagArrayOutput) Index(i pulumi.IntInput) ExperimentTemplateTargetResourceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTemplateTargetResourceTag {
		return vs[0].([]ExperimentTemplateTargetResourceTag)[vs[1].(int)]
	}).(ExperimentTemplateTargetResourceTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateActionInput)(nil)).Elem(), ExperimentTemplateActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateActionArrayInput)(nil)).Elem(), ExperimentTemplateActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateActionParameterInput)(nil)).Elem(), ExperimentTemplateActionParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateActionParameterArrayInput)(nil)).Elem(), ExperimentTemplateActionParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateActionTargetInput)(nil)).Elem(), ExperimentTemplateActionTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateActionTargetPtrInput)(nil)).Elem(), ExperimentTemplateActionTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateStopConditionInput)(nil)).Elem(), ExperimentTemplateStopConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateStopConditionArrayInput)(nil)).Elem(), ExperimentTemplateStopConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateTargetInput)(nil)).Elem(), ExperimentTemplateTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateTargetArrayInput)(nil)).Elem(), ExperimentTemplateTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateTargetFilterInput)(nil)).Elem(), ExperimentTemplateTargetFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateTargetFilterArrayInput)(nil)).Elem(), ExperimentTemplateTargetFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateTargetResourceTagInput)(nil)).Elem(), ExperimentTemplateTargetResourceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateTargetResourceTagArrayInput)(nil)).Elem(), ExperimentTemplateTargetResourceTagArray{})
	pulumi.RegisterOutputType(ExperimentTemplateActionOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateActionArrayOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateActionParameterOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateActionParameterArrayOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateActionTargetOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateActionTargetPtrOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateStopConditionOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateStopConditionArrayOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateTargetOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateTargetArrayOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateTargetFilterOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateTargetFilterArrayOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateTargetResourceTagOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateTargetResourceTagArrayOutput{})
}
