// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fis

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ExperimentTemplate struct {
	pulumi.CustomResourceState

	Actions        ExperimentTemplateActionArrayOutput        `pulumi:"actions"`
	Description    pulumi.StringOutput                        `pulumi:"description"`
	RoleArn        pulumi.StringOutput                        `pulumi:"roleArn"`
	StopConditions ExperimentTemplateStopConditionArrayOutput `pulumi:"stopConditions"`
	Tags           pulumi.StringMapOutput                     `pulumi:"tags"`
	TagsAll        pulumi.StringMapOutput                     `pulumi:"tagsAll"`
	Targets        ExperimentTemplateTargetArrayOutput        `pulumi:"targets"`
}

// NewExperimentTemplate registers a new resource with the given unique name, arguments, and options.
func NewExperimentTemplate(ctx *pulumi.Context,
	name string, args *ExperimentTemplateArgs, opts ...pulumi.ResourceOption) (*ExperimentTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.StopConditions == nil {
		return nil, errors.New("invalid value for required argument 'StopConditions'")
	}
	var resource ExperimentTemplate
	err := ctx.RegisterResource("aws:fis/experimentTemplate:ExperimentTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperimentTemplate gets an existing ExperimentTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperimentTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentTemplateState, opts ...pulumi.ResourceOption) (*ExperimentTemplate, error) {
	var resource ExperimentTemplate
	err := ctx.ReadResource("aws:fis/experimentTemplate:ExperimentTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExperimentTemplate resources.
type experimentTemplateState struct {
	Actions        []ExperimentTemplateAction        `pulumi:"actions"`
	Description    *string                           `pulumi:"description"`
	RoleArn        *string                           `pulumi:"roleArn"`
	StopConditions []ExperimentTemplateStopCondition `pulumi:"stopConditions"`
	Tags           map[string]string                 `pulumi:"tags"`
	TagsAll        map[string]string                 `pulumi:"tagsAll"`
	Targets        []ExperimentTemplateTarget        `pulumi:"targets"`
}

type ExperimentTemplateState struct {
	Actions        ExperimentTemplateActionArrayInput
	Description    pulumi.StringPtrInput
	RoleArn        pulumi.StringPtrInput
	StopConditions ExperimentTemplateStopConditionArrayInput
	Tags           pulumi.StringMapInput
	TagsAll        pulumi.StringMapInput
	Targets        ExperimentTemplateTargetArrayInput
}

func (ExperimentTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentTemplateState)(nil)).Elem()
}

type experimentTemplateArgs struct {
	Actions        []ExperimentTemplateAction        `pulumi:"actions"`
	Description    string                            `pulumi:"description"`
	RoleArn        string                            `pulumi:"roleArn"`
	StopConditions []ExperimentTemplateStopCondition `pulumi:"stopConditions"`
	Tags           map[string]string                 `pulumi:"tags"`
	Targets        []ExperimentTemplateTarget        `pulumi:"targets"`
}

// The set of arguments for constructing a ExperimentTemplate resource.
type ExperimentTemplateArgs struct {
	Actions        ExperimentTemplateActionArrayInput
	Description    pulumi.StringInput
	RoleArn        pulumi.StringInput
	StopConditions ExperimentTemplateStopConditionArrayInput
	Tags           pulumi.StringMapInput
	Targets        ExperimentTemplateTargetArrayInput
}

func (ExperimentTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentTemplateArgs)(nil)).Elem()
}

type ExperimentTemplateInput interface {
	pulumi.Input

	ToExperimentTemplateOutput() ExperimentTemplateOutput
	ToExperimentTemplateOutputWithContext(ctx context.Context) ExperimentTemplateOutput
}

func (*ExperimentTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentTemplate)(nil)).Elem()
}

func (i *ExperimentTemplate) ToExperimentTemplateOutput() ExperimentTemplateOutput {
	return i.ToExperimentTemplateOutputWithContext(context.Background())
}

func (i *ExperimentTemplate) ToExperimentTemplateOutputWithContext(ctx context.Context) ExperimentTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateOutput)
}

// ExperimentTemplateArrayInput is an input type that accepts ExperimentTemplateArray and ExperimentTemplateArrayOutput values.
// You can construct a concrete instance of `ExperimentTemplateArrayInput` via:
//
//	ExperimentTemplateArray{ ExperimentTemplateArgs{...} }
type ExperimentTemplateArrayInput interface {
	pulumi.Input

	ToExperimentTemplateArrayOutput() ExperimentTemplateArrayOutput
	ToExperimentTemplateArrayOutputWithContext(context.Context) ExperimentTemplateArrayOutput
}

type ExperimentTemplateArray []ExperimentTemplateInput

func (ExperimentTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExperimentTemplate)(nil)).Elem()
}

func (i ExperimentTemplateArray) ToExperimentTemplateArrayOutput() ExperimentTemplateArrayOutput {
	return i.ToExperimentTemplateArrayOutputWithContext(context.Background())
}

func (i ExperimentTemplateArray) ToExperimentTemplateArrayOutputWithContext(ctx context.Context) ExperimentTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateArrayOutput)
}

// ExperimentTemplateMapInput is an input type that accepts ExperimentTemplateMap and ExperimentTemplateMapOutput values.
// You can construct a concrete instance of `ExperimentTemplateMapInput` via:
//
//	ExperimentTemplateMap{ "key": ExperimentTemplateArgs{...} }
type ExperimentTemplateMapInput interface {
	pulumi.Input

	ToExperimentTemplateMapOutput() ExperimentTemplateMapOutput
	ToExperimentTemplateMapOutputWithContext(context.Context) ExperimentTemplateMapOutput
}

type ExperimentTemplateMap map[string]ExperimentTemplateInput

func (ExperimentTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExperimentTemplate)(nil)).Elem()
}

func (i ExperimentTemplateMap) ToExperimentTemplateMapOutput() ExperimentTemplateMapOutput {
	return i.ToExperimentTemplateMapOutputWithContext(context.Background())
}

func (i ExperimentTemplateMap) ToExperimentTemplateMapOutputWithContext(ctx context.Context) ExperimentTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateMapOutput)
}

type ExperimentTemplateOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentTemplate)(nil)).Elem()
}

func (o ExperimentTemplateOutput) ToExperimentTemplateOutput() ExperimentTemplateOutput {
	return o
}

func (o ExperimentTemplateOutput) ToExperimentTemplateOutputWithContext(ctx context.Context) ExperimentTemplateOutput {
	return o
}

func (o ExperimentTemplateOutput) Actions() ExperimentTemplateActionArrayOutput {
	return o.ApplyT(func(v *ExperimentTemplate) ExperimentTemplateActionArrayOutput { return v.Actions }).(ExperimentTemplateActionArrayOutput)
}

func (o ExperimentTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ExperimentTemplateOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentTemplate) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o ExperimentTemplateOutput) StopConditions() ExperimentTemplateStopConditionArrayOutput {
	return o.ApplyT(func(v *ExperimentTemplate) ExperimentTemplateStopConditionArrayOutput { return v.StopConditions }).(ExperimentTemplateStopConditionArrayOutput)
}

func (o ExperimentTemplateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExperimentTemplate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ExperimentTemplateOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExperimentTemplate) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ExperimentTemplateOutput) Targets() ExperimentTemplateTargetArrayOutput {
	return o.ApplyT(func(v *ExperimentTemplate) ExperimentTemplateTargetArrayOutput { return v.Targets }).(ExperimentTemplateTargetArrayOutput)
}

type ExperimentTemplateArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExperimentTemplate)(nil)).Elem()
}

func (o ExperimentTemplateArrayOutput) ToExperimentTemplateArrayOutput() ExperimentTemplateArrayOutput {
	return o
}

func (o ExperimentTemplateArrayOutput) ToExperimentTemplateArrayOutputWithContext(ctx context.Context) ExperimentTemplateArrayOutput {
	return o
}

func (o ExperimentTemplateArrayOutput) Index(i pulumi.IntInput) ExperimentTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExperimentTemplate {
		return vs[0].([]*ExperimentTemplate)[vs[1].(int)]
	}).(ExperimentTemplateOutput)
}

type ExperimentTemplateMapOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExperimentTemplate)(nil)).Elem()
}

func (o ExperimentTemplateMapOutput) ToExperimentTemplateMapOutput() ExperimentTemplateMapOutput {
	return o
}

func (o ExperimentTemplateMapOutput) ToExperimentTemplateMapOutputWithContext(ctx context.Context) ExperimentTemplateMapOutput {
	return o
}

func (o ExperimentTemplateMapOutput) MapIndex(k pulumi.StringInput) ExperimentTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExperimentTemplate {
		return vs[0].(map[string]*ExperimentTemplate)[vs[1].(string)]
	}).(ExperimentTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateInput)(nil)).Elem(), &ExperimentTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateArrayInput)(nil)).Elem(), ExperimentTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateMapInput)(nil)).Elem(), ExperimentTemplateMap{})
	pulumi.RegisterOutputType(ExperimentTemplateOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateArrayOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateMapOutput{})
}
