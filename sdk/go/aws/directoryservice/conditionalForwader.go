// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a conditional forwarder for managed Microsoft AD in AWS Directory Service.
type ConditionalForwader struct {
	s *pulumi.ResourceState
}

// NewConditionalForwader registers a new resource with the given unique name, arguments, and options.
func NewConditionalForwader(ctx *pulumi.Context,
	name string, args *ConditionalForwaderArgs, opts ...pulumi.ResourceOpt) (*ConditionalForwader, error) {
	if args == nil || args.DirectoryId == nil {
		return nil, errors.New("missing required argument 'DirectoryId'")
	}
	if args == nil || args.DnsIps == nil {
		return nil, errors.New("missing required argument 'DnsIps'")
	}
	if args == nil || args.RemoteDomainName == nil {
		return nil, errors.New("missing required argument 'RemoteDomainName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["directoryId"] = nil
		inputs["dnsIps"] = nil
		inputs["remoteDomainName"] = nil
	} else {
		inputs["directoryId"] = args.DirectoryId
		inputs["dnsIps"] = args.DnsIps
		inputs["remoteDomainName"] = args.RemoteDomainName
	}
	s, err := ctx.RegisterResource("aws:directoryservice/conditionalForwader:ConditionalForwader", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConditionalForwader{s: s}, nil
}

// GetConditionalForwader gets an existing ConditionalForwader resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConditionalForwader(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ConditionalForwaderState, opts ...pulumi.ResourceOpt) (*ConditionalForwader, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["directoryId"] = state.DirectoryId
		inputs["dnsIps"] = state.DnsIps
		inputs["remoteDomainName"] = state.RemoteDomainName
	}
	s, err := ctx.ReadResource("aws:directoryservice/conditionalForwader:ConditionalForwader", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConditionalForwader{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ConditionalForwader) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ConditionalForwader) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The id of directory.
func (r *ConditionalForwader) DirectoryId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["directoryId"])
}

// A list of forwarder IP addresses.
func (r *ConditionalForwader) DnsIps() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dnsIps"])
}

// The fully qualified domain name of the remote domain for which forwarders will be used.
func (r *ConditionalForwader) RemoteDomainName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["remoteDomainName"])
}

// Input properties used for looking up and filtering ConditionalForwader resources.
type ConditionalForwaderState struct {
	// The id of directory.
	DirectoryId interface{}
	// A list of forwarder IP addresses.
	DnsIps interface{}
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName interface{}
}

// The set of arguments for constructing a ConditionalForwader resource.
type ConditionalForwaderArgs struct {
	// The id of directory.
	DirectoryId interface{}
	// A list of forwarder IP addresses.
	DnsIps interface{}
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName interface{}
}
