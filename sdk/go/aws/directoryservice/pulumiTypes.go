// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DirectoryConnectSettings struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The IP addresses of the AD Connector servers.
	ConnectIps []string `pulumi:"connectIps"`
	// The DNS IP addresses of the domain to connect to.
	CustomerDnsIps []string `pulumi:"customerDnsIps"`
	// The username corresponding to the password provided.
	CustomerUsername string `pulumi:"customerUsername"`
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds []string `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId string `pulumi:"vpcId"`
}

// DirectoryConnectSettingsInput is an input type that accepts DirectoryConnectSettingsArgs and DirectoryConnectSettingsOutput values.
// You can construct a concrete instance of `DirectoryConnectSettingsInput` via:
//
//	DirectoryConnectSettingsArgs{...}
type DirectoryConnectSettingsInput interface {
	pulumi.Input

	ToDirectoryConnectSettingsOutput() DirectoryConnectSettingsOutput
	ToDirectoryConnectSettingsOutputWithContext(context.Context) DirectoryConnectSettingsOutput
}

type DirectoryConnectSettingsArgs struct {
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The IP addresses of the AD Connector servers.
	ConnectIps pulumi.StringArrayInput `pulumi:"connectIps"`
	// The DNS IP addresses of the domain to connect to.
	CustomerDnsIps pulumi.StringArrayInput `pulumi:"customerDnsIps"`
	// The username corresponding to the password provided.
	CustomerUsername pulumi.StringInput `pulumi:"customerUsername"`
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (DirectoryConnectSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryConnectSettings)(nil)).Elem()
}

func (i DirectoryConnectSettingsArgs) ToDirectoryConnectSettingsOutput() DirectoryConnectSettingsOutput {
	return i.ToDirectoryConnectSettingsOutputWithContext(context.Background())
}

func (i DirectoryConnectSettingsArgs) ToDirectoryConnectSettingsOutputWithContext(ctx context.Context) DirectoryConnectSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryConnectSettingsOutput)
}

func (i DirectoryConnectSettingsArgs) ToDirectoryConnectSettingsPtrOutput() DirectoryConnectSettingsPtrOutput {
	return i.ToDirectoryConnectSettingsPtrOutputWithContext(context.Background())
}

func (i DirectoryConnectSettingsArgs) ToDirectoryConnectSettingsPtrOutputWithContext(ctx context.Context) DirectoryConnectSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryConnectSettingsOutput).ToDirectoryConnectSettingsPtrOutputWithContext(ctx)
}

// DirectoryConnectSettingsPtrInput is an input type that accepts DirectoryConnectSettingsArgs, DirectoryConnectSettingsPtr and DirectoryConnectSettingsPtrOutput values.
// You can construct a concrete instance of `DirectoryConnectSettingsPtrInput` via:
//
//	        DirectoryConnectSettingsArgs{...}
//
//	or:
//
//	        nil
type DirectoryConnectSettingsPtrInput interface {
	pulumi.Input

	ToDirectoryConnectSettingsPtrOutput() DirectoryConnectSettingsPtrOutput
	ToDirectoryConnectSettingsPtrOutputWithContext(context.Context) DirectoryConnectSettingsPtrOutput
}

type directoryConnectSettingsPtrType DirectoryConnectSettingsArgs

func DirectoryConnectSettingsPtr(v *DirectoryConnectSettingsArgs) DirectoryConnectSettingsPtrInput {
	return (*directoryConnectSettingsPtrType)(v)
}

func (*directoryConnectSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryConnectSettings)(nil)).Elem()
}

func (i *directoryConnectSettingsPtrType) ToDirectoryConnectSettingsPtrOutput() DirectoryConnectSettingsPtrOutput {
	return i.ToDirectoryConnectSettingsPtrOutputWithContext(context.Background())
}

func (i *directoryConnectSettingsPtrType) ToDirectoryConnectSettingsPtrOutputWithContext(ctx context.Context) DirectoryConnectSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryConnectSettingsPtrOutput)
}

type DirectoryConnectSettingsOutput struct{ *pulumi.OutputState }

func (DirectoryConnectSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryConnectSettings)(nil)).Elem()
}

func (o DirectoryConnectSettingsOutput) ToDirectoryConnectSettingsOutput() DirectoryConnectSettingsOutput {
	return o
}

func (o DirectoryConnectSettingsOutput) ToDirectoryConnectSettingsOutputWithContext(ctx context.Context) DirectoryConnectSettingsOutput {
	return o
}

func (o DirectoryConnectSettingsOutput) ToDirectoryConnectSettingsPtrOutput() DirectoryConnectSettingsPtrOutput {
	return o.ToDirectoryConnectSettingsPtrOutputWithContext(context.Background())
}

func (o DirectoryConnectSettingsOutput) ToDirectoryConnectSettingsPtrOutputWithContext(ctx context.Context) DirectoryConnectSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DirectoryConnectSettings) *DirectoryConnectSettings {
		return &v
	}).(DirectoryConnectSettingsPtrOutput)
}

func (o DirectoryConnectSettingsOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DirectoryConnectSettings) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The IP addresses of the AD Connector servers.
func (o DirectoryConnectSettingsOutput) ConnectIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DirectoryConnectSettings) []string { return v.ConnectIps }).(pulumi.StringArrayOutput)
}

// The DNS IP addresses of the domain to connect to.
func (o DirectoryConnectSettingsOutput) CustomerDnsIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DirectoryConnectSettings) []string { return v.CustomerDnsIps }).(pulumi.StringArrayOutput)
}

// The username corresponding to the password provided.
func (o DirectoryConnectSettingsOutput) CustomerUsername() pulumi.StringOutput {
	return o.ApplyT(func(v DirectoryConnectSettings) string { return v.CustomerUsername }).(pulumi.StringOutput)
}

// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
func (o DirectoryConnectSettingsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DirectoryConnectSettings) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The identifier of the VPC that the directory is in.
func (o DirectoryConnectSettingsOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v DirectoryConnectSettings) string { return v.VpcId }).(pulumi.StringOutput)
}

type DirectoryConnectSettingsPtrOutput struct{ *pulumi.OutputState }

func (DirectoryConnectSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryConnectSettings)(nil)).Elem()
}

func (o DirectoryConnectSettingsPtrOutput) ToDirectoryConnectSettingsPtrOutput() DirectoryConnectSettingsPtrOutput {
	return o
}

func (o DirectoryConnectSettingsPtrOutput) ToDirectoryConnectSettingsPtrOutputWithContext(ctx context.Context) DirectoryConnectSettingsPtrOutput {
	return o
}

func (o DirectoryConnectSettingsPtrOutput) Elem() DirectoryConnectSettingsOutput {
	return o.ApplyT(func(v *DirectoryConnectSettings) DirectoryConnectSettings {
		if v != nil {
			return *v
		}
		var ret DirectoryConnectSettings
		return ret
	}).(DirectoryConnectSettingsOutput)
}

func (o DirectoryConnectSettingsPtrOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DirectoryConnectSettings) []string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZones
	}).(pulumi.StringArrayOutput)
}

// The IP addresses of the AD Connector servers.
func (o DirectoryConnectSettingsPtrOutput) ConnectIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DirectoryConnectSettings) []string {
		if v == nil {
			return nil
		}
		return v.ConnectIps
	}).(pulumi.StringArrayOutput)
}

// The DNS IP addresses of the domain to connect to.
func (o DirectoryConnectSettingsPtrOutput) CustomerDnsIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DirectoryConnectSettings) []string {
		if v == nil {
			return nil
		}
		return v.CustomerDnsIps
	}).(pulumi.StringArrayOutput)
}

// The username corresponding to the password provided.
func (o DirectoryConnectSettingsPtrOutput) CustomerUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectoryConnectSettings) *string {
		if v == nil {
			return nil
		}
		return &v.CustomerUsername
	}).(pulumi.StringPtrOutput)
}

// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
func (o DirectoryConnectSettingsPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DirectoryConnectSettings) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The identifier of the VPC that the directory is in.
func (o DirectoryConnectSettingsPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectoryConnectSettings) *string {
		if v == nil {
			return nil
		}
		return &v.VpcId
	}).(pulumi.StringPtrOutput)
}

type DirectoryVpcSettings struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds []string `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId string `pulumi:"vpcId"`
}

// DirectoryVpcSettingsInput is an input type that accepts DirectoryVpcSettingsArgs and DirectoryVpcSettingsOutput values.
// You can construct a concrete instance of `DirectoryVpcSettingsInput` via:
//
//	DirectoryVpcSettingsArgs{...}
type DirectoryVpcSettingsInput interface {
	pulumi.Input

	ToDirectoryVpcSettingsOutput() DirectoryVpcSettingsOutput
	ToDirectoryVpcSettingsOutputWithContext(context.Context) DirectoryVpcSettingsOutput
}

type DirectoryVpcSettingsArgs struct {
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (DirectoryVpcSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryVpcSettings)(nil)).Elem()
}

func (i DirectoryVpcSettingsArgs) ToDirectoryVpcSettingsOutput() DirectoryVpcSettingsOutput {
	return i.ToDirectoryVpcSettingsOutputWithContext(context.Background())
}

func (i DirectoryVpcSettingsArgs) ToDirectoryVpcSettingsOutputWithContext(ctx context.Context) DirectoryVpcSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryVpcSettingsOutput)
}

func (i DirectoryVpcSettingsArgs) ToDirectoryVpcSettingsPtrOutput() DirectoryVpcSettingsPtrOutput {
	return i.ToDirectoryVpcSettingsPtrOutputWithContext(context.Background())
}

func (i DirectoryVpcSettingsArgs) ToDirectoryVpcSettingsPtrOutputWithContext(ctx context.Context) DirectoryVpcSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryVpcSettingsOutput).ToDirectoryVpcSettingsPtrOutputWithContext(ctx)
}

// DirectoryVpcSettingsPtrInput is an input type that accepts DirectoryVpcSettingsArgs, DirectoryVpcSettingsPtr and DirectoryVpcSettingsPtrOutput values.
// You can construct a concrete instance of `DirectoryVpcSettingsPtrInput` via:
//
//	        DirectoryVpcSettingsArgs{...}
//
//	or:
//
//	        nil
type DirectoryVpcSettingsPtrInput interface {
	pulumi.Input

	ToDirectoryVpcSettingsPtrOutput() DirectoryVpcSettingsPtrOutput
	ToDirectoryVpcSettingsPtrOutputWithContext(context.Context) DirectoryVpcSettingsPtrOutput
}

type directoryVpcSettingsPtrType DirectoryVpcSettingsArgs

func DirectoryVpcSettingsPtr(v *DirectoryVpcSettingsArgs) DirectoryVpcSettingsPtrInput {
	return (*directoryVpcSettingsPtrType)(v)
}

func (*directoryVpcSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryVpcSettings)(nil)).Elem()
}

func (i *directoryVpcSettingsPtrType) ToDirectoryVpcSettingsPtrOutput() DirectoryVpcSettingsPtrOutput {
	return i.ToDirectoryVpcSettingsPtrOutputWithContext(context.Background())
}

func (i *directoryVpcSettingsPtrType) ToDirectoryVpcSettingsPtrOutputWithContext(ctx context.Context) DirectoryVpcSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryVpcSettingsPtrOutput)
}

type DirectoryVpcSettingsOutput struct{ *pulumi.OutputState }

func (DirectoryVpcSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryVpcSettings)(nil)).Elem()
}

func (o DirectoryVpcSettingsOutput) ToDirectoryVpcSettingsOutput() DirectoryVpcSettingsOutput {
	return o
}

func (o DirectoryVpcSettingsOutput) ToDirectoryVpcSettingsOutputWithContext(ctx context.Context) DirectoryVpcSettingsOutput {
	return o
}

func (o DirectoryVpcSettingsOutput) ToDirectoryVpcSettingsPtrOutput() DirectoryVpcSettingsPtrOutput {
	return o.ToDirectoryVpcSettingsPtrOutputWithContext(context.Background())
}

func (o DirectoryVpcSettingsOutput) ToDirectoryVpcSettingsPtrOutputWithContext(ctx context.Context) DirectoryVpcSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DirectoryVpcSettings) *DirectoryVpcSettings {
		return &v
	}).(DirectoryVpcSettingsPtrOutput)
}

func (o DirectoryVpcSettingsOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DirectoryVpcSettings) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
func (o DirectoryVpcSettingsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DirectoryVpcSettings) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The identifier of the VPC that the directory is in.
func (o DirectoryVpcSettingsOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v DirectoryVpcSettings) string { return v.VpcId }).(pulumi.StringOutput)
}

type DirectoryVpcSettingsPtrOutput struct{ *pulumi.OutputState }

func (DirectoryVpcSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryVpcSettings)(nil)).Elem()
}

func (o DirectoryVpcSettingsPtrOutput) ToDirectoryVpcSettingsPtrOutput() DirectoryVpcSettingsPtrOutput {
	return o
}

func (o DirectoryVpcSettingsPtrOutput) ToDirectoryVpcSettingsPtrOutputWithContext(ctx context.Context) DirectoryVpcSettingsPtrOutput {
	return o
}

func (o DirectoryVpcSettingsPtrOutput) Elem() DirectoryVpcSettingsOutput {
	return o.ApplyT(func(v *DirectoryVpcSettings) DirectoryVpcSettings {
		if v != nil {
			return *v
		}
		var ret DirectoryVpcSettings
		return ret
	}).(DirectoryVpcSettingsOutput)
}

func (o DirectoryVpcSettingsPtrOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DirectoryVpcSettings) []string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZones
	}).(pulumi.StringArrayOutput)
}

// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
func (o DirectoryVpcSettingsPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DirectoryVpcSettings) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The identifier of the VPC that the directory is in.
func (o DirectoryVpcSettingsPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectoryVpcSettings) *string {
		if v == nil {
			return nil
		}
		return &v.VpcId
	}).(pulumi.StringPtrOutput)
}

type ServiceRegionVpcSettings struct {
	// The identifiers of the subnets for the directory servers.
	SubnetIds []string `pulumi:"subnetIds"`
	// The identifier of the VPC in which to create the directory.
	VpcId string `pulumi:"vpcId"`
}

// ServiceRegionVpcSettingsInput is an input type that accepts ServiceRegionVpcSettingsArgs and ServiceRegionVpcSettingsOutput values.
// You can construct a concrete instance of `ServiceRegionVpcSettingsInput` via:
//
//	ServiceRegionVpcSettingsArgs{...}
type ServiceRegionVpcSettingsInput interface {
	pulumi.Input

	ToServiceRegionVpcSettingsOutput() ServiceRegionVpcSettingsOutput
	ToServiceRegionVpcSettingsOutputWithContext(context.Context) ServiceRegionVpcSettingsOutput
}

type ServiceRegionVpcSettingsArgs struct {
	// The identifiers of the subnets for the directory servers.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The identifier of the VPC in which to create the directory.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (ServiceRegionVpcSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceRegionVpcSettings)(nil)).Elem()
}

func (i ServiceRegionVpcSettingsArgs) ToServiceRegionVpcSettingsOutput() ServiceRegionVpcSettingsOutput {
	return i.ToServiceRegionVpcSettingsOutputWithContext(context.Background())
}

func (i ServiceRegionVpcSettingsArgs) ToServiceRegionVpcSettingsOutputWithContext(ctx context.Context) ServiceRegionVpcSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRegionVpcSettingsOutput)
}

func (i ServiceRegionVpcSettingsArgs) ToServiceRegionVpcSettingsPtrOutput() ServiceRegionVpcSettingsPtrOutput {
	return i.ToServiceRegionVpcSettingsPtrOutputWithContext(context.Background())
}

func (i ServiceRegionVpcSettingsArgs) ToServiceRegionVpcSettingsPtrOutputWithContext(ctx context.Context) ServiceRegionVpcSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRegionVpcSettingsOutput).ToServiceRegionVpcSettingsPtrOutputWithContext(ctx)
}

// ServiceRegionVpcSettingsPtrInput is an input type that accepts ServiceRegionVpcSettingsArgs, ServiceRegionVpcSettingsPtr and ServiceRegionVpcSettingsPtrOutput values.
// You can construct a concrete instance of `ServiceRegionVpcSettingsPtrInput` via:
//
//	        ServiceRegionVpcSettingsArgs{...}
//
//	or:
//
//	        nil
type ServiceRegionVpcSettingsPtrInput interface {
	pulumi.Input

	ToServiceRegionVpcSettingsPtrOutput() ServiceRegionVpcSettingsPtrOutput
	ToServiceRegionVpcSettingsPtrOutputWithContext(context.Context) ServiceRegionVpcSettingsPtrOutput
}

type serviceRegionVpcSettingsPtrType ServiceRegionVpcSettingsArgs

func ServiceRegionVpcSettingsPtr(v *ServiceRegionVpcSettingsArgs) ServiceRegionVpcSettingsPtrInput {
	return (*serviceRegionVpcSettingsPtrType)(v)
}

func (*serviceRegionVpcSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceRegionVpcSettings)(nil)).Elem()
}

func (i *serviceRegionVpcSettingsPtrType) ToServiceRegionVpcSettingsPtrOutput() ServiceRegionVpcSettingsPtrOutput {
	return i.ToServiceRegionVpcSettingsPtrOutputWithContext(context.Background())
}

func (i *serviceRegionVpcSettingsPtrType) ToServiceRegionVpcSettingsPtrOutputWithContext(ctx context.Context) ServiceRegionVpcSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRegionVpcSettingsPtrOutput)
}

type ServiceRegionVpcSettingsOutput struct{ *pulumi.OutputState }

func (ServiceRegionVpcSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceRegionVpcSettings)(nil)).Elem()
}

func (o ServiceRegionVpcSettingsOutput) ToServiceRegionVpcSettingsOutput() ServiceRegionVpcSettingsOutput {
	return o
}

func (o ServiceRegionVpcSettingsOutput) ToServiceRegionVpcSettingsOutputWithContext(ctx context.Context) ServiceRegionVpcSettingsOutput {
	return o
}

func (o ServiceRegionVpcSettingsOutput) ToServiceRegionVpcSettingsPtrOutput() ServiceRegionVpcSettingsPtrOutput {
	return o.ToServiceRegionVpcSettingsPtrOutputWithContext(context.Background())
}

func (o ServiceRegionVpcSettingsOutput) ToServiceRegionVpcSettingsPtrOutputWithContext(ctx context.Context) ServiceRegionVpcSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceRegionVpcSettings) *ServiceRegionVpcSettings {
		return &v
	}).(ServiceRegionVpcSettingsPtrOutput)
}

// The identifiers of the subnets for the directory servers.
func (o ServiceRegionVpcSettingsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceRegionVpcSettings) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The identifier of the VPC in which to create the directory.
func (o ServiceRegionVpcSettingsOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceRegionVpcSettings) string { return v.VpcId }).(pulumi.StringOutput)
}

type ServiceRegionVpcSettingsPtrOutput struct{ *pulumi.OutputState }

func (ServiceRegionVpcSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceRegionVpcSettings)(nil)).Elem()
}

func (o ServiceRegionVpcSettingsPtrOutput) ToServiceRegionVpcSettingsPtrOutput() ServiceRegionVpcSettingsPtrOutput {
	return o
}

func (o ServiceRegionVpcSettingsPtrOutput) ToServiceRegionVpcSettingsPtrOutputWithContext(ctx context.Context) ServiceRegionVpcSettingsPtrOutput {
	return o
}

func (o ServiceRegionVpcSettingsPtrOutput) Elem() ServiceRegionVpcSettingsOutput {
	return o.ApplyT(func(v *ServiceRegionVpcSettings) ServiceRegionVpcSettings {
		if v != nil {
			return *v
		}
		var ret ServiceRegionVpcSettings
		return ret
	}).(ServiceRegionVpcSettingsOutput)
}

// The identifiers of the subnets for the directory servers.
func (o ServiceRegionVpcSettingsPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceRegionVpcSettings) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The identifier of the VPC in which to create the directory.
func (o ServiceRegionVpcSettingsPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceRegionVpcSettings) *string {
		if v == nil {
			return nil
		}
		return &v.VpcId
	}).(pulumi.StringPtrOutput)
}

type SharedDirectoryTarget struct {
	// Identifier of the directory consumer account.
	Id string `pulumi:"id"`
	// Type of identifier to be used in the `id` field. Valid value is `ACCOUNT`. Default is `ACCOUNT`.
	Type *string `pulumi:"type"`
}

// SharedDirectoryTargetInput is an input type that accepts SharedDirectoryTargetArgs and SharedDirectoryTargetOutput values.
// You can construct a concrete instance of `SharedDirectoryTargetInput` via:
//
//	SharedDirectoryTargetArgs{...}
type SharedDirectoryTargetInput interface {
	pulumi.Input

	ToSharedDirectoryTargetOutput() SharedDirectoryTargetOutput
	ToSharedDirectoryTargetOutputWithContext(context.Context) SharedDirectoryTargetOutput
}

type SharedDirectoryTargetArgs struct {
	// Identifier of the directory consumer account.
	Id pulumi.StringInput `pulumi:"id"`
	// Type of identifier to be used in the `id` field. Valid value is `ACCOUNT`. Default is `ACCOUNT`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SharedDirectoryTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedDirectoryTarget)(nil)).Elem()
}

func (i SharedDirectoryTargetArgs) ToSharedDirectoryTargetOutput() SharedDirectoryTargetOutput {
	return i.ToSharedDirectoryTargetOutputWithContext(context.Background())
}

func (i SharedDirectoryTargetArgs) ToSharedDirectoryTargetOutputWithContext(ctx context.Context) SharedDirectoryTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDirectoryTargetOutput)
}

func (i SharedDirectoryTargetArgs) ToSharedDirectoryTargetPtrOutput() SharedDirectoryTargetPtrOutput {
	return i.ToSharedDirectoryTargetPtrOutputWithContext(context.Background())
}

func (i SharedDirectoryTargetArgs) ToSharedDirectoryTargetPtrOutputWithContext(ctx context.Context) SharedDirectoryTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDirectoryTargetOutput).ToSharedDirectoryTargetPtrOutputWithContext(ctx)
}

// SharedDirectoryTargetPtrInput is an input type that accepts SharedDirectoryTargetArgs, SharedDirectoryTargetPtr and SharedDirectoryTargetPtrOutput values.
// You can construct a concrete instance of `SharedDirectoryTargetPtrInput` via:
//
//	        SharedDirectoryTargetArgs{...}
//
//	or:
//
//	        nil
type SharedDirectoryTargetPtrInput interface {
	pulumi.Input

	ToSharedDirectoryTargetPtrOutput() SharedDirectoryTargetPtrOutput
	ToSharedDirectoryTargetPtrOutputWithContext(context.Context) SharedDirectoryTargetPtrOutput
}

type sharedDirectoryTargetPtrType SharedDirectoryTargetArgs

func SharedDirectoryTargetPtr(v *SharedDirectoryTargetArgs) SharedDirectoryTargetPtrInput {
	return (*sharedDirectoryTargetPtrType)(v)
}

func (*sharedDirectoryTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedDirectoryTarget)(nil)).Elem()
}

func (i *sharedDirectoryTargetPtrType) ToSharedDirectoryTargetPtrOutput() SharedDirectoryTargetPtrOutput {
	return i.ToSharedDirectoryTargetPtrOutputWithContext(context.Background())
}

func (i *sharedDirectoryTargetPtrType) ToSharedDirectoryTargetPtrOutputWithContext(ctx context.Context) SharedDirectoryTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDirectoryTargetPtrOutput)
}

type SharedDirectoryTargetOutput struct{ *pulumi.OutputState }

func (SharedDirectoryTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedDirectoryTarget)(nil)).Elem()
}

func (o SharedDirectoryTargetOutput) ToSharedDirectoryTargetOutput() SharedDirectoryTargetOutput {
	return o
}

func (o SharedDirectoryTargetOutput) ToSharedDirectoryTargetOutputWithContext(ctx context.Context) SharedDirectoryTargetOutput {
	return o
}

func (o SharedDirectoryTargetOutput) ToSharedDirectoryTargetPtrOutput() SharedDirectoryTargetPtrOutput {
	return o.ToSharedDirectoryTargetPtrOutputWithContext(context.Background())
}

func (o SharedDirectoryTargetOutput) ToSharedDirectoryTargetPtrOutputWithContext(ctx context.Context) SharedDirectoryTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharedDirectoryTarget) *SharedDirectoryTarget {
		return &v
	}).(SharedDirectoryTargetPtrOutput)
}

// Identifier of the directory consumer account.
func (o SharedDirectoryTargetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SharedDirectoryTarget) string { return v.Id }).(pulumi.StringOutput)
}

// Type of identifier to be used in the `id` field. Valid value is `ACCOUNT`. Default is `ACCOUNT`.
func (o SharedDirectoryTargetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedDirectoryTarget) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SharedDirectoryTargetPtrOutput struct{ *pulumi.OutputState }

func (SharedDirectoryTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedDirectoryTarget)(nil)).Elem()
}

func (o SharedDirectoryTargetPtrOutput) ToSharedDirectoryTargetPtrOutput() SharedDirectoryTargetPtrOutput {
	return o
}

func (o SharedDirectoryTargetPtrOutput) ToSharedDirectoryTargetPtrOutputWithContext(ctx context.Context) SharedDirectoryTargetPtrOutput {
	return o
}

func (o SharedDirectoryTargetPtrOutput) Elem() SharedDirectoryTargetOutput {
	return o.ApplyT(func(v *SharedDirectoryTarget) SharedDirectoryTarget {
		if v != nil {
			return *v
		}
		var ret SharedDirectoryTarget
		return ret
	}).(SharedDirectoryTargetOutput)
}

// Identifier of the directory consumer account.
func (o SharedDirectoryTargetPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedDirectoryTarget) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of identifier to be used in the `id` field. Valid value is `ACCOUNT`. Default is `ACCOUNT`.
func (o SharedDirectoryTargetPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedDirectoryTarget) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type GetDirectoryConnectSetting struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// IP addresses of the AD Connector servers.
	ConnectIps []string `pulumi:"connectIps"`
	// DNS IP addresses of the domain to connect to.
	CustomerDnsIps []string `pulumi:"customerDnsIps"`
	// Username corresponding to the password provided.
	CustomerUsername string `pulumi:"customerUsername"`
	// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
	SubnetIds []string `pulumi:"subnetIds"`
	// ID of the VPC that the connector is in.
	VpcId string `pulumi:"vpcId"`
}

// GetDirectoryConnectSettingInput is an input type that accepts GetDirectoryConnectSettingArgs and GetDirectoryConnectSettingOutput values.
// You can construct a concrete instance of `GetDirectoryConnectSettingInput` via:
//
//	GetDirectoryConnectSettingArgs{...}
type GetDirectoryConnectSettingInput interface {
	pulumi.Input

	ToGetDirectoryConnectSettingOutput() GetDirectoryConnectSettingOutput
	ToGetDirectoryConnectSettingOutputWithContext(context.Context) GetDirectoryConnectSettingOutput
}

type GetDirectoryConnectSettingArgs struct {
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// IP addresses of the AD Connector servers.
	ConnectIps pulumi.StringArrayInput `pulumi:"connectIps"`
	// DNS IP addresses of the domain to connect to.
	CustomerDnsIps pulumi.StringArrayInput `pulumi:"customerDnsIps"`
	// Username corresponding to the password provided.
	CustomerUsername pulumi.StringInput `pulumi:"customerUsername"`
	// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// ID of the VPC that the connector is in.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetDirectoryConnectSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryConnectSetting)(nil)).Elem()
}

func (i GetDirectoryConnectSettingArgs) ToGetDirectoryConnectSettingOutput() GetDirectoryConnectSettingOutput {
	return i.ToGetDirectoryConnectSettingOutputWithContext(context.Background())
}

func (i GetDirectoryConnectSettingArgs) ToGetDirectoryConnectSettingOutputWithContext(ctx context.Context) GetDirectoryConnectSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectoryConnectSettingOutput)
}

// GetDirectoryConnectSettingArrayInput is an input type that accepts GetDirectoryConnectSettingArray and GetDirectoryConnectSettingArrayOutput values.
// You can construct a concrete instance of `GetDirectoryConnectSettingArrayInput` via:
//
//	GetDirectoryConnectSettingArray{ GetDirectoryConnectSettingArgs{...} }
type GetDirectoryConnectSettingArrayInput interface {
	pulumi.Input

	ToGetDirectoryConnectSettingArrayOutput() GetDirectoryConnectSettingArrayOutput
	ToGetDirectoryConnectSettingArrayOutputWithContext(context.Context) GetDirectoryConnectSettingArrayOutput
}

type GetDirectoryConnectSettingArray []GetDirectoryConnectSettingInput

func (GetDirectoryConnectSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDirectoryConnectSetting)(nil)).Elem()
}

func (i GetDirectoryConnectSettingArray) ToGetDirectoryConnectSettingArrayOutput() GetDirectoryConnectSettingArrayOutput {
	return i.ToGetDirectoryConnectSettingArrayOutputWithContext(context.Background())
}

func (i GetDirectoryConnectSettingArray) ToGetDirectoryConnectSettingArrayOutputWithContext(ctx context.Context) GetDirectoryConnectSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectoryConnectSettingArrayOutput)
}

type GetDirectoryConnectSettingOutput struct{ *pulumi.OutputState }

func (GetDirectoryConnectSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryConnectSetting)(nil)).Elem()
}

func (o GetDirectoryConnectSettingOutput) ToGetDirectoryConnectSettingOutput() GetDirectoryConnectSettingOutput {
	return o
}

func (o GetDirectoryConnectSettingOutput) ToGetDirectoryConnectSettingOutputWithContext(ctx context.Context) GetDirectoryConnectSettingOutput {
	return o
}

func (o GetDirectoryConnectSettingOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDirectoryConnectSetting) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// IP addresses of the AD Connector servers.
func (o GetDirectoryConnectSettingOutput) ConnectIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDirectoryConnectSetting) []string { return v.ConnectIps }).(pulumi.StringArrayOutput)
}

// DNS IP addresses of the domain to connect to.
func (o GetDirectoryConnectSettingOutput) CustomerDnsIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDirectoryConnectSetting) []string { return v.CustomerDnsIps }).(pulumi.StringArrayOutput)
}

// Username corresponding to the password provided.
func (o GetDirectoryConnectSettingOutput) CustomerUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetDirectoryConnectSetting) string { return v.CustomerUsername }).(pulumi.StringOutput)
}

// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
func (o GetDirectoryConnectSettingOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDirectoryConnectSetting) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// ID of the VPC that the connector is in.
func (o GetDirectoryConnectSettingOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDirectoryConnectSetting) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetDirectoryConnectSettingArrayOutput struct{ *pulumi.OutputState }

func (GetDirectoryConnectSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDirectoryConnectSetting)(nil)).Elem()
}

func (o GetDirectoryConnectSettingArrayOutput) ToGetDirectoryConnectSettingArrayOutput() GetDirectoryConnectSettingArrayOutput {
	return o
}

func (o GetDirectoryConnectSettingArrayOutput) ToGetDirectoryConnectSettingArrayOutputWithContext(ctx context.Context) GetDirectoryConnectSettingArrayOutput {
	return o
}

func (o GetDirectoryConnectSettingArrayOutput) Index(i pulumi.IntInput) GetDirectoryConnectSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDirectoryConnectSetting {
		return vs[0].([]GetDirectoryConnectSetting)[vs[1].(int)]
	}).(GetDirectoryConnectSettingOutput)
}

type GetDirectoryRadiusSetting struct {
	// The protocol specified for your RADIUS endpoints.
	AuthenticationProtocol string `pulumi:"authenticationProtocol"`
	// Display label.
	DisplayLabel string `pulumi:"displayLabel"`
	// Port that your RADIUS server is using for communications.
	RadiusPort int `pulumi:"radiusPort"`
	// Maximum number of times that communication with the RADIUS server is attempted.
	RadiusRetries int `pulumi:"radiusRetries"`
	// Set of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
	RadiusServers []string `pulumi:"radiusServers"`
	// Amount of time, in seconds, to wait for the RADIUS server to respond.
	RadiusTimeout int `pulumi:"radiusTimeout"`
	// Not currently used.
	UseSameUsername bool `pulumi:"useSameUsername"`
}

// GetDirectoryRadiusSettingInput is an input type that accepts GetDirectoryRadiusSettingArgs and GetDirectoryRadiusSettingOutput values.
// You can construct a concrete instance of `GetDirectoryRadiusSettingInput` via:
//
//	GetDirectoryRadiusSettingArgs{...}
type GetDirectoryRadiusSettingInput interface {
	pulumi.Input

	ToGetDirectoryRadiusSettingOutput() GetDirectoryRadiusSettingOutput
	ToGetDirectoryRadiusSettingOutputWithContext(context.Context) GetDirectoryRadiusSettingOutput
}

type GetDirectoryRadiusSettingArgs struct {
	// The protocol specified for your RADIUS endpoints.
	AuthenticationProtocol pulumi.StringInput `pulumi:"authenticationProtocol"`
	// Display label.
	DisplayLabel pulumi.StringInput `pulumi:"displayLabel"`
	// Port that your RADIUS server is using for communications.
	RadiusPort pulumi.IntInput `pulumi:"radiusPort"`
	// Maximum number of times that communication with the RADIUS server is attempted.
	RadiusRetries pulumi.IntInput `pulumi:"radiusRetries"`
	// Set of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
	RadiusServers pulumi.StringArrayInput `pulumi:"radiusServers"`
	// Amount of time, in seconds, to wait for the RADIUS server to respond.
	RadiusTimeout pulumi.IntInput `pulumi:"radiusTimeout"`
	// Not currently used.
	UseSameUsername pulumi.BoolInput `pulumi:"useSameUsername"`
}

func (GetDirectoryRadiusSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryRadiusSetting)(nil)).Elem()
}

func (i GetDirectoryRadiusSettingArgs) ToGetDirectoryRadiusSettingOutput() GetDirectoryRadiusSettingOutput {
	return i.ToGetDirectoryRadiusSettingOutputWithContext(context.Background())
}

func (i GetDirectoryRadiusSettingArgs) ToGetDirectoryRadiusSettingOutputWithContext(ctx context.Context) GetDirectoryRadiusSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectoryRadiusSettingOutput)
}

// GetDirectoryRadiusSettingArrayInput is an input type that accepts GetDirectoryRadiusSettingArray and GetDirectoryRadiusSettingArrayOutput values.
// You can construct a concrete instance of `GetDirectoryRadiusSettingArrayInput` via:
//
//	GetDirectoryRadiusSettingArray{ GetDirectoryRadiusSettingArgs{...} }
type GetDirectoryRadiusSettingArrayInput interface {
	pulumi.Input

	ToGetDirectoryRadiusSettingArrayOutput() GetDirectoryRadiusSettingArrayOutput
	ToGetDirectoryRadiusSettingArrayOutputWithContext(context.Context) GetDirectoryRadiusSettingArrayOutput
}

type GetDirectoryRadiusSettingArray []GetDirectoryRadiusSettingInput

func (GetDirectoryRadiusSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDirectoryRadiusSetting)(nil)).Elem()
}

func (i GetDirectoryRadiusSettingArray) ToGetDirectoryRadiusSettingArrayOutput() GetDirectoryRadiusSettingArrayOutput {
	return i.ToGetDirectoryRadiusSettingArrayOutputWithContext(context.Background())
}

func (i GetDirectoryRadiusSettingArray) ToGetDirectoryRadiusSettingArrayOutputWithContext(ctx context.Context) GetDirectoryRadiusSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectoryRadiusSettingArrayOutput)
}

type GetDirectoryRadiusSettingOutput struct{ *pulumi.OutputState }

func (GetDirectoryRadiusSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryRadiusSetting)(nil)).Elem()
}

func (o GetDirectoryRadiusSettingOutput) ToGetDirectoryRadiusSettingOutput() GetDirectoryRadiusSettingOutput {
	return o
}

func (o GetDirectoryRadiusSettingOutput) ToGetDirectoryRadiusSettingOutputWithContext(ctx context.Context) GetDirectoryRadiusSettingOutput {
	return o
}

// The protocol specified for your RADIUS endpoints.
func (o GetDirectoryRadiusSettingOutput) AuthenticationProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDirectoryRadiusSetting) string { return v.AuthenticationProtocol }).(pulumi.StringOutput)
}

// Display label.
func (o GetDirectoryRadiusSettingOutput) DisplayLabel() pulumi.StringOutput {
	return o.ApplyT(func(v GetDirectoryRadiusSetting) string { return v.DisplayLabel }).(pulumi.StringOutput)
}

// Port that your RADIUS server is using for communications.
func (o GetDirectoryRadiusSettingOutput) RadiusPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetDirectoryRadiusSetting) int { return v.RadiusPort }).(pulumi.IntOutput)
}

// Maximum number of times that communication with the RADIUS server is attempted.
func (o GetDirectoryRadiusSettingOutput) RadiusRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GetDirectoryRadiusSetting) int { return v.RadiusRetries }).(pulumi.IntOutput)
}

// Set of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
func (o GetDirectoryRadiusSettingOutput) RadiusServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDirectoryRadiusSetting) []string { return v.RadiusServers }).(pulumi.StringArrayOutput)
}

// Amount of time, in seconds, to wait for the RADIUS server to respond.
func (o GetDirectoryRadiusSettingOutput) RadiusTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDirectoryRadiusSetting) int { return v.RadiusTimeout }).(pulumi.IntOutput)
}

// Not currently used.
func (o GetDirectoryRadiusSettingOutput) UseSameUsername() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDirectoryRadiusSetting) bool { return v.UseSameUsername }).(pulumi.BoolOutput)
}

type GetDirectoryRadiusSettingArrayOutput struct{ *pulumi.OutputState }

func (GetDirectoryRadiusSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDirectoryRadiusSetting)(nil)).Elem()
}

func (o GetDirectoryRadiusSettingArrayOutput) ToGetDirectoryRadiusSettingArrayOutput() GetDirectoryRadiusSettingArrayOutput {
	return o
}

func (o GetDirectoryRadiusSettingArrayOutput) ToGetDirectoryRadiusSettingArrayOutputWithContext(ctx context.Context) GetDirectoryRadiusSettingArrayOutput {
	return o
}

func (o GetDirectoryRadiusSettingArrayOutput) Index(i pulumi.IntInput) GetDirectoryRadiusSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDirectoryRadiusSetting {
		return vs[0].([]GetDirectoryRadiusSetting)[vs[1].(int)]
	}).(GetDirectoryRadiusSettingOutput)
}

type GetDirectoryVpcSetting struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
	SubnetIds []string `pulumi:"subnetIds"`
	// ID of the VPC that the connector is in.
	VpcId string `pulumi:"vpcId"`
}

// GetDirectoryVpcSettingInput is an input type that accepts GetDirectoryVpcSettingArgs and GetDirectoryVpcSettingOutput values.
// You can construct a concrete instance of `GetDirectoryVpcSettingInput` via:
//
//	GetDirectoryVpcSettingArgs{...}
type GetDirectoryVpcSettingInput interface {
	pulumi.Input

	ToGetDirectoryVpcSettingOutput() GetDirectoryVpcSettingOutput
	ToGetDirectoryVpcSettingOutputWithContext(context.Context) GetDirectoryVpcSettingOutput
}

type GetDirectoryVpcSettingArgs struct {
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// ID of the VPC that the connector is in.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetDirectoryVpcSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryVpcSetting)(nil)).Elem()
}

func (i GetDirectoryVpcSettingArgs) ToGetDirectoryVpcSettingOutput() GetDirectoryVpcSettingOutput {
	return i.ToGetDirectoryVpcSettingOutputWithContext(context.Background())
}

func (i GetDirectoryVpcSettingArgs) ToGetDirectoryVpcSettingOutputWithContext(ctx context.Context) GetDirectoryVpcSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectoryVpcSettingOutput)
}

// GetDirectoryVpcSettingArrayInput is an input type that accepts GetDirectoryVpcSettingArray and GetDirectoryVpcSettingArrayOutput values.
// You can construct a concrete instance of `GetDirectoryVpcSettingArrayInput` via:
//
//	GetDirectoryVpcSettingArray{ GetDirectoryVpcSettingArgs{...} }
type GetDirectoryVpcSettingArrayInput interface {
	pulumi.Input

	ToGetDirectoryVpcSettingArrayOutput() GetDirectoryVpcSettingArrayOutput
	ToGetDirectoryVpcSettingArrayOutputWithContext(context.Context) GetDirectoryVpcSettingArrayOutput
}

type GetDirectoryVpcSettingArray []GetDirectoryVpcSettingInput

func (GetDirectoryVpcSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDirectoryVpcSetting)(nil)).Elem()
}

func (i GetDirectoryVpcSettingArray) ToGetDirectoryVpcSettingArrayOutput() GetDirectoryVpcSettingArrayOutput {
	return i.ToGetDirectoryVpcSettingArrayOutputWithContext(context.Background())
}

func (i GetDirectoryVpcSettingArray) ToGetDirectoryVpcSettingArrayOutputWithContext(ctx context.Context) GetDirectoryVpcSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectoryVpcSettingArrayOutput)
}

type GetDirectoryVpcSettingOutput struct{ *pulumi.OutputState }

func (GetDirectoryVpcSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryVpcSetting)(nil)).Elem()
}

func (o GetDirectoryVpcSettingOutput) ToGetDirectoryVpcSettingOutput() GetDirectoryVpcSettingOutput {
	return o
}

func (o GetDirectoryVpcSettingOutput) ToGetDirectoryVpcSettingOutputWithContext(ctx context.Context) GetDirectoryVpcSettingOutput {
	return o
}

func (o GetDirectoryVpcSettingOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDirectoryVpcSetting) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
func (o GetDirectoryVpcSettingOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDirectoryVpcSetting) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// ID of the VPC that the connector is in.
func (o GetDirectoryVpcSettingOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDirectoryVpcSetting) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetDirectoryVpcSettingArrayOutput struct{ *pulumi.OutputState }

func (GetDirectoryVpcSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDirectoryVpcSetting)(nil)).Elem()
}

func (o GetDirectoryVpcSettingArrayOutput) ToGetDirectoryVpcSettingArrayOutput() GetDirectoryVpcSettingArrayOutput {
	return o
}

func (o GetDirectoryVpcSettingArrayOutput) ToGetDirectoryVpcSettingArrayOutputWithContext(ctx context.Context) GetDirectoryVpcSettingArrayOutput {
	return o
}

func (o GetDirectoryVpcSettingArrayOutput) Index(i pulumi.IntInput) GetDirectoryVpcSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDirectoryVpcSetting {
		return vs[0].([]GetDirectoryVpcSetting)[vs[1].(int)]
	}).(GetDirectoryVpcSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryConnectSettingsInput)(nil)).Elem(), DirectoryConnectSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryConnectSettingsPtrInput)(nil)).Elem(), DirectoryConnectSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryVpcSettingsInput)(nil)).Elem(), DirectoryVpcSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryVpcSettingsPtrInput)(nil)).Elem(), DirectoryVpcSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceRegionVpcSettingsInput)(nil)).Elem(), ServiceRegionVpcSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceRegionVpcSettingsPtrInput)(nil)).Elem(), ServiceRegionVpcSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedDirectoryTargetInput)(nil)).Elem(), SharedDirectoryTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedDirectoryTargetPtrInput)(nil)).Elem(), SharedDirectoryTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDirectoryConnectSettingInput)(nil)).Elem(), GetDirectoryConnectSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDirectoryConnectSettingArrayInput)(nil)).Elem(), GetDirectoryConnectSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDirectoryRadiusSettingInput)(nil)).Elem(), GetDirectoryRadiusSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDirectoryRadiusSettingArrayInput)(nil)).Elem(), GetDirectoryRadiusSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDirectoryVpcSettingInput)(nil)).Elem(), GetDirectoryVpcSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDirectoryVpcSettingArrayInput)(nil)).Elem(), GetDirectoryVpcSettingArray{})
	pulumi.RegisterOutputType(DirectoryConnectSettingsOutput{})
	pulumi.RegisterOutputType(DirectoryConnectSettingsPtrOutput{})
	pulumi.RegisterOutputType(DirectoryVpcSettingsOutput{})
	pulumi.RegisterOutputType(DirectoryVpcSettingsPtrOutput{})
	pulumi.RegisterOutputType(ServiceRegionVpcSettingsOutput{})
	pulumi.RegisterOutputType(ServiceRegionVpcSettingsPtrOutput{})
	pulumi.RegisterOutputType(SharedDirectoryTargetOutput{})
	pulumi.RegisterOutputType(SharedDirectoryTargetPtrOutput{})
	pulumi.RegisterOutputType(GetDirectoryConnectSettingOutput{})
	pulumi.RegisterOutputType(GetDirectoryConnectSettingArrayOutput{})
	pulumi.RegisterOutputType(GetDirectoryRadiusSettingOutput{})
	pulumi.RegisterOutputType(GetDirectoryRadiusSettingArrayOutput{})
	pulumi.RegisterOutputType(GetDirectoryVpcSettingOutput{})
	pulumi.RegisterOutputType(GetDirectoryVpcSettingArrayOutput{})
}
