// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a replicated Region and directory for Multi-Region replication.
// Multi-Region replication is only supported for the Enterprise Edition of AWS Managed Microsoft AD.
//
// ## Import
//
// Replicated Regions can be imported using directory ID,Region name e.g.,
//
// ```sh
//
//	$ pulumi import aws:directoryservice/serviceRegion:ServiceRegion example d-9267651497,us-east-2
//
// ```
type ServiceRegion struct {
	pulumi.CustomResourceState

	// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
	DesiredNumberOfDomainControllers pulumi.IntOutput `pulumi:"desiredNumberOfDomainControllers"`
	// The identifier of the directory to which you want to add Region replication.
	DirectoryId pulumi.StringOutput `pulumi:"directoryId"`
	// The name of the Region where you want to add domain controllers for replication.
	RegionName pulumi.StringOutput `pulumi:"regionName"`
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// VPC information in the replicated Region. Detailed below.
	VpcSettings ServiceRegionVpcSettingsOutput `pulumi:"vpcSettings"`
}

// NewServiceRegion registers a new resource with the given unique name, arguments, and options.
func NewServiceRegion(ctx *pulumi.Context,
	name string, args *ServiceRegionArgs, opts ...pulumi.ResourceOption) (*ServiceRegion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.RegionName == nil {
		return nil, errors.New("invalid value for required argument 'RegionName'")
	}
	if args.VpcSettings == nil {
		return nil, errors.New("invalid value for required argument 'VpcSettings'")
	}
	var resource ServiceRegion
	err := ctx.RegisterResource("aws:directoryservice/serviceRegion:ServiceRegion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceRegion gets an existing ServiceRegion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceRegion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceRegionState, opts ...pulumi.ResourceOption) (*ServiceRegion, error) {
	var resource ServiceRegion
	err := ctx.ReadResource("aws:directoryservice/serviceRegion:ServiceRegion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceRegion resources.
type serviceRegionState struct {
	// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
	DesiredNumberOfDomainControllers *int `pulumi:"desiredNumberOfDomainControllers"`
	// The identifier of the directory to which you want to add Region replication.
	DirectoryId *string `pulumi:"directoryId"`
	// The name of the Region where you want to add domain controllers for replication.
	RegionName *string `pulumi:"regionName"`
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// VPC information in the replicated Region. Detailed below.
	VpcSettings *ServiceRegionVpcSettings `pulumi:"vpcSettings"`
}

type ServiceRegionState struct {
	// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
	DesiredNumberOfDomainControllers pulumi.IntPtrInput
	// The identifier of the directory to which you want to add Region replication.
	DirectoryId pulumi.StringPtrInput
	// The name of the Region where you want to add domain controllers for replication.
	RegionName pulumi.StringPtrInput
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// VPC information in the replicated Region. Detailed below.
	VpcSettings ServiceRegionVpcSettingsPtrInput
}

func (ServiceRegionState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceRegionState)(nil)).Elem()
}

type serviceRegionArgs struct {
	// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
	DesiredNumberOfDomainControllers *int `pulumi:"desiredNumberOfDomainControllers"`
	// The identifier of the directory to which you want to add Region replication.
	DirectoryId string `pulumi:"directoryId"`
	// The name of the Region where you want to add domain controllers for replication.
	RegionName string `pulumi:"regionName"`
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// VPC information in the replicated Region. Detailed below.
	VpcSettings ServiceRegionVpcSettings `pulumi:"vpcSettings"`
}

// The set of arguments for constructing a ServiceRegion resource.
type ServiceRegionArgs struct {
	// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
	DesiredNumberOfDomainControllers pulumi.IntPtrInput
	// The identifier of the directory to which you want to add Region replication.
	DirectoryId pulumi.StringInput
	// The name of the Region where you want to add domain controllers for replication.
	RegionName pulumi.StringInput
	// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// VPC information in the replicated Region. Detailed below.
	VpcSettings ServiceRegionVpcSettingsInput
}

func (ServiceRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceRegionArgs)(nil)).Elem()
}

type ServiceRegionInput interface {
	pulumi.Input

	ToServiceRegionOutput() ServiceRegionOutput
	ToServiceRegionOutputWithContext(ctx context.Context) ServiceRegionOutput
}

func (*ServiceRegion) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceRegion)(nil)).Elem()
}

func (i *ServiceRegion) ToServiceRegionOutput() ServiceRegionOutput {
	return i.ToServiceRegionOutputWithContext(context.Background())
}

func (i *ServiceRegion) ToServiceRegionOutputWithContext(ctx context.Context) ServiceRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRegionOutput)
}

// ServiceRegionArrayInput is an input type that accepts ServiceRegionArray and ServiceRegionArrayOutput values.
// You can construct a concrete instance of `ServiceRegionArrayInput` via:
//
//	ServiceRegionArray{ ServiceRegionArgs{...} }
type ServiceRegionArrayInput interface {
	pulumi.Input

	ToServiceRegionArrayOutput() ServiceRegionArrayOutput
	ToServiceRegionArrayOutputWithContext(context.Context) ServiceRegionArrayOutput
}

type ServiceRegionArray []ServiceRegionInput

func (ServiceRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceRegion)(nil)).Elem()
}

func (i ServiceRegionArray) ToServiceRegionArrayOutput() ServiceRegionArrayOutput {
	return i.ToServiceRegionArrayOutputWithContext(context.Background())
}

func (i ServiceRegionArray) ToServiceRegionArrayOutputWithContext(ctx context.Context) ServiceRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRegionArrayOutput)
}

// ServiceRegionMapInput is an input type that accepts ServiceRegionMap and ServiceRegionMapOutput values.
// You can construct a concrete instance of `ServiceRegionMapInput` via:
//
//	ServiceRegionMap{ "key": ServiceRegionArgs{...} }
type ServiceRegionMapInput interface {
	pulumi.Input

	ToServiceRegionMapOutput() ServiceRegionMapOutput
	ToServiceRegionMapOutputWithContext(context.Context) ServiceRegionMapOutput
}

type ServiceRegionMap map[string]ServiceRegionInput

func (ServiceRegionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceRegion)(nil)).Elem()
}

func (i ServiceRegionMap) ToServiceRegionMapOutput() ServiceRegionMapOutput {
	return i.ToServiceRegionMapOutputWithContext(context.Background())
}

func (i ServiceRegionMap) ToServiceRegionMapOutputWithContext(ctx context.Context) ServiceRegionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRegionMapOutput)
}

type ServiceRegionOutput struct{ *pulumi.OutputState }

func (ServiceRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceRegion)(nil)).Elem()
}

func (o ServiceRegionOutput) ToServiceRegionOutput() ServiceRegionOutput {
	return o
}

func (o ServiceRegionOutput) ToServiceRegionOutputWithContext(ctx context.Context) ServiceRegionOutput {
	return o
}

// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
func (o ServiceRegionOutput) DesiredNumberOfDomainControllers() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceRegion) pulumi.IntOutput { return v.DesiredNumberOfDomainControllers }).(pulumi.IntOutput)
}

// The identifier of the directory to which you want to add Region replication.
func (o ServiceRegionOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceRegion) pulumi.StringOutput { return v.DirectoryId }).(pulumi.StringOutput)
}

// The name of the Region where you want to add domain controllers for replication.
func (o ServiceRegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceRegion) pulumi.StringOutput { return v.RegionName }).(pulumi.StringOutput)
}

// Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ServiceRegionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceRegion) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ServiceRegionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceRegion) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// VPC information in the replicated Region. Detailed below.
func (o ServiceRegionOutput) VpcSettings() ServiceRegionVpcSettingsOutput {
	return o.ApplyT(func(v *ServiceRegion) ServiceRegionVpcSettingsOutput { return v.VpcSettings }).(ServiceRegionVpcSettingsOutput)
}

type ServiceRegionArrayOutput struct{ *pulumi.OutputState }

func (ServiceRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceRegion)(nil)).Elem()
}

func (o ServiceRegionArrayOutput) ToServiceRegionArrayOutput() ServiceRegionArrayOutput {
	return o
}

func (o ServiceRegionArrayOutput) ToServiceRegionArrayOutputWithContext(ctx context.Context) ServiceRegionArrayOutput {
	return o
}

func (o ServiceRegionArrayOutput) Index(i pulumi.IntInput) ServiceRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceRegion {
		return vs[0].([]*ServiceRegion)[vs[1].(int)]
	}).(ServiceRegionOutput)
}

type ServiceRegionMapOutput struct{ *pulumi.OutputState }

func (ServiceRegionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceRegion)(nil)).Elem()
}

func (o ServiceRegionMapOutput) ToServiceRegionMapOutput() ServiceRegionMapOutput {
	return o
}

func (o ServiceRegionMapOutput) ToServiceRegionMapOutputWithContext(ctx context.Context) ServiceRegionMapOutput {
	return o
}

func (o ServiceRegionMapOutput) MapIndex(k pulumi.StringInput) ServiceRegionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceRegion {
		return vs[0].(map[string]*ServiceRegion)[vs[1].(string)]
	}).(ServiceRegionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceRegionInput)(nil)).Elem(), &ServiceRegion{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceRegionArrayInput)(nil)).Elem(), ServiceRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceRegionMapInput)(nil)).Elem(), ServiceRegionMap{})
	pulumi.RegisterOutputType(ServiceRegionOutput{})
	pulumi.RegisterOutputType(ServiceRegionArrayOutput{})
	pulumi.RegisterOutputType(ServiceRegionMapOutput{})
}
