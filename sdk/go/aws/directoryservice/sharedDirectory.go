// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SharedDirectory struct {
	pulumi.CustomResourceState

	DirectoryId       pulumi.StringOutput         `pulumi:"directoryId"`
	Method            pulumi.StringPtrOutput      `pulumi:"method"`
	Notes             pulumi.StringPtrOutput      `pulumi:"notes"`
	SharedDirectoryId pulumi.StringOutput         `pulumi:"sharedDirectoryId"`
	Target            SharedDirectoryTargetOutput `pulumi:"target"`
}

// NewSharedDirectory registers a new resource with the given unique name, arguments, and options.
func NewSharedDirectory(ctx *pulumi.Context,
	name string, args *SharedDirectoryArgs, opts ...pulumi.ResourceOption) (*SharedDirectory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if args.Notes != nil {
		args.Notes = pulumi.ToSecret(args.Notes).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"notes",
	})
	opts = append(opts, secrets)
	var resource SharedDirectory
	err := ctx.RegisterResource("aws:directoryservice/sharedDirectory:SharedDirectory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharedDirectory gets an existing SharedDirectory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharedDirectory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharedDirectoryState, opts ...pulumi.ResourceOption) (*SharedDirectory, error) {
	var resource SharedDirectory
	err := ctx.ReadResource("aws:directoryservice/sharedDirectory:SharedDirectory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharedDirectory resources.
type sharedDirectoryState struct {
	DirectoryId       *string                `pulumi:"directoryId"`
	Method            *string                `pulumi:"method"`
	Notes             *string                `pulumi:"notes"`
	SharedDirectoryId *string                `pulumi:"sharedDirectoryId"`
	Target            *SharedDirectoryTarget `pulumi:"target"`
}

type SharedDirectoryState struct {
	DirectoryId       pulumi.StringPtrInput
	Method            pulumi.StringPtrInput
	Notes             pulumi.StringPtrInput
	SharedDirectoryId pulumi.StringPtrInput
	Target            SharedDirectoryTargetPtrInput
}

func (SharedDirectoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedDirectoryState)(nil)).Elem()
}

type sharedDirectoryArgs struct {
	DirectoryId string                `pulumi:"directoryId"`
	Method      *string               `pulumi:"method"`
	Notes       *string               `pulumi:"notes"`
	Target      SharedDirectoryTarget `pulumi:"target"`
}

// The set of arguments for constructing a SharedDirectory resource.
type SharedDirectoryArgs struct {
	DirectoryId pulumi.StringInput
	Method      pulumi.StringPtrInput
	Notes       pulumi.StringPtrInput
	Target      SharedDirectoryTargetInput
}

func (SharedDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedDirectoryArgs)(nil)).Elem()
}

type SharedDirectoryInput interface {
	pulumi.Input

	ToSharedDirectoryOutput() SharedDirectoryOutput
	ToSharedDirectoryOutputWithContext(ctx context.Context) SharedDirectoryOutput
}

func (*SharedDirectory) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedDirectory)(nil)).Elem()
}

func (i *SharedDirectory) ToSharedDirectoryOutput() SharedDirectoryOutput {
	return i.ToSharedDirectoryOutputWithContext(context.Background())
}

func (i *SharedDirectory) ToSharedDirectoryOutputWithContext(ctx context.Context) SharedDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDirectoryOutput)
}

// SharedDirectoryArrayInput is an input type that accepts SharedDirectoryArray and SharedDirectoryArrayOutput values.
// You can construct a concrete instance of `SharedDirectoryArrayInput` via:
//
//	SharedDirectoryArray{ SharedDirectoryArgs{...} }
type SharedDirectoryArrayInput interface {
	pulumi.Input

	ToSharedDirectoryArrayOutput() SharedDirectoryArrayOutput
	ToSharedDirectoryArrayOutputWithContext(context.Context) SharedDirectoryArrayOutput
}

type SharedDirectoryArray []SharedDirectoryInput

func (SharedDirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedDirectory)(nil)).Elem()
}

func (i SharedDirectoryArray) ToSharedDirectoryArrayOutput() SharedDirectoryArrayOutput {
	return i.ToSharedDirectoryArrayOutputWithContext(context.Background())
}

func (i SharedDirectoryArray) ToSharedDirectoryArrayOutputWithContext(ctx context.Context) SharedDirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDirectoryArrayOutput)
}

// SharedDirectoryMapInput is an input type that accepts SharedDirectoryMap and SharedDirectoryMapOutput values.
// You can construct a concrete instance of `SharedDirectoryMapInput` via:
//
//	SharedDirectoryMap{ "key": SharedDirectoryArgs{...} }
type SharedDirectoryMapInput interface {
	pulumi.Input

	ToSharedDirectoryMapOutput() SharedDirectoryMapOutput
	ToSharedDirectoryMapOutputWithContext(context.Context) SharedDirectoryMapOutput
}

type SharedDirectoryMap map[string]SharedDirectoryInput

func (SharedDirectoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedDirectory)(nil)).Elem()
}

func (i SharedDirectoryMap) ToSharedDirectoryMapOutput() SharedDirectoryMapOutput {
	return i.ToSharedDirectoryMapOutputWithContext(context.Background())
}

func (i SharedDirectoryMap) ToSharedDirectoryMapOutputWithContext(ctx context.Context) SharedDirectoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDirectoryMapOutput)
}

type SharedDirectoryOutput struct{ *pulumi.OutputState }

func (SharedDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedDirectory)(nil)).Elem()
}

func (o SharedDirectoryOutput) ToSharedDirectoryOutput() SharedDirectoryOutput {
	return o
}

func (o SharedDirectoryOutput) ToSharedDirectoryOutputWithContext(ctx context.Context) SharedDirectoryOutput {
	return o
}

func (o SharedDirectoryOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDirectory) pulumi.StringOutput { return v.DirectoryId }).(pulumi.StringOutput)
}

func (o SharedDirectoryOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedDirectory) pulumi.StringPtrOutput { return v.Method }).(pulumi.StringPtrOutput)
}

func (o SharedDirectoryOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedDirectory) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

func (o SharedDirectoryOutput) SharedDirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDirectory) pulumi.StringOutput { return v.SharedDirectoryId }).(pulumi.StringOutput)
}

func (o SharedDirectoryOutput) Target() SharedDirectoryTargetOutput {
	return o.ApplyT(func(v *SharedDirectory) SharedDirectoryTargetOutput { return v.Target }).(SharedDirectoryTargetOutput)
}

type SharedDirectoryArrayOutput struct{ *pulumi.OutputState }

func (SharedDirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedDirectory)(nil)).Elem()
}

func (o SharedDirectoryArrayOutput) ToSharedDirectoryArrayOutput() SharedDirectoryArrayOutput {
	return o
}

func (o SharedDirectoryArrayOutput) ToSharedDirectoryArrayOutputWithContext(ctx context.Context) SharedDirectoryArrayOutput {
	return o
}

func (o SharedDirectoryArrayOutput) Index(i pulumi.IntInput) SharedDirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SharedDirectory {
		return vs[0].([]*SharedDirectory)[vs[1].(int)]
	}).(SharedDirectoryOutput)
}

type SharedDirectoryMapOutput struct{ *pulumi.OutputState }

func (SharedDirectoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedDirectory)(nil)).Elem()
}

func (o SharedDirectoryMapOutput) ToSharedDirectoryMapOutput() SharedDirectoryMapOutput {
	return o
}

func (o SharedDirectoryMapOutput) ToSharedDirectoryMapOutputWithContext(ctx context.Context) SharedDirectoryMapOutput {
	return o
}

func (o SharedDirectoryMapOutput) MapIndex(k pulumi.StringInput) SharedDirectoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SharedDirectory {
		return vs[0].(map[string]*SharedDirectory)[vs[1].(string)]
	}).(SharedDirectoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SharedDirectoryInput)(nil)).Elem(), &SharedDirectory{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedDirectoryArrayInput)(nil)).Elem(), SharedDirectoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedDirectoryMapInput)(nil)).Elem(), SharedDirectoryMap{})
	pulumi.RegisterOutputType(SharedDirectoryOutput{})
	pulumi.RegisterOutputType(SharedDirectoryArrayOutput{})
	pulumi.RegisterOutputType(SharedDirectoryMapOutput{})
}
