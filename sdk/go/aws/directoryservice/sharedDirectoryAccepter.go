// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SharedDirectoryAccepter struct {
	pulumi.CustomResourceState

	Method            pulumi.StringOutput `pulumi:"method"`
	Notes             pulumi.StringOutput `pulumi:"notes"`
	OwnerAccountId    pulumi.StringOutput `pulumi:"ownerAccountId"`
	OwnerDirectoryId  pulumi.StringOutput `pulumi:"ownerDirectoryId"`
	SharedDirectoryId pulumi.StringOutput `pulumi:"sharedDirectoryId"`
}

// NewSharedDirectoryAccepter registers a new resource with the given unique name, arguments, and options.
func NewSharedDirectoryAccepter(ctx *pulumi.Context,
	name string, args *SharedDirectoryAccepterArgs, opts ...pulumi.ResourceOption) (*SharedDirectoryAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SharedDirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'SharedDirectoryId'")
	}
	var resource SharedDirectoryAccepter
	err := ctx.RegisterResource("aws:directoryservice/sharedDirectoryAccepter:SharedDirectoryAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharedDirectoryAccepter gets an existing SharedDirectoryAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharedDirectoryAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharedDirectoryAccepterState, opts ...pulumi.ResourceOption) (*SharedDirectoryAccepter, error) {
	var resource SharedDirectoryAccepter
	err := ctx.ReadResource("aws:directoryservice/sharedDirectoryAccepter:SharedDirectoryAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharedDirectoryAccepter resources.
type sharedDirectoryAccepterState struct {
	Method            *string `pulumi:"method"`
	Notes             *string `pulumi:"notes"`
	OwnerAccountId    *string `pulumi:"ownerAccountId"`
	OwnerDirectoryId  *string `pulumi:"ownerDirectoryId"`
	SharedDirectoryId *string `pulumi:"sharedDirectoryId"`
}

type SharedDirectoryAccepterState struct {
	Method            pulumi.StringPtrInput
	Notes             pulumi.StringPtrInput
	OwnerAccountId    pulumi.StringPtrInput
	OwnerDirectoryId  pulumi.StringPtrInput
	SharedDirectoryId pulumi.StringPtrInput
}

func (SharedDirectoryAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedDirectoryAccepterState)(nil)).Elem()
}

type sharedDirectoryAccepterArgs struct {
	SharedDirectoryId string `pulumi:"sharedDirectoryId"`
}

// The set of arguments for constructing a SharedDirectoryAccepter resource.
type SharedDirectoryAccepterArgs struct {
	SharedDirectoryId pulumi.StringInput
}

func (SharedDirectoryAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedDirectoryAccepterArgs)(nil)).Elem()
}

type SharedDirectoryAccepterInput interface {
	pulumi.Input

	ToSharedDirectoryAccepterOutput() SharedDirectoryAccepterOutput
	ToSharedDirectoryAccepterOutputWithContext(ctx context.Context) SharedDirectoryAccepterOutput
}

func (*SharedDirectoryAccepter) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedDirectoryAccepter)(nil)).Elem()
}

func (i *SharedDirectoryAccepter) ToSharedDirectoryAccepterOutput() SharedDirectoryAccepterOutput {
	return i.ToSharedDirectoryAccepterOutputWithContext(context.Background())
}

func (i *SharedDirectoryAccepter) ToSharedDirectoryAccepterOutputWithContext(ctx context.Context) SharedDirectoryAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDirectoryAccepterOutput)
}

// SharedDirectoryAccepterArrayInput is an input type that accepts SharedDirectoryAccepterArray and SharedDirectoryAccepterArrayOutput values.
// You can construct a concrete instance of `SharedDirectoryAccepterArrayInput` via:
//
//	SharedDirectoryAccepterArray{ SharedDirectoryAccepterArgs{...} }
type SharedDirectoryAccepterArrayInput interface {
	pulumi.Input

	ToSharedDirectoryAccepterArrayOutput() SharedDirectoryAccepterArrayOutput
	ToSharedDirectoryAccepterArrayOutputWithContext(context.Context) SharedDirectoryAccepterArrayOutput
}

type SharedDirectoryAccepterArray []SharedDirectoryAccepterInput

func (SharedDirectoryAccepterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedDirectoryAccepter)(nil)).Elem()
}

func (i SharedDirectoryAccepterArray) ToSharedDirectoryAccepterArrayOutput() SharedDirectoryAccepterArrayOutput {
	return i.ToSharedDirectoryAccepterArrayOutputWithContext(context.Background())
}

func (i SharedDirectoryAccepterArray) ToSharedDirectoryAccepterArrayOutputWithContext(ctx context.Context) SharedDirectoryAccepterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDirectoryAccepterArrayOutput)
}

// SharedDirectoryAccepterMapInput is an input type that accepts SharedDirectoryAccepterMap and SharedDirectoryAccepterMapOutput values.
// You can construct a concrete instance of `SharedDirectoryAccepterMapInput` via:
//
//	SharedDirectoryAccepterMap{ "key": SharedDirectoryAccepterArgs{...} }
type SharedDirectoryAccepterMapInput interface {
	pulumi.Input

	ToSharedDirectoryAccepterMapOutput() SharedDirectoryAccepterMapOutput
	ToSharedDirectoryAccepterMapOutputWithContext(context.Context) SharedDirectoryAccepterMapOutput
}

type SharedDirectoryAccepterMap map[string]SharedDirectoryAccepterInput

func (SharedDirectoryAccepterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedDirectoryAccepter)(nil)).Elem()
}

func (i SharedDirectoryAccepterMap) ToSharedDirectoryAccepterMapOutput() SharedDirectoryAccepterMapOutput {
	return i.ToSharedDirectoryAccepterMapOutputWithContext(context.Background())
}

func (i SharedDirectoryAccepterMap) ToSharedDirectoryAccepterMapOutputWithContext(ctx context.Context) SharedDirectoryAccepterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDirectoryAccepterMapOutput)
}

type SharedDirectoryAccepterOutput struct{ *pulumi.OutputState }

func (SharedDirectoryAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedDirectoryAccepter)(nil)).Elem()
}

func (o SharedDirectoryAccepterOutput) ToSharedDirectoryAccepterOutput() SharedDirectoryAccepterOutput {
	return o
}

func (o SharedDirectoryAccepterOutput) ToSharedDirectoryAccepterOutputWithContext(ctx context.Context) SharedDirectoryAccepterOutput {
	return o
}

func (o SharedDirectoryAccepterOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDirectoryAccepter) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

func (o SharedDirectoryAccepterOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDirectoryAccepter) pulumi.StringOutput { return v.Notes }).(pulumi.StringOutput)
}

func (o SharedDirectoryAccepterOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDirectoryAccepter) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

func (o SharedDirectoryAccepterOutput) OwnerDirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDirectoryAccepter) pulumi.StringOutput { return v.OwnerDirectoryId }).(pulumi.StringOutput)
}

func (o SharedDirectoryAccepterOutput) SharedDirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedDirectoryAccepter) pulumi.StringOutput { return v.SharedDirectoryId }).(pulumi.StringOutput)
}

type SharedDirectoryAccepterArrayOutput struct{ *pulumi.OutputState }

func (SharedDirectoryAccepterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedDirectoryAccepter)(nil)).Elem()
}

func (o SharedDirectoryAccepterArrayOutput) ToSharedDirectoryAccepterArrayOutput() SharedDirectoryAccepterArrayOutput {
	return o
}

func (o SharedDirectoryAccepterArrayOutput) ToSharedDirectoryAccepterArrayOutputWithContext(ctx context.Context) SharedDirectoryAccepterArrayOutput {
	return o
}

func (o SharedDirectoryAccepterArrayOutput) Index(i pulumi.IntInput) SharedDirectoryAccepterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SharedDirectoryAccepter {
		return vs[0].([]*SharedDirectoryAccepter)[vs[1].(int)]
	}).(SharedDirectoryAccepterOutput)
}

type SharedDirectoryAccepterMapOutput struct{ *pulumi.OutputState }

func (SharedDirectoryAccepterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedDirectoryAccepter)(nil)).Elem()
}

func (o SharedDirectoryAccepterMapOutput) ToSharedDirectoryAccepterMapOutput() SharedDirectoryAccepterMapOutput {
	return o
}

func (o SharedDirectoryAccepterMapOutput) ToSharedDirectoryAccepterMapOutputWithContext(ctx context.Context) SharedDirectoryAccepterMapOutput {
	return o
}

func (o SharedDirectoryAccepterMapOutput) MapIndex(k pulumi.StringInput) SharedDirectoryAccepterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SharedDirectoryAccepter {
		return vs[0].(map[string]*SharedDirectoryAccepter)[vs[1].(string)]
	}).(SharedDirectoryAccepterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SharedDirectoryAccepterInput)(nil)).Elem(), &SharedDirectoryAccepter{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedDirectoryAccepterArrayInput)(nil)).Elem(), SharedDirectoryAccepterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedDirectoryAccepterMapInput)(nil)).Elem(), SharedDirectoryAccepterMap{})
	pulumi.RegisterOutputType(SharedDirectoryAccepterOutput{})
	pulumi.RegisterOutputType(SharedDirectoryAccepterArrayOutput{})
	pulumi.RegisterOutputType(SharedDirectoryAccepterMapOutput{})
}
