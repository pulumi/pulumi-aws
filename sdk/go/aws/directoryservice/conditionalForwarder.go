// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a conditional forwarder for managed Microsoft AD in AWS Directory Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/directoryservice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := directoryservice.NewConditionalForwarder(ctx, "example", &directoryservice.ConditionalForwarderArgs{
//				DirectoryId:      pulumi.Any(ad.Id),
//				RemoteDomainName: pulumi.String("example.com"),
//				DnsIps: pulumi.StringArray{
//					pulumi.String("8.8.8.8"),
//					pulumi.String("8.8.4.4"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import conditional forwarders using the directory id and remote_domain_name. For example:
//
// ```sh
// $ pulumi import aws:directoryservice/conditionalForwarder:ConditionalForwarder example d-1234567890:example.com
// ```
type ConditionalForwarder struct {
	pulumi.CustomResourceState

	// ID of directory.
	DirectoryId pulumi.StringOutput `pulumi:"directoryId"`
	// A list of forwarder IP addresses.
	DnsIps pulumi.StringArrayOutput `pulumi:"dnsIps"`
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName pulumi.StringOutput `pulumi:"remoteDomainName"`
}

// NewConditionalForwarder registers a new resource with the given unique name, arguments, and options.
func NewConditionalForwarder(ctx *pulumi.Context,
	name string, args *ConditionalForwarderArgs, opts ...pulumi.ResourceOption) (*ConditionalForwarder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.DnsIps == nil {
		return nil, errors.New("invalid value for required argument 'DnsIps'")
	}
	if args.RemoteDomainName == nil {
		return nil, errors.New("invalid value for required argument 'RemoteDomainName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:directoryservice/conditionalForwader:ConditionalForwader"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConditionalForwarder
	err := ctx.RegisterResource("aws:directoryservice/conditionalForwarder:ConditionalForwarder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConditionalForwarder gets an existing ConditionalForwarder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConditionalForwarder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConditionalForwarderState, opts ...pulumi.ResourceOption) (*ConditionalForwarder, error) {
	var resource ConditionalForwarder
	err := ctx.ReadResource("aws:directoryservice/conditionalForwarder:ConditionalForwarder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConditionalForwarder resources.
type conditionalForwarderState struct {
	// ID of directory.
	DirectoryId *string `pulumi:"directoryId"`
	// A list of forwarder IP addresses.
	DnsIps []string `pulumi:"dnsIps"`
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName *string `pulumi:"remoteDomainName"`
}

type ConditionalForwarderState struct {
	// ID of directory.
	DirectoryId pulumi.StringPtrInput
	// A list of forwarder IP addresses.
	DnsIps pulumi.StringArrayInput
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName pulumi.StringPtrInput
}

func (ConditionalForwarderState) ElementType() reflect.Type {
	return reflect.TypeOf((*conditionalForwarderState)(nil)).Elem()
}

type conditionalForwarderArgs struct {
	// ID of directory.
	DirectoryId string `pulumi:"directoryId"`
	// A list of forwarder IP addresses.
	DnsIps []string `pulumi:"dnsIps"`
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName string `pulumi:"remoteDomainName"`
}

// The set of arguments for constructing a ConditionalForwarder resource.
type ConditionalForwarderArgs struct {
	// ID of directory.
	DirectoryId pulumi.StringInput
	// A list of forwarder IP addresses.
	DnsIps pulumi.StringArrayInput
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName pulumi.StringInput
}

func (ConditionalForwarderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*conditionalForwarderArgs)(nil)).Elem()
}

type ConditionalForwarderInput interface {
	pulumi.Input

	ToConditionalForwarderOutput() ConditionalForwarderOutput
	ToConditionalForwarderOutputWithContext(ctx context.Context) ConditionalForwarderOutput
}

func (*ConditionalForwarder) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionalForwarder)(nil)).Elem()
}

func (i *ConditionalForwarder) ToConditionalForwarderOutput() ConditionalForwarderOutput {
	return i.ToConditionalForwarderOutputWithContext(context.Background())
}

func (i *ConditionalForwarder) ToConditionalForwarderOutputWithContext(ctx context.Context) ConditionalForwarderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionalForwarderOutput)
}

// ConditionalForwarderArrayInput is an input type that accepts ConditionalForwarderArray and ConditionalForwarderArrayOutput values.
// You can construct a concrete instance of `ConditionalForwarderArrayInput` via:
//
//	ConditionalForwarderArray{ ConditionalForwarderArgs{...} }
type ConditionalForwarderArrayInput interface {
	pulumi.Input

	ToConditionalForwarderArrayOutput() ConditionalForwarderArrayOutput
	ToConditionalForwarderArrayOutputWithContext(context.Context) ConditionalForwarderArrayOutput
}

type ConditionalForwarderArray []ConditionalForwarderInput

func (ConditionalForwarderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConditionalForwarder)(nil)).Elem()
}

func (i ConditionalForwarderArray) ToConditionalForwarderArrayOutput() ConditionalForwarderArrayOutput {
	return i.ToConditionalForwarderArrayOutputWithContext(context.Background())
}

func (i ConditionalForwarderArray) ToConditionalForwarderArrayOutputWithContext(ctx context.Context) ConditionalForwarderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionalForwarderArrayOutput)
}

// ConditionalForwarderMapInput is an input type that accepts ConditionalForwarderMap and ConditionalForwarderMapOutput values.
// You can construct a concrete instance of `ConditionalForwarderMapInput` via:
//
//	ConditionalForwarderMap{ "key": ConditionalForwarderArgs{...} }
type ConditionalForwarderMapInput interface {
	pulumi.Input

	ToConditionalForwarderMapOutput() ConditionalForwarderMapOutput
	ToConditionalForwarderMapOutputWithContext(context.Context) ConditionalForwarderMapOutput
}

type ConditionalForwarderMap map[string]ConditionalForwarderInput

func (ConditionalForwarderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConditionalForwarder)(nil)).Elem()
}

func (i ConditionalForwarderMap) ToConditionalForwarderMapOutput() ConditionalForwarderMapOutput {
	return i.ToConditionalForwarderMapOutputWithContext(context.Background())
}

func (i ConditionalForwarderMap) ToConditionalForwarderMapOutputWithContext(ctx context.Context) ConditionalForwarderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionalForwarderMapOutput)
}

type ConditionalForwarderOutput struct{ *pulumi.OutputState }

func (ConditionalForwarderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionalForwarder)(nil)).Elem()
}

func (o ConditionalForwarderOutput) ToConditionalForwarderOutput() ConditionalForwarderOutput {
	return o
}

func (o ConditionalForwarderOutput) ToConditionalForwarderOutputWithContext(ctx context.Context) ConditionalForwarderOutput {
	return o
}

// ID of directory.
func (o ConditionalForwarderOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConditionalForwarder) pulumi.StringOutput { return v.DirectoryId }).(pulumi.StringOutput)
}

// A list of forwarder IP addresses.
func (o ConditionalForwarderOutput) DnsIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConditionalForwarder) pulumi.StringArrayOutput { return v.DnsIps }).(pulumi.StringArrayOutput)
}

// The fully qualified domain name of the remote domain for which forwarders will be used.
func (o ConditionalForwarderOutput) RemoteDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConditionalForwarder) pulumi.StringOutput { return v.RemoteDomainName }).(pulumi.StringOutput)
}

type ConditionalForwarderArrayOutput struct{ *pulumi.OutputState }

func (ConditionalForwarderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConditionalForwarder)(nil)).Elem()
}

func (o ConditionalForwarderArrayOutput) ToConditionalForwarderArrayOutput() ConditionalForwarderArrayOutput {
	return o
}

func (o ConditionalForwarderArrayOutput) ToConditionalForwarderArrayOutputWithContext(ctx context.Context) ConditionalForwarderArrayOutput {
	return o
}

func (o ConditionalForwarderArrayOutput) Index(i pulumi.IntInput) ConditionalForwarderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConditionalForwarder {
		return vs[0].([]*ConditionalForwarder)[vs[1].(int)]
	}).(ConditionalForwarderOutput)
}

type ConditionalForwarderMapOutput struct{ *pulumi.OutputState }

func (ConditionalForwarderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConditionalForwarder)(nil)).Elem()
}

func (o ConditionalForwarderMapOutput) ToConditionalForwarderMapOutput() ConditionalForwarderMapOutput {
	return o
}

func (o ConditionalForwarderMapOutput) ToConditionalForwarderMapOutputWithContext(ctx context.Context) ConditionalForwarderMapOutput {
	return o
}

func (o ConditionalForwarderMapOutput) MapIndex(k pulumi.StringInput) ConditionalForwarderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConditionalForwarder {
		return vs[0].(map[string]*ConditionalForwarder)[vs[1].(string)]
	}).(ConditionalForwarderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionalForwarderInput)(nil)).Elem(), &ConditionalForwarder{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionalForwarderArrayInput)(nil)).Elem(), ConditionalForwarderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionalForwarderMapInput)(nil)).Elem(), ConditionalForwarderMap{})
	pulumi.RegisterOutputType(ConditionalForwarderOutput{})
	pulumi.RegisterOutputType(ConditionalForwarderArrayOutput{})
	pulumi.RegisterOutputType(ConditionalForwarderMapOutput{})
}
