// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Directory struct {
	pulumi.CustomResourceState

	AccessUrl                        pulumi.StringOutput               `pulumi:"accessUrl"`
	Alias                            pulumi.StringOutput               `pulumi:"alias"`
	ConnectSettings                  DirectoryConnectSettingsPtrOutput `pulumi:"connectSettings"`
	Description                      pulumi.StringPtrOutput            `pulumi:"description"`
	DesiredNumberOfDomainControllers pulumi.IntOutput                  `pulumi:"desiredNumberOfDomainControllers"`
	DnsIpAddresses                   pulumi.StringArrayOutput          `pulumi:"dnsIpAddresses"`
	Edition                          pulumi.StringOutput               `pulumi:"edition"`
	EnableSso                        pulumi.BoolPtrOutput              `pulumi:"enableSso"`
	Name                             pulumi.StringOutput               `pulumi:"name"`
	Password                         pulumi.StringOutput               `pulumi:"password"`
	SecurityGroupId                  pulumi.StringOutput               `pulumi:"securityGroupId"`
	ShortName                        pulumi.StringOutput               `pulumi:"shortName"`
	Size                             pulumi.StringOutput               `pulumi:"size"`
	Tags                             pulumi.StringMapOutput            `pulumi:"tags"`
	TagsAll                          pulumi.StringMapOutput            `pulumi:"tagsAll"`
	Type                             pulumi.StringPtrOutput            `pulumi:"type"`
	VpcSettings                      DirectoryVpcSettingsPtrOutput     `pulumi:"vpcSettings"`
}

// NewDirectory registers a new resource with the given unique name, arguments, and options.
func NewDirectory(ctx *pulumi.Context,
	name string, args *DirectoryArgs, opts ...pulumi.ResourceOption) (*Directory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	var resource Directory
	err := ctx.RegisterResource("aws:directoryservice/directory:Directory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectory gets an existing Directory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectoryState, opts ...pulumi.ResourceOption) (*Directory, error) {
	var resource Directory
	err := ctx.ReadResource("aws:directoryservice/directory:Directory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Directory resources.
type directoryState struct {
	AccessUrl                        *string                   `pulumi:"accessUrl"`
	Alias                            *string                   `pulumi:"alias"`
	ConnectSettings                  *DirectoryConnectSettings `pulumi:"connectSettings"`
	Description                      *string                   `pulumi:"description"`
	DesiredNumberOfDomainControllers *int                      `pulumi:"desiredNumberOfDomainControllers"`
	DnsIpAddresses                   []string                  `pulumi:"dnsIpAddresses"`
	Edition                          *string                   `pulumi:"edition"`
	EnableSso                        *bool                     `pulumi:"enableSso"`
	Name                             *string                   `pulumi:"name"`
	Password                         *string                   `pulumi:"password"`
	SecurityGroupId                  *string                   `pulumi:"securityGroupId"`
	ShortName                        *string                   `pulumi:"shortName"`
	Size                             *string                   `pulumi:"size"`
	Tags                             map[string]string         `pulumi:"tags"`
	TagsAll                          map[string]string         `pulumi:"tagsAll"`
	Type                             *string                   `pulumi:"type"`
	VpcSettings                      *DirectoryVpcSettings     `pulumi:"vpcSettings"`
}

type DirectoryState struct {
	AccessUrl                        pulumi.StringPtrInput
	Alias                            pulumi.StringPtrInput
	ConnectSettings                  DirectoryConnectSettingsPtrInput
	Description                      pulumi.StringPtrInput
	DesiredNumberOfDomainControllers pulumi.IntPtrInput
	DnsIpAddresses                   pulumi.StringArrayInput
	Edition                          pulumi.StringPtrInput
	EnableSso                        pulumi.BoolPtrInput
	Name                             pulumi.StringPtrInput
	Password                         pulumi.StringPtrInput
	SecurityGroupId                  pulumi.StringPtrInput
	ShortName                        pulumi.StringPtrInput
	Size                             pulumi.StringPtrInput
	Tags                             pulumi.StringMapInput
	TagsAll                          pulumi.StringMapInput
	Type                             pulumi.StringPtrInput
	VpcSettings                      DirectoryVpcSettingsPtrInput
}

func (DirectoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryState)(nil)).Elem()
}

type directoryArgs struct {
	Alias                            *string                   `pulumi:"alias"`
	ConnectSettings                  *DirectoryConnectSettings `pulumi:"connectSettings"`
	Description                      *string                   `pulumi:"description"`
	DesiredNumberOfDomainControllers *int                      `pulumi:"desiredNumberOfDomainControllers"`
	Edition                          *string                   `pulumi:"edition"`
	EnableSso                        *bool                     `pulumi:"enableSso"`
	Name                             string                    `pulumi:"name"`
	Password                         string                    `pulumi:"password"`
	ShortName                        *string                   `pulumi:"shortName"`
	Size                             *string                   `pulumi:"size"`
	Tags                             map[string]string         `pulumi:"tags"`
	Type                             *string                   `pulumi:"type"`
	VpcSettings                      *DirectoryVpcSettings     `pulumi:"vpcSettings"`
}

// The set of arguments for constructing a Directory resource.
type DirectoryArgs struct {
	Alias                            pulumi.StringPtrInput
	ConnectSettings                  DirectoryConnectSettingsPtrInput
	Description                      pulumi.StringPtrInput
	DesiredNumberOfDomainControllers pulumi.IntPtrInput
	Edition                          pulumi.StringPtrInput
	EnableSso                        pulumi.BoolPtrInput
	Name                             pulumi.StringInput
	Password                         pulumi.StringInput
	ShortName                        pulumi.StringPtrInput
	Size                             pulumi.StringPtrInput
	Tags                             pulumi.StringMapInput
	Type                             pulumi.StringPtrInput
	VpcSettings                      DirectoryVpcSettingsPtrInput
}

func (DirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryArgs)(nil)).Elem()
}

type DirectoryInput interface {
	pulumi.Input

	ToDirectoryOutput() DirectoryOutput
	ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput
}

func (*Directory) ElementType() reflect.Type {
	return reflect.TypeOf((**Directory)(nil)).Elem()
}

func (i *Directory) ToDirectoryOutput() DirectoryOutput {
	return i.ToDirectoryOutputWithContext(context.Background())
}

func (i *Directory) ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryOutput)
}

// DirectoryArrayInput is an input type that accepts DirectoryArray and DirectoryArrayOutput values.
// You can construct a concrete instance of `DirectoryArrayInput` via:
//
//	DirectoryArray{ DirectoryArgs{...} }
type DirectoryArrayInput interface {
	pulumi.Input

	ToDirectoryArrayOutput() DirectoryArrayOutput
	ToDirectoryArrayOutputWithContext(context.Context) DirectoryArrayOutput
}

type DirectoryArray []DirectoryInput

func (DirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Directory)(nil)).Elem()
}

func (i DirectoryArray) ToDirectoryArrayOutput() DirectoryArrayOutput {
	return i.ToDirectoryArrayOutputWithContext(context.Background())
}

func (i DirectoryArray) ToDirectoryArrayOutputWithContext(ctx context.Context) DirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryArrayOutput)
}

// DirectoryMapInput is an input type that accepts DirectoryMap and DirectoryMapOutput values.
// You can construct a concrete instance of `DirectoryMapInput` via:
//
//	DirectoryMap{ "key": DirectoryArgs{...} }
type DirectoryMapInput interface {
	pulumi.Input

	ToDirectoryMapOutput() DirectoryMapOutput
	ToDirectoryMapOutputWithContext(context.Context) DirectoryMapOutput
}

type DirectoryMap map[string]DirectoryInput

func (DirectoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Directory)(nil)).Elem()
}

func (i DirectoryMap) ToDirectoryMapOutput() DirectoryMapOutput {
	return i.ToDirectoryMapOutputWithContext(context.Background())
}

func (i DirectoryMap) ToDirectoryMapOutputWithContext(ctx context.Context) DirectoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryMapOutput)
}

type DirectoryOutput struct{ *pulumi.OutputState }

func (DirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Directory)(nil)).Elem()
}

func (o DirectoryOutput) ToDirectoryOutput() DirectoryOutput {
	return o
}

func (o DirectoryOutput) ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput {
	return o
}

func (o DirectoryOutput) AccessUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.AccessUrl }).(pulumi.StringOutput)
}

func (o DirectoryOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

func (o DirectoryOutput) ConnectSettings() DirectoryConnectSettingsPtrOutput {
	return o.ApplyT(func(v *Directory) DirectoryConnectSettingsPtrOutput { return v.ConnectSettings }).(DirectoryConnectSettingsPtrOutput)
}

func (o DirectoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DirectoryOutput) DesiredNumberOfDomainControllers() pulumi.IntOutput {
	return o.ApplyT(func(v *Directory) pulumi.IntOutput { return v.DesiredNumberOfDomainControllers }).(pulumi.IntOutput)
}

func (o DirectoryOutput) DnsIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringArrayOutput { return v.DnsIpAddresses }).(pulumi.StringArrayOutput)
}

func (o DirectoryOutput) Edition() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.Edition }).(pulumi.StringOutput)
}

func (o DirectoryOutput) EnableSso() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Directory) pulumi.BoolPtrOutput { return v.EnableSso }).(pulumi.BoolPtrOutput)
}

func (o DirectoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DirectoryOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o DirectoryOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

func (o DirectoryOutput) ShortName() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.ShortName }).(pulumi.StringOutput)
}

func (o DirectoryOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

func (o DirectoryOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DirectoryOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DirectoryOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o DirectoryOutput) VpcSettings() DirectoryVpcSettingsPtrOutput {
	return o.ApplyT(func(v *Directory) DirectoryVpcSettingsPtrOutput { return v.VpcSettings }).(DirectoryVpcSettingsPtrOutput)
}

type DirectoryArrayOutput struct{ *pulumi.OutputState }

func (DirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Directory)(nil)).Elem()
}

func (o DirectoryArrayOutput) ToDirectoryArrayOutput() DirectoryArrayOutput {
	return o
}

func (o DirectoryArrayOutput) ToDirectoryArrayOutputWithContext(ctx context.Context) DirectoryArrayOutput {
	return o
}

func (o DirectoryArrayOutput) Index(i pulumi.IntInput) DirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Directory {
		return vs[0].([]*Directory)[vs[1].(int)]
	}).(DirectoryOutput)
}

type DirectoryMapOutput struct{ *pulumi.OutputState }

func (DirectoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Directory)(nil)).Elem()
}

func (o DirectoryMapOutput) ToDirectoryMapOutput() DirectoryMapOutput {
	return o
}

func (o DirectoryMapOutput) ToDirectoryMapOutputWithContext(ctx context.Context) DirectoryMapOutput {
	return o
}

func (o DirectoryMapOutput) MapIndex(k pulumi.StringInput) DirectoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Directory {
		return vs[0].(map[string]*Directory)[vs[1].(string)]
	}).(DirectoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryInput)(nil)).Elem(), &Directory{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryArrayInput)(nil)).Elem(), DirectoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryMapInput)(nil)).Elem(), DirectoryMap{})
	pulumi.RegisterOutputType(DirectoryOutput{})
	pulumi.RegisterOutputType(DirectoryArrayOutput{})
	pulumi.RegisterOutputType(DirectoryMapOutput{})
}
