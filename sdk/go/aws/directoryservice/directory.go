// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Simple or Managed Microsoft directory in AWS Directory Service.
// 
// ~> **Note:** All arguments including the password and customer username will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
type Directory struct {
	s *pulumi.ResourceState
}

// NewDirectory registers a new resource with the given unique name, arguments, and options.
func NewDirectory(ctx *pulumi.Context,
	name string, args *DirectoryArgs, opts ...pulumi.ResourceOpt) (*Directory, error) {
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["alias"] = nil
		inputs["connectSettings"] = nil
		inputs["description"] = nil
		inputs["edition"] = nil
		inputs["enableSso"] = nil
		inputs["name"] = nil
		inputs["password"] = nil
		inputs["shortName"] = nil
		inputs["size"] = nil
		inputs["tags"] = nil
		inputs["type"] = nil
		inputs["vpcSettings"] = nil
	} else {
		inputs["alias"] = args.Alias
		inputs["connectSettings"] = args.ConnectSettings
		inputs["description"] = args.Description
		inputs["edition"] = args.Edition
		inputs["enableSso"] = args.EnableSso
		inputs["name"] = args.Name
		inputs["password"] = args.Password
		inputs["shortName"] = args.ShortName
		inputs["size"] = args.Size
		inputs["tags"] = args.Tags
		inputs["type"] = args.Type
		inputs["vpcSettings"] = args.VpcSettings
	}
	inputs["accessUrl"] = nil
	inputs["dnsIpAddresses"] = nil
	inputs["securityGroupId"] = nil
	s, err := ctx.RegisterResource("aws:directoryservice/directory:Directory", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Directory{s: s}, nil
}

// GetDirectory gets an existing Directory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectory(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DirectoryState, opts ...pulumi.ResourceOpt) (*Directory, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessUrl"] = state.AccessUrl
		inputs["alias"] = state.Alias
		inputs["connectSettings"] = state.ConnectSettings
		inputs["description"] = state.Description
		inputs["dnsIpAddresses"] = state.DnsIpAddresses
		inputs["edition"] = state.Edition
		inputs["enableSso"] = state.EnableSso
		inputs["name"] = state.Name
		inputs["password"] = state.Password
		inputs["securityGroupId"] = state.SecurityGroupId
		inputs["shortName"] = state.ShortName
		inputs["size"] = state.Size
		inputs["tags"] = state.Tags
		inputs["type"] = state.Type
		inputs["vpcSettings"] = state.VpcSettings
	}
	s, err := ctx.ReadResource("aws:directoryservice/directory:Directory", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Directory{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Directory) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Directory) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The access URL for the directory, such as `http://alias.awsapps.com`.
func (r *Directory) AccessUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessUrl"])
}

// The alias for the directory (must be unique amongst all aliases in AWS). Required for `enable_sso`.
func (r *Directory) Alias() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["alias"])
}

// Connector related information about the directory. Fields documented below.
func (r *Directory) ConnectSettings() *pulumi.Output {
	return r.s.State["connectSettings"]
}

// A textual description for the directory.
func (r *Directory) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// A list of IP addresses of the DNS servers for the directory or connector.
func (r *Directory) DnsIpAddresses() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dnsIpAddresses"])
}

// The MicrosoftAD edition (`Standard` or `Enterprise`). Defaults to `Enterprise` (applies to MicrosoftAD type only).
func (r *Directory) Edition() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["edition"])
}

// Whether to enable single-sign on for the directory. Requires `alias`. Defaults to `false`.
func (r *Directory) EnableSso() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableSso"])
}

// The fully qualified name for the directory, such as `corp.example.com`
func (r *Directory) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The password for the directory administrator or connector user.
func (r *Directory) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// The ID of the security group created by the directory (`SimpleAD` or `MicrosoftAD` only).
func (r *Directory) SecurityGroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["securityGroupId"])
}

// The short name of the directory, such as `CORP`.
func (r *Directory) ShortName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["shortName"])
}

// The size of the directory (`Small` or `Large` are accepted values).
func (r *Directory) Size() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["size"])
}

// A mapping of tags to assign to the resource.
func (r *Directory) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// The directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD` are accepted values). Defaults to `SimpleAD`.
func (r *Directory) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// VPC related information about the directory. Fields documented below.
func (r *Directory) VpcSettings() *pulumi.Output {
	return r.s.State["vpcSettings"]
}

// Input properties used for looking up and filtering Directory resources.
type DirectoryState struct {
	// The access URL for the directory, such as `http://alias.awsapps.com`.
	AccessUrl interface{}
	// The alias for the directory (must be unique amongst all aliases in AWS). Required for `enable_sso`.
	Alias interface{}
	// Connector related information about the directory. Fields documented below.
	ConnectSettings interface{}
	// A textual description for the directory.
	Description interface{}
	// A list of IP addresses of the DNS servers for the directory or connector.
	DnsIpAddresses interface{}
	// The MicrosoftAD edition (`Standard` or `Enterprise`). Defaults to `Enterprise` (applies to MicrosoftAD type only).
	Edition interface{}
	// Whether to enable single-sign on for the directory. Requires `alias`. Defaults to `false`.
	EnableSso interface{}
	// The fully qualified name for the directory, such as `corp.example.com`
	Name interface{}
	// The password for the directory administrator or connector user.
	Password interface{}
	// The ID of the security group created by the directory (`SimpleAD` or `MicrosoftAD` only).
	SecurityGroupId interface{}
	// The short name of the directory, such as `CORP`.
	ShortName interface{}
	// The size of the directory (`Small` or `Large` are accepted values).
	Size interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD` are accepted values). Defaults to `SimpleAD`.
	Type interface{}
	// VPC related information about the directory. Fields documented below.
	VpcSettings interface{}
}

// The set of arguments for constructing a Directory resource.
type DirectoryArgs struct {
	// The alias for the directory (must be unique amongst all aliases in AWS). Required for `enable_sso`.
	Alias interface{}
	// Connector related information about the directory. Fields documented below.
	ConnectSettings interface{}
	// A textual description for the directory.
	Description interface{}
	// The MicrosoftAD edition (`Standard` or `Enterprise`). Defaults to `Enterprise` (applies to MicrosoftAD type only).
	Edition interface{}
	// Whether to enable single-sign on for the directory. Requires `alias`. Defaults to `false`.
	EnableSso interface{}
	// The fully qualified name for the directory, such as `corp.example.com`
	Name interface{}
	// The password for the directory administrator or connector user.
	Password interface{}
	// The short name of the directory, such as `CORP`.
	ShortName interface{}
	// The size of the directory (`Small` or `Large` are accepted values).
	Size interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD` are accepted values). Defaults to `SimpleAD`.
	Type interface{}
	// VPC related information about the directory. Fields documented below.
	VpcSettings interface{}
}
