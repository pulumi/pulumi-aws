// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codegurureviewer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type RepositoryAssociationKmsKeyDetails struct {
	// The encryption option for a repository association. It is either owned by AWS Key Management Service (KMS) (`AWS_OWNED_CMK`) or customer managed (`CUSTOMER_MANAGED_CMK`).
	EncryptionOption *string `pulumi:"encryptionOption"`
	// The ID of the AWS KMS key that is associated with a repository association.
	KmsKeyId *string `pulumi:"kmsKeyId"`
}

// RepositoryAssociationKmsKeyDetailsInput is an input type that accepts RepositoryAssociationKmsKeyDetailsArgs and RepositoryAssociationKmsKeyDetailsOutput values.
// You can construct a concrete instance of `RepositoryAssociationKmsKeyDetailsInput` via:
//
//	RepositoryAssociationKmsKeyDetailsArgs{...}
type RepositoryAssociationKmsKeyDetailsInput interface {
	pulumi.Input

	ToRepositoryAssociationKmsKeyDetailsOutput() RepositoryAssociationKmsKeyDetailsOutput
	ToRepositoryAssociationKmsKeyDetailsOutputWithContext(context.Context) RepositoryAssociationKmsKeyDetailsOutput
}

type RepositoryAssociationKmsKeyDetailsArgs struct {
	// The encryption option for a repository association. It is either owned by AWS Key Management Service (KMS) (`AWS_OWNED_CMK`) or customer managed (`CUSTOMER_MANAGED_CMK`).
	EncryptionOption pulumi.StringPtrInput `pulumi:"encryptionOption"`
	// The ID of the AWS KMS key that is associated with a repository association.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
}

func (RepositoryAssociationKmsKeyDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationKmsKeyDetails)(nil)).Elem()
}

func (i RepositoryAssociationKmsKeyDetailsArgs) ToRepositoryAssociationKmsKeyDetailsOutput() RepositoryAssociationKmsKeyDetailsOutput {
	return i.ToRepositoryAssociationKmsKeyDetailsOutputWithContext(context.Background())
}

func (i RepositoryAssociationKmsKeyDetailsArgs) ToRepositoryAssociationKmsKeyDetailsOutputWithContext(ctx context.Context) RepositoryAssociationKmsKeyDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationKmsKeyDetailsOutput)
}

func (i RepositoryAssociationKmsKeyDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationKmsKeyDetails] {
	return pulumix.Output[RepositoryAssociationKmsKeyDetails]{
		OutputState: i.ToRepositoryAssociationKmsKeyDetailsOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryAssociationKmsKeyDetailsArgs) ToRepositoryAssociationKmsKeyDetailsPtrOutput() RepositoryAssociationKmsKeyDetailsPtrOutput {
	return i.ToRepositoryAssociationKmsKeyDetailsPtrOutputWithContext(context.Background())
}

func (i RepositoryAssociationKmsKeyDetailsArgs) ToRepositoryAssociationKmsKeyDetailsPtrOutputWithContext(ctx context.Context) RepositoryAssociationKmsKeyDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationKmsKeyDetailsOutput).ToRepositoryAssociationKmsKeyDetailsPtrOutputWithContext(ctx)
}

// RepositoryAssociationKmsKeyDetailsPtrInput is an input type that accepts RepositoryAssociationKmsKeyDetailsArgs, RepositoryAssociationKmsKeyDetailsPtr and RepositoryAssociationKmsKeyDetailsPtrOutput values.
// You can construct a concrete instance of `RepositoryAssociationKmsKeyDetailsPtrInput` via:
//
//	        RepositoryAssociationKmsKeyDetailsArgs{...}
//
//	or:
//
//	        nil
type RepositoryAssociationKmsKeyDetailsPtrInput interface {
	pulumi.Input

	ToRepositoryAssociationKmsKeyDetailsPtrOutput() RepositoryAssociationKmsKeyDetailsPtrOutput
	ToRepositoryAssociationKmsKeyDetailsPtrOutputWithContext(context.Context) RepositoryAssociationKmsKeyDetailsPtrOutput
}

type repositoryAssociationKmsKeyDetailsPtrType RepositoryAssociationKmsKeyDetailsArgs

func RepositoryAssociationKmsKeyDetailsPtr(v *RepositoryAssociationKmsKeyDetailsArgs) RepositoryAssociationKmsKeyDetailsPtrInput {
	return (*repositoryAssociationKmsKeyDetailsPtrType)(v)
}

func (*repositoryAssociationKmsKeyDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationKmsKeyDetails)(nil)).Elem()
}

func (i *repositoryAssociationKmsKeyDetailsPtrType) ToRepositoryAssociationKmsKeyDetailsPtrOutput() RepositoryAssociationKmsKeyDetailsPtrOutput {
	return i.ToRepositoryAssociationKmsKeyDetailsPtrOutputWithContext(context.Background())
}

func (i *repositoryAssociationKmsKeyDetailsPtrType) ToRepositoryAssociationKmsKeyDetailsPtrOutputWithContext(ctx context.Context) RepositoryAssociationKmsKeyDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationKmsKeyDetailsPtrOutput)
}

func (i *repositoryAssociationKmsKeyDetailsPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationKmsKeyDetails] {
	return pulumix.Output[*RepositoryAssociationKmsKeyDetails]{
		OutputState: i.ToRepositoryAssociationKmsKeyDetailsPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryAssociationKmsKeyDetailsOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationKmsKeyDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationKmsKeyDetails)(nil)).Elem()
}

func (o RepositoryAssociationKmsKeyDetailsOutput) ToRepositoryAssociationKmsKeyDetailsOutput() RepositoryAssociationKmsKeyDetailsOutput {
	return o
}

func (o RepositoryAssociationKmsKeyDetailsOutput) ToRepositoryAssociationKmsKeyDetailsOutputWithContext(ctx context.Context) RepositoryAssociationKmsKeyDetailsOutput {
	return o
}

func (o RepositoryAssociationKmsKeyDetailsOutput) ToRepositoryAssociationKmsKeyDetailsPtrOutput() RepositoryAssociationKmsKeyDetailsPtrOutput {
	return o.ToRepositoryAssociationKmsKeyDetailsPtrOutputWithContext(context.Background())
}

func (o RepositoryAssociationKmsKeyDetailsOutput) ToRepositoryAssociationKmsKeyDetailsPtrOutputWithContext(ctx context.Context) RepositoryAssociationKmsKeyDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryAssociationKmsKeyDetails) *RepositoryAssociationKmsKeyDetails {
		return &v
	}).(RepositoryAssociationKmsKeyDetailsPtrOutput)
}

func (o RepositoryAssociationKmsKeyDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationKmsKeyDetails] {
	return pulumix.Output[RepositoryAssociationKmsKeyDetails]{
		OutputState: o.OutputState,
	}
}

// The encryption option for a repository association. It is either owned by AWS Key Management Service (KMS) (`AWS_OWNED_CMK`) or customer managed (`CUSTOMER_MANAGED_CMK`).
func (o RepositoryAssociationKmsKeyDetailsOutput) EncryptionOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryAssociationKmsKeyDetails) *string { return v.EncryptionOption }).(pulumi.StringPtrOutput)
}

// The ID of the AWS KMS key that is associated with a repository association.
func (o RepositoryAssociationKmsKeyDetailsOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryAssociationKmsKeyDetails) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

type RepositoryAssociationKmsKeyDetailsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationKmsKeyDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationKmsKeyDetails)(nil)).Elem()
}

func (o RepositoryAssociationKmsKeyDetailsPtrOutput) ToRepositoryAssociationKmsKeyDetailsPtrOutput() RepositoryAssociationKmsKeyDetailsPtrOutput {
	return o
}

func (o RepositoryAssociationKmsKeyDetailsPtrOutput) ToRepositoryAssociationKmsKeyDetailsPtrOutputWithContext(ctx context.Context) RepositoryAssociationKmsKeyDetailsPtrOutput {
	return o
}

func (o RepositoryAssociationKmsKeyDetailsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationKmsKeyDetails] {
	return pulumix.Output[*RepositoryAssociationKmsKeyDetails]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationKmsKeyDetailsPtrOutput) Elem() RepositoryAssociationKmsKeyDetailsOutput {
	return o.ApplyT(func(v *RepositoryAssociationKmsKeyDetails) RepositoryAssociationKmsKeyDetails {
		if v != nil {
			return *v
		}
		var ret RepositoryAssociationKmsKeyDetails
		return ret
	}).(RepositoryAssociationKmsKeyDetailsOutput)
}

// The encryption option for a repository association. It is either owned by AWS Key Management Service (KMS) (`AWS_OWNED_CMK`) or customer managed (`CUSTOMER_MANAGED_CMK`).
func (o RepositoryAssociationKmsKeyDetailsPtrOutput) EncryptionOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationKmsKeyDetails) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionOption
	}).(pulumi.StringPtrOutput)
}

// The ID of the AWS KMS key that is associated with a repository association.
func (o RepositoryAssociationKmsKeyDetailsPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationKmsKeyDetails) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

type RepositoryAssociationRepository struct {
	Bitbucket              *RepositoryAssociationRepositoryBitbucket              `pulumi:"bitbucket"`
	Codecommit             *RepositoryAssociationRepositoryCodecommit             `pulumi:"codecommit"`
	GithubEnterpriseServer *RepositoryAssociationRepositoryGithubEnterpriseServer `pulumi:"githubEnterpriseServer"`
	S3Bucket               *RepositoryAssociationRepositoryS3Bucket               `pulumi:"s3Bucket"`
}

// RepositoryAssociationRepositoryInput is an input type that accepts RepositoryAssociationRepositoryArgs and RepositoryAssociationRepositoryOutput values.
// You can construct a concrete instance of `RepositoryAssociationRepositoryInput` via:
//
//	RepositoryAssociationRepositoryArgs{...}
type RepositoryAssociationRepositoryInput interface {
	pulumi.Input

	ToRepositoryAssociationRepositoryOutput() RepositoryAssociationRepositoryOutput
	ToRepositoryAssociationRepositoryOutputWithContext(context.Context) RepositoryAssociationRepositoryOutput
}

type RepositoryAssociationRepositoryArgs struct {
	Bitbucket              RepositoryAssociationRepositoryBitbucketPtrInput              `pulumi:"bitbucket"`
	Codecommit             RepositoryAssociationRepositoryCodecommitPtrInput             `pulumi:"codecommit"`
	GithubEnterpriseServer RepositoryAssociationRepositoryGithubEnterpriseServerPtrInput `pulumi:"githubEnterpriseServer"`
	S3Bucket               RepositoryAssociationRepositoryS3BucketPtrInput               `pulumi:"s3Bucket"`
}

func (RepositoryAssociationRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepository)(nil)).Elem()
}

func (i RepositoryAssociationRepositoryArgs) ToRepositoryAssociationRepositoryOutput() RepositoryAssociationRepositoryOutput {
	return i.ToRepositoryAssociationRepositoryOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryArgs) ToRepositoryAssociationRepositoryOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryOutput)
}

func (i RepositoryAssociationRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepository] {
	return pulumix.Output[RepositoryAssociationRepository]{
		OutputState: i.ToRepositoryAssociationRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryAssociationRepositoryArgs) ToRepositoryAssociationRepositoryPtrOutput() RepositoryAssociationRepositoryPtrOutput {
	return i.ToRepositoryAssociationRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryArgs) ToRepositoryAssociationRepositoryPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryOutput).ToRepositoryAssociationRepositoryPtrOutputWithContext(ctx)
}

// RepositoryAssociationRepositoryPtrInput is an input type that accepts RepositoryAssociationRepositoryArgs, RepositoryAssociationRepositoryPtr and RepositoryAssociationRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryAssociationRepositoryPtrInput` via:
//
//	        RepositoryAssociationRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryAssociationRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryAssociationRepositoryPtrOutput() RepositoryAssociationRepositoryPtrOutput
	ToRepositoryAssociationRepositoryPtrOutputWithContext(context.Context) RepositoryAssociationRepositoryPtrOutput
}

type repositoryAssociationRepositoryPtrType RepositoryAssociationRepositoryArgs

func RepositoryAssociationRepositoryPtr(v *RepositoryAssociationRepositoryArgs) RepositoryAssociationRepositoryPtrInput {
	return (*repositoryAssociationRepositoryPtrType)(v)
}

func (*repositoryAssociationRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationRepository)(nil)).Elem()
}

func (i *repositoryAssociationRepositoryPtrType) ToRepositoryAssociationRepositoryPtrOutput() RepositoryAssociationRepositoryPtrOutput {
	return i.ToRepositoryAssociationRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryAssociationRepositoryPtrType) ToRepositoryAssociationRepositoryPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryPtrOutput)
}

func (i *repositoryAssociationRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepository] {
	return pulumix.Output[*RepositoryAssociationRepository]{
		OutputState: i.ToRepositoryAssociationRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryAssociationRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepository)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryOutput) ToRepositoryAssociationRepositoryOutput() RepositoryAssociationRepositoryOutput {
	return o
}

func (o RepositoryAssociationRepositoryOutput) ToRepositoryAssociationRepositoryOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryOutput {
	return o
}

func (o RepositoryAssociationRepositoryOutput) ToRepositoryAssociationRepositoryPtrOutput() RepositoryAssociationRepositoryPtrOutput {
	return o.ToRepositoryAssociationRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryAssociationRepositoryOutput) ToRepositoryAssociationRepositoryPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryAssociationRepository) *RepositoryAssociationRepository {
		return &v
	}).(RepositoryAssociationRepositoryPtrOutput)
}

func (o RepositoryAssociationRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepository] {
	return pulumix.Output[RepositoryAssociationRepository]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationRepositoryOutput) Bitbucket() RepositoryAssociationRepositoryBitbucketPtrOutput {
	return o.ApplyT(func(v RepositoryAssociationRepository) *RepositoryAssociationRepositoryBitbucket { return v.Bitbucket }).(RepositoryAssociationRepositoryBitbucketPtrOutput)
}

func (o RepositoryAssociationRepositoryOutput) Codecommit() RepositoryAssociationRepositoryCodecommitPtrOutput {
	return o.ApplyT(func(v RepositoryAssociationRepository) *RepositoryAssociationRepositoryCodecommit {
		return v.Codecommit
	}).(RepositoryAssociationRepositoryCodecommitPtrOutput)
}

func (o RepositoryAssociationRepositoryOutput) GithubEnterpriseServer() RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput {
	return o.ApplyT(func(v RepositoryAssociationRepository) *RepositoryAssociationRepositoryGithubEnterpriseServer {
		return v.GithubEnterpriseServer
	}).(RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput)
}

func (o RepositoryAssociationRepositoryOutput) S3Bucket() RepositoryAssociationRepositoryS3BucketPtrOutput {
	return o.ApplyT(func(v RepositoryAssociationRepository) *RepositoryAssociationRepositoryS3Bucket { return v.S3Bucket }).(RepositoryAssociationRepositoryS3BucketPtrOutput)
}

type RepositoryAssociationRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationRepository)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryPtrOutput) ToRepositoryAssociationRepositoryPtrOutput() RepositoryAssociationRepositoryPtrOutput {
	return o
}

func (o RepositoryAssociationRepositoryPtrOutput) ToRepositoryAssociationRepositoryPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryPtrOutput {
	return o
}

func (o RepositoryAssociationRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepository] {
	return pulumix.Output[*RepositoryAssociationRepository]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationRepositoryPtrOutput) Elem() RepositoryAssociationRepositoryOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepository) RepositoryAssociationRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryAssociationRepository
		return ret
	}).(RepositoryAssociationRepositoryOutput)
}

func (o RepositoryAssociationRepositoryPtrOutput) Bitbucket() RepositoryAssociationRepositoryBitbucketPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepository) *RepositoryAssociationRepositoryBitbucket {
		if v == nil {
			return nil
		}
		return v.Bitbucket
	}).(RepositoryAssociationRepositoryBitbucketPtrOutput)
}

func (o RepositoryAssociationRepositoryPtrOutput) Codecommit() RepositoryAssociationRepositoryCodecommitPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepository) *RepositoryAssociationRepositoryCodecommit {
		if v == nil {
			return nil
		}
		return v.Codecommit
	}).(RepositoryAssociationRepositoryCodecommitPtrOutput)
}

func (o RepositoryAssociationRepositoryPtrOutput) GithubEnterpriseServer() RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepository) *RepositoryAssociationRepositoryGithubEnterpriseServer {
		if v == nil {
			return nil
		}
		return v.GithubEnterpriseServer
	}).(RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput)
}

func (o RepositoryAssociationRepositoryPtrOutput) S3Bucket() RepositoryAssociationRepositoryS3BucketPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepository) *RepositoryAssociationRepositoryS3Bucket {
		if v == nil {
			return nil
		}
		return v.S3Bucket
	}).(RepositoryAssociationRepositoryS3BucketPtrOutput)
}

type RepositoryAssociationRepositoryBitbucket struct {
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn string `pulumi:"connectionArn"`
	// The name of the third party source repository.
	Name string `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner string `pulumi:"owner"`
}

// RepositoryAssociationRepositoryBitbucketInput is an input type that accepts RepositoryAssociationRepositoryBitbucketArgs and RepositoryAssociationRepositoryBitbucketOutput values.
// You can construct a concrete instance of `RepositoryAssociationRepositoryBitbucketInput` via:
//
//	RepositoryAssociationRepositoryBitbucketArgs{...}
type RepositoryAssociationRepositoryBitbucketInput interface {
	pulumi.Input

	ToRepositoryAssociationRepositoryBitbucketOutput() RepositoryAssociationRepositoryBitbucketOutput
	ToRepositoryAssociationRepositoryBitbucketOutputWithContext(context.Context) RepositoryAssociationRepositoryBitbucketOutput
}

type RepositoryAssociationRepositoryBitbucketArgs struct {
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn pulumi.StringInput `pulumi:"connectionArn"`
	// The name of the third party source repository.
	Name pulumi.StringInput `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner pulumi.StringInput `pulumi:"owner"`
}

func (RepositoryAssociationRepositoryBitbucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryBitbucket)(nil)).Elem()
}

func (i RepositoryAssociationRepositoryBitbucketArgs) ToRepositoryAssociationRepositoryBitbucketOutput() RepositoryAssociationRepositoryBitbucketOutput {
	return i.ToRepositoryAssociationRepositoryBitbucketOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryBitbucketArgs) ToRepositoryAssociationRepositoryBitbucketOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryBitbucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryBitbucketOutput)
}

func (i RepositoryAssociationRepositoryBitbucketArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryBitbucket] {
	return pulumix.Output[RepositoryAssociationRepositoryBitbucket]{
		OutputState: i.ToRepositoryAssociationRepositoryBitbucketOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryAssociationRepositoryBitbucketArgs) ToRepositoryAssociationRepositoryBitbucketPtrOutput() RepositoryAssociationRepositoryBitbucketPtrOutput {
	return i.ToRepositoryAssociationRepositoryBitbucketPtrOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryBitbucketArgs) ToRepositoryAssociationRepositoryBitbucketPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryBitbucketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryBitbucketOutput).ToRepositoryAssociationRepositoryBitbucketPtrOutputWithContext(ctx)
}

// RepositoryAssociationRepositoryBitbucketPtrInput is an input type that accepts RepositoryAssociationRepositoryBitbucketArgs, RepositoryAssociationRepositoryBitbucketPtr and RepositoryAssociationRepositoryBitbucketPtrOutput values.
// You can construct a concrete instance of `RepositoryAssociationRepositoryBitbucketPtrInput` via:
//
//	        RepositoryAssociationRepositoryBitbucketArgs{...}
//
//	or:
//
//	        nil
type RepositoryAssociationRepositoryBitbucketPtrInput interface {
	pulumi.Input

	ToRepositoryAssociationRepositoryBitbucketPtrOutput() RepositoryAssociationRepositoryBitbucketPtrOutput
	ToRepositoryAssociationRepositoryBitbucketPtrOutputWithContext(context.Context) RepositoryAssociationRepositoryBitbucketPtrOutput
}

type repositoryAssociationRepositoryBitbucketPtrType RepositoryAssociationRepositoryBitbucketArgs

func RepositoryAssociationRepositoryBitbucketPtr(v *RepositoryAssociationRepositoryBitbucketArgs) RepositoryAssociationRepositoryBitbucketPtrInput {
	return (*repositoryAssociationRepositoryBitbucketPtrType)(v)
}

func (*repositoryAssociationRepositoryBitbucketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationRepositoryBitbucket)(nil)).Elem()
}

func (i *repositoryAssociationRepositoryBitbucketPtrType) ToRepositoryAssociationRepositoryBitbucketPtrOutput() RepositoryAssociationRepositoryBitbucketPtrOutput {
	return i.ToRepositoryAssociationRepositoryBitbucketPtrOutputWithContext(context.Background())
}

func (i *repositoryAssociationRepositoryBitbucketPtrType) ToRepositoryAssociationRepositoryBitbucketPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryBitbucketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryBitbucketPtrOutput)
}

func (i *repositoryAssociationRepositoryBitbucketPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryBitbucket] {
	return pulumix.Output[*RepositoryAssociationRepositoryBitbucket]{
		OutputState: i.ToRepositoryAssociationRepositoryBitbucketPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryAssociationRepositoryBitbucketOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryBitbucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryBitbucket)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryBitbucketOutput) ToRepositoryAssociationRepositoryBitbucketOutput() RepositoryAssociationRepositoryBitbucketOutput {
	return o
}

func (o RepositoryAssociationRepositoryBitbucketOutput) ToRepositoryAssociationRepositoryBitbucketOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryBitbucketOutput {
	return o
}

func (o RepositoryAssociationRepositoryBitbucketOutput) ToRepositoryAssociationRepositoryBitbucketPtrOutput() RepositoryAssociationRepositoryBitbucketPtrOutput {
	return o.ToRepositoryAssociationRepositoryBitbucketPtrOutputWithContext(context.Background())
}

func (o RepositoryAssociationRepositoryBitbucketOutput) ToRepositoryAssociationRepositoryBitbucketPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryBitbucketPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryAssociationRepositoryBitbucket) *RepositoryAssociationRepositoryBitbucket {
		return &v
	}).(RepositoryAssociationRepositoryBitbucketPtrOutput)
}

func (o RepositoryAssociationRepositoryBitbucketOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryBitbucket] {
	return pulumix.Output[RepositoryAssociationRepositoryBitbucket]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
func (o RepositoryAssociationRepositoryBitbucketOutput) ConnectionArn() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryAssociationRepositoryBitbucket) string { return v.ConnectionArn }).(pulumi.StringOutput)
}

// The name of the third party source repository.
func (o RepositoryAssociationRepositoryBitbucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryAssociationRepositoryBitbucket) string { return v.Name }).(pulumi.StringOutput)
}

// The username for the account that owns the repository.
func (o RepositoryAssociationRepositoryBitbucketOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryAssociationRepositoryBitbucket) string { return v.Owner }).(pulumi.StringOutput)
}

type RepositoryAssociationRepositoryBitbucketPtrOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryBitbucketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationRepositoryBitbucket)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryBitbucketPtrOutput) ToRepositoryAssociationRepositoryBitbucketPtrOutput() RepositoryAssociationRepositoryBitbucketPtrOutput {
	return o
}

func (o RepositoryAssociationRepositoryBitbucketPtrOutput) ToRepositoryAssociationRepositoryBitbucketPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryBitbucketPtrOutput {
	return o
}

func (o RepositoryAssociationRepositoryBitbucketPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryBitbucket] {
	return pulumix.Output[*RepositoryAssociationRepositoryBitbucket]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationRepositoryBitbucketPtrOutput) Elem() RepositoryAssociationRepositoryBitbucketOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryBitbucket) RepositoryAssociationRepositoryBitbucket {
		if v != nil {
			return *v
		}
		var ret RepositoryAssociationRepositoryBitbucket
		return ret
	}).(RepositoryAssociationRepositoryBitbucketOutput)
}

// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
func (o RepositoryAssociationRepositoryBitbucketPtrOutput) ConnectionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryBitbucket) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectionArn
	}).(pulumi.StringPtrOutput)
}

// The name of the third party source repository.
func (o RepositoryAssociationRepositoryBitbucketPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryBitbucket) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The username for the account that owns the repository.
func (o RepositoryAssociationRepositoryBitbucketPtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryBitbucket) *string {
		if v == nil {
			return nil
		}
		return &v.Owner
	}).(pulumi.StringPtrOutput)
}

type RepositoryAssociationRepositoryCodecommit struct {
	// The name of the AWS CodeCommit repository.
	Name string `pulumi:"name"`
}

// RepositoryAssociationRepositoryCodecommitInput is an input type that accepts RepositoryAssociationRepositoryCodecommitArgs and RepositoryAssociationRepositoryCodecommitOutput values.
// You can construct a concrete instance of `RepositoryAssociationRepositoryCodecommitInput` via:
//
//	RepositoryAssociationRepositoryCodecommitArgs{...}
type RepositoryAssociationRepositoryCodecommitInput interface {
	pulumi.Input

	ToRepositoryAssociationRepositoryCodecommitOutput() RepositoryAssociationRepositoryCodecommitOutput
	ToRepositoryAssociationRepositoryCodecommitOutputWithContext(context.Context) RepositoryAssociationRepositoryCodecommitOutput
}

type RepositoryAssociationRepositoryCodecommitArgs struct {
	// The name of the AWS CodeCommit repository.
	Name pulumi.StringInput `pulumi:"name"`
}

func (RepositoryAssociationRepositoryCodecommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryCodecommit)(nil)).Elem()
}

func (i RepositoryAssociationRepositoryCodecommitArgs) ToRepositoryAssociationRepositoryCodecommitOutput() RepositoryAssociationRepositoryCodecommitOutput {
	return i.ToRepositoryAssociationRepositoryCodecommitOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryCodecommitArgs) ToRepositoryAssociationRepositoryCodecommitOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryCodecommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryCodecommitOutput)
}

func (i RepositoryAssociationRepositoryCodecommitArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryCodecommit] {
	return pulumix.Output[RepositoryAssociationRepositoryCodecommit]{
		OutputState: i.ToRepositoryAssociationRepositoryCodecommitOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryAssociationRepositoryCodecommitArgs) ToRepositoryAssociationRepositoryCodecommitPtrOutput() RepositoryAssociationRepositoryCodecommitPtrOutput {
	return i.ToRepositoryAssociationRepositoryCodecommitPtrOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryCodecommitArgs) ToRepositoryAssociationRepositoryCodecommitPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryCodecommitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryCodecommitOutput).ToRepositoryAssociationRepositoryCodecommitPtrOutputWithContext(ctx)
}

// RepositoryAssociationRepositoryCodecommitPtrInput is an input type that accepts RepositoryAssociationRepositoryCodecommitArgs, RepositoryAssociationRepositoryCodecommitPtr and RepositoryAssociationRepositoryCodecommitPtrOutput values.
// You can construct a concrete instance of `RepositoryAssociationRepositoryCodecommitPtrInput` via:
//
//	        RepositoryAssociationRepositoryCodecommitArgs{...}
//
//	or:
//
//	        nil
type RepositoryAssociationRepositoryCodecommitPtrInput interface {
	pulumi.Input

	ToRepositoryAssociationRepositoryCodecommitPtrOutput() RepositoryAssociationRepositoryCodecommitPtrOutput
	ToRepositoryAssociationRepositoryCodecommitPtrOutputWithContext(context.Context) RepositoryAssociationRepositoryCodecommitPtrOutput
}

type repositoryAssociationRepositoryCodecommitPtrType RepositoryAssociationRepositoryCodecommitArgs

func RepositoryAssociationRepositoryCodecommitPtr(v *RepositoryAssociationRepositoryCodecommitArgs) RepositoryAssociationRepositoryCodecommitPtrInput {
	return (*repositoryAssociationRepositoryCodecommitPtrType)(v)
}

func (*repositoryAssociationRepositoryCodecommitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationRepositoryCodecommit)(nil)).Elem()
}

func (i *repositoryAssociationRepositoryCodecommitPtrType) ToRepositoryAssociationRepositoryCodecommitPtrOutput() RepositoryAssociationRepositoryCodecommitPtrOutput {
	return i.ToRepositoryAssociationRepositoryCodecommitPtrOutputWithContext(context.Background())
}

func (i *repositoryAssociationRepositoryCodecommitPtrType) ToRepositoryAssociationRepositoryCodecommitPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryCodecommitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryCodecommitPtrOutput)
}

func (i *repositoryAssociationRepositoryCodecommitPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryCodecommit] {
	return pulumix.Output[*RepositoryAssociationRepositoryCodecommit]{
		OutputState: i.ToRepositoryAssociationRepositoryCodecommitPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryAssociationRepositoryCodecommitOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryCodecommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryCodecommit)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryCodecommitOutput) ToRepositoryAssociationRepositoryCodecommitOutput() RepositoryAssociationRepositoryCodecommitOutput {
	return o
}

func (o RepositoryAssociationRepositoryCodecommitOutput) ToRepositoryAssociationRepositoryCodecommitOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryCodecommitOutput {
	return o
}

func (o RepositoryAssociationRepositoryCodecommitOutput) ToRepositoryAssociationRepositoryCodecommitPtrOutput() RepositoryAssociationRepositoryCodecommitPtrOutput {
	return o.ToRepositoryAssociationRepositoryCodecommitPtrOutputWithContext(context.Background())
}

func (o RepositoryAssociationRepositoryCodecommitOutput) ToRepositoryAssociationRepositoryCodecommitPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryCodecommitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryAssociationRepositoryCodecommit) *RepositoryAssociationRepositoryCodecommit {
		return &v
	}).(RepositoryAssociationRepositoryCodecommitPtrOutput)
}

func (o RepositoryAssociationRepositoryCodecommitOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryCodecommit] {
	return pulumix.Output[RepositoryAssociationRepositoryCodecommit]{
		OutputState: o.OutputState,
	}
}

// The name of the AWS CodeCommit repository.
func (o RepositoryAssociationRepositoryCodecommitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryAssociationRepositoryCodecommit) string { return v.Name }).(pulumi.StringOutput)
}

type RepositoryAssociationRepositoryCodecommitPtrOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryCodecommitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationRepositoryCodecommit)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryCodecommitPtrOutput) ToRepositoryAssociationRepositoryCodecommitPtrOutput() RepositoryAssociationRepositoryCodecommitPtrOutput {
	return o
}

func (o RepositoryAssociationRepositoryCodecommitPtrOutput) ToRepositoryAssociationRepositoryCodecommitPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryCodecommitPtrOutput {
	return o
}

func (o RepositoryAssociationRepositoryCodecommitPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryCodecommit] {
	return pulumix.Output[*RepositoryAssociationRepositoryCodecommit]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationRepositoryCodecommitPtrOutput) Elem() RepositoryAssociationRepositoryCodecommitOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryCodecommit) RepositoryAssociationRepositoryCodecommit {
		if v != nil {
			return *v
		}
		var ret RepositoryAssociationRepositoryCodecommit
		return ret
	}).(RepositoryAssociationRepositoryCodecommitOutput)
}

// The name of the AWS CodeCommit repository.
func (o RepositoryAssociationRepositoryCodecommitPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryCodecommit) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type RepositoryAssociationRepositoryGithubEnterpriseServer struct {
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn string `pulumi:"connectionArn"`
	// The name of the third party source repository.
	Name string `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner string `pulumi:"owner"`
}

// RepositoryAssociationRepositoryGithubEnterpriseServerInput is an input type that accepts RepositoryAssociationRepositoryGithubEnterpriseServerArgs and RepositoryAssociationRepositoryGithubEnterpriseServerOutput values.
// You can construct a concrete instance of `RepositoryAssociationRepositoryGithubEnterpriseServerInput` via:
//
//	RepositoryAssociationRepositoryGithubEnterpriseServerArgs{...}
type RepositoryAssociationRepositoryGithubEnterpriseServerInput interface {
	pulumi.Input

	ToRepositoryAssociationRepositoryGithubEnterpriseServerOutput() RepositoryAssociationRepositoryGithubEnterpriseServerOutput
	ToRepositoryAssociationRepositoryGithubEnterpriseServerOutputWithContext(context.Context) RepositoryAssociationRepositoryGithubEnterpriseServerOutput
}

type RepositoryAssociationRepositoryGithubEnterpriseServerArgs struct {
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn pulumi.StringInput `pulumi:"connectionArn"`
	// The name of the third party source repository.
	Name pulumi.StringInput `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner pulumi.StringInput `pulumi:"owner"`
}

func (RepositoryAssociationRepositoryGithubEnterpriseServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryGithubEnterpriseServer)(nil)).Elem()
}

func (i RepositoryAssociationRepositoryGithubEnterpriseServerArgs) ToRepositoryAssociationRepositoryGithubEnterpriseServerOutput() RepositoryAssociationRepositoryGithubEnterpriseServerOutput {
	return i.ToRepositoryAssociationRepositoryGithubEnterpriseServerOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryGithubEnterpriseServerArgs) ToRepositoryAssociationRepositoryGithubEnterpriseServerOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryGithubEnterpriseServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryGithubEnterpriseServerOutput)
}

func (i RepositoryAssociationRepositoryGithubEnterpriseServerArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryGithubEnterpriseServer] {
	return pulumix.Output[RepositoryAssociationRepositoryGithubEnterpriseServer]{
		OutputState: i.ToRepositoryAssociationRepositoryGithubEnterpriseServerOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryAssociationRepositoryGithubEnterpriseServerArgs) ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput() RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput {
	return i.ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryGithubEnterpriseServerArgs) ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryGithubEnterpriseServerOutput).ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutputWithContext(ctx)
}

// RepositoryAssociationRepositoryGithubEnterpriseServerPtrInput is an input type that accepts RepositoryAssociationRepositoryGithubEnterpriseServerArgs, RepositoryAssociationRepositoryGithubEnterpriseServerPtr and RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput values.
// You can construct a concrete instance of `RepositoryAssociationRepositoryGithubEnterpriseServerPtrInput` via:
//
//	        RepositoryAssociationRepositoryGithubEnterpriseServerArgs{...}
//
//	or:
//
//	        nil
type RepositoryAssociationRepositoryGithubEnterpriseServerPtrInput interface {
	pulumi.Input

	ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput() RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput
	ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutputWithContext(context.Context) RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput
}

type repositoryAssociationRepositoryGithubEnterpriseServerPtrType RepositoryAssociationRepositoryGithubEnterpriseServerArgs

func RepositoryAssociationRepositoryGithubEnterpriseServerPtr(v *RepositoryAssociationRepositoryGithubEnterpriseServerArgs) RepositoryAssociationRepositoryGithubEnterpriseServerPtrInput {
	return (*repositoryAssociationRepositoryGithubEnterpriseServerPtrType)(v)
}

func (*repositoryAssociationRepositoryGithubEnterpriseServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationRepositoryGithubEnterpriseServer)(nil)).Elem()
}

func (i *repositoryAssociationRepositoryGithubEnterpriseServerPtrType) ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput() RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput {
	return i.ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutputWithContext(context.Background())
}

func (i *repositoryAssociationRepositoryGithubEnterpriseServerPtrType) ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput)
}

func (i *repositoryAssociationRepositoryGithubEnterpriseServerPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryGithubEnterpriseServer] {
	return pulumix.Output[*RepositoryAssociationRepositoryGithubEnterpriseServer]{
		OutputState: i.ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryAssociationRepositoryGithubEnterpriseServerOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryGithubEnterpriseServer)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ToRepositoryAssociationRepositoryGithubEnterpriseServerOutput() RepositoryAssociationRepositoryGithubEnterpriseServerOutput {
	return o
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ToRepositoryAssociationRepositoryGithubEnterpriseServerOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryGithubEnterpriseServerOutput {
	return o
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput() RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput {
	return o.ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutputWithContext(context.Background())
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryAssociationRepositoryGithubEnterpriseServer) *RepositoryAssociationRepositoryGithubEnterpriseServer {
		return &v
	}).(RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput)
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryGithubEnterpriseServer] {
	return pulumix.Output[RepositoryAssociationRepositoryGithubEnterpriseServer]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ConnectionArn() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryAssociationRepositoryGithubEnterpriseServer) string { return v.ConnectionArn }).(pulumi.StringOutput)
}

// The name of the third party source repository.
func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryAssociationRepositoryGithubEnterpriseServer) string { return v.Name }).(pulumi.StringOutput)
}

// The username for the account that owns the repository.
func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryAssociationRepositoryGithubEnterpriseServer) string { return v.Owner }).(pulumi.StringOutput)
}

type RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationRepositoryGithubEnterpriseServer)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput) ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput() RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput {
	return o
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput) ToRepositoryAssociationRepositoryGithubEnterpriseServerPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput {
	return o
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryGithubEnterpriseServer] {
	return pulumix.Output[*RepositoryAssociationRepositoryGithubEnterpriseServer]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput) Elem() RepositoryAssociationRepositoryGithubEnterpriseServerOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryGithubEnterpriseServer) RepositoryAssociationRepositoryGithubEnterpriseServer {
		if v != nil {
			return *v
		}
		var ret RepositoryAssociationRepositoryGithubEnterpriseServer
		return ret
	}).(RepositoryAssociationRepositoryGithubEnterpriseServerOutput)
}

// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
func (o RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput) ConnectionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryGithubEnterpriseServer) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectionArn
	}).(pulumi.StringPtrOutput)
}

// The name of the third party source repository.
func (o RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryGithubEnterpriseServer) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The username for the account that owns the repository.
func (o RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryGithubEnterpriseServer) *string {
		if v == nil {
			return nil
		}
		return &v.Owner
	}).(pulumi.StringPtrOutput)
}

type RepositoryAssociationRepositoryS3Bucket struct {
	// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
	BucketName string `pulumi:"bucketName"`
	// The name of the third party source repository.
	Name string `pulumi:"name"`
}

// RepositoryAssociationRepositoryS3BucketInput is an input type that accepts RepositoryAssociationRepositoryS3BucketArgs and RepositoryAssociationRepositoryS3BucketOutput values.
// You can construct a concrete instance of `RepositoryAssociationRepositoryS3BucketInput` via:
//
//	RepositoryAssociationRepositoryS3BucketArgs{...}
type RepositoryAssociationRepositoryS3BucketInput interface {
	pulumi.Input

	ToRepositoryAssociationRepositoryS3BucketOutput() RepositoryAssociationRepositoryS3BucketOutput
	ToRepositoryAssociationRepositoryS3BucketOutputWithContext(context.Context) RepositoryAssociationRepositoryS3BucketOutput
}

type RepositoryAssociationRepositoryS3BucketArgs struct {
	// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The name of the third party source repository.
	Name pulumi.StringInput `pulumi:"name"`
}

func (RepositoryAssociationRepositoryS3BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryS3Bucket)(nil)).Elem()
}

func (i RepositoryAssociationRepositoryS3BucketArgs) ToRepositoryAssociationRepositoryS3BucketOutput() RepositoryAssociationRepositoryS3BucketOutput {
	return i.ToRepositoryAssociationRepositoryS3BucketOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryS3BucketArgs) ToRepositoryAssociationRepositoryS3BucketOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryS3BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryS3BucketOutput)
}

func (i RepositoryAssociationRepositoryS3BucketArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryS3Bucket] {
	return pulumix.Output[RepositoryAssociationRepositoryS3Bucket]{
		OutputState: i.ToRepositoryAssociationRepositoryS3BucketOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryAssociationRepositoryS3BucketArgs) ToRepositoryAssociationRepositoryS3BucketPtrOutput() RepositoryAssociationRepositoryS3BucketPtrOutput {
	return i.ToRepositoryAssociationRepositoryS3BucketPtrOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryS3BucketArgs) ToRepositoryAssociationRepositoryS3BucketPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryS3BucketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryS3BucketOutput).ToRepositoryAssociationRepositoryS3BucketPtrOutputWithContext(ctx)
}

// RepositoryAssociationRepositoryS3BucketPtrInput is an input type that accepts RepositoryAssociationRepositoryS3BucketArgs, RepositoryAssociationRepositoryS3BucketPtr and RepositoryAssociationRepositoryS3BucketPtrOutput values.
// You can construct a concrete instance of `RepositoryAssociationRepositoryS3BucketPtrInput` via:
//
//	        RepositoryAssociationRepositoryS3BucketArgs{...}
//
//	or:
//
//	        nil
type RepositoryAssociationRepositoryS3BucketPtrInput interface {
	pulumi.Input

	ToRepositoryAssociationRepositoryS3BucketPtrOutput() RepositoryAssociationRepositoryS3BucketPtrOutput
	ToRepositoryAssociationRepositoryS3BucketPtrOutputWithContext(context.Context) RepositoryAssociationRepositoryS3BucketPtrOutput
}

type repositoryAssociationRepositoryS3BucketPtrType RepositoryAssociationRepositoryS3BucketArgs

func RepositoryAssociationRepositoryS3BucketPtr(v *RepositoryAssociationRepositoryS3BucketArgs) RepositoryAssociationRepositoryS3BucketPtrInput {
	return (*repositoryAssociationRepositoryS3BucketPtrType)(v)
}

func (*repositoryAssociationRepositoryS3BucketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationRepositoryS3Bucket)(nil)).Elem()
}

func (i *repositoryAssociationRepositoryS3BucketPtrType) ToRepositoryAssociationRepositoryS3BucketPtrOutput() RepositoryAssociationRepositoryS3BucketPtrOutput {
	return i.ToRepositoryAssociationRepositoryS3BucketPtrOutputWithContext(context.Background())
}

func (i *repositoryAssociationRepositoryS3BucketPtrType) ToRepositoryAssociationRepositoryS3BucketPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryS3BucketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryS3BucketPtrOutput)
}

func (i *repositoryAssociationRepositoryS3BucketPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryS3Bucket] {
	return pulumix.Output[*RepositoryAssociationRepositoryS3Bucket]{
		OutputState: i.ToRepositoryAssociationRepositoryS3BucketPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryAssociationRepositoryS3BucketOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryS3BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryS3Bucket)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryS3BucketOutput) ToRepositoryAssociationRepositoryS3BucketOutput() RepositoryAssociationRepositoryS3BucketOutput {
	return o
}

func (o RepositoryAssociationRepositoryS3BucketOutput) ToRepositoryAssociationRepositoryS3BucketOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryS3BucketOutput {
	return o
}

func (o RepositoryAssociationRepositoryS3BucketOutput) ToRepositoryAssociationRepositoryS3BucketPtrOutput() RepositoryAssociationRepositoryS3BucketPtrOutput {
	return o.ToRepositoryAssociationRepositoryS3BucketPtrOutputWithContext(context.Background())
}

func (o RepositoryAssociationRepositoryS3BucketOutput) ToRepositoryAssociationRepositoryS3BucketPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryS3BucketPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryAssociationRepositoryS3Bucket) *RepositoryAssociationRepositoryS3Bucket {
		return &v
	}).(RepositoryAssociationRepositoryS3BucketPtrOutput)
}

func (o RepositoryAssociationRepositoryS3BucketOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryS3Bucket] {
	return pulumix.Output[RepositoryAssociationRepositoryS3Bucket]{
		OutputState: o.OutputState,
	}
}

// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
func (o RepositoryAssociationRepositoryS3BucketOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryAssociationRepositoryS3Bucket) string { return v.BucketName }).(pulumi.StringOutput)
}

// The name of the third party source repository.
func (o RepositoryAssociationRepositoryS3BucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryAssociationRepositoryS3Bucket) string { return v.Name }).(pulumi.StringOutput)
}

type RepositoryAssociationRepositoryS3BucketPtrOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryS3BucketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociationRepositoryS3Bucket)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryS3BucketPtrOutput) ToRepositoryAssociationRepositoryS3BucketPtrOutput() RepositoryAssociationRepositoryS3BucketPtrOutput {
	return o
}

func (o RepositoryAssociationRepositoryS3BucketPtrOutput) ToRepositoryAssociationRepositoryS3BucketPtrOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryS3BucketPtrOutput {
	return o
}

func (o RepositoryAssociationRepositoryS3BucketPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryS3Bucket] {
	return pulumix.Output[*RepositoryAssociationRepositoryS3Bucket]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationRepositoryS3BucketPtrOutput) Elem() RepositoryAssociationRepositoryS3BucketOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryS3Bucket) RepositoryAssociationRepositoryS3Bucket {
		if v != nil {
			return *v
		}
		var ret RepositoryAssociationRepositoryS3Bucket
		return ret
	}).(RepositoryAssociationRepositoryS3BucketOutput)
}

// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
func (o RepositoryAssociationRepositoryS3BucketPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryS3Bucket) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

// The name of the third party source repository.
func (o RepositoryAssociationRepositoryS3BucketPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociationRepositoryS3Bucket) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type RepositoryAssociationS3RepositoryDetail struct {
	// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
	BucketName    *string                                               `pulumi:"bucketName"`
	CodeArtifacts []RepositoryAssociationS3RepositoryDetailCodeArtifact `pulumi:"codeArtifacts"`
}

// RepositoryAssociationS3RepositoryDetailInput is an input type that accepts RepositoryAssociationS3RepositoryDetailArgs and RepositoryAssociationS3RepositoryDetailOutput values.
// You can construct a concrete instance of `RepositoryAssociationS3RepositoryDetailInput` via:
//
//	RepositoryAssociationS3RepositoryDetailArgs{...}
type RepositoryAssociationS3RepositoryDetailInput interface {
	pulumi.Input

	ToRepositoryAssociationS3RepositoryDetailOutput() RepositoryAssociationS3RepositoryDetailOutput
	ToRepositoryAssociationS3RepositoryDetailOutputWithContext(context.Context) RepositoryAssociationS3RepositoryDetailOutput
}

type RepositoryAssociationS3RepositoryDetailArgs struct {
	// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
	BucketName    pulumi.StringPtrInput                                         `pulumi:"bucketName"`
	CodeArtifacts RepositoryAssociationS3RepositoryDetailCodeArtifactArrayInput `pulumi:"codeArtifacts"`
}

func (RepositoryAssociationS3RepositoryDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationS3RepositoryDetail)(nil)).Elem()
}

func (i RepositoryAssociationS3RepositoryDetailArgs) ToRepositoryAssociationS3RepositoryDetailOutput() RepositoryAssociationS3RepositoryDetailOutput {
	return i.ToRepositoryAssociationS3RepositoryDetailOutputWithContext(context.Background())
}

func (i RepositoryAssociationS3RepositoryDetailArgs) ToRepositoryAssociationS3RepositoryDetailOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationS3RepositoryDetailOutput)
}

func (i RepositoryAssociationS3RepositoryDetailArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationS3RepositoryDetail] {
	return pulumix.Output[RepositoryAssociationS3RepositoryDetail]{
		OutputState: i.ToRepositoryAssociationS3RepositoryDetailOutputWithContext(ctx).OutputState,
	}
}

// RepositoryAssociationS3RepositoryDetailArrayInput is an input type that accepts RepositoryAssociationS3RepositoryDetailArray and RepositoryAssociationS3RepositoryDetailArrayOutput values.
// You can construct a concrete instance of `RepositoryAssociationS3RepositoryDetailArrayInput` via:
//
//	RepositoryAssociationS3RepositoryDetailArray{ RepositoryAssociationS3RepositoryDetailArgs{...} }
type RepositoryAssociationS3RepositoryDetailArrayInput interface {
	pulumi.Input

	ToRepositoryAssociationS3RepositoryDetailArrayOutput() RepositoryAssociationS3RepositoryDetailArrayOutput
	ToRepositoryAssociationS3RepositoryDetailArrayOutputWithContext(context.Context) RepositoryAssociationS3RepositoryDetailArrayOutput
}

type RepositoryAssociationS3RepositoryDetailArray []RepositoryAssociationS3RepositoryDetailInput

func (RepositoryAssociationS3RepositoryDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryAssociationS3RepositoryDetail)(nil)).Elem()
}

func (i RepositoryAssociationS3RepositoryDetailArray) ToRepositoryAssociationS3RepositoryDetailArrayOutput() RepositoryAssociationS3RepositoryDetailArrayOutput {
	return i.ToRepositoryAssociationS3RepositoryDetailArrayOutputWithContext(context.Background())
}

func (i RepositoryAssociationS3RepositoryDetailArray) ToRepositoryAssociationS3RepositoryDetailArrayOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationS3RepositoryDetailArrayOutput)
}

func (i RepositoryAssociationS3RepositoryDetailArray) ToOutput(ctx context.Context) pulumix.Output[[]RepositoryAssociationS3RepositoryDetail] {
	return pulumix.Output[[]RepositoryAssociationS3RepositoryDetail]{
		OutputState: i.ToRepositoryAssociationS3RepositoryDetailArrayOutputWithContext(ctx).OutputState,
	}
}

type RepositoryAssociationS3RepositoryDetailOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationS3RepositoryDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationS3RepositoryDetail)(nil)).Elem()
}

func (o RepositoryAssociationS3RepositoryDetailOutput) ToRepositoryAssociationS3RepositoryDetailOutput() RepositoryAssociationS3RepositoryDetailOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailOutput) ToRepositoryAssociationS3RepositoryDetailOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationS3RepositoryDetail] {
	return pulumix.Output[RepositoryAssociationS3RepositoryDetail]{
		OutputState: o.OutputState,
	}
}

// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
func (o RepositoryAssociationS3RepositoryDetailOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryAssociationS3RepositoryDetail) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o RepositoryAssociationS3RepositoryDetailOutput) CodeArtifacts() RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput {
	return o.ApplyT(func(v RepositoryAssociationS3RepositoryDetail) []RepositoryAssociationS3RepositoryDetailCodeArtifact {
		return v.CodeArtifacts
	}).(RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput)
}

type RepositoryAssociationS3RepositoryDetailArrayOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationS3RepositoryDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryAssociationS3RepositoryDetail)(nil)).Elem()
}

func (o RepositoryAssociationS3RepositoryDetailArrayOutput) ToRepositoryAssociationS3RepositoryDetailArrayOutput() RepositoryAssociationS3RepositoryDetailArrayOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailArrayOutput) ToRepositoryAssociationS3RepositoryDetailArrayOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailArrayOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RepositoryAssociationS3RepositoryDetail] {
	return pulumix.Output[[]RepositoryAssociationS3RepositoryDetail]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationS3RepositoryDetailArrayOutput) Index(i pulumi.IntInput) RepositoryAssociationS3RepositoryDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryAssociationS3RepositoryDetail {
		return vs[0].([]RepositoryAssociationS3RepositoryDetail)[vs[1].(int)]
	}).(RepositoryAssociationS3RepositoryDetailOutput)
}

type RepositoryAssociationS3RepositoryDetailCodeArtifact struct {
	BuildArtifactsObjectKey      *string `pulumi:"buildArtifactsObjectKey"`
	SourceCodeArtifactsObjectKey *string `pulumi:"sourceCodeArtifactsObjectKey"`
}

// RepositoryAssociationS3RepositoryDetailCodeArtifactInput is an input type that accepts RepositoryAssociationS3RepositoryDetailCodeArtifactArgs and RepositoryAssociationS3RepositoryDetailCodeArtifactOutput values.
// You can construct a concrete instance of `RepositoryAssociationS3RepositoryDetailCodeArtifactInput` via:
//
//	RepositoryAssociationS3RepositoryDetailCodeArtifactArgs{...}
type RepositoryAssociationS3RepositoryDetailCodeArtifactInput interface {
	pulumi.Input

	ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutput() RepositoryAssociationS3RepositoryDetailCodeArtifactOutput
	ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutputWithContext(context.Context) RepositoryAssociationS3RepositoryDetailCodeArtifactOutput
}

type RepositoryAssociationS3RepositoryDetailCodeArtifactArgs struct {
	BuildArtifactsObjectKey      pulumi.StringPtrInput `pulumi:"buildArtifactsObjectKey"`
	SourceCodeArtifactsObjectKey pulumi.StringPtrInput `pulumi:"sourceCodeArtifactsObjectKey"`
}

func (RepositoryAssociationS3RepositoryDetailCodeArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationS3RepositoryDetailCodeArtifact)(nil)).Elem()
}

func (i RepositoryAssociationS3RepositoryDetailCodeArtifactArgs) ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutput() RepositoryAssociationS3RepositoryDetailCodeArtifactOutput {
	return i.ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutputWithContext(context.Background())
}

func (i RepositoryAssociationS3RepositoryDetailCodeArtifactArgs) ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailCodeArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationS3RepositoryDetailCodeArtifactOutput)
}

func (i RepositoryAssociationS3RepositoryDetailCodeArtifactArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationS3RepositoryDetailCodeArtifact] {
	return pulumix.Output[RepositoryAssociationS3RepositoryDetailCodeArtifact]{
		OutputState: i.ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutputWithContext(ctx).OutputState,
	}
}

// RepositoryAssociationS3RepositoryDetailCodeArtifactArrayInput is an input type that accepts RepositoryAssociationS3RepositoryDetailCodeArtifactArray and RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput values.
// You can construct a concrete instance of `RepositoryAssociationS3RepositoryDetailCodeArtifactArrayInput` via:
//
//	RepositoryAssociationS3RepositoryDetailCodeArtifactArray{ RepositoryAssociationS3RepositoryDetailCodeArtifactArgs{...} }
type RepositoryAssociationS3RepositoryDetailCodeArtifactArrayInput interface {
	pulumi.Input

	ToRepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput() RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput
	ToRepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutputWithContext(context.Context) RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput
}

type RepositoryAssociationS3RepositoryDetailCodeArtifactArray []RepositoryAssociationS3RepositoryDetailCodeArtifactInput

func (RepositoryAssociationS3RepositoryDetailCodeArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryAssociationS3RepositoryDetailCodeArtifact)(nil)).Elem()
}

func (i RepositoryAssociationS3RepositoryDetailCodeArtifactArray) ToRepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput() RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput {
	return i.ToRepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutputWithContext(context.Background())
}

func (i RepositoryAssociationS3RepositoryDetailCodeArtifactArray) ToRepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput)
}

func (i RepositoryAssociationS3RepositoryDetailCodeArtifactArray) ToOutput(ctx context.Context) pulumix.Output[[]RepositoryAssociationS3RepositoryDetailCodeArtifact] {
	return pulumix.Output[[]RepositoryAssociationS3RepositoryDetailCodeArtifact]{
		OutputState: i.ToRepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutputWithContext(ctx).OutputState,
	}
}

type RepositoryAssociationS3RepositoryDetailCodeArtifactOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationS3RepositoryDetailCodeArtifact)(nil)).Elem()
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutput() RepositoryAssociationS3RepositoryDetailCodeArtifactOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailCodeArtifactOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationS3RepositoryDetailCodeArtifact] {
	return pulumix.Output[RepositoryAssociationS3RepositoryDetailCodeArtifact]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) BuildArtifactsObjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryAssociationS3RepositoryDetailCodeArtifact) *string { return v.BuildArtifactsObjectKey }).(pulumi.StringPtrOutput)
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) SourceCodeArtifactsObjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryAssociationS3RepositoryDetailCodeArtifact) *string {
		return v.SourceCodeArtifactsObjectKey
	}).(pulumi.StringPtrOutput)
}

type RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryAssociationS3RepositoryDetailCodeArtifact)(nil)).Elem()
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput) ToRepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput() RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput) ToRepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RepositoryAssociationS3RepositoryDetailCodeArtifact] {
	return pulumix.Output[[]RepositoryAssociationS3RepositoryDetailCodeArtifact]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput) Index(i pulumi.IntInput) RepositoryAssociationS3RepositoryDetailCodeArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryAssociationS3RepositoryDetailCodeArtifact {
		return vs[0].([]RepositoryAssociationS3RepositoryDetailCodeArtifact)[vs[1].(int)]
	}).(RepositoryAssociationS3RepositoryDetailCodeArtifactOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationKmsKeyDetailsInput)(nil)).Elem(), RepositoryAssociationKmsKeyDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationKmsKeyDetailsPtrInput)(nil)).Elem(), RepositoryAssociationKmsKeyDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationRepositoryInput)(nil)).Elem(), RepositoryAssociationRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationRepositoryPtrInput)(nil)).Elem(), RepositoryAssociationRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationRepositoryBitbucketInput)(nil)).Elem(), RepositoryAssociationRepositoryBitbucketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationRepositoryBitbucketPtrInput)(nil)).Elem(), RepositoryAssociationRepositoryBitbucketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationRepositoryCodecommitInput)(nil)).Elem(), RepositoryAssociationRepositoryCodecommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationRepositoryCodecommitPtrInput)(nil)).Elem(), RepositoryAssociationRepositoryCodecommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationRepositoryGithubEnterpriseServerInput)(nil)).Elem(), RepositoryAssociationRepositoryGithubEnterpriseServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationRepositoryGithubEnterpriseServerPtrInput)(nil)).Elem(), RepositoryAssociationRepositoryGithubEnterpriseServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationRepositoryS3BucketInput)(nil)).Elem(), RepositoryAssociationRepositoryS3BucketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationRepositoryS3BucketPtrInput)(nil)).Elem(), RepositoryAssociationRepositoryS3BucketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationS3RepositoryDetailInput)(nil)).Elem(), RepositoryAssociationS3RepositoryDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationS3RepositoryDetailArrayInput)(nil)).Elem(), RepositoryAssociationS3RepositoryDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationS3RepositoryDetailCodeArtifactInput)(nil)).Elem(), RepositoryAssociationS3RepositoryDetailCodeArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationS3RepositoryDetailCodeArtifactArrayInput)(nil)).Elem(), RepositoryAssociationS3RepositoryDetailCodeArtifactArray{})
	pulumi.RegisterOutputType(RepositoryAssociationKmsKeyDetailsOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationKmsKeyDetailsPtrOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryBitbucketOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryBitbucketPtrOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryCodecommitOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryCodecommitPtrOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryGithubEnterpriseServerOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryGithubEnterpriseServerPtrOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryS3BucketOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryS3BucketPtrOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationS3RepositoryDetailOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationS3RepositoryDetailArrayOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationS3RepositoryDetailCodeArtifactOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationS3RepositoryDetailCodeArtifactArrayOutput{})
}
