// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codegurureviewer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS CodeGuru Reviewer Repository Association.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/codecommit"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/codegurureviewer"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleKey, err := kms.NewKey(ctx, "exampleKey", nil)
//			if err != nil {
//				return err
//			}
//			exampleRepository, err := codecommit.NewRepository(ctx, "exampleRepository", &codecommit.RepositoryArgs{
//				RepositoryName: pulumi.String("example-repo"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = codegurureviewer.NewRepositoryAssociation(ctx, "exampleRepositoryAssociation", &codegurureviewer.RepositoryAssociationArgs{
//				Repository: &codegurureviewer.RepositoryAssociationRepositoryArgs{
//					Codecommit: &codegurureviewer.RepositoryAssociationRepositoryCodecommitArgs{
//						Name: exampleRepository.RepositoryName,
//					},
//				},
//				KmsKeyDetails: &codegurureviewer.RepositoryAssociationKmsKeyDetailsArgs{
//					EncryptionOption: pulumi.String("CUSTOMER_MANAGED_CMK"),
//					KmsKeyId:         exampleKey.KeyId,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RepositoryAssociation struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) identifying the repository association.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ID of the repository association.
	AssociationId pulumi.StringOutput `pulumi:"associationId"`
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn pulumi.StringOutput `pulumi:"connectionArn"`
	// An object describing the KMS key to asssociate. Block is documented below.
	KmsKeyDetails RepositoryAssociationKmsKeyDetailsPtrOutput `pulumi:"kmsKeyDetails"`
	// The name of the third party source repository.
	Name pulumi.StringOutput `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The provider type of the repository association.
	ProviderType pulumi.StringOutput `pulumi:"providerType"`
	// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
	//
	// The following arguments are optional:
	Repository          RepositoryAssociationRepositoryOutput              `pulumi:"repository"`
	S3RepositoryDetails RepositoryAssociationS3RepositoryDetailArrayOutput `pulumi:"s3RepositoryDetails"`
	// The state of the repository association.
	State pulumi.StringOutput `pulumi:"state"`
	// A description of why the repository association is in the current state.
	StateReason pulumi.StringOutput    `pulumi:"stateReason"`
	Tags        pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll     pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewRepositoryAssociation registers a new resource with the given unique name, arguments, and options.
func NewRepositoryAssociation(ctx *pulumi.Context,
	name string, args *RepositoryAssociationArgs, opts ...pulumi.ResourceOption) (*RepositoryAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	var resource RepositoryAssociation
	err := ctx.RegisterResource("aws:codegurureviewer/repositoryAssociation:RepositoryAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryAssociation gets an existing RepositoryAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryAssociationState, opts ...pulumi.ResourceOption) (*RepositoryAssociation, error) {
	var resource RepositoryAssociation
	err := ctx.ReadResource("aws:codegurureviewer/repositoryAssociation:RepositoryAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryAssociation resources.
type repositoryAssociationState struct {
	// The Amazon Resource Name (ARN) identifying the repository association.
	Arn *string `pulumi:"arn"`
	// The ID of the repository association.
	AssociationId *string `pulumi:"associationId"`
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn *string `pulumi:"connectionArn"`
	// An object describing the KMS key to asssociate. Block is documented below.
	KmsKeyDetails *RepositoryAssociationKmsKeyDetails `pulumi:"kmsKeyDetails"`
	// The name of the third party source repository.
	Name *string `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner *string `pulumi:"owner"`
	// The provider type of the repository association.
	ProviderType *string `pulumi:"providerType"`
	// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
	//
	// The following arguments are optional:
	Repository          *RepositoryAssociationRepository          `pulumi:"repository"`
	S3RepositoryDetails []RepositoryAssociationS3RepositoryDetail `pulumi:"s3RepositoryDetails"`
	// The state of the repository association.
	State *string `pulumi:"state"`
	// A description of why the repository association is in the current state.
	StateReason *string           `pulumi:"stateReason"`
	Tags        map[string]string `pulumi:"tags"`
	TagsAll     map[string]string `pulumi:"tagsAll"`
}

type RepositoryAssociationState struct {
	// The Amazon Resource Name (ARN) identifying the repository association.
	Arn pulumi.StringPtrInput
	// The ID of the repository association.
	AssociationId pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn pulumi.StringPtrInput
	// An object describing the KMS key to asssociate. Block is documented below.
	KmsKeyDetails RepositoryAssociationKmsKeyDetailsPtrInput
	// The name of the third party source repository.
	Name pulumi.StringPtrInput
	// The username for the account that owns the repository.
	Owner pulumi.StringPtrInput
	// The provider type of the repository association.
	ProviderType pulumi.StringPtrInput
	// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
	//
	// The following arguments are optional:
	Repository          RepositoryAssociationRepositoryPtrInput
	S3RepositoryDetails RepositoryAssociationS3RepositoryDetailArrayInput
	// The state of the repository association.
	State pulumi.StringPtrInput
	// A description of why the repository association is in the current state.
	StateReason pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
	TagsAll     pulumi.StringMapInput
}

func (RepositoryAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryAssociationState)(nil)).Elem()
}

type repositoryAssociationArgs struct {
	// An object describing the KMS key to asssociate. Block is documented below.
	KmsKeyDetails *RepositoryAssociationKmsKeyDetails `pulumi:"kmsKeyDetails"`
	// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
	//
	// The following arguments are optional:
	Repository RepositoryAssociationRepository `pulumi:"repository"`
	Tags       map[string]string               `pulumi:"tags"`
}

// The set of arguments for constructing a RepositoryAssociation resource.
type RepositoryAssociationArgs struct {
	// An object describing the KMS key to asssociate. Block is documented below.
	KmsKeyDetails RepositoryAssociationKmsKeyDetailsPtrInput
	// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
	//
	// The following arguments are optional:
	Repository RepositoryAssociationRepositoryInput
	Tags       pulumi.StringMapInput
}

func (RepositoryAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryAssociationArgs)(nil)).Elem()
}

type RepositoryAssociationInput interface {
	pulumi.Input

	ToRepositoryAssociationOutput() RepositoryAssociationOutput
	ToRepositoryAssociationOutputWithContext(ctx context.Context) RepositoryAssociationOutput
}

func (*RepositoryAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociation)(nil)).Elem()
}

func (i *RepositoryAssociation) ToRepositoryAssociationOutput() RepositoryAssociationOutput {
	return i.ToRepositoryAssociationOutputWithContext(context.Background())
}

func (i *RepositoryAssociation) ToRepositoryAssociationOutputWithContext(ctx context.Context) RepositoryAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationOutput)
}

// RepositoryAssociationArrayInput is an input type that accepts RepositoryAssociationArray and RepositoryAssociationArrayOutput values.
// You can construct a concrete instance of `RepositoryAssociationArrayInput` via:
//
//	RepositoryAssociationArray{ RepositoryAssociationArgs{...} }
type RepositoryAssociationArrayInput interface {
	pulumi.Input

	ToRepositoryAssociationArrayOutput() RepositoryAssociationArrayOutput
	ToRepositoryAssociationArrayOutputWithContext(context.Context) RepositoryAssociationArrayOutput
}

type RepositoryAssociationArray []RepositoryAssociationInput

func (RepositoryAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryAssociation)(nil)).Elem()
}

func (i RepositoryAssociationArray) ToRepositoryAssociationArrayOutput() RepositoryAssociationArrayOutput {
	return i.ToRepositoryAssociationArrayOutputWithContext(context.Background())
}

func (i RepositoryAssociationArray) ToRepositoryAssociationArrayOutputWithContext(ctx context.Context) RepositoryAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationArrayOutput)
}

// RepositoryAssociationMapInput is an input type that accepts RepositoryAssociationMap and RepositoryAssociationMapOutput values.
// You can construct a concrete instance of `RepositoryAssociationMapInput` via:
//
//	RepositoryAssociationMap{ "key": RepositoryAssociationArgs{...} }
type RepositoryAssociationMapInput interface {
	pulumi.Input

	ToRepositoryAssociationMapOutput() RepositoryAssociationMapOutput
	ToRepositoryAssociationMapOutputWithContext(context.Context) RepositoryAssociationMapOutput
}

type RepositoryAssociationMap map[string]RepositoryAssociationInput

func (RepositoryAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryAssociation)(nil)).Elem()
}

func (i RepositoryAssociationMap) ToRepositoryAssociationMapOutput() RepositoryAssociationMapOutput {
	return i.ToRepositoryAssociationMapOutputWithContext(context.Background())
}

func (i RepositoryAssociationMap) ToRepositoryAssociationMapOutputWithContext(ctx context.Context) RepositoryAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationMapOutput)
}

type RepositoryAssociationOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryAssociation)(nil)).Elem()
}

func (o RepositoryAssociationOutput) ToRepositoryAssociationOutput() RepositoryAssociationOutput {
	return o
}

func (o RepositoryAssociationOutput) ToRepositoryAssociationOutputWithContext(ctx context.Context) RepositoryAssociationOutput {
	return o
}

// The Amazon Resource Name (ARN) identifying the repository association.
func (o RepositoryAssociationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryAssociation) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ID of the repository association.
func (o RepositoryAssociationOutput) AssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryAssociation) pulumi.StringOutput { return v.AssociationId }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
func (o RepositoryAssociationOutput) ConnectionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryAssociation) pulumi.StringOutput { return v.ConnectionArn }).(pulumi.StringOutput)
}

// An object describing the KMS key to asssociate. Block is documented below.
func (o RepositoryAssociationOutput) KmsKeyDetails() RepositoryAssociationKmsKeyDetailsPtrOutput {
	return o.ApplyT(func(v *RepositoryAssociation) RepositoryAssociationKmsKeyDetailsPtrOutput { return v.KmsKeyDetails }).(RepositoryAssociationKmsKeyDetailsPtrOutput)
}

// The name of the third party source repository.
func (o RepositoryAssociationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryAssociation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The username for the account that owns the repository.
func (o RepositoryAssociationOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryAssociation) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The provider type of the repository association.
func (o RepositoryAssociationOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryAssociation) pulumi.StringOutput { return v.ProviderType }).(pulumi.StringOutput)
}

// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
//
// The following arguments are optional:
func (o RepositoryAssociationOutput) Repository() RepositoryAssociationRepositoryOutput {
	return o.ApplyT(func(v *RepositoryAssociation) RepositoryAssociationRepositoryOutput { return v.Repository }).(RepositoryAssociationRepositoryOutput)
}

func (o RepositoryAssociationOutput) S3RepositoryDetails() RepositoryAssociationS3RepositoryDetailArrayOutput {
	return o.ApplyT(func(v *RepositoryAssociation) RepositoryAssociationS3RepositoryDetailArrayOutput {
		return v.S3RepositoryDetails
	}).(RepositoryAssociationS3RepositoryDetailArrayOutput)
}

// The state of the repository association.
func (o RepositoryAssociationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryAssociation) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A description of why the repository association is in the current state.
func (o RepositoryAssociationOutput) StateReason() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryAssociation) pulumi.StringOutput { return v.StateReason }).(pulumi.StringOutput)
}

func (o RepositoryAssociationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RepositoryAssociation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o RepositoryAssociationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RepositoryAssociation) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type RepositoryAssociationArrayOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryAssociation)(nil)).Elem()
}

func (o RepositoryAssociationArrayOutput) ToRepositoryAssociationArrayOutput() RepositoryAssociationArrayOutput {
	return o
}

func (o RepositoryAssociationArrayOutput) ToRepositoryAssociationArrayOutputWithContext(ctx context.Context) RepositoryAssociationArrayOutput {
	return o
}

func (o RepositoryAssociationArrayOutput) Index(i pulumi.IntInput) RepositoryAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryAssociation {
		return vs[0].([]*RepositoryAssociation)[vs[1].(int)]
	}).(RepositoryAssociationOutput)
}

type RepositoryAssociationMapOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryAssociation)(nil)).Elem()
}

func (o RepositoryAssociationMapOutput) ToRepositoryAssociationMapOutput() RepositoryAssociationMapOutput {
	return o
}

func (o RepositoryAssociationMapOutput) ToRepositoryAssociationMapOutputWithContext(ctx context.Context) RepositoryAssociationMapOutput {
	return o
}

func (o RepositoryAssociationMapOutput) MapIndex(k pulumi.StringInput) RepositoryAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryAssociation {
		return vs[0].(map[string]*RepositoryAssociation)[vs[1].(string)]
	}).(RepositoryAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationInput)(nil)).Elem(), &RepositoryAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationArrayInput)(nil)).Elem(), RepositoryAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryAssociationMapInput)(nil)).Elem(), RepositoryAssociationMap{})
	pulumi.RegisterOutputType(RepositoryAssociationOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationArrayOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationMapOutput{})
}
