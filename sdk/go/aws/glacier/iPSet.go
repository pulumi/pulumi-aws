// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glacier

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage a GuardDuty IPSet.
// 
// ~> **Note:** Currently in GuardDuty, users from member accounts cannot upload and further manage IPSets. IPSets that are uploaded by the master account are imposed on GuardDuty functionality in its member accounts. See the [GuardDuty API Documentation](https://docs.aws.amazon.com/guardduty/latest/ug/create-ip-set.html)
type IPSet struct {
	s *pulumi.ResourceState
}

// NewIPSet registers a new resource with the given unique name, arguments, and options.
func NewIPSet(ctx *pulumi.Context,
	name string, args *IPSetArgs, opts ...pulumi.ResourceOpt) (*IPSet, error) {
	if args == nil || args.Activate == nil {
		return nil, errors.New("missing required argument 'Activate'")
	}
	if args == nil || args.DetectorId == nil {
		return nil, errors.New("missing required argument 'DetectorId'")
	}
	if args == nil || args.Format == nil {
		return nil, errors.New("missing required argument 'Format'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["activate"] = nil
		inputs["detectorId"] = nil
		inputs["format"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
	} else {
		inputs["activate"] = args.Activate
		inputs["detectorId"] = args.DetectorId
		inputs["format"] = args.Format
		inputs["location"] = args.Location
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("aws:glacier/iPSet:IPSet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IPSet{s: s}, nil
}

// GetIPSet gets an existing IPSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPSet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IPSetState, opts ...pulumi.ResourceOpt) (*IPSet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["activate"] = state.Activate
		inputs["detectorId"] = state.DetectorId
		inputs["format"] = state.Format
		inputs["location"] = state.Location
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("aws:glacier/iPSet:IPSet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IPSet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IPSet) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IPSet) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Specifies whether GuardDuty is to start using the uploaded IPSet.
func (r *IPSet) Activate() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["activate"])
}

// The detector ID of the GuardDuty.
func (r *IPSet) DetectorId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["detectorId"])
}

// The format of the file that contains the IPSet. Valid values: `TXT` | `STIX` | `OTX_CSV` | `ALIEN_VAULT` | `PROOF_POINT` | `FIRE_EYE`
func (r *IPSet) Format() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["format"])
}

// The URI of the file that contains the IPSet.
func (r *IPSet) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// The friendly name to identify the IPSet.
func (r *IPSet) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering IPSet resources.
type IPSetState struct {
	// Specifies whether GuardDuty is to start using the uploaded IPSet.
	Activate interface{}
	// The detector ID of the GuardDuty.
	DetectorId interface{}
	// The format of the file that contains the IPSet. Valid values: `TXT` | `STIX` | `OTX_CSV` | `ALIEN_VAULT` | `PROOF_POINT` | `FIRE_EYE`
	Format interface{}
	// The URI of the file that contains the IPSet.
	Location interface{}
	// The friendly name to identify the IPSet.
	Name interface{}
}

// The set of arguments for constructing a IPSet resource.
type IPSetArgs struct {
	// Specifies whether GuardDuty is to start using the uploaded IPSet.
	Activate interface{}
	// The detector ID of the GuardDuty.
	DetectorId interface{}
	// The format of the file that contains the IPSet. Valid values: `TXT` | `STIX` | `OTX_CSV` | `ALIEN_VAULT` | `PROOF_POINT` | `FIRE_EYE`
	Format interface{}
	// The URI of the file that contains the IPSet.
	Location interface{}
	// The friendly name to identify the IPSet.
	Name interface{}
}
