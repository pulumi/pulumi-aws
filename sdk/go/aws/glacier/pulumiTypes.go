// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glacier

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VaultNotification struct {
	// You can configure a vault to publish a notification for `ArchiveRetrievalCompleted` and `InventoryRetrievalCompleted` events.
	Events []string `pulumi:"events"`
	// The SNS Topic ARN.
	SnsTopic string `pulumi:"snsTopic"`
}

// VaultNotificationInput is an input type that accepts VaultNotificationArgs and VaultNotificationOutput values.
// You can construct a concrete instance of `VaultNotificationInput` via:
//
//          VaultNotificationArgs{...}
type VaultNotificationInput interface {
	pulumi.Input

	ToVaultNotificationOutput() VaultNotificationOutput
	ToVaultNotificationOutputWithContext(context.Context) VaultNotificationOutput
}

type VaultNotificationArgs struct {
	// You can configure a vault to publish a notification for `ArchiveRetrievalCompleted` and `InventoryRetrievalCompleted` events.
	Events pulumi.StringArrayInput `pulumi:"events"`
	// The SNS Topic ARN.
	SnsTopic pulumi.StringInput `pulumi:"snsTopic"`
}

func (VaultNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultNotification)(nil)).Elem()
}

func (i VaultNotificationArgs) ToVaultNotificationOutput() VaultNotificationOutput {
	return i.ToVaultNotificationOutputWithContext(context.Background())
}

func (i VaultNotificationArgs) ToVaultNotificationOutputWithContext(ctx context.Context) VaultNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultNotificationOutput)
}

func (i VaultNotificationArgs) ToVaultNotificationPtrOutput() VaultNotificationPtrOutput {
	return i.ToVaultNotificationPtrOutputWithContext(context.Background())
}

func (i VaultNotificationArgs) ToVaultNotificationPtrOutputWithContext(ctx context.Context) VaultNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultNotificationOutput).ToVaultNotificationPtrOutputWithContext(ctx)
}

// VaultNotificationPtrInput is an input type that accepts VaultNotificationArgs, VaultNotificationPtr and VaultNotificationPtrOutput values.
// You can construct a concrete instance of `VaultNotificationPtrInput` via:
//
//          VaultNotificationArgs{...}
//
//  or:
//
//          nil
type VaultNotificationPtrInput interface {
	pulumi.Input

	ToVaultNotificationPtrOutput() VaultNotificationPtrOutput
	ToVaultNotificationPtrOutputWithContext(context.Context) VaultNotificationPtrOutput
}

type vaultNotificationPtrType VaultNotificationArgs

func VaultNotificationPtr(v *VaultNotificationArgs) VaultNotificationPtrInput {
	return (*vaultNotificationPtrType)(v)
}

func (*vaultNotificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultNotification)(nil)).Elem()
}

func (i *vaultNotificationPtrType) ToVaultNotificationPtrOutput() VaultNotificationPtrOutput {
	return i.ToVaultNotificationPtrOutputWithContext(context.Background())
}

func (i *vaultNotificationPtrType) ToVaultNotificationPtrOutputWithContext(ctx context.Context) VaultNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultNotificationPtrOutput)
}

type VaultNotificationOutput struct{ *pulumi.OutputState }

func (VaultNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultNotification)(nil)).Elem()
}

func (o VaultNotificationOutput) ToVaultNotificationOutput() VaultNotificationOutput {
	return o
}

func (o VaultNotificationOutput) ToVaultNotificationOutputWithContext(ctx context.Context) VaultNotificationOutput {
	return o
}

func (o VaultNotificationOutput) ToVaultNotificationPtrOutput() VaultNotificationPtrOutput {
	return o.ToVaultNotificationPtrOutputWithContext(context.Background())
}

func (o VaultNotificationOutput) ToVaultNotificationPtrOutputWithContext(ctx context.Context) VaultNotificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultNotification) *VaultNotification {
		return &v
	}).(VaultNotificationPtrOutput)
}

// You can configure a vault to publish a notification for `ArchiveRetrievalCompleted` and `InventoryRetrievalCompleted` events.
func (o VaultNotificationOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultNotification) []string { return v.Events }).(pulumi.StringArrayOutput)
}

// The SNS Topic ARN.
func (o VaultNotificationOutput) SnsTopic() pulumi.StringOutput {
	return o.ApplyT(func(v VaultNotification) string { return v.SnsTopic }).(pulumi.StringOutput)
}

type VaultNotificationPtrOutput struct{ *pulumi.OutputState }

func (VaultNotificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultNotification)(nil)).Elem()
}

func (o VaultNotificationPtrOutput) ToVaultNotificationPtrOutput() VaultNotificationPtrOutput {
	return o
}

func (o VaultNotificationPtrOutput) ToVaultNotificationPtrOutputWithContext(ctx context.Context) VaultNotificationPtrOutput {
	return o
}

func (o VaultNotificationPtrOutput) Elem() VaultNotificationOutput {
	return o.ApplyT(func(v *VaultNotification) VaultNotification {
		if v != nil {
			return *v
		}
		var ret VaultNotification
		return ret
	}).(VaultNotificationOutput)
}

// You can configure a vault to publish a notification for `ArchiveRetrievalCompleted` and `InventoryRetrievalCompleted` events.
func (o VaultNotificationPtrOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultNotification) []string {
		if v == nil {
			return nil
		}
		return v.Events
	}).(pulumi.StringArrayOutput)
}

// The SNS Topic ARN.
func (o VaultNotificationPtrOutput) SnsTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultNotification) *string {
		if v == nil {
			return nil
		}
		return &v.SnsTopic
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VaultNotificationInput)(nil)).Elem(), VaultNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultNotificationPtrInput)(nil)).Elem(), VaultNotificationArgs{})
	pulumi.RegisterOutputType(VaultNotificationOutput{})
	pulumi.RegisterOutputType(VaultNotificationPtrOutput{})
}
