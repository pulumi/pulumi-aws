// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lakeformation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an LF-Tag with the specified name and values. Each key must have at least one value. The maximum number of values permitted is 15.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lakeformation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lakeformation.NewLfTag(ctx, "example", &lakeformation.LfTagArgs{
//				Key: pulumi.String("module"),
//				Values: pulumi.StringArray{
//					pulumi.String("Orders"),
//					pulumi.String("Sales"),
//					pulumi.String("Customers"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Lake Formation LF-Tags can be imported using the `catalog_id:key`. If you have not set a Catalog ID specify the AWS Account ID that the database is in, e.g.
//
// ```sh
//
//	$ pulumi import aws:lakeformation/lfTag:LfTag example 123456789012:some_key
//
// ```
type LfTag struct {
	pulumi.CustomResourceState

	// ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// Key-name for the tag.
	Key pulumi.StringOutput `pulumi:"key"`
	// List of possible values an attribute can take.
	Values pulumi.StringArrayOutput `pulumi:"values"`
}

// NewLfTag registers a new resource with the given unique name, arguments, and options.
func NewLfTag(ctx *pulumi.Context,
	name string, args *LfTagArgs, opts ...pulumi.ResourceOption) (*LfTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Values == nil {
		return nil, errors.New("invalid value for required argument 'Values'")
	}
	var resource LfTag
	err := ctx.RegisterResource("aws:lakeformation/lfTag:LfTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLfTag gets an existing LfTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLfTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LfTagState, opts ...pulumi.ResourceOption) (*LfTag, error) {
	var resource LfTag
	err := ctx.ReadResource("aws:lakeformation/lfTag:LfTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LfTag resources.
type lfTagState struct {
	// ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
	CatalogId *string `pulumi:"catalogId"`
	// Key-name for the tag.
	Key *string `pulumi:"key"`
	// List of possible values an attribute can take.
	Values []string `pulumi:"values"`
}

type LfTagState struct {
	// ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
	CatalogId pulumi.StringPtrInput
	// Key-name for the tag.
	Key pulumi.StringPtrInput
	// List of possible values an attribute can take.
	Values pulumi.StringArrayInput
}

func (LfTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*lfTagState)(nil)).Elem()
}

type lfTagArgs struct {
	// ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
	CatalogId *string `pulumi:"catalogId"`
	// Key-name for the tag.
	Key string `pulumi:"key"`
	// List of possible values an attribute can take.
	Values []string `pulumi:"values"`
}

// The set of arguments for constructing a LfTag resource.
type LfTagArgs struct {
	// ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
	CatalogId pulumi.StringPtrInput
	// Key-name for the tag.
	Key pulumi.StringInput
	// List of possible values an attribute can take.
	Values pulumi.StringArrayInput
}

func (LfTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lfTagArgs)(nil)).Elem()
}

type LfTagInput interface {
	pulumi.Input

	ToLfTagOutput() LfTagOutput
	ToLfTagOutputWithContext(ctx context.Context) LfTagOutput
}

func (*LfTag) ElementType() reflect.Type {
	return reflect.TypeOf((**LfTag)(nil)).Elem()
}

func (i *LfTag) ToLfTagOutput() LfTagOutput {
	return i.ToLfTagOutputWithContext(context.Background())
}

func (i *LfTag) ToLfTagOutputWithContext(ctx context.Context) LfTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LfTagOutput)
}

// LfTagArrayInput is an input type that accepts LfTagArray and LfTagArrayOutput values.
// You can construct a concrete instance of `LfTagArrayInput` via:
//
//	LfTagArray{ LfTagArgs{...} }
type LfTagArrayInput interface {
	pulumi.Input

	ToLfTagArrayOutput() LfTagArrayOutput
	ToLfTagArrayOutputWithContext(context.Context) LfTagArrayOutput
}

type LfTagArray []LfTagInput

func (LfTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LfTag)(nil)).Elem()
}

func (i LfTagArray) ToLfTagArrayOutput() LfTagArrayOutput {
	return i.ToLfTagArrayOutputWithContext(context.Background())
}

func (i LfTagArray) ToLfTagArrayOutputWithContext(ctx context.Context) LfTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LfTagArrayOutput)
}

// LfTagMapInput is an input type that accepts LfTagMap and LfTagMapOutput values.
// You can construct a concrete instance of `LfTagMapInput` via:
//
//	LfTagMap{ "key": LfTagArgs{...} }
type LfTagMapInput interface {
	pulumi.Input

	ToLfTagMapOutput() LfTagMapOutput
	ToLfTagMapOutputWithContext(context.Context) LfTagMapOutput
}

type LfTagMap map[string]LfTagInput

func (LfTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LfTag)(nil)).Elem()
}

func (i LfTagMap) ToLfTagMapOutput() LfTagMapOutput {
	return i.ToLfTagMapOutputWithContext(context.Background())
}

func (i LfTagMap) ToLfTagMapOutputWithContext(ctx context.Context) LfTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LfTagMapOutput)
}

type LfTagOutput struct{ *pulumi.OutputState }

func (LfTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LfTag)(nil)).Elem()
}

func (o LfTagOutput) ToLfTagOutput() LfTagOutput {
	return o
}

func (o LfTagOutput) ToLfTagOutputWithContext(ctx context.Context) LfTagOutput {
	return o
}

// ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
func (o LfTagOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *LfTag) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

// Key-name for the tag.
func (o LfTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *LfTag) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// List of possible values an attribute can take.
func (o LfTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LfTag) pulumi.StringArrayOutput { return v.Values }).(pulumi.StringArrayOutput)
}

type LfTagArrayOutput struct{ *pulumi.OutputState }

func (LfTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LfTag)(nil)).Elem()
}

func (o LfTagArrayOutput) ToLfTagArrayOutput() LfTagArrayOutput {
	return o
}

func (o LfTagArrayOutput) ToLfTagArrayOutputWithContext(ctx context.Context) LfTagArrayOutput {
	return o
}

func (o LfTagArrayOutput) Index(i pulumi.IntInput) LfTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LfTag {
		return vs[0].([]*LfTag)[vs[1].(int)]
	}).(LfTagOutput)
}

type LfTagMapOutput struct{ *pulumi.OutputState }

func (LfTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LfTag)(nil)).Elem()
}

func (o LfTagMapOutput) ToLfTagMapOutput() LfTagMapOutput {
	return o
}

func (o LfTagMapOutput) ToLfTagMapOutputWithContext(ctx context.Context) LfTagMapOutput {
	return o
}

func (o LfTagMapOutput) MapIndex(k pulumi.StringInput) LfTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LfTag {
		return vs[0].(map[string]*LfTag)[vs[1].(string)]
	}).(LfTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LfTagInput)(nil)).Elem(), &LfTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*LfTagArrayInput)(nil)).Elem(), LfTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LfTagMapInput)(nil)).Elem(), LfTagMap{})
	pulumi.RegisterOutputType(LfTagOutput{})
	pulumi.RegisterOutputType(LfTagArrayOutput{})
	pulumi.RegisterOutputType(LfTagMapOutput{})
}
