// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lakeformation

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Permissions are granted to a principal, in a Data Catalog, relative to a Lake Formation resource, which includes the Data Catalog, databases, and tables. For more information, see [Security and Access Control to Metadata and Data in Lake Formation](https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html).
//
// > **NOTE:** This resource deals with explicitly granted permissions. Lake Formation grants implicit permissions to data lake administrators, database creators, and table creators. For more information, see [Implicit Lake Formation Permissions](https://docs.aws.amazon.com/lake-formation/latest/dg/implicit-permissions.html).
//
// ## Example Usage
// ### Grant Permissions For A Lake Formation S3 Resource
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/lakeformation"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := lakeformation.NewPermissions(ctx, "test", &lakeformation.PermissionsArgs{
// 			Principal: pulumi.Any(aws_iam_role.Workflow_role.Arn),
// 			Permissions: pulumi.StringArray{
// 				pulumi.String("ALL"),
// 			},
// 			DataLocation: &lakeformation.PermissionsDataLocationArgs{
// 				Arn: pulumi.Any(aws_lakeformation_resource.Test.Arn),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Permissions struct {
	pulumi.CustomResourceState

	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumi.StringPtrOutput `pulumi:"catalogId"`
	// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
	CatalogResource pulumi.BoolPtrOutput `pulumi:"catalogResource"`
	// Configuration block for a data location resource. Detailed below.
	DataLocation PermissionsDataLocationOutput `pulumi:"dataLocation"`
	// Configuration block for a database resource. Detailed below.
	Database PermissionsDatabaseOutput `pulumi:"database"`
	// List of permissions granted to the principal. Valid values may include `ALL`, `ALTER`, `CREATE_DATABASE`, `CREATE_TABLE`, `DATA_LOCATION_ACCESS`, `DELETE`, `DESCRIBE`, `DROP`, `INSERT`, and `SELECT`. For details on each permission, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// Subset of `permissions` which the principal can pass.
	PermissionsWithGrantOptions pulumi.StringArrayOutput `pulumi:"permissionsWithGrantOptions"`
	// Principal to be granted the permissions on the resource. Supported principals include IAM users and IAM roles.
	Principal pulumi.StringOutput `pulumi:"principal"`
	// Configuration block for a table resource. Detailed below.
	Table PermissionsTableOutput `pulumi:"table"`
	// Configuration block for a table with columns resource. Detailed below.
	TableWithColumns PermissionsTableWithColumnsOutput `pulumi:"tableWithColumns"`
}

// NewPermissions registers a new resource with the given unique name, arguments, and options.
func NewPermissions(ctx *pulumi.Context,
	name string, args *PermissionsArgs, opts ...pulumi.ResourceOption) (*Permissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	var resource Permissions
	err := ctx.RegisterResource("aws:lakeformation/permissions:Permissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermissions gets an existing Permissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionsState, opts ...pulumi.ResourceOption) (*Permissions, error) {
	var resource Permissions
	err := ctx.ReadResource("aws:lakeformation/permissions:Permissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permissions resources.
type permissionsState struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
	// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
	CatalogResource *bool `pulumi:"catalogResource"`
	// Configuration block for a data location resource. Detailed below.
	DataLocation *PermissionsDataLocation `pulumi:"dataLocation"`
	// Configuration block for a database resource. Detailed below.
	Database *PermissionsDatabase `pulumi:"database"`
	// List of permissions granted to the principal. Valid values may include `ALL`, `ALTER`, `CREATE_DATABASE`, `CREATE_TABLE`, `DATA_LOCATION_ACCESS`, `DELETE`, `DESCRIBE`, `DROP`, `INSERT`, and `SELECT`. For details on each permission, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
	Permissions []string `pulumi:"permissions"`
	// Subset of `permissions` which the principal can pass.
	PermissionsWithGrantOptions []string `pulumi:"permissionsWithGrantOptions"`
	// Principal to be granted the permissions on the resource. Supported principals include IAM users and IAM roles.
	Principal *string `pulumi:"principal"`
	// Configuration block for a table resource. Detailed below.
	Table *PermissionsTable `pulumi:"table"`
	// Configuration block for a table with columns resource. Detailed below.
	TableWithColumns *PermissionsTableWithColumns `pulumi:"tableWithColumns"`
}

type PermissionsState struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumi.StringPtrInput
	// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
	CatalogResource pulumi.BoolPtrInput
	// Configuration block for a data location resource. Detailed below.
	DataLocation PermissionsDataLocationPtrInput
	// Configuration block for a database resource. Detailed below.
	Database PermissionsDatabasePtrInput
	// List of permissions granted to the principal. Valid values may include `ALL`, `ALTER`, `CREATE_DATABASE`, `CREATE_TABLE`, `DATA_LOCATION_ACCESS`, `DELETE`, `DESCRIBE`, `DROP`, `INSERT`, and `SELECT`. For details on each permission, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
	Permissions pulumi.StringArrayInput
	// Subset of `permissions` which the principal can pass.
	PermissionsWithGrantOptions pulumi.StringArrayInput
	// Principal to be granted the permissions on the resource. Supported principals include IAM users and IAM roles.
	Principal pulumi.StringPtrInput
	// Configuration block for a table resource. Detailed below.
	Table PermissionsTablePtrInput
	// Configuration block for a table with columns resource. Detailed below.
	TableWithColumns PermissionsTableWithColumnsPtrInput
}

func (PermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionsState)(nil)).Elem()
}

type permissionsArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId *string `pulumi:"catalogId"`
	// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
	CatalogResource *bool `pulumi:"catalogResource"`
	// Configuration block for a data location resource. Detailed below.
	DataLocation *PermissionsDataLocation `pulumi:"dataLocation"`
	// Configuration block for a database resource. Detailed below.
	Database *PermissionsDatabase `pulumi:"database"`
	// List of permissions granted to the principal. Valid values may include `ALL`, `ALTER`, `CREATE_DATABASE`, `CREATE_TABLE`, `DATA_LOCATION_ACCESS`, `DELETE`, `DESCRIBE`, `DROP`, `INSERT`, and `SELECT`. For details on each permission, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
	Permissions []string `pulumi:"permissions"`
	// Subset of `permissions` which the principal can pass.
	PermissionsWithGrantOptions []string `pulumi:"permissionsWithGrantOptions"`
	// Principal to be granted the permissions on the resource. Supported principals include IAM users and IAM roles.
	Principal string `pulumi:"principal"`
	// Configuration block for a table resource. Detailed below.
	Table *PermissionsTable `pulumi:"table"`
	// Configuration block for a table with columns resource. Detailed below.
	TableWithColumns *PermissionsTableWithColumns `pulumi:"tableWithColumns"`
}

// The set of arguments for constructing a Permissions resource.
type PermissionsArgs struct {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	CatalogId pulumi.StringPtrInput
	// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
	CatalogResource pulumi.BoolPtrInput
	// Configuration block for a data location resource. Detailed below.
	DataLocation PermissionsDataLocationPtrInput
	// Configuration block for a database resource. Detailed below.
	Database PermissionsDatabasePtrInput
	// List of permissions granted to the principal. Valid values may include `ALL`, `ALTER`, `CREATE_DATABASE`, `CREATE_TABLE`, `DATA_LOCATION_ACCESS`, `DELETE`, `DESCRIBE`, `DROP`, `INSERT`, and `SELECT`. For details on each permission, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
	Permissions pulumi.StringArrayInput
	// Subset of `permissions` which the principal can pass.
	PermissionsWithGrantOptions pulumi.StringArrayInput
	// Principal to be granted the permissions on the resource. Supported principals include IAM users and IAM roles.
	Principal pulumi.StringInput
	// Configuration block for a table resource. Detailed below.
	Table PermissionsTablePtrInput
	// Configuration block for a table with columns resource. Detailed below.
	TableWithColumns PermissionsTableWithColumnsPtrInput
}

func (PermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionsArgs)(nil)).Elem()
}

type PermissionsInput interface {
	pulumi.Input

	ToPermissionsOutput() PermissionsOutput
	ToPermissionsOutputWithContext(ctx context.Context) PermissionsOutput
}

func (*Permissions) ElementType() reflect.Type {
	return reflect.TypeOf((*Permissions)(nil))
}

func (i *Permissions) ToPermissionsOutput() PermissionsOutput {
	return i.ToPermissionsOutputWithContext(context.Background())
}

func (i *Permissions) ToPermissionsOutputWithContext(ctx context.Context) PermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsOutput)
}

type PermissionsOutput struct {
	*pulumi.OutputState
}

func (PermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Permissions)(nil))
}

func (o PermissionsOutput) ToPermissionsOutput() PermissionsOutput {
	return o
}

func (o PermissionsOutput) ToPermissionsOutputWithContext(ctx context.Context) PermissionsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PermissionsOutput{})
}
