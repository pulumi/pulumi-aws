// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lakeformation

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Permissions struct {
	pulumi.CustomResourceState

	CatalogId                   pulumi.StringPtrOutput            `pulumi:"catalogId"`
	CatalogResource             pulumi.BoolPtrOutput              `pulumi:"catalogResource"`
	DataLocation                PermissionsDataLocationOutput     `pulumi:"dataLocation"`
	Database                    PermissionsDatabaseOutput         `pulumi:"database"`
	LfTag                       PermissionsLfTagOutput            `pulumi:"lfTag"`
	LfTagPolicy                 PermissionsLfTagPolicyOutput      `pulumi:"lfTagPolicy"`
	Permissions                 pulumi.StringArrayOutput          `pulumi:"permissions"`
	PermissionsWithGrantOptions pulumi.StringArrayOutput          `pulumi:"permissionsWithGrantOptions"`
	Principal                   pulumi.StringOutput               `pulumi:"principal"`
	Table                       PermissionsTableOutput            `pulumi:"table"`
	TableWithColumns            PermissionsTableWithColumnsOutput `pulumi:"tableWithColumns"`
}

// NewPermissions registers a new resource with the given unique name, arguments, and options.
func NewPermissions(ctx *pulumi.Context,
	name string, args *PermissionsArgs, opts ...pulumi.ResourceOption) (*Permissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	var resource Permissions
	err := ctx.RegisterResource("aws:lakeformation/permissions:Permissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermissions gets an existing Permissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionsState, opts ...pulumi.ResourceOption) (*Permissions, error) {
	var resource Permissions
	err := ctx.ReadResource("aws:lakeformation/permissions:Permissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permissions resources.
type permissionsState struct {
	CatalogId                   *string                      `pulumi:"catalogId"`
	CatalogResource             *bool                        `pulumi:"catalogResource"`
	DataLocation                *PermissionsDataLocation     `pulumi:"dataLocation"`
	Database                    *PermissionsDatabase         `pulumi:"database"`
	LfTag                       *PermissionsLfTag            `pulumi:"lfTag"`
	LfTagPolicy                 *PermissionsLfTagPolicy      `pulumi:"lfTagPolicy"`
	Permissions                 []string                     `pulumi:"permissions"`
	PermissionsWithGrantOptions []string                     `pulumi:"permissionsWithGrantOptions"`
	Principal                   *string                      `pulumi:"principal"`
	Table                       *PermissionsTable            `pulumi:"table"`
	TableWithColumns            *PermissionsTableWithColumns `pulumi:"tableWithColumns"`
}

type PermissionsState struct {
	CatalogId                   pulumi.StringPtrInput
	CatalogResource             pulumi.BoolPtrInput
	DataLocation                PermissionsDataLocationPtrInput
	Database                    PermissionsDatabasePtrInput
	LfTag                       PermissionsLfTagPtrInput
	LfTagPolicy                 PermissionsLfTagPolicyPtrInput
	Permissions                 pulumi.StringArrayInput
	PermissionsWithGrantOptions pulumi.StringArrayInput
	Principal                   pulumi.StringPtrInput
	Table                       PermissionsTablePtrInput
	TableWithColumns            PermissionsTableWithColumnsPtrInput
}

func (PermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionsState)(nil)).Elem()
}

type permissionsArgs struct {
	CatalogId                   *string                      `pulumi:"catalogId"`
	CatalogResource             *bool                        `pulumi:"catalogResource"`
	DataLocation                *PermissionsDataLocation     `pulumi:"dataLocation"`
	Database                    *PermissionsDatabase         `pulumi:"database"`
	LfTag                       *PermissionsLfTag            `pulumi:"lfTag"`
	LfTagPolicy                 *PermissionsLfTagPolicy      `pulumi:"lfTagPolicy"`
	Permissions                 []string                     `pulumi:"permissions"`
	PermissionsWithGrantOptions []string                     `pulumi:"permissionsWithGrantOptions"`
	Principal                   string                       `pulumi:"principal"`
	Table                       *PermissionsTable            `pulumi:"table"`
	TableWithColumns            *PermissionsTableWithColumns `pulumi:"tableWithColumns"`
}

// The set of arguments for constructing a Permissions resource.
type PermissionsArgs struct {
	CatalogId                   pulumi.StringPtrInput
	CatalogResource             pulumi.BoolPtrInput
	DataLocation                PermissionsDataLocationPtrInput
	Database                    PermissionsDatabasePtrInput
	LfTag                       PermissionsLfTagPtrInput
	LfTagPolicy                 PermissionsLfTagPolicyPtrInput
	Permissions                 pulumi.StringArrayInput
	PermissionsWithGrantOptions pulumi.StringArrayInput
	Principal                   pulumi.StringInput
	Table                       PermissionsTablePtrInput
	TableWithColumns            PermissionsTableWithColumnsPtrInput
}

func (PermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionsArgs)(nil)).Elem()
}

type PermissionsInput interface {
	pulumi.Input

	ToPermissionsOutput() PermissionsOutput
	ToPermissionsOutputWithContext(ctx context.Context) PermissionsOutput
}

func (*Permissions) ElementType() reflect.Type {
	return reflect.TypeOf((**Permissions)(nil)).Elem()
}

func (i *Permissions) ToPermissionsOutput() PermissionsOutput {
	return i.ToPermissionsOutputWithContext(context.Background())
}

func (i *Permissions) ToPermissionsOutputWithContext(ctx context.Context) PermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsOutput)
}

// PermissionsArrayInput is an input type that accepts PermissionsArray and PermissionsArrayOutput values.
// You can construct a concrete instance of `PermissionsArrayInput` via:
//
//	PermissionsArray{ PermissionsArgs{...} }
type PermissionsArrayInput interface {
	pulumi.Input

	ToPermissionsArrayOutput() PermissionsArrayOutput
	ToPermissionsArrayOutputWithContext(context.Context) PermissionsArrayOutput
}

type PermissionsArray []PermissionsInput

func (PermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permissions)(nil)).Elem()
}

func (i PermissionsArray) ToPermissionsArrayOutput() PermissionsArrayOutput {
	return i.ToPermissionsArrayOutputWithContext(context.Background())
}

func (i PermissionsArray) ToPermissionsArrayOutputWithContext(ctx context.Context) PermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsArrayOutput)
}

// PermissionsMapInput is an input type that accepts PermissionsMap and PermissionsMapOutput values.
// You can construct a concrete instance of `PermissionsMapInput` via:
//
//	PermissionsMap{ "key": PermissionsArgs{...} }
type PermissionsMapInput interface {
	pulumi.Input

	ToPermissionsMapOutput() PermissionsMapOutput
	ToPermissionsMapOutputWithContext(context.Context) PermissionsMapOutput
}

type PermissionsMap map[string]PermissionsInput

func (PermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permissions)(nil)).Elem()
}

func (i PermissionsMap) ToPermissionsMapOutput() PermissionsMapOutput {
	return i.ToPermissionsMapOutputWithContext(context.Background())
}

func (i PermissionsMap) ToPermissionsMapOutputWithContext(ctx context.Context) PermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsMapOutput)
}

type PermissionsOutput struct{ *pulumi.OutputState }

func (PermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Permissions)(nil)).Elem()
}

func (o PermissionsOutput) ToPermissionsOutput() PermissionsOutput {
	return o
}

func (o PermissionsOutput) ToPermissionsOutputWithContext(ctx context.Context) PermissionsOutput {
	return o
}

func (o PermissionsOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Permissions) pulumi.StringPtrOutput { return v.CatalogId }).(pulumi.StringPtrOutput)
}

func (o PermissionsOutput) CatalogResource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Permissions) pulumi.BoolPtrOutput { return v.CatalogResource }).(pulumi.BoolPtrOutput)
}

func (o PermissionsOutput) DataLocation() PermissionsDataLocationOutput {
	return o.ApplyT(func(v *Permissions) PermissionsDataLocationOutput { return v.DataLocation }).(PermissionsDataLocationOutput)
}

func (o PermissionsOutput) Database() PermissionsDatabaseOutput {
	return o.ApplyT(func(v *Permissions) PermissionsDatabaseOutput { return v.Database }).(PermissionsDatabaseOutput)
}

func (o PermissionsOutput) LfTag() PermissionsLfTagOutput {
	return o.ApplyT(func(v *Permissions) PermissionsLfTagOutput { return v.LfTag }).(PermissionsLfTagOutput)
}

func (o PermissionsOutput) LfTagPolicy() PermissionsLfTagPolicyOutput {
	return o.ApplyT(func(v *Permissions) PermissionsLfTagPolicyOutput { return v.LfTagPolicy }).(PermissionsLfTagPolicyOutput)
}

func (o PermissionsOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Permissions) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

func (o PermissionsOutput) PermissionsWithGrantOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Permissions) pulumi.StringArrayOutput { return v.PermissionsWithGrantOptions }).(pulumi.StringArrayOutput)
}

func (o PermissionsOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *Permissions) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

func (o PermissionsOutput) Table() PermissionsTableOutput {
	return o.ApplyT(func(v *Permissions) PermissionsTableOutput { return v.Table }).(PermissionsTableOutput)
}

func (o PermissionsOutput) TableWithColumns() PermissionsTableWithColumnsOutput {
	return o.ApplyT(func(v *Permissions) PermissionsTableWithColumnsOutput { return v.TableWithColumns }).(PermissionsTableWithColumnsOutput)
}

type PermissionsArrayOutput struct{ *pulumi.OutputState }

func (PermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permissions)(nil)).Elem()
}

func (o PermissionsArrayOutput) ToPermissionsArrayOutput() PermissionsArrayOutput {
	return o
}

func (o PermissionsArrayOutput) ToPermissionsArrayOutputWithContext(ctx context.Context) PermissionsArrayOutput {
	return o
}

func (o PermissionsArrayOutput) Index(i pulumi.IntInput) PermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Permissions {
		return vs[0].([]*Permissions)[vs[1].(int)]
	}).(PermissionsOutput)
}

type PermissionsMapOutput struct{ *pulumi.OutputState }

func (PermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permissions)(nil)).Elem()
}

func (o PermissionsMapOutput) ToPermissionsMapOutput() PermissionsMapOutput {
	return o
}

func (o PermissionsMapOutput) ToPermissionsMapOutputWithContext(ctx context.Context) PermissionsMapOutput {
	return o
}

func (o PermissionsMapOutput) MapIndex(k pulumi.StringInput) PermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Permissions {
		return vs[0].(map[string]*Permissions)[vs[1].(string)]
	}).(PermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionsInput)(nil)).Elem(), &Permissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionsArrayInput)(nil)).Elem(), PermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionsMapInput)(nil)).Elem(), PermissionsMap{})
	pulumi.RegisterOutputType(PermissionsOutput{})
	pulumi.RegisterOutputType(PermissionsArrayOutput{})
	pulumi.RegisterOutputType(PermissionsMapOutput{})
}
