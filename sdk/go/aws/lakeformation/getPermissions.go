// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lakeformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get permissions for a principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Permissions are granted to a principal, in a Data Catalog, relative to a Lake Formation resource, which includes the Data Catalog, databases, tables, LF-tags, and LF-tag policies. For more information, see [Security and Access Control to Metadata and Data in Lake Formation](https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html).
//
// > **NOTE:** This data source deals with explicitly granted permissions. Lake Formation grants implicit permissions to data lake administrators, database creators, and table creators. For more information, see [Implicit Lake Formation Permissions](https://docs.aws.amazon.com/lake-formation/latest/dg/implicit-permissions.html).
//
// ## Example Usage
// ### Permissions For A Lake Formation S3 Resource
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lakeformation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lakeformation.LookupPermissions(ctx, &lakeformation.LookupPermissionsArgs{
//				Principal: aws_iam_role.Workflow_role.Arn,
//				DataLocation: lakeformation.GetPermissionsDataLocation{
//					Arn: aws_lakeformation_resource.Test.Arn,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Permissions For A Glue Catalog Database
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lakeformation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lakeformation.LookupPermissions(ctx, &lakeformation.LookupPermissionsArgs{
//				Principal: aws_iam_role.Workflow_role.Arn,
//				Database: lakeformation.GetPermissionsDatabase{
//					Name:      aws_glue_catalog_database.Test.Name,
//					CatalogId: "110376042874",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Permissions For Tag-Based Access Control
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lakeformation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lakeformation.LookupPermissions(ctx, &lakeformation.LookupPermissionsArgs{
//				Principal: aws_iam_role.Workflow_role.Arn,
//				LfTagPolicy: lakeformation.GetPermissionsLfTagPolicy{
//					ResourceType: "DATABASE",
//					Expressions: []lakeformation.GetPermissionsLfTagPolicyExpression{
//						{
//							Key: "Team",
//							Values: []string{
//								"Sales",
//							},
//						},
//						{
//							Key: "Environment",
//							Values: []string{
//								"Dev",
//								"Production",
//							},
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPermissions(ctx *pulumi.Context, args *LookupPermissionsArgs, opts ...pulumi.InvokeOption) (*LookupPermissionsResult, error) {
	var rv LookupPermissionsResult
	err := ctx.Invoke("aws:lakeformation/getPermissions:getPermissions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPermissions.
type LookupPermissionsArgs struct {
	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId *string `pulumi:"catalogId"`
	// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
	CatalogResource *bool `pulumi:"catalogResource"`
	// Configuration block for a data location resource. Detailed below.
	DataLocation *GetPermissionsDataLocation `pulumi:"dataLocation"`
	// Configuration block for a database resource. Detailed below.
	Database *GetPermissionsDatabase `pulumi:"database"`
	// Configuration block for an LF-tag resource. Detailed below.
	LfTag *GetPermissionsLfTag `pulumi:"lfTag"`
	// Configuration block for an LF-tag policy resource. Detailed below.
	LfTagPolicy *GetPermissionsLfTagPolicy `pulumi:"lfTagPolicy"`
	// Principal to be granted the permissions on the resource. Supported principals are IAM users or IAM roles.
	//
	// One of the following is required:
	Principal string `pulumi:"principal"`
	// Configuration block for a table resource. Detailed below.
	Table *GetPermissionsTable `pulumi:"table"`
	// Configuration block for a table with columns resource. Detailed below.
	//
	// The following arguments are optional:
	TableWithColumns *GetPermissionsTableWithColumns `pulumi:"tableWithColumns"`
}

// A collection of values returned by getPermissions.
type LookupPermissionsResult struct {
	CatalogId       *string                    `pulumi:"catalogId"`
	CatalogResource *bool                      `pulumi:"catalogResource"`
	DataLocation    GetPermissionsDataLocation `pulumi:"dataLocation"`
	Database        GetPermissionsDatabase     `pulumi:"database"`
	// The provider-assigned unique ID for this managed resource.
	Id          string                    `pulumi:"id"`
	LfTag       GetPermissionsLfTag       `pulumi:"lfTag"`
	LfTagPolicy GetPermissionsLfTagPolicy `pulumi:"lfTagPolicy"`
	// List of permissions granted to the principal. For details on permissions, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
	Permissions []string `pulumi:"permissions"`
	// Subset of `permissions` which the principal can pass.
	PermissionsWithGrantOptions []string                       `pulumi:"permissionsWithGrantOptions"`
	Principal                   string                         `pulumi:"principal"`
	Table                       GetPermissionsTable            `pulumi:"table"`
	TableWithColumns            GetPermissionsTableWithColumns `pulumi:"tableWithColumns"`
}

func LookupPermissionsOutput(ctx *pulumi.Context, args LookupPermissionsOutputArgs, opts ...pulumi.InvokeOption) LookupPermissionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPermissionsResult, error) {
			args := v.(LookupPermissionsArgs)
			r, err := LookupPermissions(ctx, &args, opts...)
			var s LookupPermissionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPermissionsResultOutput)
}

// A collection of arguments for invoking getPermissions.
type LookupPermissionsOutputArgs struct {
	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId pulumi.StringPtrInput `pulumi:"catalogId"`
	// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
	CatalogResource pulumi.BoolPtrInput `pulumi:"catalogResource"`
	// Configuration block for a data location resource. Detailed below.
	DataLocation GetPermissionsDataLocationPtrInput `pulumi:"dataLocation"`
	// Configuration block for a database resource. Detailed below.
	Database GetPermissionsDatabasePtrInput `pulumi:"database"`
	// Configuration block for an LF-tag resource. Detailed below.
	LfTag GetPermissionsLfTagPtrInput `pulumi:"lfTag"`
	// Configuration block for an LF-tag policy resource. Detailed below.
	LfTagPolicy GetPermissionsLfTagPolicyPtrInput `pulumi:"lfTagPolicy"`
	// Principal to be granted the permissions on the resource. Supported principals are IAM users or IAM roles.
	//
	// One of the following is required:
	Principal pulumi.StringInput `pulumi:"principal"`
	// Configuration block for a table resource. Detailed below.
	Table GetPermissionsTablePtrInput `pulumi:"table"`
	// Configuration block for a table with columns resource. Detailed below.
	//
	// The following arguments are optional:
	TableWithColumns GetPermissionsTableWithColumnsPtrInput `pulumi:"tableWithColumns"`
}

func (LookupPermissionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPermissionsArgs)(nil)).Elem()
}

// A collection of values returned by getPermissions.
type LookupPermissionsResultOutput struct{ *pulumi.OutputState }

func (LookupPermissionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPermissionsResult)(nil)).Elem()
}

func (o LookupPermissionsResultOutput) ToLookupPermissionsResultOutput() LookupPermissionsResultOutput {
	return o
}

func (o LookupPermissionsResultOutput) ToLookupPermissionsResultOutputWithContext(ctx context.Context) LookupPermissionsResultOutput {
	return o
}

func (o LookupPermissionsResultOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPermissionsResult) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

func (o LookupPermissionsResultOutput) CatalogResource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupPermissionsResult) *bool { return v.CatalogResource }).(pulumi.BoolPtrOutput)
}

func (o LookupPermissionsResultOutput) DataLocation() GetPermissionsDataLocationOutput {
	return o.ApplyT(func(v LookupPermissionsResult) GetPermissionsDataLocation { return v.DataLocation }).(GetPermissionsDataLocationOutput)
}

func (o LookupPermissionsResultOutput) Database() GetPermissionsDatabaseOutput {
	return o.ApplyT(func(v LookupPermissionsResult) GetPermissionsDatabase { return v.Database }).(GetPermissionsDatabaseOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPermissionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPermissionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPermissionsResultOutput) LfTag() GetPermissionsLfTagOutput {
	return o.ApplyT(func(v LookupPermissionsResult) GetPermissionsLfTag { return v.LfTag }).(GetPermissionsLfTagOutput)
}

func (o LookupPermissionsResultOutput) LfTagPolicy() GetPermissionsLfTagPolicyOutput {
	return o.ApplyT(func(v LookupPermissionsResult) GetPermissionsLfTagPolicy { return v.LfTagPolicy }).(GetPermissionsLfTagPolicyOutput)
}

// List of permissions granted to the principal. For details on permissions, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
func (o LookupPermissionsResultOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPermissionsResult) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// Subset of `permissions` which the principal can pass.
func (o LookupPermissionsResultOutput) PermissionsWithGrantOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPermissionsResult) []string { return v.PermissionsWithGrantOptions }).(pulumi.StringArrayOutput)
}

func (o LookupPermissionsResultOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPermissionsResult) string { return v.Principal }).(pulumi.StringOutput)
}

func (o LookupPermissionsResultOutput) Table() GetPermissionsTableOutput {
	return o.ApplyT(func(v LookupPermissionsResult) GetPermissionsTable { return v.Table }).(GetPermissionsTableOutput)
}

func (o LookupPermissionsResultOutput) TableWithColumns() GetPermissionsTableWithColumnsOutput {
	return o.ApplyT(func(v LookupPermissionsResult) GetPermissionsTableWithColumns { return v.TableWithColumns }).(GetPermissionsTableWithColumnsOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPermissionsResultOutput{})
}
