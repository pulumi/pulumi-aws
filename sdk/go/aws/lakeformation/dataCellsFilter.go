// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lakeformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Lake Formation Data Cells Filter.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lakeformation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lakeformation.NewDataCellsFilter(ctx, "example", &lakeformation.DataCellsFilterArgs{
//				TableData: &lakeformation.DataCellsFilterTableDataArgs{
//					DatabaseName:   pulumi.Any(test.Name),
//					Name:           pulumi.String("example"),
//					TableCatalogId: pulumi.Any(current.AccountId),
//					TableName:      pulumi.Any(testAwsGlueCatalogTable.Name),
//					ColumnNames: pulumi.StringArray{
//						pulumi.String("my_column"),
//					},
//					RowFilter: &lakeformation.DataCellsFilterTableDataRowFilterArgs{
//						FilterExpression: pulumi.String("my_column='example'"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import Lake Formation Data Cells Filter using the `id`. For example:
//
// ```sh
// $ pulumi import aws:lakeformation/dataCellsFilter:DataCellsFilter example database_name,name,table_catalog_id,table_name
// ```
type DataCellsFilter struct {
	pulumi.CustomResourceState

	// Information about the data cells filter. See Table Data below for details.
	TableData DataCellsFilterTableDataPtrOutput `pulumi:"tableData"`
	Timeouts  DataCellsFilterTimeoutsPtrOutput  `pulumi:"timeouts"`
}

// NewDataCellsFilter registers a new resource with the given unique name, arguments, and options.
func NewDataCellsFilter(ctx *pulumi.Context,
	name string, args *DataCellsFilterArgs, opts ...pulumi.ResourceOption) (*DataCellsFilter, error) {
	if args == nil {
		args = &DataCellsFilterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataCellsFilter
	err := ctx.RegisterResource("aws:lakeformation/dataCellsFilter:DataCellsFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataCellsFilter gets an existing DataCellsFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataCellsFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataCellsFilterState, opts ...pulumi.ResourceOption) (*DataCellsFilter, error) {
	var resource DataCellsFilter
	err := ctx.ReadResource("aws:lakeformation/dataCellsFilter:DataCellsFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataCellsFilter resources.
type dataCellsFilterState struct {
	// Information about the data cells filter. See Table Data below for details.
	TableData *DataCellsFilterTableData `pulumi:"tableData"`
	Timeouts  *DataCellsFilterTimeouts  `pulumi:"timeouts"`
}

type DataCellsFilterState struct {
	// Information about the data cells filter. See Table Data below for details.
	TableData DataCellsFilterTableDataPtrInput
	Timeouts  DataCellsFilterTimeoutsPtrInput
}

func (DataCellsFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCellsFilterState)(nil)).Elem()
}

type dataCellsFilterArgs struct {
	// Information about the data cells filter. See Table Data below for details.
	TableData *DataCellsFilterTableData `pulumi:"tableData"`
	Timeouts  *DataCellsFilterTimeouts  `pulumi:"timeouts"`
}

// The set of arguments for constructing a DataCellsFilter resource.
type DataCellsFilterArgs struct {
	// Information about the data cells filter. See Table Data below for details.
	TableData DataCellsFilterTableDataPtrInput
	Timeouts  DataCellsFilterTimeoutsPtrInput
}

func (DataCellsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCellsFilterArgs)(nil)).Elem()
}

type DataCellsFilterInput interface {
	pulumi.Input

	ToDataCellsFilterOutput() DataCellsFilterOutput
	ToDataCellsFilterOutputWithContext(ctx context.Context) DataCellsFilterOutput
}

func (*DataCellsFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCellsFilter)(nil)).Elem()
}

func (i *DataCellsFilter) ToDataCellsFilterOutput() DataCellsFilterOutput {
	return i.ToDataCellsFilterOutputWithContext(context.Background())
}

func (i *DataCellsFilter) ToDataCellsFilterOutputWithContext(ctx context.Context) DataCellsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCellsFilterOutput)
}

// DataCellsFilterArrayInput is an input type that accepts DataCellsFilterArray and DataCellsFilterArrayOutput values.
// You can construct a concrete instance of `DataCellsFilterArrayInput` via:
//
//	DataCellsFilterArray{ DataCellsFilterArgs{...} }
type DataCellsFilterArrayInput interface {
	pulumi.Input

	ToDataCellsFilterArrayOutput() DataCellsFilterArrayOutput
	ToDataCellsFilterArrayOutputWithContext(context.Context) DataCellsFilterArrayOutput
}

type DataCellsFilterArray []DataCellsFilterInput

func (DataCellsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataCellsFilter)(nil)).Elem()
}

func (i DataCellsFilterArray) ToDataCellsFilterArrayOutput() DataCellsFilterArrayOutput {
	return i.ToDataCellsFilterArrayOutputWithContext(context.Background())
}

func (i DataCellsFilterArray) ToDataCellsFilterArrayOutputWithContext(ctx context.Context) DataCellsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCellsFilterArrayOutput)
}

// DataCellsFilterMapInput is an input type that accepts DataCellsFilterMap and DataCellsFilterMapOutput values.
// You can construct a concrete instance of `DataCellsFilterMapInput` via:
//
//	DataCellsFilterMap{ "key": DataCellsFilterArgs{...} }
type DataCellsFilterMapInput interface {
	pulumi.Input

	ToDataCellsFilterMapOutput() DataCellsFilterMapOutput
	ToDataCellsFilterMapOutputWithContext(context.Context) DataCellsFilterMapOutput
}

type DataCellsFilterMap map[string]DataCellsFilterInput

func (DataCellsFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataCellsFilter)(nil)).Elem()
}

func (i DataCellsFilterMap) ToDataCellsFilterMapOutput() DataCellsFilterMapOutput {
	return i.ToDataCellsFilterMapOutputWithContext(context.Background())
}

func (i DataCellsFilterMap) ToDataCellsFilterMapOutputWithContext(ctx context.Context) DataCellsFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCellsFilterMapOutput)
}

type DataCellsFilterOutput struct{ *pulumi.OutputState }

func (DataCellsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCellsFilter)(nil)).Elem()
}

func (o DataCellsFilterOutput) ToDataCellsFilterOutput() DataCellsFilterOutput {
	return o
}

func (o DataCellsFilterOutput) ToDataCellsFilterOutputWithContext(ctx context.Context) DataCellsFilterOutput {
	return o
}

// Information about the data cells filter. See Table Data below for details.
func (o DataCellsFilterOutput) TableData() DataCellsFilterTableDataPtrOutput {
	return o.ApplyT(func(v *DataCellsFilter) DataCellsFilterTableDataPtrOutput { return v.TableData }).(DataCellsFilterTableDataPtrOutput)
}

func (o DataCellsFilterOutput) Timeouts() DataCellsFilterTimeoutsPtrOutput {
	return o.ApplyT(func(v *DataCellsFilter) DataCellsFilterTimeoutsPtrOutput { return v.Timeouts }).(DataCellsFilterTimeoutsPtrOutput)
}

type DataCellsFilterArrayOutput struct{ *pulumi.OutputState }

func (DataCellsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataCellsFilter)(nil)).Elem()
}

func (o DataCellsFilterArrayOutput) ToDataCellsFilterArrayOutput() DataCellsFilterArrayOutput {
	return o
}

func (o DataCellsFilterArrayOutput) ToDataCellsFilterArrayOutputWithContext(ctx context.Context) DataCellsFilterArrayOutput {
	return o
}

func (o DataCellsFilterArrayOutput) Index(i pulumi.IntInput) DataCellsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataCellsFilter {
		return vs[0].([]*DataCellsFilter)[vs[1].(int)]
	}).(DataCellsFilterOutput)
}

type DataCellsFilterMapOutput struct{ *pulumi.OutputState }

func (DataCellsFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataCellsFilter)(nil)).Elem()
}

func (o DataCellsFilterMapOutput) ToDataCellsFilterMapOutput() DataCellsFilterMapOutput {
	return o
}

func (o DataCellsFilterMapOutput) ToDataCellsFilterMapOutputWithContext(ctx context.Context) DataCellsFilterMapOutput {
	return o
}

func (o DataCellsFilterMapOutput) MapIndex(k pulumi.StringInput) DataCellsFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataCellsFilter {
		return vs[0].(map[string]*DataCellsFilter)[vs[1].(string)]
	}).(DataCellsFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataCellsFilterInput)(nil)).Elem(), &DataCellsFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCellsFilterArrayInput)(nil)).Elem(), DataCellsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCellsFilterMapInput)(nil)).Elem(), DataCellsFilterMap{})
	pulumi.RegisterOutputType(DataCellsFilterOutput{})
	pulumi.RegisterOutputType(DataCellsFilterArrayOutput{})
	pulumi.RegisterOutputType(DataCellsFilterMapOutput{})
}
