// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lakeformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Lake Formation Resource LF Tag.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lakeformation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lakeformation.NewResourceLfTag(ctx, "example", &lakeformation.ResourceLfTagArgs{
//				Database: &lakeformation.ResourceLfTagDatabaseArgs{
//					Name: pulumi.Any(exampleAwsGlueCatalogDatabase.Name),
//				},
//				LfTag: &lakeformation.ResourceLfTagLfTagArgs{
//					Key:   pulumi.Any(exampleAwsLakeformationLfTag.Key),
//					Value: pulumi.String("stowe"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// You cannot import this resource.
type ResourceLfTag struct {
	pulumi.CustomResourceState

	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId pulumi.StringPtrOutput `pulumi:"catalogId"`
	// Configuration block for a database resource. See Database for more details.
	Database ResourceLfTagDatabasePtrOutput `pulumi:"database"`
	// Set of LF-tags to attach to the resource. See LF Tag for more details.
	//
	// Exactly one of the following is required:
	LfTag ResourceLfTagLfTagPtrOutput `pulumi:"lfTag"`
	// Configuration block for a table resource. See Table for more details.
	Table ResourceLfTagTablePtrOutput `pulumi:"table"`
	// Configuration block for a table with columns resource. See Table With Columns for more details.
	//
	// The following arguments are optional:
	TableWithColumns ResourceLfTagTableWithColumnsPtrOutput `pulumi:"tableWithColumns"`
	Timeouts         ResourceLfTagTimeoutsPtrOutput         `pulumi:"timeouts"`
}

// NewResourceLfTag registers a new resource with the given unique name, arguments, and options.
func NewResourceLfTag(ctx *pulumi.Context,
	name string, args *ResourceLfTagArgs, opts ...pulumi.ResourceOption) (*ResourceLfTag, error) {
	if args == nil {
		args = &ResourceLfTagArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceLfTag
	err := ctx.RegisterResource("aws:lakeformation/resourceLfTag:ResourceLfTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceLfTag gets an existing ResourceLfTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceLfTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceLfTagState, opts ...pulumi.ResourceOption) (*ResourceLfTag, error) {
	var resource ResourceLfTag
	err := ctx.ReadResource("aws:lakeformation/resourceLfTag:ResourceLfTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceLfTag resources.
type resourceLfTagState struct {
	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId *string `pulumi:"catalogId"`
	// Configuration block for a database resource. See Database for more details.
	Database *ResourceLfTagDatabase `pulumi:"database"`
	// Set of LF-tags to attach to the resource. See LF Tag for more details.
	//
	// Exactly one of the following is required:
	LfTag *ResourceLfTagLfTag `pulumi:"lfTag"`
	// Configuration block for a table resource. See Table for more details.
	Table *ResourceLfTagTable `pulumi:"table"`
	// Configuration block for a table with columns resource. See Table With Columns for more details.
	//
	// The following arguments are optional:
	TableWithColumns *ResourceLfTagTableWithColumns `pulumi:"tableWithColumns"`
	Timeouts         *ResourceLfTagTimeouts         `pulumi:"timeouts"`
}

type ResourceLfTagState struct {
	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId pulumi.StringPtrInput
	// Configuration block for a database resource. See Database for more details.
	Database ResourceLfTagDatabasePtrInput
	// Set of LF-tags to attach to the resource. See LF Tag for more details.
	//
	// Exactly one of the following is required:
	LfTag ResourceLfTagLfTagPtrInput
	// Configuration block for a table resource. See Table for more details.
	Table ResourceLfTagTablePtrInput
	// Configuration block for a table with columns resource. See Table With Columns for more details.
	//
	// The following arguments are optional:
	TableWithColumns ResourceLfTagTableWithColumnsPtrInput
	Timeouts         ResourceLfTagTimeoutsPtrInput
}

func (ResourceLfTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceLfTagState)(nil)).Elem()
}

type resourceLfTagArgs struct {
	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId *string `pulumi:"catalogId"`
	// Configuration block for a database resource. See Database for more details.
	Database *ResourceLfTagDatabase `pulumi:"database"`
	// Set of LF-tags to attach to the resource. See LF Tag for more details.
	//
	// Exactly one of the following is required:
	LfTag *ResourceLfTagLfTag `pulumi:"lfTag"`
	// Configuration block for a table resource. See Table for more details.
	Table *ResourceLfTagTable `pulumi:"table"`
	// Configuration block for a table with columns resource. See Table With Columns for more details.
	//
	// The following arguments are optional:
	TableWithColumns *ResourceLfTagTableWithColumns `pulumi:"tableWithColumns"`
	Timeouts         *ResourceLfTagTimeouts         `pulumi:"timeouts"`
}

// The set of arguments for constructing a ResourceLfTag resource.
type ResourceLfTagArgs struct {
	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId pulumi.StringPtrInput
	// Configuration block for a database resource. See Database for more details.
	Database ResourceLfTagDatabasePtrInput
	// Set of LF-tags to attach to the resource. See LF Tag for more details.
	//
	// Exactly one of the following is required:
	LfTag ResourceLfTagLfTagPtrInput
	// Configuration block for a table resource. See Table for more details.
	Table ResourceLfTagTablePtrInput
	// Configuration block for a table with columns resource. See Table With Columns for more details.
	//
	// The following arguments are optional:
	TableWithColumns ResourceLfTagTableWithColumnsPtrInput
	Timeouts         ResourceLfTagTimeoutsPtrInput
}

func (ResourceLfTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceLfTagArgs)(nil)).Elem()
}

type ResourceLfTagInput interface {
	pulumi.Input

	ToResourceLfTagOutput() ResourceLfTagOutput
	ToResourceLfTagOutputWithContext(ctx context.Context) ResourceLfTagOutput
}

func (*ResourceLfTag) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLfTag)(nil)).Elem()
}

func (i *ResourceLfTag) ToResourceLfTagOutput() ResourceLfTagOutput {
	return i.ToResourceLfTagOutputWithContext(context.Background())
}

func (i *ResourceLfTag) ToResourceLfTagOutputWithContext(ctx context.Context) ResourceLfTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLfTagOutput)
}

// ResourceLfTagArrayInput is an input type that accepts ResourceLfTagArray and ResourceLfTagArrayOutput values.
// You can construct a concrete instance of `ResourceLfTagArrayInput` via:
//
//	ResourceLfTagArray{ ResourceLfTagArgs{...} }
type ResourceLfTagArrayInput interface {
	pulumi.Input

	ToResourceLfTagArrayOutput() ResourceLfTagArrayOutput
	ToResourceLfTagArrayOutputWithContext(context.Context) ResourceLfTagArrayOutput
}

type ResourceLfTagArray []ResourceLfTagInput

func (ResourceLfTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceLfTag)(nil)).Elem()
}

func (i ResourceLfTagArray) ToResourceLfTagArrayOutput() ResourceLfTagArrayOutput {
	return i.ToResourceLfTagArrayOutputWithContext(context.Background())
}

func (i ResourceLfTagArray) ToResourceLfTagArrayOutputWithContext(ctx context.Context) ResourceLfTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLfTagArrayOutput)
}

// ResourceLfTagMapInput is an input type that accepts ResourceLfTagMap and ResourceLfTagMapOutput values.
// You can construct a concrete instance of `ResourceLfTagMapInput` via:
//
//	ResourceLfTagMap{ "key": ResourceLfTagArgs{...} }
type ResourceLfTagMapInput interface {
	pulumi.Input

	ToResourceLfTagMapOutput() ResourceLfTagMapOutput
	ToResourceLfTagMapOutputWithContext(context.Context) ResourceLfTagMapOutput
}

type ResourceLfTagMap map[string]ResourceLfTagInput

func (ResourceLfTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceLfTag)(nil)).Elem()
}

func (i ResourceLfTagMap) ToResourceLfTagMapOutput() ResourceLfTagMapOutput {
	return i.ToResourceLfTagMapOutputWithContext(context.Background())
}

func (i ResourceLfTagMap) ToResourceLfTagMapOutputWithContext(ctx context.Context) ResourceLfTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLfTagMapOutput)
}

type ResourceLfTagOutput struct{ *pulumi.OutputState }

func (ResourceLfTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLfTag)(nil)).Elem()
}

func (o ResourceLfTagOutput) ToResourceLfTagOutput() ResourceLfTagOutput {
	return o
}

func (o ResourceLfTagOutput) ToResourceLfTagOutputWithContext(ctx context.Context) ResourceLfTagOutput {
	return o
}

// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
func (o ResourceLfTagOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceLfTag) pulumi.StringPtrOutput { return v.CatalogId }).(pulumi.StringPtrOutput)
}

// Configuration block for a database resource. See Database for more details.
func (o ResourceLfTagOutput) Database() ResourceLfTagDatabasePtrOutput {
	return o.ApplyT(func(v *ResourceLfTag) ResourceLfTagDatabasePtrOutput { return v.Database }).(ResourceLfTagDatabasePtrOutput)
}

// Set of LF-tags to attach to the resource. See LF Tag for more details.
//
// Exactly one of the following is required:
func (o ResourceLfTagOutput) LfTag() ResourceLfTagLfTagPtrOutput {
	return o.ApplyT(func(v *ResourceLfTag) ResourceLfTagLfTagPtrOutput { return v.LfTag }).(ResourceLfTagLfTagPtrOutput)
}

// Configuration block for a table resource. See Table for more details.
func (o ResourceLfTagOutput) Table() ResourceLfTagTablePtrOutput {
	return o.ApplyT(func(v *ResourceLfTag) ResourceLfTagTablePtrOutput { return v.Table }).(ResourceLfTagTablePtrOutput)
}

// Configuration block for a table with columns resource. See Table With Columns for more details.
//
// The following arguments are optional:
func (o ResourceLfTagOutput) TableWithColumns() ResourceLfTagTableWithColumnsPtrOutput {
	return o.ApplyT(func(v *ResourceLfTag) ResourceLfTagTableWithColumnsPtrOutput { return v.TableWithColumns }).(ResourceLfTagTableWithColumnsPtrOutput)
}

func (o ResourceLfTagOutput) Timeouts() ResourceLfTagTimeoutsPtrOutput {
	return o.ApplyT(func(v *ResourceLfTag) ResourceLfTagTimeoutsPtrOutput { return v.Timeouts }).(ResourceLfTagTimeoutsPtrOutput)
}

type ResourceLfTagArrayOutput struct{ *pulumi.OutputState }

func (ResourceLfTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceLfTag)(nil)).Elem()
}

func (o ResourceLfTagArrayOutput) ToResourceLfTagArrayOutput() ResourceLfTagArrayOutput {
	return o
}

func (o ResourceLfTagArrayOutput) ToResourceLfTagArrayOutputWithContext(ctx context.Context) ResourceLfTagArrayOutput {
	return o
}

func (o ResourceLfTagArrayOutput) Index(i pulumi.IntInput) ResourceLfTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceLfTag {
		return vs[0].([]*ResourceLfTag)[vs[1].(int)]
	}).(ResourceLfTagOutput)
}

type ResourceLfTagMapOutput struct{ *pulumi.OutputState }

func (ResourceLfTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceLfTag)(nil)).Elem()
}

func (o ResourceLfTagMapOutput) ToResourceLfTagMapOutput() ResourceLfTagMapOutput {
	return o
}

func (o ResourceLfTagMapOutput) ToResourceLfTagMapOutputWithContext(ctx context.Context) ResourceLfTagMapOutput {
	return o
}

func (o ResourceLfTagMapOutput) MapIndex(k pulumi.StringInput) ResourceLfTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceLfTag {
		return vs[0].(map[string]*ResourceLfTag)[vs[1].(string)]
	}).(ResourceLfTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceLfTagInput)(nil)).Elem(), &ResourceLfTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceLfTagArrayInput)(nil)).Elem(), ResourceLfTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceLfTagMapInput)(nil)).Elem(), ResourceLfTagMap{})
	pulumi.RegisterOutputType(ResourceLfTagOutput{})
	pulumi.RegisterOutputType(ResourceLfTagArrayOutput{})
	pulumi.RegisterOutputType(ResourceLfTagMapOutput{})
}
