// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lakeformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Lake Formation LF Tag Expression.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lakeformation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := lakeformation.NewLfTag(ctx, "example", &lakeformation.LfTagArgs{
//				Key: pulumi.String("example"),
//				Values: pulumi.StringArray{
//					pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lakeformation.NewLfTagExpression(ctx, "example", &lakeformation.LfTagExpressionArgs{
//				Name: pulumi.String("example"),
//				Expressions: lakeformation.LfTagExpressionExpressionArray{
//					&lakeformation.LfTagExpressionExpressionArgs{
//						TagKey:    example.Key,
//						TagValues: example.Values,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Lake Formation LF Tag Expression using the `name,catalog_id`. For example:
//
// ```sh
// $ pulumi import aws:lakeformation/lfTagExpression:LfTagExpression example example-tag-expression,123456789012
// ```
type LfTagExpression struct {
	pulumi.CustomResourceState

	// ID of the Data Catalog. Defaults to the account ID if not specified.
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// Description of the LF-Tag Expression.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of LF-Tag conditions (key-value pairs). See expression for more details.
	//
	// The following arguments are optional:
	Expressions LfTagExpressionExpressionArrayOutput `pulumi:"expressions"`
	// Name of the LF-Tag Expression.
	Name pulumi.StringOutput `pulumi:"name"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewLfTagExpression registers a new resource with the given unique name, arguments, and options.
func NewLfTagExpression(ctx *pulumi.Context,
	name string, args *LfTagExpressionArgs, opts ...pulumi.ResourceOption) (*LfTagExpression, error) {
	if args == nil {
		args = &LfTagExpressionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LfTagExpression
	err := ctx.RegisterResource("aws:lakeformation/lfTagExpression:LfTagExpression", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLfTagExpression gets an existing LfTagExpression resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLfTagExpression(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LfTagExpressionState, opts ...pulumi.ResourceOption) (*LfTagExpression, error) {
	var resource LfTagExpression
	err := ctx.ReadResource("aws:lakeformation/lfTagExpression:LfTagExpression", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LfTagExpression resources.
type lfTagExpressionState struct {
	// ID of the Data Catalog. Defaults to the account ID if not specified.
	CatalogId *string `pulumi:"catalogId"`
	// Description of the LF-Tag Expression.
	Description *string `pulumi:"description"`
	// A list of LF-Tag conditions (key-value pairs). See expression for more details.
	//
	// The following arguments are optional:
	Expressions []LfTagExpressionExpression `pulumi:"expressions"`
	// Name of the LF-Tag Expression.
	Name *string `pulumi:"name"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

type LfTagExpressionState struct {
	// ID of the Data Catalog. Defaults to the account ID if not specified.
	CatalogId pulumi.StringPtrInput
	// Description of the LF-Tag Expression.
	Description pulumi.StringPtrInput
	// A list of LF-Tag conditions (key-value pairs). See expression for more details.
	//
	// The following arguments are optional:
	Expressions LfTagExpressionExpressionArrayInput
	// Name of the LF-Tag Expression.
	Name pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
}

func (LfTagExpressionState) ElementType() reflect.Type {
	return reflect.TypeOf((*lfTagExpressionState)(nil)).Elem()
}

type lfTagExpressionArgs struct {
	// ID of the Data Catalog. Defaults to the account ID if not specified.
	CatalogId *string `pulumi:"catalogId"`
	// Description of the LF-Tag Expression.
	Description *string `pulumi:"description"`
	// A list of LF-Tag conditions (key-value pairs). See expression for more details.
	//
	// The following arguments are optional:
	Expressions []LfTagExpressionExpression `pulumi:"expressions"`
	// Name of the LF-Tag Expression.
	Name *string `pulumi:"name"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a LfTagExpression resource.
type LfTagExpressionArgs struct {
	// ID of the Data Catalog. Defaults to the account ID if not specified.
	CatalogId pulumi.StringPtrInput
	// Description of the LF-Tag Expression.
	Description pulumi.StringPtrInput
	// A list of LF-Tag conditions (key-value pairs). See expression for more details.
	//
	// The following arguments are optional:
	Expressions LfTagExpressionExpressionArrayInput
	// Name of the LF-Tag Expression.
	Name pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
}

func (LfTagExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lfTagExpressionArgs)(nil)).Elem()
}

type LfTagExpressionInput interface {
	pulumi.Input

	ToLfTagExpressionOutput() LfTagExpressionOutput
	ToLfTagExpressionOutputWithContext(ctx context.Context) LfTagExpressionOutput
}

func (*LfTagExpression) ElementType() reflect.Type {
	return reflect.TypeOf((**LfTagExpression)(nil)).Elem()
}

func (i *LfTagExpression) ToLfTagExpressionOutput() LfTagExpressionOutput {
	return i.ToLfTagExpressionOutputWithContext(context.Background())
}

func (i *LfTagExpression) ToLfTagExpressionOutputWithContext(ctx context.Context) LfTagExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LfTagExpressionOutput)
}

// LfTagExpressionArrayInput is an input type that accepts LfTagExpressionArray and LfTagExpressionArrayOutput values.
// You can construct a concrete instance of `LfTagExpressionArrayInput` via:
//
//	LfTagExpressionArray{ LfTagExpressionArgs{...} }
type LfTagExpressionArrayInput interface {
	pulumi.Input

	ToLfTagExpressionArrayOutput() LfTagExpressionArrayOutput
	ToLfTagExpressionArrayOutputWithContext(context.Context) LfTagExpressionArrayOutput
}

type LfTagExpressionArray []LfTagExpressionInput

func (LfTagExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LfTagExpression)(nil)).Elem()
}

func (i LfTagExpressionArray) ToLfTagExpressionArrayOutput() LfTagExpressionArrayOutput {
	return i.ToLfTagExpressionArrayOutputWithContext(context.Background())
}

func (i LfTagExpressionArray) ToLfTagExpressionArrayOutputWithContext(ctx context.Context) LfTagExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LfTagExpressionArrayOutput)
}

// LfTagExpressionMapInput is an input type that accepts LfTagExpressionMap and LfTagExpressionMapOutput values.
// You can construct a concrete instance of `LfTagExpressionMapInput` via:
//
//	LfTagExpressionMap{ "key": LfTagExpressionArgs{...} }
type LfTagExpressionMapInput interface {
	pulumi.Input

	ToLfTagExpressionMapOutput() LfTagExpressionMapOutput
	ToLfTagExpressionMapOutputWithContext(context.Context) LfTagExpressionMapOutput
}

type LfTagExpressionMap map[string]LfTagExpressionInput

func (LfTagExpressionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LfTagExpression)(nil)).Elem()
}

func (i LfTagExpressionMap) ToLfTagExpressionMapOutput() LfTagExpressionMapOutput {
	return i.ToLfTagExpressionMapOutputWithContext(context.Background())
}

func (i LfTagExpressionMap) ToLfTagExpressionMapOutputWithContext(ctx context.Context) LfTagExpressionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LfTagExpressionMapOutput)
}

type LfTagExpressionOutput struct{ *pulumi.OutputState }

func (LfTagExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LfTagExpression)(nil)).Elem()
}

func (o LfTagExpressionOutput) ToLfTagExpressionOutput() LfTagExpressionOutput {
	return o
}

func (o LfTagExpressionOutput) ToLfTagExpressionOutputWithContext(ctx context.Context) LfTagExpressionOutput {
	return o
}

// ID of the Data Catalog. Defaults to the account ID if not specified.
func (o LfTagExpressionOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *LfTagExpression) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

// Description of the LF-Tag Expression.
func (o LfTagExpressionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LfTagExpression) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of LF-Tag conditions (key-value pairs). See expression for more details.
//
// The following arguments are optional:
func (o LfTagExpressionOutput) Expressions() LfTagExpressionExpressionArrayOutput {
	return o.ApplyT(func(v *LfTagExpression) LfTagExpressionExpressionArrayOutput { return v.Expressions }).(LfTagExpressionExpressionArrayOutput)
}

// Name of the LF-Tag Expression.
func (o LfTagExpressionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LfTagExpression) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o LfTagExpressionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LfTagExpression) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type LfTagExpressionArrayOutput struct{ *pulumi.OutputState }

func (LfTagExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LfTagExpression)(nil)).Elem()
}

func (o LfTagExpressionArrayOutput) ToLfTagExpressionArrayOutput() LfTagExpressionArrayOutput {
	return o
}

func (o LfTagExpressionArrayOutput) ToLfTagExpressionArrayOutputWithContext(ctx context.Context) LfTagExpressionArrayOutput {
	return o
}

func (o LfTagExpressionArrayOutput) Index(i pulumi.IntInput) LfTagExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LfTagExpression {
		return vs[0].([]*LfTagExpression)[vs[1].(int)]
	}).(LfTagExpressionOutput)
}

type LfTagExpressionMapOutput struct{ *pulumi.OutputState }

func (LfTagExpressionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LfTagExpression)(nil)).Elem()
}

func (o LfTagExpressionMapOutput) ToLfTagExpressionMapOutput() LfTagExpressionMapOutput {
	return o
}

func (o LfTagExpressionMapOutput) ToLfTagExpressionMapOutputWithContext(ctx context.Context) LfTagExpressionMapOutput {
	return o
}

func (o LfTagExpressionMapOutput) MapIndex(k pulumi.StringInput) LfTagExpressionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LfTagExpression {
		return vs[0].(map[string]*LfTagExpression)[vs[1].(string)]
	}).(LfTagExpressionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LfTagExpressionInput)(nil)).Elem(), &LfTagExpression{})
	pulumi.RegisterInputType(reflect.TypeOf((*LfTagExpressionArrayInput)(nil)).Elem(), LfTagExpressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LfTagExpressionMapInput)(nil)).Elem(), LfTagExpressionMap{})
	pulumi.RegisterOutputType(LfTagExpressionOutput{})
	pulumi.RegisterOutputType(LfTagExpressionArrayOutput{})
	pulumi.RegisterOutputType(LfTagExpressionMapOutput{})
}
