// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an SSM Parameter resource.
type Parameter struct {
	s *pulumi.ResourceState
}

// NewParameter registers a new resource with the given unique name, arguments, and options.
func NewParameter(ctx *pulumi.Context,
	name string, args *ParameterArgs, opts ...pulumi.ResourceOpt) (*Parameter, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowedPattern"] = nil
		inputs["arn"] = nil
		inputs["description"] = nil
		inputs["keyId"] = nil
		inputs["name"] = nil
		inputs["overwrite"] = nil
		inputs["tags"] = nil
		inputs["type"] = nil
		inputs["value"] = nil
	} else {
		inputs["allowedPattern"] = args.AllowedPattern
		inputs["arn"] = args.Arn
		inputs["description"] = args.Description
		inputs["keyId"] = args.KeyId
		inputs["name"] = args.Name
		inputs["overwrite"] = args.Overwrite
		inputs["tags"] = args.Tags
		inputs["type"] = args.Type
		inputs["value"] = args.Value
	}
	s, err := ctx.RegisterResource("aws:ssm/parameter:Parameter", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Parameter{s: s}, nil
}

// GetParameter gets an existing Parameter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParameter(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ParameterState, opts ...pulumi.ResourceOpt) (*Parameter, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowedPattern"] = state.AllowedPattern
		inputs["arn"] = state.Arn
		inputs["description"] = state.Description
		inputs["keyId"] = state.KeyId
		inputs["name"] = state.Name
		inputs["overwrite"] = state.Overwrite
		inputs["tags"] = state.Tags
		inputs["type"] = state.Type
		inputs["value"] = state.Value
	}
	s, err := ctx.ReadResource("aws:ssm/parameter:Parameter", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Parameter{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Parameter) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Parameter) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A regular expression used to validate the parameter value.
func (r *Parameter) AllowedPattern() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["allowedPattern"])
}

// The ARN of the parameter.
func (r *Parameter) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The description of the parameter.
func (r *Parameter) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The KMS key id or arn for encrypting a SecureString.
func (r *Parameter) KeyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["keyId"])
}

// The name of the parameter.
func (r *Parameter) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Overwrite an existing parameter. If not specified, will default to `false` if the resource has not been created by terraform to avoid overwrite of existing resource and will default to `true` otherwise (terraform lifecycle rules should then be used to manage the update behavior).
func (r *Parameter) Overwrite() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["overwrite"])
}

// A mapping of tags to assign to the object.
func (r *Parameter) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// The type of the parameter. Valid types are `String`, `StringList` and `SecureString`.
func (r *Parameter) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// The value of the parameter.
func (r *Parameter) Value() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["value"])
}

// Input properties used for looking up and filtering Parameter resources.
type ParameterState struct {
	// A regular expression used to validate the parameter value.
	AllowedPattern interface{}
	// The ARN of the parameter.
	Arn interface{}
	// The description of the parameter.
	Description interface{}
	// The KMS key id or arn for encrypting a SecureString.
	KeyId interface{}
	// The name of the parameter.
	Name interface{}
	// Overwrite an existing parameter. If not specified, will default to `false` if the resource has not been created by terraform to avoid overwrite of existing resource and will default to `true` otherwise (terraform lifecycle rules should then be used to manage the update behavior).
	Overwrite interface{}
	// A mapping of tags to assign to the object.
	Tags interface{}
	// The type of the parameter. Valid types are `String`, `StringList` and `SecureString`.
	Type interface{}
	// The value of the parameter.
	Value interface{}
}

// The set of arguments for constructing a Parameter resource.
type ParameterArgs struct {
	// A regular expression used to validate the parameter value.
	AllowedPattern interface{}
	// The ARN of the parameter.
	Arn interface{}
	// The description of the parameter.
	Description interface{}
	// The KMS key id or arn for encrypting a SecureString.
	KeyId interface{}
	// The name of the parameter.
	Name interface{}
	// Overwrite an existing parameter. If not specified, will default to `false` if the resource has not been created by terraform to avoid overwrite of existing resource and will default to `true` otherwise (terraform lifecycle rules should then be used to manage the update behavior).
	Overwrite interface{}
	// A mapping of tags to assign to the object.
	Tags interface{}
	// The type of the parameter. Valid types are `String`, `StringList` and `SecureString`.
	Type interface{}
	// The value of the parameter.
	Value interface{}
}
