// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Parameter struct {
	pulumi.CustomResourceState

	AllowedPattern pulumi.StringPtrOutput `pulumi:"allowedPattern"`
	Arn            pulumi.StringOutput    `pulumi:"arn"`
	DataType       pulumi.StringOutput    `pulumi:"dataType"`
	Description    pulumi.StringPtrOutput `pulumi:"description"`
	InsecureValue  pulumi.StringOutput    `pulumi:"insecureValue"`
	KeyId          pulumi.StringOutput    `pulumi:"keyId"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	Overwrite      pulumi.BoolPtrOutput   `pulumi:"overwrite"`
	Tags           pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll        pulumi.StringMapOutput `pulumi:"tagsAll"`
	Tier           pulumi.StringPtrOutput `pulumi:"tier"`
	Type           pulumi.StringOutput    `pulumi:"type"`
	Value          pulumi.StringOutput    `pulumi:"value"`
	Version        pulumi.IntOutput       `pulumi:"version"`
}

// NewParameter registers a new resource with the given unique name, arguments, and options.
func NewParameter(ctx *pulumi.Context,
	name string, args *ParameterArgs, opts ...pulumi.ResourceOption) (*Parameter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Value != nil {
		args.Value = pulumi.ToSecret(args.Value).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"value",
	})
	opts = append(opts, secrets)
	var resource Parameter
	err := ctx.RegisterResource("aws:ssm/parameter:Parameter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetParameter gets an existing Parameter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParameter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ParameterState, opts ...pulumi.ResourceOption) (*Parameter, error) {
	var resource Parameter
	err := ctx.ReadResource("aws:ssm/parameter:Parameter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Parameter resources.
type parameterState struct {
	AllowedPattern *string           `pulumi:"allowedPattern"`
	Arn            *string           `pulumi:"arn"`
	DataType       *string           `pulumi:"dataType"`
	Description    *string           `pulumi:"description"`
	InsecureValue  *string           `pulumi:"insecureValue"`
	KeyId          *string           `pulumi:"keyId"`
	Name           *string           `pulumi:"name"`
	Overwrite      *bool             `pulumi:"overwrite"`
	Tags           map[string]string `pulumi:"tags"`
	TagsAll        map[string]string `pulumi:"tagsAll"`
	Tier           *string           `pulumi:"tier"`
	Type           *string           `pulumi:"type"`
	Value          *string           `pulumi:"value"`
	Version        *int              `pulumi:"version"`
}

type ParameterState struct {
	AllowedPattern pulumi.StringPtrInput
	Arn            pulumi.StringPtrInput
	DataType       pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	InsecureValue  pulumi.StringPtrInput
	KeyId          pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	Overwrite      pulumi.BoolPtrInput
	Tags           pulumi.StringMapInput
	TagsAll        pulumi.StringMapInput
	Tier           pulumi.StringPtrInput
	Type           pulumi.StringPtrInput
	Value          pulumi.StringPtrInput
	Version        pulumi.IntPtrInput
}

func (ParameterState) ElementType() reflect.Type {
	return reflect.TypeOf((*parameterState)(nil)).Elem()
}

type parameterArgs struct {
	AllowedPattern *string           `pulumi:"allowedPattern"`
	Arn            *string           `pulumi:"arn"`
	DataType       *string           `pulumi:"dataType"`
	Description    *string           `pulumi:"description"`
	InsecureValue  *string           `pulumi:"insecureValue"`
	KeyId          *string           `pulumi:"keyId"`
	Name           *string           `pulumi:"name"`
	Overwrite      *bool             `pulumi:"overwrite"`
	Tags           map[string]string `pulumi:"tags"`
	Tier           *string           `pulumi:"tier"`
	Type           string            `pulumi:"type"`
	Value          *string           `pulumi:"value"`
}

// The set of arguments for constructing a Parameter resource.
type ParameterArgs struct {
	AllowedPattern pulumi.StringPtrInput
	Arn            pulumi.StringPtrInput
	DataType       pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	InsecureValue  pulumi.StringPtrInput
	KeyId          pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	Overwrite      pulumi.BoolPtrInput
	Tags           pulumi.StringMapInput
	Tier           pulumi.StringPtrInput
	Type           pulumi.StringInput
	Value          pulumi.StringPtrInput
}

func (ParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*parameterArgs)(nil)).Elem()
}

type ParameterInput interface {
	pulumi.Input

	ToParameterOutput() ParameterOutput
	ToParameterOutputWithContext(ctx context.Context) ParameterOutput
}

func (*Parameter) ElementType() reflect.Type {
	return reflect.TypeOf((**Parameter)(nil)).Elem()
}

func (i *Parameter) ToParameterOutput() ParameterOutput {
	return i.ToParameterOutputWithContext(context.Background())
}

func (i *Parameter) ToParameterOutputWithContext(ctx context.Context) ParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterOutput)
}

// ParameterArrayInput is an input type that accepts ParameterArray and ParameterArrayOutput values.
// You can construct a concrete instance of `ParameterArrayInput` via:
//
//	ParameterArray{ ParameterArgs{...} }
type ParameterArrayInput interface {
	pulumi.Input

	ToParameterArrayOutput() ParameterArrayOutput
	ToParameterArrayOutputWithContext(context.Context) ParameterArrayOutput
}

type ParameterArray []ParameterInput

func (ParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Parameter)(nil)).Elem()
}

func (i ParameterArray) ToParameterArrayOutput() ParameterArrayOutput {
	return i.ToParameterArrayOutputWithContext(context.Background())
}

func (i ParameterArray) ToParameterArrayOutputWithContext(ctx context.Context) ParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterArrayOutput)
}

// ParameterMapInput is an input type that accepts ParameterMap and ParameterMapOutput values.
// You can construct a concrete instance of `ParameterMapInput` via:
//
//	ParameterMap{ "key": ParameterArgs{...} }
type ParameterMapInput interface {
	pulumi.Input

	ToParameterMapOutput() ParameterMapOutput
	ToParameterMapOutputWithContext(context.Context) ParameterMapOutput
}

type ParameterMap map[string]ParameterInput

func (ParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Parameter)(nil)).Elem()
}

func (i ParameterMap) ToParameterMapOutput() ParameterMapOutput {
	return i.ToParameterMapOutputWithContext(context.Background())
}

func (i ParameterMap) ToParameterMapOutputWithContext(ctx context.Context) ParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterMapOutput)
}

type ParameterOutput struct{ *pulumi.OutputState }

func (ParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Parameter)(nil)).Elem()
}

func (o ParameterOutput) ToParameterOutput() ParameterOutput {
	return o
}

func (o ParameterOutput) ToParameterOutputWithContext(ctx context.Context) ParameterOutput {
	return o
}

func (o ParameterOutput) AllowedPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringPtrOutput { return v.AllowedPattern }).(pulumi.StringPtrOutput)
}

func (o ParameterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ParameterOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.DataType }).(pulumi.StringOutput)
}

func (o ParameterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ParameterOutput) InsecureValue() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.InsecureValue }).(pulumi.StringOutput)
}

func (o ParameterOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

func (o ParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ParameterOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Parameter) pulumi.BoolPtrOutput { return v.Overwrite }).(pulumi.BoolPtrOutput)
}

func (o ParameterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ParameterOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ParameterOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringPtrOutput { return v.Tier }).(pulumi.StringPtrOutput)
}

func (o ParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o ParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

func (o ParameterOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *Parameter) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ParameterArrayOutput struct{ *pulumi.OutputState }

func (ParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Parameter)(nil)).Elem()
}

func (o ParameterArrayOutput) ToParameterArrayOutput() ParameterArrayOutput {
	return o
}

func (o ParameterArrayOutput) ToParameterArrayOutputWithContext(ctx context.Context) ParameterArrayOutput {
	return o
}

func (o ParameterArrayOutput) Index(i pulumi.IntInput) ParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Parameter {
		return vs[0].([]*Parameter)[vs[1].(int)]
	}).(ParameterOutput)
}

type ParameterMapOutput struct{ *pulumi.OutputState }

func (ParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Parameter)(nil)).Elem()
}

func (o ParameterMapOutput) ToParameterMapOutput() ParameterMapOutput {
	return o
}

func (o ParameterMapOutput) ToParameterMapOutputWithContext(ctx context.Context) ParameterMapOutput {
	return o
}

func (o ParameterMapOutput) MapIndex(k pulumi.StringInput) ParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Parameter {
		return vs[0].(map[string]*Parameter)[vs[1].(string)]
	}).(ParameterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterInput)(nil)).Elem(), &Parameter{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterArrayInput)(nil)).Elem(), ParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterMapInput)(nil)).Elem(), ParameterMap{})
	pulumi.RegisterOutputType(ParameterOutput{})
	pulumi.RegisterOutputType(ParameterArrayOutput{})
	pulumi.RegisterOutputType(ParameterMapOutput{})
}
