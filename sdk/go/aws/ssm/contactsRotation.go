// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewContactsRotation(ctx, "example", &ssm.ContactsRotationArgs{
//				ContactIds: pulumi.StringArray{
//					aws_ssmcontacts_contact.Example.Arn,
//				},
//				Recurrence: &ssm.ContactsRotationRecurrenceArgs{
//					NumberOfOnCalls:      pulumi.Int(1),
//					RecurrenceMultiplier: pulumi.Int(1),
//					DailySettings: ssm.ContactsRotationRecurrenceDailySettingArray{
//						&ssm.ContactsRotationRecurrenceDailySettingArgs{
//							HourOfDay:    pulumi.Int(9),
//							MinuteOfHour: pulumi.Int(0),
//						},
//					},
//				},
//				TimeZoneId: pulumi.String("Australia/Sydney"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				aws_ssmincidents_replication_set.Example,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Usage with Weekly Settings and Shift Coverages Fields
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewContactsRotation(ctx, "example", &ssm.ContactsRotationArgs{
//				ContactIds: pulumi.StringArray{
//					aws_ssmcontacts_contact.Example.Arn,
//				},
//				Recurrence: &ssm.ContactsRotationRecurrenceArgs{
//					NumberOfOnCalls:      pulumi.Int(1),
//					RecurrenceMultiplier: pulumi.Int(1),
//					WeeklySettings: ssm.ContactsRotationRecurrenceWeeklySettingArray{
//						&ssm.ContactsRotationRecurrenceWeeklySettingArgs{
//							DayOfWeek: pulumi.String("WED"),
//							HandOffTime: &ssm.ContactsRotationRecurrenceWeeklySettingHandOffTimeArgs{
//								HourOfDay:    pulumi.Int(4),
//								MinuteOfHour: pulumi.Int(25),
//							},
//						},
//						&ssm.ContactsRotationRecurrenceWeeklySettingArgs{
//							DayOfWeek: pulumi.String("FRI"),
//							HandOffTime: &ssm.ContactsRotationRecurrenceWeeklySettingHandOffTimeArgs{
//								HourOfDay:    pulumi.Int(15),
//								MinuteOfHour: pulumi.Int(57),
//							},
//						},
//					},
//					ShiftCoverages: ssm.ContactsRotationRecurrenceShiftCoverageArray{
//						&ssm.ContactsRotationRecurrenceShiftCoverageArgs{
//							MapBlockKey: pulumi.String("MON"),
//							CoverageTimes: ssm.ContactsRotationRecurrenceShiftCoverageCoverageTimeArray{
//								&ssm.ContactsRotationRecurrenceShiftCoverageCoverageTimeArgs{
//									Start: &ssm.ContactsRotationRecurrenceShiftCoverageCoverageTimeStartArgs{
//										HourOfDay:    pulumi.Int(1),
//										MinuteOfHour: pulumi.Int(0),
//									},
//									End: &ssm.ContactsRotationRecurrenceShiftCoverageCoverageTimeEndArgs{
//										HourOfDay:    pulumi.Int(23),
//										MinuteOfHour: pulumi.Int(0),
//									},
//								},
//							},
//						},
//					},
//				},
//				StartTime:  pulumi.String("2023-07-20T02:21:49+00:00"),
//				TimeZoneId: pulumi.String("Australia/Sydney"),
//				Tags: pulumi.StringMap{
//					"key1": pulumi.String("tag1"),
//					"key2": pulumi.String("tag2"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				aws_ssmincidents_replication_set.Example,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Usage with Monthly Settings Fields
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewContactsRotation(ctx, "example", &ssm.ContactsRotationArgs{
//				ContactIds: pulumi.StringArray{
//					aws_ssmcontacts_contact.Example.Arn,
//				},
//				Recurrence: &ssm.ContactsRotationRecurrenceArgs{
//					NumberOfOnCalls:      pulumi.Int(1),
//					RecurrenceMultiplier: pulumi.Int(1),
//					MonthlySettings: ssm.ContactsRotationRecurrenceMonthlySettingArray{
//						&ssm.ContactsRotationRecurrenceMonthlySettingArgs{
//							DayOfMonth: pulumi.Int(20),
//							HandOffTime: &ssm.ContactsRotationRecurrenceMonthlySettingHandOffTimeArgs{
//								HourOfDay:    pulumi.Int(8),
//								MinuteOfHour: pulumi.Int(0),
//							},
//						},
//						&ssm.ContactsRotationRecurrenceMonthlySettingArgs{
//							DayOfMonth: pulumi.Int(13),
//							HandOffTime: &ssm.ContactsRotationRecurrenceMonthlySettingHandOffTimeArgs{
//								HourOfDay:    pulumi.Int(12),
//								MinuteOfHour: pulumi.Int(34),
//							},
//						},
//					},
//				},
//				TimeZoneId: pulumi.String("Australia/Sydney"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				aws_ssmincidents_replication_set.Example,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import CodeGuru Profiler Profiling Group using the `arn`. For example:
//
// ```sh
//
//	$ pulumi import aws:ssm/contactsRotation:ContactsRotation example arn:aws:ssm-contacts:us-east-1:012345678910:rotation/example
//
// ```
type ContactsRotation struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the rotation.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
	ContactIds pulumi.StringArrayOutput `pulumi:"contactIds"`
	// The name for the rotation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `dailySettings`, `monthlySettings`, or `weeklySettings` must be populated. See Recurrence for more details.
	//
	// The following arguments are optional:
	Recurrence ContactsRotationRecurrencePtrOutput `pulumi:"recurrence"`
	// The date and time, in RFC 3339 format, that the rotation goes into effect.
	StartTime pulumi.StringPtrOutput `pulumi:"startTime"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
	TimeZoneId pulumi.StringOutput `pulumi:"timeZoneId"`
}

// NewContactsRotation registers a new resource with the given unique name, arguments, and options.
func NewContactsRotation(ctx *pulumi.Context,
	name string, args *ContactsRotationArgs, opts ...pulumi.ResourceOption) (*ContactsRotation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContactIds == nil {
		return nil, errors.New("invalid value for required argument 'ContactIds'")
	}
	if args.TimeZoneId == nil {
		return nil, errors.New("invalid value for required argument 'TimeZoneId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContactsRotation
	err := ctx.RegisterResource("aws:ssm/contactsRotation:ContactsRotation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContactsRotation gets an existing ContactsRotation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContactsRotation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactsRotationState, opts ...pulumi.ResourceOption) (*ContactsRotation, error) {
	var resource ContactsRotation
	err := ctx.ReadResource("aws:ssm/contactsRotation:ContactsRotation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContactsRotation resources.
type contactsRotationState struct {
	// The Amazon Resource Name (ARN) of the rotation.
	Arn *string `pulumi:"arn"`
	// Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
	ContactIds []string `pulumi:"contactIds"`
	// The name for the rotation.
	Name *string `pulumi:"name"`
	// Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `dailySettings`, `monthlySettings`, or `weeklySettings` must be populated. See Recurrence for more details.
	//
	// The following arguments are optional:
	Recurrence *ContactsRotationRecurrence `pulumi:"recurrence"`
	// The date and time, in RFC 3339 format, that the rotation goes into effect.
	StartTime *string `pulumi:"startTime"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
	TimeZoneId *string `pulumi:"timeZoneId"`
}

type ContactsRotationState struct {
	// The Amazon Resource Name (ARN) of the rotation.
	Arn pulumi.StringPtrInput
	// Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
	ContactIds pulumi.StringArrayInput
	// The name for the rotation.
	Name pulumi.StringPtrInput
	// Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `dailySettings`, `monthlySettings`, or `weeklySettings` must be populated. See Recurrence for more details.
	//
	// The following arguments are optional:
	Recurrence ContactsRotationRecurrencePtrInput
	// The date and time, in RFC 3339 format, that the rotation goes into effect.
	StartTime pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
	TimeZoneId pulumi.StringPtrInput
}

func (ContactsRotationState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactsRotationState)(nil)).Elem()
}

type contactsRotationArgs struct {
	// Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
	ContactIds []string `pulumi:"contactIds"`
	// The name for the rotation.
	Name *string `pulumi:"name"`
	// Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `dailySettings`, `monthlySettings`, or `weeklySettings` must be populated. See Recurrence for more details.
	//
	// The following arguments are optional:
	Recurrence *ContactsRotationRecurrence `pulumi:"recurrence"`
	// The date and time, in RFC 3339 format, that the rotation goes into effect.
	StartTime *string `pulumi:"startTime"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
	TimeZoneId string `pulumi:"timeZoneId"`
}

// The set of arguments for constructing a ContactsRotation resource.
type ContactsRotationArgs struct {
	// Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
	ContactIds pulumi.StringArrayInput
	// The name for the rotation.
	Name pulumi.StringPtrInput
	// Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `dailySettings`, `monthlySettings`, or `weeklySettings` must be populated. See Recurrence for more details.
	//
	// The following arguments are optional:
	Recurrence ContactsRotationRecurrencePtrInput
	// The date and time, in RFC 3339 format, that the rotation goes into effect.
	StartTime pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
	TimeZoneId pulumi.StringInput
}

func (ContactsRotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactsRotationArgs)(nil)).Elem()
}

type ContactsRotationInput interface {
	pulumi.Input

	ToContactsRotationOutput() ContactsRotationOutput
	ToContactsRotationOutputWithContext(ctx context.Context) ContactsRotationOutput
}

func (*ContactsRotation) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactsRotation)(nil)).Elem()
}

func (i *ContactsRotation) ToContactsRotationOutput() ContactsRotationOutput {
	return i.ToContactsRotationOutputWithContext(context.Background())
}

func (i *ContactsRotation) ToContactsRotationOutputWithContext(ctx context.Context) ContactsRotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsRotationOutput)
}

// ContactsRotationArrayInput is an input type that accepts ContactsRotationArray and ContactsRotationArrayOutput values.
// You can construct a concrete instance of `ContactsRotationArrayInput` via:
//
//	ContactsRotationArray{ ContactsRotationArgs{...} }
type ContactsRotationArrayInput interface {
	pulumi.Input

	ToContactsRotationArrayOutput() ContactsRotationArrayOutput
	ToContactsRotationArrayOutputWithContext(context.Context) ContactsRotationArrayOutput
}

type ContactsRotationArray []ContactsRotationInput

func (ContactsRotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactsRotation)(nil)).Elem()
}

func (i ContactsRotationArray) ToContactsRotationArrayOutput() ContactsRotationArrayOutput {
	return i.ToContactsRotationArrayOutputWithContext(context.Background())
}

func (i ContactsRotationArray) ToContactsRotationArrayOutputWithContext(ctx context.Context) ContactsRotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsRotationArrayOutput)
}

// ContactsRotationMapInput is an input type that accepts ContactsRotationMap and ContactsRotationMapOutput values.
// You can construct a concrete instance of `ContactsRotationMapInput` via:
//
//	ContactsRotationMap{ "key": ContactsRotationArgs{...} }
type ContactsRotationMapInput interface {
	pulumi.Input

	ToContactsRotationMapOutput() ContactsRotationMapOutput
	ToContactsRotationMapOutputWithContext(context.Context) ContactsRotationMapOutput
}

type ContactsRotationMap map[string]ContactsRotationInput

func (ContactsRotationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactsRotation)(nil)).Elem()
}

func (i ContactsRotationMap) ToContactsRotationMapOutput() ContactsRotationMapOutput {
	return i.ToContactsRotationMapOutputWithContext(context.Background())
}

func (i ContactsRotationMap) ToContactsRotationMapOutputWithContext(ctx context.Context) ContactsRotationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsRotationMapOutput)
}

type ContactsRotationOutput struct{ *pulumi.OutputState }

func (ContactsRotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactsRotation)(nil)).Elem()
}

func (o ContactsRotationOutput) ToContactsRotationOutput() ContactsRotationOutput {
	return o
}

func (o ContactsRotationOutput) ToContactsRotationOutputWithContext(ctx context.Context) ContactsRotationOutput {
	return o
}

// The Amazon Resource Name (ARN) of the rotation.
func (o ContactsRotationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactsRotation) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
func (o ContactsRotationOutput) ContactIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContactsRotation) pulumi.StringArrayOutput { return v.ContactIds }).(pulumi.StringArrayOutput)
}

// The name for the rotation.
func (o ContactsRotationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactsRotation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `dailySettings`, `monthlySettings`, or `weeklySettings` must be populated. See Recurrence for more details.
//
// The following arguments are optional:
func (o ContactsRotationOutput) Recurrence() ContactsRotationRecurrencePtrOutput {
	return o.ApplyT(func(v *ContactsRotation) ContactsRotationRecurrencePtrOutput { return v.Recurrence }).(ContactsRotationRecurrencePtrOutput)
}

// The date and time, in RFC 3339 format, that the rotation goes into effect.
func (o ContactsRotationOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactsRotation) pulumi.StringPtrOutput { return v.StartTime }).(pulumi.StringPtrOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ContactsRotationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContactsRotation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ContactsRotationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContactsRotation) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
func (o ContactsRotationOutput) TimeZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactsRotation) pulumi.StringOutput { return v.TimeZoneId }).(pulumi.StringOutput)
}

type ContactsRotationArrayOutput struct{ *pulumi.OutputState }

func (ContactsRotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactsRotation)(nil)).Elem()
}

func (o ContactsRotationArrayOutput) ToContactsRotationArrayOutput() ContactsRotationArrayOutput {
	return o
}

func (o ContactsRotationArrayOutput) ToContactsRotationArrayOutputWithContext(ctx context.Context) ContactsRotationArrayOutput {
	return o
}

func (o ContactsRotationArrayOutput) Index(i pulumi.IntInput) ContactsRotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContactsRotation {
		return vs[0].([]*ContactsRotation)[vs[1].(int)]
	}).(ContactsRotationOutput)
}

type ContactsRotationMapOutput struct{ *pulumi.OutputState }

func (ContactsRotationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactsRotation)(nil)).Elem()
}

func (o ContactsRotationMapOutput) ToContactsRotationMapOutput() ContactsRotationMapOutput {
	return o
}

func (o ContactsRotationMapOutput) ToContactsRotationMapOutputWithContext(ctx context.Context) ContactsRotationMapOutput {
	return o
}

func (o ContactsRotationMapOutput) MapIndex(k pulumi.StringInput) ContactsRotationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContactsRotation {
		return vs[0].(map[string]*ContactsRotation)[vs[1].(string)]
	}).(ContactsRotationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsRotationInput)(nil)).Elem(), &ContactsRotation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsRotationArrayInput)(nil)).Elem(), ContactsRotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsRotationMapInput)(nil)).Elem(), ContactsRotationMap{})
	pulumi.RegisterOutputType(ContactsRotationOutput{})
	pulumi.RegisterOutputType(ContactsRotationArrayOutput{})
	pulumi.RegisterOutputType(ContactsRotationMapOutput{})
}
