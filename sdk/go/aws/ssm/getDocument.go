// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the contents of the specified Systems Manager document.
//
// ## Example Usage
//
// To get the contents of the document owned by AWS.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := ssm.LookupDocument(ctx, &ssm.LookupDocumentArgs{
//				Name:           "AWS-GatherSoftwareInventory",
//				DocumentFormat: pulumi.StringRef("YAML"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("content", foo.Content)
//			return nil
//		})
//	}
//
// ```
//
// To get the contents of the custom document.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.LookupDocument(ctx, &ssm.LookupDocumentArgs{
//				Name:           testAwsSsmDocument.Name,
//				DocumentFormat: pulumi.StringRef("JSON"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDocument(ctx *pulumi.Context, args *LookupDocumentArgs, opts ...pulumi.InvokeOption) (*LookupDocumentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDocumentResult
	err := ctx.Invoke("aws:ssm/getDocument:getDocument", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDocument.
type LookupDocumentArgs struct {
	// The format of the document. Valid values: `JSON`, `TEXT`, `YAML`.
	DocumentFormat *string `pulumi:"documentFormat"`
	// The document version.
	DocumentVersion *string `pulumi:"documentVersion"`
	// The name of the document.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDocument.
type LookupDocumentResult struct {
	// ARN of the document. If the document is an AWS managed document, this value will be set to the name of the document instead.
	Arn string `pulumi:"arn"`
	// The content for the SSM document in JSON or YAML format.
	Content        string  `pulumi:"content"`
	DocumentFormat *string `pulumi:"documentFormat"`
	// The type of the document.
	DocumentType    string  `pulumi:"documentType"`
	DocumentVersion *string `pulumi:"documentVersion"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func LookupDocumentOutput(ctx *pulumi.Context, args LookupDocumentOutputArgs, opts ...pulumi.InvokeOption) LookupDocumentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDocumentResultOutput, error) {
			args := v.(LookupDocumentArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupDocumentResult
			secret, err := ctx.InvokePackageRaw("aws:ssm/getDocument:getDocument", args, &rv, "", opts...)
			if err != nil {
				return LookupDocumentResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupDocumentResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupDocumentResultOutput), nil
			}
			return output, nil
		}).(LookupDocumentResultOutput)
}

// A collection of arguments for invoking getDocument.
type LookupDocumentOutputArgs struct {
	// The format of the document. Valid values: `JSON`, `TEXT`, `YAML`.
	DocumentFormat pulumi.StringPtrInput `pulumi:"documentFormat"`
	// The document version.
	DocumentVersion pulumi.StringPtrInput `pulumi:"documentVersion"`
	// The name of the document.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDocumentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDocumentArgs)(nil)).Elem()
}

// A collection of values returned by getDocument.
type LookupDocumentResultOutput struct{ *pulumi.OutputState }

func (LookupDocumentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDocumentResult)(nil)).Elem()
}

func (o LookupDocumentResultOutput) ToLookupDocumentResultOutput() LookupDocumentResultOutput {
	return o
}

func (o LookupDocumentResultOutput) ToLookupDocumentResultOutputWithContext(ctx context.Context) LookupDocumentResultOutput {
	return o
}

// ARN of the document. If the document is an AWS managed document, this value will be set to the name of the document instead.
func (o LookupDocumentResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.Arn }).(pulumi.StringOutput)
}

// The content for the SSM document in JSON or YAML format.
func (o LookupDocumentResultOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.Content }).(pulumi.StringOutput)
}

func (o LookupDocumentResultOutput) DocumentFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDocumentResult) *string { return v.DocumentFormat }).(pulumi.StringPtrOutput)
}

// The type of the document.
func (o LookupDocumentResultOutput) DocumentType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.DocumentType }).(pulumi.StringOutput)
}

func (o LookupDocumentResultOutput) DocumentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDocumentResult) *string { return v.DocumentVersion }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDocumentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDocumentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDocumentResultOutput{})
}
