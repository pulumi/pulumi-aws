// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an SSM Maintenance Window resource
type MaintenanceWindow struct {
	s *pulumi.ResourceState
}

// NewMaintenanceWindow registers a new resource with the given unique name, arguments, and options.
func NewMaintenanceWindow(ctx *pulumi.Context,
	name string, args *MaintenanceWindowArgs, opts ...pulumi.ResourceOpt) (*MaintenanceWindow, error) {
	if args == nil || args.Cutoff == nil {
		return nil, errors.New("missing required argument 'Cutoff'")
	}
	if args == nil || args.Duration == nil {
		return nil, errors.New("missing required argument 'Duration'")
	}
	if args == nil || args.Schedule == nil {
		return nil, errors.New("missing required argument 'Schedule'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowUnassociatedTargets"] = nil
		inputs["cutoff"] = nil
		inputs["duration"] = nil
		inputs["enabled"] = nil
		inputs["name"] = nil
		inputs["schedule"] = nil
	} else {
		inputs["allowUnassociatedTargets"] = args.AllowUnassociatedTargets
		inputs["cutoff"] = args.Cutoff
		inputs["duration"] = args.Duration
		inputs["enabled"] = args.Enabled
		inputs["name"] = args.Name
		inputs["schedule"] = args.Schedule
	}
	s, err := ctx.RegisterResource("aws:ssm/maintenanceWindow:MaintenanceWindow", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MaintenanceWindow{s: s}, nil
}

// GetMaintenanceWindow gets an existing MaintenanceWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenanceWindow(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MaintenanceWindowState, opts ...pulumi.ResourceOpt) (*MaintenanceWindow, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowUnassociatedTargets"] = state.AllowUnassociatedTargets
		inputs["cutoff"] = state.Cutoff
		inputs["duration"] = state.Duration
		inputs["enabled"] = state.Enabled
		inputs["name"] = state.Name
		inputs["schedule"] = state.Schedule
	}
	s, err := ctx.ReadResource("aws:ssm/maintenanceWindow:MaintenanceWindow", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MaintenanceWindow{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *MaintenanceWindow) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *MaintenanceWindow) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
func (r *MaintenanceWindow) AllowUnassociatedTargets() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowUnassociatedTargets"])
}

// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
func (r *MaintenanceWindow) Cutoff() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["cutoff"])
}

// The duration of the Maintenance Window in hours.
func (r *MaintenanceWindow) Duration() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["duration"])
}

func (r *MaintenanceWindow) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// The name of the maintenance window.
func (r *MaintenanceWindow) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The schedule of the Maintenance Window in the form of a [cron](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-cron.html) or rate expression.
func (r *MaintenanceWindow) Schedule() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["schedule"])
}

// Input properties used for looking up and filtering MaintenanceWindow resources.
type MaintenanceWindowState struct {
	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	AllowUnassociatedTargets interface{}
	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	Cutoff interface{}
	// The duration of the Maintenance Window in hours.
	Duration interface{}
	Enabled interface{}
	// The name of the maintenance window.
	Name interface{}
	// The schedule of the Maintenance Window in the form of a [cron](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-cron.html) or rate expression.
	Schedule interface{}
}

// The set of arguments for constructing a MaintenanceWindow resource.
type MaintenanceWindowArgs struct {
	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	AllowUnassociatedTargets interface{}
	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	Cutoff interface{}
	// The duration of the Maintenance Window in hours.
	Duration interface{}
	Enabled interface{}
	// The name of the maintenance window.
	Name interface{}
	// The schedule of the Maintenance Window in the form of a [cron](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-cron.html) or rate expression.
	Schedule interface{}
}
