// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MaintenanceWindow struct {
	pulumi.CustomResourceState

	AllowUnassociatedTargets pulumi.BoolPtrOutput   `pulumi:"allowUnassociatedTargets"`
	Cutoff                   pulumi.IntOutput       `pulumi:"cutoff"`
	Description              pulumi.StringPtrOutput `pulumi:"description"`
	Duration                 pulumi.IntOutput       `pulumi:"duration"`
	Enabled                  pulumi.BoolPtrOutput   `pulumi:"enabled"`
	EndDate                  pulumi.StringPtrOutput `pulumi:"endDate"`
	Name                     pulumi.StringOutput    `pulumi:"name"`
	Schedule                 pulumi.StringOutput    `pulumi:"schedule"`
	ScheduleOffset           pulumi.IntPtrOutput    `pulumi:"scheduleOffset"`
	ScheduleTimezone         pulumi.StringPtrOutput `pulumi:"scheduleTimezone"`
	StartDate                pulumi.StringPtrOutput `pulumi:"startDate"`
	Tags                     pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                  pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewMaintenanceWindow registers a new resource with the given unique name, arguments, and options.
func NewMaintenanceWindow(ctx *pulumi.Context,
	name string, args *MaintenanceWindowArgs, opts ...pulumi.ResourceOption) (*MaintenanceWindow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cutoff == nil {
		return nil, errors.New("invalid value for required argument 'Cutoff'")
	}
	if args.Duration == nil {
		return nil, errors.New("invalid value for required argument 'Duration'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	var resource MaintenanceWindow
	err := ctx.RegisterResource("aws:ssm/maintenanceWindow:MaintenanceWindow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenanceWindow gets an existing MaintenanceWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenanceWindow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaintenanceWindowState, opts ...pulumi.ResourceOption) (*MaintenanceWindow, error) {
	var resource MaintenanceWindow
	err := ctx.ReadResource("aws:ssm/maintenanceWindow:MaintenanceWindow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaintenanceWindow resources.
type maintenanceWindowState struct {
	AllowUnassociatedTargets *bool             `pulumi:"allowUnassociatedTargets"`
	Cutoff                   *int              `pulumi:"cutoff"`
	Description              *string           `pulumi:"description"`
	Duration                 *int              `pulumi:"duration"`
	Enabled                  *bool             `pulumi:"enabled"`
	EndDate                  *string           `pulumi:"endDate"`
	Name                     *string           `pulumi:"name"`
	Schedule                 *string           `pulumi:"schedule"`
	ScheduleOffset           *int              `pulumi:"scheduleOffset"`
	ScheduleTimezone         *string           `pulumi:"scheduleTimezone"`
	StartDate                *string           `pulumi:"startDate"`
	Tags                     map[string]string `pulumi:"tags"`
	TagsAll                  map[string]string `pulumi:"tagsAll"`
}

type MaintenanceWindowState struct {
	AllowUnassociatedTargets pulumi.BoolPtrInput
	Cutoff                   pulumi.IntPtrInput
	Description              pulumi.StringPtrInput
	Duration                 pulumi.IntPtrInput
	Enabled                  pulumi.BoolPtrInput
	EndDate                  pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	Schedule                 pulumi.StringPtrInput
	ScheduleOffset           pulumi.IntPtrInput
	ScheduleTimezone         pulumi.StringPtrInput
	StartDate                pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
	TagsAll                  pulumi.StringMapInput
}

func (MaintenanceWindowState) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowState)(nil)).Elem()
}

type maintenanceWindowArgs struct {
	AllowUnassociatedTargets *bool             `pulumi:"allowUnassociatedTargets"`
	Cutoff                   int               `pulumi:"cutoff"`
	Description              *string           `pulumi:"description"`
	Duration                 int               `pulumi:"duration"`
	Enabled                  *bool             `pulumi:"enabled"`
	EndDate                  *string           `pulumi:"endDate"`
	Name                     *string           `pulumi:"name"`
	Schedule                 string            `pulumi:"schedule"`
	ScheduleOffset           *int              `pulumi:"scheduleOffset"`
	ScheduleTimezone         *string           `pulumi:"scheduleTimezone"`
	StartDate                *string           `pulumi:"startDate"`
	Tags                     map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a MaintenanceWindow resource.
type MaintenanceWindowArgs struct {
	AllowUnassociatedTargets pulumi.BoolPtrInput
	Cutoff                   pulumi.IntInput
	Description              pulumi.StringPtrInput
	Duration                 pulumi.IntInput
	Enabled                  pulumi.BoolPtrInput
	EndDate                  pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	Schedule                 pulumi.StringInput
	ScheduleOffset           pulumi.IntPtrInput
	ScheduleTimezone         pulumi.StringPtrInput
	StartDate                pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowArgs)(nil)).Elem()
}

type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput
}

func (*MaintenanceWindow) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *MaintenanceWindow) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i *MaintenanceWindow) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

// MaintenanceWindowArrayInput is an input type that accepts MaintenanceWindowArray and MaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `MaintenanceWindowArrayInput` via:
//
//	MaintenanceWindowArray{ MaintenanceWindowArgs{...} }
type MaintenanceWindowArrayInput interface {
	pulumi.Input

	ToMaintenanceWindowArrayOutput() MaintenanceWindowArrayOutput
	ToMaintenanceWindowArrayOutputWithContext(context.Context) MaintenanceWindowArrayOutput
}

type MaintenanceWindowArray []MaintenanceWindowInput

func (MaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArray) ToMaintenanceWindowArrayOutput() MaintenanceWindowArrayOutput {
	return i.ToMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i MaintenanceWindowArray) ToMaintenanceWindowArrayOutputWithContext(ctx context.Context) MaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowArrayOutput)
}

// MaintenanceWindowMapInput is an input type that accepts MaintenanceWindowMap and MaintenanceWindowMapOutput values.
// You can construct a concrete instance of `MaintenanceWindowMapInput` via:
//
//	MaintenanceWindowMap{ "key": MaintenanceWindowArgs{...} }
type MaintenanceWindowMapInput interface {
	pulumi.Input

	ToMaintenanceWindowMapOutput() MaintenanceWindowMapOutput
	ToMaintenanceWindowMapOutputWithContext(context.Context) MaintenanceWindowMapOutput
}

type MaintenanceWindowMap map[string]MaintenanceWindowInput

func (MaintenanceWindowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowMap) ToMaintenanceWindowMapOutput() MaintenanceWindowMapOutput {
	return i.ToMaintenanceWindowMapOutputWithContext(context.Background())
}

func (i MaintenanceWindowMap) ToMaintenanceWindowMapOutputWithContext(ctx context.Context) MaintenanceWindowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowMapOutput)
}

type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) AllowUnassociatedTargets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.BoolPtrOutput { return v.AllowUnassociatedTargets }).(pulumi.BoolPtrOutput)
}

func (o MaintenanceWindowOutput) Cutoff() pulumi.IntOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.IntOutput { return v.Cutoff }).(pulumi.IntOutput)
}

func (o MaintenanceWindowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MaintenanceWindowOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.IntOutput { return v.Duration }).(pulumi.IntOutput)
}

func (o MaintenanceWindowOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o MaintenanceWindowOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringPtrOutput { return v.EndDate }).(pulumi.StringPtrOutput)
}

func (o MaintenanceWindowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MaintenanceWindowOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

func (o MaintenanceWindowOutput) ScheduleOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.IntPtrOutput { return v.ScheduleOffset }).(pulumi.IntPtrOutput)
}

func (o MaintenanceWindowOutput) ScheduleTimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringPtrOutput { return v.ScheduleTimezone }).(pulumi.StringPtrOutput)
}

func (o MaintenanceWindowOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringPtrOutput { return v.StartDate }).(pulumi.StringPtrOutput)
}

func (o MaintenanceWindowOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o MaintenanceWindowOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MaintenanceWindow) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type MaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowArrayOutput) ToMaintenanceWindowArrayOutput() MaintenanceWindowArrayOutput {
	return o
}

func (o MaintenanceWindowArrayOutput) ToMaintenanceWindowArrayOutputWithContext(ctx context.Context) MaintenanceWindowArrayOutput {
	return o
}

func (o MaintenanceWindowArrayOutput) Index(i pulumi.IntInput) MaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MaintenanceWindow {
		return vs[0].([]*MaintenanceWindow)[vs[1].(int)]
	}).(MaintenanceWindowOutput)
}

type MaintenanceWindowMapOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowMapOutput) ToMaintenanceWindowMapOutput() MaintenanceWindowMapOutput {
	return o
}

func (o MaintenanceWindowMapOutput) ToMaintenanceWindowMapOutputWithContext(ctx context.Context) MaintenanceWindowMapOutput {
	return o
}

func (o MaintenanceWindowMapOutput) MapIndex(k pulumi.StringInput) MaintenanceWindowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MaintenanceWindow {
		return vs[0].(map[string]*MaintenanceWindow)[vs[1].(string)]
	}).(MaintenanceWindowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowInput)(nil)).Elem(), &MaintenanceWindow{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowArrayInput)(nil)).Elem(), MaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowMapInput)(nil)).Elem(), MaintenanceWindowMap{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowMapOutput{})
}
