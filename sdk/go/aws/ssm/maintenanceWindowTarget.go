// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MaintenanceWindowTarget struct {
	pulumi.CustomResourceState

	Description      pulumi.StringPtrOutput                   `pulumi:"description"`
	Name             pulumi.StringOutput                      `pulumi:"name"`
	OwnerInformation pulumi.StringPtrOutput                   `pulumi:"ownerInformation"`
	ResourceType     pulumi.StringOutput                      `pulumi:"resourceType"`
	Targets          MaintenanceWindowTargetTargetArrayOutput `pulumi:"targets"`
	WindowId         pulumi.StringOutput                      `pulumi:"windowId"`
}

// NewMaintenanceWindowTarget registers a new resource with the given unique name, arguments, and options.
func NewMaintenanceWindowTarget(ctx *pulumi.Context,
	name string, args *MaintenanceWindowTargetArgs, opts ...pulumi.ResourceOption) (*MaintenanceWindowTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	if args.WindowId == nil {
		return nil, errors.New("invalid value for required argument 'WindowId'")
	}
	var resource MaintenanceWindowTarget
	err := ctx.RegisterResource("aws:ssm/maintenanceWindowTarget:MaintenanceWindowTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenanceWindowTarget gets an existing MaintenanceWindowTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenanceWindowTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaintenanceWindowTargetState, opts ...pulumi.ResourceOption) (*MaintenanceWindowTarget, error) {
	var resource MaintenanceWindowTarget
	err := ctx.ReadResource("aws:ssm/maintenanceWindowTarget:MaintenanceWindowTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaintenanceWindowTarget resources.
type maintenanceWindowTargetState struct {
	Description      *string                         `pulumi:"description"`
	Name             *string                         `pulumi:"name"`
	OwnerInformation *string                         `pulumi:"ownerInformation"`
	ResourceType     *string                         `pulumi:"resourceType"`
	Targets          []MaintenanceWindowTargetTarget `pulumi:"targets"`
	WindowId         *string                         `pulumi:"windowId"`
}

type MaintenanceWindowTargetState struct {
	Description      pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	OwnerInformation pulumi.StringPtrInput
	ResourceType     pulumi.StringPtrInput
	Targets          MaintenanceWindowTargetTargetArrayInput
	WindowId         pulumi.StringPtrInput
}

func (MaintenanceWindowTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowTargetState)(nil)).Elem()
}

type maintenanceWindowTargetArgs struct {
	Description      *string                         `pulumi:"description"`
	Name             *string                         `pulumi:"name"`
	OwnerInformation *string                         `pulumi:"ownerInformation"`
	ResourceType     string                          `pulumi:"resourceType"`
	Targets          []MaintenanceWindowTargetTarget `pulumi:"targets"`
	WindowId         string                          `pulumi:"windowId"`
}

// The set of arguments for constructing a MaintenanceWindowTarget resource.
type MaintenanceWindowTargetArgs struct {
	Description      pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	OwnerInformation pulumi.StringPtrInput
	ResourceType     pulumi.StringInput
	Targets          MaintenanceWindowTargetTargetArrayInput
	WindowId         pulumi.StringInput
}

func (MaintenanceWindowTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowTargetArgs)(nil)).Elem()
}

type MaintenanceWindowTargetInput interface {
	pulumi.Input

	ToMaintenanceWindowTargetOutput() MaintenanceWindowTargetOutput
	ToMaintenanceWindowTargetOutputWithContext(ctx context.Context) MaintenanceWindowTargetOutput
}

func (*MaintenanceWindowTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindowTarget)(nil)).Elem()
}

func (i *MaintenanceWindowTarget) ToMaintenanceWindowTargetOutput() MaintenanceWindowTargetOutput {
	return i.ToMaintenanceWindowTargetOutputWithContext(context.Background())
}

func (i *MaintenanceWindowTarget) ToMaintenanceWindowTargetOutputWithContext(ctx context.Context) MaintenanceWindowTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTargetOutput)
}

// MaintenanceWindowTargetArrayInput is an input type that accepts MaintenanceWindowTargetArray and MaintenanceWindowTargetArrayOutput values.
// You can construct a concrete instance of `MaintenanceWindowTargetArrayInput` via:
//
//	MaintenanceWindowTargetArray{ MaintenanceWindowTargetArgs{...} }
type MaintenanceWindowTargetArrayInput interface {
	pulumi.Input

	ToMaintenanceWindowTargetArrayOutput() MaintenanceWindowTargetArrayOutput
	ToMaintenanceWindowTargetArrayOutputWithContext(context.Context) MaintenanceWindowTargetArrayOutput
}

type MaintenanceWindowTargetArray []MaintenanceWindowTargetInput

func (MaintenanceWindowTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaintenanceWindowTarget)(nil)).Elem()
}

func (i MaintenanceWindowTargetArray) ToMaintenanceWindowTargetArrayOutput() MaintenanceWindowTargetArrayOutput {
	return i.ToMaintenanceWindowTargetArrayOutputWithContext(context.Background())
}

func (i MaintenanceWindowTargetArray) ToMaintenanceWindowTargetArrayOutputWithContext(ctx context.Context) MaintenanceWindowTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTargetArrayOutput)
}

// MaintenanceWindowTargetMapInput is an input type that accepts MaintenanceWindowTargetMap and MaintenanceWindowTargetMapOutput values.
// You can construct a concrete instance of `MaintenanceWindowTargetMapInput` via:
//
//	MaintenanceWindowTargetMap{ "key": MaintenanceWindowTargetArgs{...} }
type MaintenanceWindowTargetMapInput interface {
	pulumi.Input

	ToMaintenanceWindowTargetMapOutput() MaintenanceWindowTargetMapOutput
	ToMaintenanceWindowTargetMapOutputWithContext(context.Context) MaintenanceWindowTargetMapOutput
}

type MaintenanceWindowTargetMap map[string]MaintenanceWindowTargetInput

func (MaintenanceWindowTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaintenanceWindowTarget)(nil)).Elem()
}

func (i MaintenanceWindowTargetMap) ToMaintenanceWindowTargetMapOutput() MaintenanceWindowTargetMapOutput {
	return i.ToMaintenanceWindowTargetMapOutputWithContext(context.Background())
}

func (i MaintenanceWindowTargetMap) ToMaintenanceWindowTargetMapOutputWithContext(ctx context.Context) MaintenanceWindowTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTargetMapOutput)
}

type MaintenanceWindowTargetOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindowTarget)(nil)).Elem()
}

func (o MaintenanceWindowTargetOutput) ToMaintenanceWindowTargetOutput() MaintenanceWindowTargetOutput {
	return o
}

func (o MaintenanceWindowTargetOutput) ToMaintenanceWindowTargetOutputWithContext(ctx context.Context) MaintenanceWindowTargetOutput {
	return o
}

func (o MaintenanceWindowTargetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowTarget) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MaintenanceWindowTargetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTarget) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MaintenanceWindowTargetOutput) OwnerInformation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowTarget) pulumi.StringPtrOutput { return v.OwnerInformation }).(pulumi.StringPtrOutput)
}

func (o MaintenanceWindowTargetOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTarget) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

func (o MaintenanceWindowTargetOutput) Targets() MaintenanceWindowTargetTargetArrayOutput {
	return o.ApplyT(func(v *MaintenanceWindowTarget) MaintenanceWindowTargetTargetArrayOutput { return v.Targets }).(MaintenanceWindowTargetTargetArrayOutput)
}

func (o MaintenanceWindowTargetOutput) WindowId() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTarget) pulumi.StringOutput { return v.WindowId }).(pulumi.StringOutput)
}

type MaintenanceWindowTargetArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaintenanceWindowTarget)(nil)).Elem()
}

func (o MaintenanceWindowTargetArrayOutput) ToMaintenanceWindowTargetArrayOutput() MaintenanceWindowTargetArrayOutput {
	return o
}

func (o MaintenanceWindowTargetArrayOutput) ToMaintenanceWindowTargetArrayOutputWithContext(ctx context.Context) MaintenanceWindowTargetArrayOutput {
	return o
}

func (o MaintenanceWindowTargetArrayOutput) Index(i pulumi.IntInput) MaintenanceWindowTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MaintenanceWindowTarget {
		return vs[0].([]*MaintenanceWindowTarget)[vs[1].(int)]
	}).(MaintenanceWindowTargetOutput)
}

type MaintenanceWindowTargetMapOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaintenanceWindowTarget)(nil)).Elem()
}

func (o MaintenanceWindowTargetMapOutput) ToMaintenanceWindowTargetMapOutput() MaintenanceWindowTargetMapOutput {
	return o
}

func (o MaintenanceWindowTargetMapOutput) ToMaintenanceWindowTargetMapOutputWithContext(ctx context.Context) MaintenanceWindowTargetMapOutput {
	return o
}

func (o MaintenanceWindowTargetMapOutput) MapIndex(k pulumi.StringInput) MaintenanceWindowTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MaintenanceWindowTarget {
		return vs[0].(map[string]*MaintenanceWindowTarget)[vs[1].(string)]
	}).(MaintenanceWindowTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowTargetInput)(nil)).Elem(), &MaintenanceWindowTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowTargetArrayInput)(nil)).Elem(), MaintenanceWindowTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowTargetMapInput)(nil)).Elem(), MaintenanceWindowTargetMap{})
	pulumi.RegisterOutputType(MaintenanceWindowTargetOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTargetArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTargetMapOutput{})
}
