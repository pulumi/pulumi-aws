// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Association struct {
	pulumi.CustomResourceState

	ApplyOnlyAtCronInterval       pulumi.BoolPtrOutput   `pulumi:"applyOnlyAtCronInterval"`
	Arn                           pulumi.StringOutput    `pulumi:"arn"`
	AssociationId                 pulumi.StringOutput    `pulumi:"associationId"`
	AssociationName               pulumi.StringPtrOutput `pulumi:"associationName"`
	AutomationTargetParameterName pulumi.StringPtrOutput `pulumi:"automationTargetParameterName"`
	ComplianceSeverity            pulumi.StringPtrOutput `pulumi:"complianceSeverity"`
	DocumentVersion               pulumi.StringOutput    `pulumi:"documentVersion"`
	// Deprecated: use 'targets' argument instead. https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_CreateAssociation.html#systemsmanager-CreateAssociation-request-InstanceId
	InstanceId                   pulumi.StringPtrOutput             `pulumi:"instanceId"`
	MaxConcurrency               pulumi.StringPtrOutput             `pulumi:"maxConcurrency"`
	MaxErrors                    pulumi.StringPtrOutput             `pulumi:"maxErrors"`
	Name                         pulumi.StringOutput                `pulumi:"name"`
	OutputLocation               AssociationOutputLocationPtrOutput `pulumi:"outputLocation"`
	Parameters                   pulumi.StringMapOutput             `pulumi:"parameters"`
	ScheduleExpression           pulumi.StringPtrOutput             `pulumi:"scheduleExpression"`
	Targets                      AssociationTargetArrayOutput       `pulumi:"targets"`
	WaitForSuccessTimeoutSeconds pulumi.IntPtrOutput                `pulumi:"waitForSuccessTimeoutSeconds"`
}

// NewAssociation registers a new resource with the given unique name, arguments, and options.
func NewAssociation(ctx *pulumi.Context,
	name string, args *AssociationArgs, opts ...pulumi.ResourceOption) (*Association, error) {
	if args == nil {
		args = &AssociationArgs{}
	}

	var resource Association
	err := ctx.RegisterResource("aws:ssm/association:Association", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssociation gets an existing Association resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssociationState, opts ...pulumi.ResourceOption) (*Association, error) {
	var resource Association
	err := ctx.ReadResource("aws:ssm/association:Association", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Association resources.
type associationState struct {
	ApplyOnlyAtCronInterval       *bool   `pulumi:"applyOnlyAtCronInterval"`
	Arn                           *string `pulumi:"arn"`
	AssociationId                 *string `pulumi:"associationId"`
	AssociationName               *string `pulumi:"associationName"`
	AutomationTargetParameterName *string `pulumi:"automationTargetParameterName"`
	ComplianceSeverity            *string `pulumi:"complianceSeverity"`
	DocumentVersion               *string `pulumi:"documentVersion"`
	// Deprecated: use 'targets' argument instead. https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_CreateAssociation.html#systemsmanager-CreateAssociation-request-InstanceId
	InstanceId                   *string                    `pulumi:"instanceId"`
	MaxConcurrency               *string                    `pulumi:"maxConcurrency"`
	MaxErrors                    *string                    `pulumi:"maxErrors"`
	Name                         *string                    `pulumi:"name"`
	OutputLocation               *AssociationOutputLocation `pulumi:"outputLocation"`
	Parameters                   map[string]string          `pulumi:"parameters"`
	ScheduleExpression           *string                    `pulumi:"scheduleExpression"`
	Targets                      []AssociationTarget        `pulumi:"targets"`
	WaitForSuccessTimeoutSeconds *int                       `pulumi:"waitForSuccessTimeoutSeconds"`
}

type AssociationState struct {
	ApplyOnlyAtCronInterval       pulumi.BoolPtrInput
	Arn                           pulumi.StringPtrInput
	AssociationId                 pulumi.StringPtrInput
	AssociationName               pulumi.StringPtrInput
	AutomationTargetParameterName pulumi.StringPtrInput
	ComplianceSeverity            pulumi.StringPtrInput
	DocumentVersion               pulumi.StringPtrInput
	// Deprecated: use 'targets' argument instead. https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_CreateAssociation.html#systemsmanager-CreateAssociation-request-InstanceId
	InstanceId                   pulumi.StringPtrInput
	MaxConcurrency               pulumi.StringPtrInput
	MaxErrors                    pulumi.StringPtrInput
	Name                         pulumi.StringPtrInput
	OutputLocation               AssociationOutputLocationPtrInput
	Parameters                   pulumi.StringMapInput
	ScheduleExpression           pulumi.StringPtrInput
	Targets                      AssociationTargetArrayInput
	WaitForSuccessTimeoutSeconds pulumi.IntPtrInput
}

func (AssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*associationState)(nil)).Elem()
}

type associationArgs struct {
	ApplyOnlyAtCronInterval       *bool   `pulumi:"applyOnlyAtCronInterval"`
	AssociationName               *string `pulumi:"associationName"`
	AutomationTargetParameterName *string `pulumi:"automationTargetParameterName"`
	ComplianceSeverity            *string `pulumi:"complianceSeverity"`
	DocumentVersion               *string `pulumi:"documentVersion"`
	// Deprecated: use 'targets' argument instead. https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_CreateAssociation.html#systemsmanager-CreateAssociation-request-InstanceId
	InstanceId                   *string                    `pulumi:"instanceId"`
	MaxConcurrency               *string                    `pulumi:"maxConcurrency"`
	MaxErrors                    *string                    `pulumi:"maxErrors"`
	Name                         *string                    `pulumi:"name"`
	OutputLocation               *AssociationOutputLocation `pulumi:"outputLocation"`
	Parameters                   map[string]string          `pulumi:"parameters"`
	ScheduleExpression           *string                    `pulumi:"scheduleExpression"`
	Targets                      []AssociationTarget        `pulumi:"targets"`
	WaitForSuccessTimeoutSeconds *int                       `pulumi:"waitForSuccessTimeoutSeconds"`
}

// The set of arguments for constructing a Association resource.
type AssociationArgs struct {
	ApplyOnlyAtCronInterval       pulumi.BoolPtrInput
	AssociationName               pulumi.StringPtrInput
	AutomationTargetParameterName pulumi.StringPtrInput
	ComplianceSeverity            pulumi.StringPtrInput
	DocumentVersion               pulumi.StringPtrInput
	// Deprecated: use 'targets' argument instead. https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_CreateAssociation.html#systemsmanager-CreateAssociation-request-InstanceId
	InstanceId                   pulumi.StringPtrInput
	MaxConcurrency               pulumi.StringPtrInput
	MaxErrors                    pulumi.StringPtrInput
	Name                         pulumi.StringPtrInput
	OutputLocation               AssociationOutputLocationPtrInput
	Parameters                   pulumi.StringMapInput
	ScheduleExpression           pulumi.StringPtrInput
	Targets                      AssociationTargetArrayInput
	WaitForSuccessTimeoutSeconds pulumi.IntPtrInput
}

func (AssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*associationArgs)(nil)).Elem()
}

type AssociationInput interface {
	pulumi.Input

	ToAssociationOutput() AssociationOutput
	ToAssociationOutputWithContext(ctx context.Context) AssociationOutput
}

func (*Association) ElementType() reflect.Type {
	return reflect.TypeOf((**Association)(nil)).Elem()
}

func (i *Association) ToAssociationOutput() AssociationOutput {
	return i.ToAssociationOutputWithContext(context.Background())
}

func (i *Association) ToAssociationOutputWithContext(ctx context.Context) AssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociationOutput)
}

// AssociationArrayInput is an input type that accepts AssociationArray and AssociationArrayOutput values.
// You can construct a concrete instance of `AssociationArrayInput` via:
//
//	AssociationArray{ AssociationArgs{...} }
type AssociationArrayInput interface {
	pulumi.Input

	ToAssociationArrayOutput() AssociationArrayOutput
	ToAssociationArrayOutputWithContext(context.Context) AssociationArrayOutput
}

type AssociationArray []AssociationInput

func (AssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Association)(nil)).Elem()
}

func (i AssociationArray) ToAssociationArrayOutput() AssociationArrayOutput {
	return i.ToAssociationArrayOutputWithContext(context.Background())
}

func (i AssociationArray) ToAssociationArrayOutputWithContext(ctx context.Context) AssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociationArrayOutput)
}

// AssociationMapInput is an input type that accepts AssociationMap and AssociationMapOutput values.
// You can construct a concrete instance of `AssociationMapInput` via:
//
//	AssociationMap{ "key": AssociationArgs{...} }
type AssociationMapInput interface {
	pulumi.Input

	ToAssociationMapOutput() AssociationMapOutput
	ToAssociationMapOutputWithContext(context.Context) AssociationMapOutput
}

type AssociationMap map[string]AssociationInput

func (AssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Association)(nil)).Elem()
}

func (i AssociationMap) ToAssociationMapOutput() AssociationMapOutput {
	return i.ToAssociationMapOutputWithContext(context.Background())
}

func (i AssociationMap) ToAssociationMapOutputWithContext(ctx context.Context) AssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociationMapOutput)
}

type AssociationOutput struct{ *pulumi.OutputState }

func (AssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Association)(nil)).Elem()
}

func (o AssociationOutput) ToAssociationOutput() AssociationOutput {
	return o
}

func (o AssociationOutput) ToAssociationOutputWithContext(ctx context.Context) AssociationOutput {
	return o
}

func (o AssociationOutput) ApplyOnlyAtCronInterval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.BoolPtrOutput { return v.ApplyOnlyAtCronInterval }).(pulumi.BoolPtrOutput)
}

func (o AssociationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o AssociationOutput) AssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.AssociationId }).(pulumi.StringOutput)
}

func (o AssociationOutput) AssociationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.AssociationName }).(pulumi.StringPtrOutput)
}

func (o AssociationOutput) AutomationTargetParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.AutomationTargetParameterName }).(pulumi.StringPtrOutput)
}

func (o AssociationOutput) ComplianceSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.ComplianceSeverity }).(pulumi.StringPtrOutput)
}

func (o AssociationOutput) DocumentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.DocumentVersion }).(pulumi.StringOutput)
}

// Deprecated: use 'targets' argument instead. https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_CreateAssociation.html#systemsmanager-CreateAssociation-request-InstanceId
func (o AssociationOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.InstanceId }).(pulumi.StringPtrOutput)
}

func (o AssociationOutput) MaxConcurrency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.MaxConcurrency }).(pulumi.StringPtrOutput)
}

func (o AssociationOutput) MaxErrors() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.MaxErrors }).(pulumi.StringPtrOutput)
}

func (o AssociationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AssociationOutput) OutputLocation() AssociationOutputLocationPtrOutput {
	return o.ApplyT(func(v *Association) AssociationOutputLocationPtrOutput { return v.OutputLocation }).(AssociationOutputLocationPtrOutput)
}

func (o AssociationOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Association) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

func (o AssociationOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.ScheduleExpression }).(pulumi.StringPtrOutput)
}

func (o AssociationOutput) Targets() AssociationTargetArrayOutput {
	return o.ApplyT(func(v *Association) AssociationTargetArrayOutput { return v.Targets }).(AssociationTargetArrayOutput)
}

func (o AssociationOutput) WaitForSuccessTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.IntPtrOutput { return v.WaitForSuccessTimeoutSeconds }).(pulumi.IntPtrOutput)
}

type AssociationArrayOutput struct{ *pulumi.OutputState }

func (AssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Association)(nil)).Elem()
}

func (o AssociationArrayOutput) ToAssociationArrayOutput() AssociationArrayOutput {
	return o
}

func (o AssociationArrayOutput) ToAssociationArrayOutputWithContext(ctx context.Context) AssociationArrayOutput {
	return o
}

func (o AssociationArrayOutput) Index(i pulumi.IntInput) AssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Association {
		return vs[0].([]*Association)[vs[1].(int)]
	}).(AssociationOutput)
}

type AssociationMapOutput struct{ *pulumi.OutputState }

func (AssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Association)(nil)).Elem()
}

func (o AssociationMapOutput) ToAssociationMapOutput() AssociationMapOutput {
	return o
}

func (o AssociationMapOutput) ToAssociationMapOutputWithContext(ctx context.Context) AssociationMapOutput {
	return o
}

func (o AssociationMapOutput) MapIndex(k pulumi.StringInput) AssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Association {
		return vs[0].(map[string]*Association)[vs[1].(string)]
	}).(AssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssociationInput)(nil)).Elem(), &Association{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssociationArrayInput)(nil)).Elem(), AssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssociationMapInput)(nil)).Elem(), AssociationMap{})
	pulumi.RegisterOutputType(AssociationOutput{})
	pulumi.RegisterOutputType(AssociationArrayOutput{})
	pulumi.RegisterOutputType(AssociationMapOutput{})
}
