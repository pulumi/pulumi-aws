// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Associates an SSM Document to an instance or EC2 tag.
type Association struct {
	s *pulumi.ResourceState
}

// NewAssociation registers a new resource with the given unique name, arguments, and options.
func NewAssociation(ctx *pulumi.Context,
	name string, args *AssociationArgs, opts ...pulumi.ResourceOpt) (*Association, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["associationName"] = nil
		inputs["documentVersion"] = nil
		inputs["instanceId"] = nil
		inputs["name"] = nil
		inputs["outputLocation"] = nil
		inputs["parameters"] = nil
		inputs["scheduleExpression"] = nil
		inputs["targets"] = nil
	} else {
		inputs["associationName"] = args.AssociationName
		inputs["documentVersion"] = args.DocumentVersion
		inputs["instanceId"] = args.InstanceId
		inputs["name"] = args.Name
		inputs["outputLocation"] = args.OutputLocation
		inputs["parameters"] = args.Parameters
		inputs["scheduleExpression"] = args.ScheduleExpression
		inputs["targets"] = args.Targets
	}
	inputs["associationId"] = nil
	s, err := ctx.RegisterResource("aws:ssm/association:Association", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Association{s: s}, nil
}

// GetAssociation gets an existing Association resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssociation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AssociationState, opts ...pulumi.ResourceOpt) (*Association, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["associationId"] = state.AssociationId
		inputs["associationName"] = state.AssociationName
		inputs["documentVersion"] = state.DocumentVersion
		inputs["instanceId"] = state.InstanceId
		inputs["name"] = state.Name
		inputs["outputLocation"] = state.OutputLocation
		inputs["parameters"] = state.Parameters
		inputs["scheduleExpression"] = state.ScheduleExpression
		inputs["targets"] = state.Targets
	}
	s, err := ctx.ReadResource("aws:ssm/association:Association", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Association{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Association) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Association) ID() *pulumi.IDOutput {
	return r.s.ID
}

func (r *Association) AssociationId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["associationId"])
}

// The descriptive name for the association.
func (r *Association) AssociationName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["associationName"])
}

// The document version you want to associate with the target(s). Can be a specific version or the default version.
func (r *Association) DocumentVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["documentVersion"])
}

// The instance ID to apply an SSM document to. Use `targets` with key `InstanceIds` for document schema versions 2.0 and above.
func (r *Association) InstanceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceId"])
}

// The name of the SSM document to apply.
func (r *Association) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// An output location block. Output Location is documented below.
func (r *Association) OutputLocation() *pulumi.Output {
	return r.s.State["outputLocation"]
}

// A block of arbitrary string parameters to pass to the SSM document.
func (r *Association) Parameters() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["parameters"])
}

// A cron expression when the association will be applied to the target(s).
func (r *Association) ScheduleExpression() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["scheduleExpression"])
}

// A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets.
func (r *Association) Targets() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["targets"])
}

// Input properties used for looking up and filtering Association resources.
type AssociationState struct {
	AssociationId interface{}
	// The descriptive name for the association.
	AssociationName interface{}
	// The document version you want to associate with the target(s). Can be a specific version or the default version.
	DocumentVersion interface{}
	// The instance ID to apply an SSM document to. Use `targets` with key `InstanceIds` for document schema versions 2.0 and above.
	InstanceId interface{}
	// The name of the SSM document to apply.
	Name interface{}
	// An output location block. Output Location is documented below.
	OutputLocation interface{}
	// A block of arbitrary string parameters to pass to the SSM document.
	Parameters interface{}
	// A cron expression when the association will be applied to the target(s).
	ScheduleExpression interface{}
	// A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets.
	Targets interface{}
}

// The set of arguments for constructing a Association resource.
type AssociationArgs struct {
	// The descriptive name for the association.
	AssociationName interface{}
	// The document version you want to associate with the target(s). Can be a specific version or the default version.
	DocumentVersion interface{}
	// The instance ID to apply an SSM document to. Use `targets` with key `InstanceIds` for document schema versions 2.0 and above.
	InstanceId interface{}
	// The name of the SSM document to apply.
	Name interface{}
	// An output location block. Output Location is documented below.
	OutputLocation interface{}
	// A block of arbitrary string parameters to pass to the SSM document.
	Parameters interface{}
	// A cron expression when the association will be applied to the target(s).
	ScheduleExpression interface{}
	// A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets.
	Targets interface{}
}
