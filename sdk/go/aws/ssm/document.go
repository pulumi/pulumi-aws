// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an SSM Document resource
// 
// ~> **NOTE on updating SSM documents:** Only documents with a schema version of 2.0
// or greater can update their content once created, see [SSM Schema Features][1]. To update a document with an older
// schema version you must recreate the resource.
type Document struct {
	s *pulumi.ResourceState
}

// NewDocument registers a new resource with the given unique name, arguments, and options.
func NewDocument(ctx *pulumi.Context,
	name string, args *DocumentArgs, opts ...pulumi.ResourceOpt) (*Document, error) {
	if args == nil || args.Content == nil {
		return nil, errors.New("missing required argument 'Content'")
	}
	if args == nil || args.DocumentType == nil {
		return nil, errors.New("missing required argument 'DocumentType'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["content"] = nil
		inputs["documentFormat"] = nil
		inputs["documentType"] = nil
		inputs["name"] = nil
		inputs["permissions"] = nil
		inputs["tags"] = nil
	} else {
		inputs["content"] = args.Content
		inputs["documentFormat"] = args.DocumentFormat
		inputs["documentType"] = args.DocumentType
		inputs["name"] = args.Name
		inputs["permissions"] = args.Permissions
		inputs["tags"] = args.Tags
	}
	inputs["arn"] = nil
	inputs["createdDate"] = nil
	inputs["defaultVersion"] = nil
	inputs["description"] = nil
	inputs["hash"] = nil
	inputs["hashType"] = nil
	inputs["latestVersion"] = nil
	inputs["owner"] = nil
	inputs["parameters"] = nil
	inputs["platformTypes"] = nil
	inputs["schemaVersion"] = nil
	inputs["status"] = nil
	s, err := ctx.RegisterResource("aws:ssm/document:Document", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Document{s: s}, nil
}

// GetDocument gets an existing Document resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocument(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DocumentState, opts ...pulumi.ResourceOpt) (*Document, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["content"] = state.Content
		inputs["createdDate"] = state.CreatedDate
		inputs["defaultVersion"] = state.DefaultVersion
		inputs["description"] = state.Description
		inputs["documentFormat"] = state.DocumentFormat
		inputs["documentType"] = state.DocumentType
		inputs["hash"] = state.Hash
		inputs["hashType"] = state.HashType
		inputs["latestVersion"] = state.LatestVersion
		inputs["name"] = state.Name
		inputs["owner"] = state.Owner
		inputs["parameters"] = state.Parameters
		inputs["permissions"] = state.Permissions
		inputs["platformTypes"] = state.PlatformTypes
		inputs["schemaVersion"] = state.SchemaVersion
		inputs["status"] = state.Status
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("aws:ssm/document:Document", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Document{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Document) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Document) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Document) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The JSON or YAML content of the document.
func (r *Document) Content() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["content"])
}

// The date the document was created.
func (r *Document) CreatedDate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdDate"])
}

// The default version of the document.
func (r *Document) DefaultVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultVersion"])
}

// The description of the document.
func (r *Document) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The format of the document. Valid document types include: `JSON` and `YAML`
func (r *Document) DocumentFormat() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["documentFormat"])
}

// The type of the document. Valid document types include: `Command`, `Policy`, `Automation` and `Session`
func (r *Document) DocumentType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["documentType"])
}

// The sha1 or sha256 of the document content
func (r *Document) Hash() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hash"])
}

// "Sha1" "Sha256". The hashing algorithm used when hashing the content.
func (r *Document) HashType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hashType"])
}

// The latest version of the document.
func (r *Document) LatestVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["latestVersion"])
}

// The name of the document.
func (r *Document) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The AWS user account of the person who created the document.
func (r *Document) Owner() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["owner"])
}

// The parameters that are available to this document.
func (r *Document) Parameters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["parameters"])
}

// Additional Permissions to attach to the document. See Permissions below for details.
func (r *Document) Permissions() *pulumi.Output {
	return r.s.State["permissions"]
}

// A list of OS platforms compatible with this SSM document, either "Windows" or "Linux".
func (r *Document) PlatformTypes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["platformTypes"])
}

// The schema version of the document.
func (r *Document) SchemaVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["schemaVersion"])
}

// "Creating", "Active" or "Deleting". The current status of the document.
func (r *Document) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// A mapping of tags to assign to the object.
func (r *Document) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Document resources.
type DocumentState struct {
	Arn interface{}
	// The JSON or YAML content of the document.
	Content interface{}
	// The date the document was created.
	CreatedDate interface{}
	// The default version of the document.
	DefaultVersion interface{}
	// The description of the document.
	Description interface{}
	// The format of the document. Valid document types include: `JSON` and `YAML`
	DocumentFormat interface{}
	// The type of the document. Valid document types include: `Command`, `Policy`, `Automation` and `Session`
	DocumentType interface{}
	// The sha1 or sha256 of the document content
	Hash interface{}
	// "Sha1" "Sha256". The hashing algorithm used when hashing the content.
	HashType interface{}
	// The latest version of the document.
	LatestVersion interface{}
	// The name of the document.
	Name interface{}
	// The AWS user account of the person who created the document.
	Owner interface{}
	// The parameters that are available to this document.
	Parameters interface{}
	// Additional Permissions to attach to the document. See Permissions below for details.
	Permissions interface{}
	// A list of OS platforms compatible with this SSM document, either "Windows" or "Linux".
	PlatformTypes interface{}
	// The schema version of the document.
	SchemaVersion interface{}
	// "Creating", "Active" or "Deleting". The current status of the document.
	Status interface{}
	// A mapping of tags to assign to the object.
	Tags interface{}
}

// The set of arguments for constructing a Document resource.
type DocumentArgs struct {
	// The JSON or YAML content of the document.
	Content interface{}
	// The format of the document. Valid document types include: `JSON` and `YAML`
	DocumentFormat interface{}
	// The type of the document. Valid document types include: `Command`, `Policy`, `Automation` and `Session`
	DocumentType interface{}
	// The name of the document.
	Name interface{}
	// Additional Permissions to attach to the document. See Permissions below for details.
	Permissions interface{}
	// A mapping of tags to assign to the object.
	Tags interface{}
}
