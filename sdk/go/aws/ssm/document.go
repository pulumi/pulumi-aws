// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Document struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput                  `pulumi:"arn"`
	AttachmentsSources DocumentAttachmentsSourceArrayOutput `pulumi:"attachmentsSources"`
	Content            pulumi.StringOutput                  `pulumi:"content"`
	CreatedDate        pulumi.StringOutput                  `pulumi:"createdDate"`
	DefaultVersion     pulumi.StringOutput                  `pulumi:"defaultVersion"`
	Description        pulumi.StringOutput                  `pulumi:"description"`
	DocumentFormat     pulumi.StringPtrOutput               `pulumi:"documentFormat"`
	DocumentType       pulumi.StringOutput                  `pulumi:"documentType"`
	DocumentVersion    pulumi.StringOutput                  `pulumi:"documentVersion"`
	Hash               pulumi.StringOutput                  `pulumi:"hash"`
	HashType           pulumi.StringOutput                  `pulumi:"hashType"`
	LatestVersion      pulumi.StringOutput                  `pulumi:"latestVersion"`
	Name               pulumi.StringOutput                  `pulumi:"name"`
	Owner              pulumi.StringOutput                  `pulumi:"owner"`
	Parameters         DocumentParameterArrayOutput         `pulumi:"parameters"`
	Permissions        pulumi.StringMapOutput               `pulumi:"permissions"`
	PlatformTypes      pulumi.StringArrayOutput             `pulumi:"platformTypes"`
	SchemaVersion      pulumi.StringOutput                  `pulumi:"schemaVersion"`
	Status             pulumi.StringOutput                  `pulumi:"status"`
	Tags               pulumi.StringMapOutput               `pulumi:"tags"`
	TagsAll            pulumi.StringMapOutput               `pulumi:"tagsAll"`
	TargetType         pulumi.StringPtrOutput               `pulumi:"targetType"`
	VersionName        pulumi.StringPtrOutput               `pulumi:"versionName"`
}

// NewDocument registers a new resource with the given unique name, arguments, and options.
func NewDocument(ctx *pulumi.Context,
	name string, args *DocumentArgs, opts ...pulumi.ResourceOption) (*Document, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.DocumentType == nil {
		return nil, errors.New("invalid value for required argument 'DocumentType'")
	}
	var resource Document
	err := ctx.RegisterResource("aws:ssm/document:Document", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocument gets an existing Document resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocument(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentState, opts ...pulumi.ResourceOption) (*Document, error) {
	var resource Document
	err := ctx.ReadResource("aws:ssm/document:Document", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Document resources.
type documentState struct {
	Arn                *string                     `pulumi:"arn"`
	AttachmentsSources []DocumentAttachmentsSource `pulumi:"attachmentsSources"`
	Content            *string                     `pulumi:"content"`
	CreatedDate        *string                     `pulumi:"createdDate"`
	DefaultVersion     *string                     `pulumi:"defaultVersion"`
	Description        *string                     `pulumi:"description"`
	DocumentFormat     *string                     `pulumi:"documentFormat"`
	DocumentType       *string                     `pulumi:"documentType"`
	DocumentVersion    *string                     `pulumi:"documentVersion"`
	Hash               *string                     `pulumi:"hash"`
	HashType           *string                     `pulumi:"hashType"`
	LatestVersion      *string                     `pulumi:"latestVersion"`
	Name               *string                     `pulumi:"name"`
	Owner              *string                     `pulumi:"owner"`
	Parameters         []DocumentParameter         `pulumi:"parameters"`
	Permissions        map[string]string           `pulumi:"permissions"`
	PlatformTypes      []string                    `pulumi:"platformTypes"`
	SchemaVersion      *string                     `pulumi:"schemaVersion"`
	Status             *string                     `pulumi:"status"`
	Tags               map[string]string           `pulumi:"tags"`
	TagsAll            map[string]string           `pulumi:"tagsAll"`
	TargetType         *string                     `pulumi:"targetType"`
	VersionName        *string                     `pulumi:"versionName"`
}

type DocumentState struct {
	Arn                pulumi.StringPtrInput
	AttachmentsSources DocumentAttachmentsSourceArrayInput
	Content            pulumi.StringPtrInput
	CreatedDate        pulumi.StringPtrInput
	DefaultVersion     pulumi.StringPtrInput
	Description        pulumi.StringPtrInput
	DocumentFormat     pulumi.StringPtrInput
	DocumentType       pulumi.StringPtrInput
	DocumentVersion    pulumi.StringPtrInput
	Hash               pulumi.StringPtrInput
	HashType           pulumi.StringPtrInput
	LatestVersion      pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	Owner              pulumi.StringPtrInput
	Parameters         DocumentParameterArrayInput
	Permissions        pulumi.StringMapInput
	PlatformTypes      pulumi.StringArrayInput
	SchemaVersion      pulumi.StringPtrInput
	Status             pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	TagsAll            pulumi.StringMapInput
	TargetType         pulumi.StringPtrInput
	VersionName        pulumi.StringPtrInput
}

func (DocumentState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentState)(nil)).Elem()
}

type documentArgs struct {
	AttachmentsSources []DocumentAttachmentsSource `pulumi:"attachmentsSources"`
	Content            string                      `pulumi:"content"`
	DocumentFormat     *string                     `pulumi:"documentFormat"`
	DocumentType       string                      `pulumi:"documentType"`
	Name               *string                     `pulumi:"name"`
	Permissions        map[string]string           `pulumi:"permissions"`
	Tags               map[string]string           `pulumi:"tags"`
	TargetType         *string                     `pulumi:"targetType"`
	VersionName        *string                     `pulumi:"versionName"`
}

// The set of arguments for constructing a Document resource.
type DocumentArgs struct {
	AttachmentsSources DocumentAttachmentsSourceArrayInput
	Content            pulumi.StringInput
	DocumentFormat     pulumi.StringPtrInput
	DocumentType       pulumi.StringInput
	Name               pulumi.StringPtrInput
	Permissions        pulumi.StringMapInput
	Tags               pulumi.StringMapInput
	TargetType         pulumi.StringPtrInput
	VersionName        pulumi.StringPtrInput
}

func (DocumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentArgs)(nil)).Elem()
}

type DocumentInput interface {
	pulumi.Input

	ToDocumentOutput() DocumentOutput
	ToDocumentOutputWithContext(ctx context.Context) DocumentOutput
}

func (*Document) ElementType() reflect.Type {
	return reflect.TypeOf((**Document)(nil)).Elem()
}

func (i *Document) ToDocumentOutput() DocumentOutput {
	return i.ToDocumentOutputWithContext(context.Background())
}

func (i *Document) ToDocumentOutputWithContext(ctx context.Context) DocumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentOutput)
}

// DocumentArrayInput is an input type that accepts DocumentArray and DocumentArrayOutput values.
// You can construct a concrete instance of `DocumentArrayInput` via:
//
//	DocumentArray{ DocumentArgs{...} }
type DocumentArrayInput interface {
	pulumi.Input

	ToDocumentArrayOutput() DocumentArrayOutput
	ToDocumentArrayOutputWithContext(context.Context) DocumentArrayOutput
}

type DocumentArray []DocumentInput

func (DocumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Document)(nil)).Elem()
}

func (i DocumentArray) ToDocumentArrayOutput() DocumentArrayOutput {
	return i.ToDocumentArrayOutputWithContext(context.Background())
}

func (i DocumentArray) ToDocumentArrayOutputWithContext(ctx context.Context) DocumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentArrayOutput)
}

// DocumentMapInput is an input type that accepts DocumentMap and DocumentMapOutput values.
// You can construct a concrete instance of `DocumentMapInput` via:
//
//	DocumentMap{ "key": DocumentArgs{...} }
type DocumentMapInput interface {
	pulumi.Input

	ToDocumentMapOutput() DocumentMapOutput
	ToDocumentMapOutputWithContext(context.Context) DocumentMapOutput
}

type DocumentMap map[string]DocumentInput

func (DocumentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Document)(nil)).Elem()
}

func (i DocumentMap) ToDocumentMapOutput() DocumentMapOutput {
	return i.ToDocumentMapOutputWithContext(context.Background())
}

func (i DocumentMap) ToDocumentMapOutputWithContext(ctx context.Context) DocumentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentMapOutput)
}

type DocumentOutput struct{ *pulumi.OutputState }

func (DocumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Document)(nil)).Elem()
}

func (o DocumentOutput) ToDocumentOutput() DocumentOutput {
	return o
}

func (o DocumentOutput) ToDocumentOutputWithContext(ctx context.Context) DocumentOutput {
	return o
}

func (o DocumentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DocumentOutput) AttachmentsSources() DocumentAttachmentsSourceArrayOutput {
	return o.ApplyT(func(v *Document) DocumentAttachmentsSourceArrayOutput { return v.AttachmentsSources }).(DocumentAttachmentsSourceArrayOutput)
}

func (o DocumentOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

func (o DocumentOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

func (o DocumentOutput) DefaultVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.DefaultVersion }).(pulumi.StringOutput)
}

func (o DocumentOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o DocumentOutput) DocumentFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Document) pulumi.StringPtrOutput { return v.DocumentFormat }).(pulumi.StringPtrOutput)
}

func (o DocumentOutput) DocumentType() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.DocumentType }).(pulumi.StringOutput)
}

func (o DocumentOutput) DocumentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.DocumentVersion }).(pulumi.StringOutput)
}

func (o DocumentOutput) Hash() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Hash }).(pulumi.StringOutput)
}

func (o DocumentOutput) HashType() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.HashType }).(pulumi.StringOutput)
}

func (o DocumentOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.LatestVersion }).(pulumi.StringOutput)
}

func (o DocumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DocumentOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o DocumentOutput) Parameters() DocumentParameterArrayOutput {
	return o.ApplyT(func(v *Document) DocumentParameterArrayOutput { return v.Parameters }).(DocumentParameterArrayOutput)
}

func (o DocumentOutput) Permissions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Document) pulumi.StringMapOutput { return v.Permissions }).(pulumi.StringMapOutput)
}

func (o DocumentOutput) PlatformTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Document) pulumi.StringArrayOutput { return v.PlatformTypes }).(pulumi.StringArrayOutput)
}

func (o DocumentOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.SchemaVersion }).(pulumi.StringOutput)
}

func (o DocumentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o DocumentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Document) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DocumentOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Document) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DocumentOutput) TargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Document) pulumi.StringPtrOutput { return v.TargetType }).(pulumi.StringPtrOutput)
}

func (o DocumentOutput) VersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Document) pulumi.StringPtrOutput { return v.VersionName }).(pulumi.StringPtrOutput)
}

type DocumentArrayOutput struct{ *pulumi.OutputState }

func (DocumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Document)(nil)).Elem()
}

func (o DocumentArrayOutput) ToDocumentArrayOutput() DocumentArrayOutput {
	return o
}

func (o DocumentArrayOutput) ToDocumentArrayOutputWithContext(ctx context.Context) DocumentArrayOutput {
	return o
}

func (o DocumentArrayOutput) Index(i pulumi.IntInput) DocumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Document {
		return vs[0].([]*Document)[vs[1].(int)]
	}).(DocumentOutput)
}

type DocumentMapOutput struct{ *pulumi.OutputState }

func (DocumentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Document)(nil)).Elem()
}

func (o DocumentMapOutput) ToDocumentMapOutput() DocumentMapOutput {
	return o
}

func (o DocumentMapOutput) ToDocumentMapOutputWithContext(ctx context.Context) DocumentMapOutput {
	return o
}

func (o DocumentMapOutput) MapIndex(k pulumi.StringInput) DocumentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Document {
		return vs[0].(map[string]*Document)[vs[1].(string)]
	}).(DocumentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentInput)(nil)).Elem(), &Document{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentArrayInput)(nil)).Elem(), DocumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentMapInput)(nil)).Elem(), DocumentMap{})
	pulumi.RegisterOutputType(DocumentOutput{})
	pulumi.RegisterOutputType(DocumentArrayOutput{})
	pulumi.RegisterOutputType(DocumentMapOutput{})
}
