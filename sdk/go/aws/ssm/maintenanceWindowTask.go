// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an SSM Maintenance Window Task resource
type MaintenanceWindowTask struct {
	s *pulumi.ResourceState
}

// NewMaintenanceWindowTask registers a new resource with the given unique name, arguments, and options.
func NewMaintenanceWindowTask(ctx *pulumi.Context,
	name string, args *MaintenanceWindowTaskArgs, opts ...pulumi.ResourceOpt) (*MaintenanceWindowTask, error) {
	if args == nil || args.MaxConcurrency == nil {
		return nil, errors.New("missing required argument 'MaxConcurrency'")
	}
	if args == nil || args.MaxErrors == nil {
		return nil, errors.New("missing required argument 'MaxErrors'")
	}
	if args == nil || args.ServiceRoleArn == nil {
		return nil, errors.New("missing required argument 'ServiceRoleArn'")
	}
	if args == nil || args.Targets == nil {
		return nil, errors.New("missing required argument 'Targets'")
	}
	if args == nil || args.TaskArn == nil {
		return nil, errors.New("missing required argument 'TaskArn'")
	}
	if args == nil || args.TaskType == nil {
		return nil, errors.New("missing required argument 'TaskType'")
	}
	if args == nil || args.WindowId == nil {
		return nil, errors.New("missing required argument 'WindowId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["loggingInfo"] = nil
		inputs["maxConcurrency"] = nil
		inputs["maxErrors"] = nil
		inputs["priority"] = nil
		inputs["serviceRoleArn"] = nil
		inputs["targets"] = nil
		inputs["taskArn"] = nil
		inputs["taskParameters"] = nil
		inputs["taskType"] = nil
		inputs["windowId"] = nil
	} else {
		inputs["loggingInfo"] = args.LoggingInfo
		inputs["maxConcurrency"] = args.MaxConcurrency
		inputs["maxErrors"] = args.MaxErrors
		inputs["priority"] = args.Priority
		inputs["serviceRoleArn"] = args.ServiceRoleArn
		inputs["targets"] = args.Targets
		inputs["taskArn"] = args.TaskArn
		inputs["taskParameters"] = args.TaskParameters
		inputs["taskType"] = args.TaskType
		inputs["windowId"] = args.WindowId
	}
	s, err := ctx.RegisterResource("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MaintenanceWindowTask{s: s}, nil
}

// GetMaintenanceWindowTask gets an existing MaintenanceWindowTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenanceWindowTask(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MaintenanceWindowTaskState, opts ...pulumi.ResourceOpt) (*MaintenanceWindowTask, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["loggingInfo"] = state.LoggingInfo
		inputs["maxConcurrency"] = state.MaxConcurrency
		inputs["maxErrors"] = state.MaxErrors
		inputs["priority"] = state.Priority
		inputs["serviceRoleArn"] = state.ServiceRoleArn
		inputs["targets"] = state.Targets
		inputs["taskArn"] = state.TaskArn
		inputs["taskParameters"] = state.TaskParameters
		inputs["taskType"] = state.TaskType
		inputs["windowId"] = state.WindowId
	}
	s, err := ctx.ReadResource("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MaintenanceWindowTask{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *MaintenanceWindowTask) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *MaintenanceWindowTask) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A structure containing information about an Amazon S3 bucket to write instance-level logs to. Documented below.
func (r *MaintenanceWindowTask) LoggingInfo() *pulumi.Output {
	return r.s.State["loggingInfo"]
}

// The maximum number of targets this task can be run for in parallel.
func (r *MaintenanceWindowTask) MaxConcurrency() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["maxConcurrency"])
}

// The maximum number of errors allowed before this task stops being scheduled.
func (r *MaintenanceWindowTask) MaxErrors() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["maxErrors"])
}

// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
func (r *MaintenanceWindowTask) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

// The role that should be assumed when executing the task.
func (r *MaintenanceWindowTask) ServiceRoleArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceRoleArn"])
}

// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
func (r *MaintenanceWindowTask) Targets() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["targets"])
}

// The ARN of the task to execute.
func (r *MaintenanceWindowTask) TaskArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["taskArn"])
}

// A structure containing information about parameters required by the particular `task_arn`. Documented below.
func (r *MaintenanceWindowTask) TaskParameters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["taskParameters"])
}

// The type of task being registered. The only allowed value is `RUN_COMMAND`.
func (r *MaintenanceWindowTask) TaskType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["taskType"])
}

// The Id of the maintenance window to register the task with.
func (r *MaintenanceWindowTask) WindowId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["windowId"])
}

// Input properties used for looking up and filtering MaintenanceWindowTask resources.
type MaintenanceWindowTaskState struct {
	// A structure containing information about an Amazon S3 bucket to write instance-level logs to. Documented below.
	LoggingInfo interface{}
	// The maximum number of targets this task can be run for in parallel.
	MaxConcurrency interface{}
	// The maximum number of errors allowed before this task stops being scheduled.
	MaxErrors interface{}
	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	Priority interface{}
	// The role that should be assumed when executing the task.
	ServiceRoleArn interface{}
	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	Targets interface{}
	// The ARN of the task to execute.
	TaskArn interface{}
	// A structure containing information about parameters required by the particular `task_arn`. Documented below.
	TaskParameters interface{}
	// The type of task being registered. The only allowed value is `RUN_COMMAND`.
	TaskType interface{}
	// The Id of the maintenance window to register the task with.
	WindowId interface{}
}

// The set of arguments for constructing a MaintenanceWindowTask resource.
type MaintenanceWindowTaskArgs struct {
	// A structure containing information about an Amazon S3 bucket to write instance-level logs to. Documented below.
	LoggingInfo interface{}
	// The maximum number of targets this task can be run for in parallel.
	MaxConcurrency interface{}
	// The maximum number of errors allowed before this task stops being scheduled.
	MaxErrors interface{}
	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	Priority interface{}
	// The role that should be assumed when executing the task.
	ServiceRoleArn interface{}
	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	Targets interface{}
	// The ARN of the task to execute.
	TaskArn interface{}
	// A structure containing information about parameters required by the particular `task_arn`. Documented below.
	TaskParameters interface{}
	// The type of task being registered. The only allowed value is `RUN_COMMAND`.
	TaskType interface{}
	// The Id of the maintenance window to register the task with.
	WindowId interface{}
}
