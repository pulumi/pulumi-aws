// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MaintenanceWindowTask struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput                                    `pulumi:"arn"`
	CutoffBehavior           pulumi.StringPtrOutput                                 `pulumi:"cutoffBehavior"`
	Description              pulumi.StringPtrOutput                                 `pulumi:"description"`
	MaxConcurrency           pulumi.StringOutput                                    `pulumi:"maxConcurrency"`
	MaxErrors                pulumi.StringOutput                                    `pulumi:"maxErrors"`
	Name                     pulumi.StringOutput                                    `pulumi:"name"`
	Priority                 pulumi.IntPtrOutput                                    `pulumi:"priority"`
	ServiceRoleArn           pulumi.StringOutput                                    `pulumi:"serviceRoleArn"`
	Targets                  MaintenanceWindowTaskTargetArrayOutput                 `pulumi:"targets"`
	TaskArn                  pulumi.StringOutput                                    `pulumi:"taskArn"`
	TaskInvocationParameters MaintenanceWindowTaskTaskInvocationParametersPtrOutput `pulumi:"taskInvocationParameters"`
	TaskType                 pulumi.StringOutput                                    `pulumi:"taskType"`
	WindowId                 pulumi.StringOutput                                    `pulumi:"windowId"`
	WindowTaskId             pulumi.StringOutput                                    `pulumi:"windowTaskId"`
}

// NewMaintenanceWindowTask registers a new resource with the given unique name, arguments, and options.
func NewMaintenanceWindowTask(ctx *pulumi.Context,
	name string, args *MaintenanceWindowTaskArgs, opts ...pulumi.ResourceOption) (*MaintenanceWindowTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskArn == nil {
		return nil, errors.New("invalid value for required argument 'TaskArn'")
	}
	if args.TaskType == nil {
		return nil, errors.New("invalid value for required argument 'TaskType'")
	}
	if args.WindowId == nil {
		return nil, errors.New("invalid value for required argument 'WindowId'")
	}
	var resource MaintenanceWindowTask
	err := ctx.RegisterResource("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenanceWindowTask gets an existing MaintenanceWindowTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenanceWindowTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaintenanceWindowTaskState, opts ...pulumi.ResourceOption) (*MaintenanceWindowTask, error) {
	var resource MaintenanceWindowTask
	err := ctx.ReadResource("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaintenanceWindowTask resources.
type maintenanceWindowTaskState struct {
	Arn                      *string                                        `pulumi:"arn"`
	CutoffBehavior           *string                                        `pulumi:"cutoffBehavior"`
	Description              *string                                        `pulumi:"description"`
	MaxConcurrency           *string                                        `pulumi:"maxConcurrency"`
	MaxErrors                *string                                        `pulumi:"maxErrors"`
	Name                     *string                                        `pulumi:"name"`
	Priority                 *int                                           `pulumi:"priority"`
	ServiceRoleArn           *string                                        `pulumi:"serviceRoleArn"`
	Targets                  []MaintenanceWindowTaskTarget                  `pulumi:"targets"`
	TaskArn                  *string                                        `pulumi:"taskArn"`
	TaskInvocationParameters *MaintenanceWindowTaskTaskInvocationParameters `pulumi:"taskInvocationParameters"`
	TaskType                 *string                                        `pulumi:"taskType"`
	WindowId                 *string                                        `pulumi:"windowId"`
	WindowTaskId             *string                                        `pulumi:"windowTaskId"`
}

type MaintenanceWindowTaskState struct {
	Arn                      pulumi.StringPtrInput
	CutoffBehavior           pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	MaxConcurrency           pulumi.StringPtrInput
	MaxErrors                pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	Priority                 pulumi.IntPtrInput
	ServiceRoleArn           pulumi.StringPtrInput
	Targets                  MaintenanceWindowTaskTargetArrayInput
	TaskArn                  pulumi.StringPtrInput
	TaskInvocationParameters MaintenanceWindowTaskTaskInvocationParametersPtrInput
	TaskType                 pulumi.StringPtrInput
	WindowId                 pulumi.StringPtrInput
	WindowTaskId             pulumi.StringPtrInput
}

func (MaintenanceWindowTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowTaskState)(nil)).Elem()
}

type maintenanceWindowTaskArgs struct {
	CutoffBehavior           *string                                        `pulumi:"cutoffBehavior"`
	Description              *string                                        `pulumi:"description"`
	MaxConcurrency           *string                                        `pulumi:"maxConcurrency"`
	MaxErrors                *string                                        `pulumi:"maxErrors"`
	Name                     *string                                        `pulumi:"name"`
	Priority                 *int                                           `pulumi:"priority"`
	ServiceRoleArn           *string                                        `pulumi:"serviceRoleArn"`
	Targets                  []MaintenanceWindowTaskTarget                  `pulumi:"targets"`
	TaskArn                  string                                         `pulumi:"taskArn"`
	TaskInvocationParameters *MaintenanceWindowTaskTaskInvocationParameters `pulumi:"taskInvocationParameters"`
	TaskType                 string                                         `pulumi:"taskType"`
	WindowId                 string                                         `pulumi:"windowId"`
}

// The set of arguments for constructing a MaintenanceWindowTask resource.
type MaintenanceWindowTaskArgs struct {
	CutoffBehavior           pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	MaxConcurrency           pulumi.StringPtrInput
	MaxErrors                pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	Priority                 pulumi.IntPtrInput
	ServiceRoleArn           pulumi.StringPtrInput
	Targets                  MaintenanceWindowTaskTargetArrayInput
	TaskArn                  pulumi.StringInput
	TaskInvocationParameters MaintenanceWindowTaskTaskInvocationParametersPtrInput
	TaskType                 pulumi.StringInput
	WindowId                 pulumi.StringInput
}

func (MaintenanceWindowTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowTaskArgs)(nil)).Elem()
}

type MaintenanceWindowTaskInput interface {
	pulumi.Input

	ToMaintenanceWindowTaskOutput() MaintenanceWindowTaskOutput
	ToMaintenanceWindowTaskOutputWithContext(ctx context.Context) MaintenanceWindowTaskOutput
}

func (*MaintenanceWindowTask) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindowTask)(nil)).Elem()
}

func (i *MaintenanceWindowTask) ToMaintenanceWindowTaskOutput() MaintenanceWindowTaskOutput {
	return i.ToMaintenanceWindowTaskOutputWithContext(context.Background())
}

func (i *MaintenanceWindowTask) ToMaintenanceWindowTaskOutputWithContext(ctx context.Context) MaintenanceWindowTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskOutput)
}

// MaintenanceWindowTaskArrayInput is an input type that accepts MaintenanceWindowTaskArray and MaintenanceWindowTaskArrayOutput values.
// You can construct a concrete instance of `MaintenanceWindowTaskArrayInput` via:
//
//	MaintenanceWindowTaskArray{ MaintenanceWindowTaskArgs{...} }
type MaintenanceWindowTaskArrayInput interface {
	pulumi.Input

	ToMaintenanceWindowTaskArrayOutput() MaintenanceWindowTaskArrayOutput
	ToMaintenanceWindowTaskArrayOutputWithContext(context.Context) MaintenanceWindowTaskArrayOutput
}

type MaintenanceWindowTaskArray []MaintenanceWindowTaskInput

func (MaintenanceWindowTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaintenanceWindowTask)(nil)).Elem()
}

func (i MaintenanceWindowTaskArray) ToMaintenanceWindowTaskArrayOutput() MaintenanceWindowTaskArrayOutput {
	return i.ToMaintenanceWindowTaskArrayOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskArray) ToMaintenanceWindowTaskArrayOutputWithContext(ctx context.Context) MaintenanceWindowTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskArrayOutput)
}

// MaintenanceWindowTaskMapInput is an input type that accepts MaintenanceWindowTaskMap and MaintenanceWindowTaskMapOutput values.
// You can construct a concrete instance of `MaintenanceWindowTaskMapInput` via:
//
//	MaintenanceWindowTaskMap{ "key": MaintenanceWindowTaskArgs{...} }
type MaintenanceWindowTaskMapInput interface {
	pulumi.Input

	ToMaintenanceWindowTaskMapOutput() MaintenanceWindowTaskMapOutput
	ToMaintenanceWindowTaskMapOutputWithContext(context.Context) MaintenanceWindowTaskMapOutput
}

type MaintenanceWindowTaskMap map[string]MaintenanceWindowTaskInput

func (MaintenanceWindowTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaintenanceWindowTask)(nil)).Elem()
}

func (i MaintenanceWindowTaskMap) ToMaintenanceWindowTaskMapOutput() MaintenanceWindowTaskMapOutput {
	return i.ToMaintenanceWindowTaskMapOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskMap) ToMaintenanceWindowTaskMapOutputWithContext(ctx context.Context) MaintenanceWindowTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskMapOutput)
}

type MaintenanceWindowTaskOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindowTask)(nil)).Elem()
}

func (o MaintenanceWindowTaskOutput) ToMaintenanceWindowTaskOutput() MaintenanceWindowTaskOutput {
	return o
}

func (o MaintenanceWindowTaskOutput) ToMaintenanceWindowTaskOutputWithContext(ctx context.Context) MaintenanceWindowTaskOutput {
	return o
}

func (o MaintenanceWindowTaskOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o MaintenanceWindowTaskOutput) CutoffBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.StringPtrOutput { return v.CutoffBehavior }).(pulumi.StringPtrOutput)
}

func (o MaintenanceWindowTaskOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MaintenanceWindowTaskOutput) MaxConcurrency() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.StringOutput { return v.MaxConcurrency }).(pulumi.StringOutput)
}

func (o MaintenanceWindowTaskOutput) MaxErrors() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.StringOutput { return v.MaxErrors }).(pulumi.StringOutput)
}

func (o MaintenanceWindowTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MaintenanceWindowTaskOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o MaintenanceWindowTaskOutput) ServiceRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.StringOutput { return v.ServiceRoleArn }).(pulumi.StringOutput)
}

func (o MaintenanceWindowTaskOutput) Targets() MaintenanceWindowTaskTargetArrayOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) MaintenanceWindowTaskTargetArrayOutput { return v.Targets }).(MaintenanceWindowTaskTargetArrayOutput)
}

func (o MaintenanceWindowTaskOutput) TaskArn() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.StringOutput { return v.TaskArn }).(pulumi.StringOutput)
}

func (o MaintenanceWindowTaskOutput) TaskInvocationParameters() MaintenanceWindowTaskTaskInvocationParametersPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) MaintenanceWindowTaskTaskInvocationParametersPtrOutput {
		return v.TaskInvocationParameters
	}).(MaintenanceWindowTaskTaskInvocationParametersPtrOutput)
}

func (o MaintenanceWindowTaskOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.StringOutput { return v.TaskType }).(pulumi.StringOutput)
}

func (o MaintenanceWindowTaskOutput) WindowId() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.StringOutput { return v.WindowId }).(pulumi.StringOutput)
}

func (o MaintenanceWindowTaskOutput) WindowTaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *MaintenanceWindowTask) pulumi.StringOutput { return v.WindowTaskId }).(pulumi.StringOutput)
}

type MaintenanceWindowTaskArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaintenanceWindowTask)(nil)).Elem()
}

func (o MaintenanceWindowTaskArrayOutput) ToMaintenanceWindowTaskArrayOutput() MaintenanceWindowTaskArrayOutput {
	return o
}

func (o MaintenanceWindowTaskArrayOutput) ToMaintenanceWindowTaskArrayOutputWithContext(ctx context.Context) MaintenanceWindowTaskArrayOutput {
	return o
}

func (o MaintenanceWindowTaskArrayOutput) Index(i pulumi.IntInput) MaintenanceWindowTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MaintenanceWindowTask {
		return vs[0].([]*MaintenanceWindowTask)[vs[1].(int)]
	}).(MaintenanceWindowTaskOutput)
}

type MaintenanceWindowTaskMapOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaintenanceWindowTask)(nil)).Elem()
}

func (o MaintenanceWindowTaskMapOutput) ToMaintenanceWindowTaskMapOutput() MaintenanceWindowTaskMapOutput {
	return o
}

func (o MaintenanceWindowTaskMapOutput) ToMaintenanceWindowTaskMapOutputWithContext(ctx context.Context) MaintenanceWindowTaskMapOutput {
	return o
}

func (o MaintenanceWindowTaskMapOutput) MapIndex(k pulumi.StringInput) MaintenanceWindowTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MaintenanceWindowTask {
		return vs[0].(map[string]*MaintenanceWindowTask)[vs[1].(string)]
	}).(MaintenanceWindowTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowTaskInput)(nil)).Elem(), &MaintenanceWindowTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowTaskArrayInput)(nil)).Elem(), MaintenanceWindowTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowTaskMapInput)(nil)).Elem(), MaintenanceWindowTaskMap{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskMapOutput{})
}
