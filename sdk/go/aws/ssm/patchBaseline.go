// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PatchBaseline struct {
	pulumi.CustomResourceState

	ApprovalRules                    PatchBaselineApprovalRuleArrayOutput `pulumi:"approvalRules"`
	ApprovedPatches                  pulumi.StringArrayOutput             `pulumi:"approvedPatches"`
	ApprovedPatchesComplianceLevel   pulumi.StringPtrOutput               `pulumi:"approvedPatchesComplianceLevel"`
	ApprovedPatchesEnableNonSecurity pulumi.BoolPtrOutput                 `pulumi:"approvedPatchesEnableNonSecurity"`
	Arn                              pulumi.StringOutput                  `pulumi:"arn"`
	Description                      pulumi.StringPtrOutput               `pulumi:"description"`
	GlobalFilters                    PatchBaselineGlobalFilterArrayOutput `pulumi:"globalFilters"`
	Name                             pulumi.StringOutput                  `pulumi:"name"`
	OperatingSystem                  pulumi.StringPtrOutput               `pulumi:"operatingSystem"`
	RejectedPatches                  pulumi.StringArrayOutput             `pulumi:"rejectedPatches"`
	RejectedPatchesAction            pulumi.StringOutput                  `pulumi:"rejectedPatchesAction"`
	Sources                          PatchBaselineSourceArrayOutput       `pulumi:"sources"`
	Tags                             pulumi.StringMapOutput               `pulumi:"tags"`
	TagsAll                          pulumi.StringMapOutput               `pulumi:"tagsAll"`
}

// NewPatchBaseline registers a new resource with the given unique name, arguments, and options.
func NewPatchBaseline(ctx *pulumi.Context,
	name string, args *PatchBaselineArgs, opts ...pulumi.ResourceOption) (*PatchBaseline, error) {
	if args == nil {
		args = &PatchBaselineArgs{}
	}

	var resource PatchBaseline
	err := ctx.RegisterResource("aws:ssm/patchBaseline:PatchBaseline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPatchBaseline gets an existing PatchBaseline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPatchBaseline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PatchBaselineState, opts ...pulumi.ResourceOption) (*PatchBaseline, error) {
	var resource PatchBaseline
	err := ctx.ReadResource("aws:ssm/patchBaseline:PatchBaseline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PatchBaseline resources.
type patchBaselineState struct {
	ApprovalRules                    []PatchBaselineApprovalRule `pulumi:"approvalRules"`
	ApprovedPatches                  []string                    `pulumi:"approvedPatches"`
	ApprovedPatchesComplianceLevel   *string                     `pulumi:"approvedPatchesComplianceLevel"`
	ApprovedPatchesEnableNonSecurity *bool                       `pulumi:"approvedPatchesEnableNonSecurity"`
	Arn                              *string                     `pulumi:"arn"`
	Description                      *string                     `pulumi:"description"`
	GlobalFilters                    []PatchBaselineGlobalFilter `pulumi:"globalFilters"`
	Name                             *string                     `pulumi:"name"`
	OperatingSystem                  *string                     `pulumi:"operatingSystem"`
	RejectedPatches                  []string                    `pulumi:"rejectedPatches"`
	RejectedPatchesAction            *string                     `pulumi:"rejectedPatchesAction"`
	Sources                          []PatchBaselineSource       `pulumi:"sources"`
	Tags                             map[string]string           `pulumi:"tags"`
	TagsAll                          map[string]string           `pulumi:"tagsAll"`
}

type PatchBaselineState struct {
	ApprovalRules                    PatchBaselineApprovalRuleArrayInput
	ApprovedPatches                  pulumi.StringArrayInput
	ApprovedPatchesComplianceLevel   pulumi.StringPtrInput
	ApprovedPatchesEnableNonSecurity pulumi.BoolPtrInput
	Arn                              pulumi.StringPtrInput
	Description                      pulumi.StringPtrInput
	GlobalFilters                    PatchBaselineGlobalFilterArrayInput
	Name                             pulumi.StringPtrInput
	OperatingSystem                  pulumi.StringPtrInput
	RejectedPatches                  pulumi.StringArrayInput
	RejectedPatchesAction            pulumi.StringPtrInput
	Sources                          PatchBaselineSourceArrayInput
	Tags                             pulumi.StringMapInput
	TagsAll                          pulumi.StringMapInput
}

func (PatchBaselineState) ElementType() reflect.Type {
	return reflect.TypeOf((*patchBaselineState)(nil)).Elem()
}

type patchBaselineArgs struct {
	ApprovalRules                    []PatchBaselineApprovalRule `pulumi:"approvalRules"`
	ApprovedPatches                  []string                    `pulumi:"approvedPatches"`
	ApprovedPatchesComplianceLevel   *string                     `pulumi:"approvedPatchesComplianceLevel"`
	ApprovedPatchesEnableNonSecurity *bool                       `pulumi:"approvedPatchesEnableNonSecurity"`
	Description                      *string                     `pulumi:"description"`
	GlobalFilters                    []PatchBaselineGlobalFilter `pulumi:"globalFilters"`
	Name                             *string                     `pulumi:"name"`
	OperatingSystem                  *string                     `pulumi:"operatingSystem"`
	RejectedPatches                  []string                    `pulumi:"rejectedPatches"`
	RejectedPatchesAction            *string                     `pulumi:"rejectedPatchesAction"`
	Sources                          []PatchBaselineSource       `pulumi:"sources"`
	Tags                             map[string]string           `pulumi:"tags"`
}

// The set of arguments for constructing a PatchBaseline resource.
type PatchBaselineArgs struct {
	ApprovalRules                    PatchBaselineApprovalRuleArrayInput
	ApprovedPatches                  pulumi.StringArrayInput
	ApprovedPatchesComplianceLevel   pulumi.StringPtrInput
	ApprovedPatchesEnableNonSecurity pulumi.BoolPtrInput
	Description                      pulumi.StringPtrInput
	GlobalFilters                    PatchBaselineGlobalFilterArrayInput
	Name                             pulumi.StringPtrInput
	OperatingSystem                  pulumi.StringPtrInput
	RejectedPatches                  pulumi.StringArrayInput
	RejectedPatchesAction            pulumi.StringPtrInput
	Sources                          PatchBaselineSourceArrayInput
	Tags                             pulumi.StringMapInput
}

func (PatchBaselineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*patchBaselineArgs)(nil)).Elem()
}

type PatchBaselineInput interface {
	pulumi.Input

	ToPatchBaselineOutput() PatchBaselineOutput
	ToPatchBaselineOutputWithContext(ctx context.Context) PatchBaselineOutput
}

func (*PatchBaseline) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchBaseline)(nil)).Elem()
}

func (i *PatchBaseline) ToPatchBaselineOutput() PatchBaselineOutput {
	return i.ToPatchBaselineOutputWithContext(context.Background())
}

func (i *PatchBaseline) ToPatchBaselineOutputWithContext(ctx context.Context) PatchBaselineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchBaselineOutput)
}

// PatchBaselineArrayInput is an input type that accepts PatchBaselineArray and PatchBaselineArrayOutput values.
// You can construct a concrete instance of `PatchBaselineArrayInput` via:
//
//	PatchBaselineArray{ PatchBaselineArgs{...} }
type PatchBaselineArrayInput interface {
	pulumi.Input

	ToPatchBaselineArrayOutput() PatchBaselineArrayOutput
	ToPatchBaselineArrayOutputWithContext(context.Context) PatchBaselineArrayOutput
}

type PatchBaselineArray []PatchBaselineInput

func (PatchBaselineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PatchBaseline)(nil)).Elem()
}

func (i PatchBaselineArray) ToPatchBaselineArrayOutput() PatchBaselineArrayOutput {
	return i.ToPatchBaselineArrayOutputWithContext(context.Background())
}

func (i PatchBaselineArray) ToPatchBaselineArrayOutputWithContext(ctx context.Context) PatchBaselineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchBaselineArrayOutput)
}

// PatchBaselineMapInput is an input type that accepts PatchBaselineMap and PatchBaselineMapOutput values.
// You can construct a concrete instance of `PatchBaselineMapInput` via:
//
//	PatchBaselineMap{ "key": PatchBaselineArgs{...} }
type PatchBaselineMapInput interface {
	pulumi.Input

	ToPatchBaselineMapOutput() PatchBaselineMapOutput
	ToPatchBaselineMapOutputWithContext(context.Context) PatchBaselineMapOutput
}

type PatchBaselineMap map[string]PatchBaselineInput

func (PatchBaselineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PatchBaseline)(nil)).Elem()
}

func (i PatchBaselineMap) ToPatchBaselineMapOutput() PatchBaselineMapOutput {
	return i.ToPatchBaselineMapOutputWithContext(context.Background())
}

func (i PatchBaselineMap) ToPatchBaselineMapOutputWithContext(ctx context.Context) PatchBaselineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchBaselineMapOutput)
}

type PatchBaselineOutput struct{ *pulumi.OutputState }

func (PatchBaselineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchBaseline)(nil)).Elem()
}

func (o PatchBaselineOutput) ToPatchBaselineOutput() PatchBaselineOutput {
	return o
}

func (o PatchBaselineOutput) ToPatchBaselineOutputWithContext(ctx context.Context) PatchBaselineOutput {
	return o
}

func (o PatchBaselineOutput) ApprovalRules() PatchBaselineApprovalRuleArrayOutput {
	return o.ApplyT(func(v *PatchBaseline) PatchBaselineApprovalRuleArrayOutput { return v.ApprovalRules }).(PatchBaselineApprovalRuleArrayOutput)
}

func (o PatchBaselineOutput) ApprovedPatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringArrayOutput { return v.ApprovedPatches }).(pulumi.StringArrayOutput)
}

func (o PatchBaselineOutput) ApprovedPatchesComplianceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringPtrOutput { return v.ApprovedPatchesComplianceLevel }).(pulumi.StringPtrOutput)
}

func (o PatchBaselineOutput) ApprovedPatchesEnableNonSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.BoolPtrOutput { return v.ApprovedPatchesEnableNonSecurity }).(pulumi.BoolPtrOutput)
}

func (o PatchBaselineOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o PatchBaselineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PatchBaselineOutput) GlobalFilters() PatchBaselineGlobalFilterArrayOutput {
	return o.ApplyT(func(v *PatchBaseline) PatchBaselineGlobalFilterArrayOutput { return v.GlobalFilters }).(PatchBaselineGlobalFilterArrayOutput)
}

func (o PatchBaselineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PatchBaselineOutput) OperatingSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringPtrOutput { return v.OperatingSystem }).(pulumi.StringPtrOutput)
}

func (o PatchBaselineOutput) RejectedPatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringArrayOutput { return v.RejectedPatches }).(pulumi.StringArrayOutput)
}

func (o PatchBaselineOutput) RejectedPatchesAction() pulumi.StringOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringOutput { return v.RejectedPatchesAction }).(pulumi.StringOutput)
}

func (o PatchBaselineOutput) Sources() PatchBaselineSourceArrayOutput {
	return o.ApplyT(func(v *PatchBaseline) PatchBaselineSourceArrayOutput { return v.Sources }).(PatchBaselineSourceArrayOutput)
}

func (o PatchBaselineOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o PatchBaselineOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type PatchBaselineArrayOutput struct{ *pulumi.OutputState }

func (PatchBaselineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PatchBaseline)(nil)).Elem()
}

func (o PatchBaselineArrayOutput) ToPatchBaselineArrayOutput() PatchBaselineArrayOutput {
	return o
}

func (o PatchBaselineArrayOutput) ToPatchBaselineArrayOutputWithContext(ctx context.Context) PatchBaselineArrayOutput {
	return o
}

func (o PatchBaselineArrayOutput) Index(i pulumi.IntInput) PatchBaselineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PatchBaseline {
		return vs[0].([]*PatchBaseline)[vs[1].(int)]
	}).(PatchBaselineOutput)
}

type PatchBaselineMapOutput struct{ *pulumi.OutputState }

func (PatchBaselineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PatchBaseline)(nil)).Elem()
}

func (o PatchBaselineMapOutput) ToPatchBaselineMapOutput() PatchBaselineMapOutput {
	return o
}

func (o PatchBaselineMapOutput) ToPatchBaselineMapOutputWithContext(ctx context.Context) PatchBaselineMapOutput {
	return o
}

func (o PatchBaselineMapOutput) MapIndex(k pulumi.StringInput) PatchBaselineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PatchBaseline {
		return vs[0].(map[string]*PatchBaseline)[vs[1].(string)]
	}).(PatchBaselineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PatchBaselineInput)(nil)).Elem(), &PatchBaseline{})
	pulumi.RegisterInputType(reflect.TypeOf((*PatchBaselineArrayInput)(nil)).Elem(), PatchBaselineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PatchBaselineMapInput)(nil)).Elem(), PatchBaselineMap{})
	pulumi.RegisterOutputType(PatchBaselineOutput{})
	pulumi.RegisterOutputType(PatchBaselineArrayOutput{})
	pulumi.RegisterOutputType(PatchBaselineMapOutput{})
}
