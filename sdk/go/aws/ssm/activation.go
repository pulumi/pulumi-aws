// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Activation struct {
	pulumi.CustomResourceState

	ActivationCode    pulumi.StringOutput    `pulumi:"activationCode"`
	Description       pulumi.StringPtrOutput `pulumi:"description"`
	ExpirationDate    pulumi.StringOutput    `pulumi:"expirationDate"`
	Expired           pulumi.BoolOutput      `pulumi:"expired"`
	IamRole           pulumi.StringOutput    `pulumi:"iamRole"`
	Name              pulumi.StringOutput    `pulumi:"name"`
	RegistrationCount pulumi.IntOutput       `pulumi:"registrationCount"`
	RegistrationLimit pulumi.IntPtrOutput    `pulumi:"registrationLimit"`
	Tags              pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll           pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewActivation registers a new resource with the given unique name, arguments, and options.
func NewActivation(ctx *pulumi.Context,
	name string, args *ActivationArgs, opts ...pulumi.ResourceOption) (*Activation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IamRole == nil {
		return nil, errors.New("invalid value for required argument 'IamRole'")
	}
	var resource Activation
	err := ctx.RegisterResource("aws:ssm/activation:Activation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActivation gets an existing Activation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActivation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActivationState, opts ...pulumi.ResourceOption) (*Activation, error) {
	var resource Activation
	err := ctx.ReadResource("aws:ssm/activation:Activation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Activation resources.
type activationState struct {
	ActivationCode    *string           `pulumi:"activationCode"`
	Description       *string           `pulumi:"description"`
	ExpirationDate    *string           `pulumi:"expirationDate"`
	Expired           *bool             `pulumi:"expired"`
	IamRole           *string           `pulumi:"iamRole"`
	Name              *string           `pulumi:"name"`
	RegistrationCount *int              `pulumi:"registrationCount"`
	RegistrationLimit *int              `pulumi:"registrationLimit"`
	Tags              map[string]string `pulumi:"tags"`
	TagsAll           map[string]string `pulumi:"tagsAll"`
}

type ActivationState struct {
	ActivationCode    pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	ExpirationDate    pulumi.StringPtrInput
	Expired           pulumi.BoolPtrInput
	IamRole           pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	RegistrationCount pulumi.IntPtrInput
	RegistrationLimit pulumi.IntPtrInput
	Tags              pulumi.StringMapInput
	TagsAll           pulumi.StringMapInput
}

func (ActivationState) ElementType() reflect.Type {
	return reflect.TypeOf((*activationState)(nil)).Elem()
}

type activationArgs struct {
	Description       *string           `pulumi:"description"`
	ExpirationDate    *string           `pulumi:"expirationDate"`
	IamRole           string            `pulumi:"iamRole"`
	Name              *string           `pulumi:"name"`
	RegistrationLimit *int              `pulumi:"registrationLimit"`
	Tags              map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Activation resource.
type ActivationArgs struct {
	Description       pulumi.StringPtrInput
	ExpirationDate    pulumi.StringPtrInput
	IamRole           pulumi.StringInput
	Name              pulumi.StringPtrInput
	RegistrationLimit pulumi.IntPtrInput
	Tags              pulumi.StringMapInput
}

func (ActivationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activationArgs)(nil)).Elem()
}

type ActivationInput interface {
	pulumi.Input

	ToActivationOutput() ActivationOutput
	ToActivationOutputWithContext(ctx context.Context) ActivationOutput
}

func (*Activation) ElementType() reflect.Type {
	return reflect.TypeOf((**Activation)(nil)).Elem()
}

func (i *Activation) ToActivationOutput() ActivationOutput {
	return i.ToActivationOutputWithContext(context.Background())
}

func (i *Activation) ToActivationOutputWithContext(ctx context.Context) ActivationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivationOutput)
}

// ActivationArrayInput is an input type that accepts ActivationArray and ActivationArrayOutput values.
// You can construct a concrete instance of `ActivationArrayInput` via:
//
//	ActivationArray{ ActivationArgs{...} }
type ActivationArrayInput interface {
	pulumi.Input

	ToActivationArrayOutput() ActivationArrayOutput
	ToActivationArrayOutputWithContext(context.Context) ActivationArrayOutput
}

type ActivationArray []ActivationInput

func (ActivationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Activation)(nil)).Elem()
}

func (i ActivationArray) ToActivationArrayOutput() ActivationArrayOutput {
	return i.ToActivationArrayOutputWithContext(context.Background())
}

func (i ActivationArray) ToActivationArrayOutputWithContext(ctx context.Context) ActivationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivationArrayOutput)
}

// ActivationMapInput is an input type that accepts ActivationMap and ActivationMapOutput values.
// You can construct a concrete instance of `ActivationMapInput` via:
//
//	ActivationMap{ "key": ActivationArgs{...} }
type ActivationMapInput interface {
	pulumi.Input

	ToActivationMapOutput() ActivationMapOutput
	ToActivationMapOutputWithContext(context.Context) ActivationMapOutput
}

type ActivationMap map[string]ActivationInput

func (ActivationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Activation)(nil)).Elem()
}

func (i ActivationMap) ToActivationMapOutput() ActivationMapOutput {
	return i.ToActivationMapOutputWithContext(context.Background())
}

func (i ActivationMap) ToActivationMapOutputWithContext(ctx context.Context) ActivationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivationMapOutput)
}

type ActivationOutput struct{ *pulumi.OutputState }

func (ActivationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Activation)(nil)).Elem()
}

func (o ActivationOutput) ToActivationOutput() ActivationOutput {
	return o
}

func (o ActivationOutput) ToActivationOutputWithContext(ctx context.Context) ActivationOutput {
	return o
}

func (o ActivationOutput) ActivationCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Activation) pulumi.StringOutput { return v.ActivationCode }).(pulumi.StringOutput)
}

func (o ActivationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Activation) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ActivationOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Activation) pulumi.StringOutput { return v.ExpirationDate }).(pulumi.StringOutput)
}

func (o ActivationOutput) Expired() pulumi.BoolOutput {
	return o.ApplyT(func(v *Activation) pulumi.BoolOutput { return v.Expired }).(pulumi.BoolOutput)
}

func (o ActivationOutput) IamRole() pulumi.StringOutput {
	return o.ApplyT(func(v *Activation) pulumi.StringOutput { return v.IamRole }).(pulumi.StringOutput)
}

func (o ActivationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Activation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ActivationOutput) RegistrationCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Activation) pulumi.IntOutput { return v.RegistrationCount }).(pulumi.IntOutput)
}

func (o ActivationOutput) RegistrationLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Activation) pulumi.IntPtrOutput { return v.RegistrationLimit }).(pulumi.IntPtrOutput)
}

func (o ActivationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Activation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ActivationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Activation) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ActivationArrayOutput struct{ *pulumi.OutputState }

func (ActivationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Activation)(nil)).Elem()
}

func (o ActivationArrayOutput) ToActivationArrayOutput() ActivationArrayOutput {
	return o
}

func (o ActivationArrayOutput) ToActivationArrayOutputWithContext(ctx context.Context) ActivationArrayOutput {
	return o
}

func (o ActivationArrayOutput) Index(i pulumi.IntInput) ActivationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Activation {
		return vs[0].([]*Activation)[vs[1].(int)]
	}).(ActivationOutput)
}

type ActivationMapOutput struct{ *pulumi.OutputState }

func (ActivationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Activation)(nil)).Elem()
}

func (o ActivationMapOutput) ToActivationMapOutput() ActivationMapOutput {
	return o
}

func (o ActivationMapOutput) ToActivationMapOutputWithContext(ctx context.Context) ActivationMapOutput {
	return o
}

func (o ActivationMapOutput) MapIndex(k pulumi.StringInput) ActivationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Activation {
		return vs[0].(map[string]*Activation)[vs[1].(string)]
	}).(ActivationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActivationInput)(nil)).Elem(), &Activation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivationArrayInput)(nil)).Elem(), ActivationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivationMapInput)(nil)).Elem(), ActivationMap{})
	pulumi.RegisterOutputType(ActivationOutput{})
	pulumi.RegisterOutputType(ActivationArrayOutput{})
	pulumi.RegisterOutputType(ActivationMapOutput{})
}
