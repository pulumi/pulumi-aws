// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chime

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VoiceConnectorGroup struct {
	pulumi.CustomResourceState

	Connectors VoiceConnectorGroupConnectorArrayOutput `pulumi:"connectors"`
	Name       pulumi.StringOutput                     `pulumi:"name"`
}

// NewVoiceConnectorGroup registers a new resource with the given unique name, arguments, and options.
func NewVoiceConnectorGroup(ctx *pulumi.Context,
	name string, args *VoiceConnectorGroupArgs, opts ...pulumi.ResourceOption) (*VoiceConnectorGroup, error) {
	if args == nil {
		args = &VoiceConnectorGroupArgs{}
	}

	var resource VoiceConnectorGroup
	err := ctx.RegisterResource("aws:chime/voiceConnectorGroup:VoiceConnectorGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVoiceConnectorGroup gets an existing VoiceConnectorGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVoiceConnectorGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VoiceConnectorGroupState, opts ...pulumi.ResourceOption) (*VoiceConnectorGroup, error) {
	var resource VoiceConnectorGroup
	err := ctx.ReadResource("aws:chime/voiceConnectorGroup:VoiceConnectorGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VoiceConnectorGroup resources.
type voiceConnectorGroupState struct {
	Connectors []VoiceConnectorGroupConnector `pulumi:"connectors"`
	Name       *string                        `pulumi:"name"`
}

type VoiceConnectorGroupState struct {
	Connectors VoiceConnectorGroupConnectorArrayInput
	Name       pulumi.StringPtrInput
}

func (VoiceConnectorGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*voiceConnectorGroupState)(nil)).Elem()
}

type voiceConnectorGroupArgs struct {
	Connectors []VoiceConnectorGroupConnector `pulumi:"connectors"`
	Name       *string                        `pulumi:"name"`
}

// The set of arguments for constructing a VoiceConnectorGroup resource.
type VoiceConnectorGroupArgs struct {
	Connectors VoiceConnectorGroupConnectorArrayInput
	Name       pulumi.StringPtrInput
}

func (VoiceConnectorGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*voiceConnectorGroupArgs)(nil)).Elem()
}

type VoiceConnectorGroupInput interface {
	pulumi.Input

	ToVoiceConnectorGroupOutput() VoiceConnectorGroupOutput
	ToVoiceConnectorGroupOutputWithContext(ctx context.Context) VoiceConnectorGroupOutput
}

func (*VoiceConnectorGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**VoiceConnectorGroup)(nil)).Elem()
}

func (i *VoiceConnectorGroup) ToVoiceConnectorGroupOutput() VoiceConnectorGroupOutput {
	return i.ToVoiceConnectorGroupOutputWithContext(context.Background())
}

func (i *VoiceConnectorGroup) ToVoiceConnectorGroupOutputWithContext(ctx context.Context) VoiceConnectorGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceConnectorGroupOutput)
}

// VoiceConnectorGroupArrayInput is an input type that accepts VoiceConnectorGroupArray and VoiceConnectorGroupArrayOutput values.
// You can construct a concrete instance of `VoiceConnectorGroupArrayInput` via:
//
//	VoiceConnectorGroupArray{ VoiceConnectorGroupArgs{...} }
type VoiceConnectorGroupArrayInput interface {
	pulumi.Input

	ToVoiceConnectorGroupArrayOutput() VoiceConnectorGroupArrayOutput
	ToVoiceConnectorGroupArrayOutputWithContext(context.Context) VoiceConnectorGroupArrayOutput
}

type VoiceConnectorGroupArray []VoiceConnectorGroupInput

func (VoiceConnectorGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VoiceConnectorGroup)(nil)).Elem()
}

func (i VoiceConnectorGroupArray) ToVoiceConnectorGroupArrayOutput() VoiceConnectorGroupArrayOutput {
	return i.ToVoiceConnectorGroupArrayOutputWithContext(context.Background())
}

func (i VoiceConnectorGroupArray) ToVoiceConnectorGroupArrayOutputWithContext(ctx context.Context) VoiceConnectorGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceConnectorGroupArrayOutput)
}

// VoiceConnectorGroupMapInput is an input type that accepts VoiceConnectorGroupMap and VoiceConnectorGroupMapOutput values.
// You can construct a concrete instance of `VoiceConnectorGroupMapInput` via:
//
//	VoiceConnectorGroupMap{ "key": VoiceConnectorGroupArgs{...} }
type VoiceConnectorGroupMapInput interface {
	pulumi.Input

	ToVoiceConnectorGroupMapOutput() VoiceConnectorGroupMapOutput
	ToVoiceConnectorGroupMapOutputWithContext(context.Context) VoiceConnectorGroupMapOutput
}

type VoiceConnectorGroupMap map[string]VoiceConnectorGroupInput

func (VoiceConnectorGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VoiceConnectorGroup)(nil)).Elem()
}

func (i VoiceConnectorGroupMap) ToVoiceConnectorGroupMapOutput() VoiceConnectorGroupMapOutput {
	return i.ToVoiceConnectorGroupMapOutputWithContext(context.Background())
}

func (i VoiceConnectorGroupMap) ToVoiceConnectorGroupMapOutputWithContext(ctx context.Context) VoiceConnectorGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceConnectorGroupMapOutput)
}

type VoiceConnectorGroupOutput struct{ *pulumi.OutputState }

func (VoiceConnectorGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VoiceConnectorGroup)(nil)).Elem()
}

func (o VoiceConnectorGroupOutput) ToVoiceConnectorGroupOutput() VoiceConnectorGroupOutput {
	return o
}

func (o VoiceConnectorGroupOutput) ToVoiceConnectorGroupOutputWithContext(ctx context.Context) VoiceConnectorGroupOutput {
	return o
}

func (o VoiceConnectorGroupOutput) Connectors() VoiceConnectorGroupConnectorArrayOutput {
	return o.ApplyT(func(v *VoiceConnectorGroup) VoiceConnectorGroupConnectorArrayOutput { return v.Connectors }).(VoiceConnectorGroupConnectorArrayOutput)
}

func (o VoiceConnectorGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VoiceConnectorGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type VoiceConnectorGroupArrayOutput struct{ *pulumi.OutputState }

func (VoiceConnectorGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VoiceConnectorGroup)(nil)).Elem()
}

func (o VoiceConnectorGroupArrayOutput) ToVoiceConnectorGroupArrayOutput() VoiceConnectorGroupArrayOutput {
	return o
}

func (o VoiceConnectorGroupArrayOutput) ToVoiceConnectorGroupArrayOutputWithContext(ctx context.Context) VoiceConnectorGroupArrayOutput {
	return o
}

func (o VoiceConnectorGroupArrayOutput) Index(i pulumi.IntInput) VoiceConnectorGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VoiceConnectorGroup {
		return vs[0].([]*VoiceConnectorGroup)[vs[1].(int)]
	}).(VoiceConnectorGroupOutput)
}

type VoiceConnectorGroupMapOutput struct{ *pulumi.OutputState }

func (VoiceConnectorGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VoiceConnectorGroup)(nil)).Elem()
}

func (o VoiceConnectorGroupMapOutput) ToVoiceConnectorGroupMapOutput() VoiceConnectorGroupMapOutput {
	return o
}

func (o VoiceConnectorGroupMapOutput) ToVoiceConnectorGroupMapOutputWithContext(ctx context.Context) VoiceConnectorGroupMapOutput {
	return o
}

func (o VoiceConnectorGroupMapOutput) MapIndex(k pulumi.StringInput) VoiceConnectorGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VoiceConnectorGroup {
		return vs[0].(map[string]*VoiceConnectorGroup)[vs[1].(string)]
	}).(VoiceConnectorGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VoiceConnectorGroupInput)(nil)).Elem(), &VoiceConnectorGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*VoiceConnectorGroupArrayInput)(nil)).Elem(), VoiceConnectorGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VoiceConnectorGroupMapInput)(nil)).Elem(), VoiceConnectorGroupMap{})
	pulumi.RegisterOutputType(VoiceConnectorGroupOutput{})
	pulumi.RegisterOutputType(VoiceConnectorGroupArrayOutput{})
	pulumi.RegisterOutputType(VoiceConnectorGroupMapOutput{})
}
