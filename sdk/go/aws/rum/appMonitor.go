// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CloudWatch RUM App Monitor resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/rum"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rum.NewAppMonitor(ctx, "example", &rum.AppMonitorArgs{
//				Domain: pulumi.String("localhost"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_rum_app_monitor.example
//
//	id = "example" } Using `pulumi import`, import Cloudwatch RUM App Monitor using the `name`. For exampleconsole % pulumi import aws_rum_app_monitor.example example
type AppMonitor struct {
	pulumi.CustomResourceState

	// configuration data for the app monitor. See appMonitorConfiguration below.
	AppMonitorConfiguration AppMonitorAppMonitorConfigurationOutput `pulumi:"appMonitorConfiguration"`
	// The unique ID of the app monitor. Useful for JS templates.
	AppMonitorId pulumi.StringOutput `pulumi:"appMonitorId"`
	// The Amazon Resource Name (ARN) specifying the app monitor.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
	CustomEvents AppMonitorCustomEventsOutput `pulumi:"customEvents"`
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
	CwLogEnabled pulumi.BoolPtrOutput `pulumi:"cwLogEnabled"`
	// The name of the log group where the copies are stored.
	CwLogGroup pulumi.StringOutput `pulumi:"cwLogGroup"`
	// The top-level internet domain name for which your application has administrative authority.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The name of the log stream.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewAppMonitor registers a new resource with the given unique name, arguments, and options.
func NewAppMonitor(ctx *pulumi.Context,
	name string, args *AppMonitorArgs, opts ...pulumi.ResourceOption) (*AppMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppMonitor
	err := ctx.RegisterResource("aws:rum/appMonitor:AppMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppMonitor gets an existing AppMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppMonitorState, opts ...pulumi.ResourceOption) (*AppMonitor, error) {
	var resource AppMonitor
	err := ctx.ReadResource("aws:rum/appMonitor:AppMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppMonitor resources.
type appMonitorState struct {
	// configuration data for the app monitor. See appMonitorConfiguration below.
	AppMonitorConfiguration *AppMonitorAppMonitorConfiguration `pulumi:"appMonitorConfiguration"`
	// The unique ID of the app monitor. Useful for JS templates.
	AppMonitorId *string `pulumi:"appMonitorId"`
	// The Amazon Resource Name (ARN) specifying the app monitor.
	Arn *string `pulumi:"arn"`
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
	CustomEvents *AppMonitorCustomEvents `pulumi:"customEvents"`
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
	CwLogEnabled *bool `pulumi:"cwLogEnabled"`
	// The name of the log group where the copies are stored.
	CwLogGroup *string `pulumi:"cwLogGroup"`
	// The top-level internet domain name for which your application has administrative authority.
	Domain *string `pulumi:"domain"`
	// The name of the log stream.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type AppMonitorState struct {
	// configuration data for the app monitor. See appMonitorConfiguration below.
	AppMonitorConfiguration AppMonitorAppMonitorConfigurationPtrInput
	// The unique ID of the app monitor. Useful for JS templates.
	AppMonitorId pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) specifying the app monitor.
	Arn pulumi.StringPtrInput
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
	CustomEvents AppMonitorCustomEventsPtrInput
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
	CwLogEnabled pulumi.BoolPtrInput
	// The name of the log group where the copies are stored.
	CwLogGroup pulumi.StringPtrInput
	// The top-level internet domain name for which your application has administrative authority.
	Domain pulumi.StringPtrInput
	// The name of the log stream.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (AppMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*appMonitorState)(nil)).Elem()
}

type appMonitorArgs struct {
	// configuration data for the app monitor. See appMonitorConfiguration below.
	AppMonitorConfiguration *AppMonitorAppMonitorConfiguration `pulumi:"appMonitorConfiguration"`
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
	CustomEvents *AppMonitorCustomEvents `pulumi:"customEvents"`
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
	CwLogEnabled *bool `pulumi:"cwLogEnabled"`
	// The top-level internet domain name for which your application has administrative authority.
	Domain string `pulumi:"domain"`
	// The name of the log stream.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AppMonitor resource.
type AppMonitorArgs struct {
	// configuration data for the app monitor. See appMonitorConfiguration below.
	AppMonitorConfiguration AppMonitorAppMonitorConfigurationPtrInput
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
	CustomEvents AppMonitorCustomEventsPtrInput
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
	CwLogEnabled pulumi.BoolPtrInput
	// The top-level internet domain name for which your application has administrative authority.
	Domain pulumi.StringInput
	// The name of the log stream.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (AppMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appMonitorArgs)(nil)).Elem()
}

type AppMonitorInput interface {
	pulumi.Input

	ToAppMonitorOutput() AppMonitorOutput
	ToAppMonitorOutputWithContext(ctx context.Context) AppMonitorOutput
}

func (*AppMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitor)(nil)).Elem()
}

func (i *AppMonitor) ToAppMonitorOutput() AppMonitorOutput {
	return i.ToAppMonitorOutputWithContext(context.Background())
}

func (i *AppMonitor) ToAppMonitorOutputWithContext(ctx context.Context) AppMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorOutput)
}

// AppMonitorArrayInput is an input type that accepts AppMonitorArray and AppMonitorArrayOutput values.
// You can construct a concrete instance of `AppMonitorArrayInput` via:
//
//	AppMonitorArray{ AppMonitorArgs{...} }
type AppMonitorArrayInput interface {
	pulumi.Input

	ToAppMonitorArrayOutput() AppMonitorArrayOutput
	ToAppMonitorArrayOutputWithContext(context.Context) AppMonitorArrayOutput
}

type AppMonitorArray []AppMonitorInput

func (AppMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppMonitor)(nil)).Elem()
}

func (i AppMonitorArray) ToAppMonitorArrayOutput() AppMonitorArrayOutput {
	return i.ToAppMonitorArrayOutputWithContext(context.Background())
}

func (i AppMonitorArray) ToAppMonitorArrayOutputWithContext(ctx context.Context) AppMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorArrayOutput)
}

// AppMonitorMapInput is an input type that accepts AppMonitorMap and AppMonitorMapOutput values.
// You can construct a concrete instance of `AppMonitorMapInput` via:
//
//	AppMonitorMap{ "key": AppMonitorArgs{...} }
type AppMonitorMapInput interface {
	pulumi.Input

	ToAppMonitorMapOutput() AppMonitorMapOutput
	ToAppMonitorMapOutputWithContext(context.Context) AppMonitorMapOutput
}

type AppMonitorMap map[string]AppMonitorInput

func (AppMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppMonitor)(nil)).Elem()
}

func (i AppMonitorMap) ToAppMonitorMapOutput() AppMonitorMapOutput {
	return i.ToAppMonitorMapOutputWithContext(context.Background())
}

func (i AppMonitorMap) ToAppMonitorMapOutputWithContext(ctx context.Context) AppMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorMapOutput)
}

type AppMonitorOutput struct{ *pulumi.OutputState }

func (AppMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitor)(nil)).Elem()
}

func (o AppMonitorOutput) ToAppMonitorOutput() AppMonitorOutput {
	return o
}

func (o AppMonitorOutput) ToAppMonitorOutputWithContext(ctx context.Context) AppMonitorOutput {
	return o
}

// configuration data for the app monitor. See appMonitorConfiguration below.
func (o AppMonitorOutput) AppMonitorConfiguration() AppMonitorAppMonitorConfigurationOutput {
	return o.ApplyT(func(v *AppMonitor) AppMonitorAppMonitorConfigurationOutput { return v.AppMonitorConfiguration }).(AppMonitorAppMonitorConfigurationOutput)
}

// The unique ID of the app monitor. Useful for JS templates.
func (o AppMonitorOutput) AppMonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.AppMonitorId }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) specifying the app monitor.
func (o AppMonitorOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See customEvents below.
func (o AppMonitorOutput) CustomEvents() AppMonitorCustomEventsOutput {
	return o.ApplyT(func(v *AppMonitor) AppMonitorCustomEventsOutput { return v.CustomEvents }).(AppMonitorCustomEventsOutput)
}

// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
func (o AppMonitorOutput) CwLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.BoolPtrOutput { return v.CwLogEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the log group where the copies are stored.
func (o AppMonitorOutput) CwLogGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.CwLogGroup }).(pulumi.StringOutput)
}

// The top-level internet domain name for which your application has administrative authority.
func (o AppMonitorOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The name of the log stream.
func (o AppMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AppMonitorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o AppMonitorOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type AppMonitorArrayOutput struct{ *pulumi.OutputState }

func (AppMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppMonitor)(nil)).Elem()
}

func (o AppMonitorArrayOutput) ToAppMonitorArrayOutput() AppMonitorArrayOutput {
	return o
}

func (o AppMonitorArrayOutput) ToAppMonitorArrayOutputWithContext(ctx context.Context) AppMonitorArrayOutput {
	return o
}

func (o AppMonitorArrayOutput) Index(i pulumi.IntInput) AppMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppMonitor {
		return vs[0].([]*AppMonitor)[vs[1].(int)]
	}).(AppMonitorOutput)
}

type AppMonitorMapOutput struct{ *pulumi.OutputState }

func (AppMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppMonitor)(nil)).Elem()
}

func (o AppMonitorMapOutput) ToAppMonitorMapOutput() AppMonitorMapOutput {
	return o
}

func (o AppMonitorMapOutput) ToAppMonitorMapOutputWithContext(ctx context.Context) AppMonitorMapOutput {
	return o
}

func (o AppMonitorMapOutput) MapIndex(k pulumi.StringInput) AppMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppMonitor {
		return vs[0].(map[string]*AppMonitor)[vs[1].(string)]
	}).(AppMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorInput)(nil)).Elem(), &AppMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorArrayInput)(nil)).Elem(), AppMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorMapInput)(nil)).Elem(), AppMonitorMap{})
	pulumi.RegisterOutputType(AppMonitorOutput{})
	pulumi.RegisterOutputType(AppMonitorArrayOutput{})
	pulumi.RegisterOutputType(AppMonitorMapOutput{})
}
