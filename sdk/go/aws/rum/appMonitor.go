// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AppMonitor struct {
	pulumi.CustomResourceState

	AppMonitorConfiguration AppMonitorAppMonitorConfigurationOutput `pulumi:"appMonitorConfiguration"`
	AppMonitorId            pulumi.StringOutput                     `pulumi:"appMonitorId"`
	Arn                     pulumi.StringOutput                     `pulumi:"arn"`
	CwLogEnabled            pulumi.BoolPtrOutput                    `pulumi:"cwLogEnabled"`
	CwLogGroup              pulumi.StringOutput                     `pulumi:"cwLogGroup"`
	Domain                  pulumi.StringOutput                     `pulumi:"domain"`
	Name                    pulumi.StringOutput                     `pulumi:"name"`
	Tags                    pulumi.StringMapOutput                  `pulumi:"tags"`
	TagsAll                 pulumi.StringMapOutput                  `pulumi:"tagsAll"`
}

// NewAppMonitor registers a new resource with the given unique name, arguments, and options.
func NewAppMonitor(ctx *pulumi.Context,
	name string, args *AppMonitorArgs, opts ...pulumi.ResourceOption) (*AppMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	var resource AppMonitor
	err := ctx.RegisterResource("aws:rum/appMonitor:AppMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppMonitor gets an existing AppMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppMonitorState, opts ...pulumi.ResourceOption) (*AppMonitor, error) {
	var resource AppMonitor
	err := ctx.ReadResource("aws:rum/appMonitor:AppMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppMonitor resources.
type appMonitorState struct {
	AppMonitorConfiguration *AppMonitorAppMonitorConfiguration `pulumi:"appMonitorConfiguration"`
	AppMonitorId            *string                            `pulumi:"appMonitorId"`
	Arn                     *string                            `pulumi:"arn"`
	CwLogEnabled            *bool                              `pulumi:"cwLogEnabled"`
	CwLogGroup              *string                            `pulumi:"cwLogGroup"`
	Domain                  *string                            `pulumi:"domain"`
	Name                    *string                            `pulumi:"name"`
	Tags                    map[string]string                  `pulumi:"tags"`
	TagsAll                 map[string]string                  `pulumi:"tagsAll"`
}

type AppMonitorState struct {
	AppMonitorConfiguration AppMonitorAppMonitorConfigurationPtrInput
	AppMonitorId            pulumi.StringPtrInput
	Arn                     pulumi.StringPtrInput
	CwLogEnabled            pulumi.BoolPtrInput
	CwLogGroup              pulumi.StringPtrInput
	Domain                  pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	Tags                    pulumi.StringMapInput
	TagsAll                 pulumi.StringMapInput
}

func (AppMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*appMonitorState)(nil)).Elem()
}

type appMonitorArgs struct {
	AppMonitorConfiguration *AppMonitorAppMonitorConfiguration `pulumi:"appMonitorConfiguration"`
	CwLogEnabled            *bool                              `pulumi:"cwLogEnabled"`
	Domain                  string                             `pulumi:"domain"`
	Name                    *string                            `pulumi:"name"`
	Tags                    map[string]string                  `pulumi:"tags"`
}

// The set of arguments for constructing a AppMonitor resource.
type AppMonitorArgs struct {
	AppMonitorConfiguration AppMonitorAppMonitorConfigurationPtrInput
	CwLogEnabled            pulumi.BoolPtrInput
	Domain                  pulumi.StringInput
	Name                    pulumi.StringPtrInput
	Tags                    pulumi.StringMapInput
}

func (AppMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appMonitorArgs)(nil)).Elem()
}

type AppMonitorInput interface {
	pulumi.Input

	ToAppMonitorOutput() AppMonitorOutput
	ToAppMonitorOutputWithContext(ctx context.Context) AppMonitorOutput
}

func (*AppMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitor)(nil)).Elem()
}

func (i *AppMonitor) ToAppMonitorOutput() AppMonitorOutput {
	return i.ToAppMonitorOutputWithContext(context.Background())
}

func (i *AppMonitor) ToAppMonitorOutputWithContext(ctx context.Context) AppMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorOutput)
}

// AppMonitorArrayInput is an input type that accepts AppMonitorArray and AppMonitorArrayOutput values.
// You can construct a concrete instance of `AppMonitorArrayInput` via:
//
//	AppMonitorArray{ AppMonitorArgs{...} }
type AppMonitorArrayInput interface {
	pulumi.Input

	ToAppMonitorArrayOutput() AppMonitorArrayOutput
	ToAppMonitorArrayOutputWithContext(context.Context) AppMonitorArrayOutput
}

type AppMonitorArray []AppMonitorInput

func (AppMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppMonitor)(nil)).Elem()
}

func (i AppMonitorArray) ToAppMonitorArrayOutput() AppMonitorArrayOutput {
	return i.ToAppMonitorArrayOutputWithContext(context.Background())
}

func (i AppMonitorArray) ToAppMonitorArrayOutputWithContext(ctx context.Context) AppMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorArrayOutput)
}

// AppMonitorMapInput is an input type that accepts AppMonitorMap and AppMonitorMapOutput values.
// You can construct a concrete instance of `AppMonitorMapInput` via:
//
//	AppMonitorMap{ "key": AppMonitorArgs{...} }
type AppMonitorMapInput interface {
	pulumi.Input

	ToAppMonitorMapOutput() AppMonitorMapOutput
	ToAppMonitorMapOutputWithContext(context.Context) AppMonitorMapOutput
}

type AppMonitorMap map[string]AppMonitorInput

func (AppMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppMonitor)(nil)).Elem()
}

func (i AppMonitorMap) ToAppMonitorMapOutput() AppMonitorMapOutput {
	return i.ToAppMonitorMapOutputWithContext(context.Background())
}

func (i AppMonitorMap) ToAppMonitorMapOutputWithContext(ctx context.Context) AppMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorMapOutput)
}

type AppMonitorOutput struct{ *pulumi.OutputState }

func (AppMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitor)(nil)).Elem()
}

func (o AppMonitorOutput) ToAppMonitorOutput() AppMonitorOutput {
	return o
}

func (o AppMonitorOutput) ToAppMonitorOutputWithContext(ctx context.Context) AppMonitorOutput {
	return o
}

func (o AppMonitorOutput) AppMonitorConfiguration() AppMonitorAppMonitorConfigurationOutput {
	return o.ApplyT(func(v *AppMonitor) AppMonitorAppMonitorConfigurationOutput { return v.AppMonitorConfiguration }).(AppMonitorAppMonitorConfigurationOutput)
}

func (o AppMonitorOutput) AppMonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.AppMonitorId }).(pulumi.StringOutput)
}

func (o AppMonitorOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o AppMonitorOutput) CwLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.BoolPtrOutput { return v.CwLogEnabled }).(pulumi.BoolPtrOutput)
}

func (o AppMonitorOutput) CwLogGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.CwLogGroup }).(pulumi.StringOutput)
}

func (o AppMonitorOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o AppMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AppMonitorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o AppMonitorOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type AppMonitorArrayOutput struct{ *pulumi.OutputState }

func (AppMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppMonitor)(nil)).Elem()
}

func (o AppMonitorArrayOutput) ToAppMonitorArrayOutput() AppMonitorArrayOutput {
	return o
}

func (o AppMonitorArrayOutput) ToAppMonitorArrayOutputWithContext(ctx context.Context) AppMonitorArrayOutput {
	return o
}

func (o AppMonitorArrayOutput) Index(i pulumi.IntInput) AppMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppMonitor {
		return vs[0].([]*AppMonitor)[vs[1].(int)]
	}).(AppMonitorOutput)
}

type AppMonitorMapOutput struct{ *pulumi.OutputState }

func (AppMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppMonitor)(nil)).Elem()
}

func (o AppMonitorMapOutput) ToAppMonitorMapOutput() AppMonitorMapOutput {
	return o
}

func (o AppMonitorMapOutput) ToAppMonitorMapOutputWithContext(ctx context.Context) AppMonitorMapOutput {
	return o
}

func (o AppMonitorMapOutput) MapIndex(k pulumi.StringInput) AppMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppMonitor {
		return vs[0].(map[string]*AppMonitor)[vs[1].(string)]
	}).(AppMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorInput)(nil)).Elem(), &AppMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorArrayInput)(nil)).Elem(), AppMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorMapInput)(nil)).Elem(), AppMonitorMap{})
	pulumi.RegisterOutputType(AppMonitorOutput{})
	pulumi.RegisterOutputType(AppMonitorArrayOutput{})
	pulumi.RegisterOutputType(AppMonitorMapOutput{})
}
