// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CloudWatch RUM Metrics Destination resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/rum"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rum.NewMetricsDestination(ctx, "example", &rum.MetricsDestinationArgs{
//				AppMonitorName: pulumi.Any(aws_rum_app_monitor.Example.Name),
//				Destination:    pulumi.String("CloudWatch"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cloudwatch RUM Metrics Destination can be imported using the `id`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:rum/metricsDestination:MetricsDestination example example
//
// ```
type MetricsDestination struct {
	pulumi.CustomResourceState

	// The name of the CloudWatch RUM app monitor that will send the metrics.
	AppMonitorName pulumi.StringOutput `pulumi:"appMonitorName"`
	// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn pulumi.StringPtrOutput `pulumi:"destinationArn"`
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	IamRoleArn pulumi.StringPtrOutput `pulumi:"iamRoleArn"`
}

// NewMetricsDestination registers a new resource with the given unique name, arguments, and options.
func NewMetricsDestination(ctx *pulumi.Context,
	name string, args *MetricsDestinationArgs, opts ...pulumi.ResourceOption) (*MetricsDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppMonitorName == nil {
		return nil, errors.New("invalid value for required argument 'AppMonitorName'")
	}
	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	var resource MetricsDestination
	err := ctx.RegisterResource("aws:rum/metricsDestination:MetricsDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricsDestination gets an existing MetricsDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricsDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricsDestinationState, opts ...pulumi.ResourceOption) (*MetricsDestination, error) {
	var resource MetricsDestination
	err := ctx.ReadResource("aws:rum/metricsDestination:MetricsDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricsDestination resources.
type metricsDestinationState struct {
	// The name of the CloudWatch RUM app monitor that will send the metrics.
	AppMonitorName *string `pulumi:"appMonitorName"`
	// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination *string `pulumi:"destination"`
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn *string `pulumi:"destinationArn"`
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	IamRoleArn *string `pulumi:"iamRoleArn"`
}

type MetricsDestinationState struct {
	// The name of the CloudWatch RUM app monitor that will send the metrics.
	AppMonitorName pulumi.StringPtrInput
	// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination pulumi.StringPtrInput
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn pulumi.StringPtrInput
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	IamRoleArn pulumi.StringPtrInput
}

func (MetricsDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsDestinationState)(nil)).Elem()
}

type metricsDestinationArgs struct {
	// The name of the CloudWatch RUM app monitor that will send the metrics.
	AppMonitorName string `pulumi:"appMonitorName"`
	// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination string `pulumi:"destination"`
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn *string `pulumi:"destinationArn"`
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	IamRoleArn *string `pulumi:"iamRoleArn"`
}

// The set of arguments for constructing a MetricsDestination resource.
type MetricsDestinationArgs struct {
	// The name of the CloudWatch RUM app monitor that will send the metrics.
	AppMonitorName pulumi.StringInput
	// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination pulumi.StringInput
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn pulumi.StringPtrInput
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	IamRoleArn pulumi.StringPtrInput
}

func (MetricsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsDestinationArgs)(nil)).Elem()
}

type MetricsDestinationInput interface {
	pulumi.Input

	ToMetricsDestinationOutput() MetricsDestinationOutput
	ToMetricsDestinationOutputWithContext(ctx context.Context) MetricsDestinationOutput
}

func (*MetricsDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsDestination)(nil)).Elem()
}

func (i *MetricsDestination) ToMetricsDestinationOutput() MetricsDestinationOutput {
	return i.ToMetricsDestinationOutputWithContext(context.Background())
}

func (i *MetricsDestination) ToMetricsDestinationOutputWithContext(ctx context.Context) MetricsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsDestinationOutput)
}

// MetricsDestinationArrayInput is an input type that accepts MetricsDestinationArray and MetricsDestinationArrayOutput values.
// You can construct a concrete instance of `MetricsDestinationArrayInput` via:
//
//	MetricsDestinationArray{ MetricsDestinationArgs{...} }
type MetricsDestinationArrayInput interface {
	pulumi.Input

	ToMetricsDestinationArrayOutput() MetricsDestinationArrayOutput
	ToMetricsDestinationArrayOutputWithContext(context.Context) MetricsDestinationArrayOutput
}

type MetricsDestinationArray []MetricsDestinationInput

func (MetricsDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricsDestination)(nil)).Elem()
}

func (i MetricsDestinationArray) ToMetricsDestinationArrayOutput() MetricsDestinationArrayOutput {
	return i.ToMetricsDestinationArrayOutputWithContext(context.Background())
}

func (i MetricsDestinationArray) ToMetricsDestinationArrayOutputWithContext(ctx context.Context) MetricsDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsDestinationArrayOutput)
}

// MetricsDestinationMapInput is an input type that accepts MetricsDestinationMap and MetricsDestinationMapOutput values.
// You can construct a concrete instance of `MetricsDestinationMapInput` via:
//
//	MetricsDestinationMap{ "key": MetricsDestinationArgs{...} }
type MetricsDestinationMapInput interface {
	pulumi.Input

	ToMetricsDestinationMapOutput() MetricsDestinationMapOutput
	ToMetricsDestinationMapOutputWithContext(context.Context) MetricsDestinationMapOutput
}

type MetricsDestinationMap map[string]MetricsDestinationInput

func (MetricsDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricsDestination)(nil)).Elem()
}

func (i MetricsDestinationMap) ToMetricsDestinationMapOutput() MetricsDestinationMapOutput {
	return i.ToMetricsDestinationMapOutputWithContext(context.Background())
}

func (i MetricsDestinationMap) ToMetricsDestinationMapOutputWithContext(ctx context.Context) MetricsDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsDestinationMapOutput)
}

type MetricsDestinationOutput struct{ *pulumi.OutputState }

func (MetricsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsDestination)(nil)).Elem()
}

func (o MetricsDestinationOutput) ToMetricsDestinationOutput() MetricsDestinationOutput {
	return o
}

func (o MetricsDestinationOutput) ToMetricsDestinationOutputWithContext(ctx context.Context) MetricsDestinationOutput {
	return o
}

// The name of the CloudWatch RUM app monitor that will send the metrics.
func (o MetricsDestinationOutput) AppMonitorName() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsDestination) pulumi.StringOutput { return v.AppMonitorName }).(pulumi.StringOutput)
}

// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
func (o MetricsDestinationOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsDestination) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
func (o MetricsDestinationOutput) DestinationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsDestination) pulumi.StringPtrOutput { return v.DestinationArn }).(pulumi.StringPtrOutput)
}

// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
func (o MetricsDestinationOutput) IamRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsDestination) pulumi.StringPtrOutput { return v.IamRoleArn }).(pulumi.StringPtrOutput)
}

type MetricsDestinationArrayOutput struct{ *pulumi.OutputState }

func (MetricsDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricsDestination)(nil)).Elem()
}

func (o MetricsDestinationArrayOutput) ToMetricsDestinationArrayOutput() MetricsDestinationArrayOutput {
	return o
}

func (o MetricsDestinationArrayOutput) ToMetricsDestinationArrayOutputWithContext(ctx context.Context) MetricsDestinationArrayOutput {
	return o
}

func (o MetricsDestinationArrayOutput) Index(i pulumi.IntInput) MetricsDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricsDestination {
		return vs[0].([]*MetricsDestination)[vs[1].(int)]
	}).(MetricsDestinationOutput)
}

type MetricsDestinationMapOutput struct{ *pulumi.OutputState }

func (MetricsDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricsDestination)(nil)).Elem()
}

func (o MetricsDestinationMapOutput) ToMetricsDestinationMapOutput() MetricsDestinationMapOutput {
	return o
}

func (o MetricsDestinationMapOutput) ToMetricsDestinationMapOutputWithContext(ctx context.Context) MetricsDestinationMapOutput {
	return o
}

func (o MetricsDestinationMapOutput) MapIndex(k pulumi.StringInput) MetricsDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricsDestination {
		return vs[0].(map[string]*MetricsDestination)[vs[1].(string)]
	}).(MetricsDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsDestinationInput)(nil)).Elem(), &MetricsDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsDestinationArrayInput)(nil)).Elem(), MetricsDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsDestinationMapInput)(nil)).Elem(), MetricsDestinationMap{})
	pulumi.RegisterOutputType(MetricsDestinationOutput{})
	pulumi.RegisterOutputType(MetricsDestinationArrayOutput{})
	pulumi.RegisterOutputType(MetricsDestinationMapOutput{})
}
