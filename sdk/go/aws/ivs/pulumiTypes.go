// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RecordingConfigurationDestinationConfiguration struct {
	// S3 destination configuration where recorded videos will be stored.
	S3 RecordingConfigurationDestinationConfigurationS3 `pulumi:"s3"`
}

// RecordingConfigurationDestinationConfigurationInput is an input type that accepts RecordingConfigurationDestinationConfigurationArgs and RecordingConfigurationDestinationConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationDestinationConfigurationInput` via:
//
//	RecordingConfigurationDestinationConfigurationArgs{...}
type RecordingConfigurationDestinationConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput
	ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Context) RecordingConfigurationDestinationConfigurationOutput
}

type RecordingConfigurationDestinationConfigurationArgs struct {
	// S3 destination configuration where recorded videos will be stored.
	S3 RecordingConfigurationDestinationConfigurationS3Input `pulumi:"s3"`
}

func (RecordingConfigurationDestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return i.ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationOutput)
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationPtrOutput() RecordingConfigurationDestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationOutput).ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationDestinationConfigurationPtrInput is an input type that accepts RecordingConfigurationDestinationConfigurationArgs, RecordingConfigurationDestinationConfigurationPtr and RecordingConfigurationDestinationConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationDestinationConfigurationPtrInput` via:
//
//	        RecordingConfigurationDestinationConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationDestinationConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationDestinationConfigurationPtrOutput() RecordingConfigurationDestinationConfigurationPtrOutput
	ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationDestinationConfigurationPtrOutput
}

type recordingConfigurationDestinationConfigurationPtrType RecordingConfigurationDestinationConfigurationArgs

func RecordingConfigurationDestinationConfigurationPtr(v *RecordingConfigurationDestinationConfigurationArgs) RecordingConfigurationDestinationConfigurationPtrInput {
	return (*recordingConfigurationDestinationConfigurationPtrType)(v)
}

func (*recordingConfigurationDestinationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationDestinationConfigurationPtrType) ToRecordingConfigurationDestinationConfigurationPtrOutput() RecordingConfigurationDestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationDestinationConfigurationPtrType) ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationPtrOutput)
}

type RecordingConfigurationDestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationPtrOutput() RecordingConfigurationDestinationConfigurationPtrOutput {
	return o.ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationDestinationConfiguration) *RecordingConfigurationDestinationConfiguration {
		return &v
	}).(RecordingConfigurationDestinationConfigurationPtrOutput)
}

// S3 destination configuration where recorded videos will be stored.
func (o RecordingConfigurationDestinationConfigurationOutput) S3() RecordingConfigurationDestinationConfigurationS3Output {
	return o.ApplyT(func(v RecordingConfigurationDestinationConfiguration) RecordingConfigurationDestinationConfigurationS3 {
		return v.S3
	}).(RecordingConfigurationDestinationConfigurationS3Output)
}

type RecordingConfigurationDestinationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationPtrOutput) ToRecordingConfigurationDestinationConfigurationPtrOutput() RecordingConfigurationDestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationPtrOutput) ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationPtrOutput) Elem() RecordingConfigurationDestinationConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationDestinationConfiguration) RecordingConfigurationDestinationConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationDestinationConfiguration
		return ret
	}).(RecordingConfigurationDestinationConfigurationOutput)
}

// S3 destination configuration where recorded videos will be stored.
func (o RecordingConfigurationDestinationConfigurationPtrOutput) S3() RecordingConfigurationDestinationConfigurationS3PtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationDestinationConfiguration) *RecordingConfigurationDestinationConfigurationS3 {
		if v == nil {
			return nil
		}
		return &v.S3
	}).(RecordingConfigurationDestinationConfigurationS3PtrOutput)
}

type RecordingConfigurationDestinationConfigurationS3 struct {
	// S3 bucket name where recorded videos will be stored.
	//
	// The following arguments are optional:
	BucketName string `pulumi:"bucketName"`
}

// RecordingConfigurationDestinationConfigurationS3Input is an input type that accepts RecordingConfigurationDestinationConfigurationS3Args and RecordingConfigurationDestinationConfigurationS3Output values.
// You can construct a concrete instance of `RecordingConfigurationDestinationConfigurationS3Input` via:
//
//	RecordingConfigurationDestinationConfigurationS3Args{...}
type RecordingConfigurationDestinationConfigurationS3Input interface {
	pulumi.Input

	ToRecordingConfigurationDestinationConfigurationS3Output() RecordingConfigurationDestinationConfigurationS3Output
	ToRecordingConfigurationDestinationConfigurationS3OutputWithContext(context.Context) RecordingConfigurationDestinationConfigurationS3Output
}

type RecordingConfigurationDestinationConfigurationS3Args struct {
	// S3 bucket name where recorded videos will be stored.
	//
	// The following arguments are optional:
	BucketName pulumi.StringInput `pulumi:"bucketName"`
}

func (RecordingConfigurationDestinationConfigurationS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfigurationS3)(nil)).Elem()
}

func (i RecordingConfigurationDestinationConfigurationS3Args) ToRecordingConfigurationDestinationConfigurationS3Output() RecordingConfigurationDestinationConfigurationS3Output {
	return i.ToRecordingConfigurationDestinationConfigurationS3OutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationS3Args) ToRecordingConfigurationDestinationConfigurationS3OutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationS3Output)
}

func (i RecordingConfigurationDestinationConfigurationS3Args) ToRecordingConfigurationDestinationConfigurationS3PtrOutput() RecordingConfigurationDestinationConfigurationS3PtrOutput {
	return i.ToRecordingConfigurationDestinationConfigurationS3PtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationS3Args) ToRecordingConfigurationDestinationConfigurationS3PtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationS3Output).ToRecordingConfigurationDestinationConfigurationS3PtrOutputWithContext(ctx)
}

// RecordingConfigurationDestinationConfigurationS3PtrInput is an input type that accepts RecordingConfigurationDestinationConfigurationS3Args, RecordingConfigurationDestinationConfigurationS3Ptr and RecordingConfigurationDestinationConfigurationS3PtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationDestinationConfigurationS3PtrInput` via:
//
//	        RecordingConfigurationDestinationConfigurationS3Args{...}
//
//	or:
//
//	        nil
type RecordingConfigurationDestinationConfigurationS3PtrInput interface {
	pulumi.Input

	ToRecordingConfigurationDestinationConfigurationS3PtrOutput() RecordingConfigurationDestinationConfigurationS3PtrOutput
	ToRecordingConfigurationDestinationConfigurationS3PtrOutputWithContext(context.Context) RecordingConfigurationDestinationConfigurationS3PtrOutput
}

type recordingConfigurationDestinationConfigurationS3PtrType RecordingConfigurationDestinationConfigurationS3Args

func RecordingConfigurationDestinationConfigurationS3Ptr(v *RecordingConfigurationDestinationConfigurationS3Args) RecordingConfigurationDestinationConfigurationS3PtrInput {
	return (*recordingConfigurationDestinationConfigurationS3PtrType)(v)
}

func (*recordingConfigurationDestinationConfigurationS3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationDestinationConfigurationS3)(nil)).Elem()
}

func (i *recordingConfigurationDestinationConfigurationS3PtrType) ToRecordingConfigurationDestinationConfigurationS3PtrOutput() RecordingConfigurationDestinationConfigurationS3PtrOutput {
	return i.ToRecordingConfigurationDestinationConfigurationS3PtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationDestinationConfigurationS3PtrType) ToRecordingConfigurationDestinationConfigurationS3PtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationS3PtrOutput)
}

type RecordingConfigurationDestinationConfigurationS3Output struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfigurationS3)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationS3Output) ToRecordingConfigurationDestinationConfigurationS3Output() RecordingConfigurationDestinationConfigurationS3Output {
	return o
}

func (o RecordingConfigurationDestinationConfigurationS3Output) ToRecordingConfigurationDestinationConfigurationS3OutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationS3Output {
	return o
}

func (o RecordingConfigurationDestinationConfigurationS3Output) ToRecordingConfigurationDestinationConfigurationS3PtrOutput() RecordingConfigurationDestinationConfigurationS3PtrOutput {
	return o.ToRecordingConfigurationDestinationConfigurationS3PtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationDestinationConfigurationS3Output) ToRecordingConfigurationDestinationConfigurationS3PtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationS3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationDestinationConfigurationS3) *RecordingConfigurationDestinationConfigurationS3 {
		return &v
	}).(RecordingConfigurationDestinationConfigurationS3PtrOutput)
}

// S3 bucket name where recorded videos will be stored.
//
// The following arguments are optional:
func (o RecordingConfigurationDestinationConfigurationS3Output) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingConfigurationDestinationConfigurationS3) string { return v.BucketName }).(pulumi.StringOutput)
}

type RecordingConfigurationDestinationConfigurationS3PtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationS3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationDestinationConfigurationS3)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationS3PtrOutput) ToRecordingConfigurationDestinationConfigurationS3PtrOutput() RecordingConfigurationDestinationConfigurationS3PtrOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationS3PtrOutput) ToRecordingConfigurationDestinationConfigurationS3PtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationS3PtrOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationS3PtrOutput) Elem() RecordingConfigurationDestinationConfigurationS3Output {
	return o.ApplyT(func(v *RecordingConfigurationDestinationConfigurationS3) RecordingConfigurationDestinationConfigurationS3 {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationDestinationConfigurationS3
		return ret
	}).(RecordingConfigurationDestinationConfigurationS3Output)
}

// S3 bucket name where recorded videos will be stored.
//
// The following arguments are optional:
func (o RecordingConfigurationDestinationConfigurationS3PtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationDestinationConfigurationS3) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

type RecordingConfigurationThumbnailConfiguration struct {
	// Thumbnail recording mode. Valid values: `DISABLED`, `INTERVAL`.
	RecordingMode *string `pulumi:"recordingMode"`
	// The targeted thumbnail-generation interval in seconds.
	TargetIntervalSeconds *int `pulumi:"targetIntervalSeconds"`
}

// RecordingConfigurationThumbnailConfigurationInput is an input type that accepts RecordingConfigurationThumbnailConfigurationArgs and RecordingConfigurationThumbnailConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationThumbnailConfigurationInput` via:
//
//	RecordingConfigurationThumbnailConfigurationArgs{...}
type RecordingConfigurationThumbnailConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput
	ToRecordingConfigurationThumbnailConfigurationOutputWithContext(context.Context) RecordingConfigurationThumbnailConfigurationOutput
}

type RecordingConfigurationThumbnailConfigurationArgs struct {
	// Thumbnail recording mode. Valid values: `DISABLED`, `INTERVAL`.
	RecordingMode pulumi.StringPtrInput `pulumi:"recordingMode"`
	// The targeted thumbnail-generation interval in seconds.
	TargetIntervalSeconds pulumi.IntPtrInput `pulumi:"targetIntervalSeconds"`
}

func (RecordingConfigurationThumbnailConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationOutput)
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationOutput).ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationThumbnailConfigurationPtrInput is an input type that accepts RecordingConfigurationThumbnailConfigurationArgs, RecordingConfigurationThumbnailConfigurationPtr and RecordingConfigurationThumbnailConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationThumbnailConfigurationPtrInput` via:
//
//	        RecordingConfigurationThumbnailConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationThumbnailConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput
	ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput
}

type recordingConfigurationThumbnailConfigurationPtrType RecordingConfigurationThumbnailConfigurationArgs

func RecordingConfigurationThumbnailConfigurationPtr(v *RecordingConfigurationThumbnailConfigurationArgs) RecordingConfigurationThumbnailConfigurationPtrInput {
	return (*recordingConfigurationThumbnailConfigurationPtrType)(v)
}

func (*recordingConfigurationThumbnailConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationThumbnailConfigurationPtrType) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationThumbnailConfigurationPtrType) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationPtrOutput)
}

type RecordingConfigurationThumbnailConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationThumbnailConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfiguration {
		return &v
	}).(RecordingConfigurationThumbnailConfigurationPtrOutput)
}

// Thumbnail recording mode. Valid values: `DISABLED`, `INTERVAL`.
func (o RecordingConfigurationThumbnailConfigurationOutput) RecordingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *string { return v.RecordingMode }).(pulumi.StringPtrOutput)
}

// The targeted thumbnail-generation interval in seconds.
func (o RecordingConfigurationThumbnailConfigurationOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *int { return v.TargetIntervalSeconds }).(pulumi.IntPtrOutput)
}

type RecordingConfigurationThumbnailConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationThumbnailConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Elem() RecordingConfigurationThumbnailConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) RecordingConfigurationThumbnailConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationThumbnailConfiguration
		return ret
	}).(RecordingConfigurationThumbnailConfigurationOutput)
}

// Thumbnail recording mode. Valid values: `DISABLED`, `INTERVAL`.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) RecordingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RecordingMode
	}).(pulumi.StringPtrOutput)
}

// The targeted thumbnail-generation interval in seconds.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TargetIntervalSeconds
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationDestinationConfigurationInput)(nil)).Elem(), RecordingConfigurationDestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationDestinationConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationDestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationDestinationConfigurationS3Input)(nil)).Elem(), RecordingConfigurationDestinationConfigurationS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationDestinationConfigurationS3PtrInput)(nil)).Elem(), RecordingConfigurationDestinationConfigurationS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationThumbnailConfigurationInput)(nil)).Elem(), RecordingConfigurationThumbnailConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationThumbnailConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationThumbnailConfigurationArgs{})
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationS3Output{})
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationS3PtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationThumbnailConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationThumbnailConfigurationPtrOutput{})
}
