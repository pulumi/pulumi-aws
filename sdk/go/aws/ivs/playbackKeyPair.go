// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PlaybackKeyPair struct {
	pulumi.CustomResourceState

	Arn         pulumi.StringOutput    `pulumi:"arn"`
	Fingerprint pulumi.StringOutput    `pulumi:"fingerprint"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	PublicKey   pulumi.StringOutput    `pulumi:"publicKey"`
	Tags        pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll     pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewPlaybackKeyPair registers a new resource with the given unique name, arguments, and options.
func NewPlaybackKeyPair(ctx *pulumi.Context,
	name string, args *PlaybackKeyPairArgs, opts ...pulumi.ResourceOption) (*PlaybackKeyPair, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	var resource PlaybackKeyPair
	err := ctx.RegisterResource("aws:ivs/playbackKeyPair:PlaybackKeyPair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlaybackKeyPair gets an existing PlaybackKeyPair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlaybackKeyPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaybackKeyPairState, opts ...pulumi.ResourceOption) (*PlaybackKeyPair, error) {
	var resource PlaybackKeyPair
	err := ctx.ReadResource("aws:ivs/playbackKeyPair:PlaybackKeyPair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlaybackKeyPair resources.
type playbackKeyPairState struct {
	Arn         *string           `pulumi:"arn"`
	Fingerprint *string           `pulumi:"fingerprint"`
	Name        *string           `pulumi:"name"`
	PublicKey   *string           `pulumi:"publicKey"`
	Tags        map[string]string `pulumi:"tags"`
	TagsAll     map[string]string `pulumi:"tagsAll"`
}

type PlaybackKeyPairState struct {
	Arn         pulumi.StringPtrInput
	Fingerprint pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	PublicKey   pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
	TagsAll     pulumi.StringMapInput
}

func (PlaybackKeyPairState) ElementType() reflect.Type {
	return reflect.TypeOf((*playbackKeyPairState)(nil)).Elem()
}

type playbackKeyPairArgs struct {
	Name      *string           `pulumi:"name"`
	PublicKey string            `pulumi:"publicKey"`
	Tags      map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PlaybackKeyPair resource.
type PlaybackKeyPairArgs struct {
	Name      pulumi.StringPtrInput
	PublicKey pulumi.StringInput
	Tags      pulumi.StringMapInput
}

func (PlaybackKeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*playbackKeyPairArgs)(nil)).Elem()
}

type PlaybackKeyPairInput interface {
	pulumi.Input

	ToPlaybackKeyPairOutput() PlaybackKeyPairOutput
	ToPlaybackKeyPairOutputWithContext(ctx context.Context) PlaybackKeyPairOutput
}

func (*PlaybackKeyPair) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackKeyPair)(nil)).Elem()
}

func (i *PlaybackKeyPair) ToPlaybackKeyPairOutput() PlaybackKeyPairOutput {
	return i.ToPlaybackKeyPairOutputWithContext(context.Background())
}

func (i *PlaybackKeyPair) ToPlaybackKeyPairOutputWithContext(ctx context.Context) PlaybackKeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackKeyPairOutput)
}

// PlaybackKeyPairArrayInput is an input type that accepts PlaybackKeyPairArray and PlaybackKeyPairArrayOutput values.
// You can construct a concrete instance of `PlaybackKeyPairArrayInput` via:
//
//	PlaybackKeyPairArray{ PlaybackKeyPairArgs{...} }
type PlaybackKeyPairArrayInput interface {
	pulumi.Input

	ToPlaybackKeyPairArrayOutput() PlaybackKeyPairArrayOutput
	ToPlaybackKeyPairArrayOutputWithContext(context.Context) PlaybackKeyPairArrayOutput
}

type PlaybackKeyPairArray []PlaybackKeyPairInput

func (PlaybackKeyPairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlaybackKeyPair)(nil)).Elem()
}

func (i PlaybackKeyPairArray) ToPlaybackKeyPairArrayOutput() PlaybackKeyPairArrayOutput {
	return i.ToPlaybackKeyPairArrayOutputWithContext(context.Background())
}

func (i PlaybackKeyPairArray) ToPlaybackKeyPairArrayOutputWithContext(ctx context.Context) PlaybackKeyPairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackKeyPairArrayOutput)
}

// PlaybackKeyPairMapInput is an input type that accepts PlaybackKeyPairMap and PlaybackKeyPairMapOutput values.
// You can construct a concrete instance of `PlaybackKeyPairMapInput` via:
//
//	PlaybackKeyPairMap{ "key": PlaybackKeyPairArgs{...} }
type PlaybackKeyPairMapInput interface {
	pulumi.Input

	ToPlaybackKeyPairMapOutput() PlaybackKeyPairMapOutput
	ToPlaybackKeyPairMapOutputWithContext(context.Context) PlaybackKeyPairMapOutput
}

type PlaybackKeyPairMap map[string]PlaybackKeyPairInput

func (PlaybackKeyPairMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlaybackKeyPair)(nil)).Elem()
}

func (i PlaybackKeyPairMap) ToPlaybackKeyPairMapOutput() PlaybackKeyPairMapOutput {
	return i.ToPlaybackKeyPairMapOutputWithContext(context.Background())
}

func (i PlaybackKeyPairMap) ToPlaybackKeyPairMapOutputWithContext(ctx context.Context) PlaybackKeyPairMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackKeyPairMapOutput)
}

type PlaybackKeyPairOutput struct{ *pulumi.OutputState }

func (PlaybackKeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackKeyPair)(nil)).Elem()
}

func (o PlaybackKeyPairOutput) ToPlaybackKeyPairOutput() PlaybackKeyPairOutput {
	return o
}

func (o PlaybackKeyPairOutput) ToPlaybackKeyPairOutputWithContext(ctx context.Context) PlaybackKeyPairOutput {
	return o
}

func (o PlaybackKeyPairOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaybackKeyPair) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o PlaybackKeyPairOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaybackKeyPair) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

func (o PlaybackKeyPairOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaybackKeyPair) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PlaybackKeyPairOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaybackKeyPair) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

func (o PlaybackKeyPairOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PlaybackKeyPair) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o PlaybackKeyPairOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PlaybackKeyPair) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type PlaybackKeyPairArrayOutput struct{ *pulumi.OutputState }

func (PlaybackKeyPairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlaybackKeyPair)(nil)).Elem()
}

func (o PlaybackKeyPairArrayOutput) ToPlaybackKeyPairArrayOutput() PlaybackKeyPairArrayOutput {
	return o
}

func (o PlaybackKeyPairArrayOutput) ToPlaybackKeyPairArrayOutputWithContext(ctx context.Context) PlaybackKeyPairArrayOutput {
	return o
}

func (o PlaybackKeyPairArrayOutput) Index(i pulumi.IntInput) PlaybackKeyPairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlaybackKeyPair {
		return vs[0].([]*PlaybackKeyPair)[vs[1].(int)]
	}).(PlaybackKeyPairOutput)
}

type PlaybackKeyPairMapOutput struct{ *pulumi.OutputState }

func (PlaybackKeyPairMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlaybackKeyPair)(nil)).Elem()
}

func (o PlaybackKeyPairMapOutput) ToPlaybackKeyPairMapOutput() PlaybackKeyPairMapOutput {
	return o
}

func (o PlaybackKeyPairMapOutput) ToPlaybackKeyPairMapOutputWithContext(ctx context.Context) PlaybackKeyPairMapOutput {
	return o
}

func (o PlaybackKeyPairMapOutput) MapIndex(k pulumi.StringInput) PlaybackKeyPairOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlaybackKeyPair {
		return vs[0].(map[string]*PlaybackKeyPair)[vs[1].(string)]
	}).(PlaybackKeyPairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackKeyPairInput)(nil)).Elem(), &PlaybackKeyPair{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackKeyPairArrayInput)(nil)).Elem(), PlaybackKeyPairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackKeyPairMapInput)(nil)).Elem(), PlaybackKeyPairMap{})
	pulumi.RegisterOutputType(PlaybackKeyPairOutput{})
	pulumi.RegisterOutputType(PlaybackKeyPairArrayOutput{})
	pulumi.RegisterOutputType(PlaybackKeyPairMapOutput{})
}
