// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ~> **WARNING:** Multiple aws_iam_group_membership resources with the same group name will produce inconsistent behavior!
// 
// Provides a top level resource to manage IAM Group membership for IAM Users. For
// more information on managing IAM Groups or IAM Users, see [IAM Groups][1] or
// [IAM Users][2]
// 
// ~> **Note:** `aws_iam_group_membership` will conflict with itself if used more than once with the same group. To non-exclusively manage the users in a group, see the
// [`aws_iam_user_group_membership` resource][3].
type GroupMembership struct {
	s *pulumi.ResourceState
}

// NewGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewGroupMembership(ctx *pulumi.Context,
	name string, args *GroupMembershipArgs, opts ...pulumi.ResourceOpt) (*GroupMembership, error) {
	if args == nil || args.Group == nil {
		return nil, errors.New("missing required argument 'Group'")
	}
	if args == nil || args.Users == nil {
		return nil, errors.New("missing required argument 'Users'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["group"] = nil
		inputs["name"] = nil
		inputs["users"] = nil
	} else {
		inputs["group"] = args.Group
		inputs["name"] = args.Name
		inputs["users"] = args.Users
	}
	s, err := ctx.RegisterResource("aws:iam/groupMembership:GroupMembership", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupMembership{s: s}, nil
}

// GetGroupMembership gets an existing GroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupMembershipState, opts ...pulumi.ResourceOpt) (*GroupMembership, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["group"] = state.Group
		inputs["name"] = state.Name
		inputs["users"] = state.Users
	}
	s, err := ctx.ReadResource("aws:iam/groupMembership:GroupMembership", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupMembership{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GroupMembership) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GroupMembership) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The IAM Group name to attach the list of `users` to
func (r *GroupMembership) Group() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["group"])
}

// The name to identify the Group Membership
func (r *GroupMembership) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A list of IAM User names to associate with the Group
func (r *GroupMembership) Users() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["users"])
}

// Input properties used for looking up and filtering GroupMembership resources.
type GroupMembershipState struct {
	// The IAM Group name to attach the list of `users` to
	Group interface{}
	// The name to identify the Group Membership
	Name interface{}
	// A list of IAM User names to associate with the Group
	Users interface{}
}

// The set of arguments for constructing a GroupMembership resource.
type GroupMembershipArgs struct {
	// The IAM Group name to attach the list of `users` to
	Group interface{}
	// The name to identify the Group Membership
	Name interface{}
	// A list of IAM User names to associate with the Group
	Users interface{}
}
