// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Using `pulumi import`, import exclusive management of customer managed policy assignments using the `group_name`. For example:
//
// ```sh
// $ pulumi import aws:iam/groupPolicyAttachmentsExclusive:GroupPolicyAttachmentsExclusive example MyGroup
// ```
type GroupPolicyAttachmentsExclusive struct {
	pulumi.CustomResourceState

	// IAM group name.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// A list of customer managed policy ARNs to be attached to the group. Policies attached to this group but not configured in this argument will be removed.
	PolicyArns pulumi.StringArrayOutput `pulumi:"policyArns"`
}

// NewGroupPolicyAttachmentsExclusive registers a new resource with the given unique name, arguments, and options.
func NewGroupPolicyAttachmentsExclusive(ctx *pulumi.Context,
	name string, args *GroupPolicyAttachmentsExclusiveArgs, opts ...pulumi.ResourceOption) (*GroupPolicyAttachmentsExclusive, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.PolicyArns == nil {
		return nil, errors.New("invalid value for required argument 'PolicyArns'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupPolicyAttachmentsExclusive
	err := ctx.RegisterResource("aws:iam/groupPolicyAttachmentsExclusive:GroupPolicyAttachmentsExclusive", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupPolicyAttachmentsExclusive gets an existing GroupPolicyAttachmentsExclusive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPolicyAttachmentsExclusive(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupPolicyAttachmentsExclusiveState, opts ...pulumi.ResourceOption) (*GroupPolicyAttachmentsExclusive, error) {
	var resource GroupPolicyAttachmentsExclusive
	err := ctx.ReadResource("aws:iam/groupPolicyAttachmentsExclusive:GroupPolicyAttachmentsExclusive", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupPolicyAttachmentsExclusive resources.
type groupPolicyAttachmentsExclusiveState struct {
	// IAM group name.
	GroupName *string `pulumi:"groupName"`
	// A list of customer managed policy ARNs to be attached to the group. Policies attached to this group but not configured in this argument will be removed.
	PolicyArns []string `pulumi:"policyArns"`
}

type GroupPolicyAttachmentsExclusiveState struct {
	// IAM group name.
	GroupName pulumi.StringPtrInput
	// A list of customer managed policy ARNs to be attached to the group. Policies attached to this group but not configured in this argument will be removed.
	PolicyArns pulumi.StringArrayInput
}

func (GroupPolicyAttachmentsExclusiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyAttachmentsExclusiveState)(nil)).Elem()
}

type groupPolicyAttachmentsExclusiveArgs struct {
	// IAM group name.
	GroupName string `pulumi:"groupName"`
	// A list of customer managed policy ARNs to be attached to the group. Policies attached to this group but not configured in this argument will be removed.
	PolicyArns []string `pulumi:"policyArns"`
}

// The set of arguments for constructing a GroupPolicyAttachmentsExclusive resource.
type GroupPolicyAttachmentsExclusiveArgs struct {
	// IAM group name.
	GroupName pulumi.StringInput
	// A list of customer managed policy ARNs to be attached to the group. Policies attached to this group but not configured in this argument will be removed.
	PolicyArns pulumi.StringArrayInput
}

func (GroupPolicyAttachmentsExclusiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyAttachmentsExclusiveArgs)(nil)).Elem()
}

type GroupPolicyAttachmentsExclusiveInput interface {
	pulumi.Input

	ToGroupPolicyAttachmentsExclusiveOutput() GroupPolicyAttachmentsExclusiveOutput
	ToGroupPolicyAttachmentsExclusiveOutputWithContext(ctx context.Context) GroupPolicyAttachmentsExclusiveOutput
}

func (*GroupPolicyAttachmentsExclusive) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyAttachmentsExclusive)(nil)).Elem()
}

func (i *GroupPolicyAttachmentsExclusive) ToGroupPolicyAttachmentsExclusiveOutput() GroupPolicyAttachmentsExclusiveOutput {
	return i.ToGroupPolicyAttachmentsExclusiveOutputWithContext(context.Background())
}

func (i *GroupPolicyAttachmentsExclusive) ToGroupPolicyAttachmentsExclusiveOutputWithContext(ctx context.Context) GroupPolicyAttachmentsExclusiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAttachmentsExclusiveOutput)
}

// GroupPolicyAttachmentsExclusiveArrayInput is an input type that accepts GroupPolicyAttachmentsExclusiveArray and GroupPolicyAttachmentsExclusiveArrayOutput values.
// You can construct a concrete instance of `GroupPolicyAttachmentsExclusiveArrayInput` via:
//
//	GroupPolicyAttachmentsExclusiveArray{ GroupPolicyAttachmentsExclusiveArgs{...} }
type GroupPolicyAttachmentsExclusiveArrayInput interface {
	pulumi.Input

	ToGroupPolicyAttachmentsExclusiveArrayOutput() GroupPolicyAttachmentsExclusiveArrayOutput
	ToGroupPolicyAttachmentsExclusiveArrayOutputWithContext(context.Context) GroupPolicyAttachmentsExclusiveArrayOutput
}

type GroupPolicyAttachmentsExclusiveArray []GroupPolicyAttachmentsExclusiveInput

func (GroupPolicyAttachmentsExclusiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPolicyAttachmentsExclusive)(nil)).Elem()
}

func (i GroupPolicyAttachmentsExclusiveArray) ToGroupPolicyAttachmentsExclusiveArrayOutput() GroupPolicyAttachmentsExclusiveArrayOutput {
	return i.ToGroupPolicyAttachmentsExclusiveArrayOutputWithContext(context.Background())
}

func (i GroupPolicyAttachmentsExclusiveArray) ToGroupPolicyAttachmentsExclusiveArrayOutputWithContext(ctx context.Context) GroupPolicyAttachmentsExclusiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAttachmentsExclusiveArrayOutput)
}

// GroupPolicyAttachmentsExclusiveMapInput is an input type that accepts GroupPolicyAttachmentsExclusiveMap and GroupPolicyAttachmentsExclusiveMapOutput values.
// You can construct a concrete instance of `GroupPolicyAttachmentsExclusiveMapInput` via:
//
//	GroupPolicyAttachmentsExclusiveMap{ "key": GroupPolicyAttachmentsExclusiveArgs{...} }
type GroupPolicyAttachmentsExclusiveMapInput interface {
	pulumi.Input

	ToGroupPolicyAttachmentsExclusiveMapOutput() GroupPolicyAttachmentsExclusiveMapOutput
	ToGroupPolicyAttachmentsExclusiveMapOutputWithContext(context.Context) GroupPolicyAttachmentsExclusiveMapOutput
}

type GroupPolicyAttachmentsExclusiveMap map[string]GroupPolicyAttachmentsExclusiveInput

func (GroupPolicyAttachmentsExclusiveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPolicyAttachmentsExclusive)(nil)).Elem()
}

func (i GroupPolicyAttachmentsExclusiveMap) ToGroupPolicyAttachmentsExclusiveMapOutput() GroupPolicyAttachmentsExclusiveMapOutput {
	return i.ToGroupPolicyAttachmentsExclusiveMapOutputWithContext(context.Background())
}

func (i GroupPolicyAttachmentsExclusiveMap) ToGroupPolicyAttachmentsExclusiveMapOutputWithContext(ctx context.Context) GroupPolicyAttachmentsExclusiveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAttachmentsExclusiveMapOutput)
}

type GroupPolicyAttachmentsExclusiveOutput struct{ *pulumi.OutputState }

func (GroupPolicyAttachmentsExclusiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyAttachmentsExclusive)(nil)).Elem()
}

func (o GroupPolicyAttachmentsExclusiveOutput) ToGroupPolicyAttachmentsExclusiveOutput() GroupPolicyAttachmentsExclusiveOutput {
	return o
}

func (o GroupPolicyAttachmentsExclusiveOutput) ToGroupPolicyAttachmentsExclusiveOutputWithContext(ctx context.Context) GroupPolicyAttachmentsExclusiveOutput {
	return o
}

// IAM group name.
func (o GroupPolicyAttachmentsExclusiveOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyAttachmentsExclusive) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// A list of customer managed policy ARNs to be attached to the group. Policies attached to this group but not configured in this argument will be removed.
func (o GroupPolicyAttachmentsExclusiveOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupPolicyAttachmentsExclusive) pulumi.StringArrayOutput { return v.PolicyArns }).(pulumi.StringArrayOutput)
}

type GroupPolicyAttachmentsExclusiveArrayOutput struct{ *pulumi.OutputState }

func (GroupPolicyAttachmentsExclusiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPolicyAttachmentsExclusive)(nil)).Elem()
}

func (o GroupPolicyAttachmentsExclusiveArrayOutput) ToGroupPolicyAttachmentsExclusiveArrayOutput() GroupPolicyAttachmentsExclusiveArrayOutput {
	return o
}

func (o GroupPolicyAttachmentsExclusiveArrayOutput) ToGroupPolicyAttachmentsExclusiveArrayOutputWithContext(ctx context.Context) GroupPolicyAttachmentsExclusiveArrayOutput {
	return o
}

func (o GroupPolicyAttachmentsExclusiveArrayOutput) Index(i pulumi.IntInput) GroupPolicyAttachmentsExclusiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupPolicyAttachmentsExclusive {
		return vs[0].([]*GroupPolicyAttachmentsExclusive)[vs[1].(int)]
	}).(GroupPolicyAttachmentsExclusiveOutput)
}

type GroupPolicyAttachmentsExclusiveMapOutput struct{ *pulumi.OutputState }

func (GroupPolicyAttachmentsExclusiveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPolicyAttachmentsExclusive)(nil)).Elem()
}

func (o GroupPolicyAttachmentsExclusiveMapOutput) ToGroupPolicyAttachmentsExclusiveMapOutput() GroupPolicyAttachmentsExclusiveMapOutput {
	return o
}

func (o GroupPolicyAttachmentsExclusiveMapOutput) ToGroupPolicyAttachmentsExclusiveMapOutputWithContext(ctx context.Context) GroupPolicyAttachmentsExclusiveMapOutput {
	return o
}

func (o GroupPolicyAttachmentsExclusiveMapOutput) MapIndex(k pulumi.StringInput) GroupPolicyAttachmentsExclusiveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupPolicyAttachmentsExclusive {
		return vs[0].(map[string]*GroupPolicyAttachmentsExclusive)[vs[1].(string)]
	}).(GroupPolicyAttachmentsExclusiveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAttachmentsExclusiveInput)(nil)).Elem(), &GroupPolicyAttachmentsExclusive{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAttachmentsExclusiveArrayInput)(nil)).Elem(), GroupPolicyAttachmentsExclusiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAttachmentsExclusiveMapInput)(nil)).Elem(), GroupPolicyAttachmentsExclusiveMap{})
	pulumi.RegisterOutputType(GroupPolicyAttachmentsExclusiveOutput{})
	pulumi.RegisterOutputType(GroupPolicyAttachmentsExclusiveArrayOutput{})
	pulumi.RegisterOutputType(GroupPolicyAttachmentsExclusiveMapOutput{})
}
