// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserPolicy struct {
	pulumi.CustomResourceState

	Name       pulumi.StringOutput    `pulumi:"name"`
	NamePrefix pulumi.StringPtrOutput `pulumi:"namePrefix"`
	Policy     pulumi.StringOutput    `pulumi:"policy"`
	User       pulumi.StringOutput    `pulumi:"user"`
}

// NewUserPolicy registers a new resource with the given unique name, arguments, and options.
func NewUserPolicy(ctx *pulumi.Context,
	name string, args *UserPolicyArgs, opts ...pulumi.ResourceOption) (*UserPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	var resource UserPolicy
	err := ctx.RegisterResource("aws:iam/userPolicy:UserPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPolicy gets an existing UserPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPolicyState, opts ...pulumi.ResourceOption) (*UserPolicy, error) {
	var resource UserPolicy
	err := ctx.ReadResource("aws:iam/userPolicy:UserPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPolicy resources.
type userPolicyState struct {
	Name       *string     `pulumi:"name"`
	NamePrefix *string     `pulumi:"namePrefix"`
	Policy     interface{} `pulumi:"policy"`
	User       *string     `pulumi:"user"`
}

type UserPolicyState struct {
	Name       pulumi.StringPtrInput
	NamePrefix pulumi.StringPtrInput
	Policy     pulumi.Input
	User       pulumi.StringPtrInput
}

func (UserPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPolicyState)(nil)).Elem()
}

type userPolicyArgs struct {
	Name       *string     `pulumi:"name"`
	NamePrefix *string     `pulumi:"namePrefix"`
	Policy     interface{} `pulumi:"policy"`
	User       string      `pulumi:"user"`
}

// The set of arguments for constructing a UserPolicy resource.
type UserPolicyArgs struct {
	Name       pulumi.StringPtrInput
	NamePrefix pulumi.StringPtrInput
	Policy     pulumi.Input
	User       pulumi.StringInput
}

func (UserPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPolicyArgs)(nil)).Elem()
}

type UserPolicyInput interface {
	pulumi.Input

	ToUserPolicyOutput() UserPolicyOutput
	ToUserPolicyOutputWithContext(ctx context.Context) UserPolicyOutput
}

func (*UserPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPolicy)(nil)).Elem()
}

func (i *UserPolicy) ToUserPolicyOutput() UserPolicyOutput {
	return i.ToUserPolicyOutputWithContext(context.Background())
}

func (i *UserPolicy) ToUserPolicyOutputWithContext(ctx context.Context) UserPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPolicyOutput)
}

// UserPolicyArrayInput is an input type that accepts UserPolicyArray and UserPolicyArrayOutput values.
// You can construct a concrete instance of `UserPolicyArrayInput` via:
//
//	UserPolicyArray{ UserPolicyArgs{...} }
type UserPolicyArrayInput interface {
	pulumi.Input

	ToUserPolicyArrayOutput() UserPolicyArrayOutput
	ToUserPolicyArrayOutputWithContext(context.Context) UserPolicyArrayOutput
}

type UserPolicyArray []UserPolicyInput

func (UserPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPolicy)(nil)).Elem()
}

func (i UserPolicyArray) ToUserPolicyArrayOutput() UserPolicyArrayOutput {
	return i.ToUserPolicyArrayOutputWithContext(context.Background())
}

func (i UserPolicyArray) ToUserPolicyArrayOutputWithContext(ctx context.Context) UserPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPolicyArrayOutput)
}

// UserPolicyMapInput is an input type that accepts UserPolicyMap and UserPolicyMapOutput values.
// You can construct a concrete instance of `UserPolicyMapInput` via:
//
//	UserPolicyMap{ "key": UserPolicyArgs{...} }
type UserPolicyMapInput interface {
	pulumi.Input

	ToUserPolicyMapOutput() UserPolicyMapOutput
	ToUserPolicyMapOutputWithContext(context.Context) UserPolicyMapOutput
}

type UserPolicyMap map[string]UserPolicyInput

func (UserPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPolicy)(nil)).Elem()
}

func (i UserPolicyMap) ToUserPolicyMapOutput() UserPolicyMapOutput {
	return i.ToUserPolicyMapOutputWithContext(context.Background())
}

func (i UserPolicyMap) ToUserPolicyMapOutputWithContext(ctx context.Context) UserPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPolicyMapOutput)
}

type UserPolicyOutput struct{ *pulumi.OutputState }

func (UserPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPolicy)(nil)).Elem()
}

func (o UserPolicyOutput) ToUserPolicyOutput() UserPolicyOutput {
	return o
}

func (o UserPolicyOutput) ToUserPolicyOutputWithContext(ctx context.Context) UserPolicyOutput {
	return o
}

func (o UserPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserPolicyOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPolicy) pulumi.StringPtrOutput { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

func (o UserPolicyOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPolicy) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

func (o UserPolicyOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPolicy) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type UserPolicyArrayOutput struct{ *pulumi.OutputState }

func (UserPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPolicy)(nil)).Elem()
}

func (o UserPolicyArrayOutput) ToUserPolicyArrayOutput() UserPolicyArrayOutput {
	return o
}

func (o UserPolicyArrayOutput) ToUserPolicyArrayOutputWithContext(ctx context.Context) UserPolicyArrayOutput {
	return o
}

func (o UserPolicyArrayOutput) Index(i pulumi.IntInput) UserPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserPolicy {
		return vs[0].([]*UserPolicy)[vs[1].(int)]
	}).(UserPolicyOutput)
}

type UserPolicyMapOutput struct{ *pulumi.OutputState }

func (UserPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPolicy)(nil)).Elem()
}

func (o UserPolicyMapOutput) ToUserPolicyMapOutput() UserPolicyMapOutput {
	return o
}

func (o UserPolicyMapOutput) ToUserPolicyMapOutputWithContext(ctx context.Context) UserPolicyMapOutput {
	return o
}

func (o UserPolicyMapOutput) MapIndex(k pulumi.StringInput) UserPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserPolicy {
		return vs[0].(map[string]*UserPolicy)[vs[1].(string)]
	}).(UserPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPolicyInput)(nil)).Elem(), &UserPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPolicyArrayInput)(nil)).Elem(), UserPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPolicyMapInput)(nil)).Elem(), UserPolicyMap{})
	pulumi.RegisterOutputType(UserPolicyOutput{})
	pulumi.RegisterOutputType(UserPolicyArrayOutput{})
	pulumi.RegisterOutputType(UserPolicyMapOutput{})
}
