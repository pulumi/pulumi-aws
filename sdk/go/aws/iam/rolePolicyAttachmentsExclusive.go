// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Using `pulumi import`, import exclusive management of customer managed policy assignments using the `role_name`. For example:
//
// ```sh
// $ pulumi import aws:iam/rolePolicyAttachmentsExclusive:RolePolicyAttachmentsExclusive example MyRole
// ```
type RolePolicyAttachmentsExclusive struct {
	pulumi.CustomResourceState

	// A list of customer managed policy ARNs to be attached to the role. Policies attached to this role but not configured in this argument will be removed.
	PolicyArns pulumi.StringArrayOutput `pulumi:"policyArns"`
	// IAM role name.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
}

// NewRolePolicyAttachmentsExclusive registers a new resource with the given unique name, arguments, and options.
func NewRolePolicyAttachmentsExclusive(ctx *pulumi.Context,
	name string, args *RolePolicyAttachmentsExclusiveArgs, opts ...pulumi.ResourceOption) (*RolePolicyAttachmentsExclusive, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyArns == nil {
		return nil, errors.New("invalid value for required argument 'PolicyArns'")
	}
	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RolePolicyAttachmentsExclusive
	err := ctx.RegisterResource("aws:iam/rolePolicyAttachmentsExclusive:RolePolicyAttachmentsExclusive", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRolePolicyAttachmentsExclusive gets an existing RolePolicyAttachmentsExclusive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolePolicyAttachmentsExclusive(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolePolicyAttachmentsExclusiveState, opts ...pulumi.ResourceOption) (*RolePolicyAttachmentsExclusive, error) {
	var resource RolePolicyAttachmentsExclusive
	err := ctx.ReadResource("aws:iam/rolePolicyAttachmentsExclusive:RolePolicyAttachmentsExclusive", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RolePolicyAttachmentsExclusive resources.
type rolePolicyAttachmentsExclusiveState struct {
	// A list of customer managed policy ARNs to be attached to the role. Policies attached to this role but not configured in this argument will be removed.
	PolicyArns []string `pulumi:"policyArns"`
	// IAM role name.
	RoleName *string `pulumi:"roleName"`
}

type RolePolicyAttachmentsExclusiveState struct {
	// A list of customer managed policy ARNs to be attached to the role. Policies attached to this role but not configured in this argument will be removed.
	PolicyArns pulumi.StringArrayInput
	// IAM role name.
	RoleName pulumi.StringPtrInput
}

func (RolePolicyAttachmentsExclusiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePolicyAttachmentsExclusiveState)(nil)).Elem()
}

type rolePolicyAttachmentsExclusiveArgs struct {
	// A list of customer managed policy ARNs to be attached to the role. Policies attached to this role but not configured in this argument will be removed.
	PolicyArns []string `pulumi:"policyArns"`
	// IAM role name.
	RoleName string `pulumi:"roleName"`
}

// The set of arguments for constructing a RolePolicyAttachmentsExclusive resource.
type RolePolicyAttachmentsExclusiveArgs struct {
	// A list of customer managed policy ARNs to be attached to the role. Policies attached to this role but not configured in this argument will be removed.
	PolicyArns pulumi.StringArrayInput
	// IAM role name.
	RoleName pulumi.StringInput
}

func (RolePolicyAttachmentsExclusiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePolicyAttachmentsExclusiveArgs)(nil)).Elem()
}

type RolePolicyAttachmentsExclusiveInput interface {
	pulumi.Input

	ToRolePolicyAttachmentsExclusiveOutput() RolePolicyAttachmentsExclusiveOutput
	ToRolePolicyAttachmentsExclusiveOutputWithContext(ctx context.Context) RolePolicyAttachmentsExclusiveOutput
}

func (*RolePolicyAttachmentsExclusive) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePolicyAttachmentsExclusive)(nil)).Elem()
}

func (i *RolePolicyAttachmentsExclusive) ToRolePolicyAttachmentsExclusiveOutput() RolePolicyAttachmentsExclusiveOutput {
	return i.ToRolePolicyAttachmentsExclusiveOutputWithContext(context.Background())
}

func (i *RolePolicyAttachmentsExclusive) ToRolePolicyAttachmentsExclusiveOutputWithContext(ctx context.Context) RolePolicyAttachmentsExclusiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyAttachmentsExclusiveOutput)
}

// RolePolicyAttachmentsExclusiveArrayInput is an input type that accepts RolePolicyAttachmentsExclusiveArray and RolePolicyAttachmentsExclusiveArrayOutput values.
// You can construct a concrete instance of `RolePolicyAttachmentsExclusiveArrayInput` via:
//
//	RolePolicyAttachmentsExclusiveArray{ RolePolicyAttachmentsExclusiveArgs{...} }
type RolePolicyAttachmentsExclusiveArrayInput interface {
	pulumi.Input

	ToRolePolicyAttachmentsExclusiveArrayOutput() RolePolicyAttachmentsExclusiveArrayOutput
	ToRolePolicyAttachmentsExclusiveArrayOutputWithContext(context.Context) RolePolicyAttachmentsExclusiveArrayOutput
}

type RolePolicyAttachmentsExclusiveArray []RolePolicyAttachmentsExclusiveInput

func (RolePolicyAttachmentsExclusiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolePolicyAttachmentsExclusive)(nil)).Elem()
}

func (i RolePolicyAttachmentsExclusiveArray) ToRolePolicyAttachmentsExclusiveArrayOutput() RolePolicyAttachmentsExclusiveArrayOutput {
	return i.ToRolePolicyAttachmentsExclusiveArrayOutputWithContext(context.Background())
}

func (i RolePolicyAttachmentsExclusiveArray) ToRolePolicyAttachmentsExclusiveArrayOutputWithContext(ctx context.Context) RolePolicyAttachmentsExclusiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyAttachmentsExclusiveArrayOutput)
}

// RolePolicyAttachmentsExclusiveMapInput is an input type that accepts RolePolicyAttachmentsExclusiveMap and RolePolicyAttachmentsExclusiveMapOutput values.
// You can construct a concrete instance of `RolePolicyAttachmentsExclusiveMapInput` via:
//
//	RolePolicyAttachmentsExclusiveMap{ "key": RolePolicyAttachmentsExclusiveArgs{...} }
type RolePolicyAttachmentsExclusiveMapInput interface {
	pulumi.Input

	ToRolePolicyAttachmentsExclusiveMapOutput() RolePolicyAttachmentsExclusiveMapOutput
	ToRolePolicyAttachmentsExclusiveMapOutputWithContext(context.Context) RolePolicyAttachmentsExclusiveMapOutput
}

type RolePolicyAttachmentsExclusiveMap map[string]RolePolicyAttachmentsExclusiveInput

func (RolePolicyAttachmentsExclusiveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolePolicyAttachmentsExclusive)(nil)).Elem()
}

func (i RolePolicyAttachmentsExclusiveMap) ToRolePolicyAttachmentsExclusiveMapOutput() RolePolicyAttachmentsExclusiveMapOutput {
	return i.ToRolePolicyAttachmentsExclusiveMapOutputWithContext(context.Background())
}

func (i RolePolicyAttachmentsExclusiveMap) ToRolePolicyAttachmentsExclusiveMapOutputWithContext(ctx context.Context) RolePolicyAttachmentsExclusiveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyAttachmentsExclusiveMapOutput)
}

type RolePolicyAttachmentsExclusiveOutput struct{ *pulumi.OutputState }

func (RolePolicyAttachmentsExclusiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePolicyAttachmentsExclusive)(nil)).Elem()
}

func (o RolePolicyAttachmentsExclusiveOutput) ToRolePolicyAttachmentsExclusiveOutput() RolePolicyAttachmentsExclusiveOutput {
	return o
}

func (o RolePolicyAttachmentsExclusiveOutput) ToRolePolicyAttachmentsExclusiveOutputWithContext(ctx context.Context) RolePolicyAttachmentsExclusiveOutput {
	return o
}

// A list of customer managed policy ARNs to be attached to the role. Policies attached to this role but not configured in this argument will be removed.
func (o RolePolicyAttachmentsExclusiveOutput) PolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RolePolicyAttachmentsExclusive) pulumi.StringArrayOutput { return v.PolicyArns }).(pulumi.StringArrayOutput)
}

// IAM role name.
func (o RolePolicyAttachmentsExclusiveOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *RolePolicyAttachmentsExclusive) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

type RolePolicyAttachmentsExclusiveArrayOutput struct{ *pulumi.OutputState }

func (RolePolicyAttachmentsExclusiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolePolicyAttachmentsExclusive)(nil)).Elem()
}

func (o RolePolicyAttachmentsExclusiveArrayOutput) ToRolePolicyAttachmentsExclusiveArrayOutput() RolePolicyAttachmentsExclusiveArrayOutput {
	return o
}

func (o RolePolicyAttachmentsExclusiveArrayOutput) ToRolePolicyAttachmentsExclusiveArrayOutputWithContext(ctx context.Context) RolePolicyAttachmentsExclusiveArrayOutput {
	return o
}

func (o RolePolicyAttachmentsExclusiveArrayOutput) Index(i pulumi.IntInput) RolePolicyAttachmentsExclusiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RolePolicyAttachmentsExclusive {
		return vs[0].([]*RolePolicyAttachmentsExclusive)[vs[1].(int)]
	}).(RolePolicyAttachmentsExclusiveOutput)
}

type RolePolicyAttachmentsExclusiveMapOutput struct{ *pulumi.OutputState }

func (RolePolicyAttachmentsExclusiveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolePolicyAttachmentsExclusive)(nil)).Elem()
}

func (o RolePolicyAttachmentsExclusiveMapOutput) ToRolePolicyAttachmentsExclusiveMapOutput() RolePolicyAttachmentsExclusiveMapOutput {
	return o
}

func (o RolePolicyAttachmentsExclusiveMapOutput) ToRolePolicyAttachmentsExclusiveMapOutputWithContext(ctx context.Context) RolePolicyAttachmentsExclusiveMapOutput {
	return o
}

func (o RolePolicyAttachmentsExclusiveMapOutput) MapIndex(k pulumi.StringInput) RolePolicyAttachmentsExclusiveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RolePolicyAttachmentsExclusive {
		return vs[0].(map[string]*RolePolicyAttachmentsExclusive)[vs[1].(string)]
	}).(RolePolicyAttachmentsExclusiveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolePolicyAttachmentsExclusiveInput)(nil)).Elem(), &RolePolicyAttachmentsExclusive{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePolicyAttachmentsExclusiveArrayInput)(nil)).Elem(), RolePolicyAttachmentsExclusiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePolicyAttachmentsExclusiveMapInput)(nil)).Elem(), RolePolicyAttachmentsExclusiveMap{})
	pulumi.RegisterOutputType(RolePolicyAttachmentsExclusiveOutput{})
	pulumi.RegisterOutputType(RolePolicyAttachmentsExclusiveArrayOutput{})
	pulumi.RegisterOutputType(RolePolicyAttachmentsExclusiveMapOutput{})
}
