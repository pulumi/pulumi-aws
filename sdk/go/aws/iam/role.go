// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Role struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput         `pulumi:"arn"`
	AssumeRolePolicy    pulumi.StringOutput         `pulumi:"assumeRolePolicy"`
	CreateDate          pulumi.StringOutput         `pulumi:"createDate"`
	Description         pulumi.StringPtrOutput      `pulumi:"description"`
	ForceDetachPolicies pulumi.BoolPtrOutput        `pulumi:"forceDetachPolicies"`
	InlinePolicies      RoleInlinePolicyArrayOutput `pulumi:"inlinePolicies"`
	ManagedPolicyArns   pulumi.StringArrayOutput    `pulumi:"managedPolicyArns"`
	MaxSessionDuration  pulumi.IntPtrOutput         `pulumi:"maxSessionDuration"`
	Name                pulumi.StringOutput         `pulumi:"name"`
	NamePrefix          pulumi.StringOutput         `pulumi:"namePrefix"`
	Path                pulumi.StringPtrOutput      `pulumi:"path"`
	PermissionsBoundary pulumi.StringPtrOutput      `pulumi:"permissionsBoundary"`
	Tags                pulumi.StringMapOutput      `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput      `pulumi:"tagsAll"`
	UniqueId            pulumi.StringOutput         `pulumi:"uniqueId"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssumeRolePolicy == nil {
		return nil, errors.New("invalid value for required argument 'AssumeRolePolicy'")
	}
	var resource Role
	err := ctx.RegisterResource("aws:iam/role:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("aws:iam/role:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
	Arn                 *string            `pulumi:"arn"`
	AssumeRolePolicy    interface{}        `pulumi:"assumeRolePolicy"`
	CreateDate          *string            `pulumi:"createDate"`
	Description         *string            `pulumi:"description"`
	ForceDetachPolicies *bool              `pulumi:"forceDetachPolicies"`
	InlinePolicies      []RoleInlinePolicy `pulumi:"inlinePolicies"`
	ManagedPolicyArns   []string           `pulumi:"managedPolicyArns"`
	MaxSessionDuration  *int               `pulumi:"maxSessionDuration"`
	Name                *string            `pulumi:"name"`
	NamePrefix          *string            `pulumi:"namePrefix"`
	Path                *string            `pulumi:"path"`
	PermissionsBoundary *string            `pulumi:"permissionsBoundary"`
	Tags                map[string]string  `pulumi:"tags"`
	TagsAll             map[string]string  `pulumi:"tagsAll"`
	UniqueId            *string            `pulumi:"uniqueId"`
}

type RoleState struct {
	Arn                 pulumi.StringPtrInput
	AssumeRolePolicy    pulumi.Input
	CreateDate          pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	ForceDetachPolicies pulumi.BoolPtrInput
	InlinePolicies      RoleInlinePolicyArrayInput
	ManagedPolicyArns   pulumi.StringArrayInput
	MaxSessionDuration  pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	NamePrefix          pulumi.StringPtrInput
	Path                pulumi.StringPtrInput
	PermissionsBoundary pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
	UniqueId            pulumi.StringPtrInput
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	AssumeRolePolicy    interface{}        `pulumi:"assumeRolePolicy"`
	Description         *string            `pulumi:"description"`
	ForceDetachPolicies *bool              `pulumi:"forceDetachPolicies"`
	InlinePolicies      []RoleInlinePolicy `pulumi:"inlinePolicies"`
	ManagedPolicyArns   []string           `pulumi:"managedPolicyArns"`
	MaxSessionDuration  *int               `pulumi:"maxSessionDuration"`
	Name                *string            `pulumi:"name"`
	NamePrefix          *string            `pulumi:"namePrefix"`
	Path                *string            `pulumi:"path"`
	PermissionsBoundary *string            `pulumi:"permissionsBoundary"`
	Tags                map[string]string  `pulumi:"tags"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	AssumeRolePolicy    pulumi.Input
	Description         pulumi.StringPtrInput
	ForceDetachPolicies pulumi.BoolPtrInput
	InlinePolicies      RoleInlinePolicyArrayInput
	ManagedPolicyArns   pulumi.StringArrayInput
	MaxSessionDuration  pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	NamePrefix          pulumi.StringPtrInput
	Path                pulumi.StringPtrInput
	PermissionsBoundary pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}

type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(ctx context.Context) RoleOutput
}

func (*Role) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (i *Role) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i *Role) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

// RoleArrayInput is an input type that accepts RoleArray and RoleArrayOutput values.
// You can construct a concrete instance of `RoleArrayInput` via:
//
//	RoleArray{ RoleArgs{...} }
type RoleArrayInput interface {
	pulumi.Input

	ToRoleArrayOutput() RoleArrayOutput
	ToRoleArrayOutputWithContext(context.Context) RoleArrayOutput
}

type RoleArray []RoleInput

func (RoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Role)(nil)).Elem()
}

func (i RoleArray) ToRoleArrayOutput() RoleArrayOutput {
	return i.ToRoleArrayOutputWithContext(context.Background())
}

func (i RoleArray) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleArrayOutput)
}

// RoleMapInput is an input type that accepts RoleMap and RoleMapOutput values.
// You can construct a concrete instance of `RoleMapInput` via:
//
//	RoleMap{ "key": RoleArgs{...} }
type RoleMapInput interface {
	pulumi.Input

	ToRoleMapOutput() RoleMapOutput
	ToRoleMapOutputWithContext(context.Context) RoleMapOutput
}

type RoleMap map[string]RoleInput

func (RoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Role)(nil)).Elem()
}

func (i RoleMap) ToRoleMapOutput() RoleMapOutput {
	return i.ToRoleMapOutputWithContext(context.Background())
}

func (i RoleMap) ToRoleMapOutputWithContext(ctx context.Context) RoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMapOutput)
}

type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

func (o RoleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o RoleOutput) AssumeRolePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.AssumeRolePolicy }).(pulumi.StringOutput)
}

func (o RoleOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.CreateDate }).(pulumi.StringOutput)
}

func (o RoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RoleOutput) ForceDetachPolicies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.ForceDetachPolicies }).(pulumi.BoolPtrOutput)
}

func (o RoleOutput) InlinePolicies() RoleInlinePolicyArrayOutput {
	return o.ApplyT(func(v *Role) RoleInlinePolicyArrayOutput { return v.InlinePolicies }).(RoleInlinePolicyArrayOutput)
}

func (o RoleOutput) ManagedPolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Role) pulumi.StringArrayOutput { return v.ManagedPolicyArns }).(pulumi.StringArrayOutput)
}

func (o RoleOutput) MaxSessionDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.IntPtrOutput { return v.MaxSessionDuration }).(pulumi.IntPtrOutput)
}

func (o RoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RoleOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

func (o RoleOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

func (o RoleOutput) PermissionsBoundary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.PermissionsBoundary }).(pulumi.StringPtrOutput)
}

func (o RoleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Role) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o RoleOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Role) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o RoleOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.UniqueId }).(pulumi.StringOutput)
}

type RoleArrayOutput struct{ *pulumi.OutputState }

func (RoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Role)(nil)).Elem()
}

func (o RoleArrayOutput) ToRoleArrayOutput() RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) Index(i pulumi.IntInput) RoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Role {
		return vs[0].([]*Role)[vs[1].(int)]
	}).(RoleOutput)
}

type RoleMapOutput struct{ *pulumi.OutputState }

func (RoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Role)(nil)).Elem()
}

func (o RoleMapOutput) ToRoleMapOutput() RoleMapOutput {
	return o
}

func (o RoleMapOutput) ToRoleMapOutputWithContext(ctx context.Context) RoleMapOutput {
	return o
}

func (o RoleMapOutput) MapIndex(k pulumi.StringInput) RoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Role {
		return vs[0].(map[string]*Role)[vs[1].(string)]
	}).(RoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleInput)(nil)).Elem(), &Role{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleArrayInput)(nil)).Elem(), RoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleMapInput)(nil)).Elem(), RoleMap{})
	pulumi.RegisterOutputType(RoleOutput{})
	pulumi.RegisterOutputType(RoleArrayOutput{})
	pulumi.RegisterOutputType(RoleMapOutput{})
}
