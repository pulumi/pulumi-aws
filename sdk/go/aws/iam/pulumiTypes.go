// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RoleInlinePolicy struct {
	// Name of the role policy.
	Name *string `pulumi:"name"`
	// Policy document as a JSON formatted string.
	Policy *string `pulumi:"policy"`
}

// RoleInlinePolicyInput is an input type that accepts RoleInlinePolicyArgs and RoleInlinePolicyOutput values.
// You can construct a concrete instance of `RoleInlinePolicyInput` via:
//
//	RoleInlinePolicyArgs{...}
type RoleInlinePolicyInput interface {
	pulumi.Input

	ToRoleInlinePolicyOutput() RoleInlinePolicyOutput
	ToRoleInlinePolicyOutputWithContext(context.Context) RoleInlinePolicyOutput
}

type RoleInlinePolicyArgs struct {
	// Name of the role policy.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Policy document as a JSON formatted string.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
}

func (RoleInlinePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleInlinePolicy)(nil)).Elem()
}

func (i RoleInlinePolicyArgs) ToRoleInlinePolicyOutput() RoleInlinePolicyOutput {
	return i.ToRoleInlinePolicyOutputWithContext(context.Background())
}

func (i RoleInlinePolicyArgs) ToRoleInlinePolicyOutputWithContext(ctx context.Context) RoleInlinePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleInlinePolicyOutput)
}

// RoleInlinePolicyArrayInput is an input type that accepts RoleInlinePolicyArray and RoleInlinePolicyArrayOutput values.
// You can construct a concrete instance of `RoleInlinePolicyArrayInput` via:
//
//	RoleInlinePolicyArray{ RoleInlinePolicyArgs{...} }
type RoleInlinePolicyArrayInput interface {
	pulumi.Input

	ToRoleInlinePolicyArrayOutput() RoleInlinePolicyArrayOutput
	ToRoleInlinePolicyArrayOutputWithContext(context.Context) RoleInlinePolicyArrayOutput
}

type RoleInlinePolicyArray []RoleInlinePolicyInput

func (RoleInlinePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleInlinePolicy)(nil)).Elem()
}

func (i RoleInlinePolicyArray) ToRoleInlinePolicyArrayOutput() RoleInlinePolicyArrayOutput {
	return i.ToRoleInlinePolicyArrayOutputWithContext(context.Background())
}

func (i RoleInlinePolicyArray) ToRoleInlinePolicyArrayOutputWithContext(ctx context.Context) RoleInlinePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleInlinePolicyArrayOutput)
}

type RoleInlinePolicyOutput struct{ *pulumi.OutputState }

func (RoleInlinePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleInlinePolicy)(nil)).Elem()
}

func (o RoleInlinePolicyOutput) ToRoleInlinePolicyOutput() RoleInlinePolicyOutput {
	return o
}

func (o RoleInlinePolicyOutput) ToRoleInlinePolicyOutputWithContext(ctx context.Context) RoleInlinePolicyOutput {
	return o
}

// Name of the role policy.
func (o RoleInlinePolicyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleInlinePolicy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Policy document as a JSON formatted string.
func (o RoleInlinePolicyOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleInlinePolicy) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

type RoleInlinePolicyArrayOutput struct{ *pulumi.OutputState }

func (RoleInlinePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleInlinePolicy)(nil)).Elem()
}

func (o RoleInlinePolicyArrayOutput) ToRoleInlinePolicyArrayOutput() RoleInlinePolicyArrayOutput {
	return o
}

func (o RoleInlinePolicyArrayOutput) ToRoleInlinePolicyArrayOutputWithContext(ctx context.Context) RoleInlinePolicyArrayOutput {
	return o
}

func (o RoleInlinePolicyArrayOutput) Index(i pulumi.IntInput) RoleInlinePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleInlinePolicy {
		return vs[0].([]RoleInlinePolicy)[vs[1].(int)]
	}).(RoleInlinePolicyOutput)
}

type GetAccessKeysAccessKey struct {
	// Access key ID.
	AccessKeyId string `pulumi:"accessKeyId"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the access key was created.
	CreateDate string `pulumi:"createDate"`
	// Access key status. Possible values are `Active` and `Inactive`.
	Status string `pulumi:"status"`
}

// GetAccessKeysAccessKeyInput is an input type that accepts GetAccessKeysAccessKeyArgs and GetAccessKeysAccessKeyOutput values.
// You can construct a concrete instance of `GetAccessKeysAccessKeyInput` via:
//
//	GetAccessKeysAccessKeyArgs{...}
type GetAccessKeysAccessKeyInput interface {
	pulumi.Input

	ToGetAccessKeysAccessKeyOutput() GetAccessKeysAccessKeyOutput
	ToGetAccessKeysAccessKeyOutputWithContext(context.Context) GetAccessKeysAccessKeyOutput
}

type GetAccessKeysAccessKeyArgs struct {
	// Access key ID.
	AccessKeyId pulumi.StringInput `pulumi:"accessKeyId"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the access key was created.
	CreateDate pulumi.StringInput `pulumi:"createDate"`
	// Access key status. Possible values are `Active` and `Inactive`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetAccessKeysAccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessKeysAccessKey)(nil)).Elem()
}

func (i GetAccessKeysAccessKeyArgs) ToGetAccessKeysAccessKeyOutput() GetAccessKeysAccessKeyOutput {
	return i.ToGetAccessKeysAccessKeyOutputWithContext(context.Background())
}

func (i GetAccessKeysAccessKeyArgs) ToGetAccessKeysAccessKeyOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessKeysAccessKeyOutput)
}

// GetAccessKeysAccessKeyArrayInput is an input type that accepts GetAccessKeysAccessKeyArray and GetAccessKeysAccessKeyArrayOutput values.
// You can construct a concrete instance of `GetAccessKeysAccessKeyArrayInput` via:
//
//	GetAccessKeysAccessKeyArray{ GetAccessKeysAccessKeyArgs{...} }
type GetAccessKeysAccessKeyArrayInput interface {
	pulumi.Input

	ToGetAccessKeysAccessKeyArrayOutput() GetAccessKeysAccessKeyArrayOutput
	ToGetAccessKeysAccessKeyArrayOutputWithContext(context.Context) GetAccessKeysAccessKeyArrayOutput
}

type GetAccessKeysAccessKeyArray []GetAccessKeysAccessKeyInput

func (GetAccessKeysAccessKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccessKeysAccessKey)(nil)).Elem()
}

func (i GetAccessKeysAccessKeyArray) ToGetAccessKeysAccessKeyArrayOutput() GetAccessKeysAccessKeyArrayOutput {
	return i.ToGetAccessKeysAccessKeyArrayOutputWithContext(context.Background())
}

func (i GetAccessKeysAccessKeyArray) ToGetAccessKeysAccessKeyArrayOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessKeysAccessKeyArrayOutput)
}

type GetAccessKeysAccessKeyOutput struct{ *pulumi.OutputState }

func (GetAccessKeysAccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessKeysAccessKey)(nil)).Elem()
}

func (o GetAccessKeysAccessKeyOutput) ToGetAccessKeysAccessKeyOutput() GetAccessKeysAccessKeyOutput {
	return o
}

func (o GetAccessKeysAccessKeyOutput) ToGetAccessKeysAccessKeyOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyOutput {
	return o
}

// Access key ID.
func (o GetAccessKeysAccessKeyOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) string { return v.AccessKeyId }).(pulumi.StringOutput)
}

// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the access key was created.
func (o GetAccessKeysAccessKeyOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) string { return v.CreateDate }).(pulumi.StringOutput)
}

// Access key status. Possible values are `Active` and `Inactive`.
func (o GetAccessKeysAccessKeyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) string { return v.Status }).(pulumi.StringOutput)
}

type GetAccessKeysAccessKeyArrayOutput struct{ *pulumi.OutputState }

func (GetAccessKeysAccessKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccessKeysAccessKey)(nil)).Elem()
}

func (o GetAccessKeysAccessKeyArrayOutput) ToGetAccessKeysAccessKeyArrayOutput() GetAccessKeysAccessKeyArrayOutput {
	return o
}

func (o GetAccessKeysAccessKeyArrayOutput) ToGetAccessKeysAccessKeyArrayOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyArrayOutput {
	return o
}

func (o GetAccessKeysAccessKeyArrayOutput) Index(i pulumi.IntInput) GetAccessKeysAccessKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccessKeysAccessKey {
		return vs[0].([]GetAccessKeysAccessKey)[vs[1].(int)]
	}).(GetAccessKeysAccessKeyOutput)
}

type GetGroupUser struct {
	// User ARN.
	Arn string `pulumi:"arn"`
	// Path to the IAM user.
	Path string `pulumi:"path"`
	// Stable and unique string identifying the IAM user.
	UserId string `pulumi:"userId"`
	// Name of the IAM user.
	UserName string `pulumi:"userName"`
}

// GetGroupUserInput is an input type that accepts GetGroupUserArgs and GetGroupUserOutput values.
// You can construct a concrete instance of `GetGroupUserInput` via:
//
//	GetGroupUserArgs{...}
type GetGroupUserInput interface {
	pulumi.Input

	ToGetGroupUserOutput() GetGroupUserOutput
	ToGetGroupUserOutputWithContext(context.Context) GetGroupUserOutput
}

type GetGroupUserArgs struct {
	// User ARN.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Path to the IAM user.
	Path pulumi.StringInput `pulumi:"path"`
	// Stable and unique string identifying the IAM user.
	UserId pulumi.StringInput `pulumi:"userId"`
	// Name of the IAM user.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (GetGroupUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupUser)(nil)).Elem()
}

func (i GetGroupUserArgs) ToGetGroupUserOutput() GetGroupUserOutput {
	return i.ToGetGroupUserOutputWithContext(context.Background())
}

func (i GetGroupUserArgs) ToGetGroupUserOutputWithContext(ctx context.Context) GetGroupUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupUserOutput)
}

// GetGroupUserArrayInput is an input type that accepts GetGroupUserArray and GetGroupUserArrayOutput values.
// You can construct a concrete instance of `GetGroupUserArrayInput` via:
//
//	GetGroupUserArray{ GetGroupUserArgs{...} }
type GetGroupUserArrayInput interface {
	pulumi.Input

	ToGetGroupUserArrayOutput() GetGroupUserArrayOutput
	ToGetGroupUserArrayOutputWithContext(context.Context) GetGroupUserArrayOutput
}

type GetGroupUserArray []GetGroupUserInput

func (GetGroupUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupUser)(nil)).Elem()
}

func (i GetGroupUserArray) ToGetGroupUserArrayOutput() GetGroupUserArrayOutput {
	return i.ToGetGroupUserArrayOutputWithContext(context.Background())
}

func (i GetGroupUserArray) ToGetGroupUserArrayOutputWithContext(ctx context.Context) GetGroupUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupUserArrayOutput)
}

type GetGroupUserOutput struct{ *pulumi.OutputState }

func (GetGroupUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupUser)(nil)).Elem()
}

func (o GetGroupUserOutput) ToGetGroupUserOutput() GetGroupUserOutput {
	return o
}

func (o GetGroupUserOutput) ToGetGroupUserOutputWithContext(ctx context.Context) GetGroupUserOutput {
	return o
}

// User ARN.
func (o GetGroupUserOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupUser) string { return v.Arn }).(pulumi.StringOutput)
}

// Path to the IAM user.
func (o GetGroupUserOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupUser) string { return v.Path }).(pulumi.StringOutput)
}

// Stable and unique string identifying the IAM user.
func (o GetGroupUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupUser) string { return v.UserId }).(pulumi.StringOutput)
}

// Name of the IAM user.
func (o GetGroupUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupUser) string { return v.UserName }).(pulumi.StringOutput)
}

type GetGroupUserArrayOutput struct{ *pulumi.OutputState }

func (GetGroupUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupUser)(nil)).Elem()
}

func (o GetGroupUserArrayOutput) ToGetGroupUserArrayOutput() GetGroupUserArrayOutput {
	return o
}

func (o GetGroupUserArrayOutput) ToGetGroupUserArrayOutputWithContext(ctx context.Context) GetGroupUserArrayOutput {
	return o
}

func (o GetGroupUserArrayOutput) Index(i pulumi.IntInput) GetGroupUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupUser {
		return vs[0].([]GetGroupUser)[vs[1].(int)]
	}).(GetGroupUserOutput)
}

type GetPolicyDocumentStatement struct {
	// List of actions that this statement either allows or denies. For example, `["ec2:RunInstances", "s3:*"]`.
	Actions []string `pulumi:"actions"`
	// Configuration block for a condition. Detailed below.
	Conditions []GetPolicyDocumentStatementCondition `pulumi:"conditions"`
	// Whether this statement allows or denies the given actions. Valid values are `Allow` and `Deny`. Defaults to `Allow`.
	Effect *string `pulumi:"effect"`
	// List of actions that this statement does *not* apply to. Use to apply a policy statement to all actions *except* those listed.
	NotActions []string `pulumi:"notActions"`
	// Like `principals` except these are principals that the statement does *not* apply to.
	NotPrincipals []GetPolicyDocumentStatementNotPrincipal `pulumi:"notPrincipals"`
	// List of resource ARNs that this statement does *not* apply to. Use to apply a policy statement to all resources *except* those listed. Conflicts with `resources`.
	NotResources []string `pulumi:"notResources"`
	// Configuration block for principals. Detailed below.
	Principals []GetPolicyDocumentStatementPrincipal `pulumi:"principals"`
	// List of resource ARNs that this statement applies to. This is required by AWS if used for an IAM policy. Conflicts with `notResources`.
	Resources []string `pulumi:"resources"`
	// Sid (statement ID) is an identifier for a policy statement.
	Sid *string `pulumi:"sid"`
}

// GetPolicyDocumentStatementInput is an input type that accepts GetPolicyDocumentStatementArgs and GetPolicyDocumentStatementOutput values.
// You can construct a concrete instance of `GetPolicyDocumentStatementInput` via:
//
//	GetPolicyDocumentStatementArgs{...}
type GetPolicyDocumentStatementInput interface {
	pulumi.Input

	ToGetPolicyDocumentStatementOutput() GetPolicyDocumentStatementOutput
	ToGetPolicyDocumentStatementOutputWithContext(context.Context) GetPolicyDocumentStatementOutput
}

type GetPolicyDocumentStatementArgs struct {
	// List of actions that this statement either allows or denies. For example, `["ec2:RunInstances", "s3:*"]`.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Configuration block for a condition. Detailed below.
	Conditions GetPolicyDocumentStatementConditionArrayInput `pulumi:"conditions"`
	// Whether this statement allows or denies the given actions. Valid values are `Allow` and `Deny`. Defaults to `Allow`.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// List of actions that this statement does *not* apply to. Use to apply a policy statement to all actions *except* those listed.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// Like `principals` except these are principals that the statement does *not* apply to.
	NotPrincipals GetPolicyDocumentStatementNotPrincipalArrayInput `pulumi:"notPrincipals"`
	// List of resource ARNs that this statement does *not* apply to. Use to apply a policy statement to all resources *except* those listed. Conflicts with `resources`.
	NotResources pulumi.StringArrayInput `pulumi:"notResources"`
	// Configuration block for principals. Detailed below.
	Principals GetPolicyDocumentStatementPrincipalArrayInput `pulumi:"principals"`
	// List of resource ARNs that this statement applies to. This is required by AWS if used for an IAM policy. Conflicts with `notResources`.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// Sid (statement ID) is an identifier for a policy statement.
	Sid pulumi.StringPtrInput `pulumi:"sid"`
}

func (GetPolicyDocumentStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatement)(nil)).Elem()
}

func (i GetPolicyDocumentStatementArgs) ToGetPolicyDocumentStatementOutput() GetPolicyDocumentStatementOutput {
	return i.ToGetPolicyDocumentStatementOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementArgs) ToGetPolicyDocumentStatementOutputWithContext(ctx context.Context) GetPolicyDocumentStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementOutput)
}

// GetPolicyDocumentStatementArrayInput is an input type that accepts GetPolicyDocumentStatementArray and GetPolicyDocumentStatementArrayOutput values.
// You can construct a concrete instance of `GetPolicyDocumentStatementArrayInput` via:
//
//	GetPolicyDocumentStatementArray{ GetPolicyDocumentStatementArgs{...} }
type GetPolicyDocumentStatementArrayInput interface {
	pulumi.Input

	ToGetPolicyDocumentStatementArrayOutput() GetPolicyDocumentStatementArrayOutput
	ToGetPolicyDocumentStatementArrayOutputWithContext(context.Context) GetPolicyDocumentStatementArrayOutput
}

type GetPolicyDocumentStatementArray []GetPolicyDocumentStatementInput

func (GetPolicyDocumentStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentStatement)(nil)).Elem()
}

func (i GetPolicyDocumentStatementArray) ToGetPolicyDocumentStatementArrayOutput() GetPolicyDocumentStatementArrayOutput {
	return i.ToGetPolicyDocumentStatementArrayOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementArray) ToGetPolicyDocumentStatementArrayOutputWithContext(ctx context.Context) GetPolicyDocumentStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementArrayOutput)
}

type GetPolicyDocumentStatementOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatement)(nil)).Elem()
}

func (o GetPolicyDocumentStatementOutput) ToGetPolicyDocumentStatementOutput() GetPolicyDocumentStatementOutput {
	return o
}

func (o GetPolicyDocumentStatementOutput) ToGetPolicyDocumentStatementOutputWithContext(ctx context.Context) GetPolicyDocumentStatementOutput {
	return o
}

// List of actions that this statement either allows or denies. For example, `["ec2:RunInstances", "s3:*"]`.
func (o GetPolicyDocumentStatementOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatement) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Configuration block for a condition. Detailed below.
func (o GetPolicyDocumentStatementOutput) Conditions() GetPolicyDocumentStatementConditionArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatement) []GetPolicyDocumentStatementCondition { return v.Conditions }).(GetPolicyDocumentStatementConditionArrayOutput)
}

// Whether this statement allows or denies the given actions. Valid values are `Allow` and `Deny`. Defaults to `Allow`.
func (o GetPolicyDocumentStatementOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatement) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// List of actions that this statement does *not* apply to. Use to apply a policy statement to all actions *except* those listed.
func (o GetPolicyDocumentStatementOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatement) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// Like `principals` except these are principals that the statement does *not* apply to.
func (o GetPolicyDocumentStatementOutput) NotPrincipals() GetPolicyDocumentStatementNotPrincipalArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatement) []GetPolicyDocumentStatementNotPrincipal { return v.NotPrincipals }).(GetPolicyDocumentStatementNotPrincipalArrayOutput)
}

// List of resource ARNs that this statement does *not* apply to. Use to apply a policy statement to all resources *except* those listed. Conflicts with `resources`.
func (o GetPolicyDocumentStatementOutput) NotResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatement) []string { return v.NotResources }).(pulumi.StringArrayOutput)
}

// Configuration block for principals. Detailed below.
func (o GetPolicyDocumentStatementOutput) Principals() GetPolicyDocumentStatementPrincipalArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatement) []GetPolicyDocumentStatementPrincipal { return v.Principals }).(GetPolicyDocumentStatementPrincipalArrayOutput)
}

// List of resource ARNs that this statement applies to. This is required by AWS if used for an IAM policy. Conflicts with `notResources`.
func (o GetPolicyDocumentStatementOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatement) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// Sid (statement ID) is an identifier for a policy statement.
func (o GetPolicyDocumentStatementOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatement) *string { return v.Sid }).(pulumi.StringPtrOutput)
}

type GetPolicyDocumentStatementArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentStatement)(nil)).Elem()
}

func (o GetPolicyDocumentStatementArrayOutput) ToGetPolicyDocumentStatementArrayOutput() GetPolicyDocumentStatementArrayOutput {
	return o
}

func (o GetPolicyDocumentStatementArrayOutput) ToGetPolicyDocumentStatementArrayOutputWithContext(ctx context.Context) GetPolicyDocumentStatementArrayOutput {
	return o
}

func (o GetPolicyDocumentStatementArrayOutput) Index(i pulumi.IntInput) GetPolicyDocumentStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyDocumentStatement {
		return vs[0].([]GetPolicyDocumentStatement)[vs[1].(int)]
	}).(GetPolicyDocumentStatementOutput)
}

type GetPolicyDocumentStatementCondition struct {
	// Name of the [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html) to evaluate.
	Test string `pulumi:"test"`
	// Values to evaluate the condition against. If multiple values are provided, the condition matches if at least one of them applies. That is, AWS evaluates multiple values as though using an "OR" boolean operation.
	Values []string `pulumi:"values"`
	// Name of a [Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys) to apply the condition to. Context variables may either be standard AWS variables starting with `aws:` or service-specific variables prefixed with the service name.
	Variable string `pulumi:"variable"`
}

// GetPolicyDocumentStatementConditionInput is an input type that accepts GetPolicyDocumentStatementConditionArgs and GetPolicyDocumentStatementConditionOutput values.
// You can construct a concrete instance of `GetPolicyDocumentStatementConditionInput` via:
//
//	GetPolicyDocumentStatementConditionArgs{...}
type GetPolicyDocumentStatementConditionInput interface {
	pulumi.Input

	ToGetPolicyDocumentStatementConditionOutput() GetPolicyDocumentStatementConditionOutput
	ToGetPolicyDocumentStatementConditionOutputWithContext(context.Context) GetPolicyDocumentStatementConditionOutput
}

type GetPolicyDocumentStatementConditionArgs struct {
	// Name of the [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html) to evaluate.
	Test pulumi.StringInput `pulumi:"test"`
	// Values to evaluate the condition against. If multiple values are provided, the condition matches if at least one of them applies. That is, AWS evaluates multiple values as though using an "OR" boolean operation.
	Values pulumi.StringArrayInput `pulumi:"values"`
	// Name of a [Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys) to apply the condition to. Context variables may either be standard AWS variables starting with `aws:` or service-specific variables prefixed with the service name.
	Variable pulumi.StringInput `pulumi:"variable"`
}

func (GetPolicyDocumentStatementConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementCondition)(nil)).Elem()
}

func (i GetPolicyDocumentStatementConditionArgs) ToGetPolicyDocumentStatementConditionOutput() GetPolicyDocumentStatementConditionOutput {
	return i.ToGetPolicyDocumentStatementConditionOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementConditionArgs) ToGetPolicyDocumentStatementConditionOutputWithContext(ctx context.Context) GetPolicyDocumentStatementConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementConditionOutput)
}

// GetPolicyDocumentStatementConditionArrayInput is an input type that accepts GetPolicyDocumentStatementConditionArray and GetPolicyDocumentStatementConditionArrayOutput values.
// You can construct a concrete instance of `GetPolicyDocumentStatementConditionArrayInput` via:
//
//	GetPolicyDocumentStatementConditionArray{ GetPolicyDocumentStatementConditionArgs{...} }
type GetPolicyDocumentStatementConditionArrayInput interface {
	pulumi.Input

	ToGetPolicyDocumentStatementConditionArrayOutput() GetPolicyDocumentStatementConditionArrayOutput
	ToGetPolicyDocumentStatementConditionArrayOutputWithContext(context.Context) GetPolicyDocumentStatementConditionArrayOutput
}

type GetPolicyDocumentStatementConditionArray []GetPolicyDocumentStatementConditionInput

func (GetPolicyDocumentStatementConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentStatementCondition)(nil)).Elem()
}

func (i GetPolicyDocumentStatementConditionArray) ToGetPolicyDocumentStatementConditionArrayOutput() GetPolicyDocumentStatementConditionArrayOutput {
	return i.ToGetPolicyDocumentStatementConditionArrayOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementConditionArray) ToGetPolicyDocumentStatementConditionArrayOutputWithContext(ctx context.Context) GetPolicyDocumentStatementConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementConditionArrayOutput)
}

type GetPolicyDocumentStatementConditionOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementCondition)(nil)).Elem()
}

func (o GetPolicyDocumentStatementConditionOutput) ToGetPolicyDocumentStatementConditionOutput() GetPolicyDocumentStatementConditionOutput {
	return o
}

func (o GetPolicyDocumentStatementConditionOutput) ToGetPolicyDocumentStatementConditionOutputWithContext(ctx context.Context) GetPolicyDocumentStatementConditionOutput {
	return o
}

// Name of the [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html) to evaluate.
func (o GetPolicyDocumentStatementConditionOutput) Test() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatementCondition) string { return v.Test }).(pulumi.StringOutput)
}

// Values to evaluate the condition against. If multiple values are provided, the condition matches if at least one of them applies. That is, AWS evaluates multiple values as though using an "OR" boolean operation.
func (o GetPolicyDocumentStatementConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatementCondition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// Name of a [Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys) to apply the condition to. Context variables may either be standard AWS variables starting with `aws:` or service-specific variables prefixed with the service name.
func (o GetPolicyDocumentStatementConditionOutput) Variable() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatementCondition) string { return v.Variable }).(pulumi.StringOutput)
}

type GetPolicyDocumentStatementConditionArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentStatementCondition)(nil)).Elem()
}

func (o GetPolicyDocumentStatementConditionArrayOutput) ToGetPolicyDocumentStatementConditionArrayOutput() GetPolicyDocumentStatementConditionArrayOutput {
	return o
}

func (o GetPolicyDocumentStatementConditionArrayOutput) ToGetPolicyDocumentStatementConditionArrayOutputWithContext(ctx context.Context) GetPolicyDocumentStatementConditionArrayOutput {
	return o
}

func (o GetPolicyDocumentStatementConditionArrayOutput) Index(i pulumi.IntInput) GetPolicyDocumentStatementConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyDocumentStatementCondition {
		return vs[0].([]GetPolicyDocumentStatementCondition)[vs[1].(int)]
	}).(GetPolicyDocumentStatementConditionOutput)
}

type GetPolicyDocumentStatementNotPrincipal struct {
	// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
	Identifiers []string `pulumi:"identifiers"`
	// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
	Type string `pulumi:"type"`
}

// GetPolicyDocumentStatementNotPrincipalInput is an input type that accepts GetPolicyDocumentStatementNotPrincipalArgs and GetPolicyDocumentStatementNotPrincipalOutput values.
// You can construct a concrete instance of `GetPolicyDocumentStatementNotPrincipalInput` via:
//
//	GetPolicyDocumentStatementNotPrincipalArgs{...}
type GetPolicyDocumentStatementNotPrincipalInput interface {
	pulumi.Input

	ToGetPolicyDocumentStatementNotPrincipalOutput() GetPolicyDocumentStatementNotPrincipalOutput
	ToGetPolicyDocumentStatementNotPrincipalOutputWithContext(context.Context) GetPolicyDocumentStatementNotPrincipalOutput
}

type GetPolicyDocumentStatementNotPrincipalArgs struct {
	// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
	Identifiers pulumi.StringArrayInput `pulumi:"identifiers"`
	// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetPolicyDocumentStatementNotPrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementNotPrincipal)(nil)).Elem()
}

func (i GetPolicyDocumentStatementNotPrincipalArgs) ToGetPolicyDocumentStatementNotPrincipalOutput() GetPolicyDocumentStatementNotPrincipalOutput {
	return i.ToGetPolicyDocumentStatementNotPrincipalOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementNotPrincipalArgs) ToGetPolicyDocumentStatementNotPrincipalOutputWithContext(ctx context.Context) GetPolicyDocumentStatementNotPrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementNotPrincipalOutput)
}

// GetPolicyDocumentStatementNotPrincipalArrayInput is an input type that accepts GetPolicyDocumentStatementNotPrincipalArray and GetPolicyDocumentStatementNotPrincipalArrayOutput values.
// You can construct a concrete instance of `GetPolicyDocumentStatementNotPrincipalArrayInput` via:
//
//	GetPolicyDocumentStatementNotPrincipalArray{ GetPolicyDocumentStatementNotPrincipalArgs{...} }
type GetPolicyDocumentStatementNotPrincipalArrayInput interface {
	pulumi.Input

	ToGetPolicyDocumentStatementNotPrincipalArrayOutput() GetPolicyDocumentStatementNotPrincipalArrayOutput
	ToGetPolicyDocumentStatementNotPrincipalArrayOutputWithContext(context.Context) GetPolicyDocumentStatementNotPrincipalArrayOutput
}

type GetPolicyDocumentStatementNotPrincipalArray []GetPolicyDocumentStatementNotPrincipalInput

func (GetPolicyDocumentStatementNotPrincipalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentStatementNotPrincipal)(nil)).Elem()
}

func (i GetPolicyDocumentStatementNotPrincipalArray) ToGetPolicyDocumentStatementNotPrincipalArrayOutput() GetPolicyDocumentStatementNotPrincipalArrayOutput {
	return i.ToGetPolicyDocumentStatementNotPrincipalArrayOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementNotPrincipalArray) ToGetPolicyDocumentStatementNotPrincipalArrayOutputWithContext(ctx context.Context) GetPolicyDocumentStatementNotPrincipalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementNotPrincipalArrayOutput)
}

type GetPolicyDocumentStatementNotPrincipalOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementNotPrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementNotPrincipal)(nil)).Elem()
}

func (o GetPolicyDocumentStatementNotPrincipalOutput) ToGetPolicyDocumentStatementNotPrincipalOutput() GetPolicyDocumentStatementNotPrincipalOutput {
	return o
}

func (o GetPolicyDocumentStatementNotPrincipalOutput) ToGetPolicyDocumentStatementNotPrincipalOutputWithContext(ctx context.Context) GetPolicyDocumentStatementNotPrincipalOutput {
	return o
}

// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
func (o GetPolicyDocumentStatementNotPrincipalOutput) Identifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatementNotPrincipal) []string { return v.Identifiers }).(pulumi.StringArrayOutput)
}

// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
func (o GetPolicyDocumentStatementNotPrincipalOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatementNotPrincipal) string { return v.Type }).(pulumi.StringOutput)
}

type GetPolicyDocumentStatementNotPrincipalArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementNotPrincipalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentStatementNotPrincipal)(nil)).Elem()
}

func (o GetPolicyDocumentStatementNotPrincipalArrayOutput) ToGetPolicyDocumentStatementNotPrincipalArrayOutput() GetPolicyDocumentStatementNotPrincipalArrayOutput {
	return o
}

func (o GetPolicyDocumentStatementNotPrincipalArrayOutput) ToGetPolicyDocumentStatementNotPrincipalArrayOutputWithContext(ctx context.Context) GetPolicyDocumentStatementNotPrincipalArrayOutput {
	return o
}

func (o GetPolicyDocumentStatementNotPrincipalArrayOutput) Index(i pulumi.IntInput) GetPolicyDocumentStatementNotPrincipalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyDocumentStatementNotPrincipal {
		return vs[0].([]GetPolicyDocumentStatementNotPrincipal)[vs[1].(int)]
	}).(GetPolicyDocumentStatementNotPrincipalOutput)
}

type GetPolicyDocumentStatementPrincipal struct {
	// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
	Identifiers []string `pulumi:"identifiers"`
	// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
	Type string `pulumi:"type"`
}

// GetPolicyDocumentStatementPrincipalInput is an input type that accepts GetPolicyDocumentStatementPrincipalArgs and GetPolicyDocumentStatementPrincipalOutput values.
// You can construct a concrete instance of `GetPolicyDocumentStatementPrincipalInput` via:
//
//	GetPolicyDocumentStatementPrincipalArgs{...}
type GetPolicyDocumentStatementPrincipalInput interface {
	pulumi.Input

	ToGetPolicyDocumentStatementPrincipalOutput() GetPolicyDocumentStatementPrincipalOutput
	ToGetPolicyDocumentStatementPrincipalOutputWithContext(context.Context) GetPolicyDocumentStatementPrincipalOutput
}

type GetPolicyDocumentStatementPrincipalArgs struct {
	// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
	Identifiers pulumi.StringArrayInput `pulumi:"identifiers"`
	// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetPolicyDocumentStatementPrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementPrincipal)(nil)).Elem()
}

func (i GetPolicyDocumentStatementPrincipalArgs) ToGetPolicyDocumentStatementPrincipalOutput() GetPolicyDocumentStatementPrincipalOutput {
	return i.ToGetPolicyDocumentStatementPrincipalOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementPrincipalArgs) ToGetPolicyDocumentStatementPrincipalOutputWithContext(ctx context.Context) GetPolicyDocumentStatementPrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementPrincipalOutput)
}

// GetPolicyDocumentStatementPrincipalArrayInput is an input type that accepts GetPolicyDocumentStatementPrincipalArray and GetPolicyDocumentStatementPrincipalArrayOutput values.
// You can construct a concrete instance of `GetPolicyDocumentStatementPrincipalArrayInput` via:
//
//	GetPolicyDocumentStatementPrincipalArray{ GetPolicyDocumentStatementPrincipalArgs{...} }
type GetPolicyDocumentStatementPrincipalArrayInput interface {
	pulumi.Input

	ToGetPolicyDocumentStatementPrincipalArrayOutput() GetPolicyDocumentStatementPrincipalArrayOutput
	ToGetPolicyDocumentStatementPrincipalArrayOutputWithContext(context.Context) GetPolicyDocumentStatementPrincipalArrayOutput
}

type GetPolicyDocumentStatementPrincipalArray []GetPolicyDocumentStatementPrincipalInput

func (GetPolicyDocumentStatementPrincipalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentStatementPrincipal)(nil)).Elem()
}

func (i GetPolicyDocumentStatementPrincipalArray) ToGetPolicyDocumentStatementPrincipalArrayOutput() GetPolicyDocumentStatementPrincipalArrayOutput {
	return i.ToGetPolicyDocumentStatementPrincipalArrayOutputWithContext(context.Background())
}

func (i GetPolicyDocumentStatementPrincipalArray) ToGetPolicyDocumentStatementPrincipalArrayOutputWithContext(ctx context.Context) GetPolicyDocumentStatementPrincipalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentStatementPrincipalArrayOutput)
}

type GetPolicyDocumentStatementPrincipalOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementPrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentStatementPrincipal)(nil)).Elem()
}

func (o GetPolicyDocumentStatementPrincipalOutput) ToGetPolicyDocumentStatementPrincipalOutput() GetPolicyDocumentStatementPrincipalOutput {
	return o
}

func (o GetPolicyDocumentStatementPrincipalOutput) ToGetPolicyDocumentStatementPrincipalOutputWithContext(ctx context.Context) GetPolicyDocumentStatementPrincipalOutput {
	return o
}

// List of identifiers for principals. When `type` is `AWS`, these are IAM principal ARNs, e.g., `arn:aws:iam::12345678901:role/yak-role`.  When `type` is `Service`, these are AWS Service roles, e.g., `lambda.amazonaws.com`. When `type` is `Federated`, these are web identity users or SAML provider ARNs, e.g., `accounts.google.com` or `arn:aws:iam::12345678901:saml-provider/yak-saml-provider`. When `type` is `CanonicalUser`, these are [canonical user IDs](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId), e.g., `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`.
func (o GetPolicyDocumentStatementPrincipalOutput) Identifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatementPrincipal) []string { return v.Identifiers }).(pulumi.StringArrayOutput)
}

// Type of principal. Valid values include `AWS`, `Service`, `Federated`, `CanonicalUser` and `*`.
func (o GetPolicyDocumentStatementPrincipalOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDocumentStatementPrincipal) string { return v.Type }).(pulumi.StringOutput)
}

type GetPolicyDocumentStatementPrincipalArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentStatementPrincipalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentStatementPrincipal)(nil)).Elem()
}

func (o GetPolicyDocumentStatementPrincipalArrayOutput) ToGetPolicyDocumentStatementPrincipalArrayOutput() GetPolicyDocumentStatementPrincipalArrayOutput {
	return o
}

func (o GetPolicyDocumentStatementPrincipalArrayOutput) ToGetPolicyDocumentStatementPrincipalArrayOutputWithContext(ctx context.Context) GetPolicyDocumentStatementPrincipalArrayOutput {
	return o
}

func (o GetPolicyDocumentStatementPrincipalArrayOutput) Index(i pulumi.IntInput) GetPolicyDocumentStatementPrincipalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyDocumentStatementPrincipal {
		return vs[0].([]GetPolicyDocumentStatementPrincipal)[vs[1].(int)]
	}).(GetPolicyDocumentStatementPrincipalOutput)
}

type GetPrincipalPolicySimulationContext struct {
	// The context _condition key_ to set.
	//
	// If you have policies containing `Condition` elements or using dynamic interpolations then you will need to provide suitable values for each condition key your policies use. See [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to find the various condition keys that are normally provided for real requests to each action of each AWS service.
	Key string `pulumi:"key"`
	// An IAM value type that determines how the policy simulator will interpret the strings given in `values`.
	//
	// For more information, see the `ContextKeyType` field of [`iam.ContextEntry`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ContextEntry.html) in the underlying API.
	Type string `pulumi:"type"`
	// A set of one or more values for this context entry.
	Values []string `pulumi:"values"`
}

// GetPrincipalPolicySimulationContextInput is an input type that accepts GetPrincipalPolicySimulationContextArgs and GetPrincipalPolicySimulationContextOutput values.
// You can construct a concrete instance of `GetPrincipalPolicySimulationContextInput` via:
//
//	GetPrincipalPolicySimulationContextArgs{...}
type GetPrincipalPolicySimulationContextInput interface {
	pulumi.Input

	ToGetPrincipalPolicySimulationContextOutput() GetPrincipalPolicySimulationContextOutput
	ToGetPrincipalPolicySimulationContextOutputWithContext(context.Context) GetPrincipalPolicySimulationContextOutput
}

type GetPrincipalPolicySimulationContextArgs struct {
	// The context _condition key_ to set.
	//
	// If you have policies containing `Condition` elements or using dynamic interpolations then you will need to provide suitable values for each condition key your policies use. See [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to find the various condition keys that are normally provided for real requests to each action of each AWS service.
	Key pulumi.StringInput `pulumi:"key"`
	// An IAM value type that determines how the policy simulator will interpret the strings given in `values`.
	//
	// For more information, see the `ContextKeyType` field of [`iam.ContextEntry`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ContextEntry.html) in the underlying API.
	Type pulumi.StringInput `pulumi:"type"`
	// A set of one or more values for this context entry.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetPrincipalPolicySimulationContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationContext)(nil)).Elem()
}

func (i GetPrincipalPolicySimulationContextArgs) ToGetPrincipalPolicySimulationContextOutput() GetPrincipalPolicySimulationContextOutput {
	return i.ToGetPrincipalPolicySimulationContextOutputWithContext(context.Background())
}

func (i GetPrincipalPolicySimulationContextArgs) ToGetPrincipalPolicySimulationContextOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrincipalPolicySimulationContextOutput)
}

// GetPrincipalPolicySimulationContextArrayInput is an input type that accepts GetPrincipalPolicySimulationContextArray and GetPrincipalPolicySimulationContextArrayOutput values.
// You can construct a concrete instance of `GetPrincipalPolicySimulationContextArrayInput` via:
//
//	GetPrincipalPolicySimulationContextArray{ GetPrincipalPolicySimulationContextArgs{...} }
type GetPrincipalPolicySimulationContextArrayInput interface {
	pulumi.Input

	ToGetPrincipalPolicySimulationContextArrayOutput() GetPrincipalPolicySimulationContextArrayOutput
	ToGetPrincipalPolicySimulationContextArrayOutputWithContext(context.Context) GetPrincipalPolicySimulationContextArrayOutput
}

type GetPrincipalPolicySimulationContextArray []GetPrincipalPolicySimulationContextInput

func (GetPrincipalPolicySimulationContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrincipalPolicySimulationContext)(nil)).Elem()
}

func (i GetPrincipalPolicySimulationContextArray) ToGetPrincipalPolicySimulationContextArrayOutput() GetPrincipalPolicySimulationContextArrayOutput {
	return i.ToGetPrincipalPolicySimulationContextArrayOutputWithContext(context.Background())
}

func (i GetPrincipalPolicySimulationContextArray) ToGetPrincipalPolicySimulationContextArrayOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrincipalPolicySimulationContextArrayOutput)
}

type GetPrincipalPolicySimulationContextOutput struct{ *pulumi.OutputState }

func (GetPrincipalPolicySimulationContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationContext)(nil)).Elem()
}

func (o GetPrincipalPolicySimulationContextOutput) ToGetPrincipalPolicySimulationContextOutput() GetPrincipalPolicySimulationContextOutput {
	return o
}

func (o GetPrincipalPolicySimulationContextOutput) ToGetPrincipalPolicySimulationContextOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationContextOutput {
	return o
}

// The context _condition key_ to set.
//
// If you have policies containing `Condition` elements or using dynamic interpolations then you will need to provide suitable values for each condition key your policies use. See [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to find the various condition keys that are normally provided for real requests to each action of each AWS service.
func (o GetPrincipalPolicySimulationContextOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationContext) string { return v.Key }).(pulumi.StringOutput)
}

// An IAM value type that determines how the policy simulator will interpret the strings given in `values`.
//
// For more information, see the `ContextKeyType` field of [`iam.ContextEntry`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ContextEntry.html) in the underlying API.
func (o GetPrincipalPolicySimulationContextOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationContext) string { return v.Type }).(pulumi.StringOutput)
}

// A set of one or more values for this context entry.
func (o GetPrincipalPolicySimulationContextOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationContext) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetPrincipalPolicySimulationContextArrayOutput struct{ *pulumi.OutputState }

func (GetPrincipalPolicySimulationContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrincipalPolicySimulationContext)(nil)).Elem()
}

func (o GetPrincipalPolicySimulationContextArrayOutput) ToGetPrincipalPolicySimulationContextArrayOutput() GetPrincipalPolicySimulationContextArrayOutput {
	return o
}

func (o GetPrincipalPolicySimulationContextArrayOutput) ToGetPrincipalPolicySimulationContextArrayOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationContextArrayOutput {
	return o
}

func (o GetPrincipalPolicySimulationContextArrayOutput) Index(i pulumi.IntInput) GetPrincipalPolicySimulationContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrincipalPolicySimulationContext {
		return vs[0].([]GetPrincipalPolicySimulationContext)[vs[1].(int)]
	}).(GetPrincipalPolicySimulationContextOutput)
}

type GetPrincipalPolicySimulationResult struct {
	// The name of the single IAM action used for this particular request.
	ActionName string `pulumi:"actionName"`
	// `true` if `decision` is "allowed", and `false` otherwise.
	Allowed bool `pulumi:"allowed"`
	// The raw decision determined from all of the policies in scope; either "allowed", "explicitDeny", or "implicitDeny".
	Decision string `pulumi:"decision"`
	// A map of arbitrary metadata entries returned by the policy simulator for this request.
	DecisionDetails map[string]string `pulumi:"decisionDetails"`
	// A nested set of objects describing which policies contained statements that were relevant to this simulation request. Each object has attributes `sourcePolicyId` and `sourcePolicyType` to identify one of the policies.
	MatchedStatements []GetPrincipalPolicySimulationResultMatchedStatement `pulumi:"matchedStatements"`
	// A set of context keys (or condition keys) that were needed by some of the policies contributing to this result but not specified using a `context` block in the configuration. Missing or incorrect context keys will typically cause a simulated request to be disallowed.
	MissingContextKeys []string `pulumi:"missingContextKeys"`
	// ARN of the resource that was used for this particular request. When you specify multiple actions and multiple resource ARNs, that causes a separate policy request for each combination of unique action and resource.
	ResourceArn string `pulumi:"resourceArn"`
}

// GetPrincipalPolicySimulationResultInput is an input type that accepts GetPrincipalPolicySimulationResultArgs and GetPrincipalPolicySimulationResultOutput values.
// You can construct a concrete instance of `GetPrincipalPolicySimulationResultInput` via:
//
//	GetPrincipalPolicySimulationResultArgs{...}
type GetPrincipalPolicySimulationResultInput interface {
	pulumi.Input

	ToGetPrincipalPolicySimulationResultOutput() GetPrincipalPolicySimulationResultOutput
	ToGetPrincipalPolicySimulationResultOutputWithContext(context.Context) GetPrincipalPolicySimulationResultOutput
}

type GetPrincipalPolicySimulationResultArgs struct {
	// The name of the single IAM action used for this particular request.
	ActionName pulumi.StringInput `pulumi:"actionName"`
	// `true` if `decision` is "allowed", and `false` otherwise.
	Allowed pulumi.BoolInput `pulumi:"allowed"`
	// The raw decision determined from all of the policies in scope; either "allowed", "explicitDeny", or "implicitDeny".
	Decision pulumi.StringInput `pulumi:"decision"`
	// A map of arbitrary metadata entries returned by the policy simulator for this request.
	DecisionDetails pulumi.StringMapInput `pulumi:"decisionDetails"`
	// A nested set of objects describing which policies contained statements that were relevant to this simulation request. Each object has attributes `sourcePolicyId` and `sourcePolicyType` to identify one of the policies.
	MatchedStatements GetPrincipalPolicySimulationResultMatchedStatementArrayInput `pulumi:"matchedStatements"`
	// A set of context keys (or condition keys) that were needed by some of the policies contributing to this result but not specified using a `context` block in the configuration. Missing or incorrect context keys will typically cause a simulated request to be disallowed.
	MissingContextKeys pulumi.StringArrayInput `pulumi:"missingContextKeys"`
	// ARN of the resource that was used for this particular request. When you specify multiple actions and multiple resource ARNs, that causes a separate policy request for each combination of unique action and resource.
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
}

func (GetPrincipalPolicySimulationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationResult)(nil)).Elem()
}

func (i GetPrincipalPolicySimulationResultArgs) ToGetPrincipalPolicySimulationResultOutput() GetPrincipalPolicySimulationResultOutput {
	return i.ToGetPrincipalPolicySimulationResultOutputWithContext(context.Background())
}

func (i GetPrincipalPolicySimulationResultArgs) ToGetPrincipalPolicySimulationResultOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrincipalPolicySimulationResultOutput)
}

// GetPrincipalPolicySimulationResultArrayInput is an input type that accepts GetPrincipalPolicySimulationResultArray and GetPrincipalPolicySimulationResultArrayOutput values.
// You can construct a concrete instance of `GetPrincipalPolicySimulationResultArrayInput` via:
//
//	GetPrincipalPolicySimulationResultArray{ GetPrincipalPolicySimulationResultArgs{...} }
type GetPrincipalPolicySimulationResultArrayInput interface {
	pulumi.Input

	ToGetPrincipalPolicySimulationResultArrayOutput() GetPrincipalPolicySimulationResultArrayOutput
	ToGetPrincipalPolicySimulationResultArrayOutputWithContext(context.Context) GetPrincipalPolicySimulationResultArrayOutput
}

type GetPrincipalPolicySimulationResultArray []GetPrincipalPolicySimulationResultInput

func (GetPrincipalPolicySimulationResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrincipalPolicySimulationResult)(nil)).Elem()
}

func (i GetPrincipalPolicySimulationResultArray) ToGetPrincipalPolicySimulationResultArrayOutput() GetPrincipalPolicySimulationResultArrayOutput {
	return i.ToGetPrincipalPolicySimulationResultArrayOutputWithContext(context.Background())
}

func (i GetPrincipalPolicySimulationResultArray) ToGetPrincipalPolicySimulationResultArrayOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrincipalPolicySimulationResultArrayOutput)
}

type GetPrincipalPolicySimulationResultOutput struct{ *pulumi.OutputState }

func (GetPrincipalPolicySimulationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationResult)(nil)).Elem()
}

func (o GetPrincipalPolicySimulationResultOutput) ToGetPrincipalPolicySimulationResultOutput() GetPrincipalPolicySimulationResultOutput {
	return o
}

func (o GetPrincipalPolicySimulationResultOutput) ToGetPrincipalPolicySimulationResultOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultOutput {
	return o
}

// The name of the single IAM action used for this particular request.
func (o GetPrincipalPolicySimulationResultOutput) ActionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationResult) string { return v.ActionName }).(pulumi.StringOutput)
}

// `true` if `decision` is "allowed", and `false` otherwise.
func (o GetPrincipalPolicySimulationResultOutput) Allowed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationResult) bool { return v.Allowed }).(pulumi.BoolOutput)
}

// The raw decision determined from all of the policies in scope; either "allowed", "explicitDeny", or "implicitDeny".
func (o GetPrincipalPolicySimulationResultOutput) Decision() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationResult) string { return v.Decision }).(pulumi.StringOutput)
}

// A map of arbitrary metadata entries returned by the policy simulator for this request.
func (o GetPrincipalPolicySimulationResultOutput) DecisionDetails() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationResult) map[string]string { return v.DecisionDetails }).(pulumi.StringMapOutput)
}

// A nested set of objects describing which policies contained statements that were relevant to this simulation request. Each object has attributes `sourcePolicyId` and `sourcePolicyType` to identify one of the policies.
func (o GetPrincipalPolicySimulationResultOutput) MatchedStatements() GetPrincipalPolicySimulationResultMatchedStatementArrayOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationResult) []GetPrincipalPolicySimulationResultMatchedStatement {
		return v.MatchedStatements
	}).(GetPrincipalPolicySimulationResultMatchedStatementArrayOutput)
}

// A set of context keys (or condition keys) that were needed by some of the policies contributing to this result but not specified using a `context` block in the configuration. Missing or incorrect context keys will typically cause a simulated request to be disallowed.
func (o GetPrincipalPolicySimulationResultOutput) MissingContextKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationResult) []string { return v.MissingContextKeys }).(pulumi.StringArrayOutput)
}

// ARN of the resource that was used for this particular request. When you specify multiple actions and multiple resource ARNs, that causes a separate policy request for each combination of unique action and resource.
func (o GetPrincipalPolicySimulationResultOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationResult) string { return v.ResourceArn }).(pulumi.StringOutput)
}

type GetPrincipalPolicySimulationResultArrayOutput struct{ *pulumi.OutputState }

func (GetPrincipalPolicySimulationResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrincipalPolicySimulationResult)(nil)).Elem()
}

func (o GetPrincipalPolicySimulationResultArrayOutput) ToGetPrincipalPolicySimulationResultArrayOutput() GetPrincipalPolicySimulationResultArrayOutput {
	return o
}

func (o GetPrincipalPolicySimulationResultArrayOutput) ToGetPrincipalPolicySimulationResultArrayOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultArrayOutput {
	return o
}

func (o GetPrincipalPolicySimulationResultArrayOutput) Index(i pulumi.IntInput) GetPrincipalPolicySimulationResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrincipalPolicySimulationResult {
		return vs[0].([]GetPrincipalPolicySimulationResult)[vs[1].(int)]
	}).(GetPrincipalPolicySimulationResultOutput)
}

type GetPrincipalPolicySimulationResultMatchedStatement struct {
	SourcePolicyId   string `pulumi:"sourcePolicyId"`
	SourcePolicyType string `pulumi:"sourcePolicyType"`
}

// GetPrincipalPolicySimulationResultMatchedStatementInput is an input type that accepts GetPrincipalPolicySimulationResultMatchedStatementArgs and GetPrincipalPolicySimulationResultMatchedStatementOutput values.
// You can construct a concrete instance of `GetPrincipalPolicySimulationResultMatchedStatementInput` via:
//
//	GetPrincipalPolicySimulationResultMatchedStatementArgs{...}
type GetPrincipalPolicySimulationResultMatchedStatementInput interface {
	pulumi.Input

	ToGetPrincipalPolicySimulationResultMatchedStatementOutput() GetPrincipalPolicySimulationResultMatchedStatementOutput
	ToGetPrincipalPolicySimulationResultMatchedStatementOutputWithContext(context.Context) GetPrincipalPolicySimulationResultMatchedStatementOutput
}

type GetPrincipalPolicySimulationResultMatchedStatementArgs struct {
	SourcePolicyId   pulumi.StringInput `pulumi:"sourcePolicyId"`
	SourcePolicyType pulumi.StringInput `pulumi:"sourcePolicyType"`
}

func (GetPrincipalPolicySimulationResultMatchedStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationResultMatchedStatement)(nil)).Elem()
}

func (i GetPrincipalPolicySimulationResultMatchedStatementArgs) ToGetPrincipalPolicySimulationResultMatchedStatementOutput() GetPrincipalPolicySimulationResultMatchedStatementOutput {
	return i.ToGetPrincipalPolicySimulationResultMatchedStatementOutputWithContext(context.Background())
}

func (i GetPrincipalPolicySimulationResultMatchedStatementArgs) ToGetPrincipalPolicySimulationResultMatchedStatementOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultMatchedStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrincipalPolicySimulationResultMatchedStatementOutput)
}

// GetPrincipalPolicySimulationResultMatchedStatementArrayInput is an input type that accepts GetPrincipalPolicySimulationResultMatchedStatementArray and GetPrincipalPolicySimulationResultMatchedStatementArrayOutput values.
// You can construct a concrete instance of `GetPrincipalPolicySimulationResultMatchedStatementArrayInput` via:
//
//	GetPrincipalPolicySimulationResultMatchedStatementArray{ GetPrincipalPolicySimulationResultMatchedStatementArgs{...} }
type GetPrincipalPolicySimulationResultMatchedStatementArrayInput interface {
	pulumi.Input

	ToGetPrincipalPolicySimulationResultMatchedStatementArrayOutput() GetPrincipalPolicySimulationResultMatchedStatementArrayOutput
	ToGetPrincipalPolicySimulationResultMatchedStatementArrayOutputWithContext(context.Context) GetPrincipalPolicySimulationResultMatchedStatementArrayOutput
}

type GetPrincipalPolicySimulationResultMatchedStatementArray []GetPrincipalPolicySimulationResultMatchedStatementInput

func (GetPrincipalPolicySimulationResultMatchedStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrincipalPolicySimulationResultMatchedStatement)(nil)).Elem()
}

func (i GetPrincipalPolicySimulationResultMatchedStatementArray) ToGetPrincipalPolicySimulationResultMatchedStatementArrayOutput() GetPrincipalPolicySimulationResultMatchedStatementArrayOutput {
	return i.ToGetPrincipalPolicySimulationResultMatchedStatementArrayOutputWithContext(context.Background())
}

func (i GetPrincipalPolicySimulationResultMatchedStatementArray) ToGetPrincipalPolicySimulationResultMatchedStatementArrayOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultMatchedStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrincipalPolicySimulationResultMatchedStatementArrayOutput)
}

type GetPrincipalPolicySimulationResultMatchedStatementOutput struct{ *pulumi.OutputState }

func (GetPrincipalPolicySimulationResultMatchedStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrincipalPolicySimulationResultMatchedStatement)(nil)).Elem()
}

func (o GetPrincipalPolicySimulationResultMatchedStatementOutput) ToGetPrincipalPolicySimulationResultMatchedStatementOutput() GetPrincipalPolicySimulationResultMatchedStatementOutput {
	return o
}

func (o GetPrincipalPolicySimulationResultMatchedStatementOutput) ToGetPrincipalPolicySimulationResultMatchedStatementOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultMatchedStatementOutput {
	return o
}

func (o GetPrincipalPolicySimulationResultMatchedStatementOutput) SourcePolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationResultMatchedStatement) string { return v.SourcePolicyId }).(pulumi.StringOutput)
}

func (o GetPrincipalPolicySimulationResultMatchedStatementOutput) SourcePolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrincipalPolicySimulationResultMatchedStatement) string { return v.SourcePolicyType }).(pulumi.StringOutput)
}

type GetPrincipalPolicySimulationResultMatchedStatementArrayOutput struct{ *pulumi.OutputState }

func (GetPrincipalPolicySimulationResultMatchedStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrincipalPolicySimulationResultMatchedStatement)(nil)).Elem()
}

func (o GetPrincipalPolicySimulationResultMatchedStatementArrayOutput) ToGetPrincipalPolicySimulationResultMatchedStatementArrayOutput() GetPrincipalPolicySimulationResultMatchedStatementArrayOutput {
	return o
}

func (o GetPrincipalPolicySimulationResultMatchedStatementArrayOutput) ToGetPrincipalPolicySimulationResultMatchedStatementArrayOutputWithContext(ctx context.Context) GetPrincipalPolicySimulationResultMatchedStatementArrayOutput {
	return o
}

func (o GetPrincipalPolicySimulationResultMatchedStatementArrayOutput) Index(i pulumi.IntInput) GetPrincipalPolicySimulationResultMatchedStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrincipalPolicySimulationResultMatchedStatement {
		return vs[0].([]GetPrincipalPolicySimulationResultMatchedStatement)[vs[1].(int)]
	}).(GetPrincipalPolicySimulationResultMatchedStatementOutput)
}

type GetRoleRoleLastUsed struct {
	// The date and time, in RFC 3339 format, that the role was last used.
	LastUsedDate string `pulumi:"lastUsedDate"`
	// The name of the AWS Region in which the role was last used.
	Region string `pulumi:"region"`
}

// GetRoleRoleLastUsedInput is an input type that accepts GetRoleRoleLastUsedArgs and GetRoleRoleLastUsedOutput values.
// You can construct a concrete instance of `GetRoleRoleLastUsedInput` via:
//
//	GetRoleRoleLastUsedArgs{...}
type GetRoleRoleLastUsedInput interface {
	pulumi.Input

	ToGetRoleRoleLastUsedOutput() GetRoleRoleLastUsedOutput
	ToGetRoleRoleLastUsedOutputWithContext(context.Context) GetRoleRoleLastUsedOutput
}

type GetRoleRoleLastUsedArgs struct {
	// The date and time, in RFC 3339 format, that the role was last used.
	LastUsedDate pulumi.StringInput `pulumi:"lastUsedDate"`
	// The name of the AWS Region in which the role was last used.
	Region pulumi.StringInput `pulumi:"region"`
}

func (GetRoleRoleLastUsedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoleRoleLastUsed)(nil)).Elem()
}

func (i GetRoleRoleLastUsedArgs) ToGetRoleRoleLastUsedOutput() GetRoleRoleLastUsedOutput {
	return i.ToGetRoleRoleLastUsedOutputWithContext(context.Background())
}

func (i GetRoleRoleLastUsedArgs) ToGetRoleRoleLastUsedOutputWithContext(ctx context.Context) GetRoleRoleLastUsedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoleRoleLastUsedOutput)
}

// GetRoleRoleLastUsedArrayInput is an input type that accepts GetRoleRoleLastUsedArray and GetRoleRoleLastUsedArrayOutput values.
// You can construct a concrete instance of `GetRoleRoleLastUsedArrayInput` via:
//
//	GetRoleRoleLastUsedArray{ GetRoleRoleLastUsedArgs{...} }
type GetRoleRoleLastUsedArrayInput interface {
	pulumi.Input

	ToGetRoleRoleLastUsedArrayOutput() GetRoleRoleLastUsedArrayOutput
	ToGetRoleRoleLastUsedArrayOutputWithContext(context.Context) GetRoleRoleLastUsedArrayOutput
}

type GetRoleRoleLastUsedArray []GetRoleRoleLastUsedInput

func (GetRoleRoleLastUsedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoleRoleLastUsed)(nil)).Elem()
}

func (i GetRoleRoleLastUsedArray) ToGetRoleRoleLastUsedArrayOutput() GetRoleRoleLastUsedArrayOutput {
	return i.ToGetRoleRoleLastUsedArrayOutputWithContext(context.Background())
}

func (i GetRoleRoleLastUsedArray) ToGetRoleRoleLastUsedArrayOutputWithContext(ctx context.Context) GetRoleRoleLastUsedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoleRoleLastUsedArrayOutput)
}

type GetRoleRoleLastUsedOutput struct{ *pulumi.OutputState }

func (GetRoleRoleLastUsedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoleRoleLastUsed)(nil)).Elem()
}

func (o GetRoleRoleLastUsedOutput) ToGetRoleRoleLastUsedOutput() GetRoleRoleLastUsedOutput {
	return o
}

func (o GetRoleRoleLastUsedOutput) ToGetRoleRoleLastUsedOutputWithContext(ctx context.Context) GetRoleRoleLastUsedOutput {
	return o
}

// The date and time, in RFC 3339 format, that the role was last used.
func (o GetRoleRoleLastUsedOutput) LastUsedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoleRoleLastUsed) string { return v.LastUsedDate }).(pulumi.StringOutput)
}

// The name of the AWS Region in which the role was last used.
func (o GetRoleRoleLastUsedOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoleRoleLastUsed) string { return v.Region }).(pulumi.StringOutput)
}

type GetRoleRoleLastUsedArrayOutput struct{ *pulumi.OutputState }

func (GetRoleRoleLastUsedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoleRoleLastUsed)(nil)).Elem()
}

func (o GetRoleRoleLastUsedArrayOutput) ToGetRoleRoleLastUsedArrayOutput() GetRoleRoleLastUsedArrayOutput {
	return o
}

func (o GetRoleRoleLastUsedArrayOutput) ToGetRoleRoleLastUsedArrayOutputWithContext(ctx context.Context) GetRoleRoleLastUsedArrayOutput {
	return o
}

func (o GetRoleRoleLastUsedArrayOutput) Index(i pulumi.IntInput) GetRoleRoleLastUsedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRoleRoleLastUsed {
		return vs[0].([]GetRoleRoleLastUsed)[vs[1].(int)]
	}).(GetRoleRoleLastUsedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleInlinePolicyInput)(nil)).Elem(), RoleInlinePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleInlinePolicyArrayInput)(nil)).Elem(), RoleInlinePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccessKeysAccessKeyInput)(nil)).Elem(), GetAccessKeysAccessKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccessKeysAccessKeyArrayInput)(nil)).Elem(), GetAccessKeysAccessKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupUserInput)(nil)).Elem(), GetGroupUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupUserArrayInput)(nil)).Elem(), GetGroupUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentStatementInput)(nil)).Elem(), GetPolicyDocumentStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentStatementArrayInput)(nil)).Elem(), GetPolicyDocumentStatementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentStatementConditionInput)(nil)).Elem(), GetPolicyDocumentStatementConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentStatementConditionArrayInput)(nil)).Elem(), GetPolicyDocumentStatementConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentStatementNotPrincipalInput)(nil)).Elem(), GetPolicyDocumentStatementNotPrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentStatementNotPrincipalArrayInput)(nil)).Elem(), GetPolicyDocumentStatementNotPrincipalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentStatementPrincipalInput)(nil)).Elem(), GetPolicyDocumentStatementPrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentStatementPrincipalArrayInput)(nil)).Elem(), GetPolicyDocumentStatementPrincipalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrincipalPolicySimulationContextInput)(nil)).Elem(), GetPrincipalPolicySimulationContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrincipalPolicySimulationContextArrayInput)(nil)).Elem(), GetPrincipalPolicySimulationContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrincipalPolicySimulationResultInput)(nil)).Elem(), GetPrincipalPolicySimulationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrincipalPolicySimulationResultArrayInput)(nil)).Elem(), GetPrincipalPolicySimulationResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrincipalPolicySimulationResultMatchedStatementInput)(nil)).Elem(), GetPrincipalPolicySimulationResultMatchedStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrincipalPolicySimulationResultMatchedStatementArrayInput)(nil)).Elem(), GetPrincipalPolicySimulationResultMatchedStatementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoleRoleLastUsedInput)(nil)).Elem(), GetRoleRoleLastUsedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoleRoleLastUsedArrayInput)(nil)).Elem(), GetRoleRoleLastUsedArray{})
	pulumi.RegisterOutputType(RoleInlinePolicyOutput{})
	pulumi.RegisterOutputType(RoleInlinePolicyArrayOutput{})
	pulumi.RegisterOutputType(GetAccessKeysAccessKeyOutput{})
	pulumi.RegisterOutputType(GetAccessKeysAccessKeyArrayOutput{})
	pulumi.RegisterOutputType(GetGroupUserOutput{})
	pulumi.RegisterOutputType(GetGroupUserArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementConditionOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementConditionArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementNotPrincipalOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementNotPrincipalArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementPrincipalOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentStatementPrincipalArrayOutput{})
	pulumi.RegisterOutputType(GetPrincipalPolicySimulationContextOutput{})
	pulumi.RegisterOutputType(GetPrincipalPolicySimulationContextArrayOutput{})
	pulumi.RegisterOutputType(GetPrincipalPolicySimulationResultOutput{})
	pulumi.RegisterOutputType(GetPrincipalPolicySimulationResultArrayOutput{})
	pulumi.RegisterOutputType(GetPrincipalPolicySimulationResultMatchedStatementOutput{})
	pulumi.RegisterOutputType(GetPrincipalPolicySimulationResultMatchedStatementArrayOutput{})
	pulumi.RegisterOutputType(GetRoleRoleLastUsedOutput{})
	pulumi.RegisterOutputType(GetRoleRoleLastUsedArrayOutput{})
}
