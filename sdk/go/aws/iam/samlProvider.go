// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an IAM SAML provider.
type SamlProvider struct {
	s *pulumi.ResourceState
}

// NewSamlProvider registers a new resource with the given unique name, arguments, and options.
func NewSamlProvider(ctx *pulumi.Context,
	name string, args *SamlProviderArgs, opts ...pulumi.ResourceOpt) (*SamlProvider, error) {
	if args == nil || args.SamlMetadataDocument == nil {
		return nil, errors.New("missing required argument 'SamlMetadataDocument'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["samlMetadataDocument"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["samlMetadataDocument"] = args.SamlMetadataDocument
	}
	inputs["arn"] = nil
	inputs["validUntil"] = nil
	s, err := ctx.RegisterResource("aws:iam/samlProvider:SamlProvider", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SamlProvider{s: s}, nil
}

// GetSamlProvider gets an existing SamlProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlProvider(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SamlProviderState, opts ...pulumi.ResourceOpt) (*SamlProvider, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["name"] = state.Name
		inputs["samlMetadataDocument"] = state.SamlMetadataDocument
		inputs["validUntil"] = state.ValidUntil
	}
	s, err := ctx.ReadResource("aws:iam/samlProvider:SamlProvider", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SamlProvider{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SamlProvider) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SamlProvider) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ARN assigned by AWS for this provider.
func (r *SamlProvider) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The name of the provider to create.
func (r *SamlProvider) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// An XML document generated by an identity provider that supports SAML 2.0.
func (r *SamlProvider) SamlMetadataDocument() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["samlMetadataDocument"])
}

// The expiration date and time for the SAML provider in RFC1123 format, e.g. `Mon, 02 Jan 2006 15:04:05 MST`.
func (r *SamlProvider) ValidUntil() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["validUntil"])
}

// Input properties used for looking up and filtering SamlProvider resources.
type SamlProviderState struct {
	// The ARN assigned by AWS for this provider.
	Arn interface{}
	// The name of the provider to create.
	Name interface{}
	// An XML document generated by an identity provider that supports SAML 2.0.
	SamlMetadataDocument interface{}
	// The expiration date and time for the SAML provider in RFC1123 format, e.g. `Mon, 02 Jan 2006 15:04:05 MST`.
	ValidUntil interface{}
}

// The set of arguments for constructing a SamlProvider resource.
type SamlProviderArgs struct {
	// The name of the provider to create.
	Name interface{}
	// An XML document generated by an identity provider that supports SAML 2.0.
	SamlMetadataDocument interface{}
}
