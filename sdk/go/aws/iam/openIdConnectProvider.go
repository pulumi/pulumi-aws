// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OpenIdConnectProvider struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput      `pulumi:"arn"`
	ClientIdLists   pulumi.StringArrayOutput `pulumi:"clientIdLists"`
	Tags            pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput   `pulumi:"tagsAll"`
	ThumbprintLists pulumi.StringArrayOutput `pulumi:"thumbprintLists"`
	Url             pulumi.StringOutput      `pulumi:"url"`
}

// NewOpenIdConnectProvider registers a new resource with the given unique name, arguments, and options.
func NewOpenIdConnectProvider(ctx *pulumi.Context,
	name string, args *OpenIdConnectProviderArgs, opts ...pulumi.ResourceOption) (*OpenIdConnectProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientIdLists == nil {
		return nil, errors.New("invalid value for required argument 'ClientIdLists'")
	}
	if args.ThumbprintLists == nil {
		return nil, errors.New("invalid value for required argument 'ThumbprintLists'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource OpenIdConnectProvider
	err := ctx.RegisterResource("aws:iam/openIdConnectProvider:OpenIdConnectProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenIdConnectProvider gets an existing OpenIdConnectProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenIdConnectProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenIdConnectProviderState, opts ...pulumi.ResourceOption) (*OpenIdConnectProvider, error) {
	var resource OpenIdConnectProvider
	err := ctx.ReadResource("aws:iam/openIdConnectProvider:OpenIdConnectProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenIdConnectProvider resources.
type openIdConnectProviderState struct {
	Arn             *string           `pulumi:"arn"`
	ClientIdLists   []string          `pulumi:"clientIdLists"`
	Tags            map[string]string `pulumi:"tags"`
	TagsAll         map[string]string `pulumi:"tagsAll"`
	ThumbprintLists []string          `pulumi:"thumbprintLists"`
	Url             *string           `pulumi:"url"`
}

type OpenIdConnectProviderState struct {
	Arn             pulumi.StringPtrInput
	ClientIdLists   pulumi.StringArrayInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
	ThumbprintLists pulumi.StringArrayInput
	Url             pulumi.StringPtrInput
}

func (OpenIdConnectProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*openIdConnectProviderState)(nil)).Elem()
}

type openIdConnectProviderArgs struct {
	ClientIdLists   []string          `pulumi:"clientIdLists"`
	Tags            map[string]string `pulumi:"tags"`
	ThumbprintLists []string          `pulumi:"thumbprintLists"`
	Url             string            `pulumi:"url"`
}

// The set of arguments for constructing a OpenIdConnectProvider resource.
type OpenIdConnectProviderArgs struct {
	ClientIdLists   pulumi.StringArrayInput
	Tags            pulumi.StringMapInput
	ThumbprintLists pulumi.StringArrayInput
	Url             pulumi.StringInput
}

func (OpenIdConnectProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openIdConnectProviderArgs)(nil)).Elem()
}

type OpenIdConnectProviderInput interface {
	pulumi.Input

	ToOpenIdConnectProviderOutput() OpenIdConnectProviderOutput
	ToOpenIdConnectProviderOutputWithContext(ctx context.Context) OpenIdConnectProviderOutput
}

func (*OpenIdConnectProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectProvider)(nil)).Elem()
}

func (i *OpenIdConnectProvider) ToOpenIdConnectProviderOutput() OpenIdConnectProviderOutput {
	return i.ToOpenIdConnectProviderOutputWithContext(context.Background())
}

func (i *OpenIdConnectProvider) ToOpenIdConnectProviderOutputWithContext(ctx context.Context) OpenIdConnectProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectProviderOutput)
}

// OpenIdConnectProviderArrayInput is an input type that accepts OpenIdConnectProviderArray and OpenIdConnectProviderArrayOutput values.
// You can construct a concrete instance of `OpenIdConnectProviderArrayInput` via:
//
//	OpenIdConnectProviderArray{ OpenIdConnectProviderArgs{...} }
type OpenIdConnectProviderArrayInput interface {
	pulumi.Input

	ToOpenIdConnectProviderArrayOutput() OpenIdConnectProviderArrayOutput
	ToOpenIdConnectProviderArrayOutputWithContext(context.Context) OpenIdConnectProviderArrayOutput
}

type OpenIdConnectProviderArray []OpenIdConnectProviderInput

func (OpenIdConnectProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenIdConnectProvider)(nil)).Elem()
}

func (i OpenIdConnectProviderArray) ToOpenIdConnectProviderArrayOutput() OpenIdConnectProviderArrayOutput {
	return i.ToOpenIdConnectProviderArrayOutputWithContext(context.Background())
}

func (i OpenIdConnectProviderArray) ToOpenIdConnectProviderArrayOutputWithContext(ctx context.Context) OpenIdConnectProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectProviderArrayOutput)
}

// OpenIdConnectProviderMapInput is an input type that accepts OpenIdConnectProviderMap and OpenIdConnectProviderMapOutput values.
// You can construct a concrete instance of `OpenIdConnectProviderMapInput` via:
//
//	OpenIdConnectProviderMap{ "key": OpenIdConnectProviderArgs{...} }
type OpenIdConnectProviderMapInput interface {
	pulumi.Input

	ToOpenIdConnectProviderMapOutput() OpenIdConnectProviderMapOutput
	ToOpenIdConnectProviderMapOutputWithContext(context.Context) OpenIdConnectProviderMapOutput
}

type OpenIdConnectProviderMap map[string]OpenIdConnectProviderInput

func (OpenIdConnectProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenIdConnectProvider)(nil)).Elem()
}

func (i OpenIdConnectProviderMap) ToOpenIdConnectProviderMapOutput() OpenIdConnectProviderMapOutput {
	return i.ToOpenIdConnectProviderMapOutputWithContext(context.Background())
}

func (i OpenIdConnectProviderMap) ToOpenIdConnectProviderMapOutputWithContext(ctx context.Context) OpenIdConnectProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectProviderMapOutput)
}

type OpenIdConnectProviderOutput struct{ *pulumi.OutputState }

func (OpenIdConnectProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectProvider)(nil)).Elem()
}

func (o OpenIdConnectProviderOutput) ToOpenIdConnectProviderOutput() OpenIdConnectProviderOutput {
	return o
}

func (o OpenIdConnectProviderOutput) ToOpenIdConnectProviderOutputWithContext(ctx context.Context) OpenIdConnectProviderOutput {
	return o
}

func (o OpenIdConnectProviderOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenIdConnectProvider) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o OpenIdConnectProviderOutput) ClientIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpenIdConnectProvider) pulumi.StringArrayOutput { return v.ClientIdLists }).(pulumi.StringArrayOutput)
}

func (o OpenIdConnectProviderOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OpenIdConnectProvider) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o OpenIdConnectProviderOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OpenIdConnectProvider) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o OpenIdConnectProviderOutput) ThumbprintLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpenIdConnectProvider) pulumi.StringArrayOutput { return v.ThumbprintLists }).(pulumi.StringArrayOutput)
}

func (o OpenIdConnectProviderOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenIdConnectProvider) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type OpenIdConnectProviderArrayOutput struct{ *pulumi.OutputState }

func (OpenIdConnectProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenIdConnectProvider)(nil)).Elem()
}

func (o OpenIdConnectProviderArrayOutput) ToOpenIdConnectProviderArrayOutput() OpenIdConnectProviderArrayOutput {
	return o
}

func (o OpenIdConnectProviderArrayOutput) ToOpenIdConnectProviderArrayOutputWithContext(ctx context.Context) OpenIdConnectProviderArrayOutput {
	return o
}

func (o OpenIdConnectProviderArrayOutput) Index(i pulumi.IntInput) OpenIdConnectProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenIdConnectProvider {
		return vs[0].([]*OpenIdConnectProvider)[vs[1].(int)]
	}).(OpenIdConnectProviderOutput)
}

type OpenIdConnectProviderMapOutput struct{ *pulumi.OutputState }

func (OpenIdConnectProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenIdConnectProvider)(nil)).Elem()
}

func (o OpenIdConnectProviderMapOutput) ToOpenIdConnectProviderMapOutput() OpenIdConnectProviderMapOutput {
	return o
}

func (o OpenIdConnectProviderMapOutput) ToOpenIdConnectProviderMapOutputWithContext(ctx context.Context) OpenIdConnectProviderMapOutput {
	return o
}

func (o OpenIdConnectProviderMapOutput) MapIndex(k pulumi.StringInput) OpenIdConnectProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenIdConnectProvider {
		return vs[0].(map[string]*OpenIdConnectProvider)[vs[1].(string)]
	}).(OpenIdConnectProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenIdConnectProviderInput)(nil)).Elem(), &OpenIdConnectProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenIdConnectProviderArrayInput)(nil)).Elem(), OpenIdConnectProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenIdConnectProviderMapInput)(nil)).Elem(), OpenIdConnectProviderMap{})
	pulumi.RegisterOutputType(OpenIdConnectProviderOutput{})
	pulumi.RegisterOutputType(OpenIdConnectProviderArrayOutput{})
	pulumi.RegisterOutputType(OpenIdConnectProviderMapOutput{})
}
