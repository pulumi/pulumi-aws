// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Attaches a Managed IAM Policy to an IAM role
type RolePolicyAttachment struct {
	s *pulumi.ResourceState
}

// NewRolePolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewRolePolicyAttachment(ctx *pulumi.Context,
	name string, args *RolePolicyAttachmentArgs, opts ...pulumi.ResourceOpt) (*RolePolicyAttachment, error) {
	if args == nil || args.PolicyArn == nil {
		return nil, errors.New("missing required argument 'PolicyArn'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["policyArn"] = nil
		inputs["role"] = nil
	} else {
		inputs["policyArn"] = args.PolicyArn
		inputs["role"] = args.Role
	}
	s, err := ctx.RegisterResource("aws:iam/rolePolicyAttachment:RolePolicyAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RolePolicyAttachment{s: s}, nil
}

// GetRolePolicyAttachment gets an existing RolePolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolePolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RolePolicyAttachmentState, opts ...pulumi.ResourceOpt) (*RolePolicyAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["policyArn"] = state.PolicyArn
		inputs["role"] = state.Role
	}
	s, err := ctx.ReadResource("aws:iam/rolePolicyAttachment:RolePolicyAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RolePolicyAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RolePolicyAttachment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RolePolicyAttachment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ARN of the policy you want to apply
func (r *RolePolicyAttachment) PolicyArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policyArn"])
}

// The role the policy should be applied to
func (r *RolePolicyAttachment) Role() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["role"])
}

// Input properties used for looking up and filtering RolePolicyAttachment resources.
type RolePolicyAttachmentState struct {
	// The ARN of the policy you want to apply
	PolicyArn interface{}
	// The role the policy should be applied to
	Role interface{}
}

// The set of arguments for constructing a RolePolicyAttachment resource.
type RolePolicyAttachmentArgs struct {
	// The ARN of the policy you want to apply
	PolicyArn interface{}
	// The role the policy should be applied to
	Role interface{}
}
