// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Using `pulumi import`, import exclusive management of inline policy assignments using the `role_name`. For example:
//
// ```sh
// $ pulumi import aws:iam/rolePoliciesExclusive:RolePoliciesExclusive example MyRole
// ```
type RolePoliciesExclusive struct {
	pulumi.CustomResourceState

	// A list of inline policy names to be assigned to the role. Policies attached to this role but not configured in this argument will be removed.
	PolicyNames pulumi.StringArrayOutput `pulumi:"policyNames"`
	// IAM role name.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
}

// NewRolePoliciesExclusive registers a new resource with the given unique name, arguments, and options.
func NewRolePoliciesExclusive(ctx *pulumi.Context,
	name string, args *RolePoliciesExclusiveArgs, opts ...pulumi.ResourceOption) (*RolePoliciesExclusive, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyNames == nil {
		return nil, errors.New("invalid value for required argument 'PolicyNames'")
	}
	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RolePoliciesExclusive
	err := ctx.RegisterResource("aws:iam/rolePoliciesExclusive:RolePoliciesExclusive", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRolePoliciesExclusive gets an existing RolePoliciesExclusive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolePoliciesExclusive(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolePoliciesExclusiveState, opts ...pulumi.ResourceOption) (*RolePoliciesExclusive, error) {
	var resource RolePoliciesExclusive
	err := ctx.ReadResource("aws:iam/rolePoliciesExclusive:RolePoliciesExclusive", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RolePoliciesExclusive resources.
type rolePoliciesExclusiveState struct {
	// A list of inline policy names to be assigned to the role. Policies attached to this role but not configured in this argument will be removed.
	PolicyNames []string `pulumi:"policyNames"`
	// IAM role name.
	RoleName *string `pulumi:"roleName"`
}

type RolePoliciesExclusiveState struct {
	// A list of inline policy names to be assigned to the role. Policies attached to this role but not configured in this argument will be removed.
	PolicyNames pulumi.StringArrayInput
	// IAM role name.
	RoleName pulumi.StringPtrInput
}

func (RolePoliciesExclusiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePoliciesExclusiveState)(nil)).Elem()
}

type rolePoliciesExclusiveArgs struct {
	// A list of inline policy names to be assigned to the role. Policies attached to this role but not configured in this argument will be removed.
	PolicyNames []string `pulumi:"policyNames"`
	// IAM role name.
	RoleName string `pulumi:"roleName"`
}

// The set of arguments for constructing a RolePoliciesExclusive resource.
type RolePoliciesExclusiveArgs struct {
	// A list of inline policy names to be assigned to the role. Policies attached to this role but not configured in this argument will be removed.
	PolicyNames pulumi.StringArrayInput
	// IAM role name.
	RoleName pulumi.StringInput
}

func (RolePoliciesExclusiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePoliciesExclusiveArgs)(nil)).Elem()
}

type RolePoliciesExclusiveInput interface {
	pulumi.Input

	ToRolePoliciesExclusiveOutput() RolePoliciesExclusiveOutput
	ToRolePoliciesExclusiveOutputWithContext(ctx context.Context) RolePoliciesExclusiveOutput
}

func (*RolePoliciesExclusive) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePoliciesExclusive)(nil)).Elem()
}

func (i *RolePoliciesExclusive) ToRolePoliciesExclusiveOutput() RolePoliciesExclusiveOutput {
	return i.ToRolePoliciesExclusiveOutputWithContext(context.Background())
}

func (i *RolePoliciesExclusive) ToRolePoliciesExclusiveOutputWithContext(ctx context.Context) RolePoliciesExclusiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePoliciesExclusiveOutput)
}

// RolePoliciesExclusiveArrayInput is an input type that accepts RolePoliciesExclusiveArray and RolePoliciesExclusiveArrayOutput values.
// You can construct a concrete instance of `RolePoliciesExclusiveArrayInput` via:
//
//	RolePoliciesExclusiveArray{ RolePoliciesExclusiveArgs{...} }
type RolePoliciesExclusiveArrayInput interface {
	pulumi.Input

	ToRolePoliciesExclusiveArrayOutput() RolePoliciesExclusiveArrayOutput
	ToRolePoliciesExclusiveArrayOutputWithContext(context.Context) RolePoliciesExclusiveArrayOutput
}

type RolePoliciesExclusiveArray []RolePoliciesExclusiveInput

func (RolePoliciesExclusiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolePoliciesExclusive)(nil)).Elem()
}

func (i RolePoliciesExclusiveArray) ToRolePoliciesExclusiveArrayOutput() RolePoliciesExclusiveArrayOutput {
	return i.ToRolePoliciesExclusiveArrayOutputWithContext(context.Background())
}

func (i RolePoliciesExclusiveArray) ToRolePoliciesExclusiveArrayOutputWithContext(ctx context.Context) RolePoliciesExclusiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePoliciesExclusiveArrayOutput)
}

// RolePoliciesExclusiveMapInput is an input type that accepts RolePoliciesExclusiveMap and RolePoliciesExclusiveMapOutput values.
// You can construct a concrete instance of `RolePoliciesExclusiveMapInput` via:
//
//	RolePoliciesExclusiveMap{ "key": RolePoliciesExclusiveArgs{...} }
type RolePoliciesExclusiveMapInput interface {
	pulumi.Input

	ToRolePoliciesExclusiveMapOutput() RolePoliciesExclusiveMapOutput
	ToRolePoliciesExclusiveMapOutputWithContext(context.Context) RolePoliciesExclusiveMapOutput
}

type RolePoliciesExclusiveMap map[string]RolePoliciesExclusiveInput

func (RolePoliciesExclusiveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolePoliciesExclusive)(nil)).Elem()
}

func (i RolePoliciesExclusiveMap) ToRolePoliciesExclusiveMapOutput() RolePoliciesExclusiveMapOutput {
	return i.ToRolePoliciesExclusiveMapOutputWithContext(context.Background())
}

func (i RolePoliciesExclusiveMap) ToRolePoliciesExclusiveMapOutputWithContext(ctx context.Context) RolePoliciesExclusiveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePoliciesExclusiveMapOutput)
}

type RolePoliciesExclusiveOutput struct{ *pulumi.OutputState }

func (RolePoliciesExclusiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePoliciesExclusive)(nil)).Elem()
}

func (o RolePoliciesExclusiveOutput) ToRolePoliciesExclusiveOutput() RolePoliciesExclusiveOutput {
	return o
}

func (o RolePoliciesExclusiveOutput) ToRolePoliciesExclusiveOutputWithContext(ctx context.Context) RolePoliciesExclusiveOutput {
	return o
}

// A list of inline policy names to be assigned to the role. Policies attached to this role but not configured in this argument will be removed.
func (o RolePoliciesExclusiveOutput) PolicyNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RolePoliciesExclusive) pulumi.StringArrayOutput { return v.PolicyNames }).(pulumi.StringArrayOutput)
}

// IAM role name.
func (o RolePoliciesExclusiveOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *RolePoliciesExclusive) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

type RolePoliciesExclusiveArrayOutput struct{ *pulumi.OutputState }

func (RolePoliciesExclusiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolePoliciesExclusive)(nil)).Elem()
}

func (o RolePoliciesExclusiveArrayOutput) ToRolePoliciesExclusiveArrayOutput() RolePoliciesExclusiveArrayOutput {
	return o
}

func (o RolePoliciesExclusiveArrayOutput) ToRolePoliciesExclusiveArrayOutputWithContext(ctx context.Context) RolePoliciesExclusiveArrayOutput {
	return o
}

func (o RolePoliciesExclusiveArrayOutput) Index(i pulumi.IntInput) RolePoliciesExclusiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RolePoliciesExclusive {
		return vs[0].([]*RolePoliciesExclusive)[vs[1].(int)]
	}).(RolePoliciesExclusiveOutput)
}

type RolePoliciesExclusiveMapOutput struct{ *pulumi.OutputState }

func (RolePoliciesExclusiveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolePoliciesExclusive)(nil)).Elem()
}

func (o RolePoliciesExclusiveMapOutput) ToRolePoliciesExclusiveMapOutput() RolePoliciesExclusiveMapOutput {
	return o
}

func (o RolePoliciesExclusiveMapOutput) ToRolePoliciesExclusiveMapOutputWithContext(ctx context.Context) RolePoliciesExclusiveMapOutput {
	return o
}

func (o RolePoliciesExclusiveMapOutput) MapIndex(k pulumi.StringInput) RolePoliciesExclusiveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RolePoliciesExclusive {
		return vs[0].(map[string]*RolePoliciesExclusive)[vs[1].(string)]
	}).(RolePoliciesExclusiveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolePoliciesExclusiveInput)(nil)).Elem(), &RolePoliciesExclusive{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePoliciesExclusiveArrayInput)(nil)).Elem(), RolePoliciesExclusiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePoliciesExclusiveMapInput)(nil)).Elem(), RolePoliciesExclusiveMap{})
	pulumi.RegisterOutputType(RolePoliciesExclusiveOutput{})
	pulumi.RegisterOutputType(RolePoliciesExclusiveArrayOutput{})
	pulumi.RegisterOutputType(RolePoliciesExclusiveMapOutput{})
}
