// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServerCertificate struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput    `pulumi:"arn"`
	CertificateBody  pulumi.StringOutput    `pulumi:"certificateBody"`
	CertificateChain pulumi.StringPtrOutput `pulumi:"certificateChain"`
	Expiration       pulumi.StringOutput    `pulumi:"expiration"`
	Name             pulumi.StringOutput    `pulumi:"name"`
	NamePrefix       pulumi.StringPtrOutput `pulumi:"namePrefix"`
	Path             pulumi.StringPtrOutput `pulumi:"path"`
	PrivateKey       pulumi.StringOutput    `pulumi:"privateKey"`
	Tags             pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll          pulumi.StringMapOutput `pulumi:"tagsAll"`
	UploadDate       pulumi.StringOutput    `pulumi:"uploadDate"`
}

// NewServerCertificate registers a new resource with the given unique name, arguments, and options.
func NewServerCertificate(ctx *pulumi.Context,
	name string, args *ServerCertificateArgs, opts ...pulumi.ResourceOption) (*ServerCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateBody == nil {
		return nil, errors.New("invalid value for required argument 'CertificateBody'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	var resource ServerCertificate
	err := ctx.RegisterResource("aws:iam/serverCertificate:ServerCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerCertificate gets an existing ServerCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerCertificateState, opts ...pulumi.ResourceOption) (*ServerCertificate, error) {
	var resource ServerCertificate
	err := ctx.ReadResource("aws:iam/serverCertificate:ServerCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerCertificate resources.
type serverCertificateState struct {
	Arn              *string           `pulumi:"arn"`
	CertificateBody  *string           `pulumi:"certificateBody"`
	CertificateChain *string           `pulumi:"certificateChain"`
	Expiration       *string           `pulumi:"expiration"`
	Name             *string           `pulumi:"name"`
	NamePrefix       *string           `pulumi:"namePrefix"`
	Path             *string           `pulumi:"path"`
	PrivateKey       *string           `pulumi:"privateKey"`
	Tags             map[string]string `pulumi:"tags"`
	TagsAll          map[string]string `pulumi:"tagsAll"`
	UploadDate       *string           `pulumi:"uploadDate"`
}

type ServerCertificateState struct {
	Arn              pulumi.StringPtrInput
	CertificateBody  pulumi.StringPtrInput
	CertificateChain pulumi.StringPtrInput
	Expiration       pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	NamePrefix       pulumi.StringPtrInput
	Path             pulumi.StringPtrInput
	PrivateKey       pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	TagsAll          pulumi.StringMapInput
	UploadDate       pulumi.StringPtrInput
}

func (ServerCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverCertificateState)(nil)).Elem()
}

type serverCertificateArgs struct {
	CertificateBody  string            `pulumi:"certificateBody"`
	CertificateChain *string           `pulumi:"certificateChain"`
	Name             *string           `pulumi:"name"`
	NamePrefix       *string           `pulumi:"namePrefix"`
	Path             *string           `pulumi:"path"`
	PrivateKey       string            `pulumi:"privateKey"`
	Tags             map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ServerCertificate resource.
type ServerCertificateArgs struct {
	CertificateBody  pulumi.StringInput
	CertificateChain pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	NamePrefix       pulumi.StringPtrInput
	Path             pulumi.StringPtrInput
	PrivateKey       pulumi.StringInput
	Tags             pulumi.StringMapInput
}

func (ServerCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverCertificateArgs)(nil)).Elem()
}

type ServerCertificateInput interface {
	pulumi.Input

	ToServerCertificateOutput() ServerCertificateOutput
	ToServerCertificateOutputWithContext(ctx context.Context) ServerCertificateOutput
}

func (*ServerCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerCertificate)(nil)).Elem()
}

func (i *ServerCertificate) ToServerCertificateOutput() ServerCertificateOutput {
	return i.ToServerCertificateOutputWithContext(context.Background())
}

func (i *ServerCertificate) ToServerCertificateOutputWithContext(ctx context.Context) ServerCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateOutput)
}

// ServerCertificateArrayInput is an input type that accepts ServerCertificateArray and ServerCertificateArrayOutput values.
// You can construct a concrete instance of `ServerCertificateArrayInput` via:
//
//	ServerCertificateArray{ ServerCertificateArgs{...} }
type ServerCertificateArrayInput interface {
	pulumi.Input

	ToServerCertificateArrayOutput() ServerCertificateArrayOutput
	ToServerCertificateArrayOutputWithContext(context.Context) ServerCertificateArrayOutput
}

type ServerCertificateArray []ServerCertificateInput

func (ServerCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerCertificate)(nil)).Elem()
}

func (i ServerCertificateArray) ToServerCertificateArrayOutput() ServerCertificateArrayOutput {
	return i.ToServerCertificateArrayOutputWithContext(context.Background())
}

func (i ServerCertificateArray) ToServerCertificateArrayOutputWithContext(ctx context.Context) ServerCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateArrayOutput)
}

// ServerCertificateMapInput is an input type that accepts ServerCertificateMap and ServerCertificateMapOutput values.
// You can construct a concrete instance of `ServerCertificateMapInput` via:
//
//	ServerCertificateMap{ "key": ServerCertificateArgs{...} }
type ServerCertificateMapInput interface {
	pulumi.Input

	ToServerCertificateMapOutput() ServerCertificateMapOutput
	ToServerCertificateMapOutputWithContext(context.Context) ServerCertificateMapOutput
}

type ServerCertificateMap map[string]ServerCertificateInput

func (ServerCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerCertificate)(nil)).Elem()
}

func (i ServerCertificateMap) ToServerCertificateMapOutput() ServerCertificateMapOutput {
	return i.ToServerCertificateMapOutputWithContext(context.Background())
}

func (i ServerCertificateMap) ToServerCertificateMapOutputWithContext(ctx context.Context) ServerCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateMapOutput)
}

type ServerCertificateOutput struct{ *pulumi.OutputState }

func (ServerCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerCertificate)(nil)).Elem()
}

func (o ServerCertificateOutput) ToServerCertificateOutput() ServerCertificateOutput {
	return o
}

func (o ServerCertificateOutput) ToServerCertificateOutputWithContext(ctx context.Context) ServerCertificateOutput {
	return o
}

func (o ServerCertificateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ServerCertificateOutput) CertificateBody() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.CertificateBody }).(pulumi.StringOutput)
}

func (o ServerCertificateOutput) CertificateChain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringPtrOutput { return v.CertificateChain }).(pulumi.StringPtrOutput)
}

func (o ServerCertificateOutput) Expiration() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.Expiration }).(pulumi.StringOutput)
}

func (o ServerCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServerCertificateOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringPtrOutput { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

func (o ServerCertificateOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

func (o ServerCertificateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

func (o ServerCertificateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ServerCertificateOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ServerCertificateOutput) UploadDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.UploadDate }).(pulumi.StringOutput)
}

type ServerCertificateArrayOutput struct{ *pulumi.OutputState }

func (ServerCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerCertificate)(nil)).Elem()
}

func (o ServerCertificateArrayOutput) ToServerCertificateArrayOutput() ServerCertificateArrayOutput {
	return o
}

func (o ServerCertificateArrayOutput) ToServerCertificateArrayOutputWithContext(ctx context.Context) ServerCertificateArrayOutput {
	return o
}

func (o ServerCertificateArrayOutput) Index(i pulumi.IntInput) ServerCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerCertificate {
		return vs[0].([]*ServerCertificate)[vs[1].(int)]
	}).(ServerCertificateOutput)
}

type ServerCertificateMapOutput struct{ *pulumi.OutputState }

func (ServerCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerCertificate)(nil)).Elem()
}

func (o ServerCertificateMapOutput) ToServerCertificateMapOutput() ServerCertificateMapOutput {
	return o
}

func (o ServerCertificateMapOutput) ToServerCertificateMapOutputWithContext(ctx context.Context) ServerCertificateMapOutput {
	return o
}

func (o ServerCertificateMapOutput) MapIndex(k pulumi.StringInput) ServerCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerCertificate {
		return vs[0].(map[string]*ServerCertificate)[vs[1].(string)]
	}).(ServerCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerCertificateInput)(nil)).Elem(), &ServerCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerCertificateArrayInput)(nil)).Elem(), ServerCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerCertificateMapInput)(nil)).Elem(), ServerCertificateMap{})
	pulumi.RegisterOutputType(ServerCertificateOutput{})
	pulumi.RegisterOutputType(ServerCertificateArrayOutput{})
	pulumi.RegisterOutputType(ServerCertificateMapOutput{})
}
