// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// -> **Note:** There is only a single policy allowed per AWS account. An existing policy will be lost when using this resource as an effect of this limitation.
// 
// Manages Password Policy for the AWS Account.
// See more about [Account Password Policy](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html)
// in the official AWS docs.
type AccountPasswordPolicy struct {
	s *pulumi.ResourceState
}

// NewAccountPasswordPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccountPasswordPolicy(ctx *pulumi.Context,
	name string, args *AccountPasswordPolicyArgs, opts ...pulumi.ResourceOpt) (*AccountPasswordPolicy, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowUsersToChangePassword"] = nil
		inputs["hardExpiry"] = nil
		inputs["maxPasswordAge"] = nil
		inputs["minimumPasswordLength"] = nil
		inputs["passwordReusePrevention"] = nil
		inputs["requireLowercaseCharacters"] = nil
		inputs["requireNumbers"] = nil
		inputs["requireSymbols"] = nil
		inputs["requireUppercaseCharacters"] = nil
	} else {
		inputs["allowUsersToChangePassword"] = args.AllowUsersToChangePassword
		inputs["hardExpiry"] = args.HardExpiry
		inputs["maxPasswordAge"] = args.MaxPasswordAge
		inputs["minimumPasswordLength"] = args.MinimumPasswordLength
		inputs["passwordReusePrevention"] = args.PasswordReusePrevention
		inputs["requireLowercaseCharacters"] = args.RequireLowercaseCharacters
		inputs["requireNumbers"] = args.RequireNumbers
		inputs["requireSymbols"] = args.RequireSymbols
		inputs["requireUppercaseCharacters"] = args.RequireUppercaseCharacters
	}
	inputs["expirePasswords"] = nil
	s, err := ctx.RegisterResource("aws:iam/accountPasswordPolicy:AccountPasswordPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountPasswordPolicy{s: s}, nil
}

// GetAccountPasswordPolicy gets an existing AccountPasswordPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountPasswordPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccountPasswordPolicyState, opts ...pulumi.ResourceOpt) (*AccountPasswordPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowUsersToChangePassword"] = state.AllowUsersToChangePassword
		inputs["expirePasswords"] = state.ExpirePasswords
		inputs["hardExpiry"] = state.HardExpiry
		inputs["maxPasswordAge"] = state.MaxPasswordAge
		inputs["minimumPasswordLength"] = state.MinimumPasswordLength
		inputs["passwordReusePrevention"] = state.PasswordReusePrevention
		inputs["requireLowercaseCharacters"] = state.RequireLowercaseCharacters
		inputs["requireNumbers"] = state.RequireNumbers
		inputs["requireSymbols"] = state.RequireSymbols
		inputs["requireUppercaseCharacters"] = state.RequireUppercaseCharacters
	}
	s, err := ctx.ReadResource("aws:iam/accountPasswordPolicy:AccountPasswordPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountPasswordPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccountPasswordPolicy) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccountPasswordPolicy) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Whether to allow users to change their own password
func (r *AccountPasswordPolicy) AllowUsersToChangePassword() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowUsersToChangePassword"])
}

// Indicates whether passwords in the account expire.
// Returns `true` if `max_password_age` contains a value greater than `0`.
// Returns `false` if it is `0` or _not present_.
func (r *AccountPasswordPolicy) ExpirePasswords() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["expirePasswords"])
}

// Whether users are prevented from setting a new password after their password has expired
// (i.e. require administrator reset)
func (r *AccountPasswordPolicy) HardExpiry() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["hardExpiry"])
}

// The number of days that an user password is valid.
func (r *AccountPasswordPolicy) MaxPasswordAge() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxPasswordAge"])
}

// Minimum length to require for user passwords.
func (r *AccountPasswordPolicy) MinimumPasswordLength() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minimumPasswordLength"])
}

// The number of previous passwords that users are prevented from reusing.
func (r *AccountPasswordPolicy) PasswordReusePrevention() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["passwordReusePrevention"])
}

// Whether to require lowercase characters for user passwords.
func (r *AccountPasswordPolicy) RequireLowercaseCharacters() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["requireLowercaseCharacters"])
}

// Whether to require numbers for user passwords.
func (r *AccountPasswordPolicy) RequireNumbers() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["requireNumbers"])
}

// Whether to require symbols for user passwords.
func (r *AccountPasswordPolicy) RequireSymbols() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["requireSymbols"])
}

// Whether to require uppercase characters for user passwords.
func (r *AccountPasswordPolicy) RequireUppercaseCharacters() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["requireUppercaseCharacters"])
}

// Input properties used for looking up and filtering AccountPasswordPolicy resources.
type AccountPasswordPolicyState struct {
	// Whether to allow users to change their own password
	AllowUsersToChangePassword interface{}
	// Indicates whether passwords in the account expire.
	// Returns `true` if `max_password_age` contains a value greater than `0`.
	// Returns `false` if it is `0` or _not present_.
	ExpirePasswords interface{}
	// Whether users are prevented from setting a new password after their password has expired
	// (i.e. require administrator reset)
	HardExpiry interface{}
	// The number of days that an user password is valid.
	MaxPasswordAge interface{}
	// Minimum length to require for user passwords.
	MinimumPasswordLength interface{}
	// The number of previous passwords that users are prevented from reusing.
	PasswordReusePrevention interface{}
	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters interface{}
	// Whether to require numbers for user passwords.
	RequireNumbers interface{}
	// Whether to require symbols for user passwords.
	RequireSymbols interface{}
	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters interface{}
}

// The set of arguments for constructing a AccountPasswordPolicy resource.
type AccountPasswordPolicyArgs struct {
	// Whether to allow users to change their own password
	AllowUsersToChangePassword interface{}
	// Whether users are prevented from setting a new password after their password has expired
	// (i.e. require administrator reset)
	HardExpiry interface{}
	// The number of days that an user password is valid.
	MaxPasswordAge interface{}
	// Minimum length to require for user passwords.
	MinimumPasswordLength interface{}
	// The number of previous passwords that users are prevented from reusing.
	PasswordReusePrevention interface{}
	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters interface{}
	// Whether to require numbers for user passwords.
	RequireNumbers interface{}
	// Whether to require symbols for user passwords.
	RequireSymbols interface{}
	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters interface{}
}
