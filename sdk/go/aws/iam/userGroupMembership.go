// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource for adding an [IAM User][2] to [IAM Groups][1]. This
// resource can be used multiple times with the same user for non-overlapping
// groups.
// 
// To exclusively manage the users in a group, see the
// [`aws_iam_group_membership` resource][3].
type UserGroupMembership struct {
	s *pulumi.ResourceState
}

// NewUserGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewUserGroupMembership(ctx *pulumi.Context,
	name string, args *UserGroupMembershipArgs, opts ...pulumi.ResourceOpt) (*UserGroupMembership, error) {
	if args == nil || args.Groups == nil {
		return nil, errors.New("missing required argument 'Groups'")
	}
	if args == nil || args.User == nil {
		return nil, errors.New("missing required argument 'User'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["groups"] = nil
		inputs["user"] = nil
	} else {
		inputs["groups"] = args.Groups
		inputs["user"] = args.User
	}
	s, err := ctx.RegisterResource("aws:iam/userGroupMembership:UserGroupMembership", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserGroupMembership{s: s}, nil
}

// GetUserGroupMembership gets an existing UserGroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserGroupMembershipState, opts ...pulumi.ResourceOpt) (*UserGroupMembership, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["groups"] = state.Groups
		inputs["user"] = state.User
	}
	s, err := ctx.ReadResource("aws:iam/userGroupMembership:UserGroupMembership", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserGroupMembership{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *UserGroupMembership) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *UserGroupMembership) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A list of [IAM Groups][1] to add the user to
func (r *UserGroupMembership) Groups() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["groups"])
}

// The name of the [IAM User][2] to add to groups
func (r *UserGroupMembership) User() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["user"])
}

// Input properties used for looking up and filtering UserGroupMembership resources.
type UserGroupMembershipState struct {
	// A list of [IAM Groups][1] to add the user to
	Groups interface{}
	// The name of the [IAM User][2] to add to groups
	User interface{}
}

// The set of arguments for constructing a UserGroupMembership resource.
type UserGroupMembershipArgs struct {
	// A list of [IAM Groups][1] to add the user to
	Groups interface{}
	// The name of the [IAM User][2] to add to groups
	User interface{}
}
