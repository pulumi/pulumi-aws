// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an IAM Service Specific Credential.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := iam.NewUser(ctx, "example", &iam.UserArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewServiceSpecificCredential(ctx, "example", &iam.ServiceSpecificCredentialArgs{
//				ServiceName: pulumi.String("codecommit.amazonaws.com"),
//				UserName:    example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Bedrock API Key with Expiration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := iam.NewUser(ctx, "example", &iam.UserArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewServiceSpecificCredential(ctx, "bedrock", &iam.ServiceSpecificCredentialArgs{
//				ServiceName:       pulumi.String("bedrock.amazonaws.com"),
//				UserName:          example.Name,
//				CredentialAgeDays: pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import IAM Service Specific Credentials using the `service_name:user_name:service_specific_credential_id`. For example:
//
// ```sh
// $ pulumi import aws:iam/serviceSpecificCredential:ServiceSpecificCredential default `codecommit.amazonaws.com:example:some-id`
// ```
type ServiceSpecificCredential struct {
	pulumi.CustomResourceState

	// The date and time, in RFC3339 format, when the service-specific credential was created.
	CreateDate pulumi.StringOutput `pulumi:"createDate"`
	// The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
	CredentialAgeDays pulumi.IntPtrOutput `pulumi:"credentialAgeDays"`
	// The date and time, in RFC3339 format, when the service specific credential expires. This field is only present for Bedrock API keys that were created with an expiration period.
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// For Bedrock API keys, this is the public portion of the credential that includes the IAM user name and a suffix containing version and creation information.
	ServiceCredentialAlias pulumi.StringOutput `pulumi:"serviceCredentialAlias"`
	// For Bedrock API keys, this is the secret portion of the credential that should be used to authenticate API calls. This value is only available when the credential is created.
	ServiceCredentialSecret pulumi.StringOutput `pulumi:"serviceCredentialSecret"`
	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The generated password for the service-specific credential. This value is only available when the credential is created.
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// The unique identifier for the service-specific credential.
	ServiceSpecificCredentialId pulumi.StringOutput `pulumi:"serviceSpecificCredentialId"`
	// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
	ServiceUserName pulumi.StringOutput `pulumi:"serviceUserName"`
	// The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewServiceSpecificCredential registers a new resource with the given unique name, arguments, and options.
func NewServiceSpecificCredential(ctx *pulumi.Context,
	name string, args *ServiceSpecificCredentialArgs, opts ...pulumi.ResourceOption) (*ServiceSpecificCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"serviceCredentialSecret",
		"servicePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceSpecificCredential
	err := ctx.RegisterResource("aws:iam/serviceSpecificCredential:ServiceSpecificCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceSpecificCredential gets an existing ServiceSpecificCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceSpecificCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceSpecificCredentialState, opts ...pulumi.ResourceOption) (*ServiceSpecificCredential, error) {
	var resource ServiceSpecificCredential
	err := ctx.ReadResource("aws:iam/serviceSpecificCredential:ServiceSpecificCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceSpecificCredential resources.
type serviceSpecificCredentialState struct {
	// The date and time, in RFC3339 format, when the service-specific credential was created.
	CreateDate *string `pulumi:"createDate"`
	// The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
	CredentialAgeDays *int `pulumi:"credentialAgeDays"`
	// The date and time, in RFC3339 format, when the service specific credential expires. This field is only present for Bedrock API keys that were created with an expiration period.
	ExpirationDate *string `pulumi:"expirationDate"`
	// For Bedrock API keys, this is the public portion of the credential that includes the IAM user name and a suffix containing version and creation information.
	ServiceCredentialAlias *string `pulumi:"serviceCredentialAlias"`
	// For Bedrock API keys, this is the secret portion of the credential that should be used to authenticate API calls. This value is only available when the credential is created.
	ServiceCredentialSecret *string `pulumi:"serviceCredentialSecret"`
	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
	ServiceName *string `pulumi:"serviceName"`
	// The generated password for the service-specific credential. This value is only available when the credential is created.
	ServicePassword *string `pulumi:"servicePassword"`
	// The unique identifier for the service-specific credential.
	ServiceSpecificCredentialId *string `pulumi:"serviceSpecificCredentialId"`
	// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
	ServiceUserName *string `pulumi:"serviceUserName"`
	// The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
	Status *string `pulumi:"status"`
	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	UserName *string `pulumi:"userName"`
}

type ServiceSpecificCredentialState struct {
	// The date and time, in RFC3339 format, when the service-specific credential was created.
	CreateDate pulumi.StringPtrInput
	// The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
	CredentialAgeDays pulumi.IntPtrInput
	// The date and time, in RFC3339 format, when the service specific credential expires. This field is only present for Bedrock API keys that were created with an expiration period.
	ExpirationDate pulumi.StringPtrInput
	// For Bedrock API keys, this is the public portion of the credential that includes the IAM user name and a suffix containing version and creation information.
	ServiceCredentialAlias pulumi.StringPtrInput
	// For Bedrock API keys, this is the secret portion of the credential that should be used to authenticate API calls. This value is only available when the credential is created.
	ServiceCredentialSecret pulumi.StringPtrInput
	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
	ServiceName pulumi.StringPtrInput
	// The generated password for the service-specific credential. This value is only available when the credential is created.
	ServicePassword pulumi.StringPtrInput
	// The unique identifier for the service-specific credential.
	ServiceSpecificCredentialId pulumi.StringPtrInput
	// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
	ServiceUserName pulumi.StringPtrInput
	// The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
	Status pulumi.StringPtrInput
	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	UserName pulumi.StringPtrInput
}

func (ServiceSpecificCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceSpecificCredentialState)(nil)).Elem()
}

type serviceSpecificCredentialArgs struct {
	// The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
	CredentialAgeDays *int `pulumi:"credentialAgeDays"`
	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
	ServiceName string `pulumi:"serviceName"`
	// The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
	Status *string `pulumi:"status"`
	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a ServiceSpecificCredential resource.
type ServiceSpecificCredentialArgs struct {
	// The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
	CredentialAgeDays pulumi.IntPtrInput
	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
	ServiceName pulumi.StringInput
	// The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
	Status pulumi.StringPtrInput
	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	UserName pulumi.StringInput
}

func (ServiceSpecificCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceSpecificCredentialArgs)(nil)).Elem()
}

type ServiceSpecificCredentialInput interface {
	pulumi.Input

	ToServiceSpecificCredentialOutput() ServiceSpecificCredentialOutput
	ToServiceSpecificCredentialOutputWithContext(ctx context.Context) ServiceSpecificCredentialOutput
}

func (*ServiceSpecificCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSpecificCredential)(nil)).Elem()
}

func (i *ServiceSpecificCredential) ToServiceSpecificCredentialOutput() ServiceSpecificCredentialOutput {
	return i.ToServiceSpecificCredentialOutputWithContext(context.Background())
}

func (i *ServiceSpecificCredential) ToServiceSpecificCredentialOutputWithContext(ctx context.Context) ServiceSpecificCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecificCredentialOutput)
}

// ServiceSpecificCredentialArrayInput is an input type that accepts ServiceSpecificCredentialArray and ServiceSpecificCredentialArrayOutput values.
// You can construct a concrete instance of `ServiceSpecificCredentialArrayInput` via:
//
//	ServiceSpecificCredentialArray{ ServiceSpecificCredentialArgs{...} }
type ServiceSpecificCredentialArrayInput interface {
	pulumi.Input

	ToServiceSpecificCredentialArrayOutput() ServiceSpecificCredentialArrayOutput
	ToServiceSpecificCredentialArrayOutputWithContext(context.Context) ServiceSpecificCredentialArrayOutput
}

type ServiceSpecificCredentialArray []ServiceSpecificCredentialInput

func (ServiceSpecificCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceSpecificCredential)(nil)).Elem()
}

func (i ServiceSpecificCredentialArray) ToServiceSpecificCredentialArrayOutput() ServiceSpecificCredentialArrayOutput {
	return i.ToServiceSpecificCredentialArrayOutputWithContext(context.Background())
}

func (i ServiceSpecificCredentialArray) ToServiceSpecificCredentialArrayOutputWithContext(ctx context.Context) ServiceSpecificCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecificCredentialArrayOutput)
}

// ServiceSpecificCredentialMapInput is an input type that accepts ServiceSpecificCredentialMap and ServiceSpecificCredentialMapOutput values.
// You can construct a concrete instance of `ServiceSpecificCredentialMapInput` via:
//
//	ServiceSpecificCredentialMap{ "key": ServiceSpecificCredentialArgs{...} }
type ServiceSpecificCredentialMapInput interface {
	pulumi.Input

	ToServiceSpecificCredentialMapOutput() ServiceSpecificCredentialMapOutput
	ToServiceSpecificCredentialMapOutputWithContext(context.Context) ServiceSpecificCredentialMapOutput
}

type ServiceSpecificCredentialMap map[string]ServiceSpecificCredentialInput

func (ServiceSpecificCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceSpecificCredential)(nil)).Elem()
}

func (i ServiceSpecificCredentialMap) ToServiceSpecificCredentialMapOutput() ServiceSpecificCredentialMapOutput {
	return i.ToServiceSpecificCredentialMapOutputWithContext(context.Background())
}

func (i ServiceSpecificCredentialMap) ToServiceSpecificCredentialMapOutputWithContext(ctx context.Context) ServiceSpecificCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecificCredentialMapOutput)
}

type ServiceSpecificCredentialOutput struct{ *pulumi.OutputState }

func (ServiceSpecificCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSpecificCredential)(nil)).Elem()
}

func (o ServiceSpecificCredentialOutput) ToServiceSpecificCredentialOutput() ServiceSpecificCredentialOutput {
	return o
}

func (o ServiceSpecificCredentialOutput) ToServiceSpecificCredentialOutputWithContext(ctx context.Context) ServiceSpecificCredentialOutput {
	return o
}

// The date and time, in RFC3339 format, when the service-specific credential was created.
func (o ServiceSpecificCredentialOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.CreateDate }).(pulumi.StringOutput)
}

// The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
func (o ServiceSpecificCredentialOutput) CredentialAgeDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.IntPtrOutput { return v.CredentialAgeDays }).(pulumi.IntPtrOutput)
}

// The date and time, in RFC3339 format, when the service specific credential expires. This field is only present for Bedrock API keys that were created with an expiration period.
func (o ServiceSpecificCredentialOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.ExpirationDate }).(pulumi.StringOutput)
}

// For Bedrock API keys, this is the public portion of the credential that includes the IAM user name and a suffix containing version and creation information.
func (o ServiceSpecificCredentialOutput) ServiceCredentialAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.ServiceCredentialAlias }).(pulumi.StringOutput)
}

// For Bedrock API keys, this is the secret portion of the credential that should be used to authenticate API calls. This value is only available when the credential is created.
func (o ServiceSpecificCredentialOutput) ServiceCredentialSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.ServiceCredentialSecret }).(pulumi.StringOutput)
}

// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
func (o ServiceSpecificCredentialOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The generated password for the service-specific credential. This value is only available when the credential is created.
func (o ServiceSpecificCredentialOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.ServicePassword }).(pulumi.StringOutput)
}

// The unique identifier for the service-specific credential.
func (o ServiceSpecificCredentialOutput) ServiceSpecificCredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.ServiceSpecificCredentialId }).(pulumi.StringOutput)
}

// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
func (o ServiceSpecificCredentialOutput) ServiceUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.ServiceUserName }).(pulumi.StringOutput)
}

// The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
func (o ServiceSpecificCredentialOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
func (o ServiceSpecificCredentialOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type ServiceSpecificCredentialArrayOutput struct{ *pulumi.OutputState }

func (ServiceSpecificCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceSpecificCredential)(nil)).Elem()
}

func (o ServiceSpecificCredentialArrayOutput) ToServiceSpecificCredentialArrayOutput() ServiceSpecificCredentialArrayOutput {
	return o
}

func (o ServiceSpecificCredentialArrayOutput) ToServiceSpecificCredentialArrayOutputWithContext(ctx context.Context) ServiceSpecificCredentialArrayOutput {
	return o
}

func (o ServiceSpecificCredentialArrayOutput) Index(i pulumi.IntInput) ServiceSpecificCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceSpecificCredential {
		return vs[0].([]*ServiceSpecificCredential)[vs[1].(int)]
	}).(ServiceSpecificCredentialOutput)
}

type ServiceSpecificCredentialMapOutput struct{ *pulumi.OutputState }

func (ServiceSpecificCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceSpecificCredential)(nil)).Elem()
}

func (o ServiceSpecificCredentialMapOutput) ToServiceSpecificCredentialMapOutput() ServiceSpecificCredentialMapOutput {
	return o
}

func (o ServiceSpecificCredentialMapOutput) ToServiceSpecificCredentialMapOutputWithContext(ctx context.Context) ServiceSpecificCredentialMapOutput {
	return o
}

func (o ServiceSpecificCredentialMapOutput) MapIndex(k pulumi.StringInput) ServiceSpecificCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceSpecificCredential {
		return vs[0].(map[string]*ServiceSpecificCredential)[vs[1].(string)]
	}).(ServiceSpecificCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecificCredentialInput)(nil)).Elem(), &ServiceSpecificCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecificCredentialArrayInput)(nil)).Elem(), ServiceSpecificCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecificCredentialMapInput)(nil)).Elem(), ServiceSpecificCredentialMap{})
	pulumi.RegisterOutputType(ServiceSpecificCredentialOutput{})
	pulumi.RegisterOutputType(ServiceSpecificCredentialArrayOutput{})
	pulumi.RegisterOutputType(ServiceSpecificCredentialMapOutput{})
}
