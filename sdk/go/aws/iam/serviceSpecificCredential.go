// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServiceSpecificCredential struct {
	pulumi.CustomResourceState

	ServiceName                 pulumi.StringOutput    `pulumi:"serviceName"`
	ServicePassword             pulumi.StringOutput    `pulumi:"servicePassword"`
	ServiceSpecificCredentialId pulumi.StringOutput    `pulumi:"serviceSpecificCredentialId"`
	ServiceUserName             pulumi.StringOutput    `pulumi:"serviceUserName"`
	Status                      pulumi.StringPtrOutput `pulumi:"status"`
	UserName                    pulumi.StringOutput    `pulumi:"userName"`
}

// NewServiceSpecificCredential registers a new resource with the given unique name, arguments, and options.
func NewServiceSpecificCredential(ctx *pulumi.Context,
	name string, args *ServiceSpecificCredentialArgs, opts ...pulumi.ResourceOption) (*ServiceSpecificCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"servicePassword",
	})
	opts = append(opts, secrets)
	var resource ServiceSpecificCredential
	err := ctx.RegisterResource("aws:iam/serviceSpecificCredential:ServiceSpecificCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceSpecificCredential gets an existing ServiceSpecificCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceSpecificCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceSpecificCredentialState, opts ...pulumi.ResourceOption) (*ServiceSpecificCredential, error) {
	var resource ServiceSpecificCredential
	err := ctx.ReadResource("aws:iam/serviceSpecificCredential:ServiceSpecificCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceSpecificCredential resources.
type serviceSpecificCredentialState struct {
	ServiceName                 *string `pulumi:"serviceName"`
	ServicePassword             *string `pulumi:"servicePassword"`
	ServiceSpecificCredentialId *string `pulumi:"serviceSpecificCredentialId"`
	ServiceUserName             *string `pulumi:"serviceUserName"`
	Status                      *string `pulumi:"status"`
	UserName                    *string `pulumi:"userName"`
}

type ServiceSpecificCredentialState struct {
	ServiceName                 pulumi.StringPtrInput
	ServicePassword             pulumi.StringPtrInput
	ServiceSpecificCredentialId pulumi.StringPtrInput
	ServiceUserName             pulumi.StringPtrInput
	Status                      pulumi.StringPtrInput
	UserName                    pulumi.StringPtrInput
}

func (ServiceSpecificCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceSpecificCredentialState)(nil)).Elem()
}

type serviceSpecificCredentialArgs struct {
	ServiceName string  `pulumi:"serviceName"`
	Status      *string `pulumi:"status"`
	UserName    string  `pulumi:"userName"`
}

// The set of arguments for constructing a ServiceSpecificCredential resource.
type ServiceSpecificCredentialArgs struct {
	ServiceName pulumi.StringInput
	Status      pulumi.StringPtrInput
	UserName    pulumi.StringInput
}

func (ServiceSpecificCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceSpecificCredentialArgs)(nil)).Elem()
}

type ServiceSpecificCredentialInput interface {
	pulumi.Input

	ToServiceSpecificCredentialOutput() ServiceSpecificCredentialOutput
	ToServiceSpecificCredentialOutputWithContext(ctx context.Context) ServiceSpecificCredentialOutput
}

func (*ServiceSpecificCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSpecificCredential)(nil)).Elem()
}

func (i *ServiceSpecificCredential) ToServiceSpecificCredentialOutput() ServiceSpecificCredentialOutput {
	return i.ToServiceSpecificCredentialOutputWithContext(context.Background())
}

func (i *ServiceSpecificCredential) ToServiceSpecificCredentialOutputWithContext(ctx context.Context) ServiceSpecificCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecificCredentialOutput)
}

// ServiceSpecificCredentialArrayInput is an input type that accepts ServiceSpecificCredentialArray and ServiceSpecificCredentialArrayOutput values.
// You can construct a concrete instance of `ServiceSpecificCredentialArrayInput` via:
//
//	ServiceSpecificCredentialArray{ ServiceSpecificCredentialArgs{...} }
type ServiceSpecificCredentialArrayInput interface {
	pulumi.Input

	ToServiceSpecificCredentialArrayOutput() ServiceSpecificCredentialArrayOutput
	ToServiceSpecificCredentialArrayOutputWithContext(context.Context) ServiceSpecificCredentialArrayOutput
}

type ServiceSpecificCredentialArray []ServiceSpecificCredentialInput

func (ServiceSpecificCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceSpecificCredential)(nil)).Elem()
}

func (i ServiceSpecificCredentialArray) ToServiceSpecificCredentialArrayOutput() ServiceSpecificCredentialArrayOutput {
	return i.ToServiceSpecificCredentialArrayOutputWithContext(context.Background())
}

func (i ServiceSpecificCredentialArray) ToServiceSpecificCredentialArrayOutputWithContext(ctx context.Context) ServiceSpecificCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecificCredentialArrayOutput)
}

// ServiceSpecificCredentialMapInput is an input type that accepts ServiceSpecificCredentialMap and ServiceSpecificCredentialMapOutput values.
// You can construct a concrete instance of `ServiceSpecificCredentialMapInput` via:
//
//	ServiceSpecificCredentialMap{ "key": ServiceSpecificCredentialArgs{...} }
type ServiceSpecificCredentialMapInput interface {
	pulumi.Input

	ToServiceSpecificCredentialMapOutput() ServiceSpecificCredentialMapOutput
	ToServiceSpecificCredentialMapOutputWithContext(context.Context) ServiceSpecificCredentialMapOutput
}

type ServiceSpecificCredentialMap map[string]ServiceSpecificCredentialInput

func (ServiceSpecificCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceSpecificCredential)(nil)).Elem()
}

func (i ServiceSpecificCredentialMap) ToServiceSpecificCredentialMapOutput() ServiceSpecificCredentialMapOutput {
	return i.ToServiceSpecificCredentialMapOutputWithContext(context.Background())
}

func (i ServiceSpecificCredentialMap) ToServiceSpecificCredentialMapOutputWithContext(ctx context.Context) ServiceSpecificCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecificCredentialMapOutput)
}

type ServiceSpecificCredentialOutput struct{ *pulumi.OutputState }

func (ServiceSpecificCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSpecificCredential)(nil)).Elem()
}

func (o ServiceSpecificCredentialOutput) ToServiceSpecificCredentialOutput() ServiceSpecificCredentialOutput {
	return o
}

func (o ServiceSpecificCredentialOutput) ToServiceSpecificCredentialOutputWithContext(ctx context.Context) ServiceSpecificCredentialOutput {
	return o
}

func (o ServiceSpecificCredentialOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o ServiceSpecificCredentialOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.ServicePassword }).(pulumi.StringOutput)
}

func (o ServiceSpecificCredentialOutput) ServiceSpecificCredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.ServiceSpecificCredentialId }).(pulumi.StringOutput)
}

func (o ServiceSpecificCredentialOutput) ServiceUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.ServiceUserName }).(pulumi.StringOutput)
}

func (o ServiceSpecificCredentialOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o ServiceSpecificCredentialOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceSpecificCredential) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type ServiceSpecificCredentialArrayOutput struct{ *pulumi.OutputState }

func (ServiceSpecificCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceSpecificCredential)(nil)).Elem()
}

func (o ServiceSpecificCredentialArrayOutput) ToServiceSpecificCredentialArrayOutput() ServiceSpecificCredentialArrayOutput {
	return o
}

func (o ServiceSpecificCredentialArrayOutput) ToServiceSpecificCredentialArrayOutputWithContext(ctx context.Context) ServiceSpecificCredentialArrayOutput {
	return o
}

func (o ServiceSpecificCredentialArrayOutput) Index(i pulumi.IntInput) ServiceSpecificCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceSpecificCredential {
		return vs[0].([]*ServiceSpecificCredential)[vs[1].(int)]
	}).(ServiceSpecificCredentialOutput)
}

type ServiceSpecificCredentialMapOutput struct{ *pulumi.OutputState }

func (ServiceSpecificCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceSpecificCredential)(nil)).Elem()
}

func (o ServiceSpecificCredentialMapOutput) ToServiceSpecificCredentialMapOutput() ServiceSpecificCredentialMapOutput {
	return o
}

func (o ServiceSpecificCredentialMapOutput) ToServiceSpecificCredentialMapOutputWithContext(ctx context.Context) ServiceSpecificCredentialMapOutput {
	return o
}

func (o ServiceSpecificCredentialMapOutput) MapIndex(k pulumi.StringInput) ServiceSpecificCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceSpecificCredential {
		return vs[0].(map[string]*ServiceSpecificCredential)[vs[1].(string)]
	}).(ServiceSpecificCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecificCredentialInput)(nil)).Elem(), &ServiceSpecificCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecificCredentialArrayInput)(nil)).Elem(), ServiceSpecificCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecificCredentialMapInput)(nil)).Elem(), ServiceSpecificCredentialMap{})
	pulumi.RegisterOutputType(ServiceSpecificCredentialOutput{})
	pulumi.RegisterOutputType(ServiceSpecificCredentialArrayOutput{})
	pulumi.RegisterOutputType(ServiceSpecificCredentialMapOutput{})
}
