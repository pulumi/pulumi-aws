// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupPolicy struct {
	pulumi.CustomResourceState

	Group      pulumi.StringOutput    `pulumi:"group"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	NamePrefix pulumi.StringPtrOutput `pulumi:"namePrefix"`
	Policy     pulumi.StringOutput    `pulumi:"policy"`
}

// NewGroupPolicy registers a new resource with the given unique name, arguments, and options.
func NewGroupPolicy(ctx *pulumi.Context,
	name string, args *GroupPolicyArgs, opts ...pulumi.ResourceOption) (*GroupPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	var resource GroupPolicy
	err := ctx.RegisterResource("aws:iam/groupPolicy:GroupPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupPolicy gets an existing GroupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupPolicyState, opts ...pulumi.ResourceOption) (*GroupPolicy, error) {
	var resource GroupPolicy
	err := ctx.ReadResource("aws:iam/groupPolicy:GroupPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupPolicy resources.
type groupPolicyState struct {
	Group      *string     `pulumi:"group"`
	Name       *string     `pulumi:"name"`
	NamePrefix *string     `pulumi:"namePrefix"`
	Policy     interface{} `pulumi:"policy"`
}

type GroupPolicyState struct {
	Group      pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	NamePrefix pulumi.StringPtrInput
	Policy     pulumi.Input
}

func (GroupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyState)(nil)).Elem()
}

type groupPolicyArgs struct {
	Group      string      `pulumi:"group"`
	Name       *string     `pulumi:"name"`
	NamePrefix *string     `pulumi:"namePrefix"`
	Policy     interface{} `pulumi:"policy"`
}

// The set of arguments for constructing a GroupPolicy resource.
type GroupPolicyArgs struct {
	Group      pulumi.StringInput
	Name       pulumi.StringPtrInput
	NamePrefix pulumi.StringPtrInput
	Policy     pulumi.Input
}

func (GroupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyArgs)(nil)).Elem()
}

type GroupPolicyInput interface {
	pulumi.Input

	ToGroupPolicyOutput() GroupPolicyOutput
	ToGroupPolicyOutputWithContext(ctx context.Context) GroupPolicyOutput
}

func (*GroupPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicy)(nil)).Elem()
}

func (i *GroupPolicy) ToGroupPolicyOutput() GroupPolicyOutput {
	return i.ToGroupPolicyOutputWithContext(context.Background())
}

func (i *GroupPolicy) ToGroupPolicyOutputWithContext(ctx context.Context) GroupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyOutput)
}

// GroupPolicyArrayInput is an input type that accepts GroupPolicyArray and GroupPolicyArrayOutput values.
// You can construct a concrete instance of `GroupPolicyArrayInput` via:
//
//	GroupPolicyArray{ GroupPolicyArgs{...} }
type GroupPolicyArrayInput interface {
	pulumi.Input

	ToGroupPolicyArrayOutput() GroupPolicyArrayOutput
	ToGroupPolicyArrayOutputWithContext(context.Context) GroupPolicyArrayOutput
}

type GroupPolicyArray []GroupPolicyInput

func (GroupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPolicy)(nil)).Elem()
}

func (i GroupPolicyArray) ToGroupPolicyArrayOutput() GroupPolicyArrayOutput {
	return i.ToGroupPolicyArrayOutputWithContext(context.Background())
}

func (i GroupPolicyArray) ToGroupPolicyArrayOutputWithContext(ctx context.Context) GroupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyArrayOutput)
}

// GroupPolicyMapInput is an input type that accepts GroupPolicyMap and GroupPolicyMapOutput values.
// You can construct a concrete instance of `GroupPolicyMapInput` via:
//
//	GroupPolicyMap{ "key": GroupPolicyArgs{...} }
type GroupPolicyMapInput interface {
	pulumi.Input

	ToGroupPolicyMapOutput() GroupPolicyMapOutput
	ToGroupPolicyMapOutputWithContext(context.Context) GroupPolicyMapOutput
}

type GroupPolicyMap map[string]GroupPolicyInput

func (GroupPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPolicy)(nil)).Elem()
}

func (i GroupPolicyMap) ToGroupPolicyMapOutput() GroupPolicyMapOutput {
	return i.ToGroupPolicyMapOutputWithContext(context.Background())
}

func (i GroupPolicyMap) ToGroupPolicyMapOutputWithContext(ctx context.Context) GroupPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyMapOutput)
}

type GroupPolicyOutput struct{ *pulumi.OutputState }

func (GroupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicy)(nil)).Elem()
}

func (o GroupPolicyOutput) ToGroupPolicyOutput() GroupPolicyOutput {
	return o
}

func (o GroupPolicyOutput) ToGroupPolicyOutputWithContext(ctx context.Context) GroupPolicyOutput {
	return o
}

func (o GroupPolicyOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicy) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

func (o GroupPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GroupPolicyOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicy) pulumi.StringPtrOutput { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

func (o GroupPolicyOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicy) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

type GroupPolicyArrayOutput struct{ *pulumi.OutputState }

func (GroupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPolicy)(nil)).Elem()
}

func (o GroupPolicyArrayOutput) ToGroupPolicyArrayOutput() GroupPolicyArrayOutput {
	return o
}

func (o GroupPolicyArrayOutput) ToGroupPolicyArrayOutputWithContext(ctx context.Context) GroupPolicyArrayOutput {
	return o
}

func (o GroupPolicyArrayOutput) Index(i pulumi.IntInput) GroupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupPolicy {
		return vs[0].([]*GroupPolicy)[vs[1].(int)]
	}).(GroupPolicyOutput)
}

type GroupPolicyMapOutput struct{ *pulumi.OutputState }

func (GroupPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPolicy)(nil)).Elem()
}

func (o GroupPolicyMapOutput) ToGroupPolicyMapOutput() GroupPolicyMapOutput {
	return o
}

func (o GroupPolicyMapOutput) ToGroupPolicyMapOutputWithContext(ctx context.Context) GroupPolicyMapOutput {
	return o
}

func (o GroupPolicyMapOutput) MapIndex(k pulumi.StringInput) GroupPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupPolicy {
		return vs[0].(map[string]*GroupPolicy)[vs[1].(string)]
	}).(GroupPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyInput)(nil)).Elem(), &GroupPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyArrayInput)(nil)).Elem(), GroupPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyMapInput)(nil)).Elem(), GroupPolicyMap{})
	pulumi.RegisterOutputType(GroupPolicyOutput{})
	pulumi.RegisterOutputType(GroupPolicyArrayOutput{})
	pulumi.RegisterOutputType(GroupPolicyMapOutput{})
}
