// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an [IAM service-linked role](https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html).
type ServiceLinkedRole struct {
	s *pulumi.ResourceState
}

// NewServiceLinkedRole registers a new resource with the given unique name, arguments, and options.
func NewServiceLinkedRole(ctx *pulumi.Context,
	name string, args *ServiceLinkedRoleArgs, opts ...pulumi.ResourceOpt) (*ServiceLinkedRole, error) {
	if args == nil || args.AwsServiceName == nil {
		return nil, errors.New("missing required argument 'AwsServiceName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["awsServiceName"] = nil
		inputs["customSuffix"] = nil
		inputs["description"] = nil
	} else {
		inputs["awsServiceName"] = args.AwsServiceName
		inputs["customSuffix"] = args.CustomSuffix
		inputs["description"] = args.Description
	}
	inputs["arn"] = nil
	inputs["createDate"] = nil
	inputs["name"] = nil
	inputs["path"] = nil
	inputs["uniqueId"] = nil
	s, err := ctx.RegisterResource("aws:iam/serviceLinkedRole:ServiceLinkedRole", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceLinkedRole{s: s}, nil
}

// GetServiceLinkedRole gets an existing ServiceLinkedRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceLinkedRole(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceLinkedRoleState, opts ...pulumi.ResourceOpt) (*ServiceLinkedRole, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["awsServiceName"] = state.AwsServiceName
		inputs["createDate"] = state.CreateDate
		inputs["customSuffix"] = state.CustomSuffix
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["path"] = state.Path
		inputs["uniqueId"] = state.UniqueId
	}
	s, err := ctx.ReadResource("aws:iam/serviceLinkedRole:ServiceLinkedRole", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceLinkedRole{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServiceLinkedRole) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServiceLinkedRole) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The Amazon Resource Name (ARN) specifying the role.
func (r *ServiceLinkedRole) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The AWS service to which this role is attached. You use a string similar to a URL but without the `http://` in front. For example: `elasticbeanstalk.amazonaws.com`. To find the full list of services that support service-linked roles, check [the docs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html).
func (r *ServiceLinkedRole) AwsServiceName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["awsServiceName"])
}

// The creation date of the IAM role.
func (r *ServiceLinkedRole) CreateDate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createDate"])
}

// Additional string appended to the role name. Not all AWS services support custom suffixes.
func (r *ServiceLinkedRole) CustomSuffix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["customSuffix"])
}

// The description of the role.
func (r *ServiceLinkedRole) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The name of the role.
func (r *ServiceLinkedRole) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The path of the role.
func (r *ServiceLinkedRole) Path() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["path"])
}

// The stable and unique string identifying the role.
func (r *ServiceLinkedRole) UniqueId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["uniqueId"])
}

// Input properties used for looking up and filtering ServiceLinkedRole resources.
type ServiceLinkedRoleState struct {
	// The Amazon Resource Name (ARN) specifying the role.
	Arn interface{}
	// The AWS service to which this role is attached. You use a string similar to a URL but without the `http://` in front. For example: `elasticbeanstalk.amazonaws.com`. To find the full list of services that support service-linked roles, check [the docs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html).
	AwsServiceName interface{}
	// The creation date of the IAM role.
	CreateDate interface{}
	// Additional string appended to the role name. Not all AWS services support custom suffixes.
	CustomSuffix interface{}
	// The description of the role.
	Description interface{}
	// The name of the role.
	Name interface{}
	// The path of the role.
	Path interface{}
	// The stable and unique string identifying the role.
	UniqueId interface{}
}

// The set of arguments for constructing a ServiceLinkedRole resource.
type ServiceLinkedRoleArgs struct {
	// The AWS service to which this role is attached. You use a string similar to a URL but without the `http://` in front. For example: `elasticbeanstalk.amazonaws.com`. To find the full list of services that support service-linked roles, check [the docs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html).
	AwsServiceName interface{}
	// Additional string appended to the role name. Not all AWS services support custom suffixes.
	CustomSuffix interface{}
	// The description of the role.
	Description interface{}
}
