// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssoadmin

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS SSO Admin Application Access Scope.
//
// ## Example Usage
//
// ## Import
//
// Using `pulumi import`, import SSO Admin Application Access Scope using the `id`. For example:
//
// ```sh
// $ pulumi import aws:ssoadmin/applicationAccessScope:ApplicationAccessScope example arn:aws:sso::012345678901:application/ssoins-012345678901/apl-012345678901,sso:account:access
// ```
type ApplicationAccessScope struct {
	pulumi.CustomResourceState

	// Specifies the ARN of the application with the access scope with the targets to add or update.
	ApplicationArn pulumi.StringOutput `pulumi:"applicationArn"`
	// Specifies an array list of ARNs that represent the authorized targets for this access scope.
	AuthorizedTargets pulumi.StringArrayOutput `pulumi:"authorizedTargets"`
	// Specifies the name of the access scope to be associated with the specified targets.
	//
	// The following arguments are optional:
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewApplicationAccessScope registers a new resource with the given unique name, arguments, and options.
func NewApplicationAccessScope(ctx *pulumi.Context,
	name string, args *ApplicationAccessScopeArgs, opts ...pulumi.ResourceOption) (*ApplicationAccessScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationArn == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationArn'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationAccessScope
	err := ctx.RegisterResource("aws:ssoadmin/applicationAccessScope:ApplicationAccessScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationAccessScope gets an existing ApplicationAccessScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationAccessScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationAccessScopeState, opts ...pulumi.ResourceOption) (*ApplicationAccessScope, error) {
	var resource ApplicationAccessScope
	err := ctx.ReadResource("aws:ssoadmin/applicationAccessScope:ApplicationAccessScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationAccessScope resources.
type applicationAccessScopeState struct {
	// Specifies the ARN of the application with the access scope with the targets to add or update.
	ApplicationArn *string `pulumi:"applicationArn"`
	// Specifies an array list of ARNs that represent the authorized targets for this access scope.
	AuthorizedTargets []string `pulumi:"authorizedTargets"`
	// Specifies the name of the access scope to be associated with the specified targets.
	//
	// The following arguments are optional:
	Scope *string `pulumi:"scope"`
}

type ApplicationAccessScopeState struct {
	// Specifies the ARN of the application with the access scope with the targets to add or update.
	ApplicationArn pulumi.StringPtrInput
	// Specifies an array list of ARNs that represent the authorized targets for this access scope.
	AuthorizedTargets pulumi.StringArrayInput
	// Specifies the name of the access scope to be associated with the specified targets.
	//
	// The following arguments are optional:
	Scope pulumi.StringPtrInput
}

func (ApplicationAccessScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationAccessScopeState)(nil)).Elem()
}

type applicationAccessScopeArgs struct {
	// Specifies the ARN of the application with the access scope with the targets to add or update.
	ApplicationArn string `pulumi:"applicationArn"`
	// Specifies an array list of ARNs that represent the authorized targets for this access scope.
	AuthorizedTargets []string `pulumi:"authorizedTargets"`
	// Specifies the name of the access scope to be associated with the specified targets.
	//
	// The following arguments are optional:
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a ApplicationAccessScope resource.
type ApplicationAccessScopeArgs struct {
	// Specifies the ARN of the application with the access scope with the targets to add or update.
	ApplicationArn pulumi.StringInput
	// Specifies an array list of ARNs that represent the authorized targets for this access scope.
	AuthorizedTargets pulumi.StringArrayInput
	// Specifies the name of the access scope to be associated with the specified targets.
	//
	// The following arguments are optional:
	Scope pulumi.StringInput
}

func (ApplicationAccessScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationAccessScopeArgs)(nil)).Elem()
}

type ApplicationAccessScopeInput interface {
	pulumi.Input

	ToApplicationAccessScopeOutput() ApplicationAccessScopeOutput
	ToApplicationAccessScopeOutputWithContext(ctx context.Context) ApplicationAccessScopeOutput
}

func (*ApplicationAccessScope) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationAccessScope)(nil)).Elem()
}

func (i *ApplicationAccessScope) ToApplicationAccessScopeOutput() ApplicationAccessScopeOutput {
	return i.ToApplicationAccessScopeOutputWithContext(context.Background())
}

func (i *ApplicationAccessScope) ToApplicationAccessScopeOutputWithContext(ctx context.Context) ApplicationAccessScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAccessScopeOutput)
}

// ApplicationAccessScopeArrayInput is an input type that accepts ApplicationAccessScopeArray and ApplicationAccessScopeArrayOutput values.
// You can construct a concrete instance of `ApplicationAccessScopeArrayInput` via:
//
//	ApplicationAccessScopeArray{ ApplicationAccessScopeArgs{...} }
type ApplicationAccessScopeArrayInput interface {
	pulumi.Input

	ToApplicationAccessScopeArrayOutput() ApplicationAccessScopeArrayOutput
	ToApplicationAccessScopeArrayOutputWithContext(context.Context) ApplicationAccessScopeArrayOutput
}

type ApplicationAccessScopeArray []ApplicationAccessScopeInput

func (ApplicationAccessScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationAccessScope)(nil)).Elem()
}

func (i ApplicationAccessScopeArray) ToApplicationAccessScopeArrayOutput() ApplicationAccessScopeArrayOutput {
	return i.ToApplicationAccessScopeArrayOutputWithContext(context.Background())
}

func (i ApplicationAccessScopeArray) ToApplicationAccessScopeArrayOutputWithContext(ctx context.Context) ApplicationAccessScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAccessScopeArrayOutput)
}

// ApplicationAccessScopeMapInput is an input type that accepts ApplicationAccessScopeMap and ApplicationAccessScopeMapOutput values.
// You can construct a concrete instance of `ApplicationAccessScopeMapInput` via:
//
//	ApplicationAccessScopeMap{ "key": ApplicationAccessScopeArgs{...} }
type ApplicationAccessScopeMapInput interface {
	pulumi.Input

	ToApplicationAccessScopeMapOutput() ApplicationAccessScopeMapOutput
	ToApplicationAccessScopeMapOutputWithContext(context.Context) ApplicationAccessScopeMapOutput
}

type ApplicationAccessScopeMap map[string]ApplicationAccessScopeInput

func (ApplicationAccessScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationAccessScope)(nil)).Elem()
}

func (i ApplicationAccessScopeMap) ToApplicationAccessScopeMapOutput() ApplicationAccessScopeMapOutput {
	return i.ToApplicationAccessScopeMapOutputWithContext(context.Background())
}

func (i ApplicationAccessScopeMap) ToApplicationAccessScopeMapOutputWithContext(ctx context.Context) ApplicationAccessScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAccessScopeMapOutput)
}

type ApplicationAccessScopeOutput struct{ *pulumi.OutputState }

func (ApplicationAccessScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationAccessScope)(nil)).Elem()
}

func (o ApplicationAccessScopeOutput) ToApplicationAccessScopeOutput() ApplicationAccessScopeOutput {
	return o
}

func (o ApplicationAccessScopeOutput) ToApplicationAccessScopeOutputWithContext(ctx context.Context) ApplicationAccessScopeOutput {
	return o
}

// Specifies the ARN of the application with the access scope with the targets to add or update.
func (o ApplicationAccessScopeOutput) ApplicationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAccessScope) pulumi.StringOutput { return v.ApplicationArn }).(pulumi.StringOutput)
}

// Specifies an array list of ARNs that represent the authorized targets for this access scope.
func (o ApplicationAccessScopeOutput) AuthorizedTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationAccessScope) pulumi.StringArrayOutput { return v.AuthorizedTargets }).(pulumi.StringArrayOutput)
}

// Specifies the name of the access scope to be associated with the specified targets.
//
// The following arguments are optional:
func (o ApplicationAccessScopeOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAccessScope) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type ApplicationAccessScopeArrayOutput struct{ *pulumi.OutputState }

func (ApplicationAccessScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationAccessScope)(nil)).Elem()
}

func (o ApplicationAccessScopeArrayOutput) ToApplicationAccessScopeArrayOutput() ApplicationAccessScopeArrayOutput {
	return o
}

func (o ApplicationAccessScopeArrayOutput) ToApplicationAccessScopeArrayOutputWithContext(ctx context.Context) ApplicationAccessScopeArrayOutput {
	return o
}

func (o ApplicationAccessScopeArrayOutput) Index(i pulumi.IntInput) ApplicationAccessScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationAccessScope {
		return vs[0].([]*ApplicationAccessScope)[vs[1].(int)]
	}).(ApplicationAccessScopeOutput)
}

type ApplicationAccessScopeMapOutput struct{ *pulumi.OutputState }

func (ApplicationAccessScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationAccessScope)(nil)).Elem()
}

func (o ApplicationAccessScopeMapOutput) ToApplicationAccessScopeMapOutput() ApplicationAccessScopeMapOutput {
	return o
}

func (o ApplicationAccessScopeMapOutput) ToApplicationAccessScopeMapOutputWithContext(ctx context.Context) ApplicationAccessScopeMapOutput {
	return o
}

func (o ApplicationAccessScopeMapOutput) MapIndex(k pulumi.StringInput) ApplicationAccessScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationAccessScope {
		return vs[0].(map[string]*ApplicationAccessScope)[vs[1].(string)]
	}).(ApplicationAccessScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationAccessScopeInput)(nil)).Elem(), &ApplicationAccessScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationAccessScopeArrayInput)(nil)).Elem(), ApplicationAccessScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationAccessScopeMapInput)(nil)).Elem(), ApplicationAccessScopeMap{})
	pulumi.RegisterOutputType(ApplicationAccessScopeOutput{})
	pulumi.RegisterOutputType(ApplicationAccessScopeArrayOutput{})
	pulumi.RegisterOutputType(ApplicationAccessScopeMapOutput{})
}
