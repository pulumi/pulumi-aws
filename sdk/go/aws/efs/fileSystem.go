// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FileSystem struct {
	pulumi.CustomResourceState

	Arn                          pulumi.StringOutput                  `pulumi:"arn"`
	AvailabilityZoneId           pulumi.StringOutput                  `pulumi:"availabilityZoneId"`
	AvailabilityZoneName         pulumi.StringOutput                  `pulumi:"availabilityZoneName"`
	CreationToken                pulumi.StringOutput                  `pulumi:"creationToken"`
	DnsName                      pulumi.StringOutput                  `pulumi:"dnsName"`
	Encrypted                    pulumi.BoolOutput                    `pulumi:"encrypted"`
	KmsKeyId                     pulumi.StringOutput                  `pulumi:"kmsKeyId"`
	LifecyclePolicies            FileSystemLifecyclePolicyArrayOutput `pulumi:"lifecyclePolicies"`
	NumberOfMountTargets         pulumi.IntOutput                     `pulumi:"numberOfMountTargets"`
	OwnerId                      pulumi.StringOutput                  `pulumi:"ownerId"`
	PerformanceMode              pulumi.StringOutput                  `pulumi:"performanceMode"`
	ProvisionedThroughputInMibps pulumi.Float64PtrOutput              `pulumi:"provisionedThroughputInMibps"`
	SizeInBytes                  FileSystemSizeInByteArrayOutput      `pulumi:"sizeInBytes"`
	Tags                         pulumi.StringMapOutput               `pulumi:"tags"`
	TagsAll                      pulumi.StringMapOutput               `pulumi:"tagsAll"`
	ThroughputMode               pulumi.StringPtrOutput               `pulumi:"throughputMode"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		args = &FileSystemArgs{}
	}

	var resource FileSystem
	err := ctx.RegisterResource("aws:efs/fileSystem:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("aws:efs/fileSystem:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
	Arn                          *string                     `pulumi:"arn"`
	AvailabilityZoneId           *string                     `pulumi:"availabilityZoneId"`
	AvailabilityZoneName         *string                     `pulumi:"availabilityZoneName"`
	CreationToken                *string                     `pulumi:"creationToken"`
	DnsName                      *string                     `pulumi:"dnsName"`
	Encrypted                    *bool                       `pulumi:"encrypted"`
	KmsKeyId                     *string                     `pulumi:"kmsKeyId"`
	LifecyclePolicies            []FileSystemLifecyclePolicy `pulumi:"lifecyclePolicies"`
	NumberOfMountTargets         *int                        `pulumi:"numberOfMountTargets"`
	OwnerId                      *string                     `pulumi:"ownerId"`
	PerformanceMode              *string                     `pulumi:"performanceMode"`
	ProvisionedThroughputInMibps *float64                    `pulumi:"provisionedThroughputInMibps"`
	SizeInBytes                  []FileSystemSizeInByte      `pulumi:"sizeInBytes"`
	Tags                         map[string]string           `pulumi:"tags"`
	TagsAll                      map[string]string           `pulumi:"tagsAll"`
	ThroughputMode               *string                     `pulumi:"throughputMode"`
}

type FileSystemState struct {
	Arn                          pulumi.StringPtrInput
	AvailabilityZoneId           pulumi.StringPtrInput
	AvailabilityZoneName         pulumi.StringPtrInput
	CreationToken                pulumi.StringPtrInput
	DnsName                      pulumi.StringPtrInput
	Encrypted                    pulumi.BoolPtrInput
	KmsKeyId                     pulumi.StringPtrInput
	LifecyclePolicies            FileSystemLifecyclePolicyArrayInput
	NumberOfMountTargets         pulumi.IntPtrInput
	OwnerId                      pulumi.StringPtrInput
	PerformanceMode              pulumi.StringPtrInput
	ProvisionedThroughputInMibps pulumi.Float64PtrInput
	SizeInBytes                  FileSystemSizeInByteArrayInput
	Tags                         pulumi.StringMapInput
	TagsAll                      pulumi.StringMapInput
	ThroughputMode               pulumi.StringPtrInput
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	AvailabilityZoneName         *string                     `pulumi:"availabilityZoneName"`
	CreationToken                *string                     `pulumi:"creationToken"`
	Encrypted                    *bool                       `pulumi:"encrypted"`
	KmsKeyId                     *string                     `pulumi:"kmsKeyId"`
	LifecyclePolicies            []FileSystemLifecyclePolicy `pulumi:"lifecyclePolicies"`
	PerformanceMode              *string                     `pulumi:"performanceMode"`
	ProvisionedThroughputInMibps *float64                    `pulumi:"provisionedThroughputInMibps"`
	Tags                         map[string]string           `pulumi:"tags"`
	ThroughputMode               *string                     `pulumi:"throughputMode"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	AvailabilityZoneName         pulumi.StringPtrInput
	CreationToken                pulumi.StringPtrInput
	Encrypted                    pulumi.BoolPtrInput
	KmsKeyId                     pulumi.StringPtrInput
	LifecyclePolicies            FileSystemLifecyclePolicyArrayInput
	PerformanceMode              pulumi.StringPtrInput
	ProvisionedThroughputInMibps pulumi.Float64PtrInput
	Tags                         pulumi.StringMapInput
	ThroughputMode               pulumi.StringPtrInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

// FileSystemArrayInput is an input type that accepts FileSystemArray and FileSystemArrayOutput values.
// You can construct a concrete instance of `FileSystemArrayInput` via:
//
//	FileSystemArray{ FileSystemArgs{...} }
type FileSystemArrayInput interface {
	pulumi.Input

	ToFileSystemArrayOutput() FileSystemArrayOutput
	ToFileSystemArrayOutputWithContext(context.Context) FileSystemArrayOutput
}

type FileSystemArray []FileSystemInput

func (FileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (i FileSystemArray) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return i.ToFileSystemArrayOutputWithContext(context.Background())
}

func (i FileSystemArray) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemArrayOutput)
}

// FileSystemMapInput is an input type that accepts FileSystemMap and FileSystemMapOutput values.
// You can construct a concrete instance of `FileSystemMapInput` via:
//
//	FileSystemMap{ "key": FileSystemArgs{...} }
type FileSystemMapInput interface {
	pulumi.Input

	ToFileSystemMapOutput() FileSystemMapOutput
	ToFileSystemMapOutputWithContext(context.Context) FileSystemMapOutput
}

type FileSystemMap map[string]FileSystemInput

func (FileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (i FileSystemMap) ToFileSystemMapOutput() FileSystemMapOutput {
	return i.ToFileSystemMapOutputWithContext(context.Background())
}

func (i FileSystemMap) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMapOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

func (o FileSystemOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FileSystemOutput) AvailabilityZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.AvailabilityZoneId }).(pulumi.StringOutput)
}

func (o FileSystemOutput) AvailabilityZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.AvailabilityZoneName }).(pulumi.StringOutput)
}

func (o FileSystemOutput) CreationToken() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.CreationToken }).(pulumi.StringOutput)
}

func (o FileSystemOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

func (o FileSystemOutput) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.BoolOutput { return v.Encrypted }).(pulumi.BoolOutput)
}

func (o FileSystemOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

func (o FileSystemOutput) LifecyclePolicies() FileSystemLifecyclePolicyArrayOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemLifecyclePolicyArrayOutput { return v.LifecyclePolicies }).(FileSystemLifecyclePolicyArrayOutput)
}

func (o FileSystemOutput) NumberOfMountTargets() pulumi.IntOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntOutput { return v.NumberOfMountTargets }).(pulumi.IntOutput)
}

func (o FileSystemOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o FileSystemOutput) PerformanceMode() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.PerformanceMode }).(pulumi.StringOutput)
}

func (o FileSystemOutput) ProvisionedThroughputInMibps() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.Float64PtrOutput { return v.ProvisionedThroughputInMibps }).(pulumi.Float64PtrOutput)
}

func (o FileSystemOutput) SizeInBytes() FileSystemSizeInByteArrayOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemSizeInByteArrayOutput { return v.SizeInBytes }).(FileSystemSizeInByteArrayOutput)
}

func (o FileSystemOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FileSystemOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o FileSystemOutput) ThroughputMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.ThroughputMode }).(pulumi.StringPtrOutput)
}

type FileSystemArrayOutput struct{ *pulumi.OutputState }

func (FileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) Index(i pulumi.IntInput) FileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].([]*FileSystem)[vs[1].(int)]
	}).(FileSystemOutput)
}

type FileSystemMapOutput struct{ *pulumi.OutputState }

func (FileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (o FileSystemMapOutput) ToFileSystemMapOutput() FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) MapIndex(k pulumi.StringInput) FileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].(map[string]*FileSystem)[vs[1].(string)]
	}).(FileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemInput)(nil)).Elem(), &FileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemArrayInput)(nil)).Elem(), FileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemMapInput)(nil)).Elem(), FileSystemMap{})
	pulumi.RegisterOutputType(FileSystemOutput{})
	pulumi.RegisterOutputType(FileSystemArrayOutput{})
	pulumi.RegisterOutputType(FileSystemMapOutput{})
}
