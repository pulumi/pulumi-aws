// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chatbot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Chatbot Slack Channel Configuration.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/chatbot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chatbot.NewSlackChannelConfiguration(ctx, "test", &chatbot.SlackChannelConfigurationArgs{
//				ConfigurationName: pulumi.String("min-slaka-kanal"),
//				IamRoleArn:        pulumi.Any(testAwsIamRole.Arn),
//				SlackChannelId:    pulumi.String("C07EZ1ABC23"),
//				SlackTeamId:       pulumi.String("T07EA123LEP"),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("min-slaka-kanal"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Chatbot Slack Channel Configuration using the `chat_configuration_arn`. For example:
//
// ```sh
// $ pulumi import aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration example arn:aws:chatbot::123456789012:chat-configuration/slack-channel/min-slaka-kanal
// ```
type SlackChannelConfiguration struct {
	pulumi.CustomResourceState

	// ARN of the Slack channel configuration.
	ChatConfigurationArn pulumi.StringOutput `pulumi:"chatConfigurationArn"`
	// Name of the Slack channel configuration.
	ConfigurationName pulumi.StringOutput `pulumi:"configurationName"`
	// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
	GuardrailPolicyArns pulumi.StringArrayOutput `pulumi:"guardrailPolicyArns"`
	// User-defined role that AWS Chatbot assumes. This is not the service-linked role.
	IamRoleArn pulumi.StringOutput `pulumi:"iamRoleArn"`
	// Logging levels include `ERROR`, `INFO`, or `NONE`.
	LoggingLevel pulumi.StringOutput `pulumi:"loggingLevel"`
	// ID of the Slack channel. For example, `C07EZ1ABC23`.
	SlackChannelId pulumi.StringOutput `pulumi:"slackChannelId"`
	// Name of the Slack channel.
	SlackChannelName pulumi.StringOutput `pulumi:"slackChannelName"`
	// ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
	//
	// The following arguments are optional:
	SlackTeamId pulumi.StringOutput `pulumi:"slackTeamId"`
	// Name of the Slack team.
	SlackTeamName pulumi.StringOutput `pulumi:"slackTeamName"`
	// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
	SnsTopicArns pulumi.StringArrayOutput `pulumi:"snsTopicArns"`
	// Map of tags assigned to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput                     `pulumi:"tagsAll"`
	Timeouts SlackChannelConfigurationTimeoutsPtrOutput `pulumi:"timeouts"`
	// Enables use of a user role requirement in your chat configuration.
	UserAuthorizationRequired pulumi.BoolOutput `pulumi:"userAuthorizationRequired"`
}

// NewSlackChannelConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSlackChannelConfiguration(ctx *pulumi.Context,
	name string, args *SlackChannelConfigurationArgs, opts ...pulumi.ResourceOption) (*SlackChannelConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigurationName == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationName'")
	}
	if args.IamRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'IamRoleArn'")
	}
	if args.SlackChannelId == nil {
		return nil, errors.New("invalid value for required argument 'SlackChannelId'")
	}
	if args.SlackTeamId == nil {
		return nil, errors.New("invalid value for required argument 'SlackTeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SlackChannelConfiguration
	err := ctx.RegisterResource("aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlackChannelConfiguration gets an existing SlackChannelConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlackChannelConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SlackChannelConfigurationState, opts ...pulumi.ResourceOption) (*SlackChannelConfiguration, error) {
	var resource SlackChannelConfiguration
	err := ctx.ReadResource("aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SlackChannelConfiguration resources.
type slackChannelConfigurationState struct {
	// ARN of the Slack channel configuration.
	ChatConfigurationArn *string `pulumi:"chatConfigurationArn"`
	// Name of the Slack channel configuration.
	ConfigurationName *string `pulumi:"configurationName"`
	// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
	GuardrailPolicyArns []string `pulumi:"guardrailPolicyArns"`
	// User-defined role that AWS Chatbot assumes. This is not the service-linked role.
	IamRoleArn *string `pulumi:"iamRoleArn"`
	// Logging levels include `ERROR`, `INFO`, or `NONE`.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// ID of the Slack channel. For example, `C07EZ1ABC23`.
	SlackChannelId *string `pulumi:"slackChannelId"`
	// Name of the Slack channel.
	SlackChannelName *string `pulumi:"slackChannelName"`
	// ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
	//
	// The following arguments are optional:
	SlackTeamId *string `pulumi:"slackTeamId"`
	// Name of the Slack team.
	SlackTeamName *string `pulumi:"slackTeamName"`
	// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
	SnsTopicArns []string `pulumi:"snsTopicArns"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string                  `pulumi:"tagsAll"`
	Timeouts *SlackChannelConfigurationTimeouts `pulumi:"timeouts"`
	// Enables use of a user role requirement in your chat configuration.
	UserAuthorizationRequired *bool `pulumi:"userAuthorizationRequired"`
}

type SlackChannelConfigurationState struct {
	// ARN of the Slack channel configuration.
	ChatConfigurationArn pulumi.StringPtrInput
	// Name of the Slack channel configuration.
	ConfigurationName pulumi.StringPtrInput
	// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
	GuardrailPolicyArns pulumi.StringArrayInput
	// User-defined role that AWS Chatbot assumes. This is not the service-linked role.
	IamRoleArn pulumi.StringPtrInput
	// Logging levels include `ERROR`, `INFO`, or `NONE`.
	LoggingLevel pulumi.StringPtrInput
	// ID of the Slack channel. For example, `C07EZ1ABC23`.
	SlackChannelId pulumi.StringPtrInput
	// Name of the Slack channel.
	SlackChannelName pulumi.StringPtrInput
	// ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
	//
	// The following arguments are optional:
	SlackTeamId pulumi.StringPtrInput
	// Name of the Slack team.
	SlackTeamName pulumi.StringPtrInput
	// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
	SnsTopicArns pulumi.StringArrayInput
	// Map of tags assigned to the resource.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts SlackChannelConfigurationTimeoutsPtrInput
	// Enables use of a user role requirement in your chat configuration.
	UserAuthorizationRequired pulumi.BoolPtrInput
}

func (SlackChannelConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*slackChannelConfigurationState)(nil)).Elem()
}

type slackChannelConfigurationArgs struct {
	// Name of the Slack channel configuration.
	ConfigurationName string `pulumi:"configurationName"`
	// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
	GuardrailPolicyArns []string `pulumi:"guardrailPolicyArns"`
	// User-defined role that AWS Chatbot assumes. This is not the service-linked role.
	IamRoleArn string `pulumi:"iamRoleArn"`
	// Logging levels include `ERROR`, `INFO`, or `NONE`.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// ID of the Slack channel. For example, `C07EZ1ABC23`.
	SlackChannelId string `pulumi:"slackChannelId"`
	// ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
	//
	// The following arguments are optional:
	SlackTeamId string `pulumi:"slackTeamId"`
	// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
	SnsTopicArns []string `pulumi:"snsTopicArns"`
	// Map of tags assigned to the resource.
	Tags     map[string]string                  `pulumi:"tags"`
	Timeouts *SlackChannelConfigurationTimeouts `pulumi:"timeouts"`
	// Enables use of a user role requirement in your chat configuration.
	UserAuthorizationRequired *bool `pulumi:"userAuthorizationRequired"`
}

// The set of arguments for constructing a SlackChannelConfiguration resource.
type SlackChannelConfigurationArgs struct {
	// Name of the Slack channel configuration.
	ConfigurationName pulumi.StringInput
	// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
	GuardrailPolicyArns pulumi.StringArrayInput
	// User-defined role that AWS Chatbot assumes. This is not the service-linked role.
	IamRoleArn pulumi.StringInput
	// Logging levels include `ERROR`, `INFO`, or `NONE`.
	LoggingLevel pulumi.StringPtrInput
	// ID of the Slack channel. For example, `C07EZ1ABC23`.
	SlackChannelId pulumi.StringInput
	// ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
	//
	// The following arguments are optional:
	SlackTeamId pulumi.StringInput
	// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
	SnsTopicArns pulumi.StringArrayInput
	// Map of tags assigned to the resource.
	Tags     pulumi.StringMapInput
	Timeouts SlackChannelConfigurationTimeoutsPtrInput
	// Enables use of a user role requirement in your chat configuration.
	UserAuthorizationRequired pulumi.BoolPtrInput
}

func (SlackChannelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*slackChannelConfigurationArgs)(nil)).Elem()
}

type SlackChannelConfigurationInput interface {
	pulumi.Input

	ToSlackChannelConfigurationOutput() SlackChannelConfigurationOutput
	ToSlackChannelConfigurationOutputWithContext(ctx context.Context) SlackChannelConfigurationOutput
}

func (*SlackChannelConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**SlackChannelConfiguration)(nil)).Elem()
}

func (i *SlackChannelConfiguration) ToSlackChannelConfigurationOutput() SlackChannelConfigurationOutput {
	return i.ToSlackChannelConfigurationOutputWithContext(context.Background())
}

func (i *SlackChannelConfiguration) ToSlackChannelConfigurationOutputWithContext(ctx context.Context) SlackChannelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackChannelConfigurationOutput)
}

// SlackChannelConfigurationArrayInput is an input type that accepts SlackChannelConfigurationArray and SlackChannelConfigurationArrayOutput values.
// You can construct a concrete instance of `SlackChannelConfigurationArrayInput` via:
//
//	SlackChannelConfigurationArray{ SlackChannelConfigurationArgs{...} }
type SlackChannelConfigurationArrayInput interface {
	pulumi.Input

	ToSlackChannelConfigurationArrayOutput() SlackChannelConfigurationArrayOutput
	ToSlackChannelConfigurationArrayOutputWithContext(context.Context) SlackChannelConfigurationArrayOutput
}

type SlackChannelConfigurationArray []SlackChannelConfigurationInput

func (SlackChannelConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlackChannelConfiguration)(nil)).Elem()
}

func (i SlackChannelConfigurationArray) ToSlackChannelConfigurationArrayOutput() SlackChannelConfigurationArrayOutput {
	return i.ToSlackChannelConfigurationArrayOutputWithContext(context.Background())
}

func (i SlackChannelConfigurationArray) ToSlackChannelConfigurationArrayOutputWithContext(ctx context.Context) SlackChannelConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackChannelConfigurationArrayOutput)
}

// SlackChannelConfigurationMapInput is an input type that accepts SlackChannelConfigurationMap and SlackChannelConfigurationMapOutput values.
// You can construct a concrete instance of `SlackChannelConfigurationMapInput` via:
//
//	SlackChannelConfigurationMap{ "key": SlackChannelConfigurationArgs{...} }
type SlackChannelConfigurationMapInput interface {
	pulumi.Input

	ToSlackChannelConfigurationMapOutput() SlackChannelConfigurationMapOutput
	ToSlackChannelConfigurationMapOutputWithContext(context.Context) SlackChannelConfigurationMapOutput
}

type SlackChannelConfigurationMap map[string]SlackChannelConfigurationInput

func (SlackChannelConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlackChannelConfiguration)(nil)).Elem()
}

func (i SlackChannelConfigurationMap) ToSlackChannelConfigurationMapOutput() SlackChannelConfigurationMapOutput {
	return i.ToSlackChannelConfigurationMapOutputWithContext(context.Background())
}

func (i SlackChannelConfigurationMap) ToSlackChannelConfigurationMapOutputWithContext(ctx context.Context) SlackChannelConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackChannelConfigurationMapOutput)
}

type SlackChannelConfigurationOutput struct{ *pulumi.OutputState }

func (SlackChannelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlackChannelConfiguration)(nil)).Elem()
}

func (o SlackChannelConfigurationOutput) ToSlackChannelConfigurationOutput() SlackChannelConfigurationOutput {
	return o
}

func (o SlackChannelConfigurationOutput) ToSlackChannelConfigurationOutputWithContext(ctx context.Context) SlackChannelConfigurationOutput {
	return o
}

// ARN of the Slack channel configuration.
func (o SlackChannelConfigurationOutput) ChatConfigurationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringOutput { return v.ChatConfigurationArn }).(pulumi.StringOutput)
}

// Name of the Slack channel configuration.
func (o SlackChannelConfigurationOutput) ConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringOutput { return v.ConfigurationName }).(pulumi.StringOutput)
}

// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
func (o SlackChannelConfigurationOutput) GuardrailPolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringArrayOutput { return v.GuardrailPolicyArns }).(pulumi.StringArrayOutput)
}

// User-defined role that AWS Chatbot assumes. This is not the service-linked role.
func (o SlackChannelConfigurationOutput) IamRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringOutput { return v.IamRoleArn }).(pulumi.StringOutput)
}

// Logging levels include `ERROR`, `INFO`, or `NONE`.
func (o SlackChannelConfigurationOutput) LoggingLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringOutput { return v.LoggingLevel }).(pulumi.StringOutput)
}

// ID of the Slack channel. For example, `C07EZ1ABC23`.
func (o SlackChannelConfigurationOutput) SlackChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringOutput { return v.SlackChannelId }).(pulumi.StringOutput)
}

// Name of the Slack channel.
func (o SlackChannelConfigurationOutput) SlackChannelName() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringOutput { return v.SlackChannelName }).(pulumi.StringOutput)
}

// ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
//
// The following arguments are optional:
func (o SlackChannelConfigurationOutput) SlackTeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringOutput { return v.SlackTeamId }).(pulumi.StringOutput)
}

// Name of the Slack team.
func (o SlackChannelConfigurationOutput) SlackTeamName() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringOutput { return v.SlackTeamName }).(pulumi.StringOutput)
}

// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
func (o SlackChannelConfigurationOutput) SnsTopicArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringArrayOutput { return v.SnsTopicArns }).(pulumi.StringArrayOutput)
}

// Map of tags assigned to the resource.
func (o SlackChannelConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o SlackChannelConfigurationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o SlackChannelConfigurationOutput) Timeouts() SlackChannelConfigurationTimeoutsPtrOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) SlackChannelConfigurationTimeoutsPtrOutput { return v.Timeouts }).(SlackChannelConfigurationTimeoutsPtrOutput)
}

// Enables use of a user role requirement in your chat configuration.
func (o SlackChannelConfigurationOutput) UserAuthorizationRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.BoolOutput { return v.UserAuthorizationRequired }).(pulumi.BoolOutput)
}

type SlackChannelConfigurationArrayOutput struct{ *pulumi.OutputState }

func (SlackChannelConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlackChannelConfiguration)(nil)).Elem()
}

func (o SlackChannelConfigurationArrayOutput) ToSlackChannelConfigurationArrayOutput() SlackChannelConfigurationArrayOutput {
	return o
}

func (o SlackChannelConfigurationArrayOutput) ToSlackChannelConfigurationArrayOutputWithContext(ctx context.Context) SlackChannelConfigurationArrayOutput {
	return o
}

func (o SlackChannelConfigurationArrayOutput) Index(i pulumi.IntInput) SlackChannelConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SlackChannelConfiguration {
		return vs[0].([]*SlackChannelConfiguration)[vs[1].(int)]
	}).(SlackChannelConfigurationOutput)
}

type SlackChannelConfigurationMapOutput struct{ *pulumi.OutputState }

func (SlackChannelConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlackChannelConfiguration)(nil)).Elem()
}

func (o SlackChannelConfigurationMapOutput) ToSlackChannelConfigurationMapOutput() SlackChannelConfigurationMapOutput {
	return o
}

func (o SlackChannelConfigurationMapOutput) ToSlackChannelConfigurationMapOutputWithContext(ctx context.Context) SlackChannelConfigurationMapOutput {
	return o
}

func (o SlackChannelConfigurationMapOutput) MapIndex(k pulumi.StringInput) SlackChannelConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SlackChannelConfiguration {
		return vs[0].(map[string]*SlackChannelConfiguration)[vs[1].(string)]
	}).(SlackChannelConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SlackChannelConfigurationInput)(nil)).Elem(), &SlackChannelConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackChannelConfigurationArrayInput)(nil)).Elem(), SlackChannelConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackChannelConfigurationMapInput)(nil)).Elem(), SlackChannelConfigurationMap{})
	pulumi.RegisterOutputType(SlackChannelConfigurationOutput{})
	pulumi.RegisterOutputType(SlackChannelConfigurationArrayOutput{})
	pulumi.RegisterOutputType(SlackChannelConfigurationMapOutput{})
}
