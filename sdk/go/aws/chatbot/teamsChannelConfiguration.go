// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chatbot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Chatbot Microsoft Teams Channel Configuration.
//
// > **NOTE:** We provide this resource on a best-effort basis. If you are able to test it and find it useful, we welcome your input at GitHub.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/chatbot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chatbot.NewTeamsChannelConfiguration(ctx, "test", &chatbot.TeamsChannelConfigurationArgs{
//				ChannelId:         pulumi.String("C07EZ1ABC23"),
//				ConfigurationName: pulumi.String("mitt-lags-kanal"),
//				IamRoleArn:        pulumi.Any(testAwsIamRole.Arn),
//				TeamId:            pulumi.String("74361522-da01-538d-aa2e-ac7918c6bb92"),
//				TenantId:          pulumi.String("1234"),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("mitt-lags-kanal"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Chatbot Microsoft Teams Channel Configuration using the `team_id`. For example:
//
// ```sh
// $ pulumi import aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration example 5f4f15d2-b958-522a-8333-124aa8bf0925
// ```
type TeamsChannelConfiguration struct {
	pulumi.CustomResourceState

	// ID of the Microsoft Teams channel.
	ChannelId pulumi.StringOutput `pulumi:"channelId"`
	// Name of the Microsoft Teams channel.
	ChannelName pulumi.StringOutput `pulumi:"channelName"`
	// ARN of the Microsoft Teams channel configuration.
	ChatConfigurationArn pulumi.StringOutput `pulumi:"chatConfigurationArn"`
	// Name of the Microsoft Teams channel configuration.
	ConfigurationName pulumi.StringOutput `pulumi:"configurationName"`
	// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
	GuardrailPolicyArns pulumi.StringArrayOutput `pulumi:"guardrailPolicyArns"`
	// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
	IamRoleArn pulumi.StringOutput `pulumi:"iamRoleArn"`
	// Logging levels include `ERROR`, `INFO`, or `NONE`.
	LoggingLevel pulumi.StringOutput `pulumi:"loggingLevel"`
	// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
	SnsTopicArns pulumi.StringArrayOutput `pulumi:"snsTopicArns"`
	// Map of tags assigned to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// Name of the Microsoft Teams team.
	TeamName pulumi.StringOutput `pulumi:"teamName"`
	// ID of the Microsoft Teams tenant.
	//
	// The following arguments are optional:
	TenantId pulumi.StringOutput                        `pulumi:"tenantId"`
	Timeouts TeamsChannelConfigurationTimeoutsPtrOutput `pulumi:"timeouts"`
	// Enables use of a user role requirement in your chat configuration.
	UserAuthorizationRequired pulumi.BoolOutput `pulumi:"userAuthorizationRequired"`
}

// NewTeamsChannelConfiguration registers a new resource with the given unique name, arguments, and options.
func NewTeamsChannelConfiguration(ctx *pulumi.Context,
	name string, args *TeamsChannelConfigurationArgs, opts ...pulumi.ResourceOption) (*TeamsChannelConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChannelId == nil {
		return nil, errors.New("invalid value for required argument 'ChannelId'")
	}
	if args.ConfigurationName == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationName'")
	}
	if args.IamRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'IamRoleArn'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamsChannelConfiguration
	err := ctx.RegisterResource("aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamsChannelConfiguration gets an existing TeamsChannelConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamsChannelConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamsChannelConfigurationState, opts ...pulumi.ResourceOption) (*TeamsChannelConfiguration, error) {
	var resource TeamsChannelConfiguration
	err := ctx.ReadResource("aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamsChannelConfiguration resources.
type teamsChannelConfigurationState struct {
	// ID of the Microsoft Teams channel.
	ChannelId *string `pulumi:"channelId"`
	// Name of the Microsoft Teams channel.
	ChannelName *string `pulumi:"channelName"`
	// ARN of the Microsoft Teams channel configuration.
	ChatConfigurationArn *string `pulumi:"chatConfigurationArn"`
	// Name of the Microsoft Teams channel configuration.
	ConfigurationName *string `pulumi:"configurationName"`
	// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
	GuardrailPolicyArns []string `pulumi:"guardrailPolicyArns"`
	// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
	IamRoleArn *string `pulumi:"iamRoleArn"`
	// Logging levels include `ERROR`, `INFO`, or `NONE`.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
	SnsTopicArns []string `pulumi:"snsTopicArns"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
	TeamId *string `pulumi:"teamId"`
	// Name of the Microsoft Teams team.
	TeamName *string `pulumi:"teamName"`
	// ID of the Microsoft Teams tenant.
	//
	// The following arguments are optional:
	TenantId *string                            `pulumi:"tenantId"`
	Timeouts *TeamsChannelConfigurationTimeouts `pulumi:"timeouts"`
	// Enables use of a user role requirement in your chat configuration.
	UserAuthorizationRequired *bool `pulumi:"userAuthorizationRequired"`
}

type TeamsChannelConfigurationState struct {
	// ID of the Microsoft Teams channel.
	ChannelId pulumi.StringPtrInput
	// Name of the Microsoft Teams channel.
	ChannelName pulumi.StringPtrInput
	// ARN of the Microsoft Teams channel configuration.
	ChatConfigurationArn pulumi.StringPtrInput
	// Name of the Microsoft Teams channel configuration.
	ConfigurationName pulumi.StringPtrInput
	// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
	GuardrailPolicyArns pulumi.StringArrayInput
	// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
	IamRoleArn pulumi.StringPtrInput
	// Logging levels include `ERROR`, `INFO`, or `NONE`.
	LoggingLevel pulumi.StringPtrInput
	// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
	SnsTopicArns pulumi.StringArrayInput
	// Map of tags assigned to the resource.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
	TeamId pulumi.StringPtrInput
	// Name of the Microsoft Teams team.
	TeamName pulumi.StringPtrInput
	// ID of the Microsoft Teams tenant.
	//
	// The following arguments are optional:
	TenantId pulumi.StringPtrInput
	Timeouts TeamsChannelConfigurationTimeoutsPtrInput
	// Enables use of a user role requirement in your chat configuration.
	UserAuthorizationRequired pulumi.BoolPtrInput
}

func (TeamsChannelConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamsChannelConfigurationState)(nil)).Elem()
}

type teamsChannelConfigurationArgs struct {
	// ID of the Microsoft Teams channel.
	ChannelId string `pulumi:"channelId"`
	// Name of the Microsoft Teams channel.
	ChannelName *string `pulumi:"channelName"`
	// Name of the Microsoft Teams channel configuration.
	ConfigurationName string `pulumi:"configurationName"`
	// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
	GuardrailPolicyArns []string `pulumi:"guardrailPolicyArns"`
	// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
	IamRoleArn string `pulumi:"iamRoleArn"`
	// Logging levels include `ERROR`, `INFO`, or `NONE`.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
	SnsTopicArns []string `pulumi:"snsTopicArns"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
	TeamId string `pulumi:"teamId"`
	// Name of the Microsoft Teams team.
	TeamName *string `pulumi:"teamName"`
	// ID of the Microsoft Teams tenant.
	//
	// The following arguments are optional:
	TenantId string                             `pulumi:"tenantId"`
	Timeouts *TeamsChannelConfigurationTimeouts `pulumi:"timeouts"`
	// Enables use of a user role requirement in your chat configuration.
	UserAuthorizationRequired *bool `pulumi:"userAuthorizationRequired"`
}

// The set of arguments for constructing a TeamsChannelConfiguration resource.
type TeamsChannelConfigurationArgs struct {
	// ID of the Microsoft Teams channel.
	ChannelId pulumi.StringInput
	// Name of the Microsoft Teams channel.
	ChannelName pulumi.StringPtrInput
	// Name of the Microsoft Teams channel configuration.
	ConfigurationName pulumi.StringInput
	// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
	GuardrailPolicyArns pulumi.StringArrayInput
	// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
	IamRoleArn pulumi.StringInput
	// Logging levels include `ERROR`, `INFO`, or `NONE`.
	LoggingLevel pulumi.StringPtrInput
	// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
	SnsTopicArns pulumi.StringArrayInput
	// Map of tags assigned to the resource.
	Tags pulumi.StringMapInput
	// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
	TeamId pulumi.StringInput
	// Name of the Microsoft Teams team.
	TeamName pulumi.StringPtrInput
	// ID of the Microsoft Teams tenant.
	//
	// The following arguments are optional:
	TenantId pulumi.StringInput
	Timeouts TeamsChannelConfigurationTimeoutsPtrInput
	// Enables use of a user role requirement in your chat configuration.
	UserAuthorizationRequired pulumi.BoolPtrInput
}

func (TeamsChannelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamsChannelConfigurationArgs)(nil)).Elem()
}

type TeamsChannelConfigurationInput interface {
	pulumi.Input

	ToTeamsChannelConfigurationOutput() TeamsChannelConfigurationOutput
	ToTeamsChannelConfigurationOutputWithContext(ctx context.Context) TeamsChannelConfigurationOutput
}

func (*TeamsChannelConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamsChannelConfiguration)(nil)).Elem()
}

func (i *TeamsChannelConfiguration) ToTeamsChannelConfigurationOutput() TeamsChannelConfigurationOutput {
	return i.ToTeamsChannelConfigurationOutputWithContext(context.Background())
}

func (i *TeamsChannelConfiguration) ToTeamsChannelConfigurationOutputWithContext(ctx context.Context) TeamsChannelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsChannelConfigurationOutput)
}

// TeamsChannelConfigurationArrayInput is an input type that accepts TeamsChannelConfigurationArray and TeamsChannelConfigurationArrayOutput values.
// You can construct a concrete instance of `TeamsChannelConfigurationArrayInput` via:
//
//	TeamsChannelConfigurationArray{ TeamsChannelConfigurationArgs{...} }
type TeamsChannelConfigurationArrayInput interface {
	pulumi.Input

	ToTeamsChannelConfigurationArrayOutput() TeamsChannelConfigurationArrayOutput
	ToTeamsChannelConfigurationArrayOutputWithContext(context.Context) TeamsChannelConfigurationArrayOutput
}

type TeamsChannelConfigurationArray []TeamsChannelConfigurationInput

func (TeamsChannelConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamsChannelConfiguration)(nil)).Elem()
}

func (i TeamsChannelConfigurationArray) ToTeamsChannelConfigurationArrayOutput() TeamsChannelConfigurationArrayOutput {
	return i.ToTeamsChannelConfigurationArrayOutputWithContext(context.Background())
}

func (i TeamsChannelConfigurationArray) ToTeamsChannelConfigurationArrayOutputWithContext(ctx context.Context) TeamsChannelConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsChannelConfigurationArrayOutput)
}

// TeamsChannelConfigurationMapInput is an input type that accepts TeamsChannelConfigurationMap and TeamsChannelConfigurationMapOutput values.
// You can construct a concrete instance of `TeamsChannelConfigurationMapInput` via:
//
//	TeamsChannelConfigurationMap{ "key": TeamsChannelConfigurationArgs{...} }
type TeamsChannelConfigurationMapInput interface {
	pulumi.Input

	ToTeamsChannelConfigurationMapOutput() TeamsChannelConfigurationMapOutput
	ToTeamsChannelConfigurationMapOutputWithContext(context.Context) TeamsChannelConfigurationMapOutput
}

type TeamsChannelConfigurationMap map[string]TeamsChannelConfigurationInput

func (TeamsChannelConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamsChannelConfiguration)(nil)).Elem()
}

func (i TeamsChannelConfigurationMap) ToTeamsChannelConfigurationMapOutput() TeamsChannelConfigurationMapOutput {
	return i.ToTeamsChannelConfigurationMapOutputWithContext(context.Background())
}

func (i TeamsChannelConfigurationMap) ToTeamsChannelConfigurationMapOutputWithContext(ctx context.Context) TeamsChannelConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsChannelConfigurationMapOutput)
}

type TeamsChannelConfigurationOutput struct{ *pulumi.OutputState }

func (TeamsChannelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamsChannelConfiguration)(nil)).Elem()
}

func (o TeamsChannelConfigurationOutput) ToTeamsChannelConfigurationOutput() TeamsChannelConfigurationOutput {
	return o
}

func (o TeamsChannelConfigurationOutput) ToTeamsChannelConfigurationOutputWithContext(ctx context.Context) TeamsChannelConfigurationOutput {
	return o
}

// ID of the Microsoft Teams channel.
func (o TeamsChannelConfigurationOutput) ChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringOutput { return v.ChannelId }).(pulumi.StringOutput)
}

// Name of the Microsoft Teams channel.
func (o TeamsChannelConfigurationOutput) ChannelName() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringOutput { return v.ChannelName }).(pulumi.StringOutput)
}

// ARN of the Microsoft Teams channel configuration.
func (o TeamsChannelConfigurationOutput) ChatConfigurationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringOutput { return v.ChatConfigurationArn }).(pulumi.StringOutput)
}

// Name of the Microsoft Teams channel configuration.
func (o TeamsChannelConfigurationOutput) ConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringOutput { return v.ConfigurationName }).(pulumi.StringOutput)
}

// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
func (o TeamsChannelConfigurationOutput) GuardrailPolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringArrayOutput { return v.GuardrailPolicyArns }).(pulumi.StringArrayOutput)
}

// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
func (o TeamsChannelConfigurationOutput) IamRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringOutput { return v.IamRoleArn }).(pulumi.StringOutput)
}

// Logging levels include `ERROR`, `INFO`, or `NONE`.
func (o TeamsChannelConfigurationOutput) LoggingLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringOutput { return v.LoggingLevel }).(pulumi.StringOutput)
}

// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
func (o TeamsChannelConfigurationOutput) SnsTopicArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringArrayOutput { return v.SnsTopicArns }).(pulumi.StringArrayOutput)
}

// Map of tags assigned to the resource.
func (o TeamsChannelConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o TeamsChannelConfigurationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
func (o TeamsChannelConfigurationOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// Name of the Microsoft Teams team.
func (o TeamsChannelConfigurationOutput) TeamName() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringOutput { return v.TeamName }).(pulumi.StringOutput)
}

// ID of the Microsoft Teams tenant.
//
// The following arguments are optional:
func (o TeamsChannelConfigurationOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o TeamsChannelConfigurationOutput) Timeouts() TeamsChannelConfigurationTimeoutsPtrOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) TeamsChannelConfigurationTimeoutsPtrOutput { return v.Timeouts }).(TeamsChannelConfigurationTimeoutsPtrOutput)
}

// Enables use of a user role requirement in your chat configuration.
func (o TeamsChannelConfigurationOutput) UserAuthorizationRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *TeamsChannelConfiguration) pulumi.BoolOutput { return v.UserAuthorizationRequired }).(pulumi.BoolOutput)
}

type TeamsChannelConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TeamsChannelConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamsChannelConfiguration)(nil)).Elem()
}

func (o TeamsChannelConfigurationArrayOutput) ToTeamsChannelConfigurationArrayOutput() TeamsChannelConfigurationArrayOutput {
	return o
}

func (o TeamsChannelConfigurationArrayOutput) ToTeamsChannelConfigurationArrayOutputWithContext(ctx context.Context) TeamsChannelConfigurationArrayOutput {
	return o
}

func (o TeamsChannelConfigurationArrayOutput) Index(i pulumi.IntInput) TeamsChannelConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamsChannelConfiguration {
		return vs[0].([]*TeamsChannelConfiguration)[vs[1].(int)]
	}).(TeamsChannelConfigurationOutput)
}

type TeamsChannelConfigurationMapOutput struct{ *pulumi.OutputState }

func (TeamsChannelConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamsChannelConfiguration)(nil)).Elem()
}

func (o TeamsChannelConfigurationMapOutput) ToTeamsChannelConfigurationMapOutput() TeamsChannelConfigurationMapOutput {
	return o
}

func (o TeamsChannelConfigurationMapOutput) ToTeamsChannelConfigurationMapOutputWithContext(ctx context.Context) TeamsChannelConfigurationMapOutput {
	return o
}

func (o TeamsChannelConfigurationMapOutput) MapIndex(k pulumi.StringInput) TeamsChannelConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamsChannelConfiguration {
		return vs[0].(map[string]*TeamsChannelConfiguration)[vs[1].(string)]
	}).(TeamsChannelConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsChannelConfigurationInput)(nil)).Elem(), &TeamsChannelConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsChannelConfigurationArrayInput)(nil)).Elem(), TeamsChannelConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsChannelConfigurationMapInput)(nil)).Elem(), TeamsChannelConfigurationMap{})
	pulumi.RegisterOutputType(TeamsChannelConfigurationOutput{})
	pulumi.RegisterOutputType(TeamsChannelConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TeamsChannelConfigurationMapOutput{})
}
