// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventDataStore struct {
	pulumi.CustomResourceState

	AdvancedEventSelectors       EventDataStoreAdvancedEventSelectorArrayOutput `pulumi:"advancedEventSelectors"`
	Arn                          pulumi.StringOutput                            `pulumi:"arn"`
	MultiRegionEnabled           pulumi.BoolPtrOutput                           `pulumi:"multiRegionEnabled"`
	Name                         pulumi.StringOutput                            `pulumi:"name"`
	OrganizationEnabled          pulumi.BoolPtrOutput                           `pulumi:"organizationEnabled"`
	RetentionPeriod              pulumi.IntPtrOutput                            `pulumi:"retentionPeriod"`
	Tags                         pulumi.StringMapOutput                         `pulumi:"tags"`
	TagsAll                      pulumi.StringMapOutput                         `pulumi:"tagsAll"`
	TerminationProtectionEnabled pulumi.BoolPtrOutput                           `pulumi:"terminationProtectionEnabled"`
}

// NewEventDataStore registers a new resource with the given unique name, arguments, and options.
func NewEventDataStore(ctx *pulumi.Context,
	name string, args *EventDataStoreArgs, opts ...pulumi.ResourceOption) (*EventDataStore, error) {
	if args == nil {
		args = &EventDataStoreArgs{}
	}

	var resource EventDataStore
	err := ctx.RegisterResource("aws:cloudtrail/eventDataStore:EventDataStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventDataStore gets an existing EventDataStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventDataStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventDataStoreState, opts ...pulumi.ResourceOption) (*EventDataStore, error) {
	var resource EventDataStore
	err := ctx.ReadResource("aws:cloudtrail/eventDataStore:EventDataStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventDataStore resources.
type eventDataStoreState struct {
	AdvancedEventSelectors       []EventDataStoreAdvancedEventSelector `pulumi:"advancedEventSelectors"`
	Arn                          *string                               `pulumi:"arn"`
	MultiRegionEnabled           *bool                                 `pulumi:"multiRegionEnabled"`
	Name                         *string                               `pulumi:"name"`
	OrganizationEnabled          *bool                                 `pulumi:"organizationEnabled"`
	RetentionPeriod              *int                                  `pulumi:"retentionPeriod"`
	Tags                         map[string]string                     `pulumi:"tags"`
	TagsAll                      map[string]string                     `pulumi:"tagsAll"`
	TerminationProtectionEnabled *bool                                 `pulumi:"terminationProtectionEnabled"`
}

type EventDataStoreState struct {
	AdvancedEventSelectors       EventDataStoreAdvancedEventSelectorArrayInput
	Arn                          pulumi.StringPtrInput
	MultiRegionEnabled           pulumi.BoolPtrInput
	Name                         pulumi.StringPtrInput
	OrganizationEnabled          pulumi.BoolPtrInput
	RetentionPeriod              pulumi.IntPtrInput
	Tags                         pulumi.StringMapInput
	TagsAll                      pulumi.StringMapInput
	TerminationProtectionEnabled pulumi.BoolPtrInput
}

func (EventDataStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventDataStoreState)(nil)).Elem()
}

type eventDataStoreArgs struct {
	AdvancedEventSelectors       []EventDataStoreAdvancedEventSelector `pulumi:"advancedEventSelectors"`
	MultiRegionEnabled           *bool                                 `pulumi:"multiRegionEnabled"`
	Name                         *string                               `pulumi:"name"`
	OrganizationEnabled          *bool                                 `pulumi:"organizationEnabled"`
	RetentionPeriod              *int                                  `pulumi:"retentionPeriod"`
	Tags                         map[string]string                     `pulumi:"tags"`
	TerminationProtectionEnabled *bool                                 `pulumi:"terminationProtectionEnabled"`
}

// The set of arguments for constructing a EventDataStore resource.
type EventDataStoreArgs struct {
	AdvancedEventSelectors       EventDataStoreAdvancedEventSelectorArrayInput
	MultiRegionEnabled           pulumi.BoolPtrInput
	Name                         pulumi.StringPtrInput
	OrganizationEnabled          pulumi.BoolPtrInput
	RetentionPeriod              pulumi.IntPtrInput
	Tags                         pulumi.StringMapInput
	TerminationProtectionEnabled pulumi.BoolPtrInput
}

func (EventDataStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventDataStoreArgs)(nil)).Elem()
}

type EventDataStoreInput interface {
	pulumi.Input

	ToEventDataStoreOutput() EventDataStoreOutput
	ToEventDataStoreOutputWithContext(ctx context.Context) EventDataStoreOutput
}

func (*EventDataStore) ElementType() reflect.Type {
	return reflect.TypeOf((**EventDataStore)(nil)).Elem()
}

func (i *EventDataStore) ToEventDataStoreOutput() EventDataStoreOutput {
	return i.ToEventDataStoreOutputWithContext(context.Background())
}

func (i *EventDataStore) ToEventDataStoreOutputWithContext(ctx context.Context) EventDataStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreOutput)
}

// EventDataStoreArrayInput is an input type that accepts EventDataStoreArray and EventDataStoreArrayOutput values.
// You can construct a concrete instance of `EventDataStoreArrayInput` via:
//
//	EventDataStoreArray{ EventDataStoreArgs{...} }
type EventDataStoreArrayInput interface {
	pulumi.Input

	ToEventDataStoreArrayOutput() EventDataStoreArrayOutput
	ToEventDataStoreArrayOutputWithContext(context.Context) EventDataStoreArrayOutput
}

type EventDataStoreArray []EventDataStoreInput

func (EventDataStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventDataStore)(nil)).Elem()
}

func (i EventDataStoreArray) ToEventDataStoreArrayOutput() EventDataStoreArrayOutput {
	return i.ToEventDataStoreArrayOutputWithContext(context.Background())
}

func (i EventDataStoreArray) ToEventDataStoreArrayOutputWithContext(ctx context.Context) EventDataStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreArrayOutput)
}

// EventDataStoreMapInput is an input type that accepts EventDataStoreMap and EventDataStoreMapOutput values.
// You can construct a concrete instance of `EventDataStoreMapInput` via:
//
//	EventDataStoreMap{ "key": EventDataStoreArgs{...} }
type EventDataStoreMapInput interface {
	pulumi.Input

	ToEventDataStoreMapOutput() EventDataStoreMapOutput
	ToEventDataStoreMapOutputWithContext(context.Context) EventDataStoreMapOutput
}

type EventDataStoreMap map[string]EventDataStoreInput

func (EventDataStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventDataStore)(nil)).Elem()
}

func (i EventDataStoreMap) ToEventDataStoreMapOutput() EventDataStoreMapOutput {
	return i.ToEventDataStoreMapOutputWithContext(context.Background())
}

func (i EventDataStoreMap) ToEventDataStoreMapOutputWithContext(ctx context.Context) EventDataStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreMapOutput)
}

type EventDataStoreOutput struct{ *pulumi.OutputState }

func (EventDataStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventDataStore)(nil)).Elem()
}

func (o EventDataStoreOutput) ToEventDataStoreOutput() EventDataStoreOutput {
	return o
}

func (o EventDataStoreOutput) ToEventDataStoreOutputWithContext(ctx context.Context) EventDataStoreOutput {
	return o
}

func (o EventDataStoreOutput) AdvancedEventSelectors() EventDataStoreAdvancedEventSelectorArrayOutput {
	return o.ApplyT(func(v *EventDataStore) EventDataStoreAdvancedEventSelectorArrayOutput {
		return v.AdvancedEventSelectors
	}).(EventDataStoreAdvancedEventSelectorArrayOutput)
}

func (o EventDataStoreOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventDataStore) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EventDataStoreOutput) MultiRegionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventDataStore) pulumi.BoolPtrOutput { return v.MultiRegionEnabled }).(pulumi.BoolPtrOutput)
}

func (o EventDataStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventDataStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EventDataStoreOutput) OrganizationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventDataStore) pulumi.BoolPtrOutput { return v.OrganizationEnabled }).(pulumi.BoolPtrOutput)
}

func (o EventDataStoreOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventDataStore) pulumi.IntPtrOutput { return v.RetentionPeriod }).(pulumi.IntPtrOutput)
}

func (o EventDataStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventDataStore) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o EventDataStoreOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventDataStore) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o EventDataStoreOutput) TerminationProtectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventDataStore) pulumi.BoolPtrOutput { return v.TerminationProtectionEnabled }).(pulumi.BoolPtrOutput)
}

type EventDataStoreArrayOutput struct{ *pulumi.OutputState }

func (EventDataStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventDataStore)(nil)).Elem()
}

func (o EventDataStoreArrayOutput) ToEventDataStoreArrayOutput() EventDataStoreArrayOutput {
	return o
}

func (o EventDataStoreArrayOutput) ToEventDataStoreArrayOutputWithContext(ctx context.Context) EventDataStoreArrayOutput {
	return o
}

func (o EventDataStoreArrayOutput) Index(i pulumi.IntInput) EventDataStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventDataStore {
		return vs[0].([]*EventDataStore)[vs[1].(int)]
	}).(EventDataStoreOutput)
}

type EventDataStoreMapOutput struct{ *pulumi.OutputState }

func (EventDataStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventDataStore)(nil)).Elem()
}

func (o EventDataStoreMapOutput) ToEventDataStoreMapOutput() EventDataStoreMapOutput {
	return o
}

func (o EventDataStoreMapOutput) ToEventDataStoreMapOutputWithContext(ctx context.Context) EventDataStoreMapOutput {
	return o
}

func (o EventDataStoreMapOutput) MapIndex(k pulumi.StringInput) EventDataStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventDataStore {
		return vs[0].(map[string]*EventDataStore)[vs[1].(string)]
	}).(EventDataStoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreInput)(nil)).Elem(), &EventDataStore{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreArrayInput)(nil)).Elem(), EventDataStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreMapInput)(nil)).Elem(), EventDataStoreMap{})
	pulumi.RegisterOutputType(EventDataStoreOutput{})
	pulumi.RegisterOutputType(EventDataStoreArrayOutput{})
	pulumi.RegisterOutputType(EventDataStoreMapOutput{})
}
