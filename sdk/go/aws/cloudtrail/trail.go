// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Trail struct {
	pulumi.CustomResourceState

	AdvancedEventSelectors     TrailAdvancedEventSelectorArrayOutput `pulumi:"advancedEventSelectors"`
	Arn                        pulumi.StringOutput                   `pulumi:"arn"`
	CloudWatchLogsGroupArn     pulumi.StringPtrOutput                `pulumi:"cloudWatchLogsGroupArn"`
	CloudWatchLogsRoleArn      pulumi.StringPtrOutput                `pulumi:"cloudWatchLogsRoleArn"`
	EnableLogFileValidation    pulumi.BoolPtrOutput                  `pulumi:"enableLogFileValidation"`
	EnableLogging              pulumi.BoolPtrOutput                  `pulumi:"enableLogging"`
	EventSelectors             TrailEventSelectorArrayOutput         `pulumi:"eventSelectors"`
	HomeRegion                 pulumi.StringOutput                   `pulumi:"homeRegion"`
	IncludeGlobalServiceEvents pulumi.BoolPtrOutput                  `pulumi:"includeGlobalServiceEvents"`
	InsightSelectors           TrailInsightSelectorArrayOutput       `pulumi:"insightSelectors"`
	IsMultiRegionTrail         pulumi.BoolPtrOutput                  `pulumi:"isMultiRegionTrail"`
	IsOrganizationTrail        pulumi.BoolPtrOutput                  `pulumi:"isOrganizationTrail"`
	KmsKeyId                   pulumi.StringPtrOutput                `pulumi:"kmsKeyId"`
	Name                       pulumi.StringOutput                   `pulumi:"name"`
	S3BucketName               pulumi.StringOutput                   `pulumi:"s3BucketName"`
	S3KeyPrefix                pulumi.StringPtrOutput                `pulumi:"s3KeyPrefix"`
	SnsTopicName               pulumi.StringPtrOutput                `pulumi:"snsTopicName"`
	Tags                       pulumi.StringMapOutput                `pulumi:"tags"`
	TagsAll                    pulumi.StringMapOutput                `pulumi:"tagsAll"`
}

// NewTrail registers a new resource with the given unique name, arguments, and options.
func NewTrail(ctx *pulumi.Context,
	name string, args *TrailArgs, opts ...pulumi.ResourceOption) (*Trail, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.S3BucketName == nil {
		return nil, errors.New("invalid value for required argument 'S3BucketName'")
	}
	var resource Trail
	err := ctx.RegisterResource("aws:cloudtrail/trail:Trail", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrail gets an existing Trail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrail(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrailState, opts ...pulumi.ResourceOption) (*Trail, error) {
	var resource Trail
	err := ctx.ReadResource("aws:cloudtrail/trail:Trail", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trail resources.
type trailState struct {
	AdvancedEventSelectors     []TrailAdvancedEventSelector `pulumi:"advancedEventSelectors"`
	Arn                        *string                      `pulumi:"arn"`
	CloudWatchLogsGroupArn     *string                      `pulumi:"cloudWatchLogsGroupArn"`
	CloudWatchLogsRoleArn      *string                      `pulumi:"cloudWatchLogsRoleArn"`
	EnableLogFileValidation    *bool                        `pulumi:"enableLogFileValidation"`
	EnableLogging              *bool                        `pulumi:"enableLogging"`
	EventSelectors             []TrailEventSelector         `pulumi:"eventSelectors"`
	HomeRegion                 *string                      `pulumi:"homeRegion"`
	IncludeGlobalServiceEvents *bool                        `pulumi:"includeGlobalServiceEvents"`
	InsightSelectors           []TrailInsightSelector       `pulumi:"insightSelectors"`
	IsMultiRegionTrail         *bool                        `pulumi:"isMultiRegionTrail"`
	IsOrganizationTrail        *bool                        `pulumi:"isOrganizationTrail"`
	KmsKeyId                   *string                      `pulumi:"kmsKeyId"`
	Name                       *string                      `pulumi:"name"`
	S3BucketName               *string                      `pulumi:"s3BucketName"`
	S3KeyPrefix                *string                      `pulumi:"s3KeyPrefix"`
	SnsTopicName               *string                      `pulumi:"snsTopicName"`
	Tags                       map[string]string            `pulumi:"tags"`
	TagsAll                    map[string]string            `pulumi:"tagsAll"`
}

type TrailState struct {
	AdvancedEventSelectors     TrailAdvancedEventSelectorArrayInput
	Arn                        pulumi.StringPtrInput
	CloudWatchLogsGroupArn     pulumi.StringPtrInput
	CloudWatchLogsRoleArn      pulumi.StringPtrInput
	EnableLogFileValidation    pulumi.BoolPtrInput
	EnableLogging              pulumi.BoolPtrInput
	EventSelectors             TrailEventSelectorArrayInput
	HomeRegion                 pulumi.StringPtrInput
	IncludeGlobalServiceEvents pulumi.BoolPtrInput
	InsightSelectors           TrailInsightSelectorArrayInput
	IsMultiRegionTrail         pulumi.BoolPtrInput
	IsOrganizationTrail        pulumi.BoolPtrInput
	KmsKeyId                   pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	S3BucketName               pulumi.StringPtrInput
	S3KeyPrefix                pulumi.StringPtrInput
	SnsTopicName               pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
	TagsAll                    pulumi.StringMapInput
}

func (TrailState) ElementType() reflect.Type {
	return reflect.TypeOf((*trailState)(nil)).Elem()
}

type trailArgs struct {
	AdvancedEventSelectors     []TrailAdvancedEventSelector `pulumi:"advancedEventSelectors"`
	CloudWatchLogsGroupArn     *string                      `pulumi:"cloudWatchLogsGroupArn"`
	CloudWatchLogsRoleArn      *string                      `pulumi:"cloudWatchLogsRoleArn"`
	EnableLogFileValidation    *bool                        `pulumi:"enableLogFileValidation"`
	EnableLogging              *bool                        `pulumi:"enableLogging"`
	EventSelectors             []TrailEventSelector         `pulumi:"eventSelectors"`
	IncludeGlobalServiceEvents *bool                        `pulumi:"includeGlobalServiceEvents"`
	InsightSelectors           []TrailInsightSelector       `pulumi:"insightSelectors"`
	IsMultiRegionTrail         *bool                        `pulumi:"isMultiRegionTrail"`
	IsOrganizationTrail        *bool                        `pulumi:"isOrganizationTrail"`
	KmsKeyId                   *string                      `pulumi:"kmsKeyId"`
	Name                       *string                      `pulumi:"name"`
	S3BucketName               string                       `pulumi:"s3BucketName"`
	S3KeyPrefix                *string                      `pulumi:"s3KeyPrefix"`
	SnsTopicName               *string                      `pulumi:"snsTopicName"`
	Tags                       map[string]string            `pulumi:"tags"`
}

// The set of arguments for constructing a Trail resource.
type TrailArgs struct {
	AdvancedEventSelectors     TrailAdvancedEventSelectorArrayInput
	CloudWatchLogsGroupArn     pulumi.StringPtrInput
	CloudWatchLogsRoleArn      pulumi.StringPtrInput
	EnableLogFileValidation    pulumi.BoolPtrInput
	EnableLogging              pulumi.BoolPtrInput
	EventSelectors             TrailEventSelectorArrayInput
	IncludeGlobalServiceEvents pulumi.BoolPtrInput
	InsightSelectors           TrailInsightSelectorArrayInput
	IsMultiRegionTrail         pulumi.BoolPtrInput
	IsOrganizationTrail        pulumi.BoolPtrInput
	KmsKeyId                   pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	S3BucketName               pulumi.StringInput
	S3KeyPrefix                pulumi.StringPtrInput
	SnsTopicName               pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
}

func (TrailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trailArgs)(nil)).Elem()
}

type TrailInput interface {
	pulumi.Input

	ToTrailOutput() TrailOutput
	ToTrailOutputWithContext(ctx context.Context) TrailOutput
}

func (*Trail) ElementType() reflect.Type {
	return reflect.TypeOf((**Trail)(nil)).Elem()
}

func (i *Trail) ToTrailOutput() TrailOutput {
	return i.ToTrailOutputWithContext(context.Background())
}

func (i *Trail) ToTrailOutputWithContext(ctx context.Context) TrailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailOutput)
}

// TrailArrayInput is an input type that accepts TrailArray and TrailArrayOutput values.
// You can construct a concrete instance of `TrailArrayInput` via:
//
//	TrailArray{ TrailArgs{...} }
type TrailArrayInput interface {
	pulumi.Input

	ToTrailArrayOutput() TrailArrayOutput
	ToTrailArrayOutputWithContext(context.Context) TrailArrayOutput
}

type TrailArray []TrailInput

func (TrailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trail)(nil)).Elem()
}

func (i TrailArray) ToTrailArrayOutput() TrailArrayOutput {
	return i.ToTrailArrayOutputWithContext(context.Background())
}

func (i TrailArray) ToTrailArrayOutputWithContext(ctx context.Context) TrailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailArrayOutput)
}

// TrailMapInput is an input type that accepts TrailMap and TrailMapOutput values.
// You can construct a concrete instance of `TrailMapInput` via:
//
//	TrailMap{ "key": TrailArgs{...} }
type TrailMapInput interface {
	pulumi.Input

	ToTrailMapOutput() TrailMapOutput
	ToTrailMapOutputWithContext(context.Context) TrailMapOutput
}

type TrailMap map[string]TrailInput

func (TrailMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trail)(nil)).Elem()
}

func (i TrailMap) ToTrailMapOutput() TrailMapOutput {
	return i.ToTrailMapOutputWithContext(context.Background())
}

func (i TrailMap) ToTrailMapOutputWithContext(ctx context.Context) TrailMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailMapOutput)
}

type TrailOutput struct{ *pulumi.OutputState }

func (TrailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Trail)(nil)).Elem()
}

func (o TrailOutput) ToTrailOutput() TrailOutput {
	return o
}

func (o TrailOutput) ToTrailOutputWithContext(ctx context.Context) TrailOutput {
	return o
}

func (o TrailOutput) AdvancedEventSelectors() TrailAdvancedEventSelectorArrayOutput {
	return o.ApplyT(func(v *Trail) TrailAdvancedEventSelectorArrayOutput { return v.AdvancedEventSelectors }).(TrailAdvancedEventSelectorArrayOutput)
}

func (o TrailOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Trail) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TrailOutput) CloudWatchLogsGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trail) pulumi.StringPtrOutput { return v.CloudWatchLogsGroupArn }).(pulumi.StringPtrOutput)
}

func (o TrailOutput) CloudWatchLogsRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trail) pulumi.StringPtrOutput { return v.CloudWatchLogsRoleArn }).(pulumi.StringPtrOutput)
}

func (o TrailOutput) EnableLogFileValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Trail) pulumi.BoolPtrOutput { return v.EnableLogFileValidation }).(pulumi.BoolPtrOutput)
}

func (o TrailOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Trail) pulumi.BoolPtrOutput { return v.EnableLogging }).(pulumi.BoolPtrOutput)
}

func (o TrailOutput) EventSelectors() TrailEventSelectorArrayOutput {
	return o.ApplyT(func(v *Trail) TrailEventSelectorArrayOutput { return v.EventSelectors }).(TrailEventSelectorArrayOutput)
}

func (o TrailOutput) HomeRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Trail) pulumi.StringOutput { return v.HomeRegion }).(pulumi.StringOutput)
}

func (o TrailOutput) IncludeGlobalServiceEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Trail) pulumi.BoolPtrOutput { return v.IncludeGlobalServiceEvents }).(pulumi.BoolPtrOutput)
}

func (o TrailOutput) InsightSelectors() TrailInsightSelectorArrayOutput {
	return o.ApplyT(func(v *Trail) TrailInsightSelectorArrayOutput { return v.InsightSelectors }).(TrailInsightSelectorArrayOutput)
}

func (o TrailOutput) IsMultiRegionTrail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Trail) pulumi.BoolPtrOutput { return v.IsMultiRegionTrail }).(pulumi.BoolPtrOutput)
}

func (o TrailOutput) IsOrganizationTrail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Trail) pulumi.BoolPtrOutput { return v.IsOrganizationTrail }).(pulumi.BoolPtrOutput)
}

func (o TrailOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trail) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o TrailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Trail) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TrailOutput) S3BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *Trail) pulumi.StringOutput { return v.S3BucketName }).(pulumi.StringOutput)
}

func (o TrailOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trail) pulumi.StringPtrOutput { return v.S3KeyPrefix }).(pulumi.StringPtrOutput)
}

func (o TrailOutput) SnsTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trail) pulumi.StringPtrOutput { return v.SnsTopicName }).(pulumi.StringPtrOutput)
}

func (o TrailOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Trail) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o TrailOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Trail) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type TrailArrayOutput struct{ *pulumi.OutputState }

func (TrailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trail)(nil)).Elem()
}

func (o TrailArrayOutput) ToTrailArrayOutput() TrailArrayOutput {
	return o
}

func (o TrailArrayOutput) ToTrailArrayOutputWithContext(ctx context.Context) TrailArrayOutput {
	return o
}

func (o TrailArrayOutput) Index(i pulumi.IntInput) TrailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Trail {
		return vs[0].([]*Trail)[vs[1].(int)]
	}).(TrailOutput)
}

type TrailMapOutput struct{ *pulumi.OutputState }

func (TrailMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trail)(nil)).Elem()
}

func (o TrailMapOutput) ToTrailMapOutput() TrailMapOutput {
	return o
}

func (o TrailMapOutput) ToTrailMapOutputWithContext(ctx context.Context) TrailMapOutput {
	return o
}

func (o TrailMapOutput) MapIndex(k pulumi.StringInput) TrailOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Trail {
		return vs[0].(map[string]*Trail)[vs[1].(string)]
	}).(TrailOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrailInput)(nil)).Elem(), &Trail{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailArrayInput)(nil)).Elem(), TrailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailMapInput)(nil)).Elem(), TrailMap{})
	pulumi.RegisterOutputType(TrailOutput{})
	pulumi.RegisterOutputType(TrailArrayOutput{})
	pulumi.RegisterOutputType(TrailMapOutput{})
}
