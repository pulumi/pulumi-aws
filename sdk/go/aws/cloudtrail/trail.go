// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CloudTrail resource.
type Trail struct {
	s *pulumi.ResourceState
}

// NewTrail registers a new resource with the given unique name, arguments, and options.
func NewTrail(ctx *pulumi.Context,
	name string, args *TrailArgs, opts ...pulumi.ResourceOpt) (*Trail, error) {
	if args == nil || args.S3BucketName == nil {
		return nil, errors.New("missing required argument 'S3BucketName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cloudWatchLogsGroupArn"] = nil
		inputs["cloudWatchLogsRoleArn"] = nil
		inputs["enableLogFileValidation"] = nil
		inputs["enableLogging"] = nil
		inputs["eventSelectors"] = nil
		inputs["includeGlobalServiceEvents"] = nil
		inputs["isMultiRegionTrail"] = nil
		inputs["kmsKeyId"] = nil
		inputs["name"] = nil
		inputs["s3BucketName"] = nil
		inputs["s3KeyPrefix"] = nil
		inputs["snsTopicName"] = nil
		inputs["tags"] = nil
	} else {
		inputs["cloudWatchLogsGroupArn"] = args.CloudWatchLogsGroupArn
		inputs["cloudWatchLogsRoleArn"] = args.CloudWatchLogsRoleArn
		inputs["enableLogFileValidation"] = args.EnableLogFileValidation
		inputs["enableLogging"] = args.EnableLogging
		inputs["eventSelectors"] = args.EventSelectors
		inputs["includeGlobalServiceEvents"] = args.IncludeGlobalServiceEvents
		inputs["isMultiRegionTrail"] = args.IsMultiRegionTrail
		inputs["kmsKeyId"] = args.KmsKeyId
		inputs["name"] = args.Name
		inputs["s3BucketName"] = args.S3BucketName
		inputs["s3KeyPrefix"] = args.S3KeyPrefix
		inputs["snsTopicName"] = args.SnsTopicName
		inputs["tags"] = args.Tags
	}
	inputs["arn"] = nil
	inputs["homeRegion"] = nil
	s, err := ctx.RegisterResource("aws:cloudtrail/trail:Trail", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Trail{s: s}, nil
}

// GetTrail gets an existing Trail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrail(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TrailState, opts ...pulumi.ResourceOpt) (*Trail, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["cloudWatchLogsGroupArn"] = state.CloudWatchLogsGroupArn
		inputs["cloudWatchLogsRoleArn"] = state.CloudWatchLogsRoleArn
		inputs["enableLogFileValidation"] = state.EnableLogFileValidation
		inputs["enableLogging"] = state.EnableLogging
		inputs["eventSelectors"] = state.EventSelectors
		inputs["homeRegion"] = state.HomeRegion
		inputs["includeGlobalServiceEvents"] = state.IncludeGlobalServiceEvents
		inputs["isMultiRegionTrail"] = state.IsMultiRegionTrail
		inputs["kmsKeyId"] = state.KmsKeyId
		inputs["name"] = state.Name
		inputs["s3BucketName"] = state.S3BucketName
		inputs["s3KeyPrefix"] = state.S3KeyPrefix
		inputs["snsTopicName"] = state.SnsTopicName
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("aws:cloudtrail/trail:Trail", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Trail{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Trail) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Trail) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The Amazon Resource Name of the trail.
func (r *Trail) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// Specifies a log group name using an Amazon Resource Name (ARN),
// that represents the log group to which CloudTrail logs will be delivered.
func (r *Trail) CloudWatchLogsGroupArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cloudWatchLogsGroupArn"])
}

// Specifies the role for the CloudWatch Logs
// endpoint to assume to write to a user’s log group.
func (r *Trail) CloudWatchLogsRoleArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cloudWatchLogsRoleArn"])
}

// Specifies whether log file integrity validation is enabled.
// Defaults to `false`.
func (r *Trail) EnableLogFileValidation() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableLogFileValidation"])
}

// Enables logging for the trail. Defaults to `true`.
// Setting this to `false` will pause logging.
func (r *Trail) EnableLogging() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableLogging"])
}

// Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these.
func (r *Trail) EventSelectors() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["eventSelectors"])
}

// The region in which the trail was created.
func (r *Trail) HomeRegion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["homeRegion"])
}

// Specifies whether the trail is publishing events
// from global services such as IAM to the log files. Defaults to `true`.
func (r *Trail) IncludeGlobalServiceEvents() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["includeGlobalServiceEvents"])
}

// Specifies whether the trail is created in the current
// region or in all regions. Defaults to `false`.
func (r *Trail) IsMultiRegionTrail() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isMultiRegionTrail"])
}

// Specifies the KMS key ARN to use to encrypt the logs delivered by CloudTrail.
func (r *Trail) KmsKeyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["kmsKeyId"])
}

// Specifies the name of the trail.
func (r *Trail) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the name of the S3 bucket designated for publishing log files.
func (r *Trail) S3BucketName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["s3BucketName"])
}

// Specifies the S3 key prefix that precedes
// the name of the bucket you have designated for log file delivery.
func (r *Trail) S3KeyPrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["s3KeyPrefix"])
}

// Specifies the name of the Amazon SNS topic
// defined for notification of log file delivery.
func (r *Trail) SnsTopicName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["snsTopicName"])
}

// A mapping of tags to assign to the trail
func (r *Trail) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Trail resources.
type TrailState struct {
	// The Amazon Resource Name of the trail.
	Arn interface{}
	// Specifies a log group name using an Amazon Resource Name (ARN),
	// that represents the log group to which CloudTrail logs will be delivered.
	CloudWatchLogsGroupArn interface{}
	// Specifies the role for the CloudWatch Logs
	// endpoint to assume to write to a user’s log group.
	CloudWatchLogsRoleArn interface{}
	// Specifies whether log file integrity validation is enabled.
	// Defaults to `false`.
	EnableLogFileValidation interface{}
	// Enables logging for the trail. Defaults to `true`.
	// Setting this to `false` will pause logging.
	EnableLogging interface{}
	// Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these.
	EventSelectors interface{}
	// The region in which the trail was created.
	HomeRegion interface{}
	// Specifies whether the trail is publishing events
	// from global services such as IAM to the log files. Defaults to `true`.
	IncludeGlobalServiceEvents interface{}
	// Specifies whether the trail is created in the current
	// region or in all regions. Defaults to `false`.
	IsMultiRegionTrail interface{}
	// Specifies the KMS key ARN to use to encrypt the logs delivered by CloudTrail.
	KmsKeyId interface{}
	// Specifies the name of the trail.
	Name interface{}
	// Specifies the name of the S3 bucket designated for publishing log files.
	S3BucketName interface{}
	// Specifies the S3 key prefix that precedes
	// the name of the bucket you have designated for log file delivery.
	S3KeyPrefix interface{}
	// Specifies the name of the Amazon SNS topic
	// defined for notification of log file delivery.
	SnsTopicName interface{}
	// A mapping of tags to assign to the trail
	Tags interface{}
}

// The set of arguments for constructing a Trail resource.
type TrailArgs struct {
	// Specifies a log group name using an Amazon Resource Name (ARN),
	// that represents the log group to which CloudTrail logs will be delivered.
	CloudWatchLogsGroupArn interface{}
	// Specifies the role for the CloudWatch Logs
	// endpoint to assume to write to a user’s log group.
	CloudWatchLogsRoleArn interface{}
	// Specifies whether log file integrity validation is enabled.
	// Defaults to `false`.
	EnableLogFileValidation interface{}
	// Enables logging for the trail. Defaults to `true`.
	// Setting this to `false` will pause logging.
	EnableLogging interface{}
	// Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these.
	EventSelectors interface{}
	// Specifies whether the trail is publishing events
	// from global services such as IAM to the log files. Defaults to `true`.
	IncludeGlobalServiceEvents interface{}
	// Specifies whether the trail is created in the current
	// region or in all regions. Defaults to `false`.
	IsMultiRegionTrail interface{}
	// Specifies the KMS key ARN to use to encrypt the logs delivered by CloudTrail.
	KmsKeyId interface{}
	// Specifies the name of the trail.
	Name interface{}
	// Specifies the name of the S3 bucket designated for publishing log files.
	S3BucketName interface{}
	// Specifies the S3 key prefix that precedes
	// the name of the bucket you have designated for log file delivery.
	S3KeyPrefix interface{}
	// Specifies the name of the Amazon SNS topic
	// defined for notification of log file delivery.
	SnsTopicName interface{}
	// A mapping of tags to assign to the trail
	Tags interface{}
}
