// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TrailAdvancedEventSelector struct {
	// Specifies the selector statements in an advanced event selector. Fields documented below.
	FieldSelectors []TrailAdvancedEventSelectorFieldSelector `pulumi:"fieldSelectors"`
	// Specifies the name of the advanced event selector.
	Name *string `pulumi:"name"`
}

// TrailAdvancedEventSelectorInput is an input type that accepts TrailAdvancedEventSelectorArgs and TrailAdvancedEventSelectorOutput values.
// You can construct a concrete instance of `TrailAdvancedEventSelectorInput` via:
//
//          TrailAdvancedEventSelectorArgs{...}
type TrailAdvancedEventSelectorInput interface {
	pulumi.Input

	ToTrailAdvancedEventSelectorOutput() TrailAdvancedEventSelectorOutput
	ToTrailAdvancedEventSelectorOutputWithContext(context.Context) TrailAdvancedEventSelectorOutput
}

type TrailAdvancedEventSelectorArgs struct {
	// Specifies the selector statements in an advanced event selector. Fields documented below.
	FieldSelectors TrailAdvancedEventSelectorFieldSelectorArrayInput `pulumi:"fieldSelectors"`
	// Specifies the name of the advanced event selector.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TrailAdvancedEventSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedEventSelector)(nil)).Elem()
}

func (i TrailAdvancedEventSelectorArgs) ToTrailAdvancedEventSelectorOutput() TrailAdvancedEventSelectorOutput {
	return i.ToTrailAdvancedEventSelectorOutputWithContext(context.Background())
}

func (i TrailAdvancedEventSelectorArgs) ToTrailAdvancedEventSelectorOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailAdvancedEventSelectorOutput)
}

// TrailAdvancedEventSelectorArrayInput is an input type that accepts TrailAdvancedEventSelectorArray and TrailAdvancedEventSelectorArrayOutput values.
// You can construct a concrete instance of `TrailAdvancedEventSelectorArrayInput` via:
//
//          TrailAdvancedEventSelectorArray{ TrailAdvancedEventSelectorArgs{...} }
type TrailAdvancedEventSelectorArrayInput interface {
	pulumi.Input

	ToTrailAdvancedEventSelectorArrayOutput() TrailAdvancedEventSelectorArrayOutput
	ToTrailAdvancedEventSelectorArrayOutputWithContext(context.Context) TrailAdvancedEventSelectorArrayOutput
}

type TrailAdvancedEventSelectorArray []TrailAdvancedEventSelectorInput

func (TrailAdvancedEventSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailAdvancedEventSelector)(nil)).Elem()
}

func (i TrailAdvancedEventSelectorArray) ToTrailAdvancedEventSelectorArrayOutput() TrailAdvancedEventSelectorArrayOutput {
	return i.ToTrailAdvancedEventSelectorArrayOutputWithContext(context.Background())
}

func (i TrailAdvancedEventSelectorArray) ToTrailAdvancedEventSelectorArrayOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailAdvancedEventSelectorArrayOutput)
}

type TrailAdvancedEventSelectorOutput struct{ *pulumi.OutputState }

func (TrailAdvancedEventSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedEventSelector)(nil)).Elem()
}

func (o TrailAdvancedEventSelectorOutput) ToTrailAdvancedEventSelectorOutput() TrailAdvancedEventSelectorOutput {
	return o
}

func (o TrailAdvancedEventSelectorOutput) ToTrailAdvancedEventSelectorOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorOutput {
	return o
}

// Specifies the selector statements in an advanced event selector. Fields documented below.
func (o TrailAdvancedEventSelectorOutput) FieldSelectors() TrailAdvancedEventSelectorFieldSelectorArrayOutput {
	return o.ApplyT(func(v TrailAdvancedEventSelector) []TrailAdvancedEventSelectorFieldSelector { return v.FieldSelectors }).(TrailAdvancedEventSelectorFieldSelectorArrayOutput)
}

// Specifies the name of the advanced event selector.
func (o TrailAdvancedEventSelectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrailAdvancedEventSelector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TrailAdvancedEventSelectorArrayOutput struct{ *pulumi.OutputState }

func (TrailAdvancedEventSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailAdvancedEventSelector)(nil)).Elem()
}

func (o TrailAdvancedEventSelectorArrayOutput) ToTrailAdvancedEventSelectorArrayOutput() TrailAdvancedEventSelectorArrayOutput {
	return o
}

func (o TrailAdvancedEventSelectorArrayOutput) ToTrailAdvancedEventSelectorArrayOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorArrayOutput {
	return o
}

func (o TrailAdvancedEventSelectorArrayOutput) Index(i pulumi.IntInput) TrailAdvancedEventSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailAdvancedEventSelector {
		return vs[0].([]TrailAdvancedEventSelector)[vs[1].(int)]
	}).(TrailAdvancedEventSelectorOutput)
}

type TrailAdvancedEventSelectorFieldSelector struct {
	// A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
	EndsWiths []string `pulumi:"endsWiths"`
	// A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
	Equals []string `pulumi:"equals"`
	// Specifies a field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
	Field string `pulumi:"field"`
	// A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
	NotEndsWiths []string `pulumi:"notEndsWiths"`
	// A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
	NotEquals []string `pulumi:"notEquals"`
	// A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
	NotStartsWiths []string `pulumi:"notStartsWiths"`
	// A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
	StartsWiths []string `pulumi:"startsWiths"`
}

// TrailAdvancedEventSelectorFieldSelectorInput is an input type that accepts TrailAdvancedEventSelectorFieldSelectorArgs and TrailAdvancedEventSelectorFieldSelectorOutput values.
// You can construct a concrete instance of `TrailAdvancedEventSelectorFieldSelectorInput` via:
//
//          TrailAdvancedEventSelectorFieldSelectorArgs{...}
type TrailAdvancedEventSelectorFieldSelectorInput interface {
	pulumi.Input

	ToTrailAdvancedEventSelectorFieldSelectorOutput() TrailAdvancedEventSelectorFieldSelectorOutput
	ToTrailAdvancedEventSelectorFieldSelectorOutputWithContext(context.Context) TrailAdvancedEventSelectorFieldSelectorOutput
}

type TrailAdvancedEventSelectorFieldSelectorArgs struct {
	// A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
	EndsWiths pulumi.StringArrayInput `pulumi:"endsWiths"`
	// A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
	Equals pulumi.StringArrayInput `pulumi:"equals"`
	// Specifies a field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
	Field pulumi.StringInput `pulumi:"field"`
	// A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
	NotEndsWiths pulumi.StringArrayInput `pulumi:"notEndsWiths"`
	// A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
	NotEquals pulumi.StringArrayInput `pulumi:"notEquals"`
	// A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
	NotStartsWiths pulumi.StringArrayInput `pulumi:"notStartsWiths"`
	// A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
	StartsWiths pulumi.StringArrayInput `pulumi:"startsWiths"`
}

func (TrailAdvancedEventSelectorFieldSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedEventSelectorFieldSelector)(nil)).Elem()
}

func (i TrailAdvancedEventSelectorFieldSelectorArgs) ToTrailAdvancedEventSelectorFieldSelectorOutput() TrailAdvancedEventSelectorFieldSelectorOutput {
	return i.ToTrailAdvancedEventSelectorFieldSelectorOutputWithContext(context.Background())
}

func (i TrailAdvancedEventSelectorFieldSelectorArgs) ToTrailAdvancedEventSelectorFieldSelectorOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorFieldSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailAdvancedEventSelectorFieldSelectorOutput)
}

// TrailAdvancedEventSelectorFieldSelectorArrayInput is an input type that accepts TrailAdvancedEventSelectorFieldSelectorArray and TrailAdvancedEventSelectorFieldSelectorArrayOutput values.
// You can construct a concrete instance of `TrailAdvancedEventSelectorFieldSelectorArrayInput` via:
//
//          TrailAdvancedEventSelectorFieldSelectorArray{ TrailAdvancedEventSelectorFieldSelectorArgs{...} }
type TrailAdvancedEventSelectorFieldSelectorArrayInput interface {
	pulumi.Input

	ToTrailAdvancedEventSelectorFieldSelectorArrayOutput() TrailAdvancedEventSelectorFieldSelectorArrayOutput
	ToTrailAdvancedEventSelectorFieldSelectorArrayOutputWithContext(context.Context) TrailAdvancedEventSelectorFieldSelectorArrayOutput
}

type TrailAdvancedEventSelectorFieldSelectorArray []TrailAdvancedEventSelectorFieldSelectorInput

func (TrailAdvancedEventSelectorFieldSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailAdvancedEventSelectorFieldSelector)(nil)).Elem()
}

func (i TrailAdvancedEventSelectorFieldSelectorArray) ToTrailAdvancedEventSelectorFieldSelectorArrayOutput() TrailAdvancedEventSelectorFieldSelectorArrayOutput {
	return i.ToTrailAdvancedEventSelectorFieldSelectorArrayOutputWithContext(context.Background())
}

func (i TrailAdvancedEventSelectorFieldSelectorArray) ToTrailAdvancedEventSelectorFieldSelectorArrayOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorFieldSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailAdvancedEventSelectorFieldSelectorArrayOutput)
}

type TrailAdvancedEventSelectorFieldSelectorOutput struct{ *pulumi.OutputState }

func (TrailAdvancedEventSelectorFieldSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedEventSelectorFieldSelector)(nil)).Elem()
}

func (o TrailAdvancedEventSelectorFieldSelectorOutput) ToTrailAdvancedEventSelectorFieldSelectorOutput() TrailAdvancedEventSelectorFieldSelectorOutput {
	return o
}

func (o TrailAdvancedEventSelectorFieldSelectorOutput) ToTrailAdvancedEventSelectorFieldSelectorOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorFieldSelectorOutput {
	return o
}

// A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) EndsWiths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.EndsWiths }).(pulumi.StringArrayOutput)
}

// A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) Equals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.Equals }).(pulumi.StringArrayOutput)
}

// Specifies a field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TrailAdvancedEventSelectorFieldSelector) string { return v.Field }).(pulumi.StringOutput)
}

// A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) NotEndsWiths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.NotEndsWiths }).(pulumi.StringArrayOutput)
}

// A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) NotEquals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.NotEquals }).(pulumi.StringArrayOutput)
}

// A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) NotStartsWiths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.NotStartsWiths }).(pulumi.StringArrayOutput)
}

// A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
func (o TrailAdvancedEventSelectorFieldSelectorOutput) StartsWiths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedEventSelectorFieldSelector) []string { return v.StartsWiths }).(pulumi.StringArrayOutput)
}

type TrailAdvancedEventSelectorFieldSelectorArrayOutput struct{ *pulumi.OutputState }

func (TrailAdvancedEventSelectorFieldSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailAdvancedEventSelectorFieldSelector)(nil)).Elem()
}

func (o TrailAdvancedEventSelectorFieldSelectorArrayOutput) ToTrailAdvancedEventSelectorFieldSelectorArrayOutput() TrailAdvancedEventSelectorFieldSelectorArrayOutput {
	return o
}

func (o TrailAdvancedEventSelectorFieldSelectorArrayOutput) ToTrailAdvancedEventSelectorFieldSelectorArrayOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorFieldSelectorArrayOutput {
	return o
}

func (o TrailAdvancedEventSelectorFieldSelectorArrayOutput) Index(i pulumi.IntInput) TrailAdvancedEventSelectorFieldSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailAdvancedEventSelectorFieldSelector {
		return vs[0].([]TrailAdvancedEventSelectorFieldSelector)[vs[1].(int)]
	}).(TrailAdvancedEventSelectorFieldSelectorOutput)
}

type TrailEventSelector struct {
	// Configuration block for data events. See details below.
	DataResources []TrailEventSelectorDataResource `pulumi:"dataResources"`
	// Whether to include management events for your trail.
	IncludeManagementEvents *bool `pulumi:"includeManagementEvents"`
	// Type of events to log. Valid values are `ReadOnly`, `WriteOnly`, `All`. Default value is `All`.
	ReadWriteType *string `pulumi:"readWriteType"`
}

// TrailEventSelectorInput is an input type that accepts TrailEventSelectorArgs and TrailEventSelectorOutput values.
// You can construct a concrete instance of `TrailEventSelectorInput` via:
//
//          TrailEventSelectorArgs{...}
type TrailEventSelectorInput interface {
	pulumi.Input

	ToTrailEventSelectorOutput() TrailEventSelectorOutput
	ToTrailEventSelectorOutputWithContext(context.Context) TrailEventSelectorOutput
}

type TrailEventSelectorArgs struct {
	// Configuration block for data events. See details below.
	DataResources TrailEventSelectorDataResourceArrayInput `pulumi:"dataResources"`
	// Whether to include management events for your trail.
	IncludeManagementEvents pulumi.BoolPtrInput `pulumi:"includeManagementEvents"`
	// Type of events to log. Valid values are `ReadOnly`, `WriteOnly`, `All`. Default value is `All`.
	ReadWriteType pulumi.StringPtrInput `pulumi:"readWriteType"`
}

func (TrailEventSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelector)(nil)).Elem()
}

func (i TrailEventSelectorArgs) ToTrailEventSelectorOutput() TrailEventSelectorOutput {
	return i.ToTrailEventSelectorOutputWithContext(context.Background())
}

func (i TrailEventSelectorArgs) ToTrailEventSelectorOutputWithContext(ctx context.Context) TrailEventSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorOutput)
}

// TrailEventSelectorArrayInput is an input type that accepts TrailEventSelectorArray and TrailEventSelectorArrayOutput values.
// You can construct a concrete instance of `TrailEventSelectorArrayInput` via:
//
//          TrailEventSelectorArray{ TrailEventSelectorArgs{...} }
type TrailEventSelectorArrayInput interface {
	pulumi.Input

	ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput
	ToTrailEventSelectorArrayOutputWithContext(context.Context) TrailEventSelectorArrayOutput
}

type TrailEventSelectorArray []TrailEventSelectorInput

func (TrailEventSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailEventSelector)(nil)).Elem()
}

func (i TrailEventSelectorArray) ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput {
	return i.ToTrailEventSelectorArrayOutputWithContext(context.Background())
}

func (i TrailEventSelectorArray) ToTrailEventSelectorArrayOutputWithContext(ctx context.Context) TrailEventSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorArrayOutput)
}

type TrailEventSelectorOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelector)(nil)).Elem()
}

func (o TrailEventSelectorOutput) ToTrailEventSelectorOutput() TrailEventSelectorOutput {
	return o
}

func (o TrailEventSelectorOutput) ToTrailEventSelectorOutputWithContext(ctx context.Context) TrailEventSelectorOutput {
	return o
}

// Configuration block for data events. See details below.
func (o TrailEventSelectorOutput) DataResources() TrailEventSelectorDataResourceArrayOutput {
	return o.ApplyT(func(v TrailEventSelector) []TrailEventSelectorDataResource { return v.DataResources }).(TrailEventSelectorDataResourceArrayOutput)
}

// Whether to include management events for your trail.
func (o TrailEventSelectorOutput) IncludeManagementEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrailEventSelector) *bool { return v.IncludeManagementEvents }).(pulumi.BoolPtrOutput)
}

// Type of events to log. Valid values are `ReadOnly`, `WriteOnly`, `All`. Default value is `All`.
func (o TrailEventSelectorOutput) ReadWriteType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrailEventSelector) *string { return v.ReadWriteType }).(pulumi.StringPtrOutput)
}

type TrailEventSelectorArrayOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailEventSelector)(nil)).Elem()
}

func (o TrailEventSelectorArrayOutput) ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput {
	return o
}

func (o TrailEventSelectorArrayOutput) ToTrailEventSelectorArrayOutputWithContext(ctx context.Context) TrailEventSelectorArrayOutput {
	return o
}

func (o TrailEventSelectorArrayOutput) Index(i pulumi.IntInput) TrailEventSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailEventSelector {
		return vs[0].([]TrailEventSelector)[vs[1].(int)]
	}).(TrailEventSelectorOutput)
}

type TrailEventSelectorDataResource struct {
	// Resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function" and "AWS::DynamoDB::Table".
	Type string `pulumi:"type"`
	// List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued `type`. For example, `arn:aws:s3:::<bucket name>/` for all objects in a bucket, `arn:aws:s3:::<bucket name>/key` for specific objects, `arn:aws:lambda` for all lambda events within an account, `arn:aws:lambda:<region>:<account number>:function:<function name>` for a specific Lambda function, `arn:aws:dynamodb` for all DDB events for all tables within an account, or `arn:aws:dynamodb:<region>:<account number>:table/<table name>` for a specific DynamoDB table.
	Values []string `pulumi:"values"`
}

// TrailEventSelectorDataResourceInput is an input type that accepts TrailEventSelectorDataResourceArgs and TrailEventSelectorDataResourceOutput values.
// You can construct a concrete instance of `TrailEventSelectorDataResourceInput` via:
//
//          TrailEventSelectorDataResourceArgs{...}
type TrailEventSelectorDataResourceInput interface {
	pulumi.Input

	ToTrailEventSelectorDataResourceOutput() TrailEventSelectorDataResourceOutput
	ToTrailEventSelectorDataResourceOutputWithContext(context.Context) TrailEventSelectorDataResourceOutput
}

type TrailEventSelectorDataResourceArgs struct {
	// Resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function" and "AWS::DynamoDB::Table".
	Type pulumi.StringInput `pulumi:"type"`
	// List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued `type`. For example, `arn:aws:s3:::<bucket name>/` for all objects in a bucket, `arn:aws:s3:::<bucket name>/key` for specific objects, `arn:aws:lambda` for all lambda events within an account, `arn:aws:lambda:<region>:<account number>:function:<function name>` for a specific Lambda function, `arn:aws:dynamodb` for all DDB events for all tables within an account, or `arn:aws:dynamodb:<region>:<account number>:table/<table name>` for a specific DynamoDB table.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (TrailEventSelectorDataResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelectorDataResource)(nil)).Elem()
}

func (i TrailEventSelectorDataResourceArgs) ToTrailEventSelectorDataResourceOutput() TrailEventSelectorDataResourceOutput {
	return i.ToTrailEventSelectorDataResourceOutputWithContext(context.Background())
}

func (i TrailEventSelectorDataResourceArgs) ToTrailEventSelectorDataResourceOutputWithContext(ctx context.Context) TrailEventSelectorDataResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorDataResourceOutput)
}

// TrailEventSelectorDataResourceArrayInput is an input type that accepts TrailEventSelectorDataResourceArray and TrailEventSelectorDataResourceArrayOutput values.
// You can construct a concrete instance of `TrailEventSelectorDataResourceArrayInput` via:
//
//          TrailEventSelectorDataResourceArray{ TrailEventSelectorDataResourceArgs{...} }
type TrailEventSelectorDataResourceArrayInput interface {
	pulumi.Input

	ToTrailEventSelectorDataResourceArrayOutput() TrailEventSelectorDataResourceArrayOutput
	ToTrailEventSelectorDataResourceArrayOutputWithContext(context.Context) TrailEventSelectorDataResourceArrayOutput
}

type TrailEventSelectorDataResourceArray []TrailEventSelectorDataResourceInput

func (TrailEventSelectorDataResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailEventSelectorDataResource)(nil)).Elem()
}

func (i TrailEventSelectorDataResourceArray) ToTrailEventSelectorDataResourceArrayOutput() TrailEventSelectorDataResourceArrayOutput {
	return i.ToTrailEventSelectorDataResourceArrayOutputWithContext(context.Background())
}

func (i TrailEventSelectorDataResourceArray) ToTrailEventSelectorDataResourceArrayOutputWithContext(ctx context.Context) TrailEventSelectorDataResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorDataResourceArrayOutput)
}

type TrailEventSelectorDataResourceOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorDataResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelectorDataResource)(nil)).Elem()
}

func (o TrailEventSelectorDataResourceOutput) ToTrailEventSelectorDataResourceOutput() TrailEventSelectorDataResourceOutput {
	return o
}

func (o TrailEventSelectorDataResourceOutput) ToTrailEventSelectorDataResourceOutputWithContext(ctx context.Context) TrailEventSelectorDataResourceOutput {
	return o
}

// Resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function" and "AWS::DynamoDB::Table".
func (o TrailEventSelectorDataResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TrailEventSelectorDataResource) string { return v.Type }).(pulumi.StringOutput)
}

// List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued `type`. For example, `arn:aws:s3:::<bucket name>/` for all objects in a bucket, `arn:aws:s3:::<bucket name>/key` for specific objects, `arn:aws:lambda` for all lambda events within an account, `arn:aws:lambda:<region>:<account number>:function:<function name>` for a specific Lambda function, `arn:aws:dynamodb` for all DDB events for all tables within an account, or `arn:aws:dynamodb:<region>:<account number>:table/<table name>` for a specific DynamoDB table.
func (o TrailEventSelectorDataResourceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailEventSelectorDataResource) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type TrailEventSelectorDataResourceArrayOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorDataResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailEventSelectorDataResource)(nil)).Elem()
}

func (o TrailEventSelectorDataResourceArrayOutput) ToTrailEventSelectorDataResourceArrayOutput() TrailEventSelectorDataResourceArrayOutput {
	return o
}

func (o TrailEventSelectorDataResourceArrayOutput) ToTrailEventSelectorDataResourceArrayOutputWithContext(ctx context.Context) TrailEventSelectorDataResourceArrayOutput {
	return o
}

func (o TrailEventSelectorDataResourceArrayOutput) Index(i pulumi.IntInput) TrailEventSelectorDataResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailEventSelectorDataResource {
		return vs[0].([]TrailEventSelectorDataResource)[vs[1].(int)]
	}).(TrailEventSelectorDataResourceOutput)
}

type TrailInsightSelector struct {
	// Type of insights to log on a trail. The valid value is `ApiCallRateInsight`.
	InsightType string `pulumi:"insightType"`
}

// TrailInsightSelectorInput is an input type that accepts TrailInsightSelectorArgs and TrailInsightSelectorOutput values.
// You can construct a concrete instance of `TrailInsightSelectorInput` via:
//
//          TrailInsightSelectorArgs{...}
type TrailInsightSelectorInput interface {
	pulumi.Input

	ToTrailInsightSelectorOutput() TrailInsightSelectorOutput
	ToTrailInsightSelectorOutputWithContext(context.Context) TrailInsightSelectorOutput
}

type TrailInsightSelectorArgs struct {
	// Type of insights to log on a trail. The valid value is `ApiCallRateInsight`.
	InsightType pulumi.StringInput `pulumi:"insightType"`
}

func (TrailInsightSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailInsightSelector)(nil)).Elem()
}

func (i TrailInsightSelectorArgs) ToTrailInsightSelectorOutput() TrailInsightSelectorOutput {
	return i.ToTrailInsightSelectorOutputWithContext(context.Background())
}

func (i TrailInsightSelectorArgs) ToTrailInsightSelectorOutputWithContext(ctx context.Context) TrailInsightSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailInsightSelectorOutput)
}

// TrailInsightSelectorArrayInput is an input type that accepts TrailInsightSelectorArray and TrailInsightSelectorArrayOutput values.
// You can construct a concrete instance of `TrailInsightSelectorArrayInput` via:
//
//          TrailInsightSelectorArray{ TrailInsightSelectorArgs{...} }
type TrailInsightSelectorArrayInput interface {
	pulumi.Input

	ToTrailInsightSelectorArrayOutput() TrailInsightSelectorArrayOutput
	ToTrailInsightSelectorArrayOutputWithContext(context.Context) TrailInsightSelectorArrayOutput
}

type TrailInsightSelectorArray []TrailInsightSelectorInput

func (TrailInsightSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailInsightSelector)(nil)).Elem()
}

func (i TrailInsightSelectorArray) ToTrailInsightSelectorArrayOutput() TrailInsightSelectorArrayOutput {
	return i.ToTrailInsightSelectorArrayOutputWithContext(context.Background())
}

func (i TrailInsightSelectorArray) ToTrailInsightSelectorArrayOutputWithContext(ctx context.Context) TrailInsightSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailInsightSelectorArrayOutput)
}

type TrailInsightSelectorOutput struct{ *pulumi.OutputState }

func (TrailInsightSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailInsightSelector)(nil)).Elem()
}

func (o TrailInsightSelectorOutput) ToTrailInsightSelectorOutput() TrailInsightSelectorOutput {
	return o
}

func (o TrailInsightSelectorOutput) ToTrailInsightSelectorOutputWithContext(ctx context.Context) TrailInsightSelectorOutput {
	return o
}

// Type of insights to log on a trail. The valid value is `ApiCallRateInsight`.
func (o TrailInsightSelectorOutput) InsightType() pulumi.StringOutput {
	return o.ApplyT(func(v TrailInsightSelector) string { return v.InsightType }).(pulumi.StringOutput)
}

type TrailInsightSelectorArrayOutput struct{ *pulumi.OutputState }

func (TrailInsightSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailInsightSelector)(nil)).Elem()
}

func (o TrailInsightSelectorArrayOutput) ToTrailInsightSelectorArrayOutput() TrailInsightSelectorArrayOutput {
	return o
}

func (o TrailInsightSelectorArrayOutput) ToTrailInsightSelectorArrayOutputWithContext(ctx context.Context) TrailInsightSelectorArrayOutput {
	return o
}

func (o TrailInsightSelectorArrayOutput) Index(i pulumi.IntInput) TrailInsightSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailInsightSelector {
		return vs[0].([]TrailInsightSelector)[vs[1].(int)]
	}).(TrailInsightSelectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrailAdvancedEventSelectorInput)(nil)).Elem(), TrailAdvancedEventSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailAdvancedEventSelectorArrayInput)(nil)).Elem(), TrailAdvancedEventSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailAdvancedEventSelectorFieldSelectorInput)(nil)).Elem(), TrailAdvancedEventSelectorFieldSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailAdvancedEventSelectorFieldSelectorArrayInput)(nil)).Elem(), TrailAdvancedEventSelectorFieldSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorInput)(nil)).Elem(), TrailEventSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorArrayInput)(nil)).Elem(), TrailEventSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorDataResourceInput)(nil)).Elem(), TrailEventSelectorDataResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorDataResourceArrayInput)(nil)).Elem(), TrailEventSelectorDataResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailInsightSelectorInput)(nil)).Elem(), TrailInsightSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailInsightSelectorArrayInput)(nil)).Elem(), TrailInsightSelectorArray{})
	pulumi.RegisterOutputType(TrailAdvancedEventSelectorOutput{})
	pulumi.RegisterOutputType(TrailAdvancedEventSelectorArrayOutput{})
	pulumi.RegisterOutputType(TrailAdvancedEventSelectorFieldSelectorOutput{})
	pulumi.RegisterOutputType(TrailAdvancedEventSelectorFieldSelectorArrayOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorArrayOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorDataResourceOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorDataResourceArrayOutput{})
	pulumi.RegisterOutputType(TrailInsightSelectorOutput{})
	pulumi.RegisterOutputType(TrailInsightSelectorArrayOutput{})
}
