// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package finspace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS FinSpace Kx Volume.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/finspace"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := finspace.NewKxVolume(ctx, "example", &finspace.KxVolumeArgs{
//				EnvironmentId:     pulumi.Any(aws_finspace_kx_environment.Example.Id),
//				AvailabilityZones: pulumi.StringArray("use1-az2"),
//				AzMode:            pulumi.String("SINGLE"),
//				Type:              pulumi.String("NAS_1"),
//				Nas1Configurations: finspace.KxVolumeNas1ConfigurationArray{
//					&finspace.KxVolumeNas1ConfigurationArgs{
//						Size: pulumi.Int(1200),
//						Type: pulumi.String("SSD_250"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import an AWS FinSpace Kx Volume using the `id` (environment ID and volume name, comma-delimited). For example:
//
// ```sh
//
//	$ pulumi import aws:finspace/kxVolume:KxVolume example n3ceo7wqxoxcti5tujqwzs,my-tf-kx-volume
//
// ```
type KxVolume struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) identifier of the KX volume.
	Arn              pulumi.StringOutput                `pulumi:"arn"`
	AttachedClusters KxVolumeAttachedClusterArrayOutput `pulumi:"attachedClusters"`
	// The identifier of the AWS Availability Zone IDs.
	//
	// The following arguments are optional:
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
	AzMode pulumi.StringOutput `pulumi:"azMode"`
	// The timestamp at which the volume was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
	CreatedTimestamp pulumi.StringOutput `pulumi:"createdTimestamp"`
	// Description of the volume.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A unique identifier for the kdb environment, whose clusters can attach to the volume.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// Last timestamp at which the volume was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	LastModifiedTimestamp pulumi.StringOutput `pulumi:"lastModifiedTimestamp"`
	// Unique name for the volumr that you want to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volumeType` is `NAS_1`. See `nas1Configuration` Argument Reference below.
	Nas1Configurations KxVolumeNas1ConfigurationArrayOutput `pulumi:"nas1Configurations"`
	// The status of volume creation.
	Status pulumi.StringOutput `pulumi:"status"`
	// The error message when a failed state occurs.
	StatusReason pulumi.StringOutput `pulumi:"statusReason"`
	// A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1Configuration`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewKxVolume registers a new resource with the given unique name, arguments, and options.
func NewKxVolume(ctx *pulumi.Context,
	name string, args *KxVolumeArgs, opts ...pulumi.ResourceOption) (*KxVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZones == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZones'")
	}
	if args.AzMode == nil {
		return nil, errors.New("invalid value for required argument 'AzMode'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KxVolume
	err := ctx.RegisterResource("aws:finspace/kxVolume:KxVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKxVolume gets an existing KxVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKxVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KxVolumeState, opts ...pulumi.ResourceOption) (*KxVolume, error) {
	var resource KxVolume
	err := ctx.ReadResource("aws:finspace/kxVolume:KxVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KxVolume resources.
type kxVolumeState struct {
	// Amazon Resource Name (ARN) identifier of the KX volume.
	Arn              *string                   `pulumi:"arn"`
	AttachedClusters []KxVolumeAttachedCluster `pulumi:"attachedClusters"`
	// The identifier of the AWS Availability Zone IDs.
	//
	// The following arguments are optional:
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
	AzMode *string `pulumi:"azMode"`
	// The timestamp at which the volume was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
	CreatedTimestamp *string `pulumi:"createdTimestamp"`
	// Description of the volume.
	Description *string `pulumi:"description"`
	// A unique identifier for the kdb environment, whose clusters can attach to the volume.
	EnvironmentId *string `pulumi:"environmentId"`
	// Last timestamp at which the volume was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	LastModifiedTimestamp *string `pulumi:"lastModifiedTimestamp"`
	// Unique name for the volumr that you want to create.
	Name *string `pulumi:"name"`
	// Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volumeType` is `NAS_1`. See `nas1Configuration` Argument Reference below.
	Nas1Configurations []KxVolumeNas1Configuration `pulumi:"nas1Configurations"`
	// The status of volume creation.
	Status *string `pulumi:"status"`
	// The error message when a failed state occurs.
	StatusReason *string `pulumi:"statusReason"`
	// A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1Configuration`.
	Type *string `pulumi:"type"`
}

type KxVolumeState struct {
	// Amazon Resource Name (ARN) identifier of the KX volume.
	Arn              pulumi.StringPtrInput
	AttachedClusters KxVolumeAttachedClusterArrayInput
	// The identifier of the AWS Availability Zone IDs.
	//
	// The following arguments are optional:
	AvailabilityZones pulumi.StringArrayInput
	// The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
	AzMode pulumi.StringPtrInput
	// The timestamp at which the volume was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
	CreatedTimestamp pulumi.StringPtrInput
	// Description of the volume.
	Description pulumi.StringPtrInput
	// A unique identifier for the kdb environment, whose clusters can attach to the volume.
	EnvironmentId pulumi.StringPtrInput
	// Last timestamp at which the volume was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	LastModifiedTimestamp pulumi.StringPtrInput
	// Unique name for the volumr that you want to create.
	Name pulumi.StringPtrInput
	// Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volumeType` is `NAS_1`. See `nas1Configuration` Argument Reference below.
	Nas1Configurations KxVolumeNas1ConfigurationArrayInput
	// The status of volume creation.
	Status pulumi.StringPtrInput
	// The error message when a failed state occurs.
	StatusReason pulumi.StringPtrInput
	// A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
	Tags pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1Configuration`.
	Type pulumi.StringPtrInput
}

func (KxVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*kxVolumeState)(nil)).Elem()
}

type kxVolumeArgs struct {
	// The identifier of the AWS Availability Zone IDs.
	//
	// The following arguments are optional:
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
	AzMode string `pulumi:"azMode"`
	// Description of the volume.
	Description *string `pulumi:"description"`
	// A unique identifier for the kdb environment, whose clusters can attach to the volume.
	EnvironmentId string `pulumi:"environmentId"`
	// Unique name for the volumr that you want to create.
	Name *string `pulumi:"name"`
	// Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volumeType` is `NAS_1`. See `nas1Configuration` Argument Reference below.
	Nas1Configurations []KxVolumeNas1Configuration `pulumi:"nas1Configurations"`
	// A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
	Tags map[string]string `pulumi:"tags"`
	// The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1Configuration`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a KxVolume resource.
type KxVolumeArgs struct {
	// The identifier of the AWS Availability Zone IDs.
	//
	// The following arguments are optional:
	AvailabilityZones pulumi.StringArrayInput
	// The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
	AzMode pulumi.StringInput
	// Description of the volume.
	Description pulumi.StringPtrInput
	// A unique identifier for the kdb environment, whose clusters can attach to the volume.
	EnvironmentId pulumi.StringInput
	// Unique name for the volumr that you want to create.
	Name pulumi.StringPtrInput
	// Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volumeType` is `NAS_1`. See `nas1Configuration` Argument Reference below.
	Nas1Configurations KxVolumeNas1ConfigurationArrayInput
	// A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
	Tags pulumi.StringMapInput
	// The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1Configuration`.
	Type pulumi.StringInput
}

func (KxVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kxVolumeArgs)(nil)).Elem()
}

type KxVolumeInput interface {
	pulumi.Input

	ToKxVolumeOutput() KxVolumeOutput
	ToKxVolumeOutputWithContext(ctx context.Context) KxVolumeOutput
}

func (*KxVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**KxVolume)(nil)).Elem()
}

func (i *KxVolume) ToKxVolumeOutput() KxVolumeOutput {
	return i.ToKxVolumeOutputWithContext(context.Background())
}

func (i *KxVolume) ToKxVolumeOutputWithContext(ctx context.Context) KxVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxVolumeOutput)
}

// KxVolumeArrayInput is an input type that accepts KxVolumeArray and KxVolumeArrayOutput values.
// You can construct a concrete instance of `KxVolumeArrayInput` via:
//
//	KxVolumeArray{ KxVolumeArgs{...} }
type KxVolumeArrayInput interface {
	pulumi.Input

	ToKxVolumeArrayOutput() KxVolumeArrayOutput
	ToKxVolumeArrayOutputWithContext(context.Context) KxVolumeArrayOutput
}

type KxVolumeArray []KxVolumeInput

func (KxVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KxVolume)(nil)).Elem()
}

func (i KxVolumeArray) ToKxVolumeArrayOutput() KxVolumeArrayOutput {
	return i.ToKxVolumeArrayOutputWithContext(context.Background())
}

func (i KxVolumeArray) ToKxVolumeArrayOutputWithContext(ctx context.Context) KxVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxVolumeArrayOutput)
}

// KxVolumeMapInput is an input type that accepts KxVolumeMap and KxVolumeMapOutput values.
// You can construct a concrete instance of `KxVolumeMapInput` via:
//
//	KxVolumeMap{ "key": KxVolumeArgs{...} }
type KxVolumeMapInput interface {
	pulumi.Input

	ToKxVolumeMapOutput() KxVolumeMapOutput
	ToKxVolumeMapOutputWithContext(context.Context) KxVolumeMapOutput
}

type KxVolumeMap map[string]KxVolumeInput

func (KxVolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KxVolume)(nil)).Elem()
}

func (i KxVolumeMap) ToKxVolumeMapOutput() KxVolumeMapOutput {
	return i.ToKxVolumeMapOutputWithContext(context.Background())
}

func (i KxVolumeMap) ToKxVolumeMapOutputWithContext(ctx context.Context) KxVolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxVolumeMapOutput)
}

type KxVolumeOutput struct{ *pulumi.OutputState }

func (KxVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KxVolume)(nil)).Elem()
}

func (o KxVolumeOutput) ToKxVolumeOutput() KxVolumeOutput {
	return o
}

func (o KxVolumeOutput) ToKxVolumeOutputWithContext(ctx context.Context) KxVolumeOutput {
	return o
}

// Amazon Resource Name (ARN) identifier of the KX volume.
func (o KxVolumeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o KxVolumeOutput) AttachedClusters() KxVolumeAttachedClusterArrayOutput {
	return o.ApplyT(func(v *KxVolume) KxVolumeAttachedClusterArrayOutput { return v.AttachedClusters }).(KxVolumeAttachedClusterArrayOutput)
}

// The identifier of the AWS Availability Zone IDs.
//
// The following arguments are optional:
func (o KxVolumeOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
func (o KxVolumeOutput) AzMode() pulumi.StringOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringOutput { return v.AzMode }).(pulumi.StringOutput)
}

// The timestamp at which the volume was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
func (o KxVolumeOutput) CreatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringOutput { return v.CreatedTimestamp }).(pulumi.StringOutput)
}

// Description of the volume.
func (o KxVolumeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A unique identifier for the kdb environment, whose clusters can attach to the volume.
func (o KxVolumeOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Last timestamp at which the volume was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
func (o KxVolumeOutput) LastModifiedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringOutput { return v.LastModifiedTimestamp }).(pulumi.StringOutput)
}

// Unique name for the volumr that you want to create.
func (o KxVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volumeType` is `NAS_1`. See `nas1Configuration` Argument Reference below.
func (o KxVolumeOutput) Nas1Configurations() KxVolumeNas1ConfigurationArrayOutput {
	return o.ApplyT(func(v *KxVolume) KxVolumeNas1ConfigurationArrayOutput { return v.Nas1Configurations }).(KxVolumeNas1ConfigurationArrayOutput)
}

// The status of volume creation.
func (o KxVolumeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The error message when a failed state occurs.
func (o KxVolumeOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringOutput { return v.StatusReason }).(pulumi.StringOutput)
}

// A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
func (o KxVolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o KxVolumeOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1Configuration`.
func (o KxVolumeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KxVolume) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type KxVolumeArrayOutput struct{ *pulumi.OutputState }

func (KxVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KxVolume)(nil)).Elem()
}

func (o KxVolumeArrayOutput) ToKxVolumeArrayOutput() KxVolumeArrayOutput {
	return o
}

func (o KxVolumeArrayOutput) ToKxVolumeArrayOutputWithContext(ctx context.Context) KxVolumeArrayOutput {
	return o
}

func (o KxVolumeArrayOutput) Index(i pulumi.IntInput) KxVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KxVolume {
		return vs[0].([]*KxVolume)[vs[1].(int)]
	}).(KxVolumeOutput)
}

type KxVolumeMapOutput struct{ *pulumi.OutputState }

func (KxVolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KxVolume)(nil)).Elem()
}

func (o KxVolumeMapOutput) ToKxVolumeMapOutput() KxVolumeMapOutput {
	return o
}

func (o KxVolumeMapOutput) ToKxVolumeMapOutputWithContext(ctx context.Context) KxVolumeMapOutput {
	return o
}

func (o KxVolumeMapOutput) MapIndex(k pulumi.StringInput) KxVolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KxVolume {
		return vs[0].(map[string]*KxVolume)[vs[1].(string)]
	}).(KxVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KxVolumeInput)(nil)).Elem(), &KxVolume{})
	pulumi.RegisterInputType(reflect.TypeOf((*KxVolumeArrayInput)(nil)).Elem(), KxVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KxVolumeMapInput)(nil)).Elem(), KxVolumeMap{})
	pulumi.RegisterOutputType(KxVolumeOutput{})
	pulumi.RegisterOutputType(KxVolumeArrayOutput{})
	pulumi.RegisterOutputType(KxVolumeMapOutput{})
}
