// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package finspace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS FinSpace Kx Cluster.
//
// ## Example Usage
//
// ## Import
//
// Using `pulumi import`, import an AWS FinSpace Kx Cluster using the `id` (environment ID and cluster name, comma-delimited). For example:
//
// ```sh
//
//	$ pulumi import aws:finspace/kxCluster:KxCluster example n3ceo7wqxoxcti5tujqwzs,my-tf-kx-cluster
//
// ```
type KxCluster struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) identifier of the KX cluster.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
	AutoScalingConfiguration KxClusterAutoScalingConfigurationPtrOutput `pulumi:"autoScalingConfiguration"`
	// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
	AvailabilityZoneId pulumi.StringPtrOutput `pulumi:"availabilityZoneId"`
	// The number of availability zones you want to assign per cluster. This can be one of the following:
	// * SINGLE - Assigns one availability zone per cluster.
	// * MULTI - Assigns all the availability zones per cluster.
	AzMode pulumi.StringOutput `pulumi:"azMode"`
	// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
	CacheStorageConfigurations KxClusterCacheStorageConfigurationArrayOutput `pulumi:"cacheStorageConfigurations"`
	// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
	CapacityConfiguration KxClusterCapacityConfigurationOutput `pulumi:"capacityConfiguration"`
	// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
	Code KxClusterCodePtrOutput `pulumi:"code"`
	// List of key-value pairs to make available inside the cluster.
	CommandLineArguments pulumi.StringMapOutput `pulumi:"commandLineArguments"`
	// Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	CreatedTimestamp pulumi.StringOutput `pulumi:"createdTimestamp"`
	// KX database that will be available for querying. Defined below.
	Databases KxClusterDatabaseArrayOutput `pulumi:"databases"`
	// Description of the cluster.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier for the KX environment.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
	ExecutionRole pulumi.StringPtrOutput `pulumi:"executionRole"`
	// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
	InitializationScript pulumi.StringPtrOutput `pulumi:"initializationScript"`
	// Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	LastModifiedTimestamp pulumi.StringOutput `pulumi:"lastModifiedTimestamp"`
	// Unique name for the cluster that you want to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Version of FinSpace Managed kdb to run.
	ReleaseLabel pulumi.StringOutput `pulumi:"releaseLabel"`
	// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
	SavedownStorageConfiguration KxClusterSavedownStorageConfigurationPtrOutput `pulumi:"savedownStorageConfiguration"`
	Status                       pulumi.StringOutput                            `pulumi:"status"`
	StatusReason                 pulumi.StringOutput                            `pulumi:"statusReason"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type pulumi.StringOutput `pulumi:"type"`
	// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
	//
	// The following arguments are optional:
	VpcConfiguration KxClusterVpcConfigurationOutput `pulumi:"vpcConfiguration"`
}

// NewKxCluster registers a new resource with the given unique name, arguments, and options.
func NewKxCluster(ctx *pulumi.Context,
	name string, args *KxClusterArgs, opts ...pulumi.ResourceOption) (*KxCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AzMode == nil {
		return nil, errors.New("invalid value for required argument 'AzMode'")
	}
	if args.CapacityConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'CapacityConfiguration'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.ReleaseLabel == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseLabel'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.VpcConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'VpcConfiguration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KxCluster
	err := ctx.RegisterResource("aws:finspace/kxCluster:KxCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKxCluster gets an existing KxCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKxCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KxClusterState, opts ...pulumi.ResourceOption) (*KxCluster, error) {
	var resource KxCluster
	err := ctx.ReadResource("aws:finspace/kxCluster:KxCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KxCluster resources.
type kxClusterState struct {
	// Amazon Resource Name (ARN) identifier of the KX cluster.
	Arn *string `pulumi:"arn"`
	// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
	AutoScalingConfiguration *KxClusterAutoScalingConfiguration `pulumi:"autoScalingConfiguration"`
	// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// The number of availability zones you want to assign per cluster. This can be one of the following:
	// * SINGLE - Assigns one availability zone per cluster.
	// * MULTI - Assigns all the availability zones per cluster.
	AzMode *string `pulumi:"azMode"`
	// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
	CacheStorageConfigurations []KxClusterCacheStorageConfiguration `pulumi:"cacheStorageConfigurations"`
	// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
	CapacityConfiguration *KxClusterCapacityConfiguration `pulumi:"capacityConfiguration"`
	// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
	Code *KxClusterCode `pulumi:"code"`
	// List of key-value pairs to make available inside the cluster.
	CommandLineArguments map[string]string `pulumi:"commandLineArguments"`
	// Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	CreatedTimestamp *string `pulumi:"createdTimestamp"`
	// KX database that will be available for querying. Defined below.
	Databases []KxClusterDatabase `pulumi:"databases"`
	// Description of the cluster.
	Description *string `pulumi:"description"`
	// Unique identifier for the KX environment.
	EnvironmentId *string `pulumi:"environmentId"`
	// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
	ExecutionRole *string `pulumi:"executionRole"`
	// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
	InitializationScript *string `pulumi:"initializationScript"`
	// Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	LastModifiedTimestamp *string `pulumi:"lastModifiedTimestamp"`
	// Unique name for the cluster that you want to create.
	Name *string `pulumi:"name"`
	// Version of FinSpace Managed kdb to run.
	ReleaseLabel *string `pulumi:"releaseLabel"`
	// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
	SavedownStorageConfiguration *KxClusterSavedownStorageConfiguration `pulumi:"savedownStorageConfiguration"`
	Status                       *string                                `pulumi:"status"`
	StatusReason                 *string                                `pulumi:"statusReason"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type *string `pulumi:"type"`
	// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
	//
	// The following arguments are optional:
	VpcConfiguration *KxClusterVpcConfiguration `pulumi:"vpcConfiguration"`
}

type KxClusterState struct {
	// Amazon Resource Name (ARN) identifier of the KX cluster.
	Arn pulumi.StringPtrInput
	// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
	AutoScalingConfiguration KxClusterAutoScalingConfigurationPtrInput
	// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
	AvailabilityZoneId pulumi.StringPtrInput
	// The number of availability zones you want to assign per cluster. This can be one of the following:
	// * SINGLE - Assigns one availability zone per cluster.
	// * MULTI - Assigns all the availability zones per cluster.
	AzMode pulumi.StringPtrInput
	// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
	CacheStorageConfigurations KxClusterCacheStorageConfigurationArrayInput
	// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
	CapacityConfiguration KxClusterCapacityConfigurationPtrInput
	// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
	Code KxClusterCodePtrInput
	// List of key-value pairs to make available inside the cluster.
	CommandLineArguments pulumi.StringMapInput
	// Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	CreatedTimestamp pulumi.StringPtrInput
	// KX database that will be available for querying. Defined below.
	Databases KxClusterDatabaseArrayInput
	// Description of the cluster.
	Description pulumi.StringPtrInput
	// Unique identifier for the KX environment.
	EnvironmentId pulumi.StringPtrInput
	// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
	ExecutionRole pulumi.StringPtrInput
	// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
	InitializationScript pulumi.StringPtrInput
	// Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
	LastModifiedTimestamp pulumi.StringPtrInput
	// Unique name for the cluster that you want to create.
	Name pulumi.StringPtrInput
	// Version of FinSpace Managed kdb to run.
	ReleaseLabel pulumi.StringPtrInput
	// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
	SavedownStorageConfiguration KxClusterSavedownStorageConfigurationPtrInput
	Status                       pulumi.StringPtrInput
	StatusReason                 pulumi.StringPtrInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type pulumi.StringPtrInput
	// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
	//
	// The following arguments are optional:
	VpcConfiguration KxClusterVpcConfigurationPtrInput
}

func (KxClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*kxClusterState)(nil)).Elem()
}

type kxClusterArgs struct {
	// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
	AutoScalingConfiguration *KxClusterAutoScalingConfiguration `pulumi:"autoScalingConfiguration"`
	// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// The number of availability zones you want to assign per cluster. This can be one of the following:
	// * SINGLE - Assigns one availability zone per cluster.
	// * MULTI - Assigns all the availability zones per cluster.
	AzMode string `pulumi:"azMode"`
	// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
	CacheStorageConfigurations []KxClusterCacheStorageConfiguration `pulumi:"cacheStorageConfigurations"`
	// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
	CapacityConfiguration KxClusterCapacityConfiguration `pulumi:"capacityConfiguration"`
	// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
	Code *KxClusterCode `pulumi:"code"`
	// List of key-value pairs to make available inside the cluster.
	CommandLineArguments map[string]string `pulumi:"commandLineArguments"`
	// KX database that will be available for querying. Defined below.
	Databases []KxClusterDatabase `pulumi:"databases"`
	// Description of the cluster.
	Description *string `pulumi:"description"`
	// Unique identifier for the KX environment.
	EnvironmentId string `pulumi:"environmentId"`
	// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
	ExecutionRole *string `pulumi:"executionRole"`
	// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
	InitializationScript *string `pulumi:"initializationScript"`
	// Unique name for the cluster that you want to create.
	Name *string `pulumi:"name"`
	// Version of FinSpace Managed kdb to run.
	ReleaseLabel string `pulumi:"releaseLabel"`
	// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
	SavedownStorageConfiguration *KxClusterSavedownStorageConfiguration `pulumi:"savedownStorageConfiguration"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type string `pulumi:"type"`
	// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
	//
	// The following arguments are optional:
	VpcConfiguration KxClusterVpcConfiguration `pulumi:"vpcConfiguration"`
}

// The set of arguments for constructing a KxCluster resource.
type KxClusterArgs struct {
	// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
	AutoScalingConfiguration KxClusterAutoScalingConfigurationPtrInput
	// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
	AvailabilityZoneId pulumi.StringPtrInput
	// The number of availability zones you want to assign per cluster. This can be one of the following:
	// * SINGLE - Assigns one availability zone per cluster.
	// * MULTI - Assigns all the availability zones per cluster.
	AzMode pulumi.StringInput
	// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
	CacheStorageConfigurations KxClusterCacheStorageConfigurationArrayInput
	// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
	CapacityConfiguration KxClusterCapacityConfigurationInput
	// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
	Code KxClusterCodePtrInput
	// List of key-value pairs to make available inside the cluster.
	CommandLineArguments pulumi.StringMapInput
	// KX database that will be available for querying. Defined below.
	Databases KxClusterDatabaseArrayInput
	// Description of the cluster.
	Description pulumi.StringPtrInput
	// Unique identifier for the KX environment.
	EnvironmentId pulumi.StringInput
	// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
	ExecutionRole pulumi.StringPtrInput
	// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
	InitializationScript pulumi.StringPtrInput
	// Unique name for the cluster that you want to create.
	Name pulumi.StringPtrInput
	// Version of FinSpace Managed kdb to run.
	ReleaseLabel pulumi.StringInput
	// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
	SavedownStorageConfiguration KxClusterSavedownStorageConfigurationPtrInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type pulumi.StringInput
	// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
	//
	// The following arguments are optional:
	VpcConfiguration KxClusterVpcConfigurationInput
}

func (KxClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kxClusterArgs)(nil)).Elem()
}

type KxClusterInput interface {
	pulumi.Input

	ToKxClusterOutput() KxClusterOutput
	ToKxClusterOutputWithContext(ctx context.Context) KxClusterOutput
}

func (*KxCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**KxCluster)(nil)).Elem()
}

func (i *KxCluster) ToKxClusterOutput() KxClusterOutput {
	return i.ToKxClusterOutputWithContext(context.Background())
}

func (i *KxCluster) ToKxClusterOutputWithContext(ctx context.Context) KxClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxClusterOutput)
}

// KxClusterArrayInput is an input type that accepts KxClusterArray and KxClusterArrayOutput values.
// You can construct a concrete instance of `KxClusterArrayInput` via:
//
//	KxClusterArray{ KxClusterArgs{...} }
type KxClusterArrayInput interface {
	pulumi.Input

	ToKxClusterArrayOutput() KxClusterArrayOutput
	ToKxClusterArrayOutputWithContext(context.Context) KxClusterArrayOutput
}

type KxClusterArray []KxClusterInput

func (KxClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KxCluster)(nil)).Elem()
}

func (i KxClusterArray) ToKxClusterArrayOutput() KxClusterArrayOutput {
	return i.ToKxClusterArrayOutputWithContext(context.Background())
}

func (i KxClusterArray) ToKxClusterArrayOutputWithContext(ctx context.Context) KxClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxClusterArrayOutput)
}

// KxClusterMapInput is an input type that accepts KxClusterMap and KxClusterMapOutput values.
// You can construct a concrete instance of `KxClusterMapInput` via:
//
//	KxClusterMap{ "key": KxClusterArgs{...} }
type KxClusterMapInput interface {
	pulumi.Input

	ToKxClusterMapOutput() KxClusterMapOutput
	ToKxClusterMapOutputWithContext(context.Context) KxClusterMapOutput
}

type KxClusterMap map[string]KxClusterInput

func (KxClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KxCluster)(nil)).Elem()
}

func (i KxClusterMap) ToKxClusterMapOutput() KxClusterMapOutput {
	return i.ToKxClusterMapOutputWithContext(context.Background())
}

func (i KxClusterMap) ToKxClusterMapOutputWithContext(ctx context.Context) KxClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxClusterMapOutput)
}

type KxClusterOutput struct{ *pulumi.OutputState }

func (KxClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KxCluster)(nil)).Elem()
}

func (o KxClusterOutput) ToKxClusterOutput() KxClusterOutput {
	return o
}

func (o KxClusterOutput) ToKxClusterOutputWithContext(ctx context.Context) KxClusterOutput {
	return o
}

// Amazon Resource Name (ARN) identifier of the KX cluster.
func (o KxClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
func (o KxClusterOutput) AutoScalingConfiguration() KxClusterAutoScalingConfigurationPtrOutput {
	return o.ApplyT(func(v *KxCluster) KxClusterAutoScalingConfigurationPtrOutput { return v.AutoScalingConfiguration }).(KxClusterAutoScalingConfigurationPtrOutput)
}

// The availability zone identifiers for the requested regions. Required when `azMode` is set to SINGLE.
func (o KxClusterOutput) AvailabilityZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringPtrOutput { return v.AvailabilityZoneId }).(pulumi.StringPtrOutput)
}

// The number of availability zones you want to assign per cluster. This can be one of the following:
// * SINGLE - Assigns one availability zone per cluster.
// * MULTI - Assigns all the availability zones per cluster.
func (o KxClusterOutput) AzMode() pulumi.StringOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringOutput { return v.AzMode }).(pulumi.StringOutput)
}

// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
func (o KxClusterOutput) CacheStorageConfigurations() KxClusterCacheStorageConfigurationArrayOutput {
	return o.ApplyT(func(v *KxCluster) KxClusterCacheStorageConfigurationArrayOutput { return v.CacheStorageConfigurations }).(KxClusterCacheStorageConfigurationArrayOutput)
}

// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
func (o KxClusterOutput) CapacityConfiguration() KxClusterCapacityConfigurationOutput {
	return o.ApplyT(func(v *KxCluster) KxClusterCapacityConfigurationOutput { return v.CapacityConfiguration }).(KxClusterCapacityConfigurationOutput)
}

// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
func (o KxClusterOutput) Code() KxClusterCodePtrOutput {
	return o.ApplyT(func(v *KxCluster) KxClusterCodePtrOutput { return v.Code }).(KxClusterCodePtrOutput)
}

// List of key-value pairs to make available inside the cluster.
func (o KxClusterOutput) CommandLineArguments() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringMapOutput { return v.CommandLineArguments }).(pulumi.StringMapOutput)
}

// Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
func (o KxClusterOutput) CreatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringOutput { return v.CreatedTimestamp }).(pulumi.StringOutput)
}

// KX database that will be available for querying. Defined below.
func (o KxClusterOutput) Databases() KxClusterDatabaseArrayOutput {
	return o.ApplyT(func(v *KxCluster) KxClusterDatabaseArrayOutput { return v.Databases }).(KxClusterDatabaseArrayOutput)
}

// Description of the cluster.
func (o KxClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the KX environment.
func (o KxClusterOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
func (o KxClusterOutput) ExecutionRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringPtrOutput { return v.ExecutionRole }).(pulumi.StringPtrOutput)
}

// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
func (o KxClusterOutput) InitializationScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringPtrOutput { return v.InitializationScript }).(pulumi.StringPtrOutput)
}

// Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
func (o KxClusterOutput) LastModifiedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringOutput { return v.LastModifiedTimestamp }).(pulumi.StringOutput)
}

// Unique name for the cluster that you want to create.
func (o KxClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Version of FinSpace Managed kdb to run.
func (o KxClusterOutput) ReleaseLabel() pulumi.StringOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringOutput { return v.ReleaseLabel }).(pulumi.StringOutput)
}

// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
func (o KxClusterOutput) SavedownStorageConfiguration() KxClusterSavedownStorageConfigurationPtrOutput {
	return o.ApplyT(func(v *KxCluster) KxClusterSavedownStorageConfigurationPtrOutput {
		return v.SavedownStorageConfiguration
	}).(KxClusterSavedownStorageConfigurationPtrOutput)
}

func (o KxClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o KxClusterOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringOutput { return v.StatusReason }).(pulumi.StringOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o KxClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o KxClusterOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Type of KDB database. The following types are available:
// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
func (o KxClusterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KxCluster) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
//
// The following arguments are optional:
func (o KxClusterOutput) VpcConfiguration() KxClusterVpcConfigurationOutput {
	return o.ApplyT(func(v *KxCluster) KxClusterVpcConfigurationOutput { return v.VpcConfiguration }).(KxClusterVpcConfigurationOutput)
}

type KxClusterArrayOutput struct{ *pulumi.OutputState }

func (KxClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KxCluster)(nil)).Elem()
}

func (o KxClusterArrayOutput) ToKxClusterArrayOutput() KxClusterArrayOutput {
	return o
}

func (o KxClusterArrayOutput) ToKxClusterArrayOutputWithContext(ctx context.Context) KxClusterArrayOutput {
	return o
}

func (o KxClusterArrayOutput) Index(i pulumi.IntInput) KxClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KxCluster {
		return vs[0].([]*KxCluster)[vs[1].(int)]
	}).(KxClusterOutput)
}

type KxClusterMapOutput struct{ *pulumi.OutputState }

func (KxClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KxCluster)(nil)).Elem()
}

func (o KxClusterMapOutput) ToKxClusterMapOutput() KxClusterMapOutput {
	return o
}

func (o KxClusterMapOutput) ToKxClusterMapOutputWithContext(ctx context.Context) KxClusterMapOutput {
	return o
}

func (o KxClusterMapOutput) MapIndex(k pulumi.StringInput) KxClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KxCluster {
		return vs[0].(map[string]*KxCluster)[vs[1].(string)]
	}).(KxClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KxClusterInput)(nil)).Elem(), &KxCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*KxClusterArrayInput)(nil)).Elem(), KxClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KxClusterMapInput)(nil)).Elem(), KxClusterMap{})
	pulumi.RegisterOutputType(KxClusterOutput{})
	pulumi.RegisterOutputType(KxClusterArrayOutput{})
	pulumi.RegisterOutputType(KxClusterMapOutput{})
}
