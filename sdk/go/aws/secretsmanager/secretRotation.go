// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecretRotation struct {
	pulumi.CustomResourceState

	RotationEnabled   pulumi.BoolOutput                 `pulumi:"rotationEnabled"`
	RotationLambdaArn pulumi.StringOutput               `pulumi:"rotationLambdaArn"`
	RotationRules     SecretRotationRotationRulesOutput `pulumi:"rotationRules"`
	SecretId          pulumi.StringOutput               `pulumi:"secretId"`
}

// NewSecretRotation registers a new resource with the given unique name, arguments, and options.
func NewSecretRotation(ctx *pulumi.Context,
	name string, args *SecretRotationArgs, opts ...pulumi.ResourceOption) (*SecretRotation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RotationLambdaArn == nil {
		return nil, errors.New("invalid value for required argument 'RotationLambdaArn'")
	}
	if args.RotationRules == nil {
		return nil, errors.New("invalid value for required argument 'RotationRules'")
	}
	if args.SecretId == nil {
		return nil, errors.New("invalid value for required argument 'SecretId'")
	}
	var resource SecretRotation
	err := ctx.RegisterResource("aws:secretsmanager/secretRotation:SecretRotation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretRotation gets an existing SecretRotation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretRotation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretRotationState, opts ...pulumi.ResourceOption) (*SecretRotation, error) {
	var resource SecretRotation
	err := ctx.ReadResource("aws:secretsmanager/secretRotation:SecretRotation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretRotation resources.
type secretRotationState struct {
	RotationEnabled   *bool                        `pulumi:"rotationEnabled"`
	RotationLambdaArn *string                      `pulumi:"rotationLambdaArn"`
	RotationRules     *SecretRotationRotationRules `pulumi:"rotationRules"`
	SecretId          *string                      `pulumi:"secretId"`
}

type SecretRotationState struct {
	RotationEnabled   pulumi.BoolPtrInput
	RotationLambdaArn pulumi.StringPtrInput
	RotationRules     SecretRotationRotationRulesPtrInput
	SecretId          pulumi.StringPtrInput
}

func (SecretRotationState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationState)(nil)).Elem()
}

type secretRotationArgs struct {
	RotationLambdaArn string                      `pulumi:"rotationLambdaArn"`
	RotationRules     SecretRotationRotationRules `pulumi:"rotationRules"`
	SecretId          string                      `pulumi:"secretId"`
}

// The set of arguments for constructing a SecretRotation resource.
type SecretRotationArgs struct {
	RotationLambdaArn pulumi.StringInput
	RotationRules     SecretRotationRotationRulesInput
	SecretId          pulumi.StringInput
}

func (SecretRotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretRotationArgs)(nil)).Elem()
}

type SecretRotationInput interface {
	pulumi.Input

	ToSecretRotationOutput() SecretRotationOutput
	ToSecretRotationOutputWithContext(ctx context.Context) SecretRotationOutput
}

func (*SecretRotation) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotation)(nil)).Elem()
}

func (i *SecretRotation) ToSecretRotationOutput() SecretRotationOutput {
	return i.ToSecretRotationOutputWithContext(context.Background())
}

func (i *SecretRotation) ToSecretRotationOutputWithContext(ctx context.Context) SecretRotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationOutput)
}

// SecretRotationArrayInput is an input type that accepts SecretRotationArray and SecretRotationArrayOutput values.
// You can construct a concrete instance of `SecretRotationArrayInput` via:
//
//	SecretRotationArray{ SecretRotationArgs{...} }
type SecretRotationArrayInput interface {
	pulumi.Input

	ToSecretRotationArrayOutput() SecretRotationArrayOutput
	ToSecretRotationArrayOutputWithContext(context.Context) SecretRotationArrayOutput
}

type SecretRotationArray []SecretRotationInput

func (SecretRotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotation)(nil)).Elem()
}

func (i SecretRotationArray) ToSecretRotationArrayOutput() SecretRotationArrayOutput {
	return i.ToSecretRotationArrayOutputWithContext(context.Background())
}

func (i SecretRotationArray) ToSecretRotationArrayOutputWithContext(ctx context.Context) SecretRotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationArrayOutput)
}

// SecretRotationMapInput is an input type that accepts SecretRotationMap and SecretRotationMapOutput values.
// You can construct a concrete instance of `SecretRotationMapInput` via:
//
//	SecretRotationMap{ "key": SecretRotationArgs{...} }
type SecretRotationMapInput interface {
	pulumi.Input

	ToSecretRotationMapOutput() SecretRotationMapOutput
	ToSecretRotationMapOutputWithContext(context.Context) SecretRotationMapOutput
}

type SecretRotationMap map[string]SecretRotationInput

func (SecretRotationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotation)(nil)).Elem()
}

func (i SecretRotationMap) ToSecretRotationMapOutput() SecretRotationMapOutput {
	return i.ToSecretRotationMapOutputWithContext(context.Background())
}

func (i SecretRotationMap) ToSecretRotationMapOutputWithContext(ctx context.Context) SecretRotationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationMapOutput)
}

type SecretRotationOutput struct{ *pulumi.OutputState }

func (SecretRotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretRotation)(nil)).Elem()
}

func (o SecretRotationOutput) ToSecretRotationOutput() SecretRotationOutput {
	return o
}

func (o SecretRotationOutput) ToSecretRotationOutputWithContext(ctx context.Context) SecretRotationOutput {
	return o
}

func (o SecretRotationOutput) RotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretRotation) pulumi.BoolOutput { return v.RotationEnabled }).(pulumi.BoolOutput)
}

func (o SecretRotationOutput) RotationLambdaArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotation) pulumi.StringOutput { return v.RotationLambdaArn }).(pulumi.StringOutput)
}

func (o SecretRotationOutput) RotationRules() SecretRotationRotationRulesOutput {
	return o.ApplyT(func(v *SecretRotation) SecretRotationRotationRulesOutput { return v.RotationRules }).(SecretRotationRotationRulesOutput)
}

func (o SecretRotationOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretRotation) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

type SecretRotationArrayOutput struct{ *pulumi.OutputState }

func (SecretRotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretRotation)(nil)).Elem()
}

func (o SecretRotationArrayOutput) ToSecretRotationArrayOutput() SecretRotationArrayOutput {
	return o
}

func (o SecretRotationArrayOutput) ToSecretRotationArrayOutputWithContext(ctx context.Context) SecretRotationArrayOutput {
	return o
}

func (o SecretRotationArrayOutput) Index(i pulumi.IntInput) SecretRotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretRotation {
		return vs[0].([]*SecretRotation)[vs[1].(int)]
	}).(SecretRotationOutput)
}

type SecretRotationMapOutput struct{ *pulumi.OutputState }

func (SecretRotationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretRotation)(nil)).Elem()
}

func (o SecretRotationMapOutput) ToSecretRotationMapOutput() SecretRotationMapOutput {
	return o
}

func (o SecretRotationMapOutput) ToSecretRotationMapOutputWithContext(ctx context.Context) SecretRotationMapOutput {
	return o
}

func (o SecretRotationMapOutput) MapIndex(k pulumi.StringInput) SecretRotationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretRotation {
		return vs[0].(map[string]*SecretRotation)[vs[1].(string)]
	}).(SecretRotationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationInput)(nil)).Elem(), &SecretRotation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationArrayInput)(nil)).Elem(), SecretRotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretRotationMapInput)(nil)).Elem(), SecretRotationMap{})
	pulumi.RegisterOutputType(SecretRotationOutput{})
	pulumi.RegisterOutputType(SecretRotationArrayOutput{})
	pulumi.RegisterOutputType(SecretRotationMapOutput{})
}
