// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dsql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an Amazon Aurora DSQL Cluster Peering.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/dsql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example1, err := dsql.NewCluster(ctx, "example_1", &dsql.ClusterArgs{
//				MultiRegionProperties: &dsql.ClusterMultiRegionPropertiesArgs{
//					WitnessRegion: pulumi.String("us-west-2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example2, err := dsql.NewCluster(ctx, "example_2", &dsql.ClusterArgs{
//				MultiRegionProperties: &dsql.ClusterMultiRegionPropertiesArgs{
//					WitnessRegion: pulumi.String("us-west-2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dsql.NewClusterPeering(ctx, "example_1", &dsql.ClusterPeeringArgs{
//				Identifier: example1.Identifier,
//				Clusters: pulumi.StringArray{
//					example2.Arn,
//				},
//				WitnessRegion: pulumi.String(example1.MultiRegionProperties.ApplyT(func(multiRegionProperties dsql.ClusterMultiRegionProperties) (*string, error) {
//					return &multiRegionProperties.WitnessRegion, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dsql.NewClusterPeering(ctx, "example_2", &dsql.ClusterPeeringArgs{
//				Identifier: example2.Identifier,
//				Clusters: pulumi.StringArray{
//					example1.Arn,
//				},
//				WitnessRegion: pulumi.String(example2.MultiRegionProperties.ApplyT(func(multiRegionProperties dsql.ClusterMultiRegionProperties) (*string, error) {
//					return &multiRegionProperties.WitnessRegion, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import DSQL Cluster Peering using the `identifier`. For example:
//
// ```sh
// $ pulumi import aws:dsql/clusterPeering:ClusterPeering example cluster-id-12345678
// ```
type ClusterPeering struct {
	pulumi.CustomResourceState

	// List of DSQL Cluster ARNs to be peered to this cluster.
	Clusters pulumi.StringArrayOutput `pulumi:"clusters"`
	// DSQL Cluster Identifier.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   pulumi.StringOutput             `pulumi:"region"`
	Timeouts ClusterPeeringTimeoutsPtrOutput `pulumi:"timeouts"`
	// Witness region for a multi-region cluster.
	WitnessRegion pulumi.StringOutput `pulumi:"witnessRegion"`
}

// NewClusterPeering registers a new resource with the given unique name, arguments, and options.
func NewClusterPeering(ctx *pulumi.Context,
	name string, args *ClusterPeeringArgs, opts ...pulumi.ResourceOption) (*ClusterPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Clusters == nil {
		return nil, errors.New("invalid value for required argument 'Clusters'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.WitnessRegion == nil {
		return nil, errors.New("invalid value for required argument 'WitnessRegion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterPeering
	err := ctx.RegisterResource("aws:dsql/clusterPeering:ClusterPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterPeering gets an existing ClusterPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterPeeringState, opts ...pulumi.ResourceOption) (*ClusterPeering, error) {
	var resource ClusterPeering
	err := ctx.ReadResource("aws:dsql/clusterPeering:ClusterPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterPeering resources.
type clusterPeeringState struct {
	// List of DSQL Cluster ARNs to be peered to this cluster.
	Clusters []string `pulumi:"clusters"`
	// DSQL Cluster Identifier.
	Identifier *string `pulumi:"identifier"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   *string                 `pulumi:"region"`
	Timeouts *ClusterPeeringTimeouts `pulumi:"timeouts"`
	// Witness region for a multi-region cluster.
	WitnessRegion *string `pulumi:"witnessRegion"`
}

type ClusterPeeringState struct {
	// List of DSQL Cluster ARNs to be peered to this cluster.
	Clusters pulumi.StringArrayInput
	// DSQL Cluster Identifier.
	Identifier pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   pulumi.StringPtrInput
	Timeouts ClusterPeeringTimeoutsPtrInput
	// Witness region for a multi-region cluster.
	WitnessRegion pulumi.StringPtrInput
}

func (ClusterPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterPeeringState)(nil)).Elem()
}

type clusterPeeringArgs struct {
	// List of DSQL Cluster ARNs to be peered to this cluster.
	Clusters []string `pulumi:"clusters"`
	// DSQL Cluster Identifier.
	Identifier string `pulumi:"identifier"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   *string                 `pulumi:"region"`
	Timeouts *ClusterPeeringTimeouts `pulumi:"timeouts"`
	// Witness region for a multi-region cluster.
	WitnessRegion string `pulumi:"witnessRegion"`
}

// The set of arguments for constructing a ClusterPeering resource.
type ClusterPeeringArgs struct {
	// List of DSQL Cluster ARNs to be peered to this cluster.
	Clusters pulumi.StringArrayInput
	// DSQL Cluster Identifier.
	Identifier pulumi.StringInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   pulumi.StringPtrInput
	Timeouts ClusterPeeringTimeoutsPtrInput
	// Witness region for a multi-region cluster.
	WitnessRegion pulumi.StringInput
}

func (ClusterPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterPeeringArgs)(nil)).Elem()
}

type ClusterPeeringInput interface {
	pulumi.Input

	ToClusterPeeringOutput() ClusterPeeringOutput
	ToClusterPeeringOutputWithContext(ctx context.Context) ClusterPeeringOutput
}

func (*ClusterPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPeering)(nil)).Elem()
}

func (i *ClusterPeering) ToClusterPeeringOutput() ClusterPeeringOutput {
	return i.ToClusterPeeringOutputWithContext(context.Background())
}

func (i *ClusterPeering) ToClusterPeeringOutputWithContext(ctx context.Context) ClusterPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPeeringOutput)
}

// ClusterPeeringArrayInput is an input type that accepts ClusterPeeringArray and ClusterPeeringArrayOutput values.
// You can construct a concrete instance of `ClusterPeeringArrayInput` via:
//
//	ClusterPeeringArray{ ClusterPeeringArgs{...} }
type ClusterPeeringArrayInput interface {
	pulumi.Input

	ToClusterPeeringArrayOutput() ClusterPeeringArrayOutput
	ToClusterPeeringArrayOutputWithContext(context.Context) ClusterPeeringArrayOutput
}

type ClusterPeeringArray []ClusterPeeringInput

func (ClusterPeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterPeering)(nil)).Elem()
}

func (i ClusterPeeringArray) ToClusterPeeringArrayOutput() ClusterPeeringArrayOutput {
	return i.ToClusterPeeringArrayOutputWithContext(context.Background())
}

func (i ClusterPeeringArray) ToClusterPeeringArrayOutputWithContext(ctx context.Context) ClusterPeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPeeringArrayOutput)
}

// ClusterPeeringMapInput is an input type that accepts ClusterPeeringMap and ClusterPeeringMapOutput values.
// You can construct a concrete instance of `ClusterPeeringMapInput` via:
//
//	ClusterPeeringMap{ "key": ClusterPeeringArgs{...} }
type ClusterPeeringMapInput interface {
	pulumi.Input

	ToClusterPeeringMapOutput() ClusterPeeringMapOutput
	ToClusterPeeringMapOutputWithContext(context.Context) ClusterPeeringMapOutput
}

type ClusterPeeringMap map[string]ClusterPeeringInput

func (ClusterPeeringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterPeering)(nil)).Elem()
}

func (i ClusterPeeringMap) ToClusterPeeringMapOutput() ClusterPeeringMapOutput {
	return i.ToClusterPeeringMapOutputWithContext(context.Background())
}

func (i ClusterPeeringMap) ToClusterPeeringMapOutputWithContext(ctx context.Context) ClusterPeeringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPeeringMapOutput)
}

type ClusterPeeringOutput struct{ *pulumi.OutputState }

func (ClusterPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPeering)(nil)).Elem()
}

func (o ClusterPeeringOutput) ToClusterPeeringOutput() ClusterPeeringOutput {
	return o
}

func (o ClusterPeeringOutput) ToClusterPeeringOutputWithContext(ctx context.Context) ClusterPeeringOutput {
	return o
}

// List of DSQL Cluster ARNs to be peered to this cluster.
func (o ClusterPeeringOutput) Clusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPeering) pulumi.StringArrayOutput { return v.Clusters }).(pulumi.StringArrayOutput)
}

// DSQL Cluster Identifier.
func (o ClusterPeeringOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterPeering) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o ClusterPeeringOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterPeering) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ClusterPeeringOutput) Timeouts() ClusterPeeringTimeoutsPtrOutput {
	return o.ApplyT(func(v *ClusterPeering) ClusterPeeringTimeoutsPtrOutput { return v.Timeouts }).(ClusterPeeringTimeoutsPtrOutput)
}

// Witness region for a multi-region cluster.
func (o ClusterPeeringOutput) WitnessRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterPeering) pulumi.StringOutput { return v.WitnessRegion }).(pulumi.StringOutput)
}

type ClusterPeeringArrayOutput struct{ *pulumi.OutputState }

func (ClusterPeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterPeering)(nil)).Elem()
}

func (o ClusterPeeringArrayOutput) ToClusterPeeringArrayOutput() ClusterPeeringArrayOutput {
	return o
}

func (o ClusterPeeringArrayOutput) ToClusterPeeringArrayOutputWithContext(ctx context.Context) ClusterPeeringArrayOutput {
	return o
}

func (o ClusterPeeringArrayOutput) Index(i pulumi.IntInput) ClusterPeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterPeering {
		return vs[0].([]*ClusterPeering)[vs[1].(int)]
	}).(ClusterPeeringOutput)
}

type ClusterPeeringMapOutput struct{ *pulumi.OutputState }

func (ClusterPeeringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterPeering)(nil)).Elem()
}

func (o ClusterPeeringMapOutput) ToClusterPeeringMapOutput() ClusterPeeringMapOutput {
	return o
}

func (o ClusterPeeringMapOutput) ToClusterPeeringMapOutputWithContext(ctx context.Context) ClusterPeeringMapOutput {
	return o
}

func (o ClusterPeeringMapOutput) MapIndex(k pulumi.StringInput) ClusterPeeringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterPeering {
		return vs[0].(map[string]*ClusterPeering)[vs[1].(string)]
	}).(ClusterPeeringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPeeringInput)(nil)).Elem(), &ClusterPeering{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPeeringArrayInput)(nil)).Elem(), ClusterPeeringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPeeringMapInput)(nil)).Elem(), ClusterPeeringMap{})
	pulumi.RegisterOutputType(ClusterPeeringOutput{})
	pulumi.RegisterOutputType(ClusterPeeringArrayOutput{})
	pulumi.RegisterOutputType(ClusterPeeringMapOutput{})
}
