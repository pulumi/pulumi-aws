// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dsql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ClusterEncryptionDetail struct {
	// The status of encryption for the DSQL Cluster.
	EncryptionStatus string `pulumi:"encryptionStatus"`
	// The type of encryption that protects the data on the DSQL Cluster.
	EncryptionType string `pulumi:"encryptionType"`
}

// ClusterEncryptionDetailInput is an input type that accepts ClusterEncryptionDetailArgs and ClusterEncryptionDetailOutput values.
// You can construct a concrete instance of `ClusterEncryptionDetailInput` via:
//
//	ClusterEncryptionDetailArgs{...}
type ClusterEncryptionDetailInput interface {
	pulumi.Input

	ToClusterEncryptionDetailOutput() ClusterEncryptionDetailOutput
	ToClusterEncryptionDetailOutputWithContext(context.Context) ClusterEncryptionDetailOutput
}

type ClusterEncryptionDetailArgs struct {
	// The status of encryption for the DSQL Cluster.
	EncryptionStatus pulumi.StringInput `pulumi:"encryptionStatus"`
	// The type of encryption that protects the data on the DSQL Cluster.
	EncryptionType pulumi.StringInput `pulumi:"encryptionType"`
}

func (ClusterEncryptionDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionDetail)(nil)).Elem()
}

func (i ClusterEncryptionDetailArgs) ToClusterEncryptionDetailOutput() ClusterEncryptionDetailOutput {
	return i.ToClusterEncryptionDetailOutputWithContext(context.Background())
}

func (i ClusterEncryptionDetailArgs) ToClusterEncryptionDetailOutputWithContext(ctx context.Context) ClusterEncryptionDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionDetailOutput)
}

// ClusterEncryptionDetailArrayInput is an input type that accepts ClusterEncryptionDetailArray and ClusterEncryptionDetailArrayOutput values.
// You can construct a concrete instance of `ClusterEncryptionDetailArrayInput` via:
//
//	ClusterEncryptionDetailArray{ ClusterEncryptionDetailArgs{...} }
type ClusterEncryptionDetailArrayInput interface {
	pulumi.Input

	ToClusterEncryptionDetailArrayOutput() ClusterEncryptionDetailArrayOutput
	ToClusterEncryptionDetailArrayOutputWithContext(context.Context) ClusterEncryptionDetailArrayOutput
}

type ClusterEncryptionDetailArray []ClusterEncryptionDetailInput

func (ClusterEncryptionDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterEncryptionDetail)(nil)).Elem()
}

func (i ClusterEncryptionDetailArray) ToClusterEncryptionDetailArrayOutput() ClusterEncryptionDetailArrayOutput {
	return i.ToClusterEncryptionDetailArrayOutputWithContext(context.Background())
}

func (i ClusterEncryptionDetailArray) ToClusterEncryptionDetailArrayOutputWithContext(ctx context.Context) ClusterEncryptionDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionDetailArrayOutput)
}

type ClusterEncryptionDetailOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionDetail)(nil)).Elem()
}

func (o ClusterEncryptionDetailOutput) ToClusterEncryptionDetailOutput() ClusterEncryptionDetailOutput {
	return o
}

func (o ClusterEncryptionDetailOutput) ToClusterEncryptionDetailOutputWithContext(ctx context.Context) ClusterEncryptionDetailOutput {
	return o
}

// The status of encryption for the DSQL Cluster.
func (o ClusterEncryptionDetailOutput) EncryptionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterEncryptionDetail) string { return v.EncryptionStatus }).(pulumi.StringOutput)
}

// The type of encryption that protects the data on the DSQL Cluster.
func (o ClusterEncryptionDetailOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterEncryptionDetail) string { return v.EncryptionType }).(pulumi.StringOutput)
}

type ClusterEncryptionDetailArrayOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterEncryptionDetail)(nil)).Elem()
}

func (o ClusterEncryptionDetailArrayOutput) ToClusterEncryptionDetailArrayOutput() ClusterEncryptionDetailArrayOutput {
	return o
}

func (o ClusterEncryptionDetailArrayOutput) ToClusterEncryptionDetailArrayOutputWithContext(ctx context.Context) ClusterEncryptionDetailArrayOutput {
	return o
}

func (o ClusterEncryptionDetailArrayOutput) Index(i pulumi.IntInput) ClusterEncryptionDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterEncryptionDetail {
		return vs[0].([]ClusterEncryptionDetail)[vs[1].(int)]
	}).(ClusterEncryptionDetailOutput)
}

type ClusterMultiRegionProperties struct {
	// List of DSQL Cluster ARNs peered to this cluster.
	Clusters []string `pulumi:"clusters"`
	// Witness region for the multi-region clusters. Setting this makes this cluster a multi-region cluster. Changing it recreates the resource.
	WitnessRegion *string `pulumi:"witnessRegion"`
}

// ClusterMultiRegionPropertiesInput is an input type that accepts ClusterMultiRegionPropertiesArgs and ClusterMultiRegionPropertiesOutput values.
// You can construct a concrete instance of `ClusterMultiRegionPropertiesInput` via:
//
//	ClusterMultiRegionPropertiesArgs{...}
type ClusterMultiRegionPropertiesInput interface {
	pulumi.Input

	ToClusterMultiRegionPropertiesOutput() ClusterMultiRegionPropertiesOutput
	ToClusterMultiRegionPropertiesOutputWithContext(context.Context) ClusterMultiRegionPropertiesOutput
}

type ClusterMultiRegionPropertiesArgs struct {
	// List of DSQL Cluster ARNs peered to this cluster.
	Clusters pulumi.StringArrayInput `pulumi:"clusters"`
	// Witness region for the multi-region clusters. Setting this makes this cluster a multi-region cluster. Changing it recreates the resource.
	WitnessRegion pulumi.StringPtrInput `pulumi:"witnessRegion"`
}

func (ClusterMultiRegionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMultiRegionProperties)(nil)).Elem()
}

func (i ClusterMultiRegionPropertiesArgs) ToClusterMultiRegionPropertiesOutput() ClusterMultiRegionPropertiesOutput {
	return i.ToClusterMultiRegionPropertiesOutputWithContext(context.Background())
}

func (i ClusterMultiRegionPropertiesArgs) ToClusterMultiRegionPropertiesOutputWithContext(ctx context.Context) ClusterMultiRegionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMultiRegionPropertiesOutput)
}

func (i ClusterMultiRegionPropertiesArgs) ToClusterMultiRegionPropertiesPtrOutput() ClusterMultiRegionPropertiesPtrOutput {
	return i.ToClusterMultiRegionPropertiesPtrOutputWithContext(context.Background())
}

func (i ClusterMultiRegionPropertiesArgs) ToClusterMultiRegionPropertiesPtrOutputWithContext(ctx context.Context) ClusterMultiRegionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMultiRegionPropertiesOutput).ToClusterMultiRegionPropertiesPtrOutputWithContext(ctx)
}

// ClusterMultiRegionPropertiesPtrInput is an input type that accepts ClusterMultiRegionPropertiesArgs, ClusterMultiRegionPropertiesPtr and ClusterMultiRegionPropertiesPtrOutput values.
// You can construct a concrete instance of `ClusterMultiRegionPropertiesPtrInput` via:
//
//	        ClusterMultiRegionPropertiesArgs{...}
//
//	or:
//
//	        nil
type ClusterMultiRegionPropertiesPtrInput interface {
	pulumi.Input

	ToClusterMultiRegionPropertiesPtrOutput() ClusterMultiRegionPropertiesPtrOutput
	ToClusterMultiRegionPropertiesPtrOutputWithContext(context.Context) ClusterMultiRegionPropertiesPtrOutput
}

type clusterMultiRegionPropertiesPtrType ClusterMultiRegionPropertiesArgs

func ClusterMultiRegionPropertiesPtr(v *ClusterMultiRegionPropertiesArgs) ClusterMultiRegionPropertiesPtrInput {
	return (*clusterMultiRegionPropertiesPtrType)(v)
}

func (*clusterMultiRegionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterMultiRegionProperties)(nil)).Elem()
}

func (i *clusterMultiRegionPropertiesPtrType) ToClusterMultiRegionPropertiesPtrOutput() ClusterMultiRegionPropertiesPtrOutput {
	return i.ToClusterMultiRegionPropertiesPtrOutputWithContext(context.Background())
}

func (i *clusterMultiRegionPropertiesPtrType) ToClusterMultiRegionPropertiesPtrOutputWithContext(ctx context.Context) ClusterMultiRegionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMultiRegionPropertiesPtrOutput)
}

type ClusterMultiRegionPropertiesOutput struct{ *pulumi.OutputState }

func (ClusterMultiRegionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMultiRegionProperties)(nil)).Elem()
}

func (o ClusterMultiRegionPropertiesOutput) ToClusterMultiRegionPropertiesOutput() ClusterMultiRegionPropertiesOutput {
	return o
}

func (o ClusterMultiRegionPropertiesOutput) ToClusterMultiRegionPropertiesOutputWithContext(ctx context.Context) ClusterMultiRegionPropertiesOutput {
	return o
}

func (o ClusterMultiRegionPropertiesOutput) ToClusterMultiRegionPropertiesPtrOutput() ClusterMultiRegionPropertiesPtrOutput {
	return o.ToClusterMultiRegionPropertiesPtrOutputWithContext(context.Background())
}

func (o ClusterMultiRegionPropertiesOutput) ToClusterMultiRegionPropertiesPtrOutputWithContext(ctx context.Context) ClusterMultiRegionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterMultiRegionProperties) *ClusterMultiRegionProperties {
		return &v
	}).(ClusterMultiRegionPropertiesPtrOutput)
}

// List of DSQL Cluster ARNs peered to this cluster.
func (o ClusterMultiRegionPropertiesOutput) Clusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterMultiRegionProperties) []string { return v.Clusters }).(pulumi.StringArrayOutput)
}

// Witness region for the multi-region clusters. Setting this makes this cluster a multi-region cluster. Changing it recreates the resource.
func (o ClusterMultiRegionPropertiesOutput) WitnessRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterMultiRegionProperties) *string { return v.WitnessRegion }).(pulumi.StringPtrOutput)
}

type ClusterMultiRegionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ClusterMultiRegionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterMultiRegionProperties)(nil)).Elem()
}

func (o ClusterMultiRegionPropertiesPtrOutput) ToClusterMultiRegionPropertiesPtrOutput() ClusterMultiRegionPropertiesPtrOutput {
	return o
}

func (o ClusterMultiRegionPropertiesPtrOutput) ToClusterMultiRegionPropertiesPtrOutputWithContext(ctx context.Context) ClusterMultiRegionPropertiesPtrOutput {
	return o
}

func (o ClusterMultiRegionPropertiesPtrOutput) Elem() ClusterMultiRegionPropertiesOutput {
	return o.ApplyT(func(v *ClusterMultiRegionProperties) ClusterMultiRegionProperties {
		if v != nil {
			return *v
		}
		var ret ClusterMultiRegionProperties
		return ret
	}).(ClusterMultiRegionPropertiesOutput)
}

// List of DSQL Cluster ARNs peered to this cluster.
func (o ClusterMultiRegionPropertiesPtrOutput) Clusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterMultiRegionProperties) []string {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(pulumi.StringArrayOutput)
}

// Witness region for the multi-region clusters. Setting this makes this cluster a multi-region cluster. Changing it recreates the resource.
func (o ClusterMultiRegionPropertiesPtrOutput) WitnessRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterMultiRegionProperties) *string {
		if v == nil {
			return nil
		}
		return v.WitnessRegion
	}).(pulumi.StringPtrOutput)
}

type ClusterPeeringTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
}

// ClusterPeeringTimeoutsInput is an input type that accepts ClusterPeeringTimeoutsArgs and ClusterPeeringTimeoutsOutput values.
// You can construct a concrete instance of `ClusterPeeringTimeoutsInput` via:
//
//	ClusterPeeringTimeoutsArgs{...}
type ClusterPeeringTimeoutsInput interface {
	pulumi.Input

	ToClusterPeeringTimeoutsOutput() ClusterPeeringTimeoutsOutput
	ToClusterPeeringTimeoutsOutputWithContext(context.Context) ClusterPeeringTimeoutsOutput
}

type ClusterPeeringTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
}

func (ClusterPeeringTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPeeringTimeouts)(nil)).Elem()
}

func (i ClusterPeeringTimeoutsArgs) ToClusterPeeringTimeoutsOutput() ClusterPeeringTimeoutsOutput {
	return i.ToClusterPeeringTimeoutsOutputWithContext(context.Background())
}

func (i ClusterPeeringTimeoutsArgs) ToClusterPeeringTimeoutsOutputWithContext(ctx context.Context) ClusterPeeringTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPeeringTimeoutsOutput)
}

func (i ClusterPeeringTimeoutsArgs) ToClusterPeeringTimeoutsPtrOutput() ClusterPeeringTimeoutsPtrOutput {
	return i.ToClusterPeeringTimeoutsPtrOutputWithContext(context.Background())
}

func (i ClusterPeeringTimeoutsArgs) ToClusterPeeringTimeoutsPtrOutputWithContext(ctx context.Context) ClusterPeeringTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPeeringTimeoutsOutput).ToClusterPeeringTimeoutsPtrOutputWithContext(ctx)
}

// ClusterPeeringTimeoutsPtrInput is an input type that accepts ClusterPeeringTimeoutsArgs, ClusterPeeringTimeoutsPtr and ClusterPeeringTimeoutsPtrOutput values.
// You can construct a concrete instance of `ClusterPeeringTimeoutsPtrInput` via:
//
//	        ClusterPeeringTimeoutsArgs{...}
//
//	or:
//
//	        nil
type ClusterPeeringTimeoutsPtrInput interface {
	pulumi.Input

	ToClusterPeeringTimeoutsPtrOutput() ClusterPeeringTimeoutsPtrOutput
	ToClusterPeeringTimeoutsPtrOutputWithContext(context.Context) ClusterPeeringTimeoutsPtrOutput
}

type clusterPeeringTimeoutsPtrType ClusterPeeringTimeoutsArgs

func ClusterPeeringTimeoutsPtr(v *ClusterPeeringTimeoutsArgs) ClusterPeeringTimeoutsPtrInput {
	return (*clusterPeeringTimeoutsPtrType)(v)
}

func (*clusterPeeringTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPeeringTimeouts)(nil)).Elem()
}

func (i *clusterPeeringTimeoutsPtrType) ToClusterPeeringTimeoutsPtrOutput() ClusterPeeringTimeoutsPtrOutput {
	return i.ToClusterPeeringTimeoutsPtrOutputWithContext(context.Background())
}

func (i *clusterPeeringTimeoutsPtrType) ToClusterPeeringTimeoutsPtrOutputWithContext(ctx context.Context) ClusterPeeringTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPeeringTimeoutsPtrOutput)
}

type ClusterPeeringTimeoutsOutput struct{ *pulumi.OutputState }

func (ClusterPeeringTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPeeringTimeouts)(nil)).Elem()
}

func (o ClusterPeeringTimeoutsOutput) ToClusterPeeringTimeoutsOutput() ClusterPeeringTimeoutsOutput {
	return o
}

func (o ClusterPeeringTimeoutsOutput) ToClusterPeeringTimeoutsOutputWithContext(ctx context.Context) ClusterPeeringTimeoutsOutput {
	return o
}

func (o ClusterPeeringTimeoutsOutput) ToClusterPeeringTimeoutsPtrOutput() ClusterPeeringTimeoutsPtrOutput {
	return o.ToClusterPeeringTimeoutsPtrOutputWithContext(context.Background())
}

func (o ClusterPeeringTimeoutsOutput) ToClusterPeeringTimeoutsPtrOutputWithContext(ctx context.Context) ClusterPeeringTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPeeringTimeouts) *ClusterPeeringTimeouts {
		return &v
	}).(ClusterPeeringTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ClusterPeeringTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPeeringTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

type ClusterPeeringTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (ClusterPeeringTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPeeringTimeouts)(nil)).Elem()
}

func (o ClusterPeeringTimeoutsPtrOutput) ToClusterPeeringTimeoutsPtrOutput() ClusterPeeringTimeoutsPtrOutput {
	return o
}

func (o ClusterPeeringTimeoutsPtrOutput) ToClusterPeeringTimeoutsPtrOutputWithContext(ctx context.Context) ClusterPeeringTimeoutsPtrOutput {
	return o
}

func (o ClusterPeeringTimeoutsPtrOutput) Elem() ClusterPeeringTimeoutsOutput {
	return o.ApplyT(func(v *ClusterPeeringTimeouts) ClusterPeeringTimeouts {
		if v != nil {
			return *v
		}
		var ret ClusterPeeringTimeouts
		return ret
	}).(ClusterPeeringTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ClusterPeeringTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPeeringTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

type ClusterTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// ClusterTimeoutsInput is an input type that accepts ClusterTimeoutsArgs and ClusterTimeoutsOutput values.
// You can construct a concrete instance of `ClusterTimeoutsInput` via:
//
//	ClusterTimeoutsArgs{...}
type ClusterTimeoutsInput interface {
	pulumi.Input

	ToClusterTimeoutsOutput() ClusterTimeoutsOutput
	ToClusterTimeoutsOutputWithContext(context.Context) ClusterTimeoutsOutput
}

type ClusterTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (ClusterTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTimeouts)(nil)).Elem()
}

func (i ClusterTimeoutsArgs) ToClusterTimeoutsOutput() ClusterTimeoutsOutput {
	return i.ToClusterTimeoutsOutputWithContext(context.Background())
}

func (i ClusterTimeoutsArgs) ToClusterTimeoutsOutputWithContext(ctx context.Context) ClusterTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTimeoutsOutput)
}

func (i ClusterTimeoutsArgs) ToClusterTimeoutsPtrOutput() ClusterTimeoutsPtrOutput {
	return i.ToClusterTimeoutsPtrOutputWithContext(context.Background())
}

func (i ClusterTimeoutsArgs) ToClusterTimeoutsPtrOutputWithContext(ctx context.Context) ClusterTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTimeoutsOutput).ToClusterTimeoutsPtrOutputWithContext(ctx)
}

// ClusterTimeoutsPtrInput is an input type that accepts ClusterTimeoutsArgs, ClusterTimeoutsPtr and ClusterTimeoutsPtrOutput values.
// You can construct a concrete instance of `ClusterTimeoutsPtrInput` via:
//
//	        ClusterTimeoutsArgs{...}
//
//	or:
//
//	        nil
type ClusterTimeoutsPtrInput interface {
	pulumi.Input

	ToClusterTimeoutsPtrOutput() ClusterTimeoutsPtrOutput
	ToClusterTimeoutsPtrOutputWithContext(context.Context) ClusterTimeoutsPtrOutput
}

type clusterTimeoutsPtrType ClusterTimeoutsArgs

func ClusterTimeoutsPtr(v *ClusterTimeoutsArgs) ClusterTimeoutsPtrInput {
	return (*clusterTimeoutsPtrType)(v)
}

func (*clusterTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterTimeouts)(nil)).Elem()
}

func (i *clusterTimeoutsPtrType) ToClusterTimeoutsPtrOutput() ClusterTimeoutsPtrOutput {
	return i.ToClusterTimeoutsPtrOutputWithContext(context.Background())
}

func (i *clusterTimeoutsPtrType) ToClusterTimeoutsPtrOutputWithContext(ctx context.Context) ClusterTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTimeoutsPtrOutput)
}

type ClusterTimeoutsOutput struct{ *pulumi.OutputState }

func (ClusterTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTimeouts)(nil)).Elem()
}

func (o ClusterTimeoutsOutput) ToClusterTimeoutsOutput() ClusterTimeoutsOutput {
	return o
}

func (o ClusterTimeoutsOutput) ToClusterTimeoutsOutputWithContext(ctx context.Context) ClusterTimeoutsOutput {
	return o
}

func (o ClusterTimeoutsOutput) ToClusterTimeoutsPtrOutput() ClusterTimeoutsPtrOutput {
	return o.ToClusterTimeoutsPtrOutputWithContext(context.Background())
}

func (o ClusterTimeoutsOutput) ToClusterTimeoutsPtrOutputWithContext(ctx context.Context) ClusterTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterTimeouts) *ClusterTimeouts {
		return &v
	}).(ClusterTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ClusterTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ClusterTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ClusterTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type ClusterTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (ClusterTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterTimeouts)(nil)).Elem()
}

func (o ClusterTimeoutsPtrOutput) ToClusterTimeoutsPtrOutput() ClusterTimeoutsPtrOutput {
	return o
}

func (o ClusterTimeoutsPtrOutput) ToClusterTimeoutsPtrOutputWithContext(ctx context.Context) ClusterTimeoutsPtrOutput {
	return o
}

func (o ClusterTimeoutsPtrOutput) Elem() ClusterTimeoutsOutput {
	return o.ApplyT(func(v *ClusterTimeouts) ClusterTimeouts {
		if v != nil {
			return *v
		}
		var ret ClusterTimeouts
		return ret
	}).(ClusterTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ClusterTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ClusterTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ClusterTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionDetailInput)(nil)).Elem(), ClusterEncryptionDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionDetailArrayInput)(nil)).Elem(), ClusterEncryptionDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMultiRegionPropertiesInput)(nil)).Elem(), ClusterMultiRegionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMultiRegionPropertiesPtrInput)(nil)).Elem(), ClusterMultiRegionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPeeringTimeoutsInput)(nil)).Elem(), ClusterPeeringTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPeeringTimeoutsPtrInput)(nil)).Elem(), ClusterPeeringTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTimeoutsInput)(nil)).Elem(), ClusterTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTimeoutsPtrInput)(nil)).Elem(), ClusterTimeoutsArgs{})
	pulumi.RegisterOutputType(ClusterEncryptionDetailOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionDetailArrayOutput{})
	pulumi.RegisterOutputType(ClusterMultiRegionPropertiesOutput{})
	pulumi.RegisterOutputType(ClusterMultiRegionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ClusterPeeringTimeoutsOutput{})
	pulumi.RegisterOutputType(ClusterPeeringTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(ClusterTimeoutsOutput{})
	pulumi.RegisterOutputType(ClusterTimeoutsPtrOutput{})
}
