// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an EventBridge Target resource.
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
//
// ## Example Usage
//
// ### Kinesis Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/kinesis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"source": []string{
//					"aws.autoscaling",
//				},
//				"detail-type": []string{
//					"EC2 Instance Launch Successful",
//					"EC2 Instance Terminate Successful",
//					"EC2 Instance Launch Unsuccessful",
//					"EC2 Instance Terminate Unsuccessful",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			console, err := cloudwatch.NewEventRule(ctx, "console", &cloudwatch.EventRuleArgs{
//				Name:         pulumi.String("capture-ec2-scaling-events"),
//				Description:  pulumi.String("Capture all EC2 scaling events"),
//				EventPattern: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			testStream, err := kinesis.NewStream(ctx, "test_stream", &kinesis.StreamArgs{
//				Name:       pulumi.String("kinesis-test"),
//				ShardCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewEventTarget(ctx, "yada", &cloudwatch.EventTargetArgs{
//				TargetId: pulumi.String("Yada"),
//				Rule:     console.Name,
//				Arn:      testStream.Arn,
//				RunCommandTargets: cloudwatch.EventTargetRunCommandTargetArray{
//					&cloudwatch.EventTargetRunCommandTargetArgs{
//						Key: pulumi.String("tag:Name"),
//						Values: pulumi.StringArray{
//							pulumi.String("FooBar"),
//						},
//					},
//					&cloudwatch.EventTargetRunCommandTargetArgs{
//						Key: pulumi.String("InstanceIds"),
//						Values: pulumi.StringArray{
//							pulumi.String("i-162058cd308bffec2"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### SSM Document Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ssmLifecycleTrust, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
//				Statements: []iam.GetPolicyDocumentStatement{
//					{
//						Actions: []string{
//							"sts:AssumeRole",
//						},
//						Principals: []iam.GetPolicyDocumentStatementPrincipal{
//							{
//								Type: "Service",
//								Identifiers: []string{
//									"events.amazonaws.com",
//								},
//							},
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"schemaVersion": "1.2",
//				"description":   "Stop an instance",
//				"parameters":    nil,
//				"runtimeConfig": map[string]interface{}{
//					"aws:runShellScript": map[string]interface{}{
//						"properties": []map[string]interface{}{
//							map[string]interface{}{
//								"id": "0.aws:runShellScript",
//								"runCommand": []string{
//									"halt",
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			stopInstance, err := ssm.NewDocument(ctx, "stop_instance", &ssm.DocumentArgs{
//				Name:         pulumi.String("stop_instance"),
//				DocumentType: pulumi.String("Command"),
//				Content:      pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			ssmLifecycle := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{
//				Statements: iam.GetPolicyDocumentStatementArray{
//					&iam.GetPolicyDocumentStatementArgs{
//						Effect: pulumi.String("Allow"),
//						Actions: pulumi.StringArray{
//							pulumi.String("ssm:SendCommand"),
//						},
//						Resources: pulumi.StringArray{
//							pulumi.String("arn:aws:ec2:eu-west-1:1234567890:instance/*"),
//						},
//						Conditions: iam.GetPolicyDocumentStatementConditionArray{
//							&iam.GetPolicyDocumentStatementConditionArgs{
//								Test:     pulumi.String("StringEquals"),
//								Variable: pulumi.String("ec2:ResourceTag/Terminate"),
//								Values: pulumi.StringArray{
//									pulumi.String("*"),
//								},
//							},
//						},
//					},
//					&iam.GetPolicyDocumentStatementArgs{
//						Effect: pulumi.String("Allow"),
//						Actions: pulumi.StringArray{
//							pulumi.String("ssm:SendCommand"),
//						},
//						Resources: pulumi.StringArray{
//							stopInstance.Arn,
//						},
//					},
//				},
//			}, nil)
//			ssmLifecycleRole, err := iam.NewRole(ctx, "ssm_lifecycle", &iam.RoleArgs{
//				Name:             pulumi.String("SSMLifecycle"),
//				AssumeRolePolicy: *pulumi.String(ssmLifecycleTrust.Json),
//			})
//			if err != nil {
//				return err
//			}
//			ssmLifecyclePolicy, err := iam.NewPolicy(ctx, "ssm_lifecycle", &iam.PolicyArgs{
//				Name: pulumi.String("SSMLifecycle"),
//				Policy: ssmLifecycle.ApplyT(func(ssmLifecycle iam.GetPolicyDocumentResult) (*string, error) {
//					return &ssmLifecycle.Json, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewRolePolicyAttachment(ctx, "ssm_lifecycle", &iam.RolePolicyAttachmentArgs{
//				PolicyArn: ssmLifecyclePolicy.Arn,
//				Role:      ssmLifecycleRole.Name,
//			})
//			if err != nil {
//				return err
//			}
//			stopInstances, err := cloudwatch.NewEventRule(ctx, "stop_instances", &cloudwatch.EventRuleArgs{
//				Name:               pulumi.String("StopInstance"),
//				Description:        pulumi.String("Stop instances nightly"),
//				ScheduleExpression: pulumi.String("cron(0 0 * * ? *)"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewEventTarget(ctx, "stop_instances", &cloudwatch.EventTargetArgs{
//				TargetId: pulumi.String("StopInstance"),
//				Arn:      stopInstance.Arn,
//				Rule:     stopInstances.Name,
//				RoleArn:  ssmLifecycleRole.Arn,
//				RunCommandTargets: cloudwatch.EventTargetRunCommandTargetArray{
//					&cloudwatch.EventTargetRunCommandTargetArgs{
//						Key: pulumi.String("tag:Terminate"),
//						Values: pulumi.StringArray{
//							pulumi.String("midnight"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### RunCommand Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			stopInstances, err := cloudwatch.NewEventRule(ctx, "stop_instances", &cloudwatch.EventRuleArgs{
//				Name:               pulumi.String("StopInstance"),
//				Description:        pulumi.String("Stop instances nightly"),
//				ScheduleExpression: pulumi.String("cron(0 0 * * ? *)"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewEventTarget(ctx, "stop_instances", &cloudwatch.EventTargetArgs{
//				TargetId: pulumi.String("StopInstance"),
//				Arn:      pulumi.String(fmt.Sprintf("arn:aws:ssm:%v::document/AWS-RunShellScript", awsRegion)),
//				Input:    pulumi.String("{\"commands\":[\"halt\"]}"),
//				Rule:     stopInstances.Name,
//				RoleArn:  pulumi.Any(ssmLifecycle.Arn),
//				RunCommandTargets: cloudwatch.EventTargetRunCommandTargetArray{
//					&cloudwatch.EventTargetRunCommandTargetArgs{
//						Key: pulumi.String("tag:Terminate"),
//						Values: pulumi.StringArray{
//							pulumi.String("midnight"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### ECS Run Task with Role and Task Override Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// assumeRole, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
// Statements: []iam.GetPolicyDocumentStatement{
// {
// Effect: pulumi.StringRef("Allow"),
// Principals: []iam.GetPolicyDocumentStatementPrincipal{
// {
// Type: "Service",
// Identifiers: []string{
// "events.amazonaws.com",
// },
// },
// },
// Actions: []string{
// "sts:AssumeRole",
// },
// },
// },
// }, nil);
// if err != nil {
// return err
// }
// ecsEvents, err := iam.NewRole(ctx, "ecs_events", &iam.RoleArgs{
// Name: pulumi.String("ecs_events"),
// AssumeRolePolicy: *pulumi.String(assumeRole.Json),
// })
// if err != nil {
// return err
// }
// ecsEventsRunTaskWithAnyRole, err := iam.GetPolicyDocument(ctx, invokeReplace, err := std.Replace(ctx, &std.ReplaceArgs{
// Text: taskName.Arn,
// Search: "/:\\d+$/",
// Replace: ":*",
// }, nil)
// if err != nil {
// return err
// }
// &iam.GetPolicyDocumentArgs{
// Statements: pulumi.Array{
// iam.GetPolicyDocumentStatement{
// Effect: pulumi.StringRef("Allow"),
// Actions: []string{
// "iam:PassRole",
// },
// Resources: []string{
// "*",
// },
// },
// iam.GetPolicyDocumentStatement{
// Effect: pulumi.StringRef("Allow"),
// Actions: []string{
// "ecs:RunTask",
// },
// Resources: interface{}{
// invokeReplace.Result,
// },
// },
// },
// }, nil);
// if err != nil {
// return err
// }
// _, err = iam.NewRolePolicy(ctx, "ecs_events_run_task_with_any_role", &iam.RolePolicyArgs{
// Name: pulumi.String("ecs_events_run_task_with_any_role"),
// Role: ecsEvents.ID(),
// Policy: *pulumi.String(ecsEventsRunTaskWithAnyRole.Json),
// })
// if err != nil {
// return err
// }
// tmpJSON0, err := json.Marshal(map[string]interface{}{
// "containerOverrides": []map[string]interface{}{
// map[string]interface{}{
// "name": "name-of-container-to-override",
// "command": []string{
// "bin/console",
// "scheduled-task",
// },
// },
// },
// })
// if err != nil {
// return err
// }
// json0 := string(tmpJSON0)
// _, err = cloudwatch.NewEventTarget(ctx, "ecs_scheduled_task", &cloudwatch.EventTargetArgs{
// TargetId: pulumi.String("run-scheduled-task-every-hour"),
// Arn: pulumi.Any(clusterName.Arn),
// Rule: pulumi.Any(everyHour.Name),
// RoleArn: ecsEvents.Arn,
// EcsTarget: &cloudwatch.EventTargetEcsTargetArgs{
// TaskCount: pulumi.Int(1),
// TaskDefinitionArn: pulumi.Any(taskName.Arn),
// },
// Input: pulumi.String(json0),
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
// <!--End PulumiCodeChooser -->
//
// ### API Gateway target
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigateway"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleEventRule, err := cloudwatch.NewEventRule(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			exampleDeployment, err := apigateway.NewDeployment(ctx, "example", &apigateway.DeploymentArgs{
//				RestApi: pulumi.Any(exampleAwsApiGatewayRestApi.Id),
//			})
//			if err != nil {
//				return err
//			}
//			exampleStage, err := apigateway.NewStage(ctx, "example", &apigateway.StageArgs{
//				RestApi:    pulumi.Any(exampleAwsApiGatewayRestApi.Id),
//				Deployment: exampleDeployment.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewEventTarget(ctx, "example", &cloudwatch.EventTargetArgs{
//				Arn: exampleStage.ExecutionArn.ApplyT(func(executionArn string) (string, error) {
//					return fmt.Sprintf("%v/GET", executionArn), nil
//				}).(pulumi.StringOutput),
//				Rule: exampleEventRule.ID(),
//				HttpTarget: &cloudwatch.EventTargetHttpTargetArgs{
//					QueryStringParameters: pulumi.StringMap{
//						"Body": pulumi.String("$.detail.body"),
//					},
//					HeaderParameters: pulumi.StringMap{
//						"Env": pulumi.String("Test"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Cross-Account Event Bus target
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			assumeRole, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
//				Statements: []iam.GetPolicyDocumentStatement{
//					{
//						Effect: pulumi.StringRef("Allow"),
//						Principals: []iam.GetPolicyDocumentStatementPrincipal{
//							{
//								Type: "Service",
//								Identifiers: []string{
//									"events.amazonaws.com",
//								},
//							},
//						},
//						Actions: []string{
//							"sts:AssumeRole",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			eventBusInvokeRemoteEventBusRole, err := iam.NewRole(ctx, "event_bus_invoke_remote_event_bus", &iam.RoleArgs{
//				Name:             pulumi.String("event-bus-invoke-remote-event-bus"),
//				AssumeRolePolicy: *pulumi.String(assumeRole.Json),
//			})
//			if err != nil {
//				return err
//			}
//			eventBusInvokeRemoteEventBus, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
//				Statements: []iam.GetPolicyDocumentStatement{
//					{
//						Effect: pulumi.StringRef("Allow"),
//						Actions: []string{
//							"events:PutEvents",
//						},
//						Resources: []string{
//							"arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			eventBusInvokeRemoteEventBusPolicy, err := iam.NewPolicy(ctx, "event_bus_invoke_remote_event_bus", &iam.PolicyArgs{
//				Name:   pulumi.String("event_bus_invoke_remote_event_bus"),
//				Policy: *pulumi.String(eventBusInvokeRemoteEventBus.Json),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewRolePolicyAttachment(ctx, "event_bus_invoke_remote_event_bus", &iam.RolePolicyAttachmentArgs{
//				Role:      eventBusInvokeRemoteEventBusRole.Name,
//				PolicyArn: eventBusInvokeRemoteEventBusPolicy.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			stopInstances, err := cloudwatch.NewEventRule(ctx, "stop_instances", &cloudwatch.EventRuleArgs{
//				Name:               pulumi.String("StopInstance"),
//				Description:        pulumi.String("Stop instances nightly"),
//				ScheduleExpression: pulumi.String("cron(0 0 * * ? *)"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewEventTarget(ctx, "stop_instances", &cloudwatch.EventTargetArgs{
//				TargetId: pulumi.String("StopInstance"),
//				Arn:      pulumi.String("arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus"),
//				Rule:     stopInstances.Name,
//				RoleArn:  eventBusInvokeRemoteEventBusRole.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Input Transformer Usage - JSON Object
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleEventRule, err := cloudwatch.NewEventRule(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewEventTarget(ctx, "example", &cloudwatch.EventTargetArgs{
//				Arn:  pulumi.Any(exampleAwsLambdaFunction.Arn),
//				Rule: exampleEventRule.ID(),
//				InputTransformer: &cloudwatch.EventTargetInputTransformerArgs{
//					InputPaths: pulumi.StringMap{
//						"instance": pulumi.String("$.detail.instance"),
//						"status":   pulumi.String("$.detail.status"),
//					},
//					InputTemplate: pulumi.String("{\n  \"instance_id\": <instance>,\n  \"instance_status\": <status>\n}\n"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Input Transformer Usage - Simple String
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleEventRule, err := cloudwatch.NewEventRule(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewEventTarget(ctx, "example", &cloudwatch.EventTargetArgs{
//				Arn:  pulumi.Any(exampleAwsLambdaFunction.Arn),
//				Rule: exampleEventRule.ID(),
//				InputTransformer: &cloudwatch.EventTargetInputTransformerArgs{
//					InputPaths: pulumi.StringMap{
//						"instance": pulumi.String("$.detail.instance"),
//						"status":   pulumi.String("$.detail.status"),
//					},
//					InputTemplate: pulumi.String("\"<instance> is in state <status>\""),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Cloudwatch Log Group Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := cloudwatch.NewLogGroup(ctx, "example", &cloudwatch.LogGroupArgs{
//				Name:            pulumi.String("/aws/events/guardduty/logs"),
//				RetentionInDays: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"source": []string{
//					"aws.guardduty",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			exampleEventRule, err := cloudwatch.NewEventRule(ctx, "example", &cloudwatch.EventRuleArgs{
//				Name:         pulumi.String("guard-duty_event_rule"),
//				Description:  pulumi.String("GuardDuty Findings"),
//				EventPattern: pulumi.String(json0),
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogPolicy := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{
//				Statements: iam.GetPolicyDocumentStatementArray{
//					&iam.GetPolicyDocumentStatementArgs{
//						Effect: pulumi.String("Allow"),
//						Actions: pulumi.StringArray{
//							pulumi.String("logs:CreateLogStream"),
//						},
//						Resources: pulumi.StringArray{
//							example.Arn.ApplyT(func(arn string) (string, error) {
//								return fmt.Sprintf("%v:*", arn), nil
//							}).(pulumi.StringOutput),
//						},
//						Principals: iam.GetPolicyDocumentStatementPrincipalArray{
//							&iam.GetPolicyDocumentStatementPrincipalArgs{
//								Type: pulumi.String("Service"),
//								Identifiers: pulumi.StringArray{
//									pulumi.String("events.amazonaws.com"),
//									pulumi.String("delivery.logs.amazonaws.com"),
//								},
//							},
//						},
//					},
//					&iam.GetPolicyDocumentStatementArgs{
//						Effect: pulumi.String("Allow"),
//						Actions: pulumi.StringArray{
//							pulumi.String("logs:PutLogEvents"),
//						},
//						Resources: pulumi.StringArray{
//							example.Arn.ApplyT(func(arn string) (string, error) {
//								return fmt.Sprintf("%v:*:*", arn), nil
//							}).(pulumi.StringOutput),
//						},
//						Principals: iam.GetPolicyDocumentStatementPrincipalArray{
//							&iam.GetPolicyDocumentStatementPrincipalArgs{
//								Type: pulumi.String("Service"),
//								Identifiers: pulumi.StringArray{
//									pulumi.String("events.amazonaws.com"),
//									pulumi.String("delivery.logs.amazonaws.com"),
//								},
//							},
//						},
//						Conditions: iam.GetPolicyDocumentStatementConditionArray{
//							&iam.GetPolicyDocumentStatementConditionArgs{
//								Test: pulumi.String("ArnEquals"),
//								Values: pulumi.StringArray{
//									exampleEventRule.Arn,
//								},
//								Variable: pulumi.String("aws:SourceArn"),
//							},
//						},
//					},
//				},
//			}, nil)
//			_, err = cloudwatch.NewLogResourcePolicy(ctx, "example", &cloudwatch.LogResourcePolicyArgs{
//				PolicyDocument: exampleLogPolicy.ApplyT(func(exampleLogPolicy iam.GetPolicyDocumentResult) (*string, error) {
//					return &exampleLogPolicy.Json, nil
//				}).(pulumi.StringPtrOutput),
//				PolicyName: pulumi.String("guardduty-log-publishing-policy"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewEventTarget(ctx, "example", &cloudwatch.EventTargetArgs{
//				Rule: exampleEventRule.Name,
//				Arn:  example.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import EventBridge Targets using `event_bus_name/rule-name/target-id` (if you omit `event_bus_name`, the `default` event bus will be used). For example:
//
// ```sh
// $ pulumi import aws:cloudwatch/eventTarget:EventTarget test-event-target rule-name/target-id
// ```
type EventTarget struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the target.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
	BatchTarget EventTargetBatchTargetPtrOutput `pulumi:"batchTarget"`
	// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
	DeadLetterConfig EventTargetDeadLetterConfigPtrOutput `pulumi:"deadLetterConfig"`
	// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
	EcsTarget EventTargetEcsTargetPtrOutput `pulumi:"ecsTarget"`
	// The name or ARN of the event bus to associate with the rule.
	// If you omit this, the `default` event bus is used.
	EventBusName pulumi.StringPtrOutput `pulumi:"eventBusName"`
	// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
	HttpTarget EventTargetHttpTargetPtrOutput `pulumi:"httpTarget"`
	// Valid JSON text passed to the target. Conflicts with `inputPath` and `inputTransformer`.
	Input pulumi.StringPtrOutput `pulumi:"input"`
	// The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `inputTransformer`.
	InputPath pulumi.StringPtrOutput `pulumi:"inputPath"`
	// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `inputPath`.
	InputTransformer EventTargetInputTransformerPtrOutput `pulumi:"inputTransformer"`
	// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
	KinesisTarget EventTargetKinesisTargetPtrOutput `pulumi:"kinesisTarget"`
	// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
	RedshiftTarget EventTargetRedshiftTargetPtrOutput `pulumi:"redshiftTarget"`
	// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
	RetryPolicy EventTargetRetryPolicyPtrOutput `pulumi:"retryPolicy"`
	// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecsTarget` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// The name of the rule you want to add targets to.
	//
	// The following arguments are optional:
	Rule pulumi.StringOutput `pulumi:"rule"`
	// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
	RunCommandTargets EventTargetRunCommandTargetArrayOutput `pulumi:"runCommandTargets"`
	// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
	SagemakerPipelineTarget EventTargetSagemakerPipelineTargetPtrOutput `pulumi:"sagemakerPipelineTarget"`
	// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
	SqsTarget EventTargetSqsTargetPtrOutput `pulumi:"sqsTarget"`
	// The unique target assignment ID. If missing, will generate a random, unique id.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
}

// NewEventTarget registers a new resource with the given unique name, arguments, and options.
func NewEventTarget(ctx *pulumi.Context,
	name string, args *EventTargetArgs, opts ...pulumi.ResourceOption) (*EventTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Arn == nil {
		return nil, errors.New("invalid value for required argument 'Arn'")
	}
	if args.Rule == nil {
		return nil, errors.New("invalid value for required argument 'Rule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventTarget
	err := ctx.RegisterResource("aws:cloudwatch/eventTarget:EventTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventTarget gets an existing EventTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventTargetState, opts ...pulumi.ResourceOption) (*EventTarget, error) {
	var resource EventTarget
	err := ctx.ReadResource("aws:cloudwatch/eventTarget:EventTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventTarget resources.
type eventTargetState struct {
	// The Amazon Resource Name (ARN) of the target.
	Arn *string `pulumi:"arn"`
	// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
	BatchTarget *EventTargetBatchTarget `pulumi:"batchTarget"`
	// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
	DeadLetterConfig *EventTargetDeadLetterConfig `pulumi:"deadLetterConfig"`
	// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
	EcsTarget *EventTargetEcsTarget `pulumi:"ecsTarget"`
	// The name or ARN of the event bus to associate with the rule.
	// If you omit this, the `default` event bus is used.
	EventBusName *string `pulumi:"eventBusName"`
	// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
	HttpTarget *EventTargetHttpTarget `pulumi:"httpTarget"`
	// Valid JSON text passed to the target. Conflicts with `inputPath` and `inputTransformer`.
	Input *string `pulumi:"input"`
	// The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `inputTransformer`.
	InputPath *string `pulumi:"inputPath"`
	// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `inputPath`.
	InputTransformer *EventTargetInputTransformer `pulumi:"inputTransformer"`
	// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
	KinesisTarget *EventTargetKinesisTarget `pulumi:"kinesisTarget"`
	// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
	RedshiftTarget *EventTargetRedshiftTarget `pulumi:"redshiftTarget"`
	// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
	RetryPolicy *EventTargetRetryPolicy `pulumi:"retryPolicy"`
	// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecsTarget` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
	RoleArn *string `pulumi:"roleArn"`
	// The name of the rule you want to add targets to.
	//
	// The following arguments are optional:
	Rule *string `pulumi:"rule"`
	// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
	RunCommandTargets []EventTargetRunCommandTarget `pulumi:"runCommandTargets"`
	// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
	SagemakerPipelineTarget *EventTargetSagemakerPipelineTarget `pulumi:"sagemakerPipelineTarget"`
	// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
	SqsTarget *EventTargetSqsTarget `pulumi:"sqsTarget"`
	// The unique target assignment ID. If missing, will generate a random, unique id.
	TargetId *string `pulumi:"targetId"`
}

type EventTargetState struct {
	// The Amazon Resource Name (ARN) of the target.
	Arn pulumi.StringPtrInput
	// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
	BatchTarget EventTargetBatchTargetPtrInput
	// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
	DeadLetterConfig EventTargetDeadLetterConfigPtrInput
	// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
	EcsTarget EventTargetEcsTargetPtrInput
	// The name or ARN of the event bus to associate with the rule.
	// If you omit this, the `default` event bus is used.
	EventBusName pulumi.StringPtrInput
	// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
	HttpTarget EventTargetHttpTargetPtrInput
	// Valid JSON text passed to the target. Conflicts with `inputPath` and `inputTransformer`.
	Input pulumi.StringPtrInput
	// The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `inputTransformer`.
	InputPath pulumi.StringPtrInput
	// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `inputPath`.
	InputTransformer EventTargetInputTransformerPtrInput
	// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
	KinesisTarget EventTargetKinesisTargetPtrInput
	// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
	RedshiftTarget EventTargetRedshiftTargetPtrInput
	// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
	RetryPolicy EventTargetRetryPolicyPtrInput
	// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecsTarget` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
	RoleArn pulumi.StringPtrInput
	// The name of the rule you want to add targets to.
	//
	// The following arguments are optional:
	Rule pulumi.StringPtrInput
	// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
	RunCommandTargets EventTargetRunCommandTargetArrayInput
	// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
	SagemakerPipelineTarget EventTargetSagemakerPipelineTargetPtrInput
	// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
	SqsTarget EventTargetSqsTargetPtrInput
	// The unique target assignment ID. If missing, will generate a random, unique id.
	TargetId pulumi.StringPtrInput
}

func (EventTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTargetState)(nil)).Elem()
}

type eventTargetArgs struct {
	// The Amazon Resource Name (ARN) of the target.
	Arn string `pulumi:"arn"`
	// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
	BatchTarget *EventTargetBatchTarget `pulumi:"batchTarget"`
	// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
	DeadLetterConfig *EventTargetDeadLetterConfig `pulumi:"deadLetterConfig"`
	// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
	EcsTarget *EventTargetEcsTarget `pulumi:"ecsTarget"`
	// The name or ARN of the event bus to associate with the rule.
	// If you omit this, the `default` event bus is used.
	EventBusName *string `pulumi:"eventBusName"`
	// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
	HttpTarget *EventTargetHttpTarget `pulumi:"httpTarget"`
	// Valid JSON text passed to the target. Conflicts with `inputPath` and `inputTransformer`.
	Input *string `pulumi:"input"`
	// The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `inputTransformer`.
	InputPath *string `pulumi:"inputPath"`
	// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `inputPath`.
	InputTransformer *EventTargetInputTransformer `pulumi:"inputTransformer"`
	// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
	KinesisTarget *EventTargetKinesisTarget `pulumi:"kinesisTarget"`
	// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
	RedshiftTarget *EventTargetRedshiftTarget `pulumi:"redshiftTarget"`
	// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
	RetryPolicy *EventTargetRetryPolicy `pulumi:"retryPolicy"`
	// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecsTarget` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
	RoleArn *string `pulumi:"roleArn"`
	// The name of the rule you want to add targets to.
	//
	// The following arguments are optional:
	Rule string `pulumi:"rule"`
	// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
	RunCommandTargets []EventTargetRunCommandTarget `pulumi:"runCommandTargets"`
	// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
	SagemakerPipelineTarget *EventTargetSagemakerPipelineTarget `pulumi:"sagemakerPipelineTarget"`
	// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
	SqsTarget *EventTargetSqsTarget `pulumi:"sqsTarget"`
	// The unique target assignment ID. If missing, will generate a random, unique id.
	TargetId *string `pulumi:"targetId"`
}

// The set of arguments for constructing a EventTarget resource.
type EventTargetArgs struct {
	// The Amazon Resource Name (ARN) of the target.
	Arn pulumi.StringInput
	// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
	BatchTarget EventTargetBatchTargetPtrInput
	// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
	DeadLetterConfig EventTargetDeadLetterConfigPtrInput
	// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
	EcsTarget EventTargetEcsTargetPtrInput
	// The name or ARN of the event bus to associate with the rule.
	// If you omit this, the `default` event bus is used.
	EventBusName pulumi.StringPtrInput
	// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
	HttpTarget EventTargetHttpTargetPtrInput
	// Valid JSON text passed to the target. Conflicts with `inputPath` and `inputTransformer`.
	Input pulumi.StringPtrInput
	// The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `inputTransformer`.
	InputPath pulumi.StringPtrInput
	// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `inputPath`.
	InputTransformer EventTargetInputTransformerPtrInput
	// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
	KinesisTarget EventTargetKinesisTargetPtrInput
	// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
	RedshiftTarget EventTargetRedshiftTargetPtrInput
	// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
	RetryPolicy EventTargetRetryPolicyPtrInput
	// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecsTarget` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
	RoleArn pulumi.StringPtrInput
	// The name of the rule you want to add targets to.
	//
	// The following arguments are optional:
	Rule pulumi.StringInput
	// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
	RunCommandTargets EventTargetRunCommandTargetArrayInput
	// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
	SagemakerPipelineTarget EventTargetSagemakerPipelineTargetPtrInput
	// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
	SqsTarget EventTargetSqsTargetPtrInput
	// The unique target assignment ID. If missing, will generate a random, unique id.
	TargetId pulumi.StringPtrInput
}

func (EventTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTargetArgs)(nil)).Elem()
}

type EventTargetInput interface {
	pulumi.Input

	ToEventTargetOutput() EventTargetOutput
	ToEventTargetOutputWithContext(ctx context.Context) EventTargetOutput
}

func (*EventTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTarget)(nil)).Elem()
}

func (i *EventTarget) ToEventTargetOutput() EventTargetOutput {
	return i.ToEventTargetOutputWithContext(context.Background())
}

func (i *EventTarget) ToEventTargetOutputWithContext(ctx context.Context) EventTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetOutput)
}

// EventTargetArrayInput is an input type that accepts EventTargetArray and EventTargetArrayOutput values.
// You can construct a concrete instance of `EventTargetArrayInput` via:
//
//	EventTargetArray{ EventTargetArgs{...} }
type EventTargetArrayInput interface {
	pulumi.Input

	ToEventTargetArrayOutput() EventTargetArrayOutput
	ToEventTargetArrayOutputWithContext(context.Context) EventTargetArrayOutput
}

type EventTargetArray []EventTargetInput

func (EventTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventTarget)(nil)).Elem()
}

func (i EventTargetArray) ToEventTargetArrayOutput() EventTargetArrayOutput {
	return i.ToEventTargetArrayOutputWithContext(context.Background())
}

func (i EventTargetArray) ToEventTargetArrayOutputWithContext(ctx context.Context) EventTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetArrayOutput)
}

// EventTargetMapInput is an input type that accepts EventTargetMap and EventTargetMapOutput values.
// You can construct a concrete instance of `EventTargetMapInput` via:
//
//	EventTargetMap{ "key": EventTargetArgs{...} }
type EventTargetMapInput interface {
	pulumi.Input

	ToEventTargetMapOutput() EventTargetMapOutput
	ToEventTargetMapOutputWithContext(context.Context) EventTargetMapOutput
}

type EventTargetMap map[string]EventTargetInput

func (EventTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventTarget)(nil)).Elem()
}

func (i EventTargetMap) ToEventTargetMapOutput() EventTargetMapOutput {
	return i.ToEventTargetMapOutputWithContext(context.Background())
}

func (i EventTargetMap) ToEventTargetMapOutputWithContext(ctx context.Context) EventTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetMapOutput)
}

type EventTargetOutput struct{ *pulumi.OutputState }

func (EventTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTarget)(nil)).Elem()
}

func (o EventTargetOutput) ToEventTargetOutput() EventTargetOutput {
	return o
}

func (o EventTargetOutput) ToEventTargetOutputWithContext(ctx context.Context) EventTargetOutput {
	return o
}

// The Amazon Resource Name (ARN) of the target.
func (o EventTargetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
func (o EventTargetOutput) BatchTarget() EventTargetBatchTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetBatchTargetPtrOutput { return v.BatchTarget }).(EventTargetBatchTargetPtrOutput)
}

// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
func (o EventTargetOutput) DeadLetterConfig() EventTargetDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetDeadLetterConfigPtrOutput { return v.DeadLetterConfig }).(EventTargetDeadLetterConfigPtrOutput)
}

// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
func (o EventTargetOutput) EcsTarget() EventTargetEcsTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetEcsTargetPtrOutput { return v.EcsTarget }).(EventTargetEcsTargetPtrOutput)
}

// The name or ARN of the event bus to associate with the rule.
// If you omit this, the `default` event bus is used.
func (o EventTargetOutput) EventBusName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringPtrOutput { return v.EventBusName }).(pulumi.StringPtrOutput)
}

// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
func (o EventTargetOutput) HttpTarget() EventTargetHttpTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetHttpTargetPtrOutput { return v.HttpTarget }).(EventTargetHttpTargetPtrOutput)
}

// Valid JSON text passed to the target. Conflicts with `inputPath` and `inputTransformer`.
func (o EventTargetOutput) Input() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringPtrOutput { return v.Input }).(pulumi.StringPtrOutput)
}

// The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `inputTransformer`.
func (o EventTargetOutput) InputPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringPtrOutput { return v.InputPath }).(pulumi.StringPtrOutput)
}

// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `inputPath`.
func (o EventTargetOutput) InputTransformer() EventTargetInputTransformerPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetInputTransformerPtrOutput { return v.InputTransformer }).(EventTargetInputTransformerPtrOutput)
}

// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
func (o EventTargetOutput) KinesisTarget() EventTargetKinesisTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetKinesisTargetPtrOutput { return v.KinesisTarget }).(EventTargetKinesisTargetPtrOutput)
}

// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
func (o EventTargetOutput) RedshiftTarget() EventTargetRedshiftTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetRedshiftTargetPtrOutput { return v.RedshiftTarget }).(EventTargetRedshiftTargetPtrOutput)
}

// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
func (o EventTargetOutput) RetryPolicy() EventTargetRetryPolicyPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetRetryPolicyPtrOutput { return v.RetryPolicy }).(EventTargetRetryPolicyPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecsTarget` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
func (o EventTargetOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The name of the rule you want to add targets to.
//
// The following arguments are optional:
func (o EventTargetOutput) Rule() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringOutput { return v.Rule }).(pulumi.StringOutput)
}

// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
func (o EventTargetOutput) RunCommandTargets() EventTargetRunCommandTargetArrayOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetRunCommandTargetArrayOutput { return v.RunCommandTargets }).(EventTargetRunCommandTargetArrayOutput)
}

// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
func (o EventTargetOutput) SagemakerPipelineTarget() EventTargetSagemakerPipelineTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetSagemakerPipelineTargetPtrOutput { return v.SagemakerPipelineTarget }).(EventTargetSagemakerPipelineTargetPtrOutput)
}

// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
func (o EventTargetOutput) SqsTarget() EventTargetSqsTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetSqsTargetPtrOutput { return v.SqsTarget }).(EventTargetSqsTargetPtrOutput)
}

// The unique target assignment ID. If missing, will generate a random, unique id.
func (o EventTargetOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringOutput { return v.TargetId }).(pulumi.StringOutput)
}

type EventTargetArrayOutput struct{ *pulumi.OutputState }

func (EventTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventTarget)(nil)).Elem()
}

func (o EventTargetArrayOutput) ToEventTargetArrayOutput() EventTargetArrayOutput {
	return o
}

func (o EventTargetArrayOutput) ToEventTargetArrayOutputWithContext(ctx context.Context) EventTargetArrayOutput {
	return o
}

func (o EventTargetArrayOutput) Index(i pulumi.IntInput) EventTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventTarget {
		return vs[0].([]*EventTarget)[vs[1].(int)]
	}).(EventTargetOutput)
}

type EventTargetMapOutput struct{ *pulumi.OutputState }

func (EventTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventTarget)(nil)).Elem()
}

func (o EventTargetMapOutput) ToEventTargetMapOutput() EventTargetMapOutput {
	return o
}

func (o EventTargetMapOutput) ToEventTargetMapOutputWithContext(ctx context.Context) EventTargetMapOutput {
	return o
}

func (o EventTargetMapOutput) MapIndex(k pulumi.StringInput) EventTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventTarget {
		return vs[0].(map[string]*EventTarget)[vs[1].(string)]
	}).(EventTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetInput)(nil)).Elem(), &EventTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetArrayInput)(nil)).Elem(), EventTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetMapInput)(nil)).Elem(), EventTargetMap{})
	pulumi.RegisterOutputType(EventTargetOutput{})
	pulumi.RegisterOutputType(EventTargetArrayOutput{})
	pulumi.RegisterOutputType(EventTargetMapOutput{})
}
