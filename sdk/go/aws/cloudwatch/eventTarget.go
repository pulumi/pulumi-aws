// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventTarget struct {
	pulumi.CustomResourceState

	Arn               pulumi.StringOutput                    `pulumi:"arn"`
	BatchTarget       EventTargetBatchTargetPtrOutput        `pulumi:"batchTarget"`
	DeadLetterConfig  EventTargetDeadLetterConfigPtrOutput   `pulumi:"deadLetterConfig"`
	EcsTarget         EventTargetEcsTargetPtrOutput          `pulumi:"ecsTarget"`
	EventBusName      pulumi.StringPtrOutput                 `pulumi:"eventBusName"`
	HttpTarget        EventTargetHttpTargetPtrOutput         `pulumi:"httpTarget"`
	Input             pulumi.StringPtrOutput                 `pulumi:"input"`
	InputPath         pulumi.StringPtrOutput                 `pulumi:"inputPath"`
	InputTransformer  EventTargetInputTransformerPtrOutput   `pulumi:"inputTransformer"`
	KinesisTarget     EventTargetKinesisTargetPtrOutput      `pulumi:"kinesisTarget"`
	RedshiftTarget    EventTargetRedshiftTargetPtrOutput     `pulumi:"redshiftTarget"`
	RetryPolicy       EventTargetRetryPolicyPtrOutput        `pulumi:"retryPolicy"`
	RoleArn           pulumi.StringPtrOutput                 `pulumi:"roleArn"`
	Rule              pulumi.StringOutput                    `pulumi:"rule"`
	RunCommandTargets EventTargetRunCommandTargetArrayOutput `pulumi:"runCommandTargets"`
	SqsTarget         EventTargetSqsTargetPtrOutput          `pulumi:"sqsTarget"`
	TargetId          pulumi.StringOutput                    `pulumi:"targetId"`
}

// NewEventTarget registers a new resource with the given unique name, arguments, and options.
func NewEventTarget(ctx *pulumi.Context,
	name string, args *EventTargetArgs, opts ...pulumi.ResourceOption) (*EventTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Arn == nil {
		return nil, errors.New("invalid value for required argument 'Arn'")
	}
	if args.Rule == nil {
		return nil, errors.New("invalid value for required argument 'Rule'")
	}
	var resource EventTarget
	err := ctx.RegisterResource("aws:cloudwatch/eventTarget:EventTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventTarget gets an existing EventTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventTargetState, opts ...pulumi.ResourceOption) (*EventTarget, error) {
	var resource EventTarget
	err := ctx.ReadResource("aws:cloudwatch/eventTarget:EventTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventTarget resources.
type eventTargetState struct {
	Arn               *string                       `pulumi:"arn"`
	BatchTarget       *EventTargetBatchTarget       `pulumi:"batchTarget"`
	DeadLetterConfig  *EventTargetDeadLetterConfig  `pulumi:"deadLetterConfig"`
	EcsTarget         *EventTargetEcsTarget         `pulumi:"ecsTarget"`
	EventBusName      *string                       `pulumi:"eventBusName"`
	HttpTarget        *EventTargetHttpTarget        `pulumi:"httpTarget"`
	Input             *string                       `pulumi:"input"`
	InputPath         *string                       `pulumi:"inputPath"`
	InputTransformer  *EventTargetInputTransformer  `pulumi:"inputTransformer"`
	KinesisTarget     *EventTargetKinesisTarget     `pulumi:"kinesisTarget"`
	RedshiftTarget    *EventTargetRedshiftTarget    `pulumi:"redshiftTarget"`
	RetryPolicy       *EventTargetRetryPolicy       `pulumi:"retryPolicy"`
	RoleArn           *string                       `pulumi:"roleArn"`
	Rule              *string                       `pulumi:"rule"`
	RunCommandTargets []EventTargetRunCommandTarget `pulumi:"runCommandTargets"`
	SqsTarget         *EventTargetSqsTarget         `pulumi:"sqsTarget"`
	TargetId          *string                       `pulumi:"targetId"`
}

type EventTargetState struct {
	Arn               pulumi.StringPtrInput
	BatchTarget       EventTargetBatchTargetPtrInput
	DeadLetterConfig  EventTargetDeadLetterConfigPtrInput
	EcsTarget         EventTargetEcsTargetPtrInput
	EventBusName      pulumi.StringPtrInput
	HttpTarget        EventTargetHttpTargetPtrInput
	Input             pulumi.StringPtrInput
	InputPath         pulumi.StringPtrInput
	InputTransformer  EventTargetInputTransformerPtrInput
	KinesisTarget     EventTargetKinesisTargetPtrInput
	RedshiftTarget    EventTargetRedshiftTargetPtrInput
	RetryPolicy       EventTargetRetryPolicyPtrInput
	RoleArn           pulumi.StringPtrInput
	Rule              pulumi.StringPtrInput
	RunCommandTargets EventTargetRunCommandTargetArrayInput
	SqsTarget         EventTargetSqsTargetPtrInput
	TargetId          pulumi.StringPtrInput
}

func (EventTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTargetState)(nil)).Elem()
}

type eventTargetArgs struct {
	Arn               string                        `pulumi:"arn"`
	BatchTarget       *EventTargetBatchTarget       `pulumi:"batchTarget"`
	DeadLetterConfig  *EventTargetDeadLetterConfig  `pulumi:"deadLetterConfig"`
	EcsTarget         *EventTargetEcsTarget         `pulumi:"ecsTarget"`
	EventBusName      *string                       `pulumi:"eventBusName"`
	HttpTarget        *EventTargetHttpTarget        `pulumi:"httpTarget"`
	Input             *string                       `pulumi:"input"`
	InputPath         *string                       `pulumi:"inputPath"`
	InputTransformer  *EventTargetInputTransformer  `pulumi:"inputTransformer"`
	KinesisTarget     *EventTargetKinesisTarget     `pulumi:"kinesisTarget"`
	RedshiftTarget    *EventTargetRedshiftTarget    `pulumi:"redshiftTarget"`
	RetryPolicy       *EventTargetRetryPolicy       `pulumi:"retryPolicy"`
	RoleArn           *string                       `pulumi:"roleArn"`
	Rule              string                        `pulumi:"rule"`
	RunCommandTargets []EventTargetRunCommandTarget `pulumi:"runCommandTargets"`
	SqsTarget         *EventTargetSqsTarget         `pulumi:"sqsTarget"`
	TargetId          *string                       `pulumi:"targetId"`
}

// The set of arguments for constructing a EventTarget resource.
type EventTargetArgs struct {
	Arn               pulumi.StringInput
	BatchTarget       EventTargetBatchTargetPtrInput
	DeadLetterConfig  EventTargetDeadLetterConfigPtrInput
	EcsTarget         EventTargetEcsTargetPtrInput
	EventBusName      pulumi.StringPtrInput
	HttpTarget        EventTargetHttpTargetPtrInput
	Input             pulumi.StringPtrInput
	InputPath         pulumi.StringPtrInput
	InputTransformer  EventTargetInputTransformerPtrInput
	KinesisTarget     EventTargetKinesisTargetPtrInput
	RedshiftTarget    EventTargetRedshiftTargetPtrInput
	RetryPolicy       EventTargetRetryPolicyPtrInput
	RoleArn           pulumi.StringPtrInput
	Rule              pulumi.StringInput
	RunCommandTargets EventTargetRunCommandTargetArrayInput
	SqsTarget         EventTargetSqsTargetPtrInput
	TargetId          pulumi.StringPtrInput
}

func (EventTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTargetArgs)(nil)).Elem()
}

type EventTargetInput interface {
	pulumi.Input

	ToEventTargetOutput() EventTargetOutput
	ToEventTargetOutputWithContext(ctx context.Context) EventTargetOutput
}

func (*EventTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTarget)(nil)).Elem()
}

func (i *EventTarget) ToEventTargetOutput() EventTargetOutput {
	return i.ToEventTargetOutputWithContext(context.Background())
}

func (i *EventTarget) ToEventTargetOutputWithContext(ctx context.Context) EventTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetOutput)
}

// EventTargetArrayInput is an input type that accepts EventTargetArray and EventTargetArrayOutput values.
// You can construct a concrete instance of `EventTargetArrayInput` via:
//
//	EventTargetArray{ EventTargetArgs{...} }
type EventTargetArrayInput interface {
	pulumi.Input

	ToEventTargetArrayOutput() EventTargetArrayOutput
	ToEventTargetArrayOutputWithContext(context.Context) EventTargetArrayOutput
}

type EventTargetArray []EventTargetInput

func (EventTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventTarget)(nil)).Elem()
}

func (i EventTargetArray) ToEventTargetArrayOutput() EventTargetArrayOutput {
	return i.ToEventTargetArrayOutputWithContext(context.Background())
}

func (i EventTargetArray) ToEventTargetArrayOutputWithContext(ctx context.Context) EventTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetArrayOutput)
}

// EventTargetMapInput is an input type that accepts EventTargetMap and EventTargetMapOutput values.
// You can construct a concrete instance of `EventTargetMapInput` via:
//
//	EventTargetMap{ "key": EventTargetArgs{...} }
type EventTargetMapInput interface {
	pulumi.Input

	ToEventTargetMapOutput() EventTargetMapOutput
	ToEventTargetMapOutputWithContext(context.Context) EventTargetMapOutput
}

type EventTargetMap map[string]EventTargetInput

func (EventTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventTarget)(nil)).Elem()
}

func (i EventTargetMap) ToEventTargetMapOutput() EventTargetMapOutput {
	return i.ToEventTargetMapOutputWithContext(context.Background())
}

func (i EventTargetMap) ToEventTargetMapOutputWithContext(ctx context.Context) EventTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetMapOutput)
}

type EventTargetOutput struct{ *pulumi.OutputState }

func (EventTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTarget)(nil)).Elem()
}

func (o EventTargetOutput) ToEventTargetOutput() EventTargetOutput {
	return o
}

func (o EventTargetOutput) ToEventTargetOutputWithContext(ctx context.Context) EventTargetOutput {
	return o
}

func (o EventTargetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EventTargetOutput) BatchTarget() EventTargetBatchTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetBatchTargetPtrOutput { return v.BatchTarget }).(EventTargetBatchTargetPtrOutput)
}

func (o EventTargetOutput) DeadLetterConfig() EventTargetDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetDeadLetterConfigPtrOutput { return v.DeadLetterConfig }).(EventTargetDeadLetterConfigPtrOutput)
}

func (o EventTargetOutput) EcsTarget() EventTargetEcsTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetEcsTargetPtrOutput { return v.EcsTarget }).(EventTargetEcsTargetPtrOutput)
}

func (o EventTargetOutput) EventBusName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringPtrOutput { return v.EventBusName }).(pulumi.StringPtrOutput)
}

func (o EventTargetOutput) HttpTarget() EventTargetHttpTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetHttpTargetPtrOutput { return v.HttpTarget }).(EventTargetHttpTargetPtrOutput)
}

func (o EventTargetOutput) Input() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringPtrOutput { return v.Input }).(pulumi.StringPtrOutput)
}

func (o EventTargetOutput) InputPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringPtrOutput { return v.InputPath }).(pulumi.StringPtrOutput)
}

func (o EventTargetOutput) InputTransformer() EventTargetInputTransformerPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetInputTransformerPtrOutput { return v.InputTransformer }).(EventTargetInputTransformerPtrOutput)
}

func (o EventTargetOutput) KinesisTarget() EventTargetKinesisTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetKinesisTargetPtrOutput { return v.KinesisTarget }).(EventTargetKinesisTargetPtrOutput)
}

func (o EventTargetOutput) RedshiftTarget() EventTargetRedshiftTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetRedshiftTargetPtrOutput { return v.RedshiftTarget }).(EventTargetRedshiftTargetPtrOutput)
}

func (o EventTargetOutput) RetryPolicy() EventTargetRetryPolicyPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetRetryPolicyPtrOutput { return v.RetryPolicy }).(EventTargetRetryPolicyPtrOutput)
}

func (o EventTargetOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func (o EventTargetOutput) Rule() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringOutput { return v.Rule }).(pulumi.StringOutput)
}

func (o EventTargetOutput) RunCommandTargets() EventTargetRunCommandTargetArrayOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetRunCommandTargetArrayOutput { return v.RunCommandTargets }).(EventTargetRunCommandTargetArrayOutput)
}

func (o EventTargetOutput) SqsTarget() EventTargetSqsTargetPtrOutput {
	return o.ApplyT(func(v *EventTarget) EventTargetSqsTargetPtrOutput { return v.SqsTarget }).(EventTargetSqsTargetPtrOutput)
}

func (o EventTargetOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTarget) pulumi.StringOutput { return v.TargetId }).(pulumi.StringOutput)
}

type EventTargetArrayOutput struct{ *pulumi.OutputState }

func (EventTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventTarget)(nil)).Elem()
}

func (o EventTargetArrayOutput) ToEventTargetArrayOutput() EventTargetArrayOutput {
	return o
}

func (o EventTargetArrayOutput) ToEventTargetArrayOutputWithContext(ctx context.Context) EventTargetArrayOutput {
	return o
}

func (o EventTargetArrayOutput) Index(i pulumi.IntInput) EventTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventTarget {
		return vs[0].([]*EventTarget)[vs[1].(int)]
	}).(EventTargetOutput)
}

type EventTargetMapOutput struct{ *pulumi.OutputState }

func (EventTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventTarget)(nil)).Elem()
}

func (o EventTargetMapOutput) ToEventTargetMapOutput() EventTargetMapOutput {
	return o
}

func (o EventTargetMapOutput) ToEventTargetMapOutputWithContext(ctx context.Context) EventTargetMapOutput {
	return o
}

func (o EventTargetMapOutput) MapIndex(k pulumi.StringInput) EventTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventTarget {
		return vs[0].(map[string]*EventTarget)[vs[1].(string)]
	}).(EventTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetInput)(nil)).Elem(), &EventTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetArrayInput)(nil)).Elem(), EventTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetMapInput)(nil)).Elem(), EventTargetMap{})
	pulumi.RegisterOutputType(EventTargetOutput{})
	pulumi.RegisterOutputType(EventTargetArrayOutput{})
	pulumi.RegisterOutputType(EventTargetMapOutput{})
}
