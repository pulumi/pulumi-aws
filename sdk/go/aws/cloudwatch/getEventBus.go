// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can be used to fetch information about a specific
// EventBridge event bus. Use this data source to compute the ARN of
// an event bus, given the name of the bus.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.LookupEventBus(ctx, &cloudwatch.LookupEventBusArgs{
//				Name: "example-bus-name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupEventBus(ctx *pulumi.Context, args *LookupEventBusArgs, opts ...pulumi.InvokeOption) (*LookupEventBusResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEventBusResult
	err := ctx.Invoke("aws:cloudwatch/getEventBus:getEventBus", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEventBus.
type LookupEventBusArgs struct {
	// Name of the event bus.
	Name string `pulumi:"name"`
}

// A collection of values returned by getEventBus.
type LookupEventBusResult struct {
	// ARN of the event bus.
	Arn string `pulumi:"arn"`
	// Event bus description.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Identifier of the AWS KMS customer managed key for EventBridge to use to encrypt events on this event bus, if one has been specified.
	KmsKeyIdentifier string `pulumi:"kmsKeyIdentifier"`
	Name             string `pulumi:"name"`
}

func LookupEventBusOutput(ctx *pulumi.Context, args LookupEventBusOutputArgs, opts ...pulumi.InvokeOption) LookupEventBusResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEventBusResultOutput, error) {
			args := v.(LookupEventBusArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupEventBusResult
			secret, err := ctx.InvokePackageRaw("aws:cloudwatch/getEventBus:getEventBus", args, &rv, "", opts...)
			if err != nil {
				return LookupEventBusResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupEventBusResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupEventBusResultOutput), nil
			}
			return output, nil
		}).(LookupEventBusResultOutput)
}

// A collection of arguments for invoking getEventBus.
type LookupEventBusOutputArgs struct {
	// Name of the event bus.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupEventBusOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventBusArgs)(nil)).Elem()
}

// A collection of values returned by getEventBus.
type LookupEventBusResultOutput struct{ *pulumi.OutputState }

func (LookupEventBusResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventBusResult)(nil)).Elem()
}

func (o LookupEventBusResultOutput) ToLookupEventBusResultOutput() LookupEventBusResultOutput {
	return o
}

func (o LookupEventBusResultOutput) ToLookupEventBusResultOutputWithContext(ctx context.Context) LookupEventBusResultOutput {
	return o
}

// ARN of the event bus.
func (o LookupEventBusResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventBusResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Event bus description.
func (o LookupEventBusResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventBusResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupEventBusResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventBusResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identifier of the AWS KMS customer managed key for EventBridge to use to encrypt events on this event bus, if one has been specified.
func (o LookupEventBusResultOutput) KmsKeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventBusResult) string { return v.KmsKeyIdentifier }).(pulumi.StringOutput)
}

func (o LookupEventBusResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventBusResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEventBusResultOutput{})
}
