// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CloudWatch Logs subscription filter resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cloudwatch.NewLogSubscriptionFilter(ctx, "testLambdafunctionLogfilter", &cloudwatch.LogSubscriptionFilterArgs{
// 			RoleArn:        pulumi.Any(aws_iam_role.Iam_for_lambda.Arn),
// 			LogGroup:       pulumi.Any("/aws/lambda/example_lambda_name"),
// 			FilterPattern:  pulumi.String("logtype test"),
// 			DestinationArn: pulumi.Any(aws_kinesis_stream.Test_logstream.Arn),
// 			Distribution:   pulumi.String("Random"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// CloudWatch Logs subscription filter can be imported using the log group name and subscription filter name separated by `|`.
//
// ```sh
//  $ pulumi import aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter test_lambdafunction_logfilter /aws/lambda/example_lambda_name|test_lambdafunction_logfilter
// ```
type LogSubscriptionFilter struct {
	pulumi.CustomResourceState

	// The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
	DestinationArn pulumi.StringOutput `pulumi:"destinationArn"`
	// The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
	Distribution pulumi.StringPtrOutput `pulumi:"distribution"`
	// A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events.
	FilterPattern pulumi.StringOutput `pulumi:"filterPattern"`
	// The name of the log group to associate the subscription filter with
	LogGroup pulumi.StringOutput `pulumi:"logGroup"`
	// A name for the subscription filter
	Name pulumi.StringOutput `pulumi:"name"`
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
}

// NewLogSubscriptionFilter registers a new resource with the given unique name, arguments, and options.
func NewLogSubscriptionFilter(ctx *pulumi.Context,
	name string, args *LogSubscriptionFilterArgs, opts ...pulumi.ResourceOption) (*LogSubscriptionFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationArn == nil {
		return nil, errors.New("invalid value for required argument 'DestinationArn'")
	}
	if args.FilterPattern == nil {
		return nil, errors.New("invalid value for required argument 'FilterPattern'")
	}
	if args.LogGroup == nil {
		return nil, errors.New("invalid value for required argument 'LogGroup'")
	}
	var resource LogSubscriptionFilter
	err := ctx.RegisterResource("aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogSubscriptionFilter gets an existing LogSubscriptionFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogSubscriptionFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogSubscriptionFilterState, opts ...pulumi.ResourceOption) (*LogSubscriptionFilter, error) {
	var resource LogSubscriptionFilter
	err := ctx.ReadResource("aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogSubscriptionFilter resources.
type logSubscriptionFilterState struct {
	// The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
	DestinationArn *string `pulumi:"destinationArn"`
	// The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
	Distribution *string `pulumi:"distribution"`
	// A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events.
	FilterPattern *string `pulumi:"filterPattern"`
	// The name of the log group to associate the subscription filter with
	LogGroup interface{} `pulumi:"logGroup"`
	// A name for the subscription filter
	Name *string `pulumi:"name"`
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
	RoleArn *string `pulumi:"roleArn"`
}

type LogSubscriptionFilterState struct {
	// The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
	DestinationArn pulumi.StringPtrInput
	// The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
	Distribution pulumi.StringPtrInput
	// A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events.
	FilterPattern pulumi.StringPtrInput
	// The name of the log group to associate the subscription filter with
	LogGroup pulumi.Input
	// A name for the subscription filter
	Name pulumi.StringPtrInput
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
	RoleArn pulumi.StringPtrInput
}

func (LogSubscriptionFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logSubscriptionFilterState)(nil)).Elem()
}

type logSubscriptionFilterArgs struct {
	// The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
	DestinationArn string `pulumi:"destinationArn"`
	// The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
	Distribution *string `pulumi:"distribution"`
	// A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events.
	FilterPattern string `pulumi:"filterPattern"`
	// The name of the log group to associate the subscription filter with
	LogGroup interface{} `pulumi:"logGroup"`
	// A name for the subscription filter
	Name *string `pulumi:"name"`
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
	RoleArn *string `pulumi:"roleArn"`
}

// The set of arguments for constructing a LogSubscriptionFilter resource.
type LogSubscriptionFilterArgs struct {
	// The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
	DestinationArn pulumi.StringInput
	// The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
	Distribution pulumi.StringPtrInput
	// A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events.
	FilterPattern pulumi.StringInput
	// The name of the log group to associate the subscription filter with
	LogGroup pulumi.Input
	// A name for the subscription filter
	Name pulumi.StringPtrInput
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
	RoleArn pulumi.StringPtrInput
}

func (LogSubscriptionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logSubscriptionFilterArgs)(nil)).Elem()
}

type LogSubscriptionFilterInput interface {
	pulumi.Input

	ToLogSubscriptionFilterOutput() LogSubscriptionFilterOutput
	ToLogSubscriptionFilterOutputWithContext(ctx context.Context) LogSubscriptionFilterOutput
}

func (*LogSubscriptionFilter) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSubscriptionFilter)(nil))
}

func (i *LogSubscriptionFilter) ToLogSubscriptionFilterOutput() LogSubscriptionFilterOutput {
	return i.ToLogSubscriptionFilterOutputWithContext(context.Background())
}

func (i *LogSubscriptionFilter) ToLogSubscriptionFilterOutputWithContext(ctx context.Context) LogSubscriptionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSubscriptionFilterOutput)
}

func (i *LogSubscriptionFilter) ToLogSubscriptionFilterPtrOutput() LogSubscriptionFilterPtrOutput {
	return i.ToLogSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i *LogSubscriptionFilter) ToLogSubscriptionFilterPtrOutputWithContext(ctx context.Context) LogSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSubscriptionFilterPtrOutput)
}

type LogSubscriptionFilterPtrInput interface {
	pulumi.Input

	ToLogSubscriptionFilterPtrOutput() LogSubscriptionFilterPtrOutput
	ToLogSubscriptionFilterPtrOutputWithContext(ctx context.Context) LogSubscriptionFilterPtrOutput
}

type logSubscriptionFilterPtrType LogSubscriptionFilterArgs

func (*logSubscriptionFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSubscriptionFilter)(nil))
}

func (i *logSubscriptionFilterPtrType) ToLogSubscriptionFilterPtrOutput() LogSubscriptionFilterPtrOutput {
	return i.ToLogSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i *logSubscriptionFilterPtrType) ToLogSubscriptionFilterPtrOutputWithContext(ctx context.Context) LogSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSubscriptionFilterPtrOutput)
}

// LogSubscriptionFilterArrayInput is an input type that accepts LogSubscriptionFilterArray and LogSubscriptionFilterArrayOutput values.
// You can construct a concrete instance of `LogSubscriptionFilterArrayInput` via:
//
//          LogSubscriptionFilterArray{ LogSubscriptionFilterArgs{...} }
type LogSubscriptionFilterArrayInput interface {
	pulumi.Input

	ToLogSubscriptionFilterArrayOutput() LogSubscriptionFilterArrayOutput
	ToLogSubscriptionFilterArrayOutputWithContext(context.Context) LogSubscriptionFilterArrayOutput
}

type LogSubscriptionFilterArray []LogSubscriptionFilterInput

func (LogSubscriptionFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*LogSubscriptionFilter)(nil))
}

func (i LogSubscriptionFilterArray) ToLogSubscriptionFilterArrayOutput() LogSubscriptionFilterArrayOutput {
	return i.ToLogSubscriptionFilterArrayOutputWithContext(context.Background())
}

func (i LogSubscriptionFilterArray) ToLogSubscriptionFilterArrayOutputWithContext(ctx context.Context) LogSubscriptionFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSubscriptionFilterArrayOutput)
}

// LogSubscriptionFilterMapInput is an input type that accepts LogSubscriptionFilterMap and LogSubscriptionFilterMapOutput values.
// You can construct a concrete instance of `LogSubscriptionFilterMapInput` via:
//
//          LogSubscriptionFilterMap{ "key": LogSubscriptionFilterArgs{...} }
type LogSubscriptionFilterMapInput interface {
	pulumi.Input

	ToLogSubscriptionFilterMapOutput() LogSubscriptionFilterMapOutput
	ToLogSubscriptionFilterMapOutputWithContext(context.Context) LogSubscriptionFilterMapOutput
}

type LogSubscriptionFilterMap map[string]LogSubscriptionFilterInput

func (LogSubscriptionFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*LogSubscriptionFilter)(nil))
}

func (i LogSubscriptionFilterMap) ToLogSubscriptionFilterMapOutput() LogSubscriptionFilterMapOutput {
	return i.ToLogSubscriptionFilterMapOutputWithContext(context.Background())
}

func (i LogSubscriptionFilterMap) ToLogSubscriptionFilterMapOutputWithContext(ctx context.Context) LogSubscriptionFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSubscriptionFilterMapOutput)
}

type LogSubscriptionFilterOutput struct {
	*pulumi.OutputState
}

func (LogSubscriptionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSubscriptionFilter)(nil))
}

func (o LogSubscriptionFilterOutput) ToLogSubscriptionFilterOutput() LogSubscriptionFilterOutput {
	return o
}

func (o LogSubscriptionFilterOutput) ToLogSubscriptionFilterOutputWithContext(ctx context.Context) LogSubscriptionFilterOutput {
	return o
}

func (o LogSubscriptionFilterOutput) ToLogSubscriptionFilterPtrOutput() LogSubscriptionFilterPtrOutput {
	return o.ToLogSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (o LogSubscriptionFilterOutput) ToLogSubscriptionFilterPtrOutputWithContext(ctx context.Context) LogSubscriptionFilterPtrOutput {
	return o.ApplyT(func(v LogSubscriptionFilter) *LogSubscriptionFilter {
		return &v
	}).(LogSubscriptionFilterPtrOutput)
}

type LogSubscriptionFilterPtrOutput struct {
	*pulumi.OutputState
}

func (LogSubscriptionFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSubscriptionFilter)(nil))
}

func (o LogSubscriptionFilterPtrOutput) ToLogSubscriptionFilterPtrOutput() LogSubscriptionFilterPtrOutput {
	return o
}

func (o LogSubscriptionFilterPtrOutput) ToLogSubscriptionFilterPtrOutputWithContext(ctx context.Context) LogSubscriptionFilterPtrOutput {
	return o
}

type LogSubscriptionFilterArrayOutput struct{ *pulumi.OutputState }

func (LogSubscriptionFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogSubscriptionFilter)(nil))
}

func (o LogSubscriptionFilterArrayOutput) ToLogSubscriptionFilterArrayOutput() LogSubscriptionFilterArrayOutput {
	return o
}

func (o LogSubscriptionFilterArrayOutput) ToLogSubscriptionFilterArrayOutputWithContext(ctx context.Context) LogSubscriptionFilterArrayOutput {
	return o
}

func (o LogSubscriptionFilterArrayOutput) Index(i pulumi.IntInput) LogSubscriptionFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogSubscriptionFilter {
		return vs[0].([]LogSubscriptionFilter)[vs[1].(int)]
	}).(LogSubscriptionFilterOutput)
}

type LogSubscriptionFilterMapOutput struct{ *pulumi.OutputState }

func (LogSubscriptionFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LogSubscriptionFilter)(nil))
}

func (o LogSubscriptionFilterMapOutput) ToLogSubscriptionFilterMapOutput() LogSubscriptionFilterMapOutput {
	return o
}

func (o LogSubscriptionFilterMapOutput) ToLogSubscriptionFilterMapOutputWithContext(ctx context.Context) LogSubscriptionFilterMapOutput {
	return o
}

func (o LogSubscriptionFilterMapOutput) MapIndex(k pulumi.StringInput) LogSubscriptionFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LogSubscriptionFilter {
		return vs[0].(map[string]LogSubscriptionFilter)[vs[1].(string)]
	}).(LogSubscriptionFilterOutput)
}

func init() {
	pulumi.RegisterOutputType(LogSubscriptionFilterOutput{})
	pulumi.RegisterOutputType(LogSubscriptionFilterPtrOutput{})
	pulumi.RegisterOutputType(LogSubscriptionFilterArrayOutput{})
	pulumi.RegisterOutputType(LogSubscriptionFilterMapOutput{})
}
