// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about an EventBridge Partner Event Source. This data source will only return one partner event source. An error will be returned if multiple sources match the same name prefix.
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "aws.partner/examplepartner.com"
// 		_, err := cloudwatch.GetEventSource(ctx, &cloudwatch.GetEventSourceArgs{
// 			NamePrefix: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetEventSource(ctx *pulumi.Context, args *GetEventSourceArgs, opts ...pulumi.InvokeOption) (*GetEventSourceResult, error) {
	var rv GetEventSourceResult
	err := ctx.Invoke("aws:cloudwatch/getEventSource:getEventSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEventSource.
type GetEventSourceArgs struct {
	// Specifying this limits the results to only those partner event sources with names that start with the specified prefix
	NamePrefix *string `pulumi:"namePrefix"`
}

// A collection of values returned by getEventSource.
type GetEventSourceResult struct {
	// The ARN of the partner event source
	Arn string `pulumi:"arn"`
	// The name of the SaaS partner that created the event source
	CreatedBy string `pulumi:"createdBy"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the event source
	Name       string  `pulumi:"name"`
	NamePrefix *string `pulumi:"namePrefix"`
	// The state of the event source (`ACTIVE` or `PENDING`)
	State string `pulumi:"state"`
}
