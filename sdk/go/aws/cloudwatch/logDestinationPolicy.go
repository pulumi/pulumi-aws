// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CloudWatch Logs destination policy resource.
type LogDestinationPolicy struct {
	s *pulumi.ResourceState
}

// NewLogDestinationPolicy registers a new resource with the given unique name, arguments, and options.
func NewLogDestinationPolicy(ctx *pulumi.Context,
	name string, args *LogDestinationPolicyArgs, opts ...pulumi.ResourceOpt) (*LogDestinationPolicy, error) {
	if args == nil || args.AccessPolicy == nil {
		return nil, errors.New("missing required argument 'AccessPolicy'")
	}
	if args == nil || args.DestinationName == nil {
		return nil, errors.New("missing required argument 'DestinationName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessPolicy"] = nil
		inputs["destinationName"] = nil
	} else {
		inputs["accessPolicy"] = args.AccessPolicy
		inputs["destinationName"] = args.DestinationName
	}
	s, err := ctx.RegisterResource("aws:cloudwatch/logDestinationPolicy:LogDestinationPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogDestinationPolicy{s: s}, nil
}

// GetLogDestinationPolicy gets an existing LogDestinationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogDestinationPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LogDestinationPolicyState, opts ...pulumi.ResourceOpt) (*LogDestinationPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessPolicy"] = state.AccessPolicy
		inputs["destinationName"] = state.DestinationName
	}
	s, err := ctx.ReadResource("aws:cloudwatch/logDestinationPolicy:LogDestinationPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogDestinationPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LogDestinationPolicy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LogDestinationPolicy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The policy document. This is a JSON formatted string.
func (r *LogDestinationPolicy) AccessPolicy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessPolicy"])
}

// A name for the subscription filter
func (r *LogDestinationPolicy) DestinationName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destinationName"])
}

// Input properties used for looking up and filtering LogDestinationPolicy resources.
type LogDestinationPolicyState struct {
	// The policy document. This is a JSON formatted string.
	AccessPolicy interface{}
	// A name for the subscription filter
	DestinationName interface{}
}

// The set of arguments for constructing a LogDestinationPolicy resource.
type LogDestinationPolicyArgs struct {
	// The policy document. This is a JSON formatted string.
	AccessPolicy interface{}
	// A name for the subscription filter
	DestinationName interface{}
}
