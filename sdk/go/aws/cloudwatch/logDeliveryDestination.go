// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS CloudWatch Logs Delivery Destination.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.NewLogDeliveryDestination(ctx, "example", &cloudwatch.LogDeliveryDestinationArgs{
//				Name: pulumi.String("example"),
//				DeliveryDestinationConfiguration: &cloudwatch.LogDeliveryDestinationDeliveryDestinationConfigurationArgs{
//					DestinationResourceArn: pulumi.Any(exampleAwsCloudwatchLogGroup.Arn),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import CloudWatch Logs Delivery Destination using the `name`. For example:
//
// ```sh
// $ pulumi import aws:cloudwatch/logDeliveryDestination:LogDeliveryDestination example example
// ```
type LogDeliveryDestination struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the delivery destination.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The AWS resource that will receive the logs.
	DeliveryDestinationConfiguration LogDeliveryDestinationDeliveryDestinationConfigurationPtrOutput `pulumi:"deliveryDestinationConfiguration"`
	// Whether this delivery destination is CloudWatch Logs, Amazon S3, or Firehose.
	DeliveryDestinationType pulumi.StringOutput `pulumi:"deliveryDestinationType"`
	// The name for this delivery destination.
	Name pulumi.StringOutput `pulumi:"name"`
	// The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
	OutputFormat pulumi.StringPtrOutput `pulumi:"outputFormat"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewLogDeliveryDestination registers a new resource with the given unique name, arguments, and options.
func NewLogDeliveryDestination(ctx *pulumi.Context,
	name string, args *LogDeliveryDestinationArgs, opts ...pulumi.ResourceOption) (*LogDeliveryDestination, error) {
	if args == nil {
		args = &LogDeliveryDestinationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogDeliveryDestination
	err := ctx.RegisterResource("aws:cloudwatch/logDeliveryDestination:LogDeliveryDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogDeliveryDestination gets an existing LogDeliveryDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogDeliveryDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogDeliveryDestinationState, opts ...pulumi.ResourceOption) (*LogDeliveryDestination, error) {
	var resource LogDeliveryDestination
	err := ctx.ReadResource("aws:cloudwatch/logDeliveryDestination:LogDeliveryDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogDeliveryDestination resources.
type logDeliveryDestinationState struct {
	// The Amazon Resource Name (ARN) of the delivery destination.
	Arn *string `pulumi:"arn"`
	// The AWS resource that will receive the logs.
	DeliveryDestinationConfiguration *LogDeliveryDestinationDeliveryDestinationConfiguration `pulumi:"deliveryDestinationConfiguration"`
	// Whether this delivery destination is CloudWatch Logs, Amazon S3, or Firehose.
	DeliveryDestinationType *string `pulumi:"deliveryDestinationType"`
	// The name for this delivery destination.
	Name *string `pulumi:"name"`
	// The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
	OutputFormat *string `pulumi:"outputFormat"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LogDeliveryDestinationState struct {
	// The Amazon Resource Name (ARN) of the delivery destination.
	Arn pulumi.StringPtrInput
	// The AWS resource that will receive the logs.
	DeliveryDestinationConfiguration LogDeliveryDestinationDeliveryDestinationConfigurationPtrInput
	// Whether this delivery destination is CloudWatch Logs, Amazon S3, or Firehose.
	DeliveryDestinationType pulumi.StringPtrInput
	// The name for this delivery destination.
	Name pulumi.StringPtrInput
	// The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
	OutputFormat pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (LogDeliveryDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliveryDestinationState)(nil)).Elem()
}

type logDeliveryDestinationArgs struct {
	// The AWS resource that will receive the logs.
	DeliveryDestinationConfiguration *LogDeliveryDestinationDeliveryDestinationConfiguration `pulumi:"deliveryDestinationConfiguration"`
	// The name for this delivery destination.
	Name *string `pulumi:"name"`
	// The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
	OutputFormat *string `pulumi:"outputFormat"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LogDeliveryDestination resource.
type LogDeliveryDestinationArgs struct {
	// The AWS resource that will receive the logs.
	DeliveryDestinationConfiguration LogDeliveryDestinationDeliveryDestinationConfigurationPtrInput
	// The name for this delivery destination.
	Name pulumi.StringPtrInput
	// The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
	OutputFormat pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (LogDeliveryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliveryDestinationArgs)(nil)).Elem()
}

type LogDeliveryDestinationInput interface {
	pulumi.Input

	ToLogDeliveryDestinationOutput() LogDeliveryDestinationOutput
	ToLogDeliveryDestinationOutputWithContext(ctx context.Context) LogDeliveryDestinationOutput
}

func (*LogDeliveryDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDeliveryDestination)(nil)).Elem()
}

func (i *LogDeliveryDestination) ToLogDeliveryDestinationOutput() LogDeliveryDestinationOutput {
	return i.ToLogDeliveryDestinationOutputWithContext(context.Background())
}

func (i *LogDeliveryDestination) ToLogDeliveryDestinationOutputWithContext(ctx context.Context) LogDeliveryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryDestinationOutput)
}

// LogDeliveryDestinationArrayInput is an input type that accepts LogDeliveryDestinationArray and LogDeliveryDestinationArrayOutput values.
// You can construct a concrete instance of `LogDeliveryDestinationArrayInput` via:
//
//	LogDeliveryDestinationArray{ LogDeliveryDestinationArgs{...} }
type LogDeliveryDestinationArrayInput interface {
	pulumi.Input

	ToLogDeliveryDestinationArrayOutput() LogDeliveryDestinationArrayOutput
	ToLogDeliveryDestinationArrayOutputWithContext(context.Context) LogDeliveryDestinationArrayOutput
}

type LogDeliveryDestinationArray []LogDeliveryDestinationInput

func (LogDeliveryDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDeliveryDestination)(nil)).Elem()
}

func (i LogDeliveryDestinationArray) ToLogDeliveryDestinationArrayOutput() LogDeliveryDestinationArrayOutput {
	return i.ToLogDeliveryDestinationArrayOutputWithContext(context.Background())
}

func (i LogDeliveryDestinationArray) ToLogDeliveryDestinationArrayOutputWithContext(ctx context.Context) LogDeliveryDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryDestinationArrayOutput)
}

// LogDeliveryDestinationMapInput is an input type that accepts LogDeliveryDestinationMap and LogDeliveryDestinationMapOutput values.
// You can construct a concrete instance of `LogDeliveryDestinationMapInput` via:
//
//	LogDeliveryDestinationMap{ "key": LogDeliveryDestinationArgs{...} }
type LogDeliveryDestinationMapInput interface {
	pulumi.Input

	ToLogDeliveryDestinationMapOutput() LogDeliveryDestinationMapOutput
	ToLogDeliveryDestinationMapOutputWithContext(context.Context) LogDeliveryDestinationMapOutput
}

type LogDeliveryDestinationMap map[string]LogDeliveryDestinationInput

func (LogDeliveryDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDeliveryDestination)(nil)).Elem()
}

func (i LogDeliveryDestinationMap) ToLogDeliveryDestinationMapOutput() LogDeliveryDestinationMapOutput {
	return i.ToLogDeliveryDestinationMapOutputWithContext(context.Background())
}

func (i LogDeliveryDestinationMap) ToLogDeliveryDestinationMapOutputWithContext(ctx context.Context) LogDeliveryDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryDestinationMapOutput)
}

type LogDeliveryDestinationOutput struct{ *pulumi.OutputState }

func (LogDeliveryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDeliveryDestination)(nil)).Elem()
}

func (o LogDeliveryDestinationOutput) ToLogDeliveryDestinationOutput() LogDeliveryDestinationOutput {
	return o
}

func (o LogDeliveryDestinationOutput) ToLogDeliveryDestinationOutputWithContext(ctx context.Context) LogDeliveryDestinationOutput {
	return o
}

// The Amazon Resource Name (ARN) of the delivery destination.
func (o LogDeliveryDestinationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliveryDestination) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The AWS resource that will receive the logs.
func (o LogDeliveryDestinationOutput) DeliveryDestinationConfiguration() LogDeliveryDestinationDeliveryDestinationConfigurationPtrOutput {
	return o.ApplyT(func(v *LogDeliveryDestination) LogDeliveryDestinationDeliveryDestinationConfigurationPtrOutput {
		return v.DeliveryDestinationConfiguration
	}).(LogDeliveryDestinationDeliveryDestinationConfigurationPtrOutput)
}

// Whether this delivery destination is CloudWatch Logs, Amazon S3, or Firehose.
func (o LogDeliveryDestinationOutput) DeliveryDestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliveryDestination) pulumi.StringOutput { return v.DeliveryDestinationType }).(pulumi.StringOutput)
}

// The name for this delivery destination.
func (o LogDeliveryDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliveryDestination) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
func (o LogDeliveryDestinationOutput) OutputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogDeliveryDestination) pulumi.StringPtrOutput { return v.OutputFormat }).(pulumi.StringPtrOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LogDeliveryDestinationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogDeliveryDestination) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o LogDeliveryDestinationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogDeliveryDestination) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LogDeliveryDestinationArrayOutput struct{ *pulumi.OutputState }

func (LogDeliveryDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDeliveryDestination)(nil)).Elem()
}

func (o LogDeliveryDestinationArrayOutput) ToLogDeliveryDestinationArrayOutput() LogDeliveryDestinationArrayOutput {
	return o
}

func (o LogDeliveryDestinationArrayOutput) ToLogDeliveryDestinationArrayOutputWithContext(ctx context.Context) LogDeliveryDestinationArrayOutput {
	return o
}

func (o LogDeliveryDestinationArrayOutput) Index(i pulumi.IntInput) LogDeliveryDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogDeliveryDestination {
		return vs[0].([]*LogDeliveryDestination)[vs[1].(int)]
	}).(LogDeliveryDestinationOutput)
}

type LogDeliveryDestinationMapOutput struct{ *pulumi.OutputState }

func (LogDeliveryDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDeliveryDestination)(nil)).Elem()
}

func (o LogDeliveryDestinationMapOutput) ToLogDeliveryDestinationMapOutput() LogDeliveryDestinationMapOutput {
	return o
}

func (o LogDeliveryDestinationMapOutput) ToLogDeliveryDestinationMapOutputWithContext(ctx context.Context) LogDeliveryDestinationMapOutput {
	return o
}

func (o LogDeliveryDestinationMapOutput) MapIndex(k pulumi.StringInput) LogDeliveryDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogDeliveryDestination {
		return vs[0].(map[string]*LogDeliveryDestination)[vs[1].(string)]
	}).(LogDeliveryDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryDestinationInput)(nil)).Elem(), &LogDeliveryDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryDestinationArrayInput)(nil)).Elem(), LogDeliveryDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryDestinationMapInput)(nil)).Elem(), LogDeliveryDestinationMap{})
	pulumi.RegisterOutputType(LogDeliveryDestinationOutput{})
	pulumi.RegisterOutputType(LogDeliveryDestinationArrayOutput{})
	pulumi.RegisterOutputType(LogDeliveryDestinationMapOutput{})
}
