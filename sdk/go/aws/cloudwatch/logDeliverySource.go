// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS CloudWatch Logs Delivery Source.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.NewLogDeliverySource(ctx, "example", &cloudwatch.LogDeliverySourceArgs{
//				Name:        pulumi.String("example"),
//				LogType:     pulumi.String("APPLICATION_LOGS"),
//				ResourceArn: pulumi.Any(exampleAwsBedrockagentKnowledgeBase.Arn),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import CloudWatch Logs Delivery Source using the `name`. For example:
//
// ```sh
// $ pulumi import aws:cloudwatch/logDeliverySource:LogDeliverySource example example
// ```
type LogDeliverySource struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the delivery source.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The type of log that the source is sending. For Amazon Bedrock, the valid value is `APPLICATION_LOGS`. For Amazon CodeWhisperer, the valid value is `EVENT_LOGS`. For IAM Identity Center, the valid value is `ERROR_LOGS`. For Amazon WorkMail, the valid values are `ACCESS_CONTROL_LOGS`, `AUTHENTICATION_LOGS`, `WORKMAIL_AVAILABILITY_PROVIDER_LOGS`, and `WORKMAIL_MAILBOX_ACCESS_LOGS`.
	LogType pulumi.StringOutput `pulumi:"logType"`
	// The name for this delivery source.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ARN of the AWS resource that is generating and sending logs.
	ResourceArn pulumi.StringOutput `pulumi:"resourceArn"`
	// The AWS service that is sending logs.
	Service pulumi.StringOutput `pulumi:"service"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewLogDeliverySource registers a new resource with the given unique name, arguments, and options.
func NewLogDeliverySource(ctx *pulumi.Context,
	name string, args *LogDeliverySourceArgs, opts ...pulumi.ResourceOption) (*LogDeliverySource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogType == nil {
		return nil, errors.New("invalid value for required argument 'LogType'")
	}
	if args.ResourceArn == nil {
		return nil, errors.New("invalid value for required argument 'ResourceArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogDeliverySource
	err := ctx.RegisterResource("aws:cloudwatch/logDeliverySource:LogDeliverySource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogDeliverySource gets an existing LogDeliverySource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogDeliverySource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogDeliverySourceState, opts ...pulumi.ResourceOption) (*LogDeliverySource, error) {
	var resource LogDeliverySource
	err := ctx.ReadResource("aws:cloudwatch/logDeliverySource:LogDeliverySource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogDeliverySource resources.
type logDeliverySourceState struct {
	// The Amazon Resource Name (ARN) of the delivery source.
	Arn *string `pulumi:"arn"`
	// The type of log that the source is sending. For Amazon Bedrock, the valid value is `APPLICATION_LOGS`. For Amazon CodeWhisperer, the valid value is `EVENT_LOGS`. For IAM Identity Center, the valid value is `ERROR_LOGS`. For Amazon WorkMail, the valid values are `ACCESS_CONTROL_LOGS`, `AUTHENTICATION_LOGS`, `WORKMAIL_AVAILABILITY_PROVIDER_LOGS`, and `WORKMAIL_MAILBOX_ACCESS_LOGS`.
	LogType *string `pulumi:"logType"`
	// The name for this delivery source.
	Name *string `pulumi:"name"`
	// The ARN of the AWS resource that is generating and sending logs.
	ResourceArn *string `pulumi:"resourceArn"`
	// The AWS service that is sending logs.
	Service *string `pulumi:"service"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LogDeliverySourceState struct {
	// The Amazon Resource Name (ARN) of the delivery source.
	Arn pulumi.StringPtrInput
	// The type of log that the source is sending. For Amazon Bedrock, the valid value is `APPLICATION_LOGS`. For Amazon CodeWhisperer, the valid value is `EVENT_LOGS`. For IAM Identity Center, the valid value is `ERROR_LOGS`. For Amazon WorkMail, the valid values are `ACCESS_CONTROL_LOGS`, `AUTHENTICATION_LOGS`, `WORKMAIL_AVAILABILITY_PROVIDER_LOGS`, and `WORKMAIL_MAILBOX_ACCESS_LOGS`.
	LogType pulumi.StringPtrInput
	// The name for this delivery source.
	Name pulumi.StringPtrInput
	// The ARN of the AWS resource that is generating and sending logs.
	ResourceArn pulumi.StringPtrInput
	// The AWS service that is sending logs.
	Service pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (LogDeliverySourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliverySourceState)(nil)).Elem()
}

type logDeliverySourceArgs struct {
	// The type of log that the source is sending. For Amazon Bedrock, the valid value is `APPLICATION_LOGS`. For Amazon CodeWhisperer, the valid value is `EVENT_LOGS`. For IAM Identity Center, the valid value is `ERROR_LOGS`. For Amazon WorkMail, the valid values are `ACCESS_CONTROL_LOGS`, `AUTHENTICATION_LOGS`, `WORKMAIL_AVAILABILITY_PROVIDER_LOGS`, and `WORKMAIL_MAILBOX_ACCESS_LOGS`.
	LogType string `pulumi:"logType"`
	// The name for this delivery source.
	Name *string `pulumi:"name"`
	// The ARN of the AWS resource that is generating and sending logs.
	ResourceArn string `pulumi:"resourceArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LogDeliverySource resource.
type LogDeliverySourceArgs struct {
	// The type of log that the source is sending. For Amazon Bedrock, the valid value is `APPLICATION_LOGS`. For Amazon CodeWhisperer, the valid value is `EVENT_LOGS`. For IAM Identity Center, the valid value is `ERROR_LOGS`. For Amazon WorkMail, the valid values are `ACCESS_CONTROL_LOGS`, `AUTHENTICATION_LOGS`, `WORKMAIL_AVAILABILITY_PROVIDER_LOGS`, and `WORKMAIL_MAILBOX_ACCESS_LOGS`.
	LogType pulumi.StringInput
	// The name for this delivery source.
	Name pulumi.StringPtrInput
	// The ARN of the AWS resource that is generating and sending logs.
	ResourceArn pulumi.StringInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (LogDeliverySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliverySourceArgs)(nil)).Elem()
}

type LogDeliverySourceInput interface {
	pulumi.Input

	ToLogDeliverySourceOutput() LogDeliverySourceOutput
	ToLogDeliverySourceOutputWithContext(ctx context.Context) LogDeliverySourceOutput
}

func (*LogDeliverySource) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDeliverySource)(nil)).Elem()
}

func (i *LogDeliverySource) ToLogDeliverySourceOutput() LogDeliverySourceOutput {
	return i.ToLogDeliverySourceOutputWithContext(context.Background())
}

func (i *LogDeliverySource) ToLogDeliverySourceOutputWithContext(ctx context.Context) LogDeliverySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliverySourceOutput)
}

// LogDeliverySourceArrayInput is an input type that accepts LogDeliverySourceArray and LogDeliverySourceArrayOutput values.
// You can construct a concrete instance of `LogDeliverySourceArrayInput` via:
//
//	LogDeliverySourceArray{ LogDeliverySourceArgs{...} }
type LogDeliverySourceArrayInput interface {
	pulumi.Input

	ToLogDeliverySourceArrayOutput() LogDeliverySourceArrayOutput
	ToLogDeliverySourceArrayOutputWithContext(context.Context) LogDeliverySourceArrayOutput
}

type LogDeliverySourceArray []LogDeliverySourceInput

func (LogDeliverySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDeliverySource)(nil)).Elem()
}

func (i LogDeliverySourceArray) ToLogDeliverySourceArrayOutput() LogDeliverySourceArrayOutput {
	return i.ToLogDeliverySourceArrayOutputWithContext(context.Background())
}

func (i LogDeliverySourceArray) ToLogDeliverySourceArrayOutputWithContext(ctx context.Context) LogDeliverySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliverySourceArrayOutput)
}

// LogDeliverySourceMapInput is an input type that accepts LogDeliverySourceMap and LogDeliverySourceMapOutput values.
// You can construct a concrete instance of `LogDeliverySourceMapInput` via:
//
//	LogDeliverySourceMap{ "key": LogDeliverySourceArgs{...} }
type LogDeliverySourceMapInput interface {
	pulumi.Input

	ToLogDeliverySourceMapOutput() LogDeliverySourceMapOutput
	ToLogDeliverySourceMapOutputWithContext(context.Context) LogDeliverySourceMapOutput
}

type LogDeliverySourceMap map[string]LogDeliverySourceInput

func (LogDeliverySourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDeliverySource)(nil)).Elem()
}

func (i LogDeliverySourceMap) ToLogDeliverySourceMapOutput() LogDeliverySourceMapOutput {
	return i.ToLogDeliverySourceMapOutputWithContext(context.Background())
}

func (i LogDeliverySourceMap) ToLogDeliverySourceMapOutputWithContext(ctx context.Context) LogDeliverySourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliverySourceMapOutput)
}

type LogDeliverySourceOutput struct{ *pulumi.OutputState }

func (LogDeliverySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDeliverySource)(nil)).Elem()
}

func (o LogDeliverySourceOutput) ToLogDeliverySourceOutput() LogDeliverySourceOutput {
	return o
}

func (o LogDeliverySourceOutput) ToLogDeliverySourceOutputWithContext(ctx context.Context) LogDeliverySourceOutput {
	return o
}

// The Amazon Resource Name (ARN) of the delivery source.
func (o LogDeliverySourceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliverySource) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The type of log that the source is sending. For Amazon Bedrock, the valid value is `APPLICATION_LOGS`. For Amazon CodeWhisperer, the valid value is `EVENT_LOGS`. For IAM Identity Center, the valid value is `ERROR_LOGS`. For Amazon WorkMail, the valid values are `ACCESS_CONTROL_LOGS`, `AUTHENTICATION_LOGS`, `WORKMAIL_AVAILABILITY_PROVIDER_LOGS`, and `WORKMAIL_MAILBOX_ACCESS_LOGS`.
func (o LogDeliverySourceOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliverySource) pulumi.StringOutput { return v.LogType }).(pulumi.StringOutput)
}

// The name for this delivery source.
func (o LogDeliverySourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliverySource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ARN of the AWS resource that is generating and sending logs.
func (o LogDeliverySourceOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliverySource) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

// The AWS service that is sending logs.
func (o LogDeliverySourceOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliverySource) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LogDeliverySourceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogDeliverySource) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o LogDeliverySourceOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogDeliverySource) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LogDeliverySourceArrayOutput struct{ *pulumi.OutputState }

func (LogDeliverySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDeliverySource)(nil)).Elem()
}

func (o LogDeliverySourceArrayOutput) ToLogDeliverySourceArrayOutput() LogDeliverySourceArrayOutput {
	return o
}

func (o LogDeliverySourceArrayOutput) ToLogDeliverySourceArrayOutputWithContext(ctx context.Context) LogDeliverySourceArrayOutput {
	return o
}

func (o LogDeliverySourceArrayOutput) Index(i pulumi.IntInput) LogDeliverySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogDeliverySource {
		return vs[0].([]*LogDeliverySource)[vs[1].(int)]
	}).(LogDeliverySourceOutput)
}

type LogDeliverySourceMapOutput struct{ *pulumi.OutputState }

func (LogDeliverySourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDeliverySource)(nil)).Elem()
}

func (o LogDeliverySourceMapOutput) ToLogDeliverySourceMapOutput() LogDeliverySourceMapOutput {
	return o
}

func (o LogDeliverySourceMapOutput) ToLogDeliverySourceMapOutputWithContext(ctx context.Context) LogDeliverySourceMapOutput {
	return o
}

func (o LogDeliverySourceMapOutput) MapIndex(k pulumi.StringInput) LogDeliverySourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogDeliverySource {
		return vs[0].(map[string]*LogDeliverySource)[vs[1].(string)]
	}).(LogDeliverySourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliverySourceInput)(nil)).Elem(), &LogDeliverySource{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliverySourceArrayInput)(nil)).Elem(), LogDeliverySourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliverySourceMapInput)(nil)).Elem(), LogDeliverySourceMap{})
	pulumi.RegisterOutputType(LogDeliverySourceOutput{})
	pulumi.RegisterOutputType(LogDeliverySourceArrayOutput{})
	pulumi.RegisterOutputType(LogDeliverySourceMapOutput{})
}
