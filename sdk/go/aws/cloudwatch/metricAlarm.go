// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MetricAlarm struct {
	pulumi.CustomResourceState

	ActionsEnabled                    pulumi.BoolPtrOutput              `pulumi:"actionsEnabled"`
	AlarmActions                      pulumi.StringArrayOutput          `pulumi:"alarmActions"`
	AlarmDescription                  pulumi.StringPtrOutput            `pulumi:"alarmDescription"`
	Arn                               pulumi.StringOutput               `pulumi:"arn"`
	ComparisonOperator                pulumi.StringOutput               `pulumi:"comparisonOperator"`
	DatapointsToAlarm                 pulumi.IntPtrOutput               `pulumi:"datapointsToAlarm"`
	Dimensions                        pulumi.StringMapOutput            `pulumi:"dimensions"`
	EvaluateLowSampleCountPercentiles pulumi.StringOutput               `pulumi:"evaluateLowSampleCountPercentiles"`
	EvaluationPeriods                 pulumi.IntOutput                  `pulumi:"evaluationPeriods"`
	ExtendedStatistic                 pulumi.StringPtrOutput            `pulumi:"extendedStatistic"`
	InsufficientDataActions           pulumi.StringArrayOutput          `pulumi:"insufficientDataActions"`
	MetricName                        pulumi.StringPtrOutput            `pulumi:"metricName"`
	MetricQueries                     MetricAlarmMetricQueryArrayOutput `pulumi:"metricQueries"`
	Name                              pulumi.StringOutput               `pulumi:"name"`
	Namespace                         pulumi.StringPtrOutput            `pulumi:"namespace"`
	OkActions                         pulumi.StringArrayOutput          `pulumi:"okActions"`
	Period                            pulumi.IntPtrOutput               `pulumi:"period"`
	Statistic                         pulumi.StringPtrOutput            `pulumi:"statistic"`
	Tags                              pulumi.StringMapOutput            `pulumi:"tags"`
	TagsAll                           pulumi.StringMapOutput            `pulumi:"tagsAll"`
	Threshold                         pulumi.Float64PtrOutput           `pulumi:"threshold"`
	ThresholdMetricId                 pulumi.StringPtrOutput            `pulumi:"thresholdMetricId"`
	TreatMissingData                  pulumi.StringPtrOutput            `pulumi:"treatMissingData"`
	Unit                              pulumi.StringPtrOutput            `pulumi:"unit"`
}

// NewMetricAlarm registers a new resource with the given unique name, arguments, and options.
func NewMetricAlarm(ctx *pulumi.Context,
	name string, args *MetricAlarmArgs, opts ...pulumi.ResourceOption) (*MetricAlarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComparisonOperator == nil {
		return nil, errors.New("invalid value for required argument 'ComparisonOperator'")
	}
	if args.EvaluationPeriods == nil {
		return nil, errors.New("invalid value for required argument 'EvaluationPeriods'")
	}
	var resource MetricAlarm
	err := ctx.RegisterResource("aws:cloudwatch/metricAlarm:MetricAlarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricAlarm gets an existing MetricAlarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricAlarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricAlarmState, opts ...pulumi.ResourceOption) (*MetricAlarm, error) {
	var resource MetricAlarm
	err := ctx.ReadResource("aws:cloudwatch/metricAlarm:MetricAlarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricAlarm resources.
type metricAlarmState struct {
	ActionsEnabled                    *bool                    `pulumi:"actionsEnabled"`
	AlarmActions                      []interface{}            `pulumi:"alarmActions"`
	AlarmDescription                  *string                  `pulumi:"alarmDescription"`
	Arn                               *string                  `pulumi:"arn"`
	ComparisonOperator                *string                  `pulumi:"comparisonOperator"`
	DatapointsToAlarm                 *int                     `pulumi:"datapointsToAlarm"`
	Dimensions                        map[string]string        `pulumi:"dimensions"`
	EvaluateLowSampleCountPercentiles *string                  `pulumi:"evaluateLowSampleCountPercentiles"`
	EvaluationPeriods                 *int                     `pulumi:"evaluationPeriods"`
	ExtendedStatistic                 *string                  `pulumi:"extendedStatistic"`
	InsufficientDataActions           []interface{}            `pulumi:"insufficientDataActions"`
	MetricName                        *string                  `pulumi:"metricName"`
	MetricQueries                     []MetricAlarmMetricQuery `pulumi:"metricQueries"`
	Name                              *string                  `pulumi:"name"`
	Namespace                         *string                  `pulumi:"namespace"`
	OkActions                         []interface{}            `pulumi:"okActions"`
	Period                            *int                     `pulumi:"period"`
	Statistic                         *string                  `pulumi:"statistic"`
	Tags                              map[string]string        `pulumi:"tags"`
	TagsAll                           map[string]string        `pulumi:"tagsAll"`
	Threshold                         *float64                 `pulumi:"threshold"`
	ThresholdMetricId                 *string                  `pulumi:"thresholdMetricId"`
	TreatMissingData                  *string                  `pulumi:"treatMissingData"`
	Unit                              *string                  `pulumi:"unit"`
}

type MetricAlarmState struct {
	ActionsEnabled                    pulumi.BoolPtrInput
	AlarmActions                      pulumi.ArrayInput
	AlarmDescription                  pulumi.StringPtrInput
	Arn                               pulumi.StringPtrInput
	ComparisonOperator                pulumi.StringPtrInput
	DatapointsToAlarm                 pulumi.IntPtrInput
	Dimensions                        pulumi.StringMapInput
	EvaluateLowSampleCountPercentiles pulumi.StringPtrInput
	EvaluationPeriods                 pulumi.IntPtrInput
	ExtendedStatistic                 pulumi.StringPtrInput
	InsufficientDataActions           pulumi.ArrayInput
	MetricName                        pulumi.StringPtrInput
	MetricQueries                     MetricAlarmMetricQueryArrayInput
	Name                              pulumi.StringPtrInput
	Namespace                         pulumi.StringPtrInput
	OkActions                         pulumi.ArrayInput
	Period                            pulumi.IntPtrInput
	Statistic                         pulumi.StringPtrInput
	Tags                              pulumi.StringMapInput
	TagsAll                           pulumi.StringMapInput
	Threshold                         pulumi.Float64PtrInput
	ThresholdMetricId                 pulumi.StringPtrInput
	TreatMissingData                  pulumi.StringPtrInput
	Unit                              pulumi.StringPtrInput
}

func (MetricAlarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricAlarmState)(nil)).Elem()
}

type metricAlarmArgs struct {
	ActionsEnabled                    *bool                    `pulumi:"actionsEnabled"`
	AlarmActions                      []interface{}            `pulumi:"alarmActions"`
	AlarmDescription                  *string                  `pulumi:"alarmDescription"`
	ComparisonOperator                string                   `pulumi:"comparisonOperator"`
	DatapointsToAlarm                 *int                     `pulumi:"datapointsToAlarm"`
	Dimensions                        map[string]string        `pulumi:"dimensions"`
	EvaluateLowSampleCountPercentiles *string                  `pulumi:"evaluateLowSampleCountPercentiles"`
	EvaluationPeriods                 int                      `pulumi:"evaluationPeriods"`
	ExtendedStatistic                 *string                  `pulumi:"extendedStatistic"`
	InsufficientDataActions           []interface{}            `pulumi:"insufficientDataActions"`
	MetricName                        *string                  `pulumi:"metricName"`
	MetricQueries                     []MetricAlarmMetricQuery `pulumi:"metricQueries"`
	Name                              *string                  `pulumi:"name"`
	Namespace                         *string                  `pulumi:"namespace"`
	OkActions                         []interface{}            `pulumi:"okActions"`
	Period                            *int                     `pulumi:"period"`
	Statistic                         *string                  `pulumi:"statistic"`
	Tags                              map[string]string        `pulumi:"tags"`
	Threshold                         *float64                 `pulumi:"threshold"`
	ThresholdMetricId                 *string                  `pulumi:"thresholdMetricId"`
	TreatMissingData                  *string                  `pulumi:"treatMissingData"`
	Unit                              *string                  `pulumi:"unit"`
}

// The set of arguments for constructing a MetricAlarm resource.
type MetricAlarmArgs struct {
	ActionsEnabled                    pulumi.BoolPtrInput
	AlarmActions                      pulumi.ArrayInput
	AlarmDescription                  pulumi.StringPtrInput
	ComparisonOperator                pulumi.StringInput
	DatapointsToAlarm                 pulumi.IntPtrInput
	Dimensions                        pulumi.StringMapInput
	EvaluateLowSampleCountPercentiles pulumi.StringPtrInput
	EvaluationPeriods                 pulumi.IntInput
	ExtendedStatistic                 pulumi.StringPtrInput
	InsufficientDataActions           pulumi.ArrayInput
	MetricName                        pulumi.StringPtrInput
	MetricQueries                     MetricAlarmMetricQueryArrayInput
	Name                              pulumi.StringPtrInput
	Namespace                         pulumi.StringPtrInput
	OkActions                         pulumi.ArrayInput
	Period                            pulumi.IntPtrInput
	Statistic                         pulumi.StringPtrInput
	Tags                              pulumi.StringMapInput
	Threshold                         pulumi.Float64PtrInput
	ThresholdMetricId                 pulumi.StringPtrInput
	TreatMissingData                  pulumi.StringPtrInput
	Unit                              pulumi.StringPtrInput
}

func (MetricAlarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricAlarmArgs)(nil)).Elem()
}

type MetricAlarmInput interface {
	pulumi.Input

	ToMetricAlarmOutput() MetricAlarmOutput
	ToMetricAlarmOutputWithContext(ctx context.Context) MetricAlarmOutput
}

func (*MetricAlarm) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarm)(nil)).Elem()
}

func (i *MetricAlarm) ToMetricAlarmOutput() MetricAlarmOutput {
	return i.ToMetricAlarmOutputWithContext(context.Background())
}

func (i *MetricAlarm) ToMetricAlarmOutputWithContext(ctx context.Context) MetricAlarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmOutput)
}

// MetricAlarmArrayInput is an input type that accepts MetricAlarmArray and MetricAlarmArrayOutput values.
// You can construct a concrete instance of `MetricAlarmArrayInput` via:
//
//	MetricAlarmArray{ MetricAlarmArgs{...} }
type MetricAlarmArrayInput interface {
	pulumi.Input

	ToMetricAlarmArrayOutput() MetricAlarmArrayOutput
	ToMetricAlarmArrayOutputWithContext(context.Context) MetricAlarmArrayOutput
}

type MetricAlarmArray []MetricAlarmInput

func (MetricAlarmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricAlarm)(nil)).Elem()
}

func (i MetricAlarmArray) ToMetricAlarmArrayOutput() MetricAlarmArrayOutput {
	return i.ToMetricAlarmArrayOutputWithContext(context.Background())
}

func (i MetricAlarmArray) ToMetricAlarmArrayOutputWithContext(ctx context.Context) MetricAlarmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmArrayOutput)
}

// MetricAlarmMapInput is an input type that accepts MetricAlarmMap and MetricAlarmMapOutput values.
// You can construct a concrete instance of `MetricAlarmMapInput` via:
//
//	MetricAlarmMap{ "key": MetricAlarmArgs{...} }
type MetricAlarmMapInput interface {
	pulumi.Input

	ToMetricAlarmMapOutput() MetricAlarmMapOutput
	ToMetricAlarmMapOutputWithContext(context.Context) MetricAlarmMapOutput
}

type MetricAlarmMap map[string]MetricAlarmInput

func (MetricAlarmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricAlarm)(nil)).Elem()
}

func (i MetricAlarmMap) ToMetricAlarmMapOutput() MetricAlarmMapOutput {
	return i.ToMetricAlarmMapOutputWithContext(context.Background())
}

func (i MetricAlarmMap) ToMetricAlarmMapOutputWithContext(ctx context.Context) MetricAlarmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMapOutput)
}

type MetricAlarmOutput struct{ *pulumi.OutputState }

func (MetricAlarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlarm)(nil)).Elem()
}

func (o MetricAlarmOutput) ToMetricAlarmOutput() MetricAlarmOutput {
	return o
}

func (o MetricAlarmOutput) ToMetricAlarmOutputWithContext(ctx context.Context) MetricAlarmOutput {
	return o
}

func (o MetricAlarmOutput) ActionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.BoolPtrOutput { return v.ActionsEnabled }).(pulumi.BoolPtrOutput)
}

func (o MetricAlarmOutput) AlarmActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringArrayOutput { return v.AlarmActions }).(pulumi.StringArrayOutput)
}

func (o MetricAlarmOutput) AlarmDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringPtrOutput { return v.AlarmDescription }).(pulumi.StringPtrOutput)
}

func (o MetricAlarmOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o MetricAlarmOutput) ComparisonOperator() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringOutput { return v.ComparisonOperator }).(pulumi.StringOutput)
}

func (o MetricAlarmOutput) DatapointsToAlarm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.IntPtrOutput { return v.DatapointsToAlarm }).(pulumi.IntPtrOutput)
}

func (o MetricAlarmOutput) Dimensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringMapOutput { return v.Dimensions }).(pulumi.StringMapOutput)
}

func (o MetricAlarmOutput) EvaluateLowSampleCountPercentiles() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringOutput { return v.EvaluateLowSampleCountPercentiles }).(pulumi.StringOutput)
}

func (o MetricAlarmOutput) EvaluationPeriods() pulumi.IntOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.IntOutput { return v.EvaluationPeriods }).(pulumi.IntOutput)
}

func (o MetricAlarmOutput) ExtendedStatistic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringPtrOutput { return v.ExtendedStatistic }).(pulumi.StringPtrOutput)
}

func (o MetricAlarmOutput) InsufficientDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringArrayOutput { return v.InsufficientDataActions }).(pulumi.StringArrayOutput)
}

func (o MetricAlarmOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringPtrOutput { return v.MetricName }).(pulumi.StringPtrOutput)
}

func (o MetricAlarmOutput) MetricQueries() MetricAlarmMetricQueryArrayOutput {
	return o.ApplyT(func(v *MetricAlarm) MetricAlarmMetricQueryArrayOutput { return v.MetricQueries }).(MetricAlarmMetricQueryArrayOutput)
}

func (o MetricAlarmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MetricAlarmOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o MetricAlarmOutput) OkActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringArrayOutput { return v.OkActions }).(pulumi.StringArrayOutput)
}

func (o MetricAlarmOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

func (o MetricAlarmOutput) Statistic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringPtrOutput { return v.Statistic }).(pulumi.StringPtrOutput)
}

func (o MetricAlarmOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o MetricAlarmOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o MetricAlarmOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.Float64PtrOutput { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MetricAlarmOutput) ThresholdMetricId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringPtrOutput { return v.ThresholdMetricId }).(pulumi.StringPtrOutput)
}

func (o MetricAlarmOutput) TreatMissingData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringPtrOutput { return v.TreatMissingData }).(pulumi.StringPtrOutput)
}

func (o MetricAlarmOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlarm) pulumi.StringPtrOutput { return v.Unit }).(pulumi.StringPtrOutput)
}

type MetricAlarmArrayOutput struct{ *pulumi.OutputState }

func (MetricAlarmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricAlarm)(nil)).Elem()
}

func (o MetricAlarmArrayOutput) ToMetricAlarmArrayOutput() MetricAlarmArrayOutput {
	return o
}

func (o MetricAlarmArrayOutput) ToMetricAlarmArrayOutputWithContext(ctx context.Context) MetricAlarmArrayOutput {
	return o
}

func (o MetricAlarmArrayOutput) Index(i pulumi.IntInput) MetricAlarmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricAlarm {
		return vs[0].([]*MetricAlarm)[vs[1].(int)]
	}).(MetricAlarmOutput)
}

type MetricAlarmMapOutput struct{ *pulumi.OutputState }

func (MetricAlarmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricAlarm)(nil)).Elem()
}

func (o MetricAlarmMapOutput) ToMetricAlarmMapOutput() MetricAlarmMapOutput {
	return o
}

func (o MetricAlarmMapOutput) ToMetricAlarmMapOutputWithContext(ctx context.Context) MetricAlarmMapOutput {
	return o
}

func (o MetricAlarmMapOutput) MapIndex(k pulumi.StringInput) MetricAlarmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricAlarm {
		return vs[0].(map[string]*MetricAlarm)[vs[1].(string)]
	}).(MetricAlarmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlarmInput)(nil)).Elem(), &MetricAlarm{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlarmArrayInput)(nil)).Elem(), MetricAlarmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlarmMapInput)(nil)).Elem(), MetricAlarmMap{})
	pulumi.RegisterOutputType(MetricAlarmOutput{})
	pulumi.RegisterOutputType(MetricAlarmArrayOutput{})
	pulumi.RegisterOutputType(MetricAlarmMapOutput{})
}
