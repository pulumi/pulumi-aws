// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CloudWatch Metric Alarm resource.
type MetricAlarm struct {
	s *pulumi.ResourceState
}

// NewMetricAlarm registers a new resource with the given unique name, arguments, and options.
func NewMetricAlarm(ctx *pulumi.Context,
	name string, args *MetricAlarmArgs, opts ...pulumi.ResourceOpt) (*MetricAlarm, error) {
	if args == nil || args.ComparisonOperator == nil {
		return nil, errors.New("missing required argument 'ComparisonOperator'")
	}
	if args == nil || args.EvaluationPeriods == nil {
		return nil, errors.New("missing required argument 'EvaluationPeriods'")
	}
	if args == nil || args.MetricName == nil {
		return nil, errors.New("missing required argument 'MetricName'")
	}
	if args == nil || args.Namespace == nil {
		return nil, errors.New("missing required argument 'Namespace'")
	}
	if args == nil || args.Period == nil {
		return nil, errors.New("missing required argument 'Period'")
	}
	if args == nil || args.Threshold == nil {
		return nil, errors.New("missing required argument 'Threshold'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["actionsEnabled"] = nil
		inputs["alarmActions"] = nil
		inputs["alarmDescription"] = nil
		inputs["name"] = nil
		inputs["comparisonOperator"] = nil
		inputs["datapointsToAlarm"] = nil
		inputs["dimensions"] = nil
		inputs["evaluateLowSampleCountPercentiles"] = nil
		inputs["evaluationPeriods"] = nil
		inputs["extendedStatistic"] = nil
		inputs["insufficientDataActions"] = nil
		inputs["metricName"] = nil
		inputs["namespace"] = nil
		inputs["okActions"] = nil
		inputs["period"] = nil
		inputs["statistic"] = nil
		inputs["threshold"] = nil
		inputs["treatMissingData"] = nil
		inputs["unit"] = nil
	} else {
		inputs["actionsEnabled"] = args.ActionsEnabled
		inputs["alarmActions"] = args.AlarmActions
		inputs["alarmDescription"] = args.AlarmDescription
		inputs["name"] = args.Name
		inputs["comparisonOperator"] = args.ComparisonOperator
		inputs["datapointsToAlarm"] = args.DatapointsToAlarm
		inputs["dimensions"] = args.Dimensions
		inputs["evaluateLowSampleCountPercentiles"] = args.EvaluateLowSampleCountPercentiles
		inputs["evaluationPeriods"] = args.EvaluationPeriods
		inputs["extendedStatistic"] = args.ExtendedStatistic
		inputs["insufficientDataActions"] = args.InsufficientDataActions
		inputs["metricName"] = args.MetricName
		inputs["namespace"] = args.Namespace
		inputs["okActions"] = args.OkActions
		inputs["period"] = args.Period
		inputs["statistic"] = args.Statistic
		inputs["threshold"] = args.Threshold
		inputs["treatMissingData"] = args.TreatMissingData
		inputs["unit"] = args.Unit
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:cloudwatch/metricAlarm:MetricAlarm", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MetricAlarm{s: s}, nil
}

// GetMetricAlarm gets an existing MetricAlarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricAlarm(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MetricAlarmState, opts ...pulumi.ResourceOpt) (*MetricAlarm, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["actionsEnabled"] = state.ActionsEnabled
		inputs["alarmActions"] = state.AlarmActions
		inputs["alarmDescription"] = state.AlarmDescription
		inputs["name"] = state.Name
		inputs["arn"] = state.Arn
		inputs["comparisonOperator"] = state.ComparisonOperator
		inputs["datapointsToAlarm"] = state.DatapointsToAlarm
		inputs["dimensions"] = state.Dimensions
		inputs["evaluateLowSampleCountPercentiles"] = state.EvaluateLowSampleCountPercentiles
		inputs["evaluationPeriods"] = state.EvaluationPeriods
		inputs["extendedStatistic"] = state.ExtendedStatistic
		inputs["insufficientDataActions"] = state.InsufficientDataActions
		inputs["metricName"] = state.MetricName
		inputs["namespace"] = state.Namespace
		inputs["okActions"] = state.OkActions
		inputs["period"] = state.Period
		inputs["statistic"] = state.Statistic
		inputs["threshold"] = state.Threshold
		inputs["treatMissingData"] = state.TreatMissingData
		inputs["unit"] = state.Unit
	}
	s, err := ctx.ReadResource("aws:cloudwatch/metricAlarm:MetricAlarm", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MetricAlarm{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *MetricAlarm) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *MetricAlarm) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to `true`.
func (r *MetricAlarm) ActionsEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["actionsEnabled"])
}

// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Number (ARN).
func (r *MetricAlarm) AlarmActions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["alarmActions"])
}

// The description for the alarm.
func (r *MetricAlarm) AlarmDescription() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["alarmDescription"])
}

// The descriptive name for the alarm. This name must be unique within the user's AWS account
func (r *MetricAlarm) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ARN of the cloudwatch metric alarm.
func (r *MetricAlarm) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`.
func (r *MetricAlarm) ComparisonOperator() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comparisonOperator"])
}

// The number of datapoints that must be breaching to trigger the alarm.
func (r *MetricAlarm) DatapointsToAlarm() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["datapointsToAlarm"])
}

// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (r *MetricAlarm) Dimensions() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["dimensions"])
}

// Used only for alarms
// based on percentiles. If you specify `ignore`, the alarm state will not
// change during periods with too few data points to be statistically significant.
// If you specify `evaluate` or omit this parameter, the alarm will always be
// evaluated and possibly change state no matter how many data points are available.
// The following values are supported: `ignore`, and `evaluate`.
func (r *MetricAlarm) EvaluateLowSampleCountPercentiles() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["evaluateLowSampleCountPercentiles"])
}

// The number of periods over which data is compared to the specified threshold.
func (r *MetricAlarm) EvaluationPeriods() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["evaluationPeriods"])
}

// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
func (r *MetricAlarm) ExtendedStatistic() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["extendedStatistic"])
}

// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Number (ARN).
func (r *MetricAlarm) InsufficientDataActions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["insufficientDataActions"])
}

// The name for the alarm's associated metric.
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (r *MetricAlarm) MetricName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["metricName"])
}

// The namespace for the alarm's associated metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (r *MetricAlarm) Namespace() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["namespace"])
}

// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Number (ARN).
func (r *MetricAlarm) OkActions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["okActions"])
}

// The period in seconds over which the specified `statistic` is applied.
func (r *MetricAlarm) Period() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["period"])
}

// The statistic to apply to the alarm's associated metric.
// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
func (r *MetricAlarm) Statistic() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["statistic"])
}

// The value against which the specified statistic is compared.
func (r *MetricAlarm) Threshold() *pulumi.Float64Output {
	return (*pulumi.Float64Output)(r.s.State["threshold"])
}

// Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
func (r *MetricAlarm) TreatMissingData() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["treatMissingData"])
}

// The unit for the alarm's associated metric.
func (r *MetricAlarm) Unit() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["unit"])
}

// Input properties used for looking up and filtering MetricAlarm resources.
type MetricAlarmState struct {
	// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to `true`.
	ActionsEnabled interface{}
	// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Number (ARN).
	AlarmActions interface{}
	// The description for the alarm.
	AlarmDescription interface{}
	// The descriptive name for the alarm. This name must be unique within the user's AWS account
	Name interface{}
	// The ARN of the cloudwatch metric alarm.
	Arn interface{}
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`.
	ComparisonOperator interface{}
	// The number of datapoints that must be breaching to trigger the alarm.
	DatapointsToAlarm interface{}
	// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions interface{}
	// Used only for alarms
	// based on percentiles. If you specify `ignore`, the alarm state will not
	// change during periods with too few data points to be statistically significant.
	// If you specify `evaluate` or omit this parameter, the alarm will always be
	// evaluated and possibly change state no matter how many data points are available.
	// The following values are supported: `ignore`, and `evaluate`.
	EvaluateLowSampleCountPercentiles interface{}
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods interface{}
	// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
	ExtendedStatistic interface{}
	// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Number (ARN).
	InsufficientDataActions interface{}
	// The name for the alarm's associated metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName interface{}
	// The namespace for the alarm's associated metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace interface{}
	// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Number (ARN).
	OkActions interface{}
	// The period in seconds over which the specified `statistic` is applied.
	Period interface{}
	// The statistic to apply to the alarm's associated metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic interface{}
	// The value against which the specified statistic is compared.
	Threshold interface{}
	// Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
	TreatMissingData interface{}
	// The unit for the alarm's associated metric.
	Unit interface{}
}

// The set of arguments for constructing a MetricAlarm resource.
type MetricAlarmArgs struct {
	// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to `true`.
	ActionsEnabled interface{}
	// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Number (ARN).
	AlarmActions interface{}
	// The description for the alarm.
	AlarmDescription interface{}
	// The descriptive name for the alarm. This name must be unique within the user's AWS account
	Name interface{}
	// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`.
	ComparisonOperator interface{}
	// The number of datapoints that must be breaching to trigger the alarm.
	DatapointsToAlarm interface{}
	// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions interface{}
	// Used only for alarms
	// based on percentiles. If you specify `ignore`, the alarm state will not
	// change during periods with too few data points to be statistically significant.
	// If you specify `evaluate` or omit this parameter, the alarm will always be
	// evaluated and possibly change state no matter how many data points are available.
	// The following values are supported: `ignore`, and `evaluate`.
	EvaluateLowSampleCountPercentiles interface{}
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods interface{}
	// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
	ExtendedStatistic interface{}
	// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Number (ARN).
	InsufficientDataActions interface{}
	// The name for the alarm's associated metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName interface{}
	// The namespace for the alarm's associated metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace interface{}
	// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Number (ARN).
	OkActions interface{}
	// The period in seconds over which the specified `statistic` is applied.
	Period interface{}
	// The statistic to apply to the alarm's associated metric.
	// Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
	Statistic interface{}
	// The value against which the specified statistic is compared.
	Threshold interface{}
	// Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
	TreatMissingData interface{}
	// The unit for the alarm's associated metric.
	Unit interface{}
}
