// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LogGroup struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput    `pulumi:"arn"`
	KmsKeyId        pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	Name            pulumi.StringOutput    `pulumi:"name"`
	NamePrefix      pulumi.StringOutput    `pulumi:"namePrefix"`
	RetentionInDays pulumi.IntPtrOutput    `pulumi:"retentionInDays"`
	SkipDestroy     pulumi.BoolPtrOutput   `pulumi:"skipDestroy"`
	Tags            pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewLogGroup registers a new resource with the given unique name, arguments, and options.
func NewLogGroup(ctx *pulumi.Context,
	name string, args *LogGroupArgs, opts ...pulumi.ResourceOption) (*LogGroup, error) {
	if args == nil {
		args = &LogGroupArgs{}
	}

	var resource LogGroup
	err := ctx.RegisterResource("aws:cloudwatch/logGroup:LogGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogGroup gets an existing LogGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogGroupState, opts ...pulumi.ResourceOption) (*LogGroup, error) {
	var resource LogGroup
	err := ctx.ReadResource("aws:cloudwatch/logGroup:LogGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogGroup resources.
type logGroupState struct {
	Arn             *string           `pulumi:"arn"`
	KmsKeyId        *string           `pulumi:"kmsKeyId"`
	Name            *string           `pulumi:"name"`
	NamePrefix      *string           `pulumi:"namePrefix"`
	RetentionInDays *int              `pulumi:"retentionInDays"`
	SkipDestroy     *bool             `pulumi:"skipDestroy"`
	Tags            map[string]string `pulumi:"tags"`
	TagsAll         map[string]string `pulumi:"tagsAll"`
}

type LogGroupState struct {
	Arn             pulumi.StringPtrInput
	KmsKeyId        pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	NamePrefix      pulumi.StringPtrInput
	RetentionInDays pulumi.IntPtrInput
	SkipDestroy     pulumi.BoolPtrInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
}

func (LogGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*logGroupState)(nil)).Elem()
}

type logGroupArgs struct {
	KmsKeyId        *string           `pulumi:"kmsKeyId"`
	Name            *string           `pulumi:"name"`
	NamePrefix      *string           `pulumi:"namePrefix"`
	RetentionInDays *int              `pulumi:"retentionInDays"`
	SkipDestroy     *bool             `pulumi:"skipDestroy"`
	Tags            map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LogGroup resource.
type LogGroupArgs struct {
	KmsKeyId        pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	NamePrefix      pulumi.StringPtrInput
	RetentionInDays pulumi.IntPtrInput
	SkipDestroy     pulumi.BoolPtrInput
	Tags            pulumi.StringMapInput
}

func (LogGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logGroupArgs)(nil)).Elem()
}

type LogGroupInput interface {
	pulumi.Input

	ToLogGroupOutput() LogGroupOutput
	ToLogGroupOutputWithContext(ctx context.Context) LogGroupOutput
}

func (*LogGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**LogGroup)(nil)).Elem()
}

func (i *LogGroup) ToLogGroupOutput() LogGroupOutput {
	return i.ToLogGroupOutputWithContext(context.Background())
}

func (i *LogGroup) ToLogGroupOutputWithContext(ctx context.Context) LogGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGroupOutput)
}

// LogGroupArrayInput is an input type that accepts LogGroupArray and LogGroupArrayOutput values.
// You can construct a concrete instance of `LogGroupArrayInput` via:
//
//	LogGroupArray{ LogGroupArgs{...} }
type LogGroupArrayInput interface {
	pulumi.Input

	ToLogGroupArrayOutput() LogGroupArrayOutput
	ToLogGroupArrayOutputWithContext(context.Context) LogGroupArrayOutput
}

type LogGroupArray []LogGroupInput

func (LogGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogGroup)(nil)).Elem()
}

func (i LogGroupArray) ToLogGroupArrayOutput() LogGroupArrayOutput {
	return i.ToLogGroupArrayOutputWithContext(context.Background())
}

func (i LogGroupArray) ToLogGroupArrayOutputWithContext(ctx context.Context) LogGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGroupArrayOutput)
}

// LogGroupMapInput is an input type that accepts LogGroupMap and LogGroupMapOutput values.
// You can construct a concrete instance of `LogGroupMapInput` via:
//
//	LogGroupMap{ "key": LogGroupArgs{...} }
type LogGroupMapInput interface {
	pulumi.Input

	ToLogGroupMapOutput() LogGroupMapOutput
	ToLogGroupMapOutputWithContext(context.Context) LogGroupMapOutput
}

type LogGroupMap map[string]LogGroupInput

func (LogGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogGroup)(nil)).Elem()
}

func (i LogGroupMap) ToLogGroupMapOutput() LogGroupMapOutput {
	return i.ToLogGroupMapOutputWithContext(context.Background())
}

func (i LogGroupMap) ToLogGroupMapOutputWithContext(ctx context.Context) LogGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGroupMapOutput)
}

type LogGroupOutput struct{ *pulumi.OutputState }

func (LogGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogGroup)(nil)).Elem()
}

func (o LogGroupOutput) ToLogGroupOutput() LogGroupOutput {
	return o
}

func (o LogGroupOutput) ToLogGroupOutputWithContext(ctx context.Context) LogGroupOutput {
	return o
}

func (o LogGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LogGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LogGroupOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogGroup) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o LogGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LogGroupOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *LogGroup) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

func (o LogGroupOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogGroup) pulumi.IntPtrOutput { return v.RetentionInDays }).(pulumi.IntPtrOutput)
}

func (o LogGroupOutput) SkipDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogGroup) pulumi.BoolPtrOutput { return v.SkipDestroy }).(pulumi.BoolPtrOutput)
}

func (o LogGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LogGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LogGroupArrayOutput struct{ *pulumi.OutputState }

func (LogGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogGroup)(nil)).Elem()
}

func (o LogGroupArrayOutput) ToLogGroupArrayOutput() LogGroupArrayOutput {
	return o
}

func (o LogGroupArrayOutput) ToLogGroupArrayOutputWithContext(ctx context.Context) LogGroupArrayOutput {
	return o
}

func (o LogGroupArrayOutput) Index(i pulumi.IntInput) LogGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogGroup {
		return vs[0].([]*LogGroup)[vs[1].(int)]
	}).(LogGroupOutput)
}

type LogGroupMapOutput struct{ *pulumi.OutputState }

func (LogGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogGroup)(nil)).Elem()
}

func (o LogGroupMapOutput) ToLogGroupMapOutput() LogGroupMapOutput {
	return o
}

func (o LogGroupMapOutput) ToLogGroupMapOutputWithContext(ctx context.Context) LogGroupMapOutput {
	return o
}

func (o LogGroupMapOutput) MapIndex(k pulumi.StringInput) LogGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogGroup {
		return vs[0].(map[string]*LogGroup)[vs[1].(string)]
	}).(LogGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogGroupInput)(nil)).Elem(), &LogGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogGroupArrayInput)(nil)).Elem(), LogGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogGroupMapInput)(nil)).Elem(), LogGroupMap{})
	pulumi.RegisterOutputType(LogGroupOutput{})
	pulumi.RegisterOutputType(LogGroupArrayOutput{})
	pulumi.RegisterOutputType(LogGroupMapOutput{})
}
