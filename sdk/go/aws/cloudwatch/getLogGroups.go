// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get a list of AWS Cloudwatch Log Groups
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.GetLogGroups(ctx, &cloudwatch.GetLogGroupsArgs{
//				LogGroupNamePrefix: pulumi.StringRef("/MyImportantLogs"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetLogGroups(ctx *pulumi.Context, args *GetLogGroupsArgs, opts ...pulumi.InvokeOption) (*GetLogGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLogGroupsResult
	err := ctx.Invoke("aws:cloudwatch/getLogGroups:getLogGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogGroups.
type GetLogGroupsArgs struct {
	// Group prefix of the Cloudwatch log groups to list
	LogGroupNamePrefix *string `pulumi:"logGroupNamePrefix"`
}

// A collection of values returned by getLogGroups.
type GetLogGroupsResult struct {
	// Set of ARNs of the Cloudwatch log groups
	Arns []string `pulumi:"arns"`
	// The provider-assigned unique ID for this managed resource.
	Id                 string  `pulumi:"id"`
	LogGroupNamePrefix *string `pulumi:"logGroupNamePrefix"`
	// Set of names of the Cloudwatch log groups
	LogGroupNames []string `pulumi:"logGroupNames"`
}

func GetLogGroupsOutput(ctx *pulumi.Context, args GetLogGroupsOutputArgs, opts ...pulumi.InvokeOption) GetLogGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLogGroupsResult, error) {
			args := v.(GetLogGroupsArgs)
			r, err := GetLogGroups(ctx, &args, opts...)
			var s GetLogGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetLogGroupsResultOutput)
}

// A collection of arguments for invoking getLogGroups.
type GetLogGroupsOutputArgs struct {
	// Group prefix of the Cloudwatch log groups to list
	LogGroupNamePrefix pulumi.StringPtrInput `pulumi:"logGroupNamePrefix"`
}

func (GetLogGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getLogGroups.
type GetLogGroupsResultOutput struct{ *pulumi.OutputState }

func (GetLogGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogGroupsResult)(nil)).Elem()
}

func (o GetLogGroupsResultOutput) ToGetLogGroupsResultOutput() GetLogGroupsResultOutput {
	return o
}

func (o GetLogGroupsResultOutput) ToGetLogGroupsResultOutputWithContext(ctx context.Context) GetLogGroupsResultOutput {
	return o
}

// Set of ARNs of the Cloudwatch log groups
func (o GetLogGroupsResultOutput) Arns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLogGroupsResult) []string { return v.Arns }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetLogGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetLogGroupsResultOutput) LogGroupNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLogGroupsResult) *string { return v.LogGroupNamePrefix }).(pulumi.StringPtrOutput)
}

// Set of names of the Cloudwatch log groups
func (o GetLogGroupsResultOutput) LogGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLogGroupsResult) []string { return v.LogGroupNames }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLogGroupsResultOutput{})
}
