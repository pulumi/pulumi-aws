// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS CloudWatch Logs Delivery Destination Policy.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.NewLogDeliveryDestinationPolicy(ctx, "example", &cloudwatch.LogDeliveryDestinationPolicyArgs{
//				DeliveryDestinationName:   pulumi.Any(exampleAwsCloudwatchLogDeliveryDestination.Name),
//				DeliveryDestinationPolicy: pulumi.Any(exampleAwsIamPolicyDocument.Json),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import CloudWatch Logs Delivery Destination Policy using the `delivery_destination_name`. For example:
//
// ```sh
// $ pulumi import aws:cloudwatch/logDeliveryDestinationPolicy:LogDeliveryDestinationPolicy example example
// ```
type LogDeliveryDestinationPolicy struct {
	pulumi.CustomResourceState

	// The name of the delivery destination to assign this policy to.
	DeliveryDestinationName pulumi.StringOutput `pulumi:"deliveryDestinationName"`
	// The contents of the policy.
	DeliveryDestinationPolicy pulumi.StringOutput `pulumi:"deliveryDestinationPolicy"`
}

// NewLogDeliveryDestinationPolicy registers a new resource with the given unique name, arguments, and options.
func NewLogDeliveryDestinationPolicy(ctx *pulumi.Context,
	name string, args *LogDeliveryDestinationPolicyArgs, opts ...pulumi.ResourceOption) (*LogDeliveryDestinationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeliveryDestinationName == nil {
		return nil, errors.New("invalid value for required argument 'DeliveryDestinationName'")
	}
	if args.DeliveryDestinationPolicy == nil {
		return nil, errors.New("invalid value for required argument 'DeliveryDestinationPolicy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogDeliveryDestinationPolicy
	err := ctx.RegisterResource("aws:cloudwatch/logDeliveryDestinationPolicy:LogDeliveryDestinationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogDeliveryDestinationPolicy gets an existing LogDeliveryDestinationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogDeliveryDestinationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogDeliveryDestinationPolicyState, opts ...pulumi.ResourceOption) (*LogDeliveryDestinationPolicy, error) {
	var resource LogDeliveryDestinationPolicy
	err := ctx.ReadResource("aws:cloudwatch/logDeliveryDestinationPolicy:LogDeliveryDestinationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogDeliveryDestinationPolicy resources.
type logDeliveryDestinationPolicyState struct {
	// The name of the delivery destination to assign this policy to.
	DeliveryDestinationName *string `pulumi:"deliveryDestinationName"`
	// The contents of the policy.
	DeliveryDestinationPolicy *string `pulumi:"deliveryDestinationPolicy"`
}

type LogDeliveryDestinationPolicyState struct {
	// The name of the delivery destination to assign this policy to.
	DeliveryDestinationName pulumi.StringPtrInput
	// The contents of the policy.
	DeliveryDestinationPolicy pulumi.StringPtrInput
}

func (LogDeliveryDestinationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliveryDestinationPolicyState)(nil)).Elem()
}

type logDeliveryDestinationPolicyArgs struct {
	// The name of the delivery destination to assign this policy to.
	DeliveryDestinationName string `pulumi:"deliveryDestinationName"`
	// The contents of the policy.
	DeliveryDestinationPolicy string `pulumi:"deliveryDestinationPolicy"`
}

// The set of arguments for constructing a LogDeliveryDestinationPolicy resource.
type LogDeliveryDestinationPolicyArgs struct {
	// The name of the delivery destination to assign this policy to.
	DeliveryDestinationName pulumi.StringInput
	// The contents of the policy.
	DeliveryDestinationPolicy pulumi.StringInput
}

func (LogDeliveryDestinationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliveryDestinationPolicyArgs)(nil)).Elem()
}

type LogDeliveryDestinationPolicyInput interface {
	pulumi.Input

	ToLogDeliveryDestinationPolicyOutput() LogDeliveryDestinationPolicyOutput
	ToLogDeliveryDestinationPolicyOutputWithContext(ctx context.Context) LogDeliveryDestinationPolicyOutput
}

func (*LogDeliveryDestinationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDeliveryDestinationPolicy)(nil)).Elem()
}

func (i *LogDeliveryDestinationPolicy) ToLogDeliveryDestinationPolicyOutput() LogDeliveryDestinationPolicyOutput {
	return i.ToLogDeliveryDestinationPolicyOutputWithContext(context.Background())
}

func (i *LogDeliveryDestinationPolicy) ToLogDeliveryDestinationPolicyOutputWithContext(ctx context.Context) LogDeliveryDestinationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryDestinationPolicyOutput)
}

// LogDeliveryDestinationPolicyArrayInput is an input type that accepts LogDeliveryDestinationPolicyArray and LogDeliveryDestinationPolicyArrayOutput values.
// You can construct a concrete instance of `LogDeliveryDestinationPolicyArrayInput` via:
//
//	LogDeliveryDestinationPolicyArray{ LogDeliveryDestinationPolicyArgs{...} }
type LogDeliveryDestinationPolicyArrayInput interface {
	pulumi.Input

	ToLogDeliveryDestinationPolicyArrayOutput() LogDeliveryDestinationPolicyArrayOutput
	ToLogDeliveryDestinationPolicyArrayOutputWithContext(context.Context) LogDeliveryDestinationPolicyArrayOutput
}

type LogDeliveryDestinationPolicyArray []LogDeliveryDestinationPolicyInput

func (LogDeliveryDestinationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDeliveryDestinationPolicy)(nil)).Elem()
}

func (i LogDeliveryDestinationPolicyArray) ToLogDeliveryDestinationPolicyArrayOutput() LogDeliveryDestinationPolicyArrayOutput {
	return i.ToLogDeliveryDestinationPolicyArrayOutputWithContext(context.Background())
}

func (i LogDeliveryDestinationPolicyArray) ToLogDeliveryDestinationPolicyArrayOutputWithContext(ctx context.Context) LogDeliveryDestinationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryDestinationPolicyArrayOutput)
}

// LogDeliveryDestinationPolicyMapInput is an input type that accepts LogDeliveryDestinationPolicyMap and LogDeliveryDestinationPolicyMapOutput values.
// You can construct a concrete instance of `LogDeliveryDestinationPolicyMapInput` via:
//
//	LogDeliveryDestinationPolicyMap{ "key": LogDeliveryDestinationPolicyArgs{...} }
type LogDeliveryDestinationPolicyMapInput interface {
	pulumi.Input

	ToLogDeliveryDestinationPolicyMapOutput() LogDeliveryDestinationPolicyMapOutput
	ToLogDeliveryDestinationPolicyMapOutputWithContext(context.Context) LogDeliveryDestinationPolicyMapOutput
}

type LogDeliveryDestinationPolicyMap map[string]LogDeliveryDestinationPolicyInput

func (LogDeliveryDestinationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDeliveryDestinationPolicy)(nil)).Elem()
}

func (i LogDeliveryDestinationPolicyMap) ToLogDeliveryDestinationPolicyMapOutput() LogDeliveryDestinationPolicyMapOutput {
	return i.ToLogDeliveryDestinationPolicyMapOutputWithContext(context.Background())
}

func (i LogDeliveryDestinationPolicyMap) ToLogDeliveryDestinationPolicyMapOutputWithContext(ctx context.Context) LogDeliveryDestinationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryDestinationPolicyMapOutput)
}

type LogDeliveryDestinationPolicyOutput struct{ *pulumi.OutputState }

func (LogDeliveryDestinationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDeliveryDestinationPolicy)(nil)).Elem()
}

func (o LogDeliveryDestinationPolicyOutput) ToLogDeliveryDestinationPolicyOutput() LogDeliveryDestinationPolicyOutput {
	return o
}

func (o LogDeliveryDestinationPolicyOutput) ToLogDeliveryDestinationPolicyOutputWithContext(ctx context.Context) LogDeliveryDestinationPolicyOutput {
	return o
}

// The name of the delivery destination to assign this policy to.
func (o LogDeliveryDestinationPolicyOutput) DeliveryDestinationName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliveryDestinationPolicy) pulumi.StringOutput { return v.DeliveryDestinationName }).(pulumi.StringOutput)
}

// The contents of the policy.
func (o LogDeliveryDestinationPolicyOutput) DeliveryDestinationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliveryDestinationPolicy) pulumi.StringOutput { return v.DeliveryDestinationPolicy }).(pulumi.StringOutput)
}

type LogDeliveryDestinationPolicyArrayOutput struct{ *pulumi.OutputState }

func (LogDeliveryDestinationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDeliveryDestinationPolicy)(nil)).Elem()
}

func (o LogDeliveryDestinationPolicyArrayOutput) ToLogDeliveryDestinationPolicyArrayOutput() LogDeliveryDestinationPolicyArrayOutput {
	return o
}

func (o LogDeliveryDestinationPolicyArrayOutput) ToLogDeliveryDestinationPolicyArrayOutputWithContext(ctx context.Context) LogDeliveryDestinationPolicyArrayOutput {
	return o
}

func (o LogDeliveryDestinationPolicyArrayOutput) Index(i pulumi.IntInput) LogDeliveryDestinationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogDeliveryDestinationPolicy {
		return vs[0].([]*LogDeliveryDestinationPolicy)[vs[1].(int)]
	}).(LogDeliveryDestinationPolicyOutput)
}

type LogDeliveryDestinationPolicyMapOutput struct{ *pulumi.OutputState }

func (LogDeliveryDestinationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDeliveryDestinationPolicy)(nil)).Elem()
}

func (o LogDeliveryDestinationPolicyMapOutput) ToLogDeliveryDestinationPolicyMapOutput() LogDeliveryDestinationPolicyMapOutput {
	return o
}

func (o LogDeliveryDestinationPolicyMapOutput) ToLogDeliveryDestinationPolicyMapOutputWithContext(ctx context.Context) LogDeliveryDestinationPolicyMapOutput {
	return o
}

func (o LogDeliveryDestinationPolicyMapOutput) MapIndex(k pulumi.StringInput) LogDeliveryDestinationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogDeliveryDestinationPolicy {
		return vs[0].(map[string]*LogDeliveryDestinationPolicy)[vs[1].(string)]
	}).(LogDeliveryDestinationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryDestinationPolicyInput)(nil)).Elem(), &LogDeliveryDestinationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryDestinationPolicyArrayInput)(nil)).Elem(), LogDeliveryDestinationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryDestinationPolicyMapInput)(nil)).Elem(), LogDeliveryDestinationPolicyMap{})
	pulumi.RegisterOutputType(LogDeliveryDestinationPolicyOutput{})
	pulumi.RegisterOutputType(LogDeliveryDestinationPolicyArrayOutput{})
	pulumi.RegisterOutputType(LogDeliveryDestinationPolicyMapOutput{})
}
