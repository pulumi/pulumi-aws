// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CloudWatch Metric Stream resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kinesis"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		metricStreamToFirehoseRole, err := iam.NewRole(ctx, "metricStreamToFirehoseRole", &iam.RoleArgs{
// 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"streams.metrics.cloudwatch.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\",\n", "      \"Sid\": \"\"\n", "    }\n", "  ]\n", "}\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		bucket, err := s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
// 			Acl: pulumi.String("private"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		firehoseToS3Role, err := iam.NewRole(ctx, "firehoseToS3Role", &iam.RoleArgs{
// 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"firehose.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\",\n", "      \"Sid\": \"\"\n", "    }\n", "  ]\n", "}\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		s3Stream, err := kinesis.NewFirehoseDeliveryStream(ctx, "s3Stream", &kinesis.FirehoseDeliveryStreamArgs{
// 			Destination: pulumi.String("s3"),
// 			S3Configuration: &kinesis.FirehoseDeliveryStreamS3ConfigurationArgs{
// 				RoleArn:   firehoseToS3Role.Arn,
// 				BucketArn: bucket.Arn,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cloudwatch.NewMetricStream(ctx, "main", &cloudwatch.MetricStreamArgs{
// 			RoleArn:      metricStreamToFirehoseRole.Arn,
// 			FirehoseArn:  s3Stream.Arn,
// 			OutputFormat: pulumi.String("json"),
// 			IncludeFilters: cloudwatch.MetricStreamIncludeFilterArray{
// 				&cloudwatch.MetricStreamIncludeFilterArgs{
// 					Namespace: pulumi.String("AWS/EC2"),
// 				},
// 				&cloudwatch.MetricStreamIncludeFilterArgs{
// 					Namespace: pulumi.String("AWS/EBS"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = iam.NewRolePolicy(ctx, "metricStreamToFirehoseRolePolicy", &iam.RolePolicyArgs{
// 			Role: metricStreamToFirehoseRole.ID(),
// 			Policy: s3Stream.Arn.ApplyT(func(arn string) (string, error) {
// 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "    \"Version\": \"2012-10-17\",\n", "    \"Statement\": [\n", "        {\n", "            \"Effect\": \"Allow\",\n", "            \"Action\": [\n", "                \"firehose:PutRecord\",\n", "                \"firehose:PutRecordBatch\"\n", "            ],\n", "            \"Resource\": \"", arn, "\"\n", "        }\n", "    ]\n", "}\n"), nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = iam.NewRolePolicy(ctx, "firehoseToS3RolePolicy", &iam.RolePolicyArgs{
// 			Role: firehoseToS3Role.ID(),
// 			Policy: pulumi.All(bucket.Arn, bucket.Arn).ApplyT(func(_args []interface{}) (string, error) {
// 				bucketArn := _args[0].(string)
// 				bucketArn1 := _args[1].(string)
// 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "    \"Version\": \"2012-10-17\",\n", "    \"Statement\": [\n", "        {\n", "            \"Effect\": \"Allow\",\n", "            \"Action\": [\n", "                \"s3:AbortMultipartUpload\",\n", "                \"s3:GetBucketLocation\",\n", "                \"s3:GetObject\",\n", "                \"s3:ListBucket\",\n", "                \"s3:ListBucketMultipartUploads\",\n", "                \"s3:PutObject\"\n", "            ],\n", "            \"Resource\": [\n", "                \"", bucketArn, "\",\n", "                \"", bucketArn1, "/*\"\n", "            ]\n", "        }\n", "    ]\n", "}\n"), nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// CloudWatch metric streams can be imported using the `name`, e.g.
//
// ```sh
//  $ pulumi import aws:cloudwatch/metricStream:MetricStream sample <name>
// ```
type MetricStream struct {
	pulumi.CustomResourceState

	// ARN of the metric stream.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the metric stream was created.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// List of exclusive metric filters. If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here. Conflicts with `includeFilter`.
	ExcludeFilters MetricStreamExcludeFilterArrayOutput `pulumi:"excludeFilters"`
	// ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
	FirehoseArn pulumi.StringOutput `pulumi:"firehoseArn"`
	// List of inclusive metric filters. If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here. Conflicts with `excludeFilter`.
	IncludeFilters MetricStreamIncludeFilterArrayOutput `pulumi:"includeFilters"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the metric stream was last updated.
	LastUpdateDate pulumi.StringOutput `pulumi:"lastUpdateDate"`
	Name           pulumi.StringOutput `pulumi:"name"`
	// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
	// Output format for the stream. Possible values are `json` and `opentelemetry0.7`. For more information about output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html).
	OutputFormat pulumi.StringOutput `pulumi:"outputFormat"`
	// ARN of the IAM role that this metric stream will use to access Amazon Kinesis Firehose resources. For more information about role permissions, see [Trust between CloudWatch and Kinesis Data Firehose](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-trustpolicy.html).
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// State of the metric stream. Possible values are `running` and `stopped`.
	State pulumi.StringOutput `pulumi:"state"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewMetricStream registers a new resource with the given unique name, arguments, and options.
func NewMetricStream(ctx *pulumi.Context,
	name string, args *MetricStreamArgs, opts ...pulumi.ResourceOption) (*MetricStream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FirehoseArn == nil {
		return nil, errors.New("invalid value for required argument 'FirehoseArn'")
	}
	if args.OutputFormat == nil {
		return nil, errors.New("invalid value for required argument 'OutputFormat'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource MetricStream
	err := ctx.RegisterResource("aws:cloudwatch/metricStream:MetricStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricStream gets an existing MetricStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricStreamState, opts ...pulumi.ResourceOption) (*MetricStream, error) {
	var resource MetricStream
	err := ctx.ReadResource("aws:cloudwatch/metricStream:MetricStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricStream resources.
type metricStreamState struct {
	// ARN of the metric stream.
	Arn *string `pulumi:"arn"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the metric stream was created.
	CreationDate *string `pulumi:"creationDate"`
	// List of exclusive metric filters. If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here. Conflicts with `includeFilter`.
	ExcludeFilters []MetricStreamExcludeFilter `pulumi:"excludeFilters"`
	// ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
	FirehoseArn *string `pulumi:"firehoseArn"`
	// List of inclusive metric filters. If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here. Conflicts with `excludeFilter`.
	IncludeFilters []MetricStreamIncludeFilter `pulumi:"includeFilters"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the metric stream was last updated.
	LastUpdateDate *string `pulumi:"lastUpdateDate"`
	Name           *string `pulumi:"name"`
	// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Output format for the stream. Possible values are `json` and `opentelemetry0.7`. For more information about output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html).
	OutputFormat *string `pulumi:"outputFormat"`
	// ARN of the IAM role that this metric stream will use to access Amazon Kinesis Firehose resources. For more information about role permissions, see [Trust between CloudWatch and Kinesis Data Firehose](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-trustpolicy.html).
	RoleArn *string `pulumi:"roleArn"`
	// State of the metric stream. Possible values are `running` and `stopped`.
	State *string `pulumi:"state"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type MetricStreamState struct {
	// ARN of the metric stream.
	Arn pulumi.StringPtrInput
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the metric stream was created.
	CreationDate pulumi.StringPtrInput
	// List of exclusive metric filters. If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here. Conflicts with `includeFilter`.
	ExcludeFilters MetricStreamExcludeFilterArrayInput
	// ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
	FirehoseArn pulumi.StringPtrInput
	// List of inclusive metric filters. If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here. Conflicts with `excludeFilter`.
	IncludeFilters MetricStreamIncludeFilterArrayInput
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the metric stream was last updated.
	LastUpdateDate pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// Output format for the stream. Possible values are `json` and `opentelemetry0.7`. For more information about output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html).
	OutputFormat pulumi.StringPtrInput
	// ARN of the IAM role that this metric stream will use to access Amazon Kinesis Firehose resources. For more information about role permissions, see [Trust between CloudWatch and Kinesis Data Firehose](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-trustpolicy.html).
	RoleArn pulumi.StringPtrInput
	// State of the metric stream. Possible values are `running` and `stopped`.
	State pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (MetricStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricStreamState)(nil)).Elem()
}

type metricStreamArgs struct {
	// List of exclusive metric filters. If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here. Conflicts with `includeFilter`.
	ExcludeFilters []MetricStreamExcludeFilter `pulumi:"excludeFilters"`
	// ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
	FirehoseArn string `pulumi:"firehoseArn"`
	// List of inclusive metric filters. If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here. Conflicts with `excludeFilter`.
	IncludeFilters []MetricStreamIncludeFilter `pulumi:"includeFilters"`
	Name           *string                     `pulumi:"name"`
	// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Output format for the stream. Possible values are `json` and `opentelemetry0.7`. For more information about output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html).
	OutputFormat string `pulumi:"outputFormat"`
	// ARN of the IAM role that this metric stream will use to access Amazon Kinesis Firehose resources. For more information about role permissions, see [Trust between CloudWatch and Kinesis Data Firehose](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-trustpolicy.html).
	RoleArn string `pulumi:"roleArn"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

// The set of arguments for constructing a MetricStream resource.
type MetricStreamArgs struct {
	// List of exclusive metric filters. If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here. Conflicts with `includeFilter`.
	ExcludeFilters MetricStreamExcludeFilterArrayInput
	// ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
	FirehoseArn pulumi.StringInput
	// List of inclusive metric filters. If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here. Conflicts with `excludeFilter`.
	IncludeFilters MetricStreamIncludeFilterArrayInput
	Name           pulumi.StringPtrInput
	// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// Output format for the stream. Possible values are `json` and `opentelemetry0.7`. For more information about output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html).
	OutputFormat pulumi.StringInput
	// ARN of the IAM role that this metric stream will use to access Amazon Kinesis Firehose resources. For more information about role permissions, see [Trust between CloudWatch and Kinesis Data Firehose](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-trustpolicy.html).
	RoleArn pulumi.StringInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (MetricStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricStreamArgs)(nil)).Elem()
}

type MetricStreamInput interface {
	pulumi.Input

	ToMetricStreamOutput() MetricStreamOutput
	ToMetricStreamOutputWithContext(ctx context.Context) MetricStreamOutput
}

func (*MetricStream) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStream)(nil))
}

func (i *MetricStream) ToMetricStreamOutput() MetricStreamOutput {
	return i.ToMetricStreamOutputWithContext(context.Background())
}

func (i *MetricStream) ToMetricStreamOutputWithContext(ctx context.Context) MetricStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamOutput)
}

func (i *MetricStream) ToMetricStreamPtrOutput() MetricStreamPtrOutput {
	return i.ToMetricStreamPtrOutputWithContext(context.Background())
}

func (i *MetricStream) ToMetricStreamPtrOutputWithContext(ctx context.Context) MetricStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamPtrOutput)
}

type MetricStreamPtrInput interface {
	pulumi.Input

	ToMetricStreamPtrOutput() MetricStreamPtrOutput
	ToMetricStreamPtrOutputWithContext(ctx context.Context) MetricStreamPtrOutput
}

type metricStreamPtrType MetricStreamArgs

func (*metricStreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricStream)(nil))
}

func (i *metricStreamPtrType) ToMetricStreamPtrOutput() MetricStreamPtrOutput {
	return i.ToMetricStreamPtrOutputWithContext(context.Background())
}

func (i *metricStreamPtrType) ToMetricStreamPtrOutputWithContext(ctx context.Context) MetricStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamPtrOutput)
}

// MetricStreamArrayInput is an input type that accepts MetricStreamArray and MetricStreamArrayOutput values.
// You can construct a concrete instance of `MetricStreamArrayInput` via:
//
//          MetricStreamArray{ MetricStreamArgs{...} }
type MetricStreamArrayInput interface {
	pulumi.Input

	ToMetricStreamArrayOutput() MetricStreamArrayOutput
	ToMetricStreamArrayOutputWithContext(context.Context) MetricStreamArrayOutput
}

type MetricStreamArray []MetricStreamInput

func (MetricStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*MetricStream)(nil))
}

func (i MetricStreamArray) ToMetricStreamArrayOutput() MetricStreamArrayOutput {
	return i.ToMetricStreamArrayOutputWithContext(context.Background())
}

func (i MetricStreamArray) ToMetricStreamArrayOutputWithContext(ctx context.Context) MetricStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamArrayOutput)
}

// MetricStreamMapInput is an input type that accepts MetricStreamMap and MetricStreamMapOutput values.
// You can construct a concrete instance of `MetricStreamMapInput` via:
//
//          MetricStreamMap{ "key": MetricStreamArgs{...} }
type MetricStreamMapInput interface {
	pulumi.Input

	ToMetricStreamMapOutput() MetricStreamMapOutput
	ToMetricStreamMapOutputWithContext(context.Context) MetricStreamMapOutput
}

type MetricStreamMap map[string]MetricStreamInput

func (MetricStreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*MetricStream)(nil))
}

func (i MetricStreamMap) ToMetricStreamMapOutput() MetricStreamMapOutput {
	return i.ToMetricStreamMapOutputWithContext(context.Background())
}

func (i MetricStreamMap) ToMetricStreamMapOutputWithContext(ctx context.Context) MetricStreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamMapOutput)
}

type MetricStreamOutput struct {
	*pulumi.OutputState
}

func (MetricStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStream)(nil))
}

func (o MetricStreamOutput) ToMetricStreamOutput() MetricStreamOutput {
	return o
}

func (o MetricStreamOutput) ToMetricStreamOutputWithContext(ctx context.Context) MetricStreamOutput {
	return o
}

func (o MetricStreamOutput) ToMetricStreamPtrOutput() MetricStreamPtrOutput {
	return o.ToMetricStreamPtrOutputWithContext(context.Background())
}

func (o MetricStreamOutput) ToMetricStreamPtrOutputWithContext(ctx context.Context) MetricStreamPtrOutput {
	return o.ApplyT(func(v MetricStream) *MetricStream {
		return &v
	}).(MetricStreamPtrOutput)
}

type MetricStreamPtrOutput struct {
	*pulumi.OutputState
}

func (MetricStreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricStream)(nil))
}

func (o MetricStreamPtrOutput) ToMetricStreamPtrOutput() MetricStreamPtrOutput {
	return o
}

func (o MetricStreamPtrOutput) ToMetricStreamPtrOutputWithContext(ctx context.Context) MetricStreamPtrOutput {
	return o
}

type MetricStreamArrayOutput struct{ *pulumi.OutputState }

func (MetricStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStream)(nil))
}

func (o MetricStreamArrayOutput) ToMetricStreamArrayOutput() MetricStreamArrayOutput {
	return o
}

func (o MetricStreamArrayOutput) ToMetricStreamArrayOutputWithContext(ctx context.Context) MetricStreamArrayOutput {
	return o
}

func (o MetricStreamArrayOutput) Index(i pulumi.IntInput) MetricStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricStream {
		return vs[0].([]MetricStream)[vs[1].(int)]
	}).(MetricStreamOutput)
}

type MetricStreamMapOutput struct{ *pulumi.OutputState }

func (MetricStreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MetricStream)(nil))
}

func (o MetricStreamMapOutput) ToMetricStreamMapOutput() MetricStreamMapOutput {
	return o
}

func (o MetricStreamMapOutput) ToMetricStreamMapOutputWithContext(ctx context.Context) MetricStreamMapOutput {
	return o
}

func (o MetricStreamMapOutput) MapIndex(k pulumi.StringInput) MetricStreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MetricStream {
		return vs[0].(map[string]MetricStream)[vs[1].(string)]
	}).(MetricStreamOutput)
}

func init() {
	pulumi.RegisterOutputType(MetricStreamOutput{})
	pulumi.RegisterOutputType(MetricStreamPtrOutput{})
	pulumi.RegisterOutputType(MetricStreamArrayOutput{})
	pulumi.RegisterOutputType(MetricStreamMapOutput{})
}
