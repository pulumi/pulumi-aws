// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MetricStream struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput                            `pulumi:"arn"`
	CreationDate             pulumi.StringOutput                            `pulumi:"creationDate"`
	ExcludeFilters           MetricStreamExcludeFilterArrayOutput           `pulumi:"excludeFilters"`
	FirehoseArn              pulumi.StringOutput                            `pulumi:"firehoseArn"`
	IncludeFilters           MetricStreamIncludeFilterArrayOutput           `pulumi:"includeFilters"`
	LastUpdateDate           pulumi.StringOutput                            `pulumi:"lastUpdateDate"`
	Name                     pulumi.StringOutput                            `pulumi:"name"`
	NamePrefix               pulumi.StringOutput                            `pulumi:"namePrefix"`
	OutputFormat             pulumi.StringOutput                            `pulumi:"outputFormat"`
	RoleArn                  pulumi.StringOutput                            `pulumi:"roleArn"`
	State                    pulumi.StringOutput                            `pulumi:"state"`
	StatisticsConfigurations MetricStreamStatisticsConfigurationArrayOutput `pulumi:"statisticsConfigurations"`
	Tags                     pulumi.StringMapOutput                         `pulumi:"tags"`
	TagsAll                  pulumi.StringMapOutput                         `pulumi:"tagsAll"`
}

// NewMetricStream registers a new resource with the given unique name, arguments, and options.
func NewMetricStream(ctx *pulumi.Context,
	name string, args *MetricStreamArgs, opts ...pulumi.ResourceOption) (*MetricStream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FirehoseArn == nil {
		return nil, errors.New("invalid value for required argument 'FirehoseArn'")
	}
	if args.OutputFormat == nil {
		return nil, errors.New("invalid value for required argument 'OutputFormat'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource MetricStream
	err := ctx.RegisterResource("aws:cloudwatch/metricStream:MetricStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricStream gets an existing MetricStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricStreamState, opts ...pulumi.ResourceOption) (*MetricStream, error) {
	var resource MetricStream
	err := ctx.ReadResource("aws:cloudwatch/metricStream:MetricStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricStream resources.
type metricStreamState struct {
	Arn                      *string                               `pulumi:"arn"`
	CreationDate             *string                               `pulumi:"creationDate"`
	ExcludeFilters           []MetricStreamExcludeFilter           `pulumi:"excludeFilters"`
	FirehoseArn              *string                               `pulumi:"firehoseArn"`
	IncludeFilters           []MetricStreamIncludeFilter           `pulumi:"includeFilters"`
	LastUpdateDate           *string                               `pulumi:"lastUpdateDate"`
	Name                     *string                               `pulumi:"name"`
	NamePrefix               *string                               `pulumi:"namePrefix"`
	OutputFormat             *string                               `pulumi:"outputFormat"`
	RoleArn                  *string                               `pulumi:"roleArn"`
	State                    *string                               `pulumi:"state"`
	StatisticsConfigurations []MetricStreamStatisticsConfiguration `pulumi:"statisticsConfigurations"`
	Tags                     map[string]string                     `pulumi:"tags"`
	TagsAll                  map[string]string                     `pulumi:"tagsAll"`
}

type MetricStreamState struct {
	Arn                      pulumi.StringPtrInput
	CreationDate             pulumi.StringPtrInput
	ExcludeFilters           MetricStreamExcludeFilterArrayInput
	FirehoseArn              pulumi.StringPtrInput
	IncludeFilters           MetricStreamIncludeFilterArrayInput
	LastUpdateDate           pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	NamePrefix               pulumi.StringPtrInput
	OutputFormat             pulumi.StringPtrInput
	RoleArn                  pulumi.StringPtrInput
	State                    pulumi.StringPtrInput
	StatisticsConfigurations MetricStreamStatisticsConfigurationArrayInput
	Tags                     pulumi.StringMapInput
	TagsAll                  pulumi.StringMapInput
}

func (MetricStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricStreamState)(nil)).Elem()
}

type metricStreamArgs struct {
	ExcludeFilters           []MetricStreamExcludeFilter           `pulumi:"excludeFilters"`
	FirehoseArn              string                                `pulumi:"firehoseArn"`
	IncludeFilters           []MetricStreamIncludeFilter           `pulumi:"includeFilters"`
	Name                     *string                               `pulumi:"name"`
	NamePrefix               *string                               `pulumi:"namePrefix"`
	OutputFormat             string                                `pulumi:"outputFormat"`
	RoleArn                  string                                `pulumi:"roleArn"`
	StatisticsConfigurations []MetricStreamStatisticsConfiguration `pulumi:"statisticsConfigurations"`
	Tags                     map[string]string                     `pulumi:"tags"`
}

// The set of arguments for constructing a MetricStream resource.
type MetricStreamArgs struct {
	ExcludeFilters           MetricStreamExcludeFilterArrayInput
	FirehoseArn              pulumi.StringInput
	IncludeFilters           MetricStreamIncludeFilterArrayInput
	Name                     pulumi.StringPtrInput
	NamePrefix               pulumi.StringPtrInput
	OutputFormat             pulumi.StringInput
	RoleArn                  pulumi.StringInput
	StatisticsConfigurations MetricStreamStatisticsConfigurationArrayInput
	Tags                     pulumi.StringMapInput
}

func (MetricStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricStreamArgs)(nil)).Elem()
}

type MetricStreamInput interface {
	pulumi.Input

	ToMetricStreamOutput() MetricStreamOutput
	ToMetricStreamOutputWithContext(ctx context.Context) MetricStreamOutput
}

func (*MetricStream) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricStream)(nil)).Elem()
}

func (i *MetricStream) ToMetricStreamOutput() MetricStreamOutput {
	return i.ToMetricStreamOutputWithContext(context.Background())
}

func (i *MetricStream) ToMetricStreamOutputWithContext(ctx context.Context) MetricStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamOutput)
}

// MetricStreamArrayInput is an input type that accepts MetricStreamArray and MetricStreamArrayOutput values.
// You can construct a concrete instance of `MetricStreamArrayInput` via:
//
//	MetricStreamArray{ MetricStreamArgs{...} }
type MetricStreamArrayInput interface {
	pulumi.Input

	ToMetricStreamArrayOutput() MetricStreamArrayOutput
	ToMetricStreamArrayOutputWithContext(context.Context) MetricStreamArrayOutput
}

type MetricStreamArray []MetricStreamInput

func (MetricStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricStream)(nil)).Elem()
}

func (i MetricStreamArray) ToMetricStreamArrayOutput() MetricStreamArrayOutput {
	return i.ToMetricStreamArrayOutputWithContext(context.Background())
}

func (i MetricStreamArray) ToMetricStreamArrayOutputWithContext(ctx context.Context) MetricStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamArrayOutput)
}

// MetricStreamMapInput is an input type that accepts MetricStreamMap and MetricStreamMapOutput values.
// You can construct a concrete instance of `MetricStreamMapInput` via:
//
//	MetricStreamMap{ "key": MetricStreamArgs{...} }
type MetricStreamMapInput interface {
	pulumi.Input

	ToMetricStreamMapOutput() MetricStreamMapOutput
	ToMetricStreamMapOutputWithContext(context.Context) MetricStreamMapOutput
}

type MetricStreamMap map[string]MetricStreamInput

func (MetricStreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricStream)(nil)).Elem()
}

func (i MetricStreamMap) ToMetricStreamMapOutput() MetricStreamMapOutput {
	return i.ToMetricStreamMapOutputWithContext(context.Background())
}

func (i MetricStreamMap) ToMetricStreamMapOutputWithContext(ctx context.Context) MetricStreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamMapOutput)
}

type MetricStreamOutput struct{ *pulumi.OutputState }

func (MetricStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricStream)(nil)).Elem()
}

func (o MetricStreamOutput) ToMetricStreamOutput() MetricStreamOutput {
	return o
}

func (o MetricStreamOutput) ToMetricStreamOutputWithContext(ctx context.Context) MetricStreamOutput {
	return o
}

func (o MetricStreamOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricStream) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o MetricStreamOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricStream) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

func (o MetricStreamOutput) ExcludeFilters() MetricStreamExcludeFilterArrayOutput {
	return o.ApplyT(func(v *MetricStream) MetricStreamExcludeFilterArrayOutput { return v.ExcludeFilters }).(MetricStreamExcludeFilterArrayOutput)
}

func (o MetricStreamOutput) FirehoseArn() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricStream) pulumi.StringOutput { return v.FirehoseArn }).(pulumi.StringOutput)
}

func (o MetricStreamOutput) IncludeFilters() MetricStreamIncludeFilterArrayOutput {
	return o.ApplyT(func(v *MetricStream) MetricStreamIncludeFilterArrayOutput { return v.IncludeFilters }).(MetricStreamIncludeFilterArrayOutput)
}

func (o MetricStreamOutput) LastUpdateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricStream) pulumi.StringOutput { return v.LastUpdateDate }).(pulumi.StringOutput)
}

func (o MetricStreamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricStream) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MetricStreamOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricStream) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

func (o MetricStreamOutput) OutputFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricStream) pulumi.StringOutput { return v.OutputFormat }).(pulumi.StringOutput)
}

func (o MetricStreamOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricStream) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o MetricStreamOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricStream) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o MetricStreamOutput) StatisticsConfigurations() MetricStreamStatisticsConfigurationArrayOutput {
	return o.ApplyT(func(v *MetricStream) MetricStreamStatisticsConfigurationArrayOutput {
		return v.StatisticsConfigurations
	}).(MetricStreamStatisticsConfigurationArrayOutput)
}

func (o MetricStreamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MetricStream) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o MetricStreamOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MetricStream) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type MetricStreamArrayOutput struct{ *pulumi.OutputState }

func (MetricStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricStream)(nil)).Elem()
}

func (o MetricStreamArrayOutput) ToMetricStreamArrayOutput() MetricStreamArrayOutput {
	return o
}

func (o MetricStreamArrayOutput) ToMetricStreamArrayOutputWithContext(ctx context.Context) MetricStreamArrayOutput {
	return o
}

func (o MetricStreamArrayOutput) Index(i pulumi.IntInput) MetricStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricStream {
		return vs[0].([]*MetricStream)[vs[1].(int)]
	}).(MetricStreamOutput)
}

type MetricStreamMapOutput struct{ *pulumi.OutputState }

func (MetricStreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricStream)(nil)).Elem()
}

func (o MetricStreamMapOutput) ToMetricStreamMapOutput() MetricStreamMapOutput {
	return o
}

func (o MetricStreamMapOutput) ToMetricStreamMapOutputWithContext(ctx context.Context) MetricStreamMapOutput {
	return o
}

func (o MetricStreamMapOutput) MapIndex(k pulumi.StringInput) MetricStreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricStream {
		return vs[0].(map[string]*MetricStream)[vs[1].(string)]
	}).(MetricStreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamInput)(nil)).Elem(), &MetricStream{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamArrayInput)(nil)).Elem(), MetricStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamMapInput)(nil)).Elem(), MetricStreamMap{})
	pulumi.RegisterOutputType(MetricStreamOutput{})
	pulumi.RegisterOutputType(MetricStreamArrayOutput{})
	pulumi.RegisterOutputType(MetricStreamMapOutput{})
}
