// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS CloudWatch Logs Index Policy.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := cloudwatch.NewLogGroup(ctx, "example", &cloudwatch.LogGroupArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Fields": []string{
//					"eventName",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = cloudwatch.NewLogIndexPolicy(ctx, "example", &cloudwatch.LogIndexPolicyArgs{
//				LogGroupName:   example.Name,
//				PolicyDocument: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import CloudWatch Logs Index Policy using the `log_group_name`. For example:
//
// ```sh
// $ pulumi import aws:cloudwatch/logIndexPolicy:LogIndexPolicy example /aws/log/group/name
// ```
type LogIndexPolicy struct {
	pulumi.CustomResourceState

	// Log group name to set the policy for.
	LogGroupName pulumi.StringOutput `pulumi:"logGroupName"`
	// JSON policy document. This is a JSON formatted string.
	PolicyDocument pulumi.StringOutput `pulumi:"policyDocument"`
}

// NewLogIndexPolicy registers a new resource with the given unique name, arguments, and options.
func NewLogIndexPolicy(ctx *pulumi.Context,
	name string, args *LogIndexPolicyArgs, opts ...pulumi.ResourceOption) (*LogIndexPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogGroupName == nil {
		return nil, errors.New("invalid value for required argument 'LogGroupName'")
	}
	if args.PolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDocument'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogIndexPolicy
	err := ctx.RegisterResource("aws:cloudwatch/logIndexPolicy:LogIndexPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogIndexPolicy gets an existing LogIndexPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogIndexPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogIndexPolicyState, opts ...pulumi.ResourceOption) (*LogIndexPolicy, error) {
	var resource LogIndexPolicy
	err := ctx.ReadResource("aws:cloudwatch/logIndexPolicy:LogIndexPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogIndexPolicy resources.
type logIndexPolicyState struct {
	// Log group name to set the policy for.
	LogGroupName *string `pulumi:"logGroupName"`
	// JSON policy document. This is a JSON formatted string.
	PolicyDocument *string `pulumi:"policyDocument"`
}

type LogIndexPolicyState struct {
	// Log group name to set the policy for.
	LogGroupName pulumi.StringPtrInput
	// JSON policy document. This is a JSON formatted string.
	PolicyDocument pulumi.StringPtrInput
}

func (LogIndexPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*logIndexPolicyState)(nil)).Elem()
}

type logIndexPolicyArgs struct {
	// Log group name to set the policy for.
	LogGroupName string `pulumi:"logGroupName"`
	// JSON policy document. This is a JSON formatted string.
	PolicyDocument string `pulumi:"policyDocument"`
}

// The set of arguments for constructing a LogIndexPolicy resource.
type LogIndexPolicyArgs struct {
	// Log group name to set the policy for.
	LogGroupName pulumi.StringInput
	// JSON policy document. This is a JSON formatted string.
	PolicyDocument pulumi.StringInput
}

func (LogIndexPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logIndexPolicyArgs)(nil)).Elem()
}

type LogIndexPolicyInput interface {
	pulumi.Input

	ToLogIndexPolicyOutput() LogIndexPolicyOutput
	ToLogIndexPolicyOutputWithContext(ctx context.Context) LogIndexPolicyOutput
}

func (*LogIndexPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**LogIndexPolicy)(nil)).Elem()
}

func (i *LogIndexPolicy) ToLogIndexPolicyOutput() LogIndexPolicyOutput {
	return i.ToLogIndexPolicyOutputWithContext(context.Background())
}

func (i *LogIndexPolicy) ToLogIndexPolicyOutputWithContext(ctx context.Context) LogIndexPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogIndexPolicyOutput)
}

// LogIndexPolicyArrayInput is an input type that accepts LogIndexPolicyArray and LogIndexPolicyArrayOutput values.
// You can construct a concrete instance of `LogIndexPolicyArrayInput` via:
//
//	LogIndexPolicyArray{ LogIndexPolicyArgs{...} }
type LogIndexPolicyArrayInput interface {
	pulumi.Input

	ToLogIndexPolicyArrayOutput() LogIndexPolicyArrayOutput
	ToLogIndexPolicyArrayOutputWithContext(context.Context) LogIndexPolicyArrayOutput
}

type LogIndexPolicyArray []LogIndexPolicyInput

func (LogIndexPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogIndexPolicy)(nil)).Elem()
}

func (i LogIndexPolicyArray) ToLogIndexPolicyArrayOutput() LogIndexPolicyArrayOutput {
	return i.ToLogIndexPolicyArrayOutputWithContext(context.Background())
}

func (i LogIndexPolicyArray) ToLogIndexPolicyArrayOutputWithContext(ctx context.Context) LogIndexPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogIndexPolicyArrayOutput)
}

// LogIndexPolicyMapInput is an input type that accepts LogIndexPolicyMap and LogIndexPolicyMapOutput values.
// You can construct a concrete instance of `LogIndexPolicyMapInput` via:
//
//	LogIndexPolicyMap{ "key": LogIndexPolicyArgs{...} }
type LogIndexPolicyMapInput interface {
	pulumi.Input

	ToLogIndexPolicyMapOutput() LogIndexPolicyMapOutput
	ToLogIndexPolicyMapOutputWithContext(context.Context) LogIndexPolicyMapOutput
}

type LogIndexPolicyMap map[string]LogIndexPolicyInput

func (LogIndexPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogIndexPolicy)(nil)).Elem()
}

func (i LogIndexPolicyMap) ToLogIndexPolicyMapOutput() LogIndexPolicyMapOutput {
	return i.ToLogIndexPolicyMapOutputWithContext(context.Background())
}

func (i LogIndexPolicyMap) ToLogIndexPolicyMapOutputWithContext(ctx context.Context) LogIndexPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogIndexPolicyMapOutput)
}

type LogIndexPolicyOutput struct{ *pulumi.OutputState }

func (LogIndexPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogIndexPolicy)(nil)).Elem()
}

func (o LogIndexPolicyOutput) ToLogIndexPolicyOutput() LogIndexPolicyOutput {
	return o
}

func (o LogIndexPolicyOutput) ToLogIndexPolicyOutputWithContext(ctx context.Context) LogIndexPolicyOutput {
	return o
}

// Log group name to set the policy for.
func (o LogIndexPolicyOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogIndexPolicy) pulumi.StringOutput { return v.LogGroupName }).(pulumi.StringOutput)
}

// JSON policy document. This is a JSON formatted string.
func (o LogIndexPolicyOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v *LogIndexPolicy) pulumi.StringOutput { return v.PolicyDocument }).(pulumi.StringOutput)
}

type LogIndexPolicyArrayOutput struct{ *pulumi.OutputState }

func (LogIndexPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogIndexPolicy)(nil)).Elem()
}

func (o LogIndexPolicyArrayOutput) ToLogIndexPolicyArrayOutput() LogIndexPolicyArrayOutput {
	return o
}

func (o LogIndexPolicyArrayOutput) ToLogIndexPolicyArrayOutputWithContext(ctx context.Context) LogIndexPolicyArrayOutput {
	return o
}

func (o LogIndexPolicyArrayOutput) Index(i pulumi.IntInput) LogIndexPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogIndexPolicy {
		return vs[0].([]*LogIndexPolicy)[vs[1].(int)]
	}).(LogIndexPolicyOutput)
}

type LogIndexPolicyMapOutput struct{ *pulumi.OutputState }

func (LogIndexPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogIndexPolicy)(nil)).Elem()
}

func (o LogIndexPolicyMapOutput) ToLogIndexPolicyMapOutput() LogIndexPolicyMapOutput {
	return o
}

func (o LogIndexPolicyMapOutput) ToLogIndexPolicyMapOutputWithContext(ctx context.Context) LogIndexPolicyMapOutput {
	return o
}

func (o LogIndexPolicyMapOutput) MapIndex(k pulumi.StringInput) LogIndexPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogIndexPolicy {
		return vs[0].(map[string]*LogIndexPolicy)[vs[1].(string)]
	}).(LogIndexPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogIndexPolicyInput)(nil)).Elem(), &LogIndexPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogIndexPolicyArrayInput)(nil)).Elem(), LogIndexPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogIndexPolicyMapInput)(nil)).Elem(), LogIndexPolicyMap{})
	pulumi.RegisterOutputType(LogIndexPolicyOutput{})
	pulumi.RegisterOutputType(LogIndexPolicyArrayOutput{})
	pulumi.RegisterOutputType(LogIndexPolicyMapOutput{})
}
