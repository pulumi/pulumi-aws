// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an EventBridge event archive resource.
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			order, err := cloudwatch.NewEventBus(ctx, "order", &cloudwatch.EventBusArgs{
//				Name: pulumi.String("orders"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewEventArchive(ctx, "order", &cloudwatch.EventArchiveArgs{
//				Name:           pulumi.String("order-archive"),
//				EventSourceArn: order.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Optional Arguments
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			order, err := cloudwatch.NewEventBus(ctx, "order", &cloudwatch.EventBusArgs{
//				Name: pulumi.String("orders"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"source": []string{
//					"company.team.order",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = cloudwatch.NewEventArchive(ctx, "order", &cloudwatch.EventArchiveArgs{
//				Name:           pulumi.String("order-archive"),
//				Description:    pulumi.String("Archived events from order service"),
//				EventSourceArn: order.Arn,
//				RetentionDays:  pulumi.Int(7),
//				EventPattern:   pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### CMK Encryption
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := aws.GetCallerIdentity(ctx, &aws.GetCallerIdentityArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			currentGetPartition, err := aws.GetPartition(ctx, &aws.GetPartitionArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := cloudwatch.NewEventBus(ctx, "example", &cloudwatch.EventBusArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKey, err := kms.NewKey(ctx, "example", &kms.KeyArgs{
//				DeletionWindowInDays: pulumi.Int(7),
//				Policy: example.Arn.ApplyT(func(arn string) (pulumi.String, error) {
//					var _zero pulumi.String
//					tmpJSON0, err := json.Marshal(map[string]interface{}{
//						"Version": "2012-10-17",
//						"Id":      "key-policy-example",
//						"Statement": []interface{}{
//							map[string]interface{}{
//								"Sid":    "Enable IAM User Permissions",
//								"Effect": "Allow",
//								"Principal": map[string]interface{}{
//									"AWS": fmt.Sprintf("arn:%v:iam::%v:root", currentGetPartition.Partition, current.AccountId),
//								},
//								"Action":   "kms:*",
//								"Resource": "*",
//							},
//							map[string]interface{}{
//								"Sid":    "Allow describing of the key",
//								"Effect": "Allow",
//								"Principal": map[string]interface{}{
//									"Service": "events.amazonaws.com",
//								},
//								"Action": []string{
//									"kms:DescribeKey",
//								},
//								"Resource": "*",
//							},
//							map[string]interface{}{
//								"Sid":    "Allow use of the key",
//								"Effect": "Allow",
//								"Principal": map[string]interface{}{
//									"Service": "events.amazonaws.com",
//								},
//								"Action": []string{
//									"kms:GenerateDataKey",
//									"kms:Decrypt",
//									"kms:ReEncrypt*",
//								},
//								"Resource": "*",
//								"Condition": map[string]interface{}{
//									"StringEquals": map[string]interface{}{
//										"kms:EncryptionContext:aws:events:event-bus:arn": arn,
//									},
//								},
//							},
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return pulumi.String(json0), nil
//				}).(pulumi.StringOutput),
//				Tags: pulumi.StringMap{
//					"EventBridgeApiDestinations": pulumi.String("true"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewEventArchive(ctx, "example", &cloudwatch.EventArchiveArgs{
//				Name:             pulumi.String("example"),
//				EventSourceArn:   example.Arn,
//				KmsKeyIdentifier: exampleKey.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import an EventBridge archive using the `name`. For example:
//
// ```sh
// $ pulumi import aws:cloudwatch/eventArchive:EventArchive imported_event_archive order-archive
// ```
type EventArchive struct {
	pulumi.CustomResourceState

	// ARN of the archive.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Description for the archive.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Event pattern to use to filter events sent to the archive. By default, it attempts to archive every event received in the `eventSourceArn`.
	EventPattern pulumi.StringPtrOutput `pulumi:"eventPattern"`
	// ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
	EventSourceArn pulumi.StringOutput `pulumi:"eventSourceArn"`
	// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt this archive. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
	KmsKeyIdentifier pulumi.StringPtrOutput `pulumi:"kmsKeyIdentifier"`
	// Name of the archive. The archive name cannot exceed 48 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
	RetentionDays pulumi.IntPtrOutput `pulumi:"retentionDays"`
}

// NewEventArchive registers a new resource with the given unique name, arguments, and options.
func NewEventArchive(ctx *pulumi.Context,
	name string, args *EventArchiveArgs, opts ...pulumi.ResourceOption) (*EventArchive, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventSourceArn == nil {
		return nil, errors.New("invalid value for required argument 'EventSourceArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventArchive
	err := ctx.RegisterResource("aws:cloudwatch/eventArchive:EventArchive", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventArchive gets an existing EventArchive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventArchive(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventArchiveState, opts ...pulumi.ResourceOption) (*EventArchive, error) {
	var resource EventArchive
	err := ctx.ReadResource("aws:cloudwatch/eventArchive:EventArchive", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventArchive resources.
type eventArchiveState struct {
	// ARN of the archive.
	Arn *string `pulumi:"arn"`
	// Description for the archive.
	Description *string `pulumi:"description"`
	// Event pattern to use to filter events sent to the archive. By default, it attempts to archive every event received in the `eventSourceArn`.
	EventPattern *string `pulumi:"eventPattern"`
	// ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
	EventSourceArn *string `pulumi:"eventSourceArn"`
	// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt this archive. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
	KmsKeyIdentifier *string `pulumi:"kmsKeyIdentifier"`
	// Name of the archive. The archive name cannot exceed 48 characters.
	Name *string `pulumi:"name"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
	RetentionDays *int `pulumi:"retentionDays"`
}

type EventArchiveState struct {
	// ARN of the archive.
	Arn pulumi.StringPtrInput
	// Description for the archive.
	Description pulumi.StringPtrInput
	// Event pattern to use to filter events sent to the archive. By default, it attempts to archive every event received in the `eventSourceArn`.
	EventPattern pulumi.StringPtrInput
	// ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
	EventSourceArn pulumi.StringPtrInput
	// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt this archive. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
	KmsKeyIdentifier pulumi.StringPtrInput
	// Name of the archive. The archive name cannot exceed 48 characters.
	Name pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
	RetentionDays pulumi.IntPtrInput
}

func (EventArchiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventArchiveState)(nil)).Elem()
}

type eventArchiveArgs struct {
	// Description for the archive.
	Description *string `pulumi:"description"`
	// Event pattern to use to filter events sent to the archive. By default, it attempts to archive every event received in the `eventSourceArn`.
	EventPattern *string `pulumi:"eventPattern"`
	// ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
	EventSourceArn string `pulumi:"eventSourceArn"`
	// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt this archive. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
	KmsKeyIdentifier *string `pulumi:"kmsKeyIdentifier"`
	// Name of the archive. The archive name cannot exceed 48 characters.
	Name *string `pulumi:"name"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
	RetentionDays *int `pulumi:"retentionDays"`
}

// The set of arguments for constructing a EventArchive resource.
type EventArchiveArgs struct {
	// Description for the archive.
	Description pulumi.StringPtrInput
	// Event pattern to use to filter events sent to the archive. By default, it attempts to archive every event received in the `eventSourceArn`.
	EventPattern pulumi.StringPtrInput
	// ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
	EventSourceArn pulumi.StringInput
	// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt this archive. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
	KmsKeyIdentifier pulumi.StringPtrInput
	// Name of the archive. The archive name cannot exceed 48 characters.
	Name pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
	RetentionDays pulumi.IntPtrInput
}

func (EventArchiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventArchiveArgs)(nil)).Elem()
}

type EventArchiveInput interface {
	pulumi.Input

	ToEventArchiveOutput() EventArchiveOutput
	ToEventArchiveOutputWithContext(ctx context.Context) EventArchiveOutput
}

func (*EventArchive) ElementType() reflect.Type {
	return reflect.TypeOf((**EventArchive)(nil)).Elem()
}

func (i *EventArchive) ToEventArchiveOutput() EventArchiveOutput {
	return i.ToEventArchiveOutputWithContext(context.Background())
}

func (i *EventArchive) ToEventArchiveOutputWithContext(ctx context.Context) EventArchiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventArchiveOutput)
}

// EventArchiveArrayInput is an input type that accepts EventArchiveArray and EventArchiveArrayOutput values.
// You can construct a concrete instance of `EventArchiveArrayInput` via:
//
//	EventArchiveArray{ EventArchiveArgs{...} }
type EventArchiveArrayInput interface {
	pulumi.Input

	ToEventArchiveArrayOutput() EventArchiveArrayOutput
	ToEventArchiveArrayOutputWithContext(context.Context) EventArchiveArrayOutput
}

type EventArchiveArray []EventArchiveInput

func (EventArchiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventArchive)(nil)).Elem()
}

func (i EventArchiveArray) ToEventArchiveArrayOutput() EventArchiveArrayOutput {
	return i.ToEventArchiveArrayOutputWithContext(context.Background())
}

func (i EventArchiveArray) ToEventArchiveArrayOutputWithContext(ctx context.Context) EventArchiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventArchiveArrayOutput)
}

// EventArchiveMapInput is an input type that accepts EventArchiveMap and EventArchiveMapOutput values.
// You can construct a concrete instance of `EventArchiveMapInput` via:
//
//	EventArchiveMap{ "key": EventArchiveArgs{...} }
type EventArchiveMapInput interface {
	pulumi.Input

	ToEventArchiveMapOutput() EventArchiveMapOutput
	ToEventArchiveMapOutputWithContext(context.Context) EventArchiveMapOutput
}

type EventArchiveMap map[string]EventArchiveInput

func (EventArchiveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventArchive)(nil)).Elem()
}

func (i EventArchiveMap) ToEventArchiveMapOutput() EventArchiveMapOutput {
	return i.ToEventArchiveMapOutputWithContext(context.Background())
}

func (i EventArchiveMap) ToEventArchiveMapOutputWithContext(ctx context.Context) EventArchiveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventArchiveMapOutput)
}

type EventArchiveOutput struct{ *pulumi.OutputState }

func (EventArchiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventArchive)(nil)).Elem()
}

func (o EventArchiveOutput) ToEventArchiveOutput() EventArchiveOutput {
	return o
}

func (o EventArchiveOutput) ToEventArchiveOutputWithContext(ctx context.Context) EventArchiveOutput {
	return o
}

// ARN of the archive.
func (o EventArchiveOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventArchive) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Description for the archive.
func (o EventArchiveOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventArchive) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Event pattern to use to filter events sent to the archive. By default, it attempts to archive every event received in the `eventSourceArn`.
func (o EventArchiveOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventArchive) pulumi.StringPtrOutput { return v.EventPattern }).(pulumi.StringPtrOutput)
}

// ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
func (o EventArchiveOutput) EventSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventArchive) pulumi.StringOutput { return v.EventSourceArn }).(pulumi.StringOutput)
}

// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt this archive. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
func (o EventArchiveOutput) KmsKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventArchive) pulumi.StringPtrOutput { return v.KmsKeyIdentifier }).(pulumi.StringPtrOutput)
}

// Name of the archive. The archive name cannot exceed 48 characters.
func (o EventArchiveOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventArchive) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o EventArchiveOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *EventArchive) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
func (o EventArchiveOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventArchive) pulumi.IntPtrOutput { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

type EventArchiveArrayOutput struct{ *pulumi.OutputState }

func (EventArchiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventArchive)(nil)).Elem()
}

func (o EventArchiveArrayOutput) ToEventArchiveArrayOutput() EventArchiveArrayOutput {
	return o
}

func (o EventArchiveArrayOutput) ToEventArchiveArrayOutputWithContext(ctx context.Context) EventArchiveArrayOutput {
	return o
}

func (o EventArchiveArrayOutput) Index(i pulumi.IntInput) EventArchiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventArchive {
		return vs[0].([]*EventArchive)[vs[1].(int)]
	}).(EventArchiveOutput)
}

type EventArchiveMapOutput struct{ *pulumi.OutputState }

func (EventArchiveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventArchive)(nil)).Elem()
}

func (o EventArchiveMapOutput) ToEventArchiveMapOutput() EventArchiveMapOutput {
	return o
}

func (o EventArchiveMapOutput) ToEventArchiveMapOutputWithContext(ctx context.Context) EventArchiveMapOutput {
	return o
}

func (o EventArchiveMapOutput) MapIndex(k pulumi.StringInput) EventArchiveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventArchive {
		return vs[0].(map[string]*EventArchive)[vs[1].(string)]
	}).(EventArchiveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventArchiveInput)(nil)).Elem(), &EventArchive{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventArchiveArrayInput)(nil)).Elem(), EventArchiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventArchiveMapInput)(nil)).Elem(), EventArchiveMap{})
	pulumi.RegisterOutputType(EventArchiveOutput{})
	pulumi.RegisterOutputType(EventArchiveArrayOutput{})
	pulumi.RegisterOutputType(EventArchiveMapOutput{})
}
