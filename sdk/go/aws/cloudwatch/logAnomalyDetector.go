// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS CloudWatch Logs Log Anomaly Detector.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			var test []*cloudwatch.LogGroup
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := cloudwatch.NewLogGroup(ctx, fmt.Sprintf("test-%v", key0), &cloudwatch.LogGroupArgs{
//					Name: pulumi.Sprintf("testing-%v", val0),
//				})
//				if err != nil {
//					return err
//				}
//				test = append(test, __res)
//			}
//			_, err = cloudwatch.NewLogAnomalyDetector(ctx, "test", &cloudwatch.LogAnomalyDetectorArgs{
//				DetectorName: pulumi.String("testing"),
//				LogGroupArnLists: pulumi.StringArray{
//					test[0].Arn,
//				},
//				AnomalyVisibilityTime: pulumi.Int(7),
//				EvaluationFrequency:   pulumi.String("TEN_MIN"),
//				Enabled:               pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import CloudWatch Log Anomaly Detector using the `example_id_arg`. For example:
//
// ```sh
// $ pulumi import aws:cloudwatch/logAnomalyDetector:LogAnomalyDetector example log_anomaly_detector-arn-12345678
// ```
type LogAnomalyDetector struct {
	pulumi.CustomResourceState

	// Number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly, it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as normal. Therefore, if you do not correct the cause of an anomaly during the time period specified in `anomalyVisibilityTime`, it will be considered normal going forward and will not be detected as an anomaly. Valid Range: Minimum value of 7. Maximum value of 90.
	AnomalyVisibilityTime pulumi.IntOutput `pulumi:"anomalyVisibilityTime"`
	// ARN of the log anomaly detector that you just created.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Name for this anomaly detector.
	DetectorName pulumi.StringPtrOutput `pulumi:"detectorName"`
	Enabled      pulumi.BoolOutput      `pulumi:"enabled"`
	// Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for `evaluationFrequency`. Valid Values: `ONE_MIN | FIVE_MIN | TEN_MIN | FIFTEEN_MIN | THIRTY_MIN | ONE_HOUR`.
	EvaluationFrequency pulumi.StringPtrOutput `pulumi:"evaluationFrequency"`
	// You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
	FilterPattern pulumi.StringPtrOutput `pulumi:"filterPattern"`
	// Optionally assigns a AWS KMS key to secure this anomaly detector and its findings. If a key is assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If a key is assigned to an anomaly detector, a user must have permissions for both this key and for the anomaly detector to retrieve information about the anomalies that it finds.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// Array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
	//
	// The following arguments are optional:
	LogGroupArnLists pulumi.StringArrayOutput `pulumi:"logGroupArnLists"`
	Tags             pulumi.StringMapOutput   `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewLogAnomalyDetector registers a new resource with the given unique name, arguments, and options.
func NewLogAnomalyDetector(ctx *pulumi.Context,
	name string, args *LogAnomalyDetectorArgs, opts ...pulumi.ResourceOption) (*LogAnomalyDetector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.LogGroupArnLists == nil {
		return nil, errors.New("invalid value for required argument 'LogGroupArnLists'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogAnomalyDetector
	err := ctx.RegisterResource("aws:cloudwatch/logAnomalyDetector:LogAnomalyDetector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogAnomalyDetector gets an existing LogAnomalyDetector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogAnomalyDetector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogAnomalyDetectorState, opts ...pulumi.ResourceOption) (*LogAnomalyDetector, error) {
	var resource LogAnomalyDetector
	err := ctx.ReadResource("aws:cloudwatch/logAnomalyDetector:LogAnomalyDetector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogAnomalyDetector resources.
type logAnomalyDetectorState struct {
	// Number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly, it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as normal. Therefore, if you do not correct the cause of an anomaly during the time period specified in `anomalyVisibilityTime`, it will be considered normal going forward and will not be detected as an anomaly. Valid Range: Minimum value of 7. Maximum value of 90.
	AnomalyVisibilityTime *int `pulumi:"anomalyVisibilityTime"`
	// ARN of the log anomaly detector that you just created.
	Arn *string `pulumi:"arn"`
	// Name for this anomaly detector.
	DetectorName *string `pulumi:"detectorName"`
	Enabled      *bool   `pulumi:"enabled"`
	// Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for `evaluationFrequency`. Valid Values: `ONE_MIN | FIVE_MIN | TEN_MIN | FIFTEEN_MIN | THIRTY_MIN | ONE_HOUR`.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
	FilterPattern *string `pulumi:"filterPattern"`
	// Optionally assigns a AWS KMS key to secure this anomaly detector and its findings. If a key is assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If a key is assigned to an anomaly detector, a user must have permissions for both this key and for the anomaly detector to retrieve information about the anomalies that it finds.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
	//
	// The following arguments are optional:
	LogGroupArnLists []string          `pulumi:"logGroupArnLists"`
	Tags             map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LogAnomalyDetectorState struct {
	// Number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly, it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as normal. Therefore, if you do not correct the cause of an anomaly during the time period specified in `anomalyVisibilityTime`, it will be considered normal going forward and will not be detected as an anomaly. Valid Range: Minimum value of 7. Maximum value of 90.
	AnomalyVisibilityTime pulumi.IntPtrInput
	// ARN of the log anomaly detector that you just created.
	Arn pulumi.StringPtrInput
	// Name for this anomaly detector.
	DetectorName pulumi.StringPtrInput
	Enabled      pulumi.BoolPtrInput
	// Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for `evaluationFrequency`. Valid Values: `ONE_MIN | FIVE_MIN | TEN_MIN | FIFTEEN_MIN | THIRTY_MIN | ONE_HOUR`.
	EvaluationFrequency pulumi.StringPtrInput
	// You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
	FilterPattern pulumi.StringPtrInput
	// Optionally assigns a AWS KMS key to secure this anomaly detector and its findings. If a key is assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If a key is assigned to an anomaly detector, a user must have permissions for both this key and for the anomaly detector to retrieve information about the anomalies that it finds.
	KmsKeyId pulumi.StringPtrInput
	// Array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
	//
	// The following arguments are optional:
	LogGroupArnLists pulumi.StringArrayInput
	Tags             pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (LogAnomalyDetectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*logAnomalyDetectorState)(nil)).Elem()
}

type logAnomalyDetectorArgs struct {
	// Number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly, it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as normal. Therefore, if you do not correct the cause of an anomaly during the time period specified in `anomalyVisibilityTime`, it will be considered normal going forward and will not be detected as an anomaly. Valid Range: Minimum value of 7. Maximum value of 90.
	AnomalyVisibilityTime *int `pulumi:"anomalyVisibilityTime"`
	// Name for this anomaly detector.
	DetectorName *string `pulumi:"detectorName"`
	Enabled      bool    `pulumi:"enabled"`
	// Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for `evaluationFrequency`. Valid Values: `ONE_MIN | FIVE_MIN | TEN_MIN | FIFTEEN_MIN | THIRTY_MIN | ONE_HOUR`.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
	FilterPattern *string `pulumi:"filterPattern"`
	// Optionally assigns a AWS KMS key to secure this anomaly detector and its findings. If a key is assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If a key is assigned to an anomaly detector, a user must have permissions for both this key and for the anomaly detector to retrieve information about the anomalies that it finds.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
	//
	// The following arguments are optional:
	LogGroupArnLists []string          `pulumi:"logGroupArnLists"`
	Tags             map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LogAnomalyDetector resource.
type LogAnomalyDetectorArgs struct {
	// Number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly, it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as normal. Therefore, if you do not correct the cause of an anomaly during the time period specified in `anomalyVisibilityTime`, it will be considered normal going forward and will not be detected as an anomaly. Valid Range: Minimum value of 7. Maximum value of 90.
	AnomalyVisibilityTime pulumi.IntPtrInput
	// Name for this anomaly detector.
	DetectorName pulumi.StringPtrInput
	Enabled      pulumi.BoolInput
	// Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for `evaluationFrequency`. Valid Values: `ONE_MIN | FIVE_MIN | TEN_MIN | FIFTEEN_MIN | THIRTY_MIN | ONE_HOUR`.
	EvaluationFrequency pulumi.StringPtrInput
	// You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
	FilterPattern pulumi.StringPtrInput
	// Optionally assigns a AWS KMS key to secure this anomaly detector and its findings. If a key is assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If a key is assigned to an anomaly detector, a user must have permissions for both this key and for the anomaly detector to retrieve information about the anomalies that it finds.
	KmsKeyId pulumi.StringPtrInput
	// Array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
	//
	// The following arguments are optional:
	LogGroupArnLists pulumi.StringArrayInput
	Tags             pulumi.StringMapInput
}

func (LogAnomalyDetectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logAnomalyDetectorArgs)(nil)).Elem()
}

type LogAnomalyDetectorInput interface {
	pulumi.Input

	ToLogAnomalyDetectorOutput() LogAnomalyDetectorOutput
	ToLogAnomalyDetectorOutputWithContext(ctx context.Context) LogAnomalyDetectorOutput
}

func (*LogAnomalyDetector) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnomalyDetector)(nil)).Elem()
}

func (i *LogAnomalyDetector) ToLogAnomalyDetectorOutput() LogAnomalyDetectorOutput {
	return i.ToLogAnomalyDetectorOutputWithContext(context.Background())
}

func (i *LogAnomalyDetector) ToLogAnomalyDetectorOutputWithContext(ctx context.Context) LogAnomalyDetectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnomalyDetectorOutput)
}

// LogAnomalyDetectorArrayInput is an input type that accepts LogAnomalyDetectorArray and LogAnomalyDetectorArrayOutput values.
// You can construct a concrete instance of `LogAnomalyDetectorArrayInput` via:
//
//	LogAnomalyDetectorArray{ LogAnomalyDetectorArgs{...} }
type LogAnomalyDetectorArrayInput interface {
	pulumi.Input

	ToLogAnomalyDetectorArrayOutput() LogAnomalyDetectorArrayOutput
	ToLogAnomalyDetectorArrayOutputWithContext(context.Context) LogAnomalyDetectorArrayOutput
}

type LogAnomalyDetectorArray []LogAnomalyDetectorInput

func (LogAnomalyDetectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogAnomalyDetector)(nil)).Elem()
}

func (i LogAnomalyDetectorArray) ToLogAnomalyDetectorArrayOutput() LogAnomalyDetectorArrayOutput {
	return i.ToLogAnomalyDetectorArrayOutputWithContext(context.Background())
}

func (i LogAnomalyDetectorArray) ToLogAnomalyDetectorArrayOutputWithContext(ctx context.Context) LogAnomalyDetectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnomalyDetectorArrayOutput)
}

// LogAnomalyDetectorMapInput is an input type that accepts LogAnomalyDetectorMap and LogAnomalyDetectorMapOutput values.
// You can construct a concrete instance of `LogAnomalyDetectorMapInput` via:
//
//	LogAnomalyDetectorMap{ "key": LogAnomalyDetectorArgs{...} }
type LogAnomalyDetectorMapInput interface {
	pulumi.Input

	ToLogAnomalyDetectorMapOutput() LogAnomalyDetectorMapOutput
	ToLogAnomalyDetectorMapOutputWithContext(context.Context) LogAnomalyDetectorMapOutput
}

type LogAnomalyDetectorMap map[string]LogAnomalyDetectorInput

func (LogAnomalyDetectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogAnomalyDetector)(nil)).Elem()
}

func (i LogAnomalyDetectorMap) ToLogAnomalyDetectorMapOutput() LogAnomalyDetectorMapOutput {
	return i.ToLogAnomalyDetectorMapOutputWithContext(context.Background())
}

func (i LogAnomalyDetectorMap) ToLogAnomalyDetectorMapOutputWithContext(ctx context.Context) LogAnomalyDetectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnomalyDetectorMapOutput)
}

type LogAnomalyDetectorOutput struct{ *pulumi.OutputState }

func (LogAnomalyDetectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnomalyDetector)(nil)).Elem()
}

func (o LogAnomalyDetectorOutput) ToLogAnomalyDetectorOutput() LogAnomalyDetectorOutput {
	return o
}

func (o LogAnomalyDetectorOutput) ToLogAnomalyDetectorOutputWithContext(ctx context.Context) LogAnomalyDetectorOutput {
	return o
}

// Number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly, it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as normal. Therefore, if you do not correct the cause of an anomaly during the time period specified in `anomalyVisibilityTime`, it will be considered normal going forward and will not be detected as an anomaly. Valid Range: Minimum value of 7. Maximum value of 90.
func (o LogAnomalyDetectorOutput) AnomalyVisibilityTime() pulumi.IntOutput {
	return o.ApplyT(func(v *LogAnomalyDetector) pulumi.IntOutput { return v.AnomalyVisibilityTime }).(pulumi.IntOutput)
}

// ARN of the log anomaly detector that you just created.
func (o LogAnomalyDetectorOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LogAnomalyDetector) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Name for this anomaly detector.
func (o LogAnomalyDetectorOutput) DetectorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnomalyDetector) pulumi.StringPtrOutput { return v.DetectorName }).(pulumi.StringPtrOutput)
}

func (o LogAnomalyDetectorOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LogAnomalyDetector) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for `evaluationFrequency`. Valid Values: `ONE_MIN | FIVE_MIN | TEN_MIN | FIFTEEN_MIN | THIRTY_MIN | ONE_HOUR`.
func (o LogAnomalyDetectorOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnomalyDetector) pulumi.StringPtrOutput { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
func (o LogAnomalyDetectorOutput) FilterPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnomalyDetector) pulumi.StringPtrOutput { return v.FilterPattern }).(pulumi.StringPtrOutput)
}

// Optionally assigns a AWS KMS key to secure this anomaly detector and its findings. If a key is assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If a key is assigned to an anomaly detector, a user must have permissions for both this key and for the anomaly detector to retrieve information about the anomalies that it finds.
func (o LogAnomalyDetectorOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnomalyDetector) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// Array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
//
// The following arguments are optional:
func (o LogAnomalyDetectorOutput) LogGroupArnLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogAnomalyDetector) pulumi.StringArrayOutput { return v.LogGroupArnLists }).(pulumi.StringArrayOutput)
}

func (o LogAnomalyDetectorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogAnomalyDetector) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o LogAnomalyDetectorOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogAnomalyDetector) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LogAnomalyDetectorArrayOutput struct{ *pulumi.OutputState }

func (LogAnomalyDetectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogAnomalyDetector)(nil)).Elem()
}

func (o LogAnomalyDetectorArrayOutput) ToLogAnomalyDetectorArrayOutput() LogAnomalyDetectorArrayOutput {
	return o
}

func (o LogAnomalyDetectorArrayOutput) ToLogAnomalyDetectorArrayOutputWithContext(ctx context.Context) LogAnomalyDetectorArrayOutput {
	return o
}

func (o LogAnomalyDetectorArrayOutput) Index(i pulumi.IntInput) LogAnomalyDetectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogAnomalyDetector {
		return vs[0].([]*LogAnomalyDetector)[vs[1].(int)]
	}).(LogAnomalyDetectorOutput)
}

type LogAnomalyDetectorMapOutput struct{ *pulumi.OutputState }

func (LogAnomalyDetectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogAnomalyDetector)(nil)).Elem()
}

func (o LogAnomalyDetectorMapOutput) ToLogAnomalyDetectorMapOutput() LogAnomalyDetectorMapOutput {
	return o
}

func (o LogAnomalyDetectorMapOutput) ToLogAnomalyDetectorMapOutputWithContext(ctx context.Context) LogAnomalyDetectorMapOutput {
	return o
}

func (o LogAnomalyDetectorMapOutput) MapIndex(k pulumi.StringInput) LogAnomalyDetectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogAnomalyDetector {
		return vs[0].(map[string]*LogAnomalyDetector)[vs[1].(string)]
	}).(LogAnomalyDetectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogAnomalyDetectorInput)(nil)).Elem(), &LogAnomalyDetector{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogAnomalyDetectorArrayInput)(nil)).Elem(), LogAnomalyDetectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogAnomalyDetectorMapInput)(nil)).Elem(), LogAnomalyDetectorMap{})
	pulumi.RegisterOutputType(LogAnomalyDetectorOutput{})
	pulumi.RegisterOutputType(LogAnomalyDetectorArrayOutput{})
	pulumi.RegisterOutputType(LogAnomalyDetectorMapOutput{})
}
