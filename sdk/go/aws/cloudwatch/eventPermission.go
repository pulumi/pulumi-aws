// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to create a CloudWatch Events permission to support cross-account events in the current account default event bus.
type EventPermission struct {
	s *pulumi.ResourceState
}

// NewEventPermission registers a new resource with the given unique name, arguments, and options.
func NewEventPermission(ctx *pulumi.Context,
	name string, args *EventPermissionArgs, opts ...pulumi.ResourceOpt) (*EventPermission, error) {
	if args == nil || args.Principal == nil {
		return nil, errors.New("missing required argument 'Principal'")
	}
	if args == nil || args.StatementId == nil {
		return nil, errors.New("missing required argument 'StatementId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["action"] = nil
		inputs["principal"] = nil
		inputs["statementId"] = nil
	} else {
		inputs["action"] = args.Action
		inputs["principal"] = args.Principal
		inputs["statementId"] = args.StatementId
	}
	s, err := ctx.RegisterResource("aws:cloudwatch/eventPermission:EventPermission", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EventPermission{s: s}, nil
}

// GetEventPermission gets an existing EventPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventPermission(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EventPermissionState, opts ...pulumi.ResourceOpt) (*EventPermission, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["action"] = state.Action
		inputs["principal"] = state.Principal
		inputs["statementId"] = state.StatementId
	}
	s, err := ctx.ReadResource("aws:cloudwatch/eventPermission:EventPermission", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EventPermission{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *EventPermission) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *EventPermission) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
func (r *EventPermission) Action() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["action"])
}

// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus.
func (r *EventPermission) Principal() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["principal"])
}

// An identifier string for the external account that you are granting permissions to.
func (r *EventPermission) StatementId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["statementId"])
}

// Input properties used for looking up and filtering EventPermission resources.
type EventPermissionState struct {
	// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
	Action interface{}
	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus.
	Principal interface{}
	// An identifier string for the external account that you are granting permissions to.
	StatementId interface{}
}

// The set of arguments for constructing a EventPermission resource.
type EventPermissionArgs struct {
	// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
	Action interface{}
	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus.
	Principal interface{}
	// An identifier string for the external account that you are granting permissions to.
	StatementId interface{}
}
