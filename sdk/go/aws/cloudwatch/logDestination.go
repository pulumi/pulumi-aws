// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CloudWatch Logs destination resource.
type LogDestination struct {
	s *pulumi.ResourceState
}

// NewLogDestination registers a new resource with the given unique name, arguments, and options.
func NewLogDestination(ctx *pulumi.Context,
	name string, args *LogDestinationArgs, opts ...pulumi.ResourceOpt) (*LogDestination, error) {
	if args == nil || args.RoleArn == nil {
		return nil, errors.New("missing required argument 'RoleArn'")
	}
	if args == nil || args.TargetArn == nil {
		return nil, errors.New("missing required argument 'TargetArn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["roleArn"] = nil
		inputs["targetArn"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["roleArn"] = args.RoleArn
		inputs["targetArn"] = args.TargetArn
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:cloudwatch/logDestination:LogDestination", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogDestination{s: s}, nil
}

// GetLogDestination gets an existing LogDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogDestination(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LogDestinationState, opts ...pulumi.ResourceOpt) (*LogDestination, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["name"] = state.Name
		inputs["roleArn"] = state.RoleArn
		inputs["targetArn"] = state.TargetArn
	}
	s, err := ctx.ReadResource("aws:cloudwatch/logDestination:LogDestination", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogDestination{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LogDestination) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LogDestination) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The Amazon Resource Name (ARN) specifying the log destination.
func (r *LogDestination) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// A name for the log destination
func (r *LogDestination) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to put data into the target
func (r *LogDestination) RoleArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["roleArn"])
}

// The ARN of the target Amazon Kinesis stream or Amazon Lambda resource for the destination
func (r *LogDestination) TargetArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["targetArn"])
}

// Input properties used for looking up and filtering LogDestination resources.
type LogDestinationState struct {
	// The Amazon Resource Name (ARN) specifying the log destination.
	Arn interface{}
	// A name for the log destination
	Name interface{}
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to put data into the target
	RoleArn interface{}
	// The ARN of the target Amazon Kinesis stream or Amazon Lambda resource for the destination
	TargetArn interface{}
}

// The set of arguments for constructing a LogDestination resource.
type LogDestinationArgs struct {
	// A name for the log destination
	Name interface{}
	// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to put data into the target
	RoleArn interface{}
	// The ARN of the target Amazon Kinesis stream or Amazon Lambda resource for the destination
	TargetArn interface{}
}
