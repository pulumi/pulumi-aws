// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CloudWatch Log Account Policy resource.
//
// ## Example Usage
//
// ### Account Data Protection Policy
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Name":    "DataProtection",
//				"Version": "2021-06-01",
//				"Statement": []interface{}{
//					map[string]interface{}{
//						"Sid": "Audit",
//						"DataIdentifier": []string{
//							"arn:aws:dataprotection::aws:data-identifier/EmailAddress",
//						},
//						"Operation": map[string]interface{}{
//							"Audit": map[string]interface{}{
//								"FindingsDestination": nil,
//							},
//						},
//					},
//					map[string]interface{}{
//						"Sid": "Redact",
//						"DataIdentifier": []string{
//							"arn:aws:dataprotection::aws:data-identifier/EmailAddress",
//						},
//						"Operation": map[string]interface{}{
//							"Deidentify": map[string]interface{}{
//								"MaskConfig": nil,
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = cloudwatch.NewLogAccountPolicy(ctx, "data_protection", &cloudwatch.LogAccountPolicyArgs{
//				PolicyName:     pulumi.String("data-protection"),
//				PolicyType:     pulumi.String("DATA_PROTECTION_POLICY"),
//				PolicyDocument: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Subscription Filter Policy
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"DestinationArn": test.Arn,
//				"FilterPattern":  "test",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = cloudwatch.NewLogAccountPolicy(ctx, "subscription_filter", &cloudwatch.LogAccountPolicyArgs{
//				PolicyName:        pulumi.String("subscription-filter"),
//				PolicyType:        pulumi.String("SUBSCRIPTION_FILTER_POLICY"),
//				PolicyDocument:    pulumi.String(json0),
//				SelectionCriteria: pulumi.String("LogGroupName NOT IN [\"excluded_log_group_name\"]"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import this resource using the `policy_name` and `policy_type` separated by `:`. For example:
//
// ```sh
// $ pulumi import aws:cloudwatch/logAccountPolicy:LogAccountPolicy example "my-account-policy:SUBSCRIPTION_FILTER_POLICY"
// ```
type LogAccountPolicy struct {
	pulumi.CustomResourceState

	// Text of the account policy. Refer to the [AWS docs](https://docs.aws.amazon.com/cli/latest/reference/logs/put-account-policy.html) for more information.
	PolicyDocument pulumi.StringOutput `pulumi:"policyDocument"`
	// Name of the account policy.
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// Type of account policy. Either `DATA_PROTECTION_POLICY` or `SUBSCRIPTION_FILTER_POLICY`. You can have one account policy per type in an account.
	PolicyType pulumi.StringOutput `pulumi:"policyType"`
	// Currently defaults to and only accepts the value: `ALL`.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Criteria for applying a subscription filter policy to a selection of log groups. The only allowable criteria selector is `LogGroupName NOT IN []`.
	SelectionCriteria pulumi.StringPtrOutput `pulumi:"selectionCriteria"`
}

// NewLogAccountPolicy registers a new resource with the given unique name, arguments, and options.
func NewLogAccountPolicy(ctx *pulumi.Context,
	name string, args *LogAccountPolicyArgs, opts ...pulumi.ResourceOption) (*LogAccountPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDocument'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	if args.PolicyType == nil {
		return nil, errors.New("invalid value for required argument 'PolicyType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogAccountPolicy
	err := ctx.RegisterResource("aws:cloudwatch/logAccountPolicy:LogAccountPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogAccountPolicy gets an existing LogAccountPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogAccountPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogAccountPolicyState, opts ...pulumi.ResourceOption) (*LogAccountPolicy, error) {
	var resource LogAccountPolicy
	err := ctx.ReadResource("aws:cloudwatch/logAccountPolicy:LogAccountPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogAccountPolicy resources.
type logAccountPolicyState struct {
	// Text of the account policy. Refer to the [AWS docs](https://docs.aws.amazon.com/cli/latest/reference/logs/put-account-policy.html) for more information.
	PolicyDocument *string `pulumi:"policyDocument"`
	// Name of the account policy.
	PolicyName *string `pulumi:"policyName"`
	// Type of account policy. Either `DATA_PROTECTION_POLICY` or `SUBSCRIPTION_FILTER_POLICY`. You can have one account policy per type in an account.
	PolicyType *string `pulumi:"policyType"`
	// Currently defaults to and only accepts the value: `ALL`.
	Scope *string `pulumi:"scope"`
	// Criteria for applying a subscription filter policy to a selection of log groups. The only allowable criteria selector is `LogGroupName NOT IN []`.
	SelectionCriteria *string `pulumi:"selectionCriteria"`
}

type LogAccountPolicyState struct {
	// Text of the account policy. Refer to the [AWS docs](https://docs.aws.amazon.com/cli/latest/reference/logs/put-account-policy.html) for more information.
	PolicyDocument pulumi.StringPtrInput
	// Name of the account policy.
	PolicyName pulumi.StringPtrInput
	// Type of account policy. Either `DATA_PROTECTION_POLICY` or `SUBSCRIPTION_FILTER_POLICY`. You can have one account policy per type in an account.
	PolicyType pulumi.StringPtrInput
	// Currently defaults to and only accepts the value: `ALL`.
	Scope pulumi.StringPtrInput
	// Criteria for applying a subscription filter policy to a selection of log groups. The only allowable criteria selector is `LogGroupName NOT IN []`.
	SelectionCriteria pulumi.StringPtrInput
}

func (LogAccountPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*logAccountPolicyState)(nil)).Elem()
}

type logAccountPolicyArgs struct {
	// Text of the account policy. Refer to the [AWS docs](https://docs.aws.amazon.com/cli/latest/reference/logs/put-account-policy.html) for more information.
	PolicyDocument string `pulumi:"policyDocument"`
	// Name of the account policy.
	PolicyName string `pulumi:"policyName"`
	// Type of account policy. Either `DATA_PROTECTION_POLICY` or `SUBSCRIPTION_FILTER_POLICY`. You can have one account policy per type in an account.
	PolicyType string `pulumi:"policyType"`
	// Currently defaults to and only accepts the value: `ALL`.
	Scope *string `pulumi:"scope"`
	// Criteria for applying a subscription filter policy to a selection of log groups. The only allowable criteria selector is `LogGroupName NOT IN []`.
	SelectionCriteria *string `pulumi:"selectionCriteria"`
}

// The set of arguments for constructing a LogAccountPolicy resource.
type LogAccountPolicyArgs struct {
	// Text of the account policy. Refer to the [AWS docs](https://docs.aws.amazon.com/cli/latest/reference/logs/put-account-policy.html) for more information.
	PolicyDocument pulumi.StringInput
	// Name of the account policy.
	PolicyName pulumi.StringInput
	// Type of account policy. Either `DATA_PROTECTION_POLICY` or `SUBSCRIPTION_FILTER_POLICY`. You can have one account policy per type in an account.
	PolicyType pulumi.StringInput
	// Currently defaults to and only accepts the value: `ALL`.
	Scope pulumi.StringPtrInput
	// Criteria for applying a subscription filter policy to a selection of log groups. The only allowable criteria selector is `LogGroupName NOT IN []`.
	SelectionCriteria pulumi.StringPtrInput
}

func (LogAccountPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logAccountPolicyArgs)(nil)).Elem()
}

type LogAccountPolicyInput interface {
	pulumi.Input

	ToLogAccountPolicyOutput() LogAccountPolicyOutput
	ToLogAccountPolicyOutputWithContext(ctx context.Context) LogAccountPolicyOutput
}

func (*LogAccountPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAccountPolicy)(nil)).Elem()
}

func (i *LogAccountPolicy) ToLogAccountPolicyOutput() LogAccountPolicyOutput {
	return i.ToLogAccountPolicyOutputWithContext(context.Background())
}

func (i *LogAccountPolicy) ToLogAccountPolicyOutputWithContext(ctx context.Context) LogAccountPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAccountPolicyOutput)
}

// LogAccountPolicyArrayInput is an input type that accepts LogAccountPolicyArray and LogAccountPolicyArrayOutput values.
// You can construct a concrete instance of `LogAccountPolicyArrayInput` via:
//
//	LogAccountPolicyArray{ LogAccountPolicyArgs{...} }
type LogAccountPolicyArrayInput interface {
	pulumi.Input

	ToLogAccountPolicyArrayOutput() LogAccountPolicyArrayOutput
	ToLogAccountPolicyArrayOutputWithContext(context.Context) LogAccountPolicyArrayOutput
}

type LogAccountPolicyArray []LogAccountPolicyInput

func (LogAccountPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogAccountPolicy)(nil)).Elem()
}

func (i LogAccountPolicyArray) ToLogAccountPolicyArrayOutput() LogAccountPolicyArrayOutput {
	return i.ToLogAccountPolicyArrayOutputWithContext(context.Background())
}

func (i LogAccountPolicyArray) ToLogAccountPolicyArrayOutputWithContext(ctx context.Context) LogAccountPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAccountPolicyArrayOutput)
}

// LogAccountPolicyMapInput is an input type that accepts LogAccountPolicyMap and LogAccountPolicyMapOutput values.
// You can construct a concrete instance of `LogAccountPolicyMapInput` via:
//
//	LogAccountPolicyMap{ "key": LogAccountPolicyArgs{...} }
type LogAccountPolicyMapInput interface {
	pulumi.Input

	ToLogAccountPolicyMapOutput() LogAccountPolicyMapOutput
	ToLogAccountPolicyMapOutputWithContext(context.Context) LogAccountPolicyMapOutput
}

type LogAccountPolicyMap map[string]LogAccountPolicyInput

func (LogAccountPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogAccountPolicy)(nil)).Elem()
}

func (i LogAccountPolicyMap) ToLogAccountPolicyMapOutput() LogAccountPolicyMapOutput {
	return i.ToLogAccountPolicyMapOutputWithContext(context.Background())
}

func (i LogAccountPolicyMap) ToLogAccountPolicyMapOutputWithContext(ctx context.Context) LogAccountPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAccountPolicyMapOutput)
}

type LogAccountPolicyOutput struct{ *pulumi.OutputState }

func (LogAccountPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAccountPolicy)(nil)).Elem()
}

func (o LogAccountPolicyOutput) ToLogAccountPolicyOutput() LogAccountPolicyOutput {
	return o
}

func (o LogAccountPolicyOutput) ToLogAccountPolicyOutputWithContext(ctx context.Context) LogAccountPolicyOutput {
	return o
}

// Text of the account policy. Refer to the [AWS docs](https://docs.aws.amazon.com/cli/latest/reference/logs/put-account-policy.html) for more information.
func (o LogAccountPolicyOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v *LogAccountPolicy) pulumi.StringOutput { return v.PolicyDocument }).(pulumi.StringOutput)
}

// Name of the account policy.
func (o LogAccountPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogAccountPolicy) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// Type of account policy. Either `DATA_PROTECTION_POLICY` or `SUBSCRIPTION_FILTER_POLICY`. You can have one account policy per type in an account.
func (o LogAccountPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *LogAccountPolicy) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

// Currently defaults to and only accepts the value: `ALL`.
func (o LogAccountPolicyOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAccountPolicy) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Criteria for applying a subscription filter policy to a selection of log groups. The only allowable criteria selector is `LogGroupName NOT IN []`.
func (o LogAccountPolicyOutput) SelectionCriteria() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAccountPolicy) pulumi.StringPtrOutput { return v.SelectionCriteria }).(pulumi.StringPtrOutput)
}

type LogAccountPolicyArrayOutput struct{ *pulumi.OutputState }

func (LogAccountPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogAccountPolicy)(nil)).Elem()
}

func (o LogAccountPolicyArrayOutput) ToLogAccountPolicyArrayOutput() LogAccountPolicyArrayOutput {
	return o
}

func (o LogAccountPolicyArrayOutput) ToLogAccountPolicyArrayOutputWithContext(ctx context.Context) LogAccountPolicyArrayOutput {
	return o
}

func (o LogAccountPolicyArrayOutput) Index(i pulumi.IntInput) LogAccountPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogAccountPolicy {
		return vs[0].([]*LogAccountPolicy)[vs[1].(int)]
	}).(LogAccountPolicyOutput)
}

type LogAccountPolicyMapOutput struct{ *pulumi.OutputState }

func (LogAccountPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogAccountPolicy)(nil)).Elem()
}

func (o LogAccountPolicyMapOutput) ToLogAccountPolicyMapOutput() LogAccountPolicyMapOutput {
	return o
}

func (o LogAccountPolicyMapOutput) ToLogAccountPolicyMapOutputWithContext(ctx context.Context) LogAccountPolicyMapOutput {
	return o
}

func (o LogAccountPolicyMapOutput) MapIndex(k pulumi.StringInput) LogAccountPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogAccountPolicy {
		return vs[0].(map[string]*LogAccountPolicy)[vs[1].(string)]
	}).(LogAccountPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogAccountPolicyInput)(nil)).Elem(), &LogAccountPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogAccountPolicyArrayInput)(nil)).Elem(), LogAccountPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogAccountPolicyMapInput)(nil)).Elem(), LogAccountPolicyMap{})
	pulumi.RegisterOutputType(LogAccountPolicyOutput{})
	pulumi.RegisterOutputType(LogAccountPolicyArrayOutput{})
	pulumi.RegisterOutputType(LogAccountPolicyMapOutput{})
}
