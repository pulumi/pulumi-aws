// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LogMetricFilter struct {
	pulumi.CustomResourceState

	LogGroupName         pulumi.StringOutput                       `pulumi:"logGroupName"`
	MetricTransformation LogMetricFilterMetricTransformationOutput `pulumi:"metricTransformation"`
	Name                 pulumi.StringOutput                       `pulumi:"name"`
	Pattern              pulumi.StringOutput                       `pulumi:"pattern"`
}

// NewLogMetricFilter registers a new resource with the given unique name, arguments, and options.
func NewLogMetricFilter(ctx *pulumi.Context,
	name string, args *LogMetricFilterArgs, opts ...pulumi.ResourceOption) (*LogMetricFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogGroupName == nil {
		return nil, errors.New("invalid value for required argument 'LogGroupName'")
	}
	if args.MetricTransformation == nil {
		return nil, errors.New("invalid value for required argument 'MetricTransformation'")
	}
	if args.Pattern == nil {
		return nil, errors.New("invalid value for required argument 'Pattern'")
	}
	var resource LogMetricFilter
	err := ctx.RegisterResource("aws:cloudwatch/logMetricFilter:LogMetricFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogMetricFilter gets an existing LogMetricFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogMetricFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogMetricFilterState, opts ...pulumi.ResourceOption) (*LogMetricFilter, error) {
	var resource LogMetricFilter
	err := ctx.ReadResource("aws:cloudwatch/logMetricFilter:LogMetricFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogMetricFilter resources.
type logMetricFilterState struct {
	LogGroupName         *string                              `pulumi:"logGroupName"`
	MetricTransformation *LogMetricFilterMetricTransformation `pulumi:"metricTransformation"`
	Name                 *string                              `pulumi:"name"`
	Pattern              *string                              `pulumi:"pattern"`
}

type LogMetricFilterState struct {
	LogGroupName         pulumi.StringPtrInput
	MetricTransformation LogMetricFilterMetricTransformationPtrInput
	Name                 pulumi.StringPtrInput
	Pattern              pulumi.StringPtrInput
}

func (LogMetricFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logMetricFilterState)(nil)).Elem()
}

type logMetricFilterArgs struct {
	LogGroupName         string                              `pulumi:"logGroupName"`
	MetricTransformation LogMetricFilterMetricTransformation `pulumi:"metricTransformation"`
	Name                 *string                             `pulumi:"name"`
	Pattern              string                              `pulumi:"pattern"`
}

// The set of arguments for constructing a LogMetricFilter resource.
type LogMetricFilterArgs struct {
	LogGroupName         pulumi.StringInput
	MetricTransformation LogMetricFilterMetricTransformationInput
	Name                 pulumi.StringPtrInput
	Pattern              pulumi.StringInput
}

func (LogMetricFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logMetricFilterArgs)(nil)).Elem()
}

type LogMetricFilterInput interface {
	pulumi.Input

	ToLogMetricFilterOutput() LogMetricFilterOutput
	ToLogMetricFilterOutputWithContext(ctx context.Context) LogMetricFilterOutput
}

func (*LogMetricFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricFilter)(nil)).Elem()
}

func (i *LogMetricFilter) ToLogMetricFilterOutput() LogMetricFilterOutput {
	return i.ToLogMetricFilterOutputWithContext(context.Background())
}

func (i *LogMetricFilter) ToLogMetricFilterOutputWithContext(ctx context.Context) LogMetricFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterOutput)
}

// LogMetricFilterArrayInput is an input type that accepts LogMetricFilterArray and LogMetricFilterArrayOutput values.
// You can construct a concrete instance of `LogMetricFilterArrayInput` via:
//
//	LogMetricFilterArray{ LogMetricFilterArgs{...} }
type LogMetricFilterArrayInput interface {
	pulumi.Input

	ToLogMetricFilterArrayOutput() LogMetricFilterArrayOutput
	ToLogMetricFilterArrayOutputWithContext(context.Context) LogMetricFilterArrayOutput
}

type LogMetricFilterArray []LogMetricFilterInput

func (LogMetricFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogMetricFilter)(nil)).Elem()
}

func (i LogMetricFilterArray) ToLogMetricFilterArrayOutput() LogMetricFilterArrayOutput {
	return i.ToLogMetricFilterArrayOutputWithContext(context.Background())
}

func (i LogMetricFilterArray) ToLogMetricFilterArrayOutputWithContext(ctx context.Context) LogMetricFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterArrayOutput)
}

// LogMetricFilterMapInput is an input type that accepts LogMetricFilterMap and LogMetricFilterMapOutput values.
// You can construct a concrete instance of `LogMetricFilterMapInput` via:
//
//	LogMetricFilterMap{ "key": LogMetricFilterArgs{...} }
type LogMetricFilterMapInput interface {
	pulumi.Input

	ToLogMetricFilterMapOutput() LogMetricFilterMapOutput
	ToLogMetricFilterMapOutputWithContext(context.Context) LogMetricFilterMapOutput
}

type LogMetricFilterMap map[string]LogMetricFilterInput

func (LogMetricFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogMetricFilter)(nil)).Elem()
}

func (i LogMetricFilterMap) ToLogMetricFilterMapOutput() LogMetricFilterMapOutput {
	return i.ToLogMetricFilterMapOutputWithContext(context.Background())
}

func (i LogMetricFilterMap) ToLogMetricFilterMapOutputWithContext(ctx context.Context) LogMetricFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMapOutput)
}

type LogMetricFilterOutput struct{ *pulumi.OutputState }

func (LogMetricFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricFilter)(nil)).Elem()
}

func (o LogMetricFilterOutput) ToLogMetricFilterOutput() LogMetricFilterOutput {
	return o
}

func (o LogMetricFilterOutput) ToLogMetricFilterOutputWithContext(ctx context.Context) LogMetricFilterOutput {
	return o
}

func (o LogMetricFilterOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogMetricFilter) pulumi.StringOutput { return v.LogGroupName }).(pulumi.StringOutput)
}

func (o LogMetricFilterOutput) MetricTransformation() LogMetricFilterMetricTransformationOutput {
	return o.ApplyT(func(v *LogMetricFilter) LogMetricFilterMetricTransformationOutput { return v.MetricTransformation }).(LogMetricFilterMetricTransformationOutput)
}

func (o LogMetricFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogMetricFilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LogMetricFilterOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v *LogMetricFilter) pulumi.StringOutput { return v.Pattern }).(pulumi.StringOutput)
}

type LogMetricFilterArrayOutput struct{ *pulumi.OutputState }

func (LogMetricFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogMetricFilter)(nil)).Elem()
}

func (o LogMetricFilterArrayOutput) ToLogMetricFilterArrayOutput() LogMetricFilterArrayOutput {
	return o
}

func (o LogMetricFilterArrayOutput) ToLogMetricFilterArrayOutputWithContext(ctx context.Context) LogMetricFilterArrayOutput {
	return o
}

func (o LogMetricFilterArrayOutput) Index(i pulumi.IntInput) LogMetricFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogMetricFilter {
		return vs[0].([]*LogMetricFilter)[vs[1].(int)]
	}).(LogMetricFilterOutput)
}

type LogMetricFilterMapOutput struct{ *pulumi.OutputState }

func (LogMetricFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogMetricFilter)(nil)).Elem()
}

func (o LogMetricFilterMapOutput) ToLogMetricFilterMapOutput() LogMetricFilterMapOutput {
	return o
}

func (o LogMetricFilterMapOutput) ToLogMetricFilterMapOutputWithContext(ctx context.Context) LogMetricFilterMapOutput {
	return o
}

func (o LogMetricFilterMapOutput) MapIndex(k pulumi.StringInput) LogMetricFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogMetricFilter {
		return vs[0].(map[string]*LogMetricFilter)[vs[1].(string)]
	}).(LogMetricFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogMetricFilterInput)(nil)).Elem(), &LogMetricFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogMetricFilterArrayInput)(nil)).Elem(), LogMetricFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogMetricFilterMapInput)(nil)).Elem(), LogMetricFilterMap{})
	pulumi.RegisterOutputType(LogMetricFilterOutput{})
	pulumi.RegisterOutputType(LogMetricFilterArrayOutput{})
	pulumi.RegisterOutputType(LogMetricFilterMapOutput{})
}
