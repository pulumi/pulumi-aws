// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventConnection struct {
	pulumi.CustomResourceState

	Arn               pulumi.StringOutput                 `pulumi:"arn"`
	AuthParameters    EventConnectionAuthParametersOutput `pulumi:"authParameters"`
	AuthorizationType pulumi.StringOutput                 `pulumi:"authorizationType"`
	Description       pulumi.StringPtrOutput              `pulumi:"description"`
	Name              pulumi.StringOutput                 `pulumi:"name"`
	SecretArn         pulumi.StringOutput                 `pulumi:"secretArn"`
}

// NewEventConnection registers a new resource with the given unique name, arguments, and options.
func NewEventConnection(ctx *pulumi.Context,
	name string, args *EventConnectionArgs, opts ...pulumi.ResourceOption) (*EventConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthParameters == nil {
		return nil, errors.New("invalid value for required argument 'AuthParameters'")
	}
	if args.AuthorizationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationType'")
	}
	var resource EventConnection
	err := ctx.RegisterResource("aws:cloudwatch/eventConnection:EventConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventConnection gets an existing EventConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventConnectionState, opts ...pulumi.ResourceOption) (*EventConnection, error) {
	var resource EventConnection
	err := ctx.ReadResource("aws:cloudwatch/eventConnection:EventConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventConnection resources.
type eventConnectionState struct {
	Arn               *string                        `pulumi:"arn"`
	AuthParameters    *EventConnectionAuthParameters `pulumi:"authParameters"`
	AuthorizationType *string                        `pulumi:"authorizationType"`
	Description       *string                        `pulumi:"description"`
	Name              *string                        `pulumi:"name"`
	SecretArn         *string                        `pulumi:"secretArn"`
}

type EventConnectionState struct {
	Arn               pulumi.StringPtrInput
	AuthParameters    EventConnectionAuthParametersPtrInput
	AuthorizationType pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	SecretArn         pulumi.StringPtrInput
}

func (EventConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventConnectionState)(nil)).Elem()
}

type eventConnectionArgs struct {
	AuthParameters    EventConnectionAuthParameters `pulumi:"authParameters"`
	AuthorizationType string                        `pulumi:"authorizationType"`
	Description       *string                       `pulumi:"description"`
	Name              *string                       `pulumi:"name"`
}

// The set of arguments for constructing a EventConnection resource.
type EventConnectionArgs struct {
	AuthParameters    EventConnectionAuthParametersInput
	AuthorizationType pulumi.StringInput
	Description       pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
}

func (EventConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventConnectionArgs)(nil)).Elem()
}

type EventConnectionInput interface {
	pulumi.Input

	ToEventConnectionOutput() EventConnectionOutput
	ToEventConnectionOutputWithContext(ctx context.Context) EventConnectionOutput
}

func (*EventConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**EventConnection)(nil)).Elem()
}

func (i *EventConnection) ToEventConnectionOutput() EventConnectionOutput {
	return i.ToEventConnectionOutputWithContext(context.Background())
}

func (i *EventConnection) ToEventConnectionOutputWithContext(ctx context.Context) EventConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionOutput)
}

// EventConnectionArrayInput is an input type that accepts EventConnectionArray and EventConnectionArrayOutput values.
// You can construct a concrete instance of `EventConnectionArrayInput` via:
//
//	EventConnectionArray{ EventConnectionArgs{...} }
type EventConnectionArrayInput interface {
	pulumi.Input

	ToEventConnectionArrayOutput() EventConnectionArrayOutput
	ToEventConnectionArrayOutputWithContext(context.Context) EventConnectionArrayOutput
}

type EventConnectionArray []EventConnectionInput

func (EventConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventConnection)(nil)).Elem()
}

func (i EventConnectionArray) ToEventConnectionArrayOutput() EventConnectionArrayOutput {
	return i.ToEventConnectionArrayOutputWithContext(context.Background())
}

func (i EventConnectionArray) ToEventConnectionArrayOutputWithContext(ctx context.Context) EventConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionArrayOutput)
}

// EventConnectionMapInput is an input type that accepts EventConnectionMap and EventConnectionMapOutput values.
// You can construct a concrete instance of `EventConnectionMapInput` via:
//
//	EventConnectionMap{ "key": EventConnectionArgs{...} }
type EventConnectionMapInput interface {
	pulumi.Input

	ToEventConnectionMapOutput() EventConnectionMapOutput
	ToEventConnectionMapOutputWithContext(context.Context) EventConnectionMapOutput
}

type EventConnectionMap map[string]EventConnectionInput

func (EventConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventConnection)(nil)).Elem()
}

func (i EventConnectionMap) ToEventConnectionMapOutput() EventConnectionMapOutput {
	return i.ToEventConnectionMapOutputWithContext(context.Background())
}

func (i EventConnectionMap) ToEventConnectionMapOutputWithContext(ctx context.Context) EventConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionMapOutput)
}

type EventConnectionOutput struct{ *pulumi.OutputState }

func (EventConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventConnection)(nil)).Elem()
}

func (o EventConnectionOutput) ToEventConnectionOutput() EventConnectionOutput {
	return o
}

func (o EventConnectionOutput) ToEventConnectionOutputWithContext(ctx context.Context) EventConnectionOutput {
	return o
}

func (o EventConnectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventConnection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EventConnectionOutput) AuthParameters() EventConnectionAuthParametersOutput {
	return o.ApplyT(func(v *EventConnection) EventConnectionAuthParametersOutput { return v.AuthParameters }).(EventConnectionAuthParametersOutput)
}

func (o EventConnectionOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v *EventConnection) pulumi.StringOutput { return v.AuthorizationType }).(pulumi.StringOutput)
}

func (o EventConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventConnection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o EventConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EventConnectionOutput) SecretArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventConnection) pulumi.StringOutput { return v.SecretArn }).(pulumi.StringOutput)
}

type EventConnectionArrayOutput struct{ *pulumi.OutputState }

func (EventConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventConnection)(nil)).Elem()
}

func (o EventConnectionArrayOutput) ToEventConnectionArrayOutput() EventConnectionArrayOutput {
	return o
}

func (o EventConnectionArrayOutput) ToEventConnectionArrayOutputWithContext(ctx context.Context) EventConnectionArrayOutput {
	return o
}

func (o EventConnectionArrayOutput) Index(i pulumi.IntInput) EventConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventConnection {
		return vs[0].([]*EventConnection)[vs[1].(int)]
	}).(EventConnectionOutput)
}

type EventConnectionMapOutput struct{ *pulumi.OutputState }

func (EventConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventConnection)(nil)).Elem()
}

func (o EventConnectionMapOutput) ToEventConnectionMapOutput() EventConnectionMapOutput {
	return o
}

func (o EventConnectionMapOutput) ToEventConnectionMapOutputWithContext(ctx context.Context) EventConnectionMapOutput {
	return o
}

func (o EventConnectionMapOutput) MapIndex(k pulumi.StringInput) EventConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventConnection {
		return vs[0].(map[string]*EventConnection)[vs[1].(string)]
	}).(EventConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventConnectionInput)(nil)).Elem(), &EventConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventConnectionArrayInput)(nil)).Elem(), EventConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventConnectionMapInput)(nil)).Elem(), EventConnectionMap{})
	pulumi.RegisterOutputType(EventConnectionOutput{})
	pulumi.RegisterOutputType(EventConnectionArrayOutput{})
	pulumi.RegisterOutputType(EventConnectionMapOutput{})
}
