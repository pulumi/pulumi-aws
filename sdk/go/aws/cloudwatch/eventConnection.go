// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an EventBridge connection resource.
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.NewEventConnection(ctx, "test", &cloudwatch.EventConnectionArgs{
//				Name:              pulumi.String("ngrok-connection"),
//				Description:       pulumi.String("A connection description"),
//				AuthorizationType: pulumi.String("API_KEY"),
//				AuthParameters: &cloudwatch.EventConnectionAuthParametersArgs{
//					ApiKey: &cloudwatch.EventConnectionAuthParametersApiKeyArgs{
//						Key:   pulumi.String("x-signature"),
//						Value: pulumi.String("1234"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Basic Authorization
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.NewEventConnection(ctx, "test", &cloudwatch.EventConnectionArgs{
//				Name:              pulumi.String("ngrok-connection"),
//				Description:       pulumi.String("A connection description"),
//				AuthorizationType: pulumi.String("BASIC"),
//				AuthParameters: &cloudwatch.EventConnectionAuthParametersArgs{
//					Basic: &cloudwatch.EventConnectionAuthParametersBasicArgs{
//						Username: pulumi.String("user"),
//						Password: pulumi.String("Pass1234!"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### OAuth Authorization
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.NewEventConnection(ctx, "test", &cloudwatch.EventConnectionArgs{
//				Name:              pulumi.String("ngrok-connection"),
//				Description:       pulumi.String("A connection description"),
//				AuthorizationType: pulumi.String("OAUTH_CLIENT_CREDENTIALS"),
//				AuthParameters: &cloudwatch.EventConnectionAuthParametersArgs{
//					Oauth: &cloudwatch.EventConnectionAuthParametersOauthArgs{
//						AuthorizationEndpoint: pulumi.String("https://auth.url.com/endpoint"),
//						HttpMethod:            pulumi.String("GET"),
//						ClientParameters: &cloudwatch.EventConnectionAuthParametersOauthClientParametersArgs{
//							ClientId:     pulumi.String("1234567890"),
//							ClientSecret: pulumi.String("Pass1234!"),
//						},
//						OauthHttpParameters: &cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersArgs{
//							Bodies: cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersBodyArray{
//								&cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersBodyArgs{
//									Key:           pulumi.String("body-parameter-key"),
//									Value:         pulumi.String("body-parameter-value"),
//									IsValueSecret: pulumi.Bool(false),
//								},
//							},
//							Headers: cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersHeaderArray{
//								&cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersHeaderArgs{
//									Key:           pulumi.String("header-parameter-key"),
//									Value:         pulumi.String("header-parameter-value"),
//									IsValueSecret: pulumi.Bool(false),
//								},
//							},
//							QueryStrings: cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersQueryStringArray{
//								&cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersQueryStringArgs{
//									Key:           pulumi.String("query-string-parameter-key"),
//									Value:         pulumi.String("query-string-parameter-value"),
//									IsValueSecret: pulumi.Bool(false),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Invocation Http Parameters
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.NewEventConnection(ctx, "test", &cloudwatch.EventConnectionArgs{
//				Name:              pulumi.String("ngrok-connection"),
//				Description:       pulumi.String("A connection description"),
//				AuthorizationType: pulumi.String("BASIC"),
//				AuthParameters: &cloudwatch.EventConnectionAuthParametersArgs{
//					Basic: &cloudwatch.EventConnectionAuthParametersBasicArgs{
//						Username: pulumi.String("user"),
//						Password: pulumi.String("Pass1234!"),
//					},
//					InvocationHttpParameters: &cloudwatch.EventConnectionAuthParametersInvocationHttpParametersArgs{
//						Bodies: cloudwatch.EventConnectionAuthParametersInvocationHttpParametersBodyArray{
//							&cloudwatch.EventConnectionAuthParametersInvocationHttpParametersBodyArgs{
//								Key:           pulumi.String("body-parameter-key"),
//								Value:         pulumi.String("body-parameter-value"),
//								IsValueSecret: pulumi.Bool(false),
//							},
//							&cloudwatch.EventConnectionAuthParametersInvocationHttpParametersBodyArgs{
//								Key:           pulumi.String("body-parameter-key2"),
//								Value:         pulumi.String("body-parameter-value2"),
//								IsValueSecret: pulumi.Bool(true),
//							},
//						},
//						Headers: cloudwatch.EventConnectionAuthParametersInvocationHttpParametersHeaderArray{
//							&cloudwatch.EventConnectionAuthParametersInvocationHttpParametersHeaderArgs{
//								Key:           pulumi.String("header-parameter-key"),
//								Value:         pulumi.String("header-parameter-value"),
//								IsValueSecret: pulumi.Bool(false),
//							},
//						},
//						QueryStrings: cloudwatch.EventConnectionAuthParametersInvocationHttpParametersQueryStringArray{
//							&cloudwatch.EventConnectionAuthParametersInvocationHttpParametersQueryStringArgs{
//								Key:           pulumi.String("query-string-parameter-key"),
//								Value:         pulumi.String("query-string-parameter-value"),
//								IsValueSecret: pulumi.Bool(false),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import EventBridge EventBridge connection using the `name`. For example:
//
// ```sh
//
//	$ pulumi import aws:cloudwatch/eventConnection:EventConnection test ngrok-connection
//
// ```
type EventConnection struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the connection.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
	AuthParameters EventConnectionAuthParametersOutput `pulumi:"authParameters"`
	// Choose the type of authorization to use for the connection. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
	AuthorizationType pulumi.StringOutput `pulumi:"authorizationType"`
	// Enter a description for the connection. Maximum of 512 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the new connection. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Amazon Resource Name (ARN) of the secret created from the authorization parameters specified for the connection.
	SecretArn pulumi.StringOutput `pulumi:"secretArn"`
}

// NewEventConnection registers a new resource with the given unique name, arguments, and options.
func NewEventConnection(ctx *pulumi.Context,
	name string, args *EventConnectionArgs, opts ...pulumi.ResourceOption) (*EventConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthParameters == nil {
		return nil, errors.New("invalid value for required argument 'AuthParameters'")
	}
	if args.AuthorizationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventConnection
	err := ctx.RegisterResource("aws:cloudwatch/eventConnection:EventConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventConnection gets an existing EventConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventConnectionState, opts ...pulumi.ResourceOption) (*EventConnection, error) {
	var resource EventConnection
	err := ctx.ReadResource("aws:cloudwatch/eventConnection:EventConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventConnection resources.
type eventConnectionState struct {
	// The Amazon Resource Name (ARN) of the connection.
	Arn *string `pulumi:"arn"`
	// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
	AuthParameters *EventConnectionAuthParameters `pulumi:"authParameters"`
	// Choose the type of authorization to use for the connection. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
	AuthorizationType *string `pulumi:"authorizationType"`
	// Enter a description for the connection. Maximum of 512 characters.
	Description *string `pulumi:"description"`
	// The name of the new connection. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
	Name *string `pulumi:"name"`
	// The Amazon Resource Name (ARN) of the secret created from the authorization parameters specified for the connection.
	SecretArn *string `pulumi:"secretArn"`
}

type EventConnectionState struct {
	// The Amazon Resource Name (ARN) of the connection.
	Arn pulumi.StringPtrInput
	// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
	AuthParameters EventConnectionAuthParametersPtrInput
	// Choose the type of authorization to use for the connection. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
	AuthorizationType pulumi.StringPtrInput
	// Enter a description for the connection. Maximum of 512 characters.
	Description pulumi.StringPtrInput
	// The name of the new connection. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
	Name pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the secret created from the authorization parameters specified for the connection.
	SecretArn pulumi.StringPtrInput
}

func (EventConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventConnectionState)(nil)).Elem()
}

type eventConnectionArgs struct {
	// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
	AuthParameters EventConnectionAuthParameters `pulumi:"authParameters"`
	// Choose the type of authorization to use for the connection. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
	AuthorizationType string `pulumi:"authorizationType"`
	// Enter a description for the connection. Maximum of 512 characters.
	Description *string `pulumi:"description"`
	// The name of the new connection. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a EventConnection resource.
type EventConnectionArgs struct {
	// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
	AuthParameters EventConnectionAuthParametersInput
	// Choose the type of authorization to use for the connection. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
	AuthorizationType pulumi.StringInput
	// Enter a description for the connection. Maximum of 512 characters.
	Description pulumi.StringPtrInput
	// The name of the new connection. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
	Name pulumi.StringPtrInput
}

func (EventConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventConnectionArgs)(nil)).Elem()
}

type EventConnectionInput interface {
	pulumi.Input

	ToEventConnectionOutput() EventConnectionOutput
	ToEventConnectionOutputWithContext(ctx context.Context) EventConnectionOutput
}

func (*EventConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**EventConnection)(nil)).Elem()
}

func (i *EventConnection) ToEventConnectionOutput() EventConnectionOutput {
	return i.ToEventConnectionOutputWithContext(context.Background())
}

func (i *EventConnection) ToEventConnectionOutputWithContext(ctx context.Context) EventConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionOutput)
}

// EventConnectionArrayInput is an input type that accepts EventConnectionArray and EventConnectionArrayOutput values.
// You can construct a concrete instance of `EventConnectionArrayInput` via:
//
//	EventConnectionArray{ EventConnectionArgs{...} }
type EventConnectionArrayInput interface {
	pulumi.Input

	ToEventConnectionArrayOutput() EventConnectionArrayOutput
	ToEventConnectionArrayOutputWithContext(context.Context) EventConnectionArrayOutput
}

type EventConnectionArray []EventConnectionInput

func (EventConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventConnection)(nil)).Elem()
}

func (i EventConnectionArray) ToEventConnectionArrayOutput() EventConnectionArrayOutput {
	return i.ToEventConnectionArrayOutputWithContext(context.Background())
}

func (i EventConnectionArray) ToEventConnectionArrayOutputWithContext(ctx context.Context) EventConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionArrayOutput)
}

// EventConnectionMapInput is an input type that accepts EventConnectionMap and EventConnectionMapOutput values.
// You can construct a concrete instance of `EventConnectionMapInput` via:
//
//	EventConnectionMap{ "key": EventConnectionArgs{...} }
type EventConnectionMapInput interface {
	pulumi.Input

	ToEventConnectionMapOutput() EventConnectionMapOutput
	ToEventConnectionMapOutputWithContext(context.Context) EventConnectionMapOutput
}

type EventConnectionMap map[string]EventConnectionInput

func (EventConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventConnection)(nil)).Elem()
}

func (i EventConnectionMap) ToEventConnectionMapOutput() EventConnectionMapOutput {
	return i.ToEventConnectionMapOutputWithContext(context.Background())
}

func (i EventConnectionMap) ToEventConnectionMapOutputWithContext(ctx context.Context) EventConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionMapOutput)
}

type EventConnectionOutput struct{ *pulumi.OutputState }

func (EventConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventConnection)(nil)).Elem()
}

func (o EventConnectionOutput) ToEventConnectionOutput() EventConnectionOutput {
	return o
}

func (o EventConnectionOutput) ToEventConnectionOutputWithContext(ctx context.Context) EventConnectionOutput {
	return o
}

// The Amazon Resource Name (ARN) of the connection.
func (o EventConnectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventConnection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
func (o EventConnectionOutput) AuthParameters() EventConnectionAuthParametersOutput {
	return o.ApplyT(func(v *EventConnection) EventConnectionAuthParametersOutput { return v.AuthParameters }).(EventConnectionAuthParametersOutput)
}

// Choose the type of authorization to use for the connection. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
func (o EventConnectionOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v *EventConnection) pulumi.StringOutput { return v.AuthorizationType }).(pulumi.StringOutput)
}

// Enter a description for the connection. Maximum of 512 characters.
func (o EventConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventConnection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the new connection. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
func (o EventConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the secret created from the authorization parameters specified for the connection.
func (o EventConnectionOutput) SecretArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventConnection) pulumi.StringOutput { return v.SecretArn }).(pulumi.StringOutput)
}

type EventConnectionArrayOutput struct{ *pulumi.OutputState }

func (EventConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventConnection)(nil)).Elem()
}

func (o EventConnectionArrayOutput) ToEventConnectionArrayOutput() EventConnectionArrayOutput {
	return o
}

func (o EventConnectionArrayOutput) ToEventConnectionArrayOutputWithContext(ctx context.Context) EventConnectionArrayOutput {
	return o
}

func (o EventConnectionArrayOutput) Index(i pulumi.IntInput) EventConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventConnection {
		return vs[0].([]*EventConnection)[vs[1].(int)]
	}).(EventConnectionOutput)
}

type EventConnectionMapOutput struct{ *pulumi.OutputState }

func (EventConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventConnection)(nil)).Elem()
}

func (o EventConnectionMapOutput) ToEventConnectionMapOutput() EventConnectionMapOutput {
	return o
}

func (o EventConnectionMapOutput) ToEventConnectionMapOutputWithContext(ctx context.Context) EventConnectionMapOutput {
	return o
}

func (o EventConnectionMapOutput) MapIndex(k pulumi.StringInput) EventConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventConnection {
		return vs[0].(map[string]*EventConnection)[vs[1].(string)]
	}).(EventConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventConnectionInput)(nil)).Elem(), &EventConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventConnectionArrayInput)(nil)).Elem(), EventConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventConnectionMapInput)(nil)).Elem(), EventConnectionMap{})
	pulumi.RegisterOutputType(EventConnectionOutput{})
	pulumi.RegisterOutputType(EventConnectionArrayOutput{})
	pulumi.RegisterOutputType(EventConnectionMapOutput{})
}
