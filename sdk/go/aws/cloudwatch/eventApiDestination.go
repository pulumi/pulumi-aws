// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventApiDestination struct {
	pulumi.CustomResourceState

	Arn                          pulumi.StringOutput    `pulumi:"arn"`
	ConnectionArn                pulumi.StringOutput    `pulumi:"connectionArn"`
	Description                  pulumi.StringPtrOutput `pulumi:"description"`
	HttpMethod                   pulumi.StringOutput    `pulumi:"httpMethod"`
	InvocationEndpoint           pulumi.StringOutput    `pulumi:"invocationEndpoint"`
	InvocationRateLimitPerSecond pulumi.IntPtrOutput    `pulumi:"invocationRateLimitPerSecond"`
	Name                         pulumi.StringOutput    `pulumi:"name"`
}

// NewEventApiDestination registers a new resource with the given unique name, arguments, and options.
func NewEventApiDestination(ctx *pulumi.Context,
	name string, args *EventApiDestinationArgs, opts ...pulumi.ResourceOption) (*EventApiDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionArn == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionArn'")
	}
	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.InvocationEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'InvocationEndpoint'")
	}
	var resource EventApiDestination
	err := ctx.RegisterResource("aws:cloudwatch/eventApiDestination:EventApiDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventApiDestination gets an existing EventApiDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventApiDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventApiDestinationState, opts ...pulumi.ResourceOption) (*EventApiDestination, error) {
	var resource EventApiDestination
	err := ctx.ReadResource("aws:cloudwatch/eventApiDestination:EventApiDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventApiDestination resources.
type eventApiDestinationState struct {
	Arn                          *string `pulumi:"arn"`
	ConnectionArn                *string `pulumi:"connectionArn"`
	Description                  *string `pulumi:"description"`
	HttpMethod                   *string `pulumi:"httpMethod"`
	InvocationEndpoint           *string `pulumi:"invocationEndpoint"`
	InvocationRateLimitPerSecond *int    `pulumi:"invocationRateLimitPerSecond"`
	Name                         *string `pulumi:"name"`
}

type EventApiDestinationState struct {
	Arn                          pulumi.StringPtrInput
	ConnectionArn                pulumi.StringPtrInput
	Description                  pulumi.StringPtrInput
	HttpMethod                   pulumi.StringPtrInput
	InvocationEndpoint           pulumi.StringPtrInput
	InvocationRateLimitPerSecond pulumi.IntPtrInput
	Name                         pulumi.StringPtrInput
}

func (EventApiDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventApiDestinationState)(nil)).Elem()
}

type eventApiDestinationArgs struct {
	ConnectionArn                string  `pulumi:"connectionArn"`
	Description                  *string `pulumi:"description"`
	HttpMethod                   string  `pulumi:"httpMethod"`
	InvocationEndpoint           string  `pulumi:"invocationEndpoint"`
	InvocationRateLimitPerSecond *int    `pulumi:"invocationRateLimitPerSecond"`
	Name                         *string `pulumi:"name"`
}

// The set of arguments for constructing a EventApiDestination resource.
type EventApiDestinationArgs struct {
	ConnectionArn                pulumi.StringInput
	Description                  pulumi.StringPtrInput
	HttpMethod                   pulumi.StringInput
	InvocationEndpoint           pulumi.StringInput
	InvocationRateLimitPerSecond pulumi.IntPtrInput
	Name                         pulumi.StringPtrInput
}

func (EventApiDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventApiDestinationArgs)(nil)).Elem()
}

type EventApiDestinationInput interface {
	pulumi.Input

	ToEventApiDestinationOutput() EventApiDestinationOutput
	ToEventApiDestinationOutputWithContext(ctx context.Context) EventApiDestinationOutput
}

func (*EventApiDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**EventApiDestination)(nil)).Elem()
}

func (i *EventApiDestination) ToEventApiDestinationOutput() EventApiDestinationOutput {
	return i.ToEventApiDestinationOutputWithContext(context.Background())
}

func (i *EventApiDestination) ToEventApiDestinationOutputWithContext(ctx context.Context) EventApiDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventApiDestinationOutput)
}

// EventApiDestinationArrayInput is an input type that accepts EventApiDestinationArray and EventApiDestinationArrayOutput values.
// You can construct a concrete instance of `EventApiDestinationArrayInput` via:
//
//	EventApiDestinationArray{ EventApiDestinationArgs{...} }
type EventApiDestinationArrayInput interface {
	pulumi.Input

	ToEventApiDestinationArrayOutput() EventApiDestinationArrayOutput
	ToEventApiDestinationArrayOutputWithContext(context.Context) EventApiDestinationArrayOutput
}

type EventApiDestinationArray []EventApiDestinationInput

func (EventApiDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventApiDestination)(nil)).Elem()
}

func (i EventApiDestinationArray) ToEventApiDestinationArrayOutput() EventApiDestinationArrayOutput {
	return i.ToEventApiDestinationArrayOutputWithContext(context.Background())
}

func (i EventApiDestinationArray) ToEventApiDestinationArrayOutputWithContext(ctx context.Context) EventApiDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventApiDestinationArrayOutput)
}

// EventApiDestinationMapInput is an input type that accepts EventApiDestinationMap and EventApiDestinationMapOutput values.
// You can construct a concrete instance of `EventApiDestinationMapInput` via:
//
//	EventApiDestinationMap{ "key": EventApiDestinationArgs{...} }
type EventApiDestinationMapInput interface {
	pulumi.Input

	ToEventApiDestinationMapOutput() EventApiDestinationMapOutput
	ToEventApiDestinationMapOutputWithContext(context.Context) EventApiDestinationMapOutput
}

type EventApiDestinationMap map[string]EventApiDestinationInput

func (EventApiDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventApiDestination)(nil)).Elem()
}

func (i EventApiDestinationMap) ToEventApiDestinationMapOutput() EventApiDestinationMapOutput {
	return i.ToEventApiDestinationMapOutputWithContext(context.Background())
}

func (i EventApiDestinationMap) ToEventApiDestinationMapOutputWithContext(ctx context.Context) EventApiDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventApiDestinationMapOutput)
}

type EventApiDestinationOutput struct{ *pulumi.OutputState }

func (EventApiDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventApiDestination)(nil)).Elem()
}

func (o EventApiDestinationOutput) ToEventApiDestinationOutput() EventApiDestinationOutput {
	return o
}

func (o EventApiDestinationOutput) ToEventApiDestinationOutputWithContext(ctx context.Context) EventApiDestinationOutput {
	return o
}

func (o EventApiDestinationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventApiDestination) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EventApiDestinationOutput) ConnectionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventApiDestination) pulumi.StringOutput { return v.ConnectionArn }).(pulumi.StringOutput)
}

func (o EventApiDestinationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventApiDestination) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o EventApiDestinationOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *EventApiDestination) pulumi.StringOutput { return v.HttpMethod }).(pulumi.StringOutput)
}

func (o EventApiDestinationOutput) InvocationEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *EventApiDestination) pulumi.StringOutput { return v.InvocationEndpoint }).(pulumi.StringOutput)
}

func (o EventApiDestinationOutput) InvocationRateLimitPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventApiDestination) pulumi.IntPtrOutput { return v.InvocationRateLimitPerSecond }).(pulumi.IntPtrOutput)
}

func (o EventApiDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventApiDestination) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type EventApiDestinationArrayOutput struct{ *pulumi.OutputState }

func (EventApiDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventApiDestination)(nil)).Elem()
}

func (o EventApiDestinationArrayOutput) ToEventApiDestinationArrayOutput() EventApiDestinationArrayOutput {
	return o
}

func (o EventApiDestinationArrayOutput) ToEventApiDestinationArrayOutputWithContext(ctx context.Context) EventApiDestinationArrayOutput {
	return o
}

func (o EventApiDestinationArrayOutput) Index(i pulumi.IntInput) EventApiDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventApiDestination {
		return vs[0].([]*EventApiDestination)[vs[1].(int)]
	}).(EventApiDestinationOutput)
}

type EventApiDestinationMapOutput struct{ *pulumi.OutputState }

func (EventApiDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventApiDestination)(nil)).Elem()
}

func (o EventApiDestinationMapOutput) ToEventApiDestinationMapOutput() EventApiDestinationMapOutput {
	return o
}

func (o EventApiDestinationMapOutput) ToEventApiDestinationMapOutputWithContext(ctx context.Context) EventApiDestinationMapOutput {
	return o
}

func (o EventApiDestinationMapOutput) MapIndex(k pulumi.StringInput) EventApiDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventApiDestination {
		return vs[0].(map[string]*EventApiDestination)[vs[1].(string)]
	}).(EventApiDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventApiDestinationInput)(nil)).Elem(), &EventApiDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventApiDestinationArrayInput)(nil)).Elem(), EventApiDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventApiDestinationMapInput)(nil)).Elem(), EventApiDestinationMap{})
	pulumi.RegisterOutputType(EventApiDestinationOutput{})
	pulumi.RegisterOutputType(EventApiDestinationArrayOutput{})
	pulumi.RegisterOutputType(EventApiDestinationMapOutput{})
}
