// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CompositeAlarm struct {
	pulumi.CustomResourceState

	ActionsEnabled          pulumi.BoolPtrOutput     `pulumi:"actionsEnabled"`
	AlarmActions            pulumi.StringArrayOutput `pulumi:"alarmActions"`
	AlarmDescription        pulumi.StringPtrOutput   `pulumi:"alarmDescription"`
	AlarmName               pulumi.StringOutput      `pulumi:"alarmName"`
	AlarmRule               pulumi.StringOutput      `pulumi:"alarmRule"`
	Arn                     pulumi.StringOutput      `pulumi:"arn"`
	InsufficientDataActions pulumi.StringArrayOutput `pulumi:"insufficientDataActions"`
	OkActions               pulumi.StringArrayOutput `pulumi:"okActions"`
	Tags                    pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll                 pulumi.StringMapOutput   `pulumi:"tagsAll"`
}

// NewCompositeAlarm registers a new resource with the given unique name, arguments, and options.
func NewCompositeAlarm(ctx *pulumi.Context,
	name string, args *CompositeAlarmArgs, opts ...pulumi.ResourceOption) (*CompositeAlarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlarmName == nil {
		return nil, errors.New("invalid value for required argument 'AlarmName'")
	}
	if args.AlarmRule == nil {
		return nil, errors.New("invalid value for required argument 'AlarmRule'")
	}
	var resource CompositeAlarm
	err := ctx.RegisterResource("aws:cloudwatch/compositeAlarm:CompositeAlarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCompositeAlarm gets an existing CompositeAlarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCompositeAlarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CompositeAlarmState, opts ...pulumi.ResourceOption) (*CompositeAlarm, error) {
	var resource CompositeAlarm
	err := ctx.ReadResource("aws:cloudwatch/compositeAlarm:CompositeAlarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CompositeAlarm resources.
type compositeAlarmState struct {
	ActionsEnabled          *bool             `pulumi:"actionsEnabled"`
	AlarmActions            []string          `pulumi:"alarmActions"`
	AlarmDescription        *string           `pulumi:"alarmDescription"`
	AlarmName               *string           `pulumi:"alarmName"`
	AlarmRule               *string           `pulumi:"alarmRule"`
	Arn                     *string           `pulumi:"arn"`
	InsufficientDataActions []string          `pulumi:"insufficientDataActions"`
	OkActions               []string          `pulumi:"okActions"`
	Tags                    map[string]string `pulumi:"tags"`
	TagsAll                 map[string]string `pulumi:"tagsAll"`
}

type CompositeAlarmState struct {
	ActionsEnabled          pulumi.BoolPtrInput
	AlarmActions            pulumi.StringArrayInput
	AlarmDescription        pulumi.StringPtrInput
	AlarmName               pulumi.StringPtrInput
	AlarmRule               pulumi.StringPtrInput
	Arn                     pulumi.StringPtrInput
	InsufficientDataActions pulumi.StringArrayInput
	OkActions               pulumi.StringArrayInput
	Tags                    pulumi.StringMapInput
	TagsAll                 pulumi.StringMapInput
}

func (CompositeAlarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*compositeAlarmState)(nil)).Elem()
}

type compositeAlarmArgs struct {
	ActionsEnabled          *bool             `pulumi:"actionsEnabled"`
	AlarmActions            []string          `pulumi:"alarmActions"`
	AlarmDescription        *string           `pulumi:"alarmDescription"`
	AlarmName               string            `pulumi:"alarmName"`
	AlarmRule               string            `pulumi:"alarmRule"`
	InsufficientDataActions []string          `pulumi:"insufficientDataActions"`
	OkActions               []string          `pulumi:"okActions"`
	Tags                    map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a CompositeAlarm resource.
type CompositeAlarmArgs struct {
	ActionsEnabled          pulumi.BoolPtrInput
	AlarmActions            pulumi.StringArrayInput
	AlarmDescription        pulumi.StringPtrInput
	AlarmName               pulumi.StringInput
	AlarmRule               pulumi.StringInput
	InsufficientDataActions pulumi.StringArrayInput
	OkActions               pulumi.StringArrayInput
	Tags                    pulumi.StringMapInput
}

func (CompositeAlarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*compositeAlarmArgs)(nil)).Elem()
}

type CompositeAlarmInput interface {
	pulumi.Input

	ToCompositeAlarmOutput() CompositeAlarmOutput
	ToCompositeAlarmOutputWithContext(ctx context.Context) CompositeAlarmOutput
}

func (*CompositeAlarm) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositeAlarm)(nil)).Elem()
}

func (i *CompositeAlarm) ToCompositeAlarmOutput() CompositeAlarmOutput {
	return i.ToCompositeAlarmOutputWithContext(context.Background())
}

func (i *CompositeAlarm) ToCompositeAlarmOutputWithContext(ctx context.Context) CompositeAlarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositeAlarmOutput)
}

// CompositeAlarmArrayInput is an input type that accepts CompositeAlarmArray and CompositeAlarmArrayOutput values.
// You can construct a concrete instance of `CompositeAlarmArrayInput` via:
//
//	CompositeAlarmArray{ CompositeAlarmArgs{...} }
type CompositeAlarmArrayInput interface {
	pulumi.Input

	ToCompositeAlarmArrayOutput() CompositeAlarmArrayOutput
	ToCompositeAlarmArrayOutputWithContext(context.Context) CompositeAlarmArrayOutput
}

type CompositeAlarmArray []CompositeAlarmInput

func (CompositeAlarmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CompositeAlarm)(nil)).Elem()
}

func (i CompositeAlarmArray) ToCompositeAlarmArrayOutput() CompositeAlarmArrayOutput {
	return i.ToCompositeAlarmArrayOutputWithContext(context.Background())
}

func (i CompositeAlarmArray) ToCompositeAlarmArrayOutputWithContext(ctx context.Context) CompositeAlarmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositeAlarmArrayOutput)
}

// CompositeAlarmMapInput is an input type that accepts CompositeAlarmMap and CompositeAlarmMapOutput values.
// You can construct a concrete instance of `CompositeAlarmMapInput` via:
//
//	CompositeAlarmMap{ "key": CompositeAlarmArgs{...} }
type CompositeAlarmMapInput interface {
	pulumi.Input

	ToCompositeAlarmMapOutput() CompositeAlarmMapOutput
	ToCompositeAlarmMapOutputWithContext(context.Context) CompositeAlarmMapOutput
}

type CompositeAlarmMap map[string]CompositeAlarmInput

func (CompositeAlarmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CompositeAlarm)(nil)).Elem()
}

func (i CompositeAlarmMap) ToCompositeAlarmMapOutput() CompositeAlarmMapOutput {
	return i.ToCompositeAlarmMapOutputWithContext(context.Background())
}

func (i CompositeAlarmMap) ToCompositeAlarmMapOutputWithContext(ctx context.Context) CompositeAlarmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositeAlarmMapOutput)
}

type CompositeAlarmOutput struct{ *pulumi.OutputState }

func (CompositeAlarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompositeAlarm)(nil)).Elem()
}

func (o CompositeAlarmOutput) ToCompositeAlarmOutput() CompositeAlarmOutput {
	return o
}

func (o CompositeAlarmOutput) ToCompositeAlarmOutputWithContext(ctx context.Context) CompositeAlarmOutput {
	return o
}

func (o CompositeAlarmOutput) ActionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CompositeAlarm) pulumi.BoolPtrOutput { return v.ActionsEnabled }).(pulumi.BoolPtrOutput)
}

func (o CompositeAlarmOutput) AlarmActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CompositeAlarm) pulumi.StringArrayOutput { return v.AlarmActions }).(pulumi.StringArrayOutput)
}

func (o CompositeAlarmOutput) AlarmDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompositeAlarm) pulumi.StringPtrOutput { return v.AlarmDescription }).(pulumi.StringPtrOutput)
}

func (o CompositeAlarmOutput) AlarmName() pulumi.StringOutput {
	return o.ApplyT(func(v *CompositeAlarm) pulumi.StringOutput { return v.AlarmName }).(pulumi.StringOutput)
}

func (o CompositeAlarmOutput) AlarmRule() pulumi.StringOutput {
	return o.ApplyT(func(v *CompositeAlarm) pulumi.StringOutput { return v.AlarmRule }).(pulumi.StringOutput)
}

func (o CompositeAlarmOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CompositeAlarm) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CompositeAlarmOutput) InsufficientDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CompositeAlarm) pulumi.StringArrayOutput { return v.InsufficientDataActions }).(pulumi.StringArrayOutput)
}

func (o CompositeAlarmOutput) OkActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CompositeAlarm) pulumi.StringArrayOutput { return v.OkActions }).(pulumi.StringArrayOutput)
}

func (o CompositeAlarmOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CompositeAlarm) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o CompositeAlarmOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CompositeAlarm) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type CompositeAlarmArrayOutput struct{ *pulumi.OutputState }

func (CompositeAlarmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CompositeAlarm)(nil)).Elem()
}

func (o CompositeAlarmArrayOutput) ToCompositeAlarmArrayOutput() CompositeAlarmArrayOutput {
	return o
}

func (o CompositeAlarmArrayOutput) ToCompositeAlarmArrayOutputWithContext(ctx context.Context) CompositeAlarmArrayOutput {
	return o
}

func (o CompositeAlarmArrayOutput) Index(i pulumi.IntInput) CompositeAlarmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CompositeAlarm {
		return vs[0].([]*CompositeAlarm)[vs[1].(int)]
	}).(CompositeAlarmOutput)
}

type CompositeAlarmMapOutput struct{ *pulumi.OutputState }

func (CompositeAlarmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CompositeAlarm)(nil)).Elem()
}

func (o CompositeAlarmMapOutput) ToCompositeAlarmMapOutput() CompositeAlarmMapOutput {
	return o
}

func (o CompositeAlarmMapOutput) ToCompositeAlarmMapOutputWithContext(ctx context.Context) CompositeAlarmMapOutput {
	return o
}

func (o CompositeAlarmMapOutput) MapIndex(k pulumi.StringInput) CompositeAlarmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CompositeAlarm {
		return vs[0].(map[string]*CompositeAlarm)[vs[1].(string)]
	}).(CompositeAlarmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CompositeAlarmInput)(nil)).Elem(), &CompositeAlarm{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompositeAlarmArrayInput)(nil)).Elem(), CompositeAlarmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompositeAlarmMapInput)(nil)).Elem(), CompositeAlarmMap{})
	pulumi.RegisterOutputType(CompositeAlarmOutput{})
	pulumi.RegisterOutputType(CompositeAlarmArrayOutput{})
	pulumi.RegisterOutputType(CompositeAlarmMapOutput{})
}
