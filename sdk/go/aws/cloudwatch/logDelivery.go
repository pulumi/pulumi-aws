// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS CloudWatch Logs Delivery. A delivery is a connection between an `cloudwatch.LogDeliverySource` and an `cloudwatch.LogDeliveryDestination`.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.NewLogDelivery(ctx, "example", &cloudwatch.LogDeliveryArgs{
//				DeliverySourceName:     pulumi.Any(exampleAwsCloudwatchLogDeliverySource.Name),
//				DeliveryDestinationArn: pulumi.Any(exampleAwsCloudwatchLogDeliveryDestination.Arn),
//				FieldDelimiter:         pulumi.String(","),
//				RecordFields: pulumi.StringArray{
//					pulumi.String("event_timestamp"),
//					pulumi.String("event"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import CloudWatch Logs Delivery using the `id`. For example:
//
// ```sh
// $ pulumi import aws:cloudwatch/logDelivery:LogDelivery example jsoGVi4Zq8VlYp9n
// ```
type LogDelivery struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the delivery.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ARN of the delivery destination to use for this delivery.
	DeliveryDestinationArn pulumi.StringOutput `pulumi:"deliveryDestinationArn"`
	// The name of the delivery source to use for this delivery.
	DeliverySourceName pulumi.StringOutput `pulumi:"deliverySourceName"`
	// The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
	FieldDelimiter pulumi.StringOutput `pulumi:"fieldDelimiter"`
	// The list of record fields to be delivered to the destination, in order.
	RecordFields pulumi.StringArrayOutput `pulumi:"recordFields"`
	// Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
	S3DeliveryConfigurations LogDeliveryS3DeliveryConfigurationArrayOutput `pulumi:"s3DeliveryConfigurations"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewLogDelivery registers a new resource with the given unique name, arguments, and options.
func NewLogDelivery(ctx *pulumi.Context,
	name string, args *LogDeliveryArgs, opts ...pulumi.ResourceOption) (*LogDelivery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeliveryDestinationArn == nil {
		return nil, errors.New("invalid value for required argument 'DeliveryDestinationArn'")
	}
	if args.DeliverySourceName == nil {
		return nil, errors.New("invalid value for required argument 'DeliverySourceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogDelivery
	err := ctx.RegisterResource("aws:cloudwatch/logDelivery:LogDelivery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogDelivery gets an existing LogDelivery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogDelivery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogDeliveryState, opts ...pulumi.ResourceOption) (*LogDelivery, error) {
	var resource LogDelivery
	err := ctx.ReadResource("aws:cloudwatch/logDelivery:LogDelivery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogDelivery resources.
type logDeliveryState struct {
	// The Amazon Resource Name (ARN) of the delivery.
	Arn *string `pulumi:"arn"`
	// The ARN of the delivery destination to use for this delivery.
	DeliveryDestinationArn *string `pulumi:"deliveryDestinationArn"`
	// The name of the delivery source to use for this delivery.
	DeliverySourceName *string `pulumi:"deliverySourceName"`
	// The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The list of record fields to be delivered to the destination, in order.
	RecordFields []string `pulumi:"recordFields"`
	// Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
	S3DeliveryConfigurations []LogDeliveryS3DeliveryConfiguration `pulumi:"s3DeliveryConfigurations"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LogDeliveryState struct {
	// The Amazon Resource Name (ARN) of the delivery.
	Arn pulumi.StringPtrInput
	// The ARN of the delivery destination to use for this delivery.
	DeliveryDestinationArn pulumi.StringPtrInput
	// The name of the delivery source to use for this delivery.
	DeliverySourceName pulumi.StringPtrInput
	// The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
	FieldDelimiter pulumi.StringPtrInput
	// The list of record fields to be delivered to the destination, in order.
	RecordFields pulumi.StringArrayInput
	// Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
	S3DeliveryConfigurations LogDeliveryS3DeliveryConfigurationArrayInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (LogDeliveryState) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliveryState)(nil)).Elem()
}

type logDeliveryArgs struct {
	// The ARN of the delivery destination to use for this delivery.
	DeliveryDestinationArn string `pulumi:"deliveryDestinationArn"`
	// The name of the delivery source to use for this delivery.
	DeliverySourceName string `pulumi:"deliverySourceName"`
	// The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The list of record fields to be delivered to the destination, in order.
	RecordFields []string `pulumi:"recordFields"`
	// Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
	S3DeliveryConfigurations []LogDeliveryS3DeliveryConfiguration `pulumi:"s3DeliveryConfigurations"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LogDelivery resource.
type LogDeliveryArgs struct {
	// The ARN of the delivery destination to use for this delivery.
	DeliveryDestinationArn pulumi.StringInput
	// The name of the delivery source to use for this delivery.
	DeliverySourceName pulumi.StringInput
	// The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
	FieldDelimiter pulumi.StringPtrInput
	// The list of record fields to be delivered to the destination, in order.
	RecordFields pulumi.StringArrayInput
	// Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
	S3DeliveryConfigurations LogDeliveryS3DeliveryConfigurationArrayInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (LogDeliveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliveryArgs)(nil)).Elem()
}

type LogDeliveryInput interface {
	pulumi.Input

	ToLogDeliveryOutput() LogDeliveryOutput
	ToLogDeliveryOutputWithContext(ctx context.Context) LogDeliveryOutput
}

func (*LogDelivery) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDelivery)(nil)).Elem()
}

func (i *LogDelivery) ToLogDeliveryOutput() LogDeliveryOutput {
	return i.ToLogDeliveryOutputWithContext(context.Background())
}

func (i *LogDelivery) ToLogDeliveryOutputWithContext(ctx context.Context) LogDeliveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryOutput)
}

// LogDeliveryArrayInput is an input type that accepts LogDeliveryArray and LogDeliveryArrayOutput values.
// You can construct a concrete instance of `LogDeliveryArrayInput` via:
//
//	LogDeliveryArray{ LogDeliveryArgs{...} }
type LogDeliveryArrayInput interface {
	pulumi.Input

	ToLogDeliveryArrayOutput() LogDeliveryArrayOutput
	ToLogDeliveryArrayOutputWithContext(context.Context) LogDeliveryArrayOutput
}

type LogDeliveryArray []LogDeliveryInput

func (LogDeliveryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDelivery)(nil)).Elem()
}

func (i LogDeliveryArray) ToLogDeliveryArrayOutput() LogDeliveryArrayOutput {
	return i.ToLogDeliveryArrayOutputWithContext(context.Background())
}

func (i LogDeliveryArray) ToLogDeliveryArrayOutputWithContext(ctx context.Context) LogDeliveryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryArrayOutput)
}

// LogDeliveryMapInput is an input type that accepts LogDeliveryMap and LogDeliveryMapOutput values.
// You can construct a concrete instance of `LogDeliveryMapInput` via:
//
//	LogDeliveryMap{ "key": LogDeliveryArgs{...} }
type LogDeliveryMapInput interface {
	pulumi.Input

	ToLogDeliveryMapOutput() LogDeliveryMapOutput
	ToLogDeliveryMapOutputWithContext(context.Context) LogDeliveryMapOutput
}

type LogDeliveryMap map[string]LogDeliveryInput

func (LogDeliveryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDelivery)(nil)).Elem()
}

func (i LogDeliveryMap) ToLogDeliveryMapOutput() LogDeliveryMapOutput {
	return i.ToLogDeliveryMapOutputWithContext(context.Background())
}

func (i LogDeliveryMap) ToLogDeliveryMapOutputWithContext(ctx context.Context) LogDeliveryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryMapOutput)
}

type LogDeliveryOutput struct{ *pulumi.OutputState }

func (LogDeliveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDelivery)(nil)).Elem()
}

func (o LogDeliveryOutput) ToLogDeliveryOutput() LogDeliveryOutput {
	return o
}

func (o LogDeliveryOutput) ToLogDeliveryOutputWithContext(ctx context.Context) LogDeliveryOutput {
	return o
}

// The Amazon Resource Name (ARN) of the delivery.
func (o LogDeliveryOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ARN of the delivery destination to use for this delivery.
func (o LogDeliveryOutput) DeliveryDestinationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringOutput { return v.DeliveryDestinationArn }).(pulumi.StringOutput)
}

// The name of the delivery source to use for this delivery.
func (o LogDeliveryOutput) DeliverySourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringOutput { return v.DeliverySourceName }).(pulumi.StringOutput)
}

// The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
func (o LogDeliveryOutput) FieldDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringOutput { return v.FieldDelimiter }).(pulumi.StringOutput)
}

// The list of record fields to be delivered to the destination, in order.
func (o LogDeliveryOutput) RecordFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringArrayOutput { return v.RecordFields }).(pulumi.StringArrayOutput)
}

// Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
func (o LogDeliveryOutput) S3DeliveryConfigurations() LogDeliveryS3DeliveryConfigurationArrayOutput {
	return o.ApplyT(func(v *LogDelivery) LogDeliveryS3DeliveryConfigurationArrayOutput { return v.S3DeliveryConfigurations }).(LogDeliveryS3DeliveryConfigurationArrayOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LogDeliveryOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o LogDeliveryOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LogDeliveryArrayOutput struct{ *pulumi.OutputState }

func (LogDeliveryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDelivery)(nil)).Elem()
}

func (o LogDeliveryArrayOutput) ToLogDeliveryArrayOutput() LogDeliveryArrayOutput {
	return o
}

func (o LogDeliveryArrayOutput) ToLogDeliveryArrayOutputWithContext(ctx context.Context) LogDeliveryArrayOutput {
	return o
}

func (o LogDeliveryArrayOutput) Index(i pulumi.IntInput) LogDeliveryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogDelivery {
		return vs[0].([]*LogDelivery)[vs[1].(int)]
	}).(LogDeliveryOutput)
}

type LogDeliveryMapOutput struct{ *pulumi.OutputState }

func (LogDeliveryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDelivery)(nil)).Elem()
}

func (o LogDeliveryMapOutput) ToLogDeliveryMapOutput() LogDeliveryMapOutput {
	return o
}

func (o LogDeliveryMapOutput) ToLogDeliveryMapOutputWithContext(ctx context.Context) LogDeliveryMapOutput {
	return o
}

func (o LogDeliveryMapOutput) MapIndex(k pulumi.StringInput) LogDeliveryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogDelivery {
		return vs[0].(map[string]*LogDelivery)[vs[1].(string)]
	}).(LogDeliveryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryInput)(nil)).Elem(), &LogDelivery{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryArrayInput)(nil)).Elem(), LogDeliveryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryMapInput)(nil)).Elem(), LogDeliveryMap{})
	pulumi.RegisterOutputType(LogDeliveryOutput{})
	pulumi.RegisterOutputType(LogDeliveryArrayOutput{})
	pulumi.RegisterOutputType(LogDeliveryMapOutput{})
}
