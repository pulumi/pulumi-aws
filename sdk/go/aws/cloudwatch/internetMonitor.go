// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Internet Monitor Monitor resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.NewInternetMonitor(ctx, "example", &cloudwatch.InternetMonitorArgs{
//				MonitorName: pulumi.String("exmple"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Internet Monitor Monitors using the `monitor_name`. For example:
//
// ```sh
//
//	$ pulumi import aws:cloudwatch/internetMonitor:InternetMonitor some some-monitor
//
// ```
type InternetMonitor struct {
	pulumi.CustomResourceState

	// ARN of the Monitor.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
	HealthEventsConfig InternetMonitorHealthEventsConfigPtrOutput `pulumi:"healthEventsConfig"`
	// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
	InternetMeasurementsLogDelivery InternetMonitorInternetMeasurementsLogDeliveryPtrOutput `pulumi:"internetMeasurementsLogDelivery"`
	// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
	MaxCityNetworksToMonitor pulumi.IntPtrOutput `pulumi:"maxCityNetworksToMonitor"`
	// The name of the monitor.
	//
	// The following arguments are optional:
	MonitorName pulumi.StringOutput `pulumi:"monitorName"`
	// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
	Resources pulumi.StringArrayOutput `pulumi:"resources"`
	// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
	TrafficPercentageToMonitor pulumi.IntPtrOutput `pulumi:"trafficPercentageToMonitor"`
}

// NewInternetMonitor registers a new resource with the given unique name, arguments, and options.
func NewInternetMonitor(ctx *pulumi.Context,
	name string, args *InternetMonitorArgs, opts ...pulumi.ResourceOption) (*InternetMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorName == nil {
		return nil, errors.New("invalid value for required argument 'MonitorName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InternetMonitor
	err := ctx.RegisterResource("aws:cloudwatch/internetMonitor:InternetMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInternetMonitor gets an existing InternetMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInternetMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InternetMonitorState, opts ...pulumi.ResourceOption) (*InternetMonitor, error) {
	var resource InternetMonitor
	err := ctx.ReadResource("aws:cloudwatch/internetMonitor:InternetMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InternetMonitor resources.
type internetMonitorState struct {
	// ARN of the Monitor.
	Arn *string `pulumi:"arn"`
	// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
	HealthEventsConfig *InternetMonitorHealthEventsConfig `pulumi:"healthEventsConfig"`
	// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
	InternetMeasurementsLogDelivery *InternetMonitorInternetMeasurementsLogDelivery `pulumi:"internetMeasurementsLogDelivery"`
	// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
	MaxCityNetworksToMonitor *int `pulumi:"maxCityNetworksToMonitor"`
	// The name of the monitor.
	//
	// The following arguments are optional:
	MonitorName *string `pulumi:"monitorName"`
	// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
	Resources []string `pulumi:"resources"`
	// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
	Status *string `pulumi:"status"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
	TrafficPercentageToMonitor *int `pulumi:"trafficPercentageToMonitor"`
}

type InternetMonitorState struct {
	// ARN of the Monitor.
	Arn pulumi.StringPtrInput
	// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
	HealthEventsConfig InternetMonitorHealthEventsConfigPtrInput
	// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
	InternetMeasurementsLogDelivery InternetMonitorInternetMeasurementsLogDeliveryPtrInput
	// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
	MaxCityNetworksToMonitor pulumi.IntPtrInput
	// The name of the monitor.
	//
	// The following arguments are optional:
	MonitorName pulumi.StringPtrInput
	// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
	Resources pulumi.StringArrayInput
	// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
	Status pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
	TrafficPercentageToMonitor pulumi.IntPtrInput
}

func (InternetMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*internetMonitorState)(nil)).Elem()
}

type internetMonitorArgs struct {
	// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
	HealthEventsConfig *InternetMonitorHealthEventsConfig `pulumi:"healthEventsConfig"`
	// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
	InternetMeasurementsLogDelivery *InternetMonitorInternetMeasurementsLogDelivery `pulumi:"internetMeasurementsLogDelivery"`
	// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
	MaxCityNetworksToMonitor *int `pulumi:"maxCityNetworksToMonitor"`
	// The name of the monitor.
	//
	// The following arguments are optional:
	MonitorName string `pulumi:"monitorName"`
	// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
	Resources []string `pulumi:"resources"`
	// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
	Status *string `pulumi:"status"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
	TrafficPercentageToMonitor *int `pulumi:"trafficPercentageToMonitor"`
}

// The set of arguments for constructing a InternetMonitor resource.
type InternetMonitorArgs struct {
	// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
	HealthEventsConfig InternetMonitorHealthEventsConfigPtrInput
	// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
	InternetMeasurementsLogDelivery InternetMonitorInternetMeasurementsLogDeliveryPtrInput
	// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
	MaxCityNetworksToMonitor pulumi.IntPtrInput
	// The name of the monitor.
	//
	// The following arguments are optional:
	MonitorName pulumi.StringInput
	// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
	Resources pulumi.StringArrayInput
	// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
	Status pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
	TrafficPercentageToMonitor pulumi.IntPtrInput
}

func (InternetMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*internetMonitorArgs)(nil)).Elem()
}

type InternetMonitorInput interface {
	pulumi.Input

	ToInternetMonitorOutput() InternetMonitorOutput
	ToInternetMonitorOutputWithContext(ctx context.Context) InternetMonitorOutput
}

func (*InternetMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**InternetMonitor)(nil)).Elem()
}

func (i *InternetMonitor) ToInternetMonitorOutput() InternetMonitorOutput {
	return i.ToInternetMonitorOutputWithContext(context.Background())
}

func (i *InternetMonitor) ToInternetMonitorOutputWithContext(ctx context.Context) InternetMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetMonitorOutput)
}

// InternetMonitorArrayInput is an input type that accepts InternetMonitorArray and InternetMonitorArrayOutput values.
// You can construct a concrete instance of `InternetMonitorArrayInput` via:
//
//	InternetMonitorArray{ InternetMonitorArgs{...} }
type InternetMonitorArrayInput interface {
	pulumi.Input

	ToInternetMonitorArrayOutput() InternetMonitorArrayOutput
	ToInternetMonitorArrayOutputWithContext(context.Context) InternetMonitorArrayOutput
}

type InternetMonitorArray []InternetMonitorInput

func (InternetMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternetMonitor)(nil)).Elem()
}

func (i InternetMonitorArray) ToInternetMonitorArrayOutput() InternetMonitorArrayOutput {
	return i.ToInternetMonitorArrayOutputWithContext(context.Background())
}

func (i InternetMonitorArray) ToInternetMonitorArrayOutputWithContext(ctx context.Context) InternetMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetMonitorArrayOutput)
}

// InternetMonitorMapInput is an input type that accepts InternetMonitorMap and InternetMonitorMapOutput values.
// You can construct a concrete instance of `InternetMonitorMapInput` via:
//
//	InternetMonitorMap{ "key": InternetMonitorArgs{...} }
type InternetMonitorMapInput interface {
	pulumi.Input

	ToInternetMonitorMapOutput() InternetMonitorMapOutput
	ToInternetMonitorMapOutputWithContext(context.Context) InternetMonitorMapOutput
}

type InternetMonitorMap map[string]InternetMonitorInput

func (InternetMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternetMonitor)(nil)).Elem()
}

func (i InternetMonitorMap) ToInternetMonitorMapOutput() InternetMonitorMapOutput {
	return i.ToInternetMonitorMapOutputWithContext(context.Background())
}

func (i InternetMonitorMap) ToInternetMonitorMapOutputWithContext(ctx context.Context) InternetMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetMonitorMapOutput)
}

type InternetMonitorOutput struct{ *pulumi.OutputState }

func (InternetMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternetMonitor)(nil)).Elem()
}

func (o InternetMonitorOutput) ToInternetMonitorOutput() InternetMonitorOutput {
	return o
}

func (o InternetMonitorOutput) ToInternetMonitorOutputWithContext(ctx context.Context) InternetMonitorOutput {
	return o
}

// ARN of the Monitor.
func (o InternetMonitorOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *InternetMonitor) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
func (o InternetMonitorOutput) HealthEventsConfig() InternetMonitorHealthEventsConfigPtrOutput {
	return o.ApplyT(func(v *InternetMonitor) InternetMonitorHealthEventsConfigPtrOutput { return v.HealthEventsConfig }).(InternetMonitorHealthEventsConfigPtrOutput)
}

// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
func (o InternetMonitorOutput) InternetMeasurementsLogDelivery() InternetMonitorInternetMeasurementsLogDeliveryPtrOutput {
	return o.ApplyT(func(v *InternetMonitor) InternetMonitorInternetMeasurementsLogDeliveryPtrOutput {
		return v.InternetMeasurementsLogDelivery
	}).(InternetMonitorInternetMeasurementsLogDeliveryPtrOutput)
}

// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
func (o InternetMonitorOutput) MaxCityNetworksToMonitor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InternetMonitor) pulumi.IntPtrOutput { return v.MaxCityNetworksToMonitor }).(pulumi.IntPtrOutput)
}

// The name of the monitor.
//
// The following arguments are optional:
func (o InternetMonitorOutput) MonitorName() pulumi.StringOutput {
	return o.ApplyT(func(v *InternetMonitor) pulumi.StringOutput { return v.MonitorName }).(pulumi.StringOutput)
}

// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
func (o InternetMonitorOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InternetMonitor) pulumi.StringArrayOutput { return v.Resources }).(pulumi.StringArrayOutput)
}

// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
func (o InternetMonitorOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternetMonitor) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o InternetMonitorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InternetMonitor) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o InternetMonitorOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InternetMonitor) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
func (o InternetMonitorOutput) TrafficPercentageToMonitor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InternetMonitor) pulumi.IntPtrOutput { return v.TrafficPercentageToMonitor }).(pulumi.IntPtrOutput)
}

type InternetMonitorArrayOutput struct{ *pulumi.OutputState }

func (InternetMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternetMonitor)(nil)).Elem()
}

func (o InternetMonitorArrayOutput) ToInternetMonitorArrayOutput() InternetMonitorArrayOutput {
	return o
}

func (o InternetMonitorArrayOutput) ToInternetMonitorArrayOutputWithContext(ctx context.Context) InternetMonitorArrayOutput {
	return o
}

func (o InternetMonitorArrayOutput) Index(i pulumi.IntInput) InternetMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InternetMonitor {
		return vs[0].([]*InternetMonitor)[vs[1].(int)]
	}).(InternetMonitorOutput)
}

type InternetMonitorMapOutput struct{ *pulumi.OutputState }

func (InternetMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternetMonitor)(nil)).Elem()
}

func (o InternetMonitorMapOutput) ToInternetMonitorMapOutput() InternetMonitorMapOutput {
	return o
}

func (o InternetMonitorMapOutput) ToInternetMonitorMapOutputWithContext(ctx context.Context) InternetMonitorMapOutput {
	return o
}

func (o InternetMonitorMapOutput) MapIndex(k pulumi.StringInput) InternetMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InternetMonitor {
		return vs[0].(map[string]*InternetMonitor)[vs[1].(string)]
	}).(InternetMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InternetMonitorInput)(nil)).Elem(), &InternetMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternetMonitorArrayInput)(nil)).Elem(), InternetMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternetMonitorMapInput)(nil)).Elem(), InternetMonitorMap{})
	pulumi.RegisterOutputType(InternetMonitorOutput{})
	pulumi.RegisterOutputType(InternetMonitorArrayOutput{})
	pulumi.RegisterOutputType(InternetMonitorMapOutput{})
}
