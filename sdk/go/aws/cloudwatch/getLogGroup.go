// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about an AWS Cloudwatch Log Group
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudwatch.LookupLogGroup(ctx, &cloudwatch.LookupLogGroupArgs{
//				Name: "MyImportantLogs",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupLogGroup(ctx *pulumi.Context, args *LookupLogGroupArgs, opts ...pulumi.InvokeOption) (*LookupLogGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLogGroupResult
	err := ctx.Invoke("aws:cloudwatch/getLogGroup:getLogGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogGroup.
type LookupLogGroupArgs struct {
	// Name of the Cloudwatch log group
	Name string `pulumi:"name"`
	// Map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getLogGroup.
type LookupLogGroupResult struct {
	// ARN of the Cloudwatch log group. Any `:*` suffix added by the API, denoting all CloudWatch Log Streams under the CloudWatch Log Group, is removed for greater compatibility with other AWS services that do not accept the suffix.
	Arn string `pulumi:"arn"`
	// Creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
	CreationTime int `pulumi:"creationTime"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN of the KMS Key to use when encrypting log data.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// The log class of the log group.
	LogGroupClass string `pulumi:"logGroupClass"`
	Name          string `pulumi:"name"`
	// Number of days log events retained in the specified log group.
	RetentionInDays int `pulumi:"retentionInDays"`
	// Map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupLogGroupOutput(ctx *pulumi.Context, args LookupLogGroupOutputArgs, opts ...pulumi.InvokeOption) LookupLogGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLogGroupResult, error) {
			args := v.(LookupLogGroupArgs)
			r, err := LookupLogGroup(ctx, &args, opts...)
			var s LookupLogGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLogGroupResultOutput)
}

// A collection of arguments for invoking getLogGroup.
type LookupLogGroupOutputArgs struct {
	// Name of the Cloudwatch log group
	Name pulumi.StringInput `pulumi:"name"`
	// Map of tags to assign to the resource.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupLogGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogGroupArgs)(nil)).Elem()
}

// A collection of values returned by getLogGroup.
type LookupLogGroupResultOutput struct{ *pulumi.OutputState }

func (LookupLogGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogGroupResult)(nil)).Elem()
}

func (o LookupLogGroupResultOutput) ToLookupLogGroupResultOutput() LookupLogGroupResultOutput {
	return o
}

func (o LookupLogGroupResultOutput) ToLookupLogGroupResultOutputWithContext(ctx context.Context) LookupLogGroupResultOutput {
	return o
}

// ARN of the Cloudwatch log group. Any `:*` suffix added by the API, denoting all CloudWatch Log Streams under the CloudWatch Log Group, is removed for greater compatibility with other AWS services that do not accept the suffix.
func (o LookupLogGroupResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogGroupResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
func (o LookupLogGroupResultOutput) CreationTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLogGroupResult) int { return v.CreationTime }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLogGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// ARN of the KMS Key to use when encrypting log data.
func (o LookupLogGroupResultOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogGroupResult) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

// The log class of the log group.
func (o LookupLogGroupResultOutput) LogGroupClass() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogGroupResult) string { return v.LogGroupClass }).(pulumi.StringOutput)
}

func (o LookupLogGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// Number of days log events retained in the specified log group.
func (o LookupLogGroupResultOutput) RetentionInDays() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLogGroupResult) int { return v.RetentionInDays }).(pulumi.IntOutput)
}

// Map of tags to assign to the resource.
func (o LookupLogGroupResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLogGroupResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLogGroupResultOutput{})
}
