// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage a CloudWatch log resource policy.
//
// ## Example Usage
//
// ### Elasticsearch Log Publishing
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			elasticsearch_log_publishing_policy, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
//				Statements: []iam.GetPolicyDocumentStatement{
//					{
//						Actions: []string{
//							"logs:CreateLogStream",
//							"logs:PutLogEvents",
//							"logs:PutLogEventsBatch",
//						},
//						Resources: []string{
//							"arn:aws:logs:*",
//						},
//						Principals: []iam.GetPolicyDocumentStatementPrincipal{
//							{
//								Identifiers: []string{
//									"es.amazonaws.com",
//								},
//								Type: "Service",
//							},
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewLogResourcePolicy(ctx, "elasticsearch-log-publishing-policy", &cloudwatch.LogResourcePolicyArgs{
//				PolicyDocument: *pulumi.String(elasticsearch_log_publishing_policy.Json),
//				PolicyName:     pulumi.String("elasticsearch-log-publishing-policy"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Route53 Query Logging
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			route53_query_logging_policy, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
//				Statements: []iam.GetPolicyDocumentStatement{
//					{
//						Actions: []string{
//							"logs:CreateLogStream",
//							"logs:PutLogEvents",
//						},
//						Resources: []string{
//							"arn:aws:logs:*:*:log-group:/aws/route53/*",
//						},
//						Principals: []iam.GetPolicyDocumentStatementPrincipal{
//							{
//								Identifiers: []string{
//									"route53.amazonaws.com",
//								},
//								Type: "Service",
//							},
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewLogResourcePolicy(ctx, "route53-query-logging-policy", &cloudwatch.LogResourcePolicyArgs{
//				PolicyDocument: *pulumi.String(route53_query_logging_policy.Json),
//				PolicyName:     pulumi.String("route53-query-logging-policy"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import CloudWatch log resource policies using the policy name. For example:
//
// ```sh
// $ pulumi import aws:cloudwatch/logResourcePolicy:LogResourcePolicy MyPolicy MyPolicy
// ```
type LogResourcePolicy struct {
	pulumi.CustomResourceState

	// Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
	PolicyDocument pulumi.StringOutput `pulumi:"policyDocument"`
	// Name of the resource policy.
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
}

// NewLogResourcePolicy registers a new resource with the given unique name, arguments, and options.
func NewLogResourcePolicy(ctx *pulumi.Context,
	name string, args *LogResourcePolicyArgs, opts ...pulumi.ResourceOption) (*LogResourcePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDocument'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogResourcePolicy
	err := ctx.RegisterResource("aws:cloudwatch/logResourcePolicy:LogResourcePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogResourcePolicy gets an existing LogResourcePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogResourcePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogResourcePolicyState, opts ...pulumi.ResourceOption) (*LogResourcePolicy, error) {
	var resource LogResourcePolicy
	err := ctx.ReadResource("aws:cloudwatch/logResourcePolicy:LogResourcePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogResourcePolicy resources.
type logResourcePolicyState struct {
	// Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
	PolicyDocument *string `pulumi:"policyDocument"`
	// Name of the resource policy.
	PolicyName *string `pulumi:"policyName"`
}

type LogResourcePolicyState struct {
	// Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
	PolicyDocument pulumi.StringPtrInput
	// Name of the resource policy.
	PolicyName pulumi.StringPtrInput
}

func (LogResourcePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*logResourcePolicyState)(nil)).Elem()
}

type logResourcePolicyArgs struct {
	// Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
	PolicyDocument string `pulumi:"policyDocument"`
	// Name of the resource policy.
	PolicyName string `pulumi:"policyName"`
}

// The set of arguments for constructing a LogResourcePolicy resource.
type LogResourcePolicyArgs struct {
	// Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
	PolicyDocument pulumi.StringInput
	// Name of the resource policy.
	PolicyName pulumi.StringInput
}

func (LogResourcePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logResourcePolicyArgs)(nil)).Elem()
}

type LogResourcePolicyInput interface {
	pulumi.Input

	ToLogResourcePolicyOutput() LogResourcePolicyOutput
	ToLogResourcePolicyOutputWithContext(ctx context.Context) LogResourcePolicyOutput
}

func (*LogResourcePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**LogResourcePolicy)(nil)).Elem()
}

func (i *LogResourcePolicy) ToLogResourcePolicyOutput() LogResourcePolicyOutput {
	return i.ToLogResourcePolicyOutputWithContext(context.Background())
}

func (i *LogResourcePolicy) ToLogResourcePolicyOutputWithContext(ctx context.Context) LogResourcePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogResourcePolicyOutput)
}

// LogResourcePolicyArrayInput is an input type that accepts LogResourcePolicyArray and LogResourcePolicyArrayOutput values.
// You can construct a concrete instance of `LogResourcePolicyArrayInput` via:
//
//	LogResourcePolicyArray{ LogResourcePolicyArgs{...} }
type LogResourcePolicyArrayInput interface {
	pulumi.Input

	ToLogResourcePolicyArrayOutput() LogResourcePolicyArrayOutput
	ToLogResourcePolicyArrayOutputWithContext(context.Context) LogResourcePolicyArrayOutput
}

type LogResourcePolicyArray []LogResourcePolicyInput

func (LogResourcePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogResourcePolicy)(nil)).Elem()
}

func (i LogResourcePolicyArray) ToLogResourcePolicyArrayOutput() LogResourcePolicyArrayOutput {
	return i.ToLogResourcePolicyArrayOutputWithContext(context.Background())
}

func (i LogResourcePolicyArray) ToLogResourcePolicyArrayOutputWithContext(ctx context.Context) LogResourcePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogResourcePolicyArrayOutput)
}

// LogResourcePolicyMapInput is an input type that accepts LogResourcePolicyMap and LogResourcePolicyMapOutput values.
// You can construct a concrete instance of `LogResourcePolicyMapInput` via:
//
//	LogResourcePolicyMap{ "key": LogResourcePolicyArgs{...} }
type LogResourcePolicyMapInput interface {
	pulumi.Input

	ToLogResourcePolicyMapOutput() LogResourcePolicyMapOutput
	ToLogResourcePolicyMapOutputWithContext(context.Context) LogResourcePolicyMapOutput
}

type LogResourcePolicyMap map[string]LogResourcePolicyInput

func (LogResourcePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogResourcePolicy)(nil)).Elem()
}

func (i LogResourcePolicyMap) ToLogResourcePolicyMapOutput() LogResourcePolicyMapOutput {
	return i.ToLogResourcePolicyMapOutputWithContext(context.Background())
}

func (i LogResourcePolicyMap) ToLogResourcePolicyMapOutputWithContext(ctx context.Context) LogResourcePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogResourcePolicyMapOutput)
}

type LogResourcePolicyOutput struct{ *pulumi.OutputState }

func (LogResourcePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogResourcePolicy)(nil)).Elem()
}

func (o LogResourcePolicyOutput) ToLogResourcePolicyOutput() LogResourcePolicyOutput {
	return o
}

func (o LogResourcePolicyOutput) ToLogResourcePolicyOutputWithContext(ctx context.Context) LogResourcePolicyOutput {
	return o
}

// Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
func (o LogResourcePolicyOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v *LogResourcePolicy) pulumi.StringOutput { return v.PolicyDocument }).(pulumi.StringOutput)
}

// Name of the resource policy.
func (o LogResourcePolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogResourcePolicy) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

type LogResourcePolicyArrayOutput struct{ *pulumi.OutputState }

func (LogResourcePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogResourcePolicy)(nil)).Elem()
}

func (o LogResourcePolicyArrayOutput) ToLogResourcePolicyArrayOutput() LogResourcePolicyArrayOutput {
	return o
}

func (o LogResourcePolicyArrayOutput) ToLogResourcePolicyArrayOutputWithContext(ctx context.Context) LogResourcePolicyArrayOutput {
	return o
}

func (o LogResourcePolicyArrayOutput) Index(i pulumi.IntInput) LogResourcePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogResourcePolicy {
		return vs[0].([]*LogResourcePolicy)[vs[1].(int)]
	}).(LogResourcePolicyOutput)
}

type LogResourcePolicyMapOutput struct{ *pulumi.OutputState }

func (LogResourcePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogResourcePolicy)(nil)).Elem()
}

func (o LogResourcePolicyMapOutput) ToLogResourcePolicyMapOutput() LogResourcePolicyMapOutput {
	return o
}

func (o LogResourcePolicyMapOutput) ToLogResourcePolicyMapOutputWithContext(ctx context.Context) LogResourcePolicyMapOutput {
	return o
}

func (o LogResourcePolicyMapOutput) MapIndex(k pulumi.StringInput) LogResourcePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogResourcePolicy {
		return vs[0].(map[string]*LogResourcePolicy)[vs[1].(string)]
	}).(LogResourcePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogResourcePolicyInput)(nil)).Elem(), &LogResourcePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogResourcePolicyArrayInput)(nil)).Elem(), LogResourcePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogResourcePolicyMapInput)(nil)).Elem(), LogResourcePolicyMap{})
	pulumi.RegisterOutputType(LogResourcePolicyOutput{})
	pulumi.RegisterOutputType(LogResourcePolicyArrayOutput{})
	pulumi.RegisterOutputType(LogResourcePolicyMapOutput{})
}
