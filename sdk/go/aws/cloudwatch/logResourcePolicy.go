// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage a CloudWatch log resource policy.
type LogResourcePolicy struct {
	s *pulumi.ResourceState
}

// NewLogResourcePolicy registers a new resource with the given unique name, arguments, and options.
func NewLogResourcePolicy(ctx *pulumi.Context,
	name string, args *LogResourcePolicyArgs, opts ...pulumi.ResourceOpt) (*LogResourcePolicy, error) {
	if args == nil || args.PolicyDocument == nil {
		return nil, errors.New("missing required argument 'PolicyDocument'")
	}
	if args == nil || args.PolicyName == nil {
		return nil, errors.New("missing required argument 'PolicyName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["policyDocument"] = nil
		inputs["policyName"] = nil
	} else {
		inputs["policyDocument"] = args.PolicyDocument
		inputs["policyName"] = args.PolicyName
	}
	s, err := ctx.RegisterResource("aws:cloudwatch/logResourcePolicy:LogResourcePolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogResourcePolicy{s: s}, nil
}

// GetLogResourcePolicy gets an existing LogResourcePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogResourcePolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LogResourcePolicyState, opts ...pulumi.ResourceOpt) (*LogResourcePolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["policyDocument"] = state.PolicyDocument
		inputs["policyName"] = state.PolicyName
	}
	s, err := ctx.ReadResource("aws:cloudwatch/logResourcePolicy:LogResourcePolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogResourcePolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LogResourcePolicy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LogResourcePolicy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
func (r *LogResourcePolicy) PolicyDocument() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policyDocument"])
}

// Name of the resource policy.
func (r *LogResourcePolicy) PolicyName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policyName"])
}

// Input properties used for looking up and filtering LogResourcePolicy resources.
type LogResourcePolicyState struct {
	// Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
	PolicyDocument interface{}
	// Name of the resource policy.
	PolicyName interface{}
}

// The set of arguments for constructing a LogResourcePolicy resource.
type LogResourcePolicyArgs struct {
	// Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
	PolicyDocument interface{}
	// Name of the resource policy.
	PolicyName interface{}
}
