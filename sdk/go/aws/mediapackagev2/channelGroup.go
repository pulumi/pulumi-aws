// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediapackagev2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an AWS Elemental MediaPackage Version 2 Channel Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/mediapackagev2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mediapackagev2.NewChannelGroup(ctx, "example", &mediapackagev2.ChannelGroupArgs{
//				Name:        pulumi.String("example"),
//				Description: pulumi.String("channel group for example channels"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Elemental MediaPackage Version 2 Channel Group using the channel group's `name`. For example:
//
// ```sh
// $ pulumi import aws:mediapackagev2/channelGroup:ChannelGroup example example
// ```
type ChannelGroup struct {
	pulumi.CustomResourceState

	// The ARN of the channel
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description of the channel group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The egress domain of the channel group
	EgressDomain pulumi.StringOutput `pulumi:"egressDomain"`
	// A unique identifier naming the channel group
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewChannelGroup registers a new resource with the given unique name, arguments, and options.
func NewChannelGroup(ctx *pulumi.Context,
	name string, args *ChannelGroupArgs, opts ...pulumi.ResourceOption) (*ChannelGroup, error) {
	if args == nil {
		args = &ChannelGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChannelGroup
	err := ctx.RegisterResource("aws:mediapackagev2/channelGroup:ChannelGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelGroup gets an existing ChannelGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelGroupState, opts ...pulumi.ResourceOption) (*ChannelGroup, error) {
	var resource ChannelGroup
	err := ctx.ReadResource("aws:mediapackagev2/channelGroup:ChannelGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelGroup resources.
type channelGroupState struct {
	// The ARN of the channel
	Arn *string `pulumi:"arn"`
	// A description of the channel group
	Description *string `pulumi:"description"`
	// The egress domain of the channel group
	EgressDomain *string `pulumi:"egressDomain"`
	// A unique identifier naming the channel group
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ChannelGroupState struct {
	// The ARN of the channel
	Arn pulumi.StringPtrInput
	// A description of the channel group
	Description pulumi.StringPtrInput
	// The egress domain of the channel group
	EgressDomain pulumi.StringPtrInput
	// A unique identifier naming the channel group
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (ChannelGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelGroupState)(nil)).Elem()
}

type channelGroupArgs struct {
	// A description of the channel group
	Description *string `pulumi:"description"`
	// A unique identifier naming the channel group
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ChannelGroup resource.
type ChannelGroupArgs struct {
	// A description of the channel group
	Description pulumi.StringPtrInput
	// A unique identifier naming the channel group
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (ChannelGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelGroupArgs)(nil)).Elem()
}

type ChannelGroupInput interface {
	pulumi.Input

	ToChannelGroupOutput() ChannelGroupOutput
	ToChannelGroupOutputWithContext(ctx context.Context) ChannelGroupOutput
}

func (*ChannelGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelGroup)(nil)).Elem()
}

func (i *ChannelGroup) ToChannelGroupOutput() ChannelGroupOutput {
	return i.ToChannelGroupOutputWithContext(context.Background())
}

func (i *ChannelGroup) ToChannelGroupOutputWithContext(ctx context.Context) ChannelGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelGroupOutput)
}

// ChannelGroupArrayInput is an input type that accepts ChannelGroupArray and ChannelGroupArrayOutput values.
// You can construct a concrete instance of `ChannelGroupArrayInput` via:
//
//	ChannelGroupArray{ ChannelGroupArgs{...} }
type ChannelGroupArrayInput interface {
	pulumi.Input

	ToChannelGroupArrayOutput() ChannelGroupArrayOutput
	ToChannelGroupArrayOutputWithContext(context.Context) ChannelGroupArrayOutput
}

type ChannelGroupArray []ChannelGroupInput

func (ChannelGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelGroup)(nil)).Elem()
}

func (i ChannelGroupArray) ToChannelGroupArrayOutput() ChannelGroupArrayOutput {
	return i.ToChannelGroupArrayOutputWithContext(context.Background())
}

func (i ChannelGroupArray) ToChannelGroupArrayOutputWithContext(ctx context.Context) ChannelGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelGroupArrayOutput)
}

// ChannelGroupMapInput is an input type that accepts ChannelGroupMap and ChannelGroupMapOutput values.
// You can construct a concrete instance of `ChannelGroupMapInput` via:
//
//	ChannelGroupMap{ "key": ChannelGroupArgs{...} }
type ChannelGroupMapInput interface {
	pulumi.Input

	ToChannelGroupMapOutput() ChannelGroupMapOutput
	ToChannelGroupMapOutputWithContext(context.Context) ChannelGroupMapOutput
}

type ChannelGroupMap map[string]ChannelGroupInput

func (ChannelGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelGroup)(nil)).Elem()
}

func (i ChannelGroupMap) ToChannelGroupMapOutput() ChannelGroupMapOutput {
	return i.ToChannelGroupMapOutputWithContext(context.Background())
}

func (i ChannelGroupMap) ToChannelGroupMapOutputWithContext(ctx context.Context) ChannelGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelGroupMapOutput)
}

type ChannelGroupOutput struct{ *pulumi.OutputState }

func (ChannelGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelGroup)(nil)).Elem()
}

func (o ChannelGroupOutput) ToChannelGroupOutput() ChannelGroupOutput {
	return o
}

func (o ChannelGroupOutput) ToChannelGroupOutputWithContext(ctx context.Context) ChannelGroupOutput {
	return o
}

// The ARN of the channel
func (o ChannelGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A description of the channel group
func (o ChannelGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The egress domain of the channel group
func (o ChannelGroupOutput) EgressDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelGroup) pulumi.StringOutput { return v.EgressDomain }).(pulumi.StringOutput)
}

// A unique identifier naming the channel group
func (o ChannelGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ChannelGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ChannelGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ChannelGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ChannelGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ChannelGroupArrayOutput struct{ *pulumi.OutputState }

func (ChannelGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelGroup)(nil)).Elem()
}

func (o ChannelGroupArrayOutput) ToChannelGroupArrayOutput() ChannelGroupArrayOutput {
	return o
}

func (o ChannelGroupArrayOutput) ToChannelGroupArrayOutputWithContext(ctx context.Context) ChannelGroupArrayOutput {
	return o
}

func (o ChannelGroupArrayOutput) Index(i pulumi.IntInput) ChannelGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChannelGroup {
		return vs[0].([]*ChannelGroup)[vs[1].(int)]
	}).(ChannelGroupOutput)
}

type ChannelGroupMapOutput struct{ *pulumi.OutputState }

func (ChannelGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelGroup)(nil)).Elem()
}

func (o ChannelGroupMapOutput) ToChannelGroupMapOutput() ChannelGroupMapOutput {
	return o
}

func (o ChannelGroupMapOutput) ToChannelGroupMapOutputWithContext(ctx context.Context) ChannelGroupMapOutput {
	return o
}

func (o ChannelGroupMapOutput) MapIndex(k pulumi.StringInput) ChannelGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChannelGroup {
		return vs[0].(map[string]*ChannelGroup)[vs[1].(string)]
	}).(ChannelGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelGroupInput)(nil)).Elem(), &ChannelGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelGroupArrayInput)(nil)).Elem(), ChannelGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelGroupMapInput)(nil)).Elem(), ChannelGroupMap{})
	pulumi.RegisterOutputType(ChannelGroupOutput{})
	pulumi.RegisterOutputType(ChannelGroupArrayOutput{})
	pulumi.RegisterOutputType(ChannelGroupMapOutput{})
}
