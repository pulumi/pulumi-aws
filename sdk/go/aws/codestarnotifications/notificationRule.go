// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codestarnotifications

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NotificationRule struct {
	pulumi.CustomResourceState

	Arn          pulumi.StringOutput               `pulumi:"arn"`
	DetailType   pulumi.StringOutput               `pulumi:"detailType"`
	EventTypeIds pulumi.StringArrayOutput          `pulumi:"eventTypeIds"`
	Name         pulumi.StringOutput               `pulumi:"name"`
	Resource     pulumi.StringOutput               `pulumi:"resource"`
	Status       pulumi.StringPtrOutput            `pulumi:"status"`
	Tags         pulumi.StringMapOutput            `pulumi:"tags"`
	TagsAll      pulumi.StringMapOutput            `pulumi:"tagsAll"`
	Targets      NotificationRuleTargetArrayOutput `pulumi:"targets"`
}

// NewNotificationRule registers a new resource with the given unique name, arguments, and options.
func NewNotificationRule(ctx *pulumi.Context,
	name string, args *NotificationRuleArgs, opts ...pulumi.ResourceOption) (*NotificationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DetailType == nil {
		return nil, errors.New("invalid value for required argument 'DetailType'")
	}
	if args.EventTypeIds == nil {
		return nil, errors.New("invalid value for required argument 'EventTypeIds'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	var resource NotificationRule
	err := ctx.RegisterResource("aws:codestarnotifications/notificationRule:NotificationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationRule gets an existing NotificationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationRuleState, opts ...pulumi.ResourceOption) (*NotificationRule, error) {
	var resource NotificationRule
	err := ctx.ReadResource("aws:codestarnotifications/notificationRule:NotificationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationRule resources.
type notificationRuleState struct {
	Arn          *string                  `pulumi:"arn"`
	DetailType   *string                  `pulumi:"detailType"`
	EventTypeIds []string                 `pulumi:"eventTypeIds"`
	Name         *string                  `pulumi:"name"`
	Resource     *string                  `pulumi:"resource"`
	Status       *string                  `pulumi:"status"`
	Tags         map[string]string        `pulumi:"tags"`
	TagsAll      map[string]string        `pulumi:"tagsAll"`
	Targets      []NotificationRuleTarget `pulumi:"targets"`
}

type NotificationRuleState struct {
	Arn          pulumi.StringPtrInput
	DetailType   pulumi.StringPtrInput
	EventTypeIds pulumi.StringArrayInput
	Name         pulumi.StringPtrInput
	Resource     pulumi.StringPtrInput
	Status       pulumi.StringPtrInput
	Tags         pulumi.StringMapInput
	TagsAll      pulumi.StringMapInput
	Targets      NotificationRuleTargetArrayInput
}

func (NotificationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationRuleState)(nil)).Elem()
}

type notificationRuleArgs struct {
	DetailType   string                   `pulumi:"detailType"`
	EventTypeIds []string                 `pulumi:"eventTypeIds"`
	Name         *string                  `pulumi:"name"`
	Resource     string                   `pulumi:"resource"`
	Status       *string                  `pulumi:"status"`
	Tags         map[string]string        `pulumi:"tags"`
	Targets      []NotificationRuleTarget `pulumi:"targets"`
}

// The set of arguments for constructing a NotificationRule resource.
type NotificationRuleArgs struct {
	DetailType   pulumi.StringInput
	EventTypeIds pulumi.StringArrayInput
	Name         pulumi.StringPtrInput
	Resource     pulumi.StringInput
	Status       pulumi.StringPtrInput
	Tags         pulumi.StringMapInput
	Targets      NotificationRuleTargetArrayInput
}

func (NotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationRuleArgs)(nil)).Elem()
}

type NotificationRuleInput interface {
	pulumi.Input

	ToNotificationRuleOutput() NotificationRuleOutput
	ToNotificationRuleOutputWithContext(ctx context.Context) NotificationRuleOutput
}

func (*NotificationRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationRule)(nil)).Elem()
}

func (i *NotificationRule) ToNotificationRuleOutput() NotificationRuleOutput {
	return i.ToNotificationRuleOutputWithContext(context.Background())
}

func (i *NotificationRule) ToNotificationRuleOutputWithContext(ctx context.Context) NotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleOutput)
}

// NotificationRuleArrayInput is an input type that accepts NotificationRuleArray and NotificationRuleArrayOutput values.
// You can construct a concrete instance of `NotificationRuleArrayInput` via:
//
//	NotificationRuleArray{ NotificationRuleArgs{...} }
type NotificationRuleArrayInput interface {
	pulumi.Input

	ToNotificationRuleArrayOutput() NotificationRuleArrayOutput
	ToNotificationRuleArrayOutputWithContext(context.Context) NotificationRuleArrayOutput
}

type NotificationRuleArray []NotificationRuleInput

func (NotificationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationRule)(nil)).Elem()
}

func (i NotificationRuleArray) ToNotificationRuleArrayOutput() NotificationRuleArrayOutput {
	return i.ToNotificationRuleArrayOutputWithContext(context.Background())
}

func (i NotificationRuleArray) ToNotificationRuleArrayOutputWithContext(ctx context.Context) NotificationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleArrayOutput)
}

// NotificationRuleMapInput is an input type that accepts NotificationRuleMap and NotificationRuleMapOutput values.
// You can construct a concrete instance of `NotificationRuleMapInput` via:
//
//	NotificationRuleMap{ "key": NotificationRuleArgs{...} }
type NotificationRuleMapInput interface {
	pulumi.Input

	ToNotificationRuleMapOutput() NotificationRuleMapOutput
	ToNotificationRuleMapOutputWithContext(context.Context) NotificationRuleMapOutput
}

type NotificationRuleMap map[string]NotificationRuleInput

func (NotificationRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationRule)(nil)).Elem()
}

func (i NotificationRuleMap) ToNotificationRuleMapOutput() NotificationRuleMapOutput {
	return i.ToNotificationRuleMapOutputWithContext(context.Background())
}

func (i NotificationRuleMap) ToNotificationRuleMapOutputWithContext(ctx context.Context) NotificationRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleMapOutput)
}

type NotificationRuleOutput struct{ *pulumi.OutputState }

func (NotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationRule)(nil)).Elem()
}

func (o NotificationRuleOutput) ToNotificationRuleOutput() NotificationRuleOutput {
	return o
}

func (o NotificationRuleOutput) ToNotificationRuleOutputWithContext(ctx context.Context) NotificationRuleOutput {
	return o
}

func (o NotificationRuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationRule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o NotificationRuleOutput) DetailType() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationRule) pulumi.StringOutput { return v.DetailType }).(pulumi.StringOutput)
}

func (o NotificationRuleOutput) EventTypeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationRule) pulumi.StringArrayOutput { return v.EventTypeIds }).(pulumi.StringArrayOutput)
}

func (o NotificationRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NotificationRuleOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationRule) pulumi.StringOutput { return v.Resource }).(pulumi.StringOutput)
}

func (o NotificationRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationRule) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o NotificationRuleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NotificationRule) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o NotificationRuleOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NotificationRule) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o NotificationRuleOutput) Targets() NotificationRuleTargetArrayOutput {
	return o.ApplyT(func(v *NotificationRule) NotificationRuleTargetArrayOutput { return v.Targets }).(NotificationRuleTargetArrayOutput)
}

type NotificationRuleArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationRule)(nil)).Elem()
}

func (o NotificationRuleArrayOutput) ToNotificationRuleArrayOutput() NotificationRuleArrayOutput {
	return o
}

func (o NotificationRuleArrayOutput) ToNotificationRuleArrayOutputWithContext(ctx context.Context) NotificationRuleArrayOutput {
	return o
}

func (o NotificationRuleArrayOutput) Index(i pulumi.IntInput) NotificationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationRule {
		return vs[0].([]*NotificationRule)[vs[1].(int)]
	}).(NotificationRuleOutput)
}

type NotificationRuleMapOutput struct{ *pulumi.OutputState }

func (NotificationRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationRule)(nil)).Elem()
}

func (o NotificationRuleMapOutput) ToNotificationRuleMapOutput() NotificationRuleMapOutput {
	return o
}

func (o NotificationRuleMapOutput) ToNotificationRuleMapOutputWithContext(ctx context.Context) NotificationRuleMapOutput {
	return o
}

func (o NotificationRuleMapOutput) MapIndex(k pulumi.StringInput) NotificationRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationRule {
		return vs[0].(map[string]*NotificationRule)[vs[1].(string)]
	}).(NotificationRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleInput)(nil)).Elem(), &NotificationRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleArrayInput)(nil)).Elem(), NotificationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleMapInput)(nil)).Elem(), NotificationRuleMap{})
	pulumi.RegisterOutputType(NotificationRuleOutput{})
	pulumi.RegisterOutputType(NotificationRuleArrayOutput{})
	pulumi.RegisterOutputType(NotificationRuleMapOutput{})
}
