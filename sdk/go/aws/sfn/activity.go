// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sfn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Activity struct {
	pulumi.CustomResourceState

	CreationDate pulumi.StringOutput    `pulumi:"creationDate"`
	Name         pulumi.StringOutput    `pulumi:"name"`
	Tags         pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll      pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewActivity registers a new resource with the given unique name, arguments, and options.
func NewActivity(ctx *pulumi.Context,
	name string, args *ActivityArgs, opts ...pulumi.ResourceOption) (*Activity, error) {
	if args == nil {
		args = &ActivityArgs{}
	}

	var resource Activity
	err := ctx.RegisterResource("aws:sfn/activity:Activity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActivity gets an existing Activity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActivity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActivityState, opts ...pulumi.ResourceOption) (*Activity, error) {
	var resource Activity
	err := ctx.ReadResource("aws:sfn/activity:Activity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Activity resources.
type activityState struct {
	CreationDate *string           `pulumi:"creationDate"`
	Name         *string           `pulumi:"name"`
	Tags         map[string]string `pulumi:"tags"`
	TagsAll      map[string]string `pulumi:"tagsAll"`
}

type ActivityState struct {
	CreationDate pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Tags         pulumi.StringMapInput
	TagsAll      pulumi.StringMapInput
}

func (ActivityState) ElementType() reflect.Type {
	return reflect.TypeOf((*activityState)(nil)).Elem()
}

type activityArgs struct {
	Name *string           `pulumi:"name"`
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Activity resource.
type ActivityArgs struct {
	Name pulumi.StringPtrInput
	Tags pulumi.StringMapInput
}

func (ActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activityArgs)(nil)).Elem()
}

type ActivityInput interface {
	pulumi.Input

	ToActivityOutput() ActivityOutput
	ToActivityOutputWithContext(ctx context.Context) ActivityOutput
}

func (*Activity) ElementType() reflect.Type {
	return reflect.TypeOf((**Activity)(nil)).Elem()
}

func (i *Activity) ToActivityOutput() ActivityOutput {
	return i.ToActivityOutputWithContext(context.Background())
}

func (i *Activity) ToActivityOutputWithContext(ctx context.Context) ActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityOutput)
}

// ActivityArrayInput is an input type that accepts ActivityArray and ActivityArrayOutput values.
// You can construct a concrete instance of `ActivityArrayInput` via:
//
//	ActivityArray{ ActivityArgs{...} }
type ActivityArrayInput interface {
	pulumi.Input

	ToActivityArrayOutput() ActivityArrayOutput
	ToActivityArrayOutputWithContext(context.Context) ActivityArrayOutput
}

type ActivityArray []ActivityInput

func (ActivityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Activity)(nil)).Elem()
}

func (i ActivityArray) ToActivityArrayOutput() ActivityArrayOutput {
	return i.ToActivityArrayOutputWithContext(context.Background())
}

func (i ActivityArray) ToActivityArrayOutputWithContext(ctx context.Context) ActivityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityArrayOutput)
}

// ActivityMapInput is an input type that accepts ActivityMap and ActivityMapOutput values.
// You can construct a concrete instance of `ActivityMapInput` via:
//
//	ActivityMap{ "key": ActivityArgs{...} }
type ActivityMapInput interface {
	pulumi.Input

	ToActivityMapOutput() ActivityMapOutput
	ToActivityMapOutputWithContext(context.Context) ActivityMapOutput
}

type ActivityMap map[string]ActivityInput

func (ActivityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Activity)(nil)).Elem()
}

func (i ActivityMap) ToActivityMapOutput() ActivityMapOutput {
	return i.ToActivityMapOutputWithContext(context.Background())
}

func (i ActivityMap) ToActivityMapOutputWithContext(ctx context.Context) ActivityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityMapOutput)
}

type ActivityOutput struct{ *pulumi.OutputState }

func (ActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Activity)(nil)).Elem()
}

func (o ActivityOutput) ToActivityOutput() ActivityOutput {
	return o
}

func (o ActivityOutput) ToActivityOutputWithContext(ctx context.Context) ActivityOutput {
	return o
}

func (o ActivityOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Activity) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

func (o ActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Activity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ActivityOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Activity) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ActivityOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Activity) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ActivityArrayOutput struct{ *pulumi.OutputState }

func (ActivityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Activity)(nil)).Elem()
}

func (o ActivityArrayOutput) ToActivityArrayOutput() ActivityArrayOutput {
	return o
}

func (o ActivityArrayOutput) ToActivityArrayOutputWithContext(ctx context.Context) ActivityArrayOutput {
	return o
}

func (o ActivityArrayOutput) Index(i pulumi.IntInput) ActivityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Activity {
		return vs[0].([]*Activity)[vs[1].(int)]
	}).(ActivityOutput)
}

type ActivityMapOutput struct{ *pulumi.OutputState }

func (ActivityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Activity)(nil)).Elem()
}

func (o ActivityMapOutput) ToActivityMapOutput() ActivityMapOutput {
	return o
}

func (o ActivityMapOutput) ToActivityMapOutputWithContext(ctx context.Context) ActivityMapOutput {
	return o
}

func (o ActivityMapOutput) MapIndex(k pulumi.StringInput) ActivityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Activity {
		return vs[0].(map[string]*Activity)[vs[1].(string)]
	}).(ActivityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityInput)(nil)).Elem(), &Activity{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityArrayInput)(nil)).Elem(), ActivityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityMapInput)(nil)).Elem(), ActivityMap{})
	pulumi.RegisterOutputType(ActivityOutput{})
	pulumi.RegisterOutputType(ActivityArrayOutput{})
	pulumi.RegisterOutputType(ActivityMapOutput{})
}
