// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sfn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StateMachine struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput                    `pulumi:"arn"`
	CreationDate         pulumi.StringOutput                    `pulumi:"creationDate"`
	Definition           pulumi.StringOutput                    `pulumi:"definition"`
	LoggingConfiguration StateMachineLoggingConfigurationOutput `pulumi:"loggingConfiguration"`
	Name                 pulumi.StringOutput                    `pulumi:"name"`
	NamePrefix           pulumi.StringOutput                    `pulumi:"namePrefix"`
	RoleArn              pulumi.StringOutput                    `pulumi:"roleArn"`
	Status               pulumi.StringOutput                    `pulumi:"status"`
	Tags                 pulumi.StringMapOutput                 `pulumi:"tags"`
	TagsAll              pulumi.StringMapOutput                 `pulumi:"tagsAll"`
	TracingConfiguration StateMachineTracingConfigurationOutput `pulumi:"tracingConfiguration"`
	Type                 pulumi.StringPtrOutput                 `pulumi:"type"`
}

// NewStateMachine registers a new resource with the given unique name, arguments, and options.
func NewStateMachine(ctx *pulumi.Context,
	name string, args *StateMachineArgs, opts ...pulumi.ResourceOption) (*StateMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource StateMachine
	err := ctx.RegisterResource("aws:sfn/stateMachine:StateMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStateMachine gets an existing StateMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStateMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StateMachineState, opts ...pulumi.ResourceOption) (*StateMachine, error) {
	var resource StateMachine
	err := ctx.ReadResource("aws:sfn/stateMachine:StateMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StateMachine resources.
type stateMachineState struct {
	Arn                  *string                           `pulumi:"arn"`
	CreationDate         *string                           `pulumi:"creationDate"`
	Definition           *string                           `pulumi:"definition"`
	LoggingConfiguration *StateMachineLoggingConfiguration `pulumi:"loggingConfiguration"`
	Name                 *string                           `pulumi:"name"`
	NamePrefix           *string                           `pulumi:"namePrefix"`
	RoleArn              *string                           `pulumi:"roleArn"`
	Status               *string                           `pulumi:"status"`
	Tags                 map[string]string                 `pulumi:"tags"`
	TagsAll              map[string]string                 `pulumi:"tagsAll"`
	TracingConfiguration *StateMachineTracingConfiguration `pulumi:"tracingConfiguration"`
	Type                 *string                           `pulumi:"type"`
}

type StateMachineState struct {
	Arn                  pulumi.StringPtrInput
	CreationDate         pulumi.StringPtrInput
	Definition           pulumi.StringPtrInput
	LoggingConfiguration StateMachineLoggingConfigurationPtrInput
	Name                 pulumi.StringPtrInput
	NamePrefix           pulumi.StringPtrInput
	RoleArn              pulumi.StringPtrInput
	Status               pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	TagsAll              pulumi.StringMapInput
	TracingConfiguration StateMachineTracingConfigurationPtrInput
	Type                 pulumi.StringPtrInput
}

func (StateMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*stateMachineState)(nil)).Elem()
}

type stateMachineArgs struct {
	Definition           string                            `pulumi:"definition"`
	LoggingConfiguration *StateMachineLoggingConfiguration `pulumi:"loggingConfiguration"`
	Name                 *string                           `pulumi:"name"`
	NamePrefix           *string                           `pulumi:"namePrefix"`
	RoleArn              string                            `pulumi:"roleArn"`
	Tags                 map[string]string                 `pulumi:"tags"`
	TracingConfiguration *StateMachineTracingConfiguration `pulumi:"tracingConfiguration"`
	Type                 *string                           `pulumi:"type"`
}

// The set of arguments for constructing a StateMachine resource.
type StateMachineArgs struct {
	Definition           pulumi.StringInput
	LoggingConfiguration StateMachineLoggingConfigurationPtrInput
	Name                 pulumi.StringPtrInput
	NamePrefix           pulumi.StringPtrInput
	RoleArn              pulumi.StringInput
	Tags                 pulumi.StringMapInput
	TracingConfiguration StateMachineTracingConfigurationPtrInput
	Type                 pulumi.StringPtrInput
}

func (StateMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stateMachineArgs)(nil)).Elem()
}

type StateMachineInput interface {
	pulumi.Input

	ToStateMachineOutput() StateMachineOutput
	ToStateMachineOutputWithContext(ctx context.Context) StateMachineOutput
}

func (*StateMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**StateMachine)(nil)).Elem()
}

func (i *StateMachine) ToStateMachineOutput() StateMachineOutput {
	return i.ToStateMachineOutputWithContext(context.Background())
}

func (i *StateMachine) ToStateMachineOutputWithContext(ctx context.Context) StateMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineOutput)
}

// StateMachineArrayInput is an input type that accepts StateMachineArray and StateMachineArrayOutput values.
// You can construct a concrete instance of `StateMachineArrayInput` via:
//
//	StateMachineArray{ StateMachineArgs{...} }
type StateMachineArrayInput interface {
	pulumi.Input

	ToStateMachineArrayOutput() StateMachineArrayOutput
	ToStateMachineArrayOutputWithContext(context.Context) StateMachineArrayOutput
}

type StateMachineArray []StateMachineInput

func (StateMachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StateMachine)(nil)).Elem()
}

func (i StateMachineArray) ToStateMachineArrayOutput() StateMachineArrayOutput {
	return i.ToStateMachineArrayOutputWithContext(context.Background())
}

func (i StateMachineArray) ToStateMachineArrayOutputWithContext(ctx context.Context) StateMachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineArrayOutput)
}

// StateMachineMapInput is an input type that accepts StateMachineMap and StateMachineMapOutput values.
// You can construct a concrete instance of `StateMachineMapInput` via:
//
//	StateMachineMap{ "key": StateMachineArgs{...} }
type StateMachineMapInput interface {
	pulumi.Input

	ToStateMachineMapOutput() StateMachineMapOutput
	ToStateMachineMapOutputWithContext(context.Context) StateMachineMapOutput
}

type StateMachineMap map[string]StateMachineInput

func (StateMachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StateMachine)(nil)).Elem()
}

func (i StateMachineMap) ToStateMachineMapOutput() StateMachineMapOutput {
	return i.ToStateMachineMapOutputWithContext(context.Background())
}

func (i StateMachineMap) ToStateMachineMapOutputWithContext(ctx context.Context) StateMachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineMapOutput)
}

type StateMachineOutput struct{ *pulumi.OutputState }

func (StateMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StateMachine)(nil)).Elem()
}

func (o StateMachineOutput) ToStateMachineOutput() StateMachineOutput {
	return o
}

func (o StateMachineOutput) ToStateMachineOutputWithContext(ctx context.Context) StateMachineOutput {
	return o
}

func (o StateMachineOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o StateMachineOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

func (o StateMachineOutput) Definition() pulumi.StringOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringOutput { return v.Definition }).(pulumi.StringOutput)
}

func (o StateMachineOutput) LoggingConfiguration() StateMachineLoggingConfigurationOutput {
	return o.ApplyT(func(v *StateMachine) StateMachineLoggingConfigurationOutput { return v.LoggingConfiguration }).(StateMachineLoggingConfigurationOutput)
}

func (o StateMachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o StateMachineOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

func (o StateMachineOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o StateMachineOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o StateMachineOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o StateMachineOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o StateMachineOutput) TracingConfiguration() StateMachineTracingConfigurationOutput {
	return o.ApplyT(func(v *StateMachine) StateMachineTracingConfigurationOutput { return v.TracingConfiguration }).(StateMachineTracingConfigurationOutput)
}

func (o StateMachineOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type StateMachineArrayOutput struct{ *pulumi.OutputState }

func (StateMachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StateMachine)(nil)).Elem()
}

func (o StateMachineArrayOutput) ToStateMachineArrayOutput() StateMachineArrayOutput {
	return o
}

func (o StateMachineArrayOutput) ToStateMachineArrayOutputWithContext(ctx context.Context) StateMachineArrayOutput {
	return o
}

func (o StateMachineArrayOutput) Index(i pulumi.IntInput) StateMachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StateMachine {
		return vs[0].([]*StateMachine)[vs[1].(int)]
	}).(StateMachineOutput)
}

type StateMachineMapOutput struct{ *pulumi.OutputState }

func (StateMachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StateMachine)(nil)).Elem()
}

func (o StateMachineMapOutput) ToStateMachineMapOutput() StateMachineMapOutput {
	return o
}

func (o StateMachineMapOutput) ToStateMachineMapOutputWithContext(ctx context.Context) StateMachineMapOutput {
	return o
}

func (o StateMachineMapOutput) MapIndex(k pulumi.StringInput) StateMachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StateMachine {
		return vs[0].(map[string]*StateMachine)[vs[1].(string)]
	}).(StateMachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StateMachineInput)(nil)).Elem(), &StateMachine{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateMachineArrayInput)(nil)).Elem(), StateMachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateMachineMapInput)(nil)).Elem(), StateMachineMap{})
	pulumi.RegisterOutputType(StateMachineOutput{})
	pulumi.RegisterOutputType(StateMachineArrayOutput{})
	pulumi.RegisterOutputType(StateMachineMapOutput{})
}
