// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sfn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AliasRoutingConfiguration struct {
	// The Amazon Resource Name (ARN) of the state machine version.
	StateMachineVersionArn string `pulumi:"stateMachineVersionArn"`
	// Percentage of traffic routed to the state machine version.
	Weight int `pulumi:"weight"`
}

// AliasRoutingConfigurationInput is an input type that accepts AliasRoutingConfigurationArgs and AliasRoutingConfigurationOutput values.
// You can construct a concrete instance of `AliasRoutingConfigurationInput` via:
//
//	AliasRoutingConfigurationArgs{...}
type AliasRoutingConfigurationInput interface {
	pulumi.Input

	ToAliasRoutingConfigurationOutput() AliasRoutingConfigurationOutput
	ToAliasRoutingConfigurationOutputWithContext(context.Context) AliasRoutingConfigurationOutput
}

type AliasRoutingConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the state machine version.
	StateMachineVersionArn pulumi.StringInput `pulumi:"stateMachineVersionArn"`
	// Percentage of traffic routed to the state machine version.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (AliasRoutingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasRoutingConfiguration)(nil)).Elem()
}

func (i AliasRoutingConfigurationArgs) ToAliasRoutingConfigurationOutput() AliasRoutingConfigurationOutput {
	return i.ToAliasRoutingConfigurationOutputWithContext(context.Background())
}

func (i AliasRoutingConfigurationArgs) ToAliasRoutingConfigurationOutputWithContext(ctx context.Context) AliasRoutingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasRoutingConfigurationOutput)
}

func (i AliasRoutingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[AliasRoutingConfiguration] {
	return pulumix.Output[AliasRoutingConfiguration]{
		OutputState: i.ToAliasRoutingConfigurationOutputWithContext(ctx).OutputState,
	}
}

// AliasRoutingConfigurationArrayInput is an input type that accepts AliasRoutingConfigurationArray and AliasRoutingConfigurationArrayOutput values.
// You can construct a concrete instance of `AliasRoutingConfigurationArrayInput` via:
//
//	AliasRoutingConfigurationArray{ AliasRoutingConfigurationArgs{...} }
type AliasRoutingConfigurationArrayInput interface {
	pulumi.Input

	ToAliasRoutingConfigurationArrayOutput() AliasRoutingConfigurationArrayOutput
	ToAliasRoutingConfigurationArrayOutputWithContext(context.Context) AliasRoutingConfigurationArrayOutput
}

type AliasRoutingConfigurationArray []AliasRoutingConfigurationInput

func (AliasRoutingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AliasRoutingConfiguration)(nil)).Elem()
}

func (i AliasRoutingConfigurationArray) ToAliasRoutingConfigurationArrayOutput() AliasRoutingConfigurationArrayOutput {
	return i.ToAliasRoutingConfigurationArrayOutputWithContext(context.Background())
}

func (i AliasRoutingConfigurationArray) ToAliasRoutingConfigurationArrayOutputWithContext(ctx context.Context) AliasRoutingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasRoutingConfigurationArrayOutput)
}

func (i AliasRoutingConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]AliasRoutingConfiguration] {
	return pulumix.Output[[]AliasRoutingConfiguration]{
		OutputState: i.ToAliasRoutingConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

type AliasRoutingConfigurationOutput struct{ *pulumi.OutputState }

func (AliasRoutingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasRoutingConfiguration)(nil)).Elem()
}

func (o AliasRoutingConfigurationOutput) ToAliasRoutingConfigurationOutput() AliasRoutingConfigurationOutput {
	return o
}

func (o AliasRoutingConfigurationOutput) ToAliasRoutingConfigurationOutputWithContext(ctx context.Context) AliasRoutingConfigurationOutput {
	return o
}

func (o AliasRoutingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AliasRoutingConfiguration] {
	return pulumix.Output[AliasRoutingConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the state machine version.
func (o AliasRoutingConfigurationOutput) StateMachineVersionArn() pulumi.StringOutput {
	return o.ApplyT(func(v AliasRoutingConfiguration) string { return v.StateMachineVersionArn }).(pulumi.StringOutput)
}

// Percentage of traffic routed to the state machine version.
func (o AliasRoutingConfigurationOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v AliasRoutingConfiguration) int { return v.Weight }).(pulumi.IntOutput)
}

type AliasRoutingConfigurationArrayOutput struct{ *pulumi.OutputState }

func (AliasRoutingConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AliasRoutingConfiguration)(nil)).Elem()
}

func (o AliasRoutingConfigurationArrayOutput) ToAliasRoutingConfigurationArrayOutput() AliasRoutingConfigurationArrayOutput {
	return o
}

func (o AliasRoutingConfigurationArrayOutput) ToAliasRoutingConfigurationArrayOutputWithContext(ctx context.Context) AliasRoutingConfigurationArrayOutput {
	return o
}

func (o AliasRoutingConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AliasRoutingConfiguration] {
	return pulumix.Output[[]AliasRoutingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o AliasRoutingConfigurationArrayOutput) Index(i pulumi.IntInput) AliasRoutingConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AliasRoutingConfiguration {
		return vs[0].([]AliasRoutingConfiguration)[vs[1].(int)]
	}).(AliasRoutingConfigurationOutput)
}

type StateMachineLoggingConfiguration struct {
	// Determines whether execution data is included in your log. When set to `false`, data is excluded.
	IncludeExecutionData *bool `pulumi:"includeExecutionData"`
	// Defines which category of execution history events are logged. Valid values: `ALL`, `ERROR`, `FATAL`, `OFF`
	Level *string `pulumi:"level"`
	// Amazon Resource Name (ARN) of a CloudWatch log group. Make sure the State Machine has the correct IAM policies for logging. The ARN must end with `:*`
	LogDestination *string `pulumi:"logDestination"`
}

// StateMachineLoggingConfigurationInput is an input type that accepts StateMachineLoggingConfigurationArgs and StateMachineLoggingConfigurationOutput values.
// You can construct a concrete instance of `StateMachineLoggingConfigurationInput` via:
//
//	StateMachineLoggingConfigurationArgs{...}
type StateMachineLoggingConfigurationInput interface {
	pulumi.Input

	ToStateMachineLoggingConfigurationOutput() StateMachineLoggingConfigurationOutput
	ToStateMachineLoggingConfigurationOutputWithContext(context.Context) StateMachineLoggingConfigurationOutput
}

type StateMachineLoggingConfigurationArgs struct {
	// Determines whether execution data is included in your log. When set to `false`, data is excluded.
	IncludeExecutionData pulumi.BoolPtrInput `pulumi:"includeExecutionData"`
	// Defines which category of execution history events are logged. Valid values: `ALL`, `ERROR`, `FATAL`, `OFF`
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Amazon Resource Name (ARN) of a CloudWatch log group. Make sure the State Machine has the correct IAM policies for logging. The ARN must end with `:*`
	LogDestination pulumi.StringPtrInput `pulumi:"logDestination"`
}

func (StateMachineLoggingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StateMachineLoggingConfiguration)(nil)).Elem()
}

func (i StateMachineLoggingConfigurationArgs) ToStateMachineLoggingConfigurationOutput() StateMachineLoggingConfigurationOutput {
	return i.ToStateMachineLoggingConfigurationOutputWithContext(context.Background())
}

func (i StateMachineLoggingConfigurationArgs) ToStateMachineLoggingConfigurationOutputWithContext(ctx context.Context) StateMachineLoggingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineLoggingConfigurationOutput)
}

func (i StateMachineLoggingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[StateMachineLoggingConfiguration] {
	return pulumix.Output[StateMachineLoggingConfiguration]{
		OutputState: i.ToStateMachineLoggingConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i StateMachineLoggingConfigurationArgs) ToStateMachineLoggingConfigurationPtrOutput() StateMachineLoggingConfigurationPtrOutput {
	return i.ToStateMachineLoggingConfigurationPtrOutputWithContext(context.Background())
}

func (i StateMachineLoggingConfigurationArgs) ToStateMachineLoggingConfigurationPtrOutputWithContext(ctx context.Context) StateMachineLoggingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineLoggingConfigurationOutput).ToStateMachineLoggingConfigurationPtrOutputWithContext(ctx)
}

// StateMachineLoggingConfigurationPtrInput is an input type that accepts StateMachineLoggingConfigurationArgs, StateMachineLoggingConfigurationPtr and StateMachineLoggingConfigurationPtrOutput values.
// You can construct a concrete instance of `StateMachineLoggingConfigurationPtrInput` via:
//
//	        StateMachineLoggingConfigurationArgs{...}
//
//	or:
//
//	        nil
type StateMachineLoggingConfigurationPtrInput interface {
	pulumi.Input

	ToStateMachineLoggingConfigurationPtrOutput() StateMachineLoggingConfigurationPtrOutput
	ToStateMachineLoggingConfigurationPtrOutputWithContext(context.Context) StateMachineLoggingConfigurationPtrOutput
}

type stateMachineLoggingConfigurationPtrType StateMachineLoggingConfigurationArgs

func StateMachineLoggingConfigurationPtr(v *StateMachineLoggingConfigurationArgs) StateMachineLoggingConfigurationPtrInput {
	return (*stateMachineLoggingConfigurationPtrType)(v)
}

func (*stateMachineLoggingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StateMachineLoggingConfiguration)(nil)).Elem()
}

func (i *stateMachineLoggingConfigurationPtrType) ToStateMachineLoggingConfigurationPtrOutput() StateMachineLoggingConfigurationPtrOutput {
	return i.ToStateMachineLoggingConfigurationPtrOutputWithContext(context.Background())
}

func (i *stateMachineLoggingConfigurationPtrType) ToStateMachineLoggingConfigurationPtrOutputWithContext(ctx context.Context) StateMachineLoggingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineLoggingConfigurationPtrOutput)
}

func (i *stateMachineLoggingConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*StateMachineLoggingConfiguration] {
	return pulumix.Output[*StateMachineLoggingConfiguration]{
		OutputState: i.ToStateMachineLoggingConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type StateMachineLoggingConfigurationOutput struct{ *pulumi.OutputState }

func (StateMachineLoggingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateMachineLoggingConfiguration)(nil)).Elem()
}

func (o StateMachineLoggingConfigurationOutput) ToStateMachineLoggingConfigurationOutput() StateMachineLoggingConfigurationOutput {
	return o
}

func (o StateMachineLoggingConfigurationOutput) ToStateMachineLoggingConfigurationOutputWithContext(ctx context.Context) StateMachineLoggingConfigurationOutput {
	return o
}

func (o StateMachineLoggingConfigurationOutput) ToStateMachineLoggingConfigurationPtrOutput() StateMachineLoggingConfigurationPtrOutput {
	return o.ToStateMachineLoggingConfigurationPtrOutputWithContext(context.Background())
}

func (o StateMachineLoggingConfigurationOutput) ToStateMachineLoggingConfigurationPtrOutputWithContext(ctx context.Context) StateMachineLoggingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StateMachineLoggingConfiguration) *StateMachineLoggingConfiguration {
		return &v
	}).(StateMachineLoggingConfigurationPtrOutput)
}

func (o StateMachineLoggingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[StateMachineLoggingConfiguration] {
	return pulumix.Output[StateMachineLoggingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Determines whether execution data is included in your log. When set to `false`, data is excluded.
func (o StateMachineLoggingConfigurationOutput) IncludeExecutionData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StateMachineLoggingConfiguration) *bool { return v.IncludeExecutionData }).(pulumi.BoolPtrOutput)
}

// Defines which category of execution history events are logged. Valid values: `ALL`, `ERROR`, `FATAL`, `OFF`
func (o StateMachineLoggingConfigurationOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StateMachineLoggingConfiguration) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of a CloudWatch log group. Make sure the State Machine has the correct IAM policies for logging. The ARN must end with `:*`
func (o StateMachineLoggingConfigurationOutput) LogDestination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StateMachineLoggingConfiguration) *string { return v.LogDestination }).(pulumi.StringPtrOutput)
}

type StateMachineLoggingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StateMachineLoggingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StateMachineLoggingConfiguration)(nil)).Elem()
}

func (o StateMachineLoggingConfigurationPtrOutput) ToStateMachineLoggingConfigurationPtrOutput() StateMachineLoggingConfigurationPtrOutput {
	return o
}

func (o StateMachineLoggingConfigurationPtrOutput) ToStateMachineLoggingConfigurationPtrOutputWithContext(ctx context.Context) StateMachineLoggingConfigurationPtrOutput {
	return o
}

func (o StateMachineLoggingConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StateMachineLoggingConfiguration] {
	return pulumix.Output[*StateMachineLoggingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o StateMachineLoggingConfigurationPtrOutput) Elem() StateMachineLoggingConfigurationOutput {
	return o.ApplyT(func(v *StateMachineLoggingConfiguration) StateMachineLoggingConfiguration {
		if v != nil {
			return *v
		}
		var ret StateMachineLoggingConfiguration
		return ret
	}).(StateMachineLoggingConfigurationOutput)
}

// Determines whether execution data is included in your log. When set to `false`, data is excluded.
func (o StateMachineLoggingConfigurationPtrOutput) IncludeExecutionData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StateMachineLoggingConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeExecutionData
	}).(pulumi.BoolPtrOutput)
}

// Defines which category of execution history events are logged. Valid values: `ALL`, `ERROR`, `FATAL`, `OFF`
func (o StateMachineLoggingConfigurationPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StateMachineLoggingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of a CloudWatch log group. Make sure the State Machine has the correct IAM policies for logging. The ARN must end with `:*`
func (o StateMachineLoggingConfigurationPtrOutput) LogDestination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StateMachineLoggingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LogDestination
	}).(pulumi.StringPtrOutput)
}

type StateMachineTracingConfiguration struct {
	// When set to `true`, AWS X-Ray tracing is enabled. Make sure the State Machine has the correct IAM policies for logging. See the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/xray-iam.html) for details.
	Enabled *bool `pulumi:"enabled"`
}

// StateMachineTracingConfigurationInput is an input type that accepts StateMachineTracingConfigurationArgs and StateMachineTracingConfigurationOutput values.
// You can construct a concrete instance of `StateMachineTracingConfigurationInput` via:
//
//	StateMachineTracingConfigurationArgs{...}
type StateMachineTracingConfigurationInput interface {
	pulumi.Input

	ToStateMachineTracingConfigurationOutput() StateMachineTracingConfigurationOutput
	ToStateMachineTracingConfigurationOutputWithContext(context.Context) StateMachineTracingConfigurationOutput
}

type StateMachineTracingConfigurationArgs struct {
	// When set to `true`, AWS X-Ray tracing is enabled. Make sure the State Machine has the correct IAM policies for logging. See the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/xray-iam.html) for details.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (StateMachineTracingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StateMachineTracingConfiguration)(nil)).Elem()
}

func (i StateMachineTracingConfigurationArgs) ToStateMachineTracingConfigurationOutput() StateMachineTracingConfigurationOutput {
	return i.ToStateMachineTracingConfigurationOutputWithContext(context.Background())
}

func (i StateMachineTracingConfigurationArgs) ToStateMachineTracingConfigurationOutputWithContext(ctx context.Context) StateMachineTracingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineTracingConfigurationOutput)
}

func (i StateMachineTracingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[StateMachineTracingConfiguration] {
	return pulumix.Output[StateMachineTracingConfiguration]{
		OutputState: i.ToStateMachineTracingConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i StateMachineTracingConfigurationArgs) ToStateMachineTracingConfigurationPtrOutput() StateMachineTracingConfigurationPtrOutput {
	return i.ToStateMachineTracingConfigurationPtrOutputWithContext(context.Background())
}

func (i StateMachineTracingConfigurationArgs) ToStateMachineTracingConfigurationPtrOutputWithContext(ctx context.Context) StateMachineTracingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineTracingConfigurationOutput).ToStateMachineTracingConfigurationPtrOutputWithContext(ctx)
}

// StateMachineTracingConfigurationPtrInput is an input type that accepts StateMachineTracingConfigurationArgs, StateMachineTracingConfigurationPtr and StateMachineTracingConfigurationPtrOutput values.
// You can construct a concrete instance of `StateMachineTracingConfigurationPtrInput` via:
//
//	        StateMachineTracingConfigurationArgs{...}
//
//	or:
//
//	        nil
type StateMachineTracingConfigurationPtrInput interface {
	pulumi.Input

	ToStateMachineTracingConfigurationPtrOutput() StateMachineTracingConfigurationPtrOutput
	ToStateMachineTracingConfigurationPtrOutputWithContext(context.Context) StateMachineTracingConfigurationPtrOutput
}

type stateMachineTracingConfigurationPtrType StateMachineTracingConfigurationArgs

func StateMachineTracingConfigurationPtr(v *StateMachineTracingConfigurationArgs) StateMachineTracingConfigurationPtrInput {
	return (*stateMachineTracingConfigurationPtrType)(v)
}

func (*stateMachineTracingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StateMachineTracingConfiguration)(nil)).Elem()
}

func (i *stateMachineTracingConfigurationPtrType) ToStateMachineTracingConfigurationPtrOutput() StateMachineTracingConfigurationPtrOutput {
	return i.ToStateMachineTracingConfigurationPtrOutputWithContext(context.Background())
}

func (i *stateMachineTracingConfigurationPtrType) ToStateMachineTracingConfigurationPtrOutputWithContext(ctx context.Context) StateMachineTracingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineTracingConfigurationPtrOutput)
}

func (i *stateMachineTracingConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*StateMachineTracingConfiguration] {
	return pulumix.Output[*StateMachineTracingConfiguration]{
		OutputState: i.ToStateMachineTracingConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type StateMachineTracingConfigurationOutput struct{ *pulumi.OutputState }

func (StateMachineTracingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateMachineTracingConfiguration)(nil)).Elem()
}

func (o StateMachineTracingConfigurationOutput) ToStateMachineTracingConfigurationOutput() StateMachineTracingConfigurationOutput {
	return o
}

func (o StateMachineTracingConfigurationOutput) ToStateMachineTracingConfigurationOutputWithContext(ctx context.Context) StateMachineTracingConfigurationOutput {
	return o
}

func (o StateMachineTracingConfigurationOutput) ToStateMachineTracingConfigurationPtrOutput() StateMachineTracingConfigurationPtrOutput {
	return o.ToStateMachineTracingConfigurationPtrOutputWithContext(context.Background())
}

func (o StateMachineTracingConfigurationOutput) ToStateMachineTracingConfigurationPtrOutputWithContext(ctx context.Context) StateMachineTracingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StateMachineTracingConfiguration) *StateMachineTracingConfiguration {
		return &v
	}).(StateMachineTracingConfigurationPtrOutput)
}

func (o StateMachineTracingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[StateMachineTracingConfiguration] {
	return pulumix.Output[StateMachineTracingConfiguration]{
		OutputState: o.OutputState,
	}
}

// When set to `true`, AWS X-Ray tracing is enabled. Make sure the State Machine has the correct IAM policies for logging. See the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/xray-iam.html) for details.
func (o StateMachineTracingConfigurationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StateMachineTracingConfiguration) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type StateMachineTracingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StateMachineTracingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StateMachineTracingConfiguration)(nil)).Elem()
}

func (o StateMachineTracingConfigurationPtrOutput) ToStateMachineTracingConfigurationPtrOutput() StateMachineTracingConfigurationPtrOutput {
	return o
}

func (o StateMachineTracingConfigurationPtrOutput) ToStateMachineTracingConfigurationPtrOutputWithContext(ctx context.Context) StateMachineTracingConfigurationPtrOutput {
	return o
}

func (o StateMachineTracingConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StateMachineTracingConfiguration] {
	return pulumix.Output[*StateMachineTracingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o StateMachineTracingConfigurationPtrOutput) Elem() StateMachineTracingConfigurationOutput {
	return o.ApplyT(func(v *StateMachineTracingConfiguration) StateMachineTracingConfiguration {
		if v != nil {
			return *v
		}
		var ret StateMachineTracingConfiguration
		return ret
	}).(StateMachineTracingConfigurationOutput)
}

// When set to `true`, AWS X-Ray tracing is enabled. Make sure the State Machine has the correct IAM policies for logging. See the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/xray-iam.html) for details.
func (o StateMachineTracingConfigurationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StateMachineTracingConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type GetAliasRoutingConfiguration struct {
	StateMachineVersionArn string `pulumi:"stateMachineVersionArn"`
	Weight                 int    `pulumi:"weight"`
}

// GetAliasRoutingConfigurationInput is an input type that accepts GetAliasRoutingConfigurationArgs and GetAliasRoutingConfigurationOutput values.
// You can construct a concrete instance of `GetAliasRoutingConfigurationInput` via:
//
//	GetAliasRoutingConfigurationArgs{...}
type GetAliasRoutingConfigurationInput interface {
	pulumi.Input

	ToGetAliasRoutingConfigurationOutput() GetAliasRoutingConfigurationOutput
	ToGetAliasRoutingConfigurationOutputWithContext(context.Context) GetAliasRoutingConfigurationOutput
}

type GetAliasRoutingConfigurationArgs struct {
	StateMachineVersionArn pulumi.StringInput `pulumi:"stateMachineVersionArn"`
	Weight                 pulumi.IntInput    `pulumi:"weight"`
}

func (GetAliasRoutingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAliasRoutingConfiguration)(nil)).Elem()
}

func (i GetAliasRoutingConfigurationArgs) ToGetAliasRoutingConfigurationOutput() GetAliasRoutingConfigurationOutput {
	return i.ToGetAliasRoutingConfigurationOutputWithContext(context.Background())
}

func (i GetAliasRoutingConfigurationArgs) ToGetAliasRoutingConfigurationOutputWithContext(ctx context.Context) GetAliasRoutingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAliasRoutingConfigurationOutput)
}

func (i GetAliasRoutingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[GetAliasRoutingConfiguration] {
	return pulumix.Output[GetAliasRoutingConfiguration]{
		OutputState: i.ToGetAliasRoutingConfigurationOutputWithContext(ctx).OutputState,
	}
}

// GetAliasRoutingConfigurationArrayInput is an input type that accepts GetAliasRoutingConfigurationArray and GetAliasRoutingConfigurationArrayOutput values.
// You can construct a concrete instance of `GetAliasRoutingConfigurationArrayInput` via:
//
//	GetAliasRoutingConfigurationArray{ GetAliasRoutingConfigurationArgs{...} }
type GetAliasRoutingConfigurationArrayInput interface {
	pulumi.Input

	ToGetAliasRoutingConfigurationArrayOutput() GetAliasRoutingConfigurationArrayOutput
	ToGetAliasRoutingConfigurationArrayOutputWithContext(context.Context) GetAliasRoutingConfigurationArrayOutput
}

type GetAliasRoutingConfigurationArray []GetAliasRoutingConfigurationInput

func (GetAliasRoutingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAliasRoutingConfiguration)(nil)).Elem()
}

func (i GetAliasRoutingConfigurationArray) ToGetAliasRoutingConfigurationArrayOutput() GetAliasRoutingConfigurationArrayOutput {
	return i.ToGetAliasRoutingConfigurationArrayOutputWithContext(context.Background())
}

func (i GetAliasRoutingConfigurationArray) ToGetAliasRoutingConfigurationArrayOutputWithContext(ctx context.Context) GetAliasRoutingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAliasRoutingConfigurationArrayOutput)
}

func (i GetAliasRoutingConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAliasRoutingConfiguration] {
	return pulumix.Output[[]GetAliasRoutingConfiguration]{
		OutputState: i.ToGetAliasRoutingConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAliasRoutingConfigurationOutput struct{ *pulumi.OutputState }

func (GetAliasRoutingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAliasRoutingConfiguration)(nil)).Elem()
}

func (o GetAliasRoutingConfigurationOutput) ToGetAliasRoutingConfigurationOutput() GetAliasRoutingConfigurationOutput {
	return o
}

func (o GetAliasRoutingConfigurationOutput) ToGetAliasRoutingConfigurationOutputWithContext(ctx context.Context) GetAliasRoutingConfigurationOutput {
	return o
}

func (o GetAliasRoutingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetAliasRoutingConfiguration] {
	return pulumix.Output[GetAliasRoutingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetAliasRoutingConfigurationOutput) StateMachineVersionArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetAliasRoutingConfiguration) string { return v.StateMachineVersionArn }).(pulumi.StringOutput)
}

func (o GetAliasRoutingConfigurationOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetAliasRoutingConfiguration) int { return v.Weight }).(pulumi.IntOutput)
}

type GetAliasRoutingConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetAliasRoutingConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAliasRoutingConfiguration)(nil)).Elem()
}

func (o GetAliasRoutingConfigurationArrayOutput) ToGetAliasRoutingConfigurationArrayOutput() GetAliasRoutingConfigurationArrayOutput {
	return o
}

func (o GetAliasRoutingConfigurationArrayOutput) ToGetAliasRoutingConfigurationArrayOutputWithContext(ctx context.Context) GetAliasRoutingConfigurationArrayOutput {
	return o
}

func (o GetAliasRoutingConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAliasRoutingConfiguration] {
	return pulumix.Output[[]GetAliasRoutingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetAliasRoutingConfigurationArrayOutput) Index(i pulumi.IntInput) GetAliasRoutingConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAliasRoutingConfiguration {
		return vs[0].([]GetAliasRoutingConfiguration)[vs[1].(int)]
	}).(GetAliasRoutingConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AliasRoutingConfigurationInput)(nil)).Elem(), AliasRoutingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AliasRoutingConfigurationArrayInput)(nil)).Elem(), AliasRoutingConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateMachineLoggingConfigurationInput)(nil)).Elem(), StateMachineLoggingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateMachineLoggingConfigurationPtrInput)(nil)).Elem(), StateMachineLoggingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateMachineTracingConfigurationInput)(nil)).Elem(), StateMachineTracingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateMachineTracingConfigurationPtrInput)(nil)).Elem(), StateMachineTracingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAliasRoutingConfigurationInput)(nil)).Elem(), GetAliasRoutingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAliasRoutingConfigurationArrayInput)(nil)).Elem(), GetAliasRoutingConfigurationArray{})
	pulumi.RegisterOutputType(AliasRoutingConfigurationOutput{})
	pulumi.RegisterOutputType(AliasRoutingConfigurationArrayOutput{})
	pulumi.RegisterOutputType(StateMachineLoggingConfigurationOutput{})
	pulumi.RegisterOutputType(StateMachineLoggingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StateMachineTracingConfigurationOutput{})
	pulumi.RegisterOutputType(StateMachineTracingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(GetAliasRoutingConfigurationOutput{})
	pulumi.RegisterOutputType(GetAliasRoutingConfigurationArrayOutput{})
}
