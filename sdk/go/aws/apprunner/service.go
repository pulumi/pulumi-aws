// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apprunner

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Service struct {
	pulumi.CustomResourceState

	Arn                         pulumi.StringOutput                        `pulumi:"arn"`
	AutoScalingConfigurationArn pulumi.StringOutput                        `pulumi:"autoScalingConfigurationArn"`
	EncryptionConfiguration     ServiceEncryptionConfigurationPtrOutput    `pulumi:"encryptionConfiguration"`
	HealthCheckConfiguration    ServiceHealthCheckConfigurationOutput      `pulumi:"healthCheckConfiguration"`
	InstanceConfiguration       ServiceInstanceConfigurationOutput         `pulumi:"instanceConfiguration"`
	NetworkConfiguration        ServiceNetworkConfigurationOutput          `pulumi:"networkConfiguration"`
	ObservabilityConfiguration  ServiceObservabilityConfigurationPtrOutput `pulumi:"observabilityConfiguration"`
	ServiceId                   pulumi.StringOutput                        `pulumi:"serviceId"`
	ServiceName                 pulumi.StringOutput                        `pulumi:"serviceName"`
	ServiceUrl                  pulumi.StringOutput                        `pulumi:"serviceUrl"`
	SourceConfiguration         ServiceSourceConfigurationOutput           `pulumi:"sourceConfiguration"`
	Status                      pulumi.StringOutput                        `pulumi:"status"`
	Tags                        pulumi.StringMapOutput                     `pulumi:"tags"`
	TagsAll                     pulumi.StringMapOutput                     `pulumi:"tagsAll"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.SourceConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'SourceConfiguration'")
	}
	var resource Service
	err := ctx.RegisterResource("aws:apprunner/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("aws:apprunner/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	Arn                         *string                            `pulumi:"arn"`
	AutoScalingConfigurationArn *string                            `pulumi:"autoScalingConfigurationArn"`
	EncryptionConfiguration     *ServiceEncryptionConfiguration    `pulumi:"encryptionConfiguration"`
	HealthCheckConfiguration    *ServiceHealthCheckConfiguration   `pulumi:"healthCheckConfiguration"`
	InstanceConfiguration       *ServiceInstanceConfiguration      `pulumi:"instanceConfiguration"`
	NetworkConfiguration        *ServiceNetworkConfiguration       `pulumi:"networkConfiguration"`
	ObservabilityConfiguration  *ServiceObservabilityConfiguration `pulumi:"observabilityConfiguration"`
	ServiceId                   *string                            `pulumi:"serviceId"`
	ServiceName                 *string                            `pulumi:"serviceName"`
	ServiceUrl                  *string                            `pulumi:"serviceUrl"`
	SourceConfiguration         *ServiceSourceConfiguration        `pulumi:"sourceConfiguration"`
	Status                      *string                            `pulumi:"status"`
	Tags                        map[string]string                  `pulumi:"tags"`
	TagsAll                     map[string]string                  `pulumi:"tagsAll"`
}

type ServiceState struct {
	Arn                         pulumi.StringPtrInput
	AutoScalingConfigurationArn pulumi.StringPtrInput
	EncryptionConfiguration     ServiceEncryptionConfigurationPtrInput
	HealthCheckConfiguration    ServiceHealthCheckConfigurationPtrInput
	InstanceConfiguration       ServiceInstanceConfigurationPtrInput
	NetworkConfiguration        ServiceNetworkConfigurationPtrInput
	ObservabilityConfiguration  ServiceObservabilityConfigurationPtrInput
	ServiceId                   pulumi.StringPtrInput
	ServiceName                 pulumi.StringPtrInput
	ServiceUrl                  pulumi.StringPtrInput
	SourceConfiguration         ServiceSourceConfigurationPtrInput
	Status                      pulumi.StringPtrInput
	Tags                        pulumi.StringMapInput
	TagsAll                     pulumi.StringMapInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	AutoScalingConfigurationArn *string                            `pulumi:"autoScalingConfigurationArn"`
	EncryptionConfiguration     *ServiceEncryptionConfiguration    `pulumi:"encryptionConfiguration"`
	HealthCheckConfiguration    *ServiceHealthCheckConfiguration   `pulumi:"healthCheckConfiguration"`
	InstanceConfiguration       *ServiceInstanceConfiguration      `pulumi:"instanceConfiguration"`
	NetworkConfiguration        *ServiceNetworkConfiguration       `pulumi:"networkConfiguration"`
	ObservabilityConfiguration  *ServiceObservabilityConfiguration `pulumi:"observabilityConfiguration"`
	ServiceName                 string                             `pulumi:"serviceName"`
	SourceConfiguration         ServiceSourceConfiguration         `pulumi:"sourceConfiguration"`
	Tags                        map[string]string                  `pulumi:"tags"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	AutoScalingConfigurationArn pulumi.StringPtrInput
	EncryptionConfiguration     ServiceEncryptionConfigurationPtrInput
	HealthCheckConfiguration    ServiceHealthCheckConfigurationPtrInput
	InstanceConfiguration       ServiceInstanceConfigurationPtrInput
	NetworkConfiguration        ServiceNetworkConfigurationPtrInput
	ObservabilityConfiguration  ServiceObservabilityConfigurationPtrInput
	ServiceName                 pulumi.StringInput
	SourceConfiguration         ServiceSourceConfigurationInput
	Tags                        pulumi.StringMapInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ServiceOutput) AutoScalingConfigurationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.AutoScalingConfigurationArn }).(pulumi.StringOutput)
}

func (o ServiceOutput) EncryptionConfiguration() ServiceEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *Service) ServiceEncryptionConfigurationPtrOutput { return v.EncryptionConfiguration }).(ServiceEncryptionConfigurationPtrOutput)
}

func (o ServiceOutput) HealthCheckConfiguration() ServiceHealthCheckConfigurationOutput {
	return o.ApplyT(func(v *Service) ServiceHealthCheckConfigurationOutput { return v.HealthCheckConfiguration }).(ServiceHealthCheckConfigurationOutput)
}

func (o ServiceOutput) InstanceConfiguration() ServiceInstanceConfigurationOutput {
	return o.ApplyT(func(v *Service) ServiceInstanceConfigurationOutput { return v.InstanceConfiguration }).(ServiceInstanceConfigurationOutput)
}

func (o ServiceOutput) NetworkConfiguration() ServiceNetworkConfigurationOutput {
	return o.ApplyT(func(v *Service) ServiceNetworkConfigurationOutput { return v.NetworkConfiguration }).(ServiceNetworkConfigurationOutput)
}

func (o ServiceOutput) ObservabilityConfiguration() ServiceObservabilityConfigurationPtrOutput {
	return o.ApplyT(func(v *Service) ServiceObservabilityConfigurationPtrOutput { return v.ObservabilityConfiguration }).(ServiceObservabilityConfigurationPtrOutput)
}

func (o ServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

func (o ServiceOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o ServiceOutput) ServiceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceUrl }).(pulumi.StringOutput)
}

func (o ServiceOutput) SourceConfiguration() ServiceSourceConfigurationOutput {
	return o.ApplyT(func(v *Service) ServiceSourceConfigurationOutput { return v.SourceConfiguration }).(ServiceSourceConfigurationOutput)
}

func (o ServiceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ServiceOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
