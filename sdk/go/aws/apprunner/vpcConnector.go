// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apprunner

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpcConnector struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput      `pulumi:"arn"`
	SecurityGroups       pulumi.StringArrayOutput `pulumi:"securityGroups"`
	Status               pulumi.StringOutput      `pulumi:"status"`
	Subnets              pulumi.StringArrayOutput `pulumi:"subnets"`
	Tags                 pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll              pulumi.StringMapOutput   `pulumi:"tagsAll"`
	VpcConnectorName     pulumi.StringOutput      `pulumi:"vpcConnectorName"`
	VpcConnectorRevision pulumi.IntOutput         `pulumi:"vpcConnectorRevision"`
}

// NewVpcConnector registers a new resource with the given unique name, arguments, and options.
func NewVpcConnector(ctx *pulumi.Context,
	name string, args *VpcConnectorArgs, opts ...pulumi.ResourceOption) (*VpcConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecurityGroups == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroups'")
	}
	if args.Subnets == nil {
		return nil, errors.New("invalid value for required argument 'Subnets'")
	}
	if args.VpcConnectorName == nil {
		return nil, errors.New("invalid value for required argument 'VpcConnectorName'")
	}
	var resource VpcConnector
	err := ctx.RegisterResource("aws:apprunner/vpcConnector:VpcConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcConnector gets an existing VpcConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcConnectorState, opts ...pulumi.ResourceOption) (*VpcConnector, error) {
	var resource VpcConnector
	err := ctx.ReadResource("aws:apprunner/vpcConnector:VpcConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcConnector resources.
type vpcConnectorState struct {
	Arn                  *string           `pulumi:"arn"`
	SecurityGroups       []string          `pulumi:"securityGroups"`
	Status               *string           `pulumi:"status"`
	Subnets              []string          `pulumi:"subnets"`
	Tags                 map[string]string `pulumi:"tags"`
	TagsAll              map[string]string `pulumi:"tagsAll"`
	VpcConnectorName     *string           `pulumi:"vpcConnectorName"`
	VpcConnectorRevision *int              `pulumi:"vpcConnectorRevision"`
}

type VpcConnectorState struct {
	Arn                  pulumi.StringPtrInput
	SecurityGroups       pulumi.StringArrayInput
	Status               pulumi.StringPtrInput
	Subnets              pulumi.StringArrayInput
	Tags                 pulumi.StringMapInput
	TagsAll              pulumi.StringMapInput
	VpcConnectorName     pulumi.StringPtrInput
	VpcConnectorRevision pulumi.IntPtrInput
}

func (VpcConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectorState)(nil)).Elem()
}

type vpcConnectorArgs struct {
	SecurityGroups   []string          `pulumi:"securityGroups"`
	Subnets          []string          `pulumi:"subnets"`
	Tags             map[string]string `pulumi:"tags"`
	VpcConnectorName string            `pulumi:"vpcConnectorName"`
}

// The set of arguments for constructing a VpcConnector resource.
type VpcConnectorArgs struct {
	SecurityGroups   pulumi.StringArrayInput
	Subnets          pulumi.StringArrayInput
	Tags             pulumi.StringMapInput
	VpcConnectorName pulumi.StringInput
}

func (VpcConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectorArgs)(nil)).Elem()
}

type VpcConnectorInput interface {
	pulumi.Input

	ToVpcConnectorOutput() VpcConnectorOutput
	ToVpcConnectorOutputWithContext(ctx context.Context) VpcConnectorOutput
}

func (*VpcConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnector)(nil)).Elem()
}

func (i *VpcConnector) ToVpcConnectorOutput() VpcConnectorOutput {
	return i.ToVpcConnectorOutputWithContext(context.Background())
}

func (i *VpcConnector) ToVpcConnectorOutputWithContext(ctx context.Context) VpcConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectorOutput)
}

// VpcConnectorArrayInput is an input type that accepts VpcConnectorArray and VpcConnectorArrayOutput values.
// You can construct a concrete instance of `VpcConnectorArrayInput` via:
//
//	VpcConnectorArray{ VpcConnectorArgs{...} }
type VpcConnectorArrayInput interface {
	pulumi.Input

	ToVpcConnectorArrayOutput() VpcConnectorArrayOutput
	ToVpcConnectorArrayOutputWithContext(context.Context) VpcConnectorArrayOutput
}

type VpcConnectorArray []VpcConnectorInput

func (VpcConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcConnector)(nil)).Elem()
}

func (i VpcConnectorArray) ToVpcConnectorArrayOutput() VpcConnectorArrayOutput {
	return i.ToVpcConnectorArrayOutputWithContext(context.Background())
}

func (i VpcConnectorArray) ToVpcConnectorArrayOutputWithContext(ctx context.Context) VpcConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectorArrayOutput)
}

// VpcConnectorMapInput is an input type that accepts VpcConnectorMap and VpcConnectorMapOutput values.
// You can construct a concrete instance of `VpcConnectorMapInput` via:
//
//	VpcConnectorMap{ "key": VpcConnectorArgs{...} }
type VpcConnectorMapInput interface {
	pulumi.Input

	ToVpcConnectorMapOutput() VpcConnectorMapOutput
	ToVpcConnectorMapOutputWithContext(context.Context) VpcConnectorMapOutput
}

type VpcConnectorMap map[string]VpcConnectorInput

func (VpcConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcConnector)(nil)).Elem()
}

func (i VpcConnectorMap) ToVpcConnectorMapOutput() VpcConnectorMapOutput {
	return i.ToVpcConnectorMapOutputWithContext(context.Background())
}

func (i VpcConnectorMap) ToVpcConnectorMapOutputWithContext(ctx context.Context) VpcConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectorMapOutput)
}

type VpcConnectorOutput struct{ *pulumi.OutputState }

func (VpcConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnector)(nil)).Elem()
}

func (o VpcConnectorOutput) ToVpcConnectorOutput() VpcConnectorOutput {
	return o
}

func (o VpcConnectorOutput) ToVpcConnectorOutputWithContext(ctx context.Context) VpcConnectorOutput {
	return o
}

func (o VpcConnectorOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnector) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o VpcConnectorOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcConnector) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

func (o VpcConnectorOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnector) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o VpcConnectorOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcConnector) pulumi.StringArrayOutput { return v.Subnets }).(pulumi.StringArrayOutput)
}

func (o VpcConnectorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcConnector) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VpcConnectorOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcConnector) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o VpcConnectorOutput) VpcConnectorName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnector) pulumi.StringOutput { return v.VpcConnectorName }).(pulumi.StringOutput)
}

func (o VpcConnectorOutput) VpcConnectorRevision() pulumi.IntOutput {
	return o.ApplyT(func(v *VpcConnector) pulumi.IntOutput { return v.VpcConnectorRevision }).(pulumi.IntOutput)
}

type VpcConnectorArrayOutput struct{ *pulumi.OutputState }

func (VpcConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcConnector)(nil)).Elem()
}

func (o VpcConnectorArrayOutput) ToVpcConnectorArrayOutput() VpcConnectorArrayOutput {
	return o
}

func (o VpcConnectorArrayOutput) ToVpcConnectorArrayOutputWithContext(ctx context.Context) VpcConnectorArrayOutput {
	return o
}

func (o VpcConnectorArrayOutput) Index(i pulumi.IntInput) VpcConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcConnector {
		return vs[0].([]*VpcConnector)[vs[1].(int)]
	}).(VpcConnectorOutput)
}

type VpcConnectorMapOutput struct{ *pulumi.OutputState }

func (VpcConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcConnector)(nil)).Elem()
}

func (o VpcConnectorMapOutput) ToVpcConnectorMapOutput() VpcConnectorMapOutput {
	return o
}

func (o VpcConnectorMapOutput) ToVpcConnectorMapOutputWithContext(ctx context.Context) VpcConnectorMapOutput {
	return o
}

func (o VpcConnectorMapOutput) MapIndex(k pulumi.StringInput) VpcConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcConnector {
		return vs[0].(map[string]*VpcConnector)[vs[1].(string)]
	}).(VpcConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectorInput)(nil)).Elem(), &VpcConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectorArrayInput)(nil)).Elem(), VpcConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectorMapInput)(nil)).Elem(), VpcConnectorMap{})
	pulumi.RegisterOutputType(VpcConnectorOutput{})
	pulumi.RegisterOutputType(VpcConnectorArrayOutput{})
	pulumi.RegisterOutputType(VpcConnectorMapOutput{})
}
