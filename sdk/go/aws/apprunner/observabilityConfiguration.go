// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apprunner

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ObservabilityConfiguration struct {
	pulumi.CustomResourceState

	Arn                                pulumi.StringOutput                                   `pulumi:"arn"`
	Latest                             pulumi.BoolOutput                                     `pulumi:"latest"`
	ObservabilityConfigurationName     pulumi.StringOutput                                   `pulumi:"observabilityConfigurationName"`
	ObservabilityConfigurationRevision pulumi.IntOutput                                      `pulumi:"observabilityConfigurationRevision"`
	Status                             pulumi.StringOutput                                   `pulumi:"status"`
	Tags                               pulumi.StringMapOutput                                `pulumi:"tags"`
	TagsAll                            pulumi.StringMapOutput                                `pulumi:"tagsAll"`
	TraceConfiguration                 ObservabilityConfigurationTraceConfigurationPtrOutput `pulumi:"traceConfiguration"`
}

// NewObservabilityConfiguration registers a new resource with the given unique name, arguments, and options.
func NewObservabilityConfiguration(ctx *pulumi.Context,
	name string, args *ObservabilityConfigurationArgs, opts ...pulumi.ResourceOption) (*ObservabilityConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ObservabilityConfigurationName == nil {
		return nil, errors.New("invalid value for required argument 'ObservabilityConfigurationName'")
	}
	var resource ObservabilityConfiguration
	err := ctx.RegisterResource("aws:apprunner/observabilityConfiguration:ObservabilityConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObservabilityConfiguration gets an existing ObservabilityConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObservabilityConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObservabilityConfigurationState, opts ...pulumi.ResourceOption) (*ObservabilityConfiguration, error) {
	var resource ObservabilityConfiguration
	err := ctx.ReadResource("aws:apprunner/observabilityConfiguration:ObservabilityConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObservabilityConfiguration resources.
type observabilityConfigurationState struct {
	Arn                                *string                                       `pulumi:"arn"`
	Latest                             *bool                                         `pulumi:"latest"`
	ObservabilityConfigurationName     *string                                       `pulumi:"observabilityConfigurationName"`
	ObservabilityConfigurationRevision *int                                          `pulumi:"observabilityConfigurationRevision"`
	Status                             *string                                       `pulumi:"status"`
	Tags                               map[string]string                             `pulumi:"tags"`
	TagsAll                            map[string]string                             `pulumi:"tagsAll"`
	TraceConfiguration                 *ObservabilityConfigurationTraceConfiguration `pulumi:"traceConfiguration"`
}

type ObservabilityConfigurationState struct {
	Arn                                pulumi.StringPtrInput
	Latest                             pulumi.BoolPtrInput
	ObservabilityConfigurationName     pulumi.StringPtrInput
	ObservabilityConfigurationRevision pulumi.IntPtrInput
	Status                             pulumi.StringPtrInput
	Tags                               pulumi.StringMapInput
	TagsAll                            pulumi.StringMapInput
	TraceConfiguration                 ObservabilityConfigurationTraceConfigurationPtrInput
}

func (ObservabilityConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityConfigurationState)(nil)).Elem()
}

type observabilityConfigurationArgs struct {
	ObservabilityConfigurationName string                                        `pulumi:"observabilityConfigurationName"`
	Tags                           map[string]string                             `pulumi:"tags"`
	TraceConfiguration             *ObservabilityConfigurationTraceConfiguration `pulumi:"traceConfiguration"`
}

// The set of arguments for constructing a ObservabilityConfiguration resource.
type ObservabilityConfigurationArgs struct {
	ObservabilityConfigurationName pulumi.StringInput
	Tags                           pulumi.StringMapInput
	TraceConfiguration             ObservabilityConfigurationTraceConfigurationPtrInput
}

func (ObservabilityConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityConfigurationArgs)(nil)).Elem()
}

type ObservabilityConfigurationInput interface {
	pulumi.Input

	ToObservabilityConfigurationOutput() ObservabilityConfigurationOutput
	ToObservabilityConfigurationOutputWithContext(ctx context.Context) ObservabilityConfigurationOutput
}

func (*ObservabilityConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityConfiguration)(nil)).Elem()
}

func (i *ObservabilityConfiguration) ToObservabilityConfigurationOutput() ObservabilityConfigurationOutput {
	return i.ToObservabilityConfigurationOutputWithContext(context.Background())
}

func (i *ObservabilityConfiguration) ToObservabilityConfigurationOutputWithContext(ctx context.Context) ObservabilityConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityConfigurationOutput)
}

// ObservabilityConfigurationArrayInput is an input type that accepts ObservabilityConfigurationArray and ObservabilityConfigurationArrayOutput values.
// You can construct a concrete instance of `ObservabilityConfigurationArrayInput` via:
//
//	ObservabilityConfigurationArray{ ObservabilityConfigurationArgs{...} }
type ObservabilityConfigurationArrayInput interface {
	pulumi.Input

	ToObservabilityConfigurationArrayOutput() ObservabilityConfigurationArrayOutput
	ToObservabilityConfigurationArrayOutputWithContext(context.Context) ObservabilityConfigurationArrayOutput
}

type ObservabilityConfigurationArray []ObservabilityConfigurationInput

func (ObservabilityConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityConfiguration)(nil)).Elem()
}

func (i ObservabilityConfigurationArray) ToObservabilityConfigurationArrayOutput() ObservabilityConfigurationArrayOutput {
	return i.ToObservabilityConfigurationArrayOutputWithContext(context.Background())
}

func (i ObservabilityConfigurationArray) ToObservabilityConfigurationArrayOutputWithContext(ctx context.Context) ObservabilityConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityConfigurationArrayOutput)
}

// ObservabilityConfigurationMapInput is an input type that accepts ObservabilityConfigurationMap and ObservabilityConfigurationMapOutput values.
// You can construct a concrete instance of `ObservabilityConfigurationMapInput` via:
//
//	ObservabilityConfigurationMap{ "key": ObservabilityConfigurationArgs{...} }
type ObservabilityConfigurationMapInput interface {
	pulumi.Input

	ToObservabilityConfigurationMapOutput() ObservabilityConfigurationMapOutput
	ToObservabilityConfigurationMapOutputWithContext(context.Context) ObservabilityConfigurationMapOutput
}

type ObservabilityConfigurationMap map[string]ObservabilityConfigurationInput

func (ObservabilityConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityConfiguration)(nil)).Elem()
}

func (i ObservabilityConfigurationMap) ToObservabilityConfigurationMapOutput() ObservabilityConfigurationMapOutput {
	return i.ToObservabilityConfigurationMapOutputWithContext(context.Background())
}

func (i ObservabilityConfigurationMap) ToObservabilityConfigurationMapOutputWithContext(ctx context.Context) ObservabilityConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityConfigurationMapOutput)
}

type ObservabilityConfigurationOutput struct{ *pulumi.OutputState }

func (ObservabilityConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityConfiguration)(nil)).Elem()
}

func (o ObservabilityConfigurationOutput) ToObservabilityConfigurationOutput() ObservabilityConfigurationOutput {
	return o
}

func (o ObservabilityConfigurationOutput) ToObservabilityConfigurationOutputWithContext(ctx context.Context) ObservabilityConfigurationOutput {
	return o
}

func (o ObservabilityConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ObservabilityConfigurationOutput) Latest() pulumi.BoolOutput {
	return o.ApplyT(func(v *ObservabilityConfiguration) pulumi.BoolOutput { return v.Latest }).(pulumi.BoolOutput)
}

func (o ObservabilityConfigurationOutput) ObservabilityConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityConfiguration) pulumi.StringOutput { return v.ObservabilityConfigurationName }).(pulumi.StringOutput)
}

func (o ObservabilityConfigurationOutput) ObservabilityConfigurationRevision() pulumi.IntOutput {
	return o.ApplyT(func(v *ObservabilityConfiguration) pulumi.IntOutput { return v.ObservabilityConfigurationRevision }).(pulumi.IntOutput)
}

func (o ObservabilityConfigurationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityConfiguration) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ObservabilityConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObservabilityConfiguration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ObservabilityConfigurationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObservabilityConfiguration) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ObservabilityConfigurationOutput) TraceConfiguration() ObservabilityConfigurationTraceConfigurationPtrOutput {
	return o.ApplyT(func(v *ObservabilityConfiguration) ObservabilityConfigurationTraceConfigurationPtrOutput {
		return v.TraceConfiguration
	}).(ObservabilityConfigurationTraceConfigurationPtrOutput)
}

type ObservabilityConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityConfiguration)(nil)).Elem()
}

func (o ObservabilityConfigurationArrayOutput) ToObservabilityConfigurationArrayOutput() ObservabilityConfigurationArrayOutput {
	return o
}

func (o ObservabilityConfigurationArrayOutput) ToObservabilityConfigurationArrayOutputWithContext(ctx context.Context) ObservabilityConfigurationArrayOutput {
	return o
}

func (o ObservabilityConfigurationArrayOutput) Index(i pulumi.IntInput) ObservabilityConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObservabilityConfiguration {
		return vs[0].([]*ObservabilityConfiguration)[vs[1].(int)]
	}).(ObservabilityConfigurationOutput)
}

type ObservabilityConfigurationMapOutput struct{ *pulumi.OutputState }

func (ObservabilityConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityConfiguration)(nil)).Elem()
}

func (o ObservabilityConfigurationMapOutput) ToObservabilityConfigurationMapOutput() ObservabilityConfigurationMapOutput {
	return o
}

func (o ObservabilityConfigurationMapOutput) ToObservabilityConfigurationMapOutputWithContext(ctx context.Context) ObservabilityConfigurationMapOutput {
	return o
}

func (o ObservabilityConfigurationMapOutput) MapIndex(k pulumi.StringInput) ObservabilityConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObservabilityConfiguration {
		return vs[0].(map[string]*ObservabilityConfiguration)[vs[1].(string)]
	}).(ObservabilityConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityConfigurationInput)(nil)).Elem(), &ObservabilityConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityConfigurationArrayInput)(nil)).Elem(), ObservabilityConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityConfigurationMapInput)(nil)).Elem(), ObservabilityConfigurationMap{})
	pulumi.RegisterOutputType(ObservabilityConfigurationOutput{})
	pulumi.RegisterOutputType(ObservabilityConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityConfigurationMapOutput{})
}
