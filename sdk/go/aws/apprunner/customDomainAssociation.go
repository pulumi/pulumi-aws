// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apprunner

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an App Runner Custom Domain association.
//
// > **NOTE:** After creation, you must use the information in the `certificationValidationRecords` attribute to add CNAME records to your Domain Name System (DNS). For each mapped domain name, add a mapping to the target App Runner subdomain (found in the `dnsTarget` attribute) and one or more certificate validation records. App Runner then performs DNS validation to verify that you own or control the domain name you associated. App Runner tracks domain validity in a certificate stored in AWS Certificate Manager (ACM).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/apprunner"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := apprunner.NewCustomDomainAssociation(ctx, "example", &apprunner.CustomDomainAssociationArgs{
// 			DomainName: pulumi.String("example.com"),
// 			ServiceArn: pulumi.Any(aws_apprunner_service.Example.Arn),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// App Runner Custom Domain Associations can be imported by using the `domain_name` and `service_arn` separated by a comma (`,`), e.g.,
//
// ```sh
//  $ pulumi import aws:apprunner/customDomainAssociation:CustomDomainAssociation example example.com,arn:aws:apprunner:us-east-1:123456789012:service/example-
// ```
//
//  app/8fe1e10304f84fd2b0df550fe98a71fa
type CustomDomainAssociation struct {
	pulumi.CustomResourceState

	// A set of certificate CNAME records used for this domain name. See Certificate Validation Records below for more details.
	CertificateValidationRecords CustomDomainAssociationCertificateValidationRecordArrayOutput `pulumi:"certificateValidationRecords"`
	// The App Runner subdomain of the App Runner service. The custom domain name is mapped to this target name. Attribute only available if resource created (not imported) with this provider.
	DnsTarget pulumi.StringOutput `pulumi:"dnsTarget"`
	// The custom domain endpoint to association. Specify a base domain e.g., `example.com` or a subdomain e.g., `subdomain.example.com`.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Whether to associate the subdomain with the App Runner service in addition to the base domain. Defaults to `true`.
	EnableWwwSubdomain pulumi.BoolPtrOutput `pulumi:"enableWwwSubdomain"`
	// The ARN of the App Runner service.
	ServiceArn pulumi.StringOutput `pulumi:"serviceArn"`
	// The current state of the certificate CNAME record validation. It should change to `SUCCESS` after App Runner completes validation with your DNS.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewCustomDomainAssociation registers a new resource with the given unique name, arguments, and options.
func NewCustomDomainAssociation(ctx *pulumi.Context,
	name string, args *CustomDomainAssociationArgs, opts ...pulumi.ResourceOption) (*CustomDomainAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.ServiceArn == nil {
		return nil, errors.New("invalid value for required argument 'ServiceArn'")
	}
	var resource CustomDomainAssociation
	err := ctx.RegisterResource("aws:apprunner/customDomainAssociation:CustomDomainAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomDomainAssociation gets an existing CustomDomainAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomDomainAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomDomainAssociationState, opts ...pulumi.ResourceOption) (*CustomDomainAssociation, error) {
	var resource CustomDomainAssociation
	err := ctx.ReadResource("aws:apprunner/customDomainAssociation:CustomDomainAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomDomainAssociation resources.
type customDomainAssociationState struct {
	// A set of certificate CNAME records used for this domain name. See Certificate Validation Records below for more details.
	CertificateValidationRecords []CustomDomainAssociationCertificateValidationRecord `pulumi:"certificateValidationRecords"`
	// The App Runner subdomain of the App Runner service. The custom domain name is mapped to this target name. Attribute only available if resource created (not imported) with this provider.
	DnsTarget *string `pulumi:"dnsTarget"`
	// The custom domain endpoint to association. Specify a base domain e.g., `example.com` or a subdomain e.g., `subdomain.example.com`.
	DomainName *string `pulumi:"domainName"`
	// Whether to associate the subdomain with the App Runner service in addition to the base domain. Defaults to `true`.
	EnableWwwSubdomain *bool `pulumi:"enableWwwSubdomain"`
	// The ARN of the App Runner service.
	ServiceArn *string `pulumi:"serviceArn"`
	// The current state of the certificate CNAME record validation. It should change to `SUCCESS` after App Runner completes validation with your DNS.
	Status *string `pulumi:"status"`
}

type CustomDomainAssociationState struct {
	// A set of certificate CNAME records used for this domain name. See Certificate Validation Records below for more details.
	CertificateValidationRecords CustomDomainAssociationCertificateValidationRecordArrayInput
	// The App Runner subdomain of the App Runner service. The custom domain name is mapped to this target name. Attribute only available if resource created (not imported) with this provider.
	DnsTarget pulumi.StringPtrInput
	// The custom domain endpoint to association. Specify a base domain e.g., `example.com` or a subdomain e.g., `subdomain.example.com`.
	DomainName pulumi.StringPtrInput
	// Whether to associate the subdomain with the App Runner service in addition to the base domain. Defaults to `true`.
	EnableWwwSubdomain pulumi.BoolPtrInput
	// The ARN of the App Runner service.
	ServiceArn pulumi.StringPtrInput
	// The current state of the certificate CNAME record validation. It should change to `SUCCESS` after App Runner completes validation with your DNS.
	Status pulumi.StringPtrInput
}

func (CustomDomainAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*customDomainAssociationState)(nil)).Elem()
}

type customDomainAssociationArgs struct {
	// The custom domain endpoint to association. Specify a base domain e.g., `example.com` or a subdomain e.g., `subdomain.example.com`.
	DomainName string `pulumi:"domainName"`
	// Whether to associate the subdomain with the App Runner service in addition to the base domain. Defaults to `true`.
	EnableWwwSubdomain *bool `pulumi:"enableWwwSubdomain"`
	// The ARN of the App Runner service.
	ServiceArn string `pulumi:"serviceArn"`
}

// The set of arguments for constructing a CustomDomainAssociation resource.
type CustomDomainAssociationArgs struct {
	// The custom domain endpoint to association. Specify a base domain e.g., `example.com` or a subdomain e.g., `subdomain.example.com`.
	DomainName pulumi.StringInput
	// Whether to associate the subdomain with the App Runner service in addition to the base domain. Defaults to `true`.
	EnableWwwSubdomain pulumi.BoolPtrInput
	// The ARN of the App Runner service.
	ServiceArn pulumi.StringInput
}

func (CustomDomainAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customDomainAssociationArgs)(nil)).Elem()
}

type CustomDomainAssociationInput interface {
	pulumi.Input

	ToCustomDomainAssociationOutput() CustomDomainAssociationOutput
	ToCustomDomainAssociationOutputWithContext(ctx context.Context) CustomDomainAssociationOutput
}

func (*CustomDomainAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDomainAssociation)(nil)).Elem()
}

func (i *CustomDomainAssociation) ToCustomDomainAssociationOutput() CustomDomainAssociationOutput {
	return i.ToCustomDomainAssociationOutputWithContext(context.Background())
}

func (i *CustomDomainAssociation) ToCustomDomainAssociationOutputWithContext(ctx context.Context) CustomDomainAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainAssociationOutput)
}

// CustomDomainAssociationArrayInput is an input type that accepts CustomDomainAssociationArray and CustomDomainAssociationArrayOutput values.
// You can construct a concrete instance of `CustomDomainAssociationArrayInput` via:
//
//          CustomDomainAssociationArray{ CustomDomainAssociationArgs{...} }
type CustomDomainAssociationArrayInput interface {
	pulumi.Input

	ToCustomDomainAssociationArrayOutput() CustomDomainAssociationArrayOutput
	ToCustomDomainAssociationArrayOutputWithContext(context.Context) CustomDomainAssociationArrayOutput
}

type CustomDomainAssociationArray []CustomDomainAssociationInput

func (CustomDomainAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomDomainAssociation)(nil)).Elem()
}

func (i CustomDomainAssociationArray) ToCustomDomainAssociationArrayOutput() CustomDomainAssociationArrayOutput {
	return i.ToCustomDomainAssociationArrayOutputWithContext(context.Background())
}

func (i CustomDomainAssociationArray) ToCustomDomainAssociationArrayOutputWithContext(ctx context.Context) CustomDomainAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainAssociationArrayOutput)
}

// CustomDomainAssociationMapInput is an input type that accepts CustomDomainAssociationMap and CustomDomainAssociationMapOutput values.
// You can construct a concrete instance of `CustomDomainAssociationMapInput` via:
//
//          CustomDomainAssociationMap{ "key": CustomDomainAssociationArgs{...} }
type CustomDomainAssociationMapInput interface {
	pulumi.Input

	ToCustomDomainAssociationMapOutput() CustomDomainAssociationMapOutput
	ToCustomDomainAssociationMapOutputWithContext(context.Context) CustomDomainAssociationMapOutput
}

type CustomDomainAssociationMap map[string]CustomDomainAssociationInput

func (CustomDomainAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomDomainAssociation)(nil)).Elem()
}

func (i CustomDomainAssociationMap) ToCustomDomainAssociationMapOutput() CustomDomainAssociationMapOutput {
	return i.ToCustomDomainAssociationMapOutputWithContext(context.Background())
}

func (i CustomDomainAssociationMap) ToCustomDomainAssociationMapOutputWithContext(ctx context.Context) CustomDomainAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainAssociationMapOutput)
}

type CustomDomainAssociationOutput struct{ *pulumi.OutputState }

func (CustomDomainAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDomainAssociation)(nil)).Elem()
}

func (o CustomDomainAssociationOutput) ToCustomDomainAssociationOutput() CustomDomainAssociationOutput {
	return o
}

func (o CustomDomainAssociationOutput) ToCustomDomainAssociationOutputWithContext(ctx context.Context) CustomDomainAssociationOutput {
	return o
}

// A set of certificate CNAME records used for this domain name. See Certificate Validation Records below for more details.
func (o CustomDomainAssociationOutput) CertificateValidationRecords() CustomDomainAssociationCertificateValidationRecordArrayOutput {
	return o.ApplyT(func(v *CustomDomainAssociation) CustomDomainAssociationCertificateValidationRecordArrayOutput {
		return v.CertificateValidationRecords
	}).(CustomDomainAssociationCertificateValidationRecordArrayOutput)
}

// The App Runner subdomain of the App Runner service. The custom domain name is mapped to this target name. Attribute only available if resource created (not imported) with this provider.
func (o CustomDomainAssociationOutput) DnsTarget() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDomainAssociation) pulumi.StringOutput { return v.DnsTarget }).(pulumi.StringOutput)
}

// The custom domain endpoint to association. Specify a base domain e.g., `example.com` or a subdomain e.g., `subdomain.example.com`.
func (o CustomDomainAssociationOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDomainAssociation) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Whether to associate the subdomain with the App Runner service in addition to the base domain. Defaults to `true`.
func (o CustomDomainAssociationOutput) EnableWwwSubdomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CustomDomainAssociation) pulumi.BoolPtrOutput { return v.EnableWwwSubdomain }).(pulumi.BoolPtrOutput)
}

// The ARN of the App Runner service.
func (o CustomDomainAssociationOutput) ServiceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDomainAssociation) pulumi.StringOutput { return v.ServiceArn }).(pulumi.StringOutput)
}

// The current state of the certificate CNAME record validation. It should change to `SUCCESS` after App Runner completes validation with your DNS.
func (o CustomDomainAssociationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDomainAssociation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type CustomDomainAssociationArrayOutput struct{ *pulumi.OutputState }

func (CustomDomainAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomDomainAssociation)(nil)).Elem()
}

func (o CustomDomainAssociationArrayOutput) ToCustomDomainAssociationArrayOutput() CustomDomainAssociationArrayOutput {
	return o
}

func (o CustomDomainAssociationArrayOutput) ToCustomDomainAssociationArrayOutputWithContext(ctx context.Context) CustomDomainAssociationArrayOutput {
	return o
}

func (o CustomDomainAssociationArrayOutput) Index(i pulumi.IntInput) CustomDomainAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomDomainAssociation {
		return vs[0].([]*CustomDomainAssociation)[vs[1].(int)]
	}).(CustomDomainAssociationOutput)
}

type CustomDomainAssociationMapOutput struct{ *pulumi.OutputState }

func (CustomDomainAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomDomainAssociation)(nil)).Elem()
}

func (o CustomDomainAssociationMapOutput) ToCustomDomainAssociationMapOutput() CustomDomainAssociationMapOutput {
	return o
}

func (o CustomDomainAssociationMapOutput) ToCustomDomainAssociationMapOutputWithContext(ctx context.Context) CustomDomainAssociationMapOutput {
	return o
}

func (o CustomDomainAssociationMapOutput) MapIndex(k pulumi.StringInput) CustomDomainAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomDomainAssociation {
		return vs[0].(map[string]*CustomDomainAssociation)[vs[1].(string)]
	}).(CustomDomainAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDomainAssociationInput)(nil)).Elem(), &CustomDomainAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDomainAssociationArrayInput)(nil)).Elem(), CustomDomainAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDomainAssociationMapInput)(nil)).Elem(), CustomDomainAssociationMap{})
	pulumi.RegisterOutputType(CustomDomainAssociationOutput{})
	pulumi.RegisterOutputType(CustomDomainAssociationArrayOutput{})
	pulumi.RegisterOutputType(CustomDomainAssociationMapOutput{})
}
