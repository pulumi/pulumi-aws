// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package neptune

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterSnapshot struct {
	pulumi.CustomResourceState

	AllocatedStorage            pulumi.IntOutput         `pulumi:"allocatedStorage"`
	AvailabilityZones           pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	DbClusterIdentifier         pulumi.StringOutput      `pulumi:"dbClusterIdentifier"`
	DbClusterSnapshotArn        pulumi.StringOutput      `pulumi:"dbClusterSnapshotArn"`
	DbClusterSnapshotIdentifier pulumi.StringOutput      `pulumi:"dbClusterSnapshotIdentifier"`
	Engine                      pulumi.StringOutput      `pulumi:"engine"`
	EngineVersion               pulumi.StringOutput      `pulumi:"engineVersion"`
	KmsKeyId                    pulumi.StringOutput      `pulumi:"kmsKeyId"`
	LicenseModel                pulumi.StringOutput      `pulumi:"licenseModel"`
	Port                        pulumi.IntOutput         `pulumi:"port"`
	SnapshotType                pulumi.StringOutput      `pulumi:"snapshotType"`
	SourceDbClusterSnapshotArn  pulumi.StringOutput      `pulumi:"sourceDbClusterSnapshotArn"`
	Status                      pulumi.StringOutput      `pulumi:"status"`
	StorageEncrypted            pulumi.BoolOutput        `pulumi:"storageEncrypted"`
	VpcId                       pulumi.StringOutput      `pulumi:"vpcId"`
}

// NewClusterSnapshot registers a new resource with the given unique name, arguments, and options.
func NewClusterSnapshot(ctx *pulumi.Context,
	name string, args *ClusterSnapshotArgs, opts ...pulumi.ResourceOption) (*ClusterSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterIdentifier'")
	}
	if args.DbClusterSnapshotIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterSnapshotIdentifier'")
	}
	var resource ClusterSnapshot
	err := ctx.RegisterResource("aws:neptune/clusterSnapshot:ClusterSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterSnapshot gets an existing ClusterSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterSnapshotState, opts ...pulumi.ResourceOption) (*ClusterSnapshot, error) {
	var resource ClusterSnapshot
	err := ctx.ReadResource("aws:neptune/clusterSnapshot:ClusterSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterSnapshot resources.
type clusterSnapshotState struct {
	AllocatedStorage            *int     `pulumi:"allocatedStorage"`
	AvailabilityZones           []string `pulumi:"availabilityZones"`
	DbClusterIdentifier         *string  `pulumi:"dbClusterIdentifier"`
	DbClusterSnapshotArn        *string  `pulumi:"dbClusterSnapshotArn"`
	DbClusterSnapshotIdentifier *string  `pulumi:"dbClusterSnapshotIdentifier"`
	Engine                      *string  `pulumi:"engine"`
	EngineVersion               *string  `pulumi:"engineVersion"`
	KmsKeyId                    *string  `pulumi:"kmsKeyId"`
	LicenseModel                *string  `pulumi:"licenseModel"`
	Port                        *int     `pulumi:"port"`
	SnapshotType                *string  `pulumi:"snapshotType"`
	SourceDbClusterSnapshotArn  *string  `pulumi:"sourceDbClusterSnapshotArn"`
	Status                      *string  `pulumi:"status"`
	StorageEncrypted            *bool    `pulumi:"storageEncrypted"`
	VpcId                       *string  `pulumi:"vpcId"`
}

type ClusterSnapshotState struct {
	AllocatedStorage            pulumi.IntPtrInput
	AvailabilityZones           pulumi.StringArrayInput
	DbClusterIdentifier         pulumi.StringPtrInput
	DbClusterSnapshotArn        pulumi.StringPtrInput
	DbClusterSnapshotIdentifier pulumi.StringPtrInput
	Engine                      pulumi.StringPtrInput
	EngineVersion               pulumi.StringPtrInput
	KmsKeyId                    pulumi.StringPtrInput
	LicenseModel                pulumi.StringPtrInput
	Port                        pulumi.IntPtrInput
	SnapshotType                pulumi.StringPtrInput
	SourceDbClusterSnapshotArn  pulumi.StringPtrInput
	Status                      pulumi.StringPtrInput
	StorageEncrypted            pulumi.BoolPtrInput
	VpcId                       pulumi.StringPtrInput
}

func (ClusterSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSnapshotState)(nil)).Elem()
}

type clusterSnapshotArgs struct {
	DbClusterIdentifier         string `pulumi:"dbClusterIdentifier"`
	DbClusterSnapshotIdentifier string `pulumi:"dbClusterSnapshotIdentifier"`
}

// The set of arguments for constructing a ClusterSnapshot resource.
type ClusterSnapshotArgs struct {
	DbClusterIdentifier         pulumi.StringInput
	DbClusterSnapshotIdentifier pulumi.StringInput
}

func (ClusterSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSnapshotArgs)(nil)).Elem()
}

type ClusterSnapshotInput interface {
	pulumi.Input

	ToClusterSnapshotOutput() ClusterSnapshotOutput
	ToClusterSnapshotOutputWithContext(ctx context.Context) ClusterSnapshotOutput
}

func (*ClusterSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSnapshot)(nil)).Elem()
}

func (i *ClusterSnapshot) ToClusterSnapshotOutput() ClusterSnapshotOutput {
	return i.ToClusterSnapshotOutputWithContext(context.Background())
}

func (i *ClusterSnapshot) ToClusterSnapshotOutputWithContext(ctx context.Context) ClusterSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotOutput)
}

// ClusterSnapshotArrayInput is an input type that accepts ClusterSnapshotArray and ClusterSnapshotArrayOutput values.
// You can construct a concrete instance of `ClusterSnapshotArrayInput` via:
//
//	ClusterSnapshotArray{ ClusterSnapshotArgs{...} }
type ClusterSnapshotArrayInput interface {
	pulumi.Input

	ToClusterSnapshotArrayOutput() ClusterSnapshotArrayOutput
	ToClusterSnapshotArrayOutputWithContext(context.Context) ClusterSnapshotArrayOutput
}

type ClusterSnapshotArray []ClusterSnapshotInput

func (ClusterSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterSnapshot)(nil)).Elem()
}

func (i ClusterSnapshotArray) ToClusterSnapshotArrayOutput() ClusterSnapshotArrayOutput {
	return i.ToClusterSnapshotArrayOutputWithContext(context.Background())
}

func (i ClusterSnapshotArray) ToClusterSnapshotArrayOutputWithContext(ctx context.Context) ClusterSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotArrayOutput)
}

// ClusterSnapshotMapInput is an input type that accepts ClusterSnapshotMap and ClusterSnapshotMapOutput values.
// You can construct a concrete instance of `ClusterSnapshotMapInput` via:
//
//	ClusterSnapshotMap{ "key": ClusterSnapshotArgs{...} }
type ClusterSnapshotMapInput interface {
	pulumi.Input

	ToClusterSnapshotMapOutput() ClusterSnapshotMapOutput
	ToClusterSnapshotMapOutputWithContext(context.Context) ClusterSnapshotMapOutput
}

type ClusterSnapshotMap map[string]ClusterSnapshotInput

func (ClusterSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterSnapshot)(nil)).Elem()
}

func (i ClusterSnapshotMap) ToClusterSnapshotMapOutput() ClusterSnapshotMapOutput {
	return i.ToClusterSnapshotMapOutputWithContext(context.Background())
}

func (i ClusterSnapshotMap) ToClusterSnapshotMapOutputWithContext(ctx context.Context) ClusterSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotMapOutput)
}

type ClusterSnapshotOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSnapshot)(nil)).Elem()
}

func (o ClusterSnapshotOutput) ToClusterSnapshotOutput() ClusterSnapshotOutput {
	return o
}

func (o ClusterSnapshotOutput) ToClusterSnapshotOutputWithContext(ctx context.Context) ClusterSnapshotOutput {
	return o
}

func (o ClusterSnapshotOutput) AllocatedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.IntOutput { return v.AllocatedStorage }).(pulumi.IntOutput)
}

func (o ClusterSnapshotOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

func (o ClusterSnapshotOutput) DbClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.DbClusterIdentifier }).(pulumi.StringOutput)
}

func (o ClusterSnapshotOutput) DbClusterSnapshotArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.DbClusterSnapshotArn }).(pulumi.StringOutput)
}

func (o ClusterSnapshotOutput) DbClusterSnapshotIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.DbClusterSnapshotIdentifier }).(pulumi.StringOutput)
}

func (o ClusterSnapshotOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

func (o ClusterSnapshotOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

func (o ClusterSnapshotOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

func (o ClusterSnapshotOutput) LicenseModel() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.LicenseModel }).(pulumi.StringOutput)
}

func (o ClusterSnapshotOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o ClusterSnapshotOutput) SnapshotType() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.SnapshotType }).(pulumi.StringOutput)
}

func (o ClusterSnapshotOutput) SourceDbClusterSnapshotArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.SourceDbClusterSnapshotArn }).(pulumi.StringOutput)
}

func (o ClusterSnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ClusterSnapshotOutput) StorageEncrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.BoolOutput { return v.StorageEncrypted }).(pulumi.BoolOutput)
}

func (o ClusterSnapshotOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterSnapshotArrayOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterSnapshot)(nil)).Elem()
}

func (o ClusterSnapshotArrayOutput) ToClusterSnapshotArrayOutput() ClusterSnapshotArrayOutput {
	return o
}

func (o ClusterSnapshotArrayOutput) ToClusterSnapshotArrayOutputWithContext(ctx context.Context) ClusterSnapshotArrayOutput {
	return o
}

func (o ClusterSnapshotArrayOutput) Index(i pulumi.IntInput) ClusterSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterSnapshot {
		return vs[0].([]*ClusterSnapshot)[vs[1].(int)]
	}).(ClusterSnapshotOutput)
}

type ClusterSnapshotMapOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterSnapshot)(nil)).Elem()
}

func (o ClusterSnapshotMapOutput) ToClusterSnapshotMapOutput() ClusterSnapshotMapOutput {
	return o
}

func (o ClusterSnapshotMapOutput) ToClusterSnapshotMapOutputWithContext(ctx context.Context) ClusterSnapshotMapOutput {
	return o
}

func (o ClusterSnapshotMapOutput) MapIndex(k pulumi.StringInput) ClusterSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterSnapshot {
		return vs[0].(map[string]*ClusterSnapshot)[vs[1].(string)]
	}).(ClusterSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSnapshotInput)(nil)).Elem(), &ClusterSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSnapshotArrayInput)(nil)).Elem(), ClusterSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSnapshotMapInput)(nil)).Elem(), ClusterSnapshotMap{})
	pulumi.RegisterOutputType(ClusterSnapshotOutput{})
	pulumi.RegisterOutputType(ClusterSnapshotArrayOutput{})
	pulumi.RegisterOutputType(ClusterSnapshotMapOutput{})
}
