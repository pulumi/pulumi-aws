// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ProjectArtifacts struct {
	// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
	ArtifactIdentifier *string `pulumi:"artifactIdentifier"`
	// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
	EncryptionDisabled *bool `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
	Location *string `pulumi:"location"`
	// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
	Name *string `pulumi:"name"`
	// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
	NamespaceType *string `pulumi:"namespaceType"`
	// If set to true, a name specified in the build spec file overrides the artifact name.
	OverrideArtifactName *bool `pulumi:"overrideArtifactName"`
	// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
	Packaging *string `pulumi:"packaging"`
	// If `type` is set to `S3`, this is the path to the output artifact
	Path *string `pulumi:"path"`
	// The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
	Type string `pulumi:"type"`
}

// ProjectArtifactsInput is an input type that accepts ProjectArtifactsArgs and ProjectArtifactsOutput values.
// You can construct a concrete instance of `ProjectArtifactsInput` via:
//
// 		 ProjectArtifactsArgs{...}
//
type ProjectArtifactsInput interface {
	pulumi.Input

	ToProjectArtifactsOutput() ProjectArtifactsOutput
	ToProjectArtifactsOutputWithContext(context.Context) ProjectArtifactsOutput
}

type ProjectArtifactsArgs struct {
	// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
	ArtifactIdentifier pulumi.StringPtrInput `pulumi:"artifactIdentifier"`
	// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
	EncryptionDisabled pulumi.BoolPtrInput `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
	NamespaceType pulumi.StringPtrInput `pulumi:"namespaceType"`
	// If set to true, a name specified in the build spec file overrides the artifact name.
	OverrideArtifactName pulumi.BoolPtrInput `pulumi:"overrideArtifactName"`
	// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
	Packaging pulumi.StringPtrInput `pulumi:"packaging"`
	// If `type` is set to `S3`, this is the path to the output artifact
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectArtifactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectArtifacts)(nil)).Elem()
}

func (i ProjectArtifactsArgs) ToProjectArtifactsOutput() ProjectArtifactsOutput {
	return i.ToProjectArtifactsOutputWithContext(context.Background())
}

func (i ProjectArtifactsArgs) ToProjectArtifactsOutputWithContext(ctx context.Context) ProjectArtifactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArtifactsOutput)
}

func (i ProjectArtifactsArgs) ToProjectArtifactsPtrOutput() ProjectArtifactsPtrOutput {
	return i.ToProjectArtifactsPtrOutputWithContext(context.Background())
}

func (i ProjectArtifactsArgs) ToProjectArtifactsPtrOutputWithContext(ctx context.Context) ProjectArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArtifactsOutput).ToProjectArtifactsPtrOutputWithContext(ctx)
}

// ProjectArtifactsPtrInput is an input type that accepts ProjectArtifactsArgs, ProjectArtifactsPtr and ProjectArtifactsPtrOutput values.
// You can construct a concrete instance of `ProjectArtifactsPtrInput` via:
//
// 		 ProjectArtifactsArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectArtifactsPtrInput interface {
	pulumi.Input

	ToProjectArtifactsPtrOutput() ProjectArtifactsPtrOutput
	ToProjectArtifactsPtrOutputWithContext(context.Context) ProjectArtifactsPtrOutput
}

type projectArtifactsPtrType ProjectArtifactsArgs

func ProjectArtifactsPtr(v *ProjectArtifactsArgs) ProjectArtifactsPtrInput {
	return (*projectArtifactsPtrType)(v)
}

func (*projectArtifactsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectArtifacts)(nil)).Elem()
}

func (i *projectArtifactsPtrType) ToProjectArtifactsPtrOutput() ProjectArtifactsPtrOutput {
	return i.ToProjectArtifactsPtrOutputWithContext(context.Background())
}

func (i *projectArtifactsPtrType) ToProjectArtifactsPtrOutputWithContext(ctx context.Context) ProjectArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArtifactsPtrOutput)
}

type ProjectArtifactsOutput struct{ *pulumi.OutputState }

func (ProjectArtifactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectArtifacts)(nil)).Elem()
}

func (o ProjectArtifactsOutput) ToProjectArtifactsOutput() ProjectArtifactsOutput {
	return o
}

func (o ProjectArtifactsOutput) ToProjectArtifactsOutputWithContext(ctx context.Context) ProjectArtifactsOutput {
	return o
}

func (o ProjectArtifactsOutput) ToProjectArtifactsPtrOutput() ProjectArtifactsPtrOutput {
	return o.ToProjectArtifactsPtrOutputWithContext(context.Background())
}

func (o ProjectArtifactsOutput) ToProjectArtifactsPtrOutputWithContext(ctx context.Context) ProjectArtifactsPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *ProjectArtifacts {
		return &v
	}).(ProjectArtifactsPtrOutput)
}

// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
func (o ProjectArtifactsOutput) ArtifactIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.ArtifactIdentifier }).(pulumi.StringPtrOutput)
}

// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
func (o ProjectArtifactsOutput) EncryptionDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *bool { return v.EncryptionDisabled }).(pulumi.BoolPtrOutput)
}

// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
func (o ProjectArtifactsOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
func (o ProjectArtifactsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
func (o ProjectArtifactsOutput) NamespaceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.NamespaceType }).(pulumi.StringPtrOutput)
}

// If set to true, a name specified in the build spec file overrides the artifact name.
func (o ProjectArtifactsOutput) OverrideArtifactName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *bool { return v.OverrideArtifactName }).(pulumi.BoolPtrOutput)
}

// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
func (o ProjectArtifactsOutput) Packaging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Packaging }).(pulumi.StringPtrOutput)
}

// If `type` is set to `S3`, this is the path to the output artifact
func (o ProjectArtifactsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
func (o ProjectArtifactsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectArtifacts) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectArtifactsPtrOutput struct{ *pulumi.OutputState }

func (ProjectArtifactsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectArtifacts)(nil)).Elem()
}

func (o ProjectArtifactsPtrOutput) ToProjectArtifactsPtrOutput() ProjectArtifactsPtrOutput {
	return o
}

func (o ProjectArtifactsPtrOutput) ToProjectArtifactsPtrOutputWithContext(ctx context.Context) ProjectArtifactsPtrOutput {
	return o
}

func (o ProjectArtifactsPtrOutput) Elem() ProjectArtifactsOutput {
	return o.ApplyT(func(v *ProjectArtifacts) ProjectArtifacts { return *v }).(ProjectArtifactsOutput)
}

// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
func (o ProjectArtifactsPtrOutput) ArtifactIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.ArtifactIdentifier }).(pulumi.StringPtrOutput)
}

// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
func (o ProjectArtifactsPtrOutput) EncryptionDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *bool { return v.EncryptionDisabled }).(pulumi.BoolPtrOutput)
}

// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
func (o ProjectArtifactsPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
func (o ProjectArtifactsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
func (o ProjectArtifactsPtrOutput) NamespaceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.NamespaceType }).(pulumi.StringPtrOutput)
}

// If set to true, a name specified in the build spec file overrides the artifact name.
func (o ProjectArtifactsPtrOutput) OverrideArtifactName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *bool { return v.OverrideArtifactName }).(pulumi.BoolPtrOutput)
}

// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
func (o ProjectArtifactsPtrOutput) Packaging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Packaging }).(pulumi.StringPtrOutput)
}

// If `type` is set to `S3`, this is the path to the output artifact
func (o ProjectArtifactsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectArtifacts) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
func (o ProjectArtifactsPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectArtifacts) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectCache struct {
	// The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
	Location *string `pulumi:"location"`
	// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
	Modes []string `pulumi:"modes"`
	// The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.
	Type *string `pulumi:"type"`
}

// ProjectCacheInput is an input type that accepts ProjectCacheArgs and ProjectCacheOutput values.
// You can construct a concrete instance of `ProjectCacheInput` via:
//
// 		 ProjectCacheArgs{...}
//
type ProjectCacheInput interface {
	pulumi.Input

	ToProjectCacheOutput() ProjectCacheOutput
	ToProjectCacheOutputWithContext(context.Context) ProjectCacheOutput
}

type ProjectCacheArgs struct {
	// The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ProjectCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectCache)(nil)).Elem()
}

func (i ProjectCacheArgs) ToProjectCacheOutput() ProjectCacheOutput {
	return i.ToProjectCacheOutputWithContext(context.Background())
}

func (i ProjectCacheArgs) ToProjectCacheOutputWithContext(ctx context.Context) ProjectCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCacheOutput)
}

func (i ProjectCacheArgs) ToProjectCachePtrOutput() ProjectCachePtrOutput {
	return i.ToProjectCachePtrOutputWithContext(context.Background())
}

func (i ProjectCacheArgs) ToProjectCachePtrOutputWithContext(ctx context.Context) ProjectCachePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCacheOutput).ToProjectCachePtrOutputWithContext(ctx)
}

// ProjectCachePtrInput is an input type that accepts ProjectCacheArgs, ProjectCachePtr and ProjectCachePtrOutput values.
// You can construct a concrete instance of `ProjectCachePtrInput` via:
//
// 		 ProjectCacheArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectCachePtrInput interface {
	pulumi.Input

	ToProjectCachePtrOutput() ProjectCachePtrOutput
	ToProjectCachePtrOutputWithContext(context.Context) ProjectCachePtrOutput
}

type projectCachePtrType ProjectCacheArgs

func ProjectCachePtr(v *ProjectCacheArgs) ProjectCachePtrInput {
	return (*projectCachePtrType)(v)
}

func (*projectCachePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectCache)(nil)).Elem()
}

func (i *projectCachePtrType) ToProjectCachePtrOutput() ProjectCachePtrOutput {
	return i.ToProjectCachePtrOutputWithContext(context.Background())
}

func (i *projectCachePtrType) ToProjectCachePtrOutputWithContext(ctx context.Context) ProjectCachePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCachePtrOutput)
}

type ProjectCacheOutput struct{ *pulumi.OutputState }

func (ProjectCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectCache)(nil)).Elem()
}

func (o ProjectCacheOutput) ToProjectCacheOutput() ProjectCacheOutput {
	return o
}

func (o ProjectCacheOutput) ToProjectCacheOutputWithContext(ctx context.Context) ProjectCacheOutput {
	return o
}

func (o ProjectCacheOutput) ToProjectCachePtrOutput() ProjectCachePtrOutput {
	return o.ToProjectCachePtrOutputWithContext(context.Background())
}

func (o ProjectCacheOutput) ToProjectCachePtrOutputWithContext(ctx context.Context) ProjectCachePtrOutput {
	return o.ApplyT(func(v ProjectCache) *ProjectCache {
		return &v
	}).(ProjectCachePtrOutput)
}

// The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
func (o ProjectCacheOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectCache) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
func (o ProjectCacheOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectCache) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.
func (o ProjectCacheOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectCache) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ProjectCachePtrOutput struct{ *pulumi.OutputState }

func (ProjectCachePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectCache)(nil)).Elem()
}

func (o ProjectCachePtrOutput) ToProjectCachePtrOutput() ProjectCachePtrOutput {
	return o
}

func (o ProjectCachePtrOutput) ToProjectCachePtrOutputWithContext(ctx context.Context) ProjectCachePtrOutput {
	return o
}

func (o ProjectCachePtrOutput) Elem() ProjectCacheOutput {
	return o.ApplyT(func(v *ProjectCache) ProjectCache { return *v }).(ProjectCacheOutput)
}

// The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
func (o ProjectCachePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectCache) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
func (o ProjectCachePtrOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectCache) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.
func (o ProjectCachePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectCache) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ProjectEnvironment struct {
	// The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
	Certificate *string `pulumi:"certificate"`
	// Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` need to be `BUILD_GENERAL1_LARGE`.
	ComputeType string `pulumi:"computeType"`
	// A set of environment variables to make available to builds for this build project.
	EnvironmentVariables []ProjectEnvironmentEnvironmentVariable `pulumi:"environmentVariables"`
	// The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
	Image string `pulumi:"image"`
	// The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
	ImagePullCredentialsType *string `pulumi:"imagePullCredentialsType"`
	// If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
	PrivilegedMode *bool `pulumi:"privilegedMode"`
	// Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
	RegistryCredential *ProjectEnvironmentRegistryCredential `pulumi:"registryCredential"`
	// The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` or `ARM_CONTAINER`.
	Type string `pulumi:"type"`
}

// ProjectEnvironmentInput is an input type that accepts ProjectEnvironmentArgs and ProjectEnvironmentOutput values.
// You can construct a concrete instance of `ProjectEnvironmentInput` via:
//
// 		 ProjectEnvironmentArgs{...}
//
type ProjectEnvironmentInput interface {
	pulumi.Input

	ToProjectEnvironmentOutput() ProjectEnvironmentOutput
	ToProjectEnvironmentOutputWithContext(context.Context) ProjectEnvironmentOutput
}

type ProjectEnvironmentArgs struct {
	// The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` need to be `BUILD_GENERAL1_LARGE`.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// A set of environment variables to make available to builds for this build project.
	EnvironmentVariables ProjectEnvironmentEnvironmentVariableArrayInput `pulumi:"environmentVariables"`
	// The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
	Image pulumi.StringInput `pulumi:"image"`
	// The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
	ImagePullCredentialsType pulumi.StringPtrInput `pulumi:"imagePullCredentialsType"`
	// If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
	PrivilegedMode pulumi.BoolPtrInput `pulumi:"privilegedMode"`
	// Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
	RegistryCredential ProjectEnvironmentRegistryCredentialPtrInput `pulumi:"registryCredential"`
	// The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` or `ARM_CONTAINER`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return i.ToProjectEnvironmentOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentOutput)
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return i.ToProjectEnvironmentPtrOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentOutput).ToProjectEnvironmentPtrOutputWithContext(ctx)
}

// ProjectEnvironmentPtrInput is an input type that accepts ProjectEnvironmentArgs, ProjectEnvironmentPtr and ProjectEnvironmentPtrOutput values.
// You can construct a concrete instance of `ProjectEnvironmentPtrInput` via:
//
// 		 ProjectEnvironmentArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectEnvironmentPtrInput interface {
	pulumi.Input

	ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput
	ToProjectEnvironmentPtrOutputWithContext(context.Context) ProjectEnvironmentPtrOutput
}

type projectEnvironmentPtrType ProjectEnvironmentArgs

func ProjectEnvironmentPtr(v *ProjectEnvironmentArgs) ProjectEnvironmentPtrInput {
	return (*projectEnvironmentPtrType)(v)
}

func (*projectEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironment)(nil)).Elem()
}

func (i *projectEnvironmentPtrType) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return i.ToProjectEnvironmentPtrOutputWithContext(context.Background())
}

func (i *projectEnvironmentPtrType) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentPtrOutput)
}

type ProjectEnvironmentOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return o.ToProjectEnvironmentPtrOutputWithContext(context.Background())
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *ProjectEnvironment {
		return &v
	}).(ProjectEnvironmentPtrOutput)
}

// The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
func (o ProjectEnvironmentOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` need to be `BUILD_GENERAL1_LARGE`.
func (o ProjectEnvironmentOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.ComputeType }).(pulumi.StringOutput)
}

// A set of environment variables to make available to builds for this build project.
func (o ProjectEnvironmentOutput) EnvironmentVariables() ProjectEnvironmentEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v ProjectEnvironment) []ProjectEnvironmentEnvironmentVariable { return v.EnvironmentVariables }).(ProjectEnvironmentEnvironmentVariableArrayOutput)
}

// The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
func (o ProjectEnvironmentOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.Image }).(pulumi.StringOutput)
}

// The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
func (o ProjectEnvironmentOutput) ImagePullCredentialsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *string { return v.ImagePullCredentialsType }).(pulumi.StringPtrOutput)
}

// If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
func (o ProjectEnvironmentOutput) PrivilegedMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *bool { return v.PrivilegedMode }).(pulumi.BoolPtrOutput)
}

// Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
func (o ProjectEnvironmentOutput) RegistryCredential() ProjectEnvironmentRegistryCredentialPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *ProjectEnvironmentRegistryCredential { return v.RegistryCredential }).(ProjectEnvironmentRegistryCredentialPtrOutput)
}

// The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` or `ARM_CONTAINER`.
func (o ProjectEnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentPtrOutput) ToProjectEnvironmentPtrOutput() ProjectEnvironmentPtrOutput {
	return o
}

func (o ProjectEnvironmentPtrOutput) ToProjectEnvironmentPtrOutputWithContext(ctx context.Context) ProjectEnvironmentPtrOutput {
	return o
}

func (o ProjectEnvironmentPtrOutput) Elem() ProjectEnvironmentOutput {
	return o.ApplyT(func(v *ProjectEnvironment) ProjectEnvironment { return *v }).(ProjectEnvironmentOutput)
}

// The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
func (o ProjectEnvironmentPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` need to be `BUILD_GENERAL1_LARGE`.
func (o ProjectEnvironmentPtrOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.ComputeType }).(pulumi.StringOutput)
}

// A set of environment variables to make available to builds for this build project.
func (o ProjectEnvironmentPtrOutput) EnvironmentVariables() ProjectEnvironmentEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v ProjectEnvironment) []ProjectEnvironmentEnvironmentVariable { return v.EnvironmentVariables }).(ProjectEnvironmentEnvironmentVariableArrayOutput)
}

// The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
func (o ProjectEnvironmentPtrOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.Image }).(pulumi.StringOutput)
}

// The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
func (o ProjectEnvironmentPtrOutput) ImagePullCredentialsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *string { return v.ImagePullCredentialsType }).(pulumi.StringPtrOutput)
}

// If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
func (o ProjectEnvironmentPtrOutput) PrivilegedMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *bool { return v.PrivilegedMode }).(pulumi.BoolPtrOutput)
}

// Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
func (o ProjectEnvironmentPtrOutput) RegistryCredential() ProjectEnvironmentRegistryCredentialPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *ProjectEnvironmentRegistryCredential { return v.RegistryCredential }).(ProjectEnvironmentRegistryCredentialPtrOutput)
}

// The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` or `ARM_CONTAINER`.
func (o ProjectEnvironmentPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectEnvironmentEnvironmentVariable struct {
	// The environment variable's name or key.
	Name string `pulumi:"name"`
	// The type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`.
	Type *string `pulumi:"type"`
	// The environment variable's value.
	Value string `pulumi:"value"`
}

// ProjectEnvironmentEnvironmentVariableInput is an input type that accepts ProjectEnvironmentEnvironmentVariableArgs and ProjectEnvironmentEnvironmentVariableOutput values.
// You can construct a concrete instance of `ProjectEnvironmentEnvironmentVariableInput` via:
//
// 		 ProjectEnvironmentEnvironmentVariableArgs{...}
//
type ProjectEnvironmentEnvironmentVariableInput interface {
	pulumi.Input

	ToProjectEnvironmentEnvironmentVariableOutput() ProjectEnvironmentEnvironmentVariableOutput
	ToProjectEnvironmentEnvironmentVariableOutputWithContext(context.Context) ProjectEnvironmentEnvironmentVariableOutput
}

type ProjectEnvironmentEnvironmentVariableArgs struct {
	// The environment variable's name or key.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The environment variable's value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProjectEnvironmentEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentEnvironmentVariable)(nil)).Elem()
}

func (i ProjectEnvironmentEnvironmentVariableArgs) ToProjectEnvironmentEnvironmentVariableOutput() ProjectEnvironmentEnvironmentVariableOutput {
	return i.ToProjectEnvironmentEnvironmentVariableOutputWithContext(context.Background())
}

func (i ProjectEnvironmentEnvironmentVariableArgs) ToProjectEnvironmentEnvironmentVariableOutputWithContext(ctx context.Context) ProjectEnvironmentEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentEnvironmentVariableOutput)
}

// ProjectEnvironmentEnvironmentVariableArrayInput is an input type that accepts ProjectEnvironmentEnvironmentVariableArray and ProjectEnvironmentEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `ProjectEnvironmentEnvironmentVariableArrayInput` via:
//
// 		 ProjectEnvironmentEnvironmentVariableArray{ ProjectEnvironmentEnvironmentVariableArgs{...} }
//
type ProjectEnvironmentEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToProjectEnvironmentEnvironmentVariableArrayOutput() ProjectEnvironmentEnvironmentVariableArrayOutput
	ToProjectEnvironmentEnvironmentVariableArrayOutputWithContext(context.Context) ProjectEnvironmentEnvironmentVariableArrayOutput
}

type ProjectEnvironmentEnvironmentVariableArray []ProjectEnvironmentEnvironmentVariableInput

func (ProjectEnvironmentEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironmentEnvironmentVariable)(nil)).Elem()
}

func (i ProjectEnvironmentEnvironmentVariableArray) ToProjectEnvironmentEnvironmentVariableArrayOutput() ProjectEnvironmentEnvironmentVariableArrayOutput {
	return i.ToProjectEnvironmentEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i ProjectEnvironmentEnvironmentVariableArray) ToProjectEnvironmentEnvironmentVariableArrayOutputWithContext(ctx context.Context) ProjectEnvironmentEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentEnvironmentVariableArrayOutput)
}

type ProjectEnvironmentEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentEnvironmentVariable)(nil)).Elem()
}

func (o ProjectEnvironmentEnvironmentVariableOutput) ToProjectEnvironmentEnvironmentVariableOutput() ProjectEnvironmentEnvironmentVariableOutput {
	return o
}

func (o ProjectEnvironmentEnvironmentVariableOutput) ToProjectEnvironmentEnvironmentVariableOutputWithContext(ctx context.Context) ProjectEnvironmentEnvironmentVariableOutput {
	return o
}

// The environment variable's name or key.
func (o ProjectEnvironmentEnvironmentVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentEnvironmentVariable) string { return v.Name }).(pulumi.StringOutput)
}

// The type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`.
func (o ProjectEnvironmentEnvironmentVariableOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironmentEnvironmentVariable) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The environment variable's value.
func (o ProjectEnvironmentEnvironmentVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentEnvironmentVariable) string { return v.Value }).(pulumi.StringOutput)
}

type ProjectEnvironmentEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironmentEnvironmentVariable)(nil)).Elem()
}

func (o ProjectEnvironmentEnvironmentVariableArrayOutput) ToProjectEnvironmentEnvironmentVariableArrayOutput() ProjectEnvironmentEnvironmentVariableArrayOutput {
	return o
}

func (o ProjectEnvironmentEnvironmentVariableArrayOutput) ToProjectEnvironmentEnvironmentVariableArrayOutputWithContext(ctx context.Context) ProjectEnvironmentEnvironmentVariableArrayOutput {
	return o
}

func (o ProjectEnvironmentEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) ProjectEnvironmentEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectEnvironmentEnvironmentVariable {
		return vs[0].([]ProjectEnvironmentEnvironmentVariable)[vs[1].(int)]
	}).(ProjectEnvironmentEnvironmentVariableOutput)
}

type ProjectEnvironmentRegistryCredential struct {
	// The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
	Credential string `pulumi:"credential"`
	// The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
	CredentialProvider string `pulumi:"credentialProvider"`
}

// ProjectEnvironmentRegistryCredentialInput is an input type that accepts ProjectEnvironmentRegistryCredentialArgs and ProjectEnvironmentRegistryCredentialOutput values.
// You can construct a concrete instance of `ProjectEnvironmentRegistryCredentialInput` via:
//
// 		 ProjectEnvironmentRegistryCredentialArgs{...}
//
type ProjectEnvironmentRegistryCredentialInput interface {
	pulumi.Input

	ToProjectEnvironmentRegistryCredentialOutput() ProjectEnvironmentRegistryCredentialOutput
	ToProjectEnvironmentRegistryCredentialOutputWithContext(context.Context) ProjectEnvironmentRegistryCredentialOutput
}

type ProjectEnvironmentRegistryCredentialArgs struct {
	// The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
	Credential pulumi.StringInput `pulumi:"credential"`
	// The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
	CredentialProvider pulumi.StringInput `pulumi:"credentialProvider"`
}

func (ProjectEnvironmentRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentRegistryCredential)(nil)).Elem()
}

func (i ProjectEnvironmentRegistryCredentialArgs) ToProjectEnvironmentRegistryCredentialOutput() ProjectEnvironmentRegistryCredentialOutput {
	return i.ToProjectEnvironmentRegistryCredentialOutputWithContext(context.Background())
}

func (i ProjectEnvironmentRegistryCredentialArgs) ToProjectEnvironmentRegistryCredentialOutputWithContext(ctx context.Context) ProjectEnvironmentRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentRegistryCredentialOutput)
}

func (i ProjectEnvironmentRegistryCredentialArgs) ToProjectEnvironmentRegistryCredentialPtrOutput() ProjectEnvironmentRegistryCredentialPtrOutput {
	return i.ToProjectEnvironmentRegistryCredentialPtrOutputWithContext(context.Background())
}

func (i ProjectEnvironmentRegistryCredentialArgs) ToProjectEnvironmentRegistryCredentialPtrOutputWithContext(ctx context.Context) ProjectEnvironmentRegistryCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentRegistryCredentialOutput).ToProjectEnvironmentRegistryCredentialPtrOutputWithContext(ctx)
}

// ProjectEnvironmentRegistryCredentialPtrInput is an input type that accepts ProjectEnvironmentRegistryCredentialArgs, ProjectEnvironmentRegistryCredentialPtr and ProjectEnvironmentRegistryCredentialPtrOutput values.
// You can construct a concrete instance of `ProjectEnvironmentRegistryCredentialPtrInput` via:
//
// 		 ProjectEnvironmentRegistryCredentialArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectEnvironmentRegistryCredentialPtrInput interface {
	pulumi.Input

	ToProjectEnvironmentRegistryCredentialPtrOutput() ProjectEnvironmentRegistryCredentialPtrOutput
	ToProjectEnvironmentRegistryCredentialPtrOutputWithContext(context.Context) ProjectEnvironmentRegistryCredentialPtrOutput
}

type projectEnvironmentRegistryCredentialPtrType ProjectEnvironmentRegistryCredentialArgs

func ProjectEnvironmentRegistryCredentialPtr(v *ProjectEnvironmentRegistryCredentialArgs) ProjectEnvironmentRegistryCredentialPtrInput {
	return (*projectEnvironmentRegistryCredentialPtrType)(v)
}

func (*projectEnvironmentRegistryCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironmentRegistryCredential)(nil)).Elem()
}

func (i *projectEnvironmentRegistryCredentialPtrType) ToProjectEnvironmentRegistryCredentialPtrOutput() ProjectEnvironmentRegistryCredentialPtrOutput {
	return i.ToProjectEnvironmentRegistryCredentialPtrOutputWithContext(context.Background())
}

func (i *projectEnvironmentRegistryCredentialPtrType) ToProjectEnvironmentRegistryCredentialPtrOutputWithContext(ctx context.Context) ProjectEnvironmentRegistryCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentRegistryCredentialPtrOutput)
}

type ProjectEnvironmentRegistryCredentialOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentRegistryCredential)(nil)).Elem()
}

func (o ProjectEnvironmentRegistryCredentialOutput) ToProjectEnvironmentRegistryCredentialOutput() ProjectEnvironmentRegistryCredentialOutput {
	return o
}

func (o ProjectEnvironmentRegistryCredentialOutput) ToProjectEnvironmentRegistryCredentialOutputWithContext(ctx context.Context) ProjectEnvironmentRegistryCredentialOutput {
	return o
}

func (o ProjectEnvironmentRegistryCredentialOutput) ToProjectEnvironmentRegistryCredentialPtrOutput() ProjectEnvironmentRegistryCredentialPtrOutput {
	return o.ToProjectEnvironmentRegistryCredentialPtrOutputWithContext(context.Background())
}

func (o ProjectEnvironmentRegistryCredentialOutput) ToProjectEnvironmentRegistryCredentialPtrOutputWithContext(ctx context.Context) ProjectEnvironmentRegistryCredentialPtrOutput {
	return o.ApplyT(func(v ProjectEnvironmentRegistryCredential) *ProjectEnvironmentRegistryCredential {
		return &v
	}).(ProjectEnvironmentRegistryCredentialPtrOutput)
}

// The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
func (o ProjectEnvironmentRegistryCredentialOutput) Credential() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentRegistryCredential) string { return v.Credential }).(pulumi.StringOutput)
}

// The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
func (o ProjectEnvironmentRegistryCredentialOutput) CredentialProvider() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentRegistryCredential) string { return v.CredentialProvider }).(pulumi.StringOutput)
}

type ProjectEnvironmentRegistryCredentialPtrOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentRegistryCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironmentRegistryCredential)(nil)).Elem()
}

func (o ProjectEnvironmentRegistryCredentialPtrOutput) ToProjectEnvironmentRegistryCredentialPtrOutput() ProjectEnvironmentRegistryCredentialPtrOutput {
	return o
}

func (o ProjectEnvironmentRegistryCredentialPtrOutput) ToProjectEnvironmentRegistryCredentialPtrOutputWithContext(ctx context.Context) ProjectEnvironmentRegistryCredentialPtrOutput {
	return o
}

func (o ProjectEnvironmentRegistryCredentialPtrOutput) Elem() ProjectEnvironmentRegistryCredentialOutput {
	return o.ApplyT(func(v *ProjectEnvironmentRegistryCredential) ProjectEnvironmentRegistryCredential { return *v }).(ProjectEnvironmentRegistryCredentialOutput)
}

// The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
func (o ProjectEnvironmentRegistryCredentialPtrOutput) Credential() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentRegistryCredential) string { return v.Credential }).(pulumi.StringOutput)
}

// The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
func (o ProjectEnvironmentRegistryCredentialPtrOutput) CredentialProvider() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentRegistryCredential) string { return v.CredentialProvider }).(pulumi.StringOutput)
}

type ProjectLogsConfig struct {
	// Configuration for the builds to store logs to CloudWatch
	CloudwatchLogs *ProjectLogsConfigCloudwatchLogs `pulumi:"cloudwatchLogs"`
	// Configuration for the builds to store logs to S3.
	S3Logs *ProjectLogsConfigS3Logs `pulumi:"s3Logs"`
}

// ProjectLogsConfigInput is an input type that accepts ProjectLogsConfigArgs and ProjectLogsConfigOutput values.
// You can construct a concrete instance of `ProjectLogsConfigInput` via:
//
// 		 ProjectLogsConfigArgs{...}
//
type ProjectLogsConfigInput interface {
	pulumi.Input

	ToProjectLogsConfigOutput() ProjectLogsConfigOutput
	ToProjectLogsConfigOutputWithContext(context.Context) ProjectLogsConfigOutput
}

type ProjectLogsConfigArgs struct {
	// Configuration for the builds to store logs to CloudWatch
	CloudwatchLogs ProjectLogsConfigCloudwatchLogsPtrInput `pulumi:"cloudwatchLogs"`
	// Configuration for the builds to store logs to S3.
	S3Logs ProjectLogsConfigS3LogsPtrInput `pulumi:"s3Logs"`
}

func (ProjectLogsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfig)(nil)).Elem()
}

func (i ProjectLogsConfigArgs) ToProjectLogsConfigOutput() ProjectLogsConfigOutput {
	return i.ToProjectLogsConfigOutputWithContext(context.Background())
}

func (i ProjectLogsConfigArgs) ToProjectLogsConfigOutputWithContext(ctx context.Context) ProjectLogsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigOutput)
}

func (i ProjectLogsConfigArgs) ToProjectLogsConfigPtrOutput() ProjectLogsConfigPtrOutput {
	return i.ToProjectLogsConfigPtrOutputWithContext(context.Background())
}

func (i ProjectLogsConfigArgs) ToProjectLogsConfigPtrOutputWithContext(ctx context.Context) ProjectLogsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigOutput).ToProjectLogsConfigPtrOutputWithContext(ctx)
}

// ProjectLogsConfigPtrInput is an input type that accepts ProjectLogsConfigArgs, ProjectLogsConfigPtr and ProjectLogsConfigPtrOutput values.
// You can construct a concrete instance of `ProjectLogsConfigPtrInput` via:
//
// 		 ProjectLogsConfigArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectLogsConfigPtrInput interface {
	pulumi.Input

	ToProjectLogsConfigPtrOutput() ProjectLogsConfigPtrOutput
	ToProjectLogsConfigPtrOutputWithContext(context.Context) ProjectLogsConfigPtrOutput
}

type projectLogsConfigPtrType ProjectLogsConfigArgs

func ProjectLogsConfigPtr(v *ProjectLogsConfigArgs) ProjectLogsConfigPtrInput {
	return (*projectLogsConfigPtrType)(v)
}

func (*projectLogsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLogsConfig)(nil)).Elem()
}

func (i *projectLogsConfigPtrType) ToProjectLogsConfigPtrOutput() ProjectLogsConfigPtrOutput {
	return i.ToProjectLogsConfigPtrOutputWithContext(context.Background())
}

func (i *projectLogsConfigPtrType) ToProjectLogsConfigPtrOutputWithContext(ctx context.Context) ProjectLogsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigPtrOutput)
}

type ProjectLogsConfigOutput struct{ *pulumi.OutputState }

func (ProjectLogsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfig)(nil)).Elem()
}

func (o ProjectLogsConfigOutput) ToProjectLogsConfigOutput() ProjectLogsConfigOutput {
	return o
}

func (o ProjectLogsConfigOutput) ToProjectLogsConfigOutputWithContext(ctx context.Context) ProjectLogsConfigOutput {
	return o
}

func (o ProjectLogsConfigOutput) ToProjectLogsConfigPtrOutput() ProjectLogsConfigPtrOutput {
	return o.ToProjectLogsConfigPtrOutputWithContext(context.Background())
}

func (o ProjectLogsConfigOutput) ToProjectLogsConfigPtrOutputWithContext(ctx context.Context) ProjectLogsConfigPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfig) *ProjectLogsConfig {
		return &v
	}).(ProjectLogsConfigPtrOutput)
}

// Configuration for the builds to store logs to CloudWatch
func (o ProjectLogsConfigOutput) CloudwatchLogs() ProjectLogsConfigCloudwatchLogsPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfig) *ProjectLogsConfigCloudwatchLogs { return v.CloudwatchLogs }).(ProjectLogsConfigCloudwatchLogsPtrOutput)
}

// Configuration for the builds to store logs to S3.
func (o ProjectLogsConfigOutput) S3Logs() ProjectLogsConfigS3LogsPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfig) *ProjectLogsConfigS3Logs { return v.S3Logs }).(ProjectLogsConfigS3LogsPtrOutput)
}

type ProjectLogsConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectLogsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLogsConfig)(nil)).Elem()
}

func (o ProjectLogsConfigPtrOutput) ToProjectLogsConfigPtrOutput() ProjectLogsConfigPtrOutput {
	return o
}

func (o ProjectLogsConfigPtrOutput) ToProjectLogsConfigPtrOutputWithContext(ctx context.Context) ProjectLogsConfigPtrOutput {
	return o
}

func (o ProjectLogsConfigPtrOutput) Elem() ProjectLogsConfigOutput {
	return o.ApplyT(func(v *ProjectLogsConfig) ProjectLogsConfig { return *v }).(ProjectLogsConfigOutput)
}

// Configuration for the builds to store logs to CloudWatch
func (o ProjectLogsConfigPtrOutput) CloudwatchLogs() ProjectLogsConfigCloudwatchLogsPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfig) *ProjectLogsConfigCloudwatchLogs { return v.CloudwatchLogs }).(ProjectLogsConfigCloudwatchLogsPtrOutput)
}

// Configuration for the builds to store logs to S3.
func (o ProjectLogsConfigPtrOutput) S3Logs() ProjectLogsConfigS3LogsPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfig) *ProjectLogsConfigS3Logs { return v.S3Logs }).(ProjectLogsConfigS3LogsPtrOutput)
}

type ProjectLogsConfigCloudwatchLogs struct {
	// The group name of the logs in CloudWatch Logs.
	GroupName *string `pulumi:"groupName"`
	// Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
	Status *string `pulumi:"status"`
	// The stream name of the logs in CloudWatch Logs.
	StreamName *string `pulumi:"streamName"`
}

// ProjectLogsConfigCloudwatchLogsInput is an input type that accepts ProjectLogsConfigCloudwatchLogsArgs and ProjectLogsConfigCloudwatchLogsOutput values.
// You can construct a concrete instance of `ProjectLogsConfigCloudwatchLogsInput` via:
//
// 		 ProjectLogsConfigCloudwatchLogsArgs{...}
//
type ProjectLogsConfigCloudwatchLogsInput interface {
	pulumi.Input

	ToProjectLogsConfigCloudwatchLogsOutput() ProjectLogsConfigCloudwatchLogsOutput
	ToProjectLogsConfigCloudwatchLogsOutputWithContext(context.Context) ProjectLogsConfigCloudwatchLogsOutput
}

type ProjectLogsConfigCloudwatchLogsArgs struct {
	// The group name of the logs in CloudWatch Logs.
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
	// Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The stream name of the logs in CloudWatch Logs.
	StreamName pulumi.StringPtrInput `pulumi:"streamName"`
}

func (ProjectLogsConfigCloudwatchLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfigCloudwatchLogs)(nil)).Elem()
}

func (i ProjectLogsConfigCloudwatchLogsArgs) ToProjectLogsConfigCloudwatchLogsOutput() ProjectLogsConfigCloudwatchLogsOutput {
	return i.ToProjectLogsConfigCloudwatchLogsOutputWithContext(context.Background())
}

func (i ProjectLogsConfigCloudwatchLogsArgs) ToProjectLogsConfigCloudwatchLogsOutputWithContext(ctx context.Context) ProjectLogsConfigCloudwatchLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigCloudwatchLogsOutput)
}

func (i ProjectLogsConfigCloudwatchLogsArgs) ToProjectLogsConfigCloudwatchLogsPtrOutput() ProjectLogsConfigCloudwatchLogsPtrOutput {
	return i.ToProjectLogsConfigCloudwatchLogsPtrOutputWithContext(context.Background())
}

func (i ProjectLogsConfigCloudwatchLogsArgs) ToProjectLogsConfigCloudwatchLogsPtrOutputWithContext(ctx context.Context) ProjectLogsConfigCloudwatchLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigCloudwatchLogsOutput).ToProjectLogsConfigCloudwatchLogsPtrOutputWithContext(ctx)
}

// ProjectLogsConfigCloudwatchLogsPtrInput is an input type that accepts ProjectLogsConfigCloudwatchLogsArgs, ProjectLogsConfigCloudwatchLogsPtr and ProjectLogsConfigCloudwatchLogsPtrOutput values.
// You can construct a concrete instance of `ProjectLogsConfigCloudwatchLogsPtrInput` via:
//
// 		 ProjectLogsConfigCloudwatchLogsArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectLogsConfigCloudwatchLogsPtrInput interface {
	pulumi.Input

	ToProjectLogsConfigCloudwatchLogsPtrOutput() ProjectLogsConfigCloudwatchLogsPtrOutput
	ToProjectLogsConfigCloudwatchLogsPtrOutputWithContext(context.Context) ProjectLogsConfigCloudwatchLogsPtrOutput
}

type projectLogsConfigCloudwatchLogsPtrType ProjectLogsConfigCloudwatchLogsArgs

func ProjectLogsConfigCloudwatchLogsPtr(v *ProjectLogsConfigCloudwatchLogsArgs) ProjectLogsConfigCloudwatchLogsPtrInput {
	return (*projectLogsConfigCloudwatchLogsPtrType)(v)
}

func (*projectLogsConfigCloudwatchLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLogsConfigCloudwatchLogs)(nil)).Elem()
}

func (i *projectLogsConfigCloudwatchLogsPtrType) ToProjectLogsConfigCloudwatchLogsPtrOutput() ProjectLogsConfigCloudwatchLogsPtrOutput {
	return i.ToProjectLogsConfigCloudwatchLogsPtrOutputWithContext(context.Background())
}

func (i *projectLogsConfigCloudwatchLogsPtrType) ToProjectLogsConfigCloudwatchLogsPtrOutputWithContext(ctx context.Context) ProjectLogsConfigCloudwatchLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigCloudwatchLogsPtrOutput)
}

type ProjectLogsConfigCloudwatchLogsOutput struct{ *pulumi.OutputState }

func (ProjectLogsConfigCloudwatchLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfigCloudwatchLogs)(nil)).Elem()
}

func (o ProjectLogsConfigCloudwatchLogsOutput) ToProjectLogsConfigCloudwatchLogsOutput() ProjectLogsConfigCloudwatchLogsOutput {
	return o
}

func (o ProjectLogsConfigCloudwatchLogsOutput) ToProjectLogsConfigCloudwatchLogsOutputWithContext(ctx context.Context) ProjectLogsConfigCloudwatchLogsOutput {
	return o
}

func (o ProjectLogsConfigCloudwatchLogsOutput) ToProjectLogsConfigCloudwatchLogsPtrOutput() ProjectLogsConfigCloudwatchLogsPtrOutput {
	return o.ToProjectLogsConfigCloudwatchLogsPtrOutputWithContext(context.Background())
}

func (o ProjectLogsConfigCloudwatchLogsOutput) ToProjectLogsConfigCloudwatchLogsPtrOutputWithContext(ctx context.Context) ProjectLogsConfigCloudwatchLogsPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigCloudwatchLogs) *ProjectLogsConfigCloudwatchLogs {
		return &v
	}).(ProjectLogsConfigCloudwatchLogsPtrOutput)
}

// The group name of the logs in CloudWatch Logs.
func (o ProjectLogsConfigCloudwatchLogsOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigCloudwatchLogs) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

// Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
func (o ProjectLogsConfigCloudwatchLogsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigCloudwatchLogs) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The stream name of the logs in CloudWatch Logs.
func (o ProjectLogsConfigCloudwatchLogsOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigCloudwatchLogs) *string { return v.StreamName }).(pulumi.StringPtrOutput)
}

type ProjectLogsConfigCloudwatchLogsPtrOutput struct{ *pulumi.OutputState }

func (ProjectLogsConfigCloudwatchLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLogsConfigCloudwatchLogs)(nil)).Elem()
}

func (o ProjectLogsConfigCloudwatchLogsPtrOutput) ToProjectLogsConfigCloudwatchLogsPtrOutput() ProjectLogsConfigCloudwatchLogsPtrOutput {
	return o
}

func (o ProjectLogsConfigCloudwatchLogsPtrOutput) ToProjectLogsConfigCloudwatchLogsPtrOutputWithContext(ctx context.Context) ProjectLogsConfigCloudwatchLogsPtrOutput {
	return o
}

func (o ProjectLogsConfigCloudwatchLogsPtrOutput) Elem() ProjectLogsConfigCloudwatchLogsOutput {
	return o.ApplyT(func(v *ProjectLogsConfigCloudwatchLogs) ProjectLogsConfigCloudwatchLogs { return *v }).(ProjectLogsConfigCloudwatchLogsOutput)
}

// The group name of the logs in CloudWatch Logs.
func (o ProjectLogsConfigCloudwatchLogsPtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigCloudwatchLogs) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

// Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
func (o ProjectLogsConfigCloudwatchLogsPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigCloudwatchLogs) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The stream name of the logs in CloudWatch Logs.
func (o ProjectLogsConfigCloudwatchLogsPtrOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigCloudwatchLogs) *string { return v.StreamName }).(pulumi.StringPtrOutput)
}

type ProjectLogsConfigS3Logs struct {
	// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
	EncryptionDisabled *bool `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
	Location *string `pulumi:"location"`
	// Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
	Status *string `pulumi:"status"`
}

// ProjectLogsConfigS3LogsInput is an input type that accepts ProjectLogsConfigS3LogsArgs and ProjectLogsConfigS3LogsOutput values.
// You can construct a concrete instance of `ProjectLogsConfigS3LogsInput` via:
//
// 		 ProjectLogsConfigS3LogsArgs{...}
//
type ProjectLogsConfigS3LogsInput interface {
	pulumi.Input

	ToProjectLogsConfigS3LogsOutput() ProjectLogsConfigS3LogsOutput
	ToProjectLogsConfigS3LogsOutputWithContext(context.Context) ProjectLogsConfigS3LogsOutput
}

type ProjectLogsConfigS3LogsArgs struct {
	// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
	EncryptionDisabled pulumi.BoolPtrInput `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ProjectLogsConfigS3LogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfigS3Logs)(nil)).Elem()
}

func (i ProjectLogsConfigS3LogsArgs) ToProjectLogsConfigS3LogsOutput() ProjectLogsConfigS3LogsOutput {
	return i.ToProjectLogsConfigS3LogsOutputWithContext(context.Background())
}

func (i ProjectLogsConfigS3LogsArgs) ToProjectLogsConfigS3LogsOutputWithContext(ctx context.Context) ProjectLogsConfigS3LogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigS3LogsOutput)
}

func (i ProjectLogsConfigS3LogsArgs) ToProjectLogsConfigS3LogsPtrOutput() ProjectLogsConfigS3LogsPtrOutput {
	return i.ToProjectLogsConfigS3LogsPtrOutputWithContext(context.Background())
}

func (i ProjectLogsConfigS3LogsArgs) ToProjectLogsConfigS3LogsPtrOutputWithContext(ctx context.Context) ProjectLogsConfigS3LogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigS3LogsOutput).ToProjectLogsConfigS3LogsPtrOutputWithContext(ctx)
}

// ProjectLogsConfigS3LogsPtrInput is an input type that accepts ProjectLogsConfigS3LogsArgs, ProjectLogsConfigS3LogsPtr and ProjectLogsConfigS3LogsPtrOutput values.
// You can construct a concrete instance of `ProjectLogsConfigS3LogsPtrInput` via:
//
// 		 ProjectLogsConfigS3LogsArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectLogsConfigS3LogsPtrInput interface {
	pulumi.Input

	ToProjectLogsConfigS3LogsPtrOutput() ProjectLogsConfigS3LogsPtrOutput
	ToProjectLogsConfigS3LogsPtrOutputWithContext(context.Context) ProjectLogsConfigS3LogsPtrOutput
}

type projectLogsConfigS3LogsPtrType ProjectLogsConfigS3LogsArgs

func ProjectLogsConfigS3LogsPtr(v *ProjectLogsConfigS3LogsArgs) ProjectLogsConfigS3LogsPtrInput {
	return (*projectLogsConfigS3LogsPtrType)(v)
}

func (*projectLogsConfigS3LogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLogsConfigS3Logs)(nil)).Elem()
}

func (i *projectLogsConfigS3LogsPtrType) ToProjectLogsConfigS3LogsPtrOutput() ProjectLogsConfigS3LogsPtrOutput {
	return i.ToProjectLogsConfigS3LogsPtrOutputWithContext(context.Background())
}

func (i *projectLogsConfigS3LogsPtrType) ToProjectLogsConfigS3LogsPtrOutputWithContext(ctx context.Context) ProjectLogsConfigS3LogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigS3LogsPtrOutput)
}

type ProjectLogsConfigS3LogsOutput struct{ *pulumi.OutputState }

func (ProjectLogsConfigS3LogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfigS3Logs)(nil)).Elem()
}

func (o ProjectLogsConfigS3LogsOutput) ToProjectLogsConfigS3LogsOutput() ProjectLogsConfigS3LogsOutput {
	return o
}

func (o ProjectLogsConfigS3LogsOutput) ToProjectLogsConfigS3LogsOutputWithContext(ctx context.Context) ProjectLogsConfigS3LogsOutput {
	return o
}

func (o ProjectLogsConfigS3LogsOutput) ToProjectLogsConfigS3LogsPtrOutput() ProjectLogsConfigS3LogsPtrOutput {
	return o.ToProjectLogsConfigS3LogsPtrOutputWithContext(context.Background())
}

func (o ProjectLogsConfigS3LogsOutput) ToProjectLogsConfigS3LogsPtrOutputWithContext(ctx context.Context) ProjectLogsConfigS3LogsPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigS3Logs) *ProjectLogsConfigS3Logs {
		return &v
	}).(ProjectLogsConfigS3LogsPtrOutput)
}

// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
func (o ProjectLogsConfigS3LogsOutput) EncryptionDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigS3Logs) *bool { return v.EncryptionDisabled }).(pulumi.BoolPtrOutput)
}

// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
func (o ProjectLogsConfigS3LogsOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigS3Logs) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
func (o ProjectLogsConfigS3LogsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigS3Logs) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ProjectLogsConfigS3LogsPtrOutput struct{ *pulumi.OutputState }

func (ProjectLogsConfigS3LogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLogsConfigS3Logs)(nil)).Elem()
}

func (o ProjectLogsConfigS3LogsPtrOutput) ToProjectLogsConfigS3LogsPtrOutput() ProjectLogsConfigS3LogsPtrOutput {
	return o
}

func (o ProjectLogsConfigS3LogsPtrOutput) ToProjectLogsConfigS3LogsPtrOutputWithContext(ctx context.Context) ProjectLogsConfigS3LogsPtrOutput {
	return o
}

func (o ProjectLogsConfigS3LogsPtrOutput) Elem() ProjectLogsConfigS3LogsOutput {
	return o.ApplyT(func(v *ProjectLogsConfigS3Logs) ProjectLogsConfigS3Logs { return *v }).(ProjectLogsConfigS3LogsOutput)
}

// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
func (o ProjectLogsConfigS3LogsPtrOutput) EncryptionDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigS3Logs) *bool { return v.EncryptionDisabled }).(pulumi.BoolPtrOutput)
}

// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
func (o ProjectLogsConfigS3LogsPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigS3Logs) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
func (o ProjectLogsConfigS3LogsPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectLogsConfigS3Logs) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ProjectSecondaryArtifact struct {
	// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
	ArtifactIdentifier string `pulumi:"artifactIdentifier"`
	// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
	EncryptionDisabled *bool `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not also specified, then `location` can also specify the path of the output artifact in the output bucket.
	Location *string `pulumi:"location"`
	// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
	Name *string `pulumi:"name"`
	// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
	NamespaceType *string `pulumi:"namespaceType"`
	// If set to true, a name specified in the build spec file overrides the artifact name.
	OverrideArtifactName *bool `pulumi:"overrideArtifactName"`
	// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
	Packaging *string `pulumi:"packaging"`
	// If `type` is set to `S3`, this is the path to the output artifact
	Path *string `pulumi:"path"`
	// The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
	Type string `pulumi:"type"`
}

// ProjectSecondaryArtifactInput is an input type that accepts ProjectSecondaryArtifactArgs and ProjectSecondaryArtifactOutput values.
// You can construct a concrete instance of `ProjectSecondaryArtifactInput` via:
//
// 		 ProjectSecondaryArtifactArgs{...}
//
type ProjectSecondaryArtifactInput interface {
	pulumi.Input

	ToProjectSecondaryArtifactOutput() ProjectSecondaryArtifactOutput
	ToProjectSecondaryArtifactOutputWithContext(context.Context) ProjectSecondaryArtifactOutput
}

type ProjectSecondaryArtifactArgs struct {
	// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
	ArtifactIdentifier pulumi.StringInput `pulumi:"artifactIdentifier"`
	// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
	EncryptionDisabled pulumi.BoolPtrInput `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not also specified, then `location` can also specify the path of the output artifact in the output bucket.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
	NamespaceType pulumi.StringPtrInput `pulumi:"namespaceType"`
	// If set to true, a name specified in the build spec file overrides the artifact name.
	OverrideArtifactName pulumi.BoolPtrInput `pulumi:"overrideArtifactName"`
	// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
	Packaging pulumi.StringPtrInput `pulumi:"packaging"`
	// If `type` is set to `S3`, this is the path to the output artifact
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectSecondaryArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondaryArtifact)(nil)).Elem()
}

func (i ProjectSecondaryArtifactArgs) ToProjectSecondaryArtifactOutput() ProjectSecondaryArtifactOutput {
	return i.ToProjectSecondaryArtifactOutputWithContext(context.Background())
}

func (i ProjectSecondaryArtifactArgs) ToProjectSecondaryArtifactOutputWithContext(ctx context.Context) ProjectSecondaryArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondaryArtifactOutput)
}

// ProjectSecondaryArtifactArrayInput is an input type that accepts ProjectSecondaryArtifactArray and ProjectSecondaryArtifactArrayOutput values.
// You can construct a concrete instance of `ProjectSecondaryArtifactArrayInput` via:
//
// 		 ProjectSecondaryArtifactArray{ ProjectSecondaryArtifactArgs{...} }
//
type ProjectSecondaryArtifactArrayInput interface {
	pulumi.Input

	ToProjectSecondaryArtifactArrayOutput() ProjectSecondaryArtifactArrayOutput
	ToProjectSecondaryArtifactArrayOutputWithContext(context.Context) ProjectSecondaryArtifactArrayOutput
}

type ProjectSecondaryArtifactArray []ProjectSecondaryArtifactInput

func (ProjectSecondaryArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSecondaryArtifact)(nil)).Elem()
}

func (i ProjectSecondaryArtifactArray) ToProjectSecondaryArtifactArrayOutput() ProjectSecondaryArtifactArrayOutput {
	return i.ToProjectSecondaryArtifactArrayOutputWithContext(context.Background())
}

func (i ProjectSecondaryArtifactArray) ToProjectSecondaryArtifactArrayOutputWithContext(ctx context.Context) ProjectSecondaryArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondaryArtifactArrayOutput)
}

type ProjectSecondaryArtifactOutput struct{ *pulumi.OutputState }

func (ProjectSecondaryArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondaryArtifact)(nil)).Elem()
}

func (o ProjectSecondaryArtifactOutput) ToProjectSecondaryArtifactOutput() ProjectSecondaryArtifactOutput {
	return o
}

func (o ProjectSecondaryArtifactOutput) ToProjectSecondaryArtifactOutputWithContext(ctx context.Context) ProjectSecondaryArtifactOutput {
	return o
}

// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
func (o ProjectSecondaryArtifactOutput) ArtifactIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSecondaryArtifact) string { return v.ArtifactIdentifier }).(pulumi.StringOutput)
}

// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
func (o ProjectSecondaryArtifactOutput) EncryptionDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSecondaryArtifact) *bool { return v.EncryptionDisabled }).(pulumi.BoolPtrOutput)
}

// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not also specified, then `location` can also specify the path of the output artifact in the output bucket.
func (o ProjectSecondaryArtifactOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSecondaryArtifact) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
func (o ProjectSecondaryArtifactOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSecondaryArtifact) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
func (o ProjectSecondaryArtifactOutput) NamespaceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSecondaryArtifact) *string { return v.NamespaceType }).(pulumi.StringPtrOutput)
}

// If set to true, a name specified in the build spec file overrides the artifact name.
func (o ProjectSecondaryArtifactOutput) OverrideArtifactName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSecondaryArtifact) *bool { return v.OverrideArtifactName }).(pulumi.BoolPtrOutput)
}

// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
func (o ProjectSecondaryArtifactOutput) Packaging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSecondaryArtifact) *string { return v.Packaging }).(pulumi.StringPtrOutput)
}

// If `type` is set to `S3`, this is the path to the output artifact
func (o ProjectSecondaryArtifactOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSecondaryArtifact) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
func (o ProjectSecondaryArtifactOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSecondaryArtifact) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSecondaryArtifactArrayOutput struct{ *pulumi.OutputState }

func (ProjectSecondaryArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSecondaryArtifact)(nil)).Elem()
}

func (o ProjectSecondaryArtifactArrayOutput) ToProjectSecondaryArtifactArrayOutput() ProjectSecondaryArtifactArrayOutput {
	return o
}

func (o ProjectSecondaryArtifactArrayOutput) ToProjectSecondaryArtifactArrayOutputWithContext(ctx context.Context) ProjectSecondaryArtifactArrayOutput {
	return o
}

func (o ProjectSecondaryArtifactArrayOutput) Index(i pulumi.IntInput) ProjectSecondaryArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSecondaryArtifact {
		return vs[0].([]ProjectSecondaryArtifact)[vs[1].(int)]
	}).(ProjectSecondaryArtifactOutput)
}

type ProjectSecondarySource struct {
	// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
	Auths []ProjectSecondarySourceAuth `pulumi:"auths"`
	// The build spec declaration to use for this build project's related builds.
	Buildspec *string `pulumi:"buildspec"`
	// Truncate git history to this many commits.
	GitCloneDepth *int `pulumi:"gitCloneDepth"`
	// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
	GitSubmodulesConfig *ProjectSecondarySourceGitSubmodulesConfig `pulumi:"gitSubmodulesConfig"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl *bool `pulumi:"insecureSsl"`
	// The location of the source code from git or s3.
	Location *string `pulumi:"location"`
	// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
	ReportBuildStatus *bool `pulumi:"reportBuildStatus"`
	// The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
	SourceIdentifier string `pulumi:"sourceIdentifier"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type string `pulumi:"type"`
}

// ProjectSecondarySourceInput is an input type that accepts ProjectSecondarySourceArgs and ProjectSecondarySourceOutput values.
// You can construct a concrete instance of `ProjectSecondarySourceInput` via:
//
// 		 ProjectSecondarySourceArgs{...}
//
type ProjectSecondarySourceInput interface {
	pulumi.Input

	ToProjectSecondarySourceOutput() ProjectSecondarySourceOutput
	ToProjectSecondarySourceOutputWithContext(context.Context) ProjectSecondarySourceOutput
}

type ProjectSecondarySourceArgs struct {
	// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
	Auths ProjectSecondarySourceAuthArrayInput `pulumi:"auths"`
	// The build spec declaration to use for this build project's related builds.
	Buildspec pulumi.StringPtrInput `pulumi:"buildspec"`
	// Truncate git history to this many commits.
	GitCloneDepth pulumi.IntPtrInput `pulumi:"gitCloneDepth"`
	// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
	GitSubmodulesConfig ProjectSecondarySourceGitSubmodulesConfigPtrInput `pulumi:"gitSubmodulesConfig"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl pulumi.BoolPtrInput `pulumi:"insecureSsl"`
	// The location of the source code from git or s3.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
	ReportBuildStatus pulumi.BoolPtrInput `pulumi:"reportBuildStatus"`
	// The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
	SourceIdentifier pulumi.StringInput `pulumi:"sourceIdentifier"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectSecondarySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySource)(nil)).Elem()
}

func (i ProjectSecondarySourceArgs) ToProjectSecondarySourceOutput() ProjectSecondarySourceOutput {
	return i.ToProjectSecondarySourceOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceArgs) ToProjectSecondarySourceOutputWithContext(ctx context.Context) ProjectSecondarySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceOutput)
}

// ProjectSecondarySourceArrayInput is an input type that accepts ProjectSecondarySourceArray and ProjectSecondarySourceArrayOutput values.
// You can construct a concrete instance of `ProjectSecondarySourceArrayInput` via:
//
// 		 ProjectSecondarySourceArray{ ProjectSecondarySourceArgs{...} }
//
type ProjectSecondarySourceArrayInput interface {
	pulumi.Input

	ToProjectSecondarySourceArrayOutput() ProjectSecondarySourceArrayOutput
	ToProjectSecondarySourceArrayOutputWithContext(context.Context) ProjectSecondarySourceArrayOutput
}

type ProjectSecondarySourceArray []ProjectSecondarySourceInput

func (ProjectSecondarySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSecondarySource)(nil)).Elem()
}

func (i ProjectSecondarySourceArray) ToProjectSecondarySourceArrayOutput() ProjectSecondarySourceArrayOutput {
	return i.ToProjectSecondarySourceArrayOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceArray) ToProjectSecondarySourceArrayOutputWithContext(ctx context.Context) ProjectSecondarySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceArrayOutput)
}

type ProjectSecondarySourceOutput struct{ *pulumi.OutputState }

func (ProjectSecondarySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySource)(nil)).Elem()
}

func (o ProjectSecondarySourceOutput) ToProjectSecondarySourceOutput() ProjectSecondarySourceOutput {
	return o
}

func (o ProjectSecondarySourceOutput) ToProjectSecondarySourceOutputWithContext(ctx context.Context) ProjectSecondarySourceOutput {
	return o
}

// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
func (o ProjectSecondarySourceOutput) Auths() ProjectSecondarySourceAuthArrayOutput {
	return o.ApplyT(func(v ProjectSecondarySource) []ProjectSecondarySourceAuth { return v.Auths }).(ProjectSecondarySourceAuthArrayOutput)
}

// The build spec declaration to use for this build project's related builds.
func (o ProjectSecondarySourceOutput) Buildspec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSecondarySource) *string { return v.Buildspec }).(pulumi.StringPtrOutput)
}

// Truncate git history to this many commits.
func (o ProjectSecondarySourceOutput) GitCloneDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectSecondarySource) *int { return v.GitCloneDepth }).(pulumi.IntPtrOutput)
}

// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
func (o ProjectSecondarySourceOutput) GitSubmodulesConfig() ProjectSecondarySourceGitSubmodulesConfigPtrOutput {
	return o.ApplyT(func(v ProjectSecondarySource) *ProjectSecondarySourceGitSubmodulesConfig {
		return v.GitSubmodulesConfig
	}).(ProjectSecondarySourceGitSubmodulesConfigPtrOutput)
}

// Ignore SSL warnings when connecting to source control.
func (o ProjectSecondarySourceOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSecondarySource) *bool { return v.InsecureSsl }).(pulumi.BoolPtrOutput)
}

// The location of the source code from git or s3.
func (o ProjectSecondarySourceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSecondarySource) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
func (o ProjectSecondarySourceOutput) ReportBuildStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSecondarySource) *bool { return v.ReportBuildStatus }).(pulumi.BoolPtrOutput)
}

// The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
func (o ProjectSecondarySourceOutput) SourceIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSecondarySource) string { return v.SourceIdentifier }).(pulumi.StringOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
func (o ProjectSecondarySourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSecondarySource) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSecondarySourceArrayOutput struct{ *pulumi.OutputState }

func (ProjectSecondarySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSecondarySource)(nil)).Elem()
}

func (o ProjectSecondarySourceArrayOutput) ToProjectSecondarySourceArrayOutput() ProjectSecondarySourceArrayOutput {
	return o
}

func (o ProjectSecondarySourceArrayOutput) ToProjectSecondarySourceArrayOutputWithContext(ctx context.Context) ProjectSecondarySourceArrayOutput {
	return o
}

func (o ProjectSecondarySourceArrayOutput) Index(i pulumi.IntInput) ProjectSecondarySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSecondarySource {
		return vs[0].([]ProjectSecondarySource)[vs[1].(int)]
	}).(ProjectSecondarySourceOutput)
}

type ProjectSecondarySourceAuth struct {
	// The resource value that applies to the specified authorization type.
	Resource *string `pulumi:"resource"`
	// The authorization type to use. The only valid value is `OAUTH`
	Type string `pulumi:"type"`
}

// ProjectSecondarySourceAuthInput is an input type that accepts ProjectSecondarySourceAuthArgs and ProjectSecondarySourceAuthOutput values.
// You can construct a concrete instance of `ProjectSecondarySourceAuthInput` via:
//
// 		 ProjectSecondarySourceAuthArgs{...}
//
type ProjectSecondarySourceAuthInput interface {
	pulumi.Input

	ToProjectSecondarySourceAuthOutput() ProjectSecondarySourceAuthOutput
	ToProjectSecondarySourceAuthOutputWithContext(context.Context) ProjectSecondarySourceAuthOutput
}

type ProjectSecondarySourceAuthArgs struct {
	// The resource value that applies to the specified authorization type.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// The authorization type to use. The only valid value is `OAUTH`
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectSecondarySourceAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceAuth)(nil)).Elem()
}

func (i ProjectSecondarySourceAuthArgs) ToProjectSecondarySourceAuthOutput() ProjectSecondarySourceAuthOutput {
	return i.ToProjectSecondarySourceAuthOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceAuthArgs) ToProjectSecondarySourceAuthOutputWithContext(ctx context.Context) ProjectSecondarySourceAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceAuthOutput)
}

// ProjectSecondarySourceAuthArrayInput is an input type that accepts ProjectSecondarySourceAuthArray and ProjectSecondarySourceAuthArrayOutput values.
// You can construct a concrete instance of `ProjectSecondarySourceAuthArrayInput` via:
//
// 		 ProjectSecondarySourceAuthArray{ ProjectSecondarySourceAuthArgs{...} }
//
type ProjectSecondarySourceAuthArrayInput interface {
	pulumi.Input

	ToProjectSecondarySourceAuthArrayOutput() ProjectSecondarySourceAuthArrayOutput
	ToProjectSecondarySourceAuthArrayOutputWithContext(context.Context) ProjectSecondarySourceAuthArrayOutput
}

type ProjectSecondarySourceAuthArray []ProjectSecondarySourceAuthInput

func (ProjectSecondarySourceAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSecondarySourceAuth)(nil)).Elem()
}

func (i ProjectSecondarySourceAuthArray) ToProjectSecondarySourceAuthArrayOutput() ProjectSecondarySourceAuthArrayOutput {
	return i.ToProjectSecondarySourceAuthArrayOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceAuthArray) ToProjectSecondarySourceAuthArrayOutputWithContext(ctx context.Context) ProjectSecondarySourceAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceAuthArrayOutput)
}

type ProjectSecondarySourceAuthOutput struct{ *pulumi.OutputState }

func (ProjectSecondarySourceAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceAuth)(nil)).Elem()
}

func (o ProjectSecondarySourceAuthOutput) ToProjectSecondarySourceAuthOutput() ProjectSecondarySourceAuthOutput {
	return o
}

func (o ProjectSecondarySourceAuthOutput) ToProjectSecondarySourceAuthOutputWithContext(ctx context.Context) ProjectSecondarySourceAuthOutput {
	return o
}

// The resource value that applies to the specified authorization type.
func (o ProjectSecondarySourceAuthOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSecondarySourceAuth) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// The authorization type to use. The only valid value is `OAUTH`
func (o ProjectSecondarySourceAuthOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSecondarySourceAuth) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSecondarySourceAuthArrayOutput struct{ *pulumi.OutputState }

func (ProjectSecondarySourceAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSecondarySourceAuth)(nil)).Elem()
}

func (o ProjectSecondarySourceAuthArrayOutput) ToProjectSecondarySourceAuthArrayOutput() ProjectSecondarySourceAuthArrayOutput {
	return o
}

func (o ProjectSecondarySourceAuthArrayOutput) ToProjectSecondarySourceAuthArrayOutputWithContext(ctx context.Context) ProjectSecondarySourceAuthArrayOutput {
	return o
}

func (o ProjectSecondarySourceAuthArrayOutput) Index(i pulumi.IntInput) ProjectSecondarySourceAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSecondarySourceAuth {
		return vs[0].([]ProjectSecondarySourceAuth)[vs[1].(int)]
	}).(ProjectSecondarySourceAuthOutput)
}

type ProjectSecondarySourceGitSubmodulesConfig struct {
	// If set to true, fetches Git submodules for the AWS CodeBuild build project.
	FetchSubmodules bool `pulumi:"fetchSubmodules"`
}

// ProjectSecondarySourceGitSubmodulesConfigInput is an input type that accepts ProjectSecondarySourceGitSubmodulesConfigArgs and ProjectSecondarySourceGitSubmodulesConfigOutput values.
// You can construct a concrete instance of `ProjectSecondarySourceGitSubmodulesConfigInput` via:
//
// 		 ProjectSecondarySourceGitSubmodulesConfigArgs{...}
//
type ProjectSecondarySourceGitSubmodulesConfigInput interface {
	pulumi.Input

	ToProjectSecondarySourceGitSubmodulesConfigOutput() ProjectSecondarySourceGitSubmodulesConfigOutput
	ToProjectSecondarySourceGitSubmodulesConfigOutputWithContext(context.Context) ProjectSecondarySourceGitSubmodulesConfigOutput
}

type ProjectSecondarySourceGitSubmodulesConfigArgs struct {
	// If set to true, fetches Git submodules for the AWS CodeBuild build project.
	FetchSubmodules pulumi.BoolInput `pulumi:"fetchSubmodules"`
}

func (ProjectSecondarySourceGitSubmodulesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceGitSubmodulesConfig)(nil)).Elem()
}

func (i ProjectSecondarySourceGitSubmodulesConfigArgs) ToProjectSecondarySourceGitSubmodulesConfigOutput() ProjectSecondarySourceGitSubmodulesConfigOutput {
	return i.ToProjectSecondarySourceGitSubmodulesConfigOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceGitSubmodulesConfigArgs) ToProjectSecondarySourceGitSubmodulesConfigOutputWithContext(ctx context.Context) ProjectSecondarySourceGitSubmodulesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceGitSubmodulesConfigOutput)
}

func (i ProjectSecondarySourceGitSubmodulesConfigArgs) ToProjectSecondarySourceGitSubmodulesConfigPtrOutput() ProjectSecondarySourceGitSubmodulesConfigPtrOutput {
	return i.ToProjectSecondarySourceGitSubmodulesConfigPtrOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceGitSubmodulesConfigArgs) ToProjectSecondarySourceGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectSecondarySourceGitSubmodulesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceGitSubmodulesConfigOutput).ToProjectSecondarySourceGitSubmodulesConfigPtrOutputWithContext(ctx)
}

// ProjectSecondarySourceGitSubmodulesConfigPtrInput is an input type that accepts ProjectSecondarySourceGitSubmodulesConfigArgs, ProjectSecondarySourceGitSubmodulesConfigPtr and ProjectSecondarySourceGitSubmodulesConfigPtrOutput values.
// You can construct a concrete instance of `ProjectSecondarySourceGitSubmodulesConfigPtrInput` via:
//
// 		 ProjectSecondarySourceGitSubmodulesConfigArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectSecondarySourceGitSubmodulesConfigPtrInput interface {
	pulumi.Input

	ToProjectSecondarySourceGitSubmodulesConfigPtrOutput() ProjectSecondarySourceGitSubmodulesConfigPtrOutput
	ToProjectSecondarySourceGitSubmodulesConfigPtrOutputWithContext(context.Context) ProjectSecondarySourceGitSubmodulesConfigPtrOutput
}

type projectSecondarySourceGitSubmodulesConfigPtrType ProjectSecondarySourceGitSubmodulesConfigArgs

func ProjectSecondarySourceGitSubmodulesConfigPtr(v *ProjectSecondarySourceGitSubmodulesConfigArgs) ProjectSecondarySourceGitSubmodulesConfigPtrInput {
	return (*projectSecondarySourceGitSubmodulesConfigPtrType)(v)
}

func (*projectSecondarySourceGitSubmodulesConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSecondarySourceGitSubmodulesConfig)(nil)).Elem()
}

func (i *projectSecondarySourceGitSubmodulesConfigPtrType) ToProjectSecondarySourceGitSubmodulesConfigPtrOutput() ProjectSecondarySourceGitSubmodulesConfigPtrOutput {
	return i.ToProjectSecondarySourceGitSubmodulesConfigPtrOutputWithContext(context.Background())
}

func (i *projectSecondarySourceGitSubmodulesConfigPtrType) ToProjectSecondarySourceGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectSecondarySourceGitSubmodulesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceGitSubmodulesConfigPtrOutput)
}

type ProjectSecondarySourceGitSubmodulesConfigOutput struct{ *pulumi.OutputState }

func (ProjectSecondarySourceGitSubmodulesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceGitSubmodulesConfig)(nil)).Elem()
}

func (o ProjectSecondarySourceGitSubmodulesConfigOutput) ToProjectSecondarySourceGitSubmodulesConfigOutput() ProjectSecondarySourceGitSubmodulesConfigOutput {
	return o
}

func (o ProjectSecondarySourceGitSubmodulesConfigOutput) ToProjectSecondarySourceGitSubmodulesConfigOutputWithContext(ctx context.Context) ProjectSecondarySourceGitSubmodulesConfigOutput {
	return o
}

func (o ProjectSecondarySourceGitSubmodulesConfigOutput) ToProjectSecondarySourceGitSubmodulesConfigPtrOutput() ProjectSecondarySourceGitSubmodulesConfigPtrOutput {
	return o.ToProjectSecondarySourceGitSubmodulesConfigPtrOutputWithContext(context.Background())
}

func (o ProjectSecondarySourceGitSubmodulesConfigOutput) ToProjectSecondarySourceGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectSecondarySourceGitSubmodulesConfigPtrOutput {
	return o.ApplyT(func(v ProjectSecondarySourceGitSubmodulesConfig) *ProjectSecondarySourceGitSubmodulesConfig {
		return &v
	}).(ProjectSecondarySourceGitSubmodulesConfigPtrOutput)
}

// If set to true, fetches Git submodules for the AWS CodeBuild build project.
func (o ProjectSecondarySourceGitSubmodulesConfigOutput) FetchSubmodules() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectSecondarySourceGitSubmodulesConfig) bool { return v.FetchSubmodules }).(pulumi.BoolOutput)
}

type ProjectSecondarySourceGitSubmodulesConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectSecondarySourceGitSubmodulesConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSecondarySourceGitSubmodulesConfig)(nil)).Elem()
}

func (o ProjectSecondarySourceGitSubmodulesConfigPtrOutput) ToProjectSecondarySourceGitSubmodulesConfigPtrOutput() ProjectSecondarySourceGitSubmodulesConfigPtrOutput {
	return o
}

func (o ProjectSecondarySourceGitSubmodulesConfigPtrOutput) ToProjectSecondarySourceGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectSecondarySourceGitSubmodulesConfigPtrOutput {
	return o
}

func (o ProjectSecondarySourceGitSubmodulesConfigPtrOutput) Elem() ProjectSecondarySourceGitSubmodulesConfigOutput {
	return o.ApplyT(func(v *ProjectSecondarySourceGitSubmodulesConfig) ProjectSecondarySourceGitSubmodulesConfig {
		return *v
	}).(ProjectSecondarySourceGitSubmodulesConfigOutput)
}

// If set to true, fetches Git submodules for the AWS CodeBuild build project.
func (o ProjectSecondarySourceGitSubmodulesConfigPtrOutput) FetchSubmodules() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectSecondarySourceGitSubmodulesConfig) bool { return v.FetchSubmodules }).(pulumi.BoolOutput)
}

type ProjectSource struct {
	// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
	Auths []ProjectSourceAuth `pulumi:"auths"`
	// The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
	Buildspec *string `pulumi:"buildspec"`
	// Truncate git history to this many commits.
	GitCloneDepth *int `pulumi:"gitCloneDepth"`
	// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
	GitSubmodulesConfig *ProjectSourceGitSubmodulesConfig `pulumi:"gitSubmodulesConfig"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl *bool `pulumi:"insecureSsl"`
	// The location of the source code from git or s3.
	Location *string `pulumi:"location"`
	// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
	ReportBuildStatus *bool `pulumi:"reportBuildStatus"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.
	Type string `pulumi:"type"`
}

// ProjectSourceInput is an input type that accepts ProjectSourceArgs and ProjectSourceOutput values.
// You can construct a concrete instance of `ProjectSourceInput` via:
//
// 		 ProjectSourceArgs{...}
//
type ProjectSourceInput interface {
	pulumi.Input

	ToProjectSourceOutput() ProjectSourceOutput
	ToProjectSourceOutputWithContext(context.Context) ProjectSourceOutput
}

type ProjectSourceArgs struct {
	// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
	Auths ProjectSourceAuthArrayInput `pulumi:"auths"`
	// The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
	Buildspec pulumi.StringPtrInput `pulumi:"buildspec"`
	// Truncate git history to this many commits.
	GitCloneDepth pulumi.IntPtrInput `pulumi:"gitCloneDepth"`
	// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
	GitSubmodulesConfig ProjectSourceGitSubmodulesConfigPtrInput `pulumi:"gitSubmodulesConfig"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl pulumi.BoolPtrInput `pulumi:"insecureSsl"`
	// The location of the source code from git or s3.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
	ReportBuildStatus pulumi.BoolPtrInput `pulumi:"reportBuildStatus"`
	// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSource)(nil)).Elem()
}

func (i ProjectSourceArgs) ToProjectSourceOutput() ProjectSourceOutput {
	return i.ToProjectSourceOutputWithContext(context.Background())
}

func (i ProjectSourceArgs) ToProjectSourceOutputWithContext(ctx context.Context) ProjectSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceOutput)
}

func (i ProjectSourceArgs) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return i.ToProjectSourcePtrOutputWithContext(context.Background())
}

func (i ProjectSourceArgs) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceOutput).ToProjectSourcePtrOutputWithContext(ctx)
}

// ProjectSourcePtrInput is an input type that accepts ProjectSourceArgs, ProjectSourcePtr and ProjectSourcePtrOutput values.
// You can construct a concrete instance of `ProjectSourcePtrInput` via:
//
// 		 ProjectSourceArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectSourcePtrInput interface {
	pulumi.Input

	ToProjectSourcePtrOutput() ProjectSourcePtrOutput
	ToProjectSourcePtrOutputWithContext(context.Context) ProjectSourcePtrOutput
}

type projectSourcePtrType ProjectSourceArgs

func ProjectSourcePtr(v *ProjectSourceArgs) ProjectSourcePtrInput {
	return (*projectSourcePtrType)(v)
}

func (*projectSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSource)(nil)).Elem()
}

func (i *projectSourcePtrType) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return i.ToProjectSourcePtrOutputWithContext(context.Background())
}

func (i *projectSourcePtrType) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourcePtrOutput)
}

type ProjectSourceOutput struct{ *pulumi.OutputState }

func (ProjectSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSource)(nil)).Elem()
}

func (o ProjectSourceOutput) ToProjectSourceOutput() ProjectSourceOutput {
	return o
}

func (o ProjectSourceOutput) ToProjectSourceOutputWithContext(ctx context.Context) ProjectSourceOutput {
	return o
}

func (o ProjectSourceOutput) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return o.ToProjectSourcePtrOutputWithContext(context.Background())
}

func (o ProjectSourceOutput) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return o.ApplyT(func(v ProjectSource) *ProjectSource {
		return &v
	}).(ProjectSourcePtrOutput)
}

// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
func (o ProjectSourceOutput) Auths() ProjectSourceAuthArrayOutput {
	return o.ApplyT(func(v ProjectSource) []ProjectSourceAuth { return v.Auths }).(ProjectSourceAuthArrayOutput)
}

// The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
func (o ProjectSourceOutput) Buildspec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSource) *string { return v.Buildspec }).(pulumi.StringPtrOutput)
}

// Truncate git history to this many commits.
func (o ProjectSourceOutput) GitCloneDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectSource) *int { return v.GitCloneDepth }).(pulumi.IntPtrOutput)
}

// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
func (o ProjectSourceOutput) GitSubmodulesConfig() ProjectSourceGitSubmodulesConfigPtrOutput {
	return o.ApplyT(func(v ProjectSource) *ProjectSourceGitSubmodulesConfig { return v.GitSubmodulesConfig }).(ProjectSourceGitSubmodulesConfigPtrOutput)
}

// Ignore SSL warnings when connecting to source control.
func (o ProjectSourceOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSource) *bool { return v.InsecureSsl }).(pulumi.BoolPtrOutput)
}

// The location of the source code from git or s3.
func (o ProjectSourceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSource) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
func (o ProjectSourceOutput) ReportBuildStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSource) *bool { return v.ReportBuildStatus }).(pulumi.BoolPtrOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.
func (o ProjectSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSource) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSourcePtrOutput struct{ *pulumi.OutputState }

func (ProjectSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSource)(nil)).Elem()
}

func (o ProjectSourcePtrOutput) ToProjectSourcePtrOutput() ProjectSourcePtrOutput {
	return o
}

func (o ProjectSourcePtrOutput) ToProjectSourcePtrOutputWithContext(ctx context.Context) ProjectSourcePtrOutput {
	return o
}

func (o ProjectSourcePtrOutput) Elem() ProjectSourceOutput {
	return o.ApplyT(func(v *ProjectSource) ProjectSource { return *v }).(ProjectSourceOutput)
}

// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
func (o ProjectSourcePtrOutput) Auths() ProjectSourceAuthArrayOutput {
	return o.ApplyT(func(v ProjectSource) []ProjectSourceAuth { return v.Auths }).(ProjectSourceAuthArrayOutput)
}

// The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
func (o ProjectSourcePtrOutput) Buildspec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSource) *string { return v.Buildspec }).(pulumi.StringPtrOutput)
}

// Truncate git history to this many commits.
func (o ProjectSourcePtrOutput) GitCloneDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectSource) *int { return v.GitCloneDepth }).(pulumi.IntPtrOutput)
}

// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
func (o ProjectSourcePtrOutput) GitSubmodulesConfig() ProjectSourceGitSubmodulesConfigPtrOutput {
	return o.ApplyT(func(v ProjectSource) *ProjectSourceGitSubmodulesConfig { return v.GitSubmodulesConfig }).(ProjectSourceGitSubmodulesConfigPtrOutput)
}

// Ignore SSL warnings when connecting to source control.
func (o ProjectSourcePtrOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSource) *bool { return v.InsecureSsl }).(pulumi.BoolPtrOutput)
}

// The location of the source code from git or s3.
func (o ProjectSourcePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSource) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
func (o ProjectSourcePtrOutput) ReportBuildStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSource) *bool { return v.ReportBuildStatus }).(pulumi.BoolPtrOutput)
}

// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.
func (o ProjectSourcePtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSource) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSourceAuth struct {
	// The resource value that applies to the specified authorization type.
	Resource *string `pulumi:"resource"`
	// The authorization type to use. The only valid value is `OAUTH`
	Type string `pulumi:"type"`
}

// ProjectSourceAuthInput is an input type that accepts ProjectSourceAuthArgs and ProjectSourceAuthOutput values.
// You can construct a concrete instance of `ProjectSourceAuthInput` via:
//
// 		 ProjectSourceAuthArgs{...}
//
type ProjectSourceAuthInput interface {
	pulumi.Input

	ToProjectSourceAuthOutput() ProjectSourceAuthOutput
	ToProjectSourceAuthOutputWithContext(context.Context) ProjectSourceAuthOutput
}

type ProjectSourceAuthArgs struct {
	// The resource value that applies to the specified authorization type.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// The authorization type to use. The only valid value is `OAUTH`
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectSourceAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceAuth)(nil)).Elem()
}

func (i ProjectSourceAuthArgs) ToProjectSourceAuthOutput() ProjectSourceAuthOutput {
	return i.ToProjectSourceAuthOutputWithContext(context.Background())
}

func (i ProjectSourceAuthArgs) ToProjectSourceAuthOutputWithContext(ctx context.Context) ProjectSourceAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceAuthOutput)
}

// ProjectSourceAuthArrayInput is an input type that accepts ProjectSourceAuthArray and ProjectSourceAuthArrayOutput values.
// You can construct a concrete instance of `ProjectSourceAuthArrayInput` via:
//
// 		 ProjectSourceAuthArray{ ProjectSourceAuthArgs{...} }
//
type ProjectSourceAuthArrayInput interface {
	pulumi.Input

	ToProjectSourceAuthArrayOutput() ProjectSourceAuthArrayOutput
	ToProjectSourceAuthArrayOutputWithContext(context.Context) ProjectSourceAuthArrayOutput
}

type ProjectSourceAuthArray []ProjectSourceAuthInput

func (ProjectSourceAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSourceAuth)(nil)).Elem()
}

func (i ProjectSourceAuthArray) ToProjectSourceAuthArrayOutput() ProjectSourceAuthArrayOutput {
	return i.ToProjectSourceAuthArrayOutputWithContext(context.Background())
}

func (i ProjectSourceAuthArray) ToProjectSourceAuthArrayOutputWithContext(ctx context.Context) ProjectSourceAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceAuthArrayOutput)
}

type ProjectSourceAuthOutput struct{ *pulumi.OutputState }

func (ProjectSourceAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceAuth)(nil)).Elem()
}

func (o ProjectSourceAuthOutput) ToProjectSourceAuthOutput() ProjectSourceAuthOutput {
	return o
}

func (o ProjectSourceAuthOutput) ToProjectSourceAuthOutputWithContext(ctx context.Context) ProjectSourceAuthOutput {
	return o
}

// The resource value that applies to the specified authorization type.
func (o ProjectSourceAuthOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSourceAuth) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// The authorization type to use. The only valid value is `OAUTH`
func (o ProjectSourceAuthOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSourceAuth) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSourceAuthArrayOutput struct{ *pulumi.OutputState }

func (ProjectSourceAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSourceAuth)(nil)).Elem()
}

func (o ProjectSourceAuthArrayOutput) ToProjectSourceAuthArrayOutput() ProjectSourceAuthArrayOutput {
	return o
}

func (o ProjectSourceAuthArrayOutput) ToProjectSourceAuthArrayOutputWithContext(ctx context.Context) ProjectSourceAuthArrayOutput {
	return o
}

func (o ProjectSourceAuthArrayOutput) Index(i pulumi.IntInput) ProjectSourceAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSourceAuth {
		return vs[0].([]ProjectSourceAuth)[vs[1].(int)]
	}).(ProjectSourceAuthOutput)
}

type ProjectSourceGitSubmodulesConfig struct {
	// If set to true, fetches Git submodules for the AWS CodeBuild build project.
	FetchSubmodules bool `pulumi:"fetchSubmodules"`
}

// ProjectSourceGitSubmodulesConfigInput is an input type that accepts ProjectSourceGitSubmodulesConfigArgs and ProjectSourceGitSubmodulesConfigOutput values.
// You can construct a concrete instance of `ProjectSourceGitSubmodulesConfigInput` via:
//
// 		 ProjectSourceGitSubmodulesConfigArgs{...}
//
type ProjectSourceGitSubmodulesConfigInput interface {
	pulumi.Input

	ToProjectSourceGitSubmodulesConfigOutput() ProjectSourceGitSubmodulesConfigOutput
	ToProjectSourceGitSubmodulesConfigOutputWithContext(context.Context) ProjectSourceGitSubmodulesConfigOutput
}

type ProjectSourceGitSubmodulesConfigArgs struct {
	// If set to true, fetches Git submodules for the AWS CodeBuild build project.
	FetchSubmodules pulumi.BoolInput `pulumi:"fetchSubmodules"`
}

func (ProjectSourceGitSubmodulesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceGitSubmodulesConfig)(nil)).Elem()
}

func (i ProjectSourceGitSubmodulesConfigArgs) ToProjectSourceGitSubmodulesConfigOutput() ProjectSourceGitSubmodulesConfigOutput {
	return i.ToProjectSourceGitSubmodulesConfigOutputWithContext(context.Background())
}

func (i ProjectSourceGitSubmodulesConfigArgs) ToProjectSourceGitSubmodulesConfigOutputWithContext(ctx context.Context) ProjectSourceGitSubmodulesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceGitSubmodulesConfigOutput)
}

func (i ProjectSourceGitSubmodulesConfigArgs) ToProjectSourceGitSubmodulesConfigPtrOutput() ProjectSourceGitSubmodulesConfigPtrOutput {
	return i.ToProjectSourceGitSubmodulesConfigPtrOutputWithContext(context.Background())
}

func (i ProjectSourceGitSubmodulesConfigArgs) ToProjectSourceGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectSourceGitSubmodulesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceGitSubmodulesConfigOutput).ToProjectSourceGitSubmodulesConfigPtrOutputWithContext(ctx)
}

// ProjectSourceGitSubmodulesConfigPtrInput is an input type that accepts ProjectSourceGitSubmodulesConfigArgs, ProjectSourceGitSubmodulesConfigPtr and ProjectSourceGitSubmodulesConfigPtrOutput values.
// You can construct a concrete instance of `ProjectSourceGitSubmodulesConfigPtrInput` via:
//
// 		 ProjectSourceGitSubmodulesConfigArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectSourceGitSubmodulesConfigPtrInput interface {
	pulumi.Input

	ToProjectSourceGitSubmodulesConfigPtrOutput() ProjectSourceGitSubmodulesConfigPtrOutput
	ToProjectSourceGitSubmodulesConfigPtrOutputWithContext(context.Context) ProjectSourceGitSubmodulesConfigPtrOutput
}

type projectSourceGitSubmodulesConfigPtrType ProjectSourceGitSubmodulesConfigArgs

func ProjectSourceGitSubmodulesConfigPtr(v *ProjectSourceGitSubmodulesConfigArgs) ProjectSourceGitSubmodulesConfigPtrInput {
	return (*projectSourceGitSubmodulesConfigPtrType)(v)
}

func (*projectSourceGitSubmodulesConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSourceGitSubmodulesConfig)(nil)).Elem()
}

func (i *projectSourceGitSubmodulesConfigPtrType) ToProjectSourceGitSubmodulesConfigPtrOutput() ProjectSourceGitSubmodulesConfigPtrOutput {
	return i.ToProjectSourceGitSubmodulesConfigPtrOutputWithContext(context.Background())
}

func (i *projectSourceGitSubmodulesConfigPtrType) ToProjectSourceGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectSourceGitSubmodulesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceGitSubmodulesConfigPtrOutput)
}

type ProjectSourceGitSubmodulesConfigOutput struct{ *pulumi.OutputState }

func (ProjectSourceGitSubmodulesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceGitSubmodulesConfig)(nil)).Elem()
}

func (o ProjectSourceGitSubmodulesConfigOutput) ToProjectSourceGitSubmodulesConfigOutput() ProjectSourceGitSubmodulesConfigOutput {
	return o
}

func (o ProjectSourceGitSubmodulesConfigOutput) ToProjectSourceGitSubmodulesConfigOutputWithContext(ctx context.Context) ProjectSourceGitSubmodulesConfigOutput {
	return o
}

func (o ProjectSourceGitSubmodulesConfigOutput) ToProjectSourceGitSubmodulesConfigPtrOutput() ProjectSourceGitSubmodulesConfigPtrOutput {
	return o.ToProjectSourceGitSubmodulesConfigPtrOutputWithContext(context.Background())
}

func (o ProjectSourceGitSubmodulesConfigOutput) ToProjectSourceGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectSourceGitSubmodulesConfigPtrOutput {
	return o.ApplyT(func(v ProjectSourceGitSubmodulesConfig) *ProjectSourceGitSubmodulesConfig {
		return &v
	}).(ProjectSourceGitSubmodulesConfigPtrOutput)
}

// If set to true, fetches Git submodules for the AWS CodeBuild build project.
func (o ProjectSourceGitSubmodulesConfigOutput) FetchSubmodules() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectSourceGitSubmodulesConfig) bool { return v.FetchSubmodules }).(pulumi.BoolOutput)
}

type ProjectSourceGitSubmodulesConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectSourceGitSubmodulesConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSourceGitSubmodulesConfig)(nil)).Elem()
}

func (o ProjectSourceGitSubmodulesConfigPtrOutput) ToProjectSourceGitSubmodulesConfigPtrOutput() ProjectSourceGitSubmodulesConfigPtrOutput {
	return o
}

func (o ProjectSourceGitSubmodulesConfigPtrOutput) ToProjectSourceGitSubmodulesConfigPtrOutputWithContext(ctx context.Context) ProjectSourceGitSubmodulesConfigPtrOutput {
	return o
}

func (o ProjectSourceGitSubmodulesConfigPtrOutput) Elem() ProjectSourceGitSubmodulesConfigOutput {
	return o.ApplyT(func(v *ProjectSourceGitSubmodulesConfig) ProjectSourceGitSubmodulesConfig { return *v }).(ProjectSourceGitSubmodulesConfigOutput)
}

// If set to true, fetches Git submodules for the AWS CodeBuild build project.
func (o ProjectSourceGitSubmodulesConfigPtrOutput) FetchSubmodules() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectSourceGitSubmodulesConfig) bool { return v.FetchSubmodules }).(pulumi.BoolOutput)
}

type ProjectVpcConfig struct {
	// The security group IDs to assign to running builds.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnet IDs within which to run builds.
	Subnets []string `pulumi:"subnets"`
	// The ID of the VPC within which to run builds.
	VpcId string `pulumi:"vpcId"`
}

// ProjectVpcConfigInput is an input type that accepts ProjectVpcConfigArgs and ProjectVpcConfigOutput values.
// You can construct a concrete instance of `ProjectVpcConfigInput` via:
//
// 		 ProjectVpcConfigArgs{...}
//
type ProjectVpcConfigInput interface {
	pulumi.Input

	ToProjectVpcConfigOutput() ProjectVpcConfigOutput
	ToProjectVpcConfigOutputWithContext(context.Context) ProjectVpcConfigOutput
}

type ProjectVpcConfigArgs struct {
	// The security group IDs to assign to running builds.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The subnet IDs within which to run builds.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
	// The ID of the VPC within which to run builds.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (ProjectVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVpcConfig)(nil)).Elem()
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigOutput() ProjectVpcConfigOutput {
	return i.ToProjectVpcConfigOutputWithContext(context.Background())
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigOutputWithContext(ctx context.Context) ProjectVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcConfigOutput)
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return i.ToProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcConfigOutput).ToProjectVpcConfigPtrOutputWithContext(ctx)
}

// ProjectVpcConfigPtrInput is an input type that accepts ProjectVpcConfigArgs, ProjectVpcConfigPtr and ProjectVpcConfigPtrOutput values.
// You can construct a concrete instance of `ProjectVpcConfigPtrInput` via:
//
// 		 ProjectVpcConfigArgs{...}
//
//  or:
//
// 		 nil
//
type ProjectVpcConfigPtrInput interface {
	pulumi.Input

	ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput
	ToProjectVpcConfigPtrOutputWithContext(context.Context) ProjectVpcConfigPtrOutput
}

type projectVpcConfigPtrType ProjectVpcConfigArgs

func ProjectVpcConfigPtr(v *ProjectVpcConfigArgs) ProjectVpcConfigPtrInput {
	return (*projectVpcConfigPtrType)(v)
}

func (*projectVpcConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectVpcConfig)(nil)).Elem()
}

func (i *projectVpcConfigPtrType) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return i.ToProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (i *projectVpcConfigPtrType) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcConfigPtrOutput)
}

type ProjectVpcConfigOutput struct{ *pulumi.OutputState }

func (ProjectVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVpcConfig)(nil)).Elem()
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigOutput() ProjectVpcConfigOutput {
	return o
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigOutputWithContext(ctx context.Context) ProjectVpcConfigOutput {
	return o
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return o.ToProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return o.ApplyT(func(v ProjectVpcConfig) *ProjectVpcConfig {
		return &v
	}).(ProjectVpcConfigPtrOutput)
}

// The security group IDs to assign to running builds.
func (o ProjectVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The subnet IDs within which to run builds.
func (o ProjectVpcConfigOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectVpcConfig) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// The ID of the VPC within which to run builds.
func (o ProjectVpcConfigOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectVpcConfig) string { return v.VpcId }).(pulumi.StringOutput)
}

type ProjectVpcConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectVpcConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectVpcConfig)(nil)).Elem()
}

func (o ProjectVpcConfigPtrOutput) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return o
}

func (o ProjectVpcConfigPtrOutput) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return o
}

func (o ProjectVpcConfigPtrOutput) Elem() ProjectVpcConfigOutput {
	return o.ApplyT(func(v *ProjectVpcConfig) ProjectVpcConfig { return *v }).(ProjectVpcConfigOutput)
}

// The security group IDs to assign to running builds.
func (o ProjectVpcConfigPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The subnet IDs within which to run builds.
func (o ProjectVpcConfigPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectVpcConfig) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// The ID of the VPC within which to run builds.
func (o ProjectVpcConfigPtrOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectVpcConfig) string { return v.VpcId }).(pulumi.StringOutput)
}

type WebhookFilterGroup struct {
	// A webhook filter for the group. Filter blocks are documented below.
	Filters []WebhookFilterGroupFilter `pulumi:"filters"`
}

// WebhookFilterGroupInput is an input type that accepts WebhookFilterGroupArgs and WebhookFilterGroupOutput values.
// You can construct a concrete instance of `WebhookFilterGroupInput` via:
//
// 		 WebhookFilterGroupArgs{...}
//
type WebhookFilterGroupInput interface {
	pulumi.Input

	ToWebhookFilterGroupOutput() WebhookFilterGroupOutput
	ToWebhookFilterGroupOutputWithContext(context.Context) WebhookFilterGroupOutput
}

type WebhookFilterGroupArgs struct {
	// A webhook filter for the group. Filter blocks are documented below.
	Filters WebhookFilterGroupFilterArrayInput `pulumi:"filters"`
}

func (WebhookFilterGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookFilterGroup)(nil)).Elem()
}

func (i WebhookFilterGroupArgs) ToWebhookFilterGroupOutput() WebhookFilterGroupOutput {
	return i.ToWebhookFilterGroupOutputWithContext(context.Background())
}

func (i WebhookFilterGroupArgs) ToWebhookFilterGroupOutputWithContext(ctx context.Context) WebhookFilterGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookFilterGroupOutput)
}

// WebhookFilterGroupArrayInput is an input type that accepts WebhookFilterGroupArray and WebhookFilterGroupArrayOutput values.
// You can construct a concrete instance of `WebhookFilterGroupArrayInput` via:
//
// 		 WebhookFilterGroupArray{ WebhookFilterGroupArgs{...} }
//
type WebhookFilterGroupArrayInput interface {
	pulumi.Input

	ToWebhookFilterGroupArrayOutput() WebhookFilterGroupArrayOutput
	ToWebhookFilterGroupArrayOutputWithContext(context.Context) WebhookFilterGroupArrayOutput
}

type WebhookFilterGroupArray []WebhookFilterGroupInput

func (WebhookFilterGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookFilterGroup)(nil)).Elem()
}

func (i WebhookFilterGroupArray) ToWebhookFilterGroupArrayOutput() WebhookFilterGroupArrayOutput {
	return i.ToWebhookFilterGroupArrayOutputWithContext(context.Background())
}

func (i WebhookFilterGroupArray) ToWebhookFilterGroupArrayOutputWithContext(ctx context.Context) WebhookFilterGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookFilterGroupArrayOutput)
}

type WebhookFilterGroupOutput struct{ *pulumi.OutputState }

func (WebhookFilterGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookFilterGroup)(nil)).Elem()
}

func (o WebhookFilterGroupOutput) ToWebhookFilterGroupOutput() WebhookFilterGroupOutput {
	return o
}

func (o WebhookFilterGroupOutput) ToWebhookFilterGroupOutputWithContext(ctx context.Context) WebhookFilterGroupOutput {
	return o
}

// A webhook filter for the group. Filter blocks are documented below.
func (o WebhookFilterGroupOutput) Filters() WebhookFilterGroupFilterArrayOutput {
	return o.ApplyT(func(v WebhookFilterGroup) []WebhookFilterGroupFilter { return v.Filters }).(WebhookFilterGroupFilterArrayOutput)
}

type WebhookFilterGroupArrayOutput struct{ *pulumi.OutputState }

func (WebhookFilterGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookFilterGroup)(nil)).Elem()
}

func (o WebhookFilterGroupArrayOutput) ToWebhookFilterGroupArrayOutput() WebhookFilterGroupArrayOutput {
	return o
}

func (o WebhookFilterGroupArrayOutput) ToWebhookFilterGroupArrayOutputWithContext(ctx context.Context) WebhookFilterGroupArrayOutput {
	return o
}

func (o WebhookFilterGroupArrayOutput) Index(i pulumi.IntInput) WebhookFilterGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookFilterGroup {
		return vs[0].([]WebhookFilterGroup)[vs[1].(int)]
	}).(WebhookFilterGroupOutput)
}

type WebhookFilterGroupFilter struct {
	// If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
	ExcludeMatchedPattern *bool `pulumi:"excludeMatchedPattern"`
	// For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
	Pattern string `pulumi:"pattern"`
	// The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`. At least one filter group must specify `EVENT` as its type.
	Type string `pulumi:"type"`
}

// WebhookFilterGroupFilterInput is an input type that accepts WebhookFilterGroupFilterArgs and WebhookFilterGroupFilterOutput values.
// You can construct a concrete instance of `WebhookFilterGroupFilterInput` via:
//
// 		 WebhookFilterGroupFilterArgs{...}
//
type WebhookFilterGroupFilterInput interface {
	pulumi.Input

	ToWebhookFilterGroupFilterOutput() WebhookFilterGroupFilterOutput
	ToWebhookFilterGroupFilterOutputWithContext(context.Context) WebhookFilterGroupFilterOutput
}

type WebhookFilterGroupFilterArgs struct {
	// If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
	ExcludeMatchedPattern pulumi.BoolPtrInput `pulumi:"excludeMatchedPattern"`
	// For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
	Pattern pulumi.StringInput `pulumi:"pattern"`
	// The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`. At least one filter group must specify `EVENT` as its type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebhookFilterGroupFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookFilterGroupFilter)(nil)).Elem()
}

func (i WebhookFilterGroupFilterArgs) ToWebhookFilterGroupFilterOutput() WebhookFilterGroupFilterOutput {
	return i.ToWebhookFilterGroupFilterOutputWithContext(context.Background())
}

func (i WebhookFilterGroupFilterArgs) ToWebhookFilterGroupFilterOutputWithContext(ctx context.Context) WebhookFilterGroupFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookFilterGroupFilterOutput)
}

// WebhookFilterGroupFilterArrayInput is an input type that accepts WebhookFilterGroupFilterArray and WebhookFilterGroupFilterArrayOutput values.
// You can construct a concrete instance of `WebhookFilterGroupFilterArrayInput` via:
//
// 		 WebhookFilterGroupFilterArray{ WebhookFilterGroupFilterArgs{...} }
//
type WebhookFilterGroupFilterArrayInput interface {
	pulumi.Input

	ToWebhookFilterGroupFilterArrayOutput() WebhookFilterGroupFilterArrayOutput
	ToWebhookFilterGroupFilterArrayOutputWithContext(context.Context) WebhookFilterGroupFilterArrayOutput
}

type WebhookFilterGroupFilterArray []WebhookFilterGroupFilterInput

func (WebhookFilterGroupFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookFilterGroupFilter)(nil)).Elem()
}

func (i WebhookFilterGroupFilterArray) ToWebhookFilterGroupFilterArrayOutput() WebhookFilterGroupFilterArrayOutput {
	return i.ToWebhookFilterGroupFilterArrayOutputWithContext(context.Background())
}

func (i WebhookFilterGroupFilterArray) ToWebhookFilterGroupFilterArrayOutputWithContext(ctx context.Context) WebhookFilterGroupFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookFilterGroupFilterArrayOutput)
}

type WebhookFilterGroupFilterOutput struct{ *pulumi.OutputState }

func (WebhookFilterGroupFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookFilterGroupFilter)(nil)).Elem()
}

func (o WebhookFilterGroupFilterOutput) ToWebhookFilterGroupFilterOutput() WebhookFilterGroupFilterOutput {
	return o
}

func (o WebhookFilterGroupFilterOutput) ToWebhookFilterGroupFilterOutputWithContext(ctx context.Context) WebhookFilterGroupFilterOutput {
	return o
}

// If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
func (o WebhookFilterGroupFilterOutput) ExcludeMatchedPattern() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebhookFilterGroupFilter) *bool { return v.ExcludeMatchedPattern }).(pulumi.BoolPtrOutput)
}

// For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
func (o WebhookFilterGroupFilterOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookFilterGroupFilter) string { return v.Pattern }).(pulumi.StringOutput)
}

// The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`. At least one filter group must specify `EVENT` as its type.
func (o WebhookFilterGroupFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookFilterGroupFilter) string { return v.Type }).(pulumi.StringOutput)
}

type WebhookFilterGroupFilterArrayOutput struct{ *pulumi.OutputState }

func (WebhookFilterGroupFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookFilterGroupFilter)(nil)).Elem()
}

func (o WebhookFilterGroupFilterArrayOutput) ToWebhookFilterGroupFilterArrayOutput() WebhookFilterGroupFilterArrayOutput {
	return o
}

func (o WebhookFilterGroupFilterArrayOutput) ToWebhookFilterGroupFilterArrayOutputWithContext(ctx context.Context) WebhookFilterGroupFilterArrayOutput {
	return o
}

func (o WebhookFilterGroupFilterArrayOutput) Index(i pulumi.IntInput) WebhookFilterGroupFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookFilterGroupFilter {
		return vs[0].([]WebhookFilterGroupFilter)[vs[1].(int)]
	}).(WebhookFilterGroupFilterOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectArtifactsOutput{})
	pulumi.RegisterOutputType(ProjectArtifactsPtrOutput{})
	pulumi.RegisterOutputType(ProjectCacheOutput{})
	pulumi.RegisterOutputType(ProjectCachePtrOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentRegistryCredentialPtrOutput{})
	pulumi.RegisterOutputType(ProjectLogsConfigOutput{})
	pulumi.RegisterOutputType(ProjectLogsConfigPtrOutput{})
	pulumi.RegisterOutputType(ProjectLogsConfigCloudwatchLogsOutput{})
	pulumi.RegisterOutputType(ProjectLogsConfigCloudwatchLogsPtrOutput{})
	pulumi.RegisterOutputType(ProjectLogsConfigS3LogsOutput{})
	pulumi.RegisterOutputType(ProjectLogsConfigS3LogsPtrOutput{})
	pulumi.RegisterOutputType(ProjectSecondaryArtifactOutput{})
	pulumi.RegisterOutputType(ProjectSecondaryArtifactArrayOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceArrayOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceAuthOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceAuthArrayOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceGitSubmodulesConfigOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceGitSubmodulesConfigPtrOutput{})
	pulumi.RegisterOutputType(ProjectSourceOutput{})
	pulumi.RegisterOutputType(ProjectSourcePtrOutput{})
	pulumi.RegisterOutputType(ProjectSourceAuthOutput{})
	pulumi.RegisterOutputType(ProjectSourceAuthArrayOutput{})
	pulumi.RegisterOutputType(ProjectSourceGitSubmodulesConfigOutput{})
	pulumi.RegisterOutputType(ProjectSourceGitSubmodulesConfigPtrOutput{})
	pulumi.RegisterOutputType(ProjectVpcConfigOutput{})
	pulumi.RegisterOutputType(ProjectVpcConfigPtrOutput{})
	pulumi.RegisterOutputType(WebhookFilterGroupOutput{})
	pulumi.RegisterOutputType(WebhookFilterGroupArrayOutput{})
	pulumi.RegisterOutputType(WebhookFilterGroupFilterOutput{})
	pulumi.RegisterOutputType(WebhookFilterGroupFilterArrayOutput{})
}
