// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Project struct {
	pulumi.CustomResourceState

	Arn                     pulumi.StringOutput                      `pulumi:"arn"`
	Artifacts               ProjectArtifactsOutput                   `pulumi:"artifacts"`
	BadgeEnabled            pulumi.BoolPtrOutput                     `pulumi:"badgeEnabled"`
	BadgeUrl                pulumi.StringOutput                      `pulumi:"badgeUrl"`
	BuildBatchConfig        ProjectBuildBatchConfigPtrOutput         `pulumi:"buildBatchConfig"`
	BuildTimeout            pulumi.IntPtrOutput                      `pulumi:"buildTimeout"`
	Cache                   ProjectCachePtrOutput                    `pulumi:"cache"`
	ConcurrentBuildLimit    pulumi.IntPtrOutput                      `pulumi:"concurrentBuildLimit"`
	Description             pulumi.StringOutput                      `pulumi:"description"`
	EncryptionKey           pulumi.StringOutput                      `pulumi:"encryptionKey"`
	Environment             ProjectEnvironmentOutput                 `pulumi:"environment"`
	FileSystemLocations     ProjectFileSystemLocationArrayOutput     `pulumi:"fileSystemLocations"`
	LogsConfig              ProjectLogsConfigPtrOutput               `pulumi:"logsConfig"`
	Name                    pulumi.StringOutput                      `pulumi:"name"`
	ProjectVisibility       pulumi.StringPtrOutput                   `pulumi:"projectVisibility"`
	PublicProjectAlias      pulumi.StringOutput                      `pulumi:"publicProjectAlias"`
	QueuedTimeout           pulumi.IntPtrOutput                      `pulumi:"queuedTimeout"`
	ResourceAccessRole      pulumi.StringPtrOutput                   `pulumi:"resourceAccessRole"`
	SecondaryArtifacts      ProjectSecondaryArtifactArrayOutput      `pulumi:"secondaryArtifacts"`
	SecondarySourceVersions ProjectSecondarySourceVersionArrayOutput `pulumi:"secondarySourceVersions"`
	SecondarySources        ProjectSecondarySourceArrayOutput        `pulumi:"secondarySources"`
	ServiceRole             pulumi.StringOutput                      `pulumi:"serviceRole"`
	Source                  ProjectSourceOutput                      `pulumi:"source"`
	SourceVersion           pulumi.StringPtrOutput                   `pulumi:"sourceVersion"`
	Tags                    pulumi.StringMapOutput                   `pulumi:"tags"`
	TagsAll                 pulumi.StringMapOutput                   `pulumi:"tagsAll"`
	VpcConfig               ProjectVpcConfigPtrOutput                `pulumi:"vpcConfig"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Artifacts == nil {
		return nil, errors.New("invalid value for required argument 'Artifacts'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ServiceRole == nil {
		return nil, errors.New("invalid value for required argument 'ServiceRole'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	var resource Project
	err := ctx.RegisterResource("aws:codebuild/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("aws:codebuild/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	Arn                     *string                         `pulumi:"arn"`
	Artifacts               *ProjectArtifacts               `pulumi:"artifacts"`
	BadgeEnabled            *bool                           `pulumi:"badgeEnabled"`
	BadgeUrl                *string                         `pulumi:"badgeUrl"`
	BuildBatchConfig        *ProjectBuildBatchConfig        `pulumi:"buildBatchConfig"`
	BuildTimeout            *int                            `pulumi:"buildTimeout"`
	Cache                   *ProjectCache                   `pulumi:"cache"`
	ConcurrentBuildLimit    *int                            `pulumi:"concurrentBuildLimit"`
	Description             *string                         `pulumi:"description"`
	EncryptionKey           *string                         `pulumi:"encryptionKey"`
	Environment             *ProjectEnvironment             `pulumi:"environment"`
	FileSystemLocations     []ProjectFileSystemLocation     `pulumi:"fileSystemLocations"`
	LogsConfig              *ProjectLogsConfig              `pulumi:"logsConfig"`
	Name                    *string                         `pulumi:"name"`
	ProjectVisibility       *string                         `pulumi:"projectVisibility"`
	PublicProjectAlias      *string                         `pulumi:"publicProjectAlias"`
	QueuedTimeout           *int                            `pulumi:"queuedTimeout"`
	ResourceAccessRole      *string                         `pulumi:"resourceAccessRole"`
	SecondaryArtifacts      []ProjectSecondaryArtifact      `pulumi:"secondaryArtifacts"`
	SecondarySourceVersions []ProjectSecondarySourceVersion `pulumi:"secondarySourceVersions"`
	SecondarySources        []ProjectSecondarySource        `pulumi:"secondarySources"`
	ServiceRole             *string                         `pulumi:"serviceRole"`
	Source                  *ProjectSource                  `pulumi:"source"`
	SourceVersion           *string                         `pulumi:"sourceVersion"`
	Tags                    map[string]string               `pulumi:"tags"`
	TagsAll                 map[string]string               `pulumi:"tagsAll"`
	VpcConfig               *ProjectVpcConfig               `pulumi:"vpcConfig"`
}

type ProjectState struct {
	Arn                     pulumi.StringPtrInput
	Artifacts               ProjectArtifactsPtrInput
	BadgeEnabled            pulumi.BoolPtrInput
	BadgeUrl                pulumi.StringPtrInput
	BuildBatchConfig        ProjectBuildBatchConfigPtrInput
	BuildTimeout            pulumi.IntPtrInput
	Cache                   ProjectCachePtrInput
	ConcurrentBuildLimit    pulumi.IntPtrInput
	Description             pulumi.StringPtrInput
	EncryptionKey           pulumi.StringPtrInput
	Environment             ProjectEnvironmentPtrInput
	FileSystemLocations     ProjectFileSystemLocationArrayInput
	LogsConfig              ProjectLogsConfigPtrInput
	Name                    pulumi.StringPtrInput
	ProjectVisibility       pulumi.StringPtrInput
	PublicProjectAlias      pulumi.StringPtrInput
	QueuedTimeout           pulumi.IntPtrInput
	ResourceAccessRole      pulumi.StringPtrInput
	SecondaryArtifacts      ProjectSecondaryArtifactArrayInput
	SecondarySourceVersions ProjectSecondarySourceVersionArrayInput
	SecondarySources        ProjectSecondarySourceArrayInput
	ServiceRole             pulumi.StringPtrInput
	Source                  ProjectSourcePtrInput
	SourceVersion           pulumi.StringPtrInput
	Tags                    pulumi.StringMapInput
	TagsAll                 pulumi.StringMapInput
	VpcConfig               ProjectVpcConfigPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	Artifacts               ProjectArtifacts                `pulumi:"artifacts"`
	BadgeEnabled            *bool                           `pulumi:"badgeEnabled"`
	BuildBatchConfig        *ProjectBuildBatchConfig        `pulumi:"buildBatchConfig"`
	BuildTimeout            *int                            `pulumi:"buildTimeout"`
	Cache                   *ProjectCache                   `pulumi:"cache"`
	ConcurrentBuildLimit    *int                            `pulumi:"concurrentBuildLimit"`
	Description             *string                         `pulumi:"description"`
	EncryptionKey           *string                         `pulumi:"encryptionKey"`
	Environment             ProjectEnvironment              `pulumi:"environment"`
	FileSystemLocations     []ProjectFileSystemLocation     `pulumi:"fileSystemLocations"`
	LogsConfig              *ProjectLogsConfig              `pulumi:"logsConfig"`
	Name                    *string                         `pulumi:"name"`
	ProjectVisibility       *string                         `pulumi:"projectVisibility"`
	QueuedTimeout           *int                            `pulumi:"queuedTimeout"`
	ResourceAccessRole      *string                         `pulumi:"resourceAccessRole"`
	SecondaryArtifacts      []ProjectSecondaryArtifact      `pulumi:"secondaryArtifacts"`
	SecondarySourceVersions []ProjectSecondarySourceVersion `pulumi:"secondarySourceVersions"`
	SecondarySources        []ProjectSecondarySource        `pulumi:"secondarySources"`
	ServiceRole             string                          `pulumi:"serviceRole"`
	Source                  ProjectSource                   `pulumi:"source"`
	SourceVersion           *string                         `pulumi:"sourceVersion"`
	Tags                    map[string]string               `pulumi:"tags"`
	VpcConfig               *ProjectVpcConfig               `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	Artifacts               ProjectArtifactsInput
	BadgeEnabled            pulumi.BoolPtrInput
	BuildBatchConfig        ProjectBuildBatchConfigPtrInput
	BuildTimeout            pulumi.IntPtrInput
	Cache                   ProjectCachePtrInput
	ConcurrentBuildLimit    pulumi.IntPtrInput
	Description             pulumi.StringPtrInput
	EncryptionKey           pulumi.StringPtrInput
	Environment             ProjectEnvironmentInput
	FileSystemLocations     ProjectFileSystemLocationArrayInput
	LogsConfig              ProjectLogsConfigPtrInput
	Name                    pulumi.StringPtrInput
	ProjectVisibility       pulumi.StringPtrInput
	QueuedTimeout           pulumi.IntPtrInput
	ResourceAccessRole      pulumi.StringPtrInput
	SecondaryArtifacts      ProjectSecondaryArtifactArrayInput
	SecondarySourceVersions ProjectSecondarySourceVersionArrayInput
	SecondarySources        ProjectSecondarySourceArrayInput
	ServiceRole             pulumi.StringInput
	Source                  ProjectSourceInput
	SourceVersion           pulumi.StringPtrInput
	Tags                    pulumi.StringMapInput
	VpcConfig               ProjectVpcConfigPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

func (o ProjectOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ProjectOutput) Artifacts() ProjectArtifactsOutput {
	return o.ApplyT(func(v *Project) ProjectArtifactsOutput { return v.Artifacts }).(ProjectArtifactsOutput)
}

func (o ProjectOutput) BadgeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.BadgeEnabled }).(pulumi.BoolPtrOutput)
}

func (o ProjectOutput) BadgeUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.BadgeUrl }).(pulumi.StringOutput)
}

func (o ProjectOutput) BuildBatchConfig() ProjectBuildBatchConfigPtrOutput {
	return o.ApplyT(func(v *Project) ProjectBuildBatchConfigPtrOutput { return v.BuildBatchConfig }).(ProjectBuildBatchConfigPtrOutput)
}

func (o ProjectOutput) BuildTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.IntPtrOutput { return v.BuildTimeout }).(pulumi.IntPtrOutput)
}

func (o ProjectOutput) Cache() ProjectCachePtrOutput {
	return o.ApplyT(func(v *Project) ProjectCachePtrOutput { return v.Cache }).(ProjectCachePtrOutput)
}

func (o ProjectOutput) ConcurrentBuildLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.IntPtrOutput { return v.ConcurrentBuildLimit }).(pulumi.IntPtrOutput)
}

func (o ProjectOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ProjectOutput) EncryptionKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.EncryptionKey }).(pulumi.StringOutput)
}

func (o ProjectOutput) Environment() ProjectEnvironmentOutput {
	return o.ApplyT(func(v *Project) ProjectEnvironmentOutput { return v.Environment }).(ProjectEnvironmentOutput)
}

func (o ProjectOutput) FileSystemLocations() ProjectFileSystemLocationArrayOutput {
	return o.ApplyT(func(v *Project) ProjectFileSystemLocationArrayOutput { return v.FileSystemLocations }).(ProjectFileSystemLocationArrayOutput)
}

func (o ProjectOutput) LogsConfig() ProjectLogsConfigPtrOutput {
	return o.ApplyT(func(v *Project) ProjectLogsConfigPtrOutput { return v.LogsConfig }).(ProjectLogsConfigPtrOutput)
}

func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProjectOutput) ProjectVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.ProjectVisibility }).(pulumi.StringPtrOutput)
}

func (o ProjectOutput) PublicProjectAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.PublicProjectAlias }).(pulumi.StringOutput)
}

func (o ProjectOutput) QueuedTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.IntPtrOutput { return v.QueuedTimeout }).(pulumi.IntPtrOutput)
}

func (o ProjectOutput) ResourceAccessRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.ResourceAccessRole }).(pulumi.StringPtrOutput)
}

func (o ProjectOutput) SecondaryArtifacts() ProjectSecondaryArtifactArrayOutput {
	return o.ApplyT(func(v *Project) ProjectSecondaryArtifactArrayOutput { return v.SecondaryArtifacts }).(ProjectSecondaryArtifactArrayOutput)
}

func (o ProjectOutput) SecondarySourceVersions() ProjectSecondarySourceVersionArrayOutput {
	return o.ApplyT(func(v *Project) ProjectSecondarySourceVersionArrayOutput { return v.SecondarySourceVersions }).(ProjectSecondarySourceVersionArrayOutput)
}

func (o ProjectOutput) SecondarySources() ProjectSecondarySourceArrayOutput {
	return o.ApplyT(func(v *Project) ProjectSecondarySourceArrayOutput { return v.SecondarySources }).(ProjectSecondarySourceArrayOutput)
}

func (o ProjectOutput) ServiceRole() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ServiceRole }).(pulumi.StringOutput)
}

func (o ProjectOutput) Source() ProjectSourceOutput {
	return o.ApplyT(func(v *Project) ProjectSourceOutput { return v.Source }).(ProjectSourceOutput)
}

func (o ProjectOutput) SourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.SourceVersion }).(pulumi.StringPtrOutput)
}

func (o ProjectOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Project) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ProjectOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Project) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ProjectOutput) VpcConfig() ProjectVpcConfigPtrOutput {
	return o.ApplyT(func(v *Project) ProjectVpcConfigPtrOutput { return v.VpcConfig }).(ProjectVpcConfigPtrOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
