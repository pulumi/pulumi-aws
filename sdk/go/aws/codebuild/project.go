// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CodeBuild Project resource.
type Project struct {
	s *pulumi.ResourceState
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOpt) (*Project, error) {
	if args == nil || args.Artifacts == nil {
		return nil, errors.New("missing required argument 'Artifacts'")
	}
	if args == nil || args.Environment == nil {
		return nil, errors.New("missing required argument 'Environment'")
	}
	if args == nil || args.ServiceRole == nil {
		return nil, errors.New("missing required argument 'ServiceRole'")
	}
	if args == nil || args.Source == nil {
		return nil, errors.New("missing required argument 'Source'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["artifacts"] = nil
		inputs["badgeEnabled"] = nil
		inputs["buildTimeout"] = nil
		inputs["cache"] = nil
		inputs["description"] = nil
		inputs["encryptionKey"] = nil
		inputs["environment"] = nil
		inputs["name"] = nil
		inputs["secondaryArtifacts"] = nil
		inputs["secondarySources"] = nil
		inputs["serviceRole"] = nil
		inputs["source"] = nil
		inputs["tags"] = nil
		inputs["vpcConfig"] = nil
	} else {
		inputs["artifacts"] = args.Artifacts
		inputs["badgeEnabled"] = args.BadgeEnabled
		inputs["buildTimeout"] = args.BuildTimeout
		inputs["cache"] = args.Cache
		inputs["description"] = args.Description
		inputs["encryptionKey"] = args.EncryptionKey
		inputs["environment"] = args.Environment
		inputs["name"] = args.Name
		inputs["secondaryArtifacts"] = args.SecondaryArtifacts
		inputs["secondarySources"] = args.SecondarySources
		inputs["serviceRole"] = args.ServiceRole
		inputs["source"] = args.Source
		inputs["tags"] = args.Tags
		inputs["vpcConfig"] = args.VpcConfig
	}
	inputs["arn"] = nil
	inputs["badgeUrl"] = nil
	s, err := ctx.RegisterResource("aws:codebuild/project:Project", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectState, opts ...pulumi.ResourceOpt) (*Project, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["artifacts"] = state.Artifacts
		inputs["badgeEnabled"] = state.BadgeEnabled
		inputs["badgeUrl"] = state.BadgeUrl
		inputs["buildTimeout"] = state.BuildTimeout
		inputs["cache"] = state.Cache
		inputs["description"] = state.Description
		inputs["encryptionKey"] = state.EncryptionKey
		inputs["environment"] = state.Environment
		inputs["name"] = state.Name
		inputs["secondaryArtifacts"] = state.SecondaryArtifacts
		inputs["secondarySources"] = state.SecondarySources
		inputs["serviceRole"] = state.ServiceRole
		inputs["source"] = state.Source
		inputs["tags"] = state.Tags
		inputs["vpcConfig"] = state.VpcConfig
	}
	s, err := ctx.ReadResource("aws:codebuild/project:Project", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Project) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Project) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The ARN of the CodeBuild project.
func (r *Project) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// Information about the project's build output artifacts. Artifact blocks are documented below.
func (r *Project) Artifacts() *pulumi.Output {
	return r.s.State["artifacts"]
}

// Generates a publicly-accessible URL for the projects build badge. Available as `badge_url` attribute when enabled.
func (r *Project) BadgeEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["badgeEnabled"])
}

// The URL of the build badge when `badge_enabled` is enabled.
func (r *Project) BadgeUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["badgeUrl"])
}

// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
func (r *Project) BuildTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["buildTimeout"])
}

// Information about the cache storage for the project. Cache blocks are documented below.
func (r *Project) Cache() *pulumi.Output {
	return r.s.State["cache"]
}

// A short description of the project.
func (r *Project) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
func (r *Project) EncryptionKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["encryptionKey"])
}

// Information about the project's build environment. Environment blocks are documented below.
func (r *Project) Environment() *pulumi.Output {
	return r.s.State["environment"]
}

// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
func (r *Project) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.
func (r *Project) SecondaryArtifacts() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["secondaryArtifacts"])
}

// A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.
func (r *Project) SecondarySources() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["secondarySources"])
}

// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
func (r *Project) ServiceRole() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceRole"])
}

// Information about the project's input source code. Source blocks are documented below.
func (r *Project) Source() *pulumi.Output {
	return r.s.State["source"]
}

// A mapping of tags to assign to the resource.
func (r *Project) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Configuration for the builds to run inside a VPC. VPC config blocks are documented below.
func (r *Project) VpcConfig() *pulumi.Output {
	return r.s.State["vpcConfig"]
}

// Input properties used for looking up and filtering Project resources.
type ProjectState struct {
	// The ARN of the CodeBuild project.
	Arn interface{}
	// Information about the project's build output artifacts. Artifact blocks are documented below.
	Artifacts interface{}
	// Generates a publicly-accessible URL for the projects build badge. Available as `badge_url` attribute when enabled.
	BadgeEnabled interface{}
	// The URL of the build badge when `badge_enabled` is enabled.
	BadgeUrl interface{}
	// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
	BuildTimeout interface{}
	// Information about the cache storage for the project. Cache blocks are documented below.
	Cache interface{}
	// A short description of the project.
	Description interface{}
	// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
	EncryptionKey interface{}
	// Information about the project's build environment. Environment blocks are documented below.
	Environment interface{}
	// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
	Name interface{}
	// A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.
	SecondaryArtifacts interface{}
	// A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.
	SecondarySources interface{}
	// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
	ServiceRole interface{}
	// Information about the project's input source code. Source blocks are documented below.
	Source interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Configuration for the builds to run inside a VPC. VPC config blocks are documented below.
	VpcConfig interface{}
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Information about the project's build output artifacts. Artifact blocks are documented below.
	Artifacts interface{}
	// Generates a publicly-accessible URL for the projects build badge. Available as `badge_url` attribute when enabled.
	BadgeEnabled interface{}
	// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
	BuildTimeout interface{}
	// Information about the cache storage for the project. Cache blocks are documented below.
	Cache interface{}
	// A short description of the project.
	Description interface{}
	// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
	EncryptionKey interface{}
	// Information about the project's build environment. Environment blocks are documented below.
	Environment interface{}
	// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
	Name interface{}
	// A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.
	SecondaryArtifacts interface{}
	// A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.
	SecondarySources interface{}
	// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
	ServiceRole interface{}
	// Information about the project's input source code. Source blocks are documented below.
	Source interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Configuration for the builds to run inside a VPC. VPC config blocks are documented below.
	VpcConfig interface{}
}
