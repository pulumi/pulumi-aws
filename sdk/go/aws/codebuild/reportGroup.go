// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReportGroup struct {
	pulumi.CustomResourceState

	Arn           pulumi.StringOutput           `pulumi:"arn"`
	Created       pulumi.StringOutput           `pulumi:"created"`
	DeleteReports pulumi.BoolPtrOutput          `pulumi:"deleteReports"`
	ExportConfig  ReportGroupExportConfigOutput `pulumi:"exportConfig"`
	Name          pulumi.StringOutput           `pulumi:"name"`
	Tags          pulumi.StringMapOutput        `pulumi:"tags"`
	TagsAll       pulumi.StringMapOutput        `pulumi:"tagsAll"`
	Type          pulumi.StringOutput           `pulumi:"type"`
}

// NewReportGroup registers a new resource with the given unique name, arguments, and options.
func NewReportGroup(ctx *pulumi.Context,
	name string, args *ReportGroupArgs, opts ...pulumi.ResourceOption) (*ReportGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExportConfig == nil {
		return nil, errors.New("invalid value for required argument 'ExportConfig'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource ReportGroup
	err := ctx.RegisterResource("aws:codebuild/reportGroup:ReportGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportGroup gets an existing ReportGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportGroupState, opts ...pulumi.ResourceOption) (*ReportGroup, error) {
	var resource ReportGroup
	err := ctx.ReadResource("aws:codebuild/reportGroup:ReportGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportGroup resources.
type reportGroupState struct {
	Arn           *string                  `pulumi:"arn"`
	Created       *string                  `pulumi:"created"`
	DeleteReports *bool                    `pulumi:"deleteReports"`
	ExportConfig  *ReportGroupExportConfig `pulumi:"exportConfig"`
	Name          *string                  `pulumi:"name"`
	Tags          map[string]string        `pulumi:"tags"`
	TagsAll       map[string]string        `pulumi:"tagsAll"`
	Type          *string                  `pulumi:"type"`
}

type ReportGroupState struct {
	Arn           pulumi.StringPtrInput
	Created       pulumi.StringPtrInput
	DeleteReports pulumi.BoolPtrInput
	ExportConfig  ReportGroupExportConfigPtrInput
	Name          pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
	TagsAll       pulumi.StringMapInput
	Type          pulumi.StringPtrInput
}

func (ReportGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportGroupState)(nil)).Elem()
}

type reportGroupArgs struct {
	DeleteReports *bool                   `pulumi:"deleteReports"`
	ExportConfig  ReportGroupExportConfig `pulumi:"exportConfig"`
	Name          *string                 `pulumi:"name"`
	Tags          map[string]string       `pulumi:"tags"`
	Type          string                  `pulumi:"type"`
}

// The set of arguments for constructing a ReportGroup resource.
type ReportGroupArgs struct {
	DeleteReports pulumi.BoolPtrInput
	ExportConfig  ReportGroupExportConfigInput
	Name          pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
	Type          pulumi.StringInput
}

func (ReportGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportGroupArgs)(nil)).Elem()
}

type ReportGroupInput interface {
	pulumi.Input

	ToReportGroupOutput() ReportGroupOutput
	ToReportGroupOutputWithContext(ctx context.Context) ReportGroupOutput
}

func (*ReportGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportGroup)(nil)).Elem()
}

func (i *ReportGroup) ToReportGroupOutput() ReportGroupOutput {
	return i.ToReportGroupOutputWithContext(context.Background())
}

func (i *ReportGroup) ToReportGroupOutputWithContext(ctx context.Context) ReportGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupOutput)
}

// ReportGroupArrayInput is an input type that accepts ReportGroupArray and ReportGroupArrayOutput values.
// You can construct a concrete instance of `ReportGroupArrayInput` via:
//
//	ReportGroupArray{ ReportGroupArgs{...} }
type ReportGroupArrayInput interface {
	pulumi.Input

	ToReportGroupArrayOutput() ReportGroupArrayOutput
	ToReportGroupArrayOutputWithContext(context.Context) ReportGroupArrayOutput
}

type ReportGroupArray []ReportGroupInput

func (ReportGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportGroup)(nil)).Elem()
}

func (i ReportGroupArray) ToReportGroupArrayOutput() ReportGroupArrayOutput {
	return i.ToReportGroupArrayOutputWithContext(context.Background())
}

func (i ReportGroupArray) ToReportGroupArrayOutputWithContext(ctx context.Context) ReportGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupArrayOutput)
}

// ReportGroupMapInput is an input type that accepts ReportGroupMap and ReportGroupMapOutput values.
// You can construct a concrete instance of `ReportGroupMapInput` via:
//
//	ReportGroupMap{ "key": ReportGroupArgs{...} }
type ReportGroupMapInput interface {
	pulumi.Input

	ToReportGroupMapOutput() ReportGroupMapOutput
	ToReportGroupMapOutputWithContext(context.Context) ReportGroupMapOutput
}

type ReportGroupMap map[string]ReportGroupInput

func (ReportGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportGroup)(nil)).Elem()
}

func (i ReportGroupMap) ToReportGroupMapOutput() ReportGroupMapOutput {
	return i.ToReportGroupMapOutputWithContext(context.Background())
}

func (i ReportGroupMap) ToReportGroupMapOutputWithContext(ctx context.Context) ReportGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupMapOutput)
}

type ReportGroupOutput struct{ *pulumi.OutputState }

func (ReportGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportGroup)(nil)).Elem()
}

func (o ReportGroupOutput) ToReportGroupOutput() ReportGroupOutput {
	return o
}

func (o ReportGroupOutput) ToReportGroupOutputWithContext(ctx context.Context) ReportGroupOutput {
	return o
}

func (o ReportGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ReportGroupOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportGroup) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

func (o ReportGroupOutput) DeleteReports() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReportGroup) pulumi.BoolPtrOutput { return v.DeleteReports }).(pulumi.BoolPtrOutput)
}

func (o ReportGroupOutput) ExportConfig() ReportGroupExportConfigOutput {
	return o.ApplyT(func(v *ReportGroup) ReportGroupExportConfigOutput { return v.ExportConfig }).(ReportGroupExportConfigOutput)
}

func (o ReportGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ReportGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReportGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ReportGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReportGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ReportGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ReportGroupArrayOutput struct{ *pulumi.OutputState }

func (ReportGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportGroup)(nil)).Elem()
}

func (o ReportGroupArrayOutput) ToReportGroupArrayOutput() ReportGroupArrayOutput {
	return o
}

func (o ReportGroupArrayOutput) ToReportGroupArrayOutputWithContext(ctx context.Context) ReportGroupArrayOutput {
	return o
}

func (o ReportGroupArrayOutput) Index(i pulumi.IntInput) ReportGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReportGroup {
		return vs[0].([]*ReportGroup)[vs[1].(int)]
	}).(ReportGroupOutput)
}

type ReportGroupMapOutput struct{ *pulumi.OutputState }

func (ReportGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportGroup)(nil)).Elem()
}

func (o ReportGroupMapOutput) ToReportGroupMapOutput() ReportGroupMapOutput {
	return o
}

func (o ReportGroupMapOutput) ToReportGroupMapOutputWithContext(ctx context.Context) ReportGroupMapOutput {
	return o
}

func (o ReportGroupMapOutput) MapIndex(k pulumi.StringInput) ReportGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReportGroup {
		return vs[0].(map[string]*ReportGroup)[vs[1].(string)]
	}).(ReportGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReportGroupInput)(nil)).Elem(), &ReportGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportGroupArrayInput)(nil)).Elem(), ReportGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportGroupMapInput)(nil)).Elem(), ReportGroupMap{})
	pulumi.RegisterOutputType(ReportGroupOutput{})
	pulumi.RegisterOutputType(ReportGroupArrayOutput{})
	pulumi.RegisterOutputType(ReportGroupMapOutput{})
}
