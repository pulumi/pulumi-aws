// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CodeBuild Fleet Resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/codebuild"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := codebuild.NewFleet(ctx, "test", &codebuild.FleetArgs{
//				BaseCapacity:     pulumi.Int(2),
//				ComputeType:      pulumi.String("BUILD_GENERAL1_SMALL"),
//				EnvironmentType:  pulumi.String("LINUX_CONTAINER"),
//				Name:             pulumi.String("full-example-codebuild-fleet"),
//				OverflowBehavior: pulumi.String("QUEUE"),
//				ScalingConfiguration: &codebuild.FleetScalingConfigurationArgs{
//					MaxCapacity: pulumi.Int(5),
//					ScalingType: pulumi.String("TARGET_TRACKING_SCALING"),
//					TargetTrackingScalingConfigs: codebuild.FleetScalingConfigurationTargetTrackingScalingConfigArray{
//						&codebuild.FleetScalingConfigurationTargetTrackingScalingConfigArgs{
//							MetricType:  pulumi.String("FLEET_UTILIZATION_RATE"),
//							TargetValue: pulumi.Float64(97.5),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/codebuild"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := codebuild.NewFleet(ctx, "example", &codebuild.FleetArgs{
//				Name: pulumi.String("example-codebuild-fleet"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import CodeBuild Fleet using the `name`. For example:
//
// ```sh
// $ pulumi import aws:codebuild/fleet:Fleet name fleet-name
// ```
type Fleet struct {
	pulumi.CustomResourceState

	// ARN of the Fleet.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Number of machines allocated to the ﬂeet.
	BaseCapacity pulumi.IntOutput `pulumi:"baseCapacity"`
	// The compute configuration of the compute fleet. This is only required if `computeType` is set to `ATTRIBUTE_BASED_COMPUTE`. See `computeConfiguration` below.
	ComputeConfiguration FleetComputeConfigurationPtrOutput `pulumi:"computeConfiguration"`
	// Compute resources the compute fleet uses. See [compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
	ComputeType pulumi.StringOutput `pulumi:"computeType"`
	// Creation time of the fleet.
	Created pulumi.StringOutput `pulumi:"created"`
	// Environment type of the compute fleet. See [environment types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
	//
	// The following arguments are optional:
	EnvironmentType pulumi.StringOutput `pulumi:"environmentType"`
	// The service role associated with the compute fleet.
	FleetServiceRole pulumi.StringPtrOutput `pulumi:"fleetServiceRole"`
	// The Amazon Machine Image (AMI) of the compute fleet.
	ImageId pulumi.StringPtrOutput `pulumi:"imageId"`
	// Last modification time of the fleet.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// Fleet name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Overflow behavior for compute fleet. Valid values: `ON_DEMAND`, `QUEUE`.
	OverflowBehavior pulumi.StringOutput `pulumi:"overflowBehavior"`
	// Configuration block. This option is only valid when your overflow behavior is `QUEUE`. See `scalingConfiguration` below.
	ScalingConfiguration FleetScalingConfigurationPtrOutput `pulumi:"scalingConfiguration"`
	// Nested attribute containing information about the current status of the fleet.
	Statuses FleetStatusArrayOutput `pulumi:"statuses"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Configuration block. See `vpcConfig` below.
	VpcConfigs FleetVpcConfigArrayOutput `pulumi:"vpcConfigs"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOption) (*Fleet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaseCapacity == nil {
		return nil, errors.New("invalid value for required argument 'BaseCapacity'")
	}
	if args.ComputeType == nil {
		return nil, errors.New("invalid value for required argument 'ComputeType'")
	}
	if args.EnvironmentType == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fleet
	err := ctx.RegisterResource("aws:codebuild/fleet:Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetState, opts ...pulumi.ResourceOption) (*Fleet, error) {
	var resource Fleet
	err := ctx.ReadResource("aws:codebuild/fleet:Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleet resources.
type fleetState struct {
	// ARN of the Fleet.
	Arn *string `pulumi:"arn"`
	// Number of machines allocated to the ﬂeet.
	BaseCapacity *int `pulumi:"baseCapacity"`
	// The compute configuration of the compute fleet. This is only required if `computeType` is set to `ATTRIBUTE_BASED_COMPUTE`. See `computeConfiguration` below.
	ComputeConfiguration *FleetComputeConfiguration `pulumi:"computeConfiguration"`
	// Compute resources the compute fleet uses. See [compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
	ComputeType *string `pulumi:"computeType"`
	// Creation time of the fleet.
	Created *string `pulumi:"created"`
	// Environment type of the compute fleet. See [environment types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
	//
	// The following arguments are optional:
	EnvironmentType *string `pulumi:"environmentType"`
	// The service role associated with the compute fleet.
	FleetServiceRole *string `pulumi:"fleetServiceRole"`
	// The Amazon Machine Image (AMI) of the compute fleet.
	ImageId *string `pulumi:"imageId"`
	// Last modification time of the fleet.
	LastModified *string `pulumi:"lastModified"`
	// Fleet name.
	Name *string `pulumi:"name"`
	// Overflow behavior for compute fleet. Valid values: `ON_DEMAND`, `QUEUE`.
	OverflowBehavior *string `pulumi:"overflowBehavior"`
	// Configuration block. This option is only valid when your overflow behavior is `QUEUE`. See `scalingConfiguration` below.
	ScalingConfiguration *FleetScalingConfiguration `pulumi:"scalingConfiguration"`
	// Nested attribute containing information about the current status of the fleet.
	Statuses []FleetStatus `pulumi:"statuses"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Configuration block. See `vpcConfig` below.
	VpcConfigs []FleetVpcConfig `pulumi:"vpcConfigs"`
}

type FleetState struct {
	// ARN of the Fleet.
	Arn pulumi.StringPtrInput
	// Number of machines allocated to the ﬂeet.
	BaseCapacity pulumi.IntPtrInput
	// The compute configuration of the compute fleet. This is only required if `computeType` is set to `ATTRIBUTE_BASED_COMPUTE`. See `computeConfiguration` below.
	ComputeConfiguration FleetComputeConfigurationPtrInput
	// Compute resources the compute fleet uses. See [compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
	ComputeType pulumi.StringPtrInput
	// Creation time of the fleet.
	Created pulumi.StringPtrInput
	// Environment type of the compute fleet. See [environment types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
	//
	// The following arguments are optional:
	EnvironmentType pulumi.StringPtrInput
	// The service role associated with the compute fleet.
	FleetServiceRole pulumi.StringPtrInput
	// The Amazon Machine Image (AMI) of the compute fleet.
	ImageId pulumi.StringPtrInput
	// Last modification time of the fleet.
	LastModified pulumi.StringPtrInput
	// Fleet name.
	Name pulumi.StringPtrInput
	// Overflow behavior for compute fleet. Valid values: `ON_DEMAND`, `QUEUE`.
	OverflowBehavior pulumi.StringPtrInput
	// Configuration block. This option is only valid when your overflow behavior is `QUEUE`. See `scalingConfiguration` below.
	ScalingConfiguration FleetScalingConfigurationPtrInput
	// Nested attribute containing information about the current status of the fleet.
	Statuses FleetStatusArrayInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// Configuration block. See `vpcConfig` below.
	VpcConfigs FleetVpcConfigArrayInput
}

func (FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetState)(nil)).Elem()
}

type fleetArgs struct {
	// Number of machines allocated to the ﬂeet.
	BaseCapacity int `pulumi:"baseCapacity"`
	// The compute configuration of the compute fleet. This is only required if `computeType` is set to `ATTRIBUTE_BASED_COMPUTE`. See `computeConfiguration` below.
	ComputeConfiguration *FleetComputeConfiguration `pulumi:"computeConfiguration"`
	// Compute resources the compute fleet uses. See [compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
	ComputeType string `pulumi:"computeType"`
	// Environment type of the compute fleet. See [environment types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
	//
	// The following arguments are optional:
	EnvironmentType string `pulumi:"environmentType"`
	// The service role associated with the compute fleet.
	FleetServiceRole *string `pulumi:"fleetServiceRole"`
	// The Amazon Machine Image (AMI) of the compute fleet.
	ImageId *string `pulumi:"imageId"`
	// Fleet name.
	Name *string `pulumi:"name"`
	// Overflow behavior for compute fleet. Valid values: `ON_DEMAND`, `QUEUE`.
	OverflowBehavior *string `pulumi:"overflowBehavior"`
	// Configuration block. This option is only valid when your overflow behavior is `QUEUE`. See `scalingConfiguration` below.
	ScalingConfiguration *FleetScalingConfiguration `pulumi:"scalingConfiguration"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Configuration block. See `vpcConfig` below.
	VpcConfigs []FleetVpcConfig `pulumi:"vpcConfigs"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	// Number of machines allocated to the ﬂeet.
	BaseCapacity pulumi.IntInput
	// The compute configuration of the compute fleet. This is only required if `computeType` is set to `ATTRIBUTE_BASED_COMPUTE`. See `computeConfiguration` below.
	ComputeConfiguration FleetComputeConfigurationPtrInput
	// Compute resources the compute fleet uses. See [compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
	ComputeType pulumi.StringInput
	// Environment type of the compute fleet. See [environment types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
	//
	// The following arguments are optional:
	EnvironmentType pulumi.StringInput
	// The service role associated with the compute fleet.
	FleetServiceRole pulumi.StringPtrInput
	// The Amazon Machine Image (AMI) of the compute fleet.
	ImageId pulumi.StringPtrInput
	// Fleet name.
	Name pulumi.StringPtrInput
	// Overflow behavior for compute fleet. Valid values: `ON_DEMAND`, `QUEUE`.
	OverflowBehavior pulumi.StringPtrInput
	// Configuration block. This option is only valid when your overflow behavior is `QUEUE`. See `scalingConfiguration` below.
	ScalingConfiguration FleetScalingConfigurationPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Configuration block. See `vpcConfig` below.
	VpcConfigs FleetVpcConfigArrayInput
}

func (FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetArgs)(nil)).Elem()
}

type FleetInput interface {
	pulumi.Input

	ToFleetOutput() FleetOutput
	ToFleetOutputWithContext(ctx context.Context) FleetOutput
}

func (*Fleet) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (i *Fleet) ToFleetOutput() FleetOutput {
	return i.ToFleetOutputWithContext(context.Background())
}

func (i *Fleet) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetOutput)
}

// FleetArrayInput is an input type that accepts FleetArray and FleetArrayOutput values.
// You can construct a concrete instance of `FleetArrayInput` via:
//
//	FleetArray{ FleetArgs{...} }
type FleetArrayInput interface {
	pulumi.Input

	ToFleetArrayOutput() FleetArrayOutput
	ToFleetArrayOutputWithContext(context.Context) FleetArrayOutput
}

type FleetArray []FleetInput

func (FleetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fleet)(nil)).Elem()
}

func (i FleetArray) ToFleetArrayOutput() FleetArrayOutput {
	return i.ToFleetArrayOutputWithContext(context.Background())
}

func (i FleetArray) ToFleetArrayOutputWithContext(ctx context.Context) FleetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetArrayOutput)
}

// FleetMapInput is an input type that accepts FleetMap and FleetMapOutput values.
// You can construct a concrete instance of `FleetMapInput` via:
//
//	FleetMap{ "key": FleetArgs{...} }
type FleetMapInput interface {
	pulumi.Input

	ToFleetMapOutput() FleetMapOutput
	ToFleetMapOutputWithContext(context.Context) FleetMapOutput
}

type FleetMap map[string]FleetInput

func (FleetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fleet)(nil)).Elem()
}

func (i FleetMap) ToFleetMapOutput() FleetMapOutput {
	return i.ToFleetMapOutputWithContext(context.Background())
}

func (i FleetMap) ToFleetMapOutputWithContext(ctx context.Context) FleetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetMapOutput)
}

type FleetOutput struct{ *pulumi.OutputState }

func (FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (o FleetOutput) ToFleetOutput() FleetOutput {
	return o
}

func (o FleetOutput) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return o
}

// ARN of the Fleet.
func (o FleetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Number of machines allocated to the ﬂeet.
func (o FleetOutput) BaseCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *Fleet) pulumi.IntOutput { return v.BaseCapacity }).(pulumi.IntOutput)
}

// The compute configuration of the compute fleet. This is only required if `computeType` is set to `ATTRIBUTE_BASED_COMPUTE`. See `computeConfiguration` below.
func (o FleetOutput) ComputeConfiguration() FleetComputeConfigurationPtrOutput {
	return o.ApplyT(func(v *Fleet) FleetComputeConfigurationPtrOutput { return v.ComputeConfiguration }).(FleetComputeConfigurationPtrOutput)
}

// Compute resources the compute fleet uses. See [compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
func (o FleetOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.ComputeType }).(pulumi.StringOutput)
}

// Creation time of the fleet.
func (o FleetOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Environment type of the compute fleet. See [environment types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
//
// The following arguments are optional:
func (o FleetOutput) EnvironmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.EnvironmentType }).(pulumi.StringOutput)
}

// The service role associated with the compute fleet.
func (o FleetOutput) FleetServiceRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.FleetServiceRole }).(pulumi.StringPtrOutput)
}

// The Amazon Machine Image (AMI) of the compute fleet.
func (o FleetOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

// Last modification time of the fleet.
func (o FleetOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

// Fleet name.
func (o FleetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Overflow behavior for compute fleet. Valid values: `ON_DEMAND`, `QUEUE`.
func (o FleetOutput) OverflowBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.OverflowBehavior }).(pulumi.StringOutput)
}

// Configuration block. This option is only valid when your overflow behavior is `QUEUE`. See `scalingConfiguration` below.
func (o FleetOutput) ScalingConfiguration() FleetScalingConfigurationPtrOutput {
	return o.ApplyT(func(v *Fleet) FleetScalingConfigurationPtrOutput { return v.ScalingConfiguration }).(FleetScalingConfigurationPtrOutput)
}

// Nested attribute containing information about the current status of the fleet.
func (o FleetOutput) Statuses() FleetStatusArrayOutput {
	return o.ApplyT(func(v *Fleet) FleetStatusArrayOutput { return v.Statuses }).(FleetStatusArrayOutput)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FleetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o FleetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Configuration block. See `vpcConfig` below.
func (o FleetOutput) VpcConfigs() FleetVpcConfigArrayOutput {
	return o.ApplyT(func(v *Fleet) FleetVpcConfigArrayOutput { return v.VpcConfigs }).(FleetVpcConfigArrayOutput)
}

type FleetArrayOutput struct{ *pulumi.OutputState }

func (FleetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fleet)(nil)).Elem()
}

func (o FleetArrayOutput) ToFleetArrayOutput() FleetArrayOutput {
	return o
}

func (o FleetArrayOutput) ToFleetArrayOutputWithContext(ctx context.Context) FleetArrayOutput {
	return o
}

func (o FleetArrayOutput) Index(i pulumi.IntInput) FleetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Fleet {
		return vs[0].([]*Fleet)[vs[1].(int)]
	}).(FleetOutput)
}

type FleetMapOutput struct{ *pulumi.OutputState }

func (FleetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fleet)(nil)).Elem()
}

func (o FleetMapOutput) ToFleetMapOutput() FleetMapOutput {
	return o
}

func (o FleetMapOutput) ToFleetMapOutputWithContext(ctx context.Context) FleetMapOutput {
	return o
}

func (o FleetMapOutput) MapIndex(k pulumi.StringInput) FleetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Fleet {
		return vs[0].(map[string]*Fleet)[vs[1].(string)]
	}).(FleetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FleetInput)(nil)).Elem(), &Fleet{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetArrayInput)(nil)).Elem(), FleetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetMapInput)(nil)).Elem(), FleetMap{})
	pulumi.RegisterOutputType(FleetOutput{})
	pulumi.RegisterOutputType(FleetArrayOutput{})
	pulumi.RegisterOutputType(FleetMapOutput{})
}
