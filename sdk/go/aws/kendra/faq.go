// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Faq struct {
	pulumi.CustomResourceState

	Arn          pulumi.StringOutput    `pulumi:"arn"`
	CreatedAt    pulumi.StringOutput    `pulumi:"createdAt"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	ErrorMessage pulumi.StringOutput    `pulumi:"errorMessage"`
	FaqId        pulumi.StringOutput    `pulumi:"faqId"`
	FileFormat   pulumi.StringPtrOutput `pulumi:"fileFormat"`
	IndexId      pulumi.StringOutput    `pulumi:"indexId"`
	LanguageCode pulumi.StringOutput    `pulumi:"languageCode"`
	Name         pulumi.StringOutput    `pulumi:"name"`
	RoleArn      pulumi.StringOutput    `pulumi:"roleArn"`
	S3Path       FaqS3PathOutput        `pulumi:"s3Path"`
	Status       pulumi.StringOutput    `pulumi:"status"`
	Tags         pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll      pulumi.StringMapOutput `pulumi:"tagsAll"`
	UpdatedAt    pulumi.StringOutput    `pulumi:"updatedAt"`
}

// NewFaq registers a new resource with the given unique name, arguments, and options.
func NewFaq(ctx *pulumi.Context,
	name string, args *FaqArgs, opts ...pulumi.ResourceOption) (*Faq, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IndexId == nil {
		return nil, errors.New("invalid value for required argument 'IndexId'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.S3Path == nil {
		return nil, errors.New("invalid value for required argument 'S3Path'")
	}
	var resource Faq
	err := ctx.RegisterResource("aws:kendra/faq:Faq", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFaq gets an existing Faq resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFaq(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FaqState, opts ...pulumi.ResourceOption) (*Faq, error) {
	var resource Faq
	err := ctx.ReadResource("aws:kendra/faq:Faq", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Faq resources.
type faqState struct {
	Arn          *string           `pulumi:"arn"`
	CreatedAt    *string           `pulumi:"createdAt"`
	Description  *string           `pulumi:"description"`
	ErrorMessage *string           `pulumi:"errorMessage"`
	FaqId        *string           `pulumi:"faqId"`
	FileFormat   *string           `pulumi:"fileFormat"`
	IndexId      *string           `pulumi:"indexId"`
	LanguageCode *string           `pulumi:"languageCode"`
	Name         *string           `pulumi:"name"`
	RoleArn      *string           `pulumi:"roleArn"`
	S3Path       *FaqS3Path        `pulumi:"s3Path"`
	Status       *string           `pulumi:"status"`
	Tags         map[string]string `pulumi:"tags"`
	TagsAll      map[string]string `pulumi:"tagsAll"`
	UpdatedAt    *string           `pulumi:"updatedAt"`
}

type FaqState struct {
	Arn          pulumi.StringPtrInput
	CreatedAt    pulumi.StringPtrInput
	Description  pulumi.StringPtrInput
	ErrorMessage pulumi.StringPtrInput
	FaqId        pulumi.StringPtrInput
	FileFormat   pulumi.StringPtrInput
	IndexId      pulumi.StringPtrInput
	LanguageCode pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	RoleArn      pulumi.StringPtrInput
	S3Path       FaqS3PathPtrInput
	Status       pulumi.StringPtrInput
	Tags         pulumi.StringMapInput
	TagsAll      pulumi.StringMapInput
	UpdatedAt    pulumi.StringPtrInput
}

func (FaqState) ElementType() reflect.Type {
	return reflect.TypeOf((*faqState)(nil)).Elem()
}

type faqArgs struct {
	Description  *string           `pulumi:"description"`
	FileFormat   *string           `pulumi:"fileFormat"`
	IndexId      string            `pulumi:"indexId"`
	LanguageCode *string           `pulumi:"languageCode"`
	Name         *string           `pulumi:"name"`
	RoleArn      string            `pulumi:"roleArn"`
	S3Path       FaqS3Path         `pulumi:"s3Path"`
	Tags         map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Faq resource.
type FaqArgs struct {
	Description  pulumi.StringPtrInput
	FileFormat   pulumi.StringPtrInput
	IndexId      pulumi.StringInput
	LanguageCode pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	RoleArn      pulumi.StringInput
	S3Path       FaqS3PathInput
	Tags         pulumi.StringMapInput
}

func (FaqArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*faqArgs)(nil)).Elem()
}

type FaqInput interface {
	pulumi.Input

	ToFaqOutput() FaqOutput
	ToFaqOutputWithContext(ctx context.Context) FaqOutput
}

func (*Faq) ElementType() reflect.Type {
	return reflect.TypeOf((**Faq)(nil)).Elem()
}

func (i *Faq) ToFaqOutput() FaqOutput {
	return i.ToFaqOutputWithContext(context.Background())
}

func (i *Faq) ToFaqOutputWithContext(ctx context.Context) FaqOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaqOutput)
}

// FaqArrayInput is an input type that accepts FaqArray and FaqArrayOutput values.
// You can construct a concrete instance of `FaqArrayInput` via:
//
//	FaqArray{ FaqArgs{...} }
type FaqArrayInput interface {
	pulumi.Input

	ToFaqArrayOutput() FaqArrayOutput
	ToFaqArrayOutputWithContext(context.Context) FaqArrayOutput
}

type FaqArray []FaqInput

func (FaqArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Faq)(nil)).Elem()
}

func (i FaqArray) ToFaqArrayOutput() FaqArrayOutput {
	return i.ToFaqArrayOutputWithContext(context.Background())
}

func (i FaqArray) ToFaqArrayOutputWithContext(ctx context.Context) FaqArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaqArrayOutput)
}

// FaqMapInput is an input type that accepts FaqMap and FaqMapOutput values.
// You can construct a concrete instance of `FaqMapInput` via:
//
//	FaqMap{ "key": FaqArgs{...} }
type FaqMapInput interface {
	pulumi.Input

	ToFaqMapOutput() FaqMapOutput
	ToFaqMapOutputWithContext(context.Context) FaqMapOutput
}

type FaqMap map[string]FaqInput

func (FaqMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Faq)(nil)).Elem()
}

func (i FaqMap) ToFaqMapOutput() FaqMapOutput {
	return i.ToFaqMapOutputWithContext(context.Background())
}

func (i FaqMap) ToFaqMapOutputWithContext(ctx context.Context) FaqMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaqMapOutput)
}

type FaqOutput struct{ *pulumi.OutputState }

func (FaqOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Faq)(nil)).Elem()
}

func (o FaqOutput) ToFaqOutput() FaqOutput {
	return o
}

func (o FaqOutput) ToFaqOutputWithContext(ctx context.Context) FaqOutput {
	return o
}

func (o FaqOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FaqOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o FaqOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FaqOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringOutput { return v.ErrorMessage }).(pulumi.StringOutput)
}

func (o FaqOutput) FaqId() pulumi.StringOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringOutput { return v.FaqId }).(pulumi.StringOutput)
}

func (o FaqOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringPtrOutput { return v.FileFormat }).(pulumi.StringPtrOutput)
}

func (o FaqOutput) IndexId() pulumi.StringOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringOutput { return v.IndexId }).(pulumi.StringOutput)
}

func (o FaqOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringOutput { return v.LanguageCode }).(pulumi.StringOutput)
}

func (o FaqOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FaqOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o FaqOutput) S3Path() FaqS3PathOutput {
	return o.ApplyT(func(v *Faq) FaqS3PathOutput { return v.S3Path }).(FaqS3PathOutput)
}

func (o FaqOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o FaqOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FaqOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o FaqOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Faq) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type FaqArrayOutput struct{ *pulumi.OutputState }

func (FaqArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Faq)(nil)).Elem()
}

func (o FaqArrayOutput) ToFaqArrayOutput() FaqArrayOutput {
	return o
}

func (o FaqArrayOutput) ToFaqArrayOutputWithContext(ctx context.Context) FaqArrayOutput {
	return o
}

func (o FaqArrayOutput) Index(i pulumi.IntInput) FaqOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Faq {
		return vs[0].([]*Faq)[vs[1].(int)]
	}).(FaqOutput)
}

type FaqMapOutput struct{ *pulumi.OutputState }

func (FaqMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Faq)(nil)).Elem()
}

func (o FaqMapOutput) ToFaqMapOutput() FaqMapOutput {
	return o
}

func (o FaqMapOutput) ToFaqMapOutputWithContext(ctx context.Context) FaqMapOutput {
	return o
}

func (o FaqMapOutput) MapIndex(k pulumi.StringInput) FaqOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Faq {
		return vs[0].(map[string]*Faq)[vs[1].(string)]
	}).(FaqOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FaqInput)(nil)).Elem(), &Faq{})
	pulumi.RegisterInputType(reflect.TypeOf((*FaqArrayInput)(nil)).Elem(), FaqArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FaqMapInput)(nil)).Elem(), FaqMap{})
	pulumi.RegisterOutputType(FaqOutput{})
	pulumi.RegisterOutputType(FaqArrayOutput{})
	pulumi.RegisterOutputType(FaqMapOutput{})
}
