// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides details about a specific Amazon Kendra Thesaurus.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/kendra"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kendra.LookupThesaurus(ctx, &kendra.LookupThesaurusArgs{
//				IndexId:     "12345678-1234-1234-1234-123456789123",
//				ThesaurusId: "87654321-1234-4321-4321-321987654321",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupThesaurus(ctx *pulumi.Context, args *LookupThesaurusArgs, opts ...pulumi.InvokeOption) (*LookupThesaurusResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupThesaurusResult
	err := ctx.Invoke("aws:kendra/getThesaurus:getThesaurus", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getThesaurus.
type LookupThesaurusArgs struct {
	// Identifier of the index that contains the Thesaurus.
	IndexId string `pulumi:"indexId"`
	// Metadata that helps organize the Thesaurus you create.
	Tags map[string]string `pulumi:"tags"`
	// Identifier of the Thesaurus.
	ThesaurusId string `pulumi:"thesaurusId"`
}

// A collection of values returned by getThesaurus.
type LookupThesaurusResult struct {
	// ARN of the Thesaurus.
	Arn *string `pulumi:"arn"`
	// Unix datetime that the Thesaurus was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the Thesaurus.
	Description *string `pulumi:"description"`
	// When the `status` field value is `FAILED`, this contains a message that explains why.
	ErrorMessage *string `pulumi:"errorMessage"`
	// Size of the Thesaurus file in bytes.
	FileSizeBytes *int `pulumi:"fileSizeBytes"`
	// The provider-assigned unique ID for this managed resource.
	Id      *string `pulumi:"id"`
	IndexId string  `pulumi:"indexId"`
	// Name of the Thesaurus.
	Name *string `pulumi:"name"`
	// ARN of a role with permission to access the S3 bucket that contains the Thesaurus. For more information, see [IAM Roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
	RoleArn *string `pulumi:"roleArn"`
	// S3 location of the Thesaurus input data. Detailed below.
	SourceS3Paths []GetThesaurusSourceS3Path `pulumi:"sourceS3Paths"`
	// Status of the Thesaurus. It is ready to use when the status is `ACTIVE`.
	Status *string `pulumi:"status"`
	// Number of synonym rules in the Thesaurus file.
	SynonymRuleCount *int `pulumi:"synonymRuleCount"`
	// Metadata that helps organize the Thesaurus you create.
	Tags map[string]string `pulumi:"tags"`
	// Number of unique terms in the Thesaurus file. For example, the synonyms `a,b,c` and `a=>d`, the term count would be 4.
	TermCount   *int   `pulumi:"termCount"`
	ThesaurusId string `pulumi:"thesaurusId"`
	// Date and time that the Thesaurus was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

func LookupThesaurusOutput(ctx *pulumi.Context, args LookupThesaurusOutputArgs, opts ...pulumi.InvokeOption) LookupThesaurusResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupThesaurusResult, error) {
			args := v.(LookupThesaurusArgs)
			r, err := LookupThesaurus(ctx, &args, opts...)
			var s LookupThesaurusResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupThesaurusResultOutput)
}

// A collection of arguments for invoking getThesaurus.
type LookupThesaurusOutputArgs struct {
	// Identifier of the index that contains the Thesaurus.
	IndexId pulumi.StringInput `pulumi:"indexId"`
	// Metadata that helps organize the Thesaurus you create.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Identifier of the Thesaurus.
	ThesaurusId pulumi.StringInput `pulumi:"thesaurusId"`
}

func (LookupThesaurusOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThesaurusArgs)(nil)).Elem()
}

// A collection of values returned by getThesaurus.
type LookupThesaurusResultOutput struct{ *pulumi.OutputState }

func (LookupThesaurusResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThesaurusResult)(nil)).Elem()
}

func (o LookupThesaurusResultOutput) ToLookupThesaurusResultOutput() LookupThesaurusResultOutput {
	return o
}

func (o LookupThesaurusResultOutput) ToLookupThesaurusResultOutputWithContext(ctx context.Context) LookupThesaurusResultOutput {
	return o
}

// ARN of the Thesaurus.
func (o LookupThesaurusResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Unix datetime that the Thesaurus was created.
func (o LookupThesaurusResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// Description of the Thesaurus.
func (o LookupThesaurusResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// When the `status` field value is `FAILED`, this contains a message that explains why.
func (o LookupThesaurusResultOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Size of the Thesaurus file in bytes.
func (o LookupThesaurusResultOutput) FileSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *int { return v.FileSizeBytes }).(pulumi.IntPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupThesaurusResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupThesaurusResultOutput) IndexId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.IndexId }).(pulumi.StringOutput)
}

// Name of the Thesaurus.
func (o LookupThesaurusResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ARN of a role with permission to access the S3 bucket that contains the Thesaurus. For more information, see [IAM Roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
func (o LookupThesaurusResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// S3 location of the Thesaurus input data. Detailed below.
func (o LookupThesaurusResultOutput) SourceS3Paths() GetThesaurusSourceS3PathArrayOutput {
	return o.ApplyT(func(v LookupThesaurusResult) []GetThesaurusSourceS3Path { return v.SourceS3Paths }).(GetThesaurusSourceS3PathArrayOutput)
}

// Status of the Thesaurus. It is ready to use when the status is `ACTIVE`.
func (o LookupThesaurusResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Number of synonym rules in the Thesaurus file.
func (o LookupThesaurusResultOutput) SynonymRuleCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *int { return v.SynonymRuleCount }).(pulumi.IntPtrOutput)
}

// Metadata that helps organize the Thesaurus you create.
func (o LookupThesaurusResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupThesaurusResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Number of unique terms in the Thesaurus file. For example, the synonyms `a,b,c` and `a=>d`, the term count would be 4.
func (o LookupThesaurusResultOutput) TermCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *int { return v.TermCount }).(pulumi.IntPtrOutput)
}

func (o LookupThesaurusResultOutput) ThesaurusId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.ThesaurusId }).(pulumi.StringOutput)
}

// Date and time that the Thesaurus was last updated.
func (o LookupThesaurusResultOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThesaurusResult) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupThesaurusResultOutput{})
}
