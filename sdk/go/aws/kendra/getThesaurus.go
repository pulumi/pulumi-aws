// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupThesaurus(ctx *pulumi.Context, args *LookupThesaurusArgs, opts ...pulumi.InvokeOption) (*LookupThesaurusResult, error) {
	var rv LookupThesaurusResult
	err := ctx.Invoke("aws:kendra/getThesaurus:getThesaurus", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getThesaurus.
type LookupThesaurusArgs struct {
	IndexId     string            `pulumi:"indexId"`
	Tags        map[string]string `pulumi:"tags"`
	ThesaurusId string            `pulumi:"thesaurusId"`
}

// A collection of values returned by getThesaurus.
type LookupThesaurusResult struct {
	Arn           string `pulumi:"arn"`
	CreatedAt     string `pulumi:"createdAt"`
	Description   string `pulumi:"description"`
	ErrorMessage  string `pulumi:"errorMessage"`
	FileSizeBytes int    `pulumi:"fileSizeBytes"`
	// The provider-assigned unique ID for this managed resource.
	Id               string                     `pulumi:"id"`
	IndexId          string                     `pulumi:"indexId"`
	Name             string                     `pulumi:"name"`
	RoleArn          string                     `pulumi:"roleArn"`
	SourceS3Paths    []GetThesaurusSourceS3Path `pulumi:"sourceS3Paths"`
	Status           string                     `pulumi:"status"`
	SynonymRuleCount int                        `pulumi:"synonymRuleCount"`
	Tags             map[string]string          `pulumi:"tags"`
	TermCount        int                        `pulumi:"termCount"`
	ThesaurusId      string                     `pulumi:"thesaurusId"`
	UpdatedAt        string                     `pulumi:"updatedAt"`
}

func LookupThesaurusOutput(ctx *pulumi.Context, args LookupThesaurusOutputArgs, opts ...pulumi.InvokeOption) LookupThesaurusResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupThesaurusResult, error) {
			args := v.(LookupThesaurusArgs)
			r, err := LookupThesaurus(ctx, &args, opts...)
			var s LookupThesaurusResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupThesaurusResultOutput)
}

// A collection of arguments for invoking getThesaurus.
type LookupThesaurusOutputArgs struct {
	IndexId     pulumi.StringInput    `pulumi:"indexId"`
	Tags        pulumi.StringMapInput `pulumi:"tags"`
	ThesaurusId pulumi.StringInput    `pulumi:"thesaurusId"`
}

func (LookupThesaurusOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThesaurusArgs)(nil)).Elem()
}

// A collection of values returned by getThesaurus.
type LookupThesaurusResultOutput struct{ *pulumi.OutputState }

func (LookupThesaurusResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThesaurusResult)(nil)).Elem()
}

func (o LookupThesaurusResultOutput) ToLookupThesaurusResultOutput() LookupThesaurusResultOutput {
	return o
}

func (o LookupThesaurusResultOutput) ToLookupThesaurusResultOutputWithContext(ctx context.Context) LookupThesaurusResultOutput {
	return o
}

func (o LookupThesaurusResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.Arn }).(pulumi.StringOutput)
}

func (o LookupThesaurusResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupThesaurusResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupThesaurusResultOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

func (o LookupThesaurusResultOutput) FileSizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupThesaurusResult) int { return v.FileSizeBytes }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupThesaurusResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupThesaurusResultOutput) IndexId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.IndexId }).(pulumi.StringOutput)
}

func (o LookupThesaurusResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupThesaurusResultOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.RoleArn }).(pulumi.StringOutput)
}

func (o LookupThesaurusResultOutput) SourceS3Paths() GetThesaurusSourceS3PathArrayOutput {
	return o.ApplyT(func(v LookupThesaurusResult) []GetThesaurusSourceS3Path { return v.SourceS3Paths }).(GetThesaurusSourceS3PathArrayOutput)
}

func (o LookupThesaurusResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupThesaurusResultOutput) SynonymRuleCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupThesaurusResult) int { return v.SynonymRuleCount }).(pulumi.IntOutput)
}

func (o LookupThesaurusResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupThesaurusResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupThesaurusResultOutput) TermCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupThesaurusResult) int { return v.TermCount }).(pulumi.IntOutput)
}

func (o LookupThesaurusResultOutput) ThesaurusId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.ThesaurusId }).(pulumi.StringOutput)
}

func (o LookupThesaurusResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThesaurusResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupThesaurusResultOutput{})
}
