// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Experience struct {
	pulumi.CustomResourceState

	Arn           pulumi.StringOutput           `pulumi:"arn"`
	Configuration ExperienceConfigurationOutput `pulumi:"configuration"`
	Description   pulumi.StringPtrOutput        `pulumi:"description"`
	Endpoints     ExperienceEndpointArrayOutput `pulumi:"endpoints"`
	ExperienceId  pulumi.StringOutput           `pulumi:"experienceId"`
	IndexId       pulumi.StringOutput           `pulumi:"indexId"`
	Name          pulumi.StringOutput           `pulumi:"name"`
	RoleArn       pulumi.StringOutput           `pulumi:"roleArn"`
	Status        pulumi.StringOutput           `pulumi:"status"`
}

// NewExperience registers a new resource with the given unique name, arguments, and options.
func NewExperience(ctx *pulumi.Context,
	name string, args *ExperienceArgs, opts ...pulumi.ResourceOption) (*Experience, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IndexId == nil {
		return nil, errors.New("invalid value for required argument 'IndexId'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource Experience
	err := ctx.RegisterResource("aws:kendra/experience:Experience", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperience gets an existing Experience resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperience(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperienceState, opts ...pulumi.ResourceOption) (*Experience, error) {
	var resource Experience
	err := ctx.ReadResource("aws:kendra/experience:Experience", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Experience resources.
type experienceState struct {
	Arn           *string                  `pulumi:"arn"`
	Configuration *ExperienceConfiguration `pulumi:"configuration"`
	Description   *string                  `pulumi:"description"`
	Endpoints     []ExperienceEndpoint     `pulumi:"endpoints"`
	ExperienceId  *string                  `pulumi:"experienceId"`
	IndexId       *string                  `pulumi:"indexId"`
	Name          *string                  `pulumi:"name"`
	RoleArn       *string                  `pulumi:"roleArn"`
	Status        *string                  `pulumi:"status"`
}

type ExperienceState struct {
	Arn           pulumi.StringPtrInput
	Configuration ExperienceConfigurationPtrInput
	Description   pulumi.StringPtrInput
	Endpoints     ExperienceEndpointArrayInput
	ExperienceId  pulumi.StringPtrInput
	IndexId       pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	RoleArn       pulumi.StringPtrInput
	Status        pulumi.StringPtrInput
}

func (ExperienceState) ElementType() reflect.Type {
	return reflect.TypeOf((*experienceState)(nil)).Elem()
}

type experienceArgs struct {
	Configuration *ExperienceConfiguration `pulumi:"configuration"`
	Description   *string                  `pulumi:"description"`
	IndexId       string                   `pulumi:"indexId"`
	Name          *string                  `pulumi:"name"`
	RoleArn       string                   `pulumi:"roleArn"`
}

// The set of arguments for constructing a Experience resource.
type ExperienceArgs struct {
	Configuration ExperienceConfigurationPtrInput
	Description   pulumi.StringPtrInput
	IndexId       pulumi.StringInput
	Name          pulumi.StringPtrInput
	RoleArn       pulumi.StringInput
}

func (ExperienceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experienceArgs)(nil)).Elem()
}

type ExperienceInput interface {
	pulumi.Input

	ToExperienceOutput() ExperienceOutput
	ToExperienceOutputWithContext(ctx context.Context) ExperienceOutput
}

func (*Experience) ElementType() reflect.Type {
	return reflect.TypeOf((**Experience)(nil)).Elem()
}

func (i *Experience) ToExperienceOutput() ExperienceOutput {
	return i.ToExperienceOutputWithContext(context.Background())
}

func (i *Experience) ToExperienceOutputWithContext(ctx context.Context) ExperienceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperienceOutput)
}

// ExperienceArrayInput is an input type that accepts ExperienceArray and ExperienceArrayOutput values.
// You can construct a concrete instance of `ExperienceArrayInput` via:
//
//	ExperienceArray{ ExperienceArgs{...} }
type ExperienceArrayInput interface {
	pulumi.Input

	ToExperienceArrayOutput() ExperienceArrayOutput
	ToExperienceArrayOutputWithContext(context.Context) ExperienceArrayOutput
}

type ExperienceArray []ExperienceInput

func (ExperienceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Experience)(nil)).Elem()
}

func (i ExperienceArray) ToExperienceArrayOutput() ExperienceArrayOutput {
	return i.ToExperienceArrayOutputWithContext(context.Background())
}

func (i ExperienceArray) ToExperienceArrayOutputWithContext(ctx context.Context) ExperienceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperienceArrayOutput)
}

// ExperienceMapInput is an input type that accepts ExperienceMap and ExperienceMapOutput values.
// You can construct a concrete instance of `ExperienceMapInput` via:
//
//	ExperienceMap{ "key": ExperienceArgs{...} }
type ExperienceMapInput interface {
	pulumi.Input

	ToExperienceMapOutput() ExperienceMapOutput
	ToExperienceMapOutputWithContext(context.Context) ExperienceMapOutput
}

type ExperienceMap map[string]ExperienceInput

func (ExperienceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Experience)(nil)).Elem()
}

func (i ExperienceMap) ToExperienceMapOutput() ExperienceMapOutput {
	return i.ToExperienceMapOutputWithContext(context.Background())
}

func (i ExperienceMap) ToExperienceMapOutputWithContext(ctx context.Context) ExperienceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperienceMapOutput)
}

type ExperienceOutput struct{ *pulumi.OutputState }

func (ExperienceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Experience)(nil)).Elem()
}

func (o ExperienceOutput) ToExperienceOutput() ExperienceOutput {
	return o
}

func (o ExperienceOutput) ToExperienceOutputWithContext(ctx context.Context) ExperienceOutput {
	return o
}

func (o ExperienceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Experience) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ExperienceOutput) Configuration() ExperienceConfigurationOutput {
	return o.ApplyT(func(v *Experience) ExperienceConfigurationOutput { return v.Configuration }).(ExperienceConfigurationOutput)
}

func (o ExperienceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Experience) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ExperienceOutput) Endpoints() ExperienceEndpointArrayOutput {
	return o.ApplyT(func(v *Experience) ExperienceEndpointArrayOutput { return v.Endpoints }).(ExperienceEndpointArrayOutput)
}

func (o ExperienceOutput) ExperienceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Experience) pulumi.StringOutput { return v.ExperienceId }).(pulumi.StringOutput)
}

func (o ExperienceOutput) IndexId() pulumi.StringOutput {
	return o.ApplyT(func(v *Experience) pulumi.StringOutput { return v.IndexId }).(pulumi.StringOutput)
}

func (o ExperienceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Experience) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ExperienceOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Experience) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o ExperienceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Experience) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ExperienceArrayOutput struct{ *pulumi.OutputState }

func (ExperienceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Experience)(nil)).Elem()
}

func (o ExperienceArrayOutput) ToExperienceArrayOutput() ExperienceArrayOutput {
	return o
}

func (o ExperienceArrayOutput) ToExperienceArrayOutputWithContext(ctx context.Context) ExperienceArrayOutput {
	return o
}

func (o ExperienceArrayOutput) Index(i pulumi.IntInput) ExperienceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Experience {
		return vs[0].([]*Experience)[vs[1].(int)]
	}).(ExperienceOutput)
}

type ExperienceMapOutput struct{ *pulumi.OutputState }

func (ExperienceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Experience)(nil)).Elem()
}

func (o ExperienceMapOutput) ToExperienceMapOutput() ExperienceMapOutput {
	return o
}

func (o ExperienceMapOutput) ToExperienceMapOutputWithContext(ctx context.Context) ExperienceMapOutput {
	return o
}

func (o ExperienceMapOutput) MapIndex(k pulumi.StringInput) ExperienceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Experience {
		return vs[0].(map[string]*Experience)[vs[1].(string)]
	}).(ExperienceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperienceInput)(nil)).Elem(), &Experience{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperienceArrayInput)(nil)).Elem(), ExperienceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperienceMapInput)(nil)).Elem(), ExperienceMap{})
	pulumi.RegisterOutputType(ExperienceOutput{})
	pulumi.RegisterOutputType(ExperienceArrayOutput{})
	pulumi.RegisterOutputType(ExperienceMapOutput{})
}
