// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type QuerySuggestionsBlockList struct {
	pulumi.CustomResourceState

	Arn                         pulumi.StringOutput                         `pulumi:"arn"`
	Description                 pulumi.StringPtrOutput                      `pulumi:"description"`
	IndexId                     pulumi.StringOutput                         `pulumi:"indexId"`
	Name                        pulumi.StringOutput                         `pulumi:"name"`
	QuerySuggestionsBlockListId pulumi.StringOutput                         `pulumi:"querySuggestionsBlockListId"`
	RoleArn                     pulumi.StringOutput                         `pulumi:"roleArn"`
	SourceS3Path                QuerySuggestionsBlockListSourceS3PathOutput `pulumi:"sourceS3Path"`
	Status                      pulumi.StringOutput                         `pulumi:"status"`
	Tags                        pulumi.StringMapOutput                      `pulumi:"tags"`
	TagsAll                     pulumi.StringMapOutput                      `pulumi:"tagsAll"`
}

// NewQuerySuggestionsBlockList registers a new resource with the given unique name, arguments, and options.
func NewQuerySuggestionsBlockList(ctx *pulumi.Context,
	name string, args *QuerySuggestionsBlockListArgs, opts ...pulumi.ResourceOption) (*QuerySuggestionsBlockList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IndexId == nil {
		return nil, errors.New("invalid value for required argument 'IndexId'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.SourceS3Path == nil {
		return nil, errors.New("invalid value for required argument 'SourceS3Path'")
	}
	var resource QuerySuggestionsBlockList
	err := ctx.RegisterResource("aws:kendra/querySuggestionsBlockList:QuerySuggestionsBlockList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQuerySuggestionsBlockList gets an existing QuerySuggestionsBlockList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQuerySuggestionsBlockList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QuerySuggestionsBlockListState, opts ...pulumi.ResourceOption) (*QuerySuggestionsBlockList, error) {
	var resource QuerySuggestionsBlockList
	err := ctx.ReadResource("aws:kendra/querySuggestionsBlockList:QuerySuggestionsBlockList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QuerySuggestionsBlockList resources.
type querySuggestionsBlockListState struct {
	Arn                         *string                                `pulumi:"arn"`
	Description                 *string                                `pulumi:"description"`
	IndexId                     *string                                `pulumi:"indexId"`
	Name                        *string                                `pulumi:"name"`
	QuerySuggestionsBlockListId *string                                `pulumi:"querySuggestionsBlockListId"`
	RoleArn                     *string                                `pulumi:"roleArn"`
	SourceS3Path                *QuerySuggestionsBlockListSourceS3Path `pulumi:"sourceS3Path"`
	Status                      *string                                `pulumi:"status"`
	Tags                        map[string]string                      `pulumi:"tags"`
	TagsAll                     map[string]string                      `pulumi:"tagsAll"`
}

type QuerySuggestionsBlockListState struct {
	Arn                         pulumi.StringPtrInput
	Description                 pulumi.StringPtrInput
	IndexId                     pulumi.StringPtrInput
	Name                        pulumi.StringPtrInput
	QuerySuggestionsBlockListId pulumi.StringPtrInput
	RoleArn                     pulumi.StringPtrInput
	SourceS3Path                QuerySuggestionsBlockListSourceS3PathPtrInput
	Status                      pulumi.StringPtrInput
	Tags                        pulumi.StringMapInput
	TagsAll                     pulumi.StringMapInput
}

func (QuerySuggestionsBlockListState) ElementType() reflect.Type {
	return reflect.TypeOf((*querySuggestionsBlockListState)(nil)).Elem()
}

type querySuggestionsBlockListArgs struct {
	Description  *string                               `pulumi:"description"`
	IndexId      string                                `pulumi:"indexId"`
	Name         *string                               `pulumi:"name"`
	RoleArn      string                                `pulumi:"roleArn"`
	SourceS3Path QuerySuggestionsBlockListSourceS3Path `pulumi:"sourceS3Path"`
	Tags         map[string]string                     `pulumi:"tags"`
}

// The set of arguments for constructing a QuerySuggestionsBlockList resource.
type QuerySuggestionsBlockListArgs struct {
	Description  pulumi.StringPtrInput
	IndexId      pulumi.StringInput
	Name         pulumi.StringPtrInput
	RoleArn      pulumi.StringInput
	SourceS3Path QuerySuggestionsBlockListSourceS3PathInput
	Tags         pulumi.StringMapInput
}

func (QuerySuggestionsBlockListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*querySuggestionsBlockListArgs)(nil)).Elem()
}

type QuerySuggestionsBlockListInput interface {
	pulumi.Input

	ToQuerySuggestionsBlockListOutput() QuerySuggestionsBlockListOutput
	ToQuerySuggestionsBlockListOutputWithContext(ctx context.Context) QuerySuggestionsBlockListOutput
}

func (*QuerySuggestionsBlockList) ElementType() reflect.Type {
	return reflect.TypeOf((**QuerySuggestionsBlockList)(nil)).Elem()
}

func (i *QuerySuggestionsBlockList) ToQuerySuggestionsBlockListOutput() QuerySuggestionsBlockListOutput {
	return i.ToQuerySuggestionsBlockListOutputWithContext(context.Background())
}

func (i *QuerySuggestionsBlockList) ToQuerySuggestionsBlockListOutputWithContext(ctx context.Context) QuerySuggestionsBlockListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySuggestionsBlockListOutput)
}

// QuerySuggestionsBlockListArrayInput is an input type that accepts QuerySuggestionsBlockListArray and QuerySuggestionsBlockListArrayOutput values.
// You can construct a concrete instance of `QuerySuggestionsBlockListArrayInput` via:
//
//	QuerySuggestionsBlockListArray{ QuerySuggestionsBlockListArgs{...} }
type QuerySuggestionsBlockListArrayInput interface {
	pulumi.Input

	ToQuerySuggestionsBlockListArrayOutput() QuerySuggestionsBlockListArrayOutput
	ToQuerySuggestionsBlockListArrayOutputWithContext(context.Context) QuerySuggestionsBlockListArrayOutput
}

type QuerySuggestionsBlockListArray []QuerySuggestionsBlockListInput

func (QuerySuggestionsBlockListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QuerySuggestionsBlockList)(nil)).Elem()
}

func (i QuerySuggestionsBlockListArray) ToQuerySuggestionsBlockListArrayOutput() QuerySuggestionsBlockListArrayOutput {
	return i.ToQuerySuggestionsBlockListArrayOutputWithContext(context.Background())
}

func (i QuerySuggestionsBlockListArray) ToQuerySuggestionsBlockListArrayOutputWithContext(ctx context.Context) QuerySuggestionsBlockListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySuggestionsBlockListArrayOutput)
}

// QuerySuggestionsBlockListMapInput is an input type that accepts QuerySuggestionsBlockListMap and QuerySuggestionsBlockListMapOutput values.
// You can construct a concrete instance of `QuerySuggestionsBlockListMapInput` via:
//
//	QuerySuggestionsBlockListMap{ "key": QuerySuggestionsBlockListArgs{...} }
type QuerySuggestionsBlockListMapInput interface {
	pulumi.Input

	ToQuerySuggestionsBlockListMapOutput() QuerySuggestionsBlockListMapOutput
	ToQuerySuggestionsBlockListMapOutputWithContext(context.Context) QuerySuggestionsBlockListMapOutput
}

type QuerySuggestionsBlockListMap map[string]QuerySuggestionsBlockListInput

func (QuerySuggestionsBlockListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QuerySuggestionsBlockList)(nil)).Elem()
}

func (i QuerySuggestionsBlockListMap) ToQuerySuggestionsBlockListMapOutput() QuerySuggestionsBlockListMapOutput {
	return i.ToQuerySuggestionsBlockListMapOutputWithContext(context.Background())
}

func (i QuerySuggestionsBlockListMap) ToQuerySuggestionsBlockListMapOutputWithContext(ctx context.Context) QuerySuggestionsBlockListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySuggestionsBlockListMapOutput)
}

type QuerySuggestionsBlockListOutput struct{ *pulumi.OutputState }

func (QuerySuggestionsBlockListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuerySuggestionsBlockList)(nil)).Elem()
}

func (o QuerySuggestionsBlockListOutput) ToQuerySuggestionsBlockListOutput() QuerySuggestionsBlockListOutput {
	return o
}

func (o QuerySuggestionsBlockListOutput) ToQuerySuggestionsBlockListOutputWithContext(ctx context.Context) QuerySuggestionsBlockListOutput {
	return o
}

func (o QuerySuggestionsBlockListOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o QuerySuggestionsBlockListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o QuerySuggestionsBlockListOutput) IndexId() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.IndexId }).(pulumi.StringOutput)
}

func (o QuerySuggestionsBlockListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o QuerySuggestionsBlockListOutput) QuerySuggestionsBlockListId() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.QuerySuggestionsBlockListId }).(pulumi.StringOutput)
}

func (o QuerySuggestionsBlockListOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o QuerySuggestionsBlockListOutput) SourceS3Path() QuerySuggestionsBlockListSourceS3PathOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) QuerySuggestionsBlockListSourceS3PathOutput { return v.SourceS3Path }).(QuerySuggestionsBlockListSourceS3PathOutput)
}

func (o QuerySuggestionsBlockListOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o QuerySuggestionsBlockListOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o QuerySuggestionsBlockListOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type QuerySuggestionsBlockListArrayOutput struct{ *pulumi.OutputState }

func (QuerySuggestionsBlockListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QuerySuggestionsBlockList)(nil)).Elem()
}

func (o QuerySuggestionsBlockListArrayOutput) ToQuerySuggestionsBlockListArrayOutput() QuerySuggestionsBlockListArrayOutput {
	return o
}

func (o QuerySuggestionsBlockListArrayOutput) ToQuerySuggestionsBlockListArrayOutputWithContext(ctx context.Context) QuerySuggestionsBlockListArrayOutput {
	return o
}

func (o QuerySuggestionsBlockListArrayOutput) Index(i pulumi.IntInput) QuerySuggestionsBlockListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QuerySuggestionsBlockList {
		return vs[0].([]*QuerySuggestionsBlockList)[vs[1].(int)]
	}).(QuerySuggestionsBlockListOutput)
}

type QuerySuggestionsBlockListMapOutput struct{ *pulumi.OutputState }

func (QuerySuggestionsBlockListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QuerySuggestionsBlockList)(nil)).Elem()
}

func (o QuerySuggestionsBlockListMapOutput) ToQuerySuggestionsBlockListMapOutput() QuerySuggestionsBlockListMapOutput {
	return o
}

func (o QuerySuggestionsBlockListMapOutput) ToQuerySuggestionsBlockListMapOutputWithContext(ctx context.Context) QuerySuggestionsBlockListMapOutput {
	return o
}

func (o QuerySuggestionsBlockListMapOutput) MapIndex(k pulumi.StringInput) QuerySuggestionsBlockListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QuerySuggestionsBlockList {
		return vs[0].(map[string]*QuerySuggestionsBlockList)[vs[1].(string)]
	}).(QuerySuggestionsBlockListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QuerySuggestionsBlockListInput)(nil)).Elem(), &QuerySuggestionsBlockList{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuerySuggestionsBlockListArrayInput)(nil)).Elem(), QuerySuggestionsBlockListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuerySuggestionsBlockListMapInput)(nil)).Elem(), QuerySuggestionsBlockListMap{})
	pulumi.RegisterOutputType(QuerySuggestionsBlockListOutput{})
	pulumi.RegisterOutputType(QuerySuggestionsBlockListArrayOutput{})
	pulumi.RegisterOutputType(QuerySuggestionsBlockListMapOutput{})
}
