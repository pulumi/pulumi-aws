// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Kendra block list used for query suggestions for an index.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/kendra"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kendra.NewQuerySuggestionsBlockList(ctx, "example", &kendra.QuerySuggestionsBlockListArgs{
//				IndexId: pulumi.Any(aws_kendra_index.Example.Id),
//				RoleArn: pulumi.Any(aws_iam_role.Example.Arn),
//				SourceS3Path: &kendra.QuerySuggestionsBlockListSourceS3PathArgs{
//					Bucket: pulumi.Any(aws_s3_bucket.Example.Id),
//					Key:    pulumi.String("example/suggestions.txt"),
//				},
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("Example Kendra Index"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `aws_kendra_query_suggestions_block_list` can be imported using the unique identifiers of the block list and index separated by a slash (`/`), e.g.,
//
// ```sh
//
//	$ pulumi import aws:kendra/querySuggestionsBlockList:QuerySuggestionsBlockList example blocklist-123456780/idx-8012925589
//
// ```
type QuerySuggestionsBlockList struct {
	pulumi.CustomResourceState

	// ARN of the block list.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The description for a block list.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The identifier of the index for a block list.
	IndexId pulumi.StringOutput `pulumi:"indexId"`
	// The name for the block list.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique indentifier of the block list.
	QuerySuggestionsBlockListId pulumi.StringOutput `pulumi:"querySuggestionsBlockListId"`
	// The IAM (Identity and Access Management) role used to access the block list text file in S3.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// The S3 path where your block list text file sits in S3. Detailed below.
	SourceS3Path QuerySuggestionsBlockListSourceS3PathOutput `pulumi:"sourceS3Path"`
	Status       pulumi.StringOutput                         `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewQuerySuggestionsBlockList registers a new resource with the given unique name, arguments, and options.
func NewQuerySuggestionsBlockList(ctx *pulumi.Context,
	name string, args *QuerySuggestionsBlockListArgs, opts ...pulumi.ResourceOption) (*QuerySuggestionsBlockList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IndexId == nil {
		return nil, errors.New("invalid value for required argument 'IndexId'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.SourceS3Path == nil {
		return nil, errors.New("invalid value for required argument 'SourceS3Path'")
	}
	var resource QuerySuggestionsBlockList
	err := ctx.RegisterResource("aws:kendra/querySuggestionsBlockList:QuerySuggestionsBlockList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQuerySuggestionsBlockList gets an existing QuerySuggestionsBlockList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQuerySuggestionsBlockList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QuerySuggestionsBlockListState, opts ...pulumi.ResourceOption) (*QuerySuggestionsBlockList, error) {
	var resource QuerySuggestionsBlockList
	err := ctx.ReadResource("aws:kendra/querySuggestionsBlockList:QuerySuggestionsBlockList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QuerySuggestionsBlockList resources.
type querySuggestionsBlockListState struct {
	// ARN of the block list.
	Arn *string `pulumi:"arn"`
	// The description for a block list.
	Description *string `pulumi:"description"`
	// The identifier of the index for a block list.
	IndexId *string `pulumi:"indexId"`
	// The name for the block list.
	Name *string `pulumi:"name"`
	// The unique indentifier of the block list.
	QuerySuggestionsBlockListId *string `pulumi:"querySuggestionsBlockListId"`
	// The IAM (Identity and Access Management) role used to access the block list text file in S3.
	RoleArn *string `pulumi:"roleArn"`
	// The S3 path where your block list text file sits in S3. Detailed below.
	SourceS3Path *QuerySuggestionsBlockListSourceS3Path `pulumi:"sourceS3Path"`
	Status       *string                                `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type QuerySuggestionsBlockListState struct {
	// ARN of the block list.
	Arn pulumi.StringPtrInput
	// The description for a block list.
	Description pulumi.StringPtrInput
	// The identifier of the index for a block list.
	IndexId pulumi.StringPtrInput
	// The name for the block list.
	Name pulumi.StringPtrInput
	// The unique indentifier of the block list.
	QuerySuggestionsBlockListId pulumi.StringPtrInput
	// The IAM (Identity and Access Management) role used to access the block list text file in S3.
	RoleArn pulumi.StringPtrInput
	// The S3 path where your block list text file sits in S3. Detailed below.
	SourceS3Path QuerySuggestionsBlockListSourceS3PathPtrInput
	Status       pulumi.StringPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (QuerySuggestionsBlockListState) ElementType() reflect.Type {
	return reflect.TypeOf((*querySuggestionsBlockListState)(nil)).Elem()
}

type querySuggestionsBlockListArgs struct {
	// The description for a block list.
	Description *string `pulumi:"description"`
	// The identifier of the index for a block list.
	IndexId string `pulumi:"indexId"`
	// The name for the block list.
	Name *string `pulumi:"name"`
	// The IAM (Identity and Access Management) role used to access the block list text file in S3.
	RoleArn string `pulumi:"roleArn"`
	// The S3 path where your block list text file sits in S3. Detailed below.
	SourceS3Path QuerySuggestionsBlockListSourceS3Path `pulumi:"sourceS3Path"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a QuerySuggestionsBlockList resource.
type QuerySuggestionsBlockListArgs struct {
	// The description for a block list.
	Description pulumi.StringPtrInput
	// The identifier of the index for a block list.
	IndexId pulumi.StringInput
	// The name for the block list.
	Name pulumi.StringPtrInput
	// The IAM (Identity and Access Management) role used to access the block list text file in S3.
	RoleArn pulumi.StringInput
	// The S3 path where your block list text file sits in S3. Detailed below.
	SourceS3Path QuerySuggestionsBlockListSourceS3PathInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (QuerySuggestionsBlockListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*querySuggestionsBlockListArgs)(nil)).Elem()
}

type QuerySuggestionsBlockListInput interface {
	pulumi.Input

	ToQuerySuggestionsBlockListOutput() QuerySuggestionsBlockListOutput
	ToQuerySuggestionsBlockListOutputWithContext(ctx context.Context) QuerySuggestionsBlockListOutput
}

func (*QuerySuggestionsBlockList) ElementType() reflect.Type {
	return reflect.TypeOf((**QuerySuggestionsBlockList)(nil)).Elem()
}

func (i *QuerySuggestionsBlockList) ToQuerySuggestionsBlockListOutput() QuerySuggestionsBlockListOutput {
	return i.ToQuerySuggestionsBlockListOutputWithContext(context.Background())
}

func (i *QuerySuggestionsBlockList) ToQuerySuggestionsBlockListOutputWithContext(ctx context.Context) QuerySuggestionsBlockListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySuggestionsBlockListOutput)
}

// QuerySuggestionsBlockListArrayInput is an input type that accepts QuerySuggestionsBlockListArray and QuerySuggestionsBlockListArrayOutput values.
// You can construct a concrete instance of `QuerySuggestionsBlockListArrayInput` via:
//
//	QuerySuggestionsBlockListArray{ QuerySuggestionsBlockListArgs{...} }
type QuerySuggestionsBlockListArrayInput interface {
	pulumi.Input

	ToQuerySuggestionsBlockListArrayOutput() QuerySuggestionsBlockListArrayOutput
	ToQuerySuggestionsBlockListArrayOutputWithContext(context.Context) QuerySuggestionsBlockListArrayOutput
}

type QuerySuggestionsBlockListArray []QuerySuggestionsBlockListInput

func (QuerySuggestionsBlockListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QuerySuggestionsBlockList)(nil)).Elem()
}

func (i QuerySuggestionsBlockListArray) ToQuerySuggestionsBlockListArrayOutput() QuerySuggestionsBlockListArrayOutput {
	return i.ToQuerySuggestionsBlockListArrayOutputWithContext(context.Background())
}

func (i QuerySuggestionsBlockListArray) ToQuerySuggestionsBlockListArrayOutputWithContext(ctx context.Context) QuerySuggestionsBlockListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySuggestionsBlockListArrayOutput)
}

// QuerySuggestionsBlockListMapInput is an input type that accepts QuerySuggestionsBlockListMap and QuerySuggestionsBlockListMapOutput values.
// You can construct a concrete instance of `QuerySuggestionsBlockListMapInput` via:
//
//	QuerySuggestionsBlockListMap{ "key": QuerySuggestionsBlockListArgs{...} }
type QuerySuggestionsBlockListMapInput interface {
	pulumi.Input

	ToQuerySuggestionsBlockListMapOutput() QuerySuggestionsBlockListMapOutput
	ToQuerySuggestionsBlockListMapOutputWithContext(context.Context) QuerySuggestionsBlockListMapOutput
}

type QuerySuggestionsBlockListMap map[string]QuerySuggestionsBlockListInput

func (QuerySuggestionsBlockListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QuerySuggestionsBlockList)(nil)).Elem()
}

func (i QuerySuggestionsBlockListMap) ToQuerySuggestionsBlockListMapOutput() QuerySuggestionsBlockListMapOutput {
	return i.ToQuerySuggestionsBlockListMapOutputWithContext(context.Background())
}

func (i QuerySuggestionsBlockListMap) ToQuerySuggestionsBlockListMapOutputWithContext(ctx context.Context) QuerySuggestionsBlockListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySuggestionsBlockListMapOutput)
}

type QuerySuggestionsBlockListOutput struct{ *pulumi.OutputState }

func (QuerySuggestionsBlockListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuerySuggestionsBlockList)(nil)).Elem()
}

func (o QuerySuggestionsBlockListOutput) ToQuerySuggestionsBlockListOutput() QuerySuggestionsBlockListOutput {
	return o
}

func (o QuerySuggestionsBlockListOutput) ToQuerySuggestionsBlockListOutputWithContext(ctx context.Context) QuerySuggestionsBlockListOutput {
	return o
}

// ARN of the block list.
func (o QuerySuggestionsBlockListOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The description for a block list.
func (o QuerySuggestionsBlockListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The identifier of the index for a block list.
func (o QuerySuggestionsBlockListOutput) IndexId() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.IndexId }).(pulumi.StringOutput)
}

// The name for the block list.
func (o QuerySuggestionsBlockListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unique indentifier of the block list.
func (o QuerySuggestionsBlockListOutput) QuerySuggestionsBlockListId() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.QuerySuggestionsBlockListId }).(pulumi.StringOutput)
}

// The IAM (Identity and Access Management) role used to access the block list text file in S3.
func (o QuerySuggestionsBlockListOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// The S3 path where your block list text file sits in S3. Detailed below.
func (o QuerySuggestionsBlockListOutput) SourceS3Path() QuerySuggestionsBlockListSourceS3PathOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) QuerySuggestionsBlockListSourceS3PathOutput { return v.SourceS3Path }).(QuerySuggestionsBlockListSourceS3PathOutput)
}

func (o QuerySuggestionsBlockListOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o QuerySuggestionsBlockListOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o QuerySuggestionsBlockListOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *QuerySuggestionsBlockList) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type QuerySuggestionsBlockListArrayOutput struct{ *pulumi.OutputState }

func (QuerySuggestionsBlockListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QuerySuggestionsBlockList)(nil)).Elem()
}

func (o QuerySuggestionsBlockListArrayOutput) ToQuerySuggestionsBlockListArrayOutput() QuerySuggestionsBlockListArrayOutput {
	return o
}

func (o QuerySuggestionsBlockListArrayOutput) ToQuerySuggestionsBlockListArrayOutputWithContext(ctx context.Context) QuerySuggestionsBlockListArrayOutput {
	return o
}

func (o QuerySuggestionsBlockListArrayOutput) Index(i pulumi.IntInput) QuerySuggestionsBlockListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QuerySuggestionsBlockList {
		return vs[0].([]*QuerySuggestionsBlockList)[vs[1].(int)]
	}).(QuerySuggestionsBlockListOutput)
}

type QuerySuggestionsBlockListMapOutput struct{ *pulumi.OutputState }

func (QuerySuggestionsBlockListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QuerySuggestionsBlockList)(nil)).Elem()
}

func (o QuerySuggestionsBlockListMapOutput) ToQuerySuggestionsBlockListMapOutput() QuerySuggestionsBlockListMapOutput {
	return o
}

func (o QuerySuggestionsBlockListMapOutput) ToQuerySuggestionsBlockListMapOutputWithContext(ctx context.Context) QuerySuggestionsBlockListMapOutput {
	return o
}

func (o QuerySuggestionsBlockListMapOutput) MapIndex(k pulumi.StringInput) QuerySuggestionsBlockListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QuerySuggestionsBlockList {
		return vs[0].(map[string]*QuerySuggestionsBlockList)[vs[1].(string)]
	}).(QuerySuggestionsBlockListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QuerySuggestionsBlockListInput)(nil)).Elem(), &QuerySuggestionsBlockList{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuerySuggestionsBlockListArrayInput)(nil)).Elem(), QuerySuggestionsBlockListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuerySuggestionsBlockListMapInput)(nil)).Elem(), QuerySuggestionsBlockListMap{})
	pulumi.RegisterOutputType(QuerySuggestionsBlockListOutput{})
	pulumi.RegisterOutputType(QuerySuggestionsBlockListArrayOutput{})
	pulumi.RegisterOutputType(QuerySuggestionsBlockListMapOutput{})
}
