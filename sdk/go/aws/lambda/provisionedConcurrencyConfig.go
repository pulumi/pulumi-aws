// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProvisionedConcurrencyConfig struct {
	pulumi.CustomResourceState

	FunctionName                    pulumi.StringOutput `pulumi:"functionName"`
	ProvisionedConcurrentExecutions pulumi.IntOutput    `pulumi:"provisionedConcurrentExecutions"`
	Qualifier                       pulumi.StringOutput `pulumi:"qualifier"`
}

// NewProvisionedConcurrencyConfig registers a new resource with the given unique name, arguments, and options.
func NewProvisionedConcurrencyConfig(ctx *pulumi.Context,
	name string, args *ProvisionedConcurrencyConfigArgs, opts ...pulumi.ResourceOption) (*ProvisionedConcurrencyConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	if args.ProvisionedConcurrentExecutions == nil {
		return nil, errors.New("invalid value for required argument 'ProvisionedConcurrentExecutions'")
	}
	if args.Qualifier == nil {
		return nil, errors.New("invalid value for required argument 'Qualifier'")
	}
	var resource ProvisionedConcurrencyConfig
	err := ctx.RegisterResource("aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProvisionedConcurrencyConfig gets an existing ProvisionedConcurrencyConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProvisionedConcurrencyConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProvisionedConcurrencyConfigState, opts ...pulumi.ResourceOption) (*ProvisionedConcurrencyConfig, error) {
	var resource ProvisionedConcurrencyConfig
	err := ctx.ReadResource("aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProvisionedConcurrencyConfig resources.
type provisionedConcurrencyConfigState struct {
	FunctionName                    *string `pulumi:"functionName"`
	ProvisionedConcurrentExecutions *int    `pulumi:"provisionedConcurrentExecutions"`
	Qualifier                       *string `pulumi:"qualifier"`
}

type ProvisionedConcurrencyConfigState struct {
	FunctionName                    pulumi.StringPtrInput
	ProvisionedConcurrentExecutions pulumi.IntPtrInput
	Qualifier                       pulumi.StringPtrInput
}

func (ProvisionedConcurrencyConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*provisionedConcurrencyConfigState)(nil)).Elem()
}

type provisionedConcurrencyConfigArgs struct {
	FunctionName                    string `pulumi:"functionName"`
	ProvisionedConcurrentExecutions int    `pulumi:"provisionedConcurrentExecutions"`
	Qualifier                       string `pulumi:"qualifier"`
}

// The set of arguments for constructing a ProvisionedConcurrencyConfig resource.
type ProvisionedConcurrencyConfigArgs struct {
	FunctionName                    pulumi.StringInput
	ProvisionedConcurrentExecutions pulumi.IntInput
	Qualifier                       pulumi.StringInput
}

func (ProvisionedConcurrencyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*provisionedConcurrencyConfigArgs)(nil)).Elem()
}

type ProvisionedConcurrencyConfigInput interface {
	pulumi.Input

	ToProvisionedConcurrencyConfigOutput() ProvisionedConcurrencyConfigOutput
	ToProvisionedConcurrencyConfigOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigOutput
}

func (*ProvisionedConcurrencyConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (i *ProvisionedConcurrencyConfig) ToProvisionedConcurrencyConfigOutput() ProvisionedConcurrencyConfigOutput {
	return i.ToProvisionedConcurrencyConfigOutputWithContext(context.Background())
}

func (i *ProvisionedConcurrencyConfig) ToProvisionedConcurrencyConfigOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedConcurrencyConfigOutput)
}

// ProvisionedConcurrencyConfigArrayInput is an input type that accepts ProvisionedConcurrencyConfigArray and ProvisionedConcurrencyConfigArrayOutput values.
// You can construct a concrete instance of `ProvisionedConcurrencyConfigArrayInput` via:
//
//	ProvisionedConcurrencyConfigArray{ ProvisionedConcurrencyConfigArgs{...} }
type ProvisionedConcurrencyConfigArrayInput interface {
	pulumi.Input

	ToProvisionedConcurrencyConfigArrayOutput() ProvisionedConcurrencyConfigArrayOutput
	ToProvisionedConcurrencyConfigArrayOutputWithContext(context.Context) ProvisionedConcurrencyConfigArrayOutput
}

type ProvisionedConcurrencyConfigArray []ProvisionedConcurrencyConfigInput

func (ProvisionedConcurrencyConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (i ProvisionedConcurrencyConfigArray) ToProvisionedConcurrencyConfigArrayOutput() ProvisionedConcurrencyConfigArrayOutput {
	return i.ToProvisionedConcurrencyConfigArrayOutputWithContext(context.Background())
}

func (i ProvisionedConcurrencyConfigArray) ToProvisionedConcurrencyConfigArrayOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedConcurrencyConfigArrayOutput)
}

// ProvisionedConcurrencyConfigMapInput is an input type that accepts ProvisionedConcurrencyConfigMap and ProvisionedConcurrencyConfigMapOutput values.
// You can construct a concrete instance of `ProvisionedConcurrencyConfigMapInput` via:
//
//	ProvisionedConcurrencyConfigMap{ "key": ProvisionedConcurrencyConfigArgs{...} }
type ProvisionedConcurrencyConfigMapInput interface {
	pulumi.Input

	ToProvisionedConcurrencyConfigMapOutput() ProvisionedConcurrencyConfigMapOutput
	ToProvisionedConcurrencyConfigMapOutputWithContext(context.Context) ProvisionedConcurrencyConfigMapOutput
}

type ProvisionedConcurrencyConfigMap map[string]ProvisionedConcurrencyConfigInput

func (ProvisionedConcurrencyConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (i ProvisionedConcurrencyConfigMap) ToProvisionedConcurrencyConfigMapOutput() ProvisionedConcurrencyConfigMapOutput {
	return i.ToProvisionedConcurrencyConfigMapOutputWithContext(context.Background())
}

func (i ProvisionedConcurrencyConfigMap) ToProvisionedConcurrencyConfigMapOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedConcurrencyConfigMapOutput)
}

type ProvisionedConcurrencyConfigOutput struct{ *pulumi.OutputState }

func (ProvisionedConcurrencyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (o ProvisionedConcurrencyConfigOutput) ToProvisionedConcurrencyConfigOutput() ProvisionedConcurrencyConfigOutput {
	return o
}

func (o ProvisionedConcurrencyConfigOutput) ToProvisionedConcurrencyConfigOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigOutput {
	return o
}

func (o ProvisionedConcurrencyConfigOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

func (o ProvisionedConcurrencyConfigOutput) ProvisionedConcurrentExecutions() pulumi.IntOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) pulumi.IntOutput { return v.ProvisionedConcurrentExecutions }).(pulumi.IntOutput)
}

func (o ProvisionedConcurrencyConfigOutput) Qualifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) pulumi.StringOutput { return v.Qualifier }).(pulumi.StringOutput)
}

type ProvisionedConcurrencyConfigArrayOutput struct{ *pulumi.OutputState }

func (ProvisionedConcurrencyConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (o ProvisionedConcurrencyConfigArrayOutput) ToProvisionedConcurrencyConfigArrayOutput() ProvisionedConcurrencyConfigArrayOutput {
	return o
}

func (o ProvisionedConcurrencyConfigArrayOutput) ToProvisionedConcurrencyConfigArrayOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigArrayOutput {
	return o
}

func (o ProvisionedConcurrencyConfigArrayOutput) Index(i pulumi.IntInput) ProvisionedConcurrencyConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProvisionedConcurrencyConfig {
		return vs[0].([]*ProvisionedConcurrencyConfig)[vs[1].(int)]
	}).(ProvisionedConcurrencyConfigOutput)
}

type ProvisionedConcurrencyConfigMapOutput struct{ *pulumi.OutputState }

func (ProvisionedConcurrencyConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (o ProvisionedConcurrencyConfigMapOutput) ToProvisionedConcurrencyConfigMapOutput() ProvisionedConcurrencyConfigMapOutput {
	return o
}

func (o ProvisionedConcurrencyConfigMapOutput) ToProvisionedConcurrencyConfigMapOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigMapOutput {
	return o
}

func (o ProvisionedConcurrencyConfigMapOutput) MapIndex(k pulumi.StringInput) ProvisionedConcurrencyConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProvisionedConcurrencyConfig {
		return vs[0].(map[string]*ProvisionedConcurrencyConfig)[vs[1].(string)]
	}).(ProvisionedConcurrencyConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionedConcurrencyConfigInput)(nil)).Elem(), &ProvisionedConcurrencyConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionedConcurrencyConfigArrayInput)(nil)).Elem(), ProvisionedConcurrencyConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionedConcurrencyConfigMapInput)(nil)).Elem(), ProvisionedConcurrencyConfigMap{})
	pulumi.RegisterOutputType(ProvisionedConcurrencyConfigOutput{})
	pulumi.RegisterOutputType(ProvisionedConcurrencyConfigArrayOutput{})
	pulumi.RegisterOutputType(ProvisionedConcurrencyConfigMapOutput{})
}
