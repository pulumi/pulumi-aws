// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventSourceMapping struct {
	pulumi.CustomResourceState

	AmazonManagedKafkaEventSourceConfig EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput `pulumi:"amazonManagedKafkaEventSourceConfig"`
	BatchSize                           pulumi.IntPtrOutput                                         `pulumi:"batchSize"`
	BisectBatchOnFunctionError          pulumi.BoolPtrOutput                                        `pulumi:"bisectBatchOnFunctionError"`
	DestinationConfig                   EventSourceMappingDestinationConfigPtrOutput                `pulumi:"destinationConfig"`
	Enabled                             pulumi.BoolPtrOutput                                        `pulumi:"enabled"`
	EventSourceArn                      pulumi.StringPtrOutput                                      `pulumi:"eventSourceArn"`
	FilterCriteria                      EventSourceMappingFilterCriteriaPtrOutput                   `pulumi:"filterCriteria"`
	FunctionArn                         pulumi.StringOutput                                         `pulumi:"functionArn"`
	FunctionName                        pulumi.StringOutput                                         `pulumi:"functionName"`
	FunctionResponseTypes               pulumi.StringArrayOutput                                    `pulumi:"functionResponseTypes"`
	LastModified                        pulumi.StringOutput                                         `pulumi:"lastModified"`
	LastProcessingResult                pulumi.StringOutput                                         `pulumi:"lastProcessingResult"`
	MaximumBatchingWindowInSeconds      pulumi.IntPtrOutput                                         `pulumi:"maximumBatchingWindowInSeconds"`
	MaximumRecordAgeInSeconds           pulumi.IntOutput                                            `pulumi:"maximumRecordAgeInSeconds"`
	MaximumRetryAttempts                pulumi.IntOutput                                            `pulumi:"maximumRetryAttempts"`
	ParallelizationFactor               pulumi.IntOutput                                            `pulumi:"parallelizationFactor"`
	Queues                              pulumi.StringArrayOutput                                    `pulumi:"queues"`
	SelfManagedEventSource              EventSourceMappingSelfManagedEventSourcePtrOutput           `pulumi:"selfManagedEventSource"`
	SelfManagedKafkaEventSourceConfig   EventSourceMappingSelfManagedKafkaEventSourceConfigOutput   `pulumi:"selfManagedKafkaEventSourceConfig"`
	SourceAccessConfigurations          EventSourceMappingSourceAccessConfigurationArrayOutput      `pulumi:"sourceAccessConfigurations"`
	StartingPosition                    pulumi.StringPtrOutput                                      `pulumi:"startingPosition"`
	StartingPositionTimestamp           pulumi.StringPtrOutput                                      `pulumi:"startingPositionTimestamp"`
	State                               pulumi.StringOutput                                         `pulumi:"state"`
	StateTransitionReason               pulumi.StringOutput                                         `pulumi:"stateTransitionReason"`
	Topics                              pulumi.StringArrayOutput                                    `pulumi:"topics"`
	TumblingWindowInSeconds             pulumi.IntPtrOutput                                         `pulumi:"tumblingWindowInSeconds"`
	Uuid                                pulumi.StringOutput                                         `pulumi:"uuid"`
}

// NewEventSourceMapping registers a new resource with the given unique name, arguments, and options.
func NewEventSourceMapping(ctx *pulumi.Context,
	name string, args *EventSourceMappingArgs, opts ...pulumi.ResourceOption) (*EventSourceMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	var resource EventSourceMapping
	err := ctx.RegisterResource("aws:lambda/eventSourceMapping:EventSourceMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventSourceMapping gets an existing EventSourceMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventSourceMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventSourceMappingState, opts ...pulumi.ResourceOption) (*EventSourceMapping, error) {
	var resource EventSourceMapping
	err := ctx.ReadResource("aws:lambda/eventSourceMapping:EventSourceMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventSourceMapping resources.
type eventSourceMappingState struct {
	AmazonManagedKafkaEventSourceConfig *EventSourceMappingAmazonManagedKafkaEventSourceConfig `pulumi:"amazonManagedKafkaEventSourceConfig"`
	BatchSize                           *int                                                   `pulumi:"batchSize"`
	BisectBatchOnFunctionError          *bool                                                  `pulumi:"bisectBatchOnFunctionError"`
	DestinationConfig                   *EventSourceMappingDestinationConfig                   `pulumi:"destinationConfig"`
	Enabled                             *bool                                                  `pulumi:"enabled"`
	EventSourceArn                      *string                                                `pulumi:"eventSourceArn"`
	FilterCriteria                      *EventSourceMappingFilterCriteria                      `pulumi:"filterCriteria"`
	FunctionArn                         *string                                                `pulumi:"functionArn"`
	FunctionName                        *string                                                `pulumi:"functionName"`
	FunctionResponseTypes               []string                                               `pulumi:"functionResponseTypes"`
	LastModified                        *string                                                `pulumi:"lastModified"`
	LastProcessingResult                *string                                                `pulumi:"lastProcessingResult"`
	MaximumBatchingWindowInSeconds      *int                                                   `pulumi:"maximumBatchingWindowInSeconds"`
	MaximumRecordAgeInSeconds           *int                                                   `pulumi:"maximumRecordAgeInSeconds"`
	MaximumRetryAttempts                *int                                                   `pulumi:"maximumRetryAttempts"`
	ParallelizationFactor               *int                                                   `pulumi:"parallelizationFactor"`
	Queues                              []string                                               `pulumi:"queues"`
	SelfManagedEventSource              *EventSourceMappingSelfManagedEventSource              `pulumi:"selfManagedEventSource"`
	SelfManagedKafkaEventSourceConfig   *EventSourceMappingSelfManagedKafkaEventSourceConfig   `pulumi:"selfManagedKafkaEventSourceConfig"`
	SourceAccessConfigurations          []EventSourceMappingSourceAccessConfiguration          `pulumi:"sourceAccessConfigurations"`
	StartingPosition                    *string                                                `pulumi:"startingPosition"`
	StartingPositionTimestamp           *string                                                `pulumi:"startingPositionTimestamp"`
	State                               *string                                                `pulumi:"state"`
	StateTransitionReason               *string                                                `pulumi:"stateTransitionReason"`
	Topics                              []string                                               `pulumi:"topics"`
	TumblingWindowInSeconds             *int                                                   `pulumi:"tumblingWindowInSeconds"`
	Uuid                                *string                                                `pulumi:"uuid"`
}

type EventSourceMappingState struct {
	AmazonManagedKafkaEventSourceConfig EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrInput
	BatchSize                           pulumi.IntPtrInput
	BisectBatchOnFunctionError          pulumi.BoolPtrInput
	DestinationConfig                   EventSourceMappingDestinationConfigPtrInput
	Enabled                             pulumi.BoolPtrInput
	EventSourceArn                      pulumi.StringPtrInput
	FilterCriteria                      EventSourceMappingFilterCriteriaPtrInput
	FunctionArn                         pulumi.StringPtrInput
	FunctionName                        pulumi.StringPtrInput
	FunctionResponseTypes               pulumi.StringArrayInput
	LastModified                        pulumi.StringPtrInput
	LastProcessingResult                pulumi.StringPtrInput
	MaximumBatchingWindowInSeconds      pulumi.IntPtrInput
	MaximumRecordAgeInSeconds           pulumi.IntPtrInput
	MaximumRetryAttempts                pulumi.IntPtrInput
	ParallelizationFactor               pulumi.IntPtrInput
	Queues                              pulumi.StringArrayInput
	SelfManagedEventSource              EventSourceMappingSelfManagedEventSourcePtrInput
	SelfManagedKafkaEventSourceConfig   EventSourceMappingSelfManagedKafkaEventSourceConfigPtrInput
	SourceAccessConfigurations          EventSourceMappingSourceAccessConfigurationArrayInput
	StartingPosition                    pulumi.StringPtrInput
	StartingPositionTimestamp           pulumi.StringPtrInput
	State                               pulumi.StringPtrInput
	StateTransitionReason               pulumi.StringPtrInput
	Topics                              pulumi.StringArrayInput
	TumblingWindowInSeconds             pulumi.IntPtrInput
	Uuid                                pulumi.StringPtrInput
}

func (EventSourceMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourceMappingState)(nil)).Elem()
}

type eventSourceMappingArgs struct {
	AmazonManagedKafkaEventSourceConfig *EventSourceMappingAmazonManagedKafkaEventSourceConfig `pulumi:"amazonManagedKafkaEventSourceConfig"`
	BatchSize                           *int                                                   `pulumi:"batchSize"`
	BisectBatchOnFunctionError          *bool                                                  `pulumi:"bisectBatchOnFunctionError"`
	DestinationConfig                   *EventSourceMappingDestinationConfig                   `pulumi:"destinationConfig"`
	Enabled                             *bool                                                  `pulumi:"enabled"`
	EventSourceArn                      *string                                                `pulumi:"eventSourceArn"`
	FilterCriteria                      *EventSourceMappingFilterCriteria                      `pulumi:"filterCriteria"`
	FunctionName                        string                                                 `pulumi:"functionName"`
	FunctionResponseTypes               []string                                               `pulumi:"functionResponseTypes"`
	MaximumBatchingWindowInSeconds      *int                                                   `pulumi:"maximumBatchingWindowInSeconds"`
	MaximumRecordAgeInSeconds           *int                                                   `pulumi:"maximumRecordAgeInSeconds"`
	MaximumRetryAttempts                *int                                                   `pulumi:"maximumRetryAttempts"`
	ParallelizationFactor               *int                                                   `pulumi:"parallelizationFactor"`
	Queues                              []string                                               `pulumi:"queues"`
	SelfManagedEventSource              *EventSourceMappingSelfManagedEventSource              `pulumi:"selfManagedEventSource"`
	SelfManagedKafkaEventSourceConfig   *EventSourceMappingSelfManagedKafkaEventSourceConfig   `pulumi:"selfManagedKafkaEventSourceConfig"`
	SourceAccessConfigurations          []EventSourceMappingSourceAccessConfiguration          `pulumi:"sourceAccessConfigurations"`
	StartingPosition                    *string                                                `pulumi:"startingPosition"`
	StartingPositionTimestamp           *string                                                `pulumi:"startingPositionTimestamp"`
	Topics                              []string                                               `pulumi:"topics"`
	TumblingWindowInSeconds             *int                                                   `pulumi:"tumblingWindowInSeconds"`
}

// The set of arguments for constructing a EventSourceMapping resource.
type EventSourceMappingArgs struct {
	AmazonManagedKafkaEventSourceConfig EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrInput
	BatchSize                           pulumi.IntPtrInput
	BisectBatchOnFunctionError          pulumi.BoolPtrInput
	DestinationConfig                   EventSourceMappingDestinationConfigPtrInput
	Enabled                             pulumi.BoolPtrInput
	EventSourceArn                      pulumi.StringPtrInput
	FilterCriteria                      EventSourceMappingFilterCriteriaPtrInput
	FunctionName                        pulumi.StringInput
	FunctionResponseTypes               pulumi.StringArrayInput
	MaximumBatchingWindowInSeconds      pulumi.IntPtrInput
	MaximumRecordAgeInSeconds           pulumi.IntPtrInput
	MaximumRetryAttempts                pulumi.IntPtrInput
	ParallelizationFactor               pulumi.IntPtrInput
	Queues                              pulumi.StringArrayInput
	SelfManagedEventSource              EventSourceMappingSelfManagedEventSourcePtrInput
	SelfManagedKafkaEventSourceConfig   EventSourceMappingSelfManagedKafkaEventSourceConfigPtrInput
	SourceAccessConfigurations          EventSourceMappingSourceAccessConfigurationArrayInput
	StartingPosition                    pulumi.StringPtrInput
	StartingPositionTimestamp           pulumi.StringPtrInput
	Topics                              pulumi.StringArrayInput
	TumblingWindowInSeconds             pulumi.IntPtrInput
}

func (EventSourceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourceMappingArgs)(nil)).Elem()
}

type EventSourceMappingInput interface {
	pulumi.Input

	ToEventSourceMappingOutput() EventSourceMappingOutput
	ToEventSourceMappingOutputWithContext(ctx context.Context) EventSourceMappingOutput
}

func (*EventSourceMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMapping)(nil)).Elem()
}

func (i *EventSourceMapping) ToEventSourceMappingOutput() EventSourceMappingOutput {
	return i.ToEventSourceMappingOutputWithContext(context.Background())
}

func (i *EventSourceMapping) ToEventSourceMappingOutputWithContext(ctx context.Context) EventSourceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingOutput)
}

// EventSourceMappingArrayInput is an input type that accepts EventSourceMappingArray and EventSourceMappingArrayOutput values.
// You can construct a concrete instance of `EventSourceMappingArrayInput` via:
//
//	EventSourceMappingArray{ EventSourceMappingArgs{...} }
type EventSourceMappingArrayInput interface {
	pulumi.Input

	ToEventSourceMappingArrayOutput() EventSourceMappingArrayOutput
	ToEventSourceMappingArrayOutputWithContext(context.Context) EventSourceMappingArrayOutput
}

type EventSourceMappingArray []EventSourceMappingInput

func (EventSourceMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventSourceMapping)(nil)).Elem()
}

func (i EventSourceMappingArray) ToEventSourceMappingArrayOutput() EventSourceMappingArrayOutput {
	return i.ToEventSourceMappingArrayOutputWithContext(context.Background())
}

func (i EventSourceMappingArray) ToEventSourceMappingArrayOutputWithContext(ctx context.Context) EventSourceMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingArrayOutput)
}

// EventSourceMappingMapInput is an input type that accepts EventSourceMappingMap and EventSourceMappingMapOutput values.
// You can construct a concrete instance of `EventSourceMappingMapInput` via:
//
//	EventSourceMappingMap{ "key": EventSourceMappingArgs{...} }
type EventSourceMappingMapInput interface {
	pulumi.Input

	ToEventSourceMappingMapOutput() EventSourceMappingMapOutput
	ToEventSourceMappingMapOutputWithContext(context.Context) EventSourceMappingMapOutput
}

type EventSourceMappingMap map[string]EventSourceMappingInput

func (EventSourceMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventSourceMapping)(nil)).Elem()
}

func (i EventSourceMappingMap) ToEventSourceMappingMapOutput() EventSourceMappingMapOutput {
	return i.ToEventSourceMappingMapOutputWithContext(context.Background())
}

func (i EventSourceMappingMap) ToEventSourceMappingMapOutputWithContext(ctx context.Context) EventSourceMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingMapOutput)
}

type EventSourceMappingOutput struct{ *pulumi.OutputState }

func (EventSourceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMapping)(nil)).Elem()
}

func (o EventSourceMappingOutput) ToEventSourceMappingOutput() EventSourceMappingOutput {
	return o
}

func (o EventSourceMappingOutput) ToEventSourceMappingOutputWithContext(ctx context.Context) EventSourceMappingOutput {
	return o
}

func (o EventSourceMappingOutput) AmazonManagedKafkaEventSourceConfig() EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput {
	return o.ApplyT(func(v *EventSourceMapping) EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput {
		return v.AmazonManagedKafkaEventSourceConfig
	}).(EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput)
}

func (o EventSourceMappingOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.IntPtrOutput { return v.BatchSize }).(pulumi.IntPtrOutput)
}

func (o EventSourceMappingOutput) BisectBatchOnFunctionError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.BoolPtrOutput { return v.BisectBatchOnFunctionError }).(pulumi.BoolPtrOutput)
}

func (o EventSourceMappingOutput) DestinationConfig() EventSourceMappingDestinationConfigPtrOutput {
	return o.ApplyT(func(v *EventSourceMapping) EventSourceMappingDestinationConfigPtrOutput { return v.DestinationConfig }).(EventSourceMappingDestinationConfigPtrOutput)
}

func (o EventSourceMappingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o EventSourceMappingOutput) EventSourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringPtrOutput { return v.EventSourceArn }).(pulumi.StringPtrOutput)
}

func (o EventSourceMappingOutput) FilterCriteria() EventSourceMappingFilterCriteriaPtrOutput {
	return o.ApplyT(func(v *EventSourceMapping) EventSourceMappingFilterCriteriaPtrOutput { return v.FilterCriteria }).(EventSourceMappingFilterCriteriaPtrOutput)
}

func (o EventSourceMappingOutput) FunctionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringOutput { return v.FunctionArn }).(pulumi.StringOutput)
}

func (o EventSourceMappingOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

func (o EventSourceMappingOutput) FunctionResponseTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringArrayOutput { return v.FunctionResponseTypes }).(pulumi.StringArrayOutput)
}

func (o EventSourceMappingOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

func (o EventSourceMappingOutput) LastProcessingResult() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringOutput { return v.LastProcessingResult }).(pulumi.StringOutput)
}

func (o EventSourceMappingOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.IntPtrOutput { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

func (o EventSourceMappingOutput) MaximumRecordAgeInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.IntOutput { return v.MaximumRecordAgeInSeconds }).(pulumi.IntOutput)
}

func (o EventSourceMappingOutput) MaximumRetryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.IntOutput { return v.MaximumRetryAttempts }).(pulumi.IntOutput)
}

func (o EventSourceMappingOutput) ParallelizationFactor() pulumi.IntOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.IntOutput { return v.ParallelizationFactor }).(pulumi.IntOutput)
}

func (o EventSourceMappingOutput) Queues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringArrayOutput { return v.Queues }).(pulumi.StringArrayOutput)
}

func (o EventSourceMappingOutput) SelfManagedEventSource() EventSourceMappingSelfManagedEventSourcePtrOutput {
	return o.ApplyT(func(v *EventSourceMapping) EventSourceMappingSelfManagedEventSourcePtrOutput {
		return v.SelfManagedEventSource
	}).(EventSourceMappingSelfManagedEventSourcePtrOutput)
}

func (o EventSourceMappingOutput) SelfManagedKafkaEventSourceConfig() EventSourceMappingSelfManagedKafkaEventSourceConfigOutput {
	return o.ApplyT(func(v *EventSourceMapping) EventSourceMappingSelfManagedKafkaEventSourceConfigOutput {
		return v.SelfManagedKafkaEventSourceConfig
	}).(EventSourceMappingSelfManagedKafkaEventSourceConfigOutput)
}

func (o EventSourceMappingOutput) SourceAccessConfigurations() EventSourceMappingSourceAccessConfigurationArrayOutput {
	return o.ApplyT(func(v *EventSourceMapping) EventSourceMappingSourceAccessConfigurationArrayOutput {
		return v.SourceAccessConfigurations
	}).(EventSourceMappingSourceAccessConfigurationArrayOutput)
}

func (o EventSourceMappingOutput) StartingPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringPtrOutput { return v.StartingPosition }).(pulumi.StringPtrOutput)
}

func (o EventSourceMappingOutput) StartingPositionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringPtrOutput { return v.StartingPositionTimestamp }).(pulumi.StringPtrOutput)
}

func (o EventSourceMappingOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o EventSourceMappingOutput) StateTransitionReason() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringOutput { return v.StateTransitionReason }).(pulumi.StringOutput)
}

func (o EventSourceMappingOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringArrayOutput { return v.Topics }).(pulumi.StringArrayOutput)
}

func (o EventSourceMappingOutput) TumblingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.IntPtrOutput { return v.TumblingWindowInSeconds }).(pulumi.IntPtrOutput)
}

func (o EventSourceMappingOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSourceMapping) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type EventSourceMappingArrayOutput struct{ *pulumi.OutputState }

func (EventSourceMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventSourceMapping)(nil)).Elem()
}

func (o EventSourceMappingArrayOutput) ToEventSourceMappingArrayOutput() EventSourceMappingArrayOutput {
	return o
}

func (o EventSourceMappingArrayOutput) ToEventSourceMappingArrayOutputWithContext(ctx context.Context) EventSourceMappingArrayOutput {
	return o
}

func (o EventSourceMappingArrayOutput) Index(i pulumi.IntInput) EventSourceMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventSourceMapping {
		return vs[0].([]*EventSourceMapping)[vs[1].(int)]
	}).(EventSourceMappingOutput)
}

type EventSourceMappingMapOutput struct{ *pulumi.OutputState }

func (EventSourceMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventSourceMapping)(nil)).Elem()
}

func (o EventSourceMappingMapOutput) ToEventSourceMappingMapOutput() EventSourceMappingMapOutput {
	return o
}

func (o EventSourceMappingMapOutput) ToEventSourceMappingMapOutputWithContext(ctx context.Context) EventSourceMappingMapOutput {
	return o
}

func (o EventSourceMappingMapOutput) MapIndex(k pulumi.StringInput) EventSourceMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventSourceMapping {
		return vs[0].(map[string]*EventSourceMapping)[vs[1].(string)]
	}).(EventSourceMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingInput)(nil)).Elem(), &EventSourceMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingArrayInput)(nil)).Elem(), EventSourceMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingMapInput)(nil)).Elem(), EventSourceMappingMap{})
	pulumi.RegisterOutputType(EventSourceMappingOutput{})
	pulumi.RegisterOutputType(EventSourceMappingArrayOutput{})
	pulumi.RegisterOutputType(EventSourceMappingMapOutput{})
}
