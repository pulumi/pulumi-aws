// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Invocation struct {
	pulumi.CustomResourceState

	FunctionName pulumi.StringOutput    `pulumi:"functionName"`
	Input        pulumi.StringOutput    `pulumi:"input"`
	Qualifier    pulumi.StringPtrOutput `pulumi:"qualifier"`
	Result       pulumi.StringOutput    `pulumi:"result"`
	Triggers     pulumi.StringMapOutput `pulumi:"triggers"`
}

// NewInvocation registers a new resource with the given unique name, arguments, and options.
func NewInvocation(ctx *pulumi.Context,
	name string, args *InvocationArgs, opts ...pulumi.ResourceOption) (*Invocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	if args.Input == nil {
		return nil, errors.New("invalid value for required argument 'Input'")
	}
	var resource Invocation
	err := ctx.RegisterResource("aws:lambda/invocation:Invocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInvocation gets an existing Invocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInvocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InvocationState, opts ...pulumi.ResourceOption) (*Invocation, error) {
	var resource Invocation
	err := ctx.ReadResource("aws:lambda/invocation:Invocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Invocation resources.
type invocationState struct {
	FunctionName *string           `pulumi:"functionName"`
	Input        *string           `pulumi:"input"`
	Qualifier    *string           `pulumi:"qualifier"`
	Result       *string           `pulumi:"result"`
	Triggers     map[string]string `pulumi:"triggers"`
}

type InvocationState struct {
	FunctionName pulumi.StringPtrInput
	Input        pulumi.StringPtrInput
	Qualifier    pulumi.StringPtrInput
	Result       pulumi.StringPtrInput
	Triggers     pulumi.StringMapInput
}

func (InvocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationState)(nil)).Elem()
}

type invocationArgs struct {
	FunctionName string            `pulumi:"functionName"`
	Input        string            `pulumi:"input"`
	Qualifier    *string           `pulumi:"qualifier"`
	Triggers     map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a Invocation resource.
type InvocationArgs struct {
	FunctionName pulumi.StringInput
	Input        pulumi.StringInput
	Qualifier    pulumi.StringPtrInput
	Triggers     pulumi.StringMapInput
}

func (InvocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationArgs)(nil)).Elem()
}

type InvocationInput interface {
	pulumi.Input

	ToInvocationOutput() InvocationOutput
	ToInvocationOutputWithContext(ctx context.Context) InvocationOutput
}

func (*Invocation) ElementType() reflect.Type {
	return reflect.TypeOf((**Invocation)(nil)).Elem()
}

func (i *Invocation) ToInvocationOutput() InvocationOutput {
	return i.ToInvocationOutputWithContext(context.Background())
}

func (i *Invocation) ToInvocationOutputWithContext(ctx context.Context) InvocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationOutput)
}

// InvocationArrayInput is an input type that accepts InvocationArray and InvocationArrayOutput values.
// You can construct a concrete instance of `InvocationArrayInput` via:
//
//	InvocationArray{ InvocationArgs{...} }
type InvocationArrayInput interface {
	pulumi.Input

	ToInvocationArrayOutput() InvocationArrayOutput
	ToInvocationArrayOutputWithContext(context.Context) InvocationArrayOutput
}

type InvocationArray []InvocationInput

func (InvocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Invocation)(nil)).Elem()
}

func (i InvocationArray) ToInvocationArrayOutput() InvocationArrayOutput {
	return i.ToInvocationArrayOutputWithContext(context.Background())
}

func (i InvocationArray) ToInvocationArrayOutputWithContext(ctx context.Context) InvocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationArrayOutput)
}

// InvocationMapInput is an input type that accepts InvocationMap and InvocationMapOutput values.
// You can construct a concrete instance of `InvocationMapInput` via:
//
//	InvocationMap{ "key": InvocationArgs{...} }
type InvocationMapInput interface {
	pulumi.Input

	ToInvocationMapOutput() InvocationMapOutput
	ToInvocationMapOutputWithContext(context.Context) InvocationMapOutput
}

type InvocationMap map[string]InvocationInput

func (InvocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Invocation)(nil)).Elem()
}

func (i InvocationMap) ToInvocationMapOutput() InvocationMapOutput {
	return i.ToInvocationMapOutputWithContext(context.Background())
}

func (i InvocationMap) ToInvocationMapOutputWithContext(ctx context.Context) InvocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationMapOutput)
}

type InvocationOutput struct{ *pulumi.OutputState }

func (InvocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Invocation)(nil)).Elem()
}

func (o InvocationOutput) ToInvocationOutput() InvocationOutput {
	return o
}

func (o InvocationOutput) ToInvocationOutputWithContext(ctx context.Context) InvocationOutput {
	return o
}

func (o InvocationOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

func (o InvocationOutput) Input() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.Input }).(pulumi.StringOutput)
}

func (o InvocationOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringPtrOutput { return v.Qualifier }).(pulumi.StringPtrOutput)
}

func (o InvocationOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.Result }).(pulumi.StringOutput)
}

func (o InvocationOutput) Triggers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringMapOutput { return v.Triggers }).(pulumi.StringMapOutput)
}

type InvocationArrayOutput struct{ *pulumi.OutputState }

func (InvocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Invocation)(nil)).Elem()
}

func (o InvocationArrayOutput) ToInvocationArrayOutput() InvocationArrayOutput {
	return o
}

func (o InvocationArrayOutput) ToInvocationArrayOutputWithContext(ctx context.Context) InvocationArrayOutput {
	return o
}

func (o InvocationArrayOutput) Index(i pulumi.IntInput) InvocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Invocation {
		return vs[0].([]*Invocation)[vs[1].(int)]
	}).(InvocationOutput)
}

type InvocationMapOutput struct{ *pulumi.OutputState }

func (InvocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Invocation)(nil)).Elem()
}

func (o InvocationMapOutput) ToInvocationMapOutput() InvocationMapOutput {
	return o
}

func (o InvocationMapOutput) ToInvocationMapOutputWithContext(ctx context.Context) InvocationMapOutput {
	return o
}

func (o InvocationMapOutput) MapIndex(k pulumi.StringInput) InvocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Invocation {
		return vs[0].(map[string]*Invocation)[vs[1].(string)]
	}).(InvocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationInput)(nil)).Elem(), &Invocation{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationArrayInput)(nil)).Elem(), InvocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationMapInput)(nil)).Elem(), InvocationMap{})
	pulumi.RegisterOutputType(InvocationOutput{})
	pulumi.RegisterOutputType(InvocationArrayOutput{})
	pulumi.RegisterOutputType(InvocationMapOutput{})
}
