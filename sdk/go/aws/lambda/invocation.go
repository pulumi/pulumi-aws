// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this resource to invoke a lambda function. The lambda function is invoked with the [RequestResponse](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) invocation type.
//
// > **NOTE:** By default this resource _only_ invokes the function when the arguments call for a create or replace. In other words, after an initial invocation on _apply_, if the arguments do not change, a subsequent _apply_ does not invoke the function again. To dynamically invoke the function, see the `triggers` example below. To always invoke a function on each _apply_, see the `lambda.Invocation` data source. To invoke the lambda function when the Pulumi resource is updated and deleted, see the CRUD Lifecycle Scope example below.
//
// > **NOTE:** If you get a `KMSAccessDeniedException: Lambda was unable to decrypt the environment variables because KMS access was denied` error when invoking an `lambda.Function` with environment variables, the IAM role associated with the function may have been deleted and recreated _after_ the function was created. You can fix the problem two ways: 1) updating the function's role to another role and then updating it back again to the recreated role, or 2) by using Pulumi to `taint` the function and `apply` your configuration again to recreate the function. (When you create a function, Lambda grants permissions on the KMS key to the function's IAM role. If the IAM role is recreated, the grant is no longer valid. Changing the function's role or recreating the function causes Lambda to update the grant.)
//
// ## Example Usage
// ### Dynamic Invocation Example Using Triggers
//
// ```go
// package main
//
// import (
//
//	"crypto/sha1"
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func sha1Hash(input string) string {
//		hash := sha1.Sum([]byte(input))
//		return hex.EncodeToString(hash[:])
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal([]interface{}{
//				aws_lambda_function.Example.Environment,
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"key1": "value1",
//				"key2": "value2",
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_, err = lambda.NewInvocation(ctx, "example", &lambda.InvocationArgs{
//				FunctionName: pulumi.Any(aws_lambda_function.Lambda_function_test.Function_name),
//				Triggers: pulumi.StringMap{
//					"redeployment": sha1Hash(json0),
//				},
//				Input: pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### CRUD Lifecycle Scope
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"key1": "value1",
//				"key2": "value2",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = lambda.NewInvocation(ctx, "example", &lambda.InvocationArgs{
//				FunctionName:   pulumi.Any(aws_lambda_function.Lambda_function_test.Function_name),
//				Input:          pulumi.String(json0),
//				LifecycleScope: pulumi.String("CRUD"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// > **NOTE:** `lifecycleScope = "CRUD"` will inject a key `tf` in the input event to pass lifecycle information! This allows the lambda function to handle different lifecycle transitions uniquely.  If you need to use a key `tf` in your own input JSON, the default key name can be overridden with the `pulumiKey` argument.
//
// The key `tf` gets added with subkeys:
//
// * `action` - Action Pulumi performs on the resource. Values are `create`, `update`, or `delete`.
// * `prevInput` - Input JSON payload from the previous invocation. This can be used to handle update and delete events.
//
// When the resource from the example above is created, the Lambda will get following JSON payload:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// If the input value of `key1` changes to "valueB", then the lambda will be invoked again with the following JSON payload:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// When the invocation resource is removed, the final invocation will have the following JSON payload:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
type Invocation struct {
	pulumi.CustomResourceState

	// Name of the lambda function.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// JSON payload to the lambda function.
	//
	// The following arguments are optional:
	Input pulumi.StringOutput `pulumi:"input"`
	// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
	LifecycleScope pulumi.StringPtrOutput `pulumi:"lifecycleScope"`
	// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
	Qualifier pulumi.StringPtrOutput `pulumi:"qualifier"`
	// String result of the lambda function invocation.
	Result       pulumi.StringOutput    `pulumi:"result"`
	TerraformKey pulumi.StringPtrOutput `pulumi:"terraformKey"`
	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	Triggers pulumi.StringMapOutput `pulumi:"triggers"`
}

// NewInvocation registers a new resource with the given unique name, arguments, and options.
func NewInvocation(ctx *pulumi.Context,
	name string, args *InvocationArgs, opts ...pulumi.ResourceOption) (*Invocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	if args.Input == nil {
		return nil, errors.New("invalid value for required argument 'Input'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Invocation
	err := ctx.RegisterResource("aws:lambda/invocation:Invocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInvocation gets an existing Invocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInvocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InvocationState, opts ...pulumi.ResourceOption) (*Invocation, error) {
	var resource Invocation
	err := ctx.ReadResource("aws:lambda/invocation:Invocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Invocation resources.
type invocationState struct {
	// Name of the lambda function.
	FunctionName *string `pulumi:"functionName"`
	// JSON payload to the lambda function.
	//
	// The following arguments are optional:
	Input *string `pulumi:"input"`
	// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
	LifecycleScope *string `pulumi:"lifecycleScope"`
	// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
	Qualifier *string `pulumi:"qualifier"`
	// String result of the lambda function invocation.
	Result       *string `pulumi:"result"`
	TerraformKey *string `pulumi:"terraformKey"`
	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	Triggers map[string]string `pulumi:"triggers"`
}

type InvocationState struct {
	// Name of the lambda function.
	FunctionName pulumi.StringPtrInput
	// JSON payload to the lambda function.
	//
	// The following arguments are optional:
	Input pulumi.StringPtrInput
	// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
	LifecycleScope pulumi.StringPtrInput
	// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
	Qualifier pulumi.StringPtrInput
	// String result of the lambda function invocation.
	Result       pulumi.StringPtrInput
	TerraformKey pulumi.StringPtrInput
	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	Triggers pulumi.StringMapInput
}

func (InvocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationState)(nil)).Elem()
}

type invocationArgs struct {
	// Name of the lambda function.
	FunctionName string `pulumi:"functionName"`
	// JSON payload to the lambda function.
	//
	// The following arguments are optional:
	Input string `pulumi:"input"`
	// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
	LifecycleScope *string `pulumi:"lifecycleScope"`
	// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
	Qualifier    *string `pulumi:"qualifier"`
	TerraformKey *string `pulumi:"terraformKey"`
	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a Invocation resource.
type InvocationArgs struct {
	// Name of the lambda function.
	FunctionName pulumi.StringInput
	// JSON payload to the lambda function.
	//
	// The following arguments are optional:
	Input pulumi.StringInput
	// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
	LifecycleScope pulumi.StringPtrInput
	// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
	Qualifier    pulumi.StringPtrInput
	TerraformKey pulumi.StringPtrInput
	// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
	Triggers pulumi.StringMapInput
}

func (InvocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationArgs)(nil)).Elem()
}

type InvocationInput interface {
	pulumi.Input

	ToInvocationOutput() InvocationOutput
	ToInvocationOutputWithContext(ctx context.Context) InvocationOutput
}

func (*Invocation) ElementType() reflect.Type {
	return reflect.TypeOf((**Invocation)(nil)).Elem()
}

func (i *Invocation) ToInvocationOutput() InvocationOutput {
	return i.ToInvocationOutputWithContext(context.Background())
}

func (i *Invocation) ToInvocationOutputWithContext(ctx context.Context) InvocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationOutput)
}

func (i *Invocation) ToOutput(ctx context.Context) pulumix.Output[*Invocation] {
	return pulumix.Output[*Invocation]{
		OutputState: i.ToInvocationOutputWithContext(ctx).OutputState,
	}
}

// InvocationArrayInput is an input type that accepts InvocationArray and InvocationArrayOutput values.
// You can construct a concrete instance of `InvocationArrayInput` via:
//
//	InvocationArray{ InvocationArgs{...} }
type InvocationArrayInput interface {
	pulumi.Input

	ToInvocationArrayOutput() InvocationArrayOutput
	ToInvocationArrayOutputWithContext(context.Context) InvocationArrayOutput
}

type InvocationArray []InvocationInput

func (InvocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Invocation)(nil)).Elem()
}

func (i InvocationArray) ToInvocationArrayOutput() InvocationArrayOutput {
	return i.ToInvocationArrayOutputWithContext(context.Background())
}

func (i InvocationArray) ToInvocationArrayOutputWithContext(ctx context.Context) InvocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationArrayOutput)
}

func (i InvocationArray) ToOutput(ctx context.Context) pulumix.Output[[]*Invocation] {
	return pulumix.Output[[]*Invocation]{
		OutputState: i.ToInvocationArrayOutputWithContext(ctx).OutputState,
	}
}

// InvocationMapInput is an input type that accepts InvocationMap and InvocationMapOutput values.
// You can construct a concrete instance of `InvocationMapInput` via:
//
//	InvocationMap{ "key": InvocationArgs{...} }
type InvocationMapInput interface {
	pulumi.Input

	ToInvocationMapOutput() InvocationMapOutput
	ToInvocationMapOutputWithContext(context.Context) InvocationMapOutput
}

type InvocationMap map[string]InvocationInput

func (InvocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Invocation)(nil)).Elem()
}

func (i InvocationMap) ToInvocationMapOutput() InvocationMapOutput {
	return i.ToInvocationMapOutputWithContext(context.Background())
}

func (i InvocationMap) ToInvocationMapOutputWithContext(ctx context.Context) InvocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationMapOutput)
}

func (i InvocationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Invocation] {
	return pulumix.Output[map[string]*Invocation]{
		OutputState: i.ToInvocationMapOutputWithContext(ctx).OutputState,
	}
}

type InvocationOutput struct{ *pulumi.OutputState }

func (InvocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Invocation)(nil)).Elem()
}

func (o InvocationOutput) ToInvocationOutput() InvocationOutput {
	return o
}

func (o InvocationOutput) ToInvocationOutputWithContext(ctx context.Context) InvocationOutput {
	return o
}

func (o InvocationOutput) ToOutput(ctx context.Context) pulumix.Output[*Invocation] {
	return pulumix.Output[*Invocation]{
		OutputState: o.OutputState,
	}
}

// Name of the lambda function.
func (o InvocationOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// JSON payload to the lambda function.
//
// The following arguments are optional:
func (o InvocationOutput) Input() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.Input }).(pulumi.StringOutput)
}

// Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
func (o InvocationOutput) LifecycleScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringPtrOutput { return v.LifecycleScope }).(pulumi.StringPtrOutput)
}

// Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
func (o InvocationOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringPtrOutput { return v.Qualifier }).(pulumi.StringPtrOutput)
}

// String result of the lambda function invocation.
func (o InvocationOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.Result }).(pulumi.StringOutput)
}

func (o InvocationOutput) TerraformKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringPtrOutput { return v.TerraformKey }).(pulumi.StringPtrOutput)
}

// Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
func (o InvocationOutput) Triggers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringMapOutput { return v.Triggers }).(pulumi.StringMapOutput)
}

type InvocationArrayOutput struct{ *pulumi.OutputState }

func (InvocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Invocation)(nil)).Elem()
}

func (o InvocationArrayOutput) ToInvocationArrayOutput() InvocationArrayOutput {
	return o
}

func (o InvocationArrayOutput) ToInvocationArrayOutputWithContext(ctx context.Context) InvocationArrayOutput {
	return o
}

func (o InvocationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Invocation] {
	return pulumix.Output[[]*Invocation]{
		OutputState: o.OutputState,
	}
}

func (o InvocationArrayOutput) Index(i pulumi.IntInput) InvocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Invocation {
		return vs[0].([]*Invocation)[vs[1].(int)]
	}).(InvocationOutput)
}

type InvocationMapOutput struct{ *pulumi.OutputState }

func (InvocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Invocation)(nil)).Elem()
}

func (o InvocationMapOutput) ToInvocationMapOutput() InvocationMapOutput {
	return o
}

func (o InvocationMapOutput) ToInvocationMapOutputWithContext(ctx context.Context) InvocationMapOutput {
	return o
}

func (o InvocationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Invocation] {
	return pulumix.Output[map[string]*Invocation]{
		OutputState: o.OutputState,
	}
}

func (o InvocationMapOutput) MapIndex(k pulumi.StringInput) InvocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Invocation {
		return vs[0].(map[string]*Invocation)[vs[1].(string)]
	}).(InvocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationInput)(nil)).Elem(), &Invocation{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationArrayInput)(nil)).Elem(), InvocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationMapInput)(nil)).Elem(), InvocationMap{})
	pulumi.RegisterOutputType(InvocationOutput{})
	pulumi.RegisterOutputType(InvocationArrayOutput{})
	pulumi.RegisterOutputType(InvocationMapOutput{})
}
