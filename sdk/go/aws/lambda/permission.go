// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AWS Lambda permission. Use this resource to grant external sources (e.g., EventBridge Rules, SNS, or S3) permission to invoke Lambda functions.
//
// ## Example Usage
//
// ### Basic Usage with EventBridge
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": "sts:AssumeRole",
//						"Effect": "Allow",
//						"Sid":    "",
//						"Principal": map[string]interface{}{
//							"Service": "lambda.amazonaws.com",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			iamForLambda, err := iam.NewRole(ctx, "iam_for_lambda", &iam.RoleArgs{
//				Name:             pulumi.String("iam_for_lambda"),
//				AssumeRolePolicy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			testLambda, err := lambda.NewFunction(ctx, "test_lambda", &lambda.FunctionArgs{
//				Code:    pulumi.NewFileArchive("lambdatest.zip"),
//				Name:    pulumi.String("lambda_function_name"),
//				Role:    iamForLambda.Arn,
//				Handler: pulumi.String("exports.handler"),
//				Runtime: pulumi.String(lambda.RuntimeNodeJS20dX),
//			})
//			if err != nil {
//				return err
//			}
//			testAlias, err := lambda.NewAlias(ctx, "test_alias", &lambda.AliasArgs{
//				Name:            pulumi.String("testalias"),
//				Description:     pulumi.String("a sample description"),
//				FunctionName:    testLambda.Name,
//				FunctionVersion: pulumi.String("$LATEST"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lambda.NewPermission(ctx, "allow_cloudwatch", &lambda.PermissionArgs{
//				StatementId: pulumi.String("AllowExecutionFromCloudWatch"),
//				Action:      pulumi.String("lambda:InvokeFunction"),
//				Function:    testLambda.Name,
//				Principal:   pulumi.String("events.amazonaws.com"),
//				SourceArn:   pulumi.String("arn:aws:events:eu-west-1:111122223333:rule/RunDaily"),
//				Qualifier:   testAlias.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### SNS Integration
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/sns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := sns.NewTopic(ctx, "default", &sns.TopicArgs{
//				Name: pulumi.String("call-lambda-maybe"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": "sts:AssumeRole",
//						"Effect": "Allow",
//						"Sid":    "",
//						"Principal": map[string]interface{}{
//							"Service": "lambda.amazonaws.com",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			defaultRole, err := iam.NewRole(ctx, "default", &iam.RoleArgs{
//				Name:             pulumi.String("iam_for_lambda_with_sns"),
//				AssumeRolePolicy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_func, err := lambda.NewFunction(ctx, "func", &lambda.FunctionArgs{
//				Code:    pulumi.NewFileArchive("lambdatest.zip"),
//				Name:    pulumi.String("lambda_called_from_sns"),
//				Role:    defaultRole.Arn,
//				Handler: pulumi.String("exports.handler"),
//				Runtime: pulumi.String(lambda.RuntimePython3d12),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lambda.NewPermission(ctx, "with_sns", &lambda.PermissionArgs{
//				StatementId: pulumi.String("AllowExecutionFromSNS"),
//				Action:      pulumi.String("lambda:InvokeFunction"),
//				Function:    _func.Name,
//				Principal:   pulumi.String("sns.amazonaws.com"),
//				SourceArn:   _default.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sns.NewTopicSubscription(ctx, "lambda", &sns.TopicSubscriptionArgs{
//				Topic:    _default.Arn,
//				Protocol: pulumi.String("lambda"),
//				Endpoint: _func.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### API Gateway REST API Integration
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/apigateway"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myDemoAPI, err := apigateway.NewRestApi(ctx, "MyDemoAPI", &apigateway.RestApiArgs{
//				Name:        pulumi.String("MyDemoAPI"),
//				Description: pulumi.String("This is my API for demonstration purposes"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lambda.NewPermission(ctx, "lambda_permission", &lambda.PermissionArgs{
//				StatementId: pulumi.String("AllowMyDemoAPIInvoke"),
//				Action:      pulumi.String("lambda:InvokeFunction"),
//				Function:    pulumi.Any("MyDemoFunction"),
//				Principal:   pulumi.String("apigateway.amazonaws.com"),
//				SourceArn: myDemoAPI.ExecutionArn.ApplyT(func(executionArn string) (string, error) {
//					return fmt.Sprintf("%v/*", executionArn), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### CloudWatch Log Group Integration
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := cloudwatch.NewLogGroup(ctx, "default", &cloudwatch.LogGroupArgs{
//				Name: pulumi.String("/default"),
//			})
//			if err != nil {
//				return err
//			}
//			assumeRole, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
//				Statements: []iam.GetPolicyDocumentStatement{
//					{
//						Effect: pulumi.StringRef("Allow"),
//						Principals: []iam.GetPolicyDocumentStatementPrincipal{
//							{
//								Type: "Service",
//								Identifiers: []string{
//									"lambda.amazonaws.com",
//								},
//							},
//						},
//						Actions: []string{
//							"sts:AssumeRole",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultRole, err := iam.NewRole(ctx, "default", &iam.RoleArgs{
//				Name:             pulumi.String("iam_for_lambda_called_from_cloudwatch_logs"),
//				AssumeRolePolicy: pulumi.String(assumeRole.Json),
//			})
//			if err != nil {
//				return err
//			}
//			loggingFunction, err := lambda.NewFunction(ctx, "logging", &lambda.FunctionArgs{
//				Code:    pulumi.NewFileArchive("lamba_logging.zip"),
//				Name:    pulumi.String("lambda_called_from_cloudwatch_logs"),
//				Handler: pulumi.String("exports.handler"),
//				Role:    defaultRole.Arn,
//				Runtime: pulumi.String(lambda.RuntimePython3d12),
//			})
//			if err != nil {
//				return err
//			}
//			logging, err := lambda.NewPermission(ctx, "logging", &lambda.PermissionArgs{
//				Action:    pulumi.String("lambda:InvokeFunction"),
//				Function:  loggingFunction.Name,
//				Principal: pulumi.String("logs.eu-west-1.amazonaws.com"),
//				SourceArn: _default.Arn.ApplyT(func(arn string) (string, error) {
//					return fmt.Sprintf("%v:*", arn), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudwatch.NewLogSubscriptionFilter(ctx, "logging", &cloudwatch.LogSubscriptionFilterArgs{
//				DestinationArn: loggingFunction.Arn,
//				FilterPattern:  pulumi.String(""),
//				LogGroup:       _default.Name,
//				Name:           pulumi.String("logging_default"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				logging,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Cross-Account Function URL Access
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lambda.NewFunctionUrl(ctx, "url", &lambda.FunctionUrlArgs{
//				FunctionName:      pulumi.Any(example.FunctionName),
//				AuthorizationType: pulumi.String("AWS_IAM"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lambda.NewPermission(ctx, "url", &lambda.PermissionArgs{
//				Action:              pulumi.String("lambda:InvokeFunctionUrl"),
//				Function:            pulumi.Any(example.FunctionName),
//				Principal:           pulumi.String("arn:aws:iam::444455556666:role/example"),
//				SourceAccount:       pulumi.String("444455556666"),
//				FunctionUrlAuthType: pulumi.String("AWS_IAM"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Permission struct {
	pulumi.CustomResourceState

	// Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
	Action pulumi.StringOutput `pulumi:"action"`
	// Event Source Token for Alexa Skills
	EventSourceToken pulumi.StringPtrOutput `pulumi:"eventSourceToken"`
	// Name of the Lambda function
	Function pulumi.StringOutput `pulumi:"function"`
	// Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
	FunctionUrlAuthType pulumi.StringPtrOutput `pulumi:"functionUrlAuthType"`
	// AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
	//
	// The following arguments are optional:
	Principal pulumi.StringOutput `pulumi:"principal"`
	// AWS Organizations ID to grant permission to all accounts under this organization
	PrincipalOrgId pulumi.StringPtrOutput `pulumi:"principalOrgId"`
	// Lambda function version or alias name
	Qualifier pulumi.StringPtrOutput `pulumi:"qualifier"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
	Region pulumi.StringOutput `pulumi:"region"`
	// AWS account ID of the source owner for cross-account access, S3, or SES
	SourceAccount pulumi.StringPtrOutput `pulumi:"sourceAccount"`
	// ARN of the source resource granting permission to invoke the Lambda function
	SourceArn pulumi.StringPtrOutput `pulumi:"sourceArn"`
	// Statement identifier. Generated by Pulumi if not provided
	StatementId pulumi.StringOutput `pulumi:"statementId"`
	// Statement identifier prefix. Conflicts with `statementId`
	StatementIdPrefix pulumi.StringOutput `pulumi:"statementIdPrefix"`
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOption) (*Permission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Function == nil {
		return nil, errors.New("invalid value for required argument 'Function'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Permission
	err := ctx.RegisterResource("aws:lambda/permission:Permission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionState, opts ...pulumi.ResourceOption) (*Permission, error) {
	var resource Permission
	err := ctx.ReadResource("aws:lambda/permission:Permission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permission resources.
type permissionState struct {
	// Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
	Action *string `pulumi:"action"`
	// Event Source Token for Alexa Skills
	EventSourceToken *string `pulumi:"eventSourceToken"`
	// Name of the Lambda function
	Function interface{} `pulumi:"function"`
	// Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
	FunctionUrlAuthType *string `pulumi:"functionUrlAuthType"`
	// AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
	//
	// The following arguments are optional:
	Principal *string `pulumi:"principal"`
	// AWS Organizations ID to grant permission to all accounts under this organization
	PrincipalOrgId *string `pulumi:"principalOrgId"`
	// Lambda function version or alias name
	Qualifier *string `pulumi:"qualifier"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
	Region *string `pulumi:"region"`
	// AWS account ID of the source owner for cross-account access, S3, or SES
	SourceAccount *string `pulumi:"sourceAccount"`
	// ARN of the source resource granting permission to invoke the Lambda function
	SourceArn *string `pulumi:"sourceArn"`
	// Statement identifier. Generated by Pulumi if not provided
	StatementId *string `pulumi:"statementId"`
	// Statement identifier prefix. Conflicts with `statementId`
	StatementIdPrefix *string `pulumi:"statementIdPrefix"`
}

type PermissionState struct {
	// Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
	Action pulumi.StringPtrInput
	// Event Source Token for Alexa Skills
	EventSourceToken pulumi.StringPtrInput
	// Name of the Lambda function
	Function pulumi.Input
	// Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
	FunctionUrlAuthType pulumi.StringPtrInput
	// AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
	//
	// The following arguments are optional:
	Principal pulumi.StringPtrInput
	// AWS Organizations ID to grant permission to all accounts under this organization
	PrincipalOrgId pulumi.StringPtrInput
	// Lambda function version or alias name
	Qualifier pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
	Region pulumi.StringPtrInput
	// AWS account ID of the source owner for cross-account access, S3, or SES
	SourceAccount pulumi.StringPtrInput
	// ARN of the source resource granting permission to invoke the Lambda function
	SourceArn pulumi.StringPtrInput
	// Statement identifier. Generated by Pulumi if not provided
	StatementId pulumi.StringPtrInput
	// Statement identifier prefix. Conflicts with `statementId`
	StatementIdPrefix pulumi.StringPtrInput
}

func (PermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionState)(nil)).Elem()
}

type permissionArgs struct {
	// Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
	Action string `pulumi:"action"`
	// Event Source Token for Alexa Skills
	EventSourceToken *string `pulumi:"eventSourceToken"`
	// Name of the Lambda function
	Function interface{} `pulumi:"function"`
	// Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
	FunctionUrlAuthType *string `pulumi:"functionUrlAuthType"`
	// AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
	//
	// The following arguments are optional:
	Principal string `pulumi:"principal"`
	// AWS Organizations ID to grant permission to all accounts under this organization
	PrincipalOrgId *string `pulumi:"principalOrgId"`
	// Lambda function version or alias name
	Qualifier *string `pulumi:"qualifier"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
	Region *string `pulumi:"region"`
	// AWS account ID of the source owner for cross-account access, S3, or SES
	SourceAccount *string `pulumi:"sourceAccount"`
	// ARN of the source resource granting permission to invoke the Lambda function
	SourceArn *string `pulumi:"sourceArn"`
	// Statement identifier. Generated by Pulumi if not provided
	StatementId *string `pulumi:"statementId"`
	// Statement identifier prefix. Conflicts with `statementId`
	StatementIdPrefix *string `pulumi:"statementIdPrefix"`
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
	Action pulumi.StringInput
	// Event Source Token for Alexa Skills
	EventSourceToken pulumi.StringPtrInput
	// Name of the Lambda function
	Function pulumi.Input
	// Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
	FunctionUrlAuthType pulumi.StringPtrInput
	// AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
	//
	// The following arguments are optional:
	Principal pulumi.StringInput
	// AWS Organizations ID to grant permission to all accounts under this organization
	PrincipalOrgId pulumi.StringPtrInput
	// Lambda function version or alias name
	Qualifier pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
	Region pulumi.StringPtrInput
	// AWS account ID of the source owner for cross-account access, S3, or SES
	SourceAccount pulumi.StringPtrInput
	// ARN of the source resource granting permission to invoke the Lambda function
	SourceArn pulumi.StringPtrInput
	// Statement identifier. Generated by Pulumi if not provided
	StatementId pulumi.StringPtrInput
	// Statement identifier prefix. Conflicts with `statementId`
	StatementIdPrefix pulumi.StringPtrInput
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionArgs)(nil)).Elem()
}

type PermissionInput interface {
	pulumi.Input

	ToPermissionOutput() PermissionOutput
	ToPermissionOutputWithContext(ctx context.Context) PermissionOutput
}

func (*Permission) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (i *Permission) ToPermissionOutput() PermissionOutput {
	return i.ToPermissionOutputWithContext(context.Background())
}

func (i *Permission) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionOutput)
}

// PermissionArrayInput is an input type that accepts PermissionArray and PermissionArrayOutput values.
// You can construct a concrete instance of `PermissionArrayInput` via:
//
//	PermissionArray{ PermissionArgs{...} }
type PermissionArrayInput interface {
	pulumi.Input

	ToPermissionArrayOutput() PermissionArrayOutput
	ToPermissionArrayOutputWithContext(context.Context) PermissionArrayOutput
}

type PermissionArray []PermissionInput

func (PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permission)(nil)).Elem()
}

func (i PermissionArray) ToPermissionArrayOutput() PermissionArrayOutput {
	return i.ToPermissionArrayOutputWithContext(context.Background())
}

func (i PermissionArray) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionArrayOutput)
}

// PermissionMapInput is an input type that accepts PermissionMap and PermissionMapOutput values.
// You can construct a concrete instance of `PermissionMapInput` via:
//
//	PermissionMap{ "key": PermissionArgs{...} }
type PermissionMapInput interface {
	pulumi.Input

	ToPermissionMapOutput() PermissionMapOutput
	ToPermissionMapOutputWithContext(context.Context) PermissionMapOutput
}

type PermissionMap map[string]PermissionInput

func (PermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permission)(nil)).Elem()
}

func (i PermissionMap) ToPermissionMapOutput() PermissionMapOutput {
	return i.ToPermissionMapOutputWithContext(context.Background())
}

func (i PermissionMap) ToPermissionMapOutputWithContext(ctx context.Context) PermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionMapOutput)
}

type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

// Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
func (o PermissionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Event Source Token for Alexa Skills
func (o PermissionOutput) EventSourceToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringPtrOutput { return v.EventSourceToken }).(pulumi.StringPtrOutput)
}

// Name of the Lambda function
func (o PermissionOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Function }).(pulumi.StringOutput)
}

// Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
func (o PermissionOutput) FunctionUrlAuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringPtrOutput { return v.FunctionUrlAuthType }).(pulumi.StringPtrOutput)
}

// AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
//
// The following arguments are optional:
func (o PermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

// AWS Organizations ID to grant permission to all accounts under this organization
func (o PermissionOutput) PrincipalOrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringPtrOutput { return v.PrincipalOrgId }).(pulumi.StringPtrOutput)
}

// Lambda function version or alias name
func (o PermissionOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringPtrOutput { return v.Qualifier }).(pulumi.StringPtrOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
func (o PermissionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// AWS account ID of the source owner for cross-account access, S3, or SES
func (o PermissionOutput) SourceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringPtrOutput { return v.SourceAccount }).(pulumi.StringPtrOutput)
}

// ARN of the source resource granting permission to invoke the Lambda function
func (o PermissionOutput) SourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringPtrOutput { return v.SourceArn }).(pulumi.StringPtrOutput)
}

// Statement identifier. Generated by Pulumi if not provided
func (o PermissionOutput) StatementId() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.StatementId }).(pulumi.StringOutput)
}

// Statement identifier prefix. Conflicts with `statementId`
func (o PermissionOutput) StatementIdPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.StatementIdPrefix }).(pulumi.StringOutput)
}

type PermissionArrayOutput struct{ *pulumi.OutputState }

func (PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permission)(nil)).Elem()
}

func (o PermissionArrayOutput) ToPermissionArrayOutput() PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) Index(i pulumi.IntInput) PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Permission {
		return vs[0].([]*Permission)[vs[1].(int)]
	}).(PermissionOutput)
}

type PermissionMapOutput struct{ *pulumi.OutputState }

func (PermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permission)(nil)).Elem()
}

func (o PermissionMapOutput) ToPermissionMapOutput() PermissionMapOutput {
	return o
}

func (o PermissionMapOutput) ToPermissionMapOutputWithContext(ctx context.Context) PermissionMapOutput {
	return o
}

func (o PermissionMapOutput) MapIndex(k pulumi.StringInput) PermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Permission {
		return vs[0].(map[string]*Permission)[vs[1].(string)]
	}).(PermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionInput)(nil)).Elem(), &Permission{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionArrayInput)(nil)).Elem(), PermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionMapInput)(nil)).Elem(), PermissionMap{})
	pulumi.RegisterOutputType(PermissionOutput{})
	pulumi.RegisterOutputType(PermissionArrayOutput{})
	pulumi.RegisterOutputType(PermissionMapOutput{})
}
