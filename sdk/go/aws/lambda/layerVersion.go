// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LayerVersion struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput      `pulumi:"arn"`
	Code                     pulumi.ArchiveOutput     `pulumi:"code"`
	CompatibleArchitectures  pulumi.StringArrayOutput `pulumi:"compatibleArchitectures"`
	CompatibleRuntimes       pulumi.StringArrayOutput `pulumi:"compatibleRuntimes"`
	CreatedDate              pulumi.StringOutput      `pulumi:"createdDate"`
	Description              pulumi.StringPtrOutput   `pulumi:"description"`
	LayerArn                 pulumi.StringOutput      `pulumi:"layerArn"`
	LayerName                pulumi.StringOutput      `pulumi:"layerName"`
	LicenseInfo              pulumi.StringPtrOutput   `pulumi:"licenseInfo"`
	S3Bucket                 pulumi.StringPtrOutput   `pulumi:"s3Bucket"`
	S3Key                    pulumi.StringPtrOutput   `pulumi:"s3Key"`
	S3ObjectVersion          pulumi.StringPtrOutput   `pulumi:"s3ObjectVersion"`
	SigningJobArn            pulumi.StringOutput      `pulumi:"signingJobArn"`
	SigningProfileVersionArn pulumi.StringOutput      `pulumi:"signingProfileVersionArn"`
	SkipDestroy              pulumi.BoolPtrOutput     `pulumi:"skipDestroy"`
	SourceCodeHash           pulumi.StringOutput      `pulumi:"sourceCodeHash"`
	SourceCodeSize           pulumi.IntOutput         `pulumi:"sourceCodeSize"`
	Version                  pulumi.StringOutput      `pulumi:"version"`
}

// NewLayerVersion registers a new resource with the given unique name, arguments, and options.
func NewLayerVersion(ctx *pulumi.Context,
	name string, args *LayerVersionArgs, opts ...pulumi.ResourceOption) (*LayerVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LayerName == nil {
		return nil, errors.New("invalid value for required argument 'LayerName'")
	}
	var resource LayerVersion
	err := ctx.RegisterResource("aws:lambda/layerVersion:LayerVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLayerVersion gets an existing LayerVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLayerVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LayerVersionState, opts ...pulumi.ResourceOption) (*LayerVersion, error) {
	var resource LayerVersion
	err := ctx.ReadResource("aws:lambda/layerVersion:LayerVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LayerVersion resources.
type layerVersionState struct {
	Arn                      *string        `pulumi:"arn"`
	Code                     pulumi.Archive `pulumi:"code"`
	CompatibleArchitectures  []string       `pulumi:"compatibleArchitectures"`
	CompatibleRuntimes       []string       `pulumi:"compatibleRuntimes"`
	CreatedDate              *string        `pulumi:"createdDate"`
	Description              *string        `pulumi:"description"`
	LayerArn                 *string        `pulumi:"layerArn"`
	LayerName                *string        `pulumi:"layerName"`
	LicenseInfo              *string        `pulumi:"licenseInfo"`
	S3Bucket                 *string        `pulumi:"s3Bucket"`
	S3Key                    *string        `pulumi:"s3Key"`
	S3ObjectVersion          *string        `pulumi:"s3ObjectVersion"`
	SigningJobArn            *string        `pulumi:"signingJobArn"`
	SigningProfileVersionArn *string        `pulumi:"signingProfileVersionArn"`
	SkipDestroy              *bool          `pulumi:"skipDestroy"`
	SourceCodeHash           *string        `pulumi:"sourceCodeHash"`
	SourceCodeSize           *int           `pulumi:"sourceCodeSize"`
	Version                  *string        `pulumi:"version"`
}

type LayerVersionState struct {
	Arn                      pulumi.StringPtrInput
	Code                     pulumi.ArchiveInput
	CompatibleArchitectures  pulumi.StringArrayInput
	CompatibleRuntimes       pulumi.StringArrayInput
	CreatedDate              pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	LayerArn                 pulumi.StringPtrInput
	LayerName                pulumi.StringPtrInput
	LicenseInfo              pulumi.StringPtrInput
	S3Bucket                 pulumi.StringPtrInput
	S3Key                    pulumi.StringPtrInput
	S3ObjectVersion          pulumi.StringPtrInput
	SigningJobArn            pulumi.StringPtrInput
	SigningProfileVersionArn pulumi.StringPtrInput
	SkipDestroy              pulumi.BoolPtrInput
	SourceCodeHash           pulumi.StringPtrInput
	SourceCodeSize           pulumi.IntPtrInput
	Version                  pulumi.StringPtrInput
}

func (LayerVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionState)(nil)).Elem()
}

type layerVersionArgs struct {
	Code                    pulumi.Archive `pulumi:"code"`
	CompatibleArchitectures []string       `pulumi:"compatibleArchitectures"`
	CompatibleRuntimes      []string       `pulumi:"compatibleRuntimes"`
	Description             *string        `pulumi:"description"`
	LayerName               string         `pulumi:"layerName"`
	LicenseInfo             *string        `pulumi:"licenseInfo"`
	S3Bucket                *string        `pulumi:"s3Bucket"`
	S3Key                   *string        `pulumi:"s3Key"`
	S3ObjectVersion         *string        `pulumi:"s3ObjectVersion"`
	SkipDestroy             *bool          `pulumi:"skipDestroy"`
	SourceCodeHash          *string        `pulumi:"sourceCodeHash"`
}

// The set of arguments for constructing a LayerVersion resource.
type LayerVersionArgs struct {
	Code                    pulumi.ArchiveInput
	CompatibleArchitectures pulumi.StringArrayInput
	CompatibleRuntimes      pulumi.StringArrayInput
	Description             pulumi.StringPtrInput
	LayerName               pulumi.StringInput
	LicenseInfo             pulumi.StringPtrInput
	S3Bucket                pulumi.StringPtrInput
	S3Key                   pulumi.StringPtrInput
	S3ObjectVersion         pulumi.StringPtrInput
	SkipDestroy             pulumi.BoolPtrInput
	SourceCodeHash          pulumi.StringPtrInput
}

func (LayerVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionArgs)(nil)).Elem()
}

type LayerVersionInput interface {
	pulumi.Input

	ToLayerVersionOutput() LayerVersionOutput
	ToLayerVersionOutputWithContext(ctx context.Context) LayerVersionOutput
}

func (*LayerVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**LayerVersion)(nil)).Elem()
}

func (i *LayerVersion) ToLayerVersionOutput() LayerVersionOutput {
	return i.ToLayerVersionOutputWithContext(context.Background())
}

func (i *LayerVersion) ToLayerVersionOutputWithContext(ctx context.Context) LayerVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionOutput)
}

// LayerVersionArrayInput is an input type that accepts LayerVersionArray and LayerVersionArrayOutput values.
// You can construct a concrete instance of `LayerVersionArrayInput` via:
//
//	LayerVersionArray{ LayerVersionArgs{...} }
type LayerVersionArrayInput interface {
	pulumi.Input

	ToLayerVersionArrayOutput() LayerVersionArrayOutput
	ToLayerVersionArrayOutputWithContext(context.Context) LayerVersionArrayOutput
}

type LayerVersionArray []LayerVersionInput

func (LayerVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LayerVersion)(nil)).Elem()
}

func (i LayerVersionArray) ToLayerVersionArrayOutput() LayerVersionArrayOutput {
	return i.ToLayerVersionArrayOutputWithContext(context.Background())
}

func (i LayerVersionArray) ToLayerVersionArrayOutputWithContext(ctx context.Context) LayerVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionArrayOutput)
}

// LayerVersionMapInput is an input type that accepts LayerVersionMap and LayerVersionMapOutput values.
// You can construct a concrete instance of `LayerVersionMapInput` via:
//
//	LayerVersionMap{ "key": LayerVersionArgs{...} }
type LayerVersionMapInput interface {
	pulumi.Input

	ToLayerVersionMapOutput() LayerVersionMapOutput
	ToLayerVersionMapOutputWithContext(context.Context) LayerVersionMapOutput
}

type LayerVersionMap map[string]LayerVersionInput

func (LayerVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LayerVersion)(nil)).Elem()
}

func (i LayerVersionMap) ToLayerVersionMapOutput() LayerVersionMapOutput {
	return i.ToLayerVersionMapOutputWithContext(context.Background())
}

func (i LayerVersionMap) ToLayerVersionMapOutputWithContext(ctx context.Context) LayerVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionMapOutput)
}

type LayerVersionOutput struct{ *pulumi.OutputState }

func (LayerVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LayerVersion)(nil)).Elem()
}

func (o LayerVersionOutput) ToLayerVersionOutput() LayerVersionOutput {
	return o
}

func (o LayerVersionOutput) ToLayerVersionOutputWithContext(ctx context.Context) LayerVersionOutput {
	return o
}

func (o LayerVersionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LayerVersionOutput) Code() pulumi.ArchiveOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.ArchiveOutput { return v.Code }).(pulumi.ArchiveOutput)
}

func (o LayerVersionOutput) CompatibleArchitectures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringArrayOutput { return v.CompatibleArchitectures }).(pulumi.StringArrayOutput)
}

func (o LayerVersionOutput) CompatibleRuntimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringArrayOutput { return v.CompatibleRuntimes }).(pulumi.StringArrayOutput)
}

func (o LayerVersionOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

func (o LayerVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LayerVersionOutput) LayerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringOutput { return v.LayerArn }).(pulumi.StringOutput)
}

func (o LayerVersionOutput) LayerName() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringOutput { return v.LayerName }).(pulumi.StringOutput)
}

func (o LayerVersionOutput) LicenseInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringPtrOutput { return v.LicenseInfo }).(pulumi.StringPtrOutput)
}

func (o LayerVersionOutput) S3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringPtrOutput { return v.S3Bucket }).(pulumi.StringPtrOutput)
}

func (o LayerVersionOutput) S3Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringPtrOutput { return v.S3Key }).(pulumi.StringPtrOutput)
}

func (o LayerVersionOutput) S3ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringPtrOutput { return v.S3ObjectVersion }).(pulumi.StringPtrOutput)
}

func (o LayerVersionOutput) SigningJobArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringOutput { return v.SigningJobArn }).(pulumi.StringOutput)
}

func (o LayerVersionOutput) SigningProfileVersionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringOutput { return v.SigningProfileVersionArn }).(pulumi.StringOutput)
}

func (o LayerVersionOutput) SkipDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.BoolPtrOutput { return v.SkipDestroy }).(pulumi.BoolPtrOutput)
}

func (o LayerVersionOutput) SourceCodeHash() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringOutput { return v.SourceCodeHash }).(pulumi.StringOutput)
}

func (o LayerVersionOutput) SourceCodeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.IntOutput { return v.SourceCodeSize }).(pulumi.IntOutput)
}

func (o LayerVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersion) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type LayerVersionArrayOutput struct{ *pulumi.OutputState }

func (LayerVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LayerVersion)(nil)).Elem()
}

func (o LayerVersionArrayOutput) ToLayerVersionArrayOutput() LayerVersionArrayOutput {
	return o
}

func (o LayerVersionArrayOutput) ToLayerVersionArrayOutputWithContext(ctx context.Context) LayerVersionArrayOutput {
	return o
}

func (o LayerVersionArrayOutput) Index(i pulumi.IntInput) LayerVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LayerVersion {
		return vs[0].([]*LayerVersion)[vs[1].(int)]
	}).(LayerVersionOutput)
}

type LayerVersionMapOutput struct{ *pulumi.OutputState }

func (LayerVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LayerVersion)(nil)).Elem()
}

func (o LayerVersionMapOutput) ToLayerVersionMapOutput() LayerVersionMapOutput {
	return o
}

func (o LayerVersionMapOutput) ToLayerVersionMapOutputWithContext(ctx context.Context) LayerVersionMapOutput {
	return o
}

func (o LayerVersionMapOutput) MapIndex(k pulumi.StringInput) LayerVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LayerVersion {
		return vs[0].(map[string]*LayerVersion)[vs[1].(string)]
	}).(LayerVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionInput)(nil)).Elem(), &LayerVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionArrayInput)(nil)).Elem(), LayerVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionMapInput)(nil)).Elem(), LayerVersionMap{})
	pulumi.RegisterOutputType(LayerVersionOutput{})
	pulumi.RegisterOutputType(LayerVersionArrayOutput{})
	pulumi.RegisterOutputType(LayerVersionMapOutput{})
}
