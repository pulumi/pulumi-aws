// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FunctionUrl struct {
	pulumi.CustomResourceState

	AuthorizationType pulumi.StringOutput      `pulumi:"authorizationType"`
	Cors              FunctionUrlCorsPtrOutput `pulumi:"cors"`
	FunctionArn       pulumi.StringOutput      `pulumi:"functionArn"`
	FunctionName      pulumi.StringOutput      `pulumi:"functionName"`
	FunctionUrl       pulumi.StringOutput      `pulumi:"functionUrl"`
	Qualifier         pulumi.StringPtrOutput   `pulumi:"qualifier"`
	UrlId             pulumi.StringOutput      `pulumi:"urlId"`
}

// NewFunctionUrl registers a new resource with the given unique name, arguments, and options.
func NewFunctionUrl(ctx *pulumi.Context,
	name string, args *FunctionUrlArgs, opts ...pulumi.ResourceOption) (*FunctionUrl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationType'")
	}
	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	var resource FunctionUrl
	err := ctx.RegisterResource("aws:lambda/functionUrl:FunctionUrl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionUrl gets an existing FunctionUrl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionUrl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionUrlState, opts ...pulumi.ResourceOption) (*FunctionUrl, error) {
	var resource FunctionUrl
	err := ctx.ReadResource("aws:lambda/functionUrl:FunctionUrl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionUrl resources.
type functionUrlState struct {
	AuthorizationType *string          `pulumi:"authorizationType"`
	Cors              *FunctionUrlCors `pulumi:"cors"`
	FunctionArn       *string          `pulumi:"functionArn"`
	FunctionName      *string          `pulumi:"functionName"`
	FunctionUrl       *string          `pulumi:"functionUrl"`
	Qualifier         *string          `pulumi:"qualifier"`
	UrlId             *string          `pulumi:"urlId"`
}

type FunctionUrlState struct {
	AuthorizationType pulumi.StringPtrInput
	Cors              FunctionUrlCorsPtrInput
	FunctionArn       pulumi.StringPtrInput
	FunctionName      pulumi.StringPtrInput
	FunctionUrl       pulumi.StringPtrInput
	Qualifier         pulumi.StringPtrInput
	UrlId             pulumi.StringPtrInput
}

func (FunctionUrlState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionUrlState)(nil)).Elem()
}

type functionUrlArgs struct {
	AuthorizationType string           `pulumi:"authorizationType"`
	Cors              *FunctionUrlCors `pulumi:"cors"`
	FunctionName      string           `pulumi:"functionName"`
	Qualifier         *string          `pulumi:"qualifier"`
}

// The set of arguments for constructing a FunctionUrl resource.
type FunctionUrlArgs struct {
	AuthorizationType pulumi.StringInput
	Cors              FunctionUrlCorsPtrInput
	FunctionName      pulumi.StringInput
	Qualifier         pulumi.StringPtrInput
}

func (FunctionUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionUrlArgs)(nil)).Elem()
}

type FunctionUrlInput interface {
	pulumi.Input

	ToFunctionUrlOutput() FunctionUrlOutput
	ToFunctionUrlOutputWithContext(ctx context.Context) FunctionUrlOutput
}

func (*FunctionUrl) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionUrl)(nil)).Elem()
}

func (i *FunctionUrl) ToFunctionUrlOutput() FunctionUrlOutput {
	return i.ToFunctionUrlOutputWithContext(context.Background())
}

func (i *FunctionUrl) ToFunctionUrlOutputWithContext(ctx context.Context) FunctionUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionUrlOutput)
}

// FunctionUrlArrayInput is an input type that accepts FunctionUrlArray and FunctionUrlArrayOutput values.
// You can construct a concrete instance of `FunctionUrlArrayInput` via:
//
//	FunctionUrlArray{ FunctionUrlArgs{...} }
type FunctionUrlArrayInput interface {
	pulumi.Input

	ToFunctionUrlArrayOutput() FunctionUrlArrayOutput
	ToFunctionUrlArrayOutputWithContext(context.Context) FunctionUrlArrayOutput
}

type FunctionUrlArray []FunctionUrlInput

func (FunctionUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionUrl)(nil)).Elem()
}

func (i FunctionUrlArray) ToFunctionUrlArrayOutput() FunctionUrlArrayOutput {
	return i.ToFunctionUrlArrayOutputWithContext(context.Background())
}

func (i FunctionUrlArray) ToFunctionUrlArrayOutputWithContext(ctx context.Context) FunctionUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionUrlArrayOutput)
}

// FunctionUrlMapInput is an input type that accepts FunctionUrlMap and FunctionUrlMapOutput values.
// You can construct a concrete instance of `FunctionUrlMapInput` via:
//
//	FunctionUrlMap{ "key": FunctionUrlArgs{...} }
type FunctionUrlMapInput interface {
	pulumi.Input

	ToFunctionUrlMapOutput() FunctionUrlMapOutput
	ToFunctionUrlMapOutputWithContext(context.Context) FunctionUrlMapOutput
}

type FunctionUrlMap map[string]FunctionUrlInput

func (FunctionUrlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionUrl)(nil)).Elem()
}

func (i FunctionUrlMap) ToFunctionUrlMapOutput() FunctionUrlMapOutput {
	return i.ToFunctionUrlMapOutputWithContext(context.Background())
}

func (i FunctionUrlMap) ToFunctionUrlMapOutputWithContext(ctx context.Context) FunctionUrlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionUrlMapOutput)
}

type FunctionUrlOutput struct{ *pulumi.OutputState }

func (FunctionUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionUrl)(nil)).Elem()
}

func (o FunctionUrlOutput) ToFunctionUrlOutput() FunctionUrlOutput {
	return o
}

func (o FunctionUrlOutput) ToFunctionUrlOutputWithContext(ctx context.Context) FunctionUrlOutput {
	return o
}

func (o FunctionUrlOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionUrl) pulumi.StringOutput { return v.AuthorizationType }).(pulumi.StringOutput)
}

func (o FunctionUrlOutput) Cors() FunctionUrlCorsPtrOutput {
	return o.ApplyT(func(v *FunctionUrl) FunctionUrlCorsPtrOutput { return v.Cors }).(FunctionUrlCorsPtrOutput)
}

func (o FunctionUrlOutput) FunctionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionUrl) pulumi.StringOutput { return v.FunctionArn }).(pulumi.StringOutput)
}

func (o FunctionUrlOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionUrl) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

func (o FunctionUrlOutput) FunctionUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionUrl) pulumi.StringOutput { return v.FunctionUrl }).(pulumi.StringOutput)
}

func (o FunctionUrlOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionUrl) pulumi.StringPtrOutput { return v.Qualifier }).(pulumi.StringPtrOutput)
}

func (o FunctionUrlOutput) UrlId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionUrl) pulumi.StringOutput { return v.UrlId }).(pulumi.StringOutput)
}

type FunctionUrlArrayOutput struct{ *pulumi.OutputState }

func (FunctionUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionUrl)(nil)).Elem()
}

func (o FunctionUrlArrayOutput) ToFunctionUrlArrayOutput() FunctionUrlArrayOutput {
	return o
}

func (o FunctionUrlArrayOutput) ToFunctionUrlArrayOutputWithContext(ctx context.Context) FunctionUrlArrayOutput {
	return o
}

func (o FunctionUrlArrayOutput) Index(i pulumi.IntInput) FunctionUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FunctionUrl {
		return vs[0].([]*FunctionUrl)[vs[1].(int)]
	}).(FunctionUrlOutput)
}

type FunctionUrlMapOutput struct{ *pulumi.OutputState }

func (FunctionUrlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionUrl)(nil)).Elem()
}

func (o FunctionUrlMapOutput) ToFunctionUrlMapOutput() FunctionUrlMapOutput {
	return o
}

func (o FunctionUrlMapOutput) ToFunctionUrlMapOutputWithContext(ctx context.Context) FunctionUrlMapOutput {
	return o
}

func (o FunctionUrlMapOutput) MapIndex(k pulumi.StringInput) FunctionUrlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FunctionUrl {
		return vs[0].(map[string]*FunctionUrl)[vs[1].(string)]
	}).(FunctionUrlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionUrlInput)(nil)).Elem(), &FunctionUrl{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionUrlArrayInput)(nil)).Elem(), FunctionUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionUrlMapInput)(nil)).Elem(), FunctionUrlMap{})
	pulumi.RegisterOutputType(FunctionUrlOutput{})
	pulumi.RegisterOutputType(FunctionUrlArrayOutput{})
	pulumi.RegisterOutputType(FunctionUrlMapOutput{})
}
