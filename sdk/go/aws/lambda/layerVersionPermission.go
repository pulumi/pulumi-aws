// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LayerVersionPermission struct {
	pulumi.CustomResourceState

	Action         pulumi.StringOutput    `pulumi:"action"`
	LayerName      pulumi.StringOutput    `pulumi:"layerName"`
	OrganizationId pulumi.StringPtrOutput `pulumi:"organizationId"`
	Policy         pulumi.StringOutput    `pulumi:"policy"`
	Principal      pulumi.StringOutput    `pulumi:"principal"`
	RevisionId     pulumi.StringOutput    `pulumi:"revisionId"`
	StatementId    pulumi.StringOutput    `pulumi:"statementId"`
	VersionNumber  pulumi.IntOutput       `pulumi:"versionNumber"`
}

// NewLayerVersionPermission registers a new resource with the given unique name, arguments, and options.
func NewLayerVersionPermission(ctx *pulumi.Context,
	name string, args *LayerVersionPermissionArgs, opts ...pulumi.ResourceOption) (*LayerVersionPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.LayerName == nil {
		return nil, errors.New("invalid value for required argument 'LayerName'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.StatementId == nil {
		return nil, errors.New("invalid value for required argument 'StatementId'")
	}
	if args.VersionNumber == nil {
		return nil, errors.New("invalid value for required argument 'VersionNumber'")
	}
	var resource LayerVersionPermission
	err := ctx.RegisterResource("aws:lambda/layerVersionPermission:LayerVersionPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLayerVersionPermission gets an existing LayerVersionPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLayerVersionPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LayerVersionPermissionState, opts ...pulumi.ResourceOption) (*LayerVersionPermission, error) {
	var resource LayerVersionPermission
	err := ctx.ReadResource("aws:lambda/layerVersionPermission:LayerVersionPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LayerVersionPermission resources.
type layerVersionPermissionState struct {
	Action         *string `pulumi:"action"`
	LayerName      *string `pulumi:"layerName"`
	OrganizationId *string `pulumi:"organizationId"`
	Policy         *string `pulumi:"policy"`
	Principal      *string `pulumi:"principal"`
	RevisionId     *string `pulumi:"revisionId"`
	StatementId    *string `pulumi:"statementId"`
	VersionNumber  *int    `pulumi:"versionNumber"`
}

type LayerVersionPermissionState struct {
	Action         pulumi.StringPtrInput
	LayerName      pulumi.StringPtrInput
	OrganizationId pulumi.StringPtrInput
	Policy         pulumi.StringPtrInput
	Principal      pulumi.StringPtrInput
	RevisionId     pulumi.StringPtrInput
	StatementId    pulumi.StringPtrInput
	VersionNumber  pulumi.IntPtrInput
}

func (LayerVersionPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionPermissionState)(nil)).Elem()
}

type layerVersionPermissionArgs struct {
	Action         string  `pulumi:"action"`
	LayerName      string  `pulumi:"layerName"`
	OrganizationId *string `pulumi:"organizationId"`
	Principal      string  `pulumi:"principal"`
	StatementId    string  `pulumi:"statementId"`
	VersionNumber  int     `pulumi:"versionNumber"`
}

// The set of arguments for constructing a LayerVersionPermission resource.
type LayerVersionPermissionArgs struct {
	Action         pulumi.StringInput
	LayerName      pulumi.StringInput
	OrganizationId pulumi.StringPtrInput
	Principal      pulumi.StringInput
	StatementId    pulumi.StringInput
	VersionNumber  pulumi.IntInput
}

func (LayerVersionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionPermissionArgs)(nil)).Elem()
}

type LayerVersionPermissionInput interface {
	pulumi.Input

	ToLayerVersionPermissionOutput() LayerVersionPermissionOutput
	ToLayerVersionPermissionOutputWithContext(ctx context.Context) LayerVersionPermissionOutput
}

func (*LayerVersionPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**LayerVersionPermission)(nil)).Elem()
}

func (i *LayerVersionPermission) ToLayerVersionPermissionOutput() LayerVersionPermissionOutput {
	return i.ToLayerVersionPermissionOutputWithContext(context.Background())
}

func (i *LayerVersionPermission) ToLayerVersionPermissionOutputWithContext(ctx context.Context) LayerVersionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionPermissionOutput)
}

// LayerVersionPermissionArrayInput is an input type that accepts LayerVersionPermissionArray and LayerVersionPermissionArrayOutput values.
// You can construct a concrete instance of `LayerVersionPermissionArrayInput` via:
//
//	LayerVersionPermissionArray{ LayerVersionPermissionArgs{...} }
type LayerVersionPermissionArrayInput interface {
	pulumi.Input

	ToLayerVersionPermissionArrayOutput() LayerVersionPermissionArrayOutput
	ToLayerVersionPermissionArrayOutputWithContext(context.Context) LayerVersionPermissionArrayOutput
}

type LayerVersionPermissionArray []LayerVersionPermissionInput

func (LayerVersionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LayerVersionPermission)(nil)).Elem()
}

func (i LayerVersionPermissionArray) ToLayerVersionPermissionArrayOutput() LayerVersionPermissionArrayOutput {
	return i.ToLayerVersionPermissionArrayOutputWithContext(context.Background())
}

func (i LayerVersionPermissionArray) ToLayerVersionPermissionArrayOutputWithContext(ctx context.Context) LayerVersionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionPermissionArrayOutput)
}

// LayerVersionPermissionMapInput is an input type that accepts LayerVersionPermissionMap and LayerVersionPermissionMapOutput values.
// You can construct a concrete instance of `LayerVersionPermissionMapInput` via:
//
//	LayerVersionPermissionMap{ "key": LayerVersionPermissionArgs{...} }
type LayerVersionPermissionMapInput interface {
	pulumi.Input

	ToLayerVersionPermissionMapOutput() LayerVersionPermissionMapOutput
	ToLayerVersionPermissionMapOutputWithContext(context.Context) LayerVersionPermissionMapOutput
}

type LayerVersionPermissionMap map[string]LayerVersionPermissionInput

func (LayerVersionPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LayerVersionPermission)(nil)).Elem()
}

func (i LayerVersionPermissionMap) ToLayerVersionPermissionMapOutput() LayerVersionPermissionMapOutput {
	return i.ToLayerVersionPermissionMapOutputWithContext(context.Background())
}

func (i LayerVersionPermissionMap) ToLayerVersionPermissionMapOutputWithContext(ctx context.Context) LayerVersionPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionPermissionMapOutput)
}

type LayerVersionPermissionOutput struct{ *pulumi.OutputState }

func (LayerVersionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LayerVersionPermission)(nil)).Elem()
}

func (o LayerVersionPermissionOutput) ToLayerVersionPermissionOutput() LayerVersionPermissionOutput {
	return o
}

func (o LayerVersionPermissionOutput) ToLayerVersionPermissionOutputWithContext(ctx context.Context) LayerVersionPermissionOutput {
	return o
}

func (o LayerVersionPermissionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o LayerVersionPermissionOutput) LayerName() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.LayerName }).(pulumi.StringOutput)
}

func (o LayerVersionPermissionOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringPtrOutput { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

func (o LayerVersionPermissionOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

func (o LayerVersionPermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

func (o LayerVersionPermissionOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.RevisionId }).(pulumi.StringOutput)
}

func (o LayerVersionPermissionOutput) StatementId() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.StatementId }).(pulumi.StringOutput)
}

func (o LayerVersionPermissionOutput) VersionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.IntOutput { return v.VersionNumber }).(pulumi.IntOutput)
}

type LayerVersionPermissionArrayOutput struct{ *pulumi.OutputState }

func (LayerVersionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LayerVersionPermission)(nil)).Elem()
}

func (o LayerVersionPermissionArrayOutput) ToLayerVersionPermissionArrayOutput() LayerVersionPermissionArrayOutput {
	return o
}

func (o LayerVersionPermissionArrayOutput) ToLayerVersionPermissionArrayOutputWithContext(ctx context.Context) LayerVersionPermissionArrayOutput {
	return o
}

func (o LayerVersionPermissionArrayOutput) Index(i pulumi.IntInput) LayerVersionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LayerVersionPermission {
		return vs[0].([]*LayerVersionPermission)[vs[1].(int)]
	}).(LayerVersionPermissionOutput)
}

type LayerVersionPermissionMapOutput struct{ *pulumi.OutputState }

func (LayerVersionPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LayerVersionPermission)(nil)).Elem()
}

func (o LayerVersionPermissionMapOutput) ToLayerVersionPermissionMapOutput() LayerVersionPermissionMapOutput {
	return o
}

func (o LayerVersionPermissionMapOutput) ToLayerVersionPermissionMapOutputWithContext(ctx context.Context) LayerVersionPermissionMapOutput {
	return o
}

func (o LayerVersionPermissionMapOutput) MapIndex(k pulumi.StringInput) LayerVersionPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LayerVersionPermission {
		return vs[0].(map[string]*LayerVersionPermission)[vs[1].(string)]
	}).(LayerVersionPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionPermissionInput)(nil)).Elem(), &LayerVersionPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionPermissionArrayInput)(nil)).Elem(), LayerVersionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionPermissionMapInput)(nil)).Elem(), LayerVersionPermissionMap{})
	pulumi.RegisterOutputType(LayerVersionPermissionOutput{})
	pulumi.RegisterOutputType(LayerVersionPermissionArrayOutput{})
	pulumi.RegisterOutputType(LayerVersionPermissionMapOutput{})
}
