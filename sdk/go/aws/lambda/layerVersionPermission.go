// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AWS Lambda Layer Version Permission. Use this resource to share Lambda Layers with other AWS accounts, organizations, or make them publicly accessible.
//
// For information about Lambda Layer Permissions and how to use them, see [Using Resource-based Policies for AWS Lambda](https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html#permissions-resource-xaccountlayer).
//
// > **Note:** Setting `skipDestroy` to `true` means that the AWS Provider will not destroy any layer version permission, even when running `pulumi destroy`. Layer version permissions are thus intentional dangling resources that are not managed by Pulumi and may incur extra expense in your AWS account.
//
// ## Example Usage
//
// ### Share Layer with Specific Account
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Lambda layer to share
//			example, err := lambda.NewLayerVersion(ctx, "example", &lambda.LayerVersionArgs{
//				Code:        pulumi.NewFileArchive("layer.zip"),
//				LayerName:   pulumi.String("shared_utilities"),
//				Description: pulumi.String("Common utilities for Lambda functions"),
//				CompatibleRuntimes: pulumi.StringArray{
//					pulumi.String("nodejs20.x"),
//					pulumi.String("python3.12"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Grant permission to specific AWS account
//			_, err = lambda.NewLayerVersionPermission(ctx, "example", &lambda.LayerVersionPermissionArgs{
//				LayerName:     example.LayerName,
//				VersionNumber: example.Version,
//				Principal:     pulumi.String("123456789012"),
//				Action:        pulumi.String("lambda:GetLayerVersion"),
//				StatementId:   pulumi.String("dev-account-access"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Share Layer with Organization
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lambda.NewLayerVersionPermission(ctx, "example", &lambda.LayerVersionPermissionArgs{
//				LayerName:      pulumi.Any(exampleAwsLambdaLayerVersion.LayerName),
//				VersionNumber:  pulumi.Any(exampleAwsLambdaLayerVersion.Version),
//				Principal:      pulumi.String("*"),
//				OrganizationId: pulumi.String("o-1234567890"),
//				Action:         pulumi.String("lambda:GetLayerVersion"),
//				StatementId:    pulumi.String("org-wide-access"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Share Layer Publicly
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lambda.NewLayerVersionPermission(ctx, "example", &lambda.LayerVersionPermissionArgs{
//				LayerName:     pulumi.Any(exampleAwsLambdaLayerVersion.LayerName),
//				VersionNumber: pulumi.Any(exampleAwsLambdaLayerVersion.Version),
//				Principal:     pulumi.String("*"),
//				Action:        pulumi.String("lambda:GetLayerVersion"),
//				StatementId:   pulumi.String("public-access"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Multiple Account Access
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Share with multiple specific accounts
//			_, err := lambda.NewLayerVersionPermission(ctx, "dev_account", &lambda.LayerVersionPermissionArgs{
//				LayerName:     pulumi.Any(example.LayerName),
//				VersionNumber: pulumi.Any(example.Version),
//				Principal:     pulumi.String("111111111111"),
//				Action:        pulumi.String("lambda:GetLayerVersion"),
//				StatementId:   pulumi.String("dev-account"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lambda.NewLayerVersionPermission(ctx, "staging_account", &lambda.LayerVersionPermissionArgs{
//				LayerName:     pulumi.Any(example.LayerName),
//				VersionNumber: pulumi.Any(example.Version),
//				Principal:     pulumi.String("222222222222"),
//				Action:        pulumi.String("lambda:GetLayerVersion"),
//				StatementId:   pulumi.String("staging-account"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lambda.NewLayerVersionPermission(ctx, "prod_account", &lambda.LayerVersionPermissionArgs{
//				LayerName:     pulumi.Any(example.LayerName),
//				VersionNumber: pulumi.Any(example.Version),
//				Principal:     pulumi.String("333333333333"),
//				Action:        pulumi.String("lambda:GetLayerVersion"),
//				StatementId:   pulumi.String("prod-account"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For backwards compatibility, the following legacy `pulumi import` command is also supported:
//
// ```sh
// $ pulumi import aws:lambda/layerVersionPermission:LayerVersionPermission example arn:aws:lambda:us-west-2:123456789012:layer:shared_utilities,1
// ```
type LayerVersionPermission struct {
	pulumi.CustomResourceState

	// Action that will be allowed. `lambda:GetLayerVersion` is the standard value for layer access.
	Action pulumi.StringOutput `pulumi:"action"`
	// Name or ARN of the Lambda Layer.
	LayerName pulumi.StringOutput `pulumi:"layerName"`
	// AWS Organization ID that should be able to use your Lambda Layer. `principal` should be set to `*` when `organizationId` is provided.
	OrganizationId pulumi.StringPtrOutput `pulumi:"organizationId"`
	// Full Lambda Layer Permission policy.
	Policy pulumi.StringOutput `pulumi:"policy"`
	// AWS account ID that should be able to use your Lambda Layer. Use `*` to share with all AWS accounts.
	Principal pulumi.StringOutput `pulumi:"principal"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// Unique identifier for the current revision of the policy.
	RevisionId pulumi.StringOutput `pulumi:"revisionId"`
	// Whether to retain the permission when the resource is destroyed. Default is `false`.
	SkipDestroy pulumi.BoolPtrOutput `pulumi:"skipDestroy"`
	// Unique identifier for the permission statement.
	StatementId pulumi.StringOutput `pulumi:"statementId"`
	// Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
	//
	// The following arguments are optional:
	VersionNumber pulumi.IntOutput `pulumi:"versionNumber"`
}

// NewLayerVersionPermission registers a new resource with the given unique name, arguments, and options.
func NewLayerVersionPermission(ctx *pulumi.Context,
	name string, args *LayerVersionPermissionArgs, opts ...pulumi.ResourceOption) (*LayerVersionPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.LayerName == nil {
		return nil, errors.New("invalid value for required argument 'LayerName'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.StatementId == nil {
		return nil, errors.New("invalid value for required argument 'StatementId'")
	}
	if args.VersionNumber == nil {
		return nil, errors.New("invalid value for required argument 'VersionNumber'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LayerVersionPermission
	err := ctx.RegisterResource("aws:lambda/layerVersionPermission:LayerVersionPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLayerVersionPermission gets an existing LayerVersionPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLayerVersionPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LayerVersionPermissionState, opts ...pulumi.ResourceOption) (*LayerVersionPermission, error) {
	var resource LayerVersionPermission
	err := ctx.ReadResource("aws:lambda/layerVersionPermission:LayerVersionPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LayerVersionPermission resources.
type layerVersionPermissionState struct {
	// Action that will be allowed. `lambda:GetLayerVersion` is the standard value for layer access.
	Action *string `pulumi:"action"`
	// Name or ARN of the Lambda Layer.
	LayerName *string `pulumi:"layerName"`
	// AWS Organization ID that should be able to use your Lambda Layer. `principal` should be set to `*` when `organizationId` is provided.
	OrganizationId *string `pulumi:"organizationId"`
	// Full Lambda Layer Permission policy.
	Policy *string `pulumi:"policy"`
	// AWS account ID that should be able to use your Lambda Layer. Use `*` to share with all AWS accounts.
	Principal *string `pulumi:"principal"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Unique identifier for the current revision of the policy.
	RevisionId *string `pulumi:"revisionId"`
	// Whether to retain the permission when the resource is destroyed. Default is `false`.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// Unique identifier for the permission statement.
	StatementId *string `pulumi:"statementId"`
	// Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
	//
	// The following arguments are optional:
	VersionNumber *int `pulumi:"versionNumber"`
}

type LayerVersionPermissionState struct {
	// Action that will be allowed. `lambda:GetLayerVersion` is the standard value for layer access.
	Action pulumi.StringPtrInput
	// Name or ARN of the Lambda Layer.
	LayerName pulumi.StringPtrInput
	// AWS Organization ID that should be able to use your Lambda Layer. `principal` should be set to `*` when `organizationId` is provided.
	OrganizationId pulumi.StringPtrInput
	// Full Lambda Layer Permission policy.
	Policy pulumi.StringPtrInput
	// AWS account ID that should be able to use your Lambda Layer. Use `*` to share with all AWS accounts.
	Principal pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Unique identifier for the current revision of the policy.
	RevisionId pulumi.StringPtrInput
	// Whether to retain the permission when the resource is destroyed. Default is `false`.
	SkipDestroy pulumi.BoolPtrInput
	// Unique identifier for the permission statement.
	StatementId pulumi.StringPtrInput
	// Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
	//
	// The following arguments are optional:
	VersionNumber pulumi.IntPtrInput
}

func (LayerVersionPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionPermissionState)(nil)).Elem()
}

type layerVersionPermissionArgs struct {
	// Action that will be allowed. `lambda:GetLayerVersion` is the standard value for layer access.
	Action string `pulumi:"action"`
	// Name or ARN of the Lambda Layer.
	LayerName string `pulumi:"layerName"`
	// AWS Organization ID that should be able to use your Lambda Layer. `principal` should be set to `*` when `organizationId` is provided.
	OrganizationId *string `pulumi:"organizationId"`
	// AWS account ID that should be able to use your Lambda Layer. Use `*` to share with all AWS accounts.
	Principal string `pulumi:"principal"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Whether to retain the permission when the resource is destroyed. Default is `false`.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// Unique identifier for the permission statement.
	StatementId string `pulumi:"statementId"`
	// Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
	//
	// The following arguments are optional:
	VersionNumber int `pulumi:"versionNumber"`
}

// The set of arguments for constructing a LayerVersionPermission resource.
type LayerVersionPermissionArgs struct {
	// Action that will be allowed. `lambda:GetLayerVersion` is the standard value for layer access.
	Action pulumi.StringInput
	// Name or ARN of the Lambda Layer.
	LayerName pulumi.StringInput
	// AWS Organization ID that should be able to use your Lambda Layer. `principal` should be set to `*` when `organizationId` is provided.
	OrganizationId pulumi.StringPtrInput
	// AWS account ID that should be able to use your Lambda Layer. Use `*` to share with all AWS accounts.
	Principal pulumi.StringInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Whether to retain the permission when the resource is destroyed. Default is `false`.
	SkipDestroy pulumi.BoolPtrInput
	// Unique identifier for the permission statement.
	StatementId pulumi.StringInput
	// Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
	//
	// The following arguments are optional:
	VersionNumber pulumi.IntInput
}

func (LayerVersionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionPermissionArgs)(nil)).Elem()
}

type LayerVersionPermissionInput interface {
	pulumi.Input

	ToLayerVersionPermissionOutput() LayerVersionPermissionOutput
	ToLayerVersionPermissionOutputWithContext(ctx context.Context) LayerVersionPermissionOutput
}

func (*LayerVersionPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**LayerVersionPermission)(nil)).Elem()
}

func (i *LayerVersionPermission) ToLayerVersionPermissionOutput() LayerVersionPermissionOutput {
	return i.ToLayerVersionPermissionOutputWithContext(context.Background())
}

func (i *LayerVersionPermission) ToLayerVersionPermissionOutputWithContext(ctx context.Context) LayerVersionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionPermissionOutput)
}

// LayerVersionPermissionArrayInput is an input type that accepts LayerVersionPermissionArray and LayerVersionPermissionArrayOutput values.
// You can construct a concrete instance of `LayerVersionPermissionArrayInput` via:
//
//	LayerVersionPermissionArray{ LayerVersionPermissionArgs{...} }
type LayerVersionPermissionArrayInput interface {
	pulumi.Input

	ToLayerVersionPermissionArrayOutput() LayerVersionPermissionArrayOutput
	ToLayerVersionPermissionArrayOutputWithContext(context.Context) LayerVersionPermissionArrayOutput
}

type LayerVersionPermissionArray []LayerVersionPermissionInput

func (LayerVersionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LayerVersionPermission)(nil)).Elem()
}

func (i LayerVersionPermissionArray) ToLayerVersionPermissionArrayOutput() LayerVersionPermissionArrayOutput {
	return i.ToLayerVersionPermissionArrayOutputWithContext(context.Background())
}

func (i LayerVersionPermissionArray) ToLayerVersionPermissionArrayOutputWithContext(ctx context.Context) LayerVersionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionPermissionArrayOutput)
}

// LayerVersionPermissionMapInput is an input type that accepts LayerVersionPermissionMap and LayerVersionPermissionMapOutput values.
// You can construct a concrete instance of `LayerVersionPermissionMapInput` via:
//
//	LayerVersionPermissionMap{ "key": LayerVersionPermissionArgs{...} }
type LayerVersionPermissionMapInput interface {
	pulumi.Input

	ToLayerVersionPermissionMapOutput() LayerVersionPermissionMapOutput
	ToLayerVersionPermissionMapOutputWithContext(context.Context) LayerVersionPermissionMapOutput
}

type LayerVersionPermissionMap map[string]LayerVersionPermissionInput

func (LayerVersionPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LayerVersionPermission)(nil)).Elem()
}

func (i LayerVersionPermissionMap) ToLayerVersionPermissionMapOutput() LayerVersionPermissionMapOutput {
	return i.ToLayerVersionPermissionMapOutputWithContext(context.Background())
}

func (i LayerVersionPermissionMap) ToLayerVersionPermissionMapOutputWithContext(ctx context.Context) LayerVersionPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionPermissionMapOutput)
}

type LayerVersionPermissionOutput struct{ *pulumi.OutputState }

func (LayerVersionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LayerVersionPermission)(nil)).Elem()
}

func (o LayerVersionPermissionOutput) ToLayerVersionPermissionOutput() LayerVersionPermissionOutput {
	return o
}

func (o LayerVersionPermissionOutput) ToLayerVersionPermissionOutputWithContext(ctx context.Context) LayerVersionPermissionOutput {
	return o
}

// Action that will be allowed. `lambda:GetLayerVersion` is the standard value for layer access.
func (o LayerVersionPermissionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Name or ARN of the Lambda Layer.
func (o LayerVersionPermissionOutput) LayerName() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.LayerName }).(pulumi.StringOutput)
}

// AWS Organization ID that should be able to use your Lambda Layer. `principal` should be set to `*` when `organizationId` is provided.
func (o LayerVersionPermissionOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringPtrOutput { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

// Full Lambda Layer Permission policy.
func (o LayerVersionPermissionOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

// AWS account ID that should be able to use your Lambda Layer. Use `*` to share with all AWS accounts.
func (o LayerVersionPermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o LayerVersionPermissionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Unique identifier for the current revision of the policy.
func (o LayerVersionPermissionOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.RevisionId }).(pulumi.StringOutput)
}

// Whether to retain the permission when the resource is destroyed. Default is `false`.
func (o LayerVersionPermissionOutput) SkipDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.BoolPtrOutput { return v.SkipDestroy }).(pulumi.BoolPtrOutput)
}

// Unique identifier for the permission statement.
func (o LayerVersionPermissionOutput) StatementId() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.StatementId }).(pulumi.StringOutput)
}

// Version of Lambda Layer to grant access to. Note: permissions only apply to a single version of a layer.
//
// The following arguments are optional:
func (o LayerVersionPermissionOutput) VersionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.IntOutput { return v.VersionNumber }).(pulumi.IntOutput)
}

type LayerVersionPermissionArrayOutput struct{ *pulumi.OutputState }

func (LayerVersionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LayerVersionPermission)(nil)).Elem()
}

func (o LayerVersionPermissionArrayOutput) ToLayerVersionPermissionArrayOutput() LayerVersionPermissionArrayOutput {
	return o
}

func (o LayerVersionPermissionArrayOutput) ToLayerVersionPermissionArrayOutputWithContext(ctx context.Context) LayerVersionPermissionArrayOutput {
	return o
}

func (o LayerVersionPermissionArrayOutput) Index(i pulumi.IntInput) LayerVersionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LayerVersionPermission {
		return vs[0].([]*LayerVersionPermission)[vs[1].(int)]
	}).(LayerVersionPermissionOutput)
}

type LayerVersionPermissionMapOutput struct{ *pulumi.OutputState }

func (LayerVersionPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LayerVersionPermission)(nil)).Elem()
}

func (o LayerVersionPermissionMapOutput) ToLayerVersionPermissionMapOutput() LayerVersionPermissionMapOutput {
	return o
}

func (o LayerVersionPermissionMapOutput) ToLayerVersionPermissionMapOutputWithContext(ctx context.Context) LayerVersionPermissionMapOutput {
	return o
}

func (o LayerVersionPermissionMapOutput) MapIndex(k pulumi.StringInput) LayerVersionPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LayerVersionPermission {
		return vs[0].(map[string]*LayerVersionPermission)[vs[1].(string)]
	}).(LayerVersionPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionPermissionInput)(nil)).Elem(), &LayerVersionPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionPermissionArrayInput)(nil)).Elem(), LayerVersionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionPermissionMapInput)(nil)).Elem(), LayerVersionPermissionMap{})
	pulumi.RegisterOutputType(LayerVersionPermissionOutput{})
	pulumi.RegisterOutputType(LayerVersionPermissionArrayOutput{})
	pulumi.RegisterOutputType(LayerVersionPermissionMapOutput{})
}
