// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Lambda Layer Version Permission resource. It allows you to share you own Lambda Layers to another account by account ID, to all accounts in AWS organization or even to all AWS accounts.
//
// For information about Lambda Layer Permissions and how to use them, see [Using Resource-based Policies for AWS Lambda][1]
//
// > **NOTE:** Setting `skipDestroy` to `true` means that the AWS Provider will _not_ destroy any layer version permission, even when running `pulumi destroy`. Layer version permissions are thus intentional dangling resources that are _not_ managed by Pulumi and may incur extra expense in your AWS account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lambda.NewLayerVersionPermission(ctx, "lambdaLayerPermission", &lambda.LayerVersionPermissionArgs{
//				Action:        pulumi.String("lambda:GetLayerVersion"),
//				LayerName:     pulumi.String("arn:aws:lambda:us-west-2:123456654321:layer:test_layer1"),
//				Principal:     pulumi.String("111111111111"),
//				StatementId:   pulumi.String("dev-account"),
//				VersionNumber: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_lambda_layer_version_permission.example
//
//	id = "arn:aws:lambda:us-west-2:123456654321:layer:test_layer1,1" } Using `pulumi import`, import Lambda Layer Permissions using `layer_name` and `version_number`, separated by a comma (`,`). For exampleconsole % pulumi import aws_lambda_layer_version_permission.example arn:aws:lambda:us-west-2:123456654321:layer:test_layer1,1 [1]https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html#permissions-resource-xaccountlayer
type LayerVersionPermission struct {
	pulumi.CustomResourceState

	// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
	Action pulumi.StringOutput `pulumi:"action"`
	// The name or ARN of the Lambda Layer, which you want to grant access to.
	LayerName pulumi.StringOutput `pulumi:"layerName"`
	// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
	OrganizationId pulumi.StringPtrOutput `pulumi:"organizationId"`
	// Full Lambda Layer Permission policy.
	Policy pulumi.StringOutput `pulumi:"policy"`
	// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
	Principal pulumi.StringOutput `pulumi:"principal"`
	// A unique identifier for the current revision of the policy.
	RevisionId pulumi.StringOutput `pulumi:"revisionId"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy pulumi.BoolPtrOutput `pulumi:"skipDestroy"`
	// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
	StatementId pulumi.StringOutput `pulumi:"statementId"`
	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	VersionNumber pulumi.IntOutput `pulumi:"versionNumber"`
}

// NewLayerVersionPermission registers a new resource with the given unique name, arguments, and options.
func NewLayerVersionPermission(ctx *pulumi.Context,
	name string, args *LayerVersionPermissionArgs, opts ...pulumi.ResourceOption) (*LayerVersionPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.LayerName == nil {
		return nil, errors.New("invalid value for required argument 'LayerName'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.StatementId == nil {
		return nil, errors.New("invalid value for required argument 'StatementId'")
	}
	if args.VersionNumber == nil {
		return nil, errors.New("invalid value for required argument 'VersionNumber'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LayerVersionPermission
	err := ctx.RegisterResource("aws:lambda/layerVersionPermission:LayerVersionPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLayerVersionPermission gets an existing LayerVersionPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLayerVersionPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LayerVersionPermissionState, opts ...pulumi.ResourceOption) (*LayerVersionPermission, error) {
	var resource LayerVersionPermission
	err := ctx.ReadResource("aws:lambda/layerVersionPermission:LayerVersionPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LayerVersionPermission resources.
type layerVersionPermissionState struct {
	// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
	Action *string `pulumi:"action"`
	// The name or ARN of the Lambda Layer, which you want to grant access to.
	LayerName *string `pulumi:"layerName"`
	// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
	OrganizationId *string `pulumi:"organizationId"`
	// Full Lambda Layer Permission policy.
	Policy *string `pulumi:"policy"`
	// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
	Principal *string `pulumi:"principal"`
	// A unique identifier for the current revision of the policy.
	RevisionId *string `pulumi:"revisionId"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
	StatementId *string `pulumi:"statementId"`
	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	VersionNumber *int `pulumi:"versionNumber"`
}

type LayerVersionPermissionState struct {
	// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
	Action pulumi.StringPtrInput
	// The name or ARN of the Lambda Layer, which you want to grant access to.
	LayerName pulumi.StringPtrInput
	// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
	OrganizationId pulumi.StringPtrInput
	// Full Lambda Layer Permission policy.
	Policy pulumi.StringPtrInput
	// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
	Principal pulumi.StringPtrInput
	// A unique identifier for the current revision of the policy.
	RevisionId pulumi.StringPtrInput
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy pulumi.BoolPtrInput
	// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
	StatementId pulumi.StringPtrInput
	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	VersionNumber pulumi.IntPtrInput
}

func (LayerVersionPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionPermissionState)(nil)).Elem()
}

type layerVersionPermissionArgs struct {
	// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
	Action string `pulumi:"action"`
	// The name or ARN of the Lambda Layer, which you want to grant access to.
	LayerName string `pulumi:"layerName"`
	// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
	OrganizationId *string `pulumi:"organizationId"`
	// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
	Principal string `pulumi:"principal"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
	StatementId string `pulumi:"statementId"`
	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	VersionNumber int `pulumi:"versionNumber"`
}

// The set of arguments for constructing a LayerVersionPermission resource.
type LayerVersionPermissionArgs struct {
	// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
	Action pulumi.StringInput
	// The name or ARN of the Lambda Layer, which you want to grant access to.
	LayerName pulumi.StringInput
	// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
	OrganizationId pulumi.StringPtrInput
	// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
	Principal pulumi.StringInput
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy pulumi.BoolPtrInput
	// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
	StatementId pulumi.StringInput
	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	VersionNumber pulumi.IntInput
}

func (LayerVersionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionPermissionArgs)(nil)).Elem()
}

type LayerVersionPermissionInput interface {
	pulumi.Input

	ToLayerVersionPermissionOutput() LayerVersionPermissionOutput
	ToLayerVersionPermissionOutputWithContext(ctx context.Context) LayerVersionPermissionOutput
}

func (*LayerVersionPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**LayerVersionPermission)(nil)).Elem()
}

func (i *LayerVersionPermission) ToLayerVersionPermissionOutput() LayerVersionPermissionOutput {
	return i.ToLayerVersionPermissionOutputWithContext(context.Background())
}

func (i *LayerVersionPermission) ToLayerVersionPermissionOutputWithContext(ctx context.Context) LayerVersionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionPermissionOutput)
}

// LayerVersionPermissionArrayInput is an input type that accepts LayerVersionPermissionArray and LayerVersionPermissionArrayOutput values.
// You can construct a concrete instance of `LayerVersionPermissionArrayInput` via:
//
//	LayerVersionPermissionArray{ LayerVersionPermissionArgs{...} }
type LayerVersionPermissionArrayInput interface {
	pulumi.Input

	ToLayerVersionPermissionArrayOutput() LayerVersionPermissionArrayOutput
	ToLayerVersionPermissionArrayOutputWithContext(context.Context) LayerVersionPermissionArrayOutput
}

type LayerVersionPermissionArray []LayerVersionPermissionInput

func (LayerVersionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LayerVersionPermission)(nil)).Elem()
}

func (i LayerVersionPermissionArray) ToLayerVersionPermissionArrayOutput() LayerVersionPermissionArrayOutput {
	return i.ToLayerVersionPermissionArrayOutputWithContext(context.Background())
}

func (i LayerVersionPermissionArray) ToLayerVersionPermissionArrayOutputWithContext(ctx context.Context) LayerVersionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionPermissionArrayOutput)
}

// LayerVersionPermissionMapInput is an input type that accepts LayerVersionPermissionMap and LayerVersionPermissionMapOutput values.
// You can construct a concrete instance of `LayerVersionPermissionMapInput` via:
//
//	LayerVersionPermissionMap{ "key": LayerVersionPermissionArgs{...} }
type LayerVersionPermissionMapInput interface {
	pulumi.Input

	ToLayerVersionPermissionMapOutput() LayerVersionPermissionMapOutput
	ToLayerVersionPermissionMapOutputWithContext(context.Context) LayerVersionPermissionMapOutput
}

type LayerVersionPermissionMap map[string]LayerVersionPermissionInput

func (LayerVersionPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LayerVersionPermission)(nil)).Elem()
}

func (i LayerVersionPermissionMap) ToLayerVersionPermissionMapOutput() LayerVersionPermissionMapOutput {
	return i.ToLayerVersionPermissionMapOutputWithContext(context.Background())
}

func (i LayerVersionPermissionMap) ToLayerVersionPermissionMapOutputWithContext(ctx context.Context) LayerVersionPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionPermissionMapOutput)
}

type LayerVersionPermissionOutput struct{ *pulumi.OutputState }

func (LayerVersionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LayerVersionPermission)(nil)).Elem()
}

func (o LayerVersionPermissionOutput) ToLayerVersionPermissionOutput() LayerVersionPermissionOutput {
	return o
}

func (o LayerVersionPermissionOutput) ToLayerVersionPermissionOutputWithContext(ctx context.Context) LayerVersionPermissionOutput {
	return o
}

// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
func (o LayerVersionPermissionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The name or ARN of the Lambda Layer, which you want to grant access to.
func (o LayerVersionPermissionOutput) LayerName() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.LayerName }).(pulumi.StringOutput)
}

// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
func (o LayerVersionPermissionOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringPtrOutput { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

// Full Lambda Layer Permission policy.
func (o LayerVersionPermissionOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
func (o LayerVersionPermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

// A unique identifier for the current revision of the policy.
func (o LayerVersionPermissionOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.RevisionId }).(pulumi.StringOutput)
}

// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
func (o LayerVersionPermissionOutput) SkipDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.BoolPtrOutput { return v.SkipDestroy }).(pulumi.BoolPtrOutput)
}

// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
func (o LayerVersionPermissionOutput) StatementId() pulumi.StringOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.StringOutput { return v.StatementId }).(pulumi.StringOutput)
}

// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
func (o LayerVersionPermissionOutput) VersionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *LayerVersionPermission) pulumi.IntOutput { return v.VersionNumber }).(pulumi.IntOutput)
}

type LayerVersionPermissionArrayOutput struct{ *pulumi.OutputState }

func (LayerVersionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LayerVersionPermission)(nil)).Elem()
}

func (o LayerVersionPermissionArrayOutput) ToLayerVersionPermissionArrayOutput() LayerVersionPermissionArrayOutput {
	return o
}

func (o LayerVersionPermissionArrayOutput) ToLayerVersionPermissionArrayOutputWithContext(ctx context.Context) LayerVersionPermissionArrayOutput {
	return o
}

func (o LayerVersionPermissionArrayOutput) Index(i pulumi.IntInput) LayerVersionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LayerVersionPermission {
		return vs[0].([]*LayerVersionPermission)[vs[1].(int)]
	}).(LayerVersionPermissionOutput)
}

type LayerVersionPermissionMapOutput struct{ *pulumi.OutputState }

func (LayerVersionPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LayerVersionPermission)(nil)).Elem()
}

func (o LayerVersionPermissionMapOutput) ToLayerVersionPermissionMapOutput() LayerVersionPermissionMapOutput {
	return o
}

func (o LayerVersionPermissionMapOutput) ToLayerVersionPermissionMapOutputWithContext(ctx context.Context) LayerVersionPermissionMapOutput {
	return o
}

func (o LayerVersionPermissionMapOutput) MapIndex(k pulumi.StringInput) LayerVersionPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LayerVersionPermission {
		return vs[0].(map[string]*LayerVersionPermission)[vs[1].(string)]
	}).(LayerVersionPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionPermissionInput)(nil)).Elem(), &LayerVersionPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionPermissionArrayInput)(nil)).Elem(), LayerVersionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionPermissionMapInput)(nil)).Elem(), LayerVersionPermissionMap{})
	pulumi.RegisterOutputType(LayerVersionPermissionOutput{})
	pulumi.RegisterOutputType(LayerVersionPermissionArrayOutput{})
	pulumi.RegisterOutputType(LayerVersionPermissionMapOutput{})
}
