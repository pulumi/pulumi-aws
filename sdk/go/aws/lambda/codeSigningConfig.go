// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CodeSigningConfig struct {
	pulumi.CustomResourceState

	AllowedPublishers CodeSigningConfigAllowedPublishersOutput `pulumi:"allowedPublishers"`
	Arn               pulumi.StringOutput                      `pulumi:"arn"`
	ConfigId          pulumi.StringOutput                      `pulumi:"configId"`
	Description       pulumi.StringPtrOutput                   `pulumi:"description"`
	LastModified      pulumi.StringOutput                      `pulumi:"lastModified"`
	Policies          CodeSigningConfigPoliciesOutput          `pulumi:"policies"`
}

// NewCodeSigningConfig registers a new resource with the given unique name, arguments, and options.
func NewCodeSigningConfig(ctx *pulumi.Context,
	name string, args *CodeSigningConfigArgs, opts ...pulumi.ResourceOption) (*CodeSigningConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedPublishers == nil {
		return nil, errors.New("invalid value for required argument 'AllowedPublishers'")
	}
	var resource CodeSigningConfig
	err := ctx.RegisterResource("aws:lambda/codeSigningConfig:CodeSigningConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCodeSigningConfig gets an existing CodeSigningConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCodeSigningConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CodeSigningConfigState, opts ...pulumi.ResourceOption) (*CodeSigningConfig, error) {
	var resource CodeSigningConfig
	err := ctx.ReadResource("aws:lambda/codeSigningConfig:CodeSigningConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CodeSigningConfig resources.
type codeSigningConfigState struct {
	AllowedPublishers *CodeSigningConfigAllowedPublishers `pulumi:"allowedPublishers"`
	Arn               *string                             `pulumi:"arn"`
	ConfigId          *string                             `pulumi:"configId"`
	Description       *string                             `pulumi:"description"`
	LastModified      *string                             `pulumi:"lastModified"`
	Policies          *CodeSigningConfigPolicies          `pulumi:"policies"`
}

type CodeSigningConfigState struct {
	AllowedPublishers CodeSigningConfigAllowedPublishersPtrInput
	Arn               pulumi.StringPtrInput
	ConfigId          pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	LastModified      pulumi.StringPtrInput
	Policies          CodeSigningConfigPoliciesPtrInput
}

func (CodeSigningConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*codeSigningConfigState)(nil)).Elem()
}

type codeSigningConfigArgs struct {
	AllowedPublishers CodeSigningConfigAllowedPublishers `pulumi:"allowedPublishers"`
	Description       *string                            `pulumi:"description"`
	Policies          *CodeSigningConfigPolicies         `pulumi:"policies"`
}

// The set of arguments for constructing a CodeSigningConfig resource.
type CodeSigningConfigArgs struct {
	AllowedPublishers CodeSigningConfigAllowedPublishersInput
	Description       pulumi.StringPtrInput
	Policies          CodeSigningConfigPoliciesPtrInput
}

func (CodeSigningConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*codeSigningConfigArgs)(nil)).Elem()
}

type CodeSigningConfigInput interface {
	pulumi.Input

	ToCodeSigningConfigOutput() CodeSigningConfigOutput
	ToCodeSigningConfigOutputWithContext(ctx context.Context) CodeSigningConfigOutput
}

func (*CodeSigningConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeSigningConfig)(nil)).Elem()
}

func (i *CodeSigningConfig) ToCodeSigningConfigOutput() CodeSigningConfigOutput {
	return i.ToCodeSigningConfigOutputWithContext(context.Background())
}

func (i *CodeSigningConfig) ToCodeSigningConfigOutputWithContext(ctx context.Context) CodeSigningConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigOutput)
}

// CodeSigningConfigArrayInput is an input type that accepts CodeSigningConfigArray and CodeSigningConfigArrayOutput values.
// You can construct a concrete instance of `CodeSigningConfigArrayInput` via:
//
//	CodeSigningConfigArray{ CodeSigningConfigArgs{...} }
type CodeSigningConfigArrayInput interface {
	pulumi.Input

	ToCodeSigningConfigArrayOutput() CodeSigningConfigArrayOutput
	ToCodeSigningConfigArrayOutputWithContext(context.Context) CodeSigningConfigArrayOutput
}

type CodeSigningConfigArray []CodeSigningConfigInput

func (CodeSigningConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CodeSigningConfig)(nil)).Elem()
}

func (i CodeSigningConfigArray) ToCodeSigningConfigArrayOutput() CodeSigningConfigArrayOutput {
	return i.ToCodeSigningConfigArrayOutputWithContext(context.Background())
}

func (i CodeSigningConfigArray) ToCodeSigningConfigArrayOutputWithContext(ctx context.Context) CodeSigningConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigArrayOutput)
}

// CodeSigningConfigMapInput is an input type that accepts CodeSigningConfigMap and CodeSigningConfigMapOutput values.
// You can construct a concrete instance of `CodeSigningConfigMapInput` via:
//
//	CodeSigningConfigMap{ "key": CodeSigningConfigArgs{...} }
type CodeSigningConfigMapInput interface {
	pulumi.Input

	ToCodeSigningConfigMapOutput() CodeSigningConfigMapOutput
	ToCodeSigningConfigMapOutputWithContext(context.Context) CodeSigningConfigMapOutput
}

type CodeSigningConfigMap map[string]CodeSigningConfigInput

func (CodeSigningConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CodeSigningConfig)(nil)).Elem()
}

func (i CodeSigningConfigMap) ToCodeSigningConfigMapOutput() CodeSigningConfigMapOutput {
	return i.ToCodeSigningConfigMapOutputWithContext(context.Background())
}

func (i CodeSigningConfigMap) ToCodeSigningConfigMapOutputWithContext(ctx context.Context) CodeSigningConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigMapOutput)
}

type CodeSigningConfigOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeSigningConfig)(nil)).Elem()
}

func (o CodeSigningConfigOutput) ToCodeSigningConfigOutput() CodeSigningConfigOutput {
	return o
}

func (o CodeSigningConfigOutput) ToCodeSigningConfigOutputWithContext(ctx context.Context) CodeSigningConfigOutput {
	return o
}

func (o CodeSigningConfigOutput) AllowedPublishers() CodeSigningConfigAllowedPublishersOutput {
	return o.ApplyT(func(v *CodeSigningConfig) CodeSigningConfigAllowedPublishersOutput { return v.AllowedPublishers }).(CodeSigningConfigAllowedPublishersOutput)
}

func (o CodeSigningConfigOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeSigningConfig) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CodeSigningConfigOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeSigningConfig) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

func (o CodeSigningConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeSigningConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CodeSigningConfigOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *CodeSigningConfig) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

func (o CodeSigningConfigOutput) Policies() CodeSigningConfigPoliciesOutput {
	return o.ApplyT(func(v *CodeSigningConfig) CodeSigningConfigPoliciesOutput { return v.Policies }).(CodeSigningConfigPoliciesOutput)
}

type CodeSigningConfigArrayOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CodeSigningConfig)(nil)).Elem()
}

func (o CodeSigningConfigArrayOutput) ToCodeSigningConfigArrayOutput() CodeSigningConfigArrayOutput {
	return o
}

func (o CodeSigningConfigArrayOutput) ToCodeSigningConfigArrayOutputWithContext(ctx context.Context) CodeSigningConfigArrayOutput {
	return o
}

func (o CodeSigningConfigArrayOutput) Index(i pulumi.IntInput) CodeSigningConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CodeSigningConfig {
		return vs[0].([]*CodeSigningConfig)[vs[1].(int)]
	}).(CodeSigningConfigOutput)
}

type CodeSigningConfigMapOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CodeSigningConfig)(nil)).Elem()
}

func (o CodeSigningConfigMapOutput) ToCodeSigningConfigMapOutput() CodeSigningConfigMapOutput {
	return o
}

func (o CodeSigningConfigMapOutput) ToCodeSigningConfigMapOutputWithContext(ctx context.Context) CodeSigningConfigMapOutput {
	return o
}

func (o CodeSigningConfigMapOutput) MapIndex(k pulumi.StringInput) CodeSigningConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CodeSigningConfig {
		return vs[0].(map[string]*CodeSigningConfig)[vs[1].(string)]
	}).(CodeSigningConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CodeSigningConfigInput)(nil)).Elem(), &CodeSigningConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeSigningConfigArrayInput)(nil)).Elem(), CodeSigningConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeSigningConfigMapInput)(nil)).Elem(), CodeSigningConfigMap{})
	pulumi.RegisterOutputType(CodeSigningConfigOutput{})
	pulumi.RegisterOutputType(CodeSigningConfigArrayOutput{})
	pulumi.RegisterOutputType(CodeSigningConfigMapOutput{})
}
