// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Lambda Function resource. Lambda allows you to trigger execution of code in response to events in AWS, enabling serverless backend solutions. The Lambda Function itself includes source code and runtime configuration.
//
// For information about Lambda and how to use it, see [What is AWS Lambda?](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html)
//
// > To give an external source (like a CloudWatch Event Rule, SNS, or S3) permission to access the Lambda function, use the `lambda.Permission` resource. See [Lambda Permission Model](https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html) for more details. On the other hand, the `role` argument of this resource is the function's execution role for identity and access to AWS services and resources.
//
// ## Example Usage
// ### Lambda Layers
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/lambda"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleLayerVersion, err := lambda.NewLayerVersion(ctx, "exampleLayerVersion", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = lambda.NewFunction(ctx, "exampleFunction", &lambda.FunctionArgs{
// 			Layers: pulumi.StringArray{
// 				exampleLayerVersion.Arn,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Lambda File Systems
//
// Lambda File Systems allow you to connect an Amazon Elastic File System (EFS) file system to a Lambda function to share data across function invocations, access existing data including large files, and save function state.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/efs"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/lambda"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		efsForLambda, err := efs.NewFileSystem(ctx, "efsForLambda", &efs.FileSystemArgs{
// 			Tags: pulumi.StringMap{
// 				"Name": pulumi.String("efs_for_lambda"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		alpha, err := efs.NewMountTarget(ctx, "alpha", &efs.MountTargetArgs{
// 			FileSystemId: efsForLambda.ID(),
// 			SubnetId:     pulumi.Any(aws_subnet.Subnet_for_lambda.Id),
// 			SecurityGroups: pulumi.StringArray{
// 				pulumi.Any(aws_security_group.Sg_for_lambda.Id),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		accessPointForLambda, err := efs.NewAccessPoint(ctx, "accessPointForLambda", &efs.AccessPointArgs{
// 			FileSystemId: efsForLambda.ID(),
// 			RootDirectory: &efs.AccessPointRootDirectoryArgs{
// 				Path: pulumi.String("/lambda"),
// 				CreationInfo: &efs.AccessPointRootDirectoryCreationInfoArgs{
// 					OwnerGid:    pulumi.Int(1000),
// 					OwnerUid:    pulumi.Int(1000),
// 					Permissions: pulumi.String("777"),
// 				},
// 			},
// 			PosixUser: &efs.AccessPointPosixUserArgs{
// 				Gid: pulumi.Int(1000),
// 				Uid: pulumi.Int(1000),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = lambda.NewFunction(ctx, "example", &lambda.FunctionArgs{
// 			FileSystemConfig: &lambda.FunctionFileSystemConfigArgs{
// 				Arn:            accessPointForLambda.Arn,
// 				LocalMountPath: pulumi.String("/mnt/efs"),
// 			},
// 			VpcConfig: &lambda.FunctionVpcConfigArgs{
// 				SubnetIds: pulumi.StringArray{
// 					pulumi.Any(aws_subnet.Subnet_for_lambda.Id),
// 				},
// 				SecurityGroupIds: pulumi.StringArray{
// 					pulumi.Any(aws_security_group.Sg_for_lambda.Id),
// 				},
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			alpha,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## CloudWatch Logging and Permissions
//
// For more information about CloudWatch Logs for Lambda, see the [Lambda User Guide](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions-logs.html).
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/lambda"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		lambdaFunctionName := "lambda_function_name"
// 		if param := cfg.Get("lambdaFunctionName"); param != "" {
// 			lambdaFunctionName = param
// 		}
// 		example, err := cloudwatch.NewLogGroup(ctx, "example", &cloudwatch.LogGroupArgs{
// 			RetentionInDays: pulumi.Int(14),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		lambdaLogging, err := iam.NewPolicy(ctx, "lambdaLogging", &iam.PolicyArgs{
// 			Path:        pulumi.String("/"),
// 			Description: pulumi.String("IAM policy for logging from a lambda"),
// 			Policy:      pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": [\n", "        \"logs:CreateLogGroup\",\n", "        \"logs:CreateLogStream\",\n", "        \"logs:PutLogEvents\"\n", "      ],\n", "      \"Resource\": \"arn:aws:logs:*:*:*\",\n", "      \"Effect\": \"Allow\"\n", "    }\n", "  ]\n", "}\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		lambdaLogs, err := iam.NewRolePolicyAttachment(ctx, "lambdaLogs", &iam.RolePolicyAttachmentArgs{
// 			Role:      pulumi.Any(aws_iam_role.Iam_for_lambda.Name),
// 			PolicyArn: lambdaLogging.Arn,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = lambda.NewFunction(ctx, "testLambda", nil, pulumi.DependsOn([]pulumi.Resource{
// 			lambdaLogs,
// 			example,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Specifying the Deployment Package
//
// AWS Lambda expects source code to be provided as a deployment package whose structure varies depending on which `runtime` is in use. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for the valid values of `runtime`. The expected structure of the deployment package can be found in [the AWS Lambda documentation for each runtime](https://docs.aws.amazon.com/lambda/latest/dg/deployment-package-v2.html).
//
// Once you have created your deployment package you can specify it either directly as a local file (using the `filename` argument) or indirectly via Amazon S3 (using the `s3Bucket`, `s3Key` and `s3ObjectVersion` arguments). When providing the deployment package via S3 it may be useful to use the `s3.BucketObject` resource to upload it.
//
// For larger deployment packages it is recommended by Amazon to upload via S3, since the S3 API has better support for uploading large files efficiently.
//
// ## Import
//
// Lambda Functions can be imported using the `function_name`, e.g.
//
// ```sh
//  $ pulumi import aws:lambda/function:Function test_lambda my_test_lambda_function
// ```
type Function struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Path to the function's deployment package within the local filesystem. Conflicts with `imageUri`, `s3Bucket`, `s3Key`, and `s3ObjectVersion`.
	Code pulumi.ArchiveOutput `pulumi:"code"`
	// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
	CodeSigningConfigArn pulumi.StringPtrOutput `pulumi:"codeSigningConfigArn"`
	// Configuration block. Detailed below.
	DeadLetterConfig FunctionDeadLetterConfigPtrOutput `pulumi:"deadLetterConfig"`
	// Description of what your Lambda Function does.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Configuration block. Detailed below.
	Environment FunctionEnvironmentPtrOutput `pulumi:"environment"`
	// Configuration block. Detailed below.
	FileSystemConfig FunctionFileSystemConfigPtrOutput `pulumi:"fileSystemConfig"`
	// Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.
	Handler pulumi.StringPtrOutput `pulumi:"handler"`
	// Configuration block. Detailed below.
	ImageConfig FunctionImageConfigPtrOutput `pulumi:"imageConfig"`
	// ECR image URI containing the function's deployment package. Conflicts with `filename`, `s3Bucket`, `s3Key`, and `s3ObjectVersion`.
	ImageUri pulumi.StringPtrOutput `pulumi:"imageUri"`
	// ARN to be used for invoking Lambda Function from API Gateway - to be used in `apigateway.Integration`'s `uri`.
	InvokeArn pulumi.StringOutput `pulumi:"invokeArn"`
	// Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.
	KmsKeyArn pulumi.StringPtrOutput `pulumi:"kmsKeyArn"`
	// Date this resource was last modified.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
	Layers pulumi.StringArrayOutput `pulumi:"layers"`
	// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)
	MemorySize pulumi.IntPtrOutput `pulumi:"memorySize"`
	// Unique name for your Lambda Function.
	Name pulumi.StringOutput `pulumi:"name"`
	// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
	PackageType pulumi.StringPtrOutput `pulumi:"packageType"`
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish pulumi.BoolPtrOutput `pulumi:"publish"`
	// ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).
	QualifiedArn pulumi.StringOutput `pulumi:"qualifiedArn"`
	// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)
	ReservedConcurrentExecutions pulumi.IntPtrOutput `pulumi:"reservedConcurrentExecutions"`
	// Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	Role pulumi.StringOutput `pulumi:"role"`
	// Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
	Runtime pulumi.StringPtrOutput `pulumi:"runtime"`
	// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `imageUri`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumi.StringPtrOutput `pulumi:"s3Bucket"`
	// S3 key of an object containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3Key pulumi.StringPtrOutput `pulumi:"s3Key"`
	// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3ObjectVersion pulumi.StringPtrOutput `pulumi:"s3ObjectVersion"`
	// ARN of the signing job.
	SigningJobArn pulumi.StringOutput `pulumi:"signingJobArn"`
	// ARN of the signing profile version.
	SigningProfileVersionArn pulumi.StringOutput `pulumi:"signingProfileVersionArn"`
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`. The usual way to set this is `filebase64sha256("file.zip")`, where "file.zip" is the local filename of the lambda function source archive.
	SourceCodeHash pulumi.StringOutput `pulumi:"sourceCodeHash"`
	// Size in bytes of the function .zip file.
	SourceCodeSize pulumi.IntOutput `pulumi:"sourceCodeSize"`
	// Map of tags to assign to the object.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Configuration block. Detailed below.
	TracingConfig FunctionTracingConfigOutput `pulumi:"tracingConfig"`
	// Latest published version of your Lambda Function.
	// * `vpc_config.vpc_id` - ID of the VPC.
	Version pulumi.StringOutput `pulumi:"version"`
	// Configuration block. Detailed below.
	VpcConfig FunctionVpcConfigPtrOutput `pulumi:"vpcConfig"`
}

// NewFunction registers a new resource with the given unique name, arguments, and options.
func NewFunction(ctx *pulumi.Context,
	name string, args *FunctionArgs, opts ...pulumi.ResourceOption) (*Function, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource Function
	err := ctx.RegisterResource("aws:lambda/function:Function", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunction gets an existing Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionState, opts ...pulumi.ResourceOption) (*Function, error) {
	var resource Function
	err := ctx.ReadResource("aws:lambda/function:Function", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Function resources.
type functionState struct {
	// Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
	Arn *string `pulumi:"arn"`
	// Path to the function's deployment package within the local filesystem. Conflicts with `imageUri`, `s3Bucket`, `s3Key`, and `s3ObjectVersion`.
	Code pulumi.Archive `pulumi:"code"`
	// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
	CodeSigningConfigArn *string `pulumi:"codeSigningConfigArn"`
	// Configuration block. Detailed below.
	DeadLetterConfig *FunctionDeadLetterConfig `pulumi:"deadLetterConfig"`
	// Description of what your Lambda Function does.
	Description *string `pulumi:"description"`
	// Configuration block. Detailed below.
	Environment *FunctionEnvironment `pulumi:"environment"`
	// Configuration block. Detailed below.
	FileSystemConfig *FunctionFileSystemConfig `pulumi:"fileSystemConfig"`
	// Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.
	Handler *string `pulumi:"handler"`
	// Configuration block. Detailed below.
	ImageConfig *FunctionImageConfig `pulumi:"imageConfig"`
	// ECR image URI containing the function's deployment package. Conflicts with `filename`, `s3Bucket`, `s3Key`, and `s3ObjectVersion`.
	ImageUri *string `pulumi:"imageUri"`
	// ARN to be used for invoking Lambda Function from API Gateway - to be used in `apigateway.Integration`'s `uri`.
	InvokeArn *string `pulumi:"invokeArn"`
	// Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Date this resource was last modified.
	LastModified *string `pulumi:"lastModified"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
	Layers []string `pulumi:"layers"`
	// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)
	MemorySize *int `pulumi:"memorySize"`
	// Unique name for your Lambda Function.
	Name *string `pulumi:"name"`
	// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
	PackageType *string `pulumi:"packageType"`
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish *bool `pulumi:"publish"`
	// ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).
	QualifiedArn *string `pulumi:"qualifiedArn"`
	// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)
	ReservedConcurrentExecutions *int `pulumi:"reservedConcurrentExecutions"`
	// Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	Role *string `pulumi:"role"`
	// Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
	Runtime *string `pulumi:"runtime"`
	// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `imageUri`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket *string `pulumi:"s3Bucket"`
	// S3 key of an object containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3Key *string `pulumi:"s3Key"`
	// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3ObjectVersion *string `pulumi:"s3ObjectVersion"`
	// ARN of the signing job.
	SigningJobArn *string `pulumi:"signingJobArn"`
	// ARN of the signing profile version.
	SigningProfileVersionArn *string `pulumi:"signingProfileVersionArn"`
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`. The usual way to set this is `filebase64sha256("file.zip")`, where "file.zip" is the local filename of the lambda function source archive.
	SourceCodeHash *string `pulumi:"sourceCodeHash"`
	// Size in bytes of the function .zip file.
	SourceCodeSize *int `pulumi:"sourceCodeSize"`
	// Map of tags to assign to the object.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).
	Timeout *int `pulumi:"timeout"`
	// Configuration block. Detailed below.
	TracingConfig *FunctionTracingConfig `pulumi:"tracingConfig"`
	// Latest published version of your Lambda Function.
	// * `vpc_config.vpc_id` - ID of the VPC.
	Version *string `pulumi:"version"`
	// Configuration block. Detailed below.
	VpcConfig *FunctionVpcConfig `pulumi:"vpcConfig"`
}

type FunctionState struct {
	// Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
	Arn pulumi.StringPtrInput
	// Path to the function's deployment package within the local filesystem. Conflicts with `imageUri`, `s3Bucket`, `s3Key`, and `s3ObjectVersion`.
	Code pulumi.ArchiveInput
	// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
	CodeSigningConfigArn pulumi.StringPtrInput
	// Configuration block. Detailed below.
	DeadLetterConfig FunctionDeadLetterConfigPtrInput
	// Description of what your Lambda Function does.
	Description pulumi.StringPtrInput
	// Configuration block. Detailed below.
	Environment FunctionEnvironmentPtrInput
	// Configuration block. Detailed below.
	FileSystemConfig FunctionFileSystemConfigPtrInput
	// Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.
	Handler pulumi.StringPtrInput
	// Configuration block. Detailed below.
	ImageConfig FunctionImageConfigPtrInput
	// ECR image URI containing the function's deployment package. Conflicts with `filename`, `s3Bucket`, `s3Key`, and `s3ObjectVersion`.
	ImageUri pulumi.StringPtrInput
	// ARN to be used for invoking Lambda Function from API Gateway - to be used in `apigateway.Integration`'s `uri`.
	InvokeArn pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.
	KmsKeyArn pulumi.StringPtrInput
	// Date this resource was last modified.
	LastModified pulumi.StringPtrInput
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
	Layers pulumi.StringArrayInput
	// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)
	MemorySize pulumi.IntPtrInput
	// Unique name for your Lambda Function.
	Name pulumi.StringPtrInput
	// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
	PackageType pulumi.StringPtrInput
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish pulumi.BoolPtrInput
	// ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).
	QualifiedArn pulumi.StringPtrInput
	// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)
	ReservedConcurrentExecutions pulumi.IntPtrInput
	// Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	Role pulumi.StringPtrInput
	// Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
	Runtime pulumi.StringPtrInput
	// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `imageUri`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumi.StringPtrInput
	// S3 key of an object containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3Key pulumi.StringPtrInput
	// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3ObjectVersion pulumi.StringPtrInput
	// ARN of the signing job.
	SigningJobArn pulumi.StringPtrInput
	// ARN of the signing profile version.
	SigningProfileVersionArn pulumi.StringPtrInput
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`. The usual way to set this is `filebase64sha256("file.zip")`, where "file.zip" is the local filename of the lambda function source archive.
	SourceCodeHash pulumi.StringPtrInput
	// Size in bytes of the function .zip file.
	SourceCodeSize pulumi.IntPtrInput
	// Map of tags to assign to the object.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll pulumi.StringMapInput
	// Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).
	Timeout pulumi.IntPtrInput
	// Configuration block. Detailed below.
	TracingConfig FunctionTracingConfigPtrInput
	// Latest published version of your Lambda Function.
	// * `vpc_config.vpc_id` - ID of the VPC.
	Version pulumi.StringPtrInput
	// Configuration block. Detailed below.
	VpcConfig FunctionVpcConfigPtrInput
}

func (FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionState)(nil)).Elem()
}

type functionArgs struct {
	// Path to the function's deployment package within the local filesystem. Conflicts with `imageUri`, `s3Bucket`, `s3Key`, and `s3ObjectVersion`.
	Code pulumi.Archive `pulumi:"code"`
	// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
	CodeSigningConfigArn *string `pulumi:"codeSigningConfigArn"`
	// Configuration block. Detailed below.
	DeadLetterConfig *FunctionDeadLetterConfig `pulumi:"deadLetterConfig"`
	// Description of what your Lambda Function does.
	Description *string `pulumi:"description"`
	// Configuration block. Detailed below.
	Environment *FunctionEnvironment `pulumi:"environment"`
	// Configuration block. Detailed below.
	FileSystemConfig *FunctionFileSystemConfig `pulumi:"fileSystemConfig"`
	// Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.
	Handler *string `pulumi:"handler"`
	// Configuration block. Detailed below.
	ImageConfig *FunctionImageConfig `pulumi:"imageConfig"`
	// ECR image URI containing the function's deployment package. Conflicts with `filename`, `s3Bucket`, `s3Key`, and `s3ObjectVersion`.
	ImageUri *string `pulumi:"imageUri"`
	// Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
	Layers []string `pulumi:"layers"`
	// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)
	MemorySize *int `pulumi:"memorySize"`
	// Unique name for your Lambda Function.
	Name *string `pulumi:"name"`
	// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
	PackageType *string `pulumi:"packageType"`
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish *bool `pulumi:"publish"`
	// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)
	ReservedConcurrentExecutions *int `pulumi:"reservedConcurrentExecutions"`
	// Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	Role string `pulumi:"role"`
	// Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
	Runtime *string `pulumi:"runtime"`
	// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `imageUri`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket *string `pulumi:"s3Bucket"`
	// S3 key of an object containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3Key *string `pulumi:"s3Key"`
	// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3ObjectVersion *string `pulumi:"s3ObjectVersion"`
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`. The usual way to set this is `filebase64sha256("file.zip")`, where "file.zip" is the local filename of the lambda function source archive.
	SourceCodeHash *string `pulumi:"sourceCodeHash"`
	// Map of tags to assign to the object.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).
	Timeout *int `pulumi:"timeout"`
	// Configuration block. Detailed below.
	TracingConfig *FunctionTracingConfig `pulumi:"tracingConfig"`
	// Configuration block. Detailed below.
	VpcConfig *FunctionVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Function resource.
type FunctionArgs struct {
	// Path to the function's deployment package within the local filesystem. Conflicts with `imageUri`, `s3Bucket`, `s3Key`, and `s3ObjectVersion`.
	Code pulumi.ArchiveInput
	// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
	CodeSigningConfigArn pulumi.StringPtrInput
	// Configuration block. Detailed below.
	DeadLetterConfig FunctionDeadLetterConfigPtrInput
	// Description of what your Lambda Function does.
	Description pulumi.StringPtrInput
	// Configuration block. Detailed below.
	Environment FunctionEnvironmentPtrInput
	// Configuration block. Detailed below.
	FileSystemConfig FunctionFileSystemConfigPtrInput
	// Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.
	Handler pulumi.StringPtrInput
	// Configuration block. Detailed below.
	ImageConfig FunctionImageConfigPtrInput
	// ECR image URI containing the function's deployment package. Conflicts with `filename`, `s3Bucket`, `s3Key`, and `s3ObjectVersion`.
	ImageUri pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.
	KmsKeyArn pulumi.StringPtrInput
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
	Layers pulumi.StringArrayInput
	// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)
	MemorySize pulumi.IntPtrInput
	// Unique name for your Lambda Function.
	Name pulumi.StringPtrInput
	// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
	PackageType pulumi.StringPtrInput
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish pulumi.BoolPtrInput
	// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)
	ReservedConcurrentExecutions pulumi.IntPtrInput
	// Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	Role pulumi.StringInput
	// Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
	Runtime pulumi.StringPtrInput
	// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `imageUri`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumi.StringPtrInput
	// S3 key of an object containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3Key pulumi.StringPtrInput
	// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3ObjectVersion pulumi.StringPtrInput
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`. The usual way to set this is `filebase64sha256("file.zip")`, where "file.zip" is the local filename of the lambda function source archive.
	SourceCodeHash pulumi.StringPtrInput
	// Map of tags to assign to the object.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll pulumi.StringMapInput
	// Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).
	Timeout pulumi.IntPtrInput
	// Configuration block. Detailed below.
	TracingConfig FunctionTracingConfigPtrInput
	// Configuration block. Detailed below.
	VpcConfig FunctionVpcConfigPtrInput
}

func (FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionArgs)(nil)).Elem()
}

type FunctionInput interface {
	pulumi.Input

	ToFunctionOutput() FunctionOutput
	ToFunctionOutputWithContext(ctx context.Context) FunctionOutput
}

func (*Function) ElementType() reflect.Type {
	return reflect.TypeOf((*Function)(nil))
}

func (i *Function) ToFunctionOutput() FunctionOutput {
	return i.ToFunctionOutputWithContext(context.Background())
}

func (i *Function) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionOutput)
}

func (i *Function) ToFunctionPtrOutput() FunctionPtrOutput {
	return i.ToFunctionPtrOutputWithContext(context.Background())
}

func (i *Function) ToFunctionPtrOutputWithContext(ctx context.Context) FunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionPtrOutput)
}

type FunctionPtrInput interface {
	pulumi.Input

	ToFunctionPtrOutput() FunctionPtrOutput
	ToFunctionPtrOutputWithContext(ctx context.Context) FunctionPtrOutput
}

type functionPtrType FunctionArgs

func (*functionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil))
}

func (i *functionPtrType) ToFunctionPtrOutput() FunctionPtrOutput {
	return i.ToFunctionPtrOutputWithContext(context.Background())
}

func (i *functionPtrType) ToFunctionPtrOutputWithContext(ctx context.Context) FunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionPtrOutput)
}

// FunctionArrayInput is an input type that accepts FunctionArray and FunctionArrayOutput values.
// You can construct a concrete instance of `FunctionArrayInput` via:
//
//          FunctionArray{ FunctionArgs{...} }
type FunctionArrayInput interface {
	pulumi.Input

	ToFunctionArrayOutput() FunctionArrayOutput
	ToFunctionArrayOutputWithContext(context.Context) FunctionArrayOutput
}

type FunctionArray []FunctionInput

func (FunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Function)(nil))
}

func (i FunctionArray) ToFunctionArrayOutput() FunctionArrayOutput {
	return i.ToFunctionArrayOutputWithContext(context.Background())
}

func (i FunctionArray) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArrayOutput)
}

// FunctionMapInput is an input type that accepts FunctionMap and FunctionMapOutput values.
// You can construct a concrete instance of `FunctionMapInput` via:
//
//          FunctionMap{ "key": FunctionArgs{...} }
type FunctionMapInput interface {
	pulumi.Input

	ToFunctionMapOutput() FunctionMapOutput
	ToFunctionMapOutputWithContext(context.Context) FunctionMapOutput
}

type FunctionMap map[string]FunctionInput

func (FunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Function)(nil))
}

func (i FunctionMap) ToFunctionMapOutput() FunctionMapOutput {
	return i.ToFunctionMapOutputWithContext(context.Background())
}

func (i FunctionMap) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionMapOutput)
}

type FunctionOutput struct {
	*pulumi.OutputState
}

func (FunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Function)(nil))
}

func (o FunctionOutput) ToFunctionOutput() FunctionOutput {
	return o
}

func (o FunctionOutput) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return o
}

func (o FunctionOutput) ToFunctionPtrOutput() FunctionPtrOutput {
	return o.ToFunctionPtrOutputWithContext(context.Background())
}

func (o FunctionOutput) ToFunctionPtrOutputWithContext(ctx context.Context) FunctionPtrOutput {
	return o.ApplyT(func(v Function) *Function {
		return &v
	}).(FunctionPtrOutput)
}

type FunctionPtrOutput struct {
	*pulumi.OutputState
}

func (FunctionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil))
}

func (o FunctionPtrOutput) ToFunctionPtrOutput() FunctionPtrOutput {
	return o
}

func (o FunctionPtrOutput) ToFunctionPtrOutputWithContext(ctx context.Context) FunctionPtrOutput {
	return o
}

type FunctionArrayOutput struct{ *pulumi.OutputState }

func (FunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Function)(nil))
}

func (o FunctionArrayOutput) ToFunctionArrayOutput() FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) Index(i pulumi.IntInput) FunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Function {
		return vs[0].([]Function)[vs[1].(int)]
	}).(FunctionOutput)
}

type FunctionMapOutput struct{ *pulumi.OutputState }

func (FunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Function)(nil))
}

func (o FunctionMapOutput) ToFunctionMapOutput() FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) MapIndex(k pulumi.StringInput) FunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Function {
		return vs[0].(map[string]Function)[vs[1].(string)]
	}).(FunctionOutput)
}

func init() {
	pulumi.RegisterOutputType(FunctionOutput{})
	pulumi.RegisterOutputType(FunctionPtrOutput{})
	pulumi.RegisterOutputType(FunctionArrayOutput{})
	pulumi.RegisterOutputType(FunctionMapOutput{})
}
