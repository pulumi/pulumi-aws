// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AWS Lambda Function. Use this resource to create serverless functions that run code in response to events without provisioning or managing servers.
//
// For information about Lambda and how to use it, see [What is AWS Lambda?](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html). For a detailed example of setting up Lambda and API Gateway, see Serverless Applications with AWS Lambda and API Gateway.
//
// > **Note:** Due to [AWS Lambda improved VPC networking changes that began deploying in September 2019](https://aws.amazon.com/blogs/compute/announcing-improved-vpc-networking-for-aws-lambda-functions/), EC2 subnets and security groups associated with Lambda Functions can take up to 45 minutes to successfully delete. Pulumi AWS Provider version 2.31.0 and later automatically handles this increased timeout, however prior versions require setting the customizable deletion timeouts of those Pulumi resources to 45 minutes (`delete = "45m"`). AWS and HashiCorp are working together to reduce the amount of time required for resource deletion and updates can be tracked in this GitHub issue.
//
// > **Note:** If you get a `KMSAccessDeniedException: Lambda was unable to decrypt the environment variables because KMS access was denied` error when invoking an `lambda.Function` with environment variables, the IAM role associated with the function may have been deleted and recreated after the function was created. You can fix the problem two ways: 1) updating the function's role to another role and then updating it back again to the recreated role. (When you create a function, Lambda grants permissions on the KMS key to the function's IAM role. If the IAM role is recreated, the grant is no longer valid. Changing the function's role or recreating the function causes Lambda to update the grant.)
//
// > **Tip:** To give an external source (like an EventBridge Rule, SNS, or S3) permission to access the Lambda function, use the `lambda.Permission` resource. See [Lambda Permission Model](https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html) for more details. On the other hand, the `role` argument of this resource is the function's execution role for identity and access to AWS services and resources.
//
// ## Example Usage
//
// ### Container Image Function
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lambda.NewFunction(ctx, "example", &lambda.FunctionArgs{
//				Name:        pulumi.String("example_container_function"),
//				Role:        pulumi.Any(exampleAwsIamRole.Arn),
//				PackageType: pulumi.String("Image"),
//				ImageUri:    pulumi.Sprintf("%v:latest", exampleAwsEcrRepository.RepositoryUrl),
//				ImageConfig: &lambda.FunctionImageConfigArgs{
//					EntryPoints: pulumi.StringArray{
//						pulumi.String("/lambda-entrypoint.sh"),
//					},
//					Commands: pulumi.StringArray{
//						pulumi.String("app.handler"),
//					},
//				},
//				MemorySize: pulumi.Int(512),
//				Timeout:    pulumi.Int(30),
//				Architectures: pulumi.StringArray{
//					pulumi.String("arm64"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Function with Lambda Layers
//
// > **Note:** The `lambda.LayerVersion` attribute values for `arn` and `layerArn` were swapped in version 2.0.0 of the Pulumi AWS Provider. For version 2.x, use `arn` references.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Common dependencies layer
//			example, err := lambda.NewLayerVersion(ctx, "example", &lambda.LayerVersionArgs{
//				Code:        pulumi.NewFileArchive("layer.zip"),
//				LayerName:   pulumi.String("example_dependencies_layer"),
//				Description: pulumi.String("Common dependencies for Lambda functions"),
//				CompatibleRuntimes: pulumi.StringArray{
//					pulumi.String("nodejs20.x"),
//					pulumi.String("python3.12"),
//				},
//				CompatibleArchitectures: pulumi.StringArray{
//					pulumi.String("x86_64"),
//					pulumi.String("arm64"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Function using the layer
//			_, err = lambda.NewFunction(ctx, "example", &lambda.FunctionArgs{
//				Code:    pulumi.NewFileArchive("function.zip"),
//				Name:    pulumi.String("example_layered_function"),
//				Role:    pulumi.Any(exampleAwsIamRole.Arn),
//				Handler: pulumi.String("index.handler"),
//				Runtime: pulumi.String(lambda.RuntimeNodeJS20dX),
//				Layers: pulumi.StringArray{
//					example.Arn,
//				},
//				TracingConfig: &lambda.FunctionTracingConfigArgs{
//					Mode: pulumi.String("Active"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### VPC Function with Enhanced Networking
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lambda.NewFunction(ctx, "example", &lambda.FunctionArgs{
//				Code:       pulumi.NewFileArchive("function.zip"),
//				Name:       pulumi.String("example_vpc_function"),
//				Role:       pulumi.Any(exampleAwsIamRole.Arn),
//				Handler:    pulumi.String("app.handler"),
//				Runtime:    pulumi.String(lambda.RuntimePython3d12),
//				MemorySize: pulumi.Int(1024),
//				Timeout:    pulumi.Int(30),
//				VpcConfig: &lambda.FunctionVpcConfigArgs{
//					SubnetIds: pulumi.StringArray{
//						examplePrivate1.Id,
//						examplePrivate2.Id,
//					},
//					SecurityGroupIds: pulumi.StringArray{
//						exampleLambda.Id,
//					},
//					Ipv6AllowedForDualStack: pulumi.Bool(true),
//				},
//				EphemeralStorage: &lambda.FunctionEphemeralStorageArgs{
//					Size: pulumi.Int(5120),
//				},
//				SnapStart: &lambda.FunctionSnapStartArgs{
//					ApplyOn: pulumi.String("PublishedVersions"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Function with EFS Integration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/efs"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// EFS file system for Lambda
//			example, err := efs.NewFileSystem(ctx, "example", &efs.FileSystemArgs{
//				Encrypted: pulumi.Bool(true),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("lambda-efs"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			// List of subnet IDs for EFS mount targets
//			subnetIds := []string{
//				"subnet-12345678",
//				"subnet-87654321",
//			}
//			if param := cfg.GetObject("subnetIds"); param != nil {
//				subnetIds = param
//			}
//			// Mount target in each subnet
//			var exampleMountTarget []*efs.MountTarget
//			for index := 0; index < len(subnetIds); index++ {
//				key0 := index
//				val0 := index
//				__res, err := efs.NewMountTarget(ctx, fmt.Sprintf("example-%v", key0), &efs.MountTargetArgs{
//					FileSystemId: example.ID(),
//					SubnetId:     pulumi.String(subnetIds[val0]),
//					SecurityGroups: pulumi.StringArray{
//						efs.Id,
//					},
//				})
//				if err != nil {
//					return err
//				}
//				exampleMountTarget = append(exampleMountTarget, __res)
//			}
//			// Access point for Lambda
//			exampleAccessPoint, err := efs.NewAccessPoint(ctx, "example", &efs.AccessPointArgs{
//				FileSystemId: example.ID(),
//				RootDirectory: &efs.AccessPointRootDirectoryArgs{
//					Path: pulumi.String("/lambda"),
//					CreationInfo: &efs.AccessPointRootDirectoryCreationInfoArgs{
//						OwnerGid:    pulumi.Int(1000),
//						OwnerUid:    pulumi.Int(1000),
//						Permissions: pulumi.String("755"),
//					},
//				},
//				PosixUser: &efs.AccessPointPosixUserArgs{
//					Gid: pulumi.Int(1000),
//					Uid: pulumi.Int(1000),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Lambda function with EFS
//			_, err = lambda.NewFunction(ctx, "example", &lambda.FunctionArgs{
//				Code:    pulumi.NewFileArchive("function.zip"),
//				Name:    pulumi.String("example_efs_function"),
//				Role:    pulumi.Any(exampleAwsIamRole.Arn),
//				Handler: pulumi.String("index.handler"),
//				Runtime: pulumi.String(lambda.RuntimeNodeJS20dX),
//				VpcConfig: &lambda.FunctionVpcConfigArgs{
//					SubnetIds: subnetIds,
//					SecurityGroupIds: pulumi.StringArray{
//						lambda.Id,
//					},
//				},
//				FileSystemConfig: &lambda.FunctionFileSystemConfigArgs{
//					Arn:            exampleAccessPoint.Arn,
//					LocalMountPath: pulumi.String("/mnt/data"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleMountTarget,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Function with Advanced Logging
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := cloudwatch.NewLogGroup(ctx, "example", &cloudwatch.LogGroupArgs{
//				Name:            pulumi.String("/aws/lambda/example_function"),
//				RetentionInDays: pulumi.Int(14),
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("production"),
//					"Application": pulumi.String("example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lambda.NewFunction(ctx, "example", &lambda.FunctionArgs{
//				Code:    pulumi.NewFileArchive("function.zip"),
//				Name:    pulumi.String("example_function"),
//				Role:    pulumi.Any(exampleAwsIamRole.Arn),
//				Handler: pulumi.String("index.handler"),
//				Runtime: pulumi.String(lambda.RuntimeNodeJS20dX),
//				LoggingConfig: &lambda.FunctionLoggingConfigArgs{
//					LogFormat:           pulumi.String("JSON"),
//					ApplicationLogLevel: pulumi.String("INFO"),
//					SystemLogLevel:      pulumi.String("WARN"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				example,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Function with Error Handling
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Main Lambda function
//			example, err := lambda.NewFunction(ctx, "example", &lambda.FunctionArgs{
//				Code:    pulumi.NewFileArchive("function.zip"),
//				Name:    pulumi.String("example_function"),
//				Role:    pulumi.Any(exampleAwsIamRole.Arn),
//				Handler: pulumi.String("index.handler"),
//				Runtime: pulumi.String(lambda.RuntimeNodeJS20dX),
//				DeadLetterConfig: &lambda.FunctionDeadLetterConfigArgs{
//					TargetArn: pulumi.Any(dlq.Arn),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Event invoke configuration for retries
//			_, err = lambda.NewFunctionEventInvokeConfig(ctx, "example", &lambda.FunctionEventInvokeConfigArgs{
//				FunctionName:             example.Name,
//				MaximumEventAgeInSeconds: pulumi.Int(60),
//				MaximumRetryAttempts:     pulumi.Int(2),
//				DestinationConfig: &lambda.FunctionEventInvokeConfigDestinationConfigArgs{
//					OnFailure: &lambda.FunctionEventInvokeConfigDestinationConfigOnFailureArgs{
//						Destination: pulumi.Any(dlq.Arn),
//					},
//					OnSuccess: &lambda.FunctionEventInvokeConfigDestinationConfigOnSuccessArgs{
//						Destination: pulumi.Any(success.Arn),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### CloudWatch Logging and Permissions
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			// Name of the Lambda function
//			functionName := "example_function"
//			if param := cfg.Get("functionName"); param != "" {
//				functionName = param
//			}
//			// CloudWatch Log Group with retention
//			example, err := cloudwatch.NewLogGroup(ctx, "example", &cloudwatch.LogGroupArgs{
//				Name:            pulumi.Sprintf("/aws/lambda/%v", functionName),
//				RetentionInDays: pulumi.Int(14),
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("production"),
//					"Function":    pulumi.String(functionName),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": "sts:AssumeRole",
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": "lambda.amazonaws.com",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			// Lambda execution role
//			exampleRole, err := iam.NewRole(ctx, "example", &iam.RoleArgs{
//				Name:             pulumi.String("lambda_execution_role"),
//				AssumeRolePolicy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Effect": "Allow",
//						"Action": []string{
//							"logs:CreateLogGroup",
//							"logs:CreateLogStream",
//							"logs:PutLogEvents",
//						},
//						"Resource": []string{
//							"arn:aws:logs:*:*:*",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			// CloudWatch Logs policy
//			lambdaLogging, err := iam.NewPolicy(ctx, "lambda_logging", &iam.PolicyArgs{
//				Name:        pulumi.String("lambda_logging"),
//				Path:        pulumi.String("/"),
//				Description: pulumi.String("IAM policy for logging from Lambda"),
//				Policy:      pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			// Attach logging policy to Lambda role
//			lambdaLogs, err := iam.NewRolePolicyAttachment(ctx, "lambda_logs", &iam.RolePolicyAttachmentArgs{
//				Role:      exampleRole.Name,
//				PolicyArn: lambdaLogging.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			// Lambda function with logging
//			_, err = lambda.NewFunction(ctx, "example", &lambda.FunctionArgs{
//				Code:    pulumi.NewFileArchive("function.zip"),
//				Name:    pulumi.String(functionName),
//				Role:    exampleRole.Arn,
//				Handler: pulumi.String("index.handler"),
//				Runtime: pulumi.String(lambda.RuntimeNodeJS20dX),
//				LoggingConfig: &lambda.FunctionLoggingConfigArgs{
//					LogFormat:           pulumi.String("JSON"),
//					ApplicationLogLevel: pulumi.String("INFO"),
//					SystemLogLevel:      pulumi.String("WARN"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				lambdaLogs,
//				example,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Specifying the Deployment Package
//
// AWS Lambda expects source code to be provided as a deployment package whose structure varies depending on which `runtime` is in use. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for the valid values of `runtime`. The expected structure of the deployment package can be found in [the AWS Lambda documentation for each runtime](https://docs.aws.amazon.com/lambda/latest/dg/deployment-package-v2.html).
//
// Once you have created your deployment package you can specify it either directly as a local file (using the `filename` argument) or indirectly via Amazon S3 (using the `s3Bucket`, `s3Key` and `s3ObjectVersion` arguments). When providing the deployment package via S3 it may be useful to use the `s3.BucketObjectv2` resource to upload it.
//
// For larger deployment packages it is recommended by Amazon to upload via S3, since the S3 API has better support for uploading large files efficiently.
//
// ## Import
//
// Using `pulumi import`, import Lambda Functions using the `function_name`. For example:
//
// ```sh
// $ pulumi import aws:lambda/function:Function example example
// ```
type Function struct {
	pulumi.CustomResourceState

	// Instruction set architecture for your Lambda function. Valid values are `["x8664"]` and `["arm64"]`. Default is `["x8664"]`. Removing this attribute, function's architecture stays the same.
	Architectures pulumi.StringArrayOutput `pulumi:"architectures"`
	// ARN identifying your Lambda Function.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Path to the function's deployment package within the local filesystem. Conflicts with `imageUri` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	Code pulumi.ArchiveOutput `pulumi:"code"`
	// Base64-encoded representation of raw SHA-256 sum of the zip file.
	CodeSha256 pulumi.StringOutput `pulumi:"codeSha256"`
	// ARN of a code-signing configuration to enable code signing for this function.
	CodeSigningConfigArn pulumi.StringPtrOutput `pulumi:"codeSigningConfigArn"`
	// Configuration block for dead letter queue. See below.
	DeadLetterConfig FunctionDeadLetterConfigPtrOutput `pulumi:"deadLetterConfig"`
	// Description of what your Lambda Function does.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Configuration block for environment variables. See below.
	Environment FunctionEnvironmentPtrOutput `pulumi:"environment"`
	// Amount of ephemeral storage (`/tmp`) to allocate for the Lambda Function. See below.
	EphemeralStorage FunctionEphemeralStorageOutput `pulumi:"ephemeralStorage"`
	// Configuration block for EFS file system. See below.
	FileSystemConfig FunctionFileSystemConfigPtrOutput `pulumi:"fileSystemConfig"`
	// Function entry point in your code. Required if `packageType` is `Zip`.
	Handler pulumi.StringPtrOutput `pulumi:"handler"`
	// Container image configuration values. See below.
	ImageConfig FunctionImageConfigPtrOutput `pulumi:"imageConfig"`
	// ECR image URI containing the function's deployment package. Conflicts with `filename` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	ImageUri pulumi.StringPtrOutput `pulumi:"imageUri"`
	// ARN to be used for invoking Lambda Function from API Gateway - to be used in `apigateway.Integration`'s `uri`.
	InvokeArn pulumi.StringOutput `pulumi:"invokeArn"`
	// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
	KmsKeyArn pulumi.StringPtrOutput `pulumi:"kmsKeyArn"`
	// Date this resource was last modified.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	Layers pulumi.StringArrayOutput `pulumi:"layers"`
	// Configuration block for advanced logging settings. See below.
	LoggingConfig FunctionLoggingConfigOutput `pulumi:"loggingConfig"`
	// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
	MemorySize pulumi.IntPtrOutput `pulumi:"memorySize"`
	// Unique name for your Lambda Function.
	Name pulumi.StringOutput `pulumi:"name"`
	// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
	PackageType pulumi.StringPtrOutput `pulumi:"packageType"`
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish pulumi.BoolPtrOutput `pulumi:"publish"`
	// ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).
	QualifiedArn pulumi.StringOutput `pulumi:"qualifiedArn"`
	// Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in `apigateway.Integration`'s `uri`.
	QualifiedInvokeArn pulumi.StringOutput `pulumi:"qualifiedInvokeArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is `false`.
	ReplaceSecurityGroupsOnDestroy pulumi.BoolPtrOutput `pulumi:"replaceSecurityGroupsOnDestroy"`
	// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if `replaceSecurityGroupsOnDestroy` is `true`.
	ReplacementSecurityGroupIds pulumi.StringArrayOutput `pulumi:"replacementSecurityGroupIds"`
	// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`.
	ReservedConcurrentExecutions pulumi.IntPtrOutput `pulumi:"reservedConcurrentExecutions"`
	// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	//
	// The following arguments are optional:
	Role pulumi.StringOutput `pulumi:"role"`
	// Identifier of the function's runtime. Required if `packageType` is `Zip`. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
	Runtime pulumi.StringPtrOutput `pulumi:"runtime"`
	// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `imageUri`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	S3Bucket pulumi.StringPtrOutput `pulumi:"s3Bucket"`
	// S3 key of an object containing the function's deployment package. Required if `s3Bucket` is set.
	S3Key pulumi.StringPtrOutput `pulumi:"s3Key"`
	// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3ObjectVersion pulumi.StringPtrOutput `pulumi:"s3ObjectVersion"`
	// ARN of the signing job.
	SigningJobArn pulumi.StringOutput `pulumi:"signingJobArn"`
	// ARN of the signing profile version.
	SigningProfileVersionArn pulumi.StringOutput `pulumi:"signingProfileVersionArn"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`.
	SkipDestroy pulumi.BoolPtrOutput `pulumi:"skipDestroy"`
	// Configuration block for snap start settings. See below.
	SnapStart FunctionSnapStartPtrOutput `pulumi:"snapStart"`
	// Base64-encoded SHA256 hash of the package file. Used to trigger updates when source code changes.
	SourceCodeHash pulumi.StringOutput `pulumi:"sourceCodeHash"`
	// Size in bytes of the function .zip file.
	SourceCodeSize pulumi.IntOutput `pulumi:"sourceCodeSize"`
	// Key-value map of tags for the Lambda function. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Configuration block for X-Ray tracing. See below.
	TracingConfig FunctionTracingConfigOutput `pulumi:"tracingConfig"`
	// Latest published version of your Lambda Function.
	Version pulumi.StringOutput `pulumi:"version"`
	// Configuration block for VPC. See below.
	VpcConfig FunctionVpcConfigPtrOutput `pulumi:"vpcConfig"`
}

// NewFunction registers a new resource with the given unique name, arguments, and options.
func NewFunction(ctx *pulumi.Context,
	name string, args *FunctionArgs, opts ...pulumi.ResourceOption) (*Function, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Function
	err := ctx.RegisterResource("aws:lambda/function:Function", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunction gets an existing Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionState, opts ...pulumi.ResourceOption) (*Function, error) {
	var resource Function
	err := ctx.ReadResource("aws:lambda/function:Function", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Function resources.
type functionState struct {
	// Instruction set architecture for your Lambda function. Valid values are `["x8664"]` and `["arm64"]`. Default is `["x8664"]`. Removing this attribute, function's architecture stays the same.
	Architectures []string `pulumi:"architectures"`
	// ARN identifying your Lambda Function.
	Arn *string `pulumi:"arn"`
	// Path to the function's deployment package within the local filesystem. Conflicts with `imageUri` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	Code pulumi.Archive `pulumi:"code"`
	// Base64-encoded representation of raw SHA-256 sum of the zip file.
	CodeSha256 *string `pulumi:"codeSha256"`
	// ARN of a code-signing configuration to enable code signing for this function.
	CodeSigningConfigArn *string `pulumi:"codeSigningConfigArn"`
	// Configuration block for dead letter queue. See below.
	DeadLetterConfig *FunctionDeadLetterConfig `pulumi:"deadLetterConfig"`
	// Description of what your Lambda Function does.
	Description *string `pulumi:"description"`
	// Configuration block for environment variables. See below.
	Environment *FunctionEnvironment `pulumi:"environment"`
	// Amount of ephemeral storage (`/tmp`) to allocate for the Lambda Function. See below.
	EphemeralStorage *FunctionEphemeralStorage `pulumi:"ephemeralStorage"`
	// Configuration block for EFS file system. See below.
	FileSystemConfig *FunctionFileSystemConfig `pulumi:"fileSystemConfig"`
	// Function entry point in your code. Required if `packageType` is `Zip`.
	Handler *string `pulumi:"handler"`
	// Container image configuration values. See below.
	ImageConfig *FunctionImageConfig `pulumi:"imageConfig"`
	// ECR image URI containing the function's deployment package. Conflicts with `filename` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	ImageUri *string `pulumi:"imageUri"`
	// ARN to be used for invoking Lambda Function from API Gateway - to be used in `apigateway.Integration`'s `uri`.
	InvokeArn *string `pulumi:"invokeArn"`
	// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Date this resource was last modified.
	LastModified *string `pulumi:"lastModified"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	Layers []string `pulumi:"layers"`
	// Configuration block for advanced logging settings. See below.
	LoggingConfig *FunctionLoggingConfig `pulumi:"loggingConfig"`
	// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
	MemorySize *int `pulumi:"memorySize"`
	// Unique name for your Lambda Function.
	Name *string `pulumi:"name"`
	// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
	PackageType *string `pulumi:"packageType"`
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish *bool `pulumi:"publish"`
	// ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).
	QualifiedArn *string `pulumi:"qualifiedArn"`
	// Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in `apigateway.Integration`'s `uri`.
	QualifiedInvokeArn *string `pulumi:"qualifiedInvokeArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is `false`.
	ReplaceSecurityGroupsOnDestroy *bool `pulumi:"replaceSecurityGroupsOnDestroy"`
	// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if `replaceSecurityGroupsOnDestroy` is `true`.
	ReplacementSecurityGroupIds []string `pulumi:"replacementSecurityGroupIds"`
	// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`.
	ReservedConcurrentExecutions *int `pulumi:"reservedConcurrentExecutions"`
	// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	//
	// The following arguments are optional:
	Role *string `pulumi:"role"`
	// Identifier of the function's runtime. Required if `packageType` is `Zip`. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
	Runtime *string `pulumi:"runtime"`
	// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `imageUri`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	S3Bucket *string `pulumi:"s3Bucket"`
	// S3 key of an object containing the function's deployment package. Required if `s3Bucket` is set.
	S3Key *string `pulumi:"s3Key"`
	// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3ObjectVersion *string `pulumi:"s3ObjectVersion"`
	// ARN of the signing job.
	SigningJobArn *string `pulumi:"signingJobArn"`
	// ARN of the signing profile version.
	SigningProfileVersionArn *string `pulumi:"signingProfileVersionArn"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// Configuration block for snap start settings. See below.
	SnapStart *FunctionSnapStart `pulumi:"snapStart"`
	// Base64-encoded SHA256 hash of the package file. Used to trigger updates when source code changes.
	SourceCodeHash *string `pulumi:"sourceCodeHash"`
	// Size in bytes of the function .zip file.
	SourceCodeSize *int `pulumi:"sourceCodeSize"`
	// Key-value map of tags for the Lambda function. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
	Timeout *int `pulumi:"timeout"`
	// Configuration block for X-Ray tracing. See below.
	TracingConfig *FunctionTracingConfig `pulumi:"tracingConfig"`
	// Latest published version of your Lambda Function.
	Version *string `pulumi:"version"`
	// Configuration block for VPC. See below.
	VpcConfig *FunctionVpcConfig `pulumi:"vpcConfig"`
}

type FunctionState struct {
	// Instruction set architecture for your Lambda function. Valid values are `["x8664"]` and `["arm64"]`. Default is `["x8664"]`. Removing this attribute, function's architecture stays the same.
	Architectures pulumi.StringArrayInput
	// ARN identifying your Lambda Function.
	Arn pulumi.StringPtrInput
	// Path to the function's deployment package within the local filesystem. Conflicts with `imageUri` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	Code pulumi.ArchiveInput
	// Base64-encoded representation of raw SHA-256 sum of the zip file.
	CodeSha256 pulumi.StringPtrInput
	// ARN of a code-signing configuration to enable code signing for this function.
	CodeSigningConfigArn pulumi.StringPtrInput
	// Configuration block for dead letter queue. See below.
	DeadLetterConfig FunctionDeadLetterConfigPtrInput
	// Description of what your Lambda Function does.
	Description pulumi.StringPtrInput
	// Configuration block for environment variables. See below.
	Environment FunctionEnvironmentPtrInput
	// Amount of ephemeral storage (`/tmp`) to allocate for the Lambda Function. See below.
	EphemeralStorage FunctionEphemeralStoragePtrInput
	// Configuration block for EFS file system. See below.
	FileSystemConfig FunctionFileSystemConfigPtrInput
	// Function entry point in your code. Required if `packageType` is `Zip`.
	Handler pulumi.StringPtrInput
	// Container image configuration values. See below.
	ImageConfig FunctionImageConfigPtrInput
	// ECR image URI containing the function's deployment package. Conflicts with `filename` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	ImageUri pulumi.StringPtrInput
	// ARN to be used for invoking Lambda Function from API Gateway - to be used in `apigateway.Integration`'s `uri`.
	InvokeArn pulumi.StringPtrInput
	// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
	KmsKeyArn pulumi.StringPtrInput
	// Date this resource was last modified.
	LastModified pulumi.StringPtrInput
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	Layers pulumi.StringArrayInput
	// Configuration block for advanced logging settings. See below.
	LoggingConfig FunctionLoggingConfigPtrInput
	// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
	MemorySize pulumi.IntPtrInput
	// Unique name for your Lambda Function.
	Name pulumi.StringPtrInput
	// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
	PackageType pulumi.StringPtrInput
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish pulumi.BoolPtrInput
	// ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).
	QualifiedArn pulumi.StringPtrInput
	// Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in `apigateway.Integration`'s `uri`.
	QualifiedInvokeArn pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is `false`.
	ReplaceSecurityGroupsOnDestroy pulumi.BoolPtrInput
	// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if `replaceSecurityGroupsOnDestroy` is `true`.
	ReplacementSecurityGroupIds pulumi.StringArrayInput
	// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`.
	ReservedConcurrentExecutions pulumi.IntPtrInput
	// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	//
	// The following arguments are optional:
	Role pulumi.StringPtrInput
	// Identifier of the function's runtime. Required if `packageType` is `Zip`. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
	Runtime pulumi.StringPtrInput
	// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `imageUri`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	S3Bucket pulumi.StringPtrInput
	// S3 key of an object containing the function's deployment package. Required if `s3Bucket` is set.
	S3Key pulumi.StringPtrInput
	// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3ObjectVersion pulumi.StringPtrInput
	// ARN of the signing job.
	SigningJobArn pulumi.StringPtrInput
	// ARN of the signing profile version.
	SigningProfileVersionArn pulumi.StringPtrInput
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`.
	SkipDestroy pulumi.BoolPtrInput
	// Configuration block for snap start settings. See below.
	SnapStart FunctionSnapStartPtrInput
	// Base64-encoded SHA256 hash of the package file. Used to trigger updates when source code changes.
	SourceCodeHash pulumi.StringPtrInput
	// Size in bytes of the function .zip file.
	SourceCodeSize pulumi.IntPtrInput
	// Key-value map of tags for the Lambda function. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
	Timeout pulumi.IntPtrInput
	// Configuration block for X-Ray tracing. See below.
	TracingConfig FunctionTracingConfigPtrInput
	// Latest published version of your Lambda Function.
	Version pulumi.StringPtrInput
	// Configuration block for VPC. See below.
	VpcConfig FunctionVpcConfigPtrInput
}

func (FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionState)(nil)).Elem()
}

type functionArgs struct {
	// Instruction set architecture for your Lambda function. Valid values are `["x8664"]` and `["arm64"]`. Default is `["x8664"]`. Removing this attribute, function's architecture stays the same.
	Architectures []string `pulumi:"architectures"`
	// Path to the function's deployment package within the local filesystem. Conflicts with `imageUri` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	Code pulumi.Archive `pulumi:"code"`
	// ARN of a code-signing configuration to enable code signing for this function.
	CodeSigningConfigArn *string `pulumi:"codeSigningConfigArn"`
	// Configuration block for dead letter queue. See below.
	DeadLetterConfig *FunctionDeadLetterConfig `pulumi:"deadLetterConfig"`
	// Description of what your Lambda Function does.
	Description *string `pulumi:"description"`
	// Configuration block for environment variables. See below.
	Environment *FunctionEnvironment `pulumi:"environment"`
	// Amount of ephemeral storage (`/tmp`) to allocate for the Lambda Function. See below.
	EphemeralStorage *FunctionEphemeralStorage `pulumi:"ephemeralStorage"`
	// Configuration block for EFS file system. See below.
	FileSystemConfig *FunctionFileSystemConfig `pulumi:"fileSystemConfig"`
	// Function entry point in your code. Required if `packageType` is `Zip`.
	Handler *string `pulumi:"handler"`
	// Container image configuration values. See below.
	ImageConfig *FunctionImageConfig `pulumi:"imageConfig"`
	// ECR image URI containing the function's deployment package. Conflicts with `filename` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	ImageUri *string `pulumi:"imageUri"`
	// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	Layers []string `pulumi:"layers"`
	// Configuration block for advanced logging settings. See below.
	LoggingConfig *FunctionLoggingConfig `pulumi:"loggingConfig"`
	// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
	MemorySize *int `pulumi:"memorySize"`
	// Unique name for your Lambda Function.
	Name *string `pulumi:"name"`
	// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
	PackageType *string `pulumi:"packageType"`
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish *bool `pulumi:"publish"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is `false`.
	ReplaceSecurityGroupsOnDestroy *bool `pulumi:"replaceSecurityGroupsOnDestroy"`
	// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if `replaceSecurityGroupsOnDestroy` is `true`.
	ReplacementSecurityGroupIds []string `pulumi:"replacementSecurityGroupIds"`
	// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`.
	ReservedConcurrentExecutions *int `pulumi:"reservedConcurrentExecutions"`
	// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	//
	// The following arguments are optional:
	Role string `pulumi:"role"`
	// Identifier of the function's runtime. Required if `packageType` is `Zip`. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
	Runtime *string `pulumi:"runtime"`
	// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `imageUri`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	S3Bucket *string `pulumi:"s3Bucket"`
	// S3 key of an object containing the function's deployment package. Required if `s3Bucket` is set.
	S3Key *string `pulumi:"s3Key"`
	// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3ObjectVersion *string `pulumi:"s3ObjectVersion"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// Configuration block for snap start settings. See below.
	SnapStart *FunctionSnapStart `pulumi:"snapStart"`
	// Base64-encoded SHA256 hash of the package file. Used to trigger updates when source code changes.
	SourceCodeHash *string `pulumi:"sourceCodeHash"`
	// Key-value map of tags for the Lambda function. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
	Timeout *int `pulumi:"timeout"`
	// Configuration block for X-Ray tracing. See below.
	TracingConfig *FunctionTracingConfig `pulumi:"tracingConfig"`
	// Configuration block for VPC. See below.
	VpcConfig *FunctionVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Function resource.
type FunctionArgs struct {
	// Instruction set architecture for your Lambda function. Valid values are `["x8664"]` and `["arm64"]`. Default is `["x8664"]`. Removing this attribute, function's architecture stays the same.
	Architectures pulumi.StringArrayInput
	// Path to the function's deployment package within the local filesystem. Conflicts with `imageUri` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	Code pulumi.ArchiveInput
	// ARN of a code-signing configuration to enable code signing for this function.
	CodeSigningConfigArn pulumi.StringPtrInput
	// Configuration block for dead letter queue. See below.
	DeadLetterConfig FunctionDeadLetterConfigPtrInput
	// Description of what your Lambda Function does.
	Description pulumi.StringPtrInput
	// Configuration block for environment variables. See below.
	Environment FunctionEnvironmentPtrInput
	// Amount of ephemeral storage (`/tmp`) to allocate for the Lambda Function. See below.
	EphemeralStorage FunctionEphemeralStoragePtrInput
	// Configuration block for EFS file system. See below.
	FileSystemConfig FunctionFileSystemConfigPtrInput
	// Function entry point in your code. Required if `packageType` is `Zip`.
	Handler pulumi.StringPtrInput
	// Container image configuration values. See below.
	ImageConfig FunctionImageConfigPtrInput
	// ECR image URI containing the function's deployment package. Conflicts with `filename` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	ImageUri pulumi.StringPtrInput
	// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
	KmsKeyArn pulumi.StringPtrInput
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	Layers pulumi.StringArrayInput
	// Configuration block for advanced logging settings. See below.
	LoggingConfig FunctionLoggingConfigPtrInput
	// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
	MemorySize pulumi.IntPtrInput
	// Unique name for your Lambda Function.
	Name pulumi.StringPtrInput
	// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
	PackageType pulumi.StringPtrInput
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish pulumi.BoolPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is `false`.
	ReplaceSecurityGroupsOnDestroy pulumi.BoolPtrInput
	// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if `replaceSecurityGroupsOnDestroy` is `true`.
	ReplacementSecurityGroupIds pulumi.StringArrayInput
	// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`.
	ReservedConcurrentExecutions pulumi.IntPtrInput
	// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	//
	// The following arguments are optional:
	Role pulumi.StringInput
	// Identifier of the function's runtime. Required if `packageType` is `Zip`. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
	Runtime pulumi.StringPtrInput
	// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `imageUri`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
	S3Bucket pulumi.StringPtrInput
	// S3 key of an object containing the function's deployment package. Required if `s3Bucket` is set.
	S3Key pulumi.StringPtrInput
	// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3ObjectVersion pulumi.StringPtrInput
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`.
	SkipDestroy pulumi.BoolPtrInput
	// Configuration block for snap start settings. See below.
	SnapStart FunctionSnapStartPtrInput
	// Base64-encoded SHA256 hash of the package file. Used to trigger updates when source code changes.
	SourceCodeHash pulumi.StringPtrInput
	// Key-value map of tags for the Lambda function. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
	Timeout pulumi.IntPtrInput
	// Configuration block for X-Ray tracing. See below.
	TracingConfig FunctionTracingConfigPtrInput
	// Configuration block for VPC. See below.
	VpcConfig FunctionVpcConfigPtrInput
}

func (FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionArgs)(nil)).Elem()
}

type FunctionInput interface {
	pulumi.Input

	ToFunctionOutput() FunctionOutput
	ToFunctionOutputWithContext(ctx context.Context) FunctionOutput
}

func (*Function) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (i *Function) ToFunctionOutput() FunctionOutput {
	return i.ToFunctionOutputWithContext(context.Background())
}

func (i *Function) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionOutput)
}

// FunctionArrayInput is an input type that accepts FunctionArray and FunctionArrayOutput values.
// You can construct a concrete instance of `FunctionArrayInput` via:
//
//	FunctionArray{ FunctionArgs{...} }
type FunctionArrayInput interface {
	pulumi.Input

	ToFunctionArrayOutput() FunctionArrayOutput
	ToFunctionArrayOutputWithContext(context.Context) FunctionArrayOutput
}

type FunctionArray []FunctionInput

func (FunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (i FunctionArray) ToFunctionArrayOutput() FunctionArrayOutput {
	return i.ToFunctionArrayOutputWithContext(context.Background())
}

func (i FunctionArray) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArrayOutput)
}

// FunctionMapInput is an input type that accepts FunctionMap and FunctionMapOutput values.
// You can construct a concrete instance of `FunctionMapInput` via:
//
//	FunctionMap{ "key": FunctionArgs{...} }
type FunctionMapInput interface {
	pulumi.Input

	ToFunctionMapOutput() FunctionMapOutput
	ToFunctionMapOutputWithContext(context.Context) FunctionMapOutput
}

type FunctionMap map[string]FunctionInput

func (FunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (i FunctionMap) ToFunctionMapOutput() FunctionMapOutput {
	return i.ToFunctionMapOutputWithContext(context.Background())
}

func (i FunctionMap) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionMapOutput)
}

type FunctionOutput struct{ *pulumi.OutputState }

func (FunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (o FunctionOutput) ToFunctionOutput() FunctionOutput {
	return o
}

func (o FunctionOutput) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return o
}

// Instruction set architecture for your Lambda function. Valid values are `["x8664"]` and `["arm64"]`. Default is `["x8664"]`. Removing this attribute, function's architecture stays the same.
func (o FunctionOutput) Architectures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Function) pulumi.StringArrayOutput { return v.Architectures }).(pulumi.StringArrayOutput)
}

// ARN identifying your Lambda Function.
func (o FunctionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Path to the function's deployment package within the local filesystem. Conflicts with `imageUri` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
func (o FunctionOutput) Code() pulumi.ArchiveOutput {
	return o.ApplyT(func(v *Function) pulumi.ArchiveOutput { return v.Code }).(pulumi.ArchiveOutput)
}

// Base64-encoded representation of raw SHA-256 sum of the zip file.
func (o FunctionOutput) CodeSha256() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.CodeSha256 }).(pulumi.StringOutput)
}

// ARN of a code-signing configuration to enable code signing for this function.
func (o FunctionOutput) CodeSigningConfigArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.CodeSigningConfigArn }).(pulumi.StringPtrOutput)
}

// Configuration block for dead letter queue. See below.
func (o FunctionOutput) DeadLetterConfig() FunctionDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v *Function) FunctionDeadLetterConfigPtrOutput { return v.DeadLetterConfig }).(FunctionDeadLetterConfigPtrOutput)
}

// Description of what your Lambda Function does.
func (o FunctionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Configuration block for environment variables. See below.
func (o FunctionOutput) Environment() FunctionEnvironmentPtrOutput {
	return o.ApplyT(func(v *Function) FunctionEnvironmentPtrOutput { return v.Environment }).(FunctionEnvironmentPtrOutput)
}

// Amount of ephemeral storage (`/tmp`) to allocate for the Lambda Function. See below.
func (o FunctionOutput) EphemeralStorage() FunctionEphemeralStorageOutput {
	return o.ApplyT(func(v *Function) FunctionEphemeralStorageOutput { return v.EphemeralStorage }).(FunctionEphemeralStorageOutput)
}

// Configuration block for EFS file system. See below.
func (o FunctionOutput) FileSystemConfig() FunctionFileSystemConfigPtrOutput {
	return o.ApplyT(func(v *Function) FunctionFileSystemConfigPtrOutput { return v.FileSystemConfig }).(FunctionFileSystemConfigPtrOutput)
}

// Function entry point in your code. Required if `packageType` is `Zip`.
func (o FunctionOutput) Handler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.Handler }).(pulumi.StringPtrOutput)
}

// Container image configuration values. See below.
func (o FunctionOutput) ImageConfig() FunctionImageConfigPtrOutput {
	return o.ApplyT(func(v *Function) FunctionImageConfigPtrOutput { return v.ImageConfig }).(FunctionImageConfigPtrOutput)
}

// ECR image URI containing the function's deployment package. Conflicts with `filename` and `s3Bucket`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
func (o FunctionOutput) ImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.ImageUri }).(pulumi.StringPtrOutput)
}

// ARN to be used for invoking Lambda Function from API Gateway - to be used in `apigateway.Integration`'s `uri`.
func (o FunctionOutput) InvokeArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.InvokeArn }).(pulumi.StringOutput)
}

// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
func (o FunctionOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// Date this resource was last modified.
func (o FunctionOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
func (o FunctionOutput) Layers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Function) pulumi.StringArrayOutput { return v.Layers }).(pulumi.StringArrayOutput)
}

// Configuration block for advanced logging settings. See below.
func (o FunctionOutput) LoggingConfig() FunctionLoggingConfigOutput {
	return o.ApplyT(func(v *Function) FunctionLoggingConfigOutput { return v.LoggingConfig }).(FunctionLoggingConfigOutput)
}

// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
func (o FunctionOutput) MemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.IntPtrOutput { return v.MemorySize }).(pulumi.IntPtrOutput)
}

// Unique name for your Lambda Function.
func (o FunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
func (o FunctionOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.PackageType }).(pulumi.StringPtrOutput)
}

// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
func (o FunctionOutput) Publish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.BoolPtrOutput { return v.Publish }).(pulumi.BoolPtrOutput)
}

// ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).
func (o FunctionOutput) QualifiedArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.QualifiedArn }).(pulumi.StringOutput)
}

// Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in `apigateway.Integration`'s `uri`.
func (o FunctionOutput) QualifiedInvokeArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.QualifiedInvokeArn }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o FunctionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is `false`.
func (o FunctionOutput) ReplaceSecurityGroupsOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.BoolPtrOutput { return v.ReplaceSecurityGroupsOnDestroy }).(pulumi.BoolPtrOutput)
}

// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if `replaceSecurityGroupsOnDestroy` is `true`.
func (o FunctionOutput) ReplacementSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Function) pulumi.StringArrayOutput { return v.ReplacementSecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`.
func (o FunctionOutput) ReservedConcurrentExecutions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.IntPtrOutput { return v.ReservedConcurrentExecutions }).(pulumi.IntPtrOutput)
}

// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
//
// The following arguments are optional:
func (o FunctionOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Identifier of the function's runtime. Required if `packageType` is `Zip`. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
func (o FunctionOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.Runtime }).(pulumi.StringPtrOutput)
}

// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `imageUri`. One of `filename`, `imageUri`, or `s3Bucket` must be specified.
func (o FunctionOutput) S3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.S3Bucket }).(pulumi.StringPtrOutput)
}

// S3 key of an object containing the function's deployment package. Required if `s3Bucket` is set.
func (o FunctionOutput) S3Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.S3Key }).(pulumi.StringPtrOutput)
}

// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
func (o FunctionOutput) S3ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.S3ObjectVersion }).(pulumi.StringPtrOutput)
}

// ARN of the signing job.
func (o FunctionOutput) SigningJobArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.SigningJobArn }).(pulumi.StringOutput)
}

// ARN of the signing profile version.
func (o FunctionOutput) SigningProfileVersionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.SigningProfileVersionArn }).(pulumi.StringOutput)
}

// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`.
func (o FunctionOutput) SkipDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.BoolPtrOutput { return v.SkipDestroy }).(pulumi.BoolPtrOutput)
}

// Configuration block for snap start settings. See below.
func (o FunctionOutput) SnapStart() FunctionSnapStartPtrOutput {
	return o.ApplyT(func(v *Function) FunctionSnapStartPtrOutput { return v.SnapStart }).(FunctionSnapStartPtrOutput)
}

// Base64-encoded SHA256 hash of the package file. Used to trigger updates when source code changes.
func (o FunctionOutput) SourceCodeHash() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.SourceCodeHash }).(pulumi.StringOutput)
}

// Size in bytes of the function .zip file.
func (o FunctionOutput) SourceCodeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.SourceCodeSize }).(pulumi.IntOutput)
}

// Key-value map of tags for the Lambda function. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FunctionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Function) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o FunctionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Function) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
func (o FunctionOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Configuration block for X-Ray tracing. See below.
func (o FunctionOutput) TracingConfig() FunctionTracingConfigOutput {
	return o.ApplyT(func(v *Function) FunctionTracingConfigOutput { return v.TracingConfig }).(FunctionTracingConfigOutput)
}

// Latest published version of your Lambda Function.
func (o FunctionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Configuration block for VPC. See below.
func (o FunctionOutput) VpcConfig() FunctionVpcConfigPtrOutput {
	return o.ApplyT(func(v *Function) FunctionVpcConfigPtrOutput { return v.VpcConfig }).(FunctionVpcConfigPtrOutput)
}

type FunctionArrayOutput struct{ *pulumi.OutputState }

func (FunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (o FunctionArrayOutput) ToFunctionArrayOutput() FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) Index(i pulumi.IntInput) FunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Function {
		return vs[0].([]*Function)[vs[1].(int)]
	}).(FunctionOutput)
}

type FunctionMapOutput struct{ *pulumi.OutputState }

func (FunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (o FunctionMapOutput) ToFunctionMapOutput() FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) MapIndex(k pulumi.StringInput) FunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Function {
		return vs[0].(map[string]*Function)[vs[1].(string)]
	}).(FunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionInput)(nil)).Elem(), &Function{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArrayInput)(nil)).Elem(), FunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionMapInput)(nil)).Elem(), FunctionMap{})
	pulumi.RegisterOutputType(FunctionOutput{})
	pulumi.RegisterOutputType(FunctionArrayOutput{})
	pulumi.RegisterOutputType(FunctionMapOutput{})
}
