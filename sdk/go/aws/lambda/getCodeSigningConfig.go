// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides details about an AWS Lambda Code Signing Config. Use this data source to retrieve information about an existing code signing configuration for Lambda functions to ensure code integrity and authenticity.
//
// For information about Lambda code signing configurations and how to use them, see [configuring code signing for Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html).
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := lambda.LookupCodeSigningConfig(ctx, &lambda.LookupCodeSigningConfigArgs{
//				Arn: "arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-0f6c334abcdea4d8b",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("configDetails", pulumi.StringMap{
//				"configId":    example.ConfigId,
//				"description": example.Description,
//				"policy":      example.Policies[0].UntrustedArtifactOnDeployment,
//			})
//			return nil
//		})
//	}
//
// ```
//
// ### Use in Lambda Function
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Get existing code signing configuration
//			securityConfig, err := lambda.LookupCodeSigningConfig(ctx, &lambda.LookupCodeSigningConfigArgs{
//				Arn: codeSigningConfigArn,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create Lambda function with code signing
//			_, err = lambda.NewFunction(ctx, "example", &lambda.FunctionArgs{
//				Code:                 pulumi.NewFileArchive("function.zip"),
//				Name:                 pulumi.String("secure-function"),
//				Role:                 pulumi.Any(lambdaRole.Arn),
//				Handler:              pulumi.String("index.handler"),
//				Runtime:              pulumi.String(lambda.RuntimeNodeJS20dX),
//				CodeSigningConfigArn: pulumi.String(securityConfig.Arn),
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("production"),
//					"Security":    pulumi.String("code-signed"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Multi-Environment Configuration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/lambda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Production code signing config
//			prod, err := lambda.LookupCodeSigningConfig(ctx, &lambda.LookupCodeSigningConfigArgs{
//				Arn: "arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-prod-123",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Development code signing config
//			dev, err := lambda.LookupCodeSigningConfig(ctx, &lambda.LookupCodeSigningConfigArgs{
//				Arn: "arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-dev-456",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			prodPolicy := prod.Policies[0].UntrustedArtifactOnDeployment
//			devPolicy := dev.Policies[0].UntrustedArtifactOnDeployment
//			configComparison := map[string]interface{}{
//				"prodEnforcement": prodPolicy,
//				"devEnforcement":  devPolicy,
//				"policiesMatch":   prodPolicy == devPolicy,
//			}
//			ctx.Export("environmentComparison", configComparison)
//			return nil
//		})
//	}
//
// ```
func LookupCodeSigningConfig(ctx *pulumi.Context, args *LookupCodeSigningConfigArgs, opts ...pulumi.InvokeOption) (*LookupCodeSigningConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCodeSigningConfigResult
	err := ctx.Invoke("aws:lambda/getCodeSigningConfig:getCodeSigningConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCodeSigningConfig.
type LookupCodeSigningConfigArgs struct {
	// ARN of the code signing configuration.
	//
	// The following arguments are optional:
	Arn string `pulumi:"arn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getCodeSigningConfig.
type LookupCodeSigningConfigResult struct {
	// List of allowed publishers as signing profiles for this code signing configuration. See below.
	AllowedPublishers []GetCodeSigningConfigAllowedPublisher `pulumi:"allowedPublishers"`
	Arn               string                                 `pulumi:"arn"`
	// Unique identifier for the code signing configuration.
	ConfigId string `pulumi:"configId"`
	// Code signing configuration description.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Date and time that the code signing configuration was last modified.
	LastModified string `pulumi:"lastModified"`
	// List of code signing policies that control the validation failure action for signature mismatch or expiry. See below.
	Policies []GetCodeSigningConfigPolicy `pulumi:"policies"`
	Region   string                       `pulumi:"region"`
}

func LookupCodeSigningConfigOutput(ctx *pulumi.Context, args LookupCodeSigningConfigOutputArgs, opts ...pulumi.InvokeOption) LookupCodeSigningConfigResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCodeSigningConfigResultOutput, error) {
			args := v.(LookupCodeSigningConfigArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws:lambda/getCodeSigningConfig:getCodeSigningConfig", args, LookupCodeSigningConfigResultOutput{}, options).(LookupCodeSigningConfigResultOutput), nil
		}).(LookupCodeSigningConfigResultOutput)
}

// A collection of arguments for invoking getCodeSigningConfig.
type LookupCodeSigningConfigOutputArgs struct {
	// ARN of the code signing configuration.
	//
	// The following arguments are optional:
	Arn pulumi.StringInput `pulumi:"arn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupCodeSigningConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCodeSigningConfigArgs)(nil)).Elem()
}

// A collection of values returned by getCodeSigningConfig.
type LookupCodeSigningConfigResultOutput struct{ *pulumi.OutputState }

func (LookupCodeSigningConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCodeSigningConfigResult)(nil)).Elem()
}

func (o LookupCodeSigningConfigResultOutput) ToLookupCodeSigningConfigResultOutput() LookupCodeSigningConfigResultOutput {
	return o
}

func (o LookupCodeSigningConfigResultOutput) ToLookupCodeSigningConfigResultOutputWithContext(ctx context.Context) LookupCodeSigningConfigResultOutput {
	return o
}

// List of allowed publishers as signing profiles for this code signing configuration. See below.
func (o LookupCodeSigningConfigResultOutput) AllowedPublishers() GetCodeSigningConfigAllowedPublisherArrayOutput {
	return o.ApplyT(func(v LookupCodeSigningConfigResult) []GetCodeSigningConfigAllowedPublisher {
		return v.AllowedPublishers
	}).(GetCodeSigningConfigAllowedPublisherArrayOutput)
}

func (o LookupCodeSigningConfigResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCodeSigningConfigResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Unique identifier for the code signing configuration.
func (o LookupCodeSigningConfigResultOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCodeSigningConfigResult) string { return v.ConfigId }).(pulumi.StringOutput)
}

// Code signing configuration description.
func (o LookupCodeSigningConfigResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCodeSigningConfigResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCodeSigningConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCodeSigningConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// Date and time that the code signing configuration was last modified.
func (o LookupCodeSigningConfigResultOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCodeSigningConfigResult) string { return v.LastModified }).(pulumi.StringOutput)
}

// List of code signing policies that control the validation failure action for signature mismatch or expiry. See below.
func (o LookupCodeSigningConfigResultOutput) Policies() GetCodeSigningConfigPolicyArrayOutput {
	return o.ApplyT(func(v LookupCodeSigningConfigResult) []GetCodeSigningConfigPolicy { return v.Policies }).(GetCodeSigningConfigPolicyArrayOutput)
}

func (o LookupCodeSigningConfigResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCodeSigningConfigResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCodeSigningConfigResultOutput{})
}
