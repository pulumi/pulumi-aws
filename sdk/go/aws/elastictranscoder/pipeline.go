// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elastictranscoder

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Pipeline struct {
	pulumi.CustomResourceState

	Arn                        pulumi.StringOutput                          `pulumi:"arn"`
	AwsKmsKeyArn               pulumi.StringPtrOutput                       `pulumi:"awsKmsKeyArn"`
	ContentConfig              PipelineContentConfigOutput                  `pulumi:"contentConfig"`
	ContentConfigPermissions   PipelineContentConfigPermissionArrayOutput   `pulumi:"contentConfigPermissions"`
	InputBucket                pulumi.StringOutput                          `pulumi:"inputBucket"`
	Name                       pulumi.StringOutput                          `pulumi:"name"`
	Notifications              PipelineNotificationsPtrOutput               `pulumi:"notifications"`
	OutputBucket               pulumi.StringOutput                          `pulumi:"outputBucket"`
	Role                       pulumi.StringOutput                          `pulumi:"role"`
	ThumbnailConfig            PipelineThumbnailConfigOutput                `pulumi:"thumbnailConfig"`
	ThumbnailConfigPermissions PipelineThumbnailConfigPermissionArrayOutput `pulumi:"thumbnailConfigPermissions"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InputBucket == nil {
		return nil, errors.New("invalid value for required argument 'InputBucket'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource Pipeline
	err := ctx.RegisterResource("aws:elastictranscoder/pipeline:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("aws:elastictranscoder/pipeline:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
	Arn                        *string                             `pulumi:"arn"`
	AwsKmsKeyArn               *string                             `pulumi:"awsKmsKeyArn"`
	ContentConfig              *PipelineContentConfig              `pulumi:"contentConfig"`
	ContentConfigPermissions   []PipelineContentConfigPermission   `pulumi:"contentConfigPermissions"`
	InputBucket                *string                             `pulumi:"inputBucket"`
	Name                       *string                             `pulumi:"name"`
	Notifications              *PipelineNotifications              `pulumi:"notifications"`
	OutputBucket               *string                             `pulumi:"outputBucket"`
	Role                       *string                             `pulumi:"role"`
	ThumbnailConfig            *PipelineThumbnailConfig            `pulumi:"thumbnailConfig"`
	ThumbnailConfigPermissions []PipelineThumbnailConfigPermission `pulumi:"thumbnailConfigPermissions"`
}

type PipelineState struct {
	Arn                        pulumi.StringPtrInput
	AwsKmsKeyArn               pulumi.StringPtrInput
	ContentConfig              PipelineContentConfigPtrInput
	ContentConfigPermissions   PipelineContentConfigPermissionArrayInput
	InputBucket                pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	Notifications              PipelineNotificationsPtrInput
	OutputBucket               pulumi.StringPtrInput
	Role                       pulumi.StringPtrInput
	ThumbnailConfig            PipelineThumbnailConfigPtrInput
	ThumbnailConfigPermissions PipelineThumbnailConfigPermissionArrayInput
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	AwsKmsKeyArn               *string                             `pulumi:"awsKmsKeyArn"`
	ContentConfig              *PipelineContentConfig              `pulumi:"contentConfig"`
	ContentConfigPermissions   []PipelineContentConfigPermission   `pulumi:"contentConfigPermissions"`
	InputBucket                string                              `pulumi:"inputBucket"`
	Name                       *string                             `pulumi:"name"`
	Notifications              *PipelineNotifications              `pulumi:"notifications"`
	OutputBucket               *string                             `pulumi:"outputBucket"`
	Role                       string                              `pulumi:"role"`
	ThumbnailConfig            *PipelineThumbnailConfig            `pulumi:"thumbnailConfig"`
	ThumbnailConfigPermissions []PipelineThumbnailConfigPermission `pulumi:"thumbnailConfigPermissions"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	AwsKmsKeyArn               pulumi.StringPtrInput
	ContentConfig              PipelineContentConfigPtrInput
	ContentConfigPermissions   PipelineContentConfigPermissionArrayInput
	InputBucket                pulumi.StringInput
	Name                       pulumi.StringPtrInput
	Notifications              PipelineNotificationsPtrInput
	OutputBucket               pulumi.StringPtrInput
	Role                       pulumi.StringInput
	ThumbnailConfig            PipelineThumbnailConfigPtrInput
	ThumbnailConfigPermissions PipelineThumbnailConfigPermissionArrayInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

// PipelineArrayInput is an input type that accepts PipelineArray and PipelineArrayOutput values.
// You can construct a concrete instance of `PipelineArrayInput` via:
//
//	PipelineArray{ PipelineArgs{...} }
type PipelineArrayInput interface {
	pulumi.Input

	ToPipelineArrayOutput() PipelineArrayOutput
	ToPipelineArrayOutputWithContext(context.Context) PipelineArrayOutput
}

type PipelineArray []PipelineInput

func (PipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (i PipelineArray) ToPipelineArrayOutput() PipelineArrayOutput {
	return i.ToPipelineArrayOutputWithContext(context.Background())
}

func (i PipelineArray) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArrayOutput)
}

// PipelineMapInput is an input type that accepts PipelineMap and PipelineMapOutput values.
// You can construct a concrete instance of `PipelineMapInput` via:
//
//	PipelineMap{ "key": PipelineArgs{...} }
type PipelineMapInput interface {
	pulumi.Input

	ToPipelineMapOutput() PipelineMapOutput
	ToPipelineMapOutputWithContext(context.Context) PipelineMapOutput
}

type PipelineMap map[string]PipelineInput

func (PipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (i PipelineMap) ToPipelineMapOutput() PipelineMapOutput {
	return i.ToPipelineMapOutputWithContext(context.Background())
}

func (i PipelineMap) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineMapOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

func (o PipelineOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o PipelineOutput) AwsKmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.AwsKmsKeyArn }).(pulumi.StringPtrOutput)
}

func (o PipelineOutput) ContentConfig() PipelineContentConfigOutput {
	return o.ApplyT(func(v *Pipeline) PipelineContentConfigOutput { return v.ContentConfig }).(PipelineContentConfigOutput)
}

func (o PipelineOutput) ContentConfigPermissions() PipelineContentConfigPermissionArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineContentConfigPermissionArrayOutput { return v.ContentConfigPermissions }).(PipelineContentConfigPermissionArrayOutput)
}

func (o PipelineOutput) InputBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.InputBucket }).(pulumi.StringOutput)
}

func (o PipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PipelineOutput) Notifications() PipelineNotificationsPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineNotificationsPtrOutput { return v.Notifications }).(PipelineNotificationsPtrOutput)
}

func (o PipelineOutput) OutputBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.OutputBucket }).(pulumi.StringOutput)
}

func (o PipelineOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o PipelineOutput) ThumbnailConfig() PipelineThumbnailConfigOutput {
	return o.ApplyT(func(v *Pipeline) PipelineThumbnailConfigOutput { return v.ThumbnailConfig }).(PipelineThumbnailConfigOutput)
}

func (o PipelineOutput) ThumbnailConfigPermissions() PipelineThumbnailConfigPermissionArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineThumbnailConfigPermissionArrayOutput { return v.ThumbnailConfigPermissions }).(PipelineThumbnailConfigPermissionArrayOutput)
}

type PipelineArrayOutput struct{ *pulumi.OutputState }

func (PipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (o PipelineArrayOutput) ToPipelineArrayOutput() PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) Index(i pulumi.IntInput) PipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].([]*Pipeline)[vs[1].(int)]
	}).(PipelineOutput)
}

type PipelineMapOutput struct{ *pulumi.OutputState }

func (PipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (o PipelineMapOutput) ToPipelineMapOutput() PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) MapIndex(k pulumi.StringInput) PipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].(map[string]*Pipeline)[vs[1].(string)]
	}).(PipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInput)(nil)).Elem(), &Pipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineArrayInput)(nil)).Elem(), PipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineMapInput)(nil)).Elem(), PipelineMap{})
	pulumi.RegisterOutputType(PipelineOutput{})
	pulumi.RegisterOutputType(PipelineArrayOutput{})
	pulumi.RegisterOutputType(PipelineMapOutput{})
}
