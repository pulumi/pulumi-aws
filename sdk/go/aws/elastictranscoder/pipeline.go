// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elastictranscoder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Elastic Transcoder pipeline resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/elastictranscoder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := elastictranscoder.NewPipeline(ctx, "bar", &elastictranscoder.PipelineArgs{
//				InputBucket: pulumi.Any(aws_s3_bucket.Input_bucket.Id),
//				Role:        pulumi.Any(aws_iam_role.Test_role.Arn),
//				ContentConfig: &elastictranscoder.PipelineContentConfigArgs{
//					Bucket:       pulumi.Any(aws_s3_bucket.Content_bucket.Id),
//					StorageClass: pulumi.String("Standard"),
//				},
//				ThumbnailConfig: &elastictranscoder.PipelineThumbnailConfigArgs{
//					Bucket:       pulumi.Any(aws_s3_bucket.Thumb_bucket.Id),
//					StorageClass: pulumi.String("Standard"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Elastic Transcoder pipelines can be imported using the `id`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:elastictranscoder/pipeline:Pipeline basic_pipeline 1407981661351-cttk8b
//
// ```
type Pipeline struct {
	pulumi.CustomResourceState

	// The ARN of the Elastictranscoder pipeline.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
	AwsKmsKeyArn pulumi.StringPtrOutput `pulumi:"awsKmsKeyArn"`
	// The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
	ContentConfig PipelineContentConfigOutput `pulumi:"contentConfig"`
	// The permissions for the `contentConfig` object. (documented below)
	ContentConfigPermissions PipelineContentConfigPermissionArrayOutput `pulumi:"contentConfigPermissions"`
	// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
	InputBucket pulumi.StringOutput `pulumi:"inputBucket"`
	// The name of the pipeline. Maximum 40 characters
	Name pulumi.StringOutput `pulumi:"name"`
	// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
	Notifications PipelineNotificationsPtrOutput `pulumi:"notifications"`
	// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
	OutputBucket pulumi.StringOutput `pulumi:"outputBucket"`
	// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
	Role pulumi.StringOutput `pulumi:"role"`
	// The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
	ThumbnailConfig PipelineThumbnailConfigOutput `pulumi:"thumbnailConfig"`
	// The permissions for the `thumbnailConfig` object. (documented below)
	//
	// The `contentConfig` object specifies information about the Amazon S3 bucket in
	// which you want Elastic Transcoder to save transcoded files and playlists: which
	// bucket to use, and the storage class that you want to assign to the files. If
	// you specify values for `contentConfig`, you must also specify values for
	// `thumbnailConfig`. If you specify values for `contentConfig` and
	// `thumbnailConfig`, omit the `outputBucket` object.
	ThumbnailConfigPermissions PipelineThumbnailConfigPermissionArrayOutput `pulumi:"thumbnailConfigPermissions"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InputBucket == nil {
		return nil, errors.New("invalid value for required argument 'InputBucket'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource Pipeline
	err := ctx.RegisterResource("aws:elastictranscoder/pipeline:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("aws:elastictranscoder/pipeline:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
	// The ARN of the Elastictranscoder pipeline.
	Arn *string `pulumi:"arn"`
	// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
	AwsKmsKeyArn *string `pulumi:"awsKmsKeyArn"`
	// The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
	ContentConfig *PipelineContentConfig `pulumi:"contentConfig"`
	// The permissions for the `contentConfig` object. (documented below)
	ContentConfigPermissions []PipelineContentConfigPermission `pulumi:"contentConfigPermissions"`
	// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
	InputBucket *string `pulumi:"inputBucket"`
	// The name of the pipeline. Maximum 40 characters
	Name *string `pulumi:"name"`
	// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
	Notifications *PipelineNotifications `pulumi:"notifications"`
	// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
	OutputBucket *string `pulumi:"outputBucket"`
	// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
	Role *string `pulumi:"role"`
	// The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
	ThumbnailConfig *PipelineThumbnailConfig `pulumi:"thumbnailConfig"`
	// The permissions for the `thumbnailConfig` object. (documented below)
	//
	// The `contentConfig` object specifies information about the Amazon S3 bucket in
	// which you want Elastic Transcoder to save transcoded files and playlists: which
	// bucket to use, and the storage class that you want to assign to the files. If
	// you specify values for `contentConfig`, you must also specify values for
	// `thumbnailConfig`. If you specify values for `contentConfig` and
	// `thumbnailConfig`, omit the `outputBucket` object.
	ThumbnailConfigPermissions []PipelineThumbnailConfigPermission `pulumi:"thumbnailConfigPermissions"`
}

type PipelineState struct {
	// The ARN of the Elastictranscoder pipeline.
	Arn pulumi.StringPtrInput
	// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
	AwsKmsKeyArn pulumi.StringPtrInput
	// The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
	ContentConfig PipelineContentConfigPtrInput
	// The permissions for the `contentConfig` object. (documented below)
	ContentConfigPermissions PipelineContentConfigPermissionArrayInput
	// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
	InputBucket pulumi.StringPtrInput
	// The name of the pipeline. Maximum 40 characters
	Name pulumi.StringPtrInput
	// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
	Notifications PipelineNotificationsPtrInput
	// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
	OutputBucket pulumi.StringPtrInput
	// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
	Role pulumi.StringPtrInput
	// The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
	ThumbnailConfig PipelineThumbnailConfigPtrInput
	// The permissions for the `thumbnailConfig` object. (documented below)
	//
	// The `contentConfig` object specifies information about the Amazon S3 bucket in
	// which you want Elastic Transcoder to save transcoded files and playlists: which
	// bucket to use, and the storage class that you want to assign to the files. If
	// you specify values for `contentConfig`, you must also specify values for
	// `thumbnailConfig`. If you specify values for `contentConfig` and
	// `thumbnailConfig`, omit the `outputBucket` object.
	ThumbnailConfigPermissions PipelineThumbnailConfigPermissionArrayInput
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
	AwsKmsKeyArn *string `pulumi:"awsKmsKeyArn"`
	// The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
	ContentConfig *PipelineContentConfig `pulumi:"contentConfig"`
	// The permissions for the `contentConfig` object. (documented below)
	ContentConfigPermissions []PipelineContentConfigPermission `pulumi:"contentConfigPermissions"`
	// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
	InputBucket string `pulumi:"inputBucket"`
	// The name of the pipeline. Maximum 40 characters
	Name *string `pulumi:"name"`
	// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
	Notifications *PipelineNotifications `pulumi:"notifications"`
	// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
	OutputBucket *string `pulumi:"outputBucket"`
	// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
	Role string `pulumi:"role"`
	// The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
	ThumbnailConfig *PipelineThumbnailConfig `pulumi:"thumbnailConfig"`
	// The permissions for the `thumbnailConfig` object. (documented below)
	//
	// The `contentConfig` object specifies information about the Amazon S3 bucket in
	// which you want Elastic Transcoder to save transcoded files and playlists: which
	// bucket to use, and the storage class that you want to assign to the files. If
	// you specify values for `contentConfig`, you must also specify values for
	// `thumbnailConfig`. If you specify values for `contentConfig` and
	// `thumbnailConfig`, omit the `outputBucket` object.
	ThumbnailConfigPermissions []PipelineThumbnailConfigPermission `pulumi:"thumbnailConfigPermissions"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
	AwsKmsKeyArn pulumi.StringPtrInput
	// The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
	ContentConfig PipelineContentConfigPtrInput
	// The permissions for the `contentConfig` object. (documented below)
	ContentConfigPermissions PipelineContentConfigPermissionArrayInput
	// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
	InputBucket pulumi.StringInput
	// The name of the pipeline. Maximum 40 characters
	Name pulumi.StringPtrInput
	// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
	Notifications PipelineNotificationsPtrInput
	// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
	OutputBucket pulumi.StringPtrInput
	// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
	Role pulumi.StringInput
	// The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
	ThumbnailConfig PipelineThumbnailConfigPtrInput
	// The permissions for the `thumbnailConfig` object. (documented below)
	//
	// The `contentConfig` object specifies information about the Amazon S3 bucket in
	// which you want Elastic Transcoder to save transcoded files and playlists: which
	// bucket to use, and the storage class that you want to assign to the files. If
	// you specify values for `contentConfig`, you must also specify values for
	// `thumbnailConfig`. If you specify values for `contentConfig` and
	// `thumbnailConfig`, omit the `outputBucket` object.
	ThumbnailConfigPermissions PipelineThumbnailConfigPermissionArrayInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

// PipelineArrayInput is an input type that accepts PipelineArray and PipelineArrayOutput values.
// You can construct a concrete instance of `PipelineArrayInput` via:
//
//	PipelineArray{ PipelineArgs{...} }
type PipelineArrayInput interface {
	pulumi.Input

	ToPipelineArrayOutput() PipelineArrayOutput
	ToPipelineArrayOutputWithContext(context.Context) PipelineArrayOutput
}

type PipelineArray []PipelineInput

func (PipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (i PipelineArray) ToPipelineArrayOutput() PipelineArrayOutput {
	return i.ToPipelineArrayOutputWithContext(context.Background())
}

func (i PipelineArray) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArrayOutput)
}

// PipelineMapInput is an input type that accepts PipelineMap and PipelineMapOutput values.
// You can construct a concrete instance of `PipelineMapInput` via:
//
//	PipelineMap{ "key": PipelineArgs{...} }
type PipelineMapInput interface {
	pulumi.Input

	ToPipelineMapOutput() PipelineMapOutput
	ToPipelineMapOutputWithContext(context.Context) PipelineMapOutput
}

type PipelineMap map[string]PipelineInput

func (PipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (i PipelineMap) ToPipelineMapOutput() PipelineMapOutput {
	return i.ToPipelineMapOutputWithContext(context.Background())
}

func (i PipelineMap) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineMapOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

// The ARN of the Elastictranscoder pipeline.
func (o PipelineOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
func (o PipelineOutput) AwsKmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.AwsKmsKeyArn }).(pulumi.StringPtrOutput)
}

// The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
func (o PipelineOutput) ContentConfig() PipelineContentConfigOutput {
	return o.ApplyT(func(v *Pipeline) PipelineContentConfigOutput { return v.ContentConfig }).(PipelineContentConfigOutput)
}

// The permissions for the `contentConfig` object. (documented below)
func (o PipelineOutput) ContentConfigPermissions() PipelineContentConfigPermissionArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineContentConfigPermissionArrayOutput { return v.ContentConfigPermissions }).(PipelineContentConfigPermissionArrayOutput)
}

// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
func (o PipelineOutput) InputBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.InputBucket }).(pulumi.StringOutput)
}

// The name of the pipeline. Maximum 40 characters
func (o PipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
func (o PipelineOutput) Notifications() PipelineNotificationsPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineNotificationsPtrOutput { return v.Notifications }).(PipelineNotificationsPtrOutput)
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
func (o PipelineOutput) OutputBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.OutputBucket }).(pulumi.StringOutput)
}

// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
func (o PipelineOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
func (o PipelineOutput) ThumbnailConfig() PipelineThumbnailConfigOutput {
	return o.ApplyT(func(v *Pipeline) PipelineThumbnailConfigOutput { return v.ThumbnailConfig }).(PipelineThumbnailConfigOutput)
}

// The permissions for the `thumbnailConfig` object. (documented below)
//
// The `contentConfig` object specifies information about the Amazon S3 bucket in
// which you want Elastic Transcoder to save transcoded files and playlists: which
// bucket to use, and the storage class that you want to assign to the files. If
// you specify values for `contentConfig`, you must also specify values for
// `thumbnailConfig`. If you specify values for `contentConfig` and
// `thumbnailConfig`, omit the `outputBucket` object.
func (o PipelineOutput) ThumbnailConfigPermissions() PipelineThumbnailConfigPermissionArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineThumbnailConfigPermissionArrayOutput { return v.ThumbnailConfigPermissions }).(PipelineThumbnailConfigPermissionArrayOutput)
}

type PipelineArrayOutput struct{ *pulumi.OutputState }

func (PipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (o PipelineArrayOutput) ToPipelineArrayOutput() PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) Index(i pulumi.IntInput) PipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].([]*Pipeline)[vs[1].(int)]
	}).(PipelineOutput)
}

type PipelineMapOutput struct{ *pulumi.OutputState }

func (PipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (o PipelineMapOutput) ToPipelineMapOutput() PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) MapIndex(k pulumi.StringInput) PipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].(map[string]*Pipeline)[vs[1].(string)]
	}).(PipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInput)(nil)).Elem(), &Pipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineArrayInput)(nil)).Elem(), PipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineMapInput)(nil)).Elem(), PipelineMap{})
	pulumi.RegisterOutputType(PipelineOutput{})
	pulumi.RegisterOutputType(PipelineArrayOutput{})
	pulumi.RegisterOutputType(PipelineMapOutput{})
}
