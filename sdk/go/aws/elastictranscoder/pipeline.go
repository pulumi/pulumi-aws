// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elastictranscoder

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic Transcoder pipeline resource.
type Pipeline struct {
	s *pulumi.ResourceState
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOpt) (*Pipeline, error) {
	if args == nil || args.InputBucket == nil {
		return nil, errors.New("missing required argument 'InputBucket'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["awsKmsKeyArn"] = nil
		inputs["contentConfig"] = nil
		inputs["contentConfigPermissions"] = nil
		inputs["inputBucket"] = nil
		inputs["name"] = nil
		inputs["notifications"] = nil
		inputs["outputBucket"] = nil
		inputs["role"] = nil
		inputs["thumbnailConfig"] = nil
		inputs["thumbnailConfigPermissions"] = nil
	} else {
		inputs["awsKmsKeyArn"] = args.AwsKmsKeyArn
		inputs["contentConfig"] = args.ContentConfig
		inputs["contentConfigPermissions"] = args.ContentConfigPermissions
		inputs["inputBucket"] = args.InputBucket
		inputs["name"] = args.Name
		inputs["notifications"] = args.Notifications
		inputs["outputBucket"] = args.OutputBucket
		inputs["role"] = args.Role
		inputs["thumbnailConfig"] = args.ThumbnailConfig
		inputs["thumbnailConfigPermissions"] = args.ThumbnailConfigPermissions
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:elastictranscoder/pipeline:Pipeline", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Pipeline{s: s}, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PipelineState, opts ...pulumi.ResourceOpt) (*Pipeline, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["awsKmsKeyArn"] = state.AwsKmsKeyArn
		inputs["contentConfig"] = state.ContentConfig
		inputs["contentConfigPermissions"] = state.ContentConfigPermissions
		inputs["inputBucket"] = state.InputBucket
		inputs["name"] = state.Name
		inputs["notifications"] = state.Notifications
		inputs["outputBucket"] = state.OutputBucket
		inputs["role"] = state.Role
		inputs["thumbnailConfig"] = state.ThumbnailConfig
		inputs["thumbnailConfigPermissions"] = state.ThumbnailConfigPermissions
	}
	s, err := ctx.ReadResource("aws:elastictranscoder/pipeline:Pipeline", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Pipeline{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Pipeline) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Pipeline) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Pipeline) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
func (r *Pipeline) AwsKmsKeyArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["awsKmsKeyArn"])
}

// The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
func (r *Pipeline) ContentConfig() *pulumi.Output {
	return r.s.State["contentConfig"]
}

// The permissions for the `content_config` object. (documented below)
func (r *Pipeline) ContentConfigPermissions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["contentConfigPermissions"])
}

// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
func (r *Pipeline) InputBucket() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["inputBucket"])
}

// The name of the pipeline. Maximum 40 characters
func (r *Pipeline) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
func (r *Pipeline) Notifications() *pulumi.Output {
	return r.s.State["notifications"]
}

// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
func (r *Pipeline) OutputBucket() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["outputBucket"])
}

// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
func (r *Pipeline) Role() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["role"])
}

// The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
func (r *Pipeline) ThumbnailConfig() *pulumi.Output {
	return r.s.State["thumbnailConfig"]
}

// The permissions for the `thumbnail_config` object. (documented below)
func (r *Pipeline) ThumbnailConfigPermissions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["thumbnailConfigPermissions"])
}

// Input properties used for looking up and filtering Pipeline resources.
type PipelineState struct {
	Arn interface{}
	// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
	AwsKmsKeyArn interface{}
	// The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
	ContentConfig interface{}
	// The permissions for the `content_config` object. (documented below)
	ContentConfigPermissions interface{}
	// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
	InputBucket interface{}
	// The name of the pipeline. Maximum 40 characters
	Name interface{}
	// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
	Notifications interface{}
	// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
	OutputBucket interface{}
	// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
	Role interface{}
	// The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
	ThumbnailConfig interface{}
	// The permissions for the `thumbnail_config` object. (documented below)
	ThumbnailConfigPermissions interface{}
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
	AwsKmsKeyArn interface{}
	// The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
	ContentConfig interface{}
	// The permissions for the `content_config` object. (documented below)
	ContentConfigPermissions interface{}
	// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
	InputBucket interface{}
	// The name of the pipeline. Maximum 40 characters
	Name interface{}
	// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
	Notifications interface{}
	// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
	OutputBucket interface{}
	// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
	Role interface{}
	// The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
	ThumbnailConfig interface{}
	// The permissions for the `thumbnail_config` object. (documented below)
	ThumbnailConfigPermissions interface{}
}
