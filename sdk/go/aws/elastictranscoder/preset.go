// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elastictranscoder

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Preset struct {
	pulumi.CustomResourceState

	Arn               pulumi.StringOutput             `pulumi:"arn"`
	Audio             PresetAudioPtrOutput            `pulumi:"audio"`
	AudioCodecOptions PresetAudioCodecOptionsOutput   `pulumi:"audioCodecOptions"`
	Container         pulumi.StringOutput             `pulumi:"container"`
	Description       pulumi.StringPtrOutput          `pulumi:"description"`
	Name              pulumi.StringOutput             `pulumi:"name"`
	Thumbnails        PresetThumbnailsPtrOutput       `pulumi:"thumbnails"`
	Type              pulumi.StringOutput             `pulumi:"type"`
	Video             PresetVideoPtrOutput            `pulumi:"video"`
	VideoCodecOptions pulumi.StringMapOutput          `pulumi:"videoCodecOptions"`
	VideoWatermarks   PresetVideoWatermarkArrayOutput `pulumi:"videoWatermarks"`
}

// NewPreset registers a new resource with the given unique name, arguments, and options.
func NewPreset(ctx *pulumi.Context,
	name string, args *PresetArgs, opts ...pulumi.ResourceOption) (*Preset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Container == nil {
		return nil, errors.New("invalid value for required argument 'Container'")
	}
	var resource Preset
	err := ctx.RegisterResource("aws:elastictranscoder/preset:Preset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreset gets an existing Preset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PresetState, opts ...pulumi.ResourceOption) (*Preset, error) {
	var resource Preset
	err := ctx.ReadResource("aws:elastictranscoder/preset:Preset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Preset resources.
type presetState struct {
	Arn               *string                  `pulumi:"arn"`
	Audio             *PresetAudio             `pulumi:"audio"`
	AudioCodecOptions *PresetAudioCodecOptions `pulumi:"audioCodecOptions"`
	Container         *string                  `pulumi:"container"`
	Description       *string                  `pulumi:"description"`
	Name              *string                  `pulumi:"name"`
	Thumbnails        *PresetThumbnails        `pulumi:"thumbnails"`
	Type              *string                  `pulumi:"type"`
	Video             *PresetVideo             `pulumi:"video"`
	VideoCodecOptions map[string]string        `pulumi:"videoCodecOptions"`
	VideoWatermarks   []PresetVideoWatermark   `pulumi:"videoWatermarks"`
}

type PresetState struct {
	Arn               pulumi.StringPtrInput
	Audio             PresetAudioPtrInput
	AudioCodecOptions PresetAudioCodecOptionsPtrInput
	Container         pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Thumbnails        PresetThumbnailsPtrInput
	Type              pulumi.StringPtrInput
	Video             PresetVideoPtrInput
	VideoCodecOptions pulumi.StringMapInput
	VideoWatermarks   PresetVideoWatermarkArrayInput
}

func (PresetState) ElementType() reflect.Type {
	return reflect.TypeOf((*presetState)(nil)).Elem()
}

type presetArgs struct {
	Audio             *PresetAudio             `pulumi:"audio"`
	AudioCodecOptions *PresetAudioCodecOptions `pulumi:"audioCodecOptions"`
	Container         string                   `pulumi:"container"`
	Description       *string                  `pulumi:"description"`
	Name              *string                  `pulumi:"name"`
	Thumbnails        *PresetThumbnails        `pulumi:"thumbnails"`
	Type              *string                  `pulumi:"type"`
	Video             *PresetVideo             `pulumi:"video"`
	VideoCodecOptions map[string]string        `pulumi:"videoCodecOptions"`
	VideoWatermarks   []PresetVideoWatermark   `pulumi:"videoWatermarks"`
}

// The set of arguments for constructing a Preset resource.
type PresetArgs struct {
	Audio             PresetAudioPtrInput
	AudioCodecOptions PresetAudioCodecOptionsPtrInput
	Container         pulumi.StringInput
	Description       pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Thumbnails        PresetThumbnailsPtrInput
	Type              pulumi.StringPtrInput
	Video             PresetVideoPtrInput
	VideoCodecOptions pulumi.StringMapInput
	VideoWatermarks   PresetVideoWatermarkArrayInput
}

func (PresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*presetArgs)(nil)).Elem()
}

type PresetInput interface {
	pulumi.Input

	ToPresetOutput() PresetOutput
	ToPresetOutputWithContext(ctx context.Context) PresetOutput
}

func (*Preset) ElementType() reflect.Type {
	return reflect.TypeOf((**Preset)(nil)).Elem()
}

func (i *Preset) ToPresetOutput() PresetOutput {
	return i.ToPresetOutputWithContext(context.Background())
}

func (i *Preset) ToPresetOutputWithContext(ctx context.Context) PresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetOutput)
}

// PresetArrayInput is an input type that accepts PresetArray and PresetArrayOutput values.
// You can construct a concrete instance of `PresetArrayInput` via:
//
//	PresetArray{ PresetArgs{...} }
type PresetArrayInput interface {
	pulumi.Input

	ToPresetArrayOutput() PresetArrayOutput
	ToPresetArrayOutputWithContext(context.Context) PresetArrayOutput
}

type PresetArray []PresetInput

func (PresetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Preset)(nil)).Elem()
}

func (i PresetArray) ToPresetArrayOutput() PresetArrayOutput {
	return i.ToPresetArrayOutputWithContext(context.Background())
}

func (i PresetArray) ToPresetArrayOutputWithContext(ctx context.Context) PresetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetArrayOutput)
}

// PresetMapInput is an input type that accepts PresetMap and PresetMapOutput values.
// You can construct a concrete instance of `PresetMapInput` via:
//
//	PresetMap{ "key": PresetArgs{...} }
type PresetMapInput interface {
	pulumi.Input

	ToPresetMapOutput() PresetMapOutput
	ToPresetMapOutputWithContext(context.Context) PresetMapOutput
}

type PresetMap map[string]PresetInput

func (PresetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Preset)(nil)).Elem()
}

func (i PresetMap) ToPresetMapOutput() PresetMapOutput {
	return i.ToPresetMapOutputWithContext(context.Background())
}

func (i PresetMap) ToPresetMapOutputWithContext(ctx context.Context) PresetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetMapOutput)
}

type PresetOutput struct{ *pulumi.OutputState }

func (PresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Preset)(nil)).Elem()
}

func (o PresetOutput) ToPresetOutput() PresetOutput {
	return o
}

func (o PresetOutput) ToPresetOutputWithContext(ctx context.Context) PresetOutput {
	return o
}

func (o PresetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Preset) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o PresetOutput) Audio() PresetAudioPtrOutput {
	return o.ApplyT(func(v *Preset) PresetAudioPtrOutput { return v.Audio }).(PresetAudioPtrOutput)
}

func (o PresetOutput) AudioCodecOptions() PresetAudioCodecOptionsOutput {
	return o.ApplyT(func(v *Preset) PresetAudioCodecOptionsOutput { return v.AudioCodecOptions }).(PresetAudioCodecOptionsOutput)
}

func (o PresetOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v *Preset) pulumi.StringOutput { return v.Container }).(pulumi.StringOutput)
}

func (o PresetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Preset) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PresetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Preset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PresetOutput) Thumbnails() PresetThumbnailsPtrOutput {
	return o.ApplyT(func(v *Preset) PresetThumbnailsPtrOutput { return v.Thumbnails }).(PresetThumbnailsPtrOutput)
}

func (o PresetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Preset) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o PresetOutput) Video() PresetVideoPtrOutput {
	return o.ApplyT(func(v *Preset) PresetVideoPtrOutput { return v.Video }).(PresetVideoPtrOutput)
}

func (o PresetOutput) VideoCodecOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Preset) pulumi.StringMapOutput { return v.VideoCodecOptions }).(pulumi.StringMapOutput)
}

func (o PresetOutput) VideoWatermarks() PresetVideoWatermarkArrayOutput {
	return o.ApplyT(func(v *Preset) PresetVideoWatermarkArrayOutput { return v.VideoWatermarks }).(PresetVideoWatermarkArrayOutput)
}

type PresetArrayOutput struct{ *pulumi.OutputState }

func (PresetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Preset)(nil)).Elem()
}

func (o PresetArrayOutput) ToPresetArrayOutput() PresetArrayOutput {
	return o
}

func (o PresetArrayOutput) ToPresetArrayOutputWithContext(ctx context.Context) PresetArrayOutput {
	return o
}

func (o PresetArrayOutput) Index(i pulumi.IntInput) PresetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Preset {
		return vs[0].([]*Preset)[vs[1].(int)]
	}).(PresetOutput)
}

type PresetMapOutput struct{ *pulumi.OutputState }

func (PresetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Preset)(nil)).Elem()
}

func (o PresetMapOutput) ToPresetMapOutput() PresetMapOutput {
	return o
}

func (o PresetMapOutput) ToPresetMapOutputWithContext(ctx context.Context) PresetMapOutput {
	return o
}

func (o PresetMapOutput) MapIndex(k pulumi.StringInput) PresetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Preset {
		return vs[0].(map[string]*Preset)[vs[1].(string)]
	}).(PresetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PresetInput)(nil)).Elem(), &Preset{})
	pulumi.RegisterInputType(reflect.TypeOf((*PresetArrayInput)(nil)).Elem(), PresetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PresetMapInput)(nil)).Elem(), PresetMap{})
	pulumi.RegisterOutputType(PresetOutput{})
	pulumi.RegisterOutputType(PresetArrayOutput{})
	pulumi.RegisterOutputType(PresetMapOutput{})
}
