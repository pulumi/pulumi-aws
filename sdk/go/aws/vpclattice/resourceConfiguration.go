// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS VPC Lattice Resource Configuration.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/vpclattice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpclattice.NewResourceConfiguration(ctx, "example", &vpclattice.ResourceConfigurationArgs{
//				Name:                      pulumi.String("Example"),
//				ResourceGatewayIdentifier: pulumi.Any(exampleAwsVpclatticeResourceGateway.Id),
//				PortRanges: pulumi.StringArray{
//					pulumi.String("80"),
//				},
//				ResourceConfigurationDefinition: &vpclattice.ResourceConfigurationResourceConfigurationDefinitionArgs{
//					DnsResource: &vpclattice.ResourceConfigurationResourceConfigurationDefinitionDnsResourceArgs{
//						DomainName:    pulumi.String("example.com"),
//						IpAddressType: pulumi.String("IPV4"),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("Example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### IP Address Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/vpclattice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpclattice.NewResourceConfiguration(ctx, "example", &vpclattice.ResourceConfigurationArgs{
//				Name:                      pulumi.String("Example"),
//				ResourceGatewayIdentifier: pulumi.Any(exampleAwsVpclatticeResourceGateway.Id),
//				PortRanges: pulumi.StringArray{
//					pulumi.String("80"),
//				},
//				Protocol: pulumi.String("TCP"),
//				ResourceConfigurationDefinition: &vpclattice.ResourceConfigurationResourceConfigurationDefinitionArgs{
//					IpResource: &vpclattice.ResourceConfigurationResourceConfigurationDefinitionIpResourceArgs{
//						IpAddress: pulumi.String("10.0.0.1"),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("Example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### ARN Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/vpclattice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpclattice.NewResourceConfiguration(ctx, "test", &vpclattice.ResourceConfigurationArgs{
//				Name:                      pulumi.String("Example"),
//				ResourceGatewayIdentifier: pulumi.Any(testAwsVpclatticeResourceGateway.Id),
//				Type:                      pulumi.String("ARN"),
//				ResourceConfigurationDefinition: &vpclattice.ResourceConfigurationResourceConfigurationDefinitionArgs{
//					ArnResource: &vpclattice.ResourceConfigurationResourceConfigurationDefinitionArnResourceArgs{
//						Arn: pulumi.Any(example.Arn),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import VPC Lattice Resource Configuration using the `id`. For example:
//
// ```sh
// $ pulumi import aws:vpclattice/resourceConfiguration:ResourceConfiguration example rcfg-1234567890abcdef1
// ```
type ResourceConfiguration struct {
	pulumi.CustomResourceState

	// Allow or Deny the association of this resource to a shareable service network.
	AllowAssociationToShareableServiceNetwork pulumi.BoolOutput `pulumi:"allowAssociationToShareableServiceNetwork"`
	// ARN of the resource gateway.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Name for the Resource Configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// Port ranges to access the Resource either single port `80` or range `80-81` range.
	PortRanges pulumi.StringArrayOutput `pulumi:"portRanges"`
	// Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resourceConfigurationGroupId` is not.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Details of the Resource Configuration. See `resourceConfigurationDefinition` Block for details.
	//
	// The following arguments are optional:
	ResourceConfigurationDefinition ResourceConfigurationResourceConfigurationDefinitionPtrOutput `pulumi:"resourceConfigurationDefinition"`
	// ID of Resource Configuration where `type` is `CHILD`.
	ResourceConfigurationGroupId pulumi.StringPtrOutput `pulumi:"resourceConfigurationGroupId"`
	// ID of the Resource Gateway used to access the resource. MUST be specified if `resourceConfigurationGroupId` is not.
	ResourceGatewayIdentifier pulumi.StringOutput `pulumi:"resourceGatewayIdentifier"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput                 `pulumi:"tagsAll"`
	Timeouts ResourceConfigurationTimeoutsPtrOutput `pulumi:"timeouts"`
	// Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewResourceConfiguration registers a new resource with the given unique name, arguments, and options.
func NewResourceConfiguration(ctx *pulumi.Context,
	name string, args *ResourceConfigurationArgs, opts ...pulumi.ResourceOption) (*ResourceConfiguration, error) {
	if args == nil {
		args = &ResourceConfigurationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceConfiguration
	err := ctx.RegisterResource("aws:vpclattice/resourceConfiguration:ResourceConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceConfiguration gets an existing ResourceConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceConfigurationState, opts ...pulumi.ResourceOption) (*ResourceConfiguration, error) {
	var resource ResourceConfiguration
	err := ctx.ReadResource("aws:vpclattice/resourceConfiguration:ResourceConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceConfiguration resources.
type resourceConfigurationState struct {
	// Allow or Deny the association of this resource to a shareable service network.
	AllowAssociationToShareableServiceNetwork *bool `pulumi:"allowAssociationToShareableServiceNetwork"`
	// ARN of the resource gateway.
	Arn *string `pulumi:"arn"`
	// Name for the Resource Configuration.
	Name *string `pulumi:"name"`
	// Port ranges to access the Resource either single port `80` or range `80-81` range.
	PortRanges []string `pulumi:"portRanges"`
	// Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resourceConfigurationGroupId` is not.
	Protocol *string `pulumi:"protocol"`
	// Details of the Resource Configuration. See `resourceConfigurationDefinition` Block for details.
	//
	// The following arguments are optional:
	ResourceConfigurationDefinition *ResourceConfigurationResourceConfigurationDefinition `pulumi:"resourceConfigurationDefinition"`
	// ID of Resource Configuration where `type` is `CHILD`.
	ResourceConfigurationGroupId *string `pulumi:"resourceConfigurationGroupId"`
	// ID of the Resource Gateway used to access the resource. MUST be specified if `resourceConfigurationGroupId` is not.
	ResourceGatewayIdentifier *string `pulumi:"resourceGatewayIdentifier"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string              `pulumi:"tagsAll"`
	Timeouts *ResourceConfigurationTimeouts `pulumi:"timeouts"`
	// Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
	Type *string `pulumi:"type"`
}

type ResourceConfigurationState struct {
	// Allow or Deny the association of this resource to a shareable service network.
	AllowAssociationToShareableServiceNetwork pulumi.BoolPtrInput
	// ARN of the resource gateway.
	Arn pulumi.StringPtrInput
	// Name for the Resource Configuration.
	Name pulumi.StringPtrInput
	// Port ranges to access the Resource either single port `80` or range `80-81` range.
	PortRanges pulumi.StringArrayInput
	// Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resourceConfigurationGroupId` is not.
	Protocol pulumi.StringPtrInput
	// Details of the Resource Configuration. See `resourceConfigurationDefinition` Block for details.
	//
	// The following arguments are optional:
	ResourceConfigurationDefinition ResourceConfigurationResourceConfigurationDefinitionPtrInput
	// ID of Resource Configuration where `type` is `CHILD`.
	ResourceConfigurationGroupId pulumi.StringPtrInput
	// ID of the Resource Gateway used to access the resource. MUST be specified if `resourceConfigurationGroupId` is not.
	ResourceGatewayIdentifier pulumi.StringPtrInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts ResourceConfigurationTimeoutsPtrInput
	// Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
	Type pulumi.StringPtrInput
}

func (ResourceConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceConfigurationState)(nil)).Elem()
}

type resourceConfigurationArgs struct {
	// Allow or Deny the association of this resource to a shareable service network.
	AllowAssociationToShareableServiceNetwork *bool `pulumi:"allowAssociationToShareableServiceNetwork"`
	// Name for the Resource Configuration.
	Name *string `pulumi:"name"`
	// Port ranges to access the Resource either single port `80` or range `80-81` range.
	PortRanges []string `pulumi:"portRanges"`
	// Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resourceConfigurationGroupId` is not.
	Protocol *string `pulumi:"protocol"`
	// Details of the Resource Configuration. See `resourceConfigurationDefinition` Block for details.
	//
	// The following arguments are optional:
	ResourceConfigurationDefinition *ResourceConfigurationResourceConfigurationDefinition `pulumi:"resourceConfigurationDefinition"`
	// ID of Resource Configuration where `type` is `CHILD`.
	ResourceConfigurationGroupId *string `pulumi:"resourceConfigurationGroupId"`
	// ID of the Resource Gateway used to access the resource. MUST be specified if `resourceConfigurationGroupId` is not.
	ResourceGatewayIdentifier *string `pulumi:"resourceGatewayIdentifier"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string              `pulumi:"tags"`
	Timeouts *ResourceConfigurationTimeouts `pulumi:"timeouts"`
	// Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ResourceConfiguration resource.
type ResourceConfigurationArgs struct {
	// Allow or Deny the association of this resource to a shareable service network.
	AllowAssociationToShareableServiceNetwork pulumi.BoolPtrInput
	// Name for the Resource Configuration.
	Name pulumi.StringPtrInput
	// Port ranges to access the Resource either single port `80` or range `80-81` range.
	PortRanges pulumi.StringArrayInput
	// Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resourceConfigurationGroupId` is not.
	Protocol pulumi.StringPtrInput
	// Details of the Resource Configuration. See `resourceConfigurationDefinition` Block for details.
	//
	// The following arguments are optional:
	ResourceConfigurationDefinition ResourceConfigurationResourceConfigurationDefinitionPtrInput
	// ID of Resource Configuration where `type` is `CHILD`.
	ResourceConfigurationGroupId pulumi.StringPtrInput
	// ID of the Resource Gateway used to access the resource. MUST be specified if `resourceConfigurationGroupId` is not.
	ResourceGatewayIdentifier pulumi.StringPtrInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts ResourceConfigurationTimeoutsPtrInput
	// Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
	Type pulumi.StringPtrInput
}

func (ResourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceConfigurationArgs)(nil)).Elem()
}

type ResourceConfigurationInput interface {
	pulumi.Input

	ToResourceConfigurationOutput() ResourceConfigurationOutput
	ToResourceConfigurationOutputWithContext(ctx context.Context) ResourceConfigurationOutput
}

func (*ResourceConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceConfiguration)(nil)).Elem()
}

func (i *ResourceConfiguration) ToResourceConfigurationOutput() ResourceConfigurationOutput {
	return i.ToResourceConfigurationOutputWithContext(context.Background())
}

func (i *ResourceConfiguration) ToResourceConfigurationOutputWithContext(ctx context.Context) ResourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceConfigurationOutput)
}

// ResourceConfigurationArrayInput is an input type that accepts ResourceConfigurationArray and ResourceConfigurationArrayOutput values.
// You can construct a concrete instance of `ResourceConfigurationArrayInput` via:
//
//	ResourceConfigurationArray{ ResourceConfigurationArgs{...} }
type ResourceConfigurationArrayInput interface {
	pulumi.Input

	ToResourceConfigurationArrayOutput() ResourceConfigurationArrayOutput
	ToResourceConfigurationArrayOutputWithContext(context.Context) ResourceConfigurationArrayOutput
}

type ResourceConfigurationArray []ResourceConfigurationInput

func (ResourceConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceConfiguration)(nil)).Elem()
}

func (i ResourceConfigurationArray) ToResourceConfigurationArrayOutput() ResourceConfigurationArrayOutput {
	return i.ToResourceConfigurationArrayOutputWithContext(context.Background())
}

func (i ResourceConfigurationArray) ToResourceConfigurationArrayOutputWithContext(ctx context.Context) ResourceConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceConfigurationArrayOutput)
}

// ResourceConfigurationMapInput is an input type that accepts ResourceConfigurationMap and ResourceConfigurationMapOutput values.
// You can construct a concrete instance of `ResourceConfigurationMapInput` via:
//
//	ResourceConfigurationMap{ "key": ResourceConfigurationArgs{...} }
type ResourceConfigurationMapInput interface {
	pulumi.Input

	ToResourceConfigurationMapOutput() ResourceConfigurationMapOutput
	ToResourceConfigurationMapOutputWithContext(context.Context) ResourceConfigurationMapOutput
}

type ResourceConfigurationMap map[string]ResourceConfigurationInput

func (ResourceConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceConfiguration)(nil)).Elem()
}

func (i ResourceConfigurationMap) ToResourceConfigurationMapOutput() ResourceConfigurationMapOutput {
	return i.ToResourceConfigurationMapOutputWithContext(context.Background())
}

func (i ResourceConfigurationMap) ToResourceConfigurationMapOutputWithContext(ctx context.Context) ResourceConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceConfigurationMapOutput)
}

type ResourceConfigurationOutput struct{ *pulumi.OutputState }

func (ResourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceConfiguration)(nil)).Elem()
}

func (o ResourceConfigurationOutput) ToResourceConfigurationOutput() ResourceConfigurationOutput {
	return o
}

func (o ResourceConfigurationOutput) ToResourceConfigurationOutputWithContext(ctx context.Context) ResourceConfigurationOutput {
	return o
}

// Allow or Deny the association of this resource to a shareable service network.
func (o ResourceConfigurationOutput) AllowAssociationToShareableServiceNetwork() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceConfiguration) pulumi.BoolOutput { return v.AllowAssociationToShareableServiceNetwork }).(pulumi.BoolOutput)
}

// ARN of the resource gateway.
func (o ResourceConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Name for the Resource Configuration.
func (o ResourceConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Port ranges to access the Resource either single port `80` or range `80-81` range.
func (o ResourceConfigurationOutput) PortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceConfiguration) pulumi.StringArrayOutput { return v.PortRanges }).(pulumi.StringArrayOutput)
}

// Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resourceConfigurationGroupId` is not.
func (o ResourceConfigurationOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceConfiguration) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Details of the Resource Configuration. See `resourceConfigurationDefinition` Block for details.
//
// The following arguments are optional:
func (o ResourceConfigurationOutput) ResourceConfigurationDefinition() ResourceConfigurationResourceConfigurationDefinitionPtrOutput {
	return o.ApplyT(func(v *ResourceConfiguration) ResourceConfigurationResourceConfigurationDefinitionPtrOutput {
		return v.ResourceConfigurationDefinition
	}).(ResourceConfigurationResourceConfigurationDefinitionPtrOutput)
}

// ID of Resource Configuration where `type` is `CHILD`.
func (o ResourceConfigurationOutput) ResourceConfigurationGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceConfiguration) pulumi.StringPtrOutput { return v.ResourceConfigurationGroupId }).(pulumi.StringPtrOutput)
}

// ID of the Resource Gateway used to access the resource. MUST be specified if `resourceConfigurationGroupId` is not.
func (o ResourceConfigurationOutput) ResourceGatewayIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceConfiguration) pulumi.StringOutput { return v.ResourceGatewayIdentifier }).(pulumi.StringOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ResourceConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceConfiguration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ResourceConfigurationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceConfiguration) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ResourceConfigurationOutput) Timeouts() ResourceConfigurationTimeoutsPtrOutput {
	return o.ApplyT(func(v *ResourceConfiguration) ResourceConfigurationTimeoutsPtrOutput { return v.Timeouts }).(ResourceConfigurationTimeoutsPtrOutput)
}

// Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
func (o ResourceConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ResourceConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ResourceConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceConfiguration)(nil)).Elem()
}

func (o ResourceConfigurationArrayOutput) ToResourceConfigurationArrayOutput() ResourceConfigurationArrayOutput {
	return o
}

func (o ResourceConfigurationArrayOutput) ToResourceConfigurationArrayOutputWithContext(ctx context.Context) ResourceConfigurationArrayOutput {
	return o
}

func (o ResourceConfigurationArrayOutput) Index(i pulumi.IntInput) ResourceConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceConfiguration {
		return vs[0].([]*ResourceConfiguration)[vs[1].(int)]
	}).(ResourceConfigurationOutput)
}

type ResourceConfigurationMapOutput struct{ *pulumi.OutputState }

func (ResourceConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceConfiguration)(nil)).Elem()
}

func (o ResourceConfigurationMapOutput) ToResourceConfigurationMapOutput() ResourceConfigurationMapOutput {
	return o
}

func (o ResourceConfigurationMapOutput) ToResourceConfigurationMapOutputWithContext(ctx context.Context) ResourceConfigurationMapOutput {
	return o
}

func (o ResourceConfigurationMapOutput) MapIndex(k pulumi.StringInput) ResourceConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceConfiguration {
		return vs[0].(map[string]*ResourceConfiguration)[vs[1].(string)]
	}).(ResourceConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceConfigurationInput)(nil)).Elem(), &ResourceConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceConfigurationArrayInput)(nil)).Elem(), ResourceConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceConfigurationMapInput)(nil)).Elem(), ResourceConfigurationMap{})
	pulumi.RegisterOutputType(ResourceConfigurationOutput{})
	pulumi.RegisterOutputType(ResourceConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ResourceConfigurationMapOutput{})
}
