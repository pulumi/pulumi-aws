// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS VPC Lattice Resource Gateway.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/vpclattice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpclattice.NewResourceGateway(ctx, "example", &vpclattice.ResourceGatewayArgs{
//				Name:  pulumi.String("Example"),
//				VpcId: pulumi.Any(exampleAwsVpc.Id),
//				SubnetIds: pulumi.StringArray{
//					exampleAwsSubnet.Id,
//				},
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("Example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Specifying IP address type
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/vpclattice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpclattice.NewResourceGateway(ctx, "example", &vpclattice.ResourceGatewayArgs{
//				Name:  pulumi.String("Example"),
//				VpcId: pulumi.Any(exampleAwsVpc.Id),
//				SubnetIds: pulumi.StringArray{
//					exampleAwsSubnet.Id,
//				},
//				IpAddressType: pulumi.String("DUALSTACK"),
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("Example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With security groups
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/vpclattice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpclattice.NewResourceGateway(ctx, "example", &vpclattice.ResourceGatewayArgs{
//				Name:  pulumi.String("Example"),
//				VpcId: pulumi.Any(exampleAwsVpc.Id),
//				SecurityGroupIds: pulumi.StringArray{
//					test.Id,
//				},
//				SubnetIds: pulumi.StringArray{
//					exampleAwsSubnet.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import VPC Lattice Resource Gateway using the `id`. For example:
//
// ```sh
// $ pulumi import aws:vpclattice/resourceGateway:ResourceGateway example rgw-0a1b2c3d4e5f
// ```
type ResourceGateway struct {
	pulumi.CustomResourceState

	// ARN of the resource gateway.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// IP address type used by the resource gateway. Valid values are `IPV4`, `IPV6`, and `DUALSTACK`. The IP address type of a resource gateway must be compatible with the subnets of the resource gateway and the IP address type of the resource.
	IpAddressType pulumi.StringOutput `pulumi:"ipAddressType"`
	// Name of the resource gateway.
	Name pulumi.StringOutput `pulumi:"name"`
	// Security group IDs associated with the resource gateway. The security groups must be in the same VPC.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Status of the resource gateway.
	Status pulumi.StringOutput `pulumi:"status"`
	// IDs of the VPC subnets in which to create the resource gateway.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput           `pulumi:"tagsAll"`
	Timeouts ResourceGatewayTimeoutsPtrOutput `pulumi:"timeouts"`
	// ID of the VPC for the resource gateway.
	//
	// The following arguments are optional:
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewResourceGateway registers a new resource with the given unique name, arguments, and options.
func NewResourceGateway(ctx *pulumi.Context,
	name string, args *ResourceGatewayArgs, opts ...pulumi.ResourceOption) (*ResourceGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceGateway
	err := ctx.RegisterResource("aws:vpclattice/resourceGateway:ResourceGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceGateway gets an existing ResourceGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceGatewayState, opts ...pulumi.ResourceOption) (*ResourceGateway, error) {
	var resource ResourceGateway
	err := ctx.ReadResource("aws:vpclattice/resourceGateway:ResourceGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceGateway resources.
type resourceGatewayState struct {
	// ARN of the resource gateway.
	Arn *string `pulumi:"arn"`
	// IP address type used by the resource gateway. Valid values are `IPV4`, `IPV6`, and `DUALSTACK`. The IP address type of a resource gateway must be compatible with the subnets of the resource gateway and the IP address type of the resource.
	IpAddressType *string `pulumi:"ipAddressType"`
	// Name of the resource gateway.
	Name *string `pulumi:"name"`
	// Security group IDs associated with the resource gateway. The security groups must be in the same VPC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Status of the resource gateway.
	Status *string `pulumi:"status"`
	// IDs of the VPC subnets in which to create the resource gateway.
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string        `pulumi:"tagsAll"`
	Timeouts *ResourceGatewayTimeouts `pulumi:"timeouts"`
	// ID of the VPC for the resource gateway.
	//
	// The following arguments are optional:
	VpcId *string `pulumi:"vpcId"`
}

type ResourceGatewayState struct {
	// ARN of the resource gateway.
	Arn pulumi.StringPtrInput
	// IP address type used by the resource gateway. Valid values are `IPV4`, `IPV6`, and `DUALSTACK`. The IP address type of a resource gateway must be compatible with the subnets of the resource gateway and the IP address type of the resource.
	IpAddressType pulumi.StringPtrInput
	// Name of the resource gateway.
	Name pulumi.StringPtrInput
	// Security group IDs associated with the resource gateway. The security groups must be in the same VPC.
	SecurityGroupIds pulumi.StringArrayInput
	// Status of the resource gateway.
	Status pulumi.StringPtrInput
	// IDs of the VPC subnets in which to create the resource gateway.
	SubnetIds pulumi.StringArrayInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts ResourceGatewayTimeoutsPtrInput
	// ID of the VPC for the resource gateway.
	//
	// The following arguments are optional:
	VpcId pulumi.StringPtrInput
}

func (ResourceGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGatewayState)(nil)).Elem()
}

type resourceGatewayArgs struct {
	// IP address type used by the resource gateway. Valid values are `IPV4`, `IPV6`, and `DUALSTACK`. The IP address type of a resource gateway must be compatible with the subnets of the resource gateway and the IP address type of the resource.
	IpAddressType *string `pulumi:"ipAddressType"`
	// Name of the resource gateway.
	Name *string `pulumi:"name"`
	// Security group IDs associated with the resource gateway. The security groups must be in the same VPC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// IDs of the VPC subnets in which to create the resource gateway.
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string        `pulumi:"tags"`
	Timeouts *ResourceGatewayTimeouts `pulumi:"timeouts"`
	// ID of the VPC for the resource gateway.
	//
	// The following arguments are optional:
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a ResourceGateway resource.
type ResourceGatewayArgs struct {
	// IP address type used by the resource gateway. Valid values are `IPV4`, `IPV6`, and `DUALSTACK`. The IP address type of a resource gateway must be compatible with the subnets of the resource gateway and the IP address type of the resource.
	IpAddressType pulumi.StringPtrInput
	// Name of the resource gateway.
	Name pulumi.StringPtrInput
	// Security group IDs associated with the resource gateway. The security groups must be in the same VPC.
	SecurityGroupIds pulumi.StringArrayInput
	// IDs of the VPC subnets in which to create the resource gateway.
	SubnetIds pulumi.StringArrayInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts ResourceGatewayTimeoutsPtrInput
	// ID of the VPC for the resource gateway.
	//
	// The following arguments are optional:
	VpcId pulumi.StringInput
}

func (ResourceGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGatewayArgs)(nil)).Elem()
}

type ResourceGatewayInput interface {
	pulumi.Input

	ToResourceGatewayOutput() ResourceGatewayOutput
	ToResourceGatewayOutputWithContext(ctx context.Context) ResourceGatewayOutput
}

func (*ResourceGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGateway)(nil)).Elem()
}

func (i *ResourceGateway) ToResourceGatewayOutput() ResourceGatewayOutput {
	return i.ToResourceGatewayOutputWithContext(context.Background())
}

func (i *ResourceGateway) ToResourceGatewayOutputWithContext(ctx context.Context) ResourceGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGatewayOutput)
}

// ResourceGatewayArrayInput is an input type that accepts ResourceGatewayArray and ResourceGatewayArrayOutput values.
// You can construct a concrete instance of `ResourceGatewayArrayInput` via:
//
//	ResourceGatewayArray{ ResourceGatewayArgs{...} }
type ResourceGatewayArrayInput interface {
	pulumi.Input

	ToResourceGatewayArrayOutput() ResourceGatewayArrayOutput
	ToResourceGatewayArrayOutputWithContext(context.Context) ResourceGatewayArrayOutput
}

type ResourceGatewayArray []ResourceGatewayInput

func (ResourceGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceGateway)(nil)).Elem()
}

func (i ResourceGatewayArray) ToResourceGatewayArrayOutput() ResourceGatewayArrayOutput {
	return i.ToResourceGatewayArrayOutputWithContext(context.Background())
}

func (i ResourceGatewayArray) ToResourceGatewayArrayOutputWithContext(ctx context.Context) ResourceGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGatewayArrayOutput)
}

// ResourceGatewayMapInput is an input type that accepts ResourceGatewayMap and ResourceGatewayMapOutput values.
// You can construct a concrete instance of `ResourceGatewayMapInput` via:
//
//	ResourceGatewayMap{ "key": ResourceGatewayArgs{...} }
type ResourceGatewayMapInput interface {
	pulumi.Input

	ToResourceGatewayMapOutput() ResourceGatewayMapOutput
	ToResourceGatewayMapOutputWithContext(context.Context) ResourceGatewayMapOutput
}

type ResourceGatewayMap map[string]ResourceGatewayInput

func (ResourceGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceGateway)(nil)).Elem()
}

func (i ResourceGatewayMap) ToResourceGatewayMapOutput() ResourceGatewayMapOutput {
	return i.ToResourceGatewayMapOutputWithContext(context.Background())
}

func (i ResourceGatewayMap) ToResourceGatewayMapOutputWithContext(ctx context.Context) ResourceGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGatewayMapOutput)
}

type ResourceGatewayOutput struct{ *pulumi.OutputState }

func (ResourceGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGateway)(nil)).Elem()
}

func (o ResourceGatewayOutput) ToResourceGatewayOutput() ResourceGatewayOutput {
	return o
}

func (o ResourceGatewayOutput) ToResourceGatewayOutputWithContext(ctx context.Context) ResourceGatewayOutput {
	return o
}

// ARN of the resource gateway.
func (o ResourceGatewayOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGateway) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// IP address type used by the resource gateway. Valid values are `IPV4`, `IPV6`, and `DUALSTACK`. The IP address type of a resource gateway must be compatible with the subnets of the resource gateway and the IP address type of the resource.
func (o ResourceGatewayOutput) IpAddressType() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGateway) pulumi.StringOutput { return v.IpAddressType }).(pulumi.StringOutput)
}

// Name of the resource gateway.
func (o ResourceGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Security group IDs associated with the resource gateway. The security groups must be in the same VPC.
func (o ResourceGatewayOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceGateway) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Status of the resource gateway.
func (o ResourceGatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGateway) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// IDs of the VPC subnets in which to create the resource gateway.
func (o ResourceGatewayOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceGateway) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ResourceGatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceGateway) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ResourceGatewayOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceGateway) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ResourceGatewayOutput) Timeouts() ResourceGatewayTimeoutsPtrOutput {
	return o.ApplyT(func(v *ResourceGateway) ResourceGatewayTimeoutsPtrOutput { return v.Timeouts }).(ResourceGatewayTimeoutsPtrOutput)
}

// ID of the VPC for the resource gateway.
//
// The following arguments are optional:
func (o ResourceGatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGateway) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ResourceGatewayArrayOutput struct{ *pulumi.OutputState }

func (ResourceGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceGateway)(nil)).Elem()
}

func (o ResourceGatewayArrayOutput) ToResourceGatewayArrayOutput() ResourceGatewayArrayOutput {
	return o
}

func (o ResourceGatewayArrayOutput) ToResourceGatewayArrayOutputWithContext(ctx context.Context) ResourceGatewayArrayOutput {
	return o
}

func (o ResourceGatewayArrayOutput) Index(i pulumi.IntInput) ResourceGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceGateway {
		return vs[0].([]*ResourceGateway)[vs[1].(int)]
	}).(ResourceGatewayOutput)
}

type ResourceGatewayMapOutput struct{ *pulumi.OutputState }

func (ResourceGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceGateway)(nil)).Elem()
}

func (o ResourceGatewayMapOutput) ToResourceGatewayMapOutput() ResourceGatewayMapOutput {
	return o
}

func (o ResourceGatewayMapOutput) ToResourceGatewayMapOutputWithContext(ctx context.Context) ResourceGatewayMapOutput {
	return o
}

func (o ResourceGatewayMapOutput) MapIndex(k pulumi.StringInput) ResourceGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceGateway {
		return vs[0].(map[string]*ResourceGateway)[vs[1].(string)]
	}).(ResourceGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGatewayInput)(nil)).Elem(), &ResourceGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGatewayArrayInput)(nil)).Elem(), ResourceGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGatewayMapInput)(nil)).Elem(), ResourceGatewayMap{})
	pulumi.RegisterOutputType(ResourceGatewayOutput{})
	pulumi.RegisterOutputType(ResourceGatewayArrayOutput{})
	pulumi.RegisterOutputType(ResourceGatewayMapOutput{})
}
