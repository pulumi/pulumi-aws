// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS VPC Lattice Service.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/vpclattice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpclattice.LookupService(ctx, &vpclattice.LookupServiceArgs{
//				Name: pulumi.StringRef("example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupService(ctx *pulumi.Context, args *LookupServiceArgs, opts ...pulumi.InvokeOption) (*LookupServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceResult
	err := ctx.Invoke("aws:vpclattice/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type LookupServiceArgs struct {
	// Service name.
	Name *string `pulumi:"name"`
	// ID or Amazon Resource Name (ARN) of the service.
	ServiceIdentifier *string `pulumi:"serviceIdentifier"`
	// List of tags associated with the service.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getService.
type LookupServiceResult struct {
	// ARN of the service.
	Arn *string `pulumi:"arn"`
	// Type of IAM policy. Either `NONE` or `AWS_IAM`.
	AuthType *string `pulumi:"authType"`
	// Amazon Resource Name (ARN) of the certificate.
	CertificateArn *string `pulumi:"certificateArn"`
	// Custom domain name of the service.
	CustomDomainName *string `pulumi:"customDomainName"`
	// DNS name of the service.
	DnsEntries []GetServiceDnsEntry `pulumi:"dnsEntries"`
	// The provider-assigned unique ID for this managed resource.
	Id                *string `pulumi:"id"`
	Name              *string `pulumi:"name"`
	ServiceIdentifier *string `pulumi:"serviceIdentifier"`
	// Status of the service.
	Status *string `pulumi:"status"`
	// List of tags associated with the service.
	Tags map[string]string `pulumi:"tags"`
}

func LookupServiceOutput(ctx *pulumi.Context, args LookupServiceOutputArgs, opts ...pulumi.InvokeOption) LookupServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceResult, error) {
			args := v.(LookupServiceArgs)
			r, err := LookupService(ctx, &args, opts...)
			var s LookupServiceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServiceResultOutput)
}

// A collection of arguments for invoking getService.
type LookupServiceOutputArgs struct {
	// Service name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ID or Amazon Resource Name (ARN) of the service.
	ServiceIdentifier pulumi.StringPtrInput `pulumi:"serviceIdentifier"`
	// List of tags associated with the service.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceArgs)(nil)).Elem()
}

// A collection of values returned by getService.
type LookupServiceResultOutput struct{ *pulumi.OutputState }

func (LookupServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceResult)(nil)).Elem()
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutput() LookupServiceResultOutput {
	return o
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutputWithContext(ctx context.Context) LookupServiceResultOutput {
	return o
}

// ARN of the service.
func (o LookupServiceResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Type of IAM policy. Either `NONE` or `AWS_IAM`.
func (o LookupServiceResultOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of the certificate.
func (o LookupServiceResultOutput) CertificateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.CertificateArn }).(pulumi.StringPtrOutput)
}

// Custom domain name of the service.
func (o LookupServiceResultOutput) CustomDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.CustomDomainName }).(pulumi.StringPtrOutput)
}

// DNS name of the service.
func (o LookupServiceResultOutput) DnsEntries() GetServiceDnsEntryArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []GetServiceDnsEntry { return v.DnsEntries }).(GetServiceDnsEntryArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServiceResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupServiceResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupServiceResultOutput) ServiceIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.ServiceIdentifier }).(pulumi.StringPtrOutput)
}

// Status of the service.
func (o LookupServiceResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// List of tags associated with the service.
func (o LookupServiceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupServiceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceResultOutput{})
}
