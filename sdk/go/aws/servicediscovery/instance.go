// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicediscovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Service Discovery Instance resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	ec2/vpc "github.com/pulumi/pulumi-aws/sdk/v1/go/aws/ec2/vpc"
//	servicediscovery/instance "github.com/pulumi/pulumi-aws/sdk/v1/go/aws/servicediscovery/instance"
//	servicediscovery/privateDnsNamespace "github.com/pulumi/pulumi-aws/sdk/v1/go/aws/servicediscovery/privateDnsNamespace"
//	servicediscovery/service "github.com/pulumi/pulumi-aws/sdk/v1/go/aws/servicediscovery/service"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// exampleVpc, err := ec2/vpc.NewVpc(ctx, "exampleVpc", &ec2/vpc.VpcArgs{
// CidrBlock: "10.0.0.0/16",
// EnableDnsSupport: true,
// EnableDnsHostnames: true,
// })
// if err != nil {
// return err
// }
// examplePrivateDnsNamespace, err := servicediscovery/privateDnsNamespace.NewPrivateDnsNamespace(ctx, "examplePrivateDnsNamespace", &servicediscovery/privateDnsNamespace.PrivateDnsNamespaceArgs{
// Description: "example",
// Vpc: exampleVpc.Id,
// })
// if err != nil {
// return err
// }
// exampleService, err := servicediscovery/service.NewService(ctx, "exampleService", &servicediscovery/service.ServiceArgs{
// DnsConfig: map[string]interface{}{
// "namespaceId": examplePrivateDnsNamespace.Id,
// "dnsRecords": []map[string]interface{}{
// map[string]interface{}{
// "ttl": 10,
// "type": "A",
// },
// },
// "routingPolicy": "MULTIVALUE",
// },
// HealthCheckCustomConfig: map[string]interface{}{
// "failureThreshold": 1,
// },
// })
// if err != nil {
// return err
// }
// _, err = servicediscovery/instance.NewInstance(ctx, "exampleInstance", &servicediscovery/instance.InstanceArgs{
// InstanceId: "example-instance-id",
// ServiceId: exampleService.Id,
// Attributes: map[string]interface{}{
// "AWS_INSTANCE_IPV4": "172.18.0.1",
// "custom_attribute": "custom",
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ```go
// package main
//
// import (
//
//	servicediscovery/httpNamespace "github.com/pulumi/pulumi-aws/sdk/v1/go/aws/servicediscovery/httpNamespace"
//	servicediscovery/instance "github.com/pulumi/pulumi-aws/sdk/v1/go/aws/servicediscovery/instance"
//	servicediscovery/service "github.com/pulumi/pulumi-aws/sdk/v1/go/aws/servicediscovery/service"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// exampleHttpNamespace, err := servicediscovery/httpNamespace.NewHttpNamespace(ctx, "exampleHttpNamespace", &servicediscovery/httpNamespace.HttpNamespaceArgs{
// Description: "example",
// })
// if err != nil {
// return err
// }
// exampleService, err := servicediscovery/service.NewService(ctx, "exampleService", &servicediscovery/service.ServiceArgs{
// NamespaceId: exampleHttpNamespace.Id,
// })
// if err != nil {
// return err
// }
// _, err = servicediscovery/instance.NewInstance(ctx, "exampleInstance", &servicediscovery/instance.InstanceArgs{
// InstanceId: "example-instance-id",
// ServiceId: exampleService.Id,
// Attributes: map[string]interface{}{
// "AWS_EC2_INSTANCE_ID": "i-0abdg374kd892cj6dl",
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Using `pulumi import`, import Service Discovery Instance using the service ID and instance ID. For example:
//
// ```sh
//
//	$ pulumi import aws:servicediscovery/instance:Instance example 0123456789/i-0123
//
// ```
type Instance struct {
	pulumi.CustomResourceState

	// A map contains the attributes of the instance. Check the [doc](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#API_RegisterInstance_RequestSyntax) for the supported attributes and syntax.
	Attributes pulumi.StringMapOutput `pulumi:"attributes"`
	// The ID of the service instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The ID of the service that you want to use to create the instance.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Attributes == nil {
		return nil, errors.New("invalid value for required argument 'Attributes'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("aws:servicediscovery/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("aws:servicediscovery/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// A map contains the attributes of the instance. Check the [doc](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#API_RegisterInstance_RequestSyntax) for the supported attributes and syntax.
	Attributes map[string]string `pulumi:"attributes"`
	// The ID of the service instance.
	InstanceId *string `pulumi:"instanceId"`
	// The ID of the service that you want to use to create the instance.
	ServiceId *string `pulumi:"serviceId"`
}

type InstanceState struct {
	// A map contains the attributes of the instance. Check the [doc](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#API_RegisterInstance_RequestSyntax) for the supported attributes and syntax.
	Attributes pulumi.StringMapInput
	// The ID of the service instance.
	InstanceId pulumi.StringPtrInput
	// The ID of the service that you want to use to create the instance.
	ServiceId pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// A map contains the attributes of the instance. Check the [doc](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#API_RegisterInstance_RequestSyntax) for the supported attributes and syntax.
	Attributes map[string]string `pulumi:"attributes"`
	// The ID of the service instance.
	InstanceId string `pulumi:"instanceId"`
	// The ID of the service that you want to use to create the instance.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// A map contains the attributes of the instance. Check the [doc](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#API_RegisterInstance_RequestSyntax) for the supported attributes and syntax.
	Attributes pulumi.StringMapInput
	// The ID of the service instance.
	InstanceId pulumi.StringInput
	// The ID of the service that you want to use to create the instance.
	ServiceId pulumi.StringInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// A map contains the attributes of the instance. Check the [doc](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#API_RegisterInstance_RequestSyntax) for the supported attributes and syntax.
func (o InstanceOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.Attributes }).(pulumi.StringMapOutput)
}

// The ID of the service instance.
func (o InstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The ID of the service that you want to use to create the instance.
func (o InstanceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
