// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicediscovery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about a Service Discovery Service.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/servicediscovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := servicediscovery.LookupService(ctx, &servicediscovery.LookupServiceArgs{
//				Name:        "example",
//				NamespaceId: "NAMESPACE_ID_VALUE",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupService(ctx *pulumi.Context, args *LookupServiceArgs, opts ...pulumi.InvokeOption) (*LookupServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceResult
	err := ctx.Invoke("aws:servicediscovery/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type LookupServiceArgs struct {
	// Name of the service.
	Name string `pulumi:"name"`
	// ID of the namespace that the service belongs to.
	NamespaceId string `pulumi:"namespaceId"`
	// Map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// (**Deprecated**) Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: this attribute has been deprecated
	TagsAll map[string]string `pulumi:"tagsAll"`
}

// A collection of values returned by getService.
type LookupServiceResult struct {
	// ARN of the service.
	Arn string `pulumi:"arn"`
	// Description of the service.
	Description string `pulumi:"description"`
	// Complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
	DnsConfigs []GetServiceDnsConfig `pulumi:"dnsConfigs"`
	// Complex type that contains settings for an optional health check. Only for Public DNS namespaces.
	HealthCheckConfigs []GetServiceHealthCheckConfig `pulumi:"healthCheckConfigs"`
	// A complex type that contains settings for ECS managed health checks.
	HealthCheckCustomConfigs []GetServiceHealthCheckCustomConfig `pulumi:"healthCheckCustomConfigs"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// ID of the namespace to use for DNS configuration.
	NamespaceId string `pulumi:"namespaceId"`
	// Map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// (**Deprecated**) Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: this attribute has been deprecated
	TagsAll map[string]string `pulumi:"tagsAll"`
}

func LookupServiceOutput(ctx *pulumi.Context, args LookupServiceOutputArgs, opts ...pulumi.InvokeOption) LookupServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceResult, error) {
			args := v.(LookupServiceArgs)
			r, err := LookupService(ctx, &args, opts...)
			var s LookupServiceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServiceResultOutput)
}

// A collection of arguments for invoking getService.
type LookupServiceOutputArgs struct {
	// Name of the service.
	Name pulumi.StringInput `pulumi:"name"`
	// ID of the namespace that the service belongs to.
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
	// Map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// (**Deprecated**) Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: this attribute has been deprecated
	TagsAll pulumi.StringMapInput `pulumi:"tagsAll"`
}

func (LookupServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceArgs)(nil)).Elem()
}

// A collection of values returned by getService.
type LookupServiceResultOutput struct{ *pulumi.OutputState }

func (LookupServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceResult)(nil)).Elem()
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutput() LookupServiceResultOutput {
	return o
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutputWithContext(ctx context.Context) LookupServiceResultOutput {
	return o
}

// ARN of the service.
func (o LookupServiceResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Description of the service.
func (o LookupServiceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Description }).(pulumi.StringOutput)
}

// Complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
func (o LookupServiceResultOutput) DnsConfigs() GetServiceDnsConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []GetServiceDnsConfig { return v.DnsConfigs }).(GetServiceDnsConfigArrayOutput)
}

// Complex type that contains settings for an optional health check. Only for Public DNS namespaces.
func (o LookupServiceResultOutput) HealthCheckConfigs() GetServiceHealthCheckConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []GetServiceHealthCheckConfig { return v.HealthCheckConfigs }).(GetServiceHealthCheckConfigArrayOutput)
}

// A complex type that contains settings for ECS managed health checks.
func (o LookupServiceResultOutput) HealthCheckCustomConfigs() GetServiceHealthCheckCustomConfigArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []GetServiceHealthCheckCustomConfig { return v.HealthCheckCustomConfigs }).(GetServiceHealthCheckCustomConfigArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupServiceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Name }).(pulumi.StringOutput)
}

// ID of the namespace to use for DNS configuration.
func (o LookupServiceResultOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// Map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LookupServiceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupServiceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// (**Deprecated**) Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: this attribute has been deprecated
func (o LookupServiceResultOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupServiceResult) map[string]string { return v.TagsAll }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceResultOutput{})
}
