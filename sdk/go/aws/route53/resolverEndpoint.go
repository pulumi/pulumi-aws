// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ResolverEndpoint struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput                  `pulumi:"arn"`
	Direction        pulumi.StringOutput                  `pulumi:"direction"`
	HostVpcId        pulumi.StringOutput                  `pulumi:"hostVpcId"`
	IpAddresses      ResolverEndpointIpAddressArrayOutput `pulumi:"ipAddresses"`
	Name             pulumi.StringOutput                  `pulumi:"name"`
	SecurityGroupIds pulumi.StringArrayOutput             `pulumi:"securityGroupIds"`
	Tags             pulumi.StringMapOutput               `pulumi:"tags"`
	TagsAll          pulumi.StringMapOutput               `pulumi:"tagsAll"`
}

// NewResolverEndpoint registers a new resource with the given unique name, arguments, and options.
func NewResolverEndpoint(ctx *pulumi.Context,
	name string, args *ResolverEndpointArgs, opts ...pulumi.ResourceOption) (*ResolverEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.IpAddresses == nil {
		return nil, errors.New("invalid value for required argument 'IpAddresses'")
	}
	if args.SecurityGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupIds'")
	}
	var resource ResolverEndpoint
	err := ctx.RegisterResource("aws:route53/resolverEndpoint:ResolverEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverEndpoint gets an existing ResolverEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverEndpointState, opts ...pulumi.ResourceOption) (*ResolverEndpoint, error) {
	var resource ResolverEndpoint
	err := ctx.ReadResource("aws:route53/resolverEndpoint:ResolverEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverEndpoint resources.
type resolverEndpointState struct {
	Arn              *string                     `pulumi:"arn"`
	Direction        *string                     `pulumi:"direction"`
	HostVpcId        *string                     `pulumi:"hostVpcId"`
	IpAddresses      []ResolverEndpointIpAddress `pulumi:"ipAddresses"`
	Name             *string                     `pulumi:"name"`
	SecurityGroupIds []string                    `pulumi:"securityGroupIds"`
	Tags             map[string]string           `pulumi:"tags"`
	TagsAll          map[string]string           `pulumi:"tagsAll"`
}

type ResolverEndpointState struct {
	Arn              pulumi.StringPtrInput
	Direction        pulumi.StringPtrInput
	HostVpcId        pulumi.StringPtrInput
	IpAddresses      ResolverEndpointIpAddressArrayInput
	Name             pulumi.StringPtrInput
	SecurityGroupIds pulumi.StringArrayInput
	Tags             pulumi.StringMapInput
	TagsAll          pulumi.StringMapInput
}

func (ResolverEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverEndpointState)(nil)).Elem()
}

type resolverEndpointArgs struct {
	Direction        string                      `pulumi:"direction"`
	IpAddresses      []ResolverEndpointIpAddress `pulumi:"ipAddresses"`
	Name             *string                     `pulumi:"name"`
	SecurityGroupIds []string                    `pulumi:"securityGroupIds"`
	Tags             map[string]string           `pulumi:"tags"`
}

// The set of arguments for constructing a ResolverEndpoint resource.
type ResolverEndpointArgs struct {
	Direction        pulumi.StringInput
	IpAddresses      ResolverEndpointIpAddressArrayInput
	Name             pulumi.StringPtrInput
	SecurityGroupIds pulumi.StringArrayInput
	Tags             pulumi.StringMapInput
}

func (ResolverEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverEndpointArgs)(nil)).Elem()
}

type ResolverEndpointInput interface {
	pulumi.Input

	ToResolverEndpointOutput() ResolverEndpointOutput
	ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput
}

func (*ResolverEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverEndpoint)(nil)).Elem()
}

func (i *ResolverEndpoint) ToResolverEndpointOutput() ResolverEndpointOutput {
	return i.ToResolverEndpointOutputWithContext(context.Background())
}

func (i *ResolverEndpoint) ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointOutput)
}

// ResolverEndpointArrayInput is an input type that accepts ResolverEndpointArray and ResolverEndpointArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointArrayInput` via:
//
//	ResolverEndpointArray{ ResolverEndpointArgs{...} }
type ResolverEndpointArrayInput interface {
	pulumi.Input

	ToResolverEndpointArrayOutput() ResolverEndpointArrayOutput
	ToResolverEndpointArrayOutputWithContext(context.Context) ResolverEndpointArrayOutput
}

type ResolverEndpointArray []ResolverEndpointInput

func (ResolverEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverEndpoint)(nil)).Elem()
}

func (i ResolverEndpointArray) ToResolverEndpointArrayOutput() ResolverEndpointArrayOutput {
	return i.ToResolverEndpointArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointArray) ToResolverEndpointArrayOutputWithContext(ctx context.Context) ResolverEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointArrayOutput)
}

// ResolverEndpointMapInput is an input type that accepts ResolverEndpointMap and ResolverEndpointMapOutput values.
// You can construct a concrete instance of `ResolverEndpointMapInput` via:
//
//	ResolverEndpointMap{ "key": ResolverEndpointArgs{...} }
type ResolverEndpointMapInput interface {
	pulumi.Input

	ToResolverEndpointMapOutput() ResolverEndpointMapOutput
	ToResolverEndpointMapOutputWithContext(context.Context) ResolverEndpointMapOutput
}

type ResolverEndpointMap map[string]ResolverEndpointInput

func (ResolverEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverEndpoint)(nil)).Elem()
}

func (i ResolverEndpointMap) ToResolverEndpointMapOutput() ResolverEndpointMapOutput {
	return i.ToResolverEndpointMapOutputWithContext(context.Background())
}

func (i ResolverEndpointMap) ToResolverEndpointMapOutputWithContext(ctx context.Context) ResolverEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointMapOutput)
}

type ResolverEndpointOutput struct{ *pulumi.OutputState }

func (ResolverEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverEndpoint)(nil)).Elem()
}

func (o ResolverEndpointOutput) ToResolverEndpointOutput() ResolverEndpointOutput {
	return o
}

func (o ResolverEndpointOutput) ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput {
	return o
}

func (o ResolverEndpointOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ResolverEndpointOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

func (o ResolverEndpointOutput) HostVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.HostVpcId }).(pulumi.StringOutput)
}

func (o ResolverEndpointOutput) IpAddresses() ResolverEndpointIpAddressArrayOutput {
	return o.ApplyT(func(v *ResolverEndpoint) ResolverEndpointIpAddressArrayOutput { return v.IpAddresses }).(ResolverEndpointIpAddressArrayOutput)
}

func (o ResolverEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ResolverEndpointOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o ResolverEndpointOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ResolverEndpointOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ResolverEndpointArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverEndpoint)(nil)).Elem()
}

func (o ResolverEndpointArrayOutput) ToResolverEndpointArrayOutput() ResolverEndpointArrayOutput {
	return o
}

func (o ResolverEndpointArrayOutput) ToResolverEndpointArrayOutputWithContext(ctx context.Context) ResolverEndpointArrayOutput {
	return o
}

func (o ResolverEndpointArrayOutput) Index(i pulumi.IntInput) ResolverEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResolverEndpoint {
		return vs[0].([]*ResolverEndpoint)[vs[1].(int)]
	}).(ResolverEndpointOutput)
}

type ResolverEndpointMapOutput struct{ *pulumi.OutputState }

func (ResolverEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverEndpoint)(nil)).Elem()
}

func (o ResolverEndpointMapOutput) ToResolverEndpointMapOutput() ResolverEndpointMapOutput {
	return o
}

func (o ResolverEndpointMapOutput) ToResolverEndpointMapOutputWithContext(ctx context.Context) ResolverEndpointMapOutput {
	return o
}

func (o ResolverEndpointMapOutput) MapIndex(k pulumi.StringInput) ResolverEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResolverEndpoint {
		return vs[0].(map[string]*ResolverEndpoint)[vs[1].(string)]
	}).(ResolverEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointInput)(nil)).Elem(), &ResolverEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointArrayInput)(nil)).Elem(), ResolverEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointMapInput)(nil)).Elem(), ResolverEndpointMap{})
	pulumi.RegisterOutputType(ResolverEndpointOutput{})
	pulumi.RegisterOutputType(ResolverEndpointArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointMapOutput{})
}
