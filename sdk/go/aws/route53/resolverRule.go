// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ResolverRule struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput             `pulumi:"arn"`
	DomainName         pulumi.StringOutput             `pulumi:"domainName"`
	Name               pulumi.StringOutput             `pulumi:"name"`
	OwnerId            pulumi.StringOutput             `pulumi:"ownerId"`
	ResolverEndpointId pulumi.StringPtrOutput          `pulumi:"resolverEndpointId"`
	RuleType           pulumi.StringOutput             `pulumi:"ruleType"`
	ShareStatus        pulumi.StringOutput             `pulumi:"shareStatus"`
	Tags               pulumi.StringMapOutput          `pulumi:"tags"`
	TagsAll            pulumi.StringMapOutput          `pulumi:"tagsAll"`
	TargetIps          ResolverRuleTargetIpArrayOutput `pulumi:"targetIps"`
}

// NewResolverRule registers a new resource with the given unique name, arguments, and options.
func NewResolverRule(ctx *pulumi.Context,
	name string, args *ResolverRuleArgs, opts ...pulumi.ResourceOption) (*ResolverRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.RuleType == nil {
		return nil, errors.New("invalid value for required argument 'RuleType'")
	}
	var resource ResolverRule
	err := ctx.RegisterResource("aws:route53/resolverRule:ResolverRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverRule gets an existing ResolverRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverRuleState, opts ...pulumi.ResourceOption) (*ResolverRule, error) {
	var resource ResolverRule
	err := ctx.ReadResource("aws:route53/resolverRule:ResolverRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverRule resources.
type resolverRuleState struct {
	Arn                *string                `pulumi:"arn"`
	DomainName         *string                `pulumi:"domainName"`
	Name               *string                `pulumi:"name"`
	OwnerId            *string                `pulumi:"ownerId"`
	ResolverEndpointId *string                `pulumi:"resolverEndpointId"`
	RuleType           *string                `pulumi:"ruleType"`
	ShareStatus        *string                `pulumi:"shareStatus"`
	Tags               map[string]string      `pulumi:"tags"`
	TagsAll            map[string]string      `pulumi:"tagsAll"`
	TargetIps          []ResolverRuleTargetIp `pulumi:"targetIps"`
}

type ResolverRuleState struct {
	Arn                pulumi.StringPtrInput
	DomainName         pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	OwnerId            pulumi.StringPtrInput
	ResolverEndpointId pulumi.StringPtrInput
	RuleType           pulumi.StringPtrInput
	ShareStatus        pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	TagsAll            pulumi.StringMapInput
	TargetIps          ResolverRuleTargetIpArrayInput
}

func (ResolverRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverRuleState)(nil)).Elem()
}

type resolverRuleArgs struct {
	DomainName         string                 `pulumi:"domainName"`
	Name               *string                `pulumi:"name"`
	ResolverEndpointId *string                `pulumi:"resolverEndpointId"`
	RuleType           string                 `pulumi:"ruleType"`
	Tags               map[string]string      `pulumi:"tags"`
	TargetIps          []ResolverRuleTargetIp `pulumi:"targetIps"`
}

// The set of arguments for constructing a ResolverRule resource.
type ResolverRuleArgs struct {
	DomainName         pulumi.StringInput
	Name               pulumi.StringPtrInput
	ResolverEndpointId pulumi.StringPtrInput
	RuleType           pulumi.StringInput
	Tags               pulumi.StringMapInput
	TargetIps          ResolverRuleTargetIpArrayInput
}

func (ResolverRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverRuleArgs)(nil)).Elem()
}

type ResolverRuleInput interface {
	pulumi.Input

	ToResolverRuleOutput() ResolverRuleOutput
	ToResolverRuleOutputWithContext(ctx context.Context) ResolverRuleOutput
}

func (*ResolverRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverRule)(nil)).Elem()
}

func (i *ResolverRule) ToResolverRuleOutput() ResolverRuleOutput {
	return i.ToResolverRuleOutputWithContext(context.Background())
}

func (i *ResolverRule) ToResolverRuleOutputWithContext(ctx context.Context) ResolverRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleOutput)
}

// ResolverRuleArrayInput is an input type that accepts ResolverRuleArray and ResolverRuleArrayOutput values.
// You can construct a concrete instance of `ResolverRuleArrayInput` via:
//
//	ResolverRuleArray{ ResolverRuleArgs{...} }
type ResolverRuleArrayInput interface {
	pulumi.Input

	ToResolverRuleArrayOutput() ResolverRuleArrayOutput
	ToResolverRuleArrayOutputWithContext(context.Context) ResolverRuleArrayOutput
}

type ResolverRuleArray []ResolverRuleInput

func (ResolverRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverRule)(nil)).Elem()
}

func (i ResolverRuleArray) ToResolverRuleArrayOutput() ResolverRuleArrayOutput {
	return i.ToResolverRuleArrayOutputWithContext(context.Background())
}

func (i ResolverRuleArray) ToResolverRuleArrayOutputWithContext(ctx context.Context) ResolverRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleArrayOutput)
}

// ResolverRuleMapInput is an input type that accepts ResolverRuleMap and ResolverRuleMapOutput values.
// You can construct a concrete instance of `ResolverRuleMapInput` via:
//
//	ResolverRuleMap{ "key": ResolverRuleArgs{...} }
type ResolverRuleMapInput interface {
	pulumi.Input

	ToResolverRuleMapOutput() ResolverRuleMapOutput
	ToResolverRuleMapOutputWithContext(context.Context) ResolverRuleMapOutput
}

type ResolverRuleMap map[string]ResolverRuleInput

func (ResolverRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverRule)(nil)).Elem()
}

func (i ResolverRuleMap) ToResolverRuleMapOutput() ResolverRuleMapOutput {
	return i.ToResolverRuleMapOutputWithContext(context.Background())
}

func (i ResolverRuleMap) ToResolverRuleMapOutputWithContext(ctx context.Context) ResolverRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleMapOutput)
}

type ResolverRuleOutput struct{ *pulumi.OutputState }

func (ResolverRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverRule)(nil)).Elem()
}

func (o ResolverRuleOutput) ToResolverRuleOutput() ResolverRuleOutput {
	return o
}

func (o ResolverRuleOutput) ToResolverRuleOutputWithContext(ctx context.Context) ResolverRuleOutput {
	return o
}

func (o ResolverRuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverRule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ResolverRuleOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverRule) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

func (o ResolverRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ResolverRuleOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverRule) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o ResolverRuleOutput) ResolverEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverRule) pulumi.StringPtrOutput { return v.ResolverEndpointId }).(pulumi.StringPtrOutput)
}

func (o ResolverRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverRule) pulumi.StringOutput { return v.RuleType }).(pulumi.StringOutput)
}

func (o ResolverRuleOutput) ShareStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverRule) pulumi.StringOutput { return v.ShareStatus }).(pulumi.StringOutput)
}

func (o ResolverRuleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResolverRule) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ResolverRuleOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResolverRule) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ResolverRuleOutput) TargetIps() ResolverRuleTargetIpArrayOutput {
	return o.ApplyT(func(v *ResolverRule) ResolverRuleTargetIpArrayOutput { return v.TargetIps }).(ResolverRuleTargetIpArrayOutput)
}

type ResolverRuleArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverRule)(nil)).Elem()
}

func (o ResolverRuleArrayOutput) ToResolverRuleArrayOutput() ResolverRuleArrayOutput {
	return o
}

func (o ResolverRuleArrayOutput) ToResolverRuleArrayOutputWithContext(ctx context.Context) ResolverRuleArrayOutput {
	return o
}

func (o ResolverRuleArrayOutput) Index(i pulumi.IntInput) ResolverRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResolverRule {
		return vs[0].([]*ResolverRule)[vs[1].(int)]
	}).(ResolverRuleOutput)
}

type ResolverRuleMapOutput struct{ *pulumi.OutputState }

func (ResolverRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverRule)(nil)).Elem()
}

func (o ResolverRuleMapOutput) ToResolverRuleMapOutput() ResolverRuleMapOutput {
	return o
}

func (o ResolverRuleMapOutput) ToResolverRuleMapOutputWithContext(ctx context.Context) ResolverRuleMapOutput {
	return o
}

func (o ResolverRuleMapOutput) MapIndex(k pulumi.StringInput) ResolverRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResolverRule {
		return vs[0].(map[string]*ResolverRule)[vs[1].(string)]
	}).(ResolverRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleInput)(nil)).Elem(), &ResolverRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleArrayInput)(nil)).Elem(), ResolverRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleMapInput)(nil)).Elem(), ResolverRuleMap{})
	pulumi.RegisterOutputType(ResolverRuleOutput{})
	pulumi.RegisterOutputType(ResolverRuleArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleMapOutput{})
}
