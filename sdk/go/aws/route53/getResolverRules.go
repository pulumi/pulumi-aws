// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `route53.getResolverRules` provides details about a set of Route53 Resolver rules.
//
// ## Example Usage
//
// ### Retrieving the default resolver rule
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := route53.GetResolverRules(ctx, &route53.GetResolverRulesArgs{
//				OwnerId:     pulumi.StringRef("Route 53 Resolver"),
//				RuleType:    pulumi.StringRef("RECURSIVE"),
//				ShareStatus: pulumi.StringRef("NOT_SHARED"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Retrieving forward rules shared with me
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := route53.GetResolverRules(ctx, &route53.GetResolverRulesArgs{
//				RuleType:    pulumi.StringRef("FORWARD"),
//				ShareStatus: pulumi.StringRef("SHARED_WITH_ME"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Retrieving rules by name regex
//
// Resolver rules whose name contains `abc`.
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := route53.GetResolverRules(ctx, &route53.GetResolverRulesArgs{
//				NameRegex: pulumi.StringRef(".*abc.*"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetResolverRules(ctx *pulumi.Context, args *GetResolverRulesArgs, opts ...pulumi.InvokeOption) (*GetResolverRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetResolverRulesResult
	err := ctx.Invoke("aws:route53/getResolverRules:getResolverRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResolverRules.
type GetResolverRulesArgs struct {
	// Regex string to filter resolver rule names.
	// The filtering is done locally, so could have a performance impact if the result is large.
	// This argument should be used along with other arguments to limit the number of results returned.
	NameRegex *string `pulumi:"nameRegex"`
	// When the desired resolver rules are shared with another AWS account, the account ID of the account that the rules are shared with.
	OwnerId *string `pulumi:"ownerId"`
	// ID of the outbound resolver endpoint for the desired resolver rules.
	ResolverEndpointId *string `pulumi:"resolverEndpointId"`
	// Rule type of the desired resolver rules. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
	RuleType *string `pulumi:"ruleType"`
	// Whether the desired resolver rules are shared and, if so, whether the current account is sharing the rules with another account, or another account is sharing the rules with the current account. Valid values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
	ShareStatus *string `pulumi:"shareStatus"`
}

// A collection of values returned by getResolverRules.
type GetResolverRulesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id                 string  `pulumi:"id"`
	NameRegex          *string `pulumi:"nameRegex"`
	OwnerId            *string `pulumi:"ownerId"`
	ResolverEndpointId *string `pulumi:"resolverEndpointId"`
	// IDs of the matched resolver rules.
	ResolverRuleIds []string `pulumi:"resolverRuleIds"`
	RuleType        *string  `pulumi:"ruleType"`
	ShareStatus     *string  `pulumi:"shareStatus"`
}

func GetResolverRulesOutput(ctx *pulumi.Context, args GetResolverRulesOutputArgs, opts ...pulumi.InvokeOption) GetResolverRulesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetResolverRulesResult, error) {
			args := v.(GetResolverRulesArgs)
			r, err := GetResolverRules(ctx, &args, opts...)
			var s GetResolverRulesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetResolverRulesResultOutput)
}

// A collection of arguments for invoking getResolverRules.
type GetResolverRulesOutputArgs struct {
	// Regex string to filter resolver rule names.
	// The filtering is done locally, so could have a performance impact if the result is large.
	// This argument should be used along with other arguments to limit the number of results returned.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// When the desired resolver rules are shared with another AWS account, the account ID of the account that the rules are shared with.
	OwnerId pulumi.StringPtrInput `pulumi:"ownerId"`
	// ID of the outbound resolver endpoint for the desired resolver rules.
	ResolverEndpointId pulumi.StringPtrInput `pulumi:"resolverEndpointId"`
	// Rule type of the desired resolver rules. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
	RuleType pulumi.StringPtrInput `pulumi:"ruleType"`
	// Whether the desired resolver rules are shared and, if so, whether the current account is sharing the rules with another account, or another account is sharing the rules with the current account. Valid values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
	ShareStatus pulumi.StringPtrInput `pulumi:"shareStatus"`
}

func (GetResolverRulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesArgs)(nil)).Elem()
}

// A collection of values returned by getResolverRules.
type GetResolverRulesResultOutput struct{ *pulumi.OutputState }

func (GetResolverRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesResult)(nil)).Elem()
}

func (o GetResolverRulesResultOutput) ToGetResolverRulesResultOutput() GetResolverRulesResultOutput {
	return o
}

func (o GetResolverRulesResultOutput) ToGetResolverRulesResultOutputWithContext(ctx context.Context) GetResolverRulesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetResolverRulesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetResolverRulesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResolverRulesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetResolverRulesResultOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResolverRulesResult) *string { return v.OwnerId }).(pulumi.StringPtrOutput)
}

func (o GetResolverRulesResultOutput) ResolverEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResolverRulesResult) *string { return v.ResolverEndpointId }).(pulumi.StringPtrOutput)
}

// IDs of the matched resolver rules.
func (o GetResolverRulesResultOutput) ResolverRuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetResolverRulesResult) []string { return v.ResolverRuleIds }).(pulumi.StringArrayOutput)
}

func (o GetResolverRulesResultOutput) RuleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResolverRulesResult) *string { return v.RuleType }).(pulumi.StringPtrOutput)
}

func (o GetResolverRulesResultOutput) ShareStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResolverRulesResult) *string { return v.ShareStatus }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetResolverRulesResultOutput{})
}
