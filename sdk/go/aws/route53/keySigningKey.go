// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KeySigningKey struct {
	pulumi.CustomResourceState

	DigestAlgorithmMnemonic  pulumi.StringOutput    `pulumi:"digestAlgorithmMnemonic"`
	DigestAlgorithmType      pulumi.IntOutput       `pulumi:"digestAlgorithmType"`
	DigestValue              pulumi.StringOutput    `pulumi:"digestValue"`
	DnskeyRecord             pulumi.StringOutput    `pulumi:"dnskeyRecord"`
	DsRecord                 pulumi.StringOutput    `pulumi:"dsRecord"`
	Flag                     pulumi.IntOutput       `pulumi:"flag"`
	HostedZoneId             pulumi.StringOutput    `pulumi:"hostedZoneId"`
	KeyManagementServiceArn  pulumi.StringOutput    `pulumi:"keyManagementServiceArn"`
	KeyTag                   pulumi.IntOutput       `pulumi:"keyTag"`
	Name                     pulumi.StringOutput    `pulumi:"name"`
	PublicKey                pulumi.StringOutput    `pulumi:"publicKey"`
	SigningAlgorithmMnemonic pulumi.StringOutput    `pulumi:"signingAlgorithmMnemonic"`
	SigningAlgorithmType     pulumi.IntOutput       `pulumi:"signingAlgorithmType"`
	Status                   pulumi.StringPtrOutput `pulumi:"status"`
}

// NewKeySigningKey registers a new resource with the given unique name, arguments, and options.
func NewKeySigningKey(ctx *pulumi.Context,
	name string, args *KeySigningKeyArgs, opts ...pulumi.ResourceOption) (*KeySigningKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostedZoneId == nil {
		return nil, errors.New("invalid value for required argument 'HostedZoneId'")
	}
	if args.KeyManagementServiceArn == nil {
		return nil, errors.New("invalid value for required argument 'KeyManagementServiceArn'")
	}
	var resource KeySigningKey
	err := ctx.RegisterResource("aws:route53/keySigningKey:KeySigningKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeySigningKey gets an existing KeySigningKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeySigningKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeySigningKeyState, opts ...pulumi.ResourceOption) (*KeySigningKey, error) {
	var resource KeySigningKey
	err := ctx.ReadResource("aws:route53/keySigningKey:KeySigningKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeySigningKey resources.
type keySigningKeyState struct {
	DigestAlgorithmMnemonic  *string `pulumi:"digestAlgorithmMnemonic"`
	DigestAlgorithmType      *int    `pulumi:"digestAlgorithmType"`
	DigestValue              *string `pulumi:"digestValue"`
	DnskeyRecord             *string `pulumi:"dnskeyRecord"`
	DsRecord                 *string `pulumi:"dsRecord"`
	Flag                     *int    `pulumi:"flag"`
	HostedZoneId             *string `pulumi:"hostedZoneId"`
	KeyManagementServiceArn  *string `pulumi:"keyManagementServiceArn"`
	KeyTag                   *int    `pulumi:"keyTag"`
	Name                     *string `pulumi:"name"`
	PublicKey                *string `pulumi:"publicKey"`
	SigningAlgorithmMnemonic *string `pulumi:"signingAlgorithmMnemonic"`
	SigningAlgorithmType     *int    `pulumi:"signingAlgorithmType"`
	Status                   *string `pulumi:"status"`
}

type KeySigningKeyState struct {
	DigestAlgorithmMnemonic  pulumi.StringPtrInput
	DigestAlgorithmType      pulumi.IntPtrInput
	DigestValue              pulumi.StringPtrInput
	DnskeyRecord             pulumi.StringPtrInput
	DsRecord                 pulumi.StringPtrInput
	Flag                     pulumi.IntPtrInput
	HostedZoneId             pulumi.StringPtrInput
	KeyManagementServiceArn  pulumi.StringPtrInput
	KeyTag                   pulumi.IntPtrInput
	Name                     pulumi.StringPtrInput
	PublicKey                pulumi.StringPtrInput
	SigningAlgorithmMnemonic pulumi.StringPtrInput
	SigningAlgorithmType     pulumi.IntPtrInput
	Status                   pulumi.StringPtrInput
}

func (KeySigningKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keySigningKeyState)(nil)).Elem()
}

type keySigningKeyArgs struct {
	HostedZoneId            string  `pulumi:"hostedZoneId"`
	KeyManagementServiceArn string  `pulumi:"keyManagementServiceArn"`
	Name                    *string `pulumi:"name"`
	Status                  *string `pulumi:"status"`
}

// The set of arguments for constructing a KeySigningKey resource.
type KeySigningKeyArgs struct {
	HostedZoneId            pulumi.StringInput
	KeyManagementServiceArn pulumi.StringInput
	Name                    pulumi.StringPtrInput
	Status                  pulumi.StringPtrInput
}

func (KeySigningKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keySigningKeyArgs)(nil)).Elem()
}

type KeySigningKeyInput interface {
	pulumi.Input

	ToKeySigningKeyOutput() KeySigningKeyOutput
	ToKeySigningKeyOutputWithContext(ctx context.Context) KeySigningKeyOutput
}

func (*KeySigningKey) ElementType() reflect.Type {
	return reflect.TypeOf((**KeySigningKey)(nil)).Elem()
}

func (i *KeySigningKey) ToKeySigningKeyOutput() KeySigningKeyOutput {
	return i.ToKeySigningKeyOutputWithContext(context.Background())
}

func (i *KeySigningKey) ToKeySigningKeyOutputWithContext(ctx context.Context) KeySigningKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeySigningKeyOutput)
}

// KeySigningKeyArrayInput is an input type that accepts KeySigningKeyArray and KeySigningKeyArrayOutput values.
// You can construct a concrete instance of `KeySigningKeyArrayInput` via:
//
//	KeySigningKeyArray{ KeySigningKeyArgs{...} }
type KeySigningKeyArrayInput interface {
	pulumi.Input

	ToKeySigningKeyArrayOutput() KeySigningKeyArrayOutput
	ToKeySigningKeyArrayOutputWithContext(context.Context) KeySigningKeyArrayOutput
}

type KeySigningKeyArray []KeySigningKeyInput

func (KeySigningKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeySigningKey)(nil)).Elem()
}

func (i KeySigningKeyArray) ToKeySigningKeyArrayOutput() KeySigningKeyArrayOutput {
	return i.ToKeySigningKeyArrayOutputWithContext(context.Background())
}

func (i KeySigningKeyArray) ToKeySigningKeyArrayOutputWithContext(ctx context.Context) KeySigningKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeySigningKeyArrayOutput)
}

// KeySigningKeyMapInput is an input type that accepts KeySigningKeyMap and KeySigningKeyMapOutput values.
// You can construct a concrete instance of `KeySigningKeyMapInput` via:
//
//	KeySigningKeyMap{ "key": KeySigningKeyArgs{...} }
type KeySigningKeyMapInput interface {
	pulumi.Input

	ToKeySigningKeyMapOutput() KeySigningKeyMapOutput
	ToKeySigningKeyMapOutputWithContext(context.Context) KeySigningKeyMapOutput
}

type KeySigningKeyMap map[string]KeySigningKeyInput

func (KeySigningKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeySigningKey)(nil)).Elem()
}

func (i KeySigningKeyMap) ToKeySigningKeyMapOutput() KeySigningKeyMapOutput {
	return i.ToKeySigningKeyMapOutputWithContext(context.Background())
}

func (i KeySigningKeyMap) ToKeySigningKeyMapOutputWithContext(ctx context.Context) KeySigningKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeySigningKeyMapOutput)
}

type KeySigningKeyOutput struct{ *pulumi.OutputState }

func (KeySigningKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeySigningKey)(nil)).Elem()
}

func (o KeySigningKeyOutput) ToKeySigningKeyOutput() KeySigningKeyOutput {
	return o
}

func (o KeySigningKeyOutput) ToKeySigningKeyOutputWithContext(ctx context.Context) KeySigningKeyOutput {
	return o
}

func (o KeySigningKeyOutput) DigestAlgorithmMnemonic() pulumi.StringOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.StringOutput { return v.DigestAlgorithmMnemonic }).(pulumi.StringOutput)
}

func (o KeySigningKeyOutput) DigestAlgorithmType() pulumi.IntOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.IntOutput { return v.DigestAlgorithmType }).(pulumi.IntOutput)
}

func (o KeySigningKeyOutput) DigestValue() pulumi.StringOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.StringOutput { return v.DigestValue }).(pulumi.StringOutput)
}

func (o KeySigningKeyOutput) DnskeyRecord() pulumi.StringOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.StringOutput { return v.DnskeyRecord }).(pulumi.StringOutput)
}

func (o KeySigningKeyOutput) DsRecord() pulumi.StringOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.StringOutput { return v.DsRecord }).(pulumi.StringOutput)
}

func (o KeySigningKeyOutput) Flag() pulumi.IntOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.IntOutput { return v.Flag }).(pulumi.IntOutput)
}

func (o KeySigningKeyOutput) HostedZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.StringOutput { return v.HostedZoneId }).(pulumi.StringOutput)
}

func (o KeySigningKeyOutput) KeyManagementServiceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.StringOutput { return v.KeyManagementServiceArn }).(pulumi.StringOutput)
}

func (o KeySigningKeyOutput) KeyTag() pulumi.IntOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.IntOutput { return v.KeyTag }).(pulumi.IntOutput)
}

func (o KeySigningKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KeySigningKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

func (o KeySigningKeyOutput) SigningAlgorithmMnemonic() pulumi.StringOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.StringOutput { return v.SigningAlgorithmMnemonic }).(pulumi.StringOutput)
}

func (o KeySigningKeyOutput) SigningAlgorithmType() pulumi.IntOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.IntOutput { return v.SigningAlgorithmType }).(pulumi.IntOutput)
}

func (o KeySigningKeyOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeySigningKey) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type KeySigningKeyArrayOutput struct{ *pulumi.OutputState }

func (KeySigningKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeySigningKey)(nil)).Elem()
}

func (o KeySigningKeyArrayOutput) ToKeySigningKeyArrayOutput() KeySigningKeyArrayOutput {
	return o
}

func (o KeySigningKeyArrayOutput) ToKeySigningKeyArrayOutputWithContext(ctx context.Context) KeySigningKeyArrayOutput {
	return o
}

func (o KeySigningKeyArrayOutput) Index(i pulumi.IntInput) KeySigningKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeySigningKey {
		return vs[0].([]*KeySigningKey)[vs[1].(int)]
	}).(KeySigningKeyOutput)
}

type KeySigningKeyMapOutput struct{ *pulumi.OutputState }

func (KeySigningKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeySigningKey)(nil)).Elem()
}

func (o KeySigningKeyMapOutput) ToKeySigningKeyMapOutput() KeySigningKeyMapOutput {
	return o
}

func (o KeySigningKeyMapOutput) ToKeySigningKeyMapOutputWithContext(ctx context.Context) KeySigningKeyMapOutput {
	return o
}

func (o KeySigningKeyMapOutput) MapIndex(k pulumi.StringInput) KeySigningKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeySigningKey {
		return vs[0].(map[string]*KeySigningKey)[vs[1].(string)]
	}).(KeySigningKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeySigningKeyInput)(nil)).Elem(), &KeySigningKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeySigningKeyArrayInput)(nil)).Elem(), KeySigningKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeySigningKeyMapInput)(nil)).Elem(), KeySigningKeyMap{})
	pulumi.RegisterOutputType(KeySigningKeyOutput{})
	pulumi.RegisterOutputType(KeySigningKeyArrayOutput{})
	pulumi.RegisterOutputType(KeySigningKeyMapOutput{})
}
