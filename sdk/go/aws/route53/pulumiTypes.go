// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ProfilesAssociationTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// ProfilesAssociationTimeoutsInput is an input type that accepts ProfilesAssociationTimeoutsArgs and ProfilesAssociationTimeoutsOutput values.
// You can construct a concrete instance of `ProfilesAssociationTimeoutsInput` via:
//
//	ProfilesAssociationTimeoutsArgs{...}
type ProfilesAssociationTimeoutsInput interface {
	pulumi.Input

	ToProfilesAssociationTimeoutsOutput() ProfilesAssociationTimeoutsOutput
	ToProfilesAssociationTimeoutsOutputWithContext(context.Context) ProfilesAssociationTimeoutsOutput
}

type ProfilesAssociationTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (ProfilesAssociationTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilesAssociationTimeouts)(nil)).Elem()
}

func (i ProfilesAssociationTimeoutsArgs) ToProfilesAssociationTimeoutsOutput() ProfilesAssociationTimeoutsOutput {
	return i.ToProfilesAssociationTimeoutsOutputWithContext(context.Background())
}

func (i ProfilesAssociationTimeoutsArgs) ToProfilesAssociationTimeoutsOutputWithContext(ctx context.Context) ProfilesAssociationTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesAssociationTimeoutsOutput)
}

func (i ProfilesAssociationTimeoutsArgs) ToProfilesAssociationTimeoutsPtrOutput() ProfilesAssociationTimeoutsPtrOutput {
	return i.ToProfilesAssociationTimeoutsPtrOutputWithContext(context.Background())
}

func (i ProfilesAssociationTimeoutsArgs) ToProfilesAssociationTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesAssociationTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesAssociationTimeoutsOutput).ToProfilesAssociationTimeoutsPtrOutputWithContext(ctx)
}

// ProfilesAssociationTimeoutsPtrInput is an input type that accepts ProfilesAssociationTimeoutsArgs, ProfilesAssociationTimeoutsPtr and ProfilesAssociationTimeoutsPtrOutput values.
// You can construct a concrete instance of `ProfilesAssociationTimeoutsPtrInput` via:
//
//	        ProfilesAssociationTimeoutsArgs{...}
//
//	or:
//
//	        nil
type ProfilesAssociationTimeoutsPtrInput interface {
	pulumi.Input

	ToProfilesAssociationTimeoutsPtrOutput() ProfilesAssociationTimeoutsPtrOutput
	ToProfilesAssociationTimeoutsPtrOutputWithContext(context.Context) ProfilesAssociationTimeoutsPtrOutput
}

type profilesAssociationTimeoutsPtrType ProfilesAssociationTimeoutsArgs

func ProfilesAssociationTimeoutsPtr(v *ProfilesAssociationTimeoutsArgs) ProfilesAssociationTimeoutsPtrInput {
	return (*profilesAssociationTimeoutsPtrType)(v)
}

func (*profilesAssociationTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilesAssociationTimeouts)(nil)).Elem()
}

func (i *profilesAssociationTimeoutsPtrType) ToProfilesAssociationTimeoutsPtrOutput() ProfilesAssociationTimeoutsPtrOutput {
	return i.ToProfilesAssociationTimeoutsPtrOutputWithContext(context.Background())
}

func (i *profilesAssociationTimeoutsPtrType) ToProfilesAssociationTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesAssociationTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesAssociationTimeoutsPtrOutput)
}

type ProfilesAssociationTimeoutsOutput struct{ *pulumi.OutputState }

func (ProfilesAssociationTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilesAssociationTimeouts)(nil)).Elem()
}

func (o ProfilesAssociationTimeoutsOutput) ToProfilesAssociationTimeoutsOutput() ProfilesAssociationTimeoutsOutput {
	return o
}

func (o ProfilesAssociationTimeoutsOutput) ToProfilesAssociationTimeoutsOutputWithContext(ctx context.Context) ProfilesAssociationTimeoutsOutput {
	return o
}

func (o ProfilesAssociationTimeoutsOutput) ToProfilesAssociationTimeoutsPtrOutput() ProfilesAssociationTimeoutsPtrOutput {
	return o.ToProfilesAssociationTimeoutsPtrOutputWithContext(context.Background())
}

func (o ProfilesAssociationTimeoutsOutput) ToProfilesAssociationTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesAssociationTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfilesAssociationTimeouts) *ProfilesAssociationTimeouts {
		return &v
	}).(ProfilesAssociationTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ProfilesAssociationTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilesAssociationTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ProfilesAssociationTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilesAssociationTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ProfilesAssociationTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilesAssociationTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type ProfilesAssociationTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (ProfilesAssociationTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilesAssociationTimeouts)(nil)).Elem()
}

func (o ProfilesAssociationTimeoutsPtrOutput) ToProfilesAssociationTimeoutsPtrOutput() ProfilesAssociationTimeoutsPtrOutput {
	return o
}

func (o ProfilesAssociationTimeoutsPtrOutput) ToProfilesAssociationTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesAssociationTimeoutsPtrOutput {
	return o
}

func (o ProfilesAssociationTimeoutsPtrOutput) Elem() ProfilesAssociationTimeoutsOutput {
	return o.ApplyT(func(v *ProfilesAssociationTimeouts) ProfilesAssociationTimeouts {
		if v != nil {
			return *v
		}
		var ret ProfilesAssociationTimeouts
		return ret
	}).(ProfilesAssociationTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ProfilesAssociationTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilesAssociationTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ProfilesAssociationTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilesAssociationTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ProfilesAssociationTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilesAssociationTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type ProfilesProfileTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
}

// ProfilesProfileTimeoutsInput is an input type that accepts ProfilesProfileTimeoutsArgs and ProfilesProfileTimeoutsOutput values.
// You can construct a concrete instance of `ProfilesProfileTimeoutsInput` via:
//
//	ProfilesProfileTimeoutsArgs{...}
type ProfilesProfileTimeoutsInput interface {
	pulumi.Input

	ToProfilesProfileTimeoutsOutput() ProfilesProfileTimeoutsOutput
	ToProfilesProfileTimeoutsOutputWithContext(context.Context) ProfilesProfileTimeoutsOutput
}

type ProfilesProfileTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
}

func (ProfilesProfileTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilesProfileTimeouts)(nil)).Elem()
}

func (i ProfilesProfileTimeoutsArgs) ToProfilesProfileTimeoutsOutput() ProfilesProfileTimeoutsOutput {
	return i.ToProfilesProfileTimeoutsOutputWithContext(context.Background())
}

func (i ProfilesProfileTimeoutsArgs) ToProfilesProfileTimeoutsOutputWithContext(ctx context.Context) ProfilesProfileTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesProfileTimeoutsOutput)
}

func (i ProfilesProfileTimeoutsArgs) ToProfilesProfileTimeoutsPtrOutput() ProfilesProfileTimeoutsPtrOutput {
	return i.ToProfilesProfileTimeoutsPtrOutputWithContext(context.Background())
}

func (i ProfilesProfileTimeoutsArgs) ToProfilesProfileTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesProfileTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesProfileTimeoutsOutput).ToProfilesProfileTimeoutsPtrOutputWithContext(ctx)
}

// ProfilesProfileTimeoutsPtrInput is an input type that accepts ProfilesProfileTimeoutsArgs, ProfilesProfileTimeoutsPtr and ProfilesProfileTimeoutsPtrOutput values.
// You can construct a concrete instance of `ProfilesProfileTimeoutsPtrInput` via:
//
//	        ProfilesProfileTimeoutsArgs{...}
//
//	or:
//
//	        nil
type ProfilesProfileTimeoutsPtrInput interface {
	pulumi.Input

	ToProfilesProfileTimeoutsPtrOutput() ProfilesProfileTimeoutsPtrOutput
	ToProfilesProfileTimeoutsPtrOutputWithContext(context.Context) ProfilesProfileTimeoutsPtrOutput
}

type profilesProfileTimeoutsPtrType ProfilesProfileTimeoutsArgs

func ProfilesProfileTimeoutsPtr(v *ProfilesProfileTimeoutsArgs) ProfilesProfileTimeoutsPtrInput {
	return (*profilesProfileTimeoutsPtrType)(v)
}

func (*profilesProfileTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilesProfileTimeouts)(nil)).Elem()
}

func (i *profilesProfileTimeoutsPtrType) ToProfilesProfileTimeoutsPtrOutput() ProfilesProfileTimeoutsPtrOutput {
	return i.ToProfilesProfileTimeoutsPtrOutputWithContext(context.Background())
}

func (i *profilesProfileTimeoutsPtrType) ToProfilesProfileTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesProfileTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesProfileTimeoutsPtrOutput)
}

type ProfilesProfileTimeoutsOutput struct{ *pulumi.OutputState }

func (ProfilesProfileTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilesProfileTimeouts)(nil)).Elem()
}

func (o ProfilesProfileTimeoutsOutput) ToProfilesProfileTimeoutsOutput() ProfilesProfileTimeoutsOutput {
	return o
}

func (o ProfilesProfileTimeoutsOutput) ToProfilesProfileTimeoutsOutputWithContext(ctx context.Context) ProfilesProfileTimeoutsOutput {
	return o
}

func (o ProfilesProfileTimeoutsOutput) ToProfilesProfileTimeoutsPtrOutput() ProfilesProfileTimeoutsPtrOutput {
	return o.ToProfilesProfileTimeoutsPtrOutputWithContext(context.Background())
}

func (o ProfilesProfileTimeoutsOutput) ToProfilesProfileTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesProfileTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfilesProfileTimeouts) *ProfilesProfileTimeouts {
		return &v
	}).(ProfilesProfileTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ProfilesProfileTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilesProfileTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ProfilesProfileTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilesProfileTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o ProfilesProfileTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilesProfileTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

type ProfilesProfileTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (ProfilesProfileTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilesProfileTimeouts)(nil)).Elem()
}

func (o ProfilesProfileTimeoutsPtrOutput) ToProfilesProfileTimeoutsPtrOutput() ProfilesProfileTimeoutsPtrOutput {
	return o
}

func (o ProfilesProfileTimeoutsPtrOutput) ToProfilesProfileTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesProfileTimeoutsPtrOutput {
	return o
}

func (o ProfilesProfileTimeoutsPtrOutput) Elem() ProfilesProfileTimeoutsOutput {
	return o.ApplyT(func(v *ProfilesProfileTimeouts) ProfilesProfileTimeouts {
		if v != nil {
			return *v
		}
		var ret ProfilesProfileTimeouts
		return ret
	}).(ProfilesProfileTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ProfilesProfileTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilesProfileTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ProfilesProfileTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilesProfileTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o ProfilesProfileTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilesProfileTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

type ProfilesResourceAssociationTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
}

// ProfilesResourceAssociationTimeoutsInput is an input type that accepts ProfilesResourceAssociationTimeoutsArgs and ProfilesResourceAssociationTimeoutsOutput values.
// You can construct a concrete instance of `ProfilesResourceAssociationTimeoutsInput` via:
//
//	ProfilesResourceAssociationTimeoutsArgs{...}
type ProfilesResourceAssociationTimeoutsInput interface {
	pulumi.Input

	ToProfilesResourceAssociationTimeoutsOutput() ProfilesResourceAssociationTimeoutsOutput
	ToProfilesResourceAssociationTimeoutsOutputWithContext(context.Context) ProfilesResourceAssociationTimeoutsOutput
}

type ProfilesResourceAssociationTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
}

func (ProfilesResourceAssociationTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilesResourceAssociationTimeouts)(nil)).Elem()
}

func (i ProfilesResourceAssociationTimeoutsArgs) ToProfilesResourceAssociationTimeoutsOutput() ProfilesResourceAssociationTimeoutsOutput {
	return i.ToProfilesResourceAssociationTimeoutsOutputWithContext(context.Background())
}

func (i ProfilesResourceAssociationTimeoutsArgs) ToProfilesResourceAssociationTimeoutsOutputWithContext(ctx context.Context) ProfilesResourceAssociationTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesResourceAssociationTimeoutsOutput)
}

func (i ProfilesResourceAssociationTimeoutsArgs) ToProfilesResourceAssociationTimeoutsPtrOutput() ProfilesResourceAssociationTimeoutsPtrOutput {
	return i.ToProfilesResourceAssociationTimeoutsPtrOutputWithContext(context.Background())
}

func (i ProfilesResourceAssociationTimeoutsArgs) ToProfilesResourceAssociationTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesResourceAssociationTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesResourceAssociationTimeoutsOutput).ToProfilesResourceAssociationTimeoutsPtrOutputWithContext(ctx)
}

// ProfilesResourceAssociationTimeoutsPtrInput is an input type that accepts ProfilesResourceAssociationTimeoutsArgs, ProfilesResourceAssociationTimeoutsPtr and ProfilesResourceAssociationTimeoutsPtrOutput values.
// You can construct a concrete instance of `ProfilesResourceAssociationTimeoutsPtrInput` via:
//
//	        ProfilesResourceAssociationTimeoutsArgs{...}
//
//	or:
//
//	        nil
type ProfilesResourceAssociationTimeoutsPtrInput interface {
	pulumi.Input

	ToProfilesResourceAssociationTimeoutsPtrOutput() ProfilesResourceAssociationTimeoutsPtrOutput
	ToProfilesResourceAssociationTimeoutsPtrOutputWithContext(context.Context) ProfilesResourceAssociationTimeoutsPtrOutput
}

type profilesResourceAssociationTimeoutsPtrType ProfilesResourceAssociationTimeoutsArgs

func ProfilesResourceAssociationTimeoutsPtr(v *ProfilesResourceAssociationTimeoutsArgs) ProfilesResourceAssociationTimeoutsPtrInput {
	return (*profilesResourceAssociationTimeoutsPtrType)(v)
}

func (*profilesResourceAssociationTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilesResourceAssociationTimeouts)(nil)).Elem()
}

func (i *profilesResourceAssociationTimeoutsPtrType) ToProfilesResourceAssociationTimeoutsPtrOutput() ProfilesResourceAssociationTimeoutsPtrOutput {
	return i.ToProfilesResourceAssociationTimeoutsPtrOutputWithContext(context.Background())
}

func (i *profilesResourceAssociationTimeoutsPtrType) ToProfilesResourceAssociationTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesResourceAssociationTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesResourceAssociationTimeoutsPtrOutput)
}

type ProfilesResourceAssociationTimeoutsOutput struct{ *pulumi.OutputState }

func (ProfilesResourceAssociationTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilesResourceAssociationTimeouts)(nil)).Elem()
}

func (o ProfilesResourceAssociationTimeoutsOutput) ToProfilesResourceAssociationTimeoutsOutput() ProfilesResourceAssociationTimeoutsOutput {
	return o
}

func (o ProfilesResourceAssociationTimeoutsOutput) ToProfilesResourceAssociationTimeoutsOutputWithContext(ctx context.Context) ProfilesResourceAssociationTimeoutsOutput {
	return o
}

func (o ProfilesResourceAssociationTimeoutsOutput) ToProfilesResourceAssociationTimeoutsPtrOutput() ProfilesResourceAssociationTimeoutsPtrOutput {
	return o.ToProfilesResourceAssociationTimeoutsPtrOutputWithContext(context.Background())
}

func (o ProfilesResourceAssociationTimeoutsOutput) ToProfilesResourceAssociationTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesResourceAssociationTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfilesResourceAssociationTimeouts) *ProfilesResourceAssociationTimeouts {
		return &v
	}).(ProfilesResourceAssociationTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ProfilesResourceAssociationTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilesResourceAssociationTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ProfilesResourceAssociationTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilesResourceAssociationTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o ProfilesResourceAssociationTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilesResourceAssociationTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

type ProfilesResourceAssociationTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (ProfilesResourceAssociationTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilesResourceAssociationTimeouts)(nil)).Elem()
}

func (o ProfilesResourceAssociationTimeoutsPtrOutput) ToProfilesResourceAssociationTimeoutsPtrOutput() ProfilesResourceAssociationTimeoutsPtrOutput {
	return o
}

func (o ProfilesResourceAssociationTimeoutsPtrOutput) ToProfilesResourceAssociationTimeoutsPtrOutputWithContext(ctx context.Context) ProfilesResourceAssociationTimeoutsPtrOutput {
	return o
}

func (o ProfilesResourceAssociationTimeoutsPtrOutput) Elem() ProfilesResourceAssociationTimeoutsOutput {
	return o.ApplyT(func(v *ProfilesResourceAssociationTimeouts) ProfilesResourceAssociationTimeouts {
		if v != nil {
			return *v
		}
		var ret ProfilesResourceAssociationTimeouts
		return ret
	}).(ProfilesResourceAssociationTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ProfilesResourceAssociationTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilesResourceAssociationTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ProfilesResourceAssociationTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilesResourceAssociationTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o ProfilesResourceAssociationTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilesResourceAssociationTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

type RecordAlias struct {
	// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
	EvaluateTargetHealth bool `pulumi:"evaluateTargetHealth"`
	// DNS domain name for a CloudFront distribution, S3 bucket, ELB, AWS Global Accelerator, or another resource record set in this hosted zone.
	Name string `pulumi:"name"`
	// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, AWS Global Accelerator, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
	ZoneId string `pulumi:"zoneId"`
}

// RecordAliasInput is an input type that accepts RecordAliasArgs and RecordAliasOutput values.
// You can construct a concrete instance of `RecordAliasInput` via:
//
//	RecordAliasArgs{...}
type RecordAliasInput interface {
	pulumi.Input

	ToRecordAliasOutput() RecordAliasOutput
	ToRecordAliasOutputWithContext(context.Context) RecordAliasOutput
}

type RecordAliasArgs struct {
	// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
	EvaluateTargetHealth pulumi.BoolInput `pulumi:"evaluateTargetHealth"`
	// DNS domain name for a CloudFront distribution, S3 bucket, ELB, AWS Global Accelerator, or another resource record set in this hosted zone.
	Name pulumi.StringInput `pulumi:"name"`
	// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, AWS Global Accelerator, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (RecordAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAlias)(nil)).Elem()
}

func (i RecordAliasArgs) ToRecordAliasOutput() RecordAliasOutput {
	return i.ToRecordAliasOutputWithContext(context.Background())
}

func (i RecordAliasArgs) ToRecordAliasOutputWithContext(ctx context.Context) RecordAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAliasOutput)
}

// RecordAliasArrayInput is an input type that accepts RecordAliasArray and RecordAliasArrayOutput values.
// You can construct a concrete instance of `RecordAliasArrayInput` via:
//
//	RecordAliasArray{ RecordAliasArgs{...} }
type RecordAliasArrayInput interface {
	pulumi.Input

	ToRecordAliasArrayOutput() RecordAliasArrayOutput
	ToRecordAliasArrayOutputWithContext(context.Context) RecordAliasArrayOutput
}

type RecordAliasArray []RecordAliasInput

func (RecordAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAlias)(nil)).Elem()
}

func (i RecordAliasArray) ToRecordAliasArrayOutput() RecordAliasArrayOutput {
	return i.ToRecordAliasArrayOutputWithContext(context.Background())
}

func (i RecordAliasArray) ToRecordAliasArrayOutputWithContext(ctx context.Context) RecordAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAliasArrayOutput)
}

type RecordAliasOutput struct{ *pulumi.OutputState }

func (RecordAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAlias)(nil)).Elem()
}

func (o RecordAliasOutput) ToRecordAliasOutput() RecordAliasOutput {
	return o
}

func (o RecordAliasOutput) ToRecordAliasOutputWithContext(ctx context.Context) RecordAliasOutput {
	return o
}

// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
func (o RecordAliasOutput) EvaluateTargetHealth() pulumi.BoolOutput {
	return o.ApplyT(func(v RecordAlias) bool { return v.EvaluateTargetHealth }).(pulumi.BoolOutput)
}

// DNS domain name for a CloudFront distribution, S3 bucket, ELB, AWS Global Accelerator, or another resource record set in this hosted zone.
func (o RecordAliasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RecordAlias) string { return v.Name }).(pulumi.StringOutput)
}

// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, AWS Global Accelerator, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
func (o RecordAliasOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordAlias) string { return v.ZoneId }).(pulumi.StringOutput)
}

type RecordAliasArrayOutput struct{ *pulumi.OutputState }

func (RecordAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAlias)(nil)).Elem()
}

func (o RecordAliasArrayOutput) ToRecordAliasArrayOutput() RecordAliasArrayOutput {
	return o
}

func (o RecordAliasArrayOutput) ToRecordAliasArrayOutputWithContext(ctx context.Context) RecordAliasArrayOutput {
	return o
}

func (o RecordAliasArrayOutput) Index(i pulumi.IntInput) RecordAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordAlias {
		return vs[0].([]RecordAlias)[vs[1].(int)]
	}).(RecordAliasOutput)
}

type RecordCidrRoutingPolicy struct {
	// The CIDR collection ID. See the `route53.CidrCollection` resource for more details.
	CollectionId string `pulumi:"collectionId"`
	// The CIDR collection location name. See the `route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
	LocationName string `pulumi:"locationName"`
}

// RecordCidrRoutingPolicyInput is an input type that accepts RecordCidrRoutingPolicyArgs and RecordCidrRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordCidrRoutingPolicyInput` via:
//
//	RecordCidrRoutingPolicyArgs{...}
type RecordCidrRoutingPolicyInput interface {
	pulumi.Input

	ToRecordCidrRoutingPolicyOutput() RecordCidrRoutingPolicyOutput
	ToRecordCidrRoutingPolicyOutputWithContext(context.Context) RecordCidrRoutingPolicyOutput
}

type RecordCidrRoutingPolicyArgs struct {
	// The CIDR collection ID. See the `route53.CidrCollection` resource for more details.
	CollectionId pulumi.StringInput `pulumi:"collectionId"`
	// The CIDR collection location name. See the `route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
	LocationName pulumi.StringInput `pulumi:"locationName"`
}

func (RecordCidrRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordCidrRoutingPolicy)(nil)).Elem()
}

func (i RecordCidrRoutingPolicyArgs) ToRecordCidrRoutingPolicyOutput() RecordCidrRoutingPolicyOutput {
	return i.ToRecordCidrRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordCidrRoutingPolicyArgs) ToRecordCidrRoutingPolicyOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordCidrRoutingPolicyOutput)
}

func (i RecordCidrRoutingPolicyArgs) ToRecordCidrRoutingPolicyPtrOutput() RecordCidrRoutingPolicyPtrOutput {
	return i.ToRecordCidrRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i RecordCidrRoutingPolicyArgs) ToRecordCidrRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordCidrRoutingPolicyOutput).ToRecordCidrRoutingPolicyPtrOutputWithContext(ctx)
}

// RecordCidrRoutingPolicyPtrInput is an input type that accepts RecordCidrRoutingPolicyArgs, RecordCidrRoutingPolicyPtr and RecordCidrRoutingPolicyPtrOutput values.
// You can construct a concrete instance of `RecordCidrRoutingPolicyPtrInput` via:
//
//	        RecordCidrRoutingPolicyArgs{...}
//
//	or:
//
//	        nil
type RecordCidrRoutingPolicyPtrInput interface {
	pulumi.Input

	ToRecordCidrRoutingPolicyPtrOutput() RecordCidrRoutingPolicyPtrOutput
	ToRecordCidrRoutingPolicyPtrOutputWithContext(context.Context) RecordCidrRoutingPolicyPtrOutput
}

type recordCidrRoutingPolicyPtrType RecordCidrRoutingPolicyArgs

func RecordCidrRoutingPolicyPtr(v *RecordCidrRoutingPolicyArgs) RecordCidrRoutingPolicyPtrInput {
	return (*recordCidrRoutingPolicyPtrType)(v)
}

func (*recordCidrRoutingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordCidrRoutingPolicy)(nil)).Elem()
}

func (i *recordCidrRoutingPolicyPtrType) ToRecordCidrRoutingPolicyPtrOutput() RecordCidrRoutingPolicyPtrOutput {
	return i.ToRecordCidrRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i *recordCidrRoutingPolicyPtrType) ToRecordCidrRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordCidrRoutingPolicyPtrOutput)
}

type RecordCidrRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordCidrRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordCidrRoutingPolicy)(nil)).Elem()
}

func (o RecordCidrRoutingPolicyOutput) ToRecordCidrRoutingPolicyOutput() RecordCidrRoutingPolicyOutput {
	return o
}

func (o RecordCidrRoutingPolicyOutput) ToRecordCidrRoutingPolicyOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyOutput {
	return o
}

func (o RecordCidrRoutingPolicyOutput) ToRecordCidrRoutingPolicyPtrOutput() RecordCidrRoutingPolicyPtrOutput {
	return o.ToRecordCidrRoutingPolicyPtrOutputWithContext(context.Background())
}

func (o RecordCidrRoutingPolicyOutput) ToRecordCidrRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordCidrRoutingPolicy) *RecordCidrRoutingPolicy {
		return &v
	}).(RecordCidrRoutingPolicyPtrOutput)
}

// The CIDR collection ID. See the `route53.CidrCollection` resource for more details.
func (o RecordCidrRoutingPolicyOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordCidrRoutingPolicy) string { return v.CollectionId }).(pulumi.StringOutput)
}

// The CIDR collection location name. See the `route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
func (o RecordCidrRoutingPolicyOutput) LocationName() pulumi.StringOutput {
	return o.ApplyT(func(v RecordCidrRoutingPolicy) string { return v.LocationName }).(pulumi.StringOutput)
}

type RecordCidrRoutingPolicyPtrOutput struct{ *pulumi.OutputState }

func (RecordCidrRoutingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordCidrRoutingPolicy)(nil)).Elem()
}

func (o RecordCidrRoutingPolicyPtrOutput) ToRecordCidrRoutingPolicyPtrOutput() RecordCidrRoutingPolicyPtrOutput {
	return o
}

func (o RecordCidrRoutingPolicyPtrOutput) ToRecordCidrRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyPtrOutput {
	return o
}

func (o RecordCidrRoutingPolicyPtrOutput) Elem() RecordCidrRoutingPolicyOutput {
	return o.ApplyT(func(v *RecordCidrRoutingPolicy) RecordCidrRoutingPolicy {
		if v != nil {
			return *v
		}
		var ret RecordCidrRoutingPolicy
		return ret
	}).(RecordCidrRoutingPolicyOutput)
}

// The CIDR collection ID. See the `route53.CidrCollection` resource for more details.
func (o RecordCidrRoutingPolicyPtrOutput) CollectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordCidrRoutingPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.CollectionId
	}).(pulumi.StringPtrOutput)
}

// The CIDR collection location name. See the `route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
func (o RecordCidrRoutingPolicyPtrOutput) LocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordCidrRoutingPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.LocationName
	}).(pulumi.StringPtrOutput)
}

type RecordFailoverRoutingPolicy struct {
	// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
	Type string `pulumi:"type"`
}

// RecordFailoverRoutingPolicyInput is an input type that accepts RecordFailoverRoutingPolicyArgs and RecordFailoverRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordFailoverRoutingPolicyInput` via:
//
//	RecordFailoverRoutingPolicyArgs{...}
type RecordFailoverRoutingPolicyInput interface {
	pulumi.Input

	ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput
	ToRecordFailoverRoutingPolicyOutputWithContext(context.Context) RecordFailoverRoutingPolicyOutput
}

type RecordFailoverRoutingPolicyArgs struct {
	// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
	Type pulumi.StringInput `pulumi:"type"`
}

func (RecordFailoverRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (i RecordFailoverRoutingPolicyArgs) ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput {
	return i.ToRecordFailoverRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordFailoverRoutingPolicyArgs) ToRecordFailoverRoutingPolicyOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFailoverRoutingPolicyOutput)
}

// RecordFailoverRoutingPolicyArrayInput is an input type that accepts RecordFailoverRoutingPolicyArray and RecordFailoverRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordFailoverRoutingPolicyArrayInput` via:
//
//	RecordFailoverRoutingPolicyArray{ RecordFailoverRoutingPolicyArgs{...} }
type RecordFailoverRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput
	ToRecordFailoverRoutingPolicyArrayOutputWithContext(context.Context) RecordFailoverRoutingPolicyArrayOutput
}

type RecordFailoverRoutingPolicyArray []RecordFailoverRoutingPolicyInput

func (RecordFailoverRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (i RecordFailoverRoutingPolicyArray) ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput {
	return i.ToRecordFailoverRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordFailoverRoutingPolicyArray) ToRecordFailoverRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFailoverRoutingPolicyArrayOutput)
}

type RecordFailoverRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordFailoverRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (o RecordFailoverRoutingPolicyOutput) ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput {
	return o
}

func (o RecordFailoverRoutingPolicyOutput) ToRecordFailoverRoutingPolicyOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyOutput {
	return o
}

// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
func (o RecordFailoverRoutingPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecordFailoverRoutingPolicy) string { return v.Type }).(pulumi.StringOutput)
}

type RecordFailoverRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordFailoverRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (o RecordFailoverRoutingPolicyArrayOutput) ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput {
	return o
}

func (o RecordFailoverRoutingPolicyArrayOutput) ToRecordFailoverRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyArrayOutput {
	return o
}

func (o RecordFailoverRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordFailoverRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordFailoverRoutingPolicy {
		return vs[0].([]RecordFailoverRoutingPolicy)[vs[1].(int)]
	}).(RecordFailoverRoutingPolicyOutput)
}

type RecordGeolocationRoutingPolicy struct {
	// A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
	Continent *string `pulumi:"continent"`
	// A two-character country code or `*` to indicate a default resource record set.
	Country *string `pulumi:"country"`
	// A subdivision code for a country.
	Subdivision *string `pulumi:"subdivision"`
}

// RecordGeolocationRoutingPolicyInput is an input type that accepts RecordGeolocationRoutingPolicyArgs and RecordGeolocationRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordGeolocationRoutingPolicyInput` via:
//
//	RecordGeolocationRoutingPolicyArgs{...}
type RecordGeolocationRoutingPolicyInput interface {
	pulumi.Input

	ToRecordGeolocationRoutingPolicyOutput() RecordGeolocationRoutingPolicyOutput
	ToRecordGeolocationRoutingPolicyOutputWithContext(context.Context) RecordGeolocationRoutingPolicyOutput
}

type RecordGeolocationRoutingPolicyArgs struct {
	// A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
	Continent pulumi.StringPtrInput `pulumi:"continent"`
	// A two-character country code or `*` to indicate a default resource record set.
	Country pulumi.StringPtrInput `pulumi:"country"`
	// A subdivision code for a country.
	Subdivision pulumi.StringPtrInput `pulumi:"subdivision"`
}

func (RecordGeolocationRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (i RecordGeolocationRoutingPolicyArgs) ToRecordGeolocationRoutingPolicyOutput() RecordGeolocationRoutingPolicyOutput {
	return i.ToRecordGeolocationRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordGeolocationRoutingPolicyArgs) ToRecordGeolocationRoutingPolicyOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeolocationRoutingPolicyOutput)
}

// RecordGeolocationRoutingPolicyArrayInput is an input type that accepts RecordGeolocationRoutingPolicyArray and RecordGeolocationRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordGeolocationRoutingPolicyArrayInput` via:
//
//	RecordGeolocationRoutingPolicyArray{ RecordGeolocationRoutingPolicyArgs{...} }
type RecordGeolocationRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordGeolocationRoutingPolicyArrayOutput() RecordGeolocationRoutingPolicyArrayOutput
	ToRecordGeolocationRoutingPolicyArrayOutputWithContext(context.Context) RecordGeolocationRoutingPolicyArrayOutput
}

type RecordGeolocationRoutingPolicyArray []RecordGeolocationRoutingPolicyInput

func (RecordGeolocationRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (i RecordGeolocationRoutingPolicyArray) ToRecordGeolocationRoutingPolicyArrayOutput() RecordGeolocationRoutingPolicyArrayOutput {
	return i.ToRecordGeolocationRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordGeolocationRoutingPolicyArray) ToRecordGeolocationRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeolocationRoutingPolicyArrayOutput)
}

type RecordGeolocationRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordGeolocationRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (o RecordGeolocationRoutingPolicyOutput) ToRecordGeolocationRoutingPolicyOutput() RecordGeolocationRoutingPolicyOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyOutput) ToRecordGeolocationRoutingPolicyOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyOutput {
	return o
}

// A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
func (o RecordGeolocationRoutingPolicyOutput) Continent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordGeolocationRoutingPolicy) *string { return v.Continent }).(pulumi.StringPtrOutput)
}

// A two-character country code or `*` to indicate a default resource record set.
func (o RecordGeolocationRoutingPolicyOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordGeolocationRoutingPolicy) *string { return v.Country }).(pulumi.StringPtrOutput)
}

// A subdivision code for a country.
func (o RecordGeolocationRoutingPolicyOutput) Subdivision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordGeolocationRoutingPolicy) *string { return v.Subdivision }).(pulumi.StringPtrOutput)
}

type RecordGeolocationRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordGeolocationRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (o RecordGeolocationRoutingPolicyArrayOutput) ToRecordGeolocationRoutingPolicyArrayOutput() RecordGeolocationRoutingPolicyArrayOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyArrayOutput) ToRecordGeolocationRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyArrayOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordGeolocationRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordGeolocationRoutingPolicy {
		return vs[0].([]RecordGeolocationRoutingPolicy)[vs[1].(int)]
	}).(RecordGeolocationRoutingPolicyOutput)
}

type RecordGeoproximityRoutingPolicy struct {
	// A AWS region where the resource is present.
	AwsRegion *string `pulumi:"awsRegion"`
	// Route more traffic or less traffic to the resource by specifying a value ranges between -90 to 90. See https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html for bias details.
	Bias *int `pulumi:"bias"`
	// Specify `latitude` and `longitude` for routing traffic to non-AWS resources.
	Coordinates []RecordGeoproximityRoutingPolicyCoordinate `pulumi:"coordinates"`
	// A AWS local zone group where the resource is present. See https://docs.aws.amazon.com/local-zones/latest/ug/available-local-zones.html for local zone group list.
	LocalZoneGroup *string `pulumi:"localZoneGroup"`
}

// RecordGeoproximityRoutingPolicyInput is an input type that accepts RecordGeoproximityRoutingPolicyArgs and RecordGeoproximityRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordGeoproximityRoutingPolicyInput` via:
//
//	RecordGeoproximityRoutingPolicyArgs{...}
type RecordGeoproximityRoutingPolicyInput interface {
	pulumi.Input

	ToRecordGeoproximityRoutingPolicyOutput() RecordGeoproximityRoutingPolicyOutput
	ToRecordGeoproximityRoutingPolicyOutputWithContext(context.Context) RecordGeoproximityRoutingPolicyOutput
}

type RecordGeoproximityRoutingPolicyArgs struct {
	// A AWS region where the resource is present.
	AwsRegion pulumi.StringPtrInput `pulumi:"awsRegion"`
	// Route more traffic or less traffic to the resource by specifying a value ranges between -90 to 90. See https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html for bias details.
	Bias pulumi.IntPtrInput `pulumi:"bias"`
	// Specify `latitude` and `longitude` for routing traffic to non-AWS resources.
	Coordinates RecordGeoproximityRoutingPolicyCoordinateArrayInput `pulumi:"coordinates"`
	// A AWS local zone group where the resource is present. See https://docs.aws.amazon.com/local-zones/latest/ug/available-local-zones.html for local zone group list.
	LocalZoneGroup pulumi.StringPtrInput `pulumi:"localZoneGroup"`
}

func (RecordGeoproximityRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeoproximityRoutingPolicy)(nil)).Elem()
}

func (i RecordGeoproximityRoutingPolicyArgs) ToRecordGeoproximityRoutingPolicyOutput() RecordGeoproximityRoutingPolicyOutput {
	return i.ToRecordGeoproximityRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordGeoproximityRoutingPolicyArgs) ToRecordGeoproximityRoutingPolicyOutputWithContext(ctx context.Context) RecordGeoproximityRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeoproximityRoutingPolicyOutput)
}

func (i RecordGeoproximityRoutingPolicyArgs) ToRecordGeoproximityRoutingPolicyPtrOutput() RecordGeoproximityRoutingPolicyPtrOutput {
	return i.ToRecordGeoproximityRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i RecordGeoproximityRoutingPolicyArgs) ToRecordGeoproximityRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordGeoproximityRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeoproximityRoutingPolicyOutput).ToRecordGeoproximityRoutingPolicyPtrOutputWithContext(ctx)
}

// RecordGeoproximityRoutingPolicyPtrInput is an input type that accepts RecordGeoproximityRoutingPolicyArgs, RecordGeoproximityRoutingPolicyPtr and RecordGeoproximityRoutingPolicyPtrOutput values.
// You can construct a concrete instance of `RecordGeoproximityRoutingPolicyPtrInput` via:
//
//	        RecordGeoproximityRoutingPolicyArgs{...}
//
//	or:
//
//	        nil
type RecordGeoproximityRoutingPolicyPtrInput interface {
	pulumi.Input

	ToRecordGeoproximityRoutingPolicyPtrOutput() RecordGeoproximityRoutingPolicyPtrOutput
	ToRecordGeoproximityRoutingPolicyPtrOutputWithContext(context.Context) RecordGeoproximityRoutingPolicyPtrOutput
}

type recordGeoproximityRoutingPolicyPtrType RecordGeoproximityRoutingPolicyArgs

func RecordGeoproximityRoutingPolicyPtr(v *RecordGeoproximityRoutingPolicyArgs) RecordGeoproximityRoutingPolicyPtrInput {
	return (*recordGeoproximityRoutingPolicyPtrType)(v)
}

func (*recordGeoproximityRoutingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordGeoproximityRoutingPolicy)(nil)).Elem()
}

func (i *recordGeoproximityRoutingPolicyPtrType) ToRecordGeoproximityRoutingPolicyPtrOutput() RecordGeoproximityRoutingPolicyPtrOutput {
	return i.ToRecordGeoproximityRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i *recordGeoproximityRoutingPolicyPtrType) ToRecordGeoproximityRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordGeoproximityRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeoproximityRoutingPolicyPtrOutput)
}

type RecordGeoproximityRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordGeoproximityRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeoproximityRoutingPolicy)(nil)).Elem()
}

func (o RecordGeoproximityRoutingPolicyOutput) ToRecordGeoproximityRoutingPolicyOutput() RecordGeoproximityRoutingPolicyOutput {
	return o
}

func (o RecordGeoproximityRoutingPolicyOutput) ToRecordGeoproximityRoutingPolicyOutputWithContext(ctx context.Context) RecordGeoproximityRoutingPolicyOutput {
	return o
}

func (o RecordGeoproximityRoutingPolicyOutput) ToRecordGeoproximityRoutingPolicyPtrOutput() RecordGeoproximityRoutingPolicyPtrOutput {
	return o.ToRecordGeoproximityRoutingPolicyPtrOutputWithContext(context.Background())
}

func (o RecordGeoproximityRoutingPolicyOutput) ToRecordGeoproximityRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordGeoproximityRoutingPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordGeoproximityRoutingPolicy) *RecordGeoproximityRoutingPolicy {
		return &v
	}).(RecordGeoproximityRoutingPolicyPtrOutput)
}

// A AWS region where the resource is present.
func (o RecordGeoproximityRoutingPolicyOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordGeoproximityRoutingPolicy) *string { return v.AwsRegion }).(pulumi.StringPtrOutput)
}

// Route more traffic or less traffic to the resource by specifying a value ranges between -90 to 90. See https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html for bias details.
func (o RecordGeoproximityRoutingPolicyOutput) Bias() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordGeoproximityRoutingPolicy) *int { return v.Bias }).(pulumi.IntPtrOutput)
}

// Specify `latitude` and `longitude` for routing traffic to non-AWS resources.
func (o RecordGeoproximityRoutingPolicyOutput) Coordinates() RecordGeoproximityRoutingPolicyCoordinateArrayOutput {
	return o.ApplyT(func(v RecordGeoproximityRoutingPolicy) []RecordGeoproximityRoutingPolicyCoordinate {
		return v.Coordinates
	}).(RecordGeoproximityRoutingPolicyCoordinateArrayOutput)
}

// A AWS local zone group where the resource is present. See https://docs.aws.amazon.com/local-zones/latest/ug/available-local-zones.html for local zone group list.
func (o RecordGeoproximityRoutingPolicyOutput) LocalZoneGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordGeoproximityRoutingPolicy) *string { return v.LocalZoneGroup }).(pulumi.StringPtrOutput)
}

type RecordGeoproximityRoutingPolicyPtrOutput struct{ *pulumi.OutputState }

func (RecordGeoproximityRoutingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordGeoproximityRoutingPolicy)(nil)).Elem()
}

func (o RecordGeoproximityRoutingPolicyPtrOutput) ToRecordGeoproximityRoutingPolicyPtrOutput() RecordGeoproximityRoutingPolicyPtrOutput {
	return o
}

func (o RecordGeoproximityRoutingPolicyPtrOutput) ToRecordGeoproximityRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordGeoproximityRoutingPolicyPtrOutput {
	return o
}

func (o RecordGeoproximityRoutingPolicyPtrOutput) Elem() RecordGeoproximityRoutingPolicyOutput {
	return o.ApplyT(func(v *RecordGeoproximityRoutingPolicy) RecordGeoproximityRoutingPolicy {
		if v != nil {
			return *v
		}
		var ret RecordGeoproximityRoutingPolicy
		return ret
	}).(RecordGeoproximityRoutingPolicyOutput)
}

// A AWS region where the resource is present.
func (o RecordGeoproximityRoutingPolicyPtrOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordGeoproximityRoutingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.AwsRegion
	}).(pulumi.StringPtrOutput)
}

// Route more traffic or less traffic to the resource by specifying a value ranges between -90 to 90. See https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html for bias details.
func (o RecordGeoproximityRoutingPolicyPtrOutput) Bias() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordGeoproximityRoutingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.Bias
	}).(pulumi.IntPtrOutput)
}

// Specify `latitude` and `longitude` for routing traffic to non-AWS resources.
func (o RecordGeoproximityRoutingPolicyPtrOutput) Coordinates() RecordGeoproximityRoutingPolicyCoordinateArrayOutput {
	return o.ApplyT(func(v *RecordGeoproximityRoutingPolicy) []RecordGeoproximityRoutingPolicyCoordinate {
		if v == nil {
			return nil
		}
		return v.Coordinates
	}).(RecordGeoproximityRoutingPolicyCoordinateArrayOutput)
}

// A AWS local zone group where the resource is present. See https://docs.aws.amazon.com/local-zones/latest/ug/available-local-zones.html for local zone group list.
func (o RecordGeoproximityRoutingPolicyPtrOutput) LocalZoneGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordGeoproximityRoutingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.LocalZoneGroup
	}).(pulumi.StringPtrOutput)
}

type RecordGeoproximityRoutingPolicyCoordinate struct {
	Latitude  string `pulumi:"latitude"`
	Longitude string `pulumi:"longitude"`
}

// RecordGeoproximityRoutingPolicyCoordinateInput is an input type that accepts RecordGeoproximityRoutingPolicyCoordinateArgs and RecordGeoproximityRoutingPolicyCoordinateOutput values.
// You can construct a concrete instance of `RecordGeoproximityRoutingPolicyCoordinateInput` via:
//
//	RecordGeoproximityRoutingPolicyCoordinateArgs{...}
type RecordGeoproximityRoutingPolicyCoordinateInput interface {
	pulumi.Input

	ToRecordGeoproximityRoutingPolicyCoordinateOutput() RecordGeoproximityRoutingPolicyCoordinateOutput
	ToRecordGeoproximityRoutingPolicyCoordinateOutputWithContext(context.Context) RecordGeoproximityRoutingPolicyCoordinateOutput
}

type RecordGeoproximityRoutingPolicyCoordinateArgs struct {
	Latitude  pulumi.StringInput `pulumi:"latitude"`
	Longitude pulumi.StringInput `pulumi:"longitude"`
}

func (RecordGeoproximityRoutingPolicyCoordinateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeoproximityRoutingPolicyCoordinate)(nil)).Elem()
}

func (i RecordGeoproximityRoutingPolicyCoordinateArgs) ToRecordGeoproximityRoutingPolicyCoordinateOutput() RecordGeoproximityRoutingPolicyCoordinateOutput {
	return i.ToRecordGeoproximityRoutingPolicyCoordinateOutputWithContext(context.Background())
}

func (i RecordGeoproximityRoutingPolicyCoordinateArgs) ToRecordGeoproximityRoutingPolicyCoordinateOutputWithContext(ctx context.Context) RecordGeoproximityRoutingPolicyCoordinateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeoproximityRoutingPolicyCoordinateOutput)
}

// RecordGeoproximityRoutingPolicyCoordinateArrayInput is an input type that accepts RecordGeoproximityRoutingPolicyCoordinateArray and RecordGeoproximityRoutingPolicyCoordinateArrayOutput values.
// You can construct a concrete instance of `RecordGeoproximityRoutingPolicyCoordinateArrayInput` via:
//
//	RecordGeoproximityRoutingPolicyCoordinateArray{ RecordGeoproximityRoutingPolicyCoordinateArgs{...} }
type RecordGeoproximityRoutingPolicyCoordinateArrayInput interface {
	pulumi.Input

	ToRecordGeoproximityRoutingPolicyCoordinateArrayOutput() RecordGeoproximityRoutingPolicyCoordinateArrayOutput
	ToRecordGeoproximityRoutingPolicyCoordinateArrayOutputWithContext(context.Context) RecordGeoproximityRoutingPolicyCoordinateArrayOutput
}

type RecordGeoproximityRoutingPolicyCoordinateArray []RecordGeoproximityRoutingPolicyCoordinateInput

func (RecordGeoproximityRoutingPolicyCoordinateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordGeoproximityRoutingPolicyCoordinate)(nil)).Elem()
}

func (i RecordGeoproximityRoutingPolicyCoordinateArray) ToRecordGeoproximityRoutingPolicyCoordinateArrayOutput() RecordGeoproximityRoutingPolicyCoordinateArrayOutput {
	return i.ToRecordGeoproximityRoutingPolicyCoordinateArrayOutputWithContext(context.Background())
}

func (i RecordGeoproximityRoutingPolicyCoordinateArray) ToRecordGeoproximityRoutingPolicyCoordinateArrayOutputWithContext(ctx context.Context) RecordGeoproximityRoutingPolicyCoordinateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeoproximityRoutingPolicyCoordinateArrayOutput)
}

type RecordGeoproximityRoutingPolicyCoordinateOutput struct{ *pulumi.OutputState }

func (RecordGeoproximityRoutingPolicyCoordinateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeoproximityRoutingPolicyCoordinate)(nil)).Elem()
}

func (o RecordGeoproximityRoutingPolicyCoordinateOutput) ToRecordGeoproximityRoutingPolicyCoordinateOutput() RecordGeoproximityRoutingPolicyCoordinateOutput {
	return o
}

func (o RecordGeoproximityRoutingPolicyCoordinateOutput) ToRecordGeoproximityRoutingPolicyCoordinateOutputWithContext(ctx context.Context) RecordGeoproximityRoutingPolicyCoordinateOutput {
	return o
}

func (o RecordGeoproximityRoutingPolicyCoordinateOutput) Latitude() pulumi.StringOutput {
	return o.ApplyT(func(v RecordGeoproximityRoutingPolicyCoordinate) string { return v.Latitude }).(pulumi.StringOutput)
}

func (o RecordGeoproximityRoutingPolicyCoordinateOutput) Longitude() pulumi.StringOutput {
	return o.ApplyT(func(v RecordGeoproximityRoutingPolicyCoordinate) string { return v.Longitude }).(pulumi.StringOutput)
}

type RecordGeoproximityRoutingPolicyCoordinateArrayOutput struct{ *pulumi.OutputState }

func (RecordGeoproximityRoutingPolicyCoordinateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordGeoproximityRoutingPolicyCoordinate)(nil)).Elem()
}

func (o RecordGeoproximityRoutingPolicyCoordinateArrayOutput) ToRecordGeoproximityRoutingPolicyCoordinateArrayOutput() RecordGeoproximityRoutingPolicyCoordinateArrayOutput {
	return o
}

func (o RecordGeoproximityRoutingPolicyCoordinateArrayOutput) ToRecordGeoproximityRoutingPolicyCoordinateArrayOutputWithContext(ctx context.Context) RecordGeoproximityRoutingPolicyCoordinateArrayOutput {
	return o
}

func (o RecordGeoproximityRoutingPolicyCoordinateArrayOutput) Index(i pulumi.IntInput) RecordGeoproximityRoutingPolicyCoordinateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordGeoproximityRoutingPolicyCoordinate {
		return vs[0].([]RecordGeoproximityRoutingPolicyCoordinate)[vs[1].(int)]
	}).(RecordGeoproximityRoutingPolicyCoordinateOutput)
}

type RecordLatencyRoutingPolicy struct {
	// An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
	Region string `pulumi:"region"`
}

// RecordLatencyRoutingPolicyInput is an input type that accepts RecordLatencyRoutingPolicyArgs and RecordLatencyRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordLatencyRoutingPolicyInput` via:
//
//	RecordLatencyRoutingPolicyArgs{...}
type RecordLatencyRoutingPolicyInput interface {
	pulumi.Input

	ToRecordLatencyRoutingPolicyOutput() RecordLatencyRoutingPolicyOutput
	ToRecordLatencyRoutingPolicyOutputWithContext(context.Context) RecordLatencyRoutingPolicyOutput
}

type RecordLatencyRoutingPolicyArgs struct {
	// An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
	Region pulumi.StringInput `pulumi:"region"`
}

func (RecordLatencyRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (i RecordLatencyRoutingPolicyArgs) ToRecordLatencyRoutingPolicyOutput() RecordLatencyRoutingPolicyOutput {
	return i.ToRecordLatencyRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordLatencyRoutingPolicyArgs) ToRecordLatencyRoutingPolicyOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordLatencyRoutingPolicyOutput)
}

// RecordLatencyRoutingPolicyArrayInput is an input type that accepts RecordLatencyRoutingPolicyArray and RecordLatencyRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordLatencyRoutingPolicyArrayInput` via:
//
//	RecordLatencyRoutingPolicyArray{ RecordLatencyRoutingPolicyArgs{...} }
type RecordLatencyRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordLatencyRoutingPolicyArrayOutput() RecordLatencyRoutingPolicyArrayOutput
	ToRecordLatencyRoutingPolicyArrayOutputWithContext(context.Context) RecordLatencyRoutingPolicyArrayOutput
}

type RecordLatencyRoutingPolicyArray []RecordLatencyRoutingPolicyInput

func (RecordLatencyRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (i RecordLatencyRoutingPolicyArray) ToRecordLatencyRoutingPolicyArrayOutput() RecordLatencyRoutingPolicyArrayOutput {
	return i.ToRecordLatencyRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordLatencyRoutingPolicyArray) ToRecordLatencyRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordLatencyRoutingPolicyArrayOutput)
}

type RecordLatencyRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordLatencyRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (o RecordLatencyRoutingPolicyOutput) ToRecordLatencyRoutingPolicyOutput() RecordLatencyRoutingPolicyOutput {
	return o
}

func (o RecordLatencyRoutingPolicyOutput) ToRecordLatencyRoutingPolicyOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyOutput {
	return o
}

// An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
func (o RecordLatencyRoutingPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v RecordLatencyRoutingPolicy) string { return v.Region }).(pulumi.StringOutput)
}

type RecordLatencyRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordLatencyRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (o RecordLatencyRoutingPolicyArrayOutput) ToRecordLatencyRoutingPolicyArrayOutput() RecordLatencyRoutingPolicyArrayOutput {
	return o
}

func (o RecordLatencyRoutingPolicyArrayOutput) ToRecordLatencyRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyArrayOutput {
	return o
}

func (o RecordLatencyRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordLatencyRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordLatencyRoutingPolicy {
		return vs[0].([]RecordLatencyRoutingPolicy)[vs[1].(int)]
	}).(RecordLatencyRoutingPolicyOutput)
}

type RecordWeightedRoutingPolicy struct {
	// A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
	Weight int `pulumi:"weight"`
}

// RecordWeightedRoutingPolicyInput is an input type that accepts RecordWeightedRoutingPolicyArgs and RecordWeightedRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordWeightedRoutingPolicyInput` via:
//
//	RecordWeightedRoutingPolicyArgs{...}
type RecordWeightedRoutingPolicyInput interface {
	pulumi.Input

	ToRecordWeightedRoutingPolicyOutput() RecordWeightedRoutingPolicyOutput
	ToRecordWeightedRoutingPolicyOutputWithContext(context.Context) RecordWeightedRoutingPolicyOutput
}

type RecordWeightedRoutingPolicyArgs struct {
	// A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RecordWeightedRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (i RecordWeightedRoutingPolicyArgs) ToRecordWeightedRoutingPolicyOutput() RecordWeightedRoutingPolicyOutput {
	return i.ToRecordWeightedRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordWeightedRoutingPolicyArgs) ToRecordWeightedRoutingPolicyOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightedRoutingPolicyOutput)
}

// RecordWeightedRoutingPolicyArrayInput is an input type that accepts RecordWeightedRoutingPolicyArray and RecordWeightedRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordWeightedRoutingPolicyArrayInput` via:
//
//	RecordWeightedRoutingPolicyArray{ RecordWeightedRoutingPolicyArgs{...} }
type RecordWeightedRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordWeightedRoutingPolicyArrayOutput() RecordWeightedRoutingPolicyArrayOutput
	ToRecordWeightedRoutingPolicyArrayOutputWithContext(context.Context) RecordWeightedRoutingPolicyArrayOutput
}

type RecordWeightedRoutingPolicyArray []RecordWeightedRoutingPolicyInput

func (RecordWeightedRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (i RecordWeightedRoutingPolicyArray) ToRecordWeightedRoutingPolicyArrayOutput() RecordWeightedRoutingPolicyArrayOutput {
	return i.ToRecordWeightedRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordWeightedRoutingPolicyArray) ToRecordWeightedRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightedRoutingPolicyArrayOutput)
}

type RecordWeightedRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordWeightedRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (o RecordWeightedRoutingPolicyOutput) ToRecordWeightedRoutingPolicyOutput() RecordWeightedRoutingPolicyOutput {
	return o
}

func (o RecordWeightedRoutingPolicyOutput) ToRecordWeightedRoutingPolicyOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyOutput {
	return o
}

// A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
func (o RecordWeightedRoutingPolicyOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RecordWeightedRoutingPolicy) int { return v.Weight }).(pulumi.IntOutput)
}

type RecordWeightedRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordWeightedRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (o RecordWeightedRoutingPolicyArrayOutput) ToRecordWeightedRoutingPolicyArrayOutput() RecordWeightedRoutingPolicyArrayOutput {
	return o
}

func (o RecordWeightedRoutingPolicyArrayOutput) ToRecordWeightedRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyArrayOutput {
	return o
}

func (o RecordWeightedRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordWeightedRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordWeightedRoutingPolicy {
		return vs[0].([]RecordWeightedRoutingPolicy)[vs[1].(int)]
	}).(RecordWeightedRoutingPolicyOutput)
}

type RecordsExclusiveResourceRecordSet struct {
	// Alias target block.
	// See `aliasTarget` below.
	AliasTarget       *RecordsExclusiveResourceRecordSetAliasTarget       `pulumi:"aliasTarget"`
	CidrRoutingConfig *RecordsExclusiveResourceRecordSetCidrRoutingConfig `pulumi:"cidrRoutingConfig"`
	// Type of failover resource record.
	// Valid values are `PRIMARY` and `SECONDARY`.
	// See the [AWS documentation on DNS failover](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html) for additional details.
	Failover *string `pulumi:"failover"`
	// Geolocation block to control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
	// See `geolocation` below.
	Geolocation *RecordsExclusiveResourceRecordSetGeolocation `pulumi:"geolocation"`
	// Geoproximity location block.
	// See `geoproximityLocation` below.
	GeoproximityLocation *RecordsExclusiveResourceRecordSetGeoproximityLocation `pulumi:"geoproximityLocation"`
	// Health check the record should be associated with.
	HealthCheckId    *string `pulumi:"healthCheckId"`
	MultiValueAnswer *bool   `pulumi:"multiValueAnswer"`
	// Name of the record.
	Name string `pulumi:"name"`
	// AWS region of the resource this record set refers to.
	// Must be a valid AWS region name.
	// See the [AWS documentation](http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency) on latency based routing for additional details.
	Region *string `pulumi:"region"`
	// Information about the resource records to act upon.
	// See `resourceRecords` below.
	ResourceRecords []RecordsExclusiveResourceRecordSetResourceRecord `pulumi:"resourceRecords"`
	// An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
	// Required if using `cidrRoutingConfig`, `failover`, `geolocation`,`geoproximityLocation`, `multivalueAnswer`, `region`, or `weight`.
	SetIdentifier           *string `pulumi:"setIdentifier"`
	TrafficPolicyInstanceId *string `pulumi:"trafficPolicyInstanceId"`
	// Resource record cache time to live (TTL), in seconds.
	Ttl *int `pulumi:"ttl"`
	// Record type.
	// Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV`, `TXT`, `TLSA`, `SSHFP`, `SVCB`, and `HTTPS`.
	//
	// The following arguments are optional:
	//
	// > Exactly one of `resourceRecords` or `aliasTarget` must be specified.
	Type *string `pulumi:"type"`
	// Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set.
	Weight *int `pulumi:"weight"`
}

// RecordsExclusiveResourceRecordSetInput is an input type that accepts RecordsExclusiveResourceRecordSetArgs and RecordsExclusiveResourceRecordSetOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetInput` via:
//
//	RecordsExclusiveResourceRecordSetArgs{...}
type RecordsExclusiveResourceRecordSetInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetOutput() RecordsExclusiveResourceRecordSetOutput
	ToRecordsExclusiveResourceRecordSetOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetOutput
}

type RecordsExclusiveResourceRecordSetArgs struct {
	// Alias target block.
	// See `aliasTarget` below.
	AliasTarget       RecordsExclusiveResourceRecordSetAliasTargetPtrInput       `pulumi:"aliasTarget"`
	CidrRoutingConfig RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrInput `pulumi:"cidrRoutingConfig"`
	// Type of failover resource record.
	// Valid values are `PRIMARY` and `SECONDARY`.
	// See the [AWS documentation on DNS failover](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html) for additional details.
	Failover pulumi.StringPtrInput `pulumi:"failover"`
	// Geolocation block to control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
	// See `geolocation` below.
	Geolocation RecordsExclusiveResourceRecordSetGeolocationPtrInput `pulumi:"geolocation"`
	// Geoproximity location block.
	// See `geoproximityLocation` below.
	GeoproximityLocation RecordsExclusiveResourceRecordSetGeoproximityLocationPtrInput `pulumi:"geoproximityLocation"`
	// Health check the record should be associated with.
	HealthCheckId    pulumi.StringPtrInput `pulumi:"healthCheckId"`
	MultiValueAnswer pulumi.BoolPtrInput   `pulumi:"multiValueAnswer"`
	// Name of the record.
	Name pulumi.StringInput `pulumi:"name"`
	// AWS region of the resource this record set refers to.
	// Must be a valid AWS region name.
	// See the [AWS documentation](http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency) on latency based routing for additional details.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Information about the resource records to act upon.
	// See `resourceRecords` below.
	ResourceRecords RecordsExclusiveResourceRecordSetResourceRecordArrayInput `pulumi:"resourceRecords"`
	// An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
	// Required if using `cidrRoutingConfig`, `failover`, `geolocation`,`geoproximityLocation`, `multivalueAnswer`, `region`, or `weight`.
	SetIdentifier           pulumi.StringPtrInput `pulumi:"setIdentifier"`
	TrafficPolicyInstanceId pulumi.StringPtrInput `pulumi:"trafficPolicyInstanceId"`
	// Resource record cache time to live (TTL), in seconds.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
	// Record type.
	// Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV`, `TXT`, `TLSA`, `SSHFP`, `SVCB`, and `HTTPS`.
	//
	// The following arguments are optional:
	//
	// > Exactly one of `resourceRecords` or `aliasTarget` must be specified.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (RecordsExclusiveResourceRecordSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSet)(nil)).Elem()
}

func (i RecordsExclusiveResourceRecordSetArgs) ToRecordsExclusiveResourceRecordSetOutput() RecordsExclusiveResourceRecordSetOutput {
	return i.ToRecordsExclusiveResourceRecordSetOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetArgs) ToRecordsExclusiveResourceRecordSetOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetOutput)
}

// RecordsExclusiveResourceRecordSetArrayInput is an input type that accepts RecordsExclusiveResourceRecordSetArray and RecordsExclusiveResourceRecordSetArrayOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetArrayInput` via:
//
//	RecordsExclusiveResourceRecordSetArray{ RecordsExclusiveResourceRecordSetArgs{...} }
type RecordsExclusiveResourceRecordSetArrayInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetArrayOutput() RecordsExclusiveResourceRecordSetArrayOutput
	ToRecordsExclusiveResourceRecordSetArrayOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetArrayOutput
}

type RecordsExclusiveResourceRecordSetArray []RecordsExclusiveResourceRecordSetInput

func (RecordsExclusiveResourceRecordSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordsExclusiveResourceRecordSet)(nil)).Elem()
}

func (i RecordsExclusiveResourceRecordSetArray) ToRecordsExclusiveResourceRecordSetArrayOutput() RecordsExclusiveResourceRecordSetArrayOutput {
	return i.ToRecordsExclusiveResourceRecordSetArrayOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetArray) ToRecordsExclusiveResourceRecordSetArrayOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetArrayOutput)
}

type RecordsExclusiveResourceRecordSetOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSet)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetOutput) ToRecordsExclusiveResourceRecordSetOutput() RecordsExclusiveResourceRecordSetOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetOutput) ToRecordsExclusiveResourceRecordSetOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetOutput {
	return o
}

// Alias target block.
// See `aliasTarget` below.
func (o RecordsExclusiveResourceRecordSetOutput) AliasTarget() RecordsExclusiveResourceRecordSetAliasTargetPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *RecordsExclusiveResourceRecordSetAliasTarget {
		return v.AliasTarget
	}).(RecordsExclusiveResourceRecordSetAliasTargetPtrOutput)
}

func (o RecordsExclusiveResourceRecordSetOutput) CidrRoutingConfig() RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *RecordsExclusiveResourceRecordSetCidrRoutingConfig {
		return v.CidrRoutingConfig
	}).(RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput)
}

// Type of failover resource record.
// Valid values are `PRIMARY` and `SECONDARY`.
// See the [AWS documentation on DNS failover](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html) for additional details.
func (o RecordsExclusiveResourceRecordSetOutput) Failover() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *string { return v.Failover }).(pulumi.StringPtrOutput)
}

// Geolocation block to control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
// See `geolocation` below.
func (o RecordsExclusiveResourceRecordSetOutput) Geolocation() RecordsExclusiveResourceRecordSetGeolocationPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *RecordsExclusiveResourceRecordSetGeolocation {
		return v.Geolocation
	}).(RecordsExclusiveResourceRecordSetGeolocationPtrOutput)
}

// Geoproximity location block.
// See `geoproximityLocation` below.
func (o RecordsExclusiveResourceRecordSetOutput) GeoproximityLocation() RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *RecordsExclusiveResourceRecordSetGeoproximityLocation {
		return v.GeoproximityLocation
	}).(RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput)
}

// Health check the record should be associated with.
func (o RecordsExclusiveResourceRecordSetOutput) HealthCheckId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *string { return v.HealthCheckId }).(pulumi.StringPtrOutput)
}

func (o RecordsExclusiveResourceRecordSetOutput) MultiValueAnswer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *bool { return v.MultiValueAnswer }).(pulumi.BoolPtrOutput)
}

// Name of the record.
func (o RecordsExclusiveResourceRecordSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) string { return v.Name }).(pulumi.StringOutput)
}

// AWS region of the resource this record set refers to.
// Must be a valid AWS region name.
// See the [AWS documentation](http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency) on latency based routing for additional details.
func (o RecordsExclusiveResourceRecordSetOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Information about the resource records to act upon.
// See `resourceRecords` below.
func (o RecordsExclusiveResourceRecordSetOutput) ResourceRecords() RecordsExclusiveResourceRecordSetResourceRecordArrayOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) []RecordsExclusiveResourceRecordSetResourceRecord {
		return v.ResourceRecords
	}).(RecordsExclusiveResourceRecordSetResourceRecordArrayOutput)
}

// An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
// Required if using `cidrRoutingConfig`, `failover`, `geolocation`,`geoproximityLocation`, `multivalueAnswer`, `region`, or `weight`.
func (o RecordsExclusiveResourceRecordSetOutput) SetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *string { return v.SetIdentifier }).(pulumi.StringPtrOutput)
}

func (o RecordsExclusiveResourceRecordSetOutput) TrafficPolicyInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *string { return v.TrafficPolicyInstanceId }).(pulumi.StringPtrOutput)
}

// Resource record cache time to live (TTL), in seconds.
func (o RecordsExclusiveResourceRecordSetOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

// Record type.
// Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV`, `TXT`, `TLSA`, `SSHFP`, `SVCB`, and `HTTPS`.
//
// The following arguments are optional:
//
// > Exactly one of `resourceRecords` or `aliasTarget` must be specified.
func (o RecordsExclusiveResourceRecordSetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set.
func (o RecordsExclusiveResourceRecordSetOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSet) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type RecordsExclusiveResourceRecordSetArrayOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordsExclusiveResourceRecordSet)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetArrayOutput) ToRecordsExclusiveResourceRecordSetArrayOutput() RecordsExclusiveResourceRecordSetArrayOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetArrayOutput) ToRecordsExclusiveResourceRecordSetArrayOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetArrayOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetArrayOutput) Index(i pulumi.IntInput) RecordsExclusiveResourceRecordSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordsExclusiveResourceRecordSet {
		return vs[0].([]RecordsExclusiveResourceRecordSet)[vs[1].(int)]
	}).(RecordsExclusiveResourceRecordSetOutput)
}

type RecordsExclusiveResourceRecordSetAliasTarget struct {
	// DNS domain name for another resource record set in this hosted zone.
	DnsName string `pulumi:"dnsName"`
	// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [the AWS documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health) for additional details.
	EvaluateTargetHealth bool `pulumi:"evaluateTargetHealth"`
	// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, AWS Global Accelerator, or Route 53 hosted zone. See `resource_elb.zone_id` for an example.
	HostedZoneId string `pulumi:"hostedZoneId"`
}

// RecordsExclusiveResourceRecordSetAliasTargetInput is an input type that accepts RecordsExclusiveResourceRecordSetAliasTargetArgs and RecordsExclusiveResourceRecordSetAliasTargetOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetAliasTargetInput` via:
//
//	RecordsExclusiveResourceRecordSetAliasTargetArgs{...}
type RecordsExclusiveResourceRecordSetAliasTargetInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetAliasTargetOutput() RecordsExclusiveResourceRecordSetAliasTargetOutput
	ToRecordsExclusiveResourceRecordSetAliasTargetOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetAliasTargetOutput
}

type RecordsExclusiveResourceRecordSetAliasTargetArgs struct {
	// DNS domain name for another resource record set in this hosted zone.
	DnsName pulumi.StringInput `pulumi:"dnsName"`
	// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [the AWS documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health) for additional details.
	EvaluateTargetHealth pulumi.BoolInput `pulumi:"evaluateTargetHealth"`
	// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, AWS Global Accelerator, or Route 53 hosted zone. See `resource_elb.zone_id` for an example.
	HostedZoneId pulumi.StringInput `pulumi:"hostedZoneId"`
}

func (RecordsExclusiveResourceRecordSetAliasTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetAliasTarget)(nil)).Elem()
}

func (i RecordsExclusiveResourceRecordSetAliasTargetArgs) ToRecordsExclusiveResourceRecordSetAliasTargetOutput() RecordsExclusiveResourceRecordSetAliasTargetOutput {
	return i.ToRecordsExclusiveResourceRecordSetAliasTargetOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetAliasTargetArgs) ToRecordsExclusiveResourceRecordSetAliasTargetOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetAliasTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetAliasTargetOutput)
}

func (i RecordsExclusiveResourceRecordSetAliasTargetArgs) ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutput() RecordsExclusiveResourceRecordSetAliasTargetPtrOutput {
	return i.ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetAliasTargetArgs) ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetAliasTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetAliasTargetOutput).ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutputWithContext(ctx)
}

// RecordsExclusiveResourceRecordSetAliasTargetPtrInput is an input type that accepts RecordsExclusiveResourceRecordSetAliasTargetArgs, RecordsExclusiveResourceRecordSetAliasTargetPtr and RecordsExclusiveResourceRecordSetAliasTargetPtrOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetAliasTargetPtrInput` via:
//
//	        RecordsExclusiveResourceRecordSetAliasTargetArgs{...}
//
//	or:
//
//	        nil
type RecordsExclusiveResourceRecordSetAliasTargetPtrInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutput() RecordsExclusiveResourceRecordSetAliasTargetPtrOutput
	ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetAliasTargetPtrOutput
}

type recordsExclusiveResourceRecordSetAliasTargetPtrType RecordsExclusiveResourceRecordSetAliasTargetArgs

func RecordsExclusiveResourceRecordSetAliasTargetPtr(v *RecordsExclusiveResourceRecordSetAliasTargetArgs) RecordsExclusiveResourceRecordSetAliasTargetPtrInput {
	return (*recordsExclusiveResourceRecordSetAliasTargetPtrType)(v)
}

func (*recordsExclusiveResourceRecordSetAliasTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveResourceRecordSetAliasTarget)(nil)).Elem()
}

func (i *recordsExclusiveResourceRecordSetAliasTargetPtrType) ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutput() RecordsExclusiveResourceRecordSetAliasTargetPtrOutput {
	return i.ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutputWithContext(context.Background())
}

func (i *recordsExclusiveResourceRecordSetAliasTargetPtrType) ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetAliasTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetAliasTargetPtrOutput)
}

type RecordsExclusiveResourceRecordSetAliasTargetOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetAliasTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetAliasTarget)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetAliasTargetOutput) ToRecordsExclusiveResourceRecordSetAliasTargetOutput() RecordsExclusiveResourceRecordSetAliasTargetOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetAliasTargetOutput) ToRecordsExclusiveResourceRecordSetAliasTargetOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetAliasTargetOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetAliasTargetOutput) ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutput() RecordsExclusiveResourceRecordSetAliasTargetPtrOutput {
	return o.ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutputWithContext(context.Background())
}

func (o RecordsExclusiveResourceRecordSetAliasTargetOutput) ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetAliasTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordsExclusiveResourceRecordSetAliasTarget) *RecordsExclusiveResourceRecordSetAliasTarget {
		return &v
	}).(RecordsExclusiveResourceRecordSetAliasTargetPtrOutput)
}

// DNS domain name for another resource record set in this hosted zone.
func (o RecordsExclusiveResourceRecordSetAliasTargetOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetAliasTarget) string { return v.DnsName }).(pulumi.StringOutput)
}

// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [the AWS documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health) for additional details.
func (o RecordsExclusiveResourceRecordSetAliasTargetOutput) EvaluateTargetHealth() pulumi.BoolOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetAliasTarget) bool { return v.EvaluateTargetHealth }).(pulumi.BoolOutput)
}

// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, AWS Global Accelerator, or Route 53 hosted zone. See `resource_elb.zone_id` for an example.
func (o RecordsExclusiveResourceRecordSetAliasTargetOutput) HostedZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetAliasTarget) string { return v.HostedZoneId }).(pulumi.StringOutput)
}

type RecordsExclusiveResourceRecordSetAliasTargetPtrOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetAliasTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveResourceRecordSetAliasTarget)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetAliasTargetPtrOutput) ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutput() RecordsExclusiveResourceRecordSetAliasTargetPtrOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetAliasTargetPtrOutput) ToRecordsExclusiveResourceRecordSetAliasTargetPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetAliasTargetPtrOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetAliasTargetPtrOutput) Elem() RecordsExclusiveResourceRecordSetAliasTargetOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetAliasTarget) RecordsExclusiveResourceRecordSetAliasTarget {
		if v != nil {
			return *v
		}
		var ret RecordsExclusiveResourceRecordSetAliasTarget
		return ret
	}).(RecordsExclusiveResourceRecordSetAliasTargetOutput)
}

// DNS domain name for another resource record set in this hosted zone.
func (o RecordsExclusiveResourceRecordSetAliasTargetPtrOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetAliasTarget) *string {
		if v == nil {
			return nil
		}
		return &v.DnsName
	}).(pulumi.StringPtrOutput)
}

// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [the AWS documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health) for additional details.
func (o RecordsExclusiveResourceRecordSetAliasTargetPtrOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetAliasTarget) *bool {
		if v == nil {
			return nil
		}
		return &v.EvaluateTargetHealth
	}).(pulumi.BoolPtrOutput)
}

// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, AWS Global Accelerator, or Route 53 hosted zone. See `resource_elb.zone_id` for an example.
func (o RecordsExclusiveResourceRecordSetAliasTargetPtrOutput) HostedZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetAliasTarget) *string {
		if v == nil {
			return nil
		}
		return &v.HostedZoneId
	}).(pulumi.StringPtrOutput)
}

type RecordsExclusiveResourceRecordSetCidrRoutingConfig struct {
	// CIDR collection ID.
	// See the `route53.CidrCollection` resource for more details.
	CollectionId string `pulumi:"collectionId"`
	// CIDR collection location name.
	// See the `route53.CidrLocation` resource for more details.
	// A `locationName` with an asterisk `"*"` can be used to create a default CIDR record.
	// `collectionId` is still required for a default record.
	LocationName string `pulumi:"locationName"`
}

// RecordsExclusiveResourceRecordSetCidrRoutingConfigInput is an input type that accepts RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs and RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetCidrRoutingConfigInput` via:
//
//	RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs{...}
type RecordsExclusiveResourceRecordSetCidrRoutingConfigInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetCidrRoutingConfigOutput() RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput
	ToRecordsExclusiveResourceRecordSetCidrRoutingConfigOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput
}

type RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs struct {
	// CIDR collection ID.
	// See the `route53.CidrCollection` resource for more details.
	CollectionId pulumi.StringInput `pulumi:"collectionId"`
	// CIDR collection location name.
	// See the `route53.CidrLocation` resource for more details.
	// A `locationName` with an asterisk `"*"` can be used to create a default CIDR record.
	// `collectionId` is still required for a default record.
	LocationName pulumi.StringInput `pulumi:"locationName"`
}

func (RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetCidrRoutingConfig)(nil)).Elem()
}

func (i RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigOutput() RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput {
	return i.ToRecordsExclusiveResourceRecordSetCidrRoutingConfigOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput)
}

func (i RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput() RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput {
	return i.ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput).ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutputWithContext(ctx)
}

// RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrInput is an input type that accepts RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs, RecordsExclusiveResourceRecordSetCidrRoutingConfigPtr and RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrInput` via:
//
//	        RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs{...}
//
//	or:
//
//	        nil
type RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput() RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput
	ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput
}

type recordsExclusiveResourceRecordSetCidrRoutingConfigPtrType RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs

func RecordsExclusiveResourceRecordSetCidrRoutingConfigPtr(v *RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs) RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrInput {
	return (*recordsExclusiveResourceRecordSetCidrRoutingConfigPtrType)(v)
}

func (*recordsExclusiveResourceRecordSetCidrRoutingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveResourceRecordSetCidrRoutingConfig)(nil)).Elem()
}

func (i *recordsExclusiveResourceRecordSetCidrRoutingConfigPtrType) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput() RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput {
	return i.ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutputWithContext(context.Background())
}

func (i *recordsExclusiveResourceRecordSetCidrRoutingConfigPtrType) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput)
}

type RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetCidrRoutingConfig)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigOutput() RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput() RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput {
	return o.ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutputWithContext(context.Background())
}

func (o RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordsExclusiveResourceRecordSetCidrRoutingConfig) *RecordsExclusiveResourceRecordSetCidrRoutingConfig {
		return &v
	}).(RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput)
}

// CIDR collection ID.
// See the `route53.CidrCollection` resource for more details.
func (o RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetCidrRoutingConfig) string { return v.CollectionId }).(pulumi.StringOutput)
}

// CIDR collection location name.
// See the `route53.CidrLocation` resource for more details.
// A `locationName` with an asterisk `"*"` can be used to create a default CIDR record.
// `collectionId` is still required for a default record.
func (o RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput) LocationName() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetCidrRoutingConfig) string { return v.LocationName }).(pulumi.StringOutput)
}

type RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveResourceRecordSetCidrRoutingConfig)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput() RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput) ToRecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput) Elem() RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetCidrRoutingConfig) RecordsExclusiveResourceRecordSetCidrRoutingConfig {
		if v != nil {
			return *v
		}
		var ret RecordsExclusiveResourceRecordSetCidrRoutingConfig
		return ret
	}).(RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput)
}

// CIDR collection ID.
// See the `route53.CidrCollection` resource for more details.
func (o RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput) CollectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetCidrRoutingConfig) *string {
		if v == nil {
			return nil
		}
		return &v.CollectionId
	}).(pulumi.StringPtrOutput)
}

// CIDR collection location name.
// See the `route53.CidrLocation` resource for more details.
// A `locationName` with an asterisk `"*"` can be used to create a default CIDR record.
// `collectionId` is still required for a default record.
func (o RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput) LocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetCidrRoutingConfig) *string {
		if v == nil {
			return nil
		}
		return &v.LocationName
	}).(pulumi.StringPtrOutput)
}

type RecordsExclusiveResourceRecordSetGeolocation struct {
	ContinentCode   *string `pulumi:"continentCode"`
	CountryCode     *string `pulumi:"countryCode"`
	SubdivisionCode *string `pulumi:"subdivisionCode"`
}

// RecordsExclusiveResourceRecordSetGeolocationInput is an input type that accepts RecordsExclusiveResourceRecordSetGeolocationArgs and RecordsExclusiveResourceRecordSetGeolocationOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetGeolocationInput` via:
//
//	RecordsExclusiveResourceRecordSetGeolocationArgs{...}
type RecordsExclusiveResourceRecordSetGeolocationInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetGeolocationOutput() RecordsExclusiveResourceRecordSetGeolocationOutput
	ToRecordsExclusiveResourceRecordSetGeolocationOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetGeolocationOutput
}

type RecordsExclusiveResourceRecordSetGeolocationArgs struct {
	ContinentCode   pulumi.StringPtrInput `pulumi:"continentCode"`
	CountryCode     pulumi.StringPtrInput `pulumi:"countryCode"`
	SubdivisionCode pulumi.StringPtrInput `pulumi:"subdivisionCode"`
}

func (RecordsExclusiveResourceRecordSetGeolocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeolocation)(nil)).Elem()
}

func (i RecordsExclusiveResourceRecordSetGeolocationArgs) ToRecordsExclusiveResourceRecordSetGeolocationOutput() RecordsExclusiveResourceRecordSetGeolocationOutput {
	return i.ToRecordsExclusiveResourceRecordSetGeolocationOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetGeolocationArgs) ToRecordsExclusiveResourceRecordSetGeolocationOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeolocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetGeolocationOutput)
}

func (i RecordsExclusiveResourceRecordSetGeolocationArgs) ToRecordsExclusiveResourceRecordSetGeolocationPtrOutput() RecordsExclusiveResourceRecordSetGeolocationPtrOutput {
	return i.ToRecordsExclusiveResourceRecordSetGeolocationPtrOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetGeolocationArgs) ToRecordsExclusiveResourceRecordSetGeolocationPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeolocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetGeolocationOutput).ToRecordsExclusiveResourceRecordSetGeolocationPtrOutputWithContext(ctx)
}

// RecordsExclusiveResourceRecordSetGeolocationPtrInput is an input type that accepts RecordsExclusiveResourceRecordSetGeolocationArgs, RecordsExclusiveResourceRecordSetGeolocationPtr and RecordsExclusiveResourceRecordSetGeolocationPtrOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetGeolocationPtrInput` via:
//
//	        RecordsExclusiveResourceRecordSetGeolocationArgs{...}
//
//	or:
//
//	        nil
type RecordsExclusiveResourceRecordSetGeolocationPtrInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetGeolocationPtrOutput() RecordsExclusiveResourceRecordSetGeolocationPtrOutput
	ToRecordsExclusiveResourceRecordSetGeolocationPtrOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetGeolocationPtrOutput
}

type recordsExclusiveResourceRecordSetGeolocationPtrType RecordsExclusiveResourceRecordSetGeolocationArgs

func RecordsExclusiveResourceRecordSetGeolocationPtr(v *RecordsExclusiveResourceRecordSetGeolocationArgs) RecordsExclusiveResourceRecordSetGeolocationPtrInput {
	return (*recordsExclusiveResourceRecordSetGeolocationPtrType)(v)
}

func (*recordsExclusiveResourceRecordSetGeolocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveResourceRecordSetGeolocation)(nil)).Elem()
}

func (i *recordsExclusiveResourceRecordSetGeolocationPtrType) ToRecordsExclusiveResourceRecordSetGeolocationPtrOutput() RecordsExclusiveResourceRecordSetGeolocationPtrOutput {
	return i.ToRecordsExclusiveResourceRecordSetGeolocationPtrOutputWithContext(context.Background())
}

func (i *recordsExclusiveResourceRecordSetGeolocationPtrType) ToRecordsExclusiveResourceRecordSetGeolocationPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeolocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetGeolocationPtrOutput)
}

type RecordsExclusiveResourceRecordSetGeolocationOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetGeolocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeolocation)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetGeolocationOutput) ToRecordsExclusiveResourceRecordSetGeolocationOutput() RecordsExclusiveResourceRecordSetGeolocationOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeolocationOutput) ToRecordsExclusiveResourceRecordSetGeolocationOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeolocationOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeolocationOutput) ToRecordsExclusiveResourceRecordSetGeolocationPtrOutput() RecordsExclusiveResourceRecordSetGeolocationPtrOutput {
	return o.ToRecordsExclusiveResourceRecordSetGeolocationPtrOutputWithContext(context.Background())
}

func (o RecordsExclusiveResourceRecordSetGeolocationOutput) ToRecordsExclusiveResourceRecordSetGeolocationPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeolocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordsExclusiveResourceRecordSetGeolocation) *RecordsExclusiveResourceRecordSetGeolocation {
		return &v
	}).(RecordsExclusiveResourceRecordSetGeolocationPtrOutput)
}

func (o RecordsExclusiveResourceRecordSetGeolocationOutput) ContinentCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetGeolocation) *string { return v.ContinentCode }).(pulumi.StringPtrOutput)
}

func (o RecordsExclusiveResourceRecordSetGeolocationOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetGeolocation) *string { return v.CountryCode }).(pulumi.StringPtrOutput)
}

func (o RecordsExclusiveResourceRecordSetGeolocationOutput) SubdivisionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetGeolocation) *string { return v.SubdivisionCode }).(pulumi.StringPtrOutput)
}

type RecordsExclusiveResourceRecordSetGeolocationPtrOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetGeolocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveResourceRecordSetGeolocation)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetGeolocationPtrOutput) ToRecordsExclusiveResourceRecordSetGeolocationPtrOutput() RecordsExclusiveResourceRecordSetGeolocationPtrOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeolocationPtrOutput) ToRecordsExclusiveResourceRecordSetGeolocationPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeolocationPtrOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeolocationPtrOutput) Elem() RecordsExclusiveResourceRecordSetGeolocationOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeolocation) RecordsExclusiveResourceRecordSetGeolocation {
		if v != nil {
			return *v
		}
		var ret RecordsExclusiveResourceRecordSetGeolocation
		return ret
	}).(RecordsExclusiveResourceRecordSetGeolocationOutput)
}

func (o RecordsExclusiveResourceRecordSetGeolocationPtrOutput) ContinentCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeolocation) *string {
		if v == nil {
			return nil
		}
		return v.ContinentCode
	}).(pulumi.StringPtrOutput)
}

func (o RecordsExclusiveResourceRecordSetGeolocationPtrOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeolocation) *string {
		if v == nil {
			return nil
		}
		return v.CountryCode
	}).(pulumi.StringPtrOutput)
}

func (o RecordsExclusiveResourceRecordSetGeolocationPtrOutput) SubdivisionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeolocation) *string {
		if v == nil {
			return nil
		}
		return v.SubdivisionCode
	}).(pulumi.StringPtrOutput)
}

type RecordsExclusiveResourceRecordSetGeoproximityLocation struct {
	// AWS region of the resource where DNS traffic is directed to.
	AwsRegion *string `pulumi:"awsRegion"`
	// Increases or decreases the size of the geographic region from which Route 53 routes traffic to a resource.
	// To expand the size of the geographic region from which Route 53 routes traffic to a resource, specify a positive integer from `1` to `99`.
	// To shrink the size of the geographic region from which Route 53 routes traffic to a resource, specify a negative bias of `-1` to `-99`.
	// See the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html) for additional details.
	Bias *int `pulumi:"bias"`
	// Coordinates for a geoproximity resource record.
	// See `coordinates` below.
	Coordinates *RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates `pulumi:"coordinates"`
	// AWS local zone group.
	// Identify the Local Zones Group for a specific Local Zone by using the [`describe-availability-zones` CLI command](https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html).
	LocalZoneGroup *string `pulumi:"localZoneGroup"`
}

// RecordsExclusiveResourceRecordSetGeoproximityLocationInput is an input type that accepts RecordsExclusiveResourceRecordSetGeoproximityLocationArgs and RecordsExclusiveResourceRecordSetGeoproximityLocationOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetGeoproximityLocationInput` via:
//
//	RecordsExclusiveResourceRecordSetGeoproximityLocationArgs{...}
type RecordsExclusiveResourceRecordSetGeoproximityLocationInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetGeoproximityLocationOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationOutput
	ToRecordsExclusiveResourceRecordSetGeoproximityLocationOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationOutput
}

type RecordsExclusiveResourceRecordSetGeoproximityLocationArgs struct {
	// AWS region of the resource where DNS traffic is directed to.
	AwsRegion pulumi.StringPtrInput `pulumi:"awsRegion"`
	// Increases or decreases the size of the geographic region from which Route 53 routes traffic to a resource.
	// To expand the size of the geographic region from which Route 53 routes traffic to a resource, specify a positive integer from `1` to `99`.
	// To shrink the size of the geographic region from which Route 53 routes traffic to a resource, specify a negative bias of `-1` to `-99`.
	// See the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html) for additional details.
	Bias pulumi.IntPtrInput `pulumi:"bias"`
	// Coordinates for a geoproximity resource record.
	// See `coordinates` below.
	Coordinates RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrInput `pulumi:"coordinates"`
	// AWS local zone group.
	// Identify the Local Zones Group for a specific Local Zone by using the [`describe-availability-zones` CLI command](https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html).
	LocalZoneGroup pulumi.StringPtrInput `pulumi:"localZoneGroup"`
}

func (RecordsExclusiveResourceRecordSetGeoproximityLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeoproximityLocation)(nil)).Elem()
}

func (i RecordsExclusiveResourceRecordSetGeoproximityLocationArgs) ToRecordsExclusiveResourceRecordSetGeoproximityLocationOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationOutput {
	return i.ToRecordsExclusiveResourceRecordSetGeoproximityLocationOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetGeoproximityLocationArgs) ToRecordsExclusiveResourceRecordSetGeoproximityLocationOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetGeoproximityLocationOutput)
}

func (i RecordsExclusiveResourceRecordSetGeoproximityLocationArgs) ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput {
	return i.ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetGeoproximityLocationArgs) ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetGeoproximityLocationOutput).ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutputWithContext(ctx)
}

// RecordsExclusiveResourceRecordSetGeoproximityLocationPtrInput is an input type that accepts RecordsExclusiveResourceRecordSetGeoproximityLocationArgs, RecordsExclusiveResourceRecordSetGeoproximityLocationPtr and RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetGeoproximityLocationPtrInput` via:
//
//	        RecordsExclusiveResourceRecordSetGeoproximityLocationArgs{...}
//
//	or:
//
//	        nil
type RecordsExclusiveResourceRecordSetGeoproximityLocationPtrInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput
	ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput
}

type recordsExclusiveResourceRecordSetGeoproximityLocationPtrType RecordsExclusiveResourceRecordSetGeoproximityLocationArgs

func RecordsExclusiveResourceRecordSetGeoproximityLocationPtr(v *RecordsExclusiveResourceRecordSetGeoproximityLocationArgs) RecordsExclusiveResourceRecordSetGeoproximityLocationPtrInput {
	return (*recordsExclusiveResourceRecordSetGeoproximityLocationPtrType)(v)
}

func (*recordsExclusiveResourceRecordSetGeoproximityLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveResourceRecordSetGeoproximityLocation)(nil)).Elem()
}

func (i *recordsExclusiveResourceRecordSetGeoproximityLocationPtrType) ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput {
	return i.ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutputWithContext(context.Background())
}

func (i *recordsExclusiveResourceRecordSetGeoproximityLocationPtrType) ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput)
}

type RecordsExclusiveResourceRecordSetGeoproximityLocationOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetGeoproximityLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeoproximityLocation)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput {
	return o.ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutputWithContext(context.Background())
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordsExclusiveResourceRecordSetGeoproximityLocation) *RecordsExclusiveResourceRecordSetGeoproximityLocation {
		return &v
	}).(RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput)
}

// AWS region of the resource where DNS traffic is directed to.
func (o RecordsExclusiveResourceRecordSetGeoproximityLocationOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetGeoproximityLocation) *string { return v.AwsRegion }).(pulumi.StringPtrOutput)
}

// Increases or decreases the size of the geographic region from which Route 53 routes traffic to a resource.
// To expand the size of the geographic region from which Route 53 routes traffic to a resource, specify a positive integer from `1` to `99`.
// To shrink the size of the geographic region from which Route 53 routes traffic to a resource, specify a negative bias of `-1` to `-99`.
// See the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html) for additional details.
func (o RecordsExclusiveResourceRecordSetGeoproximityLocationOutput) Bias() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetGeoproximityLocation) *int { return v.Bias }).(pulumi.IntPtrOutput)
}

// Coordinates for a geoproximity resource record.
// See `coordinates` below.
func (o RecordsExclusiveResourceRecordSetGeoproximityLocationOutput) Coordinates() RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetGeoproximityLocation) *RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates {
		return v.Coordinates
	}).(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput)
}

// AWS local zone group.
// Identify the Local Zones Group for a specific Local Zone by using the [`describe-availability-zones` CLI command](https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html).
func (o RecordsExclusiveResourceRecordSetGeoproximityLocationOutput) LocalZoneGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetGeoproximityLocation) *string { return v.LocalZoneGroup }).(pulumi.StringPtrOutput)
}

type RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveResourceRecordSetGeoproximityLocation)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput) Elem() RecordsExclusiveResourceRecordSetGeoproximityLocationOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeoproximityLocation) RecordsExclusiveResourceRecordSetGeoproximityLocation {
		if v != nil {
			return *v
		}
		var ret RecordsExclusiveResourceRecordSetGeoproximityLocation
		return ret
	}).(RecordsExclusiveResourceRecordSetGeoproximityLocationOutput)
}

// AWS region of the resource where DNS traffic is directed to.
func (o RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeoproximityLocation) *string {
		if v == nil {
			return nil
		}
		return v.AwsRegion
	}).(pulumi.StringPtrOutput)
}

// Increases or decreases the size of the geographic region from which Route 53 routes traffic to a resource.
// To expand the size of the geographic region from which Route 53 routes traffic to a resource, specify a positive integer from `1` to `99`.
// To shrink the size of the geographic region from which Route 53 routes traffic to a resource, specify a negative bias of `-1` to `-99`.
// See the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html) for additional details.
func (o RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput) Bias() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeoproximityLocation) *int {
		if v == nil {
			return nil
		}
		return v.Bias
	}).(pulumi.IntPtrOutput)
}

// Coordinates for a geoproximity resource record.
// See `coordinates` below.
func (o RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput) Coordinates() RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeoproximityLocation) *RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates {
		if v == nil {
			return nil
		}
		return v.Coordinates
	}).(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput)
}

// AWS local zone group.
// Identify the Local Zones Group for a specific Local Zone by using the [`describe-availability-zones` CLI command](https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html).
func (o RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput) LocalZoneGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeoproximityLocation) *string {
		if v == nil {
			return nil
		}
		return v.LocalZoneGroup
	}).(pulumi.StringPtrOutput)
}

type RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates struct {
	// A coordinate of the east–west position of a geographic point on the surface of the Earth (`-180` - `180`).
	Latitude  string `pulumi:"latitude"`
	Longitude string `pulumi:"longitude"`
}

// RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesInput is an input type that accepts RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs and RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesInput` via:
//
//	RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs{...}
type RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput
	ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput
}

type RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs struct {
	// A coordinate of the east–west position of a geographic point on the surface of the Earth (`-180` - `180`).
	Latitude  pulumi.StringInput `pulumi:"latitude"`
	Longitude pulumi.StringInput `pulumi:"longitude"`
}

func (RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates)(nil)).Elem()
}

func (i RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput {
	return i.ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput)
}

func (i RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput {
	return i.ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput).ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutputWithContext(ctx)
}

// RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrInput is an input type that accepts RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs, RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtr and RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrInput` via:
//
//	        RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs{...}
//
//	or:
//
//	        nil
type RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput
	ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput
}

type recordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrType RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs

func RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtr(v *RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs) RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrInput {
	return (*recordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrType)(v)
}

func (*recordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates)(nil)).Elem()
}

func (i *recordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrType) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput {
	return i.ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutputWithContext(context.Background())
}

func (i *recordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrType) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput)
}

type RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput {
	return o.ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutputWithContext(context.Background())
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates) *RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates {
		return &v
	}).(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput)
}

// A coordinate of the east–west position of a geographic point on the surface of the Earth (`-180` - `180`).
func (o RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput) Latitude() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates) string { return v.Latitude }).(pulumi.StringOutput)
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput) Longitude() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates) string { return v.Longitude }).(pulumi.StringOutput)
}

type RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput() RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput) ToRecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput) Elem() RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates) RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates {
		if v != nil {
			return *v
		}
		var ret RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates
		return ret
	}).(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput)
}

// A coordinate of the east–west position of a geographic point on the surface of the Earth (`-180` - `180`).
func (o RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates) *string {
		if v == nil {
			return nil
		}
		return &v.Latitude
	}).(pulumi.StringPtrOutput)
}

func (o RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates) *string {
		if v == nil {
			return nil
		}
		return &v.Longitude
	}).(pulumi.StringPtrOutput)
}

type RecordsExclusiveResourceRecordSetResourceRecord struct {
	// DNS record value.
	Value string `pulumi:"value"`
}

// RecordsExclusiveResourceRecordSetResourceRecordInput is an input type that accepts RecordsExclusiveResourceRecordSetResourceRecordArgs and RecordsExclusiveResourceRecordSetResourceRecordOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetResourceRecordInput` via:
//
//	RecordsExclusiveResourceRecordSetResourceRecordArgs{...}
type RecordsExclusiveResourceRecordSetResourceRecordInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetResourceRecordOutput() RecordsExclusiveResourceRecordSetResourceRecordOutput
	ToRecordsExclusiveResourceRecordSetResourceRecordOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetResourceRecordOutput
}

type RecordsExclusiveResourceRecordSetResourceRecordArgs struct {
	// DNS record value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RecordsExclusiveResourceRecordSetResourceRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetResourceRecord)(nil)).Elem()
}

func (i RecordsExclusiveResourceRecordSetResourceRecordArgs) ToRecordsExclusiveResourceRecordSetResourceRecordOutput() RecordsExclusiveResourceRecordSetResourceRecordOutput {
	return i.ToRecordsExclusiveResourceRecordSetResourceRecordOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetResourceRecordArgs) ToRecordsExclusiveResourceRecordSetResourceRecordOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetResourceRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetResourceRecordOutput)
}

// RecordsExclusiveResourceRecordSetResourceRecordArrayInput is an input type that accepts RecordsExclusiveResourceRecordSetResourceRecordArray and RecordsExclusiveResourceRecordSetResourceRecordArrayOutput values.
// You can construct a concrete instance of `RecordsExclusiveResourceRecordSetResourceRecordArrayInput` via:
//
//	RecordsExclusiveResourceRecordSetResourceRecordArray{ RecordsExclusiveResourceRecordSetResourceRecordArgs{...} }
type RecordsExclusiveResourceRecordSetResourceRecordArrayInput interface {
	pulumi.Input

	ToRecordsExclusiveResourceRecordSetResourceRecordArrayOutput() RecordsExclusiveResourceRecordSetResourceRecordArrayOutput
	ToRecordsExclusiveResourceRecordSetResourceRecordArrayOutputWithContext(context.Context) RecordsExclusiveResourceRecordSetResourceRecordArrayOutput
}

type RecordsExclusiveResourceRecordSetResourceRecordArray []RecordsExclusiveResourceRecordSetResourceRecordInput

func (RecordsExclusiveResourceRecordSetResourceRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordsExclusiveResourceRecordSetResourceRecord)(nil)).Elem()
}

func (i RecordsExclusiveResourceRecordSetResourceRecordArray) ToRecordsExclusiveResourceRecordSetResourceRecordArrayOutput() RecordsExclusiveResourceRecordSetResourceRecordArrayOutput {
	return i.ToRecordsExclusiveResourceRecordSetResourceRecordArrayOutputWithContext(context.Background())
}

func (i RecordsExclusiveResourceRecordSetResourceRecordArray) ToRecordsExclusiveResourceRecordSetResourceRecordArrayOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetResourceRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveResourceRecordSetResourceRecordArrayOutput)
}

type RecordsExclusiveResourceRecordSetResourceRecordOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetResourceRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveResourceRecordSetResourceRecord)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetResourceRecordOutput) ToRecordsExclusiveResourceRecordSetResourceRecordOutput() RecordsExclusiveResourceRecordSetResourceRecordOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetResourceRecordOutput) ToRecordsExclusiveResourceRecordSetResourceRecordOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetResourceRecordOutput {
	return o
}

// DNS record value.
func (o RecordsExclusiveResourceRecordSetResourceRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsExclusiveResourceRecordSetResourceRecord) string { return v.Value }).(pulumi.StringOutput)
}

type RecordsExclusiveResourceRecordSetResourceRecordArrayOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveResourceRecordSetResourceRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordsExclusiveResourceRecordSetResourceRecord)(nil)).Elem()
}

func (o RecordsExclusiveResourceRecordSetResourceRecordArrayOutput) ToRecordsExclusiveResourceRecordSetResourceRecordArrayOutput() RecordsExclusiveResourceRecordSetResourceRecordArrayOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetResourceRecordArrayOutput) ToRecordsExclusiveResourceRecordSetResourceRecordArrayOutputWithContext(ctx context.Context) RecordsExclusiveResourceRecordSetResourceRecordArrayOutput {
	return o
}

func (o RecordsExclusiveResourceRecordSetResourceRecordArrayOutput) Index(i pulumi.IntInput) RecordsExclusiveResourceRecordSetResourceRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordsExclusiveResourceRecordSetResourceRecord {
		return vs[0].([]RecordsExclusiveResourceRecordSetResourceRecord)[vs[1].(int)]
	}).(RecordsExclusiveResourceRecordSetResourceRecordOutput)
}

type RecordsExclusiveTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// RecordsExclusiveTimeoutsInput is an input type that accepts RecordsExclusiveTimeoutsArgs and RecordsExclusiveTimeoutsOutput values.
// You can construct a concrete instance of `RecordsExclusiveTimeoutsInput` via:
//
//	RecordsExclusiveTimeoutsArgs{...}
type RecordsExclusiveTimeoutsInput interface {
	pulumi.Input

	ToRecordsExclusiveTimeoutsOutput() RecordsExclusiveTimeoutsOutput
	ToRecordsExclusiveTimeoutsOutputWithContext(context.Context) RecordsExclusiveTimeoutsOutput
}

type RecordsExclusiveTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (RecordsExclusiveTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveTimeouts)(nil)).Elem()
}

func (i RecordsExclusiveTimeoutsArgs) ToRecordsExclusiveTimeoutsOutput() RecordsExclusiveTimeoutsOutput {
	return i.ToRecordsExclusiveTimeoutsOutputWithContext(context.Background())
}

func (i RecordsExclusiveTimeoutsArgs) ToRecordsExclusiveTimeoutsOutputWithContext(ctx context.Context) RecordsExclusiveTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveTimeoutsOutput)
}

func (i RecordsExclusiveTimeoutsArgs) ToRecordsExclusiveTimeoutsPtrOutput() RecordsExclusiveTimeoutsPtrOutput {
	return i.ToRecordsExclusiveTimeoutsPtrOutputWithContext(context.Background())
}

func (i RecordsExclusiveTimeoutsArgs) ToRecordsExclusiveTimeoutsPtrOutputWithContext(ctx context.Context) RecordsExclusiveTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveTimeoutsOutput).ToRecordsExclusiveTimeoutsPtrOutputWithContext(ctx)
}

// RecordsExclusiveTimeoutsPtrInput is an input type that accepts RecordsExclusiveTimeoutsArgs, RecordsExclusiveTimeoutsPtr and RecordsExclusiveTimeoutsPtrOutput values.
// You can construct a concrete instance of `RecordsExclusiveTimeoutsPtrInput` via:
//
//	        RecordsExclusiveTimeoutsArgs{...}
//
//	or:
//
//	        nil
type RecordsExclusiveTimeoutsPtrInput interface {
	pulumi.Input

	ToRecordsExclusiveTimeoutsPtrOutput() RecordsExclusiveTimeoutsPtrOutput
	ToRecordsExclusiveTimeoutsPtrOutputWithContext(context.Context) RecordsExclusiveTimeoutsPtrOutput
}

type recordsExclusiveTimeoutsPtrType RecordsExclusiveTimeoutsArgs

func RecordsExclusiveTimeoutsPtr(v *RecordsExclusiveTimeoutsArgs) RecordsExclusiveTimeoutsPtrInput {
	return (*recordsExclusiveTimeoutsPtrType)(v)
}

func (*recordsExclusiveTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveTimeouts)(nil)).Elem()
}

func (i *recordsExclusiveTimeoutsPtrType) ToRecordsExclusiveTimeoutsPtrOutput() RecordsExclusiveTimeoutsPtrOutput {
	return i.ToRecordsExclusiveTimeoutsPtrOutputWithContext(context.Background())
}

func (i *recordsExclusiveTimeoutsPtrType) ToRecordsExclusiveTimeoutsPtrOutputWithContext(ctx context.Context) RecordsExclusiveTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsExclusiveTimeoutsPtrOutput)
}

type RecordsExclusiveTimeoutsOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsExclusiveTimeouts)(nil)).Elem()
}

func (o RecordsExclusiveTimeoutsOutput) ToRecordsExclusiveTimeoutsOutput() RecordsExclusiveTimeoutsOutput {
	return o
}

func (o RecordsExclusiveTimeoutsOutput) ToRecordsExclusiveTimeoutsOutputWithContext(ctx context.Context) RecordsExclusiveTimeoutsOutput {
	return o
}

func (o RecordsExclusiveTimeoutsOutput) ToRecordsExclusiveTimeoutsPtrOutput() RecordsExclusiveTimeoutsPtrOutput {
	return o.ToRecordsExclusiveTimeoutsPtrOutputWithContext(context.Background())
}

func (o RecordsExclusiveTimeoutsOutput) ToRecordsExclusiveTimeoutsPtrOutputWithContext(ctx context.Context) RecordsExclusiveTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordsExclusiveTimeouts) *RecordsExclusiveTimeouts {
		return &v
	}).(RecordsExclusiveTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o RecordsExclusiveTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o RecordsExclusiveTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordsExclusiveTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type RecordsExclusiveTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (RecordsExclusiveTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordsExclusiveTimeouts)(nil)).Elem()
}

func (o RecordsExclusiveTimeoutsPtrOutput) ToRecordsExclusiveTimeoutsPtrOutput() RecordsExclusiveTimeoutsPtrOutput {
	return o
}

func (o RecordsExclusiveTimeoutsPtrOutput) ToRecordsExclusiveTimeoutsPtrOutputWithContext(ctx context.Context) RecordsExclusiveTimeoutsPtrOutput {
	return o
}

func (o RecordsExclusiveTimeoutsPtrOutput) Elem() RecordsExclusiveTimeoutsOutput {
	return o.ApplyT(func(v *RecordsExclusiveTimeouts) RecordsExclusiveTimeouts {
		if v != nil {
			return *v
		}
		var ret RecordsExclusiveTimeouts
		return ret
	}).(RecordsExclusiveTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o RecordsExclusiveTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o RecordsExclusiveTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordsExclusiveTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type ResolverEndpointIpAddress struct {
	// IPv4 address in the subnet that you want to use for DNS queries.
	Ip   *string `pulumi:"ip"`
	IpId *string `pulumi:"ipId"`
	// IPv6 address in the subnet that you want to use for DNS queries.
	Ipv6 *string `pulumi:"ipv6"`
	// ID of the subnet that contains the IP address.
	SubnetId string `pulumi:"subnetId"`
}

// ResolverEndpointIpAddressInput is an input type that accepts ResolverEndpointIpAddressArgs and ResolverEndpointIpAddressOutput values.
// You can construct a concrete instance of `ResolverEndpointIpAddressInput` via:
//
//	ResolverEndpointIpAddressArgs{...}
type ResolverEndpointIpAddressInput interface {
	pulumi.Input

	ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput
	ToResolverEndpointIpAddressOutputWithContext(context.Context) ResolverEndpointIpAddressOutput
}

type ResolverEndpointIpAddressArgs struct {
	// IPv4 address in the subnet that you want to use for DNS queries.
	Ip   pulumi.StringPtrInput `pulumi:"ip"`
	IpId pulumi.StringPtrInput `pulumi:"ipId"`
	// IPv6 address in the subnet that you want to use for DNS queries.
	Ipv6 pulumi.StringPtrInput `pulumi:"ipv6"`
	// ID of the subnet that contains the IP address.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (ResolverEndpointIpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddress)(nil)).Elem()
}

func (i ResolverEndpointIpAddressArgs) ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput {
	return i.ToResolverEndpointIpAddressOutputWithContext(context.Background())
}

func (i ResolverEndpointIpAddressArgs) ToResolverEndpointIpAddressOutputWithContext(ctx context.Context) ResolverEndpointIpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpAddressOutput)
}

// ResolverEndpointIpAddressArrayInput is an input type that accepts ResolverEndpointIpAddressArray and ResolverEndpointIpAddressArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointIpAddressArrayInput` via:
//
//	ResolverEndpointIpAddressArray{ ResolverEndpointIpAddressArgs{...} }
type ResolverEndpointIpAddressArrayInput interface {
	pulumi.Input

	ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput
	ToResolverEndpointIpAddressArrayOutputWithContext(context.Context) ResolverEndpointIpAddressArrayOutput
}

type ResolverEndpointIpAddressArray []ResolverEndpointIpAddressInput

func (ResolverEndpointIpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpAddress)(nil)).Elem()
}

func (i ResolverEndpointIpAddressArray) ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput {
	return i.ToResolverEndpointIpAddressArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointIpAddressArray) ToResolverEndpointIpAddressArrayOutputWithContext(ctx context.Context) ResolverEndpointIpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpAddressArrayOutput)
}

type ResolverEndpointIpAddressOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddress)(nil)).Elem()
}

func (o ResolverEndpointIpAddressOutput) ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput {
	return o
}

func (o ResolverEndpointIpAddressOutput) ToResolverEndpointIpAddressOutputWithContext(ctx context.Context) ResolverEndpointIpAddressOutput {
	return o
}

// IPv4 address in the subnet that you want to use for DNS queries.
func (o ResolverEndpointIpAddressOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddress) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o ResolverEndpointIpAddressOutput) IpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddress) *string { return v.IpId }).(pulumi.StringPtrOutput)
}

// IPv6 address in the subnet that you want to use for DNS queries.
func (o ResolverEndpointIpAddressOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddress) *string { return v.Ipv6 }).(pulumi.StringPtrOutput)
}

// ID of the subnet that contains the IP address.
func (o ResolverEndpointIpAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ResolverEndpointIpAddressArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpAddress)(nil)).Elem()
}

func (o ResolverEndpointIpAddressArrayOutput) ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput {
	return o
}

func (o ResolverEndpointIpAddressArrayOutput) ToResolverEndpointIpAddressArrayOutputWithContext(ctx context.Context) ResolverEndpointIpAddressArrayOutput {
	return o
}

func (o ResolverEndpointIpAddressArrayOutput) Index(i pulumi.IntInput) ResolverEndpointIpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointIpAddress {
		return vs[0].([]ResolverEndpointIpAddress)[vs[1].(int)]
	}).(ResolverEndpointIpAddressOutput)
}

type ResolverRuleTargetIp struct {
	// One IPv4 address that you want to forward DNS queries to.
	Ip *string `pulumi:"ip"`
	// One IPv6 address that you want to forward DNS queries to.
	Ipv6 *string `pulumi:"ipv6"`
	// Port at `ip` that you want to forward DNS queries to. Default value is `53`.
	Port *int `pulumi:"port"`
	// Protocol for the resolver endpoint. Valid values can be found in the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_TargetAddress.html). Default value is `Do53`.
	Protocol *string `pulumi:"protocol"`
}

// ResolverRuleTargetIpInput is an input type that accepts ResolverRuleTargetIpArgs and ResolverRuleTargetIpOutput values.
// You can construct a concrete instance of `ResolverRuleTargetIpInput` via:
//
//	ResolverRuleTargetIpArgs{...}
type ResolverRuleTargetIpInput interface {
	pulumi.Input

	ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput
	ToResolverRuleTargetIpOutputWithContext(context.Context) ResolverRuleTargetIpOutput
}

type ResolverRuleTargetIpArgs struct {
	// One IPv4 address that you want to forward DNS queries to.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// One IPv6 address that you want to forward DNS queries to.
	Ipv6 pulumi.StringPtrInput `pulumi:"ipv6"`
	// Port at `ip` that you want to forward DNS queries to. Default value is `53`.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Protocol for the resolver endpoint. Valid values can be found in the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_TargetAddress.html). Default value is `Do53`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ResolverRuleTargetIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetIp)(nil)).Elem()
}

func (i ResolverRuleTargetIpArgs) ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput {
	return i.ToResolverRuleTargetIpOutputWithContext(context.Background())
}

func (i ResolverRuleTargetIpArgs) ToResolverRuleTargetIpOutputWithContext(ctx context.Context) ResolverRuleTargetIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetIpOutput)
}

// ResolverRuleTargetIpArrayInput is an input type that accepts ResolverRuleTargetIpArray and ResolverRuleTargetIpArrayOutput values.
// You can construct a concrete instance of `ResolverRuleTargetIpArrayInput` via:
//
//	ResolverRuleTargetIpArray{ ResolverRuleTargetIpArgs{...} }
type ResolverRuleTargetIpArrayInput interface {
	pulumi.Input

	ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput
	ToResolverRuleTargetIpArrayOutputWithContext(context.Context) ResolverRuleTargetIpArrayOutput
}

type ResolverRuleTargetIpArray []ResolverRuleTargetIpInput

func (ResolverRuleTargetIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetIp)(nil)).Elem()
}

func (i ResolverRuleTargetIpArray) ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput {
	return i.ToResolverRuleTargetIpArrayOutputWithContext(context.Background())
}

func (i ResolverRuleTargetIpArray) ToResolverRuleTargetIpArrayOutputWithContext(ctx context.Context) ResolverRuleTargetIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetIpArrayOutput)
}

type ResolverRuleTargetIpOutput struct{ *pulumi.OutputState }

func (ResolverRuleTargetIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetIp)(nil)).Elem()
}

func (o ResolverRuleTargetIpOutput) ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput {
	return o
}

func (o ResolverRuleTargetIpOutput) ToResolverRuleTargetIpOutputWithContext(ctx context.Context) ResolverRuleTargetIpOutput {
	return o
}

// One IPv4 address that you want to forward DNS queries to.
func (o ResolverRuleTargetIpOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetIp) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// One IPv6 address that you want to forward DNS queries to.
func (o ResolverRuleTargetIpOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetIp) *string { return v.Ipv6 }).(pulumi.StringPtrOutput)
}

// Port at `ip` that you want to forward DNS queries to. Default value is `53`.
func (o ResolverRuleTargetIpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetIp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Protocol for the resolver endpoint. Valid values can be found in the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_TargetAddress.html). Default value is `Do53`.
func (o ResolverRuleTargetIpOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetIp) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ResolverRuleTargetIpArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleTargetIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetIp)(nil)).Elem()
}

func (o ResolverRuleTargetIpArrayOutput) ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput {
	return o
}

func (o ResolverRuleTargetIpArrayOutput) ToResolverRuleTargetIpArrayOutputWithContext(ctx context.Context) ResolverRuleTargetIpArrayOutput {
	return o
}

func (o ResolverRuleTargetIpArrayOutput) Index(i pulumi.IntInput) ResolverRuleTargetIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRuleTargetIp {
		return vs[0].([]ResolverRuleTargetIp)[vs[1].(int)]
	}).(ResolverRuleTargetIpOutput)
}

type ZoneVpc struct {
	// ID of the VPC to associate.
	VpcId string `pulumi:"vpcId"`
	// Region of the VPC to associate. Defaults to AWS provider region.
	VpcRegion *string `pulumi:"vpcRegion"`
}

// ZoneVpcInput is an input type that accepts ZoneVpcArgs and ZoneVpcOutput values.
// You can construct a concrete instance of `ZoneVpcInput` via:
//
//	ZoneVpcArgs{...}
type ZoneVpcInput interface {
	pulumi.Input

	ToZoneVpcOutput() ZoneVpcOutput
	ToZoneVpcOutputWithContext(context.Context) ZoneVpcOutput
}

type ZoneVpcArgs struct {
	// ID of the VPC to associate.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// Region of the VPC to associate. Defaults to AWS provider region.
	VpcRegion pulumi.StringPtrInput `pulumi:"vpcRegion"`
}

func (ZoneVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneVpc)(nil)).Elem()
}

func (i ZoneVpcArgs) ToZoneVpcOutput() ZoneVpcOutput {
	return i.ToZoneVpcOutputWithContext(context.Background())
}

func (i ZoneVpcArgs) ToZoneVpcOutputWithContext(ctx context.Context) ZoneVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneVpcOutput)
}

// ZoneVpcArrayInput is an input type that accepts ZoneVpcArray and ZoneVpcArrayOutput values.
// You can construct a concrete instance of `ZoneVpcArrayInput` via:
//
//	ZoneVpcArray{ ZoneVpcArgs{...} }
type ZoneVpcArrayInput interface {
	pulumi.Input

	ToZoneVpcArrayOutput() ZoneVpcArrayOutput
	ToZoneVpcArrayOutputWithContext(context.Context) ZoneVpcArrayOutput
}

type ZoneVpcArray []ZoneVpcInput

func (ZoneVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneVpc)(nil)).Elem()
}

func (i ZoneVpcArray) ToZoneVpcArrayOutput() ZoneVpcArrayOutput {
	return i.ToZoneVpcArrayOutputWithContext(context.Background())
}

func (i ZoneVpcArray) ToZoneVpcArrayOutputWithContext(ctx context.Context) ZoneVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneVpcArrayOutput)
}

type ZoneVpcOutput struct{ *pulumi.OutputState }

func (ZoneVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneVpc)(nil)).Elem()
}

func (o ZoneVpcOutput) ToZoneVpcOutput() ZoneVpcOutput {
	return o
}

func (o ZoneVpcOutput) ToZoneVpcOutputWithContext(ctx context.Context) ZoneVpcOutput {
	return o
}

// ID of the VPC to associate.
func (o ZoneVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

// Region of the VPC to associate. Defaults to AWS provider region.
func (o ZoneVpcOutput) VpcRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZoneVpc) *string { return v.VpcRegion }).(pulumi.StringPtrOutput)
}

type ZoneVpcArrayOutput struct{ *pulumi.OutputState }

func (ZoneVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneVpc)(nil)).Elem()
}

func (o ZoneVpcArrayOutput) ToZoneVpcArrayOutput() ZoneVpcArrayOutput {
	return o
}

func (o ZoneVpcArrayOutput) ToZoneVpcArrayOutputWithContext(ctx context.Context) ZoneVpcArrayOutput {
	return o
}

func (o ZoneVpcArrayOutput) Index(i pulumi.IntInput) ZoneVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZoneVpc {
		return vs[0].([]ZoneVpc)[vs[1].(int)]
	}).(ZoneVpcOutput)
}

type GetProfilesProfilesProfile struct {
	// ARN of the Profile.
	Arn string `pulumi:"arn"`
	// ID of the Profile.
	Id string `pulumi:"id"`
	// Name of the Profile.
	Name string `pulumi:"name"`
	// Share status of the Profile. Valid values [AWS docs](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53profiles_Profile.html)
	ShareStatus string `pulumi:"shareStatus"`
}

// GetProfilesProfilesProfileInput is an input type that accepts GetProfilesProfilesProfileArgs and GetProfilesProfilesProfileOutput values.
// You can construct a concrete instance of `GetProfilesProfilesProfileInput` via:
//
//	GetProfilesProfilesProfileArgs{...}
type GetProfilesProfilesProfileInput interface {
	pulumi.Input

	ToGetProfilesProfilesProfileOutput() GetProfilesProfilesProfileOutput
	ToGetProfilesProfilesProfileOutputWithContext(context.Context) GetProfilesProfilesProfileOutput
}

type GetProfilesProfilesProfileArgs struct {
	// ARN of the Profile.
	Arn pulumi.StringInput `pulumi:"arn"`
	// ID of the Profile.
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the Profile.
	Name pulumi.StringInput `pulumi:"name"`
	// Share status of the Profile. Valid values [AWS docs](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53profiles_Profile.html)
	ShareStatus pulumi.StringInput `pulumi:"shareStatus"`
}

func (GetProfilesProfilesProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfilesProfilesProfile)(nil)).Elem()
}

func (i GetProfilesProfilesProfileArgs) ToGetProfilesProfilesProfileOutput() GetProfilesProfilesProfileOutput {
	return i.ToGetProfilesProfilesProfileOutputWithContext(context.Background())
}

func (i GetProfilesProfilesProfileArgs) ToGetProfilesProfilesProfileOutputWithContext(ctx context.Context) GetProfilesProfilesProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProfilesProfilesProfileOutput)
}

// GetProfilesProfilesProfileArrayInput is an input type that accepts GetProfilesProfilesProfileArray and GetProfilesProfilesProfileArrayOutput values.
// You can construct a concrete instance of `GetProfilesProfilesProfileArrayInput` via:
//
//	GetProfilesProfilesProfileArray{ GetProfilesProfilesProfileArgs{...} }
type GetProfilesProfilesProfileArrayInput interface {
	pulumi.Input

	ToGetProfilesProfilesProfileArrayOutput() GetProfilesProfilesProfileArrayOutput
	ToGetProfilesProfilesProfileArrayOutputWithContext(context.Context) GetProfilesProfilesProfileArrayOutput
}

type GetProfilesProfilesProfileArray []GetProfilesProfilesProfileInput

func (GetProfilesProfilesProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProfilesProfilesProfile)(nil)).Elem()
}

func (i GetProfilesProfilesProfileArray) ToGetProfilesProfilesProfileArrayOutput() GetProfilesProfilesProfileArrayOutput {
	return i.ToGetProfilesProfilesProfileArrayOutputWithContext(context.Background())
}

func (i GetProfilesProfilesProfileArray) ToGetProfilesProfilesProfileArrayOutputWithContext(ctx context.Context) GetProfilesProfilesProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProfilesProfilesProfileArrayOutput)
}

type GetProfilesProfilesProfileOutput struct{ *pulumi.OutputState }

func (GetProfilesProfilesProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfilesProfilesProfile)(nil)).Elem()
}

func (o GetProfilesProfilesProfileOutput) ToGetProfilesProfilesProfileOutput() GetProfilesProfilesProfileOutput {
	return o
}

func (o GetProfilesProfilesProfileOutput) ToGetProfilesProfilesProfileOutputWithContext(ctx context.Context) GetProfilesProfilesProfileOutput {
	return o
}

// ARN of the Profile.
func (o GetProfilesProfilesProfileOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v GetProfilesProfilesProfile) string { return v.Arn }).(pulumi.StringOutput)
}

// ID of the Profile.
func (o GetProfilesProfilesProfileOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProfilesProfilesProfile) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the Profile.
func (o GetProfilesProfilesProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProfilesProfilesProfile) string { return v.Name }).(pulumi.StringOutput)
}

// Share status of the Profile. Valid values [AWS docs](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53profiles_Profile.html)
func (o GetProfilesProfilesProfileOutput) ShareStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetProfilesProfilesProfile) string { return v.ShareStatus }).(pulumi.StringOutput)
}

type GetProfilesProfilesProfileArrayOutput struct{ *pulumi.OutputState }

func (GetProfilesProfilesProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProfilesProfilesProfile)(nil)).Elem()
}

func (o GetProfilesProfilesProfileArrayOutput) ToGetProfilesProfilesProfileArrayOutput() GetProfilesProfilesProfileArrayOutput {
	return o
}

func (o GetProfilesProfilesProfileArrayOutput) ToGetProfilesProfilesProfileArrayOutputWithContext(ctx context.Context) GetProfilesProfilesProfileArrayOutput {
	return o
}

func (o GetProfilesProfilesProfileArrayOutput) Index(i pulumi.IntInput) GetProfilesProfilesProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProfilesProfilesProfile {
		return vs[0].([]GetProfilesProfilesProfile)[vs[1].(int)]
	}).(GetProfilesProfilesProfileOutput)
}

type GetQueryLogConfigFilter struct {
	// The name of the query logging configuration.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// GetQueryLogConfigFilterInput is an input type that accepts GetQueryLogConfigFilterArgs and GetQueryLogConfigFilterOutput values.
// You can construct a concrete instance of `GetQueryLogConfigFilterInput` via:
//
//	GetQueryLogConfigFilterArgs{...}
type GetQueryLogConfigFilterInput interface {
	pulumi.Input

	ToGetQueryLogConfigFilterOutput() GetQueryLogConfigFilterOutput
	ToGetQueryLogConfigFilterOutputWithContext(context.Context) GetQueryLogConfigFilterOutput
}

type GetQueryLogConfigFilterArgs struct {
	// The name of the query logging configuration.
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetQueryLogConfigFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryLogConfigFilter)(nil)).Elem()
}

func (i GetQueryLogConfigFilterArgs) ToGetQueryLogConfigFilterOutput() GetQueryLogConfigFilterOutput {
	return i.ToGetQueryLogConfigFilterOutputWithContext(context.Background())
}

func (i GetQueryLogConfigFilterArgs) ToGetQueryLogConfigFilterOutputWithContext(ctx context.Context) GetQueryLogConfigFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueryLogConfigFilterOutput)
}

// GetQueryLogConfigFilterArrayInput is an input type that accepts GetQueryLogConfigFilterArray and GetQueryLogConfigFilterArrayOutput values.
// You can construct a concrete instance of `GetQueryLogConfigFilterArrayInput` via:
//
//	GetQueryLogConfigFilterArray{ GetQueryLogConfigFilterArgs{...} }
type GetQueryLogConfigFilterArrayInput interface {
	pulumi.Input

	ToGetQueryLogConfigFilterArrayOutput() GetQueryLogConfigFilterArrayOutput
	ToGetQueryLogConfigFilterArrayOutputWithContext(context.Context) GetQueryLogConfigFilterArrayOutput
}

type GetQueryLogConfigFilterArray []GetQueryLogConfigFilterInput

func (GetQueryLogConfigFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQueryLogConfigFilter)(nil)).Elem()
}

func (i GetQueryLogConfigFilterArray) ToGetQueryLogConfigFilterArrayOutput() GetQueryLogConfigFilterArrayOutput {
	return i.ToGetQueryLogConfigFilterArrayOutputWithContext(context.Background())
}

func (i GetQueryLogConfigFilterArray) ToGetQueryLogConfigFilterArrayOutputWithContext(ctx context.Context) GetQueryLogConfigFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueryLogConfigFilterArrayOutput)
}

type GetQueryLogConfigFilterOutput struct{ *pulumi.OutputState }

func (GetQueryLogConfigFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryLogConfigFilter)(nil)).Elem()
}

func (o GetQueryLogConfigFilterOutput) ToGetQueryLogConfigFilterOutput() GetQueryLogConfigFilterOutput {
	return o
}

func (o GetQueryLogConfigFilterOutput) ToGetQueryLogConfigFilterOutputWithContext(ctx context.Context) GetQueryLogConfigFilterOutput {
	return o
}

// The name of the query logging configuration.
func (o GetQueryLogConfigFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetQueryLogConfigFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetQueryLogConfigFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetQueryLogConfigFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetQueryLogConfigFilterArrayOutput struct{ *pulumi.OutputState }

func (GetQueryLogConfigFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQueryLogConfigFilter)(nil)).Elem()
}

func (o GetQueryLogConfigFilterArrayOutput) ToGetQueryLogConfigFilterArrayOutput() GetQueryLogConfigFilterArrayOutput {
	return o
}

func (o GetQueryLogConfigFilterArrayOutput) ToGetQueryLogConfigFilterArrayOutputWithContext(ctx context.Context) GetQueryLogConfigFilterArrayOutput {
	return o
}

func (o GetQueryLogConfigFilterArrayOutput) Index(i pulumi.IntInput) GetQueryLogConfigFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQueryLogConfigFilter {
		return vs[0].([]GetQueryLogConfigFilter)[vs[1].(int)]
	}).(GetQueryLogConfigFilterOutput)
}

type GetRecordsResourceRecordSet struct {
	// Information about the AWS resource traffic is routed to.
	AliasTarget GetRecordsResourceRecordSetAliasTarget `pulumi:"aliasTarget"`
	// Information about the CIDR location traffic is routed to.
	CidrRoutingConfig GetRecordsResourceRecordSetCidrRoutingConfig `pulumi:"cidrRoutingConfig"`
	// `PRIMARY` or `SECONDARY`.
	Failover string `pulumi:"failover"`
	// Information about how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
	Geolocation GetRecordsResourceRecordSetGeolocation `pulumi:"geolocation"`
	// Information about how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
	GeoproximityLocation GetRecordsResourceRecordSetGeoproximityLocation `pulumi:"geoproximityLocation"`
	// ID of any applicable health check.
	HealthCheckId string `pulumi:"healthCheckId"`
	// Traffic is routed approximately randomly to multiple resources.
	MultiValueAnswer bool `pulumi:"multiValueAnswer"`
	// The name of the record.
	Name string `pulumi:"name"`
	// The Amazon EC2 Region of the resource that this resource record set refers to.
	Region string `pulumi:"region"`
	// The resource records.
	ResourceRecords []GetRecordsResourceRecordSetResourceRecord `pulumi:"resourceRecords"`
	// An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
	SetIdentifier string `pulumi:"setIdentifier"`
	// The ID of any traffic policy instance that Route 53 created this resource record set for.
	TrafficPolicyInstanceId string `pulumi:"trafficPolicyInstanceId"`
	// The resource record cache time to live (TTL), in seconds.
	Ttl int `pulumi:"ttl"`
	// The DNS record type.
	Type string `pulumi:"type"`
	// Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set.
	Weight int `pulumi:"weight"`
}

// GetRecordsResourceRecordSetInput is an input type that accepts GetRecordsResourceRecordSetArgs and GetRecordsResourceRecordSetOutput values.
// You can construct a concrete instance of `GetRecordsResourceRecordSetInput` via:
//
//	GetRecordsResourceRecordSetArgs{...}
type GetRecordsResourceRecordSetInput interface {
	pulumi.Input

	ToGetRecordsResourceRecordSetOutput() GetRecordsResourceRecordSetOutput
	ToGetRecordsResourceRecordSetOutputWithContext(context.Context) GetRecordsResourceRecordSetOutput
}

type GetRecordsResourceRecordSetArgs struct {
	// Information about the AWS resource traffic is routed to.
	AliasTarget GetRecordsResourceRecordSetAliasTargetInput `pulumi:"aliasTarget"`
	// Information about the CIDR location traffic is routed to.
	CidrRoutingConfig GetRecordsResourceRecordSetCidrRoutingConfigInput `pulumi:"cidrRoutingConfig"`
	// `PRIMARY` or `SECONDARY`.
	Failover pulumi.StringInput `pulumi:"failover"`
	// Information about how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
	Geolocation GetRecordsResourceRecordSetGeolocationInput `pulumi:"geolocation"`
	// Information about how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
	GeoproximityLocation GetRecordsResourceRecordSetGeoproximityLocationInput `pulumi:"geoproximityLocation"`
	// ID of any applicable health check.
	HealthCheckId pulumi.StringInput `pulumi:"healthCheckId"`
	// Traffic is routed approximately randomly to multiple resources.
	MultiValueAnswer pulumi.BoolInput `pulumi:"multiValueAnswer"`
	// The name of the record.
	Name pulumi.StringInput `pulumi:"name"`
	// The Amazon EC2 Region of the resource that this resource record set refers to.
	Region pulumi.StringInput `pulumi:"region"`
	// The resource records.
	ResourceRecords GetRecordsResourceRecordSetResourceRecordArrayInput `pulumi:"resourceRecords"`
	// An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
	SetIdentifier pulumi.StringInput `pulumi:"setIdentifier"`
	// The ID of any traffic policy instance that Route 53 created this resource record set for.
	TrafficPolicyInstanceId pulumi.StringInput `pulumi:"trafficPolicyInstanceId"`
	// The resource record cache time to live (TTL), in seconds.
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// The DNS record type.
	Type pulumi.StringInput `pulumi:"type"`
	// Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetRecordsResourceRecordSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSet)(nil)).Elem()
}

func (i GetRecordsResourceRecordSetArgs) ToGetRecordsResourceRecordSetOutput() GetRecordsResourceRecordSetOutput {
	return i.ToGetRecordsResourceRecordSetOutputWithContext(context.Background())
}

func (i GetRecordsResourceRecordSetArgs) ToGetRecordsResourceRecordSetOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsResourceRecordSetOutput)
}

// GetRecordsResourceRecordSetArrayInput is an input type that accepts GetRecordsResourceRecordSetArray and GetRecordsResourceRecordSetArrayOutput values.
// You can construct a concrete instance of `GetRecordsResourceRecordSetArrayInput` via:
//
//	GetRecordsResourceRecordSetArray{ GetRecordsResourceRecordSetArgs{...} }
type GetRecordsResourceRecordSetArrayInput interface {
	pulumi.Input

	ToGetRecordsResourceRecordSetArrayOutput() GetRecordsResourceRecordSetArrayOutput
	ToGetRecordsResourceRecordSetArrayOutputWithContext(context.Context) GetRecordsResourceRecordSetArrayOutput
}

type GetRecordsResourceRecordSetArray []GetRecordsResourceRecordSetInput

func (GetRecordsResourceRecordSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsResourceRecordSet)(nil)).Elem()
}

func (i GetRecordsResourceRecordSetArray) ToGetRecordsResourceRecordSetArrayOutput() GetRecordsResourceRecordSetArrayOutput {
	return i.ToGetRecordsResourceRecordSetArrayOutputWithContext(context.Background())
}

func (i GetRecordsResourceRecordSetArray) ToGetRecordsResourceRecordSetArrayOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsResourceRecordSetArrayOutput)
}

type GetRecordsResourceRecordSetOutput struct{ *pulumi.OutputState }

func (GetRecordsResourceRecordSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSet)(nil)).Elem()
}

func (o GetRecordsResourceRecordSetOutput) ToGetRecordsResourceRecordSetOutput() GetRecordsResourceRecordSetOutput {
	return o
}

func (o GetRecordsResourceRecordSetOutput) ToGetRecordsResourceRecordSetOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetOutput {
	return o
}

// Information about the AWS resource traffic is routed to.
func (o GetRecordsResourceRecordSetOutput) AliasTarget() GetRecordsResourceRecordSetAliasTargetOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) GetRecordsResourceRecordSetAliasTarget { return v.AliasTarget }).(GetRecordsResourceRecordSetAliasTargetOutput)
}

// Information about the CIDR location traffic is routed to.
func (o GetRecordsResourceRecordSetOutput) CidrRoutingConfig() GetRecordsResourceRecordSetCidrRoutingConfigOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) GetRecordsResourceRecordSetCidrRoutingConfig {
		return v.CidrRoutingConfig
	}).(GetRecordsResourceRecordSetCidrRoutingConfigOutput)
}

// `PRIMARY` or `SECONDARY`.
func (o GetRecordsResourceRecordSetOutput) Failover() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) string { return v.Failover }).(pulumi.StringOutput)
}

// Information about how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
func (o GetRecordsResourceRecordSetOutput) Geolocation() GetRecordsResourceRecordSetGeolocationOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) GetRecordsResourceRecordSetGeolocation { return v.Geolocation }).(GetRecordsResourceRecordSetGeolocationOutput)
}

// Information about how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
func (o GetRecordsResourceRecordSetOutput) GeoproximityLocation() GetRecordsResourceRecordSetGeoproximityLocationOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) GetRecordsResourceRecordSetGeoproximityLocation {
		return v.GeoproximityLocation
	}).(GetRecordsResourceRecordSetGeoproximityLocationOutput)
}

// ID of any applicable health check.
func (o GetRecordsResourceRecordSetOutput) HealthCheckId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) string { return v.HealthCheckId }).(pulumi.StringOutput)
}

// Traffic is routed approximately randomly to multiple resources.
func (o GetRecordsResourceRecordSetOutput) MultiValueAnswer() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) bool { return v.MultiValueAnswer }).(pulumi.BoolOutput)
}

// The name of the record.
func (o GetRecordsResourceRecordSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) string { return v.Name }).(pulumi.StringOutput)
}

// The Amazon EC2 Region of the resource that this resource record set refers to.
func (o GetRecordsResourceRecordSetOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) string { return v.Region }).(pulumi.StringOutput)
}

// The resource records.
func (o GetRecordsResourceRecordSetOutput) ResourceRecords() GetRecordsResourceRecordSetResourceRecordArrayOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) []GetRecordsResourceRecordSetResourceRecord {
		return v.ResourceRecords
	}).(GetRecordsResourceRecordSetResourceRecordArrayOutput)
}

// An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
func (o GetRecordsResourceRecordSetOutput) SetIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) string { return v.SetIdentifier }).(pulumi.StringOutput)
}

// The ID of any traffic policy instance that Route 53 created this resource record set for.
func (o GetRecordsResourceRecordSetOutput) TrafficPolicyInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) string { return v.TrafficPolicyInstanceId }).(pulumi.StringOutput)
}

// The resource record cache time to live (TTL), in seconds.
func (o GetRecordsResourceRecordSetOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) int { return v.Ttl }).(pulumi.IntOutput)
}

// The DNS record type.
func (o GetRecordsResourceRecordSetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) string { return v.Type }).(pulumi.StringOutput)
}

// Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set.
func (o GetRecordsResourceRecordSetOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSet) int { return v.Weight }).(pulumi.IntOutput)
}

type GetRecordsResourceRecordSetArrayOutput struct{ *pulumi.OutputState }

func (GetRecordsResourceRecordSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsResourceRecordSet)(nil)).Elem()
}

func (o GetRecordsResourceRecordSetArrayOutput) ToGetRecordsResourceRecordSetArrayOutput() GetRecordsResourceRecordSetArrayOutput {
	return o
}

func (o GetRecordsResourceRecordSetArrayOutput) ToGetRecordsResourceRecordSetArrayOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetArrayOutput {
	return o
}

func (o GetRecordsResourceRecordSetArrayOutput) Index(i pulumi.IntInput) GetRecordsResourceRecordSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordsResourceRecordSet {
		return vs[0].([]GetRecordsResourceRecordSet)[vs[1].(int)]
	}).(GetRecordsResourceRecordSetOutput)
}

type GetRecordsResourceRecordSetAliasTarget struct {
	// Target DNS name.
	DnsName string `pulumi:"dnsName"`
	// Whether an alias resource record set inherits the health of the referenced AWS resource.
	EvaluateTargetHealth bool `pulumi:"evaluateTargetHealth"`
	// Target hosted zone ID.
	HostedZoneId string `pulumi:"hostedZoneId"`
}

// GetRecordsResourceRecordSetAliasTargetInput is an input type that accepts GetRecordsResourceRecordSetAliasTargetArgs and GetRecordsResourceRecordSetAliasTargetOutput values.
// You can construct a concrete instance of `GetRecordsResourceRecordSetAliasTargetInput` via:
//
//	GetRecordsResourceRecordSetAliasTargetArgs{...}
type GetRecordsResourceRecordSetAliasTargetInput interface {
	pulumi.Input

	ToGetRecordsResourceRecordSetAliasTargetOutput() GetRecordsResourceRecordSetAliasTargetOutput
	ToGetRecordsResourceRecordSetAliasTargetOutputWithContext(context.Context) GetRecordsResourceRecordSetAliasTargetOutput
}

type GetRecordsResourceRecordSetAliasTargetArgs struct {
	// Target DNS name.
	DnsName pulumi.StringInput `pulumi:"dnsName"`
	// Whether an alias resource record set inherits the health of the referenced AWS resource.
	EvaluateTargetHealth pulumi.BoolInput `pulumi:"evaluateTargetHealth"`
	// Target hosted zone ID.
	HostedZoneId pulumi.StringInput `pulumi:"hostedZoneId"`
}

func (GetRecordsResourceRecordSetAliasTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetAliasTarget)(nil)).Elem()
}

func (i GetRecordsResourceRecordSetAliasTargetArgs) ToGetRecordsResourceRecordSetAliasTargetOutput() GetRecordsResourceRecordSetAliasTargetOutput {
	return i.ToGetRecordsResourceRecordSetAliasTargetOutputWithContext(context.Background())
}

func (i GetRecordsResourceRecordSetAliasTargetArgs) ToGetRecordsResourceRecordSetAliasTargetOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetAliasTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsResourceRecordSetAliasTargetOutput)
}

type GetRecordsResourceRecordSetAliasTargetOutput struct{ *pulumi.OutputState }

func (GetRecordsResourceRecordSetAliasTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetAliasTarget)(nil)).Elem()
}

func (o GetRecordsResourceRecordSetAliasTargetOutput) ToGetRecordsResourceRecordSetAliasTargetOutput() GetRecordsResourceRecordSetAliasTargetOutput {
	return o
}

func (o GetRecordsResourceRecordSetAliasTargetOutput) ToGetRecordsResourceRecordSetAliasTargetOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetAliasTargetOutput {
	return o
}

// Target DNS name.
func (o GetRecordsResourceRecordSetAliasTargetOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetAliasTarget) string { return v.DnsName }).(pulumi.StringOutput)
}

// Whether an alias resource record set inherits the health of the referenced AWS resource.
func (o GetRecordsResourceRecordSetAliasTargetOutput) EvaluateTargetHealth() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetAliasTarget) bool { return v.EvaluateTargetHealth }).(pulumi.BoolOutput)
}

// Target hosted zone ID.
func (o GetRecordsResourceRecordSetAliasTargetOutput) HostedZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetAliasTarget) string { return v.HostedZoneId }).(pulumi.StringOutput)
}

type GetRecordsResourceRecordSetCidrRoutingConfig struct {
	// The CIDR collection ID.
	CollectionId string `pulumi:"collectionId"`
	// The CIDR collection location name.
	LocationName string `pulumi:"locationName"`
}

// GetRecordsResourceRecordSetCidrRoutingConfigInput is an input type that accepts GetRecordsResourceRecordSetCidrRoutingConfigArgs and GetRecordsResourceRecordSetCidrRoutingConfigOutput values.
// You can construct a concrete instance of `GetRecordsResourceRecordSetCidrRoutingConfigInput` via:
//
//	GetRecordsResourceRecordSetCidrRoutingConfigArgs{...}
type GetRecordsResourceRecordSetCidrRoutingConfigInput interface {
	pulumi.Input

	ToGetRecordsResourceRecordSetCidrRoutingConfigOutput() GetRecordsResourceRecordSetCidrRoutingConfigOutput
	ToGetRecordsResourceRecordSetCidrRoutingConfigOutputWithContext(context.Context) GetRecordsResourceRecordSetCidrRoutingConfigOutput
}

type GetRecordsResourceRecordSetCidrRoutingConfigArgs struct {
	// The CIDR collection ID.
	CollectionId pulumi.StringInput `pulumi:"collectionId"`
	// The CIDR collection location name.
	LocationName pulumi.StringInput `pulumi:"locationName"`
}

func (GetRecordsResourceRecordSetCidrRoutingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetCidrRoutingConfig)(nil)).Elem()
}

func (i GetRecordsResourceRecordSetCidrRoutingConfigArgs) ToGetRecordsResourceRecordSetCidrRoutingConfigOutput() GetRecordsResourceRecordSetCidrRoutingConfigOutput {
	return i.ToGetRecordsResourceRecordSetCidrRoutingConfigOutputWithContext(context.Background())
}

func (i GetRecordsResourceRecordSetCidrRoutingConfigArgs) ToGetRecordsResourceRecordSetCidrRoutingConfigOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetCidrRoutingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsResourceRecordSetCidrRoutingConfigOutput)
}

type GetRecordsResourceRecordSetCidrRoutingConfigOutput struct{ *pulumi.OutputState }

func (GetRecordsResourceRecordSetCidrRoutingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetCidrRoutingConfig)(nil)).Elem()
}

func (o GetRecordsResourceRecordSetCidrRoutingConfigOutput) ToGetRecordsResourceRecordSetCidrRoutingConfigOutput() GetRecordsResourceRecordSetCidrRoutingConfigOutput {
	return o
}

func (o GetRecordsResourceRecordSetCidrRoutingConfigOutput) ToGetRecordsResourceRecordSetCidrRoutingConfigOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetCidrRoutingConfigOutput {
	return o
}

// The CIDR collection ID.
func (o GetRecordsResourceRecordSetCidrRoutingConfigOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetCidrRoutingConfig) string { return v.CollectionId }).(pulumi.StringOutput)
}

// The CIDR collection location name.
func (o GetRecordsResourceRecordSetCidrRoutingConfigOutput) LocationName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetCidrRoutingConfig) string { return v.LocationName }).(pulumi.StringOutput)
}

type GetRecordsResourceRecordSetGeolocation struct {
	// The two-letter code for the continent.
	ContinentCode string `pulumi:"continentCode"`
	// The two-letter code for a country.
	CountryCode string `pulumi:"countryCode"`
	// The two-letter code for a state of the United States.
	SubdivisionCode string `pulumi:"subdivisionCode"`
}

// GetRecordsResourceRecordSetGeolocationInput is an input type that accepts GetRecordsResourceRecordSetGeolocationArgs and GetRecordsResourceRecordSetGeolocationOutput values.
// You can construct a concrete instance of `GetRecordsResourceRecordSetGeolocationInput` via:
//
//	GetRecordsResourceRecordSetGeolocationArgs{...}
type GetRecordsResourceRecordSetGeolocationInput interface {
	pulumi.Input

	ToGetRecordsResourceRecordSetGeolocationOutput() GetRecordsResourceRecordSetGeolocationOutput
	ToGetRecordsResourceRecordSetGeolocationOutputWithContext(context.Context) GetRecordsResourceRecordSetGeolocationOutput
}

type GetRecordsResourceRecordSetGeolocationArgs struct {
	// The two-letter code for the continent.
	ContinentCode pulumi.StringInput `pulumi:"continentCode"`
	// The two-letter code for a country.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The two-letter code for a state of the United States.
	SubdivisionCode pulumi.StringInput `pulumi:"subdivisionCode"`
}

func (GetRecordsResourceRecordSetGeolocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetGeolocation)(nil)).Elem()
}

func (i GetRecordsResourceRecordSetGeolocationArgs) ToGetRecordsResourceRecordSetGeolocationOutput() GetRecordsResourceRecordSetGeolocationOutput {
	return i.ToGetRecordsResourceRecordSetGeolocationOutputWithContext(context.Background())
}

func (i GetRecordsResourceRecordSetGeolocationArgs) ToGetRecordsResourceRecordSetGeolocationOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetGeolocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsResourceRecordSetGeolocationOutput)
}

type GetRecordsResourceRecordSetGeolocationOutput struct{ *pulumi.OutputState }

func (GetRecordsResourceRecordSetGeolocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetGeolocation)(nil)).Elem()
}

func (o GetRecordsResourceRecordSetGeolocationOutput) ToGetRecordsResourceRecordSetGeolocationOutput() GetRecordsResourceRecordSetGeolocationOutput {
	return o
}

func (o GetRecordsResourceRecordSetGeolocationOutput) ToGetRecordsResourceRecordSetGeolocationOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetGeolocationOutput {
	return o
}

// The two-letter code for the continent.
func (o GetRecordsResourceRecordSetGeolocationOutput) ContinentCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetGeolocation) string { return v.ContinentCode }).(pulumi.StringOutput)
}

// The two-letter code for a country.
func (o GetRecordsResourceRecordSetGeolocationOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetGeolocation) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The two-letter code for a state of the United States.
func (o GetRecordsResourceRecordSetGeolocationOutput) SubdivisionCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetGeolocation) string { return v.SubdivisionCode }).(pulumi.StringOutput)
}

type GetRecordsResourceRecordSetGeoproximityLocation struct {
	// The AWS Region the resource you are directing DNS traffic to, is in.
	AwsRegion string `pulumi:"awsRegion"`
	// The bias increases or decreases the size of the geographic region from which Route 53 routes traffic to a resource.
	Bias int `pulumi:"bias"`
	// Contains the longitude and latitude for a geographic region.
	Coordinates GetRecordsResourceRecordSetGeoproximityLocationCoordinates `pulumi:"coordinates"`
	// An AWS Local Zone Group.
	LocalZoneGroup string `pulumi:"localZoneGroup"`
}

// GetRecordsResourceRecordSetGeoproximityLocationInput is an input type that accepts GetRecordsResourceRecordSetGeoproximityLocationArgs and GetRecordsResourceRecordSetGeoproximityLocationOutput values.
// You can construct a concrete instance of `GetRecordsResourceRecordSetGeoproximityLocationInput` via:
//
//	GetRecordsResourceRecordSetGeoproximityLocationArgs{...}
type GetRecordsResourceRecordSetGeoproximityLocationInput interface {
	pulumi.Input

	ToGetRecordsResourceRecordSetGeoproximityLocationOutput() GetRecordsResourceRecordSetGeoproximityLocationOutput
	ToGetRecordsResourceRecordSetGeoproximityLocationOutputWithContext(context.Context) GetRecordsResourceRecordSetGeoproximityLocationOutput
}

type GetRecordsResourceRecordSetGeoproximityLocationArgs struct {
	// The AWS Region the resource you are directing DNS traffic to, is in.
	AwsRegion pulumi.StringInput `pulumi:"awsRegion"`
	// The bias increases or decreases the size of the geographic region from which Route 53 routes traffic to a resource.
	Bias pulumi.IntInput `pulumi:"bias"`
	// Contains the longitude and latitude for a geographic region.
	Coordinates GetRecordsResourceRecordSetGeoproximityLocationCoordinatesInput `pulumi:"coordinates"`
	// An AWS Local Zone Group.
	LocalZoneGroup pulumi.StringInput `pulumi:"localZoneGroup"`
}

func (GetRecordsResourceRecordSetGeoproximityLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetGeoproximityLocation)(nil)).Elem()
}

func (i GetRecordsResourceRecordSetGeoproximityLocationArgs) ToGetRecordsResourceRecordSetGeoproximityLocationOutput() GetRecordsResourceRecordSetGeoproximityLocationOutput {
	return i.ToGetRecordsResourceRecordSetGeoproximityLocationOutputWithContext(context.Background())
}

func (i GetRecordsResourceRecordSetGeoproximityLocationArgs) ToGetRecordsResourceRecordSetGeoproximityLocationOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetGeoproximityLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsResourceRecordSetGeoproximityLocationOutput)
}

type GetRecordsResourceRecordSetGeoproximityLocationOutput struct{ *pulumi.OutputState }

func (GetRecordsResourceRecordSetGeoproximityLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetGeoproximityLocation)(nil)).Elem()
}

func (o GetRecordsResourceRecordSetGeoproximityLocationOutput) ToGetRecordsResourceRecordSetGeoproximityLocationOutput() GetRecordsResourceRecordSetGeoproximityLocationOutput {
	return o
}

func (o GetRecordsResourceRecordSetGeoproximityLocationOutput) ToGetRecordsResourceRecordSetGeoproximityLocationOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetGeoproximityLocationOutput {
	return o
}

// The AWS Region the resource you are directing DNS traffic to, is in.
func (o GetRecordsResourceRecordSetGeoproximityLocationOutput) AwsRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetGeoproximityLocation) string { return v.AwsRegion }).(pulumi.StringOutput)
}

// The bias increases or decreases the size of the geographic region from which Route 53 routes traffic to a resource.
func (o GetRecordsResourceRecordSetGeoproximityLocationOutput) Bias() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetGeoproximityLocation) int { return v.Bias }).(pulumi.IntOutput)
}

// Contains the longitude and latitude for a geographic region.
func (o GetRecordsResourceRecordSetGeoproximityLocationOutput) Coordinates() GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetGeoproximityLocation) GetRecordsResourceRecordSetGeoproximityLocationCoordinates {
		return v.Coordinates
	}).(GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput)
}

// An AWS Local Zone Group.
func (o GetRecordsResourceRecordSetGeoproximityLocationOutput) LocalZoneGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetGeoproximityLocation) string { return v.LocalZoneGroup }).(pulumi.StringOutput)
}

type GetRecordsResourceRecordSetGeoproximityLocationCoordinates struct {
	// Latitude.
	Latitude string `pulumi:"latitude"`
	// Longitude.
	Longitude string `pulumi:"longitude"`
}

// GetRecordsResourceRecordSetGeoproximityLocationCoordinatesInput is an input type that accepts GetRecordsResourceRecordSetGeoproximityLocationCoordinatesArgs and GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput values.
// You can construct a concrete instance of `GetRecordsResourceRecordSetGeoproximityLocationCoordinatesInput` via:
//
//	GetRecordsResourceRecordSetGeoproximityLocationCoordinatesArgs{...}
type GetRecordsResourceRecordSetGeoproximityLocationCoordinatesInput interface {
	pulumi.Input

	ToGetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput() GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput
	ToGetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutputWithContext(context.Context) GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput
}

type GetRecordsResourceRecordSetGeoproximityLocationCoordinatesArgs struct {
	// Latitude.
	Latitude pulumi.StringInput `pulumi:"latitude"`
	// Longitude.
	Longitude pulumi.StringInput `pulumi:"longitude"`
}

func (GetRecordsResourceRecordSetGeoproximityLocationCoordinatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetGeoproximityLocationCoordinates)(nil)).Elem()
}

func (i GetRecordsResourceRecordSetGeoproximityLocationCoordinatesArgs) ToGetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput() GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput {
	return i.ToGetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutputWithContext(context.Background())
}

func (i GetRecordsResourceRecordSetGeoproximityLocationCoordinatesArgs) ToGetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput)
}

type GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput struct{ *pulumi.OutputState }

func (GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetGeoproximityLocationCoordinates)(nil)).Elem()
}

func (o GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput) ToGetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput() GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput {
	return o
}

func (o GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput) ToGetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput {
	return o
}

// Latitude.
func (o GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput) Latitude() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetGeoproximityLocationCoordinates) string { return v.Latitude }).(pulumi.StringOutput)
}

// Longitude.
func (o GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput) Longitude() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetGeoproximityLocationCoordinates) string { return v.Longitude }).(pulumi.StringOutput)
}

type GetRecordsResourceRecordSetResourceRecord struct {
	// The DNS record value.
	Value string `pulumi:"value"`
}

// GetRecordsResourceRecordSetResourceRecordInput is an input type that accepts GetRecordsResourceRecordSetResourceRecordArgs and GetRecordsResourceRecordSetResourceRecordOutput values.
// You can construct a concrete instance of `GetRecordsResourceRecordSetResourceRecordInput` via:
//
//	GetRecordsResourceRecordSetResourceRecordArgs{...}
type GetRecordsResourceRecordSetResourceRecordInput interface {
	pulumi.Input

	ToGetRecordsResourceRecordSetResourceRecordOutput() GetRecordsResourceRecordSetResourceRecordOutput
	ToGetRecordsResourceRecordSetResourceRecordOutputWithContext(context.Context) GetRecordsResourceRecordSetResourceRecordOutput
}

type GetRecordsResourceRecordSetResourceRecordArgs struct {
	// The DNS record value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetRecordsResourceRecordSetResourceRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetResourceRecord)(nil)).Elem()
}

func (i GetRecordsResourceRecordSetResourceRecordArgs) ToGetRecordsResourceRecordSetResourceRecordOutput() GetRecordsResourceRecordSetResourceRecordOutput {
	return i.ToGetRecordsResourceRecordSetResourceRecordOutputWithContext(context.Background())
}

func (i GetRecordsResourceRecordSetResourceRecordArgs) ToGetRecordsResourceRecordSetResourceRecordOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetResourceRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsResourceRecordSetResourceRecordOutput)
}

// GetRecordsResourceRecordSetResourceRecordArrayInput is an input type that accepts GetRecordsResourceRecordSetResourceRecordArray and GetRecordsResourceRecordSetResourceRecordArrayOutput values.
// You can construct a concrete instance of `GetRecordsResourceRecordSetResourceRecordArrayInput` via:
//
//	GetRecordsResourceRecordSetResourceRecordArray{ GetRecordsResourceRecordSetResourceRecordArgs{...} }
type GetRecordsResourceRecordSetResourceRecordArrayInput interface {
	pulumi.Input

	ToGetRecordsResourceRecordSetResourceRecordArrayOutput() GetRecordsResourceRecordSetResourceRecordArrayOutput
	ToGetRecordsResourceRecordSetResourceRecordArrayOutputWithContext(context.Context) GetRecordsResourceRecordSetResourceRecordArrayOutput
}

type GetRecordsResourceRecordSetResourceRecordArray []GetRecordsResourceRecordSetResourceRecordInput

func (GetRecordsResourceRecordSetResourceRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsResourceRecordSetResourceRecord)(nil)).Elem()
}

func (i GetRecordsResourceRecordSetResourceRecordArray) ToGetRecordsResourceRecordSetResourceRecordArrayOutput() GetRecordsResourceRecordSetResourceRecordArrayOutput {
	return i.ToGetRecordsResourceRecordSetResourceRecordArrayOutputWithContext(context.Background())
}

func (i GetRecordsResourceRecordSetResourceRecordArray) ToGetRecordsResourceRecordSetResourceRecordArrayOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetResourceRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsResourceRecordSetResourceRecordArrayOutput)
}

type GetRecordsResourceRecordSetResourceRecordOutput struct{ *pulumi.OutputState }

func (GetRecordsResourceRecordSetResourceRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResourceRecordSetResourceRecord)(nil)).Elem()
}

func (o GetRecordsResourceRecordSetResourceRecordOutput) ToGetRecordsResourceRecordSetResourceRecordOutput() GetRecordsResourceRecordSetResourceRecordOutput {
	return o
}

func (o GetRecordsResourceRecordSetResourceRecordOutput) ToGetRecordsResourceRecordSetResourceRecordOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetResourceRecordOutput {
	return o
}

// The DNS record value.
func (o GetRecordsResourceRecordSetResourceRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResourceRecordSetResourceRecord) string { return v.Value }).(pulumi.StringOutput)
}

type GetRecordsResourceRecordSetResourceRecordArrayOutput struct{ *pulumi.OutputState }

func (GetRecordsResourceRecordSetResourceRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsResourceRecordSetResourceRecord)(nil)).Elem()
}

func (o GetRecordsResourceRecordSetResourceRecordArrayOutput) ToGetRecordsResourceRecordSetResourceRecordArrayOutput() GetRecordsResourceRecordSetResourceRecordArrayOutput {
	return o
}

func (o GetRecordsResourceRecordSetResourceRecordArrayOutput) ToGetRecordsResourceRecordSetResourceRecordArrayOutputWithContext(ctx context.Context) GetRecordsResourceRecordSetResourceRecordArrayOutput {
	return o
}

func (o GetRecordsResourceRecordSetResourceRecordArrayOutput) Index(i pulumi.IntInput) GetRecordsResourceRecordSetResourceRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordsResourceRecordSetResourceRecord {
		return vs[0].([]GetRecordsResourceRecordSetResourceRecord)[vs[1].(int)]
	}).(GetRecordsResourceRecordSetResourceRecordOutput)
}

type GetResolverEndpointFilter struct {
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// GetResolverEndpointFilterInput is an input type that accepts GetResolverEndpointFilterArgs and GetResolverEndpointFilterOutput values.
// You can construct a concrete instance of `GetResolverEndpointFilterInput` via:
//
//	GetResolverEndpointFilterArgs{...}
type GetResolverEndpointFilterInput interface {
	pulumi.Input

	ToGetResolverEndpointFilterOutput() GetResolverEndpointFilterOutput
	ToGetResolverEndpointFilterOutputWithContext(context.Context) GetResolverEndpointFilterOutput
}

type GetResolverEndpointFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetResolverEndpointFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointFilter)(nil)).Elem()
}

func (i GetResolverEndpointFilterArgs) ToGetResolverEndpointFilterOutput() GetResolverEndpointFilterOutput {
	return i.ToGetResolverEndpointFilterOutputWithContext(context.Background())
}

func (i GetResolverEndpointFilterArgs) ToGetResolverEndpointFilterOutputWithContext(ctx context.Context) GetResolverEndpointFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointFilterOutput)
}

// GetResolverEndpointFilterArrayInput is an input type that accepts GetResolverEndpointFilterArray and GetResolverEndpointFilterArrayOutput values.
// You can construct a concrete instance of `GetResolverEndpointFilterArrayInput` via:
//
//	GetResolverEndpointFilterArray{ GetResolverEndpointFilterArgs{...} }
type GetResolverEndpointFilterArrayInput interface {
	pulumi.Input

	ToGetResolverEndpointFilterArrayOutput() GetResolverEndpointFilterArrayOutput
	ToGetResolverEndpointFilterArrayOutputWithContext(context.Context) GetResolverEndpointFilterArrayOutput
}

type GetResolverEndpointFilterArray []GetResolverEndpointFilterInput

func (GetResolverEndpointFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointFilter)(nil)).Elem()
}

func (i GetResolverEndpointFilterArray) ToGetResolverEndpointFilterArrayOutput() GetResolverEndpointFilterArrayOutput {
	return i.ToGetResolverEndpointFilterArrayOutputWithContext(context.Background())
}

func (i GetResolverEndpointFilterArray) ToGetResolverEndpointFilterArrayOutputWithContext(ctx context.Context) GetResolverEndpointFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointFilterArrayOutput)
}

type GetResolverEndpointFilterOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointFilter)(nil)).Elem()
}

func (o GetResolverEndpointFilterOutput) ToGetResolverEndpointFilterOutput() GetResolverEndpointFilterOutput {
	return o
}

func (o GetResolverEndpointFilterOutput) ToGetResolverEndpointFilterOutputWithContext(ctx context.Context) GetResolverEndpointFilterOutput {
	return o
}

func (o GetResolverEndpointFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetResolverEndpointFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetResolverEndpointFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetResolverEndpointFilterArrayOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointFilter)(nil)).Elem()
}

func (o GetResolverEndpointFilterArrayOutput) ToGetResolverEndpointFilterArrayOutput() GetResolverEndpointFilterArrayOutput {
	return o
}

func (o GetResolverEndpointFilterArrayOutput) ToGetResolverEndpointFilterArrayOutputWithContext(ctx context.Context) GetResolverEndpointFilterArrayOutput {
	return o
}

func (o GetResolverEndpointFilterArrayOutput) Index(i pulumi.IntInput) GetResolverEndpointFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverEndpointFilter {
		return vs[0].([]GetResolverEndpointFilter)[vs[1].(int)]
	}).(GetResolverEndpointFilterOutput)
}

type GetResolverFirewallRulesFirewallRule struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
	Action string `pulumi:"action"`
	// The DNS record's type.
	BlockOverrideDnsType string `pulumi:"blockOverrideDnsType"`
	// The custom DNS record to send back in response to the query.
	BlockOverrideDomain string `pulumi:"blockOverrideDomain"`
	// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record.
	BlockOverrideTtl int `pulumi:"blockOverrideTtl"`
	// The way that you want DNS Firewall to block the request.
	BlockResponse string `pulumi:"blockResponse"`
	// The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC).
	CreationTime string `pulumi:"creationTime"`
	// A unique string defined by you to identify the request.
	CreatorRequestId string `pulumi:"creatorRequestId"`
	// The ID of the domain list that's used in the rule.
	FirewallDomainListId string `pulumi:"firewallDomainListId"`
	// The unique identifier of the firewall rule group that you want to retrieve the rules for.
	FirewallRuleGroupId string `pulumi:"firewallRuleGroupId"`
	// The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).
	ModificationTime string `pulumi:"modificationTime"`
	// The name of the rule.
	Name string `pulumi:"name"`
	// The setting that determines the processing order of the rules in a rule group.
	Priority int `pulumi:"priority"`
}

// GetResolverFirewallRulesFirewallRuleInput is an input type that accepts GetResolverFirewallRulesFirewallRuleArgs and GetResolverFirewallRulesFirewallRuleOutput values.
// You can construct a concrete instance of `GetResolverFirewallRulesFirewallRuleInput` via:
//
//	GetResolverFirewallRulesFirewallRuleArgs{...}
type GetResolverFirewallRulesFirewallRuleInput interface {
	pulumi.Input

	ToGetResolverFirewallRulesFirewallRuleOutput() GetResolverFirewallRulesFirewallRuleOutput
	ToGetResolverFirewallRulesFirewallRuleOutputWithContext(context.Context) GetResolverFirewallRulesFirewallRuleOutput
}

type GetResolverFirewallRulesFirewallRuleArgs struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
	Action pulumi.StringInput `pulumi:"action"`
	// The DNS record's type.
	BlockOverrideDnsType pulumi.StringInput `pulumi:"blockOverrideDnsType"`
	// The custom DNS record to send back in response to the query.
	BlockOverrideDomain pulumi.StringInput `pulumi:"blockOverrideDomain"`
	// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record.
	BlockOverrideTtl pulumi.IntInput `pulumi:"blockOverrideTtl"`
	// The way that you want DNS Firewall to block the request.
	BlockResponse pulumi.StringInput `pulumi:"blockResponse"`
	// The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC).
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// A unique string defined by you to identify the request.
	CreatorRequestId pulumi.StringInput `pulumi:"creatorRequestId"`
	// The ID of the domain list that's used in the rule.
	FirewallDomainListId pulumi.StringInput `pulumi:"firewallDomainListId"`
	// The unique identifier of the firewall rule group that you want to retrieve the rules for.
	FirewallRuleGroupId pulumi.StringInput `pulumi:"firewallRuleGroupId"`
	// The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).
	ModificationTime pulumi.StringInput `pulumi:"modificationTime"`
	// The name of the rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The setting that determines the processing order of the rules in a rule group.
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (GetResolverFirewallRulesFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverFirewallRulesFirewallRule)(nil)).Elem()
}

func (i GetResolverFirewallRulesFirewallRuleArgs) ToGetResolverFirewallRulesFirewallRuleOutput() GetResolverFirewallRulesFirewallRuleOutput {
	return i.ToGetResolverFirewallRulesFirewallRuleOutputWithContext(context.Background())
}

func (i GetResolverFirewallRulesFirewallRuleArgs) ToGetResolverFirewallRulesFirewallRuleOutputWithContext(ctx context.Context) GetResolverFirewallRulesFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverFirewallRulesFirewallRuleOutput)
}

// GetResolverFirewallRulesFirewallRuleArrayInput is an input type that accepts GetResolverFirewallRulesFirewallRuleArray and GetResolverFirewallRulesFirewallRuleArrayOutput values.
// You can construct a concrete instance of `GetResolverFirewallRulesFirewallRuleArrayInput` via:
//
//	GetResolverFirewallRulesFirewallRuleArray{ GetResolverFirewallRulesFirewallRuleArgs{...} }
type GetResolverFirewallRulesFirewallRuleArrayInput interface {
	pulumi.Input

	ToGetResolverFirewallRulesFirewallRuleArrayOutput() GetResolverFirewallRulesFirewallRuleArrayOutput
	ToGetResolverFirewallRulesFirewallRuleArrayOutputWithContext(context.Context) GetResolverFirewallRulesFirewallRuleArrayOutput
}

type GetResolverFirewallRulesFirewallRuleArray []GetResolverFirewallRulesFirewallRuleInput

func (GetResolverFirewallRulesFirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverFirewallRulesFirewallRule)(nil)).Elem()
}

func (i GetResolverFirewallRulesFirewallRuleArray) ToGetResolverFirewallRulesFirewallRuleArrayOutput() GetResolverFirewallRulesFirewallRuleArrayOutput {
	return i.ToGetResolverFirewallRulesFirewallRuleArrayOutputWithContext(context.Background())
}

func (i GetResolverFirewallRulesFirewallRuleArray) ToGetResolverFirewallRulesFirewallRuleArrayOutputWithContext(ctx context.Context) GetResolverFirewallRulesFirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverFirewallRulesFirewallRuleArrayOutput)
}

type GetResolverFirewallRulesFirewallRuleOutput struct{ *pulumi.OutputState }

func (GetResolverFirewallRulesFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverFirewallRulesFirewallRule)(nil)).Elem()
}

func (o GetResolverFirewallRulesFirewallRuleOutput) ToGetResolverFirewallRulesFirewallRuleOutput() GetResolverFirewallRulesFirewallRuleOutput {
	return o
}

func (o GetResolverFirewallRulesFirewallRuleOutput) ToGetResolverFirewallRulesFirewallRuleOutputWithContext(ctx context.Context) GetResolverFirewallRulesFirewallRuleOutput {
	return o
}

// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
func (o GetResolverFirewallRulesFirewallRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.Action }).(pulumi.StringOutput)
}

// The DNS record's type.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockOverrideDnsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.BlockOverrideDnsType }).(pulumi.StringOutput)
}

// The custom DNS record to send back in response to the query.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockOverrideDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.BlockOverrideDomain }).(pulumi.StringOutput)
}

// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockOverrideTtl() pulumi.IntOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) int { return v.BlockOverrideTtl }).(pulumi.IntOutput)
}

// The way that you want DNS Firewall to block the request.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockResponse() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.BlockResponse }).(pulumi.StringOutput)
}

// The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC).
func (o GetResolverFirewallRulesFirewallRuleOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.CreationTime }).(pulumi.StringOutput)
}

// A unique string defined by you to identify the request.
func (o GetResolverFirewallRulesFirewallRuleOutput) CreatorRequestId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.CreatorRequestId }).(pulumi.StringOutput)
}

// The ID of the domain list that's used in the rule.
func (o GetResolverFirewallRulesFirewallRuleOutput) FirewallDomainListId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.FirewallDomainListId }).(pulumi.StringOutput)
}

// The unique identifier of the firewall rule group that you want to retrieve the rules for.
func (o GetResolverFirewallRulesFirewallRuleOutput) FirewallRuleGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.FirewallRuleGroupId }).(pulumi.StringOutput)
}

// The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).
func (o GetResolverFirewallRulesFirewallRuleOutput) ModificationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.ModificationTime }).(pulumi.StringOutput)
}

// The name of the rule.
func (o GetResolverFirewallRulesFirewallRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.Name }).(pulumi.StringOutput)
}

// The setting that determines the processing order of the rules in a rule group.
func (o GetResolverFirewallRulesFirewallRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) int { return v.Priority }).(pulumi.IntOutput)
}

type GetResolverFirewallRulesFirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (GetResolverFirewallRulesFirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverFirewallRulesFirewallRule)(nil)).Elem()
}

func (o GetResolverFirewallRulesFirewallRuleArrayOutput) ToGetResolverFirewallRulesFirewallRuleArrayOutput() GetResolverFirewallRulesFirewallRuleArrayOutput {
	return o
}

func (o GetResolverFirewallRulesFirewallRuleArrayOutput) ToGetResolverFirewallRulesFirewallRuleArrayOutputWithContext(ctx context.Context) GetResolverFirewallRulesFirewallRuleArrayOutput {
	return o
}

func (o GetResolverFirewallRulesFirewallRuleArrayOutput) Index(i pulumi.IntInput) GetResolverFirewallRulesFirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverFirewallRulesFirewallRule {
		return vs[0].([]GetResolverFirewallRulesFirewallRule)[vs[1].(int)]
	}).(GetResolverFirewallRulesFirewallRuleOutput)
}

type GetTrafficPolicyDocumentEndpoint struct {
	// ID of an endpoint you want to assign.
	Id string `pulumi:"id"`
	// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
	Region *string `pulumi:"region"`
	// Type of the endpoint. Valid values are `value`, `cloudfront`, `elastic-load-balancer`, `s3-website`, `application-load-balancer`, `network-load-balancer` and `elastic-beanstalk`
	Type *string `pulumi:"type"`
	// Value of the `type`.
	Value *string `pulumi:"value"`
}

// GetTrafficPolicyDocumentEndpointInput is an input type that accepts GetTrafficPolicyDocumentEndpointArgs and GetTrafficPolicyDocumentEndpointOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentEndpointInput` via:
//
//	GetTrafficPolicyDocumentEndpointArgs{...}
type GetTrafficPolicyDocumentEndpointInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentEndpointOutput() GetTrafficPolicyDocumentEndpointOutput
	ToGetTrafficPolicyDocumentEndpointOutputWithContext(context.Context) GetTrafficPolicyDocumentEndpointOutput
}

type GetTrafficPolicyDocumentEndpointArgs struct {
	// ID of an endpoint you want to assign.
	Id pulumi.StringInput `pulumi:"id"`
	// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Type of the endpoint. Valid values are `value`, `cloudfront`, `elastic-load-balancer`, `s3-website`, `application-load-balancer`, `network-load-balancer` and `elastic-beanstalk`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Value of the `type`.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GetTrafficPolicyDocumentEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentEndpoint)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentEndpointArgs) ToGetTrafficPolicyDocumentEndpointOutput() GetTrafficPolicyDocumentEndpointOutput {
	return i.ToGetTrafficPolicyDocumentEndpointOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentEndpointArgs) ToGetTrafficPolicyDocumentEndpointOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentEndpointOutput)
}

// GetTrafficPolicyDocumentEndpointArrayInput is an input type that accepts GetTrafficPolicyDocumentEndpointArray and GetTrafficPolicyDocumentEndpointArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentEndpointArrayInput` via:
//
//	GetTrafficPolicyDocumentEndpointArray{ GetTrafficPolicyDocumentEndpointArgs{...} }
type GetTrafficPolicyDocumentEndpointArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentEndpointArrayOutput() GetTrafficPolicyDocumentEndpointArrayOutput
	ToGetTrafficPolicyDocumentEndpointArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentEndpointArrayOutput
}

type GetTrafficPolicyDocumentEndpointArray []GetTrafficPolicyDocumentEndpointInput

func (GetTrafficPolicyDocumentEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentEndpoint)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentEndpointArray) ToGetTrafficPolicyDocumentEndpointArrayOutput() GetTrafficPolicyDocumentEndpointArrayOutput {
	return i.ToGetTrafficPolicyDocumentEndpointArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentEndpointArray) ToGetTrafficPolicyDocumentEndpointArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentEndpointArrayOutput)
}

type GetTrafficPolicyDocumentEndpointOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentEndpoint)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentEndpointOutput) ToGetTrafficPolicyDocumentEndpointOutput() GetTrafficPolicyDocumentEndpointOutput {
	return o
}

func (o GetTrafficPolicyDocumentEndpointOutput) ToGetTrafficPolicyDocumentEndpointOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentEndpointOutput {
	return o
}

// ID of an endpoint you want to assign.
func (o GetTrafficPolicyDocumentEndpointOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentEndpoint) string { return v.Id }).(pulumi.StringOutput)
}

// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
func (o GetTrafficPolicyDocumentEndpointOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentEndpoint) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Type of the endpoint. Valid values are `value`, `cloudfront`, `elastic-load-balancer`, `s3-website`, `application-load-balancer`, `network-load-balancer` and `elastic-beanstalk`
func (o GetTrafficPolicyDocumentEndpointOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentEndpoint) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value of the `type`.
func (o GetTrafficPolicyDocumentEndpointOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentEndpoint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentEndpoint)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentEndpointArrayOutput) ToGetTrafficPolicyDocumentEndpointArrayOutput() GetTrafficPolicyDocumentEndpointArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentEndpointArrayOutput) ToGetTrafficPolicyDocumentEndpointArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentEndpointArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentEndpointArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentEndpoint {
		return vs[0].([]GetTrafficPolicyDocumentEndpoint)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentEndpointOutput)
}

type GetTrafficPolicyDocumentRule struct {
	// Configuration block for when you add a geoproximity rule, you configure Amazon Route 53 to route traffic to your resources based on the geographic location of your resources. Only valid for `geoproximity` type. See below
	GeoProximityLocations []GetTrafficPolicyDocumentRuleGeoProximityLocation `pulumi:"geoProximityLocations"`
	// ID of a rule you want to assign.
	Id string `pulumi:"id"`
	// Configuration block for when you add a multivalue answer rule, you configure your traffic policy to route traffic approximately randomly to your healthy resources.  Only valid for `multivalue` type. See below
	Items []GetTrafficPolicyDocumentRuleItem `pulumi:"items"`
	// Configuration block for when you add a geolocation rule, you configure your traffic policy to route your traffic based on the geographic location of your users.  Only valid for `geo` type. See below
	Locations []GetTrafficPolicyDocumentRuleLocation `pulumi:"locations"`
	// Configuration block for the settings for the rule or endpoint that you want to route traffic to whenever the corresponding resources are available. Only valid for `failover` type. See below
	Primary *GetTrafficPolicyDocumentRulePrimary `pulumi:"primary"`
	Regions []GetTrafficPolicyDocumentRuleRegion `pulumi:"regions"`
	// Configuration block for the rule or endpoint that you want to route traffic to whenever the primary resources are not available. Only valid for `failover` type. See below
	Secondary *GetTrafficPolicyDocumentRuleSecondary `pulumi:"secondary"`
	// Type of the rule.
	Type *string `pulumi:"type"`
}

// GetTrafficPolicyDocumentRuleInput is an input type that accepts GetTrafficPolicyDocumentRuleArgs and GetTrafficPolicyDocumentRuleOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleInput` via:
//
//	GetTrafficPolicyDocumentRuleArgs{...}
type GetTrafficPolicyDocumentRuleInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleOutput() GetTrafficPolicyDocumentRuleOutput
	ToGetTrafficPolicyDocumentRuleOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleOutput
}

type GetTrafficPolicyDocumentRuleArgs struct {
	// Configuration block for when you add a geoproximity rule, you configure Amazon Route 53 to route traffic to your resources based on the geographic location of your resources. Only valid for `geoproximity` type. See below
	GeoProximityLocations GetTrafficPolicyDocumentRuleGeoProximityLocationArrayInput `pulumi:"geoProximityLocations"`
	// ID of a rule you want to assign.
	Id pulumi.StringInput `pulumi:"id"`
	// Configuration block for when you add a multivalue answer rule, you configure your traffic policy to route traffic approximately randomly to your healthy resources.  Only valid for `multivalue` type. See below
	Items GetTrafficPolicyDocumentRuleItemArrayInput `pulumi:"items"`
	// Configuration block for when you add a geolocation rule, you configure your traffic policy to route your traffic based on the geographic location of your users.  Only valid for `geo` type. See below
	Locations GetTrafficPolicyDocumentRuleLocationArrayInput `pulumi:"locations"`
	// Configuration block for the settings for the rule or endpoint that you want to route traffic to whenever the corresponding resources are available. Only valid for `failover` type. See below
	Primary GetTrafficPolicyDocumentRulePrimaryPtrInput  `pulumi:"primary"`
	Regions GetTrafficPolicyDocumentRuleRegionArrayInput `pulumi:"regions"`
	// Configuration block for the rule or endpoint that you want to route traffic to whenever the primary resources are not available. Only valid for `failover` type. See below
	Secondary GetTrafficPolicyDocumentRuleSecondaryPtrInput `pulumi:"secondary"`
	// Type of the rule.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetTrafficPolicyDocumentRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRule)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleArgs) ToGetTrafficPolicyDocumentRuleOutput() GetTrafficPolicyDocumentRuleOutput {
	return i.ToGetTrafficPolicyDocumentRuleOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleArgs) ToGetTrafficPolicyDocumentRuleOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleOutput)
}

// GetTrafficPolicyDocumentRuleArrayInput is an input type that accepts GetTrafficPolicyDocumentRuleArray and GetTrafficPolicyDocumentRuleArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleArrayInput` via:
//
//	GetTrafficPolicyDocumentRuleArray{ GetTrafficPolicyDocumentRuleArgs{...} }
type GetTrafficPolicyDocumentRuleArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleArrayOutput() GetTrafficPolicyDocumentRuleArrayOutput
	ToGetTrafficPolicyDocumentRuleArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleArrayOutput
}

type GetTrafficPolicyDocumentRuleArray []GetTrafficPolicyDocumentRuleInput

func (GetTrafficPolicyDocumentRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRule)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleArray) ToGetTrafficPolicyDocumentRuleArrayOutput() GetTrafficPolicyDocumentRuleArrayOutput {
	return i.ToGetTrafficPolicyDocumentRuleArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleArray) ToGetTrafficPolicyDocumentRuleArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleArrayOutput)
}

type GetTrafficPolicyDocumentRuleOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRule)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleOutput) ToGetTrafficPolicyDocumentRuleOutput() GetTrafficPolicyDocumentRuleOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleOutput) ToGetTrafficPolicyDocumentRuleOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleOutput {
	return o
}

// Configuration block for when you add a geoproximity rule, you configure Amazon Route 53 to route traffic to your resources based on the geographic location of your resources. Only valid for `geoproximity` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) GeoProximityLocations() GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleGeoProximityLocation {
		return v.GeoProximityLocations
	}).(GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput)
}

// ID of a rule you want to assign.
func (o GetTrafficPolicyDocumentRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) string { return v.Id }).(pulumi.StringOutput)
}

// Configuration block for when you add a multivalue answer rule, you configure your traffic policy to route traffic approximately randomly to your healthy resources.  Only valid for `multivalue` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Items() GetTrafficPolicyDocumentRuleItemArrayOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleItem { return v.Items }).(GetTrafficPolicyDocumentRuleItemArrayOutput)
}

// Configuration block for when you add a geolocation rule, you configure your traffic policy to route your traffic based on the geographic location of your users.  Only valid for `geo` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Locations() GetTrafficPolicyDocumentRuleLocationArrayOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleLocation { return v.Locations }).(GetTrafficPolicyDocumentRuleLocationArrayOutput)
}

// Configuration block for the settings for the rule or endpoint that you want to route traffic to whenever the corresponding resources are available. Only valid for `failover` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Primary() GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) *GetTrafficPolicyDocumentRulePrimary { return v.Primary }).(GetTrafficPolicyDocumentRulePrimaryPtrOutput)
}

func (o GetTrafficPolicyDocumentRuleOutput) Regions() GetTrafficPolicyDocumentRuleRegionArrayOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleRegion { return v.Regions }).(GetTrafficPolicyDocumentRuleRegionArrayOutput)
}

// Configuration block for the rule or endpoint that you want to route traffic to whenever the primary resources are not available. Only valid for `failover` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Secondary() GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) *GetTrafficPolicyDocumentRuleSecondary { return v.Secondary }).(GetTrafficPolicyDocumentRuleSecondaryPtrOutput)
}

// Type of the rule.
func (o GetTrafficPolicyDocumentRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRule)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleArrayOutput) ToGetTrafficPolicyDocumentRuleArrayOutput() GetTrafficPolicyDocumentRuleArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleArrayOutput) ToGetTrafficPolicyDocumentRuleArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentRule {
		return vs[0].([]GetTrafficPolicyDocumentRule)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentRuleOutput)
}

type GetTrafficPolicyDocumentRuleGeoProximityLocation struct {
	// Specify a value for `bias` if you want to route more traffic to an endpoint from nearby endpoints (positive values) or route less traffic to an endpoint (negative values).
	Bias *string `pulumi:"bias"`
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// Represents the location south (negative) or north (positive) of the equator. Valid values are -90 degrees to 90 degrees.
	Latitude *string `pulumi:"latitude"`
	// Represents the location west (negative) or east (positive) of the prime meridian. Valid values are -180 degrees to 180 degrees.
	Longitude *string `pulumi:"longitude"`
	// If your endpoint is an AWS resource, specify the AWS Region that you created the resource in.
	Region *string `pulumi:"region"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
}

// GetTrafficPolicyDocumentRuleGeoProximityLocationInput is an input type that accepts GetTrafficPolicyDocumentRuleGeoProximityLocationArgs and GetTrafficPolicyDocumentRuleGeoProximityLocationOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleGeoProximityLocationInput` via:
//
//	GetTrafficPolicyDocumentRuleGeoProximityLocationArgs{...}
type GetTrafficPolicyDocumentRuleGeoProximityLocationInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationOutput
	ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationOutput
}

type GetTrafficPolicyDocumentRuleGeoProximityLocationArgs struct {
	// Specify a value for `bias` if you want to route more traffic to an endpoint from nearby endpoints (positive values) or route less traffic to an endpoint (negative values).
	Bias pulumi.StringPtrInput `pulumi:"bias"`
	// References to an endpoint.
	EndpointReference pulumi.StringPtrInput `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumi.BoolPtrInput `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumi.StringPtrInput `pulumi:"healthCheck"`
	// Represents the location south (negative) or north (positive) of the equator. Valid values are -90 degrees to 90 degrees.
	Latitude pulumi.StringPtrInput `pulumi:"latitude"`
	// Represents the location west (negative) or east (positive) of the prime meridian. Valid values are -180 degrees to 180 degrees.
	Longitude pulumi.StringPtrInput `pulumi:"longitude"`
	// If your endpoint is an AWS resource, specify the AWS Region that you created the resource in.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// References to a rule.
	RuleReference pulumi.StringPtrInput `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRuleGeoProximityLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleGeoProximityLocation)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleGeoProximityLocationArgs) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return i.ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleGeoProximityLocationArgs) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleGeoProximityLocationOutput)
}

// GetTrafficPolicyDocumentRuleGeoProximityLocationArrayInput is an input type that accepts GetTrafficPolicyDocumentRuleGeoProximityLocationArray and GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleGeoProximityLocationArrayInput` via:
//
//	GetTrafficPolicyDocumentRuleGeoProximityLocationArray{ GetTrafficPolicyDocumentRuleGeoProximityLocationArgs{...} }
type GetTrafficPolicyDocumentRuleGeoProximityLocationArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput
	ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput
}

type GetTrafficPolicyDocumentRuleGeoProximityLocationArray []GetTrafficPolicyDocumentRuleGeoProximityLocationInput

func (GetTrafficPolicyDocumentRuleGeoProximityLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleGeoProximityLocation)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleGeoProximityLocationArray) ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput {
	return i.ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleGeoProximityLocationArray) ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput)
}

type GetTrafficPolicyDocumentRuleGeoProximityLocationOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleGeoProximityLocation)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return o
}

// Specify a value for `bias` if you want to route more traffic to an endpoint from nearby endpoints (positive values) or route less traffic to an endpoint (negative values).
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Bias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Bias }).(pulumi.StringPtrOutput)
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *bool { return v.EvaluateTargetHealth }).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

// Represents the location south (negative) or north (positive) of the equator. Valid values are -90 degrees to 90 degrees.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Latitude }).(pulumi.StringPtrOutput)
}

// Represents the location west (negative) or east (positive) of the prime meridian. Valid values are -180 degrees to 180 degrees.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Longitude }).(pulumi.StringPtrOutput)
}

// If your endpoint is an AWS resource, specify the AWS Region that you created the resource in.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.RuleReference }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleGeoProximityLocation)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput) ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput) ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentRuleGeoProximityLocation {
		return vs[0].([]GetTrafficPolicyDocumentRuleGeoProximityLocation)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentRuleGeoProximityLocationOutput)
}

type GetTrafficPolicyDocumentRuleItem struct {
	EndpointReference *string `pulumi:"endpointReference"`
	HealthCheck       *string `pulumi:"healthCheck"`
}

// GetTrafficPolicyDocumentRuleItemInput is an input type that accepts GetTrafficPolicyDocumentRuleItemArgs and GetTrafficPolicyDocumentRuleItemOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleItemInput` via:
//
//	GetTrafficPolicyDocumentRuleItemArgs{...}
type GetTrafficPolicyDocumentRuleItemInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleItemOutput() GetTrafficPolicyDocumentRuleItemOutput
	ToGetTrafficPolicyDocumentRuleItemOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleItemOutput
}

type GetTrafficPolicyDocumentRuleItemArgs struct {
	EndpointReference pulumi.StringPtrInput `pulumi:"endpointReference"`
	HealthCheck       pulumi.StringPtrInput `pulumi:"healthCheck"`
}

func (GetTrafficPolicyDocumentRuleItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleItem)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleItemArgs) ToGetTrafficPolicyDocumentRuleItemOutput() GetTrafficPolicyDocumentRuleItemOutput {
	return i.ToGetTrafficPolicyDocumentRuleItemOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleItemArgs) ToGetTrafficPolicyDocumentRuleItemOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleItemOutput)
}

// GetTrafficPolicyDocumentRuleItemArrayInput is an input type that accepts GetTrafficPolicyDocumentRuleItemArray and GetTrafficPolicyDocumentRuleItemArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleItemArrayInput` via:
//
//	GetTrafficPolicyDocumentRuleItemArray{ GetTrafficPolicyDocumentRuleItemArgs{...} }
type GetTrafficPolicyDocumentRuleItemArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleItemArrayOutput() GetTrafficPolicyDocumentRuleItemArrayOutput
	ToGetTrafficPolicyDocumentRuleItemArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleItemArrayOutput
}

type GetTrafficPolicyDocumentRuleItemArray []GetTrafficPolicyDocumentRuleItemInput

func (GetTrafficPolicyDocumentRuleItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleItem)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleItemArray) ToGetTrafficPolicyDocumentRuleItemArrayOutput() GetTrafficPolicyDocumentRuleItemArrayOutput {
	return i.ToGetTrafficPolicyDocumentRuleItemArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleItemArray) ToGetTrafficPolicyDocumentRuleItemArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleItemArrayOutput)
}

type GetTrafficPolicyDocumentRuleItemOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleItem)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleItemOutput) ToGetTrafficPolicyDocumentRuleItemOutput() GetTrafficPolicyDocumentRuleItemOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleItemOutput) ToGetTrafficPolicyDocumentRuleItemOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleItemOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleItemOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleItem) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

func (o GetTrafficPolicyDocumentRuleItemOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleItem) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleItemArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleItem)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleItemArrayOutput) ToGetTrafficPolicyDocumentRuleItemArrayOutput() GetTrafficPolicyDocumentRuleItemArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleItemArrayOutput) ToGetTrafficPolicyDocumentRuleItemArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleItemArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleItemArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentRuleItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentRuleItem {
		return vs[0].([]GetTrafficPolicyDocumentRuleItem)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentRuleItemOutput)
}

type GetTrafficPolicyDocumentRuleLocation struct {
	// Value of a continent.
	Continent *string `pulumi:"continent"`
	// Value of a country.
	Country *string `pulumi:"country"`
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// Indicates whether this set of values represents the default location.
	IsDefault *bool `pulumi:"isDefault"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
	// Value of a subdivision.
	Subdivision *string `pulumi:"subdivision"`
}

// GetTrafficPolicyDocumentRuleLocationInput is an input type that accepts GetTrafficPolicyDocumentRuleLocationArgs and GetTrafficPolicyDocumentRuleLocationOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleLocationInput` via:
//
//	GetTrafficPolicyDocumentRuleLocationArgs{...}
type GetTrafficPolicyDocumentRuleLocationInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleLocationOutput() GetTrafficPolicyDocumentRuleLocationOutput
	ToGetTrafficPolicyDocumentRuleLocationOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleLocationOutput
}

type GetTrafficPolicyDocumentRuleLocationArgs struct {
	// Value of a continent.
	Continent pulumi.StringPtrInput `pulumi:"continent"`
	// Value of a country.
	Country pulumi.StringPtrInput `pulumi:"country"`
	// References to an endpoint.
	EndpointReference pulumi.StringPtrInput `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumi.BoolPtrInput `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumi.StringPtrInput `pulumi:"healthCheck"`
	// Indicates whether this set of values represents the default location.
	IsDefault pulumi.BoolPtrInput `pulumi:"isDefault"`
	// References to a rule.
	RuleReference pulumi.StringPtrInput `pulumi:"ruleReference"`
	// Value of a subdivision.
	Subdivision pulumi.StringPtrInput `pulumi:"subdivision"`
}

func (GetTrafficPolicyDocumentRuleLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleLocation)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleLocationArgs) ToGetTrafficPolicyDocumentRuleLocationOutput() GetTrafficPolicyDocumentRuleLocationOutput {
	return i.ToGetTrafficPolicyDocumentRuleLocationOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleLocationArgs) ToGetTrafficPolicyDocumentRuleLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleLocationOutput)
}

// GetTrafficPolicyDocumentRuleLocationArrayInput is an input type that accepts GetTrafficPolicyDocumentRuleLocationArray and GetTrafficPolicyDocumentRuleLocationArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleLocationArrayInput` via:
//
//	GetTrafficPolicyDocumentRuleLocationArray{ GetTrafficPolicyDocumentRuleLocationArgs{...} }
type GetTrafficPolicyDocumentRuleLocationArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleLocationArrayOutput() GetTrafficPolicyDocumentRuleLocationArrayOutput
	ToGetTrafficPolicyDocumentRuleLocationArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleLocationArrayOutput
}

type GetTrafficPolicyDocumentRuleLocationArray []GetTrafficPolicyDocumentRuleLocationInput

func (GetTrafficPolicyDocumentRuleLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleLocation)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleLocationArray) ToGetTrafficPolicyDocumentRuleLocationArrayOutput() GetTrafficPolicyDocumentRuleLocationArrayOutput {
	return i.ToGetTrafficPolicyDocumentRuleLocationArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleLocationArray) ToGetTrafficPolicyDocumentRuleLocationArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleLocationArrayOutput)
}

type GetTrafficPolicyDocumentRuleLocationOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleLocation)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleLocationOutput) ToGetTrafficPolicyDocumentRuleLocationOutput() GetTrafficPolicyDocumentRuleLocationOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleLocationOutput) ToGetTrafficPolicyDocumentRuleLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleLocationOutput {
	return o
}

// Value of a continent.
func (o GetTrafficPolicyDocumentRuleLocationOutput) Continent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.Continent }).(pulumi.StringPtrOutput)
}

// Value of a country.
func (o GetTrafficPolicyDocumentRuleLocationOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.Country }).(pulumi.StringPtrOutput)
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleLocationOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleLocationOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *bool { return v.EvaluateTargetHealth }).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleLocationOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

// Indicates whether this set of values represents the default location.
func (o GetTrafficPolicyDocumentRuleLocationOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleLocationOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.RuleReference }).(pulumi.StringPtrOutput)
}

// Value of a subdivision.
func (o GetTrafficPolicyDocumentRuleLocationOutput) Subdivision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.Subdivision }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleLocationArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleLocation)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleLocationArrayOutput) ToGetTrafficPolicyDocumentRuleLocationArrayOutput() GetTrafficPolicyDocumentRuleLocationArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleLocationArrayOutput) ToGetTrafficPolicyDocumentRuleLocationArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleLocationArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleLocationArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentRuleLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentRuleLocation {
		return vs[0].([]GetTrafficPolicyDocumentRuleLocation)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentRuleLocationOutput)
}

type GetTrafficPolicyDocumentRulePrimary struct {
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
}

// GetTrafficPolicyDocumentRulePrimaryInput is an input type that accepts GetTrafficPolicyDocumentRulePrimaryArgs and GetTrafficPolicyDocumentRulePrimaryOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRulePrimaryInput` via:
//
//	GetTrafficPolicyDocumentRulePrimaryArgs{...}
type GetTrafficPolicyDocumentRulePrimaryInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRulePrimaryOutput() GetTrafficPolicyDocumentRulePrimaryOutput
	ToGetTrafficPolicyDocumentRulePrimaryOutputWithContext(context.Context) GetTrafficPolicyDocumentRulePrimaryOutput
}

type GetTrafficPolicyDocumentRulePrimaryArgs struct {
	// References to an endpoint.
	EndpointReference pulumi.StringPtrInput `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumi.BoolPtrInput `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumi.StringPtrInput `pulumi:"healthCheck"`
	// References to a rule.
	RuleReference pulumi.StringPtrInput `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRulePrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRulePrimary)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRulePrimaryArgs) ToGetTrafficPolicyDocumentRulePrimaryOutput() GetTrafficPolicyDocumentRulePrimaryOutput {
	return i.ToGetTrafficPolicyDocumentRulePrimaryOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRulePrimaryArgs) ToGetTrafficPolicyDocumentRulePrimaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRulePrimaryOutput)
}

func (i GetTrafficPolicyDocumentRulePrimaryArgs) ToGetTrafficPolicyDocumentRulePrimaryPtrOutput() GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return i.ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRulePrimaryArgs) ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRulePrimaryOutput).ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(ctx)
}

// GetTrafficPolicyDocumentRulePrimaryPtrInput is an input type that accepts GetTrafficPolicyDocumentRulePrimaryArgs, GetTrafficPolicyDocumentRulePrimaryPtr and GetTrafficPolicyDocumentRulePrimaryPtrOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRulePrimaryPtrInput` via:
//
//	        GetTrafficPolicyDocumentRulePrimaryArgs{...}
//
//	or:
//
//	        nil
type GetTrafficPolicyDocumentRulePrimaryPtrInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRulePrimaryPtrOutput() GetTrafficPolicyDocumentRulePrimaryPtrOutput
	ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(context.Context) GetTrafficPolicyDocumentRulePrimaryPtrOutput
}

type getTrafficPolicyDocumentRulePrimaryPtrType GetTrafficPolicyDocumentRulePrimaryArgs

func GetTrafficPolicyDocumentRulePrimaryPtr(v *GetTrafficPolicyDocumentRulePrimaryArgs) GetTrafficPolicyDocumentRulePrimaryPtrInput {
	return (*getTrafficPolicyDocumentRulePrimaryPtrType)(v)
}

func (*getTrafficPolicyDocumentRulePrimaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTrafficPolicyDocumentRulePrimary)(nil)).Elem()
}

func (i *getTrafficPolicyDocumentRulePrimaryPtrType) ToGetTrafficPolicyDocumentRulePrimaryPtrOutput() GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return i.ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(context.Background())
}

func (i *getTrafficPolicyDocumentRulePrimaryPtrType) ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRulePrimaryPtrOutput)
}

type GetTrafficPolicyDocumentRulePrimaryOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRulePrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRulePrimary)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRulePrimaryOutput) ToGetTrafficPolicyDocumentRulePrimaryOutput() GetTrafficPolicyDocumentRulePrimaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRulePrimaryOutput) ToGetTrafficPolicyDocumentRulePrimaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRulePrimaryOutput) ToGetTrafficPolicyDocumentRulePrimaryPtrOutput() GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return o.ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(context.Background())
}

func (o GetTrafficPolicyDocumentRulePrimaryOutput) ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTrafficPolicyDocumentRulePrimary) *GetTrafficPolicyDocumentRulePrimary {
		return &v
	}).(GetTrafficPolicyDocumentRulePrimaryPtrOutput)
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRulePrimary) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRulePrimary) *bool { return v.EvaluateTargetHealth }).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRulePrimary) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRulePrimary) *string { return v.RuleReference }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRulePrimaryPtrOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRulePrimaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTrafficPolicyDocumentRulePrimary)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) ToGetTrafficPolicyDocumentRulePrimaryPtrOutput() GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return o
}

func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return o
}

func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) Elem() GetTrafficPolicyDocumentRulePrimaryOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRulePrimary) GetTrafficPolicyDocumentRulePrimary {
		if v != nil {
			return *v
		}
		var ret GetTrafficPolicyDocumentRulePrimary
		return ret
	}).(GetTrafficPolicyDocumentRulePrimaryOutput)
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRulePrimary) *string {
		if v == nil {
			return nil
		}
		return v.EndpointReference
	}).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRulePrimary) *bool {
		if v == nil {
			return nil
		}
		return v.EvaluateTargetHealth
	}).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRulePrimary) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheck
	}).(pulumi.StringPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRulePrimary) *string {
		if v == nil {
			return nil
		}
		return v.RuleReference
	}).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleRegion struct {
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// Region code for the AWS Region that you created the resource in.
	Region *string `pulumi:"region"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
}

// GetTrafficPolicyDocumentRuleRegionInput is an input type that accepts GetTrafficPolicyDocumentRuleRegionArgs and GetTrafficPolicyDocumentRuleRegionOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleRegionInput` via:
//
//	GetTrafficPolicyDocumentRuleRegionArgs{...}
type GetTrafficPolicyDocumentRuleRegionInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleRegionOutput() GetTrafficPolicyDocumentRuleRegionOutput
	ToGetTrafficPolicyDocumentRuleRegionOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleRegionOutput
}

type GetTrafficPolicyDocumentRuleRegionArgs struct {
	// References to an endpoint.
	EndpointReference pulumi.StringPtrInput `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumi.BoolPtrInput `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumi.StringPtrInput `pulumi:"healthCheck"`
	// Region code for the AWS Region that you created the resource in.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// References to a rule.
	RuleReference pulumi.StringPtrInput `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRuleRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleRegion)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleRegionArgs) ToGetTrafficPolicyDocumentRuleRegionOutput() GetTrafficPolicyDocumentRuleRegionOutput {
	return i.ToGetTrafficPolicyDocumentRuleRegionOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleRegionArgs) ToGetTrafficPolicyDocumentRuleRegionOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleRegionOutput)
}

// GetTrafficPolicyDocumentRuleRegionArrayInput is an input type that accepts GetTrafficPolicyDocumentRuleRegionArray and GetTrafficPolicyDocumentRuleRegionArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleRegionArrayInput` via:
//
//	GetTrafficPolicyDocumentRuleRegionArray{ GetTrafficPolicyDocumentRuleRegionArgs{...} }
type GetTrafficPolicyDocumentRuleRegionArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleRegionArrayOutput() GetTrafficPolicyDocumentRuleRegionArrayOutput
	ToGetTrafficPolicyDocumentRuleRegionArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleRegionArrayOutput
}

type GetTrafficPolicyDocumentRuleRegionArray []GetTrafficPolicyDocumentRuleRegionInput

func (GetTrafficPolicyDocumentRuleRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleRegion)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleRegionArray) ToGetTrafficPolicyDocumentRuleRegionArrayOutput() GetTrafficPolicyDocumentRuleRegionArrayOutput {
	return i.ToGetTrafficPolicyDocumentRuleRegionArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleRegionArray) ToGetTrafficPolicyDocumentRuleRegionArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleRegionArrayOutput)
}

type GetTrafficPolicyDocumentRuleRegionOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleRegion)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleRegionOutput) ToGetTrafficPolicyDocumentRuleRegionOutput() GetTrafficPolicyDocumentRuleRegionOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleRegionOutput) ToGetTrafficPolicyDocumentRuleRegionOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleRegionOutput {
	return o
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleRegionOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleRegionOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleRegion) *bool { return v.EvaluateTargetHealth }).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleRegionOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

// Region code for the AWS Region that you created the resource in.
func (o GetTrafficPolicyDocumentRuleRegionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleRegionOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.RuleReference }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleRegionArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleRegion)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleRegionArrayOutput) ToGetTrafficPolicyDocumentRuleRegionArrayOutput() GetTrafficPolicyDocumentRuleRegionArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleRegionArrayOutput) ToGetTrafficPolicyDocumentRuleRegionArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleRegionArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleRegionArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentRuleRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentRuleRegion {
		return vs[0].([]GetTrafficPolicyDocumentRuleRegion)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentRuleRegionOutput)
}

type GetTrafficPolicyDocumentRuleSecondary struct {
	EndpointReference    *string `pulumi:"endpointReference"`
	EvaluateTargetHealth *bool   `pulumi:"evaluateTargetHealth"`
	HealthCheck          *string `pulumi:"healthCheck"`
	RuleReference        *string `pulumi:"ruleReference"`
}

// GetTrafficPolicyDocumentRuleSecondaryInput is an input type that accepts GetTrafficPolicyDocumentRuleSecondaryArgs and GetTrafficPolicyDocumentRuleSecondaryOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleSecondaryInput` via:
//
//	GetTrafficPolicyDocumentRuleSecondaryArgs{...}
type GetTrafficPolicyDocumentRuleSecondaryInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleSecondaryOutput() GetTrafficPolicyDocumentRuleSecondaryOutput
	ToGetTrafficPolicyDocumentRuleSecondaryOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleSecondaryOutput
}

type GetTrafficPolicyDocumentRuleSecondaryArgs struct {
	EndpointReference    pulumi.StringPtrInput `pulumi:"endpointReference"`
	EvaluateTargetHealth pulumi.BoolPtrInput   `pulumi:"evaluateTargetHealth"`
	HealthCheck          pulumi.StringPtrInput `pulumi:"healthCheck"`
	RuleReference        pulumi.StringPtrInput `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRuleSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleSecondary)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleSecondaryArgs) ToGetTrafficPolicyDocumentRuleSecondaryOutput() GetTrafficPolicyDocumentRuleSecondaryOutput {
	return i.ToGetTrafficPolicyDocumentRuleSecondaryOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleSecondaryArgs) ToGetTrafficPolicyDocumentRuleSecondaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleSecondaryOutput)
}

func (i GetTrafficPolicyDocumentRuleSecondaryArgs) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutput() GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return i.ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleSecondaryArgs) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleSecondaryOutput).ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(ctx)
}

// GetTrafficPolicyDocumentRuleSecondaryPtrInput is an input type that accepts GetTrafficPolicyDocumentRuleSecondaryArgs, GetTrafficPolicyDocumentRuleSecondaryPtr and GetTrafficPolicyDocumentRuleSecondaryPtrOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleSecondaryPtrInput` via:
//
//	        GetTrafficPolicyDocumentRuleSecondaryArgs{...}
//
//	or:
//
//	        nil
type GetTrafficPolicyDocumentRuleSecondaryPtrInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleSecondaryPtrOutput() GetTrafficPolicyDocumentRuleSecondaryPtrOutput
	ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleSecondaryPtrOutput
}

type getTrafficPolicyDocumentRuleSecondaryPtrType GetTrafficPolicyDocumentRuleSecondaryArgs

func GetTrafficPolicyDocumentRuleSecondaryPtr(v *GetTrafficPolicyDocumentRuleSecondaryArgs) GetTrafficPolicyDocumentRuleSecondaryPtrInput {
	return (*getTrafficPolicyDocumentRuleSecondaryPtrType)(v)
}

func (*getTrafficPolicyDocumentRuleSecondaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTrafficPolicyDocumentRuleSecondary)(nil)).Elem()
}

func (i *getTrafficPolicyDocumentRuleSecondaryPtrType) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutput() GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return i.ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(context.Background())
}

func (i *getTrafficPolicyDocumentRuleSecondaryPtrType) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleSecondaryPtrOutput)
}

type GetTrafficPolicyDocumentRuleSecondaryOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleSecondary)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) ToGetTrafficPolicyDocumentRuleSecondaryOutput() GetTrafficPolicyDocumentRuleSecondaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) ToGetTrafficPolicyDocumentRuleSecondaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutput() GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return o.ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(context.Background())
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTrafficPolicyDocumentRuleSecondary) *GetTrafficPolicyDocumentRuleSecondary {
		return &v
	}).(GetTrafficPolicyDocumentRuleSecondaryPtrOutput)
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleSecondary) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleSecondary) *bool { return v.EvaluateTargetHealth }).(pulumi.BoolPtrOutput)
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleSecondary) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleSecondary) *string { return v.RuleReference }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleSecondaryPtrOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleSecondaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTrafficPolicyDocumentRuleSecondary)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutput() GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) Elem() GetTrafficPolicyDocumentRuleSecondaryOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRuleSecondary) GetTrafficPolicyDocumentRuleSecondary {
		if v != nil {
			return *v
		}
		var ret GetTrafficPolicyDocumentRuleSecondary
		return ret
	}).(GetTrafficPolicyDocumentRuleSecondaryOutput)
}

func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRuleSecondary) *string {
		if v == nil {
			return nil
		}
		return v.EndpointReference
	}).(pulumi.StringPtrOutput)
}

func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRuleSecondary) *bool {
		if v == nil {
			return nil
		}
		return v.EvaluateTargetHealth
	}).(pulumi.BoolPtrOutput)
}

func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRuleSecondary) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheck
	}).(pulumi.StringPtrOutput)
}

func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRuleSecondary) *string {
		if v == nil {
			return nil
		}
		return v.RuleReference
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfilesAssociationTimeoutsInput)(nil)).Elem(), ProfilesAssociationTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfilesAssociationTimeoutsPtrInput)(nil)).Elem(), ProfilesAssociationTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfilesProfileTimeoutsInput)(nil)).Elem(), ProfilesProfileTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfilesProfileTimeoutsPtrInput)(nil)).Elem(), ProfilesProfileTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfilesResourceAssociationTimeoutsInput)(nil)).Elem(), ProfilesResourceAssociationTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfilesResourceAssociationTimeoutsPtrInput)(nil)).Elem(), ProfilesResourceAssociationTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordAliasInput)(nil)).Elem(), RecordAliasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordAliasArrayInput)(nil)).Elem(), RecordAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordCidrRoutingPolicyInput)(nil)).Elem(), RecordCidrRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordCidrRoutingPolicyPtrInput)(nil)).Elem(), RecordCidrRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordFailoverRoutingPolicyInput)(nil)).Elem(), RecordFailoverRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordFailoverRoutingPolicyArrayInput)(nil)).Elem(), RecordFailoverRoutingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeolocationRoutingPolicyInput)(nil)).Elem(), RecordGeolocationRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeolocationRoutingPolicyArrayInput)(nil)).Elem(), RecordGeolocationRoutingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeoproximityRoutingPolicyInput)(nil)).Elem(), RecordGeoproximityRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeoproximityRoutingPolicyPtrInput)(nil)).Elem(), RecordGeoproximityRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeoproximityRoutingPolicyCoordinateInput)(nil)).Elem(), RecordGeoproximityRoutingPolicyCoordinateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeoproximityRoutingPolicyCoordinateArrayInput)(nil)).Elem(), RecordGeoproximityRoutingPolicyCoordinateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordLatencyRoutingPolicyInput)(nil)).Elem(), RecordLatencyRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordLatencyRoutingPolicyArrayInput)(nil)).Elem(), RecordLatencyRoutingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordWeightedRoutingPolicyInput)(nil)).Elem(), RecordWeightedRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordWeightedRoutingPolicyArrayInput)(nil)).Elem(), RecordWeightedRoutingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetArrayInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetAliasTargetInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetAliasTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetAliasTargetPtrInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetAliasTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetCidrRoutingConfigInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeolocationInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetGeolocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeolocationPtrInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetGeolocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeoproximityLocationInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetGeoproximityLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeoproximityLocationPtrInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetGeoproximityLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetResourceRecordInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetResourceRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveResourceRecordSetResourceRecordArrayInput)(nil)).Elem(), RecordsExclusiveResourceRecordSetResourceRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveTimeoutsInput)(nil)).Elem(), RecordsExclusiveTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsExclusiveTimeoutsPtrInput)(nil)).Elem(), RecordsExclusiveTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointIpAddressInput)(nil)).Elem(), ResolverEndpointIpAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointIpAddressArrayInput)(nil)).Elem(), ResolverEndpointIpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTargetIpInput)(nil)).Elem(), ResolverRuleTargetIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTargetIpArrayInput)(nil)).Elem(), ResolverRuleTargetIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneVpcInput)(nil)).Elem(), ZoneVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneVpcArrayInput)(nil)).Elem(), ZoneVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProfilesProfilesProfileInput)(nil)).Elem(), GetProfilesProfilesProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProfilesProfilesProfileArrayInput)(nil)).Elem(), GetProfilesProfilesProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQueryLogConfigFilterInput)(nil)).Elem(), GetQueryLogConfigFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQueryLogConfigFilterArrayInput)(nil)).Elem(), GetQueryLogConfigFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsResourceRecordSetInput)(nil)).Elem(), GetRecordsResourceRecordSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsResourceRecordSetArrayInput)(nil)).Elem(), GetRecordsResourceRecordSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsResourceRecordSetAliasTargetInput)(nil)).Elem(), GetRecordsResourceRecordSetAliasTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsResourceRecordSetCidrRoutingConfigInput)(nil)).Elem(), GetRecordsResourceRecordSetCidrRoutingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsResourceRecordSetGeolocationInput)(nil)).Elem(), GetRecordsResourceRecordSetGeolocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsResourceRecordSetGeoproximityLocationInput)(nil)).Elem(), GetRecordsResourceRecordSetGeoproximityLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsResourceRecordSetGeoproximityLocationCoordinatesInput)(nil)).Elem(), GetRecordsResourceRecordSetGeoproximityLocationCoordinatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsResourceRecordSetResourceRecordInput)(nil)).Elem(), GetRecordsResourceRecordSetResourceRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsResourceRecordSetResourceRecordArrayInput)(nil)).Elem(), GetRecordsResourceRecordSetResourceRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointFilterInput)(nil)).Elem(), GetResolverEndpointFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointFilterArrayInput)(nil)).Elem(), GetResolverEndpointFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverFirewallRulesFirewallRuleInput)(nil)).Elem(), GetResolverFirewallRulesFirewallRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverFirewallRulesFirewallRuleArrayInput)(nil)).Elem(), GetResolverFirewallRulesFirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentEndpointInput)(nil)).Elem(), GetTrafficPolicyDocumentEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentEndpointArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleGeoProximityLocationInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleGeoProximityLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleGeoProximityLocationArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleGeoProximityLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleItemInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleItemArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleLocationInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleLocationArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRulePrimaryInput)(nil)).Elem(), GetTrafficPolicyDocumentRulePrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRulePrimaryPtrInput)(nil)).Elem(), GetTrafficPolicyDocumentRulePrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleRegionInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleRegionArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleSecondaryInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleSecondaryPtrInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleSecondaryArgs{})
	pulumi.RegisterOutputType(ProfilesAssociationTimeoutsOutput{})
	pulumi.RegisterOutputType(ProfilesAssociationTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(ProfilesProfileTimeoutsOutput{})
	pulumi.RegisterOutputType(ProfilesProfileTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(ProfilesResourceAssociationTimeoutsOutput{})
	pulumi.RegisterOutputType(ProfilesResourceAssociationTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(RecordAliasOutput{})
	pulumi.RegisterOutputType(RecordAliasArrayOutput{})
	pulumi.RegisterOutputType(RecordCidrRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordCidrRoutingPolicyPtrOutput{})
	pulumi.RegisterOutputType(RecordFailoverRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordFailoverRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(RecordGeolocationRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordGeolocationRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(RecordGeoproximityRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordGeoproximityRoutingPolicyPtrOutput{})
	pulumi.RegisterOutputType(RecordGeoproximityRoutingPolicyCoordinateOutput{})
	pulumi.RegisterOutputType(RecordGeoproximityRoutingPolicyCoordinateArrayOutput{})
	pulumi.RegisterOutputType(RecordLatencyRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordLatencyRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(RecordWeightedRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordWeightedRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetArrayOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetAliasTargetOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetAliasTargetPtrOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetCidrRoutingConfigOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetCidrRoutingConfigPtrOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetGeolocationOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetGeolocationPtrOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetGeoproximityLocationOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetGeoproximityLocationPtrOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinatesPtrOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetResourceRecordOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveResourceRecordSetResourceRecordArrayOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveTimeoutsOutput{})
	pulumi.RegisterOutputType(RecordsExclusiveTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpAddressOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpAddressArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetIpOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetIpArrayOutput{})
	pulumi.RegisterOutputType(ZoneVpcOutput{})
	pulumi.RegisterOutputType(ZoneVpcArrayOutput{})
	pulumi.RegisterOutputType(GetProfilesProfilesProfileOutput{})
	pulumi.RegisterOutputType(GetProfilesProfilesProfileArrayOutput{})
	pulumi.RegisterOutputType(GetQueryLogConfigFilterOutput{})
	pulumi.RegisterOutputType(GetQueryLogConfigFilterArrayOutput{})
	pulumi.RegisterOutputType(GetRecordsResourceRecordSetOutput{})
	pulumi.RegisterOutputType(GetRecordsResourceRecordSetArrayOutput{})
	pulumi.RegisterOutputType(GetRecordsResourceRecordSetAliasTargetOutput{})
	pulumi.RegisterOutputType(GetRecordsResourceRecordSetCidrRoutingConfigOutput{})
	pulumi.RegisterOutputType(GetRecordsResourceRecordSetGeolocationOutput{})
	pulumi.RegisterOutputType(GetRecordsResourceRecordSetGeoproximityLocationOutput{})
	pulumi.RegisterOutputType(GetRecordsResourceRecordSetGeoproximityLocationCoordinatesOutput{})
	pulumi.RegisterOutputType(GetRecordsResourceRecordSetResourceRecordOutput{})
	pulumi.RegisterOutputType(GetRecordsResourceRecordSetResourceRecordArrayOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointFilterOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointFilterArrayOutput{})
	pulumi.RegisterOutputType(GetResolverFirewallRulesFirewallRuleOutput{})
	pulumi.RegisterOutputType(GetResolverFirewallRulesFirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentEndpointOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleGeoProximityLocationOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleItemOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleItemArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleLocationOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleLocationArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRulePrimaryOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRulePrimaryPtrOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleRegionOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleRegionArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleSecondaryOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleSecondaryPtrOutput{})
}
