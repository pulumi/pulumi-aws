// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RecordAlias struct {
	// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
	EvaluateTargetHealth bool `pulumi:"evaluateTargetHealth"`
	// DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
	Name string `pulumi:"name"`
	// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
	ZoneId string `pulumi:"zoneId"`
}

// RecordAliasInput is an input type that accepts RecordAliasArgs and RecordAliasOutput values.
// You can construct a concrete instance of `RecordAliasInput` via:
//
//	RecordAliasArgs{...}
type RecordAliasInput interface {
	pulumi.Input

	ToRecordAliasOutput() RecordAliasOutput
	ToRecordAliasOutputWithContext(context.Context) RecordAliasOutput
}

type RecordAliasArgs struct {
	// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
	EvaluateTargetHealth pulumi.BoolInput `pulumi:"evaluateTargetHealth"`
	// DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
	Name pulumi.StringInput `pulumi:"name"`
	// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (RecordAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAlias)(nil)).Elem()
}

func (i RecordAliasArgs) ToRecordAliasOutput() RecordAliasOutput {
	return i.ToRecordAliasOutputWithContext(context.Background())
}

func (i RecordAliasArgs) ToRecordAliasOutputWithContext(ctx context.Context) RecordAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAliasOutput)
}

// RecordAliasArrayInput is an input type that accepts RecordAliasArray and RecordAliasArrayOutput values.
// You can construct a concrete instance of `RecordAliasArrayInput` via:
//
//	RecordAliasArray{ RecordAliasArgs{...} }
type RecordAliasArrayInput interface {
	pulumi.Input

	ToRecordAliasArrayOutput() RecordAliasArrayOutput
	ToRecordAliasArrayOutputWithContext(context.Context) RecordAliasArrayOutput
}

type RecordAliasArray []RecordAliasInput

func (RecordAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAlias)(nil)).Elem()
}

func (i RecordAliasArray) ToRecordAliasArrayOutput() RecordAliasArrayOutput {
	return i.ToRecordAliasArrayOutputWithContext(context.Background())
}

func (i RecordAliasArray) ToRecordAliasArrayOutputWithContext(ctx context.Context) RecordAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAliasArrayOutput)
}

type RecordAliasOutput struct{ *pulumi.OutputState }

func (RecordAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAlias)(nil)).Elem()
}

func (o RecordAliasOutput) ToRecordAliasOutput() RecordAliasOutput {
	return o
}

func (o RecordAliasOutput) ToRecordAliasOutputWithContext(ctx context.Context) RecordAliasOutput {
	return o
}

// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
func (o RecordAliasOutput) EvaluateTargetHealth() pulumi.BoolOutput {
	return o.ApplyT(func(v RecordAlias) bool { return v.EvaluateTargetHealth }).(pulumi.BoolOutput)
}

// DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
func (o RecordAliasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RecordAlias) string { return v.Name }).(pulumi.StringOutput)
}

// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
func (o RecordAliasOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordAlias) string { return v.ZoneId }).(pulumi.StringOutput)
}

type RecordAliasArrayOutput struct{ *pulumi.OutputState }

func (RecordAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAlias)(nil)).Elem()
}

func (o RecordAliasArrayOutput) ToRecordAliasArrayOutput() RecordAliasArrayOutput {
	return o
}

func (o RecordAliasArrayOutput) ToRecordAliasArrayOutputWithContext(ctx context.Context) RecordAliasArrayOutput {
	return o
}

func (o RecordAliasArrayOutput) Index(i pulumi.IntInput) RecordAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordAlias {
		return vs[0].([]RecordAlias)[vs[1].(int)]
	}).(RecordAliasOutput)
}

type RecordCidrRoutingPolicy struct {
	// The CIDR collection ID. See the `route53.CidrCollection` resource for more details.
	CollectionId string `pulumi:"collectionId"`
	// The CIDR collection location name. See the `route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
	LocationName string `pulumi:"locationName"`
}

// RecordCidrRoutingPolicyInput is an input type that accepts RecordCidrRoutingPolicyArgs and RecordCidrRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordCidrRoutingPolicyInput` via:
//
//	RecordCidrRoutingPolicyArgs{...}
type RecordCidrRoutingPolicyInput interface {
	pulumi.Input

	ToRecordCidrRoutingPolicyOutput() RecordCidrRoutingPolicyOutput
	ToRecordCidrRoutingPolicyOutputWithContext(context.Context) RecordCidrRoutingPolicyOutput
}

type RecordCidrRoutingPolicyArgs struct {
	// The CIDR collection ID. See the `route53.CidrCollection` resource for more details.
	CollectionId pulumi.StringInput `pulumi:"collectionId"`
	// The CIDR collection location name. See the `route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
	LocationName pulumi.StringInput `pulumi:"locationName"`
}

func (RecordCidrRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordCidrRoutingPolicy)(nil)).Elem()
}

func (i RecordCidrRoutingPolicyArgs) ToRecordCidrRoutingPolicyOutput() RecordCidrRoutingPolicyOutput {
	return i.ToRecordCidrRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordCidrRoutingPolicyArgs) ToRecordCidrRoutingPolicyOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordCidrRoutingPolicyOutput)
}

func (i RecordCidrRoutingPolicyArgs) ToRecordCidrRoutingPolicyPtrOutput() RecordCidrRoutingPolicyPtrOutput {
	return i.ToRecordCidrRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i RecordCidrRoutingPolicyArgs) ToRecordCidrRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordCidrRoutingPolicyOutput).ToRecordCidrRoutingPolicyPtrOutputWithContext(ctx)
}

// RecordCidrRoutingPolicyPtrInput is an input type that accepts RecordCidrRoutingPolicyArgs, RecordCidrRoutingPolicyPtr and RecordCidrRoutingPolicyPtrOutput values.
// You can construct a concrete instance of `RecordCidrRoutingPolicyPtrInput` via:
//
//	        RecordCidrRoutingPolicyArgs{...}
//
//	or:
//
//	        nil
type RecordCidrRoutingPolicyPtrInput interface {
	pulumi.Input

	ToRecordCidrRoutingPolicyPtrOutput() RecordCidrRoutingPolicyPtrOutput
	ToRecordCidrRoutingPolicyPtrOutputWithContext(context.Context) RecordCidrRoutingPolicyPtrOutput
}

type recordCidrRoutingPolicyPtrType RecordCidrRoutingPolicyArgs

func RecordCidrRoutingPolicyPtr(v *RecordCidrRoutingPolicyArgs) RecordCidrRoutingPolicyPtrInput {
	return (*recordCidrRoutingPolicyPtrType)(v)
}

func (*recordCidrRoutingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordCidrRoutingPolicy)(nil)).Elem()
}

func (i *recordCidrRoutingPolicyPtrType) ToRecordCidrRoutingPolicyPtrOutput() RecordCidrRoutingPolicyPtrOutput {
	return i.ToRecordCidrRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i *recordCidrRoutingPolicyPtrType) ToRecordCidrRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordCidrRoutingPolicyPtrOutput)
}

type RecordCidrRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordCidrRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordCidrRoutingPolicy)(nil)).Elem()
}

func (o RecordCidrRoutingPolicyOutput) ToRecordCidrRoutingPolicyOutput() RecordCidrRoutingPolicyOutput {
	return o
}

func (o RecordCidrRoutingPolicyOutput) ToRecordCidrRoutingPolicyOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyOutput {
	return o
}

func (o RecordCidrRoutingPolicyOutput) ToRecordCidrRoutingPolicyPtrOutput() RecordCidrRoutingPolicyPtrOutput {
	return o.ToRecordCidrRoutingPolicyPtrOutputWithContext(context.Background())
}

func (o RecordCidrRoutingPolicyOutput) ToRecordCidrRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordCidrRoutingPolicy) *RecordCidrRoutingPolicy {
		return &v
	}).(RecordCidrRoutingPolicyPtrOutput)
}

// The CIDR collection ID. See the `route53.CidrCollection` resource for more details.
func (o RecordCidrRoutingPolicyOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordCidrRoutingPolicy) string { return v.CollectionId }).(pulumi.StringOutput)
}

// The CIDR collection location name. See the `route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
func (o RecordCidrRoutingPolicyOutput) LocationName() pulumi.StringOutput {
	return o.ApplyT(func(v RecordCidrRoutingPolicy) string { return v.LocationName }).(pulumi.StringOutput)
}

type RecordCidrRoutingPolicyPtrOutput struct{ *pulumi.OutputState }

func (RecordCidrRoutingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordCidrRoutingPolicy)(nil)).Elem()
}

func (o RecordCidrRoutingPolicyPtrOutput) ToRecordCidrRoutingPolicyPtrOutput() RecordCidrRoutingPolicyPtrOutput {
	return o
}

func (o RecordCidrRoutingPolicyPtrOutput) ToRecordCidrRoutingPolicyPtrOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyPtrOutput {
	return o
}

func (o RecordCidrRoutingPolicyPtrOutput) Elem() RecordCidrRoutingPolicyOutput {
	return o.ApplyT(func(v *RecordCidrRoutingPolicy) RecordCidrRoutingPolicy {
		if v != nil {
			return *v
		}
		var ret RecordCidrRoutingPolicy
		return ret
	}).(RecordCidrRoutingPolicyOutput)
}

// The CIDR collection ID. See the `route53.CidrCollection` resource for more details.
func (o RecordCidrRoutingPolicyPtrOutput) CollectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordCidrRoutingPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.CollectionId
	}).(pulumi.StringPtrOutput)
}

// The CIDR collection location name. See the `route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
func (o RecordCidrRoutingPolicyPtrOutput) LocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordCidrRoutingPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.LocationName
	}).(pulumi.StringPtrOutput)
}

type RecordFailoverRoutingPolicy struct {
	// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
	Type string `pulumi:"type"`
}

// RecordFailoverRoutingPolicyInput is an input type that accepts RecordFailoverRoutingPolicyArgs and RecordFailoverRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordFailoverRoutingPolicyInput` via:
//
//	RecordFailoverRoutingPolicyArgs{...}
type RecordFailoverRoutingPolicyInput interface {
	pulumi.Input

	ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput
	ToRecordFailoverRoutingPolicyOutputWithContext(context.Context) RecordFailoverRoutingPolicyOutput
}

type RecordFailoverRoutingPolicyArgs struct {
	// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
	Type pulumi.StringInput `pulumi:"type"`
}

func (RecordFailoverRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (i RecordFailoverRoutingPolicyArgs) ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput {
	return i.ToRecordFailoverRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordFailoverRoutingPolicyArgs) ToRecordFailoverRoutingPolicyOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFailoverRoutingPolicyOutput)
}

// RecordFailoverRoutingPolicyArrayInput is an input type that accepts RecordFailoverRoutingPolicyArray and RecordFailoverRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordFailoverRoutingPolicyArrayInput` via:
//
//	RecordFailoverRoutingPolicyArray{ RecordFailoverRoutingPolicyArgs{...} }
type RecordFailoverRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput
	ToRecordFailoverRoutingPolicyArrayOutputWithContext(context.Context) RecordFailoverRoutingPolicyArrayOutput
}

type RecordFailoverRoutingPolicyArray []RecordFailoverRoutingPolicyInput

func (RecordFailoverRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (i RecordFailoverRoutingPolicyArray) ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput {
	return i.ToRecordFailoverRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordFailoverRoutingPolicyArray) ToRecordFailoverRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFailoverRoutingPolicyArrayOutput)
}

type RecordFailoverRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordFailoverRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (o RecordFailoverRoutingPolicyOutput) ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput {
	return o
}

func (o RecordFailoverRoutingPolicyOutput) ToRecordFailoverRoutingPolicyOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyOutput {
	return o
}

// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
func (o RecordFailoverRoutingPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecordFailoverRoutingPolicy) string { return v.Type }).(pulumi.StringOutput)
}

type RecordFailoverRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordFailoverRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (o RecordFailoverRoutingPolicyArrayOutput) ToRecordFailoverRoutingPolicyArrayOutput() RecordFailoverRoutingPolicyArrayOutput {
	return o
}

func (o RecordFailoverRoutingPolicyArrayOutput) ToRecordFailoverRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyArrayOutput {
	return o
}

func (o RecordFailoverRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordFailoverRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordFailoverRoutingPolicy {
		return vs[0].([]RecordFailoverRoutingPolicy)[vs[1].(int)]
	}).(RecordFailoverRoutingPolicyOutput)
}

type RecordGeolocationRoutingPolicy struct {
	// A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
	Continent *string `pulumi:"continent"`
	// A two-character country code or `*` to indicate a default resource record set.
	Country *string `pulumi:"country"`
	// A subdivision code for a country.
	Subdivision *string `pulumi:"subdivision"`
}

// RecordGeolocationRoutingPolicyInput is an input type that accepts RecordGeolocationRoutingPolicyArgs and RecordGeolocationRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordGeolocationRoutingPolicyInput` via:
//
//	RecordGeolocationRoutingPolicyArgs{...}
type RecordGeolocationRoutingPolicyInput interface {
	pulumi.Input

	ToRecordGeolocationRoutingPolicyOutput() RecordGeolocationRoutingPolicyOutput
	ToRecordGeolocationRoutingPolicyOutputWithContext(context.Context) RecordGeolocationRoutingPolicyOutput
}

type RecordGeolocationRoutingPolicyArgs struct {
	// A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
	Continent pulumi.StringPtrInput `pulumi:"continent"`
	// A two-character country code or `*` to indicate a default resource record set.
	Country pulumi.StringPtrInput `pulumi:"country"`
	// A subdivision code for a country.
	Subdivision pulumi.StringPtrInput `pulumi:"subdivision"`
}

func (RecordGeolocationRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (i RecordGeolocationRoutingPolicyArgs) ToRecordGeolocationRoutingPolicyOutput() RecordGeolocationRoutingPolicyOutput {
	return i.ToRecordGeolocationRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordGeolocationRoutingPolicyArgs) ToRecordGeolocationRoutingPolicyOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeolocationRoutingPolicyOutput)
}

// RecordGeolocationRoutingPolicyArrayInput is an input type that accepts RecordGeolocationRoutingPolicyArray and RecordGeolocationRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordGeolocationRoutingPolicyArrayInput` via:
//
//	RecordGeolocationRoutingPolicyArray{ RecordGeolocationRoutingPolicyArgs{...} }
type RecordGeolocationRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordGeolocationRoutingPolicyArrayOutput() RecordGeolocationRoutingPolicyArrayOutput
	ToRecordGeolocationRoutingPolicyArrayOutputWithContext(context.Context) RecordGeolocationRoutingPolicyArrayOutput
}

type RecordGeolocationRoutingPolicyArray []RecordGeolocationRoutingPolicyInput

func (RecordGeolocationRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (i RecordGeolocationRoutingPolicyArray) ToRecordGeolocationRoutingPolicyArrayOutput() RecordGeolocationRoutingPolicyArrayOutput {
	return i.ToRecordGeolocationRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordGeolocationRoutingPolicyArray) ToRecordGeolocationRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeolocationRoutingPolicyArrayOutput)
}

type RecordGeolocationRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordGeolocationRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (o RecordGeolocationRoutingPolicyOutput) ToRecordGeolocationRoutingPolicyOutput() RecordGeolocationRoutingPolicyOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyOutput) ToRecordGeolocationRoutingPolicyOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyOutput {
	return o
}

// A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
func (o RecordGeolocationRoutingPolicyOutput) Continent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordGeolocationRoutingPolicy) *string { return v.Continent }).(pulumi.StringPtrOutput)
}

// A two-character country code or `*` to indicate a default resource record set.
func (o RecordGeolocationRoutingPolicyOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordGeolocationRoutingPolicy) *string { return v.Country }).(pulumi.StringPtrOutput)
}

// A subdivision code for a country.
func (o RecordGeolocationRoutingPolicyOutput) Subdivision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordGeolocationRoutingPolicy) *string { return v.Subdivision }).(pulumi.StringPtrOutput)
}

type RecordGeolocationRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordGeolocationRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (o RecordGeolocationRoutingPolicyArrayOutput) ToRecordGeolocationRoutingPolicyArrayOutput() RecordGeolocationRoutingPolicyArrayOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyArrayOutput) ToRecordGeolocationRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyArrayOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordGeolocationRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordGeolocationRoutingPolicy {
		return vs[0].([]RecordGeolocationRoutingPolicy)[vs[1].(int)]
	}).(RecordGeolocationRoutingPolicyOutput)
}

type RecordLatencyRoutingPolicy struct {
	// An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
	Region string `pulumi:"region"`
}

// RecordLatencyRoutingPolicyInput is an input type that accepts RecordLatencyRoutingPolicyArgs and RecordLatencyRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordLatencyRoutingPolicyInput` via:
//
//	RecordLatencyRoutingPolicyArgs{...}
type RecordLatencyRoutingPolicyInput interface {
	pulumi.Input

	ToRecordLatencyRoutingPolicyOutput() RecordLatencyRoutingPolicyOutput
	ToRecordLatencyRoutingPolicyOutputWithContext(context.Context) RecordLatencyRoutingPolicyOutput
}

type RecordLatencyRoutingPolicyArgs struct {
	// An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
	Region pulumi.StringInput `pulumi:"region"`
}

func (RecordLatencyRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (i RecordLatencyRoutingPolicyArgs) ToRecordLatencyRoutingPolicyOutput() RecordLatencyRoutingPolicyOutput {
	return i.ToRecordLatencyRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordLatencyRoutingPolicyArgs) ToRecordLatencyRoutingPolicyOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordLatencyRoutingPolicyOutput)
}

// RecordLatencyRoutingPolicyArrayInput is an input type that accepts RecordLatencyRoutingPolicyArray and RecordLatencyRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordLatencyRoutingPolicyArrayInput` via:
//
//	RecordLatencyRoutingPolicyArray{ RecordLatencyRoutingPolicyArgs{...} }
type RecordLatencyRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordLatencyRoutingPolicyArrayOutput() RecordLatencyRoutingPolicyArrayOutput
	ToRecordLatencyRoutingPolicyArrayOutputWithContext(context.Context) RecordLatencyRoutingPolicyArrayOutput
}

type RecordLatencyRoutingPolicyArray []RecordLatencyRoutingPolicyInput

func (RecordLatencyRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (i RecordLatencyRoutingPolicyArray) ToRecordLatencyRoutingPolicyArrayOutput() RecordLatencyRoutingPolicyArrayOutput {
	return i.ToRecordLatencyRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordLatencyRoutingPolicyArray) ToRecordLatencyRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordLatencyRoutingPolicyArrayOutput)
}

type RecordLatencyRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordLatencyRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (o RecordLatencyRoutingPolicyOutput) ToRecordLatencyRoutingPolicyOutput() RecordLatencyRoutingPolicyOutput {
	return o
}

func (o RecordLatencyRoutingPolicyOutput) ToRecordLatencyRoutingPolicyOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyOutput {
	return o
}

// An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
func (o RecordLatencyRoutingPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v RecordLatencyRoutingPolicy) string { return v.Region }).(pulumi.StringOutput)
}

type RecordLatencyRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordLatencyRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (o RecordLatencyRoutingPolicyArrayOutput) ToRecordLatencyRoutingPolicyArrayOutput() RecordLatencyRoutingPolicyArrayOutput {
	return o
}

func (o RecordLatencyRoutingPolicyArrayOutput) ToRecordLatencyRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyArrayOutput {
	return o
}

func (o RecordLatencyRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordLatencyRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordLatencyRoutingPolicy {
		return vs[0].([]RecordLatencyRoutingPolicy)[vs[1].(int)]
	}).(RecordLatencyRoutingPolicyOutput)
}

type RecordWeightedRoutingPolicy struct {
	// A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
	Weight int `pulumi:"weight"`
}

// RecordWeightedRoutingPolicyInput is an input type that accepts RecordWeightedRoutingPolicyArgs and RecordWeightedRoutingPolicyOutput values.
// You can construct a concrete instance of `RecordWeightedRoutingPolicyInput` via:
//
//	RecordWeightedRoutingPolicyArgs{...}
type RecordWeightedRoutingPolicyInput interface {
	pulumi.Input

	ToRecordWeightedRoutingPolicyOutput() RecordWeightedRoutingPolicyOutput
	ToRecordWeightedRoutingPolicyOutputWithContext(context.Context) RecordWeightedRoutingPolicyOutput
}

type RecordWeightedRoutingPolicyArgs struct {
	// A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RecordWeightedRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (i RecordWeightedRoutingPolicyArgs) ToRecordWeightedRoutingPolicyOutput() RecordWeightedRoutingPolicyOutput {
	return i.ToRecordWeightedRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordWeightedRoutingPolicyArgs) ToRecordWeightedRoutingPolicyOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightedRoutingPolicyOutput)
}

// RecordWeightedRoutingPolicyArrayInput is an input type that accepts RecordWeightedRoutingPolicyArray and RecordWeightedRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `RecordWeightedRoutingPolicyArrayInput` via:
//
//	RecordWeightedRoutingPolicyArray{ RecordWeightedRoutingPolicyArgs{...} }
type RecordWeightedRoutingPolicyArrayInput interface {
	pulumi.Input

	ToRecordWeightedRoutingPolicyArrayOutput() RecordWeightedRoutingPolicyArrayOutput
	ToRecordWeightedRoutingPolicyArrayOutputWithContext(context.Context) RecordWeightedRoutingPolicyArrayOutput
}

type RecordWeightedRoutingPolicyArray []RecordWeightedRoutingPolicyInput

func (RecordWeightedRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (i RecordWeightedRoutingPolicyArray) ToRecordWeightedRoutingPolicyArrayOutput() RecordWeightedRoutingPolicyArrayOutput {
	return i.ToRecordWeightedRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i RecordWeightedRoutingPolicyArray) ToRecordWeightedRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightedRoutingPolicyArrayOutput)
}

type RecordWeightedRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordWeightedRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (o RecordWeightedRoutingPolicyOutput) ToRecordWeightedRoutingPolicyOutput() RecordWeightedRoutingPolicyOutput {
	return o
}

func (o RecordWeightedRoutingPolicyOutput) ToRecordWeightedRoutingPolicyOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyOutput {
	return o
}

// A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
func (o RecordWeightedRoutingPolicyOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RecordWeightedRoutingPolicy) int { return v.Weight }).(pulumi.IntOutput)
}

type RecordWeightedRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (RecordWeightedRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (o RecordWeightedRoutingPolicyArrayOutput) ToRecordWeightedRoutingPolicyArrayOutput() RecordWeightedRoutingPolicyArrayOutput {
	return o
}

func (o RecordWeightedRoutingPolicyArrayOutput) ToRecordWeightedRoutingPolicyArrayOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyArrayOutput {
	return o
}

func (o RecordWeightedRoutingPolicyArrayOutput) Index(i pulumi.IntInput) RecordWeightedRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordWeightedRoutingPolicy {
		return vs[0].([]RecordWeightedRoutingPolicy)[vs[1].(int)]
	}).(RecordWeightedRoutingPolicyOutput)
}

type ResolverEndpointIpAddress struct {
	// The IP address in the subnet that you want to use for DNS queries.
	Ip   *string `pulumi:"ip"`
	IpId *string `pulumi:"ipId"`
	// The ID of the subnet that contains the IP address.
	SubnetId string `pulumi:"subnetId"`
}

// ResolverEndpointIpAddressInput is an input type that accepts ResolverEndpointIpAddressArgs and ResolverEndpointIpAddressOutput values.
// You can construct a concrete instance of `ResolverEndpointIpAddressInput` via:
//
//	ResolverEndpointIpAddressArgs{...}
type ResolverEndpointIpAddressInput interface {
	pulumi.Input

	ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput
	ToResolverEndpointIpAddressOutputWithContext(context.Context) ResolverEndpointIpAddressOutput
}

type ResolverEndpointIpAddressArgs struct {
	// The IP address in the subnet that you want to use for DNS queries.
	Ip   pulumi.StringPtrInput `pulumi:"ip"`
	IpId pulumi.StringPtrInput `pulumi:"ipId"`
	// The ID of the subnet that contains the IP address.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (ResolverEndpointIpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddress)(nil)).Elem()
}

func (i ResolverEndpointIpAddressArgs) ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput {
	return i.ToResolverEndpointIpAddressOutputWithContext(context.Background())
}

func (i ResolverEndpointIpAddressArgs) ToResolverEndpointIpAddressOutputWithContext(ctx context.Context) ResolverEndpointIpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpAddressOutput)
}

// ResolverEndpointIpAddressArrayInput is an input type that accepts ResolverEndpointIpAddressArray and ResolverEndpointIpAddressArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointIpAddressArrayInput` via:
//
//	ResolverEndpointIpAddressArray{ ResolverEndpointIpAddressArgs{...} }
type ResolverEndpointIpAddressArrayInput interface {
	pulumi.Input

	ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput
	ToResolverEndpointIpAddressArrayOutputWithContext(context.Context) ResolverEndpointIpAddressArrayOutput
}

type ResolverEndpointIpAddressArray []ResolverEndpointIpAddressInput

func (ResolverEndpointIpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpAddress)(nil)).Elem()
}

func (i ResolverEndpointIpAddressArray) ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput {
	return i.ToResolverEndpointIpAddressArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointIpAddressArray) ToResolverEndpointIpAddressArrayOutputWithContext(ctx context.Context) ResolverEndpointIpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpAddressArrayOutput)
}

type ResolverEndpointIpAddressOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddress)(nil)).Elem()
}

func (o ResolverEndpointIpAddressOutput) ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput {
	return o
}

func (o ResolverEndpointIpAddressOutput) ToResolverEndpointIpAddressOutputWithContext(ctx context.Context) ResolverEndpointIpAddressOutput {
	return o
}

// The IP address in the subnet that you want to use for DNS queries.
func (o ResolverEndpointIpAddressOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddress) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o ResolverEndpointIpAddressOutput) IpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddress) *string { return v.IpId }).(pulumi.StringPtrOutput)
}

// The ID of the subnet that contains the IP address.
func (o ResolverEndpointIpAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ResolverEndpointIpAddressArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpAddress)(nil)).Elem()
}

func (o ResolverEndpointIpAddressArrayOutput) ToResolverEndpointIpAddressArrayOutput() ResolverEndpointIpAddressArrayOutput {
	return o
}

func (o ResolverEndpointIpAddressArrayOutput) ToResolverEndpointIpAddressArrayOutputWithContext(ctx context.Context) ResolverEndpointIpAddressArrayOutput {
	return o
}

func (o ResolverEndpointIpAddressArrayOutput) Index(i pulumi.IntInput) ResolverEndpointIpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointIpAddress {
		return vs[0].([]ResolverEndpointIpAddress)[vs[1].(int)]
	}).(ResolverEndpointIpAddressOutput)
}

type ResolverRuleTargetIp struct {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	Ip string `pulumi:"ip"`
	// The port at `ip` that you want to forward DNS queries to. Default value is `53`
	Port *int `pulumi:"port"`
}

// ResolverRuleTargetIpInput is an input type that accepts ResolverRuleTargetIpArgs and ResolverRuleTargetIpOutput values.
// You can construct a concrete instance of `ResolverRuleTargetIpInput` via:
//
//	ResolverRuleTargetIpArgs{...}
type ResolverRuleTargetIpInput interface {
	pulumi.Input

	ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput
	ToResolverRuleTargetIpOutputWithContext(context.Context) ResolverRuleTargetIpOutput
}

type ResolverRuleTargetIpArgs struct {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The port at `ip` that you want to forward DNS queries to. Default value is `53`
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ResolverRuleTargetIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetIp)(nil)).Elem()
}

func (i ResolverRuleTargetIpArgs) ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput {
	return i.ToResolverRuleTargetIpOutputWithContext(context.Background())
}

func (i ResolverRuleTargetIpArgs) ToResolverRuleTargetIpOutputWithContext(ctx context.Context) ResolverRuleTargetIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetIpOutput)
}

// ResolverRuleTargetIpArrayInput is an input type that accepts ResolverRuleTargetIpArray and ResolverRuleTargetIpArrayOutput values.
// You can construct a concrete instance of `ResolverRuleTargetIpArrayInput` via:
//
//	ResolverRuleTargetIpArray{ ResolverRuleTargetIpArgs{...} }
type ResolverRuleTargetIpArrayInput interface {
	pulumi.Input

	ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput
	ToResolverRuleTargetIpArrayOutputWithContext(context.Context) ResolverRuleTargetIpArrayOutput
}

type ResolverRuleTargetIpArray []ResolverRuleTargetIpInput

func (ResolverRuleTargetIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetIp)(nil)).Elem()
}

func (i ResolverRuleTargetIpArray) ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput {
	return i.ToResolverRuleTargetIpArrayOutputWithContext(context.Background())
}

func (i ResolverRuleTargetIpArray) ToResolverRuleTargetIpArrayOutputWithContext(ctx context.Context) ResolverRuleTargetIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetIpArrayOutput)
}

type ResolverRuleTargetIpOutput struct{ *pulumi.OutputState }

func (ResolverRuleTargetIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetIp)(nil)).Elem()
}

func (o ResolverRuleTargetIpOutput) ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput {
	return o
}

func (o ResolverRuleTargetIpOutput) ToResolverRuleTargetIpOutputWithContext(ctx context.Context) ResolverRuleTargetIpOutput {
	return o
}

// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
func (o ResolverRuleTargetIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRuleTargetIp) string { return v.Ip }).(pulumi.StringOutput)
}

// The port at `ip` that you want to forward DNS queries to. Default value is `53`
func (o ResolverRuleTargetIpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetIp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ResolverRuleTargetIpArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleTargetIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetIp)(nil)).Elem()
}

func (o ResolverRuleTargetIpArrayOutput) ToResolverRuleTargetIpArrayOutput() ResolverRuleTargetIpArrayOutput {
	return o
}

func (o ResolverRuleTargetIpArrayOutput) ToResolverRuleTargetIpArrayOutputWithContext(ctx context.Context) ResolverRuleTargetIpArrayOutput {
	return o
}

func (o ResolverRuleTargetIpArrayOutput) Index(i pulumi.IntInput) ResolverRuleTargetIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRuleTargetIp {
		return vs[0].([]ResolverRuleTargetIp)[vs[1].(int)]
	}).(ResolverRuleTargetIpOutput)
}

type ZoneVpc struct {
	// ID of the VPC to associate.
	VpcId string `pulumi:"vpcId"`
	// Region of the VPC to associate. Defaults to AWS provider region.
	VpcRegion *string `pulumi:"vpcRegion"`
}

// ZoneVpcInput is an input type that accepts ZoneVpcArgs and ZoneVpcOutput values.
// You can construct a concrete instance of `ZoneVpcInput` via:
//
//	ZoneVpcArgs{...}
type ZoneVpcInput interface {
	pulumi.Input

	ToZoneVpcOutput() ZoneVpcOutput
	ToZoneVpcOutputWithContext(context.Context) ZoneVpcOutput
}

type ZoneVpcArgs struct {
	// ID of the VPC to associate.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// Region of the VPC to associate. Defaults to AWS provider region.
	VpcRegion pulumi.StringPtrInput `pulumi:"vpcRegion"`
}

func (ZoneVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneVpc)(nil)).Elem()
}

func (i ZoneVpcArgs) ToZoneVpcOutput() ZoneVpcOutput {
	return i.ToZoneVpcOutputWithContext(context.Background())
}

func (i ZoneVpcArgs) ToZoneVpcOutputWithContext(ctx context.Context) ZoneVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneVpcOutput)
}

// ZoneVpcArrayInput is an input type that accepts ZoneVpcArray and ZoneVpcArrayOutput values.
// You can construct a concrete instance of `ZoneVpcArrayInput` via:
//
//	ZoneVpcArray{ ZoneVpcArgs{...} }
type ZoneVpcArrayInput interface {
	pulumi.Input

	ToZoneVpcArrayOutput() ZoneVpcArrayOutput
	ToZoneVpcArrayOutputWithContext(context.Context) ZoneVpcArrayOutput
}

type ZoneVpcArray []ZoneVpcInput

func (ZoneVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneVpc)(nil)).Elem()
}

func (i ZoneVpcArray) ToZoneVpcArrayOutput() ZoneVpcArrayOutput {
	return i.ToZoneVpcArrayOutputWithContext(context.Background())
}

func (i ZoneVpcArray) ToZoneVpcArrayOutputWithContext(ctx context.Context) ZoneVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneVpcArrayOutput)
}

type ZoneVpcOutput struct{ *pulumi.OutputState }

func (ZoneVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneVpc)(nil)).Elem()
}

func (o ZoneVpcOutput) ToZoneVpcOutput() ZoneVpcOutput {
	return o
}

func (o ZoneVpcOutput) ToZoneVpcOutputWithContext(ctx context.Context) ZoneVpcOutput {
	return o
}

// ID of the VPC to associate.
func (o ZoneVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

// Region of the VPC to associate. Defaults to AWS provider region.
func (o ZoneVpcOutput) VpcRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZoneVpc) *string { return v.VpcRegion }).(pulumi.StringPtrOutput)
}

type ZoneVpcArrayOutput struct{ *pulumi.OutputState }

func (ZoneVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneVpc)(nil)).Elem()
}

func (o ZoneVpcArrayOutput) ToZoneVpcArrayOutput() ZoneVpcArrayOutput {
	return o
}

func (o ZoneVpcArrayOutput) ToZoneVpcArrayOutputWithContext(ctx context.Context) ZoneVpcArrayOutput {
	return o
}

func (o ZoneVpcArrayOutput) Index(i pulumi.IntInput) ZoneVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZoneVpc {
		return vs[0].([]ZoneVpc)[vs[1].(int)]
	}).(ZoneVpcOutput)
}

type GetQueryLogConfigFilter struct {
	// The name of the query logging configuration.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// GetQueryLogConfigFilterInput is an input type that accepts GetQueryLogConfigFilterArgs and GetQueryLogConfigFilterOutput values.
// You can construct a concrete instance of `GetQueryLogConfigFilterInput` via:
//
//	GetQueryLogConfigFilterArgs{...}
type GetQueryLogConfigFilterInput interface {
	pulumi.Input

	ToGetQueryLogConfigFilterOutput() GetQueryLogConfigFilterOutput
	ToGetQueryLogConfigFilterOutputWithContext(context.Context) GetQueryLogConfigFilterOutput
}

type GetQueryLogConfigFilterArgs struct {
	// The name of the query logging configuration.
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetQueryLogConfigFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryLogConfigFilter)(nil)).Elem()
}

func (i GetQueryLogConfigFilterArgs) ToGetQueryLogConfigFilterOutput() GetQueryLogConfigFilterOutput {
	return i.ToGetQueryLogConfigFilterOutputWithContext(context.Background())
}

func (i GetQueryLogConfigFilterArgs) ToGetQueryLogConfigFilterOutputWithContext(ctx context.Context) GetQueryLogConfigFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueryLogConfigFilterOutput)
}

// GetQueryLogConfigFilterArrayInput is an input type that accepts GetQueryLogConfigFilterArray and GetQueryLogConfigFilterArrayOutput values.
// You can construct a concrete instance of `GetQueryLogConfigFilterArrayInput` via:
//
//	GetQueryLogConfigFilterArray{ GetQueryLogConfigFilterArgs{...} }
type GetQueryLogConfigFilterArrayInput interface {
	pulumi.Input

	ToGetQueryLogConfigFilterArrayOutput() GetQueryLogConfigFilterArrayOutput
	ToGetQueryLogConfigFilterArrayOutputWithContext(context.Context) GetQueryLogConfigFilterArrayOutput
}

type GetQueryLogConfigFilterArray []GetQueryLogConfigFilterInput

func (GetQueryLogConfigFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQueryLogConfigFilter)(nil)).Elem()
}

func (i GetQueryLogConfigFilterArray) ToGetQueryLogConfigFilterArrayOutput() GetQueryLogConfigFilterArrayOutput {
	return i.ToGetQueryLogConfigFilterArrayOutputWithContext(context.Background())
}

func (i GetQueryLogConfigFilterArray) ToGetQueryLogConfigFilterArrayOutputWithContext(ctx context.Context) GetQueryLogConfigFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueryLogConfigFilterArrayOutput)
}

type GetQueryLogConfigFilterOutput struct{ *pulumi.OutputState }

func (GetQueryLogConfigFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryLogConfigFilter)(nil)).Elem()
}

func (o GetQueryLogConfigFilterOutput) ToGetQueryLogConfigFilterOutput() GetQueryLogConfigFilterOutput {
	return o
}

func (o GetQueryLogConfigFilterOutput) ToGetQueryLogConfigFilterOutputWithContext(ctx context.Context) GetQueryLogConfigFilterOutput {
	return o
}

// The name of the query logging configuration.
func (o GetQueryLogConfigFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetQueryLogConfigFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetQueryLogConfigFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetQueryLogConfigFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetQueryLogConfigFilterArrayOutput struct{ *pulumi.OutputState }

func (GetQueryLogConfigFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQueryLogConfigFilter)(nil)).Elem()
}

func (o GetQueryLogConfigFilterArrayOutput) ToGetQueryLogConfigFilterArrayOutput() GetQueryLogConfigFilterArrayOutput {
	return o
}

func (o GetQueryLogConfigFilterArrayOutput) ToGetQueryLogConfigFilterArrayOutputWithContext(ctx context.Context) GetQueryLogConfigFilterArrayOutput {
	return o
}

func (o GetQueryLogConfigFilterArrayOutput) Index(i pulumi.IntInput) GetQueryLogConfigFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQueryLogConfigFilter {
		return vs[0].([]GetQueryLogConfigFilter)[vs[1].(int)]
	}).(GetQueryLogConfigFilterOutput)
}

type GetResolverEndpointFilter struct {
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// GetResolverEndpointFilterInput is an input type that accepts GetResolverEndpointFilterArgs and GetResolverEndpointFilterOutput values.
// You can construct a concrete instance of `GetResolverEndpointFilterInput` via:
//
//	GetResolverEndpointFilterArgs{...}
type GetResolverEndpointFilterInput interface {
	pulumi.Input

	ToGetResolverEndpointFilterOutput() GetResolverEndpointFilterOutput
	ToGetResolverEndpointFilterOutputWithContext(context.Context) GetResolverEndpointFilterOutput
}

type GetResolverEndpointFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetResolverEndpointFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointFilter)(nil)).Elem()
}

func (i GetResolverEndpointFilterArgs) ToGetResolverEndpointFilterOutput() GetResolverEndpointFilterOutput {
	return i.ToGetResolverEndpointFilterOutputWithContext(context.Background())
}

func (i GetResolverEndpointFilterArgs) ToGetResolverEndpointFilterOutputWithContext(ctx context.Context) GetResolverEndpointFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointFilterOutput)
}

// GetResolverEndpointFilterArrayInput is an input type that accepts GetResolverEndpointFilterArray and GetResolverEndpointFilterArrayOutput values.
// You can construct a concrete instance of `GetResolverEndpointFilterArrayInput` via:
//
//	GetResolverEndpointFilterArray{ GetResolverEndpointFilterArgs{...} }
type GetResolverEndpointFilterArrayInput interface {
	pulumi.Input

	ToGetResolverEndpointFilterArrayOutput() GetResolverEndpointFilterArrayOutput
	ToGetResolverEndpointFilterArrayOutputWithContext(context.Context) GetResolverEndpointFilterArrayOutput
}

type GetResolverEndpointFilterArray []GetResolverEndpointFilterInput

func (GetResolverEndpointFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointFilter)(nil)).Elem()
}

func (i GetResolverEndpointFilterArray) ToGetResolverEndpointFilterArrayOutput() GetResolverEndpointFilterArrayOutput {
	return i.ToGetResolverEndpointFilterArrayOutputWithContext(context.Background())
}

func (i GetResolverEndpointFilterArray) ToGetResolverEndpointFilterArrayOutputWithContext(ctx context.Context) GetResolverEndpointFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointFilterArrayOutput)
}

type GetResolverEndpointFilterOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointFilter)(nil)).Elem()
}

func (o GetResolverEndpointFilterOutput) ToGetResolverEndpointFilterOutput() GetResolverEndpointFilterOutput {
	return o
}

func (o GetResolverEndpointFilterOutput) ToGetResolverEndpointFilterOutputWithContext(ctx context.Context) GetResolverEndpointFilterOutput {
	return o
}

func (o GetResolverEndpointFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetResolverEndpointFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetResolverEndpointFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetResolverEndpointFilterArrayOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointFilter)(nil)).Elem()
}

func (o GetResolverEndpointFilterArrayOutput) ToGetResolverEndpointFilterArrayOutput() GetResolverEndpointFilterArrayOutput {
	return o
}

func (o GetResolverEndpointFilterArrayOutput) ToGetResolverEndpointFilterArrayOutputWithContext(ctx context.Context) GetResolverEndpointFilterArrayOutput {
	return o
}

func (o GetResolverEndpointFilterArrayOutput) Index(i pulumi.IntInput) GetResolverEndpointFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverEndpointFilter {
		return vs[0].([]GetResolverEndpointFilter)[vs[1].(int)]
	}).(GetResolverEndpointFilterOutput)
}

type GetResolverFirewallRulesFirewallRule struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
	Action string `pulumi:"action"`
	// The DNS record's type.
	BlockOverrideDnsType string `pulumi:"blockOverrideDnsType"`
	// The custom DNS record to send back in response to the query.
	BlockOverrideDomain string `pulumi:"blockOverrideDomain"`
	// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record.
	BlockOverrideTtl int `pulumi:"blockOverrideTtl"`
	// The way that you want DNS Firewall to block the request.
	BlockResponse string `pulumi:"blockResponse"`
	// The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC).
	CreationTime string `pulumi:"creationTime"`
	// A unique string defined by you to identify the request.
	CreatorRequestId string `pulumi:"creatorRequestId"`
	// The ID of the domain list that's used in the rule.
	FirewallDomainListId string `pulumi:"firewallDomainListId"`
	// The unique identifier of the firewall rule group that you want to retrieve the rules for.
	FirewallRuleGroupId string `pulumi:"firewallRuleGroupId"`
	// The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).
	ModificationTime string `pulumi:"modificationTime"`
	// The name of the rule.
	Name string `pulumi:"name"`
	// The setting that determines the processing order of the rules in a rule group.
	Priority int `pulumi:"priority"`
}

// GetResolverFirewallRulesFirewallRuleInput is an input type that accepts GetResolverFirewallRulesFirewallRuleArgs and GetResolverFirewallRulesFirewallRuleOutput values.
// You can construct a concrete instance of `GetResolverFirewallRulesFirewallRuleInput` via:
//
//	GetResolverFirewallRulesFirewallRuleArgs{...}
type GetResolverFirewallRulesFirewallRuleInput interface {
	pulumi.Input

	ToGetResolverFirewallRulesFirewallRuleOutput() GetResolverFirewallRulesFirewallRuleOutput
	ToGetResolverFirewallRulesFirewallRuleOutputWithContext(context.Context) GetResolverFirewallRulesFirewallRuleOutput
}

type GetResolverFirewallRulesFirewallRuleArgs struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
	Action pulumi.StringInput `pulumi:"action"`
	// The DNS record's type.
	BlockOverrideDnsType pulumi.StringInput `pulumi:"blockOverrideDnsType"`
	// The custom DNS record to send back in response to the query.
	BlockOverrideDomain pulumi.StringInput `pulumi:"blockOverrideDomain"`
	// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record.
	BlockOverrideTtl pulumi.IntInput `pulumi:"blockOverrideTtl"`
	// The way that you want DNS Firewall to block the request.
	BlockResponse pulumi.StringInput `pulumi:"blockResponse"`
	// The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC).
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// A unique string defined by you to identify the request.
	CreatorRequestId pulumi.StringInput `pulumi:"creatorRequestId"`
	// The ID of the domain list that's used in the rule.
	FirewallDomainListId pulumi.StringInput `pulumi:"firewallDomainListId"`
	// The unique identifier of the firewall rule group that you want to retrieve the rules for.
	FirewallRuleGroupId pulumi.StringInput `pulumi:"firewallRuleGroupId"`
	// The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).
	ModificationTime pulumi.StringInput `pulumi:"modificationTime"`
	// The name of the rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The setting that determines the processing order of the rules in a rule group.
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (GetResolverFirewallRulesFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverFirewallRulesFirewallRule)(nil)).Elem()
}

func (i GetResolverFirewallRulesFirewallRuleArgs) ToGetResolverFirewallRulesFirewallRuleOutput() GetResolverFirewallRulesFirewallRuleOutput {
	return i.ToGetResolverFirewallRulesFirewallRuleOutputWithContext(context.Background())
}

func (i GetResolverFirewallRulesFirewallRuleArgs) ToGetResolverFirewallRulesFirewallRuleOutputWithContext(ctx context.Context) GetResolverFirewallRulesFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverFirewallRulesFirewallRuleOutput)
}

// GetResolverFirewallRulesFirewallRuleArrayInput is an input type that accepts GetResolverFirewallRulesFirewallRuleArray and GetResolverFirewallRulesFirewallRuleArrayOutput values.
// You can construct a concrete instance of `GetResolverFirewallRulesFirewallRuleArrayInput` via:
//
//	GetResolverFirewallRulesFirewallRuleArray{ GetResolverFirewallRulesFirewallRuleArgs{...} }
type GetResolverFirewallRulesFirewallRuleArrayInput interface {
	pulumi.Input

	ToGetResolverFirewallRulesFirewallRuleArrayOutput() GetResolverFirewallRulesFirewallRuleArrayOutput
	ToGetResolverFirewallRulesFirewallRuleArrayOutputWithContext(context.Context) GetResolverFirewallRulesFirewallRuleArrayOutput
}

type GetResolverFirewallRulesFirewallRuleArray []GetResolverFirewallRulesFirewallRuleInput

func (GetResolverFirewallRulesFirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverFirewallRulesFirewallRule)(nil)).Elem()
}

func (i GetResolverFirewallRulesFirewallRuleArray) ToGetResolverFirewallRulesFirewallRuleArrayOutput() GetResolverFirewallRulesFirewallRuleArrayOutput {
	return i.ToGetResolverFirewallRulesFirewallRuleArrayOutputWithContext(context.Background())
}

func (i GetResolverFirewallRulesFirewallRuleArray) ToGetResolverFirewallRulesFirewallRuleArrayOutputWithContext(ctx context.Context) GetResolverFirewallRulesFirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverFirewallRulesFirewallRuleArrayOutput)
}

type GetResolverFirewallRulesFirewallRuleOutput struct{ *pulumi.OutputState }

func (GetResolverFirewallRulesFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverFirewallRulesFirewallRule)(nil)).Elem()
}

func (o GetResolverFirewallRulesFirewallRuleOutput) ToGetResolverFirewallRulesFirewallRuleOutput() GetResolverFirewallRulesFirewallRuleOutput {
	return o
}

func (o GetResolverFirewallRulesFirewallRuleOutput) ToGetResolverFirewallRulesFirewallRuleOutputWithContext(ctx context.Context) GetResolverFirewallRulesFirewallRuleOutput {
	return o
}

// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
func (o GetResolverFirewallRulesFirewallRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.Action }).(pulumi.StringOutput)
}

// The DNS record's type.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockOverrideDnsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.BlockOverrideDnsType }).(pulumi.StringOutput)
}

// The custom DNS record to send back in response to the query.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockOverrideDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.BlockOverrideDomain }).(pulumi.StringOutput)
}

// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockOverrideTtl() pulumi.IntOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) int { return v.BlockOverrideTtl }).(pulumi.IntOutput)
}

// The way that you want DNS Firewall to block the request.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockResponse() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.BlockResponse }).(pulumi.StringOutput)
}

// The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC).
func (o GetResolverFirewallRulesFirewallRuleOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.CreationTime }).(pulumi.StringOutput)
}

// A unique string defined by you to identify the request.
func (o GetResolverFirewallRulesFirewallRuleOutput) CreatorRequestId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.CreatorRequestId }).(pulumi.StringOutput)
}

// The ID of the domain list that's used in the rule.
func (o GetResolverFirewallRulesFirewallRuleOutput) FirewallDomainListId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.FirewallDomainListId }).(pulumi.StringOutput)
}

// The unique identifier of the firewall rule group that you want to retrieve the rules for.
func (o GetResolverFirewallRulesFirewallRuleOutput) FirewallRuleGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.FirewallRuleGroupId }).(pulumi.StringOutput)
}

// The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).
func (o GetResolverFirewallRulesFirewallRuleOutput) ModificationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.ModificationTime }).(pulumi.StringOutput)
}

// The name of the rule.
func (o GetResolverFirewallRulesFirewallRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) string { return v.Name }).(pulumi.StringOutput)
}

// The setting that determines the processing order of the rules in a rule group.
func (o GetResolverFirewallRulesFirewallRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetResolverFirewallRulesFirewallRule) int { return v.Priority }).(pulumi.IntOutput)
}

type GetResolverFirewallRulesFirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (GetResolverFirewallRulesFirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverFirewallRulesFirewallRule)(nil)).Elem()
}

func (o GetResolverFirewallRulesFirewallRuleArrayOutput) ToGetResolverFirewallRulesFirewallRuleArrayOutput() GetResolverFirewallRulesFirewallRuleArrayOutput {
	return o
}

func (o GetResolverFirewallRulesFirewallRuleArrayOutput) ToGetResolverFirewallRulesFirewallRuleArrayOutputWithContext(ctx context.Context) GetResolverFirewallRulesFirewallRuleArrayOutput {
	return o
}

func (o GetResolverFirewallRulesFirewallRuleArrayOutput) Index(i pulumi.IntInput) GetResolverFirewallRulesFirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverFirewallRulesFirewallRule {
		return vs[0].([]GetResolverFirewallRulesFirewallRule)[vs[1].(int)]
	}).(GetResolverFirewallRulesFirewallRuleOutput)
}

type GetTrafficPolicyDocumentEndpoint struct {
	// ID of an endpoint you want to assign.
	Id string `pulumi:"id"`
	// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
	Region *string `pulumi:"region"`
	// Type of the endpoint. Valid values are `value` , `cloudfront` , `elastic-load-balancer`, `s3-website`
	Type *string `pulumi:"type"`
	// Value of the `type`.
	Value *string `pulumi:"value"`
}

// GetTrafficPolicyDocumentEndpointInput is an input type that accepts GetTrafficPolicyDocumentEndpointArgs and GetTrafficPolicyDocumentEndpointOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentEndpointInput` via:
//
//	GetTrafficPolicyDocumentEndpointArgs{...}
type GetTrafficPolicyDocumentEndpointInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentEndpointOutput() GetTrafficPolicyDocumentEndpointOutput
	ToGetTrafficPolicyDocumentEndpointOutputWithContext(context.Context) GetTrafficPolicyDocumentEndpointOutput
}

type GetTrafficPolicyDocumentEndpointArgs struct {
	// ID of an endpoint you want to assign.
	Id pulumi.StringInput `pulumi:"id"`
	// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Type of the endpoint. Valid values are `value` , `cloudfront` , `elastic-load-balancer`, `s3-website`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Value of the `type`.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GetTrafficPolicyDocumentEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentEndpoint)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentEndpointArgs) ToGetTrafficPolicyDocumentEndpointOutput() GetTrafficPolicyDocumentEndpointOutput {
	return i.ToGetTrafficPolicyDocumentEndpointOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentEndpointArgs) ToGetTrafficPolicyDocumentEndpointOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentEndpointOutput)
}

// GetTrafficPolicyDocumentEndpointArrayInput is an input type that accepts GetTrafficPolicyDocumentEndpointArray and GetTrafficPolicyDocumentEndpointArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentEndpointArrayInput` via:
//
//	GetTrafficPolicyDocumentEndpointArray{ GetTrafficPolicyDocumentEndpointArgs{...} }
type GetTrafficPolicyDocumentEndpointArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentEndpointArrayOutput() GetTrafficPolicyDocumentEndpointArrayOutput
	ToGetTrafficPolicyDocumentEndpointArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentEndpointArrayOutput
}

type GetTrafficPolicyDocumentEndpointArray []GetTrafficPolicyDocumentEndpointInput

func (GetTrafficPolicyDocumentEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentEndpoint)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentEndpointArray) ToGetTrafficPolicyDocumentEndpointArrayOutput() GetTrafficPolicyDocumentEndpointArrayOutput {
	return i.ToGetTrafficPolicyDocumentEndpointArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentEndpointArray) ToGetTrafficPolicyDocumentEndpointArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentEndpointArrayOutput)
}

type GetTrafficPolicyDocumentEndpointOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentEndpoint)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentEndpointOutput) ToGetTrafficPolicyDocumentEndpointOutput() GetTrafficPolicyDocumentEndpointOutput {
	return o
}

func (o GetTrafficPolicyDocumentEndpointOutput) ToGetTrafficPolicyDocumentEndpointOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentEndpointOutput {
	return o
}

// ID of an endpoint you want to assign.
func (o GetTrafficPolicyDocumentEndpointOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentEndpoint) string { return v.Id }).(pulumi.StringOutput)
}

// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
func (o GetTrafficPolicyDocumentEndpointOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentEndpoint) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Type of the endpoint. Valid values are `value` , `cloudfront` , `elastic-load-balancer`, `s3-website`
func (o GetTrafficPolicyDocumentEndpointOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentEndpoint) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value of the `type`.
func (o GetTrafficPolicyDocumentEndpointOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentEndpoint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentEndpoint)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentEndpointArrayOutput) ToGetTrafficPolicyDocumentEndpointArrayOutput() GetTrafficPolicyDocumentEndpointArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentEndpointArrayOutput) ToGetTrafficPolicyDocumentEndpointArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentEndpointArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentEndpointArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentEndpoint {
		return vs[0].([]GetTrafficPolicyDocumentEndpoint)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentEndpointOutput)
}

type GetTrafficPolicyDocumentRule struct {
	// Configuration block for when you add a geoproximity rule, you configure Amazon Route 53 to route traffic to your resources based on the geographic location of your resources. Only valid for `geoproximity` type. See below
	GeoProximityLocations []GetTrafficPolicyDocumentRuleGeoProximityLocation `pulumi:"geoProximityLocations"`
	// ID of a rule you want to assign.
	Id string `pulumi:"id"`
	// Configuration block for when you add a multivalue answer rule, you configure your traffic policy to route traffic approximately randomly to your healthy resources.  Only valid for `multivalue` type. See below
	Items []GetTrafficPolicyDocumentRuleItem `pulumi:"items"`
	// Configuration block for when you add a geolocation rule, you configure your traffic policy to route your traffic based on the geographic location of your users.  Only valid for `geo` type. See below
	Locations []GetTrafficPolicyDocumentRuleLocation `pulumi:"locations"`
	// Configuration block for the settings for the rule or endpoint that you want to route traffic to whenever the corresponding resources are available. Only valid for `failover` type. See below
	Primary *GetTrafficPolicyDocumentRulePrimary `pulumi:"primary"`
	// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
	Regions []GetTrafficPolicyDocumentRuleRegion `pulumi:"regions"`
	// Configuration block for the rule or endpoint that you want to route traffic to whenever the primary resources are not available. Only valid for `failover` type. See below
	Secondary *GetTrafficPolicyDocumentRuleSecondary `pulumi:"secondary"`
	// Type of the rule.
	Type *string `pulumi:"type"`
}

// GetTrafficPolicyDocumentRuleInput is an input type that accepts GetTrafficPolicyDocumentRuleArgs and GetTrafficPolicyDocumentRuleOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleInput` via:
//
//	GetTrafficPolicyDocumentRuleArgs{...}
type GetTrafficPolicyDocumentRuleInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleOutput() GetTrafficPolicyDocumentRuleOutput
	ToGetTrafficPolicyDocumentRuleOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleOutput
}

type GetTrafficPolicyDocumentRuleArgs struct {
	// Configuration block for when you add a geoproximity rule, you configure Amazon Route 53 to route traffic to your resources based on the geographic location of your resources. Only valid for `geoproximity` type. See below
	GeoProximityLocations GetTrafficPolicyDocumentRuleGeoProximityLocationArrayInput `pulumi:"geoProximityLocations"`
	// ID of a rule you want to assign.
	Id pulumi.StringInput `pulumi:"id"`
	// Configuration block for when you add a multivalue answer rule, you configure your traffic policy to route traffic approximately randomly to your healthy resources.  Only valid for `multivalue` type. See below
	Items GetTrafficPolicyDocumentRuleItemArrayInput `pulumi:"items"`
	// Configuration block for when you add a geolocation rule, you configure your traffic policy to route your traffic based on the geographic location of your users.  Only valid for `geo` type. See below
	Locations GetTrafficPolicyDocumentRuleLocationArrayInput `pulumi:"locations"`
	// Configuration block for the settings for the rule or endpoint that you want to route traffic to whenever the corresponding resources are available. Only valid for `failover` type. See below
	Primary GetTrafficPolicyDocumentRulePrimaryPtrInput `pulumi:"primary"`
	// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
	Regions GetTrafficPolicyDocumentRuleRegionArrayInput `pulumi:"regions"`
	// Configuration block for the rule or endpoint that you want to route traffic to whenever the primary resources are not available. Only valid for `failover` type. See below
	Secondary GetTrafficPolicyDocumentRuleSecondaryPtrInput `pulumi:"secondary"`
	// Type of the rule.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetTrafficPolicyDocumentRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRule)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleArgs) ToGetTrafficPolicyDocumentRuleOutput() GetTrafficPolicyDocumentRuleOutput {
	return i.ToGetTrafficPolicyDocumentRuleOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleArgs) ToGetTrafficPolicyDocumentRuleOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleOutput)
}

// GetTrafficPolicyDocumentRuleArrayInput is an input type that accepts GetTrafficPolicyDocumentRuleArray and GetTrafficPolicyDocumentRuleArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleArrayInput` via:
//
//	GetTrafficPolicyDocumentRuleArray{ GetTrafficPolicyDocumentRuleArgs{...} }
type GetTrafficPolicyDocumentRuleArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleArrayOutput() GetTrafficPolicyDocumentRuleArrayOutput
	ToGetTrafficPolicyDocumentRuleArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleArrayOutput
}

type GetTrafficPolicyDocumentRuleArray []GetTrafficPolicyDocumentRuleInput

func (GetTrafficPolicyDocumentRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRule)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleArray) ToGetTrafficPolicyDocumentRuleArrayOutput() GetTrafficPolicyDocumentRuleArrayOutput {
	return i.ToGetTrafficPolicyDocumentRuleArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleArray) ToGetTrafficPolicyDocumentRuleArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleArrayOutput)
}

type GetTrafficPolicyDocumentRuleOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRule)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleOutput) ToGetTrafficPolicyDocumentRuleOutput() GetTrafficPolicyDocumentRuleOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleOutput) ToGetTrafficPolicyDocumentRuleOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleOutput {
	return o
}

// Configuration block for when you add a geoproximity rule, you configure Amazon Route 53 to route traffic to your resources based on the geographic location of your resources. Only valid for `geoproximity` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) GeoProximityLocations() GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleGeoProximityLocation {
		return v.GeoProximityLocations
	}).(GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput)
}

// ID of a rule you want to assign.
func (o GetTrafficPolicyDocumentRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) string { return v.Id }).(pulumi.StringOutput)
}

// Configuration block for when you add a multivalue answer rule, you configure your traffic policy to route traffic approximately randomly to your healthy resources.  Only valid for `multivalue` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Items() GetTrafficPolicyDocumentRuleItemArrayOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleItem { return v.Items }).(GetTrafficPolicyDocumentRuleItemArrayOutput)
}

// Configuration block for when you add a geolocation rule, you configure your traffic policy to route your traffic based on the geographic location of your users.  Only valid for `geo` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Locations() GetTrafficPolicyDocumentRuleLocationArrayOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleLocation { return v.Locations }).(GetTrafficPolicyDocumentRuleLocationArrayOutput)
}

// Configuration block for the settings for the rule or endpoint that you want to route traffic to whenever the corresponding resources are available. Only valid for `failover` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Primary() GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) *GetTrafficPolicyDocumentRulePrimary { return v.Primary }).(GetTrafficPolicyDocumentRulePrimaryPtrOutput)
}

// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
func (o GetTrafficPolicyDocumentRuleOutput) Regions() GetTrafficPolicyDocumentRuleRegionArrayOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleRegion { return v.Regions }).(GetTrafficPolicyDocumentRuleRegionArrayOutput)
}

// Configuration block for the rule or endpoint that you want to route traffic to whenever the primary resources are not available. Only valid for `failover` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Secondary() GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) *GetTrafficPolicyDocumentRuleSecondary { return v.Secondary }).(GetTrafficPolicyDocumentRuleSecondaryPtrOutput)
}

// Type of the rule.
func (o GetTrafficPolicyDocumentRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRule) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRule)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleArrayOutput) ToGetTrafficPolicyDocumentRuleArrayOutput() GetTrafficPolicyDocumentRuleArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleArrayOutput) ToGetTrafficPolicyDocumentRuleArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentRule {
		return vs[0].([]GetTrafficPolicyDocumentRule)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentRuleOutput)
}

type GetTrafficPolicyDocumentRuleGeoProximityLocation struct {
	// Specify a value for `bias` if you want to route more traffic to an endpoint from nearby endpoints (positive values) or route less traffic to an endpoint (negative values).
	Bias *string `pulumi:"bias"`
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// Represents the location south (negative) or north (positive) of the equator. Valid values are -90 degrees to 90 degrees.
	Latitude *string `pulumi:"latitude"`
	// Represents the location west (negative) or east (positive) of the prime meridian. Valid values are -180 degrees to 180 degrees.
	Longitude *string `pulumi:"longitude"`
	// If your endpoint is an AWS resource, specify the AWS Region that you created the resource in.
	Region *string `pulumi:"region"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
}

// GetTrafficPolicyDocumentRuleGeoProximityLocationInput is an input type that accepts GetTrafficPolicyDocumentRuleGeoProximityLocationArgs and GetTrafficPolicyDocumentRuleGeoProximityLocationOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleGeoProximityLocationInput` via:
//
//	GetTrafficPolicyDocumentRuleGeoProximityLocationArgs{...}
type GetTrafficPolicyDocumentRuleGeoProximityLocationInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationOutput
	ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationOutput
}

type GetTrafficPolicyDocumentRuleGeoProximityLocationArgs struct {
	// Specify a value for `bias` if you want to route more traffic to an endpoint from nearby endpoints (positive values) or route less traffic to an endpoint (negative values).
	Bias pulumi.StringPtrInput `pulumi:"bias"`
	// References to an endpoint.
	EndpointReference pulumi.StringPtrInput `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumi.BoolPtrInput `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumi.StringPtrInput `pulumi:"healthCheck"`
	// Represents the location south (negative) or north (positive) of the equator. Valid values are -90 degrees to 90 degrees.
	Latitude pulumi.StringPtrInput `pulumi:"latitude"`
	// Represents the location west (negative) or east (positive) of the prime meridian. Valid values are -180 degrees to 180 degrees.
	Longitude pulumi.StringPtrInput `pulumi:"longitude"`
	// If your endpoint is an AWS resource, specify the AWS Region that you created the resource in.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// References to a rule.
	RuleReference pulumi.StringPtrInput `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRuleGeoProximityLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleGeoProximityLocation)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleGeoProximityLocationArgs) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return i.ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleGeoProximityLocationArgs) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleGeoProximityLocationOutput)
}

// GetTrafficPolicyDocumentRuleGeoProximityLocationArrayInput is an input type that accepts GetTrafficPolicyDocumentRuleGeoProximityLocationArray and GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleGeoProximityLocationArrayInput` via:
//
//	GetTrafficPolicyDocumentRuleGeoProximityLocationArray{ GetTrafficPolicyDocumentRuleGeoProximityLocationArgs{...} }
type GetTrafficPolicyDocumentRuleGeoProximityLocationArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput
	ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput
}

type GetTrafficPolicyDocumentRuleGeoProximityLocationArray []GetTrafficPolicyDocumentRuleGeoProximityLocationInput

func (GetTrafficPolicyDocumentRuleGeoProximityLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleGeoProximityLocation)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleGeoProximityLocationArray) ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput {
	return i.ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleGeoProximityLocationArray) ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput)
}

type GetTrafficPolicyDocumentRuleGeoProximityLocationOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleGeoProximityLocation)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return o
}

// Specify a value for `bias` if you want to route more traffic to an endpoint from nearby endpoints (positive values) or route less traffic to an endpoint (negative values).
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Bias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Bias }).(pulumi.StringPtrOutput)
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *bool { return v.EvaluateTargetHealth }).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

// Represents the location south (negative) or north (positive) of the equator. Valid values are -90 degrees to 90 degrees.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Latitude }).(pulumi.StringPtrOutput)
}

// Represents the location west (negative) or east (positive) of the prime meridian. Valid values are -180 degrees to 180 degrees.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Longitude }).(pulumi.StringPtrOutput)
}

// If your endpoint is an AWS resource, specify the AWS Region that you created the resource in.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.RuleReference }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleGeoProximityLocation)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput) ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput) ToGetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentRuleGeoProximityLocation {
		return vs[0].([]GetTrafficPolicyDocumentRuleGeoProximityLocation)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentRuleGeoProximityLocationOutput)
}

type GetTrafficPolicyDocumentRuleItem struct {
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
}

// GetTrafficPolicyDocumentRuleItemInput is an input type that accepts GetTrafficPolicyDocumentRuleItemArgs and GetTrafficPolicyDocumentRuleItemOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleItemInput` via:
//
//	GetTrafficPolicyDocumentRuleItemArgs{...}
type GetTrafficPolicyDocumentRuleItemInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleItemOutput() GetTrafficPolicyDocumentRuleItemOutput
	ToGetTrafficPolicyDocumentRuleItemOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleItemOutput
}

type GetTrafficPolicyDocumentRuleItemArgs struct {
	// References to an endpoint.
	EndpointReference pulumi.StringPtrInput `pulumi:"endpointReference"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumi.StringPtrInput `pulumi:"healthCheck"`
}

func (GetTrafficPolicyDocumentRuleItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleItem)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleItemArgs) ToGetTrafficPolicyDocumentRuleItemOutput() GetTrafficPolicyDocumentRuleItemOutput {
	return i.ToGetTrafficPolicyDocumentRuleItemOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleItemArgs) ToGetTrafficPolicyDocumentRuleItemOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleItemOutput)
}

// GetTrafficPolicyDocumentRuleItemArrayInput is an input type that accepts GetTrafficPolicyDocumentRuleItemArray and GetTrafficPolicyDocumentRuleItemArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleItemArrayInput` via:
//
//	GetTrafficPolicyDocumentRuleItemArray{ GetTrafficPolicyDocumentRuleItemArgs{...} }
type GetTrafficPolicyDocumentRuleItemArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleItemArrayOutput() GetTrafficPolicyDocumentRuleItemArrayOutput
	ToGetTrafficPolicyDocumentRuleItemArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleItemArrayOutput
}

type GetTrafficPolicyDocumentRuleItemArray []GetTrafficPolicyDocumentRuleItemInput

func (GetTrafficPolicyDocumentRuleItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleItem)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleItemArray) ToGetTrafficPolicyDocumentRuleItemArrayOutput() GetTrafficPolicyDocumentRuleItemArrayOutput {
	return i.ToGetTrafficPolicyDocumentRuleItemArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleItemArray) ToGetTrafficPolicyDocumentRuleItemArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleItemArrayOutput)
}

type GetTrafficPolicyDocumentRuleItemOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleItem)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleItemOutput) ToGetTrafficPolicyDocumentRuleItemOutput() GetTrafficPolicyDocumentRuleItemOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleItemOutput) ToGetTrafficPolicyDocumentRuleItemOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleItemOutput {
	return o
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleItemOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleItem) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleItemOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleItem) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleItemArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleItem)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleItemArrayOutput) ToGetTrafficPolicyDocumentRuleItemArrayOutput() GetTrafficPolicyDocumentRuleItemArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleItemArrayOutput) ToGetTrafficPolicyDocumentRuleItemArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleItemArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleItemArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentRuleItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentRuleItem {
		return vs[0].([]GetTrafficPolicyDocumentRuleItem)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentRuleItemOutput)
}

type GetTrafficPolicyDocumentRuleLocation struct {
	// Value of a continent.
	Continent *string `pulumi:"continent"`
	// Value of a country.
	Country *string `pulumi:"country"`
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// Indicates whether this set of values represents the default location.
	IsDefault *bool `pulumi:"isDefault"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
	// Value of a subdivision.
	Subdivision *string `pulumi:"subdivision"`
}

// GetTrafficPolicyDocumentRuleLocationInput is an input type that accepts GetTrafficPolicyDocumentRuleLocationArgs and GetTrafficPolicyDocumentRuleLocationOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleLocationInput` via:
//
//	GetTrafficPolicyDocumentRuleLocationArgs{...}
type GetTrafficPolicyDocumentRuleLocationInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleLocationOutput() GetTrafficPolicyDocumentRuleLocationOutput
	ToGetTrafficPolicyDocumentRuleLocationOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleLocationOutput
}

type GetTrafficPolicyDocumentRuleLocationArgs struct {
	// Value of a continent.
	Continent pulumi.StringPtrInput `pulumi:"continent"`
	// Value of a country.
	Country pulumi.StringPtrInput `pulumi:"country"`
	// References to an endpoint.
	EndpointReference pulumi.StringPtrInput `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumi.BoolPtrInput `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumi.StringPtrInput `pulumi:"healthCheck"`
	// Indicates whether this set of values represents the default location.
	IsDefault pulumi.BoolPtrInput `pulumi:"isDefault"`
	// References to a rule.
	RuleReference pulumi.StringPtrInput `pulumi:"ruleReference"`
	// Value of a subdivision.
	Subdivision pulumi.StringPtrInput `pulumi:"subdivision"`
}

func (GetTrafficPolicyDocumentRuleLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleLocation)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleLocationArgs) ToGetTrafficPolicyDocumentRuleLocationOutput() GetTrafficPolicyDocumentRuleLocationOutput {
	return i.ToGetTrafficPolicyDocumentRuleLocationOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleLocationArgs) ToGetTrafficPolicyDocumentRuleLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleLocationOutput)
}

// GetTrafficPolicyDocumentRuleLocationArrayInput is an input type that accepts GetTrafficPolicyDocumentRuleLocationArray and GetTrafficPolicyDocumentRuleLocationArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleLocationArrayInput` via:
//
//	GetTrafficPolicyDocumentRuleLocationArray{ GetTrafficPolicyDocumentRuleLocationArgs{...} }
type GetTrafficPolicyDocumentRuleLocationArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleLocationArrayOutput() GetTrafficPolicyDocumentRuleLocationArrayOutput
	ToGetTrafficPolicyDocumentRuleLocationArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleLocationArrayOutput
}

type GetTrafficPolicyDocumentRuleLocationArray []GetTrafficPolicyDocumentRuleLocationInput

func (GetTrafficPolicyDocumentRuleLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleLocation)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleLocationArray) ToGetTrafficPolicyDocumentRuleLocationArrayOutput() GetTrafficPolicyDocumentRuleLocationArrayOutput {
	return i.ToGetTrafficPolicyDocumentRuleLocationArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleLocationArray) ToGetTrafficPolicyDocumentRuleLocationArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleLocationArrayOutput)
}

type GetTrafficPolicyDocumentRuleLocationOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleLocation)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleLocationOutput) ToGetTrafficPolicyDocumentRuleLocationOutput() GetTrafficPolicyDocumentRuleLocationOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleLocationOutput) ToGetTrafficPolicyDocumentRuleLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleLocationOutput {
	return o
}

// Value of a continent.
func (o GetTrafficPolicyDocumentRuleLocationOutput) Continent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.Continent }).(pulumi.StringPtrOutput)
}

// Value of a country.
func (o GetTrafficPolicyDocumentRuleLocationOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.Country }).(pulumi.StringPtrOutput)
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleLocationOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleLocationOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *bool { return v.EvaluateTargetHealth }).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleLocationOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

// Indicates whether this set of values represents the default location.
func (o GetTrafficPolicyDocumentRuleLocationOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleLocationOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.RuleReference }).(pulumi.StringPtrOutput)
}

// Value of a subdivision.
func (o GetTrafficPolicyDocumentRuleLocationOutput) Subdivision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.Subdivision }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleLocationArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleLocation)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleLocationArrayOutput) ToGetTrafficPolicyDocumentRuleLocationArrayOutput() GetTrafficPolicyDocumentRuleLocationArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleLocationArrayOutput) ToGetTrafficPolicyDocumentRuleLocationArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleLocationArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleLocationArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentRuleLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentRuleLocation {
		return vs[0].([]GetTrafficPolicyDocumentRuleLocation)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentRuleLocationOutput)
}

type GetTrafficPolicyDocumentRulePrimary struct {
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
}

// GetTrafficPolicyDocumentRulePrimaryInput is an input type that accepts GetTrafficPolicyDocumentRulePrimaryArgs and GetTrafficPolicyDocumentRulePrimaryOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRulePrimaryInput` via:
//
//	GetTrafficPolicyDocumentRulePrimaryArgs{...}
type GetTrafficPolicyDocumentRulePrimaryInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRulePrimaryOutput() GetTrafficPolicyDocumentRulePrimaryOutput
	ToGetTrafficPolicyDocumentRulePrimaryOutputWithContext(context.Context) GetTrafficPolicyDocumentRulePrimaryOutput
}

type GetTrafficPolicyDocumentRulePrimaryArgs struct {
	// References to an endpoint.
	EndpointReference pulumi.StringPtrInput `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumi.BoolPtrInput `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumi.StringPtrInput `pulumi:"healthCheck"`
	// References to a rule.
	RuleReference pulumi.StringPtrInput `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRulePrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRulePrimary)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRulePrimaryArgs) ToGetTrafficPolicyDocumentRulePrimaryOutput() GetTrafficPolicyDocumentRulePrimaryOutput {
	return i.ToGetTrafficPolicyDocumentRulePrimaryOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRulePrimaryArgs) ToGetTrafficPolicyDocumentRulePrimaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRulePrimaryOutput)
}

func (i GetTrafficPolicyDocumentRulePrimaryArgs) ToGetTrafficPolicyDocumentRulePrimaryPtrOutput() GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return i.ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRulePrimaryArgs) ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRulePrimaryOutput).ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(ctx)
}

// GetTrafficPolicyDocumentRulePrimaryPtrInput is an input type that accepts GetTrafficPolicyDocumentRulePrimaryArgs, GetTrafficPolicyDocumentRulePrimaryPtr and GetTrafficPolicyDocumentRulePrimaryPtrOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRulePrimaryPtrInput` via:
//
//	        GetTrafficPolicyDocumentRulePrimaryArgs{...}
//
//	or:
//
//	        nil
type GetTrafficPolicyDocumentRulePrimaryPtrInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRulePrimaryPtrOutput() GetTrafficPolicyDocumentRulePrimaryPtrOutput
	ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(context.Context) GetTrafficPolicyDocumentRulePrimaryPtrOutput
}

type getTrafficPolicyDocumentRulePrimaryPtrType GetTrafficPolicyDocumentRulePrimaryArgs

func GetTrafficPolicyDocumentRulePrimaryPtr(v *GetTrafficPolicyDocumentRulePrimaryArgs) GetTrafficPolicyDocumentRulePrimaryPtrInput {
	return (*getTrafficPolicyDocumentRulePrimaryPtrType)(v)
}

func (*getTrafficPolicyDocumentRulePrimaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTrafficPolicyDocumentRulePrimary)(nil)).Elem()
}

func (i *getTrafficPolicyDocumentRulePrimaryPtrType) ToGetTrafficPolicyDocumentRulePrimaryPtrOutput() GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return i.ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(context.Background())
}

func (i *getTrafficPolicyDocumentRulePrimaryPtrType) ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRulePrimaryPtrOutput)
}

type GetTrafficPolicyDocumentRulePrimaryOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRulePrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRulePrimary)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRulePrimaryOutput) ToGetTrafficPolicyDocumentRulePrimaryOutput() GetTrafficPolicyDocumentRulePrimaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRulePrimaryOutput) ToGetTrafficPolicyDocumentRulePrimaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRulePrimaryOutput) ToGetTrafficPolicyDocumentRulePrimaryPtrOutput() GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return o.ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(context.Background())
}

func (o GetTrafficPolicyDocumentRulePrimaryOutput) ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTrafficPolicyDocumentRulePrimary) *GetTrafficPolicyDocumentRulePrimary {
		return &v
	}).(GetTrafficPolicyDocumentRulePrimaryPtrOutput)
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRulePrimary) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRulePrimary) *bool { return v.EvaluateTargetHealth }).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRulePrimary) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRulePrimary) *string { return v.RuleReference }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRulePrimaryPtrOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRulePrimaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTrafficPolicyDocumentRulePrimary)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) ToGetTrafficPolicyDocumentRulePrimaryPtrOutput() GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return o
}

func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) ToGetTrafficPolicyDocumentRulePrimaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryPtrOutput {
	return o
}

func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) Elem() GetTrafficPolicyDocumentRulePrimaryOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRulePrimary) GetTrafficPolicyDocumentRulePrimary {
		if v != nil {
			return *v
		}
		var ret GetTrafficPolicyDocumentRulePrimary
		return ret
	}).(GetTrafficPolicyDocumentRulePrimaryOutput)
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRulePrimary) *string {
		if v == nil {
			return nil
		}
		return v.EndpointReference
	}).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRulePrimary) *bool {
		if v == nil {
			return nil
		}
		return v.EvaluateTargetHealth
	}).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRulePrimary) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheck
	}).(pulumi.StringPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRulePrimaryPtrOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRulePrimary) *string {
		if v == nil {
			return nil
		}
		return v.RuleReference
	}).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleRegion struct {
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// Region code for the AWS Region that you created the resource in.
	Region *string `pulumi:"region"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
}

// GetTrafficPolicyDocumentRuleRegionInput is an input type that accepts GetTrafficPolicyDocumentRuleRegionArgs and GetTrafficPolicyDocumentRuleRegionOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleRegionInput` via:
//
//	GetTrafficPolicyDocumentRuleRegionArgs{...}
type GetTrafficPolicyDocumentRuleRegionInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleRegionOutput() GetTrafficPolicyDocumentRuleRegionOutput
	ToGetTrafficPolicyDocumentRuleRegionOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleRegionOutput
}

type GetTrafficPolicyDocumentRuleRegionArgs struct {
	// References to an endpoint.
	EndpointReference pulumi.StringPtrInput `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumi.BoolPtrInput `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumi.StringPtrInput `pulumi:"healthCheck"`
	// Region code for the AWS Region that you created the resource in.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// References to a rule.
	RuleReference pulumi.StringPtrInput `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRuleRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleRegion)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleRegionArgs) ToGetTrafficPolicyDocumentRuleRegionOutput() GetTrafficPolicyDocumentRuleRegionOutput {
	return i.ToGetTrafficPolicyDocumentRuleRegionOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleRegionArgs) ToGetTrafficPolicyDocumentRuleRegionOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleRegionOutput)
}

// GetTrafficPolicyDocumentRuleRegionArrayInput is an input type that accepts GetTrafficPolicyDocumentRuleRegionArray and GetTrafficPolicyDocumentRuleRegionArrayOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleRegionArrayInput` via:
//
//	GetTrafficPolicyDocumentRuleRegionArray{ GetTrafficPolicyDocumentRuleRegionArgs{...} }
type GetTrafficPolicyDocumentRuleRegionArrayInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleRegionArrayOutput() GetTrafficPolicyDocumentRuleRegionArrayOutput
	ToGetTrafficPolicyDocumentRuleRegionArrayOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleRegionArrayOutput
}

type GetTrafficPolicyDocumentRuleRegionArray []GetTrafficPolicyDocumentRuleRegionInput

func (GetTrafficPolicyDocumentRuleRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleRegion)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleRegionArray) ToGetTrafficPolicyDocumentRuleRegionArrayOutput() GetTrafficPolicyDocumentRuleRegionArrayOutput {
	return i.ToGetTrafficPolicyDocumentRuleRegionArrayOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleRegionArray) ToGetTrafficPolicyDocumentRuleRegionArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleRegionArrayOutput)
}

type GetTrafficPolicyDocumentRuleRegionOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleRegion)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleRegionOutput) ToGetTrafficPolicyDocumentRuleRegionOutput() GetTrafficPolicyDocumentRuleRegionOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleRegionOutput) ToGetTrafficPolicyDocumentRuleRegionOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleRegionOutput {
	return o
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleRegionOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleRegionOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleRegion) *bool { return v.EvaluateTargetHealth }).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleRegionOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

// Region code for the AWS Region that you created the resource in.
func (o GetTrafficPolicyDocumentRuleRegionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleRegionOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.RuleReference }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleRegionArrayOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrafficPolicyDocumentRuleRegion)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleRegionArrayOutput) ToGetTrafficPolicyDocumentRuleRegionArrayOutput() GetTrafficPolicyDocumentRuleRegionArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleRegionArrayOutput) ToGetTrafficPolicyDocumentRuleRegionArrayOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleRegionArrayOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleRegionArrayOutput) Index(i pulumi.IntInput) GetTrafficPolicyDocumentRuleRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrafficPolicyDocumentRuleRegion {
		return vs[0].([]GetTrafficPolicyDocumentRuleRegion)[vs[1].(int)]
	}).(GetTrafficPolicyDocumentRuleRegionOutput)
}

type GetTrafficPolicyDocumentRuleSecondary struct {
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
}

// GetTrafficPolicyDocumentRuleSecondaryInput is an input type that accepts GetTrafficPolicyDocumentRuleSecondaryArgs and GetTrafficPolicyDocumentRuleSecondaryOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleSecondaryInput` via:
//
//	GetTrafficPolicyDocumentRuleSecondaryArgs{...}
type GetTrafficPolicyDocumentRuleSecondaryInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleSecondaryOutput() GetTrafficPolicyDocumentRuleSecondaryOutput
	ToGetTrafficPolicyDocumentRuleSecondaryOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleSecondaryOutput
}

type GetTrafficPolicyDocumentRuleSecondaryArgs struct {
	// References to an endpoint.
	EndpointReference pulumi.StringPtrInput `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumi.BoolPtrInput `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumi.StringPtrInput `pulumi:"healthCheck"`
	// References to a rule.
	RuleReference pulumi.StringPtrInput `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRuleSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleSecondary)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleSecondaryArgs) ToGetTrafficPolicyDocumentRuleSecondaryOutput() GetTrafficPolicyDocumentRuleSecondaryOutput {
	return i.ToGetTrafficPolicyDocumentRuleSecondaryOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleSecondaryArgs) ToGetTrafficPolicyDocumentRuleSecondaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleSecondaryOutput)
}

func (i GetTrafficPolicyDocumentRuleSecondaryArgs) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutput() GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return i.ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleSecondaryArgs) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleSecondaryOutput).ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(ctx)
}

// GetTrafficPolicyDocumentRuleSecondaryPtrInput is an input type that accepts GetTrafficPolicyDocumentRuleSecondaryArgs, GetTrafficPolicyDocumentRuleSecondaryPtr and GetTrafficPolicyDocumentRuleSecondaryPtrOutput values.
// You can construct a concrete instance of `GetTrafficPolicyDocumentRuleSecondaryPtrInput` via:
//
//	        GetTrafficPolicyDocumentRuleSecondaryArgs{...}
//
//	or:
//
//	        nil
type GetTrafficPolicyDocumentRuleSecondaryPtrInput interface {
	pulumi.Input

	ToGetTrafficPolicyDocumentRuleSecondaryPtrOutput() GetTrafficPolicyDocumentRuleSecondaryPtrOutput
	ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(context.Context) GetTrafficPolicyDocumentRuleSecondaryPtrOutput
}

type getTrafficPolicyDocumentRuleSecondaryPtrType GetTrafficPolicyDocumentRuleSecondaryArgs

func GetTrafficPolicyDocumentRuleSecondaryPtr(v *GetTrafficPolicyDocumentRuleSecondaryArgs) GetTrafficPolicyDocumentRuleSecondaryPtrInput {
	return (*getTrafficPolicyDocumentRuleSecondaryPtrType)(v)
}

func (*getTrafficPolicyDocumentRuleSecondaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTrafficPolicyDocumentRuleSecondary)(nil)).Elem()
}

func (i *getTrafficPolicyDocumentRuleSecondaryPtrType) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutput() GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return i.ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(context.Background())
}

func (i *getTrafficPolicyDocumentRuleSecondaryPtrType) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleSecondaryPtrOutput)
}

type GetTrafficPolicyDocumentRuleSecondaryOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleSecondary)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) ToGetTrafficPolicyDocumentRuleSecondaryOutput() GetTrafficPolicyDocumentRuleSecondaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) ToGetTrafficPolicyDocumentRuleSecondaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutput() GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return o.ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(context.Background())
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTrafficPolicyDocumentRuleSecondary) *GetTrafficPolicyDocumentRuleSecondary {
		return &v
	}).(GetTrafficPolicyDocumentRuleSecondaryPtrOutput)
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleSecondaryOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleSecondary) *string { return v.EndpointReference }).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleSecondaryOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleSecondary) *bool { return v.EvaluateTargetHealth }).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleSecondaryOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleSecondary) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleSecondaryOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentRuleSecondary) *string { return v.RuleReference }).(pulumi.StringPtrOutput)
}

type GetTrafficPolicyDocumentRuleSecondaryPtrOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleSecondaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTrafficPolicyDocumentRuleSecondary)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutput() GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) ToGetTrafficPolicyDocumentRuleSecondaryPtrOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryPtrOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) Elem() GetTrafficPolicyDocumentRuleSecondaryOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRuleSecondary) GetTrafficPolicyDocumentRuleSecondary {
		if v != nil {
			return *v
		}
		var ret GetTrafficPolicyDocumentRuleSecondary
		return ret
	}).(GetTrafficPolicyDocumentRuleSecondaryOutput)
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) EndpointReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRuleSecondary) *string {
		if v == nil {
			return nil
		}
		return v.EndpointReference
	}).(pulumi.StringPtrOutput)
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) EvaluateTargetHealth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRuleSecondary) *bool {
		if v == nil {
			return nil
		}
		return v.EvaluateTargetHealth
	}).(pulumi.BoolPtrOutput)
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRuleSecondary) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheck
	}).(pulumi.StringPtrOutput)
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleSecondaryPtrOutput) RuleReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTrafficPolicyDocumentRuleSecondary) *string {
		if v == nil {
			return nil
		}
		return v.RuleReference
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordAliasInput)(nil)).Elem(), RecordAliasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordAliasArrayInput)(nil)).Elem(), RecordAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordCidrRoutingPolicyInput)(nil)).Elem(), RecordCidrRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordCidrRoutingPolicyPtrInput)(nil)).Elem(), RecordCidrRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordFailoverRoutingPolicyInput)(nil)).Elem(), RecordFailoverRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordFailoverRoutingPolicyArrayInput)(nil)).Elem(), RecordFailoverRoutingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeolocationRoutingPolicyInput)(nil)).Elem(), RecordGeolocationRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeolocationRoutingPolicyArrayInput)(nil)).Elem(), RecordGeolocationRoutingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordLatencyRoutingPolicyInput)(nil)).Elem(), RecordLatencyRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordLatencyRoutingPolicyArrayInput)(nil)).Elem(), RecordLatencyRoutingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordWeightedRoutingPolicyInput)(nil)).Elem(), RecordWeightedRoutingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordWeightedRoutingPolicyArrayInput)(nil)).Elem(), RecordWeightedRoutingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointIpAddressInput)(nil)).Elem(), ResolverEndpointIpAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointIpAddressArrayInput)(nil)).Elem(), ResolverEndpointIpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTargetIpInput)(nil)).Elem(), ResolverRuleTargetIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTargetIpArrayInput)(nil)).Elem(), ResolverRuleTargetIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneVpcInput)(nil)).Elem(), ZoneVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneVpcArrayInput)(nil)).Elem(), ZoneVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQueryLogConfigFilterInput)(nil)).Elem(), GetQueryLogConfigFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQueryLogConfigFilterArrayInput)(nil)).Elem(), GetQueryLogConfigFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointFilterInput)(nil)).Elem(), GetResolverEndpointFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointFilterArrayInput)(nil)).Elem(), GetResolverEndpointFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverFirewallRulesFirewallRuleInput)(nil)).Elem(), GetResolverFirewallRulesFirewallRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverFirewallRulesFirewallRuleArrayInput)(nil)).Elem(), GetResolverFirewallRulesFirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentEndpointInput)(nil)).Elem(), GetTrafficPolicyDocumentEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentEndpointArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleGeoProximityLocationInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleGeoProximityLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleGeoProximityLocationArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleGeoProximityLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleItemInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleItemArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleLocationInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleLocationArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRulePrimaryInput)(nil)).Elem(), GetTrafficPolicyDocumentRulePrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRulePrimaryPtrInput)(nil)).Elem(), GetTrafficPolicyDocumentRulePrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleRegionInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleRegionArrayInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleSecondaryInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTrafficPolicyDocumentRuleSecondaryPtrInput)(nil)).Elem(), GetTrafficPolicyDocumentRuleSecondaryArgs{})
	pulumi.RegisterOutputType(RecordAliasOutput{})
	pulumi.RegisterOutputType(RecordAliasArrayOutput{})
	pulumi.RegisterOutputType(RecordCidrRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordCidrRoutingPolicyPtrOutput{})
	pulumi.RegisterOutputType(RecordFailoverRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordFailoverRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(RecordGeolocationRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordGeolocationRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(RecordLatencyRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordLatencyRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(RecordWeightedRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordWeightedRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpAddressOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpAddressArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetIpOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetIpArrayOutput{})
	pulumi.RegisterOutputType(ZoneVpcOutput{})
	pulumi.RegisterOutputType(ZoneVpcArrayOutput{})
	pulumi.RegisterOutputType(GetQueryLogConfigFilterOutput{})
	pulumi.RegisterOutputType(GetQueryLogConfigFilterArrayOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointFilterOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointFilterArrayOutput{})
	pulumi.RegisterOutputType(GetResolverFirewallRulesFirewallRuleOutput{})
	pulumi.RegisterOutputType(GetResolverFirewallRulesFirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentEndpointOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleGeoProximityLocationOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleGeoProximityLocationArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleItemOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleItemArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleLocationOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleLocationArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRulePrimaryOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRulePrimaryPtrOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleRegionOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleRegionArrayOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleSecondaryOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleSecondaryPtrOutput{})
}
