// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HostedZoneDnsSec struct {
	pulumi.CustomResourceState

	HostedZoneId  pulumi.StringOutput    `pulumi:"hostedZoneId"`
	SigningStatus pulumi.StringPtrOutput `pulumi:"signingStatus"`
}

// NewHostedZoneDnsSec registers a new resource with the given unique name, arguments, and options.
func NewHostedZoneDnsSec(ctx *pulumi.Context,
	name string, args *HostedZoneDnsSecArgs, opts ...pulumi.ResourceOption) (*HostedZoneDnsSec, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostedZoneId == nil {
		return nil, errors.New("invalid value for required argument 'HostedZoneId'")
	}
	var resource HostedZoneDnsSec
	err := ctx.RegisterResource("aws:route53/hostedZoneDnsSec:HostedZoneDnsSec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostedZoneDnsSec gets an existing HostedZoneDnsSec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostedZoneDnsSec(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostedZoneDnsSecState, opts ...pulumi.ResourceOption) (*HostedZoneDnsSec, error) {
	var resource HostedZoneDnsSec
	err := ctx.ReadResource("aws:route53/hostedZoneDnsSec:HostedZoneDnsSec", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostedZoneDnsSec resources.
type hostedZoneDnsSecState struct {
	HostedZoneId  *string `pulumi:"hostedZoneId"`
	SigningStatus *string `pulumi:"signingStatus"`
}

type HostedZoneDnsSecState struct {
	HostedZoneId  pulumi.StringPtrInput
	SigningStatus pulumi.StringPtrInput
}

func (HostedZoneDnsSecState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostedZoneDnsSecState)(nil)).Elem()
}

type hostedZoneDnsSecArgs struct {
	HostedZoneId  string  `pulumi:"hostedZoneId"`
	SigningStatus *string `pulumi:"signingStatus"`
}

// The set of arguments for constructing a HostedZoneDnsSec resource.
type HostedZoneDnsSecArgs struct {
	HostedZoneId  pulumi.StringInput
	SigningStatus pulumi.StringPtrInput
}

func (HostedZoneDnsSecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostedZoneDnsSecArgs)(nil)).Elem()
}

type HostedZoneDnsSecInput interface {
	pulumi.Input

	ToHostedZoneDnsSecOutput() HostedZoneDnsSecOutput
	ToHostedZoneDnsSecOutputWithContext(ctx context.Context) HostedZoneDnsSecOutput
}

func (*HostedZoneDnsSec) ElementType() reflect.Type {
	return reflect.TypeOf((**HostedZoneDnsSec)(nil)).Elem()
}

func (i *HostedZoneDnsSec) ToHostedZoneDnsSecOutput() HostedZoneDnsSecOutput {
	return i.ToHostedZoneDnsSecOutputWithContext(context.Background())
}

func (i *HostedZoneDnsSec) ToHostedZoneDnsSecOutputWithContext(ctx context.Context) HostedZoneDnsSecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostedZoneDnsSecOutput)
}

// HostedZoneDnsSecArrayInput is an input type that accepts HostedZoneDnsSecArray and HostedZoneDnsSecArrayOutput values.
// You can construct a concrete instance of `HostedZoneDnsSecArrayInput` via:
//
//	HostedZoneDnsSecArray{ HostedZoneDnsSecArgs{...} }
type HostedZoneDnsSecArrayInput interface {
	pulumi.Input

	ToHostedZoneDnsSecArrayOutput() HostedZoneDnsSecArrayOutput
	ToHostedZoneDnsSecArrayOutputWithContext(context.Context) HostedZoneDnsSecArrayOutput
}

type HostedZoneDnsSecArray []HostedZoneDnsSecInput

func (HostedZoneDnsSecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostedZoneDnsSec)(nil)).Elem()
}

func (i HostedZoneDnsSecArray) ToHostedZoneDnsSecArrayOutput() HostedZoneDnsSecArrayOutput {
	return i.ToHostedZoneDnsSecArrayOutputWithContext(context.Background())
}

func (i HostedZoneDnsSecArray) ToHostedZoneDnsSecArrayOutputWithContext(ctx context.Context) HostedZoneDnsSecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostedZoneDnsSecArrayOutput)
}

// HostedZoneDnsSecMapInput is an input type that accepts HostedZoneDnsSecMap and HostedZoneDnsSecMapOutput values.
// You can construct a concrete instance of `HostedZoneDnsSecMapInput` via:
//
//	HostedZoneDnsSecMap{ "key": HostedZoneDnsSecArgs{...} }
type HostedZoneDnsSecMapInput interface {
	pulumi.Input

	ToHostedZoneDnsSecMapOutput() HostedZoneDnsSecMapOutput
	ToHostedZoneDnsSecMapOutputWithContext(context.Context) HostedZoneDnsSecMapOutput
}

type HostedZoneDnsSecMap map[string]HostedZoneDnsSecInput

func (HostedZoneDnsSecMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostedZoneDnsSec)(nil)).Elem()
}

func (i HostedZoneDnsSecMap) ToHostedZoneDnsSecMapOutput() HostedZoneDnsSecMapOutput {
	return i.ToHostedZoneDnsSecMapOutputWithContext(context.Background())
}

func (i HostedZoneDnsSecMap) ToHostedZoneDnsSecMapOutputWithContext(ctx context.Context) HostedZoneDnsSecMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostedZoneDnsSecMapOutput)
}

type HostedZoneDnsSecOutput struct{ *pulumi.OutputState }

func (HostedZoneDnsSecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostedZoneDnsSec)(nil)).Elem()
}

func (o HostedZoneDnsSecOutput) ToHostedZoneDnsSecOutput() HostedZoneDnsSecOutput {
	return o
}

func (o HostedZoneDnsSecOutput) ToHostedZoneDnsSecOutputWithContext(ctx context.Context) HostedZoneDnsSecOutput {
	return o
}

func (o HostedZoneDnsSecOutput) HostedZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *HostedZoneDnsSec) pulumi.StringOutput { return v.HostedZoneId }).(pulumi.StringOutput)
}

func (o HostedZoneDnsSecOutput) SigningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostedZoneDnsSec) pulumi.StringPtrOutput { return v.SigningStatus }).(pulumi.StringPtrOutput)
}

type HostedZoneDnsSecArrayOutput struct{ *pulumi.OutputState }

func (HostedZoneDnsSecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostedZoneDnsSec)(nil)).Elem()
}

func (o HostedZoneDnsSecArrayOutput) ToHostedZoneDnsSecArrayOutput() HostedZoneDnsSecArrayOutput {
	return o
}

func (o HostedZoneDnsSecArrayOutput) ToHostedZoneDnsSecArrayOutputWithContext(ctx context.Context) HostedZoneDnsSecArrayOutput {
	return o
}

func (o HostedZoneDnsSecArrayOutput) Index(i pulumi.IntInput) HostedZoneDnsSecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostedZoneDnsSec {
		return vs[0].([]*HostedZoneDnsSec)[vs[1].(int)]
	}).(HostedZoneDnsSecOutput)
}

type HostedZoneDnsSecMapOutput struct{ *pulumi.OutputState }

func (HostedZoneDnsSecMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostedZoneDnsSec)(nil)).Elem()
}

func (o HostedZoneDnsSecMapOutput) ToHostedZoneDnsSecMapOutput() HostedZoneDnsSecMapOutput {
	return o
}

func (o HostedZoneDnsSecMapOutput) ToHostedZoneDnsSecMapOutputWithContext(ctx context.Context) HostedZoneDnsSecMapOutput {
	return o
}

func (o HostedZoneDnsSecMapOutput) MapIndex(k pulumi.StringInput) HostedZoneDnsSecOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostedZoneDnsSec {
		return vs[0].(map[string]*HostedZoneDnsSec)[vs[1].(string)]
	}).(HostedZoneDnsSecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostedZoneDnsSecInput)(nil)).Elem(), &HostedZoneDnsSec{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostedZoneDnsSecArrayInput)(nil)).Elem(), HostedZoneDnsSecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostedZoneDnsSecMapInput)(nil)).Elem(), HostedZoneDnsSecMap{})
	pulumi.RegisterOutputType(HostedZoneDnsSecOutput{})
	pulumi.RegisterOutputType(HostedZoneDnsSecArrayOutput{})
	pulumi.RegisterOutputType(HostedZoneDnsSecMapOutput{})
}
