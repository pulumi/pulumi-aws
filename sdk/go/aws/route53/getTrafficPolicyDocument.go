// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Generates an Route53 traffic policy document in JSON format for use with resources that expect policy documents such as `route53.TrafficPolicy`.
//
// ## Example Usage
// ### Basic Example
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := aws.GetRegion(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleTrafficPolicyDocument, err := route53.GetTrafficPolicyDocument(ctx, &route53.GetTrafficPolicyDocumentArgs{
//				RecordType: pulumi.StringRef("A"),
//				StartRule:  pulumi.StringRef("site_switch"),
//				Endpoints: []route53.GetTrafficPolicyDocumentEndpoint{
//					{
//						Id:    "my_elb",
//						Type:  pulumi.StringRef("elastic-load-balancer"),
//						Value: pulumi.StringRef(fmt.Sprintf("elb-111111.%v.elb.amazonaws.com", current.Name)),
//					},
//					{
//						Id:     "site_down_banner",
//						Type:   pulumi.StringRef("s3-website"),
//						Region: pulumi.StringRef(current.Name),
//						Value:  pulumi.StringRef("www.example.com"),
//					},
//				},
//				Rules: []route53.GetTrafficPolicyDocumentRule{
//					{
//						Id:   "site_switch",
//						Type: pulumi.StringRef("failover"),
//						Primary: {
//							EndpointReference: pulumi.StringRef("my_elb"),
//						},
//						Secondary: {
//							EndpointReference: pulumi.StringRef("site_down_banner"),
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = route53.NewTrafficPolicy(ctx, "exampleTrafficPolicy", &route53.TrafficPolicyArgs{
//				Comment:  pulumi.String("example comment"),
//				Document: *pulumi.String(exampleTrafficPolicyDocument.Json),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Complex Example
//
// The following example showcases the use of nested rules within the traffic policy document and introduces the `geoproximity` rule type.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTrafficPolicyDocument, err := route53.GetTrafficPolicyDocument(ctx, &route53.GetTrafficPolicyDocumentArgs{
//				RecordType: pulumi.StringRef("A"),
//				StartRule:  pulumi.StringRef("geoproximity_rule"),
//				Endpoints: []route53.GetTrafficPolicyDocumentEndpoint{
//					{
//						Id:    "na_endpoint_a",
//						Type:  pulumi.StringRef("elastic-load-balancer"),
//						Value: pulumi.StringRef("elb-111111.us-west-1.elb.amazonaws.com"),
//					},
//					{
//						Id:    "na_endpoint_b",
//						Type:  pulumi.StringRef("elastic-load-balancer"),
//						Value: pulumi.StringRef("elb-222222.us-west-1.elb.amazonaws.com"),
//					},
//					{
//						Id:    "eu_endpoint",
//						Type:  pulumi.StringRef("elastic-load-balancer"),
//						Value: pulumi.StringRef("elb-333333.eu-west-1.elb.amazonaws.com"),
//					},
//					{
//						Id:    "ap_endpoint",
//						Type:  pulumi.StringRef("elastic-load-balancer"),
//						Value: pulumi.StringRef("elb-444444.ap-northeast-2.elb.amazonaws.com"),
//					},
//				},
//				Rules: pulumi.Array{
//					route53.GetTrafficPolicyDocumentRule{
//						Id:   "na_rule",
//						Type: pulumi.StringRef("failover"),
//						Primary: route53.GetTrafficPolicyDocumentRulePrimary{
//							EndpointReference: pulumi.StringRef("na_endpoint_a"),
//						},
//						Secondary: route53.GetTrafficPolicyDocumentRuleSecondary{
//							EndpointReference: pulumi.StringRef("na_endpoint_b"),
//						},
//					},
//					route53.GetTrafficPolicyDocumentRule{
//						Id:   "geoproximity_rule",
//						Type: pulumi.StringRef("geoproximity"),
//						GeoProximityLocations: []route53.GetTrafficPolicyDocumentRuleGeoProximityLocation{
//							{
//								Region:               pulumi.StringRef("aws:route53:us-west-1"),
//								Bias:                 pulumi.StringRef("10"),
//								EvaluateTargetHealth: pulumi.BoolRef(true),
//								RuleReference:        pulumi.StringRef("na_rule"),
//							},
//							{
//								Region:               pulumi.StringRef("aws:route53:eu-west-1"),
//								Bias:                 pulumi.StringRef("10"),
//								EvaluateTargetHealth: pulumi.BoolRef(true),
//								EndpointReference:    pulumi.StringRef("eu_endpoint"),
//							},
//							{
//								Region:               pulumi.StringRef("aws:route53:ap-northeast-2"),
//								Bias:                 pulumi.StringRef("0"),
//								EvaluateTargetHealth: pulumi.BoolRef(true),
//								EndpointReference:    pulumi.StringRef("ap_endpoint"),
//							},
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = route53.NewTrafficPolicy(ctx, "exampleTrafficPolicy", &route53.TrafficPolicyArgs{
//				Comment:  pulumi.String("example comment"),
//				Document: *pulumi.String(exampleTrafficPolicyDocument.Json),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTrafficPolicyDocument(ctx *pulumi.Context, args *GetTrafficPolicyDocumentArgs, opts ...pulumi.InvokeOption) (*GetTrafficPolicyDocumentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTrafficPolicyDocumentResult
	err := ctx.Invoke("aws:route53/getTrafficPolicyDocument:getTrafficPolicyDocument", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTrafficPolicyDocument.
type GetTrafficPolicyDocumentArgs struct {
	// Configuration block for the definitions of the endpoints that you want to use in this traffic policy. See below
	Endpoints []GetTrafficPolicyDocumentEndpoint `pulumi:"endpoints"`
	// DNS type of all of the resource record sets that Amazon Route 53 will create based on this traffic policy.
	RecordType *string `pulumi:"recordType"`
	// Configuration block for definitions of the rules that you want to use in this traffic policy. See below
	Rules []GetTrafficPolicyDocumentRule `pulumi:"rules"`
	// An endpoint to be as the starting point for the traffic policy.
	StartEndpoint *string `pulumi:"startEndpoint"`
	// A rule to be as the starting point for the traffic policy.
	StartRule *string `pulumi:"startRule"`
	// Version of the traffic policy format.
	Version *string `pulumi:"version"`
}

// A collection of values returned by getTrafficPolicyDocument.
type GetTrafficPolicyDocumentResult struct {
	Endpoints []GetTrafficPolicyDocumentEndpoint `pulumi:"endpoints"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Standard JSON policy document rendered based on the arguments above.
	Json          string                         `pulumi:"json"`
	RecordType    *string                        `pulumi:"recordType"`
	Rules         []GetTrafficPolicyDocumentRule `pulumi:"rules"`
	StartEndpoint *string                        `pulumi:"startEndpoint"`
	StartRule     *string                        `pulumi:"startRule"`
	Version       *string                        `pulumi:"version"`
}

func GetTrafficPolicyDocumentOutput(ctx *pulumi.Context, args GetTrafficPolicyDocumentOutputArgs, opts ...pulumi.InvokeOption) GetTrafficPolicyDocumentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTrafficPolicyDocumentResult, error) {
			args := v.(GetTrafficPolicyDocumentArgs)
			r, err := GetTrafficPolicyDocument(ctx, &args, opts...)
			var s GetTrafficPolicyDocumentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTrafficPolicyDocumentResultOutput)
}

// A collection of arguments for invoking getTrafficPolicyDocument.
type GetTrafficPolicyDocumentOutputArgs struct {
	// Configuration block for the definitions of the endpoints that you want to use in this traffic policy. See below
	Endpoints GetTrafficPolicyDocumentEndpointArrayInput `pulumi:"endpoints"`
	// DNS type of all of the resource record sets that Amazon Route 53 will create based on this traffic policy.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// Configuration block for definitions of the rules that you want to use in this traffic policy. See below
	Rules GetTrafficPolicyDocumentRuleArrayInput `pulumi:"rules"`
	// An endpoint to be as the starting point for the traffic policy.
	StartEndpoint pulumi.StringPtrInput `pulumi:"startEndpoint"`
	// A rule to be as the starting point for the traffic policy.
	StartRule pulumi.StringPtrInput `pulumi:"startRule"`
	// Version of the traffic policy format.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GetTrafficPolicyDocumentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentArgs)(nil)).Elem()
}

// A collection of values returned by getTrafficPolicyDocument.
type GetTrafficPolicyDocumentResultOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentResult)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentResultOutput) ToGetTrafficPolicyDocumentResultOutput() GetTrafficPolicyDocumentResultOutput {
	return o
}

func (o GetTrafficPolicyDocumentResultOutput) ToGetTrafficPolicyDocumentResultOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentResultOutput {
	return o
}

func (o GetTrafficPolicyDocumentResultOutput) Endpoints() GetTrafficPolicyDocumentEndpointArrayOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentResult) []GetTrafficPolicyDocumentEndpoint { return v.Endpoints }).(GetTrafficPolicyDocumentEndpointArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetTrafficPolicyDocumentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Standard JSON policy document rendered based on the arguments above.
func (o GetTrafficPolicyDocumentResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentResult) string { return v.Json }).(pulumi.StringOutput)
}

func (o GetTrafficPolicyDocumentResultOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentResult) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

func (o GetTrafficPolicyDocumentResultOutput) Rules() GetTrafficPolicyDocumentRuleArrayOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentResult) []GetTrafficPolicyDocumentRule { return v.Rules }).(GetTrafficPolicyDocumentRuleArrayOutput)
}

func (o GetTrafficPolicyDocumentResultOutput) StartEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentResult) *string { return v.StartEndpoint }).(pulumi.StringPtrOutput)
}

func (o GetTrafficPolicyDocumentResultOutput) StartRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentResult) *string { return v.StartRule }).(pulumi.StringPtrOutput)
}

func (o GetTrafficPolicyDocumentResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficPolicyDocumentResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentResultOutput{})
}
