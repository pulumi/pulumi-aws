// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ResolverDnsSecConfig struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput `pulumi:"arn"`
	OwnerId          pulumi.StringOutput `pulumi:"ownerId"`
	ResourceId       pulumi.StringOutput `pulumi:"resourceId"`
	ValidationStatus pulumi.StringOutput `pulumi:"validationStatus"`
}

// NewResolverDnsSecConfig registers a new resource with the given unique name, arguments, and options.
func NewResolverDnsSecConfig(ctx *pulumi.Context,
	name string, args *ResolverDnsSecConfigArgs, opts ...pulumi.ResourceOption) (*ResolverDnsSecConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	var resource ResolverDnsSecConfig
	err := ctx.RegisterResource("aws:route53/resolverDnsSecConfig:ResolverDnsSecConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverDnsSecConfig gets an existing ResolverDnsSecConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverDnsSecConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverDnsSecConfigState, opts ...pulumi.ResourceOption) (*ResolverDnsSecConfig, error) {
	var resource ResolverDnsSecConfig
	err := ctx.ReadResource("aws:route53/resolverDnsSecConfig:ResolverDnsSecConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverDnsSecConfig resources.
type resolverDnsSecConfigState struct {
	Arn              *string `pulumi:"arn"`
	OwnerId          *string `pulumi:"ownerId"`
	ResourceId       *string `pulumi:"resourceId"`
	ValidationStatus *string `pulumi:"validationStatus"`
}

type ResolverDnsSecConfigState struct {
	Arn              pulumi.StringPtrInput
	OwnerId          pulumi.StringPtrInput
	ResourceId       pulumi.StringPtrInput
	ValidationStatus pulumi.StringPtrInput
}

func (ResolverDnsSecConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverDnsSecConfigState)(nil)).Elem()
}

type resolverDnsSecConfigArgs struct {
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a ResolverDnsSecConfig resource.
type ResolverDnsSecConfigArgs struct {
	ResourceId pulumi.StringInput
}

func (ResolverDnsSecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverDnsSecConfigArgs)(nil)).Elem()
}

type ResolverDnsSecConfigInput interface {
	pulumi.Input

	ToResolverDnsSecConfigOutput() ResolverDnsSecConfigOutput
	ToResolverDnsSecConfigOutputWithContext(ctx context.Context) ResolverDnsSecConfigOutput
}

func (*ResolverDnsSecConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverDnsSecConfig)(nil)).Elem()
}

func (i *ResolverDnsSecConfig) ToResolverDnsSecConfigOutput() ResolverDnsSecConfigOutput {
	return i.ToResolverDnsSecConfigOutputWithContext(context.Background())
}

func (i *ResolverDnsSecConfig) ToResolverDnsSecConfigOutputWithContext(ctx context.Context) ResolverDnsSecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverDnsSecConfigOutput)
}

// ResolverDnsSecConfigArrayInput is an input type that accepts ResolverDnsSecConfigArray and ResolverDnsSecConfigArrayOutput values.
// You can construct a concrete instance of `ResolverDnsSecConfigArrayInput` via:
//
//	ResolverDnsSecConfigArray{ ResolverDnsSecConfigArgs{...} }
type ResolverDnsSecConfigArrayInput interface {
	pulumi.Input

	ToResolverDnsSecConfigArrayOutput() ResolverDnsSecConfigArrayOutput
	ToResolverDnsSecConfigArrayOutputWithContext(context.Context) ResolverDnsSecConfigArrayOutput
}

type ResolverDnsSecConfigArray []ResolverDnsSecConfigInput

func (ResolverDnsSecConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverDnsSecConfig)(nil)).Elem()
}

func (i ResolverDnsSecConfigArray) ToResolverDnsSecConfigArrayOutput() ResolverDnsSecConfigArrayOutput {
	return i.ToResolverDnsSecConfigArrayOutputWithContext(context.Background())
}

func (i ResolverDnsSecConfigArray) ToResolverDnsSecConfigArrayOutputWithContext(ctx context.Context) ResolverDnsSecConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverDnsSecConfigArrayOutput)
}

// ResolverDnsSecConfigMapInput is an input type that accepts ResolverDnsSecConfigMap and ResolverDnsSecConfigMapOutput values.
// You can construct a concrete instance of `ResolverDnsSecConfigMapInput` via:
//
//	ResolverDnsSecConfigMap{ "key": ResolverDnsSecConfigArgs{...} }
type ResolverDnsSecConfigMapInput interface {
	pulumi.Input

	ToResolverDnsSecConfigMapOutput() ResolverDnsSecConfigMapOutput
	ToResolverDnsSecConfigMapOutputWithContext(context.Context) ResolverDnsSecConfigMapOutput
}

type ResolverDnsSecConfigMap map[string]ResolverDnsSecConfigInput

func (ResolverDnsSecConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverDnsSecConfig)(nil)).Elem()
}

func (i ResolverDnsSecConfigMap) ToResolverDnsSecConfigMapOutput() ResolverDnsSecConfigMapOutput {
	return i.ToResolverDnsSecConfigMapOutputWithContext(context.Background())
}

func (i ResolverDnsSecConfigMap) ToResolverDnsSecConfigMapOutputWithContext(ctx context.Context) ResolverDnsSecConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverDnsSecConfigMapOutput)
}

type ResolverDnsSecConfigOutput struct{ *pulumi.OutputState }

func (ResolverDnsSecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverDnsSecConfig)(nil)).Elem()
}

func (o ResolverDnsSecConfigOutput) ToResolverDnsSecConfigOutput() ResolverDnsSecConfigOutput {
	return o
}

func (o ResolverDnsSecConfigOutput) ToResolverDnsSecConfigOutputWithContext(ctx context.Context) ResolverDnsSecConfigOutput {
	return o
}

func (o ResolverDnsSecConfigOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverDnsSecConfig) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ResolverDnsSecConfigOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverDnsSecConfig) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o ResolverDnsSecConfigOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverDnsSecConfig) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

func (o ResolverDnsSecConfigOutput) ValidationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverDnsSecConfig) pulumi.StringOutput { return v.ValidationStatus }).(pulumi.StringOutput)
}

type ResolverDnsSecConfigArrayOutput struct{ *pulumi.OutputState }

func (ResolverDnsSecConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverDnsSecConfig)(nil)).Elem()
}

func (o ResolverDnsSecConfigArrayOutput) ToResolverDnsSecConfigArrayOutput() ResolverDnsSecConfigArrayOutput {
	return o
}

func (o ResolverDnsSecConfigArrayOutput) ToResolverDnsSecConfigArrayOutputWithContext(ctx context.Context) ResolverDnsSecConfigArrayOutput {
	return o
}

func (o ResolverDnsSecConfigArrayOutput) Index(i pulumi.IntInput) ResolverDnsSecConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResolverDnsSecConfig {
		return vs[0].([]*ResolverDnsSecConfig)[vs[1].(int)]
	}).(ResolverDnsSecConfigOutput)
}

type ResolverDnsSecConfigMapOutput struct{ *pulumi.OutputState }

func (ResolverDnsSecConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverDnsSecConfig)(nil)).Elem()
}

func (o ResolverDnsSecConfigMapOutput) ToResolverDnsSecConfigMapOutput() ResolverDnsSecConfigMapOutput {
	return o
}

func (o ResolverDnsSecConfigMapOutput) ToResolverDnsSecConfigMapOutputWithContext(ctx context.Context) ResolverDnsSecConfigMapOutput {
	return o
}

func (o ResolverDnsSecConfigMapOutput) MapIndex(k pulumi.StringInput) ResolverDnsSecConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResolverDnsSecConfig {
		return vs[0].(map[string]*ResolverDnsSecConfig)[vs[1].(string)]
	}).(ResolverDnsSecConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverDnsSecConfigInput)(nil)).Elem(), &ResolverDnsSecConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverDnsSecConfigArrayInput)(nil)).Elem(), ResolverDnsSecConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverDnsSecConfigMapInput)(nil)).Elem(), ResolverDnsSecConfigMap{})
	pulumi.RegisterOutputType(ResolverDnsSecConfigOutput{})
	pulumi.RegisterOutputType(ResolverDnsSecConfigArrayOutput{})
	pulumi.RegisterOutputType(ResolverDnsSecConfigMapOutput{})
}
