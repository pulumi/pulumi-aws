// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ResolverQueryLogConfig struct {
	pulumi.CustomResourceState

	Arn            pulumi.StringOutput    `pulumi:"arn"`
	DestinationArn pulumi.StringOutput    `pulumi:"destinationArn"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	OwnerId        pulumi.StringOutput    `pulumi:"ownerId"`
	ShareStatus    pulumi.StringOutput    `pulumi:"shareStatus"`
	Tags           pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll        pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewResolverQueryLogConfig registers a new resource with the given unique name, arguments, and options.
func NewResolverQueryLogConfig(ctx *pulumi.Context,
	name string, args *ResolverQueryLogConfigArgs, opts ...pulumi.ResourceOption) (*ResolverQueryLogConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationArn == nil {
		return nil, errors.New("invalid value for required argument 'DestinationArn'")
	}
	var resource ResolverQueryLogConfig
	err := ctx.RegisterResource("aws:route53/resolverQueryLogConfig:ResolverQueryLogConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverQueryLogConfig gets an existing ResolverQueryLogConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverQueryLogConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverQueryLogConfigState, opts ...pulumi.ResourceOption) (*ResolverQueryLogConfig, error) {
	var resource ResolverQueryLogConfig
	err := ctx.ReadResource("aws:route53/resolverQueryLogConfig:ResolverQueryLogConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverQueryLogConfig resources.
type resolverQueryLogConfigState struct {
	Arn            *string           `pulumi:"arn"`
	DestinationArn *string           `pulumi:"destinationArn"`
	Name           *string           `pulumi:"name"`
	OwnerId        *string           `pulumi:"ownerId"`
	ShareStatus    *string           `pulumi:"shareStatus"`
	Tags           map[string]string `pulumi:"tags"`
	TagsAll        map[string]string `pulumi:"tagsAll"`
}

type ResolverQueryLogConfigState struct {
	Arn            pulumi.StringPtrInput
	DestinationArn pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	OwnerId        pulumi.StringPtrInput
	ShareStatus    pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
	TagsAll        pulumi.StringMapInput
}

func (ResolverQueryLogConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverQueryLogConfigState)(nil)).Elem()
}

type resolverQueryLogConfigArgs struct {
	DestinationArn string            `pulumi:"destinationArn"`
	Name           *string           `pulumi:"name"`
	Tags           map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ResolverQueryLogConfig resource.
type ResolverQueryLogConfigArgs struct {
	DestinationArn pulumi.StringInput
	Name           pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
}

func (ResolverQueryLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverQueryLogConfigArgs)(nil)).Elem()
}

type ResolverQueryLogConfigInput interface {
	pulumi.Input

	ToResolverQueryLogConfigOutput() ResolverQueryLogConfigOutput
	ToResolverQueryLogConfigOutputWithContext(ctx context.Context) ResolverQueryLogConfigOutput
}

func (*ResolverQueryLogConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverQueryLogConfig)(nil)).Elem()
}

func (i *ResolverQueryLogConfig) ToResolverQueryLogConfigOutput() ResolverQueryLogConfigOutput {
	return i.ToResolverQueryLogConfigOutputWithContext(context.Background())
}

func (i *ResolverQueryLogConfig) ToResolverQueryLogConfigOutputWithContext(ctx context.Context) ResolverQueryLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverQueryLogConfigOutput)
}

// ResolverQueryLogConfigArrayInput is an input type that accepts ResolverQueryLogConfigArray and ResolverQueryLogConfigArrayOutput values.
// You can construct a concrete instance of `ResolverQueryLogConfigArrayInput` via:
//
//	ResolverQueryLogConfigArray{ ResolverQueryLogConfigArgs{...} }
type ResolverQueryLogConfigArrayInput interface {
	pulumi.Input

	ToResolverQueryLogConfigArrayOutput() ResolverQueryLogConfigArrayOutput
	ToResolverQueryLogConfigArrayOutputWithContext(context.Context) ResolverQueryLogConfigArrayOutput
}

type ResolverQueryLogConfigArray []ResolverQueryLogConfigInput

func (ResolverQueryLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverQueryLogConfig)(nil)).Elem()
}

func (i ResolverQueryLogConfigArray) ToResolverQueryLogConfigArrayOutput() ResolverQueryLogConfigArrayOutput {
	return i.ToResolverQueryLogConfigArrayOutputWithContext(context.Background())
}

func (i ResolverQueryLogConfigArray) ToResolverQueryLogConfigArrayOutputWithContext(ctx context.Context) ResolverQueryLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverQueryLogConfigArrayOutput)
}

// ResolverQueryLogConfigMapInput is an input type that accepts ResolverQueryLogConfigMap and ResolverQueryLogConfigMapOutput values.
// You can construct a concrete instance of `ResolverQueryLogConfigMapInput` via:
//
//	ResolverQueryLogConfigMap{ "key": ResolverQueryLogConfigArgs{...} }
type ResolverQueryLogConfigMapInput interface {
	pulumi.Input

	ToResolverQueryLogConfigMapOutput() ResolverQueryLogConfigMapOutput
	ToResolverQueryLogConfigMapOutputWithContext(context.Context) ResolverQueryLogConfigMapOutput
}

type ResolverQueryLogConfigMap map[string]ResolverQueryLogConfigInput

func (ResolverQueryLogConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverQueryLogConfig)(nil)).Elem()
}

func (i ResolverQueryLogConfigMap) ToResolverQueryLogConfigMapOutput() ResolverQueryLogConfigMapOutput {
	return i.ToResolverQueryLogConfigMapOutputWithContext(context.Background())
}

func (i ResolverQueryLogConfigMap) ToResolverQueryLogConfigMapOutputWithContext(ctx context.Context) ResolverQueryLogConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverQueryLogConfigMapOutput)
}

type ResolverQueryLogConfigOutput struct{ *pulumi.OutputState }

func (ResolverQueryLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverQueryLogConfig)(nil)).Elem()
}

func (o ResolverQueryLogConfigOutput) ToResolverQueryLogConfigOutput() ResolverQueryLogConfigOutput {
	return o
}

func (o ResolverQueryLogConfigOutput) ToResolverQueryLogConfigOutputWithContext(ctx context.Context) ResolverQueryLogConfigOutput {
	return o
}

func (o ResolverQueryLogConfigOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverQueryLogConfig) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ResolverQueryLogConfigOutput) DestinationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverQueryLogConfig) pulumi.StringOutput { return v.DestinationArn }).(pulumi.StringOutput)
}

func (o ResolverQueryLogConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverQueryLogConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ResolverQueryLogConfigOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverQueryLogConfig) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o ResolverQueryLogConfigOutput) ShareStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverQueryLogConfig) pulumi.StringOutput { return v.ShareStatus }).(pulumi.StringOutput)
}

func (o ResolverQueryLogConfigOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResolverQueryLogConfig) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ResolverQueryLogConfigOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResolverQueryLogConfig) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ResolverQueryLogConfigArrayOutput struct{ *pulumi.OutputState }

func (ResolverQueryLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverQueryLogConfig)(nil)).Elem()
}

func (o ResolverQueryLogConfigArrayOutput) ToResolverQueryLogConfigArrayOutput() ResolverQueryLogConfigArrayOutput {
	return o
}

func (o ResolverQueryLogConfigArrayOutput) ToResolverQueryLogConfigArrayOutputWithContext(ctx context.Context) ResolverQueryLogConfigArrayOutput {
	return o
}

func (o ResolverQueryLogConfigArrayOutput) Index(i pulumi.IntInput) ResolverQueryLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResolverQueryLogConfig {
		return vs[0].([]*ResolverQueryLogConfig)[vs[1].(int)]
	}).(ResolverQueryLogConfigOutput)
}

type ResolverQueryLogConfigMapOutput struct{ *pulumi.OutputState }

func (ResolverQueryLogConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverQueryLogConfig)(nil)).Elem()
}

func (o ResolverQueryLogConfigMapOutput) ToResolverQueryLogConfigMapOutput() ResolverQueryLogConfigMapOutput {
	return o
}

func (o ResolverQueryLogConfigMapOutput) ToResolverQueryLogConfigMapOutputWithContext(ctx context.Context) ResolverQueryLogConfigMapOutput {
	return o
}

func (o ResolverQueryLogConfigMapOutput) MapIndex(k pulumi.StringInput) ResolverQueryLogConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResolverQueryLogConfig {
		return vs[0].(map[string]*ResolverQueryLogConfig)[vs[1].(string)]
	}).(ResolverQueryLogConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverQueryLogConfigInput)(nil)).Elem(), &ResolverQueryLogConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverQueryLogConfigArrayInput)(nil)).Elem(), ResolverQueryLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverQueryLogConfigMapInput)(nil)).Elem(), ResolverQueryLogConfigMap{})
	pulumi.RegisterOutputType(ResolverQueryLogConfigOutput{})
	pulumi.RegisterOutputType(ResolverQueryLogConfigArrayOutput{})
	pulumi.RegisterOutputType(ResolverQueryLogConfigMapOutput{})
}
