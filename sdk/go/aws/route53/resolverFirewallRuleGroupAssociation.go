// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ResolverFirewallRuleGroupAssociation struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput    `pulumi:"arn"`
	FirewallRuleGroupId pulumi.StringOutput    `pulumi:"firewallRuleGroupId"`
	MutationProtection  pulumi.StringOutput    `pulumi:"mutationProtection"`
	Name                pulumi.StringOutput    `pulumi:"name"`
	Priority            pulumi.IntOutput       `pulumi:"priority"`
	Tags                pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput `pulumi:"tagsAll"`
	VpcId               pulumi.StringOutput    `pulumi:"vpcId"`
}

// NewResolverFirewallRuleGroupAssociation registers a new resource with the given unique name, arguments, and options.
func NewResolverFirewallRuleGroupAssociation(ctx *pulumi.Context,
	name string, args *ResolverFirewallRuleGroupAssociationArgs, opts ...pulumi.ResourceOption) (*ResolverFirewallRuleGroupAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FirewallRuleGroupId == nil {
		return nil, errors.New("invalid value for required argument 'FirewallRuleGroupId'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource ResolverFirewallRuleGroupAssociation
	err := ctx.RegisterResource("aws:route53/resolverFirewallRuleGroupAssociation:ResolverFirewallRuleGroupAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverFirewallRuleGroupAssociation gets an existing ResolverFirewallRuleGroupAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverFirewallRuleGroupAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverFirewallRuleGroupAssociationState, opts ...pulumi.ResourceOption) (*ResolverFirewallRuleGroupAssociation, error) {
	var resource ResolverFirewallRuleGroupAssociation
	err := ctx.ReadResource("aws:route53/resolverFirewallRuleGroupAssociation:ResolverFirewallRuleGroupAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverFirewallRuleGroupAssociation resources.
type resolverFirewallRuleGroupAssociationState struct {
	Arn                 *string           `pulumi:"arn"`
	FirewallRuleGroupId *string           `pulumi:"firewallRuleGroupId"`
	MutationProtection  *string           `pulumi:"mutationProtection"`
	Name                *string           `pulumi:"name"`
	Priority            *int              `pulumi:"priority"`
	Tags                map[string]string `pulumi:"tags"`
	TagsAll             map[string]string `pulumi:"tagsAll"`
	VpcId               *string           `pulumi:"vpcId"`
}

type ResolverFirewallRuleGroupAssociationState struct {
	Arn                 pulumi.StringPtrInput
	FirewallRuleGroupId pulumi.StringPtrInput
	MutationProtection  pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Priority            pulumi.IntPtrInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
	VpcId               pulumi.StringPtrInput
}

func (ResolverFirewallRuleGroupAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverFirewallRuleGroupAssociationState)(nil)).Elem()
}

type resolverFirewallRuleGroupAssociationArgs struct {
	FirewallRuleGroupId string            `pulumi:"firewallRuleGroupId"`
	MutationProtection  *string           `pulumi:"mutationProtection"`
	Name                *string           `pulumi:"name"`
	Priority            int               `pulumi:"priority"`
	Tags                map[string]string `pulumi:"tags"`
	VpcId               string            `pulumi:"vpcId"`
}

// The set of arguments for constructing a ResolverFirewallRuleGroupAssociation resource.
type ResolverFirewallRuleGroupAssociationArgs struct {
	FirewallRuleGroupId pulumi.StringInput
	MutationProtection  pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Priority            pulumi.IntInput
	Tags                pulumi.StringMapInput
	VpcId               pulumi.StringInput
}

func (ResolverFirewallRuleGroupAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverFirewallRuleGroupAssociationArgs)(nil)).Elem()
}

type ResolverFirewallRuleGroupAssociationInput interface {
	pulumi.Input

	ToResolverFirewallRuleGroupAssociationOutput() ResolverFirewallRuleGroupAssociationOutput
	ToResolverFirewallRuleGroupAssociationOutputWithContext(ctx context.Context) ResolverFirewallRuleGroupAssociationOutput
}

func (*ResolverFirewallRuleGroupAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverFirewallRuleGroupAssociation)(nil)).Elem()
}

func (i *ResolverFirewallRuleGroupAssociation) ToResolverFirewallRuleGroupAssociationOutput() ResolverFirewallRuleGroupAssociationOutput {
	return i.ToResolverFirewallRuleGroupAssociationOutputWithContext(context.Background())
}

func (i *ResolverFirewallRuleGroupAssociation) ToResolverFirewallRuleGroupAssociationOutputWithContext(ctx context.Context) ResolverFirewallRuleGroupAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverFirewallRuleGroupAssociationOutput)
}

// ResolverFirewallRuleGroupAssociationArrayInput is an input type that accepts ResolverFirewallRuleGroupAssociationArray and ResolverFirewallRuleGroupAssociationArrayOutput values.
// You can construct a concrete instance of `ResolverFirewallRuleGroupAssociationArrayInput` via:
//
//	ResolverFirewallRuleGroupAssociationArray{ ResolverFirewallRuleGroupAssociationArgs{...} }
type ResolverFirewallRuleGroupAssociationArrayInput interface {
	pulumi.Input

	ToResolverFirewallRuleGroupAssociationArrayOutput() ResolverFirewallRuleGroupAssociationArrayOutput
	ToResolverFirewallRuleGroupAssociationArrayOutputWithContext(context.Context) ResolverFirewallRuleGroupAssociationArrayOutput
}

type ResolverFirewallRuleGroupAssociationArray []ResolverFirewallRuleGroupAssociationInput

func (ResolverFirewallRuleGroupAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverFirewallRuleGroupAssociation)(nil)).Elem()
}

func (i ResolverFirewallRuleGroupAssociationArray) ToResolverFirewallRuleGroupAssociationArrayOutput() ResolverFirewallRuleGroupAssociationArrayOutput {
	return i.ToResolverFirewallRuleGroupAssociationArrayOutputWithContext(context.Background())
}

func (i ResolverFirewallRuleGroupAssociationArray) ToResolverFirewallRuleGroupAssociationArrayOutputWithContext(ctx context.Context) ResolverFirewallRuleGroupAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverFirewallRuleGroupAssociationArrayOutput)
}

// ResolverFirewallRuleGroupAssociationMapInput is an input type that accepts ResolverFirewallRuleGroupAssociationMap and ResolverFirewallRuleGroupAssociationMapOutput values.
// You can construct a concrete instance of `ResolverFirewallRuleGroupAssociationMapInput` via:
//
//	ResolverFirewallRuleGroupAssociationMap{ "key": ResolverFirewallRuleGroupAssociationArgs{...} }
type ResolverFirewallRuleGroupAssociationMapInput interface {
	pulumi.Input

	ToResolverFirewallRuleGroupAssociationMapOutput() ResolverFirewallRuleGroupAssociationMapOutput
	ToResolverFirewallRuleGroupAssociationMapOutputWithContext(context.Context) ResolverFirewallRuleGroupAssociationMapOutput
}

type ResolverFirewallRuleGroupAssociationMap map[string]ResolverFirewallRuleGroupAssociationInput

func (ResolverFirewallRuleGroupAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverFirewallRuleGroupAssociation)(nil)).Elem()
}

func (i ResolverFirewallRuleGroupAssociationMap) ToResolverFirewallRuleGroupAssociationMapOutput() ResolverFirewallRuleGroupAssociationMapOutput {
	return i.ToResolverFirewallRuleGroupAssociationMapOutputWithContext(context.Background())
}

func (i ResolverFirewallRuleGroupAssociationMap) ToResolverFirewallRuleGroupAssociationMapOutputWithContext(ctx context.Context) ResolverFirewallRuleGroupAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverFirewallRuleGroupAssociationMapOutput)
}

type ResolverFirewallRuleGroupAssociationOutput struct{ *pulumi.OutputState }

func (ResolverFirewallRuleGroupAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverFirewallRuleGroupAssociation)(nil)).Elem()
}

func (o ResolverFirewallRuleGroupAssociationOutput) ToResolverFirewallRuleGroupAssociationOutput() ResolverFirewallRuleGroupAssociationOutput {
	return o
}

func (o ResolverFirewallRuleGroupAssociationOutput) ToResolverFirewallRuleGroupAssociationOutputWithContext(ctx context.Context) ResolverFirewallRuleGroupAssociationOutput {
	return o
}

func (o ResolverFirewallRuleGroupAssociationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverFirewallRuleGroupAssociation) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ResolverFirewallRuleGroupAssociationOutput) FirewallRuleGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverFirewallRuleGroupAssociation) pulumi.StringOutput { return v.FirewallRuleGroupId }).(pulumi.StringOutput)
}

func (o ResolverFirewallRuleGroupAssociationOutput) MutationProtection() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverFirewallRuleGroupAssociation) pulumi.StringOutput { return v.MutationProtection }).(pulumi.StringOutput)
}

func (o ResolverFirewallRuleGroupAssociationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverFirewallRuleGroupAssociation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ResolverFirewallRuleGroupAssociationOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *ResolverFirewallRuleGroupAssociation) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o ResolverFirewallRuleGroupAssociationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResolverFirewallRuleGroupAssociation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ResolverFirewallRuleGroupAssociationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResolverFirewallRuleGroupAssociation) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ResolverFirewallRuleGroupAssociationOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverFirewallRuleGroupAssociation) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ResolverFirewallRuleGroupAssociationArrayOutput struct{ *pulumi.OutputState }

func (ResolverFirewallRuleGroupAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverFirewallRuleGroupAssociation)(nil)).Elem()
}

func (o ResolverFirewallRuleGroupAssociationArrayOutput) ToResolverFirewallRuleGroupAssociationArrayOutput() ResolverFirewallRuleGroupAssociationArrayOutput {
	return o
}

func (o ResolverFirewallRuleGroupAssociationArrayOutput) ToResolverFirewallRuleGroupAssociationArrayOutputWithContext(ctx context.Context) ResolverFirewallRuleGroupAssociationArrayOutput {
	return o
}

func (o ResolverFirewallRuleGroupAssociationArrayOutput) Index(i pulumi.IntInput) ResolverFirewallRuleGroupAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResolverFirewallRuleGroupAssociation {
		return vs[0].([]*ResolverFirewallRuleGroupAssociation)[vs[1].(int)]
	}).(ResolverFirewallRuleGroupAssociationOutput)
}

type ResolverFirewallRuleGroupAssociationMapOutput struct{ *pulumi.OutputState }

func (ResolverFirewallRuleGroupAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverFirewallRuleGroupAssociation)(nil)).Elem()
}

func (o ResolverFirewallRuleGroupAssociationMapOutput) ToResolverFirewallRuleGroupAssociationMapOutput() ResolverFirewallRuleGroupAssociationMapOutput {
	return o
}

func (o ResolverFirewallRuleGroupAssociationMapOutput) ToResolverFirewallRuleGroupAssociationMapOutputWithContext(ctx context.Context) ResolverFirewallRuleGroupAssociationMapOutput {
	return o
}

func (o ResolverFirewallRuleGroupAssociationMapOutput) MapIndex(k pulumi.StringInput) ResolverFirewallRuleGroupAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResolverFirewallRuleGroupAssociation {
		return vs[0].(map[string]*ResolverFirewallRuleGroupAssociation)[vs[1].(string)]
	}).(ResolverFirewallRuleGroupAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverFirewallRuleGroupAssociationInput)(nil)).Elem(), &ResolverFirewallRuleGroupAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverFirewallRuleGroupAssociationArrayInput)(nil)).Elem(), ResolverFirewallRuleGroupAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverFirewallRuleGroupAssociationMapInput)(nil)).Elem(), ResolverFirewallRuleGroupAssociationMap{})
	pulumi.RegisterOutputType(ResolverFirewallRuleGroupAssociationOutput{})
	pulumi.RegisterOutputType(ResolverFirewallRuleGroupAssociationArrayOutput{})
	pulumi.RegisterOutputType(ResolverFirewallRuleGroupAssociationMapOutput{})
}
