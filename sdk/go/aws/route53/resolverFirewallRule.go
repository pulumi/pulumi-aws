// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ResolverFirewallRule struct {
	pulumi.CustomResourceState

	Action               pulumi.StringOutput    `pulumi:"action"`
	BlockOverrideDnsType pulumi.StringPtrOutput `pulumi:"blockOverrideDnsType"`
	BlockOverrideDomain  pulumi.StringPtrOutput `pulumi:"blockOverrideDomain"`
	BlockOverrideTtl     pulumi.IntPtrOutput    `pulumi:"blockOverrideTtl"`
	BlockResponse        pulumi.StringPtrOutput `pulumi:"blockResponse"`
	FirewallDomainListId pulumi.StringOutput    `pulumi:"firewallDomainListId"`
	FirewallRuleGroupId  pulumi.StringOutput    `pulumi:"firewallRuleGroupId"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	Priority             pulumi.IntOutput       `pulumi:"priority"`
}

// NewResolverFirewallRule registers a new resource with the given unique name, arguments, and options.
func NewResolverFirewallRule(ctx *pulumi.Context,
	name string, args *ResolverFirewallRuleArgs, opts ...pulumi.ResourceOption) (*ResolverFirewallRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.FirewallDomainListId == nil {
		return nil, errors.New("invalid value for required argument 'FirewallDomainListId'")
	}
	if args.FirewallRuleGroupId == nil {
		return nil, errors.New("invalid value for required argument 'FirewallRuleGroupId'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	var resource ResolverFirewallRule
	err := ctx.RegisterResource("aws:route53/resolverFirewallRule:ResolverFirewallRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverFirewallRule gets an existing ResolverFirewallRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverFirewallRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverFirewallRuleState, opts ...pulumi.ResourceOption) (*ResolverFirewallRule, error) {
	var resource ResolverFirewallRule
	err := ctx.ReadResource("aws:route53/resolverFirewallRule:ResolverFirewallRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverFirewallRule resources.
type resolverFirewallRuleState struct {
	Action               *string `pulumi:"action"`
	BlockOverrideDnsType *string `pulumi:"blockOverrideDnsType"`
	BlockOverrideDomain  *string `pulumi:"blockOverrideDomain"`
	BlockOverrideTtl     *int    `pulumi:"blockOverrideTtl"`
	BlockResponse        *string `pulumi:"blockResponse"`
	FirewallDomainListId *string `pulumi:"firewallDomainListId"`
	FirewallRuleGroupId  *string `pulumi:"firewallRuleGroupId"`
	Name                 *string `pulumi:"name"`
	Priority             *int    `pulumi:"priority"`
}

type ResolverFirewallRuleState struct {
	Action               pulumi.StringPtrInput
	BlockOverrideDnsType pulumi.StringPtrInput
	BlockOverrideDomain  pulumi.StringPtrInput
	BlockOverrideTtl     pulumi.IntPtrInput
	BlockResponse        pulumi.StringPtrInput
	FirewallDomainListId pulumi.StringPtrInput
	FirewallRuleGroupId  pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Priority             pulumi.IntPtrInput
}

func (ResolverFirewallRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverFirewallRuleState)(nil)).Elem()
}

type resolverFirewallRuleArgs struct {
	Action               string  `pulumi:"action"`
	BlockOverrideDnsType *string `pulumi:"blockOverrideDnsType"`
	BlockOverrideDomain  *string `pulumi:"blockOverrideDomain"`
	BlockOverrideTtl     *int    `pulumi:"blockOverrideTtl"`
	BlockResponse        *string `pulumi:"blockResponse"`
	FirewallDomainListId string  `pulumi:"firewallDomainListId"`
	FirewallRuleGroupId  string  `pulumi:"firewallRuleGroupId"`
	Name                 *string `pulumi:"name"`
	Priority             int     `pulumi:"priority"`
}

// The set of arguments for constructing a ResolverFirewallRule resource.
type ResolverFirewallRuleArgs struct {
	Action               pulumi.StringInput
	BlockOverrideDnsType pulumi.StringPtrInput
	BlockOverrideDomain  pulumi.StringPtrInput
	BlockOverrideTtl     pulumi.IntPtrInput
	BlockResponse        pulumi.StringPtrInput
	FirewallDomainListId pulumi.StringInput
	FirewallRuleGroupId  pulumi.StringInput
	Name                 pulumi.StringPtrInput
	Priority             pulumi.IntInput
}

func (ResolverFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverFirewallRuleArgs)(nil)).Elem()
}

type ResolverFirewallRuleInput interface {
	pulumi.Input

	ToResolverFirewallRuleOutput() ResolverFirewallRuleOutput
	ToResolverFirewallRuleOutputWithContext(ctx context.Context) ResolverFirewallRuleOutput
}

func (*ResolverFirewallRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverFirewallRule)(nil)).Elem()
}

func (i *ResolverFirewallRule) ToResolverFirewallRuleOutput() ResolverFirewallRuleOutput {
	return i.ToResolverFirewallRuleOutputWithContext(context.Background())
}

func (i *ResolverFirewallRule) ToResolverFirewallRuleOutputWithContext(ctx context.Context) ResolverFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverFirewallRuleOutput)
}

// ResolverFirewallRuleArrayInput is an input type that accepts ResolverFirewallRuleArray and ResolverFirewallRuleArrayOutput values.
// You can construct a concrete instance of `ResolverFirewallRuleArrayInput` via:
//
//	ResolverFirewallRuleArray{ ResolverFirewallRuleArgs{...} }
type ResolverFirewallRuleArrayInput interface {
	pulumi.Input

	ToResolverFirewallRuleArrayOutput() ResolverFirewallRuleArrayOutput
	ToResolverFirewallRuleArrayOutputWithContext(context.Context) ResolverFirewallRuleArrayOutput
}

type ResolverFirewallRuleArray []ResolverFirewallRuleInput

func (ResolverFirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverFirewallRule)(nil)).Elem()
}

func (i ResolverFirewallRuleArray) ToResolverFirewallRuleArrayOutput() ResolverFirewallRuleArrayOutput {
	return i.ToResolverFirewallRuleArrayOutputWithContext(context.Background())
}

func (i ResolverFirewallRuleArray) ToResolverFirewallRuleArrayOutputWithContext(ctx context.Context) ResolverFirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverFirewallRuleArrayOutput)
}

// ResolverFirewallRuleMapInput is an input type that accepts ResolverFirewallRuleMap and ResolverFirewallRuleMapOutput values.
// You can construct a concrete instance of `ResolverFirewallRuleMapInput` via:
//
//	ResolverFirewallRuleMap{ "key": ResolverFirewallRuleArgs{...} }
type ResolverFirewallRuleMapInput interface {
	pulumi.Input

	ToResolverFirewallRuleMapOutput() ResolverFirewallRuleMapOutput
	ToResolverFirewallRuleMapOutputWithContext(context.Context) ResolverFirewallRuleMapOutput
}

type ResolverFirewallRuleMap map[string]ResolverFirewallRuleInput

func (ResolverFirewallRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverFirewallRule)(nil)).Elem()
}

func (i ResolverFirewallRuleMap) ToResolverFirewallRuleMapOutput() ResolverFirewallRuleMapOutput {
	return i.ToResolverFirewallRuleMapOutputWithContext(context.Background())
}

func (i ResolverFirewallRuleMap) ToResolverFirewallRuleMapOutputWithContext(ctx context.Context) ResolverFirewallRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverFirewallRuleMapOutput)
}

type ResolverFirewallRuleOutput struct{ *pulumi.OutputState }

func (ResolverFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverFirewallRule)(nil)).Elem()
}

func (o ResolverFirewallRuleOutput) ToResolverFirewallRuleOutput() ResolverFirewallRuleOutput {
	return o
}

func (o ResolverFirewallRuleOutput) ToResolverFirewallRuleOutputWithContext(ctx context.Context) ResolverFirewallRuleOutput {
	return o
}

func (o ResolverFirewallRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverFirewallRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o ResolverFirewallRuleOutput) BlockOverrideDnsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverFirewallRule) pulumi.StringPtrOutput { return v.BlockOverrideDnsType }).(pulumi.StringPtrOutput)
}

func (o ResolverFirewallRuleOutput) BlockOverrideDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverFirewallRule) pulumi.StringPtrOutput { return v.BlockOverrideDomain }).(pulumi.StringPtrOutput)
}

func (o ResolverFirewallRuleOutput) BlockOverrideTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResolverFirewallRule) pulumi.IntPtrOutput { return v.BlockOverrideTtl }).(pulumi.IntPtrOutput)
}

func (o ResolverFirewallRuleOutput) BlockResponse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverFirewallRule) pulumi.StringPtrOutput { return v.BlockResponse }).(pulumi.StringPtrOutput)
}

func (o ResolverFirewallRuleOutput) FirewallDomainListId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverFirewallRule) pulumi.StringOutput { return v.FirewallDomainListId }).(pulumi.StringOutput)
}

func (o ResolverFirewallRuleOutput) FirewallRuleGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverFirewallRule) pulumi.StringOutput { return v.FirewallRuleGroupId }).(pulumi.StringOutput)
}

func (o ResolverFirewallRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverFirewallRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ResolverFirewallRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *ResolverFirewallRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

type ResolverFirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (ResolverFirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverFirewallRule)(nil)).Elem()
}

func (o ResolverFirewallRuleArrayOutput) ToResolverFirewallRuleArrayOutput() ResolverFirewallRuleArrayOutput {
	return o
}

func (o ResolverFirewallRuleArrayOutput) ToResolverFirewallRuleArrayOutputWithContext(ctx context.Context) ResolverFirewallRuleArrayOutput {
	return o
}

func (o ResolverFirewallRuleArrayOutput) Index(i pulumi.IntInput) ResolverFirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResolverFirewallRule {
		return vs[0].([]*ResolverFirewallRule)[vs[1].(int)]
	}).(ResolverFirewallRuleOutput)
}

type ResolverFirewallRuleMapOutput struct{ *pulumi.OutputState }

func (ResolverFirewallRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverFirewallRule)(nil)).Elem()
}

func (o ResolverFirewallRuleMapOutput) ToResolverFirewallRuleMapOutput() ResolverFirewallRuleMapOutput {
	return o
}

func (o ResolverFirewallRuleMapOutput) ToResolverFirewallRuleMapOutputWithContext(ctx context.Context) ResolverFirewallRuleMapOutput {
	return o
}

func (o ResolverFirewallRuleMapOutput) MapIndex(k pulumi.StringInput) ResolverFirewallRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResolverFirewallRule {
		return vs[0].(map[string]*ResolverFirewallRule)[vs[1].(string)]
	}).(ResolverFirewallRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverFirewallRuleInput)(nil)).Elem(), &ResolverFirewallRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverFirewallRuleArrayInput)(nil)).Elem(), ResolverFirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverFirewallRuleMapInput)(nil)).Elem(), ResolverFirewallRuleMap{})
	pulumi.RegisterOutputType(ResolverFirewallRuleOutput{})
	pulumi.RegisterOutputType(ResolverFirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(ResolverFirewallRuleMapOutput{})
}
