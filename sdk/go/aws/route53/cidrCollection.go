// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Route53 CIDR collection resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := route53.NewCidrCollection(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import CIDR collections using their ID. For example:
//
// ```sh
//
//	$ pulumi import aws:route53/cidrCollection:CidrCollection example 9ac32814-3e67-0932-6048-8d779cc6f511
//
// ```
type CidrCollection struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the CIDR collection.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Unique name for the CIDR collection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The lastest version of the CIDR collection.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCidrCollection registers a new resource with the given unique name, arguments, and options.
func NewCidrCollection(ctx *pulumi.Context,
	name string, args *CidrCollectionArgs, opts ...pulumi.ResourceOption) (*CidrCollection, error) {
	if args == nil {
		args = &CidrCollectionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CidrCollection
	err := ctx.RegisterResource("aws:route53/cidrCollection:CidrCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCidrCollection gets an existing CidrCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCidrCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CidrCollectionState, opts ...pulumi.ResourceOption) (*CidrCollection, error) {
	var resource CidrCollection
	err := ctx.ReadResource("aws:route53/cidrCollection:CidrCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CidrCollection resources.
type cidrCollectionState struct {
	// The Amazon Resource Name (ARN) of the CIDR collection.
	Arn *string `pulumi:"arn"`
	// Unique name for the CIDR collection.
	Name *string `pulumi:"name"`
	// The lastest version of the CIDR collection.
	Version *int `pulumi:"version"`
}

type CidrCollectionState struct {
	// The Amazon Resource Name (ARN) of the CIDR collection.
	Arn pulumi.StringPtrInput
	// Unique name for the CIDR collection.
	Name pulumi.StringPtrInput
	// The lastest version of the CIDR collection.
	Version pulumi.IntPtrInput
}

func (CidrCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cidrCollectionState)(nil)).Elem()
}

type cidrCollectionArgs struct {
	// Unique name for the CIDR collection.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CidrCollection resource.
type CidrCollectionArgs struct {
	// Unique name for the CIDR collection.
	Name pulumi.StringPtrInput
}

func (CidrCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cidrCollectionArgs)(nil)).Elem()
}

type CidrCollectionInput interface {
	pulumi.Input

	ToCidrCollectionOutput() CidrCollectionOutput
	ToCidrCollectionOutputWithContext(ctx context.Context) CidrCollectionOutput
}

func (*CidrCollection) ElementType() reflect.Type {
	return reflect.TypeOf((**CidrCollection)(nil)).Elem()
}

func (i *CidrCollection) ToCidrCollectionOutput() CidrCollectionOutput {
	return i.ToCidrCollectionOutputWithContext(context.Background())
}

func (i *CidrCollection) ToCidrCollectionOutputWithContext(ctx context.Context) CidrCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrCollectionOutput)
}

// CidrCollectionArrayInput is an input type that accepts CidrCollectionArray and CidrCollectionArrayOutput values.
// You can construct a concrete instance of `CidrCollectionArrayInput` via:
//
//	CidrCollectionArray{ CidrCollectionArgs{...} }
type CidrCollectionArrayInput interface {
	pulumi.Input

	ToCidrCollectionArrayOutput() CidrCollectionArrayOutput
	ToCidrCollectionArrayOutputWithContext(context.Context) CidrCollectionArrayOutput
}

type CidrCollectionArray []CidrCollectionInput

func (CidrCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CidrCollection)(nil)).Elem()
}

func (i CidrCollectionArray) ToCidrCollectionArrayOutput() CidrCollectionArrayOutput {
	return i.ToCidrCollectionArrayOutputWithContext(context.Background())
}

func (i CidrCollectionArray) ToCidrCollectionArrayOutputWithContext(ctx context.Context) CidrCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrCollectionArrayOutput)
}

// CidrCollectionMapInput is an input type that accepts CidrCollectionMap and CidrCollectionMapOutput values.
// You can construct a concrete instance of `CidrCollectionMapInput` via:
//
//	CidrCollectionMap{ "key": CidrCollectionArgs{...} }
type CidrCollectionMapInput interface {
	pulumi.Input

	ToCidrCollectionMapOutput() CidrCollectionMapOutput
	ToCidrCollectionMapOutputWithContext(context.Context) CidrCollectionMapOutput
}

type CidrCollectionMap map[string]CidrCollectionInput

func (CidrCollectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CidrCollection)(nil)).Elem()
}

func (i CidrCollectionMap) ToCidrCollectionMapOutput() CidrCollectionMapOutput {
	return i.ToCidrCollectionMapOutputWithContext(context.Background())
}

func (i CidrCollectionMap) ToCidrCollectionMapOutputWithContext(ctx context.Context) CidrCollectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrCollectionMapOutput)
}

type CidrCollectionOutput struct{ *pulumi.OutputState }

func (CidrCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CidrCollection)(nil)).Elem()
}

func (o CidrCollectionOutput) ToCidrCollectionOutput() CidrCollectionOutput {
	return o
}

func (o CidrCollectionOutput) ToCidrCollectionOutputWithContext(ctx context.Context) CidrCollectionOutput {
	return o
}

// The Amazon Resource Name (ARN) of the CIDR collection.
func (o CidrCollectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CidrCollection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Unique name for the CIDR collection.
func (o CidrCollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CidrCollection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The lastest version of the CIDR collection.
func (o CidrCollectionOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CidrCollection) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CidrCollectionArrayOutput struct{ *pulumi.OutputState }

func (CidrCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CidrCollection)(nil)).Elem()
}

func (o CidrCollectionArrayOutput) ToCidrCollectionArrayOutput() CidrCollectionArrayOutput {
	return o
}

func (o CidrCollectionArrayOutput) ToCidrCollectionArrayOutputWithContext(ctx context.Context) CidrCollectionArrayOutput {
	return o
}

func (o CidrCollectionArrayOutput) Index(i pulumi.IntInput) CidrCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CidrCollection {
		return vs[0].([]*CidrCollection)[vs[1].(int)]
	}).(CidrCollectionOutput)
}

type CidrCollectionMapOutput struct{ *pulumi.OutputState }

func (CidrCollectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CidrCollection)(nil)).Elem()
}

func (o CidrCollectionMapOutput) ToCidrCollectionMapOutput() CidrCollectionMapOutput {
	return o
}

func (o CidrCollectionMapOutput) ToCidrCollectionMapOutputWithContext(ctx context.Context) CidrCollectionMapOutput {
	return o
}

func (o CidrCollectionMapOutput) MapIndex(k pulumi.StringInput) CidrCollectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CidrCollection {
		return vs[0].(map[string]*CidrCollection)[vs[1].(string)]
	}).(CidrCollectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CidrCollectionInput)(nil)).Elem(), &CidrCollection{})
	pulumi.RegisterInputType(reflect.TypeOf((*CidrCollectionArrayInput)(nil)).Elem(), CidrCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CidrCollectionMapInput)(nil)).Elem(), CidrCollectionMap{})
	pulumi.RegisterOutputType(CidrCollectionOutput{})
	pulumi.RegisterOutputType(CidrCollectionArrayOutput{})
	pulumi.RegisterOutputType(CidrCollectionMapOutput{})
}
