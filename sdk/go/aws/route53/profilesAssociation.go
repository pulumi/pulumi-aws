// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Route 53 Profiles Association.
//
// ## Example Usage
//
// ## Import
//
// Using `pulumi import`, import Route 53 Profiles Association using the `example_id_arg`. For example:
//
// ```sh
// $ pulumi import aws:route53/profilesAssociation:ProfilesAssociation example rpa-id-12345678
// ```
type ProfilesAssociation struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	// Name of the Profile Association. Must match a regex of `(?!^[0-9]+$)([a-zA-Z0-9\\-_' ']+)`.
	Name    pulumi.StringOutput `pulumi:"name"`
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// ID of the profile associated with the VPC.
	ProfileId pulumi.StringOutput `pulumi:"profileId"`
	// Resource ID of the VPC the profile to be associated with.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Status of the Profile Association. See the [AWS docs](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53profiles_Profile.html) for valid values.
	Status pulumi.StringOutput `pulumi:"status"`
	// Status message of the Profile Association.
	StatusMessage pulumi.StringOutput    `pulumi:"statusMessage"`
	Tags          pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput               `pulumi:"tagsAll"`
	Timeouts ProfilesAssociationTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewProfilesAssociation registers a new resource with the given unique name, arguments, and options.
func NewProfilesAssociation(ctx *pulumi.Context,
	name string, args *ProfilesAssociationArgs, opts ...pulumi.ResourceOption) (*ProfilesAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProfileId == nil {
		return nil, errors.New("invalid value for required argument 'ProfileId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProfilesAssociation
	err := ctx.RegisterResource("aws:route53/profilesAssociation:ProfilesAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfilesAssociation gets an existing ProfilesAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfilesAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfilesAssociationState, opts ...pulumi.ResourceOption) (*ProfilesAssociation, error) {
	var resource ProfilesAssociation
	err := ctx.ReadResource("aws:route53/profilesAssociation:ProfilesAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProfilesAssociation resources.
type profilesAssociationState struct {
	Arn *string `pulumi:"arn"`
	// Name of the Profile Association. Must match a regex of `(?!^[0-9]+$)([a-zA-Z0-9\\-_' ']+)`.
	Name    *string `pulumi:"name"`
	OwnerId *string `pulumi:"ownerId"`
	// ID of the profile associated with the VPC.
	ProfileId *string `pulumi:"profileId"`
	// Resource ID of the VPC the profile to be associated with.
	ResourceId *string `pulumi:"resourceId"`
	// Status of the Profile Association. See the [AWS docs](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53profiles_Profile.html) for valid values.
	Status *string `pulumi:"status"`
	// Status message of the Profile Association.
	StatusMessage *string           `pulumi:"statusMessage"`
	Tags          map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string            `pulumi:"tagsAll"`
	Timeouts *ProfilesAssociationTimeouts `pulumi:"timeouts"`
}

type ProfilesAssociationState struct {
	Arn pulumi.StringPtrInput
	// Name of the Profile Association. Must match a regex of `(?!^[0-9]+$)([a-zA-Z0-9\\-_' ']+)`.
	Name    pulumi.StringPtrInput
	OwnerId pulumi.StringPtrInput
	// ID of the profile associated with the VPC.
	ProfileId pulumi.StringPtrInput
	// Resource ID of the VPC the profile to be associated with.
	ResourceId pulumi.StringPtrInput
	// Status of the Profile Association. See the [AWS docs](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53profiles_Profile.html) for valid values.
	Status pulumi.StringPtrInput
	// Status message of the Profile Association.
	StatusMessage pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts ProfilesAssociationTimeoutsPtrInput
}

func (ProfilesAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*profilesAssociationState)(nil)).Elem()
}

type profilesAssociationArgs struct {
	// Name of the Profile Association. Must match a regex of `(?!^[0-9]+$)([a-zA-Z0-9\\-_' ']+)`.
	Name *string `pulumi:"name"`
	// ID of the profile associated with the VPC.
	ProfileId string `pulumi:"profileId"`
	// Resource ID of the VPC the profile to be associated with.
	ResourceId string                       `pulumi:"resourceId"`
	Tags       map[string]string            `pulumi:"tags"`
	Timeouts   *ProfilesAssociationTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ProfilesAssociation resource.
type ProfilesAssociationArgs struct {
	// Name of the Profile Association. Must match a regex of `(?!^[0-9]+$)([a-zA-Z0-9\\-_' ']+)`.
	Name pulumi.StringPtrInput
	// ID of the profile associated with the VPC.
	ProfileId pulumi.StringInput
	// Resource ID of the VPC the profile to be associated with.
	ResourceId pulumi.StringInput
	Tags       pulumi.StringMapInput
	Timeouts   ProfilesAssociationTimeoutsPtrInput
}

func (ProfilesAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profilesAssociationArgs)(nil)).Elem()
}

type ProfilesAssociationInput interface {
	pulumi.Input

	ToProfilesAssociationOutput() ProfilesAssociationOutput
	ToProfilesAssociationOutputWithContext(ctx context.Context) ProfilesAssociationOutput
}

func (*ProfilesAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilesAssociation)(nil)).Elem()
}

func (i *ProfilesAssociation) ToProfilesAssociationOutput() ProfilesAssociationOutput {
	return i.ToProfilesAssociationOutputWithContext(context.Background())
}

func (i *ProfilesAssociation) ToProfilesAssociationOutputWithContext(ctx context.Context) ProfilesAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesAssociationOutput)
}

// ProfilesAssociationArrayInput is an input type that accepts ProfilesAssociationArray and ProfilesAssociationArrayOutput values.
// You can construct a concrete instance of `ProfilesAssociationArrayInput` via:
//
//	ProfilesAssociationArray{ ProfilesAssociationArgs{...} }
type ProfilesAssociationArrayInput interface {
	pulumi.Input

	ToProfilesAssociationArrayOutput() ProfilesAssociationArrayOutput
	ToProfilesAssociationArrayOutputWithContext(context.Context) ProfilesAssociationArrayOutput
}

type ProfilesAssociationArray []ProfilesAssociationInput

func (ProfilesAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfilesAssociation)(nil)).Elem()
}

func (i ProfilesAssociationArray) ToProfilesAssociationArrayOutput() ProfilesAssociationArrayOutput {
	return i.ToProfilesAssociationArrayOutputWithContext(context.Background())
}

func (i ProfilesAssociationArray) ToProfilesAssociationArrayOutputWithContext(ctx context.Context) ProfilesAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesAssociationArrayOutput)
}

// ProfilesAssociationMapInput is an input type that accepts ProfilesAssociationMap and ProfilesAssociationMapOutput values.
// You can construct a concrete instance of `ProfilesAssociationMapInput` via:
//
//	ProfilesAssociationMap{ "key": ProfilesAssociationArgs{...} }
type ProfilesAssociationMapInput interface {
	pulumi.Input

	ToProfilesAssociationMapOutput() ProfilesAssociationMapOutput
	ToProfilesAssociationMapOutputWithContext(context.Context) ProfilesAssociationMapOutput
}

type ProfilesAssociationMap map[string]ProfilesAssociationInput

func (ProfilesAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfilesAssociation)(nil)).Elem()
}

func (i ProfilesAssociationMap) ToProfilesAssociationMapOutput() ProfilesAssociationMapOutput {
	return i.ToProfilesAssociationMapOutputWithContext(context.Background())
}

func (i ProfilesAssociationMap) ToProfilesAssociationMapOutputWithContext(ctx context.Context) ProfilesAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilesAssociationMapOutput)
}

type ProfilesAssociationOutput struct{ *pulumi.OutputState }

func (ProfilesAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilesAssociation)(nil)).Elem()
}

func (o ProfilesAssociationOutput) ToProfilesAssociationOutput() ProfilesAssociationOutput {
	return o
}

func (o ProfilesAssociationOutput) ToProfilesAssociationOutputWithContext(ctx context.Context) ProfilesAssociationOutput {
	return o
}

func (o ProfilesAssociationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfilesAssociation) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Name of the Profile Association. Must match a regex of `(?!^[0-9]+$)([a-zA-Z0-9\\-_' ']+)`.
func (o ProfilesAssociationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfilesAssociation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProfilesAssociationOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfilesAssociation) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// ID of the profile associated with the VPC.
func (o ProfilesAssociationOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfilesAssociation) pulumi.StringOutput { return v.ProfileId }).(pulumi.StringOutput)
}

// Resource ID of the VPC the profile to be associated with.
func (o ProfilesAssociationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfilesAssociation) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Status of the Profile Association. See the [AWS docs](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53profiles_Profile.html) for valid values.
func (o ProfilesAssociationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfilesAssociation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Status message of the Profile Association.
func (o ProfilesAssociationOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfilesAssociation) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

func (o ProfilesAssociationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProfilesAssociation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o ProfilesAssociationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProfilesAssociation) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ProfilesAssociationOutput) Timeouts() ProfilesAssociationTimeoutsPtrOutput {
	return o.ApplyT(func(v *ProfilesAssociation) ProfilesAssociationTimeoutsPtrOutput { return v.Timeouts }).(ProfilesAssociationTimeoutsPtrOutput)
}

type ProfilesAssociationArrayOutput struct{ *pulumi.OutputState }

func (ProfilesAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfilesAssociation)(nil)).Elem()
}

func (o ProfilesAssociationArrayOutput) ToProfilesAssociationArrayOutput() ProfilesAssociationArrayOutput {
	return o
}

func (o ProfilesAssociationArrayOutput) ToProfilesAssociationArrayOutputWithContext(ctx context.Context) ProfilesAssociationArrayOutput {
	return o
}

func (o ProfilesAssociationArrayOutput) Index(i pulumi.IntInput) ProfilesAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProfilesAssociation {
		return vs[0].([]*ProfilesAssociation)[vs[1].(int)]
	}).(ProfilesAssociationOutput)
}

type ProfilesAssociationMapOutput struct{ *pulumi.OutputState }

func (ProfilesAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfilesAssociation)(nil)).Elem()
}

func (o ProfilesAssociationMapOutput) ToProfilesAssociationMapOutput() ProfilesAssociationMapOutput {
	return o
}

func (o ProfilesAssociationMapOutput) ToProfilesAssociationMapOutputWithContext(ctx context.Context) ProfilesAssociationMapOutput {
	return o
}

func (o ProfilesAssociationMapOutput) MapIndex(k pulumi.StringInput) ProfilesAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProfilesAssociation {
		return vs[0].(map[string]*ProfilesAssociation)[vs[1].(string)]
	}).(ProfilesAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfilesAssociationInput)(nil)).Elem(), &ProfilesAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfilesAssociationArrayInput)(nil)).Elem(), ProfilesAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfilesAssociationMapInput)(nil)).Elem(), ProfilesAssociationMap{})
	pulumi.RegisterOutputType(ProfilesAssociationOutput{})
	pulumi.RegisterOutputType(ProfilesAssociationArrayOutput{})
	pulumi.RegisterOutputType(ProfilesAssociationMapOutput{})
}
