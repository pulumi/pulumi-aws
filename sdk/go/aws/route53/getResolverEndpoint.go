// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `route53.ResolverEndpoint` provides details about a specific Route53 Resolver Endpoint.
//
// This data source allows to find a list of IPaddresses associated with a specific Route53 Resolver Endpoint.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := route53.LookupResolverEndpoint(ctx, &route53.LookupResolverEndpointArgs{
//				ResolverEndpointId: pulumi.StringRef("rslvr-in-1abc2345ef678g91h"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := route53.LookupResolverEndpoint(ctx, &route53.LookupResolverEndpointArgs{
//				Filters: []route53.GetResolverEndpointFilter{
//					{
//						Name: "NAME",
//						Values: []string{
//							"MyResolverExampleName",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupResolverEndpoint(ctx *pulumi.Context, args *LookupResolverEndpointArgs, opts ...pulumi.InvokeOption) (*LookupResolverEndpointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResolverEndpointResult
	err := ctx.Invoke("aws:route53/getResolverEndpoint:getResolverEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResolverEndpoint.
type LookupResolverEndpointArgs struct {
	// One or more name/value pairs to use as filters. There are
	// several valid keys, for a full reference, check out
	// [Route53resolver Filter value in the AWS API reference][1].
	Filters []GetResolverEndpointFilter `pulumi:"filters"`
	// ID of the Route53 Resolver Endpoint.
	ResolverEndpointId *string `pulumi:"resolverEndpointId"`
}

// A collection of values returned by getResolverEndpoint.
type LookupResolverEndpointResult struct {
	// Computed ARN of the Route53 Resolver Endpoint.
	Arn string `pulumi:"arn"`
	// Direction of the queries to or from the Resolver Endpoint .
	Direction string                      `pulumi:"direction"`
	Filters   []GetResolverEndpointFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of IPaddresses that have been associated with the Resolver Endpoint.
	IpAddresses []string `pulumi:"ipAddresses"`
	Name        string   `pulumi:"name"`
	// The protocols used by the Resolver endpoint.
	Protocols          []string `pulumi:"protocols"`
	ResolverEndpointId *string  `pulumi:"resolverEndpointId"`
	// The Resolver endpoint IP address type.
	ResolverEndpointType string `pulumi:"resolverEndpointType"`
	// Current status of the Resolver Endpoint.
	Status string `pulumi:"status"`
	// ID of the Host VPC that the Resolver Endpoint resides in.
	VpcId string `pulumi:"vpcId"`
}

func LookupResolverEndpointOutput(ctx *pulumi.Context, args LookupResolverEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupResolverEndpointResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupResolverEndpointResultOutput, error) {
			args := v.(LookupResolverEndpointArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws:route53/getResolverEndpoint:getResolverEndpoint", args, LookupResolverEndpointResultOutput{}, options).(LookupResolverEndpointResultOutput), nil
		}).(LookupResolverEndpointResultOutput)
}

// A collection of arguments for invoking getResolverEndpoint.
type LookupResolverEndpointOutputArgs struct {
	// One or more name/value pairs to use as filters. There are
	// several valid keys, for a full reference, check out
	// [Route53resolver Filter value in the AWS API reference][1].
	Filters GetResolverEndpointFilterArrayInput `pulumi:"filters"`
	// ID of the Route53 Resolver Endpoint.
	ResolverEndpointId pulumi.StringPtrInput `pulumi:"resolverEndpointId"`
}

func (LookupResolverEndpointOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverEndpointArgs)(nil)).Elem()
}

// A collection of values returned by getResolverEndpoint.
type LookupResolverEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupResolverEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverEndpointResult)(nil)).Elem()
}

func (o LookupResolverEndpointResultOutput) ToLookupResolverEndpointResultOutput() LookupResolverEndpointResultOutput {
	return o
}

func (o LookupResolverEndpointResultOutput) ToLookupResolverEndpointResultOutputWithContext(ctx context.Context) LookupResolverEndpointResultOutput {
	return o
}

// Computed ARN of the Route53 Resolver Endpoint.
func (o LookupResolverEndpointResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Direction of the queries to or from the Resolver Endpoint .
func (o LookupResolverEndpointResultOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.Direction }).(pulumi.StringOutput)
}

func (o LookupResolverEndpointResultOutput) Filters() GetResolverEndpointFilterArrayOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) []GetResolverEndpointFilter { return v.Filters }).(GetResolverEndpointFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupResolverEndpointResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of IPaddresses that have been associated with the Resolver Endpoint.
func (o LookupResolverEndpointResultOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

func (o LookupResolverEndpointResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.Name }).(pulumi.StringOutput)
}

// The protocols used by the Resolver endpoint.
func (o LookupResolverEndpointResultOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) []string { return v.Protocols }).(pulumi.StringArrayOutput)
}

func (o LookupResolverEndpointResultOutput) ResolverEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) *string { return v.ResolverEndpointId }).(pulumi.StringPtrOutput)
}

// The Resolver endpoint IP address type.
func (o LookupResolverEndpointResultOutput) ResolverEndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.ResolverEndpointType }).(pulumi.StringOutput)
}

// Current status of the Resolver Endpoint.
func (o LookupResolverEndpointResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.Status }).(pulumi.StringOutput)
}

// ID of the Host VPC that the Resolver Endpoint resides in.
func (o LookupResolverEndpointResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResolverEndpointResultOutput{})
}
