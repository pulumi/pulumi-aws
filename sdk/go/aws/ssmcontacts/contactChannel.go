// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmcontacts

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TODO resource for managing an AWS SSM Contacts Contact Channel.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ssmcontacts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssmcontacts.NewContactChannel(ctx, "example", &ssmcontacts.ContactChannelArgs{
//				ContactId: pulumi.String("arn:aws:ssm-contacts:us-west-2:123456789012:contact/contactalias"),
//				DeliveryAddress: &ssmcontacts.ContactChannelDeliveryAddressArgs{
//					SimpleAddress: pulumi.String("email@example.com"),
//				},
//				Type: pulumi.String("EMAIL"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Usage with SSM Contact
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ssmcontacts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleContact, err := ssmcontacts.NewContact(ctx, "exampleContact", &ssmcontacts.ContactArgs{
//				Alias: pulumi.String("example_contact"),
//				Type:  pulumi.String("PERSONAL"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ssmcontacts.NewContactChannel(ctx, "example", &ssmcontacts.ContactChannelArgs{
//				ContactId: exampleContact.Arn,
//				DeliveryAddress: &ssmcontacts.ContactChannelDeliveryAddressArgs{
//					SimpleAddress: pulumi.String("email@example.com"),
//				},
//				Type: pulumi.String("EMAIL"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import SSM Contact Channel using the `ARN`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:ssmcontacts/contactChannel:ContactChannel example arn:aws:ssm-contacts:us-west-2:123456789012:contact-channel/example
//
// ```
type ContactChannel struct {
	pulumi.CustomResourceState

	// Whether the contact channel is activated. The contact channel must be activated to use it to engage the contact. One of `ACTIVATED` or `NOT_ACTIVATED`.
	ActivationStatus pulumi.StringOutput `pulumi:"activationStatus"`
	// Amazon Resource Name (ARN) of the contact channel.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Amazon Resource Name (ARN) of the AWS SSM Contact that the contact channel belongs to.
	ContactId pulumi.StringOutput `pulumi:"contactId"`
	// Block that contains contact engagement details. See details below.
	DeliveryAddress ContactChannelDeliveryAddressOutput `pulumi:"deliveryAddress"`
	// Name of the contact channel.
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of the contact channel. One of `SMS`, `VOICE` or `EMAIL`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewContactChannel registers a new resource with the given unique name, arguments, and options.
func NewContactChannel(ctx *pulumi.Context,
	name string, args *ContactChannelArgs, opts ...pulumi.ResourceOption) (*ContactChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContactId == nil {
		return nil, errors.New("invalid value for required argument 'ContactId'")
	}
	if args.DeliveryAddress == nil {
		return nil, errors.New("invalid value for required argument 'DeliveryAddress'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource ContactChannel
	err := ctx.RegisterResource("aws:ssmcontacts/contactChannel:ContactChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContactChannel gets an existing ContactChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContactChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactChannelState, opts ...pulumi.ResourceOption) (*ContactChannel, error) {
	var resource ContactChannel
	err := ctx.ReadResource("aws:ssmcontacts/contactChannel:ContactChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContactChannel resources.
type contactChannelState struct {
	// Whether the contact channel is activated. The contact channel must be activated to use it to engage the contact. One of `ACTIVATED` or `NOT_ACTIVATED`.
	ActivationStatus *string `pulumi:"activationStatus"`
	// Amazon Resource Name (ARN) of the contact channel.
	Arn *string `pulumi:"arn"`
	// Amazon Resource Name (ARN) of the AWS SSM Contact that the contact channel belongs to.
	ContactId *string `pulumi:"contactId"`
	// Block that contains contact engagement details. See details below.
	DeliveryAddress *ContactChannelDeliveryAddress `pulumi:"deliveryAddress"`
	// Name of the contact channel.
	Name *string `pulumi:"name"`
	// Type of the contact channel. One of `SMS`, `VOICE` or `EMAIL`.
	Type *string `pulumi:"type"`
}

type ContactChannelState struct {
	// Whether the contact channel is activated. The contact channel must be activated to use it to engage the contact. One of `ACTIVATED` or `NOT_ACTIVATED`.
	ActivationStatus pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the contact channel.
	Arn pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the AWS SSM Contact that the contact channel belongs to.
	ContactId pulumi.StringPtrInput
	// Block that contains contact engagement details. See details below.
	DeliveryAddress ContactChannelDeliveryAddressPtrInput
	// Name of the contact channel.
	Name pulumi.StringPtrInput
	// Type of the contact channel. One of `SMS`, `VOICE` or `EMAIL`.
	Type pulumi.StringPtrInput
}

func (ContactChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactChannelState)(nil)).Elem()
}

type contactChannelArgs struct {
	// Amazon Resource Name (ARN) of the AWS SSM Contact that the contact channel belongs to.
	ContactId string `pulumi:"contactId"`
	// Block that contains contact engagement details. See details below.
	DeliveryAddress ContactChannelDeliveryAddress `pulumi:"deliveryAddress"`
	// Name of the contact channel.
	Name *string `pulumi:"name"`
	// Type of the contact channel. One of `SMS`, `VOICE` or `EMAIL`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ContactChannel resource.
type ContactChannelArgs struct {
	// Amazon Resource Name (ARN) of the AWS SSM Contact that the contact channel belongs to.
	ContactId pulumi.StringInput
	// Block that contains contact engagement details. See details below.
	DeliveryAddress ContactChannelDeliveryAddressInput
	// Name of the contact channel.
	Name pulumi.StringPtrInput
	// Type of the contact channel. One of `SMS`, `VOICE` or `EMAIL`.
	Type pulumi.StringInput
}

func (ContactChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactChannelArgs)(nil)).Elem()
}

type ContactChannelInput interface {
	pulumi.Input

	ToContactChannelOutput() ContactChannelOutput
	ToContactChannelOutputWithContext(ctx context.Context) ContactChannelOutput
}

func (*ContactChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactChannel)(nil)).Elem()
}

func (i *ContactChannel) ToContactChannelOutput() ContactChannelOutput {
	return i.ToContactChannelOutputWithContext(context.Background())
}

func (i *ContactChannel) ToContactChannelOutputWithContext(ctx context.Context) ContactChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactChannelOutput)
}

// ContactChannelArrayInput is an input type that accepts ContactChannelArray and ContactChannelArrayOutput values.
// You can construct a concrete instance of `ContactChannelArrayInput` via:
//
//	ContactChannelArray{ ContactChannelArgs{...} }
type ContactChannelArrayInput interface {
	pulumi.Input

	ToContactChannelArrayOutput() ContactChannelArrayOutput
	ToContactChannelArrayOutputWithContext(context.Context) ContactChannelArrayOutput
}

type ContactChannelArray []ContactChannelInput

func (ContactChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactChannel)(nil)).Elem()
}

func (i ContactChannelArray) ToContactChannelArrayOutput() ContactChannelArrayOutput {
	return i.ToContactChannelArrayOutputWithContext(context.Background())
}

func (i ContactChannelArray) ToContactChannelArrayOutputWithContext(ctx context.Context) ContactChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactChannelArrayOutput)
}

// ContactChannelMapInput is an input type that accepts ContactChannelMap and ContactChannelMapOutput values.
// You can construct a concrete instance of `ContactChannelMapInput` via:
//
//	ContactChannelMap{ "key": ContactChannelArgs{...} }
type ContactChannelMapInput interface {
	pulumi.Input

	ToContactChannelMapOutput() ContactChannelMapOutput
	ToContactChannelMapOutputWithContext(context.Context) ContactChannelMapOutput
}

type ContactChannelMap map[string]ContactChannelInput

func (ContactChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactChannel)(nil)).Elem()
}

func (i ContactChannelMap) ToContactChannelMapOutput() ContactChannelMapOutput {
	return i.ToContactChannelMapOutputWithContext(context.Background())
}

func (i ContactChannelMap) ToContactChannelMapOutputWithContext(ctx context.Context) ContactChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactChannelMapOutput)
}

type ContactChannelOutput struct{ *pulumi.OutputState }

func (ContactChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactChannel)(nil)).Elem()
}

func (o ContactChannelOutput) ToContactChannelOutput() ContactChannelOutput {
	return o
}

func (o ContactChannelOutput) ToContactChannelOutputWithContext(ctx context.Context) ContactChannelOutput {
	return o
}

// Whether the contact channel is activated. The contact channel must be activated to use it to engage the contact. One of `ACTIVATED` or `NOT_ACTIVATED`.
func (o ContactChannelOutput) ActivationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactChannel) pulumi.StringOutput { return v.ActivationStatus }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the contact channel.
func (o ContactChannelOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactChannel) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the AWS SSM Contact that the contact channel belongs to.
func (o ContactChannelOutput) ContactId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactChannel) pulumi.StringOutput { return v.ContactId }).(pulumi.StringOutput)
}

// Block that contains contact engagement details. See details below.
func (o ContactChannelOutput) DeliveryAddress() ContactChannelDeliveryAddressOutput {
	return o.ApplyT(func(v *ContactChannel) ContactChannelDeliveryAddressOutput { return v.DeliveryAddress }).(ContactChannelDeliveryAddressOutput)
}

// Name of the contact channel.
func (o ContactChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactChannel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of the contact channel. One of `SMS`, `VOICE` or `EMAIL`.
func (o ContactChannelOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactChannel) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ContactChannelArrayOutput struct{ *pulumi.OutputState }

func (ContactChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactChannel)(nil)).Elem()
}

func (o ContactChannelArrayOutput) ToContactChannelArrayOutput() ContactChannelArrayOutput {
	return o
}

func (o ContactChannelArrayOutput) ToContactChannelArrayOutputWithContext(ctx context.Context) ContactChannelArrayOutput {
	return o
}

func (o ContactChannelArrayOutput) Index(i pulumi.IntInput) ContactChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContactChannel {
		return vs[0].([]*ContactChannel)[vs[1].(int)]
	}).(ContactChannelOutput)
}

type ContactChannelMapOutput struct{ *pulumi.OutputState }

func (ContactChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactChannel)(nil)).Elem()
}

func (o ContactChannelMapOutput) ToContactChannelMapOutput() ContactChannelMapOutput {
	return o
}

func (o ContactChannelMapOutput) ToContactChannelMapOutputWithContext(ctx context.Context) ContactChannelMapOutput {
	return o
}

func (o ContactChannelMapOutput) MapIndex(k pulumi.StringInput) ContactChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContactChannel {
		return vs[0].(map[string]*ContactChannel)[vs[1].(string)]
	}).(ContactChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactChannelInput)(nil)).Elem(), &ContactChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactChannelArrayInput)(nil)).Elem(), ContactChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactChannelMapInput)(nil)).Elem(), ContactChannelMap{})
	pulumi.RegisterOutputType(ContactChannelOutput{})
	pulumi.RegisterOutputType(ContactChannelArrayOutput{})
	pulumi.RegisterOutputType(ContactChannelMapOutput{})
}
