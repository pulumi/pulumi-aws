// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codecommit

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CodeCommit Trigger Resource.
// 
// ~> **NOTE on CodeCommit**: The CodeCommit is not yet rolled out
// in all regions - available regions are listed
// [the AWS Docs](https://docs.aws.amazon.com/general/latest/gr/rande.html#codecommit_region).
type Trigger struct {
	s *pulumi.ResourceState
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOpt) (*Trigger, error) {
	if args == nil || args.RepositoryName == nil {
		return nil, errors.New("missing required argument 'RepositoryName'")
	}
	if args == nil || args.Triggers == nil {
		return nil, errors.New("missing required argument 'Triggers'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["repositoryName"] = nil
		inputs["triggers"] = nil
	} else {
		inputs["repositoryName"] = args.RepositoryName
		inputs["triggers"] = args.Triggers
	}
	inputs["configurationId"] = nil
	s, err := ctx.RegisterResource("aws:codecommit/trigger:Trigger", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Trigger{s: s}, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TriggerState, opts ...pulumi.ResourceOpt) (*Trigger, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["configurationId"] = state.ConfigurationId
		inputs["repositoryName"] = state.RepositoryName
		inputs["triggers"] = state.Triggers
	}
	s, err := ctx.ReadResource("aws:codecommit/trigger:Trigger", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Trigger{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Trigger) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Trigger) ID() *pulumi.IDOutput {
	return r.s.ID
}

func (r *Trigger) ConfigurationId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["configurationId"])
}

// The name for the repository. This needs to be less than 100 characters.
func (r *Trigger) RepositoryName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["repositoryName"])
}

func (r *Trigger) Triggers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["triggers"])
}

// Input properties used for looking up and filtering Trigger resources.
type TriggerState struct {
	ConfigurationId interface{}
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName interface{}
	Triggers interface{}
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName interface{}
	Triggers interface{}
}
