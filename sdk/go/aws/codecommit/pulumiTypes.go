// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codecommit

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TriggerTrigger struct {
	Branches       []string `pulumi:"branches"`
	CustomData     *string  `pulumi:"customData"`
	DestinationArn string   `pulumi:"destinationArn"`
	Events         []string `pulumi:"events"`
	Name           string   `pulumi:"name"`
}

// TriggerTriggerInput is an input type that accepts TriggerTriggerArgs and TriggerTriggerOutput values.
// You can construct a concrete instance of `TriggerTriggerInput` via:
//
//	TriggerTriggerArgs{...}
type TriggerTriggerInput interface {
	pulumi.Input

	ToTriggerTriggerOutput() TriggerTriggerOutput
	ToTriggerTriggerOutputWithContext(context.Context) TriggerTriggerOutput
}

type TriggerTriggerArgs struct {
	Branches       pulumi.StringArrayInput `pulumi:"branches"`
	CustomData     pulumi.StringPtrInput   `pulumi:"customData"`
	DestinationArn pulumi.StringInput      `pulumi:"destinationArn"`
	Events         pulumi.StringArrayInput `pulumi:"events"`
	Name           pulumi.StringInput      `pulumi:"name"`
}

func (TriggerTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerTrigger)(nil)).Elem()
}

func (i TriggerTriggerArgs) ToTriggerTriggerOutput() TriggerTriggerOutput {
	return i.ToTriggerTriggerOutputWithContext(context.Background())
}

func (i TriggerTriggerArgs) ToTriggerTriggerOutputWithContext(ctx context.Context) TriggerTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTriggerOutput)
}

// TriggerTriggerArrayInput is an input type that accepts TriggerTriggerArray and TriggerTriggerArrayOutput values.
// You can construct a concrete instance of `TriggerTriggerArrayInput` via:
//
//	TriggerTriggerArray{ TriggerTriggerArgs{...} }
type TriggerTriggerArrayInput interface {
	pulumi.Input

	ToTriggerTriggerArrayOutput() TriggerTriggerArrayOutput
	ToTriggerTriggerArrayOutputWithContext(context.Context) TriggerTriggerArrayOutput
}

type TriggerTriggerArray []TriggerTriggerInput

func (TriggerTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerTrigger)(nil)).Elem()
}

func (i TriggerTriggerArray) ToTriggerTriggerArrayOutput() TriggerTriggerArrayOutput {
	return i.ToTriggerTriggerArrayOutputWithContext(context.Background())
}

func (i TriggerTriggerArray) ToTriggerTriggerArrayOutputWithContext(ctx context.Context) TriggerTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTriggerArrayOutput)
}

type TriggerTriggerOutput struct{ *pulumi.OutputState }

func (TriggerTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerTrigger)(nil)).Elem()
}

func (o TriggerTriggerOutput) ToTriggerTriggerOutput() TriggerTriggerOutput {
	return o
}

func (o TriggerTriggerOutput) ToTriggerTriggerOutputWithContext(ctx context.Context) TriggerTriggerOutput {
	return o
}

func (o TriggerTriggerOutput) Branches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerTrigger) []string { return v.Branches }).(pulumi.StringArrayOutput)
}

func (o TriggerTriggerOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerTrigger) *string { return v.CustomData }).(pulumi.StringPtrOutput)
}

func (o TriggerTriggerOutput) DestinationArn() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerTrigger) string { return v.DestinationArn }).(pulumi.StringOutput)
}

func (o TriggerTriggerOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerTrigger) []string { return v.Events }).(pulumi.StringArrayOutput)
}

func (o TriggerTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerTrigger) string { return v.Name }).(pulumi.StringOutput)
}

type TriggerTriggerArrayOutput struct{ *pulumi.OutputState }

func (TriggerTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerTrigger)(nil)).Elem()
}

func (o TriggerTriggerArrayOutput) ToTriggerTriggerArrayOutput() TriggerTriggerArrayOutput {
	return o
}

func (o TriggerTriggerArrayOutput) ToTriggerTriggerArrayOutputWithContext(ctx context.Context) TriggerTriggerArrayOutput {
	return o
}

func (o TriggerTriggerArrayOutput) Index(i pulumi.IntInput) TriggerTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerTrigger {
		return vs[0].([]TriggerTrigger)[vs[1].(int)]
	}).(TriggerTriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTriggerInput)(nil)).Elem(), TriggerTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTriggerArrayInput)(nil)).Elem(), TriggerTriggerArray{})
	pulumi.RegisterOutputType(TriggerTriggerOutput{})
	pulumi.RegisterOutputType(TriggerTriggerArrayOutput{})
}
