// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devopsguru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/devopsguru"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := devopsguru.NewEventSourcesConfig(ctx, "example", &devopsguru.EventSourcesConfigArgs{
//				EventSources: devopsguru.EventSourcesConfigEventSourceArray{
//					&devopsguru.EventSourcesConfigEventSourceArgs{
//						AmazonCodeGuruProfilers: devopsguru.EventSourcesConfigEventSourceAmazonCodeGuruProfilerArray{
//							&devopsguru.EventSourcesConfigEventSourceAmazonCodeGuruProfilerArgs{
//								Status: pulumi.String("ENABLED"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import DevOps Guru Event Sources Config using the `id`. For example:
//
// ```sh
// $ pulumi import aws:devopsguru/eventSourcesConfig:EventSourcesConfig example us-east-1
// ```
type EventSourcesConfig struct {
	pulumi.CustomResourceState

	// Configuration information about the integration of DevOps Guru as the Consumer via EventBridge with another AWS Service. See `eventSources` below.
	EventSources EventSourcesConfigEventSourceArrayOutput `pulumi:"eventSources"`
}

// NewEventSourcesConfig registers a new resource with the given unique name, arguments, and options.
func NewEventSourcesConfig(ctx *pulumi.Context,
	name string, args *EventSourcesConfigArgs, opts ...pulumi.ResourceOption) (*EventSourcesConfig, error) {
	if args == nil {
		args = &EventSourcesConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventSourcesConfig
	err := ctx.RegisterResource("aws:devopsguru/eventSourcesConfig:EventSourcesConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventSourcesConfig gets an existing EventSourcesConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventSourcesConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventSourcesConfigState, opts ...pulumi.ResourceOption) (*EventSourcesConfig, error) {
	var resource EventSourcesConfig
	err := ctx.ReadResource("aws:devopsguru/eventSourcesConfig:EventSourcesConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventSourcesConfig resources.
type eventSourcesConfigState struct {
	// Configuration information about the integration of DevOps Guru as the Consumer via EventBridge with another AWS Service. See `eventSources` below.
	EventSources []EventSourcesConfigEventSource `pulumi:"eventSources"`
}

type EventSourcesConfigState struct {
	// Configuration information about the integration of DevOps Guru as the Consumer via EventBridge with another AWS Service. See `eventSources` below.
	EventSources EventSourcesConfigEventSourceArrayInput
}

func (EventSourcesConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourcesConfigState)(nil)).Elem()
}

type eventSourcesConfigArgs struct {
	// Configuration information about the integration of DevOps Guru as the Consumer via EventBridge with another AWS Service. See `eventSources` below.
	EventSources []EventSourcesConfigEventSource `pulumi:"eventSources"`
}

// The set of arguments for constructing a EventSourcesConfig resource.
type EventSourcesConfigArgs struct {
	// Configuration information about the integration of DevOps Guru as the Consumer via EventBridge with another AWS Service. See `eventSources` below.
	EventSources EventSourcesConfigEventSourceArrayInput
}

func (EventSourcesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourcesConfigArgs)(nil)).Elem()
}

type EventSourcesConfigInput interface {
	pulumi.Input

	ToEventSourcesConfigOutput() EventSourcesConfigOutput
	ToEventSourcesConfigOutputWithContext(ctx context.Context) EventSourcesConfigOutput
}

func (*EventSourcesConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourcesConfig)(nil)).Elem()
}

func (i *EventSourcesConfig) ToEventSourcesConfigOutput() EventSourcesConfigOutput {
	return i.ToEventSourcesConfigOutputWithContext(context.Background())
}

func (i *EventSourcesConfig) ToEventSourcesConfigOutputWithContext(ctx context.Context) EventSourcesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourcesConfigOutput)
}

// EventSourcesConfigArrayInput is an input type that accepts EventSourcesConfigArray and EventSourcesConfigArrayOutput values.
// You can construct a concrete instance of `EventSourcesConfigArrayInput` via:
//
//	EventSourcesConfigArray{ EventSourcesConfigArgs{...} }
type EventSourcesConfigArrayInput interface {
	pulumi.Input

	ToEventSourcesConfigArrayOutput() EventSourcesConfigArrayOutput
	ToEventSourcesConfigArrayOutputWithContext(context.Context) EventSourcesConfigArrayOutput
}

type EventSourcesConfigArray []EventSourcesConfigInput

func (EventSourcesConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventSourcesConfig)(nil)).Elem()
}

func (i EventSourcesConfigArray) ToEventSourcesConfigArrayOutput() EventSourcesConfigArrayOutput {
	return i.ToEventSourcesConfigArrayOutputWithContext(context.Background())
}

func (i EventSourcesConfigArray) ToEventSourcesConfigArrayOutputWithContext(ctx context.Context) EventSourcesConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourcesConfigArrayOutput)
}

// EventSourcesConfigMapInput is an input type that accepts EventSourcesConfigMap and EventSourcesConfigMapOutput values.
// You can construct a concrete instance of `EventSourcesConfigMapInput` via:
//
//	EventSourcesConfigMap{ "key": EventSourcesConfigArgs{...} }
type EventSourcesConfigMapInput interface {
	pulumi.Input

	ToEventSourcesConfigMapOutput() EventSourcesConfigMapOutput
	ToEventSourcesConfigMapOutputWithContext(context.Context) EventSourcesConfigMapOutput
}

type EventSourcesConfigMap map[string]EventSourcesConfigInput

func (EventSourcesConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventSourcesConfig)(nil)).Elem()
}

func (i EventSourcesConfigMap) ToEventSourcesConfigMapOutput() EventSourcesConfigMapOutput {
	return i.ToEventSourcesConfigMapOutputWithContext(context.Background())
}

func (i EventSourcesConfigMap) ToEventSourcesConfigMapOutputWithContext(ctx context.Context) EventSourcesConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourcesConfigMapOutput)
}

type EventSourcesConfigOutput struct{ *pulumi.OutputState }

func (EventSourcesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourcesConfig)(nil)).Elem()
}

func (o EventSourcesConfigOutput) ToEventSourcesConfigOutput() EventSourcesConfigOutput {
	return o
}

func (o EventSourcesConfigOutput) ToEventSourcesConfigOutputWithContext(ctx context.Context) EventSourcesConfigOutput {
	return o
}

// Configuration information about the integration of DevOps Guru as the Consumer via EventBridge with another AWS Service. See `eventSources` below.
func (o EventSourcesConfigOutput) EventSources() EventSourcesConfigEventSourceArrayOutput {
	return o.ApplyT(func(v *EventSourcesConfig) EventSourcesConfigEventSourceArrayOutput { return v.EventSources }).(EventSourcesConfigEventSourceArrayOutput)
}

type EventSourcesConfigArrayOutput struct{ *pulumi.OutputState }

func (EventSourcesConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventSourcesConfig)(nil)).Elem()
}

func (o EventSourcesConfigArrayOutput) ToEventSourcesConfigArrayOutput() EventSourcesConfigArrayOutput {
	return o
}

func (o EventSourcesConfigArrayOutput) ToEventSourcesConfigArrayOutputWithContext(ctx context.Context) EventSourcesConfigArrayOutput {
	return o
}

func (o EventSourcesConfigArrayOutput) Index(i pulumi.IntInput) EventSourcesConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventSourcesConfig {
		return vs[0].([]*EventSourcesConfig)[vs[1].(int)]
	}).(EventSourcesConfigOutput)
}

type EventSourcesConfigMapOutput struct{ *pulumi.OutputState }

func (EventSourcesConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventSourcesConfig)(nil)).Elem()
}

func (o EventSourcesConfigMapOutput) ToEventSourcesConfigMapOutput() EventSourcesConfigMapOutput {
	return o
}

func (o EventSourcesConfigMapOutput) ToEventSourcesConfigMapOutputWithContext(ctx context.Context) EventSourcesConfigMapOutput {
	return o
}

func (o EventSourcesConfigMapOutput) MapIndex(k pulumi.StringInput) EventSourcesConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventSourcesConfig {
		return vs[0].(map[string]*EventSourcesConfig)[vs[1].(string)]
	}).(EventSourcesConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourcesConfigInput)(nil)).Elem(), &EventSourcesConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourcesConfigArrayInput)(nil)).Elem(), EventSourcesConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourcesConfigMapInput)(nil)).Elem(), EventSourcesConfigMap{})
	pulumi.RegisterOutputType(EventSourcesConfigOutput{})
	pulumi.RegisterOutputType(EventSourcesConfigArrayOutput{})
	pulumi.RegisterOutputType(EventSourcesConfigMapOutput{})
}
