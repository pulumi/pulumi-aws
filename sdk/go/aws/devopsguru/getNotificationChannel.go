// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devopsguru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS DevOps Guru Notification Channel.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/devopsguru"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := devopsguru.LookupNotificationChannel(ctx, &devopsguru.LookupNotificationChannelArgs{
//				Id: "channel-1234",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNotificationChannel(ctx *pulumi.Context, args *LookupNotificationChannelArgs, opts ...pulumi.InvokeOption) (*LookupNotificationChannelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNotificationChannelResult
	err := ctx.Invoke("aws:devopsguru/getNotificationChannel:getNotificationChannel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNotificationChannel.
type LookupNotificationChannelArgs struct {
	// Filter configurations for the Amazon SNS notification topic. See the `filters` attribute reference below.
	Filters []GetNotificationChannelFilter `pulumi:"filters"`
	// Unique identifier for the notification channel.
	Id string `pulumi:"id"`
	// SNS noficiation channel configurations. See the `sns` attribute reference below.
	Sns []GetNotificationChannelSn `pulumi:"sns"`
}

// A collection of values returned by getNotificationChannel.
type LookupNotificationChannelResult struct {
	// Filter configurations for the Amazon SNS notification topic. See the `filters` attribute reference below.
	Filters []GetNotificationChannelFilter `pulumi:"filters"`
	Id      string                         `pulumi:"id"`
	// SNS noficiation channel configurations. See the `sns` attribute reference below.
	Sns []GetNotificationChannelSn `pulumi:"sns"`
}

func LookupNotificationChannelOutput(ctx *pulumi.Context, args LookupNotificationChannelOutputArgs, opts ...pulumi.InvokeOption) LookupNotificationChannelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNotificationChannelResultOutput, error) {
			args := v.(LookupNotificationChannelArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupNotificationChannelResult
			secret, err := ctx.InvokePackageRaw("aws:devopsguru/getNotificationChannel:getNotificationChannel", args, &rv, "", opts...)
			if err != nil {
				return LookupNotificationChannelResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupNotificationChannelResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupNotificationChannelResultOutput), nil
			}
			return output, nil
		}).(LookupNotificationChannelResultOutput)
}

// A collection of arguments for invoking getNotificationChannel.
type LookupNotificationChannelOutputArgs struct {
	// Filter configurations for the Amazon SNS notification topic. See the `filters` attribute reference below.
	Filters GetNotificationChannelFilterArrayInput `pulumi:"filters"`
	// Unique identifier for the notification channel.
	Id pulumi.StringInput `pulumi:"id"`
	// SNS noficiation channel configurations. See the `sns` attribute reference below.
	Sns GetNotificationChannelSnArrayInput `pulumi:"sns"`
}

func (LookupNotificationChannelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationChannelArgs)(nil)).Elem()
}

// A collection of values returned by getNotificationChannel.
type LookupNotificationChannelResultOutput struct{ *pulumi.OutputState }

func (LookupNotificationChannelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationChannelResult)(nil)).Elem()
}

func (o LookupNotificationChannelResultOutput) ToLookupNotificationChannelResultOutput() LookupNotificationChannelResultOutput {
	return o
}

func (o LookupNotificationChannelResultOutput) ToLookupNotificationChannelResultOutputWithContext(ctx context.Context) LookupNotificationChannelResultOutput {
	return o
}

// Filter configurations for the Amazon SNS notification topic. See the `filters` attribute reference below.
func (o LookupNotificationChannelResultOutput) Filters() GetNotificationChannelFilterArrayOutput {
	return o.ApplyT(func(v LookupNotificationChannelResult) []GetNotificationChannelFilter { return v.Filters }).(GetNotificationChannelFilterArrayOutput)
}

func (o LookupNotificationChannelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationChannelResult) string { return v.Id }).(pulumi.StringOutput)
}

// SNS noficiation channel configurations. See the `sns` attribute reference below.
func (o LookupNotificationChannelResultOutput) Sns() GetNotificationChannelSnArrayOutput {
	return o.ApplyT(func(v LookupNotificationChannelResult) []GetNotificationChannelSn { return v.Sns }).(GetNotificationChannelSnArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNotificationChannelResultOutput{})
}
