// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package comprehend

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DocumentClassifier struct {
	pulumi.CustomResourceState

	Arn               pulumi.StringOutput                      `pulumi:"arn"`
	DataAccessRoleArn pulumi.StringOutput                      `pulumi:"dataAccessRoleArn"`
	InputDataConfig   DocumentClassifierInputDataConfigOutput  `pulumi:"inputDataConfig"`
	LanguageCode      pulumi.StringOutput                      `pulumi:"languageCode"`
	Mode              pulumi.StringPtrOutput                   `pulumi:"mode"`
	ModelKmsKeyId     pulumi.StringPtrOutput                   `pulumi:"modelKmsKeyId"`
	Name              pulumi.StringOutput                      `pulumi:"name"`
	OutputDataConfig  DocumentClassifierOutputDataConfigOutput `pulumi:"outputDataConfig"`
	Tags              pulumi.StringMapOutput                   `pulumi:"tags"`
	TagsAll           pulumi.StringMapOutput                   `pulumi:"tagsAll"`
	VersionName       pulumi.StringOutput                      `pulumi:"versionName"`
	VersionNamePrefix pulumi.StringOutput                      `pulumi:"versionNamePrefix"`
	VolumeKmsKeyId    pulumi.StringPtrOutput                   `pulumi:"volumeKmsKeyId"`
	VpcConfig         DocumentClassifierVpcConfigPtrOutput     `pulumi:"vpcConfig"`
}

// NewDocumentClassifier registers a new resource with the given unique name, arguments, and options.
func NewDocumentClassifier(ctx *pulumi.Context,
	name string, args *DocumentClassifierArgs, opts ...pulumi.ResourceOption) (*DocumentClassifier, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataAccessRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'DataAccessRoleArn'")
	}
	if args.InputDataConfig == nil {
		return nil, errors.New("invalid value for required argument 'InputDataConfig'")
	}
	if args.LanguageCode == nil {
		return nil, errors.New("invalid value for required argument 'LanguageCode'")
	}
	var resource DocumentClassifier
	err := ctx.RegisterResource("aws:comprehend/documentClassifier:DocumentClassifier", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocumentClassifier gets an existing DocumentClassifier resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocumentClassifier(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentClassifierState, opts ...pulumi.ResourceOption) (*DocumentClassifier, error) {
	var resource DocumentClassifier
	err := ctx.ReadResource("aws:comprehend/documentClassifier:DocumentClassifier", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DocumentClassifier resources.
type documentClassifierState struct {
	Arn               *string                             `pulumi:"arn"`
	DataAccessRoleArn *string                             `pulumi:"dataAccessRoleArn"`
	InputDataConfig   *DocumentClassifierInputDataConfig  `pulumi:"inputDataConfig"`
	LanguageCode      *string                             `pulumi:"languageCode"`
	Mode              *string                             `pulumi:"mode"`
	ModelKmsKeyId     *string                             `pulumi:"modelKmsKeyId"`
	Name              *string                             `pulumi:"name"`
	OutputDataConfig  *DocumentClassifierOutputDataConfig `pulumi:"outputDataConfig"`
	Tags              map[string]string                   `pulumi:"tags"`
	TagsAll           map[string]string                   `pulumi:"tagsAll"`
	VersionName       *string                             `pulumi:"versionName"`
	VersionNamePrefix *string                             `pulumi:"versionNamePrefix"`
	VolumeKmsKeyId    *string                             `pulumi:"volumeKmsKeyId"`
	VpcConfig         *DocumentClassifierVpcConfig        `pulumi:"vpcConfig"`
}

type DocumentClassifierState struct {
	Arn               pulumi.StringPtrInput
	DataAccessRoleArn pulumi.StringPtrInput
	InputDataConfig   DocumentClassifierInputDataConfigPtrInput
	LanguageCode      pulumi.StringPtrInput
	Mode              pulumi.StringPtrInput
	ModelKmsKeyId     pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	OutputDataConfig  DocumentClassifierOutputDataConfigPtrInput
	Tags              pulumi.StringMapInput
	TagsAll           pulumi.StringMapInput
	VersionName       pulumi.StringPtrInput
	VersionNamePrefix pulumi.StringPtrInput
	VolumeKmsKeyId    pulumi.StringPtrInput
	VpcConfig         DocumentClassifierVpcConfigPtrInput
}

func (DocumentClassifierState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentClassifierState)(nil)).Elem()
}

type documentClassifierArgs struct {
	DataAccessRoleArn string                              `pulumi:"dataAccessRoleArn"`
	InputDataConfig   DocumentClassifierInputDataConfig   `pulumi:"inputDataConfig"`
	LanguageCode      string                              `pulumi:"languageCode"`
	Mode              *string                             `pulumi:"mode"`
	ModelKmsKeyId     *string                             `pulumi:"modelKmsKeyId"`
	Name              *string                             `pulumi:"name"`
	OutputDataConfig  *DocumentClassifierOutputDataConfig `pulumi:"outputDataConfig"`
	Tags              map[string]string                   `pulumi:"tags"`
	VersionName       *string                             `pulumi:"versionName"`
	VersionNamePrefix *string                             `pulumi:"versionNamePrefix"`
	VolumeKmsKeyId    *string                             `pulumi:"volumeKmsKeyId"`
	VpcConfig         *DocumentClassifierVpcConfig        `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a DocumentClassifier resource.
type DocumentClassifierArgs struct {
	DataAccessRoleArn pulumi.StringInput
	InputDataConfig   DocumentClassifierInputDataConfigInput
	LanguageCode      pulumi.StringInput
	Mode              pulumi.StringPtrInput
	ModelKmsKeyId     pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	OutputDataConfig  DocumentClassifierOutputDataConfigPtrInput
	Tags              pulumi.StringMapInput
	VersionName       pulumi.StringPtrInput
	VersionNamePrefix pulumi.StringPtrInput
	VolumeKmsKeyId    pulumi.StringPtrInput
	VpcConfig         DocumentClassifierVpcConfigPtrInput
}

func (DocumentClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentClassifierArgs)(nil)).Elem()
}

type DocumentClassifierInput interface {
	pulumi.Input

	ToDocumentClassifierOutput() DocumentClassifierOutput
	ToDocumentClassifierOutputWithContext(ctx context.Context) DocumentClassifierOutput
}

func (*DocumentClassifier) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentClassifier)(nil)).Elem()
}

func (i *DocumentClassifier) ToDocumentClassifierOutput() DocumentClassifierOutput {
	return i.ToDocumentClassifierOutputWithContext(context.Background())
}

func (i *DocumentClassifier) ToDocumentClassifierOutputWithContext(ctx context.Context) DocumentClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentClassifierOutput)
}

// DocumentClassifierArrayInput is an input type that accepts DocumentClassifierArray and DocumentClassifierArrayOutput values.
// You can construct a concrete instance of `DocumentClassifierArrayInput` via:
//
//	DocumentClassifierArray{ DocumentClassifierArgs{...} }
type DocumentClassifierArrayInput interface {
	pulumi.Input

	ToDocumentClassifierArrayOutput() DocumentClassifierArrayOutput
	ToDocumentClassifierArrayOutputWithContext(context.Context) DocumentClassifierArrayOutput
}

type DocumentClassifierArray []DocumentClassifierInput

func (DocumentClassifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentClassifier)(nil)).Elem()
}

func (i DocumentClassifierArray) ToDocumentClassifierArrayOutput() DocumentClassifierArrayOutput {
	return i.ToDocumentClassifierArrayOutputWithContext(context.Background())
}

func (i DocumentClassifierArray) ToDocumentClassifierArrayOutputWithContext(ctx context.Context) DocumentClassifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentClassifierArrayOutput)
}

// DocumentClassifierMapInput is an input type that accepts DocumentClassifierMap and DocumentClassifierMapOutput values.
// You can construct a concrete instance of `DocumentClassifierMapInput` via:
//
//	DocumentClassifierMap{ "key": DocumentClassifierArgs{...} }
type DocumentClassifierMapInput interface {
	pulumi.Input

	ToDocumentClassifierMapOutput() DocumentClassifierMapOutput
	ToDocumentClassifierMapOutputWithContext(context.Context) DocumentClassifierMapOutput
}

type DocumentClassifierMap map[string]DocumentClassifierInput

func (DocumentClassifierMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentClassifier)(nil)).Elem()
}

func (i DocumentClassifierMap) ToDocumentClassifierMapOutput() DocumentClassifierMapOutput {
	return i.ToDocumentClassifierMapOutputWithContext(context.Background())
}

func (i DocumentClassifierMap) ToDocumentClassifierMapOutputWithContext(ctx context.Context) DocumentClassifierMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentClassifierMapOutput)
}

type DocumentClassifierOutput struct{ *pulumi.OutputState }

func (DocumentClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentClassifier)(nil)).Elem()
}

func (o DocumentClassifierOutput) ToDocumentClassifierOutput() DocumentClassifierOutput {
	return o
}

func (o DocumentClassifierOutput) ToDocumentClassifierOutputWithContext(ctx context.Context) DocumentClassifierOutput {
	return o
}

func (o DocumentClassifierOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentClassifier) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DocumentClassifierOutput) DataAccessRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentClassifier) pulumi.StringOutput { return v.DataAccessRoleArn }).(pulumi.StringOutput)
}

func (o DocumentClassifierOutput) InputDataConfig() DocumentClassifierInputDataConfigOutput {
	return o.ApplyT(func(v *DocumentClassifier) DocumentClassifierInputDataConfigOutput { return v.InputDataConfig }).(DocumentClassifierInputDataConfigOutput)
}

func (o DocumentClassifierOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentClassifier) pulumi.StringOutput { return v.LanguageCode }).(pulumi.StringOutput)
}

func (o DocumentClassifierOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentClassifier) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o DocumentClassifierOutput) ModelKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentClassifier) pulumi.StringPtrOutput { return v.ModelKmsKeyId }).(pulumi.StringPtrOutput)
}

func (o DocumentClassifierOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentClassifier) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DocumentClassifierOutput) OutputDataConfig() DocumentClassifierOutputDataConfigOutput {
	return o.ApplyT(func(v *DocumentClassifier) DocumentClassifierOutputDataConfigOutput { return v.OutputDataConfig }).(DocumentClassifierOutputDataConfigOutput)
}

func (o DocumentClassifierOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DocumentClassifier) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DocumentClassifierOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DocumentClassifier) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DocumentClassifierOutput) VersionName() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentClassifier) pulumi.StringOutput { return v.VersionName }).(pulumi.StringOutput)
}

func (o DocumentClassifierOutput) VersionNamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentClassifier) pulumi.StringOutput { return v.VersionNamePrefix }).(pulumi.StringOutput)
}

func (o DocumentClassifierOutput) VolumeKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentClassifier) pulumi.StringPtrOutput { return v.VolumeKmsKeyId }).(pulumi.StringPtrOutput)
}

func (o DocumentClassifierOutput) VpcConfig() DocumentClassifierVpcConfigPtrOutput {
	return o.ApplyT(func(v *DocumentClassifier) DocumentClassifierVpcConfigPtrOutput { return v.VpcConfig }).(DocumentClassifierVpcConfigPtrOutput)
}

type DocumentClassifierArrayOutput struct{ *pulumi.OutputState }

func (DocumentClassifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentClassifier)(nil)).Elem()
}

func (o DocumentClassifierArrayOutput) ToDocumentClassifierArrayOutput() DocumentClassifierArrayOutput {
	return o
}

func (o DocumentClassifierArrayOutput) ToDocumentClassifierArrayOutputWithContext(ctx context.Context) DocumentClassifierArrayOutput {
	return o
}

func (o DocumentClassifierArrayOutput) Index(i pulumi.IntInput) DocumentClassifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DocumentClassifier {
		return vs[0].([]*DocumentClassifier)[vs[1].(int)]
	}).(DocumentClassifierOutput)
}

type DocumentClassifierMapOutput struct{ *pulumi.OutputState }

func (DocumentClassifierMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentClassifier)(nil)).Elem()
}

func (o DocumentClassifierMapOutput) ToDocumentClassifierMapOutput() DocumentClassifierMapOutput {
	return o
}

func (o DocumentClassifierMapOutput) ToDocumentClassifierMapOutputWithContext(ctx context.Context) DocumentClassifierMapOutput {
	return o
}

func (o DocumentClassifierMapOutput) MapIndex(k pulumi.StringInput) DocumentClassifierOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DocumentClassifier {
		return vs[0].(map[string]*DocumentClassifier)[vs[1].(string)]
	}).(DocumentClassifierOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentClassifierInput)(nil)).Elem(), &DocumentClassifier{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentClassifierArrayInput)(nil)).Elem(), DocumentClassifierArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentClassifierMapInput)(nil)).Elem(), DocumentClassifierMap{})
	pulumi.RegisterOutputType(DocumentClassifierOutput{})
	pulumi.RegisterOutputType(DocumentClassifierArrayOutput{})
	pulumi.RegisterOutputType(DocumentClassifierMapOutput{})
}
