// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package comprehend

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Comprehend Entity Recognizer.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/comprehend"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			documents, err := s3.NewBucketObjectv2(ctx, "documents", nil)
//			if err != nil {
//				return err
//			}
//			entities, err := s3.NewBucketObjectv2(ctx, "entities", nil)
//			if err != nil {
//				return err
//			}
//			_, err = comprehend.NewEntityRecognizer(ctx, "example", &comprehend.EntityRecognizerArgs{
//				DataAccessRoleArn: pulumi.Any(aws_iam_role.Example.Arn),
//				LanguageCode:      pulumi.String("en"),
//				InputDataConfig: &comprehend.EntityRecognizerInputDataConfigArgs{
//					EntityTypes: comprehend.EntityRecognizerInputDataConfigEntityTypeArray{
//						&comprehend.EntityRecognizerInputDataConfigEntityTypeArgs{
//							Type: pulumi.String("ENTITY_1"),
//						},
//						&comprehend.EntityRecognizerInputDataConfigEntityTypeArgs{
//							Type: pulumi.String("ENTITY_2"),
//						},
//					},
//					Documents: &comprehend.EntityRecognizerInputDataConfigDocumentsArgs{
//						S3Uri: documents.ID().ApplyT(func(id string) (string, error) {
//							return fmt.Sprintf("s3://%v/%v", aws_s3_bucket.Documents.Bucket, id), nil
//						}).(pulumi.StringOutput),
//					},
//					EntityList: &comprehend.EntityRecognizerInputDataConfigEntityListArgs{
//						S3Uri: entities.ID().ApplyT(func(id string) (string, error) {
//							return fmt.Sprintf("s3://%v/%v", aws_s3_bucket.Entities.Bucket, id), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				aws_iam_role_policy.Example,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Comprehend Entity Recognizer using the ARN. For example:
//
// ```sh
//
//	$ pulumi import aws:comprehend/entityRecognizer:EntityRecognizer example arn:aws:comprehend:us-west-2:123456789012:entity-recognizer/example
//
// ```
type EntityRecognizer struct {
	pulumi.CustomResourceState

	// ARN of the Entity Recognizer version.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ARN for an IAM Role which allows Comprehend to read the training and testing data.
	DataAccessRoleArn pulumi.StringOutput `pulumi:"dataAccessRoleArn"`
	// Configuration for the training and testing data.
	// See the `inputDataConfig` Configuration Block section below.
	InputDataConfig EntityRecognizerInputDataConfigOutput `pulumi:"inputDataConfig"`
	// Two-letter language code for the language.
	// One of `en`, `es`, `fr`, `it`, `de`, or `pt`.
	LanguageCode pulumi.StringOutput `pulumi:"languageCode"`
	// The ID or ARN of a KMS Key used to encrypt trained Entity Recognizers.
	ModelKmsKeyId pulumi.StringPtrOutput `pulumi:"modelKmsKeyId"`
	// Name for the Entity Recognizer.
	// Has a maximum length of 63 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	//
	// The following arguments are optional:
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` Configuration Block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Name for the version of the Entity Recognizer.
	// Each version must have a unique name within the Entity Recognizer.
	// If omitted, the provider will assign a random, unique version name.
	// If explicitly set to `""`, no version name will be set.
	// Has a maximum length of 63 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	// Conflicts with `versionNamePrefix`.
	VersionName pulumi.StringOutput `pulumi:"versionName"`
	// Creates a unique version name beginning with the specified prefix.
	// Has a maximum length of 37 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	// Conflicts with `versionName`.
	VersionNamePrefix pulumi.StringOutput `pulumi:"versionNamePrefix"`
	// ID or ARN of a KMS Key used to encrypt storage volumes during job processing.
	VolumeKmsKeyId pulumi.StringPtrOutput `pulumi:"volumeKmsKeyId"`
	// Configuration parameters for VPC to contain Entity Recognizer resources.
	// See the `vpcConfig` Configuration Block section below.
	VpcConfig EntityRecognizerVpcConfigPtrOutput `pulumi:"vpcConfig"`
}

// NewEntityRecognizer registers a new resource with the given unique name, arguments, and options.
func NewEntityRecognizer(ctx *pulumi.Context,
	name string, args *EntityRecognizerArgs, opts ...pulumi.ResourceOption) (*EntityRecognizer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataAccessRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'DataAccessRoleArn'")
	}
	if args.InputDataConfig == nil {
		return nil, errors.New("invalid value for required argument 'InputDataConfig'")
	}
	if args.LanguageCode == nil {
		return nil, errors.New("invalid value for required argument 'LanguageCode'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EntityRecognizer
	err := ctx.RegisterResource("aws:comprehend/entityRecognizer:EntityRecognizer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntityRecognizer gets an existing EntityRecognizer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntityRecognizer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntityRecognizerState, opts ...pulumi.ResourceOption) (*EntityRecognizer, error) {
	var resource EntityRecognizer
	err := ctx.ReadResource("aws:comprehend/entityRecognizer:EntityRecognizer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntityRecognizer resources.
type entityRecognizerState struct {
	// ARN of the Entity Recognizer version.
	Arn *string `pulumi:"arn"`
	// The ARN for an IAM Role which allows Comprehend to read the training and testing data.
	DataAccessRoleArn *string `pulumi:"dataAccessRoleArn"`
	// Configuration for the training and testing data.
	// See the `inputDataConfig` Configuration Block section below.
	InputDataConfig *EntityRecognizerInputDataConfig `pulumi:"inputDataConfig"`
	// Two-letter language code for the language.
	// One of `en`, `es`, `fr`, `it`, `de`, or `pt`.
	LanguageCode *string `pulumi:"languageCode"`
	// The ID or ARN of a KMS Key used to encrypt trained Entity Recognizers.
	ModelKmsKeyId *string `pulumi:"modelKmsKeyId"`
	// Name for the Entity Recognizer.
	// Has a maximum length of 63 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` Configuration Block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Name for the version of the Entity Recognizer.
	// Each version must have a unique name within the Entity Recognizer.
	// If omitted, the provider will assign a random, unique version name.
	// If explicitly set to `""`, no version name will be set.
	// Has a maximum length of 63 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	// Conflicts with `versionNamePrefix`.
	VersionName *string `pulumi:"versionName"`
	// Creates a unique version name beginning with the specified prefix.
	// Has a maximum length of 37 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	// Conflicts with `versionName`.
	VersionNamePrefix *string `pulumi:"versionNamePrefix"`
	// ID or ARN of a KMS Key used to encrypt storage volumes during job processing.
	VolumeKmsKeyId *string `pulumi:"volumeKmsKeyId"`
	// Configuration parameters for VPC to contain Entity Recognizer resources.
	// See the `vpcConfig` Configuration Block section below.
	VpcConfig *EntityRecognizerVpcConfig `pulumi:"vpcConfig"`
}

type EntityRecognizerState struct {
	// ARN of the Entity Recognizer version.
	Arn pulumi.StringPtrInput
	// The ARN for an IAM Role which allows Comprehend to read the training and testing data.
	DataAccessRoleArn pulumi.StringPtrInput
	// Configuration for the training and testing data.
	// See the `inputDataConfig` Configuration Block section below.
	InputDataConfig EntityRecognizerInputDataConfigPtrInput
	// Two-letter language code for the language.
	// One of `en`, `es`, `fr`, `it`, `de`, or `pt`.
	LanguageCode pulumi.StringPtrInput
	// The ID or ARN of a KMS Key used to encrypt trained Entity Recognizers.
	ModelKmsKeyId pulumi.StringPtrInput
	// Name for the Entity Recognizer.
	// Has a maximum length of 63 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` Configuration Block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// Name for the version of the Entity Recognizer.
	// Each version must have a unique name within the Entity Recognizer.
	// If omitted, the provider will assign a random, unique version name.
	// If explicitly set to `""`, no version name will be set.
	// Has a maximum length of 63 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	// Conflicts with `versionNamePrefix`.
	VersionName pulumi.StringPtrInput
	// Creates a unique version name beginning with the specified prefix.
	// Has a maximum length of 37 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	// Conflicts with `versionName`.
	VersionNamePrefix pulumi.StringPtrInput
	// ID or ARN of a KMS Key used to encrypt storage volumes during job processing.
	VolumeKmsKeyId pulumi.StringPtrInput
	// Configuration parameters for VPC to contain Entity Recognizer resources.
	// See the `vpcConfig` Configuration Block section below.
	VpcConfig EntityRecognizerVpcConfigPtrInput
}

func (EntityRecognizerState) ElementType() reflect.Type {
	return reflect.TypeOf((*entityRecognizerState)(nil)).Elem()
}

type entityRecognizerArgs struct {
	// The ARN for an IAM Role which allows Comprehend to read the training and testing data.
	DataAccessRoleArn string `pulumi:"dataAccessRoleArn"`
	// Configuration for the training and testing data.
	// See the `inputDataConfig` Configuration Block section below.
	InputDataConfig EntityRecognizerInputDataConfig `pulumi:"inputDataConfig"`
	// Two-letter language code for the language.
	// One of `en`, `es`, `fr`, `it`, `de`, or `pt`.
	LanguageCode string `pulumi:"languageCode"`
	// The ID or ARN of a KMS Key used to encrypt trained Entity Recognizers.
	ModelKmsKeyId *string `pulumi:"modelKmsKeyId"`
	// Name for the Entity Recognizer.
	// Has a maximum length of 63 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` Configuration Block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Name for the version of the Entity Recognizer.
	// Each version must have a unique name within the Entity Recognizer.
	// If omitted, the provider will assign a random, unique version name.
	// If explicitly set to `""`, no version name will be set.
	// Has a maximum length of 63 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	// Conflicts with `versionNamePrefix`.
	VersionName *string `pulumi:"versionName"`
	// Creates a unique version name beginning with the specified prefix.
	// Has a maximum length of 37 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	// Conflicts with `versionName`.
	VersionNamePrefix *string `pulumi:"versionNamePrefix"`
	// ID or ARN of a KMS Key used to encrypt storage volumes during job processing.
	VolumeKmsKeyId *string `pulumi:"volumeKmsKeyId"`
	// Configuration parameters for VPC to contain Entity Recognizer resources.
	// See the `vpcConfig` Configuration Block section below.
	VpcConfig *EntityRecognizerVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a EntityRecognizer resource.
type EntityRecognizerArgs struct {
	// The ARN for an IAM Role which allows Comprehend to read the training and testing data.
	DataAccessRoleArn pulumi.StringInput
	// Configuration for the training and testing data.
	// See the `inputDataConfig` Configuration Block section below.
	InputDataConfig EntityRecognizerInputDataConfigInput
	// Two-letter language code for the language.
	// One of `en`, `es`, `fr`, `it`, `de`, or `pt`.
	LanguageCode pulumi.StringInput
	// The ID or ARN of a KMS Key used to encrypt trained Entity Recognizers.
	ModelKmsKeyId pulumi.StringPtrInput
	// Name for the Entity Recognizer.
	// Has a maximum length of 63 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` Configuration Block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Name for the version of the Entity Recognizer.
	// Each version must have a unique name within the Entity Recognizer.
	// If omitted, the provider will assign a random, unique version name.
	// If explicitly set to `""`, no version name will be set.
	// Has a maximum length of 63 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	// Conflicts with `versionNamePrefix`.
	VersionName pulumi.StringPtrInput
	// Creates a unique version name beginning with the specified prefix.
	// Has a maximum length of 37 characters.
	// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
	// Conflicts with `versionName`.
	VersionNamePrefix pulumi.StringPtrInput
	// ID or ARN of a KMS Key used to encrypt storage volumes during job processing.
	VolumeKmsKeyId pulumi.StringPtrInput
	// Configuration parameters for VPC to contain Entity Recognizer resources.
	// See the `vpcConfig` Configuration Block section below.
	VpcConfig EntityRecognizerVpcConfigPtrInput
}

func (EntityRecognizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entityRecognizerArgs)(nil)).Elem()
}

type EntityRecognizerInput interface {
	pulumi.Input

	ToEntityRecognizerOutput() EntityRecognizerOutput
	ToEntityRecognizerOutputWithContext(ctx context.Context) EntityRecognizerOutput
}

func (*EntityRecognizer) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityRecognizer)(nil)).Elem()
}

func (i *EntityRecognizer) ToEntityRecognizerOutput() EntityRecognizerOutput {
	return i.ToEntityRecognizerOutputWithContext(context.Background())
}

func (i *EntityRecognizer) ToEntityRecognizerOutputWithContext(ctx context.Context) EntityRecognizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerOutput)
}

func (i *EntityRecognizer) ToOutput(ctx context.Context) pulumix.Output[*EntityRecognizer] {
	return pulumix.Output[*EntityRecognizer]{
		OutputState: i.ToEntityRecognizerOutputWithContext(ctx).OutputState,
	}
}

// EntityRecognizerArrayInput is an input type that accepts EntityRecognizerArray and EntityRecognizerArrayOutput values.
// You can construct a concrete instance of `EntityRecognizerArrayInput` via:
//
//	EntityRecognizerArray{ EntityRecognizerArgs{...} }
type EntityRecognizerArrayInput interface {
	pulumi.Input

	ToEntityRecognizerArrayOutput() EntityRecognizerArrayOutput
	ToEntityRecognizerArrayOutputWithContext(context.Context) EntityRecognizerArrayOutput
}

type EntityRecognizerArray []EntityRecognizerInput

func (EntityRecognizerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntityRecognizer)(nil)).Elem()
}

func (i EntityRecognizerArray) ToEntityRecognizerArrayOutput() EntityRecognizerArrayOutput {
	return i.ToEntityRecognizerArrayOutputWithContext(context.Background())
}

func (i EntityRecognizerArray) ToEntityRecognizerArrayOutputWithContext(ctx context.Context) EntityRecognizerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerArrayOutput)
}

func (i EntityRecognizerArray) ToOutput(ctx context.Context) pulumix.Output[[]*EntityRecognizer] {
	return pulumix.Output[[]*EntityRecognizer]{
		OutputState: i.ToEntityRecognizerArrayOutputWithContext(ctx).OutputState,
	}
}

// EntityRecognizerMapInput is an input type that accepts EntityRecognizerMap and EntityRecognizerMapOutput values.
// You can construct a concrete instance of `EntityRecognizerMapInput` via:
//
//	EntityRecognizerMap{ "key": EntityRecognizerArgs{...} }
type EntityRecognizerMapInput interface {
	pulumi.Input

	ToEntityRecognizerMapOutput() EntityRecognizerMapOutput
	ToEntityRecognizerMapOutputWithContext(context.Context) EntityRecognizerMapOutput
}

type EntityRecognizerMap map[string]EntityRecognizerInput

func (EntityRecognizerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntityRecognizer)(nil)).Elem()
}

func (i EntityRecognizerMap) ToEntityRecognizerMapOutput() EntityRecognizerMapOutput {
	return i.ToEntityRecognizerMapOutputWithContext(context.Background())
}

func (i EntityRecognizerMap) ToEntityRecognizerMapOutputWithContext(ctx context.Context) EntityRecognizerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerMapOutput)
}

func (i EntityRecognizerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EntityRecognizer] {
	return pulumix.Output[map[string]*EntityRecognizer]{
		OutputState: i.ToEntityRecognizerMapOutputWithContext(ctx).OutputState,
	}
}

type EntityRecognizerOutput struct{ *pulumi.OutputState }

func (EntityRecognizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityRecognizer)(nil)).Elem()
}

func (o EntityRecognizerOutput) ToEntityRecognizerOutput() EntityRecognizerOutput {
	return o
}

func (o EntityRecognizerOutput) ToEntityRecognizerOutputWithContext(ctx context.Context) EntityRecognizerOutput {
	return o
}

func (o EntityRecognizerOutput) ToOutput(ctx context.Context) pulumix.Output[*EntityRecognizer] {
	return pulumix.Output[*EntityRecognizer]{
		OutputState: o.OutputState,
	}
}

// ARN of the Entity Recognizer version.
func (o EntityRecognizerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ARN for an IAM Role which allows Comprehend to read the training and testing data.
func (o EntityRecognizerOutput) DataAccessRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.DataAccessRoleArn }).(pulumi.StringOutput)
}

// Configuration for the training and testing data.
// See the `inputDataConfig` Configuration Block section below.
func (o EntityRecognizerOutput) InputDataConfig() EntityRecognizerInputDataConfigOutput {
	return o.ApplyT(func(v *EntityRecognizer) EntityRecognizerInputDataConfigOutput { return v.InputDataConfig }).(EntityRecognizerInputDataConfigOutput)
}

// Two-letter language code for the language.
// One of `en`, `es`, `fr`, `it`, `de`, or `pt`.
func (o EntityRecognizerOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.LanguageCode }).(pulumi.StringOutput)
}

// The ID or ARN of a KMS Key used to encrypt trained Entity Recognizers.
func (o EntityRecognizerOutput) ModelKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringPtrOutput { return v.ModelKmsKeyId }).(pulumi.StringPtrOutput)
}

// Name for the Entity Recognizer.
// Has a maximum length of 63 characters.
// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
//
// The following arguments are optional:
func (o EntityRecognizerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` Configuration Block present, tags with matching keys will overwrite those defined at the provider-level.
func (o EntityRecognizerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o EntityRecognizerOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Name for the version of the Entity Recognizer.
// Each version must have a unique name within the Entity Recognizer.
// If omitted, the provider will assign a random, unique version name.
// If explicitly set to `""`, no version name will be set.
// Has a maximum length of 63 characters.
// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
// Conflicts with `versionNamePrefix`.
func (o EntityRecognizerOutput) VersionName() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.VersionName }).(pulumi.StringOutput)
}

// Creates a unique version name beginning with the specified prefix.
// Has a maximum length of 37 characters.
// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
// Conflicts with `versionName`.
func (o EntityRecognizerOutput) VersionNamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.VersionNamePrefix }).(pulumi.StringOutput)
}

// ID or ARN of a KMS Key used to encrypt storage volumes during job processing.
func (o EntityRecognizerOutput) VolumeKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringPtrOutput { return v.VolumeKmsKeyId }).(pulumi.StringPtrOutput)
}

// Configuration parameters for VPC to contain Entity Recognizer resources.
// See the `vpcConfig` Configuration Block section below.
func (o EntityRecognizerOutput) VpcConfig() EntityRecognizerVpcConfigPtrOutput {
	return o.ApplyT(func(v *EntityRecognizer) EntityRecognizerVpcConfigPtrOutput { return v.VpcConfig }).(EntityRecognizerVpcConfigPtrOutput)
}

type EntityRecognizerArrayOutput struct{ *pulumi.OutputState }

func (EntityRecognizerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntityRecognizer)(nil)).Elem()
}

func (o EntityRecognizerArrayOutput) ToEntityRecognizerArrayOutput() EntityRecognizerArrayOutput {
	return o
}

func (o EntityRecognizerArrayOutput) ToEntityRecognizerArrayOutputWithContext(ctx context.Context) EntityRecognizerArrayOutput {
	return o
}

func (o EntityRecognizerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EntityRecognizer] {
	return pulumix.Output[[]*EntityRecognizer]{
		OutputState: o.OutputState,
	}
}

func (o EntityRecognizerArrayOutput) Index(i pulumi.IntInput) EntityRecognizerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EntityRecognizer {
		return vs[0].([]*EntityRecognizer)[vs[1].(int)]
	}).(EntityRecognizerOutput)
}

type EntityRecognizerMapOutput struct{ *pulumi.OutputState }

func (EntityRecognizerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntityRecognizer)(nil)).Elem()
}

func (o EntityRecognizerMapOutput) ToEntityRecognizerMapOutput() EntityRecognizerMapOutput {
	return o
}

func (o EntityRecognizerMapOutput) ToEntityRecognizerMapOutputWithContext(ctx context.Context) EntityRecognizerMapOutput {
	return o
}

func (o EntityRecognizerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EntityRecognizer] {
	return pulumix.Output[map[string]*EntityRecognizer]{
		OutputState: o.OutputState,
	}
}

func (o EntityRecognizerMapOutput) MapIndex(k pulumi.StringInput) EntityRecognizerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EntityRecognizer {
		return vs[0].(map[string]*EntityRecognizer)[vs[1].(string)]
	}).(EntityRecognizerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntityRecognizerInput)(nil)).Elem(), &EntityRecognizer{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityRecognizerArrayInput)(nil)).Elem(), EntityRecognizerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityRecognizerMapInput)(nil)).Elem(), EntityRecognizerMap{})
	pulumi.RegisterOutputType(EntityRecognizerOutput{})
	pulumi.RegisterOutputType(EntityRecognizerArrayOutput{})
	pulumi.RegisterOutputType(EntityRecognizerMapOutput{})
}
