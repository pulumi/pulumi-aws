// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package comprehend

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EntityRecognizer struct {
	pulumi.CustomResourceState

	Arn               pulumi.StringOutput                   `pulumi:"arn"`
	DataAccessRoleArn pulumi.StringOutput                   `pulumi:"dataAccessRoleArn"`
	InputDataConfig   EntityRecognizerInputDataConfigOutput `pulumi:"inputDataConfig"`
	LanguageCode      pulumi.StringOutput                   `pulumi:"languageCode"`
	ModelKmsKeyId     pulumi.StringPtrOutput                `pulumi:"modelKmsKeyId"`
	Name              pulumi.StringOutput                   `pulumi:"name"`
	Tags              pulumi.StringMapOutput                `pulumi:"tags"`
	TagsAll           pulumi.StringMapOutput                `pulumi:"tagsAll"`
	VersionName       pulumi.StringOutput                   `pulumi:"versionName"`
	VersionNamePrefix pulumi.StringOutput                   `pulumi:"versionNamePrefix"`
	VolumeKmsKeyId    pulumi.StringPtrOutput                `pulumi:"volumeKmsKeyId"`
	VpcConfig         EntityRecognizerVpcConfigPtrOutput    `pulumi:"vpcConfig"`
}

// NewEntityRecognizer registers a new resource with the given unique name, arguments, and options.
func NewEntityRecognizer(ctx *pulumi.Context,
	name string, args *EntityRecognizerArgs, opts ...pulumi.ResourceOption) (*EntityRecognizer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataAccessRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'DataAccessRoleArn'")
	}
	if args.InputDataConfig == nil {
		return nil, errors.New("invalid value for required argument 'InputDataConfig'")
	}
	if args.LanguageCode == nil {
		return nil, errors.New("invalid value for required argument 'LanguageCode'")
	}
	var resource EntityRecognizer
	err := ctx.RegisterResource("aws:comprehend/entityRecognizer:EntityRecognizer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntityRecognizer gets an existing EntityRecognizer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntityRecognizer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntityRecognizerState, opts ...pulumi.ResourceOption) (*EntityRecognizer, error) {
	var resource EntityRecognizer
	err := ctx.ReadResource("aws:comprehend/entityRecognizer:EntityRecognizer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntityRecognizer resources.
type entityRecognizerState struct {
	Arn               *string                          `pulumi:"arn"`
	DataAccessRoleArn *string                          `pulumi:"dataAccessRoleArn"`
	InputDataConfig   *EntityRecognizerInputDataConfig `pulumi:"inputDataConfig"`
	LanguageCode      *string                          `pulumi:"languageCode"`
	ModelKmsKeyId     *string                          `pulumi:"modelKmsKeyId"`
	Name              *string                          `pulumi:"name"`
	Tags              map[string]string                `pulumi:"tags"`
	TagsAll           map[string]string                `pulumi:"tagsAll"`
	VersionName       *string                          `pulumi:"versionName"`
	VersionNamePrefix *string                          `pulumi:"versionNamePrefix"`
	VolumeKmsKeyId    *string                          `pulumi:"volumeKmsKeyId"`
	VpcConfig         *EntityRecognizerVpcConfig       `pulumi:"vpcConfig"`
}

type EntityRecognizerState struct {
	Arn               pulumi.StringPtrInput
	DataAccessRoleArn pulumi.StringPtrInput
	InputDataConfig   EntityRecognizerInputDataConfigPtrInput
	LanguageCode      pulumi.StringPtrInput
	ModelKmsKeyId     pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
	TagsAll           pulumi.StringMapInput
	VersionName       pulumi.StringPtrInput
	VersionNamePrefix pulumi.StringPtrInput
	VolumeKmsKeyId    pulumi.StringPtrInput
	VpcConfig         EntityRecognizerVpcConfigPtrInput
}

func (EntityRecognizerState) ElementType() reflect.Type {
	return reflect.TypeOf((*entityRecognizerState)(nil)).Elem()
}

type entityRecognizerArgs struct {
	DataAccessRoleArn string                          `pulumi:"dataAccessRoleArn"`
	InputDataConfig   EntityRecognizerInputDataConfig `pulumi:"inputDataConfig"`
	LanguageCode      string                          `pulumi:"languageCode"`
	ModelKmsKeyId     *string                         `pulumi:"modelKmsKeyId"`
	Name              *string                         `pulumi:"name"`
	Tags              map[string]string               `pulumi:"tags"`
	VersionName       *string                         `pulumi:"versionName"`
	VersionNamePrefix *string                         `pulumi:"versionNamePrefix"`
	VolumeKmsKeyId    *string                         `pulumi:"volumeKmsKeyId"`
	VpcConfig         *EntityRecognizerVpcConfig      `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a EntityRecognizer resource.
type EntityRecognizerArgs struct {
	DataAccessRoleArn pulumi.StringInput
	InputDataConfig   EntityRecognizerInputDataConfigInput
	LanguageCode      pulumi.StringInput
	ModelKmsKeyId     pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
	VersionName       pulumi.StringPtrInput
	VersionNamePrefix pulumi.StringPtrInput
	VolumeKmsKeyId    pulumi.StringPtrInput
	VpcConfig         EntityRecognizerVpcConfigPtrInput
}

func (EntityRecognizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entityRecognizerArgs)(nil)).Elem()
}

type EntityRecognizerInput interface {
	pulumi.Input

	ToEntityRecognizerOutput() EntityRecognizerOutput
	ToEntityRecognizerOutputWithContext(ctx context.Context) EntityRecognizerOutput
}

func (*EntityRecognizer) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityRecognizer)(nil)).Elem()
}

func (i *EntityRecognizer) ToEntityRecognizerOutput() EntityRecognizerOutput {
	return i.ToEntityRecognizerOutputWithContext(context.Background())
}

func (i *EntityRecognizer) ToEntityRecognizerOutputWithContext(ctx context.Context) EntityRecognizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerOutput)
}

// EntityRecognizerArrayInput is an input type that accepts EntityRecognizerArray and EntityRecognizerArrayOutput values.
// You can construct a concrete instance of `EntityRecognizerArrayInput` via:
//
//	EntityRecognizerArray{ EntityRecognizerArgs{...} }
type EntityRecognizerArrayInput interface {
	pulumi.Input

	ToEntityRecognizerArrayOutput() EntityRecognizerArrayOutput
	ToEntityRecognizerArrayOutputWithContext(context.Context) EntityRecognizerArrayOutput
}

type EntityRecognizerArray []EntityRecognizerInput

func (EntityRecognizerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntityRecognizer)(nil)).Elem()
}

func (i EntityRecognizerArray) ToEntityRecognizerArrayOutput() EntityRecognizerArrayOutput {
	return i.ToEntityRecognizerArrayOutputWithContext(context.Background())
}

func (i EntityRecognizerArray) ToEntityRecognizerArrayOutputWithContext(ctx context.Context) EntityRecognizerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerArrayOutput)
}

// EntityRecognizerMapInput is an input type that accepts EntityRecognizerMap and EntityRecognizerMapOutput values.
// You can construct a concrete instance of `EntityRecognizerMapInput` via:
//
//	EntityRecognizerMap{ "key": EntityRecognizerArgs{...} }
type EntityRecognizerMapInput interface {
	pulumi.Input

	ToEntityRecognizerMapOutput() EntityRecognizerMapOutput
	ToEntityRecognizerMapOutputWithContext(context.Context) EntityRecognizerMapOutput
}

type EntityRecognizerMap map[string]EntityRecognizerInput

func (EntityRecognizerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntityRecognizer)(nil)).Elem()
}

func (i EntityRecognizerMap) ToEntityRecognizerMapOutput() EntityRecognizerMapOutput {
	return i.ToEntityRecognizerMapOutputWithContext(context.Background())
}

func (i EntityRecognizerMap) ToEntityRecognizerMapOutputWithContext(ctx context.Context) EntityRecognizerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRecognizerMapOutput)
}

type EntityRecognizerOutput struct{ *pulumi.OutputState }

func (EntityRecognizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityRecognizer)(nil)).Elem()
}

func (o EntityRecognizerOutput) ToEntityRecognizerOutput() EntityRecognizerOutput {
	return o
}

func (o EntityRecognizerOutput) ToEntityRecognizerOutputWithContext(ctx context.Context) EntityRecognizerOutput {
	return o
}

func (o EntityRecognizerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EntityRecognizerOutput) DataAccessRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.DataAccessRoleArn }).(pulumi.StringOutput)
}

func (o EntityRecognizerOutput) InputDataConfig() EntityRecognizerInputDataConfigOutput {
	return o.ApplyT(func(v *EntityRecognizer) EntityRecognizerInputDataConfigOutput { return v.InputDataConfig }).(EntityRecognizerInputDataConfigOutput)
}

func (o EntityRecognizerOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.LanguageCode }).(pulumi.StringOutput)
}

func (o EntityRecognizerOutput) ModelKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringPtrOutput { return v.ModelKmsKeyId }).(pulumi.StringPtrOutput)
}

func (o EntityRecognizerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EntityRecognizerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o EntityRecognizerOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o EntityRecognizerOutput) VersionName() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.VersionName }).(pulumi.StringOutput)
}

func (o EntityRecognizerOutput) VersionNamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringOutput { return v.VersionNamePrefix }).(pulumi.StringOutput)
}

func (o EntityRecognizerOutput) VolumeKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityRecognizer) pulumi.StringPtrOutput { return v.VolumeKmsKeyId }).(pulumi.StringPtrOutput)
}

func (o EntityRecognizerOutput) VpcConfig() EntityRecognizerVpcConfigPtrOutput {
	return o.ApplyT(func(v *EntityRecognizer) EntityRecognizerVpcConfigPtrOutput { return v.VpcConfig }).(EntityRecognizerVpcConfigPtrOutput)
}

type EntityRecognizerArrayOutput struct{ *pulumi.OutputState }

func (EntityRecognizerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntityRecognizer)(nil)).Elem()
}

func (o EntityRecognizerArrayOutput) ToEntityRecognizerArrayOutput() EntityRecognizerArrayOutput {
	return o
}

func (o EntityRecognizerArrayOutput) ToEntityRecognizerArrayOutputWithContext(ctx context.Context) EntityRecognizerArrayOutput {
	return o
}

func (o EntityRecognizerArrayOutput) Index(i pulumi.IntInput) EntityRecognizerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EntityRecognizer {
		return vs[0].([]*EntityRecognizer)[vs[1].(int)]
	}).(EntityRecognizerOutput)
}

type EntityRecognizerMapOutput struct{ *pulumi.OutputState }

func (EntityRecognizerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntityRecognizer)(nil)).Elem()
}

func (o EntityRecognizerMapOutput) ToEntityRecognizerMapOutput() EntityRecognizerMapOutput {
	return o
}

func (o EntityRecognizerMapOutput) ToEntityRecognizerMapOutputWithContext(ctx context.Context) EntityRecognizerMapOutput {
	return o
}

func (o EntityRecognizerMapOutput) MapIndex(k pulumi.StringInput) EntityRecognizerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EntityRecognizer {
		return vs[0].(map[string]*EntityRecognizer)[vs[1].(string)]
	}).(EntityRecognizerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntityRecognizerInput)(nil)).Elem(), &EntityRecognizer{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityRecognizerArrayInput)(nil)).Elem(), EntityRecognizerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityRecognizerMapInput)(nil)).Elem(), EntityRecognizerMap{})
	pulumi.RegisterOutputType(EntityRecognizerOutput{})
	pulumi.RegisterOutputType(EntityRecognizerArrayOutput{})
	pulumi.RegisterOutputType(EntityRecognizerMapOutput{})
}
