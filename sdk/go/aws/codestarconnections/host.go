// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codestarconnections

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CodeStar Host.
//
// > **NOTE:** The `codestarconnections.Host` resource is created in the state `PENDING`. Authentication with the host provider must be completed in the AWS Console. For more information visit [Set up a pending host](https://docs.aws.amazon.com/dtconsole/latest/userguide/connections-host-setup.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codestarconnections"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := codestarconnections.NewHost(ctx, "example", &codestarconnections.HostArgs{
// 			ProviderEndpoint: pulumi.String("https://example.com"),
// 			ProviderType:     pulumi.String("GitHubEnterpriseServer"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// CodeStar Host can be imported using the ARN, e.g.,
//
// ```sh
//  $ pulumi import aws:codestarconnections/host:Host example-host arn:aws:codestar-connections:us-west-1:0123456789:host/79d4d357-a2ee-41e4-b350-2fe39ae59448
// ```
type Host struct {
	pulumi.CustomResourceState

	// The CodeStar Host ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the host to be created. The name must be unique in the calling AWS account.
	Name pulumi.StringOutput `pulumi:"name"`
	// The endpoint of the infrastructure to be represented by the host after it is created.
	ProviderEndpoint pulumi.StringOutput `pulumi:"providerEndpoint"`
	// The name of the external provider where your third-party code repository is configured.
	ProviderType pulumi.StringOutput `pulumi:"providerType"`
	// The CodeStar Host status. Possible values are `PENDING`, `AVAILABLE`, `VPC_CONFIG_DELETING`, `VPC_CONFIG_INITIALIZING`, and `VPC_CONFIG_FAILED_INITIALIZATION`.
	Status pulumi.StringOutput `pulumi:"status"`
	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	VpcConfiguration HostVpcConfigurationPtrOutput `pulumi:"vpcConfiguration"`
}

// NewHost registers a new resource with the given unique name, arguments, and options.
func NewHost(ctx *pulumi.Context,
	name string, args *HostArgs, opts ...pulumi.ResourceOption) (*Host, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProviderEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'ProviderEndpoint'")
	}
	if args.ProviderType == nil {
		return nil, errors.New("invalid value for required argument 'ProviderType'")
	}
	var resource Host
	err := ctx.RegisterResource("aws:codestarconnections/host:Host", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHost gets an existing Host resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostState, opts ...pulumi.ResourceOption) (*Host, error) {
	var resource Host
	err := ctx.ReadResource("aws:codestarconnections/host:Host", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Host resources.
type hostState struct {
	// The CodeStar Host ARN.
	Arn *string `pulumi:"arn"`
	// The name of the host to be created. The name must be unique in the calling AWS account.
	Name *string `pulumi:"name"`
	// The endpoint of the infrastructure to be represented by the host after it is created.
	ProviderEndpoint *string `pulumi:"providerEndpoint"`
	// The name of the external provider where your third-party code repository is configured.
	ProviderType *string `pulumi:"providerType"`
	// The CodeStar Host status. Possible values are `PENDING`, `AVAILABLE`, `VPC_CONFIG_DELETING`, `VPC_CONFIG_INITIALIZING`, and `VPC_CONFIG_FAILED_INITIALIZATION`.
	Status *string `pulumi:"status"`
	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	VpcConfiguration *HostVpcConfiguration `pulumi:"vpcConfiguration"`
}

type HostState struct {
	// The CodeStar Host ARN.
	Arn pulumi.StringPtrInput
	// The name of the host to be created. The name must be unique in the calling AWS account.
	Name pulumi.StringPtrInput
	// The endpoint of the infrastructure to be represented by the host after it is created.
	ProviderEndpoint pulumi.StringPtrInput
	// The name of the external provider where your third-party code repository is configured.
	ProviderType pulumi.StringPtrInput
	// The CodeStar Host status. Possible values are `PENDING`, `AVAILABLE`, `VPC_CONFIG_DELETING`, `VPC_CONFIG_INITIALIZING`, and `VPC_CONFIG_FAILED_INITIALIZATION`.
	Status pulumi.StringPtrInput
	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	VpcConfiguration HostVpcConfigurationPtrInput
}

func (HostState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostState)(nil)).Elem()
}

type hostArgs struct {
	// The name of the host to be created. The name must be unique in the calling AWS account.
	Name *string `pulumi:"name"`
	// The endpoint of the infrastructure to be represented by the host after it is created.
	ProviderEndpoint string `pulumi:"providerEndpoint"`
	// The name of the external provider where your third-party code repository is configured.
	ProviderType string `pulumi:"providerType"`
	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	VpcConfiguration *HostVpcConfiguration `pulumi:"vpcConfiguration"`
}

// The set of arguments for constructing a Host resource.
type HostArgs struct {
	// The name of the host to be created. The name must be unique in the calling AWS account.
	Name pulumi.StringPtrInput
	// The endpoint of the infrastructure to be represented by the host after it is created.
	ProviderEndpoint pulumi.StringInput
	// The name of the external provider where your third-party code repository is configured.
	ProviderType pulumi.StringInput
	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	VpcConfiguration HostVpcConfigurationPtrInput
}

func (HostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostArgs)(nil)).Elem()
}

type HostInput interface {
	pulumi.Input

	ToHostOutput() HostOutput
	ToHostOutputWithContext(ctx context.Context) HostOutput
}

func (*Host) ElementType() reflect.Type {
	return reflect.TypeOf((*Host)(nil))
}

func (i *Host) ToHostOutput() HostOutput {
	return i.ToHostOutputWithContext(context.Background())
}

func (i *Host) ToHostOutputWithContext(ctx context.Context) HostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostOutput)
}

func (i *Host) ToHostPtrOutput() HostPtrOutput {
	return i.ToHostPtrOutputWithContext(context.Background())
}

func (i *Host) ToHostPtrOutputWithContext(ctx context.Context) HostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPtrOutput)
}

type HostPtrInput interface {
	pulumi.Input

	ToHostPtrOutput() HostPtrOutput
	ToHostPtrOutputWithContext(ctx context.Context) HostPtrOutput
}

type hostPtrType HostArgs

func (*hostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Host)(nil))
}

func (i *hostPtrType) ToHostPtrOutput() HostPtrOutput {
	return i.ToHostPtrOutputWithContext(context.Background())
}

func (i *hostPtrType) ToHostPtrOutputWithContext(ctx context.Context) HostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPtrOutput)
}

// HostArrayInput is an input type that accepts HostArray and HostArrayOutput values.
// You can construct a concrete instance of `HostArrayInput` via:
//
//          HostArray{ HostArgs{...} }
type HostArrayInput interface {
	pulumi.Input

	ToHostArrayOutput() HostArrayOutput
	ToHostArrayOutputWithContext(context.Context) HostArrayOutput
}

type HostArray []HostInput

func (HostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Host)(nil)).Elem()
}

func (i HostArray) ToHostArrayOutput() HostArrayOutput {
	return i.ToHostArrayOutputWithContext(context.Background())
}

func (i HostArray) ToHostArrayOutputWithContext(ctx context.Context) HostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostArrayOutput)
}

// HostMapInput is an input type that accepts HostMap and HostMapOutput values.
// You can construct a concrete instance of `HostMapInput` via:
//
//          HostMap{ "key": HostArgs{...} }
type HostMapInput interface {
	pulumi.Input

	ToHostMapOutput() HostMapOutput
	ToHostMapOutputWithContext(context.Context) HostMapOutput
}

type HostMap map[string]HostInput

func (HostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Host)(nil)).Elem()
}

func (i HostMap) ToHostMapOutput() HostMapOutput {
	return i.ToHostMapOutputWithContext(context.Background())
}

func (i HostMap) ToHostMapOutputWithContext(ctx context.Context) HostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostMapOutput)
}

type HostOutput struct{ *pulumi.OutputState }

func (HostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Host)(nil))
}

func (o HostOutput) ToHostOutput() HostOutput {
	return o
}

func (o HostOutput) ToHostOutputWithContext(ctx context.Context) HostOutput {
	return o
}

func (o HostOutput) ToHostPtrOutput() HostPtrOutput {
	return o.ToHostPtrOutputWithContext(context.Background())
}

func (o HostOutput) ToHostPtrOutputWithContext(ctx context.Context) HostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Host) *Host {
		return &v
	}).(HostPtrOutput)
}

type HostPtrOutput struct{ *pulumi.OutputState }

func (HostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Host)(nil))
}

func (o HostPtrOutput) ToHostPtrOutput() HostPtrOutput {
	return o
}

func (o HostPtrOutput) ToHostPtrOutputWithContext(ctx context.Context) HostPtrOutput {
	return o
}

func (o HostPtrOutput) Elem() HostOutput {
	return o.ApplyT(func(v *Host) Host {
		if v != nil {
			return *v
		}
		var ret Host
		return ret
	}).(HostOutput)
}

type HostArrayOutput struct{ *pulumi.OutputState }

func (HostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Host)(nil))
}

func (o HostArrayOutput) ToHostArrayOutput() HostArrayOutput {
	return o
}

func (o HostArrayOutput) ToHostArrayOutputWithContext(ctx context.Context) HostArrayOutput {
	return o
}

func (o HostArrayOutput) Index(i pulumi.IntInput) HostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Host {
		return vs[0].([]Host)[vs[1].(int)]
	}).(HostOutput)
}

type HostMapOutput struct{ *pulumi.OutputState }

func (HostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Host)(nil))
}

func (o HostMapOutput) ToHostMapOutput() HostMapOutput {
	return o
}

func (o HostMapOutput) ToHostMapOutputWithContext(ctx context.Context) HostMapOutput {
	return o
}

func (o HostMapOutput) MapIndex(k pulumi.StringInput) HostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Host {
		return vs[0].(map[string]Host)[vs[1].(string)]
	}).(HostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostInput)(nil)).Elem(), &Host{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostPtrInput)(nil)).Elem(), &Host{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostArrayInput)(nil)).Elem(), HostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostMapInput)(nil)).Elem(), HostMap{})
	pulumi.RegisterOutputType(HostOutput{})
	pulumi.RegisterOutputType(HostPtrOutput{})
	pulumi.RegisterOutputType(HostArrayOutput{})
	pulumi.RegisterOutputType(HostMapOutput{})
}
