// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can be used to get a set of license ARNs matching a filter.
//
// ## Example Usage
//
// The following shows getting all license ARNs issued from the AWS marketplace. Providing no filter, would provide all license ARNs for the entire account.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/licensemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := licensemanager.GetReceivedLicenses(ctx, &licensemanager.GetReceivedLicensesArgs{
//				Filters: []licensemanager.GetReceivedLicensesFilter{
//					{
//						Name: "IssuerName",
//						Values: []string{
//							"AWS/Marketplace",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetReceivedLicenses(ctx *pulumi.Context, args *GetReceivedLicensesArgs, opts ...pulumi.InvokeOption) (*GetReceivedLicensesResult, error) {
	var rv GetReceivedLicensesResult
	err := ctx.Invoke("aws:licensemanager/getReceivedLicenses:getReceivedLicenses", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReceivedLicenses.
type GetReceivedLicensesArgs struct {
	// Custom filter block as described below.
	Filters []GetReceivedLicensesFilter `pulumi:"filters"`
}

// A collection of values returned by getReceivedLicenses.
type GetReceivedLicensesResult struct {
	// List of all the license ARNs found.
	Arns    []string                    `pulumi:"arns"`
	Filters []GetReceivedLicensesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetReceivedLicensesOutput(ctx *pulumi.Context, args GetReceivedLicensesOutputArgs, opts ...pulumi.InvokeOption) GetReceivedLicensesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetReceivedLicensesResult, error) {
			args := v.(GetReceivedLicensesArgs)
			r, err := GetReceivedLicenses(ctx, &args, opts...)
			var s GetReceivedLicensesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetReceivedLicensesResultOutput)
}

// A collection of arguments for invoking getReceivedLicenses.
type GetReceivedLicensesOutputArgs struct {
	// Custom filter block as described below.
	Filters GetReceivedLicensesFilterArrayInput `pulumi:"filters"`
}

func (GetReceivedLicensesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicensesArgs)(nil)).Elem()
}

// A collection of values returned by getReceivedLicenses.
type GetReceivedLicensesResultOutput struct{ *pulumi.OutputState }

func (GetReceivedLicensesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicensesResult)(nil)).Elem()
}

func (o GetReceivedLicensesResultOutput) ToGetReceivedLicensesResultOutput() GetReceivedLicensesResultOutput {
	return o
}

func (o GetReceivedLicensesResultOutput) ToGetReceivedLicensesResultOutputWithContext(ctx context.Context) GetReceivedLicensesResultOutput {
	return o
}

// List of all the license ARNs found.
func (o GetReceivedLicensesResultOutput) Arns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetReceivedLicensesResult) []string { return v.Arns }).(pulumi.StringArrayOutput)
}

func (o GetReceivedLicensesResultOutput) Filters() GetReceivedLicensesFilterArrayOutput {
	return o.ApplyT(func(v GetReceivedLicensesResult) []GetReceivedLicensesFilter { return v.Filters }).(GetReceivedLicensesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetReceivedLicensesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicensesResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetReceivedLicensesResultOutput{})
}
