// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LicenseConfiguration struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput      `pulumi:"arn"`
	Description           pulumi.StringPtrOutput   `pulumi:"description"`
	LicenseCount          pulumi.IntPtrOutput      `pulumi:"licenseCount"`
	LicenseCountHardLimit pulumi.BoolPtrOutput     `pulumi:"licenseCountHardLimit"`
	LicenseCountingType   pulumi.StringOutput      `pulumi:"licenseCountingType"`
	LicenseRules          pulumi.StringArrayOutput `pulumi:"licenseRules"`
	Name                  pulumi.StringOutput      `pulumi:"name"`
	OwnerAccountId        pulumi.StringOutput      `pulumi:"ownerAccountId"`
	Tags                  pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll               pulumi.StringMapOutput   `pulumi:"tagsAll"`
}

// NewLicenseConfiguration registers a new resource with the given unique name, arguments, and options.
func NewLicenseConfiguration(ctx *pulumi.Context,
	name string, args *LicenseConfigurationArgs, opts ...pulumi.ResourceOption) (*LicenseConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LicenseCountingType == nil {
		return nil, errors.New("invalid value for required argument 'LicenseCountingType'")
	}
	var resource LicenseConfiguration
	err := ctx.RegisterResource("aws:licensemanager/licenseConfiguration:LicenseConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseConfiguration gets an existing LicenseConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseConfigurationState, opts ...pulumi.ResourceOption) (*LicenseConfiguration, error) {
	var resource LicenseConfiguration
	err := ctx.ReadResource("aws:licensemanager/licenseConfiguration:LicenseConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseConfiguration resources.
type licenseConfigurationState struct {
	Arn                   *string           `pulumi:"arn"`
	Description           *string           `pulumi:"description"`
	LicenseCount          *int              `pulumi:"licenseCount"`
	LicenseCountHardLimit *bool             `pulumi:"licenseCountHardLimit"`
	LicenseCountingType   *string           `pulumi:"licenseCountingType"`
	LicenseRules          []string          `pulumi:"licenseRules"`
	Name                  *string           `pulumi:"name"`
	OwnerAccountId        *string           `pulumi:"ownerAccountId"`
	Tags                  map[string]string `pulumi:"tags"`
	TagsAll               map[string]string `pulumi:"tagsAll"`
}

type LicenseConfigurationState struct {
	Arn                   pulumi.StringPtrInput
	Description           pulumi.StringPtrInput
	LicenseCount          pulumi.IntPtrInput
	LicenseCountHardLimit pulumi.BoolPtrInput
	LicenseCountingType   pulumi.StringPtrInput
	LicenseRules          pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	OwnerAccountId        pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
	TagsAll               pulumi.StringMapInput
}

func (LicenseConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseConfigurationState)(nil)).Elem()
}

type licenseConfigurationArgs struct {
	Description           *string           `pulumi:"description"`
	LicenseCount          *int              `pulumi:"licenseCount"`
	LicenseCountHardLimit *bool             `pulumi:"licenseCountHardLimit"`
	LicenseCountingType   string            `pulumi:"licenseCountingType"`
	LicenseRules          []string          `pulumi:"licenseRules"`
	Name                  *string           `pulumi:"name"`
	Tags                  map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LicenseConfiguration resource.
type LicenseConfigurationArgs struct {
	Description           pulumi.StringPtrInput
	LicenseCount          pulumi.IntPtrInput
	LicenseCountHardLimit pulumi.BoolPtrInput
	LicenseCountingType   pulumi.StringInput
	LicenseRules          pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
}

func (LicenseConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseConfigurationArgs)(nil)).Elem()
}

type LicenseConfigurationInput interface {
	pulumi.Input

	ToLicenseConfigurationOutput() LicenseConfigurationOutput
	ToLicenseConfigurationOutputWithContext(ctx context.Context) LicenseConfigurationOutput
}

func (*LicenseConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseConfiguration)(nil)).Elem()
}

func (i *LicenseConfiguration) ToLicenseConfigurationOutput() LicenseConfigurationOutput {
	return i.ToLicenseConfigurationOutputWithContext(context.Background())
}

func (i *LicenseConfiguration) ToLicenseConfigurationOutputWithContext(ctx context.Context) LicenseConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseConfigurationOutput)
}

// LicenseConfigurationArrayInput is an input type that accepts LicenseConfigurationArray and LicenseConfigurationArrayOutput values.
// You can construct a concrete instance of `LicenseConfigurationArrayInput` via:
//
//	LicenseConfigurationArray{ LicenseConfigurationArgs{...} }
type LicenseConfigurationArrayInput interface {
	pulumi.Input

	ToLicenseConfigurationArrayOutput() LicenseConfigurationArrayOutput
	ToLicenseConfigurationArrayOutputWithContext(context.Context) LicenseConfigurationArrayOutput
}

type LicenseConfigurationArray []LicenseConfigurationInput

func (LicenseConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseConfiguration)(nil)).Elem()
}

func (i LicenseConfigurationArray) ToLicenseConfigurationArrayOutput() LicenseConfigurationArrayOutput {
	return i.ToLicenseConfigurationArrayOutputWithContext(context.Background())
}

func (i LicenseConfigurationArray) ToLicenseConfigurationArrayOutputWithContext(ctx context.Context) LicenseConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseConfigurationArrayOutput)
}

// LicenseConfigurationMapInput is an input type that accepts LicenseConfigurationMap and LicenseConfigurationMapOutput values.
// You can construct a concrete instance of `LicenseConfigurationMapInput` via:
//
//	LicenseConfigurationMap{ "key": LicenseConfigurationArgs{...} }
type LicenseConfigurationMapInput interface {
	pulumi.Input

	ToLicenseConfigurationMapOutput() LicenseConfigurationMapOutput
	ToLicenseConfigurationMapOutputWithContext(context.Context) LicenseConfigurationMapOutput
}

type LicenseConfigurationMap map[string]LicenseConfigurationInput

func (LicenseConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseConfiguration)(nil)).Elem()
}

func (i LicenseConfigurationMap) ToLicenseConfigurationMapOutput() LicenseConfigurationMapOutput {
	return i.ToLicenseConfigurationMapOutputWithContext(context.Background())
}

func (i LicenseConfigurationMap) ToLicenseConfigurationMapOutputWithContext(ctx context.Context) LicenseConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseConfigurationMapOutput)
}

type LicenseConfigurationOutput struct{ *pulumi.OutputState }

func (LicenseConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseConfiguration)(nil)).Elem()
}

func (o LicenseConfigurationOutput) ToLicenseConfigurationOutput() LicenseConfigurationOutput {
	return o
}

func (o LicenseConfigurationOutput) ToLicenseConfigurationOutputWithContext(ctx context.Context) LicenseConfigurationOutput {
	return o
}

func (o LicenseConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LicenseConfigurationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseConfiguration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LicenseConfigurationOutput) LicenseCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LicenseConfiguration) pulumi.IntPtrOutput { return v.LicenseCount }).(pulumi.IntPtrOutput)
}

func (o LicenseConfigurationOutput) LicenseCountHardLimit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LicenseConfiguration) pulumi.BoolPtrOutput { return v.LicenseCountHardLimit }).(pulumi.BoolPtrOutput)
}

func (o LicenseConfigurationOutput) LicenseCountingType() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseConfiguration) pulumi.StringOutput { return v.LicenseCountingType }).(pulumi.StringOutput)
}

func (o LicenseConfigurationOutput) LicenseRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LicenseConfiguration) pulumi.StringArrayOutput { return v.LicenseRules }).(pulumi.StringArrayOutput)
}

func (o LicenseConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LicenseConfigurationOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseConfiguration) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

func (o LicenseConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LicenseConfiguration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LicenseConfigurationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LicenseConfiguration) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LicenseConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LicenseConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseConfiguration)(nil)).Elem()
}

func (o LicenseConfigurationArrayOutput) ToLicenseConfigurationArrayOutput() LicenseConfigurationArrayOutput {
	return o
}

func (o LicenseConfigurationArrayOutput) ToLicenseConfigurationArrayOutputWithContext(ctx context.Context) LicenseConfigurationArrayOutput {
	return o
}

func (o LicenseConfigurationArrayOutput) Index(i pulumi.IntInput) LicenseConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicenseConfiguration {
		return vs[0].([]*LicenseConfiguration)[vs[1].(int)]
	}).(LicenseConfigurationOutput)
}

type LicenseConfigurationMapOutput struct{ *pulumi.OutputState }

func (LicenseConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseConfiguration)(nil)).Elem()
}

func (o LicenseConfigurationMapOutput) ToLicenseConfigurationMapOutput() LicenseConfigurationMapOutput {
	return o
}

func (o LicenseConfigurationMapOutput) ToLicenseConfigurationMapOutputWithContext(ctx context.Context) LicenseConfigurationMapOutput {
	return o
}

func (o LicenseConfigurationMapOutput) MapIndex(k pulumi.StringInput) LicenseConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicenseConfiguration {
		return vs[0].(map[string]*LicenseConfiguration)[vs[1].(string)]
	}).(LicenseConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseConfigurationInput)(nil)).Elem(), &LicenseConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseConfigurationArrayInput)(nil)).Elem(), LicenseConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseConfigurationMapInput)(nil)).Elem(), LicenseConfigurationMap{})
	pulumi.RegisterOutputType(LicenseConfigurationOutput{})
	pulumi.RegisterOutputType(LicenseConfigurationArrayOutput{})
	pulumi.RegisterOutputType(LicenseConfigurationMapOutput{})
}
