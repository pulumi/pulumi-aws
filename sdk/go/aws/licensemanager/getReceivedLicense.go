// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can be used to get data on a received license using an ARN. This can be helpful for pulling in data on a license from the AWS marketplace and sharing that license with another account.
//
// ## Example Usage
//
// The following shows getting the received license data using and ARN.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/licensemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := licensemanager.GetReceivedLicense(ctx, &licensemanager.GetReceivedLicenseArgs{
//				LicenseArn: "arn:aws:license-manager::111111111111:license:l-ecbaa94eb71a4830b6d7e49268fecaa0",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetReceivedLicense(ctx *pulumi.Context, args *GetReceivedLicenseArgs, opts ...pulumi.InvokeOption) (*GetReceivedLicenseResult, error) {
	var rv GetReceivedLicenseResult
	err := ctx.Invoke("aws:licensemanager/getReceivedLicense:getReceivedLicense", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReceivedLicense.
type GetReceivedLicenseArgs struct {
	// The ARN of the received license you want data for.
	LicenseArn string `pulumi:"licenseArn"`
}

// A collection of values returned by getReceivedLicense.
type GetReceivedLicenseResult struct {
	// Granted license beneficiary. This is in the form of the ARN of the root user of the account.
	Beneficiary string `pulumi:"beneficiary"`
	// Configuration for consumption of the license. Detailed below
	ConsumptionConfigurations []GetReceivedLicenseConsumptionConfiguration `pulumi:"consumptionConfigurations"`
	// Creation time of the granted license in RFC 3339 format.
	CreateTime string `pulumi:"createTime"`
	// License entitlements. Detailed below
	Entitlements []GetReceivedLicenseEntitlement `pulumi:"entitlements"`
	// Home Region of the granted license.
	HomeRegion string `pulumi:"homeRegion"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Granted license issuer. Detailed below
	Issuers []GetReceivedLicenseIssuer `pulumi:"issuers"`
	// Amazon Resource Name (ARN) of the license.
	LicenseArn string `pulumi:"licenseArn"`
	// Granted license metadata. This is in the form of a set of all meta data. Detailed below
	LicenseMetadatas []GetReceivedLicenseLicenseMetadata `pulumi:"licenseMetadatas"`
	// License name.
	LicenseName string `pulumi:"licenseName"`
	// Product name.
	// * ` productSku  ` - Product SKU.
	ProductName string `pulumi:"productName"`
	ProductSku  string `pulumi:"productSku"`
	// Granted license received metadata. Detailed below
	ReceivedMetadatas []GetReceivedLicenseReceivedMetadata `pulumi:"receivedMetadatas"`
	// Granted license status.
	Status string `pulumi:"status"`
	// Date and time range during which the granted license is valid, in ISO8601-UTC format. Detailed below
	Validities []GetReceivedLicenseValidity `pulumi:"validities"`
	// Version of the granted license.
	Version string `pulumi:"version"`
}

func GetReceivedLicenseOutput(ctx *pulumi.Context, args GetReceivedLicenseOutputArgs, opts ...pulumi.InvokeOption) GetReceivedLicenseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetReceivedLicenseResult, error) {
			args := v.(GetReceivedLicenseArgs)
			r, err := GetReceivedLicense(ctx, &args, opts...)
			var s GetReceivedLicenseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetReceivedLicenseResultOutput)
}

// A collection of arguments for invoking getReceivedLicense.
type GetReceivedLicenseOutputArgs struct {
	// The ARN of the received license you want data for.
	LicenseArn pulumi.StringInput `pulumi:"licenseArn"`
}

func (GetReceivedLicenseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseArgs)(nil)).Elem()
}

// A collection of values returned by getReceivedLicense.
type GetReceivedLicenseResultOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseResult)(nil)).Elem()
}

func (o GetReceivedLicenseResultOutput) ToGetReceivedLicenseResultOutput() GetReceivedLicenseResultOutput {
	return o
}

func (o GetReceivedLicenseResultOutput) ToGetReceivedLicenseResultOutputWithContext(ctx context.Context) GetReceivedLicenseResultOutput {
	return o
}

// Granted license beneficiary. This is in the form of the ARN of the root user of the account.
func (o GetReceivedLicenseResultOutput) Beneficiary() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) string { return v.Beneficiary }).(pulumi.StringOutput)
}

// Configuration for consumption of the license. Detailed below
func (o GetReceivedLicenseResultOutput) ConsumptionConfigurations() GetReceivedLicenseConsumptionConfigurationArrayOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) []GetReceivedLicenseConsumptionConfiguration {
		return v.ConsumptionConfigurations
	}).(GetReceivedLicenseConsumptionConfigurationArrayOutput)
}

// Creation time of the granted license in RFC 3339 format.
func (o GetReceivedLicenseResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// License entitlements. Detailed below
func (o GetReceivedLicenseResultOutput) Entitlements() GetReceivedLicenseEntitlementArrayOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) []GetReceivedLicenseEntitlement { return v.Entitlements }).(GetReceivedLicenseEntitlementArrayOutput)
}

// Home Region of the granted license.
func (o GetReceivedLicenseResultOutput) HomeRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) string { return v.HomeRegion }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetReceivedLicenseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) string { return v.Id }).(pulumi.StringOutput)
}

// Granted license issuer. Detailed below
func (o GetReceivedLicenseResultOutput) Issuers() GetReceivedLicenseIssuerArrayOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) []GetReceivedLicenseIssuer { return v.Issuers }).(GetReceivedLicenseIssuerArrayOutput)
}

// Amazon Resource Name (ARN) of the license.
func (o GetReceivedLicenseResultOutput) LicenseArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) string { return v.LicenseArn }).(pulumi.StringOutput)
}

// Granted license metadata. This is in the form of a set of all meta data. Detailed below
func (o GetReceivedLicenseResultOutput) LicenseMetadatas() GetReceivedLicenseLicenseMetadataArrayOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) []GetReceivedLicenseLicenseMetadata { return v.LicenseMetadatas }).(GetReceivedLicenseLicenseMetadataArrayOutput)
}

// License name.
func (o GetReceivedLicenseResultOutput) LicenseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) string { return v.LicenseName }).(pulumi.StringOutput)
}

// Product name.
// * ` productSku  ` - Product SKU.
func (o GetReceivedLicenseResultOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) string { return v.ProductName }).(pulumi.StringOutput)
}

func (o GetReceivedLicenseResultOutput) ProductSku() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) string { return v.ProductSku }).(pulumi.StringOutput)
}

// Granted license received metadata. Detailed below
func (o GetReceivedLicenseResultOutput) ReceivedMetadatas() GetReceivedLicenseReceivedMetadataArrayOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) []GetReceivedLicenseReceivedMetadata { return v.ReceivedMetadatas }).(GetReceivedLicenseReceivedMetadataArrayOutput)
}

// Granted license status.
func (o GetReceivedLicenseResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) string { return v.Status }).(pulumi.StringOutput)
}

// Date and time range during which the granted license is valid, in ISO8601-UTC format. Detailed below
func (o GetReceivedLicenseResultOutput) Validities() GetReceivedLicenseValidityArrayOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) []GetReceivedLicenseValidity { return v.Validities }).(GetReceivedLicenseValidityArrayOutput)
}

// Version of the granted license.
func (o GetReceivedLicenseResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetReceivedLicenseResultOutput{})
}
