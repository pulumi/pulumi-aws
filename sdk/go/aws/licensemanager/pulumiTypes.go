// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type GetLicenseGrantsFilter struct {
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedGrants.html#API_ListReceivedGrants_RequestSyntax).
	// For example, if filtering using `ProductSKU`, use:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := licensemanager.GetLicenseGrants(ctx, &licensemanager.GetLicenseGrantsArgs{
	// 			Filters: []licensemanager.GetLicenseGrantsFilter{
	// 				{
	// 					Name: "ProductSKU",
	// 					Values: []string{
	// 						"",
	// 					},
	// 				},
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given field.
	Values []string `pulumi:"values"`
}

// GetLicenseGrantsFilterInput is an input type that accepts GetLicenseGrantsFilterArgs and GetLicenseGrantsFilterOutput values.
// You can construct a concrete instance of `GetLicenseGrantsFilterInput` via:
//
//	GetLicenseGrantsFilterArgs{...}
type GetLicenseGrantsFilterInput interface {
	pulumi.Input

	ToGetLicenseGrantsFilterOutput() GetLicenseGrantsFilterOutput
	ToGetLicenseGrantsFilterOutputWithContext(context.Context) GetLicenseGrantsFilterOutput
}

type GetLicenseGrantsFilterArgs struct {
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedGrants.html#API_ListReceivedGrants_RequestSyntax).
	// For example, if filtering using `ProductSKU`, use:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := licensemanager.GetLicenseGrants(ctx, &licensemanager.GetLicenseGrantsArgs{
	// 			Filters: []licensemanager.GetLicenseGrantsFilter{
	// 				{
	// 					Name: "ProductSKU",
	// 					Values: []string{
	// 						"",
	// 					},
	// 				},
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name pulumi.StringInput `pulumi:"name"`
	// Set of values that are accepted for the given field.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetLicenseGrantsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseGrantsFilter)(nil)).Elem()
}

func (i GetLicenseGrantsFilterArgs) ToGetLicenseGrantsFilterOutput() GetLicenseGrantsFilterOutput {
	return i.ToGetLicenseGrantsFilterOutputWithContext(context.Background())
}

func (i GetLicenseGrantsFilterArgs) ToGetLicenseGrantsFilterOutputWithContext(ctx context.Context) GetLicenseGrantsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLicenseGrantsFilterOutput)
}

func (i GetLicenseGrantsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetLicenseGrantsFilter] {
	return pulumix.Output[GetLicenseGrantsFilter]{
		OutputState: i.ToGetLicenseGrantsFilterOutputWithContext(ctx).OutputState,
	}
}

// GetLicenseGrantsFilterArrayInput is an input type that accepts GetLicenseGrantsFilterArray and GetLicenseGrantsFilterArrayOutput values.
// You can construct a concrete instance of `GetLicenseGrantsFilterArrayInput` via:
//
//	GetLicenseGrantsFilterArray{ GetLicenseGrantsFilterArgs{...} }
type GetLicenseGrantsFilterArrayInput interface {
	pulumi.Input

	ToGetLicenseGrantsFilterArrayOutput() GetLicenseGrantsFilterArrayOutput
	ToGetLicenseGrantsFilterArrayOutputWithContext(context.Context) GetLicenseGrantsFilterArrayOutput
}

type GetLicenseGrantsFilterArray []GetLicenseGrantsFilterInput

func (GetLicenseGrantsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLicenseGrantsFilter)(nil)).Elem()
}

func (i GetLicenseGrantsFilterArray) ToGetLicenseGrantsFilterArrayOutput() GetLicenseGrantsFilterArrayOutput {
	return i.ToGetLicenseGrantsFilterArrayOutputWithContext(context.Background())
}

func (i GetLicenseGrantsFilterArray) ToGetLicenseGrantsFilterArrayOutputWithContext(ctx context.Context) GetLicenseGrantsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLicenseGrantsFilterArrayOutput)
}

func (i GetLicenseGrantsFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLicenseGrantsFilter] {
	return pulumix.Output[[]GetLicenseGrantsFilter]{
		OutputState: i.ToGetLicenseGrantsFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLicenseGrantsFilterOutput struct{ *pulumi.OutputState }

func (GetLicenseGrantsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseGrantsFilter)(nil)).Elem()
}

func (o GetLicenseGrantsFilterOutput) ToGetLicenseGrantsFilterOutput() GetLicenseGrantsFilterOutput {
	return o
}

func (o GetLicenseGrantsFilterOutput) ToGetLicenseGrantsFilterOutputWithContext(ctx context.Context) GetLicenseGrantsFilterOutput {
	return o
}

func (o GetLicenseGrantsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetLicenseGrantsFilter] {
	return pulumix.Output[GetLicenseGrantsFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the field to filter by, as defined by
// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedGrants.html#API_ListReceivedGrants_RequestSyntax).
// For example, if filtering using `ProductSKU`, use:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := licensemanager.GetLicenseGrants(ctx, &licensemanager.GetLicenseGrantsArgs{
//				Filters: []licensemanager.GetLicenseGrantsFilter{
//					{
//						Name: "ProductSKU",
//						Values: []string{
//							"",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func (o GetLicenseGrantsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseGrantsFilter) string { return v.Name }).(pulumi.StringOutput)
}

// Set of values that are accepted for the given field.
func (o GetLicenseGrantsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLicenseGrantsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetLicenseGrantsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetLicenseGrantsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLicenseGrantsFilter)(nil)).Elem()
}

func (o GetLicenseGrantsFilterArrayOutput) ToGetLicenseGrantsFilterArrayOutput() GetLicenseGrantsFilterArrayOutput {
	return o
}

func (o GetLicenseGrantsFilterArrayOutput) ToGetLicenseGrantsFilterArrayOutputWithContext(ctx context.Context) GetLicenseGrantsFilterArrayOutput {
	return o
}

func (o GetLicenseGrantsFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLicenseGrantsFilter] {
	return pulumix.Output[[]GetLicenseGrantsFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetLicenseGrantsFilterArrayOutput) Index(i pulumi.IntInput) GetLicenseGrantsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLicenseGrantsFilter {
		return vs[0].([]GetLicenseGrantsFilter)[vs[1].(int)]
	}).(GetLicenseGrantsFilterOutput)
}

type GetReceivedLicenseConsumptionConfiguration struct {
	// Details about a borrow configuration. Detailed below
	BorrowConfigurations []GetReceivedLicenseConsumptionConfigurationBorrowConfiguration `pulumi:"borrowConfigurations"`
	// Details about a provisional configuration. Detailed below
	ProvisionalConfigurations []GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration `pulumi:"provisionalConfigurations"`
	RenewType                 string                                                               `pulumi:"renewType"`
}

// GetReceivedLicenseConsumptionConfigurationInput is an input type that accepts GetReceivedLicenseConsumptionConfigurationArgs and GetReceivedLicenseConsumptionConfigurationOutput values.
// You can construct a concrete instance of `GetReceivedLicenseConsumptionConfigurationInput` via:
//
//	GetReceivedLicenseConsumptionConfigurationArgs{...}
type GetReceivedLicenseConsumptionConfigurationInput interface {
	pulumi.Input

	ToGetReceivedLicenseConsumptionConfigurationOutput() GetReceivedLicenseConsumptionConfigurationOutput
	ToGetReceivedLicenseConsumptionConfigurationOutputWithContext(context.Context) GetReceivedLicenseConsumptionConfigurationOutput
}

type GetReceivedLicenseConsumptionConfigurationArgs struct {
	// Details about a borrow configuration. Detailed below
	BorrowConfigurations GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayInput `pulumi:"borrowConfigurations"`
	// Details about a provisional configuration. Detailed below
	ProvisionalConfigurations GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayInput `pulumi:"provisionalConfigurations"`
	RenewType                 pulumi.StringInput                                                           `pulumi:"renewType"`
}

func (GetReceivedLicenseConsumptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfiguration)(nil)).Elem()
}

func (i GetReceivedLicenseConsumptionConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationOutput() GetReceivedLicenseConsumptionConfigurationOutput {
	return i.ToGetReceivedLicenseConsumptionConfigurationOutputWithContext(context.Background())
}

func (i GetReceivedLicenseConsumptionConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseConsumptionConfigurationOutput)
}

func (i GetReceivedLicenseConsumptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseConsumptionConfiguration] {
	return pulumix.Output[GetReceivedLicenseConsumptionConfiguration]{
		OutputState: i.ToGetReceivedLicenseConsumptionConfigurationOutputWithContext(ctx).OutputState,
	}
}

// GetReceivedLicenseConsumptionConfigurationArrayInput is an input type that accepts GetReceivedLicenseConsumptionConfigurationArray and GetReceivedLicenseConsumptionConfigurationArrayOutput values.
// You can construct a concrete instance of `GetReceivedLicenseConsumptionConfigurationArrayInput` via:
//
//	GetReceivedLicenseConsumptionConfigurationArray{ GetReceivedLicenseConsumptionConfigurationArgs{...} }
type GetReceivedLicenseConsumptionConfigurationArrayInput interface {
	pulumi.Input

	ToGetReceivedLicenseConsumptionConfigurationArrayOutput() GetReceivedLicenseConsumptionConfigurationArrayOutput
	ToGetReceivedLicenseConsumptionConfigurationArrayOutputWithContext(context.Context) GetReceivedLicenseConsumptionConfigurationArrayOutput
}

type GetReceivedLicenseConsumptionConfigurationArray []GetReceivedLicenseConsumptionConfigurationInput

func (GetReceivedLicenseConsumptionConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseConsumptionConfiguration)(nil)).Elem()
}

func (i GetReceivedLicenseConsumptionConfigurationArray) ToGetReceivedLicenseConsumptionConfigurationArrayOutput() GetReceivedLicenseConsumptionConfigurationArrayOutput {
	return i.ToGetReceivedLicenseConsumptionConfigurationArrayOutputWithContext(context.Background())
}

func (i GetReceivedLicenseConsumptionConfigurationArray) ToGetReceivedLicenseConsumptionConfigurationArrayOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseConsumptionConfigurationArrayOutput)
}

func (i GetReceivedLicenseConsumptionConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseConsumptionConfiguration] {
	return pulumix.Output[[]GetReceivedLicenseConsumptionConfiguration]{
		OutputState: i.ToGetReceivedLicenseConsumptionConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

type GetReceivedLicenseConsumptionConfigurationOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseConsumptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfiguration)(nil)).Elem()
}

func (o GetReceivedLicenseConsumptionConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationOutput() GetReceivedLicenseConsumptionConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseConsumptionConfiguration] {
	return pulumix.Output[GetReceivedLicenseConsumptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Details about a borrow configuration. Detailed below
func (o GetReceivedLicenseConsumptionConfigurationOutput) BorrowConfigurations() GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput {
	return o.ApplyT(func(v GetReceivedLicenseConsumptionConfiguration) []GetReceivedLicenseConsumptionConfigurationBorrowConfiguration {
		return v.BorrowConfigurations
	}).(GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput)
}

// Details about a provisional configuration. Detailed below
func (o GetReceivedLicenseConsumptionConfigurationOutput) ProvisionalConfigurations() GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput {
	return o.ApplyT(func(v GetReceivedLicenseConsumptionConfiguration) []GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration {
		return v.ProvisionalConfigurations
	}).(GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput)
}

func (o GetReceivedLicenseConsumptionConfigurationOutput) RenewType() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseConsumptionConfiguration) string { return v.RenewType }).(pulumi.StringOutput)
}

type GetReceivedLicenseConsumptionConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseConsumptionConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseConsumptionConfiguration)(nil)).Elem()
}

func (o GetReceivedLicenseConsumptionConfigurationArrayOutput) ToGetReceivedLicenseConsumptionConfigurationArrayOutput() GetReceivedLicenseConsumptionConfigurationArrayOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationArrayOutput) ToGetReceivedLicenseConsumptionConfigurationArrayOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationArrayOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseConsumptionConfiguration] {
	return pulumix.Output[[]GetReceivedLicenseConsumptionConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetReceivedLicenseConsumptionConfigurationArrayOutput) Index(i pulumi.IntInput) GetReceivedLicenseConsumptionConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReceivedLicenseConsumptionConfiguration {
		return vs[0].([]GetReceivedLicenseConsumptionConfiguration)[vs[1].(int)]
	}).(GetReceivedLicenseConsumptionConfigurationOutput)
}

type GetReceivedLicenseConsumptionConfigurationBorrowConfiguration struct {
	// Indicates whether early check-ins are allowed.
	AllowEarlyCheckIn bool `pulumi:"allowEarlyCheckIn"`
	// Maximum time for the provisional configuration, in minutes.
	MaxTimeToLiveInMinutes int `pulumi:"maxTimeToLiveInMinutes"`
}

// GetReceivedLicenseConsumptionConfigurationBorrowConfigurationInput is an input type that accepts GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs and GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput values.
// You can construct a concrete instance of `GetReceivedLicenseConsumptionConfigurationBorrowConfigurationInput` via:
//
//	GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs{...}
type GetReceivedLicenseConsumptionConfigurationBorrowConfigurationInput interface {
	pulumi.Input

	ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput() GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput
	ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutputWithContext(context.Context) GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput
}

type GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs struct {
	// Indicates whether early check-ins are allowed.
	AllowEarlyCheckIn pulumi.BoolInput `pulumi:"allowEarlyCheckIn"`
	// Maximum time for the provisional configuration, in minutes.
	MaxTimeToLiveInMinutes pulumi.IntInput `pulumi:"maxTimeToLiveInMinutes"`
}

func (GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationBorrowConfiguration)(nil)).Elem()
}

func (i GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput() GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput {
	return i.ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutputWithContext(context.Background())
}

func (i GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput)
}

func (i GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseConsumptionConfigurationBorrowConfiguration] {
	return pulumix.Output[GetReceivedLicenseConsumptionConfigurationBorrowConfiguration]{
		OutputState: i.ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutputWithContext(ctx).OutputState,
	}
}

// GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayInput is an input type that accepts GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArray and GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput values.
// You can construct a concrete instance of `GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayInput` via:
//
//	GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArray{ GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs{...} }
type GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayInput interface {
	pulumi.Input

	ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput() GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput
	ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutputWithContext(context.Context) GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput
}

type GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArray []GetReceivedLicenseConsumptionConfigurationBorrowConfigurationInput

func (GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseConsumptionConfigurationBorrowConfiguration)(nil)).Elem()
}

func (i GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArray) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput() GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput {
	return i.ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutputWithContext(context.Background())
}

func (i GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArray) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput)
}

func (i GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseConsumptionConfigurationBorrowConfiguration] {
	return pulumix.Output[[]GetReceivedLicenseConsumptionConfigurationBorrowConfiguration]{
		OutputState: i.ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

type GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationBorrowConfiguration)(nil)).Elem()
}

func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput() GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseConsumptionConfigurationBorrowConfiguration] {
	return pulumix.Output[GetReceivedLicenseConsumptionConfigurationBorrowConfiguration]{
		OutputState: o.OutputState,
	}
}

// Indicates whether early check-ins are allowed.
func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) AllowEarlyCheckIn() pulumi.BoolOutput {
	return o.ApplyT(func(v GetReceivedLicenseConsumptionConfigurationBorrowConfiguration) bool { return v.AllowEarlyCheckIn }).(pulumi.BoolOutput)
}

// Maximum time for the provisional configuration, in minutes.
func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput) MaxTimeToLiveInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetReceivedLicenseConsumptionConfigurationBorrowConfiguration) int {
		return v.MaxTimeToLiveInMinutes
	}).(pulumi.IntOutput)
}

type GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseConsumptionConfigurationBorrowConfiguration)(nil)).Elem()
}

func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput() GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput) ToGetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseConsumptionConfigurationBorrowConfiguration] {
	return pulumix.Output[[]GetReceivedLicenseConsumptionConfigurationBorrowConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput) Index(i pulumi.IntInput) GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReceivedLicenseConsumptionConfigurationBorrowConfiguration {
		return vs[0].([]GetReceivedLicenseConsumptionConfigurationBorrowConfiguration)[vs[1].(int)]
	}).(GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput)
}

type GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration struct {
	// Maximum time for the provisional configuration, in minutes.
	MaxTimeToLiveInMinutes int `pulumi:"maxTimeToLiveInMinutes"`
}

// GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationInput is an input type that accepts GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs and GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput values.
// You can construct a concrete instance of `GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationInput` via:
//
//	GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs{...}
type GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationInput interface {
	pulumi.Input

	ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput() GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput
	ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutputWithContext(context.Context) GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput
}

type GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs struct {
	// Maximum time for the provisional configuration, in minutes.
	MaxTimeToLiveInMinutes pulumi.IntInput `pulumi:"maxTimeToLiveInMinutes"`
}

func (GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration)(nil)).Elem()
}

func (i GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput() GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput {
	return i.ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutputWithContext(context.Background())
}

func (i GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput)
}

func (i GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration] {
	return pulumix.Output[GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration]{
		OutputState: i.ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutputWithContext(ctx).OutputState,
	}
}

// GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayInput is an input type that accepts GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArray and GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput values.
// You can construct a concrete instance of `GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayInput` via:
//
//	GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArray{ GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs{...} }
type GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayInput interface {
	pulumi.Input

	ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput() GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput
	ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutputWithContext(context.Context) GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput
}

type GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArray []GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationInput

func (GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration)(nil)).Elem()
}

func (i GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArray) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput() GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput {
	return i.ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutputWithContext(context.Background())
}

func (i GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArray) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput)
}

func (i GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration] {
	return pulumix.Output[[]GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration]{
		OutputState: i.ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

type GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration)(nil)).Elem()
}

func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput() GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration] {
	return pulumix.Output[GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration]{
		OutputState: o.OutputState,
	}
}

// Maximum time for the provisional configuration, in minutes.
func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput) MaxTimeToLiveInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration) int {
		return v.MaxTimeToLiveInMinutes
	}).(pulumi.IntOutput)
}

type GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration)(nil)).Elem()
}

func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput() GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput) ToGetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutputWithContext(ctx context.Context) GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput {
	return o
}

func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration] {
	return pulumix.Output[[]GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput) Index(i pulumi.IntInput) GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration {
		return vs[0].([]GetReceivedLicenseConsumptionConfigurationProvisionalConfiguration)[vs[1].(int)]
	}).(GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput)
}

type GetReceivedLicenseEntitlement struct {
	// Indicates whether check-ins are allowed.
	AllowCheckIn bool `pulumi:"allowCheckIn"`
	// Maximum entitlement count. Use if the unit is not None.
	MaxCount int `pulumi:"maxCount"`
	// The key name.
	Name string `pulumi:"name"`
	// Entitlement unit.
	Unit string `pulumi:"unit"`
	// The value.
	Value string `pulumi:"value"`
}

// GetReceivedLicenseEntitlementInput is an input type that accepts GetReceivedLicenseEntitlementArgs and GetReceivedLicenseEntitlementOutput values.
// You can construct a concrete instance of `GetReceivedLicenseEntitlementInput` via:
//
//	GetReceivedLicenseEntitlementArgs{...}
type GetReceivedLicenseEntitlementInput interface {
	pulumi.Input

	ToGetReceivedLicenseEntitlementOutput() GetReceivedLicenseEntitlementOutput
	ToGetReceivedLicenseEntitlementOutputWithContext(context.Context) GetReceivedLicenseEntitlementOutput
}

type GetReceivedLicenseEntitlementArgs struct {
	// Indicates whether check-ins are allowed.
	AllowCheckIn pulumi.BoolInput `pulumi:"allowCheckIn"`
	// Maximum entitlement count. Use if the unit is not None.
	MaxCount pulumi.IntInput `pulumi:"maxCount"`
	// The key name.
	Name pulumi.StringInput `pulumi:"name"`
	// Entitlement unit.
	Unit pulumi.StringInput `pulumi:"unit"`
	// The value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetReceivedLicenseEntitlementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseEntitlement)(nil)).Elem()
}

func (i GetReceivedLicenseEntitlementArgs) ToGetReceivedLicenseEntitlementOutput() GetReceivedLicenseEntitlementOutput {
	return i.ToGetReceivedLicenseEntitlementOutputWithContext(context.Background())
}

func (i GetReceivedLicenseEntitlementArgs) ToGetReceivedLicenseEntitlementOutputWithContext(ctx context.Context) GetReceivedLicenseEntitlementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseEntitlementOutput)
}

func (i GetReceivedLicenseEntitlementArgs) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseEntitlement] {
	return pulumix.Output[GetReceivedLicenseEntitlement]{
		OutputState: i.ToGetReceivedLicenseEntitlementOutputWithContext(ctx).OutputState,
	}
}

// GetReceivedLicenseEntitlementArrayInput is an input type that accepts GetReceivedLicenseEntitlementArray and GetReceivedLicenseEntitlementArrayOutput values.
// You can construct a concrete instance of `GetReceivedLicenseEntitlementArrayInput` via:
//
//	GetReceivedLicenseEntitlementArray{ GetReceivedLicenseEntitlementArgs{...} }
type GetReceivedLicenseEntitlementArrayInput interface {
	pulumi.Input

	ToGetReceivedLicenseEntitlementArrayOutput() GetReceivedLicenseEntitlementArrayOutput
	ToGetReceivedLicenseEntitlementArrayOutputWithContext(context.Context) GetReceivedLicenseEntitlementArrayOutput
}

type GetReceivedLicenseEntitlementArray []GetReceivedLicenseEntitlementInput

func (GetReceivedLicenseEntitlementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseEntitlement)(nil)).Elem()
}

func (i GetReceivedLicenseEntitlementArray) ToGetReceivedLicenseEntitlementArrayOutput() GetReceivedLicenseEntitlementArrayOutput {
	return i.ToGetReceivedLicenseEntitlementArrayOutputWithContext(context.Background())
}

func (i GetReceivedLicenseEntitlementArray) ToGetReceivedLicenseEntitlementArrayOutputWithContext(ctx context.Context) GetReceivedLicenseEntitlementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseEntitlementArrayOutput)
}

func (i GetReceivedLicenseEntitlementArray) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseEntitlement] {
	return pulumix.Output[[]GetReceivedLicenseEntitlement]{
		OutputState: i.ToGetReceivedLicenseEntitlementArrayOutputWithContext(ctx).OutputState,
	}
}

type GetReceivedLicenseEntitlementOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseEntitlementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseEntitlement)(nil)).Elem()
}

func (o GetReceivedLicenseEntitlementOutput) ToGetReceivedLicenseEntitlementOutput() GetReceivedLicenseEntitlementOutput {
	return o
}

func (o GetReceivedLicenseEntitlementOutput) ToGetReceivedLicenseEntitlementOutputWithContext(ctx context.Context) GetReceivedLicenseEntitlementOutput {
	return o
}

func (o GetReceivedLicenseEntitlementOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseEntitlement] {
	return pulumix.Output[GetReceivedLicenseEntitlement]{
		OutputState: o.OutputState,
	}
}

// Indicates whether check-ins are allowed.
func (o GetReceivedLicenseEntitlementOutput) AllowCheckIn() pulumi.BoolOutput {
	return o.ApplyT(func(v GetReceivedLicenseEntitlement) bool { return v.AllowCheckIn }).(pulumi.BoolOutput)
}

// Maximum entitlement count. Use if the unit is not None.
func (o GetReceivedLicenseEntitlementOutput) MaxCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetReceivedLicenseEntitlement) int { return v.MaxCount }).(pulumi.IntOutput)
}

// The key name.
func (o GetReceivedLicenseEntitlementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseEntitlement) string { return v.Name }).(pulumi.StringOutput)
}

// Entitlement unit.
func (o GetReceivedLicenseEntitlementOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseEntitlement) string { return v.Unit }).(pulumi.StringOutput)
}

// The value.
func (o GetReceivedLicenseEntitlementOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseEntitlement) string { return v.Value }).(pulumi.StringOutput)
}

type GetReceivedLicenseEntitlementArrayOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseEntitlementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseEntitlement)(nil)).Elem()
}

func (o GetReceivedLicenseEntitlementArrayOutput) ToGetReceivedLicenseEntitlementArrayOutput() GetReceivedLicenseEntitlementArrayOutput {
	return o
}

func (o GetReceivedLicenseEntitlementArrayOutput) ToGetReceivedLicenseEntitlementArrayOutputWithContext(ctx context.Context) GetReceivedLicenseEntitlementArrayOutput {
	return o
}

func (o GetReceivedLicenseEntitlementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseEntitlement] {
	return pulumix.Output[[]GetReceivedLicenseEntitlement]{
		OutputState: o.OutputState,
	}
}

func (o GetReceivedLicenseEntitlementArrayOutput) Index(i pulumi.IntInput) GetReceivedLicenseEntitlementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReceivedLicenseEntitlement {
		return vs[0].([]GetReceivedLicenseEntitlement)[vs[1].(int)]
	}).(GetReceivedLicenseEntitlementOutput)
}

type GetReceivedLicenseIssuer struct {
	// Issuer key fingerprint.
	KeyFingerprint string `pulumi:"keyFingerprint"`
	// The key name.
	Name string `pulumi:"name"`
	// Asymmetric KMS key from AWS Key Management Service. The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
	SignKey string `pulumi:"signKey"`
}

// GetReceivedLicenseIssuerInput is an input type that accepts GetReceivedLicenseIssuerArgs and GetReceivedLicenseIssuerOutput values.
// You can construct a concrete instance of `GetReceivedLicenseIssuerInput` via:
//
//	GetReceivedLicenseIssuerArgs{...}
type GetReceivedLicenseIssuerInput interface {
	pulumi.Input

	ToGetReceivedLicenseIssuerOutput() GetReceivedLicenseIssuerOutput
	ToGetReceivedLicenseIssuerOutputWithContext(context.Context) GetReceivedLicenseIssuerOutput
}

type GetReceivedLicenseIssuerArgs struct {
	// Issuer key fingerprint.
	KeyFingerprint pulumi.StringInput `pulumi:"keyFingerprint"`
	// The key name.
	Name pulumi.StringInput `pulumi:"name"`
	// Asymmetric KMS key from AWS Key Management Service. The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
	SignKey pulumi.StringInput `pulumi:"signKey"`
}

func (GetReceivedLicenseIssuerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseIssuer)(nil)).Elem()
}

func (i GetReceivedLicenseIssuerArgs) ToGetReceivedLicenseIssuerOutput() GetReceivedLicenseIssuerOutput {
	return i.ToGetReceivedLicenseIssuerOutputWithContext(context.Background())
}

func (i GetReceivedLicenseIssuerArgs) ToGetReceivedLicenseIssuerOutputWithContext(ctx context.Context) GetReceivedLicenseIssuerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseIssuerOutput)
}

func (i GetReceivedLicenseIssuerArgs) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseIssuer] {
	return pulumix.Output[GetReceivedLicenseIssuer]{
		OutputState: i.ToGetReceivedLicenseIssuerOutputWithContext(ctx).OutputState,
	}
}

// GetReceivedLicenseIssuerArrayInput is an input type that accepts GetReceivedLicenseIssuerArray and GetReceivedLicenseIssuerArrayOutput values.
// You can construct a concrete instance of `GetReceivedLicenseIssuerArrayInput` via:
//
//	GetReceivedLicenseIssuerArray{ GetReceivedLicenseIssuerArgs{...} }
type GetReceivedLicenseIssuerArrayInput interface {
	pulumi.Input

	ToGetReceivedLicenseIssuerArrayOutput() GetReceivedLicenseIssuerArrayOutput
	ToGetReceivedLicenseIssuerArrayOutputWithContext(context.Context) GetReceivedLicenseIssuerArrayOutput
}

type GetReceivedLicenseIssuerArray []GetReceivedLicenseIssuerInput

func (GetReceivedLicenseIssuerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseIssuer)(nil)).Elem()
}

func (i GetReceivedLicenseIssuerArray) ToGetReceivedLicenseIssuerArrayOutput() GetReceivedLicenseIssuerArrayOutput {
	return i.ToGetReceivedLicenseIssuerArrayOutputWithContext(context.Background())
}

func (i GetReceivedLicenseIssuerArray) ToGetReceivedLicenseIssuerArrayOutputWithContext(ctx context.Context) GetReceivedLicenseIssuerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseIssuerArrayOutput)
}

func (i GetReceivedLicenseIssuerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseIssuer] {
	return pulumix.Output[[]GetReceivedLicenseIssuer]{
		OutputState: i.ToGetReceivedLicenseIssuerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetReceivedLicenseIssuerOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseIssuerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseIssuer)(nil)).Elem()
}

func (o GetReceivedLicenseIssuerOutput) ToGetReceivedLicenseIssuerOutput() GetReceivedLicenseIssuerOutput {
	return o
}

func (o GetReceivedLicenseIssuerOutput) ToGetReceivedLicenseIssuerOutputWithContext(ctx context.Context) GetReceivedLicenseIssuerOutput {
	return o
}

func (o GetReceivedLicenseIssuerOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseIssuer] {
	return pulumix.Output[GetReceivedLicenseIssuer]{
		OutputState: o.OutputState,
	}
}

// Issuer key fingerprint.
func (o GetReceivedLicenseIssuerOutput) KeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseIssuer) string { return v.KeyFingerprint }).(pulumi.StringOutput)
}

// The key name.
func (o GetReceivedLicenseIssuerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseIssuer) string { return v.Name }).(pulumi.StringOutput)
}

// Asymmetric KMS key from AWS Key Management Service. The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
func (o GetReceivedLicenseIssuerOutput) SignKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseIssuer) string { return v.SignKey }).(pulumi.StringOutput)
}

type GetReceivedLicenseIssuerArrayOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseIssuerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseIssuer)(nil)).Elem()
}

func (o GetReceivedLicenseIssuerArrayOutput) ToGetReceivedLicenseIssuerArrayOutput() GetReceivedLicenseIssuerArrayOutput {
	return o
}

func (o GetReceivedLicenseIssuerArrayOutput) ToGetReceivedLicenseIssuerArrayOutputWithContext(ctx context.Context) GetReceivedLicenseIssuerArrayOutput {
	return o
}

func (o GetReceivedLicenseIssuerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseIssuer] {
	return pulumix.Output[[]GetReceivedLicenseIssuer]{
		OutputState: o.OutputState,
	}
}

func (o GetReceivedLicenseIssuerArrayOutput) Index(i pulumi.IntInput) GetReceivedLicenseIssuerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReceivedLicenseIssuer {
		return vs[0].([]GetReceivedLicenseIssuer)[vs[1].(int)]
	}).(GetReceivedLicenseIssuerOutput)
}

type GetReceivedLicenseLicenseMetadata struct {
	// The key name.
	Name string `pulumi:"name"`
	// The value.
	Value string `pulumi:"value"`
}

// GetReceivedLicenseLicenseMetadataInput is an input type that accepts GetReceivedLicenseLicenseMetadataArgs and GetReceivedLicenseLicenseMetadataOutput values.
// You can construct a concrete instance of `GetReceivedLicenseLicenseMetadataInput` via:
//
//	GetReceivedLicenseLicenseMetadataArgs{...}
type GetReceivedLicenseLicenseMetadataInput interface {
	pulumi.Input

	ToGetReceivedLicenseLicenseMetadataOutput() GetReceivedLicenseLicenseMetadataOutput
	ToGetReceivedLicenseLicenseMetadataOutputWithContext(context.Context) GetReceivedLicenseLicenseMetadataOutput
}

type GetReceivedLicenseLicenseMetadataArgs struct {
	// The key name.
	Name pulumi.StringInput `pulumi:"name"`
	// The value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetReceivedLicenseLicenseMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseLicenseMetadata)(nil)).Elem()
}

func (i GetReceivedLicenseLicenseMetadataArgs) ToGetReceivedLicenseLicenseMetadataOutput() GetReceivedLicenseLicenseMetadataOutput {
	return i.ToGetReceivedLicenseLicenseMetadataOutputWithContext(context.Background())
}

func (i GetReceivedLicenseLicenseMetadataArgs) ToGetReceivedLicenseLicenseMetadataOutputWithContext(ctx context.Context) GetReceivedLicenseLicenseMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseLicenseMetadataOutput)
}

func (i GetReceivedLicenseLicenseMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseLicenseMetadata] {
	return pulumix.Output[GetReceivedLicenseLicenseMetadata]{
		OutputState: i.ToGetReceivedLicenseLicenseMetadataOutputWithContext(ctx).OutputState,
	}
}

// GetReceivedLicenseLicenseMetadataArrayInput is an input type that accepts GetReceivedLicenseLicenseMetadataArray and GetReceivedLicenseLicenseMetadataArrayOutput values.
// You can construct a concrete instance of `GetReceivedLicenseLicenseMetadataArrayInput` via:
//
//	GetReceivedLicenseLicenseMetadataArray{ GetReceivedLicenseLicenseMetadataArgs{...} }
type GetReceivedLicenseLicenseMetadataArrayInput interface {
	pulumi.Input

	ToGetReceivedLicenseLicenseMetadataArrayOutput() GetReceivedLicenseLicenseMetadataArrayOutput
	ToGetReceivedLicenseLicenseMetadataArrayOutputWithContext(context.Context) GetReceivedLicenseLicenseMetadataArrayOutput
}

type GetReceivedLicenseLicenseMetadataArray []GetReceivedLicenseLicenseMetadataInput

func (GetReceivedLicenseLicenseMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseLicenseMetadata)(nil)).Elem()
}

func (i GetReceivedLicenseLicenseMetadataArray) ToGetReceivedLicenseLicenseMetadataArrayOutput() GetReceivedLicenseLicenseMetadataArrayOutput {
	return i.ToGetReceivedLicenseLicenseMetadataArrayOutputWithContext(context.Background())
}

func (i GetReceivedLicenseLicenseMetadataArray) ToGetReceivedLicenseLicenseMetadataArrayOutputWithContext(ctx context.Context) GetReceivedLicenseLicenseMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseLicenseMetadataArrayOutput)
}

func (i GetReceivedLicenseLicenseMetadataArray) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseLicenseMetadata] {
	return pulumix.Output[[]GetReceivedLicenseLicenseMetadata]{
		OutputState: i.ToGetReceivedLicenseLicenseMetadataArrayOutputWithContext(ctx).OutputState,
	}
}

type GetReceivedLicenseLicenseMetadataOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseLicenseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseLicenseMetadata)(nil)).Elem()
}

func (o GetReceivedLicenseLicenseMetadataOutput) ToGetReceivedLicenseLicenseMetadataOutput() GetReceivedLicenseLicenseMetadataOutput {
	return o
}

func (o GetReceivedLicenseLicenseMetadataOutput) ToGetReceivedLicenseLicenseMetadataOutputWithContext(ctx context.Context) GetReceivedLicenseLicenseMetadataOutput {
	return o
}

func (o GetReceivedLicenseLicenseMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseLicenseMetadata] {
	return pulumix.Output[GetReceivedLicenseLicenseMetadata]{
		OutputState: o.OutputState,
	}
}

// The key name.
func (o GetReceivedLicenseLicenseMetadataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseLicenseMetadata) string { return v.Name }).(pulumi.StringOutput)
}

// The value.
func (o GetReceivedLicenseLicenseMetadataOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseLicenseMetadata) string { return v.Value }).(pulumi.StringOutput)
}

type GetReceivedLicenseLicenseMetadataArrayOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseLicenseMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseLicenseMetadata)(nil)).Elem()
}

func (o GetReceivedLicenseLicenseMetadataArrayOutput) ToGetReceivedLicenseLicenseMetadataArrayOutput() GetReceivedLicenseLicenseMetadataArrayOutput {
	return o
}

func (o GetReceivedLicenseLicenseMetadataArrayOutput) ToGetReceivedLicenseLicenseMetadataArrayOutputWithContext(ctx context.Context) GetReceivedLicenseLicenseMetadataArrayOutput {
	return o
}

func (o GetReceivedLicenseLicenseMetadataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseLicenseMetadata] {
	return pulumix.Output[[]GetReceivedLicenseLicenseMetadata]{
		OutputState: o.OutputState,
	}
}

func (o GetReceivedLicenseLicenseMetadataArrayOutput) Index(i pulumi.IntInput) GetReceivedLicenseLicenseMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReceivedLicenseLicenseMetadata {
		return vs[0].([]GetReceivedLicenseLicenseMetadata)[vs[1].(int)]
	}).(GetReceivedLicenseLicenseMetadataOutput)
}

type GetReceivedLicenseReceivedMetadata struct {
	// A list of allowed operations.
	AllowedOperations []string `pulumi:"allowedOperations"`
	// Received status.
	ReceivedStatus string `pulumi:"receivedStatus"`
	// Received status reason.
	ReceivedStatusReason string `pulumi:"receivedStatusReason"`
}

// GetReceivedLicenseReceivedMetadataInput is an input type that accepts GetReceivedLicenseReceivedMetadataArgs and GetReceivedLicenseReceivedMetadataOutput values.
// You can construct a concrete instance of `GetReceivedLicenseReceivedMetadataInput` via:
//
//	GetReceivedLicenseReceivedMetadataArgs{...}
type GetReceivedLicenseReceivedMetadataInput interface {
	pulumi.Input

	ToGetReceivedLicenseReceivedMetadataOutput() GetReceivedLicenseReceivedMetadataOutput
	ToGetReceivedLicenseReceivedMetadataOutputWithContext(context.Context) GetReceivedLicenseReceivedMetadataOutput
}

type GetReceivedLicenseReceivedMetadataArgs struct {
	// A list of allowed operations.
	AllowedOperations pulumi.StringArrayInput `pulumi:"allowedOperations"`
	// Received status.
	ReceivedStatus pulumi.StringInput `pulumi:"receivedStatus"`
	// Received status reason.
	ReceivedStatusReason pulumi.StringInput `pulumi:"receivedStatusReason"`
}

func (GetReceivedLicenseReceivedMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseReceivedMetadata)(nil)).Elem()
}

func (i GetReceivedLicenseReceivedMetadataArgs) ToGetReceivedLicenseReceivedMetadataOutput() GetReceivedLicenseReceivedMetadataOutput {
	return i.ToGetReceivedLicenseReceivedMetadataOutputWithContext(context.Background())
}

func (i GetReceivedLicenseReceivedMetadataArgs) ToGetReceivedLicenseReceivedMetadataOutputWithContext(ctx context.Context) GetReceivedLicenseReceivedMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseReceivedMetadataOutput)
}

func (i GetReceivedLicenseReceivedMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseReceivedMetadata] {
	return pulumix.Output[GetReceivedLicenseReceivedMetadata]{
		OutputState: i.ToGetReceivedLicenseReceivedMetadataOutputWithContext(ctx).OutputState,
	}
}

// GetReceivedLicenseReceivedMetadataArrayInput is an input type that accepts GetReceivedLicenseReceivedMetadataArray and GetReceivedLicenseReceivedMetadataArrayOutput values.
// You can construct a concrete instance of `GetReceivedLicenseReceivedMetadataArrayInput` via:
//
//	GetReceivedLicenseReceivedMetadataArray{ GetReceivedLicenseReceivedMetadataArgs{...} }
type GetReceivedLicenseReceivedMetadataArrayInput interface {
	pulumi.Input

	ToGetReceivedLicenseReceivedMetadataArrayOutput() GetReceivedLicenseReceivedMetadataArrayOutput
	ToGetReceivedLicenseReceivedMetadataArrayOutputWithContext(context.Context) GetReceivedLicenseReceivedMetadataArrayOutput
}

type GetReceivedLicenseReceivedMetadataArray []GetReceivedLicenseReceivedMetadataInput

func (GetReceivedLicenseReceivedMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseReceivedMetadata)(nil)).Elem()
}

func (i GetReceivedLicenseReceivedMetadataArray) ToGetReceivedLicenseReceivedMetadataArrayOutput() GetReceivedLicenseReceivedMetadataArrayOutput {
	return i.ToGetReceivedLicenseReceivedMetadataArrayOutputWithContext(context.Background())
}

func (i GetReceivedLicenseReceivedMetadataArray) ToGetReceivedLicenseReceivedMetadataArrayOutputWithContext(ctx context.Context) GetReceivedLicenseReceivedMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseReceivedMetadataArrayOutput)
}

func (i GetReceivedLicenseReceivedMetadataArray) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseReceivedMetadata] {
	return pulumix.Output[[]GetReceivedLicenseReceivedMetadata]{
		OutputState: i.ToGetReceivedLicenseReceivedMetadataArrayOutputWithContext(ctx).OutputState,
	}
}

type GetReceivedLicenseReceivedMetadataOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseReceivedMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseReceivedMetadata)(nil)).Elem()
}

func (o GetReceivedLicenseReceivedMetadataOutput) ToGetReceivedLicenseReceivedMetadataOutput() GetReceivedLicenseReceivedMetadataOutput {
	return o
}

func (o GetReceivedLicenseReceivedMetadataOutput) ToGetReceivedLicenseReceivedMetadataOutputWithContext(ctx context.Context) GetReceivedLicenseReceivedMetadataOutput {
	return o
}

func (o GetReceivedLicenseReceivedMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseReceivedMetadata] {
	return pulumix.Output[GetReceivedLicenseReceivedMetadata]{
		OutputState: o.OutputState,
	}
}

// A list of allowed operations.
func (o GetReceivedLicenseReceivedMetadataOutput) AllowedOperations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetReceivedLicenseReceivedMetadata) []string { return v.AllowedOperations }).(pulumi.StringArrayOutput)
}

// Received status.
func (o GetReceivedLicenseReceivedMetadataOutput) ReceivedStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseReceivedMetadata) string { return v.ReceivedStatus }).(pulumi.StringOutput)
}

// Received status reason.
func (o GetReceivedLicenseReceivedMetadataOutput) ReceivedStatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseReceivedMetadata) string { return v.ReceivedStatusReason }).(pulumi.StringOutput)
}

type GetReceivedLicenseReceivedMetadataArrayOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseReceivedMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseReceivedMetadata)(nil)).Elem()
}

func (o GetReceivedLicenseReceivedMetadataArrayOutput) ToGetReceivedLicenseReceivedMetadataArrayOutput() GetReceivedLicenseReceivedMetadataArrayOutput {
	return o
}

func (o GetReceivedLicenseReceivedMetadataArrayOutput) ToGetReceivedLicenseReceivedMetadataArrayOutputWithContext(ctx context.Context) GetReceivedLicenseReceivedMetadataArrayOutput {
	return o
}

func (o GetReceivedLicenseReceivedMetadataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseReceivedMetadata] {
	return pulumix.Output[[]GetReceivedLicenseReceivedMetadata]{
		OutputState: o.OutputState,
	}
}

func (o GetReceivedLicenseReceivedMetadataArrayOutput) Index(i pulumi.IntInput) GetReceivedLicenseReceivedMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReceivedLicenseReceivedMetadata {
		return vs[0].([]GetReceivedLicenseReceivedMetadata)[vs[1].(int)]
	}).(GetReceivedLicenseReceivedMetadataOutput)
}

type GetReceivedLicenseValidity struct {
	// Start of the validity time range.
	Begin string `pulumi:"begin"`
	// End of the validity time range.
	End string `pulumi:"end"`
}

// GetReceivedLicenseValidityInput is an input type that accepts GetReceivedLicenseValidityArgs and GetReceivedLicenseValidityOutput values.
// You can construct a concrete instance of `GetReceivedLicenseValidityInput` via:
//
//	GetReceivedLicenseValidityArgs{...}
type GetReceivedLicenseValidityInput interface {
	pulumi.Input

	ToGetReceivedLicenseValidityOutput() GetReceivedLicenseValidityOutput
	ToGetReceivedLicenseValidityOutputWithContext(context.Context) GetReceivedLicenseValidityOutput
}

type GetReceivedLicenseValidityArgs struct {
	// Start of the validity time range.
	Begin pulumi.StringInput `pulumi:"begin"`
	// End of the validity time range.
	End pulumi.StringInput `pulumi:"end"`
}

func (GetReceivedLicenseValidityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseValidity)(nil)).Elem()
}

func (i GetReceivedLicenseValidityArgs) ToGetReceivedLicenseValidityOutput() GetReceivedLicenseValidityOutput {
	return i.ToGetReceivedLicenseValidityOutputWithContext(context.Background())
}

func (i GetReceivedLicenseValidityArgs) ToGetReceivedLicenseValidityOutputWithContext(ctx context.Context) GetReceivedLicenseValidityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseValidityOutput)
}

func (i GetReceivedLicenseValidityArgs) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseValidity] {
	return pulumix.Output[GetReceivedLicenseValidity]{
		OutputState: i.ToGetReceivedLicenseValidityOutputWithContext(ctx).OutputState,
	}
}

// GetReceivedLicenseValidityArrayInput is an input type that accepts GetReceivedLicenseValidityArray and GetReceivedLicenseValidityArrayOutput values.
// You can construct a concrete instance of `GetReceivedLicenseValidityArrayInput` via:
//
//	GetReceivedLicenseValidityArray{ GetReceivedLicenseValidityArgs{...} }
type GetReceivedLicenseValidityArrayInput interface {
	pulumi.Input

	ToGetReceivedLicenseValidityArrayOutput() GetReceivedLicenseValidityArrayOutput
	ToGetReceivedLicenseValidityArrayOutputWithContext(context.Context) GetReceivedLicenseValidityArrayOutput
}

type GetReceivedLicenseValidityArray []GetReceivedLicenseValidityInput

func (GetReceivedLicenseValidityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseValidity)(nil)).Elem()
}

func (i GetReceivedLicenseValidityArray) ToGetReceivedLicenseValidityArrayOutput() GetReceivedLicenseValidityArrayOutput {
	return i.ToGetReceivedLicenseValidityArrayOutputWithContext(context.Background())
}

func (i GetReceivedLicenseValidityArray) ToGetReceivedLicenseValidityArrayOutputWithContext(ctx context.Context) GetReceivedLicenseValidityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicenseValidityArrayOutput)
}

func (i GetReceivedLicenseValidityArray) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseValidity] {
	return pulumix.Output[[]GetReceivedLicenseValidity]{
		OutputState: i.ToGetReceivedLicenseValidityArrayOutputWithContext(ctx).OutputState,
	}
}

type GetReceivedLicenseValidityOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseValidityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseValidity)(nil)).Elem()
}

func (o GetReceivedLicenseValidityOutput) ToGetReceivedLicenseValidityOutput() GetReceivedLicenseValidityOutput {
	return o
}

func (o GetReceivedLicenseValidityOutput) ToGetReceivedLicenseValidityOutputWithContext(ctx context.Context) GetReceivedLicenseValidityOutput {
	return o
}

func (o GetReceivedLicenseValidityOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicenseValidity] {
	return pulumix.Output[GetReceivedLicenseValidity]{
		OutputState: o.OutputState,
	}
}

// Start of the validity time range.
func (o GetReceivedLicenseValidityOutput) Begin() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseValidity) string { return v.Begin }).(pulumi.StringOutput)
}

// End of the validity time range.
func (o GetReceivedLicenseValidityOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicenseValidity) string { return v.End }).(pulumi.StringOutput)
}

type GetReceivedLicenseValidityArrayOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseValidityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicenseValidity)(nil)).Elem()
}

func (o GetReceivedLicenseValidityArrayOutput) ToGetReceivedLicenseValidityArrayOutput() GetReceivedLicenseValidityArrayOutput {
	return o
}

func (o GetReceivedLicenseValidityArrayOutput) ToGetReceivedLicenseValidityArrayOutputWithContext(ctx context.Context) GetReceivedLicenseValidityArrayOutput {
	return o
}

func (o GetReceivedLicenseValidityArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicenseValidity] {
	return pulumix.Output[[]GetReceivedLicenseValidity]{
		OutputState: o.OutputState,
	}
}

func (o GetReceivedLicenseValidityArrayOutput) Index(i pulumi.IntInput) GetReceivedLicenseValidityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReceivedLicenseValidity {
		return vs[0].([]GetReceivedLicenseValidity)[vs[1].(int)]
	}).(GetReceivedLicenseValidityOutput)
}

type GetReceivedLicensesFilter struct {
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedLicenses.html#API_ListReceivedLicenses_RequestSyntax).
	// For example, if filtering using `ProductSKU`, use:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := licensemanager.GetReceivedLicenses(ctx, &licensemanager.GetReceivedLicensesArgs{
	// 			Filters: []licensemanager.GetReceivedLicensesFilter{
	// 				{
	// 					Name: "ProductSKU",
	// 					Values: []string{
	// 						"",
	// 					},
	// 				},
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given field.
	Values []string `pulumi:"values"`
}

// GetReceivedLicensesFilterInput is an input type that accepts GetReceivedLicensesFilterArgs and GetReceivedLicensesFilterOutput values.
// You can construct a concrete instance of `GetReceivedLicensesFilterInput` via:
//
//	GetReceivedLicensesFilterArgs{...}
type GetReceivedLicensesFilterInput interface {
	pulumi.Input

	ToGetReceivedLicensesFilterOutput() GetReceivedLicensesFilterOutput
	ToGetReceivedLicensesFilterOutputWithContext(context.Context) GetReceivedLicensesFilterOutput
}

type GetReceivedLicensesFilterArgs struct {
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedLicenses.html#API_ListReceivedLicenses_RequestSyntax).
	// For example, if filtering using `ProductSKU`, use:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := licensemanager.GetReceivedLicenses(ctx, &licensemanager.GetReceivedLicensesArgs{
	// 			Filters: []licensemanager.GetReceivedLicensesFilter{
	// 				{
	// 					Name: "ProductSKU",
	// 					Values: []string{
	// 						"",
	// 					},
	// 				},
	// 			},
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name pulumi.StringInput `pulumi:"name"`
	// Set of values that are accepted for the given field.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetReceivedLicensesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicensesFilter)(nil)).Elem()
}

func (i GetReceivedLicensesFilterArgs) ToGetReceivedLicensesFilterOutput() GetReceivedLicensesFilterOutput {
	return i.ToGetReceivedLicensesFilterOutputWithContext(context.Background())
}

func (i GetReceivedLicensesFilterArgs) ToGetReceivedLicensesFilterOutputWithContext(ctx context.Context) GetReceivedLicensesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicensesFilterOutput)
}

func (i GetReceivedLicensesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicensesFilter] {
	return pulumix.Output[GetReceivedLicensesFilter]{
		OutputState: i.ToGetReceivedLicensesFilterOutputWithContext(ctx).OutputState,
	}
}

// GetReceivedLicensesFilterArrayInput is an input type that accepts GetReceivedLicensesFilterArray and GetReceivedLicensesFilterArrayOutput values.
// You can construct a concrete instance of `GetReceivedLicensesFilterArrayInput` via:
//
//	GetReceivedLicensesFilterArray{ GetReceivedLicensesFilterArgs{...} }
type GetReceivedLicensesFilterArrayInput interface {
	pulumi.Input

	ToGetReceivedLicensesFilterArrayOutput() GetReceivedLicensesFilterArrayOutput
	ToGetReceivedLicensesFilterArrayOutputWithContext(context.Context) GetReceivedLicensesFilterArrayOutput
}

type GetReceivedLicensesFilterArray []GetReceivedLicensesFilterInput

func (GetReceivedLicensesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicensesFilter)(nil)).Elem()
}

func (i GetReceivedLicensesFilterArray) ToGetReceivedLicensesFilterArrayOutput() GetReceivedLicensesFilterArrayOutput {
	return i.ToGetReceivedLicensesFilterArrayOutputWithContext(context.Background())
}

func (i GetReceivedLicensesFilterArray) ToGetReceivedLicensesFilterArrayOutputWithContext(ctx context.Context) GetReceivedLicensesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReceivedLicensesFilterArrayOutput)
}

func (i GetReceivedLicensesFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicensesFilter] {
	return pulumix.Output[[]GetReceivedLicensesFilter]{
		OutputState: i.ToGetReceivedLicensesFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetReceivedLicensesFilterOutput struct{ *pulumi.OutputState }

func (GetReceivedLicensesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicensesFilter)(nil)).Elem()
}

func (o GetReceivedLicensesFilterOutput) ToGetReceivedLicensesFilterOutput() GetReceivedLicensesFilterOutput {
	return o
}

func (o GetReceivedLicensesFilterOutput) ToGetReceivedLicensesFilterOutputWithContext(ctx context.Context) GetReceivedLicensesFilterOutput {
	return o
}

func (o GetReceivedLicensesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetReceivedLicensesFilter] {
	return pulumix.Output[GetReceivedLicensesFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the field to filter by, as defined by
// [the underlying AWS API](https://docs.aws.amazon.com/license-manager/latest/APIReference/API_ListReceivedLicenses.html#API_ListReceivedLicenses_RequestSyntax).
// For example, if filtering using `ProductSKU`, use:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/licensemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := licensemanager.GetReceivedLicenses(ctx, &licensemanager.GetReceivedLicensesArgs{
//				Filters: []licensemanager.GetReceivedLicensesFilter{
//					{
//						Name: "ProductSKU",
//						Values: []string{
//							"",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func (o GetReceivedLicensesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceivedLicensesFilter) string { return v.Name }).(pulumi.StringOutput)
}

// Set of values that are accepted for the given field.
func (o GetReceivedLicensesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetReceivedLicensesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetReceivedLicensesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetReceivedLicensesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReceivedLicensesFilter)(nil)).Elem()
}

func (o GetReceivedLicensesFilterArrayOutput) ToGetReceivedLicensesFilterArrayOutput() GetReceivedLicensesFilterArrayOutput {
	return o
}

func (o GetReceivedLicensesFilterArrayOutput) ToGetReceivedLicensesFilterArrayOutputWithContext(ctx context.Context) GetReceivedLicensesFilterArrayOutput {
	return o
}

func (o GetReceivedLicensesFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetReceivedLicensesFilter] {
	return pulumix.Output[[]GetReceivedLicensesFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetReceivedLicensesFilterArrayOutput) Index(i pulumi.IntInput) GetReceivedLicensesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReceivedLicensesFilter {
		return vs[0].([]GetReceivedLicensesFilter)[vs[1].(int)]
	}).(GetReceivedLicensesFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetLicenseGrantsFilterInput)(nil)).Elem(), GetLicenseGrantsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLicenseGrantsFilterArrayInput)(nil)).Elem(), GetLicenseGrantsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationInput)(nil)).Elem(), GetReceivedLicenseConsumptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationArrayInput)(nil)).Elem(), GetReceivedLicenseConsumptionConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationBorrowConfigurationInput)(nil)).Elem(), GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayInput)(nil)).Elem(), GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationInput)(nil)).Elem(), GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayInput)(nil)).Elem(), GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseEntitlementInput)(nil)).Elem(), GetReceivedLicenseEntitlementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseEntitlementArrayInput)(nil)).Elem(), GetReceivedLicenseEntitlementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseIssuerInput)(nil)).Elem(), GetReceivedLicenseIssuerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseIssuerArrayInput)(nil)).Elem(), GetReceivedLicenseIssuerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseLicenseMetadataInput)(nil)).Elem(), GetReceivedLicenseLicenseMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseLicenseMetadataArrayInput)(nil)).Elem(), GetReceivedLicenseLicenseMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseReceivedMetadataInput)(nil)).Elem(), GetReceivedLicenseReceivedMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseReceivedMetadataArrayInput)(nil)).Elem(), GetReceivedLicenseReceivedMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseValidityInput)(nil)).Elem(), GetReceivedLicenseValidityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicenseValidityArrayInput)(nil)).Elem(), GetReceivedLicenseValidityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicensesFilterInput)(nil)).Elem(), GetReceivedLicensesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReceivedLicensesFilterArrayInput)(nil)).Elem(), GetReceivedLicensesFilterArray{})
	pulumi.RegisterOutputType(GetLicenseGrantsFilterOutput{})
	pulumi.RegisterOutputType(GetLicenseGrantsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseConsumptionConfigurationOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseConsumptionConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseConsumptionConfigurationBorrowConfigurationOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseConsumptionConfigurationBorrowConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseConsumptionConfigurationProvisionalConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseEntitlementOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseEntitlementArrayOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseIssuerOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseIssuerArrayOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseLicenseMetadataOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseLicenseMetadataArrayOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseReceivedMetadataOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseReceivedMetadataArrayOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseValidityOutput{})
	pulumi.RegisterOutputType(GetReceivedLicenseValidityArrayOutput{})
	pulumi.RegisterOutputType(GetReceivedLicensesFilterOutput{})
	pulumi.RegisterOutputType(GetReceivedLicensesFilterArrayOutput{})
}
