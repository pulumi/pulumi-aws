// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a License Manager grant. This allows for sharing licenses with other AWS accounts.
//
// ## Import
//
// `aws_licensemanager_grant` can be imported using the grant arn.
//
// ```sh
//
//	$ pulumi import aws:licensemanager/licenseGrant:LicenseGrant test arn:aws:license-manager::123456789011:grant:g-01d313393d9e443d8664cc054db1e089
//
// ```
type LicenseGrant struct {
	pulumi.CustomResourceState

	// A list of the allowed operations for the grant. This is a subset of the allowed operations on the license.
	AllowedOperations pulumi.StringArrayOutput `pulumi:"allowedOperations"`
	// The grant ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The home region for the license.
	HomeRegion pulumi.StringOutput `pulumi:"homeRegion"`
	// The ARN of the license to grant.
	LicenseArn pulumi.StringOutput `pulumi:"licenseArn"`
	// The Name of the grant.
	Name pulumi.StringOutput `pulumi:"name"`
	// The parent ARN.
	ParentArn pulumi.StringOutput `pulumi:"parentArn"`
	// The target account for the grant in the form of the ARN for an account principal of the root user.
	Principal pulumi.StringOutput `pulumi:"principal"`
	// The grant status.
	Status pulumi.StringOutput `pulumi:"status"`
	// The grant version.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewLicenseGrant registers a new resource with the given unique name, arguments, and options.
func NewLicenseGrant(ctx *pulumi.Context,
	name string, args *LicenseGrantArgs, opts ...pulumi.ResourceOption) (*LicenseGrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedOperations == nil {
		return nil, errors.New("invalid value for required argument 'AllowedOperations'")
	}
	if args.LicenseArn == nil {
		return nil, errors.New("invalid value for required argument 'LicenseArn'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	var resource LicenseGrant
	err := ctx.RegisterResource("aws:licensemanager/licenseGrant:LicenseGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseGrant gets an existing LicenseGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseGrantState, opts ...pulumi.ResourceOption) (*LicenseGrant, error) {
	var resource LicenseGrant
	err := ctx.ReadResource("aws:licensemanager/licenseGrant:LicenseGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseGrant resources.
type licenseGrantState struct {
	// A list of the allowed operations for the grant. This is a subset of the allowed operations on the license.
	AllowedOperations []string `pulumi:"allowedOperations"`
	// The grant ARN.
	Arn *string `pulumi:"arn"`
	// The home region for the license.
	HomeRegion *string `pulumi:"homeRegion"`
	// The ARN of the license to grant.
	LicenseArn *string `pulumi:"licenseArn"`
	// The Name of the grant.
	Name *string `pulumi:"name"`
	// The parent ARN.
	ParentArn *string `pulumi:"parentArn"`
	// The target account for the grant in the form of the ARN for an account principal of the root user.
	Principal *string `pulumi:"principal"`
	// The grant status.
	Status *string `pulumi:"status"`
	// The grant version.
	Version *string `pulumi:"version"`
}

type LicenseGrantState struct {
	// A list of the allowed operations for the grant. This is a subset of the allowed operations on the license.
	AllowedOperations pulumi.StringArrayInput
	// The grant ARN.
	Arn pulumi.StringPtrInput
	// The home region for the license.
	HomeRegion pulumi.StringPtrInput
	// The ARN of the license to grant.
	LicenseArn pulumi.StringPtrInput
	// The Name of the grant.
	Name pulumi.StringPtrInput
	// The parent ARN.
	ParentArn pulumi.StringPtrInput
	// The target account for the grant in the form of the ARN for an account principal of the root user.
	Principal pulumi.StringPtrInput
	// The grant status.
	Status pulumi.StringPtrInput
	// The grant version.
	Version pulumi.StringPtrInput
}

func (LicenseGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseGrantState)(nil)).Elem()
}

type licenseGrantArgs struct {
	// A list of the allowed operations for the grant. This is a subset of the allowed operations on the license.
	AllowedOperations []string `pulumi:"allowedOperations"`
	// The ARN of the license to grant.
	LicenseArn string `pulumi:"licenseArn"`
	// The Name of the grant.
	Name *string `pulumi:"name"`
	// The target account for the grant in the form of the ARN for an account principal of the root user.
	Principal string `pulumi:"principal"`
}

// The set of arguments for constructing a LicenseGrant resource.
type LicenseGrantArgs struct {
	// A list of the allowed operations for the grant. This is a subset of the allowed operations on the license.
	AllowedOperations pulumi.StringArrayInput
	// The ARN of the license to grant.
	LicenseArn pulumi.StringInput
	// The Name of the grant.
	Name pulumi.StringPtrInput
	// The target account for the grant in the form of the ARN for an account principal of the root user.
	Principal pulumi.StringInput
}

func (LicenseGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseGrantArgs)(nil)).Elem()
}

type LicenseGrantInput interface {
	pulumi.Input

	ToLicenseGrantOutput() LicenseGrantOutput
	ToLicenseGrantOutputWithContext(ctx context.Context) LicenseGrantOutput
}

func (*LicenseGrant) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseGrant)(nil)).Elem()
}

func (i *LicenseGrant) ToLicenseGrantOutput() LicenseGrantOutput {
	return i.ToLicenseGrantOutputWithContext(context.Background())
}

func (i *LicenseGrant) ToLicenseGrantOutputWithContext(ctx context.Context) LicenseGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseGrantOutput)
}

// LicenseGrantArrayInput is an input type that accepts LicenseGrantArray and LicenseGrantArrayOutput values.
// You can construct a concrete instance of `LicenseGrantArrayInput` via:
//
//	LicenseGrantArray{ LicenseGrantArgs{...} }
type LicenseGrantArrayInput interface {
	pulumi.Input

	ToLicenseGrantArrayOutput() LicenseGrantArrayOutput
	ToLicenseGrantArrayOutputWithContext(context.Context) LicenseGrantArrayOutput
}

type LicenseGrantArray []LicenseGrantInput

func (LicenseGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseGrant)(nil)).Elem()
}

func (i LicenseGrantArray) ToLicenseGrantArrayOutput() LicenseGrantArrayOutput {
	return i.ToLicenseGrantArrayOutputWithContext(context.Background())
}

func (i LicenseGrantArray) ToLicenseGrantArrayOutputWithContext(ctx context.Context) LicenseGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseGrantArrayOutput)
}

// LicenseGrantMapInput is an input type that accepts LicenseGrantMap and LicenseGrantMapOutput values.
// You can construct a concrete instance of `LicenseGrantMapInput` via:
//
//	LicenseGrantMap{ "key": LicenseGrantArgs{...} }
type LicenseGrantMapInput interface {
	pulumi.Input

	ToLicenseGrantMapOutput() LicenseGrantMapOutput
	ToLicenseGrantMapOutputWithContext(context.Context) LicenseGrantMapOutput
}

type LicenseGrantMap map[string]LicenseGrantInput

func (LicenseGrantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseGrant)(nil)).Elem()
}

func (i LicenseGrantMap) ToLicenseGrantMapOutput() LicenseGrantMapOutput {
	return i.ToLicenseGrantMapOutputWithContext(context.Background())
}

func (i LicenseGrantMap) ToLicenseGrantMapOutputWithContext(ctx context.Context) LicenseGrantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseGrantMapOutput)
}

type LicenseGrantOutput struct{ *pulumi.OutputState }

func (LicenseGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseGrant)(nil)).Elem()
}

func (o LicenseGrantOutput) ToLicenseGrantOutput() LicenseGrantOutput {
	return o
}

func (o LicenseGrantOutput) ToLicenseGrantOutputWithContext(ctx context.Context) LicenseGrantOutput {
	return o
}

// A list of the allowed operations for the grant. This is a subset of the allowed operations on the license.
func (o LicenseGrantOutput) AllowedOperations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LicenseGrant) pulumi.StringArrayOutput { return v.AllowedOperations }).(pulumi.StringArrayOutput)
}

// The grant ARN.
func (o LicenseGrantOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseGrant) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The home region for the license.
func (o LicenseGrantOutput) HomeRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseGrant) pulumi.StringOutput { return v.HomeRegion }).(pulumi.StringOutput)
}

// The ARN of the license to grant.
func (o LicenseGrantOutput) LicenseArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseGrant) pulumi.StringOutput { return v.LicenseArn }).(pulumi.StringOutput)
}

// The Name of the grant.
func (o LicenseGrantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseGrant) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parent ARN.
func (o LicenseGrantOutput) ParentArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseGrant) pulumi.StringOutput { return v.ParentArn }).(pulumi.StringOutput)
}

// The target account for the grant in the form of the ARN for an account principal of the root user.
func (o LicenseGrantOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseGrant) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

// The grant status.
func (o LicenseGrantOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseGrant) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The grant version.
func (o LicenseGrantOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseGrant) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type LicenseGrantArrayOutput struct{ *pulumi.OutputState }

func (LicenseGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseGrant)(nil)).Elem()
}

func (o LicenseGrantArrayOutput) ToLicenseGrantArrayOutput() LicenseGrantArrayOutput {
	return o
}

func (o LicenseGrantArrayOutput) ToLicenseGrantArrayOutputWithContext(ctx context.Context) LicenseGrantArrayOutput {
	return o
}

func (o LicenseGrantArrayOutput) Index(i pulumi.IntInput) LicenseGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicenseGrant {
		return vs[0].([]*LicenseGrant)[vs[1].(int)]
	}).(LicenseGrantOutput)
}

type LicenseGrantMapOutput struct{ *pulumi.OutputState }

func (LicenseGrantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseGrant)(nil)).Elem()
}

func (o LicenseGrantMapOutput) ToLicenseGrantMapOutput() LicenseGrantMapOutput {
	return o
}

func (o LicenseGrantMapOutput) ToLicenseGrantMapOutputWithContext(ctx context.Context) LicenseGrantMapOutput {
	return o
}

func (o LicenseGrantMapOutput) MapIndex(k pulumi.StringInput) LicenseGrantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicenseGrant {
		return vs[0].(map[string]*LicenseGrant)[vs[1].(string)]
	}).(LicenseGrantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseGrantInput)(nil)).Elem(), &LicenseGrant{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseGrantArrayInput)(nil)).Elem(), LicenseGrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseGrantMapInput)(nil)).Elem(), LicenseGrantMap{})
	pulumi.RegisterOutputType(LicenseGrantOutput{})
	pulumi.RegisterOutputType(LicenseGrantArrayOutput{})
	pulumi.RegisterOutputType(LicenseGrantMapOutput{})
}
