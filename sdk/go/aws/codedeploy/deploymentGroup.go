// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codedeploy

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CodeDeploy Deployment Group for a CodeDeploy Application
// 
// > **NOTE on blue/green deployments:** When using `green_fleet_provisioning_option` with the `COPY_AUTO_SCALING_GROUP` action, CodeDeploy will create a new ASG with a different name. This ASG is _not_ managed by this provider and will conflict with existing configuration and state. You may want to use a different approach to managing deployments that involve multiple ASG, such as `DISCOVER_EXISTING` with separate blue and green ASG.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codedeploy_deployment_group.html.markdown.
type DeploymentGroup struct {
	s *pulumi.ResourceState
}

// NewDeploymentGroup registers a new resource with the given unique name, arguments, and options.
func NewDeploymentGroup(ctx *pulumi.Context,
	name string, args *DeploymentGroupArgs, opts ...pulumi.ResourceOpt) (*DeploymentGroup, error) {
	if args == nil || args.AppName == nil {
		return nil, errors.New("missing required argument 'AppName'")
	}
	if args == nil || args.DeploymentGroupName == nil {
		return nil, errors.New("missing required argument 'DeploymentGroupName'")
	}
	if args == nil || args.ServiceRoleArn == nil {
		return nil, errors.New("missing required argument 'ServiceRoleArn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["alarmConfiguration"] = nil
		inputs["appName"] = nil
		inputs["autoRollbackConfiguration"] = nil
		inputs["autoscalingGroups"] = nil
		inputs["blueGreenDeploymentConfig"] = nil
		inputs["deploymentConfigName"] = nil
		inputs["deploymentGroupName"] = nil
		inputs["deploymentStyle"] = nil
		inputs["ec2TagFilters"] = nil
		inputs["ec2TagSets"] = nil
		inputs["ecsService"] = nil
		inputs["loadBalancerInfo"] = nil
		inputs["onPremisesInstanceTagFilters"] = nil
		inputs["serviceRoleArn"] = nil
		inputs["triggerConfigurations"] = nil
	} else {
		inputs["alarmConfiguration"] = args.AlarmConfiguration
		inputs["appName"] = args.AppName
		inputs["autoRollbackConfiguration"] = args.AutoRollbackConfiguration
		inputs["autoscalingGroups"] = args.AutoscalingGroups
		inputs["blueGreenDeploymentConfig"] = args.BlueGreenDeploymentConfig
		inputs["deploymentConfigName"] = args.DeploymentConfigName
		inputs["deploymentGroupName"] = args.DeploymentGroupName
		inputs["deploymentStyle"] = args.DeploymentStyle
		inputs["ec2TagFilters"] = args.Ec2TagFilters
		inputs["ec2TagSets"] = args.Ec2TagSets
		inputs["ecsService"] = args.EcsService
		inputs["loadBalancerInfo"] = args.LoadBalancerInfo
		inputs["onPremisesInstanceTagFilters"] = args.OnPremisesInstanceTagFilters
		inputs["serviceRoleArn"] = args.ServiceRoleArn
		inputs["triggerConfigurations"] = args.TriggerConfigurations
	}
	s, err := ctx.RegisterResource("aws:codedeploy/deploymentGroup:DeploymentGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DeploymentGroup{s: s}, nil
}

// GetDeploymentGroup gets an existing DeploymentGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DeploymentGroupState, opts ...pulumi.ResourceOpt) (*DeploymentGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["alarmConfiguration"] = state.AlarmConfiguration
		inputs["appName"] = state.AppName
		inputs["autoRollbackConfiguration"] = state.AutoRollbackConfiguration
		inputs["autoscalingGroups"] = state.AutoscalingGroups
		inputs["blueGreenDeploymentConfig"] = state.BlueGreenDeploymentConfig
		inputs["deploymentConfigName"] = state.DeploymentConfigName
		inputs["deploymentGroupName"] = state.DeploymentGroupName
		inputs["deploymentStyle"] = state.DeploymentStyle
		inputs["ec2TagFilters"] = state.Ec2TagFilters
		inputs["ec2TagSets"] = state.Ec2TagSets
		inputs["ecsService"] = state.EcsService
		inputs["loadBalancerInfo"] = state.LoadBalancerInfo
		inputs["onPremisesInstanceTagFilters"] = state.OnPremisesInstanceTagFilters
		inputs["serviceRoleArn"] = state.ServiceRoleArn
		inputs["triggerConfigurations"] = state.TriggerConfigurations
	}
	s, err := ctx.ReadResource("aws:codedeploy/deploymentGroup:DeploymentGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DeploymentGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DeploymentGroup) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DeploymentGroup) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Configuration block of alarms associated with the deployment group (documented below).
func (r *DeploymentGroup) AlarmConfiguration() *pulumi.Output {
	return r.s.State["alarmConfiguration"]
}

// The name of the application.
func (r *DeploymentGroup) AppName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["appName"])
}

// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
func (r *DeploymentGroup) AutoRollbackConfiguration() *pulumi.Output {
	return r.s.State["autoRollbackConfiguration"]
}

// Autoscaling groups associated with the deployment group.
func (r *DeploymentGroup) AutoscalingGroups() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["autoscalingGroups"])
}

// Configuration block of the blue/green deployment options for a deployment group (documented below).
func (r *DeploymentGroup) BlueGreenDeploymentConfig() *pulumi.Output {
	return r.s.State["blueGreenDeploymentConfig"]
}

// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
func (r *DeploymentGroup) DeploymentConfigName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deploymentConfigName"])
}

// The name of the deployment group.
func (r *DeploymentGroup) DeploymentGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deploymentGroupName"])
}

// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
func (r *DeploymentGroup) DeploymentStyle() *pulumi.Output {
	return r.s.State["deploymentStyle"]
}

// Tag filters associated with the deployment group. See the AWS docs for details.
func (r *DeploymentGroup) Ec2TagFilters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["ec2TagFilters"])
}

// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
func (r *DeploymentGroup) Ec2TagSets() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["ec2TagSets"])
}

// Configuration block(s) of the ECS services for a deployment group (documented below).
func (r *DeploymentGroup) EcsService() *pulumi.Output {
	return r.s.State["ecsService"]
}

// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
func (r *DeploymentGroup) LoadBalancerInfo() *pulumi.Output {
	return r.s.State["loadBalancerInfo"]
}

// On premise tag filters associated with the group. See the AWS docs for details.
func (r *DeploymentGroup) OnPremisesInstanceTagFilters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["onPremisesInstanceTagFilters"])
}

// The service role ARN that allows deployments.
func (r *DeploymentGroup) ServiceRoleArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceRoleArn"])
}

// Configuration block(s) of the triggers for the deployment group (documented below).
func (r *DeploymentGroup) TriggerConfigurations() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["triggerConfigurations"])
}

// Input properties used for looking up and filtering DeploymentGroup resources.
type DeploymentGroupState struct {
	// Configuration block of alarms associated with the deployment group (documented below).
	AlarmConfiguration interface{}
	// The name of the application.
	AppName interface{}
	// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
	AutoRollbackConfiguration interface{}
	// Autoscaling groups associated with the deployment group.
	AutoscalingGroups interface{}
	// Configuration block of the blue/green deployment options for a deployment group (documented below).
	BlueGreenDeploymentConfig interface{}
	// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
	DeploymentConfigName interface{}
	// The name of the deployment group.
	DeploymentGroupName interface{}
	// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
	DeploymentStyle interface{}
	// Tag filters associated with the deployment group. See the AWS docs for details.
	Ec2TagFilters interface{}
	// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
	Ec2TagSets interface{}
	// Configuration block(s) of the ECS services for a deployment group (documented below).
	EcsService interface{}
	// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
	LoadBalancerInfo interface{}
	// On premise tag filters associated with the group. See the AWS docs for details.
	OnPremisesInstanceTagFilters interface{}
	// The service role ARN that allows deployments.
	ServiceRoleArn interface{}
	// Configuration block(s) of the triggers for the deployment group (documented below).
	TriggerConfigurations interface{}
}

// The set of arguments for constructing a DeploymentGroup resource.
type DeploymentGroupArgs struct {
	// Configuration block of alarms associated with the deployment group (documented below).
	AlarmConfiguration interface{}
	// The name of the application.
	AppName interface{}
	// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
	AutoRollbackConfiguration interface{}
	// Autoscaling groups associated with the deployment group.
	AutoscalingGroups interface{}
	// Configuration block of the blue/green deployment options for a deployment group (documented below).
	BlueGreenDeploymentConfig interface{}
	// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
	DeploymentConfigName interface{}
	// The name of the deployment group.
	DeploymentGroupName interface{}
	// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
	DeploymentStyle interface{}
	// Tag filters associated with the deployment group. See the AWS docs for details.
	Ec2TagFilters interface{}
	// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
	Ec2TagSets interface{}
	// Configuration block(s) of the ECS services for a deployment group (documented below).
	EcsService interface{}
	// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
	LoadBalancerInfo interface{}
	// On premise tag filters associated with the group. See the AWS docs for details.
	OnPremisesInstanceTagFilters interface{}
	// The service role ARN that allows deployments.
	ServiceRoleArn interface{}
	// Configuration block(s) of the triggers for the deployment group (documented below).
	TriggerConfigurations interface{}
}
