// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codedeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CodeDeploy deployment config for an application
//
// ## Example Usage
// ### Server Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/codedeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooDeploymentConfig, err := codedeploy.NewDeploymentConfig(ctx, "fooDeploymentConfig", &codedeploy.DeploymentConfigArgs{
//				DeploymentConfigName: pulumi.String("test-deployment-config"),
//				MinimumHealthyHosts: &codedeploy.DeploymentConfigMinimumHealthyHostsArgs{
//					Type:  pulumi.String("HOST_COUNT"),
//					Value: pulumi.Int(2),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = codedeploy.NewDeploymentGroup(ctx, "fooDeploymentGroup", &codedeploy.DeploymentGroupArgs{
//				AppName:              pulumi.Any(aws_codedeploy_app.Foo_app.Name),
//				DeploymentGroupName:  pulumi.String("bar"),
//				ServiceRoleArn:       pulumi.Any(aws_iam_role.Foo_role.Arn),
//				DeploymentConfigName: fooDeploymentConfig.ID(),
//				Ec2TagFilters: codedeploy.DeploymentGroupEc2TagFilterArray{
//					&codedeploy.DeploymentGroupEc2TagFilterArgs{
//						Key:   pulumi.String("filterkey"),
//						Type:  pulumi.String("KEY_AND_VALUE"),
//						Value: pulumi.String("filtervalue"),
//					},
//				},
//				TriggerConfigurations: codedeploy.DeploymentGroupTriggerConfigurationArray{
//					&codedeploy.DeploymentGroupTriggerConfigurationArgs{
//						TriggerEvents: pulumi.StringArray{
//							pulumi.String("DeploymentFailure"),
//						},
//						TriggerName:      pulumi.String("foo-trigger"),
//						TriggerTargetArn: pulumi.String("foo-topic-arn"),
//					},
//				},
//				AutoRollbackConfiguration: &codedeploy.DeploymentGroupAutoRollbackConfigurationArgs{
//					Enabled: pulumi.Bool(true),
//					Events: pulumi.StringArray{
//						pulumi.String("DEPLOYMENT_FAILURE"),
//					},
//				},
//				AlarmConfiguration: &codedeploy.DeploymentGroupAlarmConfigurationArgs{
//					Alarms: pulumi.StringArray{
//						pulumi.String("my-alarm-name"),
//					},
//					Enabled: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Lambda Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/codedeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooDeploymentConfig, err := codedeploy.NewDeploymentConfig(ctx, "fooDeploymentConfig", &codedeploy.DeploymentConfigArgs{
//				DeploymentConfigName: pulumi.String("test-deployment-config"),
//				ComputePlatform:      pulumi.String("Lambda"),
//				TrafficRoutingConfig: &codedeploy.DeploymentConfigTrafficRoutingConfigArgs{
//					Type: pulumi.String("TimeBasedLinear"),
//					TimeBasedLinear: &codedeploy.DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs{
//						Interval:   pulumi.Int(10),
//						Percentage: pulumi.Int(10),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = codedeploy.NewDeploymentGroup(ctx, "fooDeploymentGroup", &codedeploy.DeploymentGroupArgs{
//				AppName:              pulumi.Any(aws_codedeploy_app.Foo_app.Name),
//				DeploymentGroupName:  pulumi.String("bar"),
//				ServiceRoleArn:       pulumi.Any(aws_iam_role.Foo_role.Arn),
//				DeploymentConfigName: fooDeploymentConfig.ID(),
//				AutoRollbackConfiguration: &codedeploy.DeploymentGroupAutoRollbackConfigurationArgs{
//					Enabled: pulumi.Bool(true),
//					Events: pulumi.StringArray{
//						pulumi.String("DEPLOYMENT_STOP_ON_ALARM"),
//					},
//				},
//				AlarmConfiguration: &codedeploy.DeploymentGroupAlarmConfigurationArgs{
//					Alarms: pulumi.StringArray{
//						pulumi.String("my-alarm-name"),
//					},
//					Enabled: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import CodeDeploy Deployment Configurations using the `deployment_config_name`. For example:
//
// ```sh
//
//	$ pulumi import aws:codedeploy/deploymentConfig:DeploymentConfig example my-deployment-config
//
// ```
type DeploymentConfig struct {
	pulumi.CustomResourceState

	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform pulumi.StringPtrOutput `pulumi:"computePlatform"`
	// The AWS Assigned deployment config id
	DeploymentConfigId pulumi.StringOutput `pulumi:"deploymentConfigId"`
	// The name of the deployment config.
	DeploymentConfigName pulumi.StringOutput `pulumi:"deploymentConfigName"`
	// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts DeploymentConfigMinimumHealthyHostsPtrOutput `pulumi:"minimumHealthyHosts"`
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig DeploymentConfigTrafficRoutingConfigPtrOutput `pulumi:"trafficRoutingConfig"`
}

// NewDeploymentConfig registers a new resource with the given unique name, arguments, and options.
func NewDeploymentConfig(ctx *pulumi.Context,
	name string, args *DeploymentConfigArgs, opts ...pulumi.ResourceOption) (*DeploymentConfig, error) {
	if args == nil {
		args = &DeploymentConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeploymentConfig
	err := ctx.RegisterResource("aws:codedeploy/deploymentConfig:DeploymentConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploymentConfig gets an existing DeploymentConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentConfigState, opts ...pulumi.ResourceOption) (*DeploymentConfig, error) {
	var resource DeploymentConfig
	err := ctx.ReadResource("aws:codedeploy/deploymentConfig:DeploymentConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeploymentConfig resources.
type deploymentConfigState struct {
	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform *string `pulumi:"computePlatform"`
	// The AWS Assigned deployment config id
	DeploymentConfigId *string `pulumi:"deploymentConfigId"`
	// The name of the deployment config.
	DeploymentConfigName *string `pulumi:"deploymentConfigName"`
	// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts *DeploymentConfigMinimumHealthyHosts `pulumi:"minimumHealthyHosts"`
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig *DeploymentConfigTrafficRoutingConfig `pulumi:"trafficRoutingConfig"`
}

type DeploymentConfigState struct {
	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform pulumi.StringPtrInput
	// The AWS Assigned deployment config id
	DeploymentConfigId pulumi.StringPtrInput
	// The name of the deployment config.
	DeploymentConfigName pulumi.StringPtrInput
	// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts DeploymentConfigMinimumHealthyHostsPtrInput
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig DeploymentConfigTrafficRoutingConfigPtrInput
}

func (DeploymentConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentConfigState)(nil)).Elem()
}

type deploymentConfigArgs struct {
	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform *string `pulumi:"computePlatform"`
	// The name of the deployment config.
	DeploymentConfigName *string `pulumi:"deploymentConfigName"`
	// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts *DeploymentConfigMinimumHealthyHosts `pulumi:"minimumHealthyHosts"`
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig *DeploymentConfigTrafficRoutingConfig `pulumi:"trafficRoutingConfig"`
}

// The set of arguments for constructing a DeploymentConfig resource.
type DeploymentConfigArgs struct {
	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform pulumi.StringPtrInput
	// The name of the deployment config.
	DeploymentConfigName pulumi.StringPtrInput
	// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts DeploymentConfigMinimumHealthyHostsPtrInput
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig DeploymentConfigTrafficRoutingConfigPtrInput
}

func (DeploymentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentConfigArgs)(nil)).Elem()
}

type DeploymentConfigInput interface {
	pulumi.Input

	ToDeploymentConfigOutput() DeploymentConfigOutput
	ToDeploymentConfigOutputWithContext(ctx context.Context) DeploymentConfigOutput
}

func (*DeploymentConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfig)(nil)).Elem()
}

func (i *DeploymentConfig) ToDeploymentConfigOutput() DeploymentConfigOutput {
	return i.ToDeploymentConfigOutputWithContext(context.Background())
}

func (i *DeploymentConfig) ToDeploymentConfigOutputWithContext(ctx context.Context) DeploymentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigOutput)
}

func (i *DeploymentConfig) ToOutput(ctx context.Context) pulumix.Output[*DeploymentConfig] {
	return pulumix.Output[*DeploymentConfig]{
		OutputState: i.ToDeploymentConfigOutputWithContext(ctx).OutputState,
	}
}

// DeploymentConfigArrayInput is an input type that accepts DeploymentConfigArray and DeploymentConfigArrayOutput values.
// You can construct a concrete instance of `DeploymentConfigArrayInput` via:
//
//	DeploymentConfigArray{ DeploymentConfigArgs{...} }
type DeploymentConfigArrayInput interface {
	pulumi.Input

	ToDeploymentConfigArrayOutput() DeploymentConfigArrayOutput
	ToDeploymentConfigArrayOutputWithContext(context.Context) DeploymentConfigArrayOutput
}

type DeploymentConfigArray []DeploymentConfigInput

func (DeploymentConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeploymentConfig)(nil)).Elem()
}

func (i DeploymentConfigArray) ToDeploymentConfigArrayOutput() DeploymentConfigArrayOutput {
	return i.ToDeploymentConfigArrayOutputWithContext(context.Background())
}

func (i DeploymentConfigArray) ToDeploymentConfigArrayOutputWithContext(ctx context.Context) DeploymentConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigArrayOutput)
}

func (i DeploymentConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]*DeploymentConfig] {
	return pulumix.Output[[]*DeploymentConfig]{
		OutputState: i.ToDeploymentConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// DeploymentConfigMapInput is an input type that accepts DeploymentConfigMap and DeploymentConfigMapOutput values.
// You can construct a concrete instance of `DeploymentConfigMapInput` via:
//
//	DeploymentConfigMap{ "key": DeploymentConfigArgs{...} }
type DeploymentConfigMapInput interface {
	pulumi.Input

	ToDeploymentConfigMapOutput() DeploymentConfigMapOutput
	ToDeploymentConfigMapOutputWithContext(context.Context) DeploymentConfigMapOutput
}

type DeploymentConfigMap map[string]DeploymentConfigInput

func (DeploymentConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeploymentConfig)(nil)).Elem()
}

func (i DeploymentConfigMap) ToDeploymentConfigMapOutput() DeploymentConfigMapOutput {
	return i.ToDeploymentConfigMapOutputWithContext(context.Background())
}

func (i DeploymentConfigMap) ToDeploymentConfigMapOutputWithContext(ctx context.Context) DeploymentConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigMapOutput)
}

func (i DeploymentConfigMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DeploymentConfig] {
	return pulumix.Output[map[string]*DeploymentConfig]{
		OutputState: i.ToDeploymentConfigMapOutputWithContext(ctx).OutputState,
	}
}

type DeploymentConfigOutput struct{ *pulumi.OutputState }

func (DeploymentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfig)(nil)).Elem()
}

func (o DeploymentConfigOutput) ToDeploymentConfigOutput() DeploymentConfigOutput {
	return o
}

func (o DeploymentConfigOutput) ToDeploymentConfigOutputWithContext(ctx context.Context) DeploymentConfigOutput {
	return o
}

func (o DeploymentConfigOutput) ToOutput(ctx context.Context) pulumix.Output[*DeploymentConfig] {
	return pulumix.Output[*DeploymentConfig]{
		OutputState: o.OutputState,
	}
}

// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
func (o DeploymentConfigOutput) ComputePlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentConfig) pulumi.StringPtrOutput { return v.ComputePlatform }).(pulumi.StringPtrOutput)
}

// The AWS Assigned deployment config id
func (o DeploymentConfigOutput) DeploymentConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentConfig) pulumi.StringOutput { return v.DeploymentConfigId }).(pulumi.StringOutput)
}

// The name of the deployment config.
func (o DeploymentConfigOutput) DeploymentConfigName() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentConfig) pulumi.StringOutput { return v.DeploymentConfigName }).(pulumi.StringOutput)
}

// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
func (o DeploymentConfigOutput) MinimumHealthyHosts() DeploymentConfigMinimumHealthyHostsPtrOutput {
	return o.ApplyT(func(v *DeploymentConfig) DeploymentConfigMinimumHealthyHostsPtrOutput { return v.MinimumHealthyHosts }).(DeploymentConfigMinimumHealthyHostsPtrOutput)
}

// A trafficRoutingConfig block. Traffic Routing Config is documented below.
func (o DeploymentConfigOutput) TrafficRoutingConfig() DeploymentConfigTrafficRoutingConfigPtrOutput {
	return o.ApplyT(func(v *DeploymentConfig) DeploymentConfigTrafficRoutingConfigPtrOutput { return v.TrafficRoutingConfig }).(DeploymentConfigTrafficRoutingConfigPtrOutput)
}

type DeploymentConfigArrayOutput struct{ *pulumi.OutputState }

func (DeploymentConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeploymentConfig)(nil)).Elem()
}

func (o DeploymentConfigArrayOutput) ToDeploymentConfigArrayOutput() DeploymentConfigArrayOutput {
	return o
}

func (o DeploymentConfigArrayOutput) ToDeploymentConfigArrayOutputWithContext(ctx context.Context) DeploymentConfigArrayOutput {
	return o
}

func (o DeploymentConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DeploymentConfig] {
	return pulumix.Output[[]*DeploymentConfig]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentConfigArrayOutput) Index(i pulumi.IntInput) DeploymentConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeploymentConfig {
		return vs[0].([]*DeploymentConfig)[vs[1].(int)]
	}).(DeploymentConfigOutput)
}

type DeploymentConfigMapOutput struct{ *pulumi.OutputState }

func (DeploymentConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeploymentConfig)(nil)).Elem()
}

func (o DeploymentConfigMapOutput) ToDeploymentConfigMapOutput() DeploymentConfigMapOutput {
	return o
}

func (o DeploymentConfigMapOutput) ToDeploymentConfigMapOutputWithContext(ctx context.Context) DeploymentConfigMapOutput {
	return o
}

func (o DeploymentConfigMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DeploymentConfig] {
	return pulumix.Output[map[string]*DeploymentConfig]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentConfigMapOutput) MapIndex(k pulumi.StringInput) DeploymentConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeploymentConfig {
		return vs[0].(map[string]*DeploymentConfig)[vs[1].(string)]
	}).(DeploymentConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigInput)(nil)).Elem(), &DeploymentConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigArrayInput)(nil)).Elem(), DeploymentConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigMapInput)(nil)).Elem(), DeploymentConfigMap{})
	pulumi.RegisterOutputType(DeploymentConfigOutput{})
	pulumi.RegisterOutputType(DeploymentConfigArrayOutput{})
	pulumi.RegisterOutputType(DeploymentConfigMapOutput{})
}
