// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Studio struct {
	pulumi.CustomResourceState

	Arn                        pulumi.StringOutput      `pulumi:"arn"`
	AuthMode                   pulumi.StringOutput      `pulumi:"authMode"`
	DefaultS3Location          pulumi.StringOutput      `pulumi:"defaultS3Location"`
	Description                pulumi.StringPtrOutput   `pulumi:"description"`
	EngineSecurityGroupId      pulumi.StringOutput      `pulumi:"engineSecurityGroupId"`
	IdpAuthUrl                 pulumi.StringPtrOutput   `pulumi:"idpAuthUrl"`
	IdpRelayStateParameterName pulumi.StringPtrOutput   `pulumi:"idpRelayStateParameterName"`
	Name                       pulumi.StringOutput      `pulumi:"name"`
	ServiceRole                pulumi.StringOutput      `pulumi:"serviceRole"`
	SubnetIds                  pulumi.StringArrayOutput `pulumi:"subnetIds"`
	Tags                       pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll                    pulumi.StringMapOutput   `pulumi:"tagsAll"`
	Url                        pulumi.StringOutput      `pulumi:"url"`
	UserRole                   pulumi.StringPtrOutput   `pulumi:"userRole"`
	VpcId                      pulumi.StringOutput      `pulumi:"vpcId"`
	WorkspaceSecurityGroupId   pulumi.StringOutput      `pulumi:"workspaceSecurityGroupId"`
}

// NewStudio registers a new resource with the given unique name, arguments, and options.
func NewStudio(ctx *pulumi.Context,
	name string, args *StudioArgs, opts ...pulumi.ResourceOption) (*Studio, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthMode == nil {
		return nil, errors.New("invalid value for required argument 'AuthMode'")
	}
	if args.DefaultS3Location == nil {
		return nil, errors.New("invalid value for required argument 'DefaultS3Location'")
	}
	if args.EngineSecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'EngineSecurityGroupId'")
	}
	if args.ServiceRole == nil {
		return nil, errors.New("invalid value for required argument 'ServiceRole'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.WorkspaceSecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceSecurityGroupId'")
	}
	var resource Studio
	err := ctx.RegisterResource("aws:emr/studio:Studio", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStudio gets an existing Studio resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStudio(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StudioState, opts ...pulumi.ResourceOption) (*Studio, error) {
	var resource Studio
	err := ctx.ReadResource("aws:emr/studio:Studio", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Studio resources.
type studioState struct {
	Arn                        *string           `pulumi:"arn"`
	AuthMode                   *string           `pulumi:"authMode"`
	DefaultS3Location          *string           `pulumi:"defaultS3Location"`
	Description                *string           `pulumi:"description"`
	EngineSecurityGroupId      *string           `pulumi:"engineSecurityGroupId"`
	IdpAuthUrl                 *string           `pulumi:"idpAuthUrl"`
	IdpRelayStateParameterName *string           `pulumi:"idpRelayStateParameterName"`
	Name                       *string           `pulumi:"name"`
	ServiceRole                *string           `pulumi:"serviceRole"`
	SubnetIds                  []string          `pulumi:"subnetIds"`
	Tags                       map[string]string `pulumi:"tags"`
	TagsAll                    map[string]string `pulumi:"tagsAll"`
	Url                        *string           `pulumi:"url"`
	UserRole                   *string           `pulumi:"userRole"`
	VpcId                      *string           `pulumi:"vpcId"`
	WorkspaceSecurityGroupId   *string           `pulumi:"workspaceSecurityGroupId"`
}

type StudioState struct {
	Arn                        pulumi.StringPtrInput
	AuthMode                   pulumi.StringPtrInput
	DefaultS3Location          pulumi.StringPtrInput
	Description                pulumi.StringPtrInput
	EngineSecurityGroupId      pulumi.StringPtrInput
	IdpAuthUrl                 pulumi.StringPtrInput
	IdpRelayStateParameterName pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	ServiceRole                pulumi.StringPtrInput
	SubnetIds                  pulumi.StringArrayInput
	Tags                       pulumi.StringMapInput
	TagsAll                    pulumi.StringMapInput
	Url                        pulumi.StringPtrInput
	UserRole                   pulumi.StringPtrInput
	VpcId                      pulumi.StringPtrInput
	WorkspaceSecurityGroupId   pulumi.StringPtrInput
}

func (StudioState) ElementType() reflect.Type {
	return reflect.TypeOf((*studioState)(nil)).Elem()
}

type studioArgs struct {
	AuthMode                   string            `pulumi:"authMode"`
	DefaultS3Location          string            `pulumi:"defaultS3Location"`
	Description                *string           `pulumi:"description"`
	EngineSecurityGroupId      string            `pulumi:"engineSecurityGroupId"`
	IdpAuthUrl                 *string           `pulumi:"idpAuthUrl"`
	IdpRelayStateParameterName *string           `pulumi:"idpRelayStateParameterName"`
	Name                       *string           `pulumi:"name"`
	ServiceRole                string            `pulumi:"serviceRole"`
	SubnetIds                  []string          `pulumi:"subnetIds"`
	Tags                       map[string]string `pulumi:"tags"`
	UserRole                   *string           `pulumi:"userRole"`
	VpcId                      string            `pulumi:"vpcId"`
	WorkspaceSecurityGroupId   string            `pulumi:"workspaceSecurityGroupId"`
}

// The set of arguments for constructing a Studio resource.
type StudioArgs struct {
	AuthMode                   pulumi.StringInput
	DefaultS3Location          pulumi.StringInput
	Description                pulumi.StringPtrInput
	EngineSecurityGroupId      pulumi.StringInput
	IdpAuthUrl                 pulumi.StringPtrInput
	IdpRelayStateParameterName pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	ServiceRole                pulumi.StringInput
	SubnetIds                  pulumi.StringArrayInput
	Tags                       pulumi.StringMapInput
	UserRole                   pulumi.StringPtrInput
	VpcId                      pulumi.StringInput
	WorkspaceSecurityGroupId   pulumi.StringInput
}

func (StudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*studioArgs)(nil)).Elem()
}

type StudioInput interface {
	pulumi.Input

	ToStudioOutput() StudioOutput
	ToStudioOutputWithContext(ctx context.Context) StudioOutput
}

func (*Studio) ElementType() reflect.Type {
	return reflect.TypeOf((**Studio)(nil)).Elem()
}

func (i *Studio) ToStudioOutput() StudioOutput {
	return i.ToStudioOutputWithContext(context.Background())
}

func (i *Studio) ToStudioOutputWithContext(ctx context.Context) StudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioOutput)
}

// StudioArrayInput is an input type that accepts StudioArray and StudioArrayOutput values.
// You can construct a concrete instance of `StudioArrayInput` via:
//
//	StudioArray{ StudioArgs{...} }
type StudioArrayInput interface {
	pulumi.Input

	ToStudioArrayOutput() StudioArrayOutput
	ToStudioArrayOutputWithContext(context.Context) StudioArrayOutput
}

type StudioArray []StudioInput

func (StudioArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Studio)(nil)).Elem()
}

func (i StudioArray) ToStudioArrayOutput() StudioArrayOutput {
	return i.ToStudioArrayOutputWithContext(context.Background())
}

func (i StudioArray) ToStudioArrayOutputWithContext(ctx context.Context) StudioArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioArrayOutput)
}

// StudioMapInput is an input type that accepts StudioMap and StudioMapOutput values.
// You can construct a concrete instance of `StudioMapInput` via:
//
//	StudioMap{ "key": StudioArgs{...} }
type StudioMapInput interface {
	pulumi.Input

	ToStudioMapOutput() StudioMapOutput
	ToStudioMapOutputWithContext(context.Context) StudioMapOutput
}

type StudioMap map[string]StudioInput

func (StudioMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Studio)(nil)).Elem()
}

func (i StudioMap) ToStudioMapOutput() StudioMapOutput {
	return i.ToStudioMapOutputWithContext(context.Background())
}

func (i StudioMap) ToStudioMapOutputWithContext(ctx context.Context) StudioMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioMapOutput)
}

type StudioOutput struct{ *pulumi.OutputState }

func (StudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Studio)(nil)).Elem()
}

func (o StudioOutput) ToStudioOutput() StudioOutput {
	return o
}

func (o StudioOutput) ToStudioOutputWithContext(ctx context.Context) StudioOutput {
	return o
}

func (o StudioOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o StudioOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.AuthMode }).(pulumi.StringOutput)
}

func (o StudioOutput) DefaultS3Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.DefaultS3Location }).(pulumi.StringOutput)
}

func (o StudioOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o StudioOutput) EngineSecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.EngineSecurityGroupId }).(pulumi.StringOutput)
}

func (o StudioOutput) IdpAuthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringPtrOutput { return v.IdpAuthUrl }).(pulumi.StringPtrOutput)
}

func (o StudioOutput) IdpRelayStateParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringPtrOutput { return v.IdpRelayStateParameterName }).(pulumi.StringPtrOutput)
}

func (o StudioOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o StudioOutput) ServiceRole() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.ServiceRole }).(pulumi.StringOutput)
}

func (o StudioOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o StudioOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o StudioOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o StudioOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o StudioOutput) UserRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringPtrOutput { return v.UserRole }).(pulumi.StringPtrOutput)
}

func (o StudioOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func (o StudioOutput) WorkspaceSecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.WorkspaceSecurityGroupId }).(pulumi.StringOutput)
}

type StudioArrayOutput struct{ *pulumi.OutputState }

func (StudioArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Studio)(nil)).Elem()
}

func (o StudioArrayOutput) ToStudioArrayOutput() StudioArrayOutput {
	return o
}

func (o StudioArrayOutput) ToStudioArrayOutputWithContext(ctx context.Context) StudioArrayOutput {
	return o
}

func (o StudioArrayOutput) Index(i pulumi.IntInput) StudioOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Studio {
		return vs[0].([]*Studio)[vs[1].(int)]
	}).(StudioOutput)
}

type StudioMapOutput struct{ *pulumi.OutputState }

func (StudioMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Studio)(nil)).Elem()
}

func (o StudioMapOutput) ToStudioMapOutput() StudioMapOutput {
	return o
}

func (o StudioMapOutput) ToStudioMapOutputWithContext(ctx context.Context) StudioMapOutput {
	return o
}

func (o StudioMapOutput) MapIndex(k pulumi.StringInput) StudioOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Studio {
		return vs[0].(map[string]*Studio)[vs[1].(string)]
	}).(StudioOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StudioInput)(nil)).Elem(), &Studio{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioArrayInput)(nil)).Elem(), StudioArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioMapInput)(nil)).Elem(), StudioMap{})
	pulumi.RegisterOutputType(StudioOutput{})
	pulumi.RegisterOutputType(StudioArrayOutput{})
	pulumi.RegisterOutputType(StudioMapOutput{})
}
