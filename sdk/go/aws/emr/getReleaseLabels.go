// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve information about EMR Release Labels.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/emr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err = emr.GetReleaseLabels(ctx, &emr.GetReleaseLabelsArgs{
//				Filters: emr.GetReleaseLabelsFilters{
//					Application: pulumi.StringRef("spark@2.1.0"),
//					Prefix:      pulumi.StringRef("emr-5"),
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetReleaseLabels(ctx *pulumi.Context, args *GetReleaseLabelsArgs, opts ...pulumi.InvokeOption) (*GetReleaseLabelsResult, error) {
	var rv GetReleaseLabelsResult
	err := ctx.Invoke("aws:emr/getReleaseLabels:getReleaseLabels", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReleaseLabels.
type GetReleaseLabelsArgs struct {
	// Filters the results of the request. Prefix specifies the prefix of release labels to return. Application specifies the application (with/without version) of release labels to return. See Filters.
	Filters *GetReleaseLabelsFilters `pulumi:"filters"`
}

// A collection of values returned by getReleaseLabels.
type GetReleaseLabelsResult struct {
	Filters *GetReleaseLabelsFilters `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Returned release labels.
	ReleaseLabels []string `pulumi:"releaseLabels"`
}

func GetReleaseLabelsOutput(ctx *pulumi.Context, args GetReleaseLabelsOutputArgs, opts ...pulumi.InvokeOption) GetReleaseLabelsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetReleaseLabelsResult, error) {
			args := v.(GetReleaseLabelsArgs)
			r, err := GetReleaseLabels(ctx, &args, opts...)
			var s GetReleaseLabelsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetReleaseLabelsResultOutput)
}

// A collection of arguments for invoking getReleaseLabels.
type GetReleaseLabelsOutputArgs struct {
	// Filters the results of the request. Prefix specifies the prefix of release labels to return. Application specifies the application (with/without version) of release labels to return. See Filters.
	Filters GetReleaseLabelsFiltersPtrInput `pulumi:"filters"`
}

func (GetReleaseLabelsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseLabelsArgs)(nil)).Elem()
}

// A collection of values returned by getReleaseLabels.
type GetReleaseLabelsResultOutput struct{ *pulumi.OutputState }

func (GetReleaseLabelsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseLabelsResult)(nil)).Elem()
}

func (o GetReleaseLabelsResultOutput) ToGetReleaseLabelsResultOutput() GetReleaseLabelsResultOutput {
	return o
}

func (o GetReleaseLabelsResultOutput) ToGetReleaseLabelsResultOutputWithContext(ctx context.Context) GetReleaseLabelsResultOutput {
	return o
}

func (o GetReleaseLabelsResultOutput) Filters() GetReleaseLabelsFiltersPtrOutput {
	return o.ApplyT(func(v GetReleaseLabelsResult) *GetReleaseLabelsFilters { return v.Filters }).(GetReleaseLabelsFiltersPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetReleaseLabelsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseLabelsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Returned release labels.
func (o GetReleaseLabelsResultOutput) ReleaseLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetReleaseLabelsResult) []string { return v.ReleaseLabels }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetReleaseLabelsResultOutput{})
}
