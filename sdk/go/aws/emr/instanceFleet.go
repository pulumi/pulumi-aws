// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstanceFleet struct {
	pulumi.CustomResourceState

	ClusterId                   pulumi.StringOutput                        `pulumi:"clusterId"`
	InstanceTypeConfigs         InstanceFleetInstanceTypeConfigArrayOutput `pulumi:"instanceTypeConfigs"`
	LaunchSpecifications        InstanceFleetLaunchSpecificationsPtrOutput `pulumi:"launchSpecifications"`
	Name                        pulumi.StringOutput                        `pulumi:"name"`
	ProvisionedOnDemandCapacity pulumi.IntOutput                           `pulumi:"provisionedOnDemandCapacity"`
	ProvisionedSpotCapacity     pulumi.IntOutput                           `pulumi:"provisionedSpotCapacity"`
	TargetOnDemandCapacity      pulumi.IntPtrOutput                        `pulumi:"targetOnDemandCapacity"`
	TargetSpotCapacity          pulumi.IntPtrOutput                        `pulumi:"targetSpotCapacity"`
}

// NewInstanceFleet registers a new resource with the given unique name, arguments, and options.
func NewInstanceFleet(ctx *pulumi.Context,
	name string, args *InstanceFleetArgs, opts ...pulumi.ResourceOption) (*InstanceFleet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	var resource InstanceFleet
	err := ctx.RegisterResource("aws:emr/instanceFleet:InstanceFleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceFleet gets an existing InstanceFleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceFleetState, opts ...pulumi.ResourceOption) (*InstanceFleet, error) {
	var resource InstanceFleet
	err := ctx.ReadResource("aws:emr/instanceFleet:InstanceFleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceFleet resources.
type instanceFleetState struct {
	ClusterId                   *string                            `pulumi:"clusterId"`
	InstanceTypeConfigs         []InstanceFleetInstanceTypeConfig  `pulumi:"instanceTypeConfigs"`
	LaunchSpecifications        *InstanceFleetLaunchSpecifications `pulumi:"launchSpecifications"`
	Name                        *string                            `pulumi:"name"`
	ProvisionedOnDemandCapacity *int                               `pulumi:"provisionedOnDemandCapacity"`
	ProvisionedSpotCapacity     *int                               `pulumi:"provisionedSpotCapacity"`
	TargetOnDemandCapacity      *int                               `pulumi:"targetOnDemandCapacity"`
	TargetSpotCapacity          *int                               `pulumi:"targetSpotCapacity"`
}

type InstanceFleetState struct {
	ClusterId                   pulumi.StringPtrInput
	InstanceTypeConfigs         InstanceFleetInstanceTypeConfigArrayInput
	LaunchSpecifications        InstanceFleetLaunchSpecificationsPtrInput
	Name                        pulumi.StringPtrInput
	ProvisionedOnDemandCapacity pulumi.IntPtrInput
	ProvisionedSpotCapacity     pulumi.IntPtrInput
	TargetOnDemandCapacity      pulumi.IntPtrInput
	TargetSpotCapacity          pulumi.IntPtrInput
}

func (InstanceFleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceFleetState)(nil)).Elem()
}

type instanceFleetArgs struct {
	ClusterId              string                             `pulumi:"clusterId"`
	InstanceTypeConfigs    []InstanceFleetInstanceTypeConfig  `pulumi:"instanceTypeConfigs"`
	LaunchSpecifications   *InstanceFleetLaunchSpecifications `pulumi:"launchSpecifications"`
	Name                   *string                            `pulumi:"name"`
	TargetOnDemandCapacity *int                               `pulumi:"targetOnDemandCapacity"`
	TargetSpotCapacity     *int                               `pulumi:"targetSpotCapacity"`
}

// The set of arguments for constructing a InstanceFleet resource.
type InstanceFleetArgs struct {
	ClusterId              pulumi.StringInput
	InstanceTypeConfigs    InstanceFleetInstanceTypeConfigArrayInput
	LaunchSpecifications   InstanceFleetLaunchSpecificationsPtrInput
	Name                   pulumi.StringPtrInput
	TargetOnDemandCapacity pulumi.IntPtrInput
	TargetSpotCapacity     pulumi.IntPtrInput
}

func (InstanceFleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceFleetArgs)(nil)).Elem()
}

type InstanceFleetInput interface {
	pulumi.Input

	ToInstanceFleetOutput() InstanceFleetOutput
	ToInstanceFleetOutputWithContext(ctx context.Context) InstanceFleetOutput
}

func (*InstanceFleet) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFleet)(nil)).Elem()
}

func (i *InstanceFleet) ToInstanceFleetOutput() InstanceFleetOutput {
	return i.ToInstanceFleetOutputWithContext(context.Background())
}

func (i *InstanceFleet) ToInstanceFleetOutputWithContext(ctx context.Context) InstanceFleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFleetOutput)
}

// InstanceFleetArrayInput is an input type that accepts InstanceFleetArray and InstanceFleetArrayOutput values.
// You can construct a concrete instance of `InstanceFleetArrayInput` via:
//
//	InstanceFleetArray{ InstanceFleetArgs{...} }
type InstanceFleetArrayInput interface {
	pulumi.Input

	ToInstanceFleetArrayOutput() InstanceFleetArrayOutput
	ToInstanceFleetArrayOutputWithContext(context.Context) InstanceFleetArrayOutput
}

type InstanceFleetArray []InstanceFleetInput

func (InstanceFleetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceFleet)(nil)).Elem()
}

func (i InstanceFleetArray) ToInstanceFleetArrayOutput() InstanceFleetArrayOutput {
	return i.ToInstanceFleetArrayOutputWithContext(context.Background())
}

func (i InstanceFleetArray) ToInstanceFleetArrayOutputWithContext(ctx context.Context) InstanceFleetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFleetArrayOutput)
}

// InstanceFleetMapInput is an input type that accepts InstanceFleetMap and InstanceFleetMapOutput values.
// You can construct a concrete instance of `InstanceFleetMapInput` via:
//
//	InstanceFleetMap{ "key": InstanceFleetArgs{...} }
type InstanceFleetMapInput interface {
	pulumi.Input

	ToInstanceFleetMapOutput() InstanceFleetMapOutput
	ToInstanceFleetMapOutputWithContext(context.Context) InstanceFleetMapOutput
}

type InstanceFleetMap map[string]InstanceFleetInput

func (InstanceFleetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceFleet)(nil)).Elem()
}

func (i InstanceFleetMap) ToInstanceFleetMapOutput() InstanceFleetMapOutput {
	return i.ToInstanceFleetMapOutputWithContext(context.Background())
}

func (i InstanceFleetMap) ToInstanceFleetMapOutputWithContext(ctx context.Context) InstanceFleetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFleetMapOutput)
}

type InstanceFleetOutput struct{ *pulumi.OutputState }

func (InstanceFleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFleet)(nil)).Elem()
}

func (o InstanceFleetOutput) ToInstanceFleetOutput() InstanceFleetOutput {
	return o
}

func (o InstanceFleetOutput) ToInstanceFleetOutputWithContext(ctx context.Context) InstanceFleetOutput {
	return o
}

func (o InstanceFleetOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceFleet) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o InstanceFleetOutput) InstanceTypeConfigs() InstanceFleetInstanceTypeConfigArrayOutput {
	return o.ApplyT(func(v *InstanceFleet) InstanceFleetInstanceTypeConfigArrayOutput { return v.InstanceTypeConfigs }).(InstanceFleetInstanceTypeConfigArrayOutput)
}

func (o InstanceFleetOutput) LaunchSpecifications() InstanceFleetLaunchSpecificationsPtrOutput {
	return o.ApplyT(func(v *InstanceFleet) InstanceFleetLaunchSpecificationsPtrOutput { return v.LaunchSpecifications }).(InstanceFleetLaunchSpecificationsPtrOutput)
}

func (o InstanceFleetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceFleet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o InstanceFleetOutput) ProvisionedOnDemandCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *InstanceFleet) pulumi.IntOutput { return v.ProvisionedOnDemandCapacity }).(pulumi.IntOutput)
}

func (o InstanceFleetOutput) ProvisionedSpotCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *InstanceFleet) pulumi.IntOutput { return v.ProvisionedSpotCapacity }).(pulumi.IntOutput)
}

func (o InstanceFleetOutput) TargetOnDemandCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceFleet) pulumi.IntPtrOutput { return v.TargetOnDemandCapacity }).(pulumi.IntPtrOutput)
}

func (o InstanceFleetOutput) TargetSpotCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceFleet) pulumi.IntPtrOutput { return v.TargetSpotCapacity }).(pulumi.IntPtrOutput)
}

type InstanceFleetArrayOutput struct{ *pulumi.OutputState }

func (InstanceFleetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceFleet)(nil)).Elem()
}

func (o InstanceFleetArrayOutput) ToInstanceFleetArrayOutput() InstanceFleetArrayOutput {
	return o
}

func (o InstanceFleetArrayOutput) ToInstanceFleetArrayOutputWithContext(ctx context.Context) InstanceFleetArrayOutput {
	return o
}

func (o InstanceFleetArrayOutput) Index(i pulumi.IntInput) InstanceFleetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceFleet {
		return vs[0].([]*InstanceFleet)[vs[1].(int)]
	}).(InstanceFleetOutput)
}

type InstanceFleetMapOutput struct{ *pulumi.OutputState }

func (InstanceFleetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceFleet)(nil)).Elem()
}

func (o InstanceFleetMapOutput) ToInstanceFleetMapOutput() InstanceFleetMapOutput {
	return o
}

func (o InstanceFleetMapOutput) ToInstanceFleetMapOutputWithContext(ctx context.Context) InstanceFleetMapOutput {
	return o
}

func (o InstanceFleetMapOutput) MapIndex(k pulumi.StringInput) InstanceFleetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceFleet {
		return vs[0].(map[string]*InstanceFleet)[vs[1].(string)]
	}).(InstanceFleetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFleetInput)(nil)).Elem(), &InstanceFleet{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFleetArrayInput)(nil)).Elem(), InstanceFleetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFleetMapInput)(nil)).Elem(), InstanceFleetMap{})
	pulumi.RegisterOutputType(InstanceFleetOutput{})
	pulumi.RegisterOutputType(InstanceFleetArrayOutput{})
	pulumi.RegisterOutputType(InstanceFleetMapOutput{})
}
