// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AutoScaling Scaling Policy resource.
//
// > **NOTE:** You may want to omit `desiredCapacity` attribute from attached `autoscaling.Group`
// when using autoscaling policies. It's good practice to pick either
// [manual](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-manual-scaling.html)
// or [dynamic](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-scale-based-on-demand.html)
// (policy-based) scaling.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bar, err := autoscaling.NewGroup(ctx, "bar", &autoscaling.GroupArgs{
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("us-east-1a"),
//				},
//				MaxSize:                pulumi.Int(5),
//				MinSize:                pulumi.Int(2),
//				HealthCheckGracePeriod: pulumi.Int(300),
//				HealthCheckType:        pulumi.String("ELB"),
//				ForceDelete:            pulumi.Bool(true),
//				LaunchConfiguration:    pulumi.Any(aws_launch_configuration.Foo.Name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = autoscaling.NewPolicy(ctx, "bat", &autoscaling.PolicyArgs{
//				ScalingAdjustment:    pulumi.Int(4),
//				AdjustmentType:       pulumi.String("ChangeInCapacity"),
//				Cooldown:             pulumi.Int(300),
//				AutoscalingGroupName: bar.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create target tracking scaling policy using metric math
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
//				AutoscalingGroupName: pulumi.String("my-test-asg"),
//				PolicyType:           pulumi.String("TargetTrackingScaling"),
//				TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
//					CustomizedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationArgs{
//						Metrics: autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricArray{
//							&autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricArgs{
//								Id:    pulumi.String("m1"),
//								Label: pulumi.String("Get the queue size (the number of messages waiting to be processed)"),
//								MetricStat: &autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatArgs{
//									Metric: &autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatMetricArgs{
//										Dimensions: autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatMetricDimensionArray{
//											&autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatMetricDimensionArgs{
//												Name:  pulumi.String("QueueName"),
//												Value: pulumi.String("my-queue"),
//											},
//										},
//										MetricName: pulumi.String("ApproximateNumberOfMessagesVisible"),
//										Namespace:  pulumi.String("AWS/SQS"),
//									},
//									Stat: pulumi.String("Sum"),
//								},
//								ReturnData: pulumi.Bool(false),
//							},
//							&autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricArgs{
//								Id:    pulumi.String("m2"),
//								Label: pulumi.String("Get the group size (the number of InService instances)"),
//								MetricStat: &autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatArgs{
//									Metric: &autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatMetricArgs{
//										Dimensions: autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatMetricDimensionArray{
//											&autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatMetricDimensionArgs{
//												Name:  pulumi.String("AutoScalingGroupName"),
//												Value: pulumi.String("my-asg"),
//											},
//										},
//										MetricName: pulumi.String("GroupInServiceInstances"),
//										Namespace:  pulumi.String("AWS/AutoScaling"),
//									},
//									Stat: pulumi.String("Average"),
//								},
//								ReturnData: pulumi.Bool(false),
//							},
//							&autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricArgs{
//								Expression: pulumi.String("m1 / m2"),
//								Id:         pulumi.String("e1"),
//								Label:      pulumi.String("Calculate the backlog per instance"),
//								ReturnData: pulumi.Bool(true),
//							},
//						},
//					},
//					TargetValue: pulumi.Float64(100),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create predictive scaling policy using customized metrics
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
//				AutoscalingGroupName: pulumi.String("my-test-asg"),
//				PolicyType:           pulumi.String("PredictiveScaling"),
//				PredictiveScalingConfiguration: &autoscaling.PolicyPredictiveScalingConfigurationArgs{
//					MetricSpecification: &autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationArgs{
//						CustomizedCapacityMetricSpecification: &autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationArgs{
//							MetricDataQueries: autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueryArray{
//								&autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueryArgs{
//									Expression: pulumi.String("SUM(SEARCH('{AWS/AutoScaling,AutoScalingGroupName} MetricName=\"GroupInServiceIntances\" my-test-asg', 'Average', 300))"),
//									Id:         pulumi.String("capacity_sum"),
//								},
//							},
//						},
//						CustomizedLoadMetricSpecification: &autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationArgs{
//							MetricDataQueries: autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueryArray{
//								&autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueryArgs{
//									Expression: pulumi.String("SUM(SEARCH('{AWS/EC2,AutoScalingGroupName} MetricName=\"CPUUtilization\" my-test-asg', 'Sum', 3600))"),
//									Id:         pulumi.String("load_sum"),
//								},
//							},
//						},
//						CustomizedScalingMetricSpecification: &autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationArgs{
//							MetricDataQueries: autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryArray{
//								&autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryArgs{
//									Expression: pulumi.String("SUM(SEARCH('{AWS/AutoScaling,AutoScalingGroupName} MetricName=\"GroupInServiceIntances\" my-test-asg', 'Average', 300))"),
//									Id:         pulumi.String("capacity_sum"),
//									ReturnData: pulumi.Bool(false),
//								},
//								&autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryArgs{
//									Expression: pulumi.String("SUM(SEARCH('{AWS/EC2,AutoScalingGroupName} MetricName=\"CPUUtilization\" my-test-asg', 'Sum', 300))"),
//									Id:         pulumi.String("load_sum"),
//									ReturnData: pulumi.Bool(false),
//								},
//								&autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryArgs{
//									Expression: pulumi.String("load_sum / (capacity_sum * PERIOD(capacity_sum) / 60)"),
//									Id:         pulumi.String("weighted_average"),
//								},
//							},
//						},
//						TargetValue: pulumi.Float64(10),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create predictive scaling policy using customized scaling and predefined load metric
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
//				AutoscalingGroupName: pulumi.String("my-test-asg"),
//				PolicyType:           pulumi.String("PredictiveScaling"),
//				PredictiveScalingConfiguration: &autoscaling.PolicyPredictiveScalingConfigurationArgs{
//					MetricSpecification: &autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationArgs{
//						CustomizedScalingMetricSpecification: &autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationArgs{
//							MetricDataQueries: autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryArray{
//								&autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryArgs{
//									Id: pulumi.String("scaling"),
//									MetricStat: &autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryMetricStatArgs{
//										Metric: &autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryMetricStatMetricArgs{
//											Dimensions: autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryMetricStatMetricDimensionArray{
//												&autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryMetricStatMetricDimensionArgs{
//													Name:  pulumi.String("AutoScalingGroupName"),
//													Value: pulumi.String("my-test-asg"),
//												},
//											},
//											MetricName: pulumi.String("CPUUtilization"),
//											Namespace:  pulumi.String("AWS/EC2"),
//										},
//										Stat: pulumi.String("Average"),
//									},
//								},
//							},
//						},
//						PredefinedLoadMetricSpecification: &autoscaling.PolicyPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecificationArgs{
//							PredefinedMetricType: pulumi.String("ASGTotalCPUUtilization"),
//							ResourceLabel:        pulumi.String("app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff"),
//						},
//						TargetValue: pulumi.Float64(10),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import AutoScaling scaling policy using the role autoscaling_group_name and name separated by `/`. For example:
//
// ```sh
//
//	$ pulumi import aws:autoscaling/policy:Policy test-policy asg-name/policy-name
//
// ```
type Policy struct {
	pulumi.CustomResourceState

	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
	AdjustmentType pulumi.StringPtrOutput `pulumi:"adjustmentType"`
	// ARN assigned by AWS to the scaling policy.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Name of the autoscaling group.
	AutoscalingGroupName pulumi.StringOutput `pulumi:"autoscalingGroupName"`
	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown pulumi.IntPtrOutput `pulumi:"cooldown"`
	// Whether the scaling policy is enabled or disabled. Default: `true`.
	//
	// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	EstimatedInstanceWarmup pulumi.IntPtrOutput `pulumi:"estimatedInstanceWarmup"`
	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType pulumi.StringOutput `pulumi:"metricAggregationType"`
	// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
	//
	// The following arguments are only available to "SimpleScaling" type policies:
	MinAdjustmentMagnitude pulumi.IntPtrOutput `pulumi:"minAdjustmentMagnitude"`
	// Name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	PolicyType pulumi.StringPtrOutput `pulumi:"policyType"`
	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	PredictiveScalingConfiguration PolicyPredictiveScalingConfigurationPtrOutput `pulumi:"predictiveScalingConfiguration"`
	// Number of members by which to
	// scale, when the adjustment bounds are breached. A positive value scales
	// up. A negative value scales down.
	ScalingAdjustment pulumi.IntPtrOutput `pulumi:"scalingAdjustment"`
	// Set of adjustments that manage
	// group scaling. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("1"),
	// 					MetricIntervalUpperBound: pulumi.String("2"),
	// 					ScalingAdjustment:        -1,
	// 				},
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("2"),
	// 					MetricIntervalUpperBound: pulumi.String("3"),
	// 					ScalingAdjustment:        pulumi.Int(1),
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in step adjustments:
	StepAdjustments PolicyStepAdjustmentArrayOutput `pulumi:"stepAdjustments"`
	// Target tracking policy. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
	// 				PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
	// 					PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
	// 				},
	// 				TargetValue: pulumi.Float64(40),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in target tracking configuration:
	TargetTrackingConfiguration PolicyTargetTrackingConfigurationPtrOutput `pulumi:"targetTrackingConfiguration"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoscalingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AutoscalingGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("aws:autoscaling/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("aws:autoscaling/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
	AdjustmentType *string `pulumi:"adjustmentType"`
	// ARN assigned by AWS to the scaling policy.
	Arn *string `pulumi:"arn"`
	// Name of the autoscaling group.
	AutoscalingGroupName *string `pulumi:"autoscalingGroupName"`
	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown *int `pulumi:"cooldown"`
	// Whether the scaling policy is enabled or disabled. Default: `true`.
	//
	// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
	Enabled *bool `pulumi:"enabled"`
	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	EstimatedInstanceWarmup *int `pulumi:"estimatedInstanceWarmup"`
	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType *string `pulumi:"metricAggregationType"`
	// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
	//
	// The following arguments are only available to "SimpleScaling" type policies:
	MinAdjustmentMagnitude *int `pulumi:"minAdjustmentMagnitude"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	PolicyType *string `pulumi:"policyType"`
	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	PredictiveScalingConfiguration *PolicyPredictiveScalingConfiguration `pulumi:"predictiveScalingConfiguration"`
	// Number of members by which to
	// scale, when the adjustment bounds are breached. A positive value scales
	// up. A negative value scales down.
	ScalingAdjustment *int `pulumi:"scalingAdjustment"`
	// Set of adjustments that manage
	// group scaling. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("1"),
	// 					MetricIntervalUpperBound: pulumi.String("2"),
	// 					ScalingAdjustment:        -1,
	// 				},
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("2"),
	// 					MetricIntervalUpperBound: pulumi.String("3"),
	// 					ScalingAdjustment:        pulumi.Int(1),
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in step adjustments:
	StepAdjustments []PolicyStepAdjustment `pulumi:"stepAdjustments"`
	// Target tracking policy. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
	// 				PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
	// 					PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
	// 				},
	// 				TargetValue: pulumi.Float64(40),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in target tracking configuration:
	TargetTrackingConfiguration *PolicyTargetTrackingConfiguration `pulumi:"targetTrackingConfiguration"`
}

type PolicyState struct {
	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
	AdjustmentType pulumi.StringPtrInput
	// ARN assigned by AWS to the scaling policy.
	Arn pulumi.StringPtrInput
	// Name of the autoscaling group.
	AutoscalingGroupName pulumi.StringPtrInput
	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown pulumi.IntPtrInput
	// Whether the scaling policy is enabled or disabled. Default: `true`.
	//
	// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
	Enabled pulumi.BoolPtrInput
	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	EstimatedInstanceWarmup pulumi.IntPtrInput
	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType pulumi.StringPtrInput
	// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
	//
	// The following arguments are only available to "SimpleScaling" type policies:
	MinAdjustmentMagnitude pulumi.IntPtrInput
	// Name of the policy.
	Name pulumi.StringPtrInput
	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	PolicyType pulumi.StringPtrInput
	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	PredictiveScalingConfiguration PolicyPredictiveScalingConfigurationPtrInput
	// Number of members by which to
	// scale, when the adjustment bounds are breached. A positive value scales
	// up. A negative value scales down.
	ScalingAdjustment pulumi.IntPtrInput
	// Set of adjustments that manage
	// group scaling. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("1"),
	// 					MetricIntervalUpperBound: pulumi.String("2"),
	// 					ScalingAdjustment:        -1,
	// 				},
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("2"),
	// 					MetricIntervalUpperBound: pulumi.String("3"),
	// 					ScalingAdjustment:        pulumi.Int(1),
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in step adjustments:
	StepAdjustments PolicyStepAdjustmentArrayInput
	// Target tracking policy. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
	// 				PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
	// 					PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
	// 				},
	// 				TargetValue: pulumi.Float64(40),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in target tracking configuration:
	TargetTrackingConfiguration PolicyTargetTrackingConfigurationPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
	AdjustmentType *string `pulumi:"adjustmentType"`
	// Name of the autoscaling group.
	AutoscalingGroupName string `pulumi:"autoscalingGroupName"`
	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown *int `pulumi:"cooldown"`
	// Whether the scaling policy is enabled or disabled. Default: `true`.
	//
	// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
	Enabled *bool `pulumi:"enabled"`
	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	EstimatedInstanceWarmup *int `pulumi:"estimatedInstanceWarmup"`
	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType *string `pulumi:"metricAggregationType"`
	// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
	//
	// The following arguments are only available to "SimpleScaling" type policies:
	MinAdjustmentMagnitude *int `pulumi:"minAdjustmentMagnitude"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	PolicyType *string `pulumi:"policyType"`
	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	PredictiveScalingConfiguration *PolicyPredictiveScalingConfiguration `pulumi:"predictiveScalingConfiguration"`
	// Number of members by which to
	// scale, when the adjustment bounds are breached. A positive value scales
	// up. A negative value scales down.
	ScalingAdjustment *int `pulumi:"scalingAdjustment"`
	// Set of adjustments that manage
	// group scaling. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("1"),
	// 					MetricIntervalUpperBound: pulumi.String("2"),
	// 					ScalingAdjustment:        -1,
	// 				},
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("2"),
	// 					MetricIntervalUpperBound: pulumi.String("3"),
	// 					ScalingAdjustment:        pulumi.Int(1),
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in step adjustments:
	StepAdjustments []PolicyStepAdjustment `pulumi:"stepAdjustments"`
	// Target tracking policy. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
	// 				PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
	// 					PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
	// 				},
	// 				TargetValue: pulumi.Float64(40),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in target tracking configuration:
	TargetTrackingConfiguration *PolicyTargetTrackingConfiguration `pulumi:"targetTrackingConfiguration"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
	AdjustmentType pulumi.StringPtrInput
	// Name of the autoscaling group.
	AutoscalingGroupName pulumi.StringInput
	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown pulumi.IntPtrInput
	// Whether the scaling policy is enabled or disabled. Default: `true`.
	//
	// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
	Enabled pulumi.BoolPtrInput
	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	EstimatedInstanceWarmup pulumi.IntPtrInput
	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType pulumi.StringPtrInput
	// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
	//
	// The following arguments are only available to "SimpleScaling" type policies:
	MinAdjustmentMagnitude pulumi.IntPtrInput
	// Name of the policy.
	Name pulumi.StringPtrInput
	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	PolicyType pulumi.StringPtrInput
	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	PredictiveScalingConfiguration PolicyPredictiveScalingConfigurationPtrInput
	// Number of members by which to
	// scale, when the adjustment bounds are breached. A positive value scales
	// up. A negative value scales down.
	ScalingAdjustment pulumi.IntPtrInput
	// Set of adjustments that manage
	// group scaling. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("1"),
	// 					MetricIntervalUpperBound: pulumi.String("2"),
	// 					ScalingAdjustment:        -1,
	// 				},
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("2"),
	// 					MetricIntervalUpperBound: pulumi.String("3"),
	// 					ScalingAdjustment:        pulumi.Int(1),
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in step adjustments:
	StepAdjustments PolicyStepAdjustmentArrayInput
	// Target tracking policy. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
	// 				PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
	// 					PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
	// 				},
	// 				TargetValue: pulumi.Float64(40),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in target tracking configuration:
	TargetTrackingConfiguration PolicyTargetTrackingConfigurationPtrInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
func (o PolicyOutput) AdjustmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.AdjustmentType }).(pulumi.StringPtrOutput)
}

// ARN assigned by AWS to the scaling policy.
func (o PolicyOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Name of the autoscaling group.
func (o PolicyOutput) AutoscalingGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.AutoscalingGroupName }).(pulumi.StringOutput)
}

// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
func (o PolicyOutput) Cooldown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntPtrOutput { return v.Cooldown }).(pulumi.IntPtrOutput)
}

// Whether the scaling policy is enabled or disabled. Default: `true`.
//
// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
func (o PolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
func (o PolicyOutput) EstimatedInstanceWarmup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntPtrOutput { return v.EstimatedInstanceWarmup }).(pulumi.IntPtrOutput)
}

// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
func (o PolicyOutput) MetricAggregationType() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.MetricAggregationType }).(pulumi.StringOutput)
}

// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
//
// The following arguments are only available to "SimpleScaling" type policies:
func (o PolicyOutput) MinAdjustmentMagnitude() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntPtrOutput { return v.MinAdjustmentMagnitude }).(pulumi.IntPtrOutput)
}

// Name of the policy.
func (o PolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
func (o PolicyOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.PolicyType }).(pulumi.StringPtrOutput)
}

// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
func (o PolicyOutput) PredictiveScalingConfiguration() PolicyPredictiveScalingConfigurationPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyPredictiveScalingConfigurationPtrOutput { return v.PredictiveScalingConfiguration }).(PolicyPredictiveScalingConfigurationPtrOutput)
}

// Number of members by which to
// scale, when the adjustment bounds are breached. A positive value scales
// up. A negative value scales down.
func (o PolicyOutput) ScalingAdjustment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntPtrOutput { return v.ScalingAdjustment }).(pulumi.IntPtrOutput)
}

// Set of adjustments that manage
// group scaling. These have the following structure:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
//				StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
//					&autoscaling.PolicyStepAdjustmentArgs{
//						MetricIntervalLowerBound: pulumi.String("1"),
//						MetricIntervalUpperBound: pulumi.String("2"),
//						ScalingAdjustment:        -1,
//					},
//					&autoscaling.PolicyStepAdjustmentArgs{
//						MetricIntervalLowerBound: pulumi.String("2"),
//						MetricIntervalUpperBound: pulumi.String("3"),
//						ScalingAdjustment:        pulumi.Int(1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// The following fields are available in step adjustments:
func (o PolicyOutput) StepAdjustments() PolicyStepAdjustmentArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyStepAdjustmentArrayOutput { return v.StepAdjustments }).(PolicyStepAdjustmentArrayOutput)
}

// Target tracking policy. These have the following structure:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
//				TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
//					PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
//						PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
//					},
//					TargetValue: pulumi.Float64(40),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// The following fields are available in target tracking configuration:
func (o PolicyOutput) TargetTrackingConfiguration() PolicyTargetTrackingConfigurationPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyTargetTrackingConfigurationPtrOutput { return v.TargetTrackingConfiguration }).(PolicyTargetTrackingConfigurationPtrOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}
