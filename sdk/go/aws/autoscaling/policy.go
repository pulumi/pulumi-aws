// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Policy struct {
	pulumi.CustomResourceState

	AdjustmentType                 pulumi.StringPtrOutput                        `pulumi:"adjustmentType"`
	Arn                            pulumi.StringOutput                           `pulumi:"arn"`
	AutoscalingGroupName           pulumi.StringOutput                           `pulumi:"autoscalingGroupName"`
	Cooldown                       pulumi.IntPtrOutput                           `pulumi:"cooldown"`
	Enabled                        pulumi.BoolPtrOutput                          `pulumi:"enabled"`
	EstimatedInstanceWarmup        pulumi.IntPtrOutput                           `pulumi:"estimatedInstanceWarmup"`
	MetricAggregationType          pulumi.StringOutput                           `pulumi:"metricAggregationType"`
	MinAdjustmentMagnitude         pulumi.IntPtrOutput                           `pulumi:"minAdjustmentMagnitude"`
	Name                           pulumi.StringOutput                           `pulumi:"name"`
	PolicyType                     pulumi.StringPtrOutput                        `pulumi:"policyType"`
	PredictiveScalingConfiguration PolicyPredictiveScalingConfigurationPtrOutput `pulumi:"predictiveScalingConfiguration"`
	ScalingAdjustment              pulumi.IntPtrOutput                           `pulumi:"scalingAdjustment"`
	StepAdjustments                PolicyStepAdjustmentArrayOutput               `pulumi:"stepAdjustments"`
	TargetTrackingConfiguration    PolicyTargetTrackingConfigurationPtrOutput    `pulumi:"targetTrackingConfiguration"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoscalingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AutoscalingGroupName'")
	}
	var resource Policy
	err := ctx.RegisterResource("aws:autoscaling/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("aws:autoscaling/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	AdjustmentType                 *string                               `pulumi:"adjustmentType"`
	Arn                            *string                               `pulumi:"arn"`
	AutoscalingGroupName           *string                               `pulumi:"autoscalingGroupName"`
	Cooldown                       *int                                  `pulumi:"cooldown"`
	Enabled                        *bool                                 `pulumi:"enabled"`
	EstimatedInstanceWarmup        *int                                  `pulumi:"estimatedInstanceWarmup"`
	MetricAggregationType          *string                               `pulumi:"metricAggregationType"`
	MinAdjustmentMagnitude         *int                                  `pulumi:"minAdjustmentMagnitude"`
	Name                           *string                               `pulumi:"name"`
	PolicyType                     *string                               `pulumi:"policyType"`
	PredictiveScalingConfiguration *PolicyPredictiveScalingConfiguration `pulumi:"predictiveScalingConfiguration"`
	ScalingAdjustment              *int                                  `pulumi:"scalingAdjustment"`
	StepAdjustments                []PolicyStepAdjustment                `pulumi:"stepAdjustments"`
	TargetTrackingConfiguration    *PolicyTargetTrackingConfiguration    `pulumi:"targetTrackingConfiguration"`
}

type PolicyState struct {
	AdjustmentType                 pulumi.StringPtrInput
	Arn                            pulumi.StringPtrInput
	AutoscalingGroupName           pulumi.StringPtrInput
	Cooldown                       pulumi.IntPtrInput
	Enabled                        pulumi.BoolPtrInput
	EstimatedInstanceWarmup        pulumi.IntPtrInput
	MetricAggregationType          pulumi.StringPtrInput
	MinAdjustmentMagnitude         pulumi.IntPtrInput
	Name                           pulumi.StringPtrInput
	PolicyType                     pulumi.StringPtrInput
	PredictiveScalingConfiguration PolicyPredictiveScalingConfigurationPtrInput
	ScalingAdjustment              pulumi.IntPtrInput
	StepAdjustments                PolicyStepAdjustmentArrayInput
	TargetTrackingConfiguration    PolicyTargetTrackingConfigurationPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	AdjustmentType                 *string                               `pulumi:"adjustmentType"`
	AutoscalingGroupName           string                                `pulumi:"autoscalingGroupName"`
	Cooldown                       *int                                  `pulumi:"cooldown"`
	Enabled                        *bool                                 `pulumi:"enabled"`
	EstimatedInstanceWarmup        *int                                  `pulumi:"estimatedInstanceWarmup"`
	MetricAggregationType          *string                               `pulumi:"metricAggregationType"`
	MinAdjustmentMagnitude         *int                                  `pulumi:"minAdjustmentMagnitude"`
	Name                           *string                               `pulumi:"name"`
	PolicyType                     *string                               `pulumi:"policyType"`
	PredictiveScalingConfiguration *PolicyPredictiveScalingConfiguration `pulumi:"predictiveScalingConfiguration"`
	ScalingAdjustment              *int                                  `pulumi:"scalingAdjustment"`
	StepAdjustments                []PolicyStepAdjustment                `pulumi:"stepAdjustments"`
	TargetTrackingConfiguration    *PolicyTargetTrackingConfiguration    `pulumi:"targetTrackingConfiguration"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	AdjustmentType                 pulumi.StringPtrInput
	AutoscalingGroupName           pulumi.StringInput
	Cooldown                       pulumi.IntPtrInput
	Enabled                        pulumi.BoolPtrInput
	EstimatedInstanceWarmup        pulumi.IntPtrInput
	MetricAggregationType          pulumi.StringPtrInput
	MinAdjustmentMagnitude         pulumi.IntPtrInput
	Name                           pulumi.StringPtrInput
	PolicyType                     pulumi.StringPtrInput
	PredictiveScalingConfiguration PolicyPredictiveScalingConfigurationPtrInput
	ScalingAdjustment              pulumi.IntPtrInput
	StepAdjustments                PolicyStepAdjustmentArrayInput
	TargetTrackingConfiguration    PolicyTargetTrackingConfigurationPtrInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) AdjustmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.AdjustmentType }).(pulumi.StringPtrOutput)
}

func (o PolicyOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o PolicyOutput) AutoscalingGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.AutoscalingGroupName }).(pulumi.StringOutput)
}

func (o PolicyOutput) Cooldown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntPtrOutput { return v.Cooldown }).(pulumi.IntPtrOutput)
}

func (o PolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o PolicyOutput) EstimatedInstanceWarmup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntPtrOutput { return v.EstimatedInstanceWarmup }).(pulumi.IntPtrOutput)
}

func (o PolicyOutput) MetricAggregationType() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.MetricAggregationType }).(pulumi.StringOutput)
}

func (o PolicyOutput) MinAdjustmentMagnitude() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntPtrOutput { return v.MinAdjustmentMagnitude }).(pulumi.IntPtrOutput)
}

func (o PolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PolicyOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.PolicyType }).(pulumi.StringPtrOutput)
}

func (o PolicyOutput) PredictiveScalingConfiguration() PolicyPredictiveScalingConfigurationPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyPredictiveScalingConfigurationPtrOutput { return v.PredictiveScalingConfiguration }).(PolicyPredictiveScalingConfigurationPtrOutput)
}

func (o PolicyOutput) ScalingAdjustment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntPtrOutput { return v.ScalingAdjustment }).(pulumi.IntPtrOutput)
}

func (o PolicyOutput) StepAdjustments() PolicyStepAdjustmentArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyStepAdjustmentArrayOutput { return v.StepAdjustments }).(PolicyStepAdjustmentArrayOutput)
}

func (o PolicyOutput) TargetTrackingConfiguration() PolicyTargetTrackingConfigurationPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyTargetTrackingConfigurationPtrOutput { return v.TargetTrackingConfiguration }).(PolicyTargetTrackingConfigurationPtrOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}
