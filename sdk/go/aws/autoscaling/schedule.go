// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AutoScaling Schedule resource.
type Schedule struct {
	s *pulumi.ResourceState
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOpt) (*Schedule, error) {
	if args == nil || args.AutoscalingGroupName == nil {
		return nil, errors.New("missing required argument 'AutoscalingGroupName'")
	}
	if args == nil || args.ScheduledActionName == nil {
		return nil, errors.New("missing required argument 'ScheduledActionName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoscalingGroupName"] = nil
		inputs["desiredCapacity"] = nil
		inputs["endTime"] = nil
		inputs["maxSize"] = nil
		inputs["minSize"] = nil
		inputs["recurrence"] = nil
		inputs["scheduledActionName"] = nil
		inputs["startTime"] = nil
	} else {
		inputs["autoscalingGroupName"] = args.AutoscalingGroupName
		inputs["desiredCapacity"] = args.DesiredCapacity
		inputs["endTime"] = args.EndTime
		inputs["maxSize"] = args.MaxSize
		inputs["minSize"] = args.MinSize
		inputs["recurrence"] = args.Recurrence
		inputs["scheduledActionName"] = args.ScheduledActionName
		inputs["startTime"] = args.StartTime
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:autoscaling/schedule:Schedule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Schedule{s: s}, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ScheduleState, opts ...pulumi.ResourceOpt) (*Schedule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["autoscalingGroupName"] = state.AutoscalingGroupName
		inputs["desiredCapacity"] = state.DesiredCapacity
		inputs["endTime"] = state.EndTime
		inputs["maxSize"] = state.MaxSize
		inputs["minSize"] = state.MinSize
		inputs["recurrence"] = state.Recurrence
		inputs["scheduledActionName"] = state.ScheduledActionName
		inputs["startTime"] = state.StartTime
	}
	s, err := ctx.ReadResource("aws:autoscaling/schedule:Schedule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Schedule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Schedule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Schedule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ARN assigned by AWS to the autoscaling schedule.
func (r *Schedule) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The name or Amazon Resource Name (ARN) of the Auto Scaling group.
func (r *Schedule) AutoscalingGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["autoscalingGroupName"])
}

// The number of EC2 instances that should be running in the group. Default 0.  Set to -1 if you don't want to change the desired capacity at the scheduled time.
func (r *Schedule) DesiredCapacity() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["desiredCapacity"])
}

// The time for this action to end, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ).
// If you try to schedule your action in the past, Auto Scaling returns an error message.
func (r *Schedule) EndTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endTime"])
}

// The maximum size for the Auto Scaling group. Default 0.
// Set to -1 if you don't want to change the maximum size at the scheduled time.
func (r *Schedule) MaxSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxSize"])
}

// The minimum size for the Auto Scaling group. Default 0.
// Set to -1 if you don't want to change the minimum size at the scheduled time.
func (r *Schedule) MinSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minSize"])
}

// The time when recurring future actions will start. Start time is specified by the user following the Unix cron syntax format.
func (r *Schedule) Recurrence() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["recurrence"])
}

// The name of this scaling action.
func (r *Schedule) ScheduledActionName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["scheduledActionName"])
}

// The time for this action to start, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ).
// If you try to schedule your action in the past, Auto Scaling returns an error message.
func (r *Schedule) StartTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["startTime"])
}

// Input properties used for looking up and filtering Schedule resources.
type ScheduleState struct {
	// The ARN assigned by AWS to the autoscaling schedule.
	Arn interface{}
	// The name or Amazon Resource Name (ARN) of the Auto Scaling group.
	AutoscalingGroupName interface{}
	// The number of EC2 instances that should be running in the group. Default 0.  Set to -1 if you don't want to change the desired capacity at the scheduled time.
	DesiredCapacity interface{}
	// The time for this action to end, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ).
	// If you try to schedule your action in the past, Auto Scaling returns an error message.
	EndTime interface{}
	// The maximum size for the Auto Scaling group. Default 0.
	// Set to -1 if you don't want to change the maximum size at the scheduled time.
	MaxSize interface{}
	// The minimum size for the Auto Scaling group. Default 0.
	// Set to -1 if you don't want to change the minimum size at the scheduled time.
	MinSize interface{}
	// The time when recurring future actions will start. Start time is specified by the user following the Unix cron syntax format.
	Recurrence interface{}
	// The name of this scaling action.
	ScheduledActionName interface{}
	// The time for this action to start, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ).
	// If you try to schedule your action in the past, Auto Scaling returns an error message.
	StartTime interface{}
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// The name or Amazon Resource Name (ARN) of the Auto Scaling group.
	AutoscalingGroupName interface{}
	// The number of EC2 instances that should be running in the group. Default 0.  Set to -1 if you don't want to change the desired capacity at the scheduled time.
	DesiredCapacity interface{}
	// The time for this action to end, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ).
	// If you try to schedule your action in the past, Auto Scaling returns an error message.
	EndTime interface{}
	// The maximum size for the Auto Scaling group. Default 0.
	// Set to -1 if you don't want to change the maximum size at the scheduled time.
	MaxSize interface{}
	// The minimum size for the Auto Scaling group. Default 0.
	// Set to -1 if you don't want to change the minimum size at the scheduled time.
	MinSize interface{}
	// The time when recurring future actions will start. Start time is specified by the user following the Unix cron syntax format.
	Recurrence interface{}
	// The name of this scaling action.
	ScheduledActionName interface{}
	// The time for this action to start, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ).
	// If you try to schedule your action in the past, Auto Scaling returns an error message.
	StartTime interface{}
}
