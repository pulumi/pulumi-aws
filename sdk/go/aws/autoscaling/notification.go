// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AutoScaling Group with Notification support, via SNS Topics. Each of
// the `notifications` map to a [Notification Configuration][2] inside Amazon Web
// Services, and are applied to each AutoScaling Group you supply.
type Notification struct {
	s *pulumi.ResourceState
}

// NewNotification registers a new resource with the given unique name, arguments, and options.
func NewNotification(ctx *pulumi.Context,
	name string, args *NotificationArgs, opts ...pulumi.ResourceOpt) (*Notification, error) {
	if args == nil || args.GroupNames == nil {
		return nil, errors.New("missing required argument 'GroupNames'")
	}
	if args == nil || args.Notifications == nil {
		return nil, errors.New("missing required argument 'Notifications'")
	}
	if args == nil || args.TopicArn == nil {
		return nil, errors.New("missing required argument 'TopicArn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["groupNames"] = nil
		inputs["notifications"] = nil
		inputs["topicArn"] = nil
	} else {
		inputs["groupNames"] = args.GroupNames
		inputs["notifications"] = args.Notifications
		inputs["topicArn"] = args.TopicArn
	}
	s, err := ctx.RegisterResource("aws:autoscaling/notification:Notification", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Notification{s: s}, nil
}

// GetNotification gets an existing Notification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotification(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NotificationState, opts ...pulumi.ResourceOpt) (*Notification, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["groupNames"] = state.GroupNames
		inputs["notifications"] = state.Notifications
		inputs["topicArn"] = state.TopicArn
	}
	s, err := ctx.ReadResource("aws:autoscaling/notification:Notification", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Notification{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Notification) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Notification) ID() *pulumi.IDOutput {
	return r.s.ID
}

// A list of AutoScaling Group Names
func (r *Notification) GroupNames() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["groupNames"])
}

// A list of Notification Types that trigger
// notifications. Acceptable values are documented [in the AWS documentation here][1]
func (r *Notification) Notifications() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["notifications"])
}

// The Topic ARN for notifications to be sent through
func (r *Notification) TopicArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["topicArn"])
}

// Input properties used for looking up and filtering Notification resources.
type NotificationState struct {
	// A list of AutoScaling Group Names
	GroupNames interface{}
	// A list of Notification Types that trigger
	// notifications. Acceptable values are documented [in the AWS documentation here][1]
	Notifications interface{}
	// The Topic ARN for notifications to be sent through
	TopicArn interface{}
}

// The set of arguments for constructing a Notification resource.
type NotificationArgs struct {
	// A list of AutoScaling Group Names
	GroupNames interface{}
	// A list of Notification Types that trigger
	// notifications. Acceptable values are documented [in the AWS documentation here][1]
	Notifications interface{}
	// The Topic ARN for notifications to be sent through
	TopicArn interface{}
}
