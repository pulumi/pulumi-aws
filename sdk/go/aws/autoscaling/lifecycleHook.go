// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AutoScaling Lifecycle Hook resource.
//
// > **NOTE:** This provider has two types of ways you can add lifecycle hooks - via
// the `initialLifecycleHook` attribute from the
// `autoscaling.Group`
// resource, or via this one. Hooks added via this resource will not be added
// until the autoscaling group has been created, and depending on your
// capacity
// settings, after the initial instances have been launched, creating unintended
// behavior. If you need hooks to run on all instances, add them with
// `initialLifecycleHook` in
// `autoscaling.Group`,
// but take care to not duplicate those hooks with this resource.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foobar, err := autoscaling.NewGroup(ctx, "foobar", &autoscaling.GroupArgs{
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("us-west-2a"),
//				},
//				Name:            pulumi.String("test-foobar5"),
//				HealthCheckType: pulumi.String("EC2"),
//				TerminationPolicies: pulumi.StringArray{
//					pulumi.String("OldestInstance"),
//				},
//				Tags: autoscaling.GroupTagArray{
//					&autoscaling.GroupTagArgs{
//						Key:               pulumi.String("Foo"),
//						Value:             pulumi.String("foo-bar"),
//						PropagateAtLaunch: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"foo": "bar",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = autoscaling.NewLifecycleHook(ctx, "foobar", &autoscaling.LifecycleHookArgs{
//				Name:                  pulumi.String("foobar"),
//				AutoscalingGroupName:  foobar.Name,
//				DefaultResult:         pulumi.String("CONTINUE"),
//				HeartbeatTimeout:      pulumi.Int(2000),
//				LifecycleTransition:   pulumi.String("autoscaling:EC2_INSTANCE_LAUNCHING"),
//				NotificationMetadata:  pulumi.String(json0),
//				NotificationTargetArn: pulumi.String("arn:aws:sqs:us-east-1:444455556666:queue1*"),
//				RoleArn:               pulumi.String("arn:aws:iam::123456789012:role/S3Access"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import AutoScaling Lifecycle Hooks using the role autoscaling_group_name and name separated by `/`. For example:
//
// ```sh
// $ pulumi import aws:autoscaling/lifecycleHook:LifecycleHook test-lifecycle-hook asg-name/lifecycle-hook-name
// ```
type LifecycleHook struct {
	pulumi.CustomResourceState

	// Name of the Auto Scaling group to which you want to assign the lifecycle hook
	AutoscalingGroupName pulumi.StringOutput `pulumi:"autoscalingGroupName"`
	// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON.
	DefaultResult pulumi.StringOutput `pulumi:"defaultResult"`
	// Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter
	HeartbeatTimeout pulumi.IntPtrOutput `pulumi:"heartbeatTimeout"`
	// Instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see [describe-lifecycle-hook-types](https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples)
	LifecycleTransition pulumi.StringOutput `pulumi:"lifecycleTransition"`
	// Name of the lifecycle hook.
	Name pulumi.StringOutput `pulumi:"name"`
	// Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
	NotificationMetadata pulumi.StringPtrOutput `pulumi:"notificationMetadata"`
	// ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic.
	NotificationTargetArn pulumi.StringPtrOutput `pulumi:"notificationTargetArn"`
	// ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
}

// NewLifecycleHook registers a new resource with the given unique name, arguments, and options.
func NewLifecycleHook(ctx *pulumi.Context,
	name string, args *LifecycleHookArgs, opts ...pulumi.ResourceOption) (*LifecycleHook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoscalingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AutoscalingGroupName'")
	}
	if args.LifecycleTransition == nil {
		return nil, errors.New("invalid value for required argument 'LifecycleTransition'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LifecycleHook
	err := ctx.RegisterResource("aws:autoscaling/lifecycleHook:LifecycleHook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLifecycleHook gets an existing LifecycleHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLifecycleHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LifecycleHookState, opts ...pulumi.ResourceOption) (*LifecycleHook, error) {
	var resource LifecycleHook
	err := ctx.ReadResource("aws:autoscaling/lifecycleHook:LifecycleHook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LifecycleHook resources.
type lifecycleHookState struct {
	// Name of the Auto Scaling group to which you want to assign the lifecycle hook
	AutoscalingGroupName *string `pulumi:"autoscalingGroupName"`
	// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON.
	DefaultResult *string `pulumi:"defaultResult"`
	// Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter
	HeartbeatTimeout *int `pulumi:"heartbeatTimeout"`
	// Instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see [describe-lifecycle-hook-types](https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples)
	LifecycleTransition *string `pulumi:"lifecycleTransition"`
	// Name of the lifecycle hook.
	Name *string `pulumi:"name"`
	// Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
	NotificationMetadata *string `pulumi:"notificationMetadata"`
	// ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic.
	NotificationTargetArn *string `pulumi:"notificationTargetArn"`
	// ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
	RoleArn *string `pulumi:"roleArn"`
}

type LifecycleHookState struct {
	// Name of the Auto Scaling group to which you want to assign the lifecycle hook
	AutoscalingGroupName pulumi.StringPtrInput
	// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON.
	DefaultResult pulumi.StringPtrInput
	// Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter
	HeartbeatTimeout pulumi.IntPtrInput
	// Instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see [describe-lifecycle-hook-types](https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples)
	LifecycleTransition pulumi.StringPtrInput
	// Name of the lifecycle hook.
	Name pulumi.StringPtrInput
	// Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
	NotificationMetadata pulumi.StringPtrInput
	// ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic.
	NotificationTargetArn pulumi.StringPtrInput
	// ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
	RoleArn pulumi.StringPtrInput
}

func (LifecycleHookState) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleHookState)(nil)).Elem()
}

type lifecycleHookArgs struct {
	// Name of the Auto Scaling group to which you want to assign the lifecycle hook
	AutoscalingGroupName string `pulumi:"autoscalingGroupName"`
	// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON.
	DefaultResult *string `pulumi:"defaultResult"`
	// Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter
	HeartbeatTimeout *int `pulumi:"heartbeatTimeout"`
	// Instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see [describe-lifecycle-hook-types](https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples)
	LifecycleTransition string `pulumi:"lifecycleTransition"`
	// Name of the lifecycle hook.
	Name *string `pulumi:"name"`
	// Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
	NotificationMetadata *string `pulumi:"notificationMetadata"`
	// ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic.
	NotificationTargetArn *string `pulumi:"notificationTargetArn"`
	// ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
	RoleArn *string `pulumi:"roleArn"`
}

// The set of arguments for constructing a LifecycleHook resource.
type LifecycleHookArgs struct {
	// Name of the Auto Scaling group to which you want to assign the lifecycle hook
	AutoscalingGroupName pulumi.StringInput
	// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON.
	DefaultResult pulumi.StringPtrInput
	// Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter
	HeartbeatTimeout pulumi.IntPtrInput
	// Instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see [describe-lifecycle-hook-types](https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples)
	LifecycleTransition pulumi.StringInput
	// Name of the lifecycle hook.
	Name pulumi.StringPtrInput
	// Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
	NotificationMetadata pulumi.StringPtrInput
	// ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic.
	NotificationTargetArn pulumi.StringPtrInput
	// ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
	RoleArn pulumi.StringPtrInput
}

func (LifecycleHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleHookArgs)(nil)).Elem()
}

type LifecycleHookInput interface {
	pulumi.Input

	ToLifecycleHookOutput() LifecycleHookOutput
	ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput
}

func (*LifecycleHook) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleHook)(nil)).Elem()
}

func (i *LifecycleHook) ToLifecycleHookOutput() LifecycleHookOutput {
	return i.ToLifecycleHookOutputWithContext(context.Background())
}

func (i *LifecycleHook) ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHookOutput)
}

// LifecycleHookArrayInput is an input type that accepts LifecycleHookArray and LifecycleHookArrayOutput values.
// You can construct a concrete instance of `LifecycleHookArrayInput` via:
//
//	LifecycleHookArray{ LifecycleHookArgs{...} }
type LifecycleHookArrayInput interface {
	pulumi.Input

	ToLifecycleHookArrayOutput() LifecycleHookArrayOutput
	ToLifecycleHookArrayOutputWithContext(context.Context) LifecycleHookArrayOutput
}

type LifecycleHookArray []LifecycleHookInput

func (LifecycleHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LifecycleHook)(nil)).Elem()
}

func (i LifecycleHookArray) ToLifecycleHookArrayOutput() LifecycleHookArrayOutput {
	return i.ToLifecycleHookArrayOutputWithContext(context.Background())
}

func (i LifecycleHookArray) ToLifecycleHookArrayOutputWithContext(ctx context.Context) LifecycleHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHookArrayOutput)
}

// LifecycleHookMapInput is an input type that accepts LifecycleHookMap and LifecycleHookMapOutput values.
// You can construct a concrete instance of `LifecycleHookMapInput` via:
//
//	LifecycleHookMap{ "key": LifecycleHookArgs{...} }
type LifecycleHookMapInput interface {
	pulumi.Input

	ToLifecycleHookMapOutput() LifecycleHookMapOutput
	ToLifecycleHookMapOutputWithContext(context.Context) LifecycleHookMapOutput
}

type LifecycleHookMap map[string]LifecycleHookInput

func (LifecycleHookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LifecycleHook)(nil)).Elem()
}

func (i LifecycleHookMap) ToLifecycleHookMapOutput() LifecycleHookMapOutput {
	return i.ToLifecycleHookMapOutputWithContext(context.Background())
}

func (i LifecycleHookMap) ToLifecycleHookMapOutputWithContext(ctx context.Context) LifecycleHookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHookMapOutput)
}

type LifecycleHookOutput struct{ *pulumi.OutputState }

func (LifecycleHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleHook)(nil)).Elem()
}

func (o LifecycleHookOutput) ToLifecycleHookOutput() LifecycleHookOutput {
	return o
}

func (o LifecycleHookOutput) ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput {
	return o
}

// Name of the Auto Scaling group to which you want to assign the lifecycle hook
func (o LifecycleHookOutput) AutoscalingGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.AutoscalingGroupName }).(pulumi.StringOutput)
}

// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON.
func (o LifecycleHookOutput) DefaultResult() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.DefaultResult }).(pulumi.StringOutput)
}

// Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter
func (o LifecycleHookOutput) HeartbeatTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.IntPtrOutput { return v.HeartbeatTimeout }).(pulumi.IntPtrOutput)
}

// Instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see [describe-lifecycle-hook-types](https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples)
func (o LifecycleHookOutput) LifecycleTransition() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.LifecycleTransition }).(pulumi.StringOutput)
}

// Name of the lifecycle hook.
func (o LifecycleHookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
func (o LifecycleHookOutput) NotificationMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringPtrOutput { return v.NotificationMetadata }).(pulumi.StringPtrOutput)
}

// ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic.
func (o LifecycleHookOutput) NotificationTargetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringPtrOutput { return v.NotificationTargetArn }).(pulumi.StringPtrOutput)
}

// ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
func (o LifecycleHookOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

type LifecycleHookArrayOutput struct{ *pulumi.OutputState }

func (LifecycleHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LifecycleHook)(nil)).Elem()
}

func (o LifecycleHookArrayOutput) ToLifecycleHookArrayOutput() LifecycleHookArrayOutput {
	return o
}

func (o LifecycleHookArrayOutput) ToLifecycleHookArrayOutputWithContext(ctx context.Context) LifecycleHookArrayOutput {
	return o
}

func (o LifecycleHookArrayOutput) Index(i pulumi.IntInput) LifecycleHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LifecycleHook {
		return vs[0].([]*LifecycleHook)[vs[1].(int)]
	}).(LifecycleHookOutput)
}

type LifecycleHookMapOutput struct{ *pulumi.OutputState }

func (LifecycleHookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LifecycleHook)(nil)).Elem()
}

func (o LifecycleHookMapOutput) ToLifecycleHookMapOutput() LifecycleHookMapOutput {
	return o
}

func (o LifecycleHookMapOutput) ToLifecycleHookMapOutputWithContext(ctx context.Context) LifecycleHookMapOutput {
	return o
}

func (o LifecycleHookMapOutput) MapIndex(k pulumi.StringInput) LifecycleHookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LifecycleHook {
		return vs[0].(map[string]*LifecycleHook)[vs[1].(string)]
	}).(LifecycleHookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHookInput)(nil)).Elem(), &LifecycleHook{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHookArrayInput)(nil)).Elem(), LifecycleHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHookMapInput)(nil)).Elem(), LifecycleHookMap{})
	pulumi.RegisterOutputType(LifecycleHookOutput{})
	pulumi.RegisterOutputType(LifecycleHookArrayOutput{})
	pulumi.RegisterOutputType(LifecycleHookMapOutput{})
}
