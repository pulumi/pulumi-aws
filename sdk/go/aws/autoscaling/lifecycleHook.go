// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AutoScaling Lifecycle Hook resource.
// 
// ~> **NOTE:** Terraform has two types of ways you can add lifecycle hooks - via
// the `initial_lifecycle_hook` attribute from the
// [`aws_autoscaling_group`](https://www.terraform.io/docs/providers/aws/r/autoscaling_group.html)
// resource, or via this one. Hooks added via this resource will not be added
// until the autoscaling group has been created, and depending on your
// [capacity](https://www.terraform.io/docs/providers/aws/r/autoscaling_group.html#waiting-for-capacity)
// settings, after the initial instances have been launched, creating unintended
// behavior. If you need hooks to run on all instances, add them with
// `initial_lifecycle_hook` in
// [`aws_autoscaling_group`](https://www.terraform.io/docs/providers/aws/r/autoscaling_group.html),
// but take care to not duplicate those hooks with this resource.
type LifecycleHook struct {
	s *pulumi.ResourceState
}

// NewLifecycleHook registers a new resource with the given unique name, arguments, and options.
func NewLifecycleHook(ctx *pulumi.Context,
	name string, args *LifecycleHookArgs, opts ...pulumi.ResourceOpt) (*LifecycleHook, error) {
	if args == nil || args.AutoscalingGroupName == nil {
		return nil, errors.New("missing required argument 'AutoscalingGroupName'")
	}
	if args == nil || args.LifecycleTransition == nil {
		return nil, errors.New("missing required argument 'LifecycleTransition'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoscalingGroupName"] = nil
		inputs["defaultResult"] = nil
		inputs["heartbeatTimeout"] = nil
		inputs["lifecycleTransition"] = nil
		inputs["name"] = nil
		inputs["notificationMetadata"] = nil
		inputs["notificationTargetArn"] = nil
		inputs["roleArn"] = nil
	} else {
		inputs["autoscalingGroupName"] = args.AutoscalingGroupName
		inputs["defaultResult"] = args.DefaultResult
		inputs["heartbeatTimeout"] = args.HeartbeatTimeout
		inputs["lifecycleTransition"] = args.LifecycleTransition
		inputs["name"] = args.Name
		inputs["notificationMetadata"] = args.NotificationMetadata
		inputs["notificationTargetArn"] = args.NotificationTargetArn
		inputs["roleArn"] = args.RoleArn
	}
	s, err := ctx.RegisterResource("aws:autoscaling/lifecycleHook:LifecycleHook", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LifecycleHook{s: s}, nil
}

// GetLifecycleHook gets an existing LifecycleHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLifecycleHook(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LifecycleHookState, opts ...pulumi.ResourceOpt) (*LifecycleHook, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["autoscalingGroupName"] = state.AutoscalingGroupName
		inputs["defaultResult"] = state.DefaultResult
		inputs["heartbeatTimeout"] = state.HeartbeatTimeout
		inputs["lifecycleTransition"] = state.LifecycleTransition
		inputs["name"] = state.Name
		inputs["notificationMetadata"] = state.NotificationMetadata
		inputs["notificationTargetArn"] = state.NotificationTargetArn
		inputs["roleArn"] = state.RoleArn
	}
	s, err := ctx.ReadResource("aws:autoscaling/lifecycleHook:LifecycleHook", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LifecycleHook{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LifecycleHook) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LifecycleHook) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The name of the Auto Scaling group to which you want to assign the lifecycle hook
func (r *LifecycleHook) AutoscalingGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["autoscalingGroupName"])
}

// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON.
func (r *LifecycleHook) DefaultResult() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultResult"])
}

// Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter
func (r *LifecycleHook) HeartbeatTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["heartbeatTimeout"])
}

// The instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see [describe-lifecycle-hook-types](https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples)
func (r *LifecycleHook) LifecycleTransition() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lifecycleTransition"])
}

// The name of the lifecycle hook.
func (r *LifecycleHook) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
func (r *LifecycleHook) NotificationMetadata() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["notificationMetadata"])
}

// The ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic.
func (r *LifecycleHook) NotificationTargetArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["notificationTargetArn"])
}

// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
func (r *LifecycleHook) RoleArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["roleArn"])
}

// Input properties used for looking up and filtering LifecycleHook resources.
type LifecycleHookState struct {
	// The name of the Auto Scaling group to which you want to assign the lifecycle hook
	AutoscalingGroupName interface{}
	// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON.
	DefaultResult interface{}
	// Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter
	HeartbeatTimeout interface{}
	// The instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see [describe-lifecycle-hook-types](https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples)
	LifecycleTransition interface{}
	// The name of the lifecycle hook.
	Name interface{}
	// Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
	NotificationMetadata interface{}
	// The ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic.
	NotificationTargetArn interface{}
	// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
	RoleArn interface{}
}

// The set of arguments for constructing a LifecycleHook resource.
type LifecycleHookArgs struct {
	// The name of the Auto Scaling group to which you want to assign the lifecycle hook
	AutoscalingGroupName interface{}
	// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON.
	DefaultResult interface{}
	// Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter
	HeartbeatTimeout interface{}
	// The instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see [describe-lifecycle-hook-types](https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples)
	LifecycleTransition interface{}
	// The name of the lifecycle hook.
	Name interface{}
	// Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
	NotificationMetadata interface{}
	// The ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic.
	NotificationTargetArn interface{}
	// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
	RoleArn interface{}
}
