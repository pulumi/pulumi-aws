// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LifecycleHook struct {
	pulumi.CustomResourceState

	AutoscalingGroupName  pulumi.StringOutput    `pulumi:"autoscalingGroupName"`
	DefaultResult         pulumi.StringOutput    `pulumi:"defaultResult"`
	HeartbeatTimeout      pulumi.IntPtrOutput    `pulumi:"heartbeatTimeout"`
	LifecycleTransition   pulumi.StringOutput    `pulumi:"lifecycleTransition"`
	Name                  pulumi.StringOutput    `pulumi:"name"`
	NotificationMetadata  pulumi.StringPtrOutput `pulumi:"notificationMetadata"`
	NotificationTargetArn pulumi.StringPtrOutput `pulumi:"notificationTargetArn"`
	RoleArn               pulumi.StringPtrOutput `pulumi:"roleArn"`
}

// NewLifecycleHook registers a new resource with the given unique name, arguments, and options.
func NewLifecycleHook(ctx *pulumi.Context,
	name string, args *LifecycleHookArgs, opts ...pulumi.ResourceOption) (*LifecycleHook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoscalingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AutoscalingGroupName'")
	}
	if args.LifecycleTransition == nil {
		return nil, errors.New("invalid value for required argument 'LifecycleTransition'")
	}
	var resource LifecycleHook
	err := ctx.RegisterResource("aws:autoscaling/lifecycleHook:LifecycleHook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLifecycleHook gets an existing LifecycleHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLifecycleHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LifecycleHookState, opts ...pulumi.ResourceOption) (*LifecycleHook, error) {
	var resource LifecycleHook
	err := ctx.ReadResource("aws:autoscaling/lifecycleHook:LifecycleHook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LifecycleHook resources.
type lifecycleHookState struct {
	AutoscalingGroupName  *string `pulumi:"autoscalingGroupName"`
	DefaultResult         *string `pulumi:"defaultResult"`
	HeartbeatTimeout      *int    `pulumi:"heartbeatTimeout"`
	LifecycleTransition   *string `pulumi:"lifecycleTransition"`
	Name                  *string `pulumi:"name"`
	NotificationMetadata  *string `pulumi:"notificationMetadata"`
	NotificationTargetArn *string `pulumi:"notificationTargetArn"`
	RoleArn               *string `pulumi:"roleArn"`
}

type LifecycleHookState struct {
	AutoscalingGroupName  pulumi.StringPtrInput
	DefaultResult         pulumi.StringPtrInput
	HeartbeatTimeout      pulumi.IntPtrInput
	LifecycleTransition   pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	NotificationMetadata  pulumi.StringPtrInput
	NotificationTargetArn pulumi.StringPtrInput
	RoleArn               pulumi.StringPtrInput
}

func (LifecycleHookState) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleHookState)(nil)).Elem()
}

type lifecycleHookArgs struct {
	AutoscalingGroupName  string  `pulumi:"autoscalingGroupName"`
	DefaultResult         *string `pulumi:"defaultResult"`
	HeartbeatTimeout      *int    `pulumi:"heartbeatTimeout"`
	LifecycleTransition   string  `pulumi:"lifecycleTransition"`
	Name                  *string `pulumi:"name"`
	NotificationMetadata  *string `pulumi:"notificationMetadata"`
	NotificationTargetArn *string `pulumi:"notificationTargetArn"`
	RoleArn               *string `pulumi:"roleArn"`
}

// The set of arguments for constructing a LifecycleHook resource.
type LifecycleHookArgs struct {
	AutoscalingGroupName  pulumi.StringInput
	DefaultResult         pulumi.StringPtrInput
	HeartbeatTimeout      pulumi.IntPtrInput
	LifecycleTransition   pulumi.StringInput
	Name                  pulumi.StringPtrInput
	NotificationMetadata  pulumi.StringPtrInput
	NotificationTargetArn pulumi.StringPtrInput
	RoleArn               pulumi.StringPtrInput
}

func (LifecycleHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleHookArgs)(nil)).Elem()
}

type LifecycleHookInput interface {
	pulumi.Input

	ToLifecycleHookOutput() LifecycleHookOutput
	ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput
}

func (*LifecycleHook) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleHook)(nil)).Elem()
}

func (i *LifecycleHook) ToLifecycleHookOutput() LifecycleHookOutput {
	return i.ToLifecycleHookOutputWithContext(context.Background())
}

func (i *LifecycleHook) ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHookOutput)
}

// LifecycleHookArrayInput is an input type that accepts LifecycleHookArray and LifecycleHookArrayOutput values.
// You can construct a concrete instance of `LifecycleHookArrayInput` via:
//
//	LifecycleHookArray{ LifecycleHookArgs{...} }
type LifecycleHookArrayInput interface {
	pulumi.Input

	ToLifecycleHookArrayOutput() LifecycleHookArrayOutput
	ToLifecycleHookArrayOutputWithContext(context.Context) LifecycleHookArrayOutput
}

type LifecycleHookArray []LifecycleHookInput

func (LifecycleHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LifecycleHook)(nil)).Elem()
}

func (i LifecycleHookArray) ToLifecycleHookArrayOutput() LifecycleHookArrayOutput {
	return i.ToLifecycleHookArrayOutputWithContext(context.Background())
}

func (i LifecycleHookArray) ToLifecycleHookArrayOutputWithContext(ctx context.Context) LifecycleHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHookArrayOutput)
}

// LifecycleHookMapInput is an input type that accepts LifecycleHookMap and LifecycleHookMapOutput values.
// You can construct a concrete instance of `LifecycleHookMapInput` via:
//
//	LifecycleHookMap{ "key": LifecycleHookArgs{...} }
type LifecycleHookMapInput interface {
	pulumi.Input

	ToLifecycleHookMapOutput() LifecycleHookMapOutput
	ToLifecycleHookMapOutputWithContext(context.Context) LifecycleHookMapOutput
}

type LifecycleHookMap map[string]LifecycleHookInput

func (LifecycleHookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LifecycleHook)(nil)).Elem()
}

func (i LifecycleHookMap) ToLifecycleHookMapOutput() LifecycleHookMapOutput {
	return i.ToLifecycleHookMapOutputWithContext(context.Background())
}

func (i LifecycleHookMap) ToLifecycleHookMapOutputWithContext(ctx context.Context) LifecycleHookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHookMapOutput)
}

type LifecycleHookOutput struct{ *pulumi.OutputState }

func (LifecycleHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleHook)(nil)).Elem()
}

func (o LifecycleHookOutput) ToLifecycleHookOutput() LifecycleHookOutput {
	return o
}

func (o LifecycleHookOutput) ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput {
	return o
}

func (o LifecycleHookOutput) AutoscalingGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.AutoscalingGroupName }).(pulumi.StringOutput)
}

func (o LifecycleHookOutput) DefaultResult() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.DefaultResult }).(pulumi.StringOutput)
}

func (o LifecycleHookOutput) HeartbeatTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.IntPtrOutput { return v.HeartbeatTimeout }).(pulumi.IntPtrOutput)
}

func (o LifecycleHookOutput) LifecycleTransition() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.LifecycleTransition }).(pulumi.StringOutput)
}

func (o LifecycleHookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LifecycleHookOutput) NotificationMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringPtrOutput { return v.NotificationMetadata }).(pulumi.StringPtrOutput)
}

func (o LifecycleHookOutput) NotificationTargetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringPtrOutput { return v.NotificationTargetArn }).(pulumi.StringPtrOutput)
}

func (o LifecycleHookOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LifecycleHook) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

type LifecycleHookArrayOutput struct{ *pulumi.OutputState }

func (LifecycleHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LifecycleHook)(nil)).Elem()
}

func (o LifecycleHookArrayOutput) ToLifecycleHookArrayOutput() LifecycleHookArrayOutput {
	return o
}

func (o LifecycleHookArrayOutput) ToLifecycleHookArrayOutputWithContext(ctx context.Context) LifecycleHookArrayOutput {
	return o
}

func (o LifecycleHookArrayOutput) Index(i pulumi.IntInput) LifecycleHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LifecycleHook {
		return vs[0].([]*LifecycleHook)[vs[1].(int)]
	}).(LifecycleHookOutput)
}

type LifecycleHookMapOutput struct{ *pulumi.OutputState }

func (LifecycleHookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LifecycleHook)(nil)).Elem()
}

func (o LifecycleHookMapOutput) ToLifecycleHookMapOutput() LifecycleHookMapOutput {
	return o
}

func (o LifecycleHookMapOutput) ToLifecycleHookMapOutputWithContext(ctx context.Context) LifecycleHookMapOutput {
	return o
}

func (o LifecycleHookMapOutput) MapIndex(k pulumi.StringInput) LifecycleHookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LifecycleHook {
		return vs[0].(map[string]*LifecycleHook)[vs[1].(string)]
	}).(LifecycleHookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHookInput)(nil)).Elem(), &LifecycleHook{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHookArrayInput)(nil)).Elem(), LifecycleHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleHookMapInput)(nil)).Elem(), LifecycleHookMap{})
	pulumi.RegisterOutputType(LifecycleHookOutput{})
	pulumi.RegisterOutputType(LifecycleHookArrayOutput{})
	pulumi.RegisterOutputType(LifecycleHookMapOutput{})
}
