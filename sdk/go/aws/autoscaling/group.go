// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Auto Scaling Group resource.
//
// > **Note:** You must specify either `launchConfiguration`, `launchTemplate`, or `mixedInstancesPolicy`.
//
// > **NOTE on Auto Scaling Groups, Attachments and Traffic Source Attachments:** Pulumi provides standalone Attachment (for attaching Classic Load Balancers and Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target groups) and Traffic Source Attachment (for attaching Load Balancers and VPC Lattice target groups) resources and an Auto Scaling Group resource with `loadBalancers`, `targetGroupArns` and `trafficSource` attributes. Do not use the same traffic source in more than one of these resources. Doing so will cause a conflict of attachments. A `lifecycle` configuration block can be used to suppress differences if necessary.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := ec2.NewPlacementGroup(ctx, "test", &ec2.PlacementGroupArgs{
//				Name:     pulumi.String("test"),
//				Strategy: pulumi.String("cluster"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"foo": "bar",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = autoscaling.NewGroup(ctx, "bar", &autoscaling.GroupArgs{
//				Name:                   pulumi.String("foobar3-test"),
//				MaxSize:                pulumi.Int(5),
//				MinSize:                pulumi.Int(2),
//				HealthCheckGracePeriod: pulumi.Int(300),
//				HealthCheckType:        pulumi.String("ELB"),
//				DesiredCapacity:        pulumi.Int(4),
//				ForceDelete:            pulumi.Bool(true),
//				PlacementGroup:         test.ID(),
//				LaunchConfiguration:    pulumi.Any(foobar.Name),
//				VpcZoneIdentifiers: pulumi.StringArray{
//					example1.Id,
//					example2.Id,
//				},
//				InstanceMaintenancePolicy: &autoscaling.GroupInstanceMaintenancePolicyArgs{
//					MinHealthyPercentage: pulumi.Int(90),
//					MaxHealthyPercentage: pulumi.Int(120),
//				},
//				InitialLifecycleHooks: autoscaling.GroupInitialLifecycleHookArray{
//					&autoscaling.GroupInitialLifecycleHookArgs{
//						Name:                  pulumi.String("foobar"),
//						DefaultResult:         pulumi.String("CONTINUE"),
//						HeartbeatTimeout:      pulumi.Int(2000),
//						LifecycleTransition:   pulumi.String("autoscaling:EC2_INSTANCE_LAUNCHING"),
//						NotificationMetadata:  pulumi.String(json0),
//						NotificationTargetArn: pulumi.String("arn:aws:sqs:us-east-1:444455556666:queue1*"),
//						RoleArn:               pulumi.String("arn:aws:iam::123456789012:role/S3Access"),
//					},
//				},
//				Tags: autoscaling.GroupTagArray{
//					&autoscaling.GroupTagArgs{
//						Key:               pulumi.String("foo"),
//						Value:             pulumi.String("bar"),
//						PropagateAtLaunch: pulumi.Bool(true),
//					},
//					&autoscaling.GroupTagArgs{
//						Key:               pulumi.String("lorem"),
//						Value:             pulumi.String("ipsum"),
//						PropagateAtLaunch: pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Latest Version Of Launch Template
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foobar, err := ec2.NewLaunchTemplate(ctx, "foobar", &ec2.LaunchTemplateArgs{
//				NamePrefix:   pulumi.String("foobar"),
//				ImageId:      pulumi.String("ami-1a2b3c"),
//				InstanceType: pulumi.String("t2.micro"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = autoscaling.NewGroup(ctx, "bar", &autoscaling.GroupArgs{
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("us-east-1a"),
//				},
//				DesiredCapacity: pulumi.Int(1),
//				MaxSize:         pulumi.Int(1),
//				MinSize:         pulumi.Int(1),
//				LaunchTemplate: &autoscaling.GroupLaunchTemplateArgs{
//					Id:      foobar.ID(),
//					Version: pulumi.String("$Latest"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Mixed Instances Policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.NewLaunchTemplate(ctx, "example", &ec2.LaunchTemplateArgs{
//				NamePrefix:   pulumi.String("example"),
//				ImageId:      pulumi.Any(exampleAwsAmi.Id),
//				InstanceType: pulumi.String("c5.large"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = autoscaling.NewGroup(ctx, "example", &autoscaling.GroupArgs{
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("us-east-1a"),
//				},
//				DesiredCapacity: pulumi.Int(1),
//				MaxSize:         pulumi.Int(1),
//				MinSize:         pulumi.Int(1),
//				MixedInstancesPolicy: &autoscaling.GroupMixedInstancesPolicyArgs{
//					LaunchTemplate: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateArgs{
//						LaunchTemplateSpecification: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationArgs{
//							LaunchTemplateId: example.ID(),
//						},
//						Overrides: autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideArray{
//							&autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideArgs{
//								InstanceType:     pulumi.String("c4.large"),
//								WeightedCapacity: pulumi.String("3"),
//							},
//							&autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideArgs{
//								InstanceType:     pulumi.String("c3.large"),
//								WeightedCapacity: pulumi.String("2"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Mixed Instances Policy with Spot Instances and Capacity Rebalance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.NewLaunchTemplate(ctx, "example", &ec2.LaunchTemplateArgs{
//				NamePrefix:   pulumi.String("example"),
//				ImageId:      pulumi.Any(exampleAwsAmi.Id),
//				InstanceType: pulumi.String("c5.large"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = autoscaling.NewGroup(ctx, "example", &autoscaling.GroupArgs{
//				CapacityRebalance: pulumi.Bool(true),
//				DesiredCapacity:   pulumi.Int(12),
//				MaxSize:           pulumi.Int(15),
//				MinSize:           pulumi.Int(12),
//				VpcZoneIdentifiers: pulumi.StringArray{
//					example1.Id,
//					example2.Id,
//				},
//				MixedInstancesPolicy: &autoscaling.GroupMixedInstancesPolicyArgs{
//					InstancesDistribution: &autoscaling.GroupMixedInstancesPolicyInstancesDistributionArgs{
//						OnDemandBaseCapacity:                pulumi.Int(0),
//						OnDemandPercentageAboveBaseCapacity: pulumi.Int(25),
//						SpotAllocationStrategy:              pulumi.String("capacity-optimized"),
//					},
//					LaunchTemplate: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateArgs{
//						LaunchTemplateSpecification: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationArgs{
//							LaunchTemplateId: example.ID(),
//						},
//						Overrides: autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideArray{
//							&autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideArgs{
//								InstanceType:     pulumi.String("c4.large"),
//								WeightedCapacity: pulumi.String("3"),
//							},
//							&autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideArgs{
//								InstanceType:     pulumi.String("c3.large"),
//								WeightedCapacity: pulumi.String("2"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Mixed Instances Policy with Instance level LaunchTemplateSpecification Overrides
//
// When using a diverse instance set, some instance types might require a launch template with configuration values unique to that instance type such as a different AMI (Graviton2), architecture specific user data script, different EBS configuration, or different networking configuration.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.NewLaunchTemplate(ctx, "example", &ec2.LaunchTemplateArgs{
//				NamePrefix:   pulumi.String("example"),
//				ImageId:      pulumi.Any(exampleAwsAmi.Id),
//				InstanceType: pulumi.String("c5.large"),
//			})
//			if err != nil {
//				return err
//			}
//			example2, err := ec2.NewLaunchTemplate(ctx, "example2", &ec2.LaunchTemplateArgs{
//				NamePrefix: pulumi.String("example2"),
//				ImageId:    pulumi.Any(example2AwsAmi.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = autoscaling.NewGroup(ctx, "example", &autoscaling.GroupArgs{
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("us-east-1a"),
//				},
//				DesiredCapacity: pulumi.Int(1),
//				MaxSize:         pulumi.Int(1),
//				MinSize:         pulumi.Int(1),
//				MixedInstancesPolicy: &autoscaling.GroupMixedInstancesPolicyArgs{
//					LaunchTemplate: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateArgs{
//						LaunchTemplateSpecification: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationArgs{
//							LaunchTemplateId: example.ID(),
//						},
//						Overrides: autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideArray{
//							&autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideArgs{
//								InstanceType:     pulumi.String("c4.large"),
//								WeightedCapacity: pulumi.String("3"),
//							},
//							&autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideArgs{
//								InstanceType: pulumi.String("c6g.large"),
//								LaunchTemplateSpecification: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationArgs{
//									LaunchTemplateId: example2.ID(),
//								},
//								WeightedCapacity: pulumi.String("2"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Mixed Instances Policy with Attribute-based Instance Type Selection
//
// As an alternative to manually choosing instance types when creating a mixed instances group, you can specify a set of instance attributes that describe your compute requirements.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.NewLaunchTemplate(ctx, "example", &ec2.LaunchTemplateArgs{
//				NamePrefix:   pulumi.String("example"),
//				ImageId:      pulumi.Any(exampleAwsAmi.Id),
//				InstanceType: pulumi.String("c5.large"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = autoscaling.NewGroup(ctx, "example", &autoscaling.GroupArgs{
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("us-east-1a"),
//				},
//				DesiredCapacity: pulumi.Int(1),
//				MaxSize:         pulumi.Int(1),
//				MinSize:         pulumi.Int(1),
//				MixedInstancesPolicy: &autoscaling.GroupMixedInstancesPolicyArgs{
//					LaunchTemplate: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateArgs{
//						LaunchTemplateSpecification: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationArgs{
//							LaunchTemplateId: example.ID(),
//						},
//						Overrides: autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideArray{
//							&autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideArgs{
//								InstanceRequirements: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsArgs{
//									MemoryMib: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryMibArgs{
//										Min: pulumi.Int(1000),
//									},
//									VcpuCount: &autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsVcpuCountArgs{
//										Min: pulumi.Int(4),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dynamic tagging
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			extraTags := []map[string]interface{}{
//				map[string]interface{}{
//					"key":               "Foo",
//					"propagateAtLaunch": true,
//					"value":             "Bar",
//				},
//				map[string]interface{}{
//					"key":               "Baz",
//					"propagateAtLaunch": true,
//					"value":             "Bam",
//				},
//			}
//			if param := cfg.GetObject("extraTags"); param != nil {
//				extraTags = param
//			}
//			_, err := autoscaling.NewGroup(ctx, "test", &autoscaling.GroupArgs{
//				Tags: autoscaling.GroupTagArray{
//					&autoscaling.GroupTagArgs{
//						Key:               pulumi.String("explicit1"),
//						Value:             pulumi.String("value1"),
//						PropagateAtLaunch: pulumi.Bool(true),
//					},
//					&autoscaling.GroupTagArgs{
//						Key:               pulumi.String("explicit2"),
//						Value:             pulumi.String("value2"),
//						PropagateAtLaunch: pulumi.Bool(true),
//					},
//				},
//				Name:                pulumi.String("foobar3-test"),
//				MaxSize:             pulumi.Int(5),
//				MinSize:             pulumi.Int(2),
//				LaunchConfiguration: pulumi.Any(foobar.Name),
//				VpcZoneIdentifiers: pulumi.StringArray{
//					example1.Id,
//					example2.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Automatically refresh all instances after the group is updated
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.LookupAmi(ctx, &ec2.LookupAmiArgs{
//				MostRecent: pulumi.BoolRef(true),
//				Owners: []string{
//					"amazon",
//				},
//				Filters: []ec2.GetAmiFilter{
//					{
//						Name: "name",
//						Values: []string{
//							"amzn-ami-hvm-*-x86_64-gp2",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleLaunchTemplate, err := ec2.NewLaunchTemplate(ctx, "example", &ec2.LaunchTemplateArgs{
//				ImageId:      *pulumi.String(example.Id),
//				InstanceType: pulumi.String("t3.nano"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = autoscaling.NewGroup(ctx, "example", &autoscaling.GroupArgs{
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("us-east-1a"),
//				},
//				DesiredCapacity: pulumi.Int(1),
//				MaxSize:         pulumi.Int(2),
//				MinSize:         pulumi.Int(1),
//				LaunchTemplate: &autoscaling.GroupLaunchTemplateArgs{
//					Id:      exampleLaunchTemplate.ID(),
//					Version: exampleLaunchTemplate.LatestVersion,
//				},
//				Tags: autoscaling.GroupTagArray{
//					&autoscaling.GroupTagArgs{
//						Key:               pulumi.String("Key"),
//						Value:             pulumi.String("Value"),
//						PropagateAtLaunch: pulumi.Bool(true),
//					},
//				},
//				InstanceRefresh: &autoscaling.GroupInstanceRefreshArgs{
//					Strategy: pulumi.String("Rolling"),
//					Preferences: &autoscaling.GroupInstanceRefreshPreferencesArgs{
//						MinHealthyPercentage: pulumi.Int(50),
//					},
//					Triggers: pulumi.StringArray{
//						pulumi.String("tag"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Auto Scaling group with Warm Pool
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2.NewLaunchTemplate(ctx, "example", &ec2.LaunchTemplateArgs{
//				NamePrefix:   pulumi.String("example"),
//				ImageId:      pulumi.Any(exampleAwsAmi.Id),
//				InstanceType: pulumi.String("c5.large"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = autoscaling.NewGroup(ctx, "example", &autoscaling.GroupArgs{
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("us-east-1a"),
//				},
//				DesiredCapacity: pulumi.Int(1),
//				MaxSize:         pulumi.Int(5),
//				MinSize:         pulumi.Int(1),
//				WarmPool: &autoscaling.GroupWarmPoolArgs{
//					PoolState:                pulumi.String("Hibernated"),
//					MinSize:                  pulumi.Int(1),
//					MaxGroupPreparedCapacity: pulumi.Int(10),
//					InstanceReusePolicy: &autoscaling.GroupWarmPoolInstanceReusePolicyArgs{
//						ReuseOnScaleIn: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Auto Scaling group with Traffic Sources
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autoscaling.NewGroup(ctx, "test", &autoscaling.GroupArgs{
//				TrafficSources:     "TODO: For expression",
//				VpcZoneIdentifiers: pulumi.Any(testAwsSubnet.Id),
//				MaxSize:            pulumi.Int(1),
//				MinSize:            pulumi.Int(1),
//				ForceDelete:        pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Waiting for Capacity
//
// A newly-created ASG is initially empty and begins to scale to `minSize` (or
// `desiredCapacity`, if specified) by launching instances using the provided
// Launch Configuration. These instances take time to launch and boot.
//
// On ASG Update, changes to these values also take time to result in the target
// number of instances providing service.
//
// This provider provides two mechanisms to help consistently manage ASG scale up
// time across dependent resources.
//
// #### Waiting for ASG Capacity
//
// The first is default behavior. This provider waits after ASG creation for
// `minSize` (or `desiredCapacity`, if specified) healthy instances to show up
// in the ASG before continuing.
//
// If `minSize` or `desiredCapacity` are changed in a subsequent update,
// this provider will also wait for the correct number of healthy instances before
// continuing.
//
// This provider considers an instance "healthy" when the ASG reports `HealthStatus:
// "Healthy"` and `LifecycleState: "InService"`. See the [AWS AutoScaling
// Docs](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/AutoScalingGroupLifecycle.html)
// for more information on an ASG's lifecycle.
//
// This provider will wait for healthy instances for up to
// `waitForCapacityTimeout`. If ASG creation is taking more than a few minutes,
// it's worth investigating for scaling activity errors, which can be caused by
// problems with the selected Launch Configuration.
//
// Setting `waitForCapacityTimeout` to `"0"` disables ASG Capacity waiting.
//
// #### Waiting for ELB Capacity
//
// The second mechanism is optional, and affects ASGs with attached ELBs specified
// via the `loadBalancers` attribute or with ALBs specified with `targetGroupArns`.
//
// The `minElbCapacity` parameter causes the provider to wait for at least the
// requested number of instances to show up `"InService"` in all attached ELBs
// during ASG creation. It has no effect on ASG updates.
//
// If `waitForElbCapacity` is set, the provider will wait for exactly that number
// of Instances to be `"InService"` in all attached ELBs on both creation and
// updates.
//
// These parameters can be used to ensure that service is being provided before
// the provider moves on. If new instances don't pass the ELB's health checks for any
// reason, the apply will time out, and the ASG will be marked as
// tainted (i.e., marked to be destroyed in a follow up run).
//
// As with ASG Capacity, the provider will wait for up to `waitForCapacityTimeout`
// for the proper number of instances to be healthy.
//
// #### Troubleshooting Capacity Waiting Timeouts
//
// If ASG creation takes more than a few minutes, this could indicate one of a
// number of configuration problems. See the [AWS Docs on Load Balancer
// Troubleshooting](https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-troubleshooting.html)
// for more information.
//
// ## Import
//
// Using `pulumi import`, import Auto Scaling Groups using the `name`. For example:
//
// ```sh
//
//	$ pulumi import aws:autoscaling/group:Group web web-asg
//
// ```
type Group struct {
	pulumi.CustomResourceState

	// ARN for this Auto Scaling Group
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
	CapacityRebalance pulumi.BoolPtrOutput `pulumi:"capacityRebalance"`
	// Reserved.
	Context pulumi.StringPtrOutput `pulumi:"context"`
	// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown pulumi.IntOutput `pulumi:"defaultCooldown"`
	// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
	DefaultInstanceWarmup pulumi.IntPtrOutput `pulumi:"defaultInstanceWarmup"`
	// Number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity pulumi.IntOutput `pulumi:"desiredCapacity"`
	// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
	DesiredCapacityType pulumi.StringPtrOutput `pulumi:"desiredCapacityType"`
	// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
	EnabledMetrics pulumi.StringArrayOutput `pulumi:"enabledMetrics"`
	// Allows deleting the Auto Scaling Group without waiting
	// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group. This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete pulumi.BoolPtrOutput `pulumi:"forceDelete"`
	// Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
	ForceDeleteWarmPool pulumi.BoolPtrOutput `pulumi:"forceDeleteWarmPool"`
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod pulumi.IntPtrOutput `pulumi:"healthCheckGracePeriod"`
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType pulumi.StringOutput `pulumi:"healthCheckType"`
	// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
	IgnoreFailedScalingActivities pulumi.BoolPtrOutput `pulumi:"ignoreFailedScalingActivities"`
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the Auto Scaling Group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// `autoscaling.LifecycleHook`
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks GroupInitialLifecycleHookArrayOutput `pulumi:"initialLifecycleHooks"`
	// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
	InstanceMaintenancePolicy GroupInstanceMaintenancePolicyPtrOutput `pulumi:"instanceMaintenancePolicy"`
	// If this block is configured, start an
	// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
	// when this Auto Scaling Group is updated. Defined below.
	InstanceRefresh GroupInstanceRefreshPtrOutput `pulumi:"instanceRefresh"`
	// Name of the launch configuration to use.
	LaunchConfiguration pulumi.StringPtrOutput `pulumi:"launchConfiguration"`
	// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
	LaunchTemplate GroupLaunchTemplateOutput `pulumi:"launchTemplate"`
	// List of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
	LoadBalancers pulumi.StringArrayOutput `pulumi:"loadBalancers"`
	// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
	MaxInstanceLifetime pulumi.IntPtrOutput `pulumi:"maxInstanceLifetime"`
	// Maximum size of the Auto Scaling Group.
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity pulumi.StringPtrOutput `pulumi:"metricsGranularity"`
	// Setting this causes Pulumi to wait for
	// this number of instances from this Auto Scaling Group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity pulumi.IntPtrOutput `pulumi:"minElbCapacity"`
	// Minimum size of the Auto Scaling Group.
	// (See also Waiting for Capacity below.)
	MinSize pulumi.IntOutput `pulumi:"minSize"`
	// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
	MixedInstancesPolicy GroupMixedInstancesPolicyOutput `pulumi:"mixedInstancesPolicy"`
	// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
	// Name of the placement group into which you'll launch your instances, if any.
	PlacementGroup pulumi.StringPtrOutput `pulumi:"placementGroup"`
	// Predicted capacity of the group.
	PredictedCapacity pulumi.IntOutput `pulumi:"predictedCapacity"`
	// Whether newly launched instances
	// are automatically protected from termination by Amazon EC2 Auto Scaling when
	// scaling in. For more information about preventing instances from terminating
	// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ProtectFromScaleIn pulumi.BoolPtrOutput `pulumi:"protectFromScaleIn"`
	// ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn pulumi.StringOutput `pulumi:"serviceLinkedRoleArn"`
	// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
	SuspendedProcesses pulumi.StringArrayOutput `pulumi:"suspendedProcesses"`
	// Configuration block(s) containing resource tags. See Tag below for more details.
	Tags GroupTagArrayOutput `pulumi:"tags"`
	// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
	TargetGroupArns pulumi.StringArrayOutput `pulumi:"targetGroupArns"`
	// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
	TerminationPolicies pulumi.StringArrayOutput `pulumi:"terminationPolicies"`
	// Attaches one or more traffic sources to the specified Auto Scaling group.
	TrafficSources GroupTrafficSourceArrayOutput `pulumi:"trafficSources"`
	// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
	VpcZoneIdentifiers pulumi.StringArrayOutput `pulumi:"vpcZoneIdentifiers"`
	// Maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
	// wait for ASG instances to be healthy before timing out. (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// the provider to skip all Capacity Waiting behavior.
	WaitForCapacityTimeout pulumi.StringPtrOutput `pulumi:"waitForCapacityTimeout"`
	// Setting this will cause Pulumi to wait
	// for exactly this number of healthy instances from this Auto Scaling Group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity pulumi.IntPtrOutput `pulumi:"waitForElbCapacity"`
	// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
	// to the specified Auto Scaling group. Defined below
	WarmPool GroupWarmPoolPtrOutput `pulumi:"warmPool"`
	// Current size of the warm pool.
	WarmPoolSize pulumi.IntOutput `pulumi:"warmPoolSize"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaxSize == nil {
		return nil, errors.New("invalid value for required argument 'MaxSize'")
	}
	if args.MinSize == nil {
		return nil, errors.New("invalid value for required argument 'MinSize'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("aws:autoscaling/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("aws:autoscaling/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// ARN for this Auto Scaling Group
	Arn *string `pulumi:"arn"`
	// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
	CapacityRebalance *bool `pulumi:"capacityRebalance"`
	// Reserved.
	Context *string `pulumi:"context"`
	// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown *int `pulumi:"defaultCooldown"`
	// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
	DefaultInstanceWarmup *int `pulumi:"defaultInstanceWarmup"`
	// Number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
	DesiredCapacityType *string `pulumi:"desiredCapacityType"`
	// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
	EnabledMetrics []string `pulumi:"enabledMetrics"`
	// Allows deleting the Auto Scaling Group without waiting
	// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group. This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete *bool `pulumi:"forceDelete"`
	// Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
	ForceDeleteWarmPool *bool `pulumi:"forceDeleteWarmPool"`
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod *int `pulumi:"healthCheckGracePeriod"`
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
	IgnoreFailedScalingActivities *bool `pulumi:"ignoreFailedScalingActivities"`
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the Auto Scaling Group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// `autoscaling.LifecycleHook`
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks []GroupInitialLifecycleHook `pulumi:"initialLifecycleHooks"`
	// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
	InstanceMaintenancePolicy *GroupInstanceMaintenancePolicy `pulumi:"instanceMaintenancePolicy"`
	// If this block is configured, start an
	// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
	// when this Auto Scaling Group is updated. Defined below.
	InstanceRefresh *GroupInstanceRefresh `pulumi:"instanceRefresh"`
	// Name of the launch configuration to use.
	LaunchConfiguration interface{} `pulumi:"launchConfiguration"`
	// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
	LaunchTemplate *GroupLaunchTemplate `pulumi:"launchTemplate"`
	// List of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
	LoadBalancers []string `pulumi:"loadBalancers"`
	// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
	MaxInstanceLifetime *int `pulumi:"maxInstanceLifetime"`
	// Maximum size of the Auto Scaling Group.
	MaxSize *int `pulumi:"maxSize"`
	// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity *string `pulumi:"metricsGranularity"`
	// Setting this causes Pulumi to wait for
	// this number of instances from this Auto Scaling Group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity *int `pulumi:"minElbCapacity"`
	// Minimum size of the Auto Scaling Group.
	// (See also Waiting for Capacity below.)
	MinSize *int `pulumi:"minSize"`
	// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
	MixedInstancesPolicy *GroupMixedInstancesPolicy `pulumi:"mixedInstancesPolicy"`
	// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Name of the placement group into which you'll launch your instances, if any.
	PlacementGroup interface{} `pulumi:"placementGroup"`
	// Predicted capacity of the group.
	PredictedCapacity *int `pulumi:"predictedCapacity"`
	// Whether newly launched instances
	// are automatically protected from termination by Amazon EC2 Auto Scaling when
	// scaling in. For more information about preventing instances from terminating
	// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ProtectFromScaleIn *bool `pulumi:"protectFromScaleIn"`
	// ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn *string `pulumi:"serviceLinkedRoleArn"`
	// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
	SuspendedProcesses []string `pulumi:"suspendedProcesses"`
	// Configuration block(s) containing resource tags. See Tag below for more details.
	Tags []GroupTag `pulumi:"tags"`
	// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
	TerminationPolicies []string `pulumi:"terminationPolicies"`
	// Attaches one or more traffic sources to the specified Auto Scaling group.
	TrafficSources []GroupTrafficSource `pulumi:"trafficSources"`
	// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
	VpcZoneIdentifiers []string `pulumi:"vpcZoneIdentifiers"`
	// Maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
	// wait for ASG instances to be healthy before timing out. (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// the provider to skip all Capacity Waiting behavior.
	WaitForCapacityTimeout *string `pulumi:"waitForCapacityTimeout"`
	// Setting this will cause Pulumi to wait
	// for exactly this number of healthy instances from this Auto Scaling Group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity *int `pulumi:"waitForElbCapacity"`
	// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
	// to the specified Auto Scaling group. Defined below
	WarmPool *GroupWarmPool `pulumi:"warmPool"`
	// Current size of the warm pool.
	WarmPoolSize *int `pulumi:"warmPoolSize"`
}

type GroupState struct {
	// ARN for this Auto Scaling Group
	Arn pulumi.StringPtrInput
	// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
	AvailabilityZones pulumi.StringArrayInput
	// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
	CapacityRebalance pulumi.BoolPtrInput
	// Reserved.
	Context pulumi.StringPtrInput
	// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown pulumi.IntPtrInput
	// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
	DefaultInstanceWarmup pulumi.IntPtrInput
	// Number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity pulumi.IntPtrInput
	// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
	DesiredCapacityType pulumi.StringPtrInput
	// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
	EnabledMetrics pulumi.StringArrayInput
	// Allows deleting the Auto Scaling Group without waiting
	// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group. This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete pulumi.BoolPtrInput
	// Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
	ForceDeleteWarmPool pulumi.BoolPtrInput
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod pulumi.IntPtrInput
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType pulumi.StringPtrInput
	// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
	IgnoreFailedScalingActivities pulumi.BoolPtrInput
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the Auto Scaling Group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// `autoscaling.LifecycleHook`
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks GroupInitialLifecycleHookArrayInput
	// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
	InstanceMaintenancePolicy GroupInstanceMaintenancePolicyPtrInput
	// If this block is configured, start an
	// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
	// when this Auto Scaling Group is updated. Defined below.
	InstanceRefresh GroupInstanceRefreshPtrInput
	// Name of the launch configuration to use.
	LaunchConfiguration pulumi.Input
	// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
	LaunchTemplate GroupLaunchTemplatePtrInput
	// List of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
	LoadBalancers pulumi.StringArrayInput
	// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
	MaxInstanceLifetime pulumi.IntPtrInput
	// Maximum size of the Auto Scaling Group.
	MaxSize pulumi.IntPtrInput
	// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity pulumi.StringPtrInput
	// Setting this causes Pulumi to wait for
	// this number of instances from this Auto Scaling Group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity pulumi.IntPtrInput
	// Minimum size of the Auto Scaling Group.
	// (See also Waiting for Capacity below.)
	MinSize pulumi.IntPtrInput
	// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
	MixedInstancesPolicy GroupMixedInstancesPolicyPtrInput
	// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// Name of the placement group into which you'll launch your instances, if any.
	PlacementGroup pulumi.Input
	// Predicted capacity of the group.
	PredictedCapacity pulumi.IntPtrInput
	// Whether newly launched instances
	// are automatically protected from termination by Amazon EC2 Auto Scaling when
	// scaling in. For more information about preventing instances from terminating
	// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ProtectFromScaleIn pulumi.BoolPtrInput
	// ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn pulumi.StringPtrInput
	// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
	SuspendedProcesses pulumi.StringArrayInput
	// Configuration block(s) containing resource tags. See Tag below for more details.
	Tags GroupTagArrayInput
	// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
	TargetGroupArns pulumi.StringArrayInput
	// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
	TerminationPolicies pulumi.StringArrayInput
	// Attaches one or more traffic sources to the specified Auto Scaling group.
	TrafficSources GroupTrafficSourceArrayInput
	// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
	VpcZoneIdentifiers pulumi.StringArrayInput
	// Maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
	// wait for ASG instances to be healthy before timing out. (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// the provider to skip all Capacity Waiting behavior.
	WaitForCapacityTimeout pulumi.StringPtrInput
	// Setting this will cause Pulumi to wait
	// for exactly this number of healthy instances from this Auto Scaling Group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity pulumi.IntPtrInput
	// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
	// to the specified Auto Scaling group. Defined below
	WarmPool GroupWarmPoolPtrInput
	// Current size of the warm pool.
	WarmPoolSize pulumi.IntPtrInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
	CapacityRebalance *bool `pulumi:"capacityRebalance"`
	// Reserved.
	Context *string `pulumi:"context"`
	// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown *int `pulumi:"defaultCooldown"`
	// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
	DefaultInstanceWarmup *int `pulumi:"defaultInstanceWarmup"`
	// Number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
	DesiredCapacityType *string `pulumi:"desiredCapacityType"`
	// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
	EnabledMetrics []string `pulumi:"enabledMetrics"`
	// Allows deleting the Auto Scaling Group without waiting
	// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group. This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete *bool `pulumi:"forceDelete"`
	// Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
	ForceDeleteWarmPool *bool `pulumi:"forceDeleteWarmPool"`
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod *int `pulumi:"healthCheckGracePeriod"`
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
	IgnoreFailedScalingActivities *bool `pulumi:"ignoreFailedScalingActivities"`
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the Auto Scaling Group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// `autoscaling.LifecycleHook`
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks []GroupInitialLifecycleHook `pulumi:"initialLifecycleHooks"`
	// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
	InstanceMaintenancePolicy *GroupInstanceMaintenancePolicy `pulumi:"instanceMaintenancePolicy"`
	// If this block is configured, start an
	// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
	// when this Auto Scaling Group is updated. Defined below.
	InstanceRefresh *GroupInstanceRefresh `pulumi:"instanceRefresh"`
	// Name of the launch configuration to use.
	LaunchConfiguration interface{} `pulumi:"launchConfiguration"`
	// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
	LaunchTemplate *GroupLaunchTemplate `pulumi:"launchTemplate"`
	// List of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
	LoadBalancers []string `pulumi:"loadBalancers"`
	// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
	MaxInstanceLifetime *int `pulumi:"maxInstanceLifetime"`
	// Maximum size of the Auto Scaling Group.
	MaxSize int `pulumi:"maxSize"`
	// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity *string `pulumi:"metricsGranularity"`
	// Setting this causes Pulumi to wait for
	// this number of instances from this Auto Scaling Group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity *int `pulumi:"minElbCapacity"`
	// Minimum size of the Auto Scaling Group.
	// (See also Waiting for Capacity below.)
	MinSize int `pulumi:"minSize"`
	// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
	MixedInstancesPolicy *GroupMixedInstancesPolicy `pulumi:"mixedInstancesPolicy"`
	// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Name of the placement group into which you'll launch your instances, if any.
	PlacementGroup interface{} `pulumi:"placementGroup"`
	// Whether newly launched instances
	// are automatically protected from termination by Amazon EC2 Auto Scaling when
	// scaling in. For more information about preventing instances from terminating
	// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ProtectFromScaleIn *bool `pulumi:"protectFromScaleIn"`
	// ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn *string `pulumi:"serviceLinkedRoleArn"`
	// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
	SuspendedProcesses []string `pulumi:"suspendedProcesses"`
	// Configuration block(s) containing resource tags. See Tag below for more details.
	Tags []GroupTag `pulumi:"tags"`
	// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
	TerminationPolicies []string `pulumi:"terminationPolicies"`
	// Attaches one or more traffic sources to the specified Auto Scaling group.
	TrafficSources []GroupTrafficSource `pulumi:"trafficSources"`
	// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
	VpcZoneIdentifiers []string `pulumi:"vpcZoneIdentifiers"`
	// Maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
	// wait for ASG instances to be healthy before timing out. (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// the provider to skip all Capacity Waiting behavior.
	WaitForCapacityTimeout *string `pulumi:"waitForCapacityTimeout"`
	// Setting this will cause Pulumi to wait
	// for exactly this number of healthy instances from this Auto Scaling Group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity *int `pulumi:"waitForElbCapacity"`
	// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
	// to the specified Auto Scaling group. Defined below
	WarmPool *GroupWarmPool `pulumi:"warmPool"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
	AvailabilityZones pulumi.StringArrayInput
	// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
	CapacityRebalance pulumi.BoolPtrInput
	// Reserved.
	Context pulumi.StringPtrInput
	// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown pulumi.IntPtrInput
	// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
	DefaultInstanceWarmup pulumi.IntPtrInput
	// Number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity pulumi.IntPtrInput
	// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
	DesiredCapacityType pulumi.StringPtrInput
	// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
	EnabledMetrics pulumi.StringArrayInput
	// Allows deleting the Auto Scaling Group without waiting
	// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group. This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete pulumi.BoolPtrInput
	// Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
	ForceDeleteWarmPool pulumi.BoolPtrInput
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod pulumi.IntPtrInput
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType pulumi.StringPtrInput
	// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
	IgnoreFailedScalingActivities pulumi.BoolPtrInput
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the Auto Scaling Group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// `autoscaling.LifecycleHook`
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks GroupInitialLifecycleHookArrayInput
	// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
	InstanceMaintenancePolicy GroupInstanceMaintenancePolicyPtrInput
	// If this block is configured, start an
	// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
	// when this Auto Scaling Group is updated. Defined below.
	InstanceRefresh GroupInstanceRefreshPtrInput
	// Name of the launch configuration to use.
	LaunchConfiguration pulumi.Input
	// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
	LaunchTemplate GroupLaunchTemplatePtrInput
	// List of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
	LoadBalancers pulumi.StringArrayInput
	// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
	MaxInstanceLifetime pulumi.IntPtrInput
	// Maximum size of the Auto Scaling Group.
	MaxSize pulumi.IntInput
	// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity pulumi.StringPtrInput
	// Setting this causes Pulumi to wait for
	// this number of instances from this Auto Scaling Group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity pulumi.IntPtrInput
	// Minimum size of the Auto Scaling Group.
	// (See also Waiting for Capacity below.)
	MinSize pulumi.IntInput
	// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
	MixedInstancesPolicy GroupMixedInstancesPolicyPtrInput
	// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// Name of the placement group into which you'll launch your instances, if any.
	PlacementGroup pulumi.Input
	// Whether newly launched instances
	// are automatically protected from termination by Amazon EC2 Auto Scaling when
	// scaling in. For more information about preventing instances from terminating
	// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ProtectFromScaleIn pulumi.BoolPtrInput
	// ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn pulumi.StringPtrInput
	// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
	SuspendedProcesses pulumi.StringArrayInput
	// Configuration block(s) containing resource tags. See Tag below for more details.
	Tags GroupTagArrayInput
	// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
	TargetGroupArns pulumi.StringArrayInput
	// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
	TerminationPolicies pulumi.StringArrayInput
	// Attaches one or more traffic sources to the specified Auto Scaling group.
	TrafficSources GroupTrafficSourceArrayInput
	// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
	VpcZoneIdentifiers pulumi.StringArrayInput
	// Maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
	// wait for ASG instances to be healthy before timing out. (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// the provider to skip all Capacity Waiting behavior.
	WaitForCapacityTimeout pulumi.StringPtrInput
	// Setting this will cause Pulumi to wait
	// for exactly this number of healthy instances from this Auto Scaling Group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity pulumi.IntPtrInput
	// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
	// to the specified Auto Scaling group. Defined below
	WarmPool GroupWarmPoolPtrInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (*Group) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (i *Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i *Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//	GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

// GroupMapInput is an input type that accepts GroupMap and GroupMapOutput values.
// You can construct a concrete instance of `GroupMapInput` via:
//
//	GroupMap{ "key": GroupArgs{...} }
type GroupMapInput interface {
	pulumi.Input

	ToGroupMapOutput() GroupMapOutput
	ToGroupMapOutputWithContext(context.Context) GroupMapOutput
}

type GroupMap map[string]GroupInput

func (GroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (i GroupMap) ToGroupMapOutput() GroupMapOutput {
	return i.ToGroupMapOutputWithContext(context.Background())
}

func (i GroupMap) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

// ARN for this Auto Scaling Group
func (o GroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
func (o GroupOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
func (o GroupOutput) CapacityRebalance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.CapacityRebalance }).(pulumi.BoolPtrOutput)
}

// Reserved.
func (o GroupOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.Context }).(pulumi.StringPtrOutput)
}

// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
func (o GroupOutput) DefaultCooldown() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.DefaultCooldown }).(pulumi.IntOutput)
}

// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
func (o GroupOutput) DefaultInstanceWarmup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.IntPtrOutput { return v.DefaultInstanceWarmup }).(pulumi.IntPtrOutput)
}

// Number of Amazon EC2 instances that
// should be running in the group. (See also Waiting for
// Capacity below.)
func (o GroupOutput) DesiredCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.DesiredCapacity }).(pulumi.IntOutput)
}

// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
func (o GroupOutput) DesiredCapacityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.DesiredCapacityType }).(pulumi.StringPtrOutput)
}

// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
func (o GroupOutput) EnabledMetrics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.EnabledMetrics }).(pulumi.StringArrayOutput)
}

// Allows deleting the Auto Scaling Group without waiting
// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
// even if it's in the process of scaling a resource. Normally, this provider
// drains all the instances before deleting the group. This bypasses that
// behavior and potentially leaves resources dangling.
func (o GroupOutput) ForceDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.ForceDelete }).(pulumi.BoolPtrOutput)
}

// Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
func (o GroupOutput) ForceDeleteWarmPool() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.ForceDeleteWarmPool }).(pulumi.BoolPtrOutput)
}

// Time (in seconds) after instance comes into service before checking health.
func (o GroupOutput) HealthCheckGracePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.IntPtrOutput { return v.HealthCheckGracePeriod }).(pulumi.IntPtrOutput)
}

// "EC2" or "ELB". Controls how health checking is done.
func (o GroupOutput) HealthCheckType() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.HealthCheckType }).(pulumi.StringOutput)
}

// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
func (o GroupOutput) IgnoreFailedScalingActivities() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.IgnoreFailedScalingActivities }).(pulumi.BoolPtrOutput)
}

// One or more
// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
// to attach to the Auto Scaling Group **before** instances are launched. The
// syntax is exactly the same as the separate
// `autoscaling.LifecycleHook`
// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
func (o GroupOutput) InitialLifecycleHooks() GroupInitialLifecycleHookArrayOutput {
	return o.ApplyT(func(v *Group) GroupInitialLifecycleHookArrayOutput { return v.InitialLifecycleHooks }).(GroupInitialLifecycleHookArrayOutput)
}

// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
func (o GroupOutput) InstanceMaintenancePolicy() GroupInstanceMaintenancePolicyPtrOutput {
	return o.ApplyT(func(v *Group) GroupInstanceMaintenancePolicyPtrOutput { return v.InstanceMaintenancePolicy }).(GroupInstanceMaintenancePolicyPtrOutput)
}

// If this block is configured, start an
// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
// when this Auto Scaling Group is updated. Defined below.
func (o GroupOutput) InstanceRefresh() GroupInstanceRefreshPtrOutput {
	return o.ApplyT(func(v *Group) GroupInstanceRefreshPtrOutput { return v.InstanceRefresh }).(GroupInstanceRefreshPtrOutput)
}

// Name of the launch configuration to use.
func (o GroupOutput) LaunchConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.LaunchConfiguration }).(pulumi.StringPtrOutput)
}

// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
func (o GroupOutput) LaunchTemplate() GroupLaunchTemplateOutput {
	return o.ApplyT(func(v *Group) GroupLaunchTemplateOutput { return v.LaunchTemplate }).(GroupLaunchTemplateOutput)
}

// List of elastic load balancer names to add to the autoscaling
// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
func (o GroupOutput) LoadBalancers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.LoadBalancers }).(pulumi.StringArrayOutput)
}

// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
func (o GroupOutput) MaxInstanceLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.IntPtrOutput { return v.MaxInstanceLifetime }).(pulumi.IntPtrOutput)
}

// Maximum size of the Auto Scaling Group.
func (o GroupOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.MaxSize }).(pulumi.IntOutput)
}

// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
func (o GroupOutput) MetricsGranularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.MetricsGranularity }).(pulumi.StringPtrOutput)
}

// Setting this causes Pulumi to wait for
// this number of instances from this Auto Scaling Group to show up healthy in the
// ELB only on creation. Updates will not wait on ELB instance number changes.
// (See also Waiting for Capacity below.)
func (o GroupOutput) MinElbCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.IntPtrOutput { return v.MinElbCapacity }).(pulumi.IntPtrOutput)
}

// Minimum size of the Auto Scaling Group.
// (See also Waiting for Capacity below.)
func (o GroupOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.MinSize }).(pulumi.IntOutput)
}

// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
func (o GroupOutput) MixedInstancesPolicy() GroupMixedInstancesPolicyOutput {
	return o.ApplyT(func(v *Group) GroupMixedInstancesPolicyOutput { return v.MixedInstancesPolicy }).(GroupMixedInstancesPolicyOutput)
}

// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
func (o GroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Creates a unique name beginning with the specified
// prefix. Conflicts with `name`.
func (o GroupOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

// Name of the placement group into which you'll launch your instances, if any.
func (o GroupOutput) PlacementGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.PlacementGroup }).(pulumi.StringPtrOutput)
}

// Predicted capacity of the group.
func (o GroupOutput) PredictedCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.PredictedCapacity }).(pulumi.IntOutput)
}

// Whether newly launched instances
// are automatically protected from termination by Amazon EC2 Auto Scaling when
// scaling in. For more information about preventing instances from terminating
// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
// in the Amazon EC2 Auto Scaling User Guide.
func (o GroupOutput) ProtectFromScaleIn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.ProtectFromScaleIn }).(pulumi.BoolPtrOutput)
}

// ARN of the service-linked role that the ASG will use to call other AWS services
func (o GroupOutput) ServiceLinkedRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.ServiceLinkedRoleArn }).(pulumi.StringOutput)
}

// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
func (o GroupOutput) SuspendedProcesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.SuspendedProcesses }).(pulumi.StringArrayOutput)
}

// Configuration block(s) containing resource tags. See Tag below for more details.
func (o GroupOutput) Tags() GroupTagArrayOutput {
	return o.ApplyT(func(v *Group) GroupTagArrayOutput { return v.Tags }).(GroupTagArrayOutput)
}

// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
func (o GroupOutput) TargetGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.TargetGroupArns }).(pulumi.StringArrayOutput)
}

// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
func (o GroupOutput) TerminationPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.TerminationPolicies }).(pulumi.StringArrayOutput)
}

// Attaches one or more traffic sources to the specified Auto Scaling group.
func (o GroupOutput) TrafficSources() GroupTrafficSourceArrayOutput {
	return o.ApplyT(func(v *Group) GroupTrafficSourceArrayOutput { return v.TrafficSources }).(GroupTrafficSourceArrayOutput)
}

// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
func (o GroupOutput) VpcZoneIdentifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.VpcZoneIdentifiers }).(pulumi.StringArrayOutput)
}

// Maximum
// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
// wait for ASG instances to be healthy before timing out. (See also Waiting
// for Capacity below.) Setting this to "0" causes
// the provider to skip all Capacity Waiting behavior.
func (o GroupOutput) WaitForCapacityTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.WaitForCapacityTimeout }).(pulumi.StringPtrOutput)
}

// Setting this will cause Pulumi to wait
// for exactly this number of healthy instances from this Auto Scaling Group in
// all attached load balancers on both create and update operations. (Takes
// precedence over `minElbCapacity` behavior.)
// (See also Waiting for Capacity below.)
func (o GroupOutput) WaitForElbCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.IntPtrOutput { return v.WaitForElbCapacity }).(pulumi.IntPtrOutput)
}

// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
// to the specified Auto Scaling group. Defined below
func (o GroupOutput) WarmPool() GroupWarmPoolPtrOutput {
	return o.ApplyT(func(v *Group) GroupWarmPoolPtrOutput { return v.WarmPool }).(GroupWarmPoolPtrOutput)
}

// Current size of the warm pool.
func (o GroupOutput) WarmPoolSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.WarmPoolSize }).(pulumi.IntOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Group {
		return vs[0].([]*Group)[vs[1].(int)]
	}).(GroupOutput)
}

type GroupMapOutput struct{ *pulumi.OutputState }

func (GroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (o GroupMapOutput) ToGroupMapOutput() GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return o
}

func (o GroupMapOutput) MapIndex(k pulumi.StringInput) GroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Group {
		return vs[0].(map[string]*Group)[vs[1].(string)]
	}).(GroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInput)(nil)).Elem(), &Group{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupArrayInput)(nil)).Elem(), GroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapInput)(nil)).Elem(), GroupMap{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(GroupMapOutput{})
}
