// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS FMS (Firewall Manager) Resource Set.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/fms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fms.NewResourceSet(ctx, "example", &fms.ResourceSetArgs{
//				ResourceSets: fms.ResourceSetResourceSetArray{
//					&fms.ResourceSetResourceSetArgs{
//						Name: pulumi.String("testing"),
//						ResourceTypeLists: pulumi.StringArray{
//							pulumi.String("AWS::NetworkFirewall::Firewall"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import FMS (Firewall Manager) Resource Set using the `id`. For example:
//
// ```sh
// $ pulumi import aws:fms/resourceSet:ResourceSet example resource_set-id-12345678
// ```
type ResourceSet struct {
	pulumi.CustomResourceState

	// ARN of the Resource Set.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Details about the resource set to be created or updated. See `resourceSet` Attribute Reference below.
	ResourceSets ResourceSetResourceSetArrayOutput `pulumi:"resourceSets"`
	Tags         pulumi.StringMapOutput            `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput       `pulumi:"tagsAll"`
	Timeouts ResourceSetTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewResourceSet registers a new resource with the given unique name, arguments, and options.
func NewResourceSet(ctx *pulumi.Context,
	name string, args *ResourceSetArgs, opts ...pulumi.ResourceOption) (*ResourceSet, error) {
	if args == nil {
		args = &ResourceSetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceSet
	err := ctx.RegisterResource("aws:fms/resourceSet:ResourceSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceSet gets an existing ResourceSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceSetState, opts ...pulumi.ResourceOption) (*ResourceSet, error) {
	var resource ResourceSet
	err := ctx.ReadResource("aws:fms/resourceSet:ResourceSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceSet resources.
type resourceSetState struct {
	// ARN of the Resource Set.
	Arn *string `pulumi:"arn"`
	// Details about the resource set to be created or updated. See `resourceSet` Attribute Reference below.
	ResourceSets []ResourceSetResourceSet `pulumi:"resourceSets"`
	Tags         map[string]string        `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string    `pulumi:"tagsAll"`
	Timeouts *ResourceSetTimeouts `pulumi:"timeouts"`
}

type ResourceSetState struct {
	// ARN of the Resource Set.
	Arn pulumi.StringPtrInput
	// Details about the resource set to be created or updated. See `resourceSet` Attribute Reference below.
	ResourceSets ResourceSetResourceSetArrayInput
	Tags         pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts ResourceSetTimeoutsPtrInput
}

func (ResourceSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSetState)(nil)).Elem()
}

type resourceSetArgs struct {
	// Details about the resource set to be created or updated. See `resourceSet` Attribute Reference below.
	ResourceSets []ResourceSetResourceSet `pulumi:"resourceSets"`
	Tags         map[string]string        `pulumi:"tags"`
	Timeouts     *ResourceSetTimeouts     `pulumi:"timeouts"`
}

// The set of arguments for constructing a ResourceSet resource.
type ResourceSetArgs struct {
	// Details about the resource set to be created or updated. See `resourceSet` Attribute Reference below.
	ResourceSets ResourceSetResourceSetArrayInput
	Tags         pulumi.StringMapInput
	Timeouts     ResourceSetTimeoutsPtrInput
}

func (ResourceSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSetArgs)(nil)).Elem()
}

type ResourceSetInput interface {
	pulumi.Input

	ToResourceSetOutput() ResourceSetOutput
	ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput
}

func (*ResourceSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSet)(nil)).Elem()
}

func (i *ResourceSet) ToResourceSetOutput() ResourceSetOutput {
	return i.ToResourceSetOutputWithContext(context.Background())
}

func (i *ResourceSet) ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetOutput)
}

// ResourceSetArrayInput is an input type that accepts ResourceSetArray and ResourceSetArrayOutput values.
// You can construct a concrete instance of `ResourceSetArrayInput` via:
//
//	ResourceSetArray{ ResourceSetArgs{...} }
type ResourceSetArrayInput interface {
	pulumi.Input

	ToResourceSetArrayOutput() ResourceSetArrayOutput
	ToResourceSetArrayOutputWithContext(context.Context) ResourceSetArrayOutput
}

type ResourceSetArray []ResourceSetInput

func (ResourceSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSet)(nil)).Elem()
}

func (i ResourceSetArray) ToResourceSetArrayOutput() ResourceSetArrayOutput {
	return i.ToResourceSetArrayOutputWithContext(context.Background())
}

func (i ResourceSetArray) ToResourceSetArrayOutputWithContext(ctx context.Context) ResourceSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetArrayOutput)
}

// ResourceSetMapInput is an input type that accepts ResourceSetMap and ResourceSetMapOutput values.
// You can construct a concrete instance of `ResourceSetMapInput` via:
//
//	ResourceSetMap{ "key": ResourceSetArgs{...} }
type ResourceSetMapInput interface {
	pulumi.Input

	ToResourceSetMapOutput() ResourceSetMapOutput
	ToResourceSetMapOutputWithContext(context.Context) ResourceSetMapOutput
}

type ResourceSetMap map[string]ResourceSetInput

func (ResourceSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSet)(nil)).Elem()
}

func (i ResourceSetMap) ToResourceSetMapOutput() ResourceSetMapOutput {
	return i.ToResourceSetMapOutputWithContext(context.Background())
}

func (i ResourceSetMap) ToResourceSetMapOutputWithContext(ctx context.Context) ResourceSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetMapOutput)
}

type ResourceSetOutput struct{ *pulumi.OutputState }

func (ResourceSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSet)(nil)).Elem()
}

func (o ResourceSetOutput) ToResourceSetOutput() ResourceSetOutput {
	return o
}

func (o ResourceSetOutput) ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput {
	return o
}

// ARN of the Resource Set.
func (o ResourceSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Details about the resource set to be created or updated. See `resourceSet` Attribute Reference below.
func (o ResourceSetOutput) ResourceSets() ResourceSetResourceSetArrayOutput {
	return o.ApplyT(func(v *ResourceSet) ResourceSetResourceSetArrayOutput { return v.ResourceSets }).(ResourceSetResourceSetArrayOutput)
}

func (o ResourceSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o ResourceSetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ResourceSetOutput) Timeouts() ResourceSetTimeoutsPtrOutput {
	return o.ApplyT(func(v *ResourceSet) ResourceSetTimeoutsPtrOutput { return v.Timeouts }).(ResourceSetTimeoutsPtrOutput)
}

type ResourceSetArrayOutput struct{ *pulumi.OutputState }

func (ResourceSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSet)(nil)).Elem()
}

func (o ResourceSetArrayOutput) ToResourceSetArrayOutput() ResourceSetArrayOutput {
	return o
}

func (o ResourceSetArrayOutput) ToResourceSetArrayOutputWithContext(ctx context.Context) ResourceSetArrayOutput {
	return o
}

func (o ResourceSetArrayOutput) Index(i pulumi.IntInput) ResourceSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceSet {
		return vs[0].([]*ResourceSet)[vs[1].(int)]
	}).(ResourceSetOutput)
}

type ResourceSetMapOutput struct{ *pulumi.OutputState }

func (ResourceSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSet)(nil)).Elem()
}

func (o ResourceSetMapOutput) ToResourceSetMapOutput() ResourceSetMapOutput {
	return o
}

func (o ResourceSetMapOutput) ToResourceSetMapOutputWithContext(ctx context.Context) ResourceSetMapOutput {
	return o
}

func (o ResourceSetMapOutput) MapIndex(k pulumi.StringInput) ResourceSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceSet {
		return vs[0].(map[string]*ResourceSet)[vs[1].(string)]
	}).(ResourceSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetInput)(nil)).Elem(), &ResourceSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetArrayInput)(nil)).Elem(), ResourceSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetMapInput)(nil)).Elem(), ResourceSetMap{})
	pulumi.RegisterOutputType(ResourceSetOutput{})
	pulumi.RegisterOutputType(ResourceSetArrayOutput{})
	pulumi.RegisterOutputType(ResourceSetMapOutput{})
}
