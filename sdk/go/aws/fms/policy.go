// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fms

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Policy struct {
	pulumi.CustomResourceState

	Arn                            pulumi.StringOutput                   `pulumi:"arn"`
	DeleteAllPolicyResources       pulumi.BoolPtrOutput                  `pulumi:"deleteAllPolicyResources"`
	DeleteUnusedFmManagedResources pulumi.BoolPtrOutput                  `pulumi:"deleteUnusedFmManagedResources"`
	ExcludeMap                     PolicyExcludeMapPtrOutput             `pulumi:"excludeMap"`
	ExcludeResourceTags            pulumi.BoolOutput                     `pulumi:"excludeResourceTags"`
	IncludeMap                     PolicyIncludeMapPtrOutput             `pulumi:"includeMap"`
	Name                           pulumi.StringOutput                   `pulumi:"name"`
	PolicyUpdateToken              pulumi.StringOutput                   `pulumi:"policyUpdateToken"`
	RemediationEnabled             pulumi.BoolPtrOutput                  `pulumi:"remediationEnabled"`
	ResourceTags                   pulumi.StringMapOutput                `pulumi:"resourceTags"`
	ResourceType                   pulumi.StringOutput                   `pulumi:"resourceType"`
	ResourceTypeLists              pulumi.StringArrayOutput              `pulumi:"resourceTypeLists"`
	SecurityServicePolicyData      PolicySecurityServicePolicyDataOutput `pulumi:"securityServicePolicyData"`
	Tags                           pulumi.StringMapOutput                `pulumi:"tags"`
	TagsAll                        pulumi.StringMapOutput                `pulumi:"tagsAll"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExcludeResourceTags == nil {
		return nil, errors.New("invalid value for required argument 'ExcludeResourceTags'")
	}
	if args.SecurityServicePolicyData == nil {
		return nil, errors.New("invalid value for required argument 'SecurityServicePolicyData'")
	}
	var resource Policy
	err := ctx.RegisterResource("aws:fms/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("aws:fms/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	Arn                            *string                          `pulumi:"arn"`
	DeleteAllPolicyResources       *bool                            `pulumi:"deleteAllPolicyResources"`
	DeleteUnusedFmManagedResources *bool                            `pulumi:"deleteUnusedFmManagedResources"`
	ExcludeMap                     *PolicyExcludeMap                `pulumi:"excludeMap"`
	ExcludeResourceTags            *bool                            `pulumi:"excludeResourceTags"`
	IncludeMap                     *PolicyIncludeMap                `pulumi:"includeMap"`
	Name                           *string                          `pulumi:"name"`
	PolicyUpdateToken              *string                          `pulumi:"policyUpdateToken"`
	RemediationEnabled             *bool                            `pulumi:"remediationEnabled"`
	ResourceTags                   map[string]string                `pulumi:"resourceTags"`
	ResourceType                   *string                          `pulumi:"resourceType"`
	ResourceTypeLists              []string                         `pulumi:"resourceTypeLists"`
	SecurityServicePolicyData      *PolicySecurityServicePolicyData `pulumi:"securityServicePolicyData"`
	Tags                           map[string]string                `pulumi:"tags"`
	TagsAll                        map[string]string                `pulumi:"tagsAll"`
}

type PolicyState struct {
	Arn                            pulumi.StringPtrInput
	DeleteAllPolicyResources       pulumi.BoolPtrInput
	DeleteUnusedFmManagedResources pulumi.BoolPtrInput
	ExcludeMap                     PolicyExcludeMapPtrInput
	ExcludeResourceTags            pulumi.BoolPtrInput
	IncludeMap                     PolicyIncludeMapPtrInput
	Name                           pulumi.StringPtrInput
	PolicyUpdateToken              pulumi.StringPtrInput
	RemediationEnabled             pulumi.BoolPtrInput
	ResourceTags                   pulumi.StringMapInput
	ResourceType                   pulumi.StringPtrInput
	ResourceTypeLists              pulumi.StringArrayInput
	SecurityServicePolicyData      PolicySecurityServicePolicyDataPtrInput
	Tags                           pulumi.StringMapInput
	TagsAll                        pulumi.StringMapInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	DeleteAllPolicyResources       *bool                           `pulumi:"deleteAllPolicyResources"`
	DeleteUnusedFmManagedResources *bool                           `pulumi:"deleteUnusedFmManagedResources"`
	ExcludeMap                     *PolicyExcludeMap               `pulumi:"excludeMap"`
	ExcludeResourceTags            bool                            `pulumi:"excludeResourceTags"`
	IncludeMap                     *PolicyIncludeMap               `pulumi:"includeMap"`
	Name                           *string                         `pulumi:"name"`
	RemediationEnabled             *bool                           `pulumi:"remediationEnabled"`
	ResourceTags                   map[string]string               `pulumi:"resourceTags"`
	ResourceType                   *string                         `pulumi:"resourceType"`
	ResourceTypeLists              []string                        `pulumi:"resourceTypeLists"`
	SecurityServicePolicyData      PolicySecurityServicePolicyData `pulumi:"securityServicePolicyData"`
	Tags                           map[string]string               `pulumi:"tags"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	DeleteAllPolicyResources       pulumi.BoolPtrInput
	DeleteUnusedFmManagedResources pulumi.BoolPtrInput
	ExcludeMap                     PolicyExcludeMapPtrInput
	ExcludeResourceTags            pulumi.BoolInput
	IncludeMap                     PolicyIncludeMapPtrInput
	Name                           pulumi.StringPtrInput
	RemediationEnabled             pulumi.BoolPtrInput
	ResourceTags                   pulumi.StringMapInput
	ResourceType                   pulumi.StringPtrInput
	ResourceTypeLists              pulumi.StringArrayInput
	SecurityServicePolicyData      PolicySecurityServicePolicyDataInput
	Tags                           pulumi.StringMapInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o PolicyOutput) DeleteAllPolicyResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.DeleteAllPolicyResources }).(pulumi.BoolPtrOutput)
}

func (o PolicyOutput) DeleteUnusedFmManagedResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.DeleteUnusedFmManagedResources }).(pulumi.BoolPtrOutput)
}

func (o PolicyOutput) ExcludeMap() PolicyExcludeMapPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyExcludeMapPtrOutput { return v.ExcludeMap }).(PolicyExcludeMapPtrOutput)
}

func (o PolicyOutput) ExcludeResourceTags() pulumi.BoolOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolOutput { return v.ExcludeResourceTags }).(pulumi.BoolOutput)
}

func (o PolicyOutput) IncludeMap() PolicyIncludeMapPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyIncludeMapPtrOutput { return v.IncludeMap }).(PolicyIncludeMapPtrOutput)
}

func (o PolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PolicyOutput) PolicyUpdateToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.PolicyUpdateToken }).(pulumi.StringOutput)
}

func (o PolicyOutput) RemediationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.RemediationEnabled }).(pulumi.BoolPtrOutput)
}

func (o PolicyOutput) ResourceTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringMapOutput { return v.ResourceTags }).(pulumi.StringMapOutput)
}

func (o PolicyOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

func (o PolicyOutput) ResourceTypeLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringArrayOutput { return v.ResourceTypeLists }).(pulumi.StringArrayOutput)
}

func (o PolicyOutput) SecurityServicePolicyData() PolicySecurityServicePolicyDataOutput {
	return o.ApplyT(func(v *Policy) PolicySecurityServicePolicyDataOutput { return v.SecurityServicePolicyData }).(PolicySecurityServicePolicyDataOutput)
}

func (o PolicyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o PolicyOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}
