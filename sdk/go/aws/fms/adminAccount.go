// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to associate/disassociate an AWS Firewall Manager administrator account. This operation must be performed in the `us-east-1` region.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/fms"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fms.NewAdminAccount(ctx, "example", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Firewall Manager administrator account association can be imported using the account ID, e.g.,
//
// ```sh
//  $ pulumi import aws:fms/adminAccount:AdminAccount example 123456789012
// ```
type AdminAccount struct {
	pulumi.CustomResourceState

	// The AWS account ID to associate with AWS Firewall Manager as the AWS Firewall Manager administrator account. This can be an AWS Organizations master account or a member account. Defaults to the current account. Must be configured to perform drift detection.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
}

// NewAdminAccount registers a new resource with the given unique name, arguments, and options.
func NewAdminAccount(ctx *pulumi.Context,
	name string, args *AdminAccountArgs, opts ...pulumi.ResourceOption) (*AdminAccount, error) {
	if args == nil {
		args = &AdminAccountArgs{}
	}

	var resource AdminAccount
	err := ctx.RegisterResource("aws:fms/adminAccount:AdminAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdminAccount gets an existing AdminAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdminAccountState, opts ...pulumi.ResourceOption) (*AdminAccount, error) {
	var resource AdminAccount
	err := ctx.ReadResource("aws:fms/adminAccount:AdminAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdminAccount resources.
type adminAccountState struct {
	// The AWS account ID to associate with AWS Firewall Manager as the AWS Firewall Manager administrator account. This can be an AWS Organizations master account or a member account. Defaults to the current account. Must be configured to perform drift detection.
	AccountId *string `pulumi:"accountId"`
}

type AdminAccountState struct {
	// The AWS account ID to associate with AWS Firewall Manager as the AWS Firewall Manager administrator account. This can be an AWS Organizations master account or a member account. Defaults to the current account. Must be configured to perform drift detection.
	AccountId pulumi.StringPtrInput
}

func (AdminAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*adminAccountState)(nil)).Elem()
}

type adminAccountArgs struct {
	// The AWS account ID to associate with AWS Firewall Manager as the AWS Firewall Manager administrator account. This can be an AWS Organizations master account or a member account. Defaults to the current account. Must be configured to perform drift detection.
	AccountId *string `pulumi:"accountId"`
}

// The set of arguments for constructing a AdminAccount resource.
type AdminAccountArgs struct {
	// The AWS account ID to associate with AWS Firewall Manager as the AWS Firewall Manager administrator account. This can be an AWS Organizations master account or a member account. Defaults to the current account. Must be configured to perform drift detection.
	AccountId pulumi.StringPtrInput
}

func (AdminAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adminAccountArgs)(nil)).Elem()
}

type AdminAccountInput interface {
	pulumi.Input

	ToAdminAccountOutput() AdminAccountOutput
	ToAdminAccountOutputWithContext(ctx context.Context) AdminAccountOutput
}

func (*AdminAccount) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminAccount)(nil))
}

func (i *AdminAccount) ToAdminAccountOutput() AdminAccountOutput {
	return i.ToAdminAccountOutputWithContext(context.Background())
}

func (i *AdminAccount) ToAdminAccountOutputWithContext(ctx context.Context) AdminAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminAccountOutput)
}

func (i *AdminAccount) ToAdminAccountPtrOutput() AdminAccountPtrOutput {
	return i.ToAdminAccountPtrOutputWithContext(context.Background())
}

func (i *AdminAccount) ToAdminAccountPtrOutputWithContext(ctx context.Context) AdminAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminAccountPtrOutput)
}

type AdminAccountPtrInput interface {
	pulumi.Input

	ToAdminAccountPtrOutput() AdminAccountPtrOutput
	ToAdminAccountPtrOutputWithContext(ctx context.Context) AdminAccountPtrOutput
}

type adminAccountPtrType AdminAccountArgs

func (*adminAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminAccount)(nil))
}

func (i *adminAccountPtrType) ToAdminAccountPtrOutput() AdminAccountPtrOutput {
	return i.ToAdminAccountPtrOutputWithContext(context.Background())
}

func (i *adminAccountPtrType) ToAdminAccountPtrOutputWithContext(ctx context.Context) AdminAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminAccountPtrOutput)
}

// AdminAccountArrayInput is an input type that accepts AdminAccountArray and AdminAccountArrayOutput values.
// You can construct a concrete instance of `AdminAccountArrayInput` via:
//
//          AdminAccountArray{ AdminAccountArgs{...} }
type AdminAccountArrayInput interface {
	pulumi.Input

	ToAdminAccountArrayOutput() AdminAccountArrayOutput
	ToAdminAccountArrayOutputWithContext(context.Context) AdminAccountArrayOutput
}

type AdminAccountArray []AdminAccountInput

func (AdminAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminAccount)(nil)).Elem()
}

func (i AdminAccountArray) ToAdminAccountArrayOutput() AdminAccountArrayOutput {
	return i.ToAdminAccountArrayOutputWithContext(context.Background())
}

func (i AdminAccountArray) ToAdminAccountArrayOutputWithContext(ctx context.Context) AdminAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminAccountArrayOutput)
}

// AdminAccountMapInput is an input type that accepts AdminAccountMap and AdminAccountMapOutput values.
// You can construct a concrete instance of `AdminAccountMapInput` via:
//
//          AdminAccountMap{ "key": AdminAccountArgs{...} }
type AdminAccountMapInput interface {
	pulumi.Input

	ToAdminAccountMapOutput() AdminAccountMapOutput
	ToAdminAccountMapOutputWithContext(context.Context) AdminAccountMapOutput
}

type AdminAccountMap map[string]AdminAccountInput

func (AdminAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminAccount)(nil)).Elem()
}

func (i AdminAccountMap) ToAdminAccountMapOutput() AdminAccountMapOutput {
	return i.ToAdminAccountMapOutputWithContext(context.Background())
}

func (i AdminAccountMap) ToAdminAccountMapOutputWithContext(ctx context.Context) AdminAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminAccountMapOutput)
}

type AdminAccountOutput struct{ *pulumi.OutputState }

func (AdminAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminAccount)(nil))
}

func (o AdminAccountOutput) ToAdminAccountOutput() AdminAccountOutput {
	return o
}

func (o AdminAccountOutput) ToAdminAccountOutputWithContext(ctx context.Context) AdminAccountOutput {
	return o
}

func (o AdminAccountOutput) ToAdminAccountPtrOutput() AdminAccountPtrOutput {
	return o.ToAdminAccountPtrOutputWithContext(context.Background())
}

func (o AdminAccountOutput) ToAdminAccountPtrOutputWithContext(ctx context.Context) AdminAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdminAccount) *AdminAccount {
		return &v
	}).(AdminAccountPtrOutput)
}

type AdminAccountPtrOutput struct{ *pulumi.OutputState }

func (AdminAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminAccount)(nil))
}

func (o AdminAccountPtrOutput) ToAdminAccountPtrOutput() AdminAccountPtrOutput {
	return o
}

func (o AdminAccountPtrOutput) ToAdminAccountPtrOutputWithContext(ctx context.Context) AdminAccountPtrOutput {
	return o
}

func (o AdminAccountPtrOutput) Elem() AdminAccountOutput {
	return o.ApplyT(func(v *AdminAccount) AdminAccount {
		if v != nil {
			return *v
		}
		var ret AdminAccount
		return ret
	}).(AdminAccountOutput)
}

type AdminAccountArrayOutput struct{ *pulumi.OutputState }

func (AdminAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdminAccount)(nil))
}

func (o AdminAccountArrayOutput) ToAdminAccountArrayOutput() AdminAccountArrayOutput {
	return o
}

func (o AdminAccountArrayOutput) ToAdminAccountArrayOutputWithContext(ctx context.Context) AdminAccountArrayOutput {
	return o
}

func (o AdminAccountArrayOutput) Index(i pulumi.IntInput) AdminAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdminAccount {
		return vs[0].([]AdminAccount)[vs[1].(int)]
	}).(AdminAccountOutput)
}

type AdminAccountMapOutput struct{ *pulumi.OutputState }

func (AdminAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AdminAccount)(nil))
}

func (o AdminAccountMapOutput) ToAdminAccountMapOutput() AdminAccountMapOutput {
	return o
}

func (o AdminAccountMapOutput) ToAdminAccountMapOutputWithContext(ctx context.Context) AdminAccountMapOutput {
	return o
}

func (o AdminAccountMapOutput) MapIndex(k pulumi.StringInput) AdminAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AdminAccount {
		return vs[0].(map[string]AdminAccount)[vs[1].(string)]
	}).(AdminAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdminAccountInput)(nil)).Elem(), &AdminAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminAccountPtrInput)(nil)).Elem(), &AdminAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminAccountArrayInput)(nil)).Elem(), AdminAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminAccountMapInput)(nil)).Elem(), AdminAccountMap{})
	pulumi.RegisterOutputType(AdminAccountOutput{})
	pulumi.RegisterOutputType(AdminAccountPtrOutput{})
	pulumi.RegisterOutputType(AdminAccountArrayOutput{})
	pulumi.RegisterOutputType(AdminAccountMapOutput{})
}
