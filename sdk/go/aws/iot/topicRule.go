// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type TopicRule struct {
	s *pulumi.ResourceState
}

// NewTopicRule registers a new resource with the given unique name, arguments, and options.
func NewTopicRule(ctx *pulumi.Context,
	name string, args *TopicRuleArgs, opts ...pulumi.ResourceOpt) (*TopicRule, error) {
	if args == nil || args.Enabled == nil {
		return nil, errors.New("missing required argument 'Enabled'")
	}
	if args == nil || args.Sql == nil {
		return nil, errors.New("missing required argument 'Sql'")
	}
	if args == nil || args.SqlVersion == nil {
		return nil, errors.New("missing required argument 'SqlVersion'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cloudwatchAlarm"] = nil
		inputs["cloudwatchMetric"] = nil
		inputs["description"] = nil
		inputs["dynamodb"] = nil
		inputs["elasticsearch"] = nil
		inputs["enabled"] = nil
		inputs["firehose"] = nil
		inputs["kinesis"] = nil
		inputs["lambda"] = nil
		inputs["name"] = nil
		inputs["republish"] = nil
		inputs["s3"] = nil
		inputs["sns"] = nil
		inputs["sql"] = nil
		inputs["sqlVersion"] = nil
		inputs["sqs"] = nil
	} else {
		inputs["cloudwatchAlarm"] = args.CloudwatchAlarm
		inputs["cloudwatchMetric"] = args.CloudwatchMetric
		inputs["description"] = args.Description
		inputs["dynamodb"] = args.Dynamodb
		inputs["elasticsearch"] = args.Elasticsearch
		inputs["enabled"] = args.Enabled
		inputs["firehose"] = args.Firehose
		inputs["kinesis"] = args.Kinesis
		inputs["lambda"] = args.Lambda
		inputs["name"] = args.Name
		inputs["republish"] = args.Republish
		inputs["s3"] = args.S3
		inputs["sns"] = args.Sns
		inputs["sql"] = args.Sql
		inputs["sqlVersion"] = args.SqlVersion
		inputs["sqs"] = args.Sqs
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:iot/topicRule:TopicRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TopicRule{s: s}, nil
}

// GetTopicRule gets an existing TopicRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TopicRuleState, opts ...pulumi.ResourceOpt) (*TopicRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["cloudwatchAlarm"] = state.CloudwatchAlarm
		inputs["cloudwatchMetric"] = state.CloudwatchMetric
		inputs["description"] = state.Description
		inputs["dynamodb"] = state.Dynamodb
		inputs["elasticsearch"] = state.Elasticsearch
		inputs["enabled"] = state.Enabled
		inputs["firehose"] = state.Firehose
		inputs["kinesis"] = state.Kinesis
		inputs["lambda"] = state.Lambda
		inputs["name"] = state.Name
		inputs["republish"] = state.Republish
		inputs["s3"] = state.S3
		inputs["sns"] = state.Sns
		inputs["sql"] = state.Sql
		inputs["sqlVersion"] = state.SqlVersion
		inputs["sqs"] = state.Sqs
	}
	s, err := ctx.ReadResource("aws:iot/topicRule:TopicRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TopicRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *TopicRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *TopicRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ARN of the topic rule
func (r *TopicRule) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

func (r *TopicRule) CloudwatchAlarm() *pulumi.Output {
	return r.s.State["cloudwatchAlarm"]
}

func (r *TopicRule) CloudwatchMetric() *pulumi.Output {
	return r.s.State["cloudwatchMetric"]
}

// The description of the rule.
func (r *TopicRule) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *TopicRule) Dynamodb() *pulumi.Output {
	return r.s.State["dynamodb"]
}

func (r *TopicRule) Elasticsearch() *pulumi.Output {
	return r.s.State["elasticsearch"]
}

// Specifies whether the rule is enabled.
func (r *TopicRule) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

func (r *TopicRule) Firehose() *pulumi.Output {
	return r.s.State["firehose"]
}

func (r *TopicRule) Kinesis() *pulumi.Output {
	return r.s.State["kinesis"]
}

func (r *TopicRule) Lambda() *pulumi.Output {
	return r.s.State["lambda"]
}

// The name of the rule.
func (r *TopicRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *TopicRule) Republish() *pulumi.Output {
	return r.s.State["republish"]
}

func (r *TopicRule) S3() *pulumi.Output {
	return r.s.State["s3"]
}

func (r *TopicRule) Sns() *pulumi.Output {
	return r.s.State["sns"]
}

// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
func (r *TopicRule) Sql() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sql"])
}

// The version of the SQL rules engine to use when evaluating the rule.
func (r *TopicRule) SqlVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sqlVersion"])
}

func (r *TopicRule) Sqs() *pulumi.Output {
	return r.s.State["sqs"]
}

// Input properties used for looking up and filtering TopicRule resources.
type TopicRuleState struct {
	// The ARN of the topic rule
	Arn interface{}
	CloudwatchAlarm interface{}
	CloudwatchMetric interface{}
	// The description of the rule.
	Description interface{}
	Dynamodb interface{}
	Elasticsearch interface{}
	// Specifies whether the rule is enabled.
	Enabled interface{}
	Firehose interface{}
	Kinesis interface{}
	Lambda interface{}
	// The name of the rule.
	Name interface{}
	Republish interface{}
	S3 interface{}
	Sns interface{}
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql interface{}
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion interface{}
	Sqs interface{}
}

// The set of arguments for constructing a TopicRule resource.
type TopicRuleArgs struct {
	CloudwatchAlarm interface{}
	CloudwatchMetric interface{}
	// The description of the rule.
	Description interface{}
	Dynamodb interface{}
	Elasticsearch interface{}
	// Specifies whether the rule is enabled.
	Enabled interface{}
	Firehose interface{}
	Kinesis interface{}
	Lambda interface{}
	// The name of the rule.
	Name interface{}
	Republish interface{}
	S3 interface{}
	Sns interface{}
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql interface{}
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion interface{}
	Sqs interface{}
}
