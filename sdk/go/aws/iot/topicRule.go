// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TopicRule struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput                `pulumi:"arn"`
	CloudwatchAlarm  TopicRuleCloudwatchAlarmPtrOutput  `pulumi:"cloudwatchAlarm"`
	CloudwatchLogs   TopicRuleCloudwatchLogArrayOutput  `pulumi:"cloudwatchLogs"`
	CloudwatchMetric TopicRuleCloudwatchMetricPtrOutput `pulumi:"cloudwatchMetric"`
	Description      pulumi.StringPtrOutput             `pulumi:"description"`
	Dynamodb         TopicRuleDynamodbPtrOutput         `pulumi:"dynamodb"`
	Dynamodbv2s      TopicRuleDynamodbv2ArrayOutput     `pulumi:"dynamodbv2s"`
	Elasticsearch    TopicRuleElasticsearchPtrOutput    `pulumi:"elasticsearch"`
	Enabled          pulumi.BoolOutput                  `pulumi:"enabled"`
	ErrorAction      TopicRuleErrorActionPtrOutput      `pulumi:"errorAction"`
	Firehose         TopicRuleFirehosePtrOutput         `pulumi:"firehose"`
	Https            TopicRuleHttpArrayOutput           `pulumi:"https"`
	IotAnalytics     TopicRuleIotAnalyticArrayOutput    `pulumi:"iotAnalytics"`
	IotEvents        TopicRuleIotEventArrayOutput       `pulumi:"iotEvents"`
	Kafkas           TopicRuleKafkaArrayOutput          `pulumi:"kafkas"`
	Kinesis          TopicRuleKinesisPtrOutput          `pulumi:"kinesis"`
	Lambda           TopicRuleLambdaPtrOutput           `pulumi:"lambda"`
	Name             pulumi.StringOutput                `pulumi:"name"`
	Republish        TopicRuleRepublishPtrOutput        `pulumi:"republish"`
	S3               TopicRuleS3PtrOutput               `pulumi:"s3"`
	Sns              TopicRuleSnsPtrOutput              `pulumi:"sns"`
	Sql              pulumi.StringOutput                `pulumi:"sql"`
	SqlVersion       pulumi.StringOutput                `pulumi:"sqlVersion"`
	Sqs              TopicRuleSqsPtrOutput              `pulumi:"sqs"`
	StepFunctions    TopicRuleStepFunctionArrayOutput   `pulumi:"stepFunctions"`
	Tags             pulumi.StringMapOutput             `pulumi:"tags"`
	TagsAll          pulumi.StringMapOutput             `pulumi:"tagsAll"`
	Timestreams      TopicRuleTimestreamArrayOutput     `pulumi:"timestreams"`
}

// NewTopicRule registers a new resource with the given unique name, arguments, and options.
func NewTopicRule(ctx *pulumi.Context,
	name string, args *TopicRuleArgs, opts ...pulumi.ResourceOption) (*TopicRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Sql == nil {
		return nil, errors.New("invalid value for required argument 'Sql'")
	}
	if args.SqlVersion == nil {
		return nil, errors.New("invalid value for required argument 'SqlVersion'")
	}
	var resource TopicRule
	err := ctx.RegisterResource("aws:iot/topicRule:TopicRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicRule gets an existing TopicRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicRuleState, opts ...pulumi.ResourceOption) (*TopicRule, error) {
	var resource TopicRule
	err := ctx.ReadResource("aws:iot/topicRule:TopicRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicRule resources.
type topicRuleState struct {
	Arn              *string                    `pulumi:"arn"`
	CloudwatchAlarm  *TopicRuleCloudwatchAlarm  `pulumi:"cloudwatchAlarm"`
	CloudwatchLogs   []TopicRuleCloudwatchLog   `pulumi:"cloudwatchLogs"`
	CloudwatchMetric *TopicRuleCloudwatchMetric `pulumi:"cloudwatchMetric"`
	Description      *string                    `pulumi:"description"`
	Dynamodb         *TopicRuleDynamodb         `pulumi:"dynamodb"`
	Dynamodbv2s      []TopicRuleDynamodbv2      `pulumi:"dynamodbv2s"`
	Elasticsearch    *TopicRuleElasticsearch    `pulumi:"elasticsearch"`
	Enabled          *bool                      `pulumi:"enabled"`
	ErrorAction      *TopicRuleErrorAction      `pulumi:"errorAction"`
	Firehose         *TopicRuleFirehose         `pulumi:"firehose"`
	Https            []TopicRuleHttp            `pulumi:"https"`
	IotAnalytics     []TopicRuleIotAnalytic     `pulumi:"iotAnalytics"`
	IotEvents        []TopicRuleIotEvent        `pulumi:"iotEvents"`
	Kafkas           []TopicRuleKafka           `pulumi:"kafkas"`
	Kinesis          *TopicRuleKinesis          `pulumi:"kinesis"`
	Lambda           *TopicRuleLambda           `pulumi:"lambda"`
	Name             *string                    `pulumi:"name"`
	Republish        *TopicRuleRepublish        `pulumi:"republish"`
	S3               *TopicRuleS3               `pulumi:"s3"`
	Sns              *TopicRuleSns              `pulumi:"sns"`
	Sql              *string                    `pulumi:"sql"`
	SqlVersion       *string                    `pulumi:"sqlVersion"`
	Sqs              *TopicRuleSqs              `pulumi:"sqs"`
	StepFunctions    []TopicRuleStepFunction    `pulumi:"stepFunctions"`
	Tags             map[string]string          `pulumi:"tags"`
	TagsAll          map[string]string          `pulumi:"tagsAll"`
	Timestreams      []TopicRuleTimestream      `pulumi:"timestreams"`
}

type TopicRuleState struct {
	Arn              pulumi.StringPtrInput
	CloudwatchAlarm  TopicRuleCloudwatchAlarmPtrInput
	CloudwatchLogs   TopicRuleCloudwatchLogArrayInput
	CloudwatchMetric TopicRuleCloudwatchMetricPtrInput
	Description      pulumi.StringPtrInput
	Dynamodb         TopicRuleDynamodbPtrInput
	Dynamodbv2s      TopicRuleDynamodbv2ArrayInput
	Elasticsearch    TopicRuleElasticsearchPtrInput
	Enabled          pulumi.BoolPtrInput
	ErrorAction      TopicRuleErrorActionPtrInput
	Firehose         TopicRuleFirehosePtrInput
	Https            TopicRuleHttpArrayInput
	IotAnalytics     TopicRuleIotAnalyticArrayInput
	IotEvents        TopicRuleIotEventArrayInput
	Kafkas           TopicRuleKafkaArrayInput
	Kinesis          TopicRuleKinesisPtrInput
	Lambda           TopicRuleLambdaPtrInput
	Name             pulumi.StringPtrInput
	Republish        TopicRuleRepublishPtrInput
	S3               TopicRuleS3PtrInput
	Sns              TopicRuleSnsPtrInput
	Sql              pulumi.StringPtrInput
	SqlVersion       pulumi.StringPtrInput
	Sqs              TopicRuleSqsPtrInput
	StepFunctions    TopicRuleStepFunctionArrayInput
	Tags             pulumi.StringMapInput
	TagsAll          pulumi.StringMapInput
	Timestreams      TopicRuleTimestreamArrayInput
}

func (TopicRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicRuleState)(nil)).Elem()
}

type topicRuleArgs struct {
	CloudwatchAlarm  *TopicRuleCloudwatchAlarm  `pulumi:"cloudwatchAlarm"`
	CloudwatchLogs   []TopicRuleCloudwatchLog   `pulumi:"cloudwatchLogs"`
	CloudwatchMetric *TopicRuleCloudwatchMetric `pulumi:"cloudwatchMetric"`
	Description      *string                    `pulumi:"description"`
	Dynamodb         *TopicRuleDynamodb         `pulumi:"dynamodb"`
	Dynamodbv2s      []TopicRuleDynamodbv2      `pulumi:"dynamodbv2s"`
	Elasticsearch    *TopicRuleElasticsearch    `pulumi:"elasticsearch"`
	Enabled          bool                       `pulumi:"enabled"`
	ErrorAction      *TopicRuleErrorAction      `pulumi:"errorAction"`
	Firehose         *TopicRuleFirehose         `pulumi:"firehose"`
	Https            []TopicRuleHttp            `pulumi:"https"`
	IotAnalytics     []TopicRuleIotAnalytic     `pulumi:"iotAnalytics"`
	IotEvents        []TopicRuleIotEvent        `pulumi:"iotEvents"`
	Kafkas           []TopicRuleKafka           `pulumi:"kafkas"`
	Kinesis          *TopicRuleKinesis          `pulumi:"kinesis"`
	Lambda           *TopicRuleLambda           `pulumi:"lambda"`
	Name             *string                    `pulumi:"name"`
	Republish        *TopicRuleRepublish        `pulumi:"republish"`
	S3               *TopicRuleS3               `pulumi:"s3"`
	Sns              *TopicRuleSns              `pulumi:"sns"`
	Sql              string                     `pulumi:"sql"`
	SqlVersion       string                     `pulumi:"sqlVersion"`
	Sqs              *TopicRuleSqs              `pulumi:"sqs"`
	StepFunctions    []TopicRuleStepFunction    `pulumi:"stepFunctions"`
	Tags             map[string]string          `pulumi:"tags"`
	Timestreams      []TopicRuleTimestream      `pulumi:"timestreams"`
}

// The set of arguments for constructing a TopicRule resource.
type TopicRuleArgs struct {
	CloudwatchAlarm  TopicRuleCloudwatchAlarmPtrInput
	CloudwatchLogs   TopicRuleCloudwatchLogArrayInput
	CloudwatchMetric TopicRuleCloudwatchMetricPtrInput
	Description      pulumi.StringPtrInput
	Dynamodb         TopicRuleDynamodbPtrInput
	Dynamodbv2s      TopicRuleDynamodbv2ArrayInput
	Elasticsearch    TopicRuleElasticsearchPtrInput
	Enabled          pulumi.BoolInput
	ErrorAction      TopicRuleErrorActionPtrInput
	Firehose         TopicRuleFirehosePtrInput
	Https            TopicRuleHttpArrayInput
	IotAnalytics     TopicRuleIotAnalyticArrayInput
	IotEvents        TopicRuleIotEventArrayInput
	Kafkas           TopicRuleKafkaArrayInput
	Kinesis          TopicRuleKinesisPtrInput
	Lambda           TopicRuleLambdaPtrInput
	Name             pulumi.StringPtrInput
	Republish        TopicRuleRepublishPtrInput
	S3               TopicRuleS3PtrInput
	Sns              TopicRuleSnsPtrInput
	Sql              pulumi.StringInput
	SqlVersion       pulumi.StringInput
	Sqs              TopicRuleSqsPtrInput
	StepFunctions    TopicRuleStepFunctionArrayInput
	Tags             pulumi.StringMapInput
	Timestreams      TopicRuleTimestreamArrayInput
}

func (TopicRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicRuleArgs)(nil)).Elem()
}

type TopicRuleInput interface {
	pulumi.Input

	ToTopicRuleOutput() TopicRuleOutput
	ToTopicRuleOutputWithContext(ctx context.Context) TopicRuleOutput
}

func (*TopicRule) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRule)(nil)).Elem()
}

func (i *TopicRule) ToTopicRuleOutput() TopicRuleOutput {
	return i.ToTopicRuleOutputWithContext(context.Background())
}

func (i *TopicRule) ToTopicRuleOutputWithContext(ctx context.Context) TopicRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleOutput)
}

// TopicRuleArrayInput is an input type that accepts TopicRuleArray and TopicRuleArrayOutput values.
// You can construct a concrete instance of `TopicRuleArrayInput` via:
//
//	TopicRuleArray{ TopicRuleArgs{...} }
type TopicRuleArrayInput interface {
	pulumi.Input

	ToTopicRuleArrayOutput() TopicRuleArrayOutput
	ToTopicRuleArrayOutputWithContext(context.Context) TopicRuleArrayOutput
}

type TopicRuleArray []TopicRuleInput

func (TopicRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicRule)(nil)).Elem()
}

func (i TopicRuleArray) ToTopicRuleArrayOutput() TopicRuleArrayOutput {
	return i.ToTopicRuleArrayOutputWithContext(context.Background())
}

func (i TopicRuleArray) ToTopicRuleArrayOutputWithContext(ctx context.Context) TopicRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleArrayOutput)
}

// TopicRuleMapInput is an input type that accepts TopicRuleMap and TopicRuleMapOutput values.
// You can construct a concrete instance of `TopicRuleMapInput` via:
//
//	TopicRuleMap{ "key": TopicRuleArgs{...} }
type TopicRuleMapInput interface {
	pulumi.Input

	ToTopicRuleMapOutput() TopicRuleMapOutput
	ToTopicRuleMapOutputWithContext(context.Context) TopicRuleMapOutput
}

type TopicRuleMap map[string]TopicRuleInput

func (TopicRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicRule)(nil)).Elem()
}

func (i TopicRuleMap) ToTopicRuleMapOutput() TopicRuleMapOutput {
	return i.ToTopicRuleMapOutputWithContext(context.Background())
}

func (i TopicRuleMap) ToTopicRuleMapOutputWithContext(ctx context.Context) TopicRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleMapOutput)
}

type TopicRuleOutput struct{ *pulumi.OutputState }

func (TopicRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRule)(nil)).Elem()
}

func (o TopicRuleOutput) ToTopicRuleOutput() TopicRuleOutput {
	return o
}

func (o TopicRuleOutput) ToTopicRuleOutputWithContext(ctx context.Context) TopicRuleOutput {
	return o
}

func (o TopicRuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TopicRuleOutput) CloudwatchAlarm() TopicRuleCloudwatchAlarmPtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleCloudwatchAlarmPtrOutput { return v.CloudwatchAlarm }).(TopicRuleCloudwatchAlarmPtrOutput)
}

func (o TopicRuleOutput) CloudwatchLogs() TopicRuleCloudwatchLogArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleCloudwatchLogArrayOutput { return v.CloudwatchLogs }).(TopicRuleCloudwatchLogArrayOutput)
}

func (o TopicRuleOutput) CloudwatchMetric() TopicRuleCloudwatchMetricPtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleCloudwatchMetricPtrOutput { return v.CloudwatchMetric }).(TopicRuleCloudwatchMetricPtrOutput)
}

func (o TopicRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TopicRuleOutput) Dynamodb() TopicRuleDynamodbPtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleDynamodbPtrOutput { return v.Dynamodb }).(TopicRuleDynamodbPtrOutput)
}

func (o TopicRuleOutput) Dynamodbv2s() TopicRuleDynamodbv2ArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleDynamodbv2ArrayOutput { return v.Dynamodbv2s }).(TopicRuleDynamodbv2ArrayOutput)
}

func (o TopicRuleOutput) Elasticsearch() TopicRuleElasticsearchPtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleElasticsearchPtrOutput { return v.Elasticsearch }).(TopicRuleElasticsearchPtrOutput)
}

func (o TopicRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o TopicRuleOutput) ErrorAction() TopicRuleErrorActionPtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleErrorActionPtrOutput { return v.ErrorAction }).(TopicRuleErrorActionPtrOutput)
}

func (o TopicRuleOutput) Firehose() TopicRuleFirehosePtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleFirehosePtrOutput { return v.Firehose }).(TopicRuleFirehosePtrOutput)
}

func (o TopicRuleOutput) Https() TopicRuleHttpArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleHttpArrayOutput { return v.Https }).(TopicRuleHttpArrayOutput)
}

func (o TopicRuleOutput) IotAnalytics() TopicRuleIotAnalyticArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleIotAnalyticArrayOutput { return v.IotAnalytics }).(TopicRuleIotAnalyticArrayOutput)
}

func (o TopicRuleOutput) IotEvents() TopicRuleIotEventArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleIotEventArrayOutput { return v.IotEvents }).(TopicRuleIotEventArrayOutput)
}

func (o TopicRuleOutput) Kafkas() TopicRuleKafkaArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleKafkaArrayOutput { return v.Kafkas }).(TopicRuleKafkaArrayOutput)
}

func (o TopicRuleOutput) Kinesis() TopicRuleKinesisPtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleKinesisPtrOutput { return v.Kinesis }).(TopicRuleKinesisPtrOutput)
}

func (o TopicRuleOutput) Lambda() TopicRuleLambdaPtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleLambdaPtrOutput { return v.Lambda }).(TopicRuleLambdaPtrOutput)
}

func (o TopicRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TopicRuleOutput) Republish() TopicRuleRepublishPtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleRepublishPtrOutput { return v.Republish }).(TopicRuleRepublishPtrOutput)
}

func (o TopicRuleOutput) S3() TopicRuleS3PtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleS3PtrOutput { return v.S3 }).(TopicRuleS3PtrOutput)
}

func (o TopicRuleOutput) Sns() TopicRuleSnsPtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleSnsPtrOutput { return v.Sns }).(TopicRuleSnsPtrOutput)
}

func (o TopicRuleOutput) Sql() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringOutput { return v.Sql }).(pulumi.StringOutput)
}

func (o TopicRuleOutput) SqlVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringOutput { return v.SqlVersion }).(pulumi.StringOutput)
}

func (o TopicRuleOutput) Sqs() TopicRuleSqsPtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleSqsPtrOutput { return v.Sqs }).(TopicRuleSqsPtrOutput)
}

func (o TopicRuleOutput) StepFunctions() TopicRuleStepFunctionArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleStepFunctionArrayOutput { return v.StepFunctions }).(TopicRuleStepFunctionArrayOutput)
}

func (o TopicRuleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o TopicRuleOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o TopicRuleOutput) Timestreams() TopicRuleTimestreamArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleTimestreamArrayOutput { return v.Timestreams }).(TopicRuleTimestreamArrayOutput)
}

type TopicRuleArrayOutput struct{ *pulumi.OutputState }

func (TopicRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicRule)(nil)).Elem()
}

func (o TopicRuleArrayOutput) ToTopicRuleArrayOutput() TopicRuleArrayOutput {
	return o
}

func (o TopicRuleArrayOutput) ToTopicRuleArrayOutputWithContext(ctx context.Context) TopicRuleArrayOutput {
	return o
}

func (o TopicRuleArrayOutput) Index(i pulumi.IntInput) TopicRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TopicRule {
		return vs[0].([]*TopicRule)[vs[1].(int)]
	}).(TopicRuleOutput)
}

type TopicRuleMapOutput struct{ *pulumi.OutputState }

func (TopicRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicRule)(nil)).Elem()
}

func (o TopicRuleMapOutput) ToTopicRuleMapOutput() TopicRuleMapOutput {
	return o
}

func (o TopicRuleMapOutput) ToTopicRuleMapOutputWithContext(ctx context.Context) TopicRuleMapOutput {
	return o
}

func (o TopicRuleMapOutput) MapIndex(k pulumi.StringInput) TopicRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TopicRule {
		return vs[0].(map[string]*TopicRule)[vs[1].(string)]
	}).(TopicRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRuleInput)(nil)).Elem(), &TopicRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRuleArrayInput)(nil)).Elem(), TopicRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRuleMapInput)(nil)).Elem(), TopicRuleMap{})
	pulumi.RegisterOutputType(TopicRuleOutput{})
	pulumi.RegisterOutputType(TopicRuleArrayOutput{})
	pulumi.RegisterOutputType(TopicRuleMapOutput{})
}
