// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iot"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/sns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// mytopic, err := sns.NewTopic(ctx, "mytopic", nil)
// if err != nil {
// return err
// }
// myerrortopic, err := sns.NewTopic(ctx, "myerrortopic", nil)
// if err != nil {
// return err
// }
// assumeRole, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
// Statements: []iam.GetPolicyDocumentStatement{
// {
// Effect: pulumi.StringRef("Allow"),
// Principals: []iam.GetPolicyDocumentStatementPrincipal{
// {
// Type: "Service",
// Identifiers: []string{
// "iot.amazonaws.com",
// },
// },
// },
// Actions: []string{
// "sts:AssumeRole",
// },
// },
// },
// }, nil);
// if err != nil {
// return err
// }
// role, err := iam.NewRole(ctx, "role", &iam.RoleArgs{
// AssumeRolePolicy: *pulumi.String(assumeRole.Json),
// })
// if err != nil {
// return err
// }
// _, err = iot.NewTopicRule(ctx, "rule", &iot.TopicRuleArgs{
// Description: pulumi.String("Example rule"),
// Enabled: pulumi.Bool(true),
// Sql: pulumi.String("SELECT * FROM 'topic/test'"),
// SqlVersion: pulumi.String("2016-03-23"),
// Sns: iot.TopicRuleSnsArray{
// &iot.TopicRuleSnsArgs{
// MessageFormat: pulumi.String("RAW"),
// RoleArn: role.Arn,
// TargetArn: mytopic.Arn,
// },
// },
// ErrorAction: &iot.TopicRuleErrorActionArgs{
// Sns: &iot.TopicRuleErrorActionSnsArgs{
// MessageFormat: pulumi.String("RAW"),
// RoleArn: role.Arn,
// TargetArn: myerrortopic.Arn,
// },
// },
// })
// if err != nil {
// return err
// }
// iamPolicyForLambdaPolicyDocument := mytopic.Arn.ApplyT(func(arn string) (iam.GetPolicyDocumentResult, error) {
// return iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{
// Statements: []iam.GetPolicyDocumentStatement{
// {
// Effect: "Allow",
// Actions: []string{
// "sns:Publish",
// },
// Resources: interface{}{
// arn,
// },
// },
// },
// }, nil), nil
// }).(iam.GetPolicyDocumentResultOutput)
// _, err = iam.NewRolePolicy(ctx, "iamPolicyForLambdaRolePolicy", &iam.RolePolicyArgs{
// Role: role.ID(),
// Policy: iamPolicyForLambdaPolicyDocument.ApplyT(func(iamPolicyForLambdaPolicyDocument iam.GetPolicyDocumentResult) (*string, error) {
// return &iamPolicyForLambdaPolicyDocument.Json, nil
// }).(pulumi.StringPtrOutput),
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_iot_topic_rule.rule
//
//	id = "<name>" } Using `pulumi import`, import IoT Topic Rules using the `name`. For exampleconsole % pulumi import aws_iot_topic_rule.rule <name>
type TopicRule struct {
	pulumi.CustomResourceState

	// The ARN of the topic rule
	Arn               pulumi.StringOutput                  `pulumi:"arn"`
	CloudwatchAlarms  TopicRuleCloudwatchAlarmArrayOutput  `pulumi:"cloudwatchAlarms"`
	CloudwatchLogs    TopicRuleCloudwatchLogArrayOutput    `pulumi:"cloudwatchLogs"`
	CloudwatchMetrics TopicRuleCloudwatchMetricArrayOutput `pulumi:"cloudwatchMetrics"`
	// The description of the rule.
	Description   pulumi.StringPtrOutput            `pulumi:"description"`
	Dynamodbs     TopicRuleDynamodbArrayOutput      `pulumi:"dynamodbs"`
	Dynamodbv2s   TopicRuleDynamodbv2ArrayOutput    `pulumi:"dynamodbv2s"`
	Elasticsearch TopicRuleElasticsearchArrayOutput `pulumi:"elasticsearch"`
	// Specifies whether the rule is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
	ErrorAction  TopicRuleErrorActionPtrOutput   `pulumi:"errorAction"`
	Firehoses    TopicRuleFirehoseArrayOutput    `pulumi:"firehoses"`
	Https        TopicRuleHttpArrayOutput        `pulumi:"https"`
	IotAnalytics TopicRuleIotAnalyticArrayOutput `pulumi:"iotAnalytics"`
	IotEvents    TopicRuleIotEventArrayOutput    `pulumi:"iotEvents"`
	Kafkas       TopicRuleKafkaArrayOutput       `pulumi:"kafkas"`
	Kineses      TopicRuleKinesisArrayOutput     `pulumi:"kineses"`
	Lambdas      TopicRuleLambdaArrayOutput      `pulumi:"lambdas"`
	// The name of the rule.
	Name        pulumi.StringOutput           `pulumi:"name"`
	Republishes TopicRuleRepublishArrayOutput `pulumi:"republishes"`
	S3          TopicRuleS3ArrayOutput        `pulumi:"s3"`
	Sns         TopicRuleSnsArrayOutput       `pulumi:"sns"`
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql pulumi.StringOutput `pulumi:"sql"`
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion    pulumi.StringOutput              `pulumi:"sqlVersion"`
	Sqs           TopicRuleSqsArrayOutput          `pulumi:"sqs"`
	StepFunctions TopicRuleStepFunctionArrayOutput `pulumi:"stepFunctions"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll     pulumi.StringMapOutput         `pulumi:"tagsAll"`
	Timestreams TopicRuleTimestreamArrayOutput `pulumi:"timestreams"`
}

// NewTopicRule registers a new resource with the given unique name, arguments, and options.
func NewTopicRule(ctx *pulumi.Context,
	name string, args *TopicRuleArgs, opts ...pulumi.ResourceOption) (*TopicRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Sql == nil {
		return nil, errors.New("invalid value for required argument 'Sql'")
	}
	if args.SqlVersion == nil {
		return nil, errors.New("invalid value for required argument 'SqlVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TopicRule
	err := ctx.RegisterResource("aws:iot/topicRule:TopicRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicRule gets an existing TopicRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicRuleState, opts ...pulumi.ResourceOption) (*TopicRule, error) {
	var resource TopicRule
	err := ctx.ReadResource("aws:iot/topicRule:TopicRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicRule resources.
type topicRuleState struct {
	// The ARN of the topic rule
	Arn               *string                     `pulumi:"arn"`
	CloudwatchAlarms  []TopicRuleCloudwatchAlarm  `pulumi:"cloudwatchAlarms"`
	CloudwatchLogs    []TopicRuleCloudwatchLog    `pulumi:"cloudwatchLogs"`
	CloudwatchMetrics []TopicRuleCloudwatchMetric `pulumi:"cloudwatchMetrics"`
	// The description of the rule.
	Description   *string                  `pulumi:"description"`
	Dynamodbs     []TopicRuleDynamodb      `pulumi:"dynamodbs"`
	Dynamodbv2s   []TopicRuleDynamodbv2    `pulumi:"dynamodbv2s"`
	Elasticsearch []TopicRuleElasticsearch `pulumi:"elasticsearch"`
	// Specifies whether the rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
	ErrorAction  *TopicRuleErrorAction  `pulumi:"errorAction"`
	Firehoses    []TopicRuleFirehose    `pulumi:"firehoses"`
	Https        []TopicRuleHttp        `pulumi:"https"`
	IotAnalytics []TopicRuleIotAnalytic `pulumi:"iotAnalytics"`
	IotEvents    []TopicRuleIotEvent    `pulumi:"iotEvents"`
	Kafkas       []TopicRuleKafka       `pulumi:"kafkas"`
	Kineses      []TopicRuleKinesis     `pulumi:"kineses"`
	Lambdas      []TopicRuleLambda      `pulumi:"lambdas"`
	// The name of the rule.
	Name        *string              `pulumi:"name"`
	Republishes []TopicRuleRepublish `pulumi:"republishes"`
	S3          []TopicRuleS3        `pulumi:"s3"`
	Sns         []TopicRuleSns       `pulumi:"sns"`
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql *string `pulumi:"sql"`
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion    *string                 `pulumi:"sqlVersion"`
	Sqs           []TopicRuleSqs          `pulumi:"sqs"`
	StepFunctions []TopicRuleStepFunction `pulumi:"stepFunctions"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll     map[string]string     `pulumi:"tagsAll"`
	Timestreams []TopicRuleTimestream `pulumi:"timestreams"`
}

type TopicRuleState struct {
	// The ARN of the topic rule
	Arn               pulumi.StringPtrInput
	CloudwatchAlarms  TopicRuleCloudwatchAlarmArrayInput
	CloudwatchLogs    TopicRuleCloudwatchLogArrayInput
	CloudwatchMetrics TopicRuleCloudwatchMetricArrayInput
	// The description of the rule.
	Description   pulumi.StringPtrInput
	Dynamodbs     TopicRuleDynamodbArrayInput
	Dynamodbv2s   TopicRuleDynamodbv2ArrayInput
	Elasticsearch TopicRuleElasticsearchArrayInput
	// Specifies whether the rule is enabled.
	Enabled pulumi.BoolPtrInput
	// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
	ErrorAction  TopicRuleErrorActionPtrInput
	Firehoses    TopicRuleFirehoseArrayInput
	Https        TopicRuleHttpArrayInput
	IotAnalytics TopicRuleIotAnalyticArrayInput
	IotEvents    TopicRuleIotEventArrayInput
	Kafkas       TopicRuleKafkaArrayInput
	Kineses      TopicRuleKinesisArrayInput
	Lambdas      TopicRuleLambdaArrayInput
	// The name of the rule.
	Name        pulumi.StringPtrInput
	Republishes TopicRuleRepublishArrayInput
	S3          TopicRuleS3ArrayInput
	Sns         TopicRuleSnsArrayInput
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql pulumi.StringPtrInput
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion    pulumi.StringPtrInput
	Sqs           TopicRuleSqsArrayInput
	StepFunctions TopicRuleStepFunctionArrayInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll     pulumi.StringMapInput
	Timestreams TopicRuleTimestreamArrayInput
}

func (TopicRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicRuleState)(nil)).Elem()
}

type topicRuleArgs struct {
	CloudwatchAlarms  []TopicRuleCloudwatchAlarm  `pulumi:"cloudwatchAlarms"`
	CloudwatchLogs    []TopicRuleCloudwatchLog    `pulumi:"cloudwatchLogs"`
	CloudwatchMetrics []TopicRuleCloudwatchMetric `pulumi:"cloudwatchMetrics"`
	// The description of the rule.
	Description   *string                  `pulumi:"description"`
	Dynamodbs     []TopicRuleDynamodb      `pulumi:"dynamodbs"`
	Dynamodbv2s   []TopicRuleDynamodbv2    `pulumi:"dynamodbv2s"`
	Elasticsearch []TopicRuleElasticsearch `pulumi:"elasticsearch"`
	// Specifies whether the rule is enabled.
	Enabled bool `pulumi:"enabled"`
	// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
	ErrorAction  *TopicRuleErrorAction  `pulumi:"errorAction"`
	Firehoses    []TopicRuleFirehose    `pulumi:"firehoses"`
	Https        []TopicRuleHttp        `pulumi:"https"`
	IotAnalytics []TopicRuleIotAnalytic `pulumi:"iotAnalytics"`
	IotEvents    []TopicRuleIotEvent    `pulumi:"iotEvents"`
	Kafkas       []TopicRuleKafka       `pulumi:"kafkas"`
	Kineses      []TopicRuleKinesis     `pulumi:"kineses"`
	Lambdas      []TopicRuleLambda      `pulumi:"lambdas"`
	// The name of the rule.
	Name        *string              `pulumi:"name"`
	Republishes []TopicRuleRepublish `pulumi:"republishes"`
	S3          []TopicRuleS3        `pulumi:"s3"`
	Sns         []TopicRuleSns       `pulumi:"sns"`
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql string `pulumi:"sql"`
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion    string                  `pulumi:"sqlVersion"`
	Sqs           []TopicRuleSqs          `pulumi:"sqs"`
	StepFunctions []TopicRuleStepFunction `pulumi:"stepFunctions"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags        map[string]string     `pulumi:"tags"`
	Timestreams []TopicRuleTimestream `pulumi:"timestreams"`
}

// The set of arguments for constructing a TopicRule resource.
type TopicRuleArgs struct {
	CloudwatchAlarms  TopicRuleCloudwatchAlarmArrayInput
	CloudwatchLogs    TopicRuleCloudwatchLogArrayInput
	CloudwatchMetrics TopicRuleCloudwatchMetricArrayInput
	// The description of the rule.
	Description   pulumi.StringPtrInput
	Dynamodbs     TopicRuleDynamodbArrayInput
	Dynamodbv2s   TopicRuleDynamodbv2ArrayInput
	Elasticsearch TopicRuleElasticsearchArrayInput
	// Specifies whether the rule is enabled.
	Enabled pulumi.BoolInput
	// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
	ErrorAction  TopicRuleErrorActionPtrInput
	Firehoses    TopicRuleFirehoseArrayInput
	Https        TopicRuleHttpArrayInput
	IotAnalytics TopicRuleIotAnalyticArrayInput
	IotEvents    TopicRuleIotEventArrayInput
	Kafkas       TopicRuleKafkaArrayInput
	Kineses      TopicRuleKinesisArrayInput
	Lambdas      TopicRuleLambdaArrayInput
	// The name of the rule.
	Name        pulumi.StringPtrInput
	Republishes TopicRuleRepublishArrayInput
	S3          TopicRuleS3ArrayInput
	Sns         TopicRuleSnsArrayInput
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql pulumi.StringInput
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion    pulumi.StringInput
	Sqs           TopicRuleSqsArrayInput
	StepFunctions TopicRuleStepFunctionArrayInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags        pulumi.StringMapInput
	Timestreams TopicRuleTimestreamArrayInput
}

func (TopicRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicRuleArgs)(nil)).Elem()
}

type TopicRuleInput interface {
	pulumi.Input

	ToTopicRuleOutput() TopicRuleOutput
	ToTopicRuleOutputWithContext(ctx context.Context) TopicRuleOutput
}

func (*TopicRule) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRule)(nil)).Elem()
}

func (i *TopicRule) ToTopicRuleOutput() TopicRuleOutput {
	return i.ToTopicRuleOutputWithContext(context.Background())
}

func (i *TopicRule) ToTopicRuleOutputWithContext(ctx context.Context) TopicRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleOutput)
}

// TopicRuleArrayInput is an input type that accepts TopicRuleArray and TopicRuleArrayOutput values.
// You can construct a concrete instance of `TopicRuleArrayInput` via:
//
//	TopicRuleArray{ TopicRuleArgs{...} }
type TopicRuleArrayInput interface {
	pulumi.Input

	ToTopicRuleArrayOutput() TopicRuleArrayOutput
	ToTopicRuleArrayOutputWithContext(context.Context) TopicRuleArrayOutput
}

type TopicRuleArray []TopicRuleInput

func (TopicRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicRule)(nil)).Elem()
}

func (i TopicRuleArray) ToTopicRuleArrayOutput() TopicRuleArrayOutput {
	return i.ToTopicRuleArrayOutputWithContext(context.Background())
}

func (i TopicRuleArray) ToTopicRuleArrayOutputWithContext(ctx context.Context) TopicRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleArrayOutput)
}

// TopicRuleMapInput is an input type that accepts TopicRuleMap and TopicRuleMapOutput values.
// You can construct a concrete instance of `TopicRuleMapInput` via:
//
//	TopicRuleMap{ "key": TopicRuleArgs{...} }
type TopicRuleMapInput interface {
	pulumi.Input

	ToTopicRuleMapOutput() TopicRuleMapOutput
	ToTopicRuleMapOutputWithContext(context.Context) TopicRuleMapOutput
}

type TopicRuleMap map[string]TopicRuleInput

func (TopicRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicRule)(nil)).Elem()
}

func (i TopicRuleMap) ToTopicRuleMapOutput() TopicRuleMapOutput {
	return i.ToTopicRuleMapOutputWithContext(context.Background())
}

func (i TopicRuleMap) ToTopicRuleMapOutputWithContext(ctx context.Context) TopicRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleMapOutput)
}

type TopicRuleOutput struct{ *pulumi.OutputState }

func (TopicRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRule)(nil)).Elem()
}

func (o TopicRuleOutput) ToTopicRuleOutput() TopicRuleOutput {
	return o
}

func (o TopicRuleOutput) ToTopicRuleOutputWithContext(ctx context.Context) TopicRuleOutput {
	return o
}

// The ARN of the topic rule
func (o TopicRuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TopicRuleOutput) CloudwatchAlarms() TopicRuleCloudwatchAlarmArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleCloudwatchAlarmArrayOutput { return v.CloudwatchAlarms }).(TopicRuleCloudwatchAlarmArrayOutput)
}

func (o TopicRuleOutput) CloudwatchLogs() TopicRuleCloudwatchLogArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleCloudwatchLogArrayOutput { return v.CloudwatchLogs }).(TopicRuleCloudwatchLogArrayOutput)
}

func (o TopicRuleOutput) CloudwatchMetrics() TopicRuleCloudwatchMetricArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleCloudwatchMetricArrayOutput { return v.CloudwatchMetrics }).(TopicRuleCloudwatchMetricArrayOutput)
}

// The description of the rule.
func (o TopicRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TopicRuleOutput) Dynamodbs() TopicRuleDynamodbArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleDynamodbArrayOutput { return v.Dynamodbs }).(TopicRuleDynamodbArrayOutput)
}

func (o TopicRuleOutput) Dynamodbv2s() TopicRuleDynamodbv2ArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleDynamodbv2ArrayOutput { return v.Dynamodbv2s }).(TopicRuleDynamodbv2ArrayOutput)
}

func (o TopicRuleOutput) Elasticsearch() TopicRuleElasticsearchArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleElasticsearchArrayOutput { return v.Elasticsearch }).(TopicRuleElasticsearchArrayOutput)
}

// Specifies whether the rule is enabled.
func (o TopicRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
func (o TopicRuleOutput) ErrorAction() TopicRuleErrorActionPtrOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleErrorActionPtrOutput { return v.ErrorAction }).(TopicRuleErrorActionPtrOutput)
}

func (o TopicRuleOutput) Firehoses() TopicRuleFirehoseArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleFirehoseArrayOutput { return v.Firehoses }).(TopicRuleFirehoseArrayOutput)
}

func (o TopicRuleOutput) Https() TopicRuleHttpArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleHttpArrayOutput { return v.Https }).(TopicRuleHttpArrayOutput)
}

func (o TopicRuleOutput) IotAnalytics() TopicRuleIotAnalyticArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleIotAnalyticArrayOutput { return v.IotAnalytics }).(TopicRuleIotAnalyticArrayOutput)
}

func (o TopicRuleOutput) IotEvents() TopicRuleIotEventArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleIotEventArrayOutput { return v.IotEvents }).(TopicRuleIotEventArrayOutput)
}

func (o TopicRuleOutput) Kafkas() TopicRuleKafkaArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleKafkaArrayOutput { return v.Kafkas }).(TopicRuleKafkaArrayOutput)
}

func (o TopicRuleOutput) Kineses() TopicRuleKinesisArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleKinesisArrayOutput { return v.Kineses }).(TopicRuleKinesisArrayOutput)
}

func (o TopicRuleOutput) Lambdas() TopicRuleLambdaArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleLambdaArrayOutput { return v.Lambdas }).(TopicRuleLambdaArrayOutput)
}

// The name of the rule.
func (o TopicRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TopicRuleOutput) Republishes() TopicRuleRepublishArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleRepublishArrayOutput { return v.Republishes }).(TopicRuleRepublishArrayOutput)
}

func (o TopicRuleOutput) S3() TopicRuleS3ArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleS3ArrayOutput { return v.S3 }).(TopicRuleS3ArrayOutput)
}

func (o TopicRuleOutput) Sns() TopicRuleSnsArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleSnsArrayOutput { return v.Sns }).(TopicRuleSnsArrayOutput)
}

// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
func (o TopicRuleOutput) Sql() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringOutput { return v.Sql }).(pulumi.StringOutput)
}

// The version of the SQL rules engine to use when evaluating the rule.
func (o TopicRuleOutput) SqlVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringOutput { return v.SqlVersion }).(pulumi.StringOutput)
}

func (o TopicRuleOutput) Sqs() TopicRuleSqsArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleSqsArrayOutput { return v.Sqs }).(TopicRuleSqsArrayOutput)
}

func (o TopicRuleOutput) StepFunctions() TopicRuleStepFunctionArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleStepFunctionArrayOutput { return v.StepFunctions }).(TopicRuleStepFunctionArrayOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TopicRuleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TopicRuleOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TopicRule) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o TopicRuleOutput) Timestreams() TopicRuleTimestreamArrayOutput {
	return o.ApplyT(func(v *TopicRule) TopicRuleTimestreamArrayOutput { return v.Timestreams }).(TopicRuleTimestreamArrayOutput)
}

type TopicRuleArrayOutput struct{ *pulumi.OutputState }

func (TopicRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicRule)(nil)).Elem()
}

func (o TopicRuleArrayOutput) ToTopicRuleArrayOutput() TopicRuleArrayOutput {
	return o
}

func (o TopicRuleArrayOutput) ToTopicRuleArrayOutputWithContext(ctx context.Context) TopicRuleArrayOutput {
	return o
}

func (o TopicRuleArrayOutput) Index(i pulumi.IntInput) TopicRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TopicRule {
		return vs[0].([]*TopicRule)[vs[1].(int)]
	}).(TopicRuleOutput)
}

type TopicRuleMapOutput struct{ *pulumi.OutputState }

func (TopicRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicRule)(nil)).Elem()
}

func (o TopicRuleMapOutput) ToTopicRuleMapOutput() TopicRuleMapOutput {
	return o
}

func (o TopicRuleMapOutput) ToTopicRuleMapOutputWithContext(ctx context.Context) TopicRuleMapOutput {
	return o
}

func (o TopicRuleMapOutput) MapIndex(k pulumi.StringInput) TopicRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TopicRule {
		return vs[0].(map[string]*TopicRule)[vs[1].(string)]
	}).(TopicRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRuleInput)(nil)).Elem(), &TopicRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRuleArrayInput)(nil)).Elem(), TopicRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRuleMapInput)(nil)).Elem(), TopicRuleMap{})
	pulumi.RegisterOutputType(TopicRuleOutput{})
	pulumi.RegisterOutputType(TopicRuleArrayOutput{})
	pulumi.RegisterOutputType(TopicRuleMapOutput{})
}
