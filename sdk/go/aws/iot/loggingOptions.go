// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage [default logging options](https://docs.aws.amazon.com/iot/latest/developerguide/configure-logging.html#configure-logging-console).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iot.NewLoggingOptions(ctx, "example", &iot.LoggingOptionsArgs{
//				DefaultLogLevel: pulumi.String("WARN"),
//				RoleArn:         pulumi.Any(aws_iam_role.Example.Arn),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LoggingOptions struct {
	pulumi.CustomResourceState

	// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
	DefaultLogLevel pulumi.StringOutput `pulumi:"defaultLogLevel"`
	// If `true` all logs are disabled. The default is `false`.
	DisableAllLogs pulumi.BoolPtrOutput `pulumi:"disableAllLogs"`
	// The ARN of the role that allows IoT to write to Cloudwatch logs.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
}

// NewLoggingOptions registers a new resource with the given unique name, arguments, and options.
func NewLoggingOptions(ctx *pulumi.Context,
	name string, args *LoggingOptionsArgs, opts ...pulumi.ResourceOption) (*LoggingOptions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultLogLevel == nil {
		return nil, errors.New("invalid value for required argument 'DefaultLogLevel'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource LoggingOptions
	err := ctx.RegisterResource("aws:iot/loggingOptions:LoggingOptions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingOptions gets an existing LoggingOptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingOptions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingOptionsState, opts ...pulumi.ResourceOption) (*LoggingOptions, error) {
	var resource LoggingOptions
	err := ctx.ReadResource("aws:iot/loggingOptions:LoggingOptions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingOptions resources.
type loggingOptionsState struct {
	// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
	DefaultLogLevel *string `pulumi:"defaultLogLevel"`
	// If `true` all logs are disabled. The default is `false`.
	DisableAllLogs *bool `pulumi:"disableAllLogs"`
	// The ARN of the role that allows IoT to write to Cloudwatch logs.
	RoleArn *string `pulumi:"roleArn"`
}

type LoggingOptionsState struct {
	// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
	DefaultLogLevel pulumi.StringPtrInput
	// If `true` all logs are disabled. The default is `false`.
	DisableAllLogs pulumi.BoolPtrInput
	// The ARN of the role that allows IoT to write to Cloudwatch logs.
	RoleArn pulumi.StringPtrInput
}

func (LoggingOptionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingOptionsState)(nil)).Elem()
}

type loggingOptionsArgs struct {
	// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
	DefaultLogLevel string `pulumi:"defaultLogLevel"`
	// If `true` all logs are disabled. The default is `false`.
	DisableAllLogs *bool `pulumi:"disableAllLogs"`
	// The ARN of the role that allows IoT to write to Cloudwatch logs.
	RoleArn string `pulumi:"roleArn"`
}

// The set of arguments for constructing a LoggingOptions resource.
type LoggingOptionsArgs struct {
	// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
	DefaultLogLevel pulumi.StringInput
	// If `true` all logs are disabled. The default is `false`.
	DisableAllLogs pulumi.BoolPtrInput
	// The ARN of the role that allows IoT to write to Cloudwatch logs.
	RoleArn pulumi.StringInput
}

func (LoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingOptionsArgs)(nil)).Elem()
}

type LoggingOptionsInput interface {
	pulumi.Input

	ToLoggingOptionsOutput() LoggingOptionsOutput
	ToLoggingOptionsOutputWithContext(ctx context.Context) LoggingOptionsOutput
}

func (*LoggingOptions) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingOptions)(nil)).Elem()
}

func (i *LoggingOptions) ToLoggingOptionsOutput() LoggingOptionsOutput {
	return i.ToLoggingOptionsOutputWithContext(context.Background())
}

func (i *LoggingOptions) ToLoggingOptionsOutputWithContext(ctx context.Context) LoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingOptionsOutput)
}

// LoggingOptionsArrayInput is an input type that accepts LoggingOptionsArray and LoggingOptionsArrayOutput values.
// You can construct a concrete instance of `LoggingOptionsArrayInput` via:
//
//	LoggingOptionsArray{ LoggingOptionsArgs{...} }
type LoggingOptionsArrayInput interface {
	pulumi.Input

	ToLoggingOptionsArrayOutput() LoggingOptionsArrayOutput
	ToLoggingOptionsArrayOutputWithContext(context.Context) LoggingOptionsArrayOutput
}

type LoggingOptionsArray []LoggingOptionsInput

func (LoggingOptionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingOptions)(nil)).Elem()
}

func (i LoggingOptionsArray) ToLoggingOptionsArrayOutput() LoggingOptionsArrayOutput {
	return i.ToLoggingOptionsArrayOutputWithContext(context.Background())
}

func (i LoggingOptionsArray) ToLoggingOptionsArrayOutputWithContext(ctx context.Context) LoggingOptionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingOptionsArrayOutput)
}

// LoggingOptionsMapInput is an input type that accepts LoggingOptionsMap and LoggingOptionsMapOutput values.
// You can construct a concrete instance of `LoggingOptionsMapInput` via:
//
//	LoggingOptionsMap{ "key": LoggingOptionsArgs{...} }
type LoggingOptionsMapInput interface {
	pulumi.Input

	ToLoggingOptionsMapOutput() LoggingOptionsMapOutput
	ToLoggingOptionsMapOutputWithContext(context.Context) LoggingOptionsMapOutput
}

type LoggingOptionsMap map[string]LoggingOptionsInput

func (LoggingOptionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingOptions)(nil)).Elem()
}

func (i LoggingOptionsMap) ToLoggingOptionsMapOutput() LoggingOptionsMapOutput {
	return i.ToLoggingOptionsMapOutputWithContext(context.Background())
}

func (i LoggingOptionsMap) ToLoggingOptionsMapOutputWithContext(ctx context.Context) LoggingOptionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingOptionsMapOutput)
}

type LoggingOptionsOutput struct{ *pulumi.OutputState }

func (LoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingOptions)(nil)).Elem()
}

func (o LoggingOptionsOutput) ToLoggingOptionsOutput() LoggingOptionsOutput {
	return o
}

func (o LoggingOptionsOutput) ToLoggingOptionsOutputWithContext(ctx context.Context) LoggingOptionsOutput {
	return o
}

// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
func (o LoggingOptionsOutput) DefaultLogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingOptions) pulumi.StringOutput { return v.DefaultLogLevel }).(pulumi.StringOutput)
}

// If `true` all logs are disabled. The default is `false`.
func (o LoggingOptionsOutput) DisableAllLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoggingOptions) pulumi.BoolPtrOutput { return v.DisableAllLogs }).(pulumi.BoolPtrOutput)
}

// The ARN of the role that allows IoT to write to Cloudwatch logs.
func (o LoggingOptionsOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingOptions) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

type LoggingOptionsArrayOutput struct{ *pulumi.OutputState }

func (LoggingOptionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingOptions)(nil)).Elem()
}

func (o LoggingOptionsArrayOutput) ToLoggingOptionsArrayOutput() LoggingOptionsArrayOutput {
	return o
}

func (o LoggingOptionsArrayOutput) ToLoggingOptionsArrayOutputWithContext(ctx context.Context) LoggingOptionsArrayOutput {
	return o
}

func (o LoggingOptionsArrayOutput) Index(i pulumi.IntInput) LoggingOptionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoggingOptions {
		return vs[0].([]*LoggingOptions)[vs[1].(int)]
	}).(LoggingOptionsOutput)
}

type LoggingOptionsMapOutput struct{ *pulumi.OutputState }

func (LoggingOptionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingOptions)(nil)).Elem()
}

func (o LoggingOptionsMapOutput) ToLoggingOptionsMapOutput() LoggingOptionsMapOutput {
	return o
}

func (o LoggingOptionsMapOutput) ToLoggingOptionsMapOutputWithContext(ctx context.Context) LoggingOptionsMapOutput {
	return o
}

func (o LoggingOptionsMapOutput) MapIndex(k pulumi.StringInput) LoggingOptionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoggingOptions {
		return vs[0].(map[string]*LoggingOptions)[vs[1].(string)]
	}).(LoggingOptionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingOptionsInput)(nil)).Elem(), &LoggingOptions{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingOptionsArrayInput)(nil)).Elem(), LoggingOptionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingOptionsMapInput)(nil)).Elem(), LoggingOptionsMap{})
	pulumi.RegisterOutputType(LoggingOptionsOutput{})
	pulumi.RegisterOutputType(LoggingOptionsArrayOutput{})
	pulumi.RegisterOutputType(LoggingOptionsMapOutput{})
}
