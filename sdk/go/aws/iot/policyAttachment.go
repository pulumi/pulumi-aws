// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an IoT policy attachment.
type PolicyAttachment struct {
	s *pulumi.ResourceState
}

// NewPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewPolicyAttachment(ctx *pulumi.Context,
	name string, args *PolicyAttachmentArgs, opts ...pulumi.ResourceOpt) (*PolicyAttachment, error) {
	if args == nil || args.Policy == nil {
		return nil, errors.New("missing required argument 'Policy'")
	}
	if args == nil || args.Target == nil {
		return nil, errors.New("missing required argument 'Target'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["policy"] = nil
		inputs["target"] = nil
	} else {
		inputs["policy"] = args.Policy
		inputs["target"] = args.Target
	}
	s, err := ctx.RegisterResource("aws:iot/policyAttachment:PolicyAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PolicyAttachment{s: s}, nil
}

// GetPolicyAttachment gets an existing PolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PolicyAttachmentState, opts ...pulumi.ResourceOpt) (*PolicyAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["policy"] = state.Policy
		inputs["target"] = state.Target
	}
	s, err := ctx.ReadResource("aws:iot/policyAttachment:PolicyAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PolicyAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PolicyAttachment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PolicyAttachment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The name of the policy to attach.
func (r *PolicyAttachment) Policy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policy"])
}

// The identity to which the policy is attached.
func (r *PolicyAttachment) Target() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["target"])
}

// Input properties used for looking up and filtering PolicyAttachment resources.
type PolicyAttachmentState struct {
	// The name of the policy to attach.
	Policy interface{}
	// The identity to which the policy is attached.
	Target interface{}
}

// The set of arguments for constructing a PolicyAttachment resource.
type PolicyAttachmentArgs struct {
	// The name of the policy to attach.
	Policy interface{}
	// The identity to which the policy is attached.
	Target interface{}
}
