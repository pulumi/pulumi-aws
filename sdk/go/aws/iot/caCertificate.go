// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages an AWS IoT CA Certificate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iot"
//	"github.com/pulumi/pulumi-tls/sdk/v4/go/tls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			caPrivateKey, err := tls.NewPrivateKey(ctx, "caPrivateKey", &tls.PrivateKeyArgs{
//				Algorithm: pulumi.String("RSA"),
//			})
//			if err != nil {
//				return err
//			}
//			caSelfSignedCert, err := tls.NewSelfSignedCert(ctx, "caSelfSignedCert", &tls.SelfSignedCertArgs{
//				PrivateKeyPem: caPrivateKey.PrivateKeyPem,
//				Subject: &tls.SelfSignedCertSubjectArgs{
//					CommonName:   pulumi.String("example.com"),
//					Organization: pulumi.String("ACME Examples, Inc"),
//				},
//				ValidityPeriodHours: pulumi.Int(12),
//				AllowedUses: pulumi.StringArray{
//					pulumi.String("key_encipherment"),
//					pulumi.String("digital_signature"),
//					pulumi.String("server_auth"),
//				},
//				IsCaCertificate: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			verificationPrivateKey, err := tls.NewPrivateKey(ctx, "verificationPrivateKey", &tls.PrivateKeyArgs{
//				Algorithm: pulumi.String("RSA"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistrationCode, err := iot.GetRegistrationCode(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			verificationCertRequest, err := tls.NewCertRequest(ctx, "verificationCertRequest", &tls.CertRequestArgs{
//				PrivateKeyPem: verificationPrivateKey.PrivateKeyPem,
//				Subject: &tls.CertRequestSubjectArgs{
//					CommonName: *pulumi.String(exampleRegistrationCode.RegistrationCode),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			verificationLocallySignedCert, err := tls.NewLocallySignedCert(ctx, "verificationLocallySignedCert", &tls.LocallySignedCertArgs{
//				CertRequestPem:      verificationCertRequest.CertRequestPem,
//				CaPrivateKeyPem:     caPrivateKey.PrivateKeyPem,
//				CaCertPem:           caSelfSignedCert.CertPem,
//				ValidityPeriodHours: pulumi.Int(12),
//				AllowedUses: pulumi.StringArray{
//					pulumi.String("key_encipherment"),
//					pulumi.String("digital_signature"),
//					pulumi.String("server_auth"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iot.NewCaCertificate(ctx, "exampleCaCertificate", &iot.CaCertificateArgs{
//				Active:                     pulumi.Bool(true),
//				CaCertificatePem:           caSelfSignedCert.CertPem,
//				VerificationCertificatePem: verificationLocallySignedCert.CertPem,
//				AllowAutoRegistration:      pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CaCertificate struct {
	pulumi.CustomResourceState

	// Boolean flag to indicate if the certificate should be active for device authentication.
	Active pulumi.BoolOutput `pulumi:"active"`
	// Boolean flag to indicate if the certificate should be active for device regisration.
	AllowAutoRegistration pulumi.BoolOutput `pulumi:"allowAutoRegistration"`
	// The ARN of the created CA certificate.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// PEM encoded CA certificate.
	CaCertificatePem pulumi.StringOutput `pulumi:"caCertificatePem"`
	// The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
	CertificateMode pulumi.StringPtrOutput `pulumi:"certificateMode"`
	// The customer version of the CA certificate.
	CustomerVersion pulumi.IntOutput `pulumi:"customerVersion"`
	// The generation ID of the CA certificate.
	GenerationId pulumi.StringOutput `pulumi:"generationId"`
	// Information about the registration configuration. See below.
	RegistrationConfig CaCertificateRegistrationConfigPtrOutput `pulumi:"registrationConfig"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// When the CA certificate is valid.
	Validities CaCertificateValidityArrayOutput `pulumi:"validities"`
	// PEM encoded verification certificate containing the common name of a registration code. Review
	// [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificateMode` is `DEFAULT`.
	VerificationCertificatePem pulumi.StringPtrOutput `pulumi:"verificationCertificatePem"`
}

// NewCaCertificate registers a new resource with the given unique name, arguments, and options.
func NewCaCertificate(ctx *pulumi.Context,
	name string, args *CaCertificateArgs, opts ...pulumi.ResourceOption) (*CaCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.AllowAutoRegistration == nil {
		return nil, errors.New("invalid value for required argument 'AllowAutoRegistration'")
	}
	if args.CaCertificatePem == nil {
		return nil, errors.New("invalid value for required argument 'CaCertificatePem'")
	}
	if args.CaCertificatePem != nil {
		args.CaCertificatePem = pulumi.ToSecret(args.CaCertificatePem).(pulumi.StringInput)
	}
	if args.VerificationCertificatePem != nil {
		args.VerificationCertificatePem = pulumi.ToSecret(args.VerificationCertificatePem).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"caCertificatePem",
		"tagsAll",
		"verificationCertificatePem",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CaCertificate
	err := ctx.RegisterResource("aws:iot/caCertificate:CaCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCaCertificate gets an existing CaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCaCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CaCertificateState, opts ...pulumi.ResourceOption) (*CaCertificate, error) {
	var resource CaCertificate
	err := ctx.ReadResource("aws:iot/caCertificate:CaCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CaCertificate resources.
type caCertificateState struct {
	// Boolean flag to indicate if the certificate should be active for device authentication.
	Active *bool `pulumi:"active"`
	// Boolean flag to indicate if the certificate should be active for device regisration.
	AllowAutoRegistration *bool `pulumi:"allowAutoRegistration"`
	// The ARN of the created CA certificate.
	Arn *string `pulumi:"arn"`
	// PEM encoded CA certificate.
	CaCertificatePem *string `pulumi:"caCertificatePem"`
	// The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
	CertificateMode *string `pulumi:"certificateMode"`
	// The customer version of the CA certificate.
	CustomerVersion *int `pulumi:"customerVersion"`
	// The generation ID of the CA certificate.
	GenerationId *string `pulumi:"generationId"`
	// Information about the registration configuration. See below.
	RegistrationConfig *CaCertificateRegistrationConfig `pulumi:"registrationConfig"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// When the CA certificate is valid.
	Validities []CaCertificateValidity `pulumi:"validities"`
	// PEM encoded verification certificate containing the common name of a registration code. Review
	// [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificateMode` is `DEFAULT`.
	VerificationCertificatePem *string `pulumi:"verificationCertificatePem"`
}

type CaCertificateState struct {
	// Boolean flag to indicate if the certificate should be active for device authentication.
	Active pulumi.BoolPtrInput
	// Boolean flag to indicate if the certificate should be active for device regisration.
	AllowAutoRegistration pulumi.BoolPtrInput
	// The ARN of the created CA certificate.
	Arn pulumi.StringPtrInput
	// PEM encoded CA certificate.
	CaCertificatePem pulumi.StringPtrInput
	// The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
	CertificateMode pulumi.StringPtrInput
	// The customer version of the CA certificate.
	CustomerVersion pulumi.IntPtrInput
	// The generation ID of the CA certificate.
	GenerationId pulumi.StringPtrInput
	// Information about the registration configuration. See below.
	RegistrationConfig CaCertificateRegistrationConfigPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// When the CA certificate is valid.
	Validities CaCertificateValidityArrayInput
	// PEM encoded verification certificate containing the common name of a registration code. Review
	// [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificateMode` is `DEFAULT`.
	VerificationCertificatePem pulumi.StringPtrInput
}

func (CaCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*caCertificateState)(nil)).Elem()
}

type caCertificateArgs struct {
	// Boolean flag to indicate if the certificate should be active for device authentication.
	Active bool `pulumi:"active"`
	// Boolean flag to indicate if the certificate should be active for device regisration.
	AllowAutoRegistration bool `pulumi:"allowAutoRegistration"`
	// PEM encoded CA certificate.
	CaCertificatePem string `pulumi:"caCertificatePem"`
	// The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
	CertificateMode *string `pulumi:"certificateMode"`
	// Information about the registration configuration. See below.
	RegistrationConfig *CaCertificateRegistrationConfig `pulumi:"registrationConfig"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// PEM encoded verification certificate containing the common name of a registration code. Review
	// [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificateMode` is `DEFAULT`.
	VerificationCertificatePem *string `pulumi:"verificationCertificatePem"`
}

// The set of arguments for constructing a CaCertificate resource.
type CaCertificateArgs struct {
	// Boolean flag to indicate if the certificate should be active for device authentication.
	Active pulumi.BoolInput
	// Boolean flag to indicate if the certificate should be active for device regisration.
	AllowAutoRegistration pulumi.BoolInput
	// PEM encoded CA certificate.
	CaCertificatePem pulumi.StringInput
	// The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
	CertificateMode pulumi.StringPtrInput
	// Information about the registration configuration. See below.
	RegistrationConfig CaCertificateRegistrationConfigPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// PEM encoded verification certificate containing the common name of a registration code. Review
	// [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificateMode` is `DEFAULT`.
	VerificationCertificatePem pulumi.StringPtrInput
}

func (CaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*caCertificateArgs)(nil)).Elem()
}

type CaCertificateInput interface {
	pulumi.Input

	ToCaCertificateOutput() CaCertificateOutput
	ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput
}

func (*CaCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**CaCertificate)(nil)).Elem()
}

func (i *CaCertificate) ToCaCertificateOutput() CaCertificateOutput {
	return i.ToCaCertificateOutputWithContext(context.Background())
}

func (i *CaCertificate) ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaCertificateOutput)
}

// CaCertificateArrayInput is an input type that accepts CaCertificateArray and CaCertificateArrayOutput values.
// You can construct a concrete instance of `CaCertificateArrayInput` via:
//
//	CaCertificateArray{ CaCertificateArgs{...} }
type CaCertificateArrayInput interface {
	pulumi.Input

	ToCaCertificateArrayOutput() CaCertificateArrayOutput
	ToCaCertificateArrayOutputWithContext(context.Context) CaCertificateArrayOutput
}

type CaCertificateArray []CaCertificateInput

func (CaCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CaCertificate)(nil)).Elem()
}

func (i CaCertificateArray) ToCaCertificateArrayOutput() CaCertificateArrayOutput {
	return i.ToCaCertificateArrayOutputWithContext(context.Background())
}

func (i CaCertificateArray) ToCaCertificateArrayOutputWithContext(ctx context.Context) CaCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaCertificateArrayOutput)
}

// CaCertificateMapInput is an input type that accepts CaCertificateMap and CaCertificateMapOutput values.
// You can construct a concrete instance of `CaCertificateMapInput` via:
//
//	CaCertificateMap{ "key": CaCertificateArgs{...} }
type CaCertificateMapInput interface {
	pulumi.Input

	ToCaCertificateMapOutput() CaCertificateMapOutput
	ToCaCertificateMapOutputWithContext(context.Context) CaCertificateMapOutput
}

type CaCertificateMap map[string]CaCertificateInput

func (CaCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CaCertificate)(nil)).Elem()
}

func (i CaCertificateMap) ToCaCertificateMapOutput() CaCertificateMapOutput {
	return i.ToCaCertificateMapOutputWithContext(context.Background())
}

func (i CaCertificateMap) ToCaCertificateMapOutputWithContext(ctx context.Context) CaCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaCertificateMapOutput)
}

type CaCertificateOutput struct{ *pulumi.OutputState }

func (CaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaCertificate)(nil)).Elem()
}

func (o CaCertificateOutput) ToCaCertificateOutput() CaCertificateOutput {
	return o
}

func (o CaCertificateOutput) ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput {
	return o
}

// Boolean flag to indicate if the certificate should be active for device authentication.
func (o CaCertificateOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// Boolean flag to indicate if the certificate should be active for device regisration.
func (o CaCertificateOutput) AllowAutoRegistration() pulumi.BoolOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.BoolOutput { return v.AllowAutoRegistration }).(pulumi.BoolOutput)
}

// The ARN of the created CA certificate.
func (o CaCertificateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// PEM encoded CA certificate.
func (o CaCertificateOutput) CaCertificatePem() pulumi.StringOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringOutput { return v.CaCertificatePem }).(pulumi.StringOutput)
}

// The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
func (o CaCertificateOutput) CertificateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringPtrOutput { return v.CertificateMode }).(pulumi.StringPtrOutput)
}

// The customer version of the CA certificate.
func (o CaCertificateOutput) CustomerVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.IntOutput { return v.CustomerVersion }).(pulumi.IntOutput)
}

// The generation ID of the CA certificate.
func (o CaCertificateOutput) GenerationId() pulumi.StringOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringOutput { return v.GenerationId }).(pulumi.StringOutput)
}

// Information about the registration configuration. See below.
func (o CaCertificateOutput) RegistrationConfig() CaCertificateRegistrationConfigPtrOutput {
	return o.ApplyT(func(v *CaCertificate) CaCertificateRegistrationConfigPtrOutput { return v.RegistrationConfig }).(CaCertificateRegistrationConfigPtrOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CaCertificateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o CaCertificateOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// When the CA certificate is valid.
func (o CaCertificateOutput) Validities() CaCertificateValidityArrayOutput {
	return o.ApplyT(func(v *CaCertificate) CaCertificateValidityArrayOutput { return v.Validities }).(CaCertificateValidityArrayOutput)
}

// PEM encoded verification certificate containing the common name of a registration code. Review
// [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificateMode` is `DEFAULT`.
func (o CaCertificateOutput) VerificationCertificatePem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringPtrOutput { return v.VerificationCertificatePem }).(pulumi.StringPtrOutput)
}

type CaCertificateArrayOutput struct{ *pulumi.OutputState }

func (CaCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CaCertificate)(nil)).Elem()
}

func (o CaCertificateArrayOutput) ToCaCertificateArrayOutput() CaCertificateArrayOutput {
	return o
}

func (o CaCertificateArrayOutput) ToCaCertificateArrayOutputWithContext(ctx context.Context) CaCertificateArrayOutput {
	return o
}

func (o CaCertificateArrayOutput) Index(i pulumi.IntInput) CaCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CaCertificate {
		return vs[0].([]*CaCertificate)[vs[1].(int)]
	}).(CaCertificateOutput)
}

type CaCertificateMapOutput struct{ *pulumi.OutputState }

func (CaCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CaCertificate)(nil)).Elem()
}

func (o CaCertificateMapOutput) ToCaCertificateMapOutput() CaCertificateMapOutput {
	return o
}

func (o CaCertificateMapOutput) ToCaCertificateMapOutputWithContext(ctx context.Context) CaCertificateMapOutput {
	return o
}

func (o CaCertificateMapOutput) MapIndex(k pulumi.StringInput) CaCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CaCertificate {
		return vs[0].(map[string]*CaCertificate)[vs[1].(string)]
	}).(CaCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CaCertificateInput)(nil)).Elem(), &CaCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaCertificateArrayInput)(nil)).Elem(), CaCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaCertificateMapInput)(nil)).Elem(), CaCertificateMap{})
	pulumi.RegisterOutputType(CaCertificateOutput{})
	pulumi.RegisterOutputType(CaCertificateArrayOutput{})
	pulumi.RegisterOutputType(CaCertificateMapOutput{})
}
