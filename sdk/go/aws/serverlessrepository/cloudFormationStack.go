// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package serverlessrepository

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudFormationStack struct {
	pulumi.CustomResourceState

	ApplicationId   pulumi.StringOutput      `pulumi:"applicationId"`
	Capabilities    pulumi.StringArrayOutput `pulumi:"capabilities"`
	Name            pulumi.StringOutput      `pulumi:"name"`
	Outputs         pulumi.StringMapOutput   `pulumi:"outputs"`
	Parameters      pulumi.StringMapOutput   `pulumi:"parameters"`
	SemanticVersion pulumi.StringOutput      `pulumi:"semanticVersion"`
	Tags            pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput   `pulumi:"tagsAll"`
}

// NewCloudFormationStack registers a new resource with the given unique name, arguments, and options.
func NewCloudFormationStack(ctx *pulumi.Context,
	name string, args *CloudFormationStackArgs, opts ...pulumi.ResourceOption) (*CloudFormationStack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.Capabilities == nil {
		return nil, errors.New("invalid value for required argument 'Capabilities'")
	}
	var resource CloudFormationStack
	err := ctx.RegisterResource("aws:serverlessrepository/cloudFormationStack:CloudFormationStack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudFormationStack gets an existing CloudFormationStack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudFormationStack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudFormationStackState, opts ...pulumi.ResourceOption) (*CloudFormationStack, error) {
	var resource CloudFormationStack
	err := ctx.ReadResource("aws:serverlessrepository/cloudFormationStack:CloudFormationStack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudFormationStack resources.
type cloudFormationStackState struct {
	ApplicationId   *string           `pulumi:"applicationId"`
	Capabilities    []string          `pulumi:"capabilities"`
	Name            *string           `pulumi:"name"`
	Outputs         map[string]string `pulumi:"outputs"`
	Parameters      map[string]string `pulumi:"parameters"`
	SemanticVersion *string           `pulumi:"semanticVersion"`
	Tags            map[string]string `pulumi:"tags"`
	TagsAll         map[string]string `pulumi:"tagsAll"`
}

type CloudFormationStackState struct {
	ApplicationId   pulumi.StringPtrInput
	Capabilities    pulumi.StringArrayInput
	Name            pulumi.StringPtrInput
	Outputs         pulumi.StringMapInput
	Parameters      pulumi.StringMapInput
	SemanticVersion pulumi.StringPtrInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
}

func (CloudFormationStackState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudFormationStackState)(nil)).Elem()
}

type cloudFormationStackArgs struct {
	ApplicationId   string            `pulumi:"applicationId"`
	Capabilities    []string          `pulumi:"capabilities"`
	Name            *string           `pulumi:"name"`
	Parameters      map[string]string `pulumi:"parameters"`
	SemanticVersion *string           `pulumi:"semanticVersion"`
	Tags            map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a CloudFormationStack resource.
type CloudFormationStackArgs struct {
	ApplicationId   pulumi.StringInput
	Capabilities    pulumi.StringArrayInput
	Name            pulumi.StringPtrInput
	Parameters      pulumi.StringMapInput
	SemanticVersion pulumi.StringPtrInput
	Tags            pulumi.StringMapInput
}

func (CloudFormationStackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudFormationStackArgs)(nil)).Elem()
}

type CloudFormationStackInput interface {
	pulumi.Input

	ToCloudFormationStackOutput() CloudFormationStackOutput
	ToCloudFormationStackOutputWithContext(ctx context.Context) CloudFormationStackOutput
}

func (*CloudFormationStack) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudFormationStack)(nil)).Elem()
}

func (i *CloudFormationStack) ToCloudFormationStackOutput() CloudFormationStackOutput {
	return i.ToCloudFormationStackOutputWithContext(context.Background())
}

func (i *CloudFormationStack) ToCloudFormationStackOutputWithContext(ctx context.Context) CloudFormationStackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudFormationStackOutput)
}

// CloudFormationStackArrayInput is an input type that accepts CloudFormationStackArray and CloudFormationStackArrayOutput values.
// You can construct a concrete instance of `CloudFormationStackArrayInput` via:
//
//	CloudFormationStackArray{ CloudFormationStackArgs{...} }
type CloudFormationStackArrayInput interface {
	pulumi.Input

	ToCloudFormationStackArrayOutput() CloudFormationStackArrayOutput
	ToCloudFormationStackArrayOutputWithContext(context.Context) CloudFormationStackArrayOutput
}

type CloudFormationStackArray []CloudFormationStackInput

func (CloudFormationStackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudFormationStack)(nil)).Elem()
}

func (i CloudFormationStackArray) ToCloudFormationStackArrayOutput() CloudFormationStackArrayOutput {
	return i.ToCloudFormationStackArrayOutputWithContext(context.Background())
}

func (i CloudFormationStackArray) ToCloudFormationStackArrayOutputWithContext(ctx context.Context) CloudFormationStackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudFormationStackArrayOutput)
}

// CloudFormationStackMapInput is an input type that accepts CloudFormationStackMap and CloudFormationStackMapOutput values.
// You can construct a concrete instance of `CloudFormationStackMapInput` via:
//
//	CloudFormationStackMap{ "key": CloudFormationStackArgs{...} }
type CloudFormationStackMapInput interface {
	pulumi.Input

	ToCloudFormationStackMapOutput() CloudFormationStackMapOutput
	ToCloudFormationStackMapOutputWithContext(context.Context) CloudFormationStackMapOutput
}

type CloudFormationStackMap map[string]CloudFormationStackInput

func (CloudFormationStackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudFormationStack)(nil)).Elem()
}

func (i CloudFormationStackMap) ToCloudFormationStackMapOutput() CloudFormationStackMapOutput {
	return i.ToCloudFormationStackMapOutputWithContext(context.Background())
}

func (i CloudFormationStackMap) ToCloudFormationStackMapOutputWithContext(ctx context.Context) CloudFormationStackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudFormationStackMapOutput)
}

type CloudFormationStackOutput struct{ *pulumi.OutputState }

func (CloudFormationStackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudFormationStack)(nil)).Elem()
}

func (o CloudFormationStackOutput) ToCloudFormationStackOutput() CloudFormationStackOutput {
	return o
}

func (o CloudFormationStackOutput) ToCloudFormationStackOutputWithContext(ctx context.Context) CloudFormationStackOutput {
	return o
}

func (o CloudFormationStackOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationStack) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

func (o CloudFormationStackOutput) Capabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudFormationStack) pulumi.StringArrayOutput { return v.Capabilities }).(pulumi.StringArrayOutput)
}

func (o CloudFormationStackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationStack) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CloudFormationStackOutput) Outputs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudFormationStack) pulumi.StringMapOutput { return v.Outputs }).(pulumi.StringMapOutput)
}

func (o CloudFormationStackOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudFormationStack) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

func (o CloudFormationStackOutput) SemanticVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudFormationStack) pulumi.StringOutput { return v.SemanticVersion }).(pulumi.StringOutput)
}

func (o CloudFormationStackOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudFormationStack) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o CloudFormationStackOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudFormationStack) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type CloudFormationStackArrayOutput struct{ *pulumi.OutputState }

func (CloudFormationStackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudFormationStack)(nil)).Elem()
}

func (o CloudFormationStackArrayOutput) ToCloudFormationStackArrayOutput() CloudFormationStackArrayOutput {
	return o
}

func (o CloudFormationStackArrayOutput) ToCloudFormationStackArrayOutputWithContext(ctx context.Context) CloudFormationStackArrayOutput {
	return o
}

func (o CloudFormationStackArrayOutput) Index(i pulumi.IntInput) CloudFormationStackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudFormationStack {
		return vs[0].([]*CloudFormationStack)[vs[1].(int)]
	}).(CloudFormationStackOutput)
}

type CloudFormationStackMapOutput struct{ *pulumi.OutputState }

func (CloudFormationStackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudFormationStack)(nil)).Elem()
}

func (o CloudFormationStackMapOutput) ToCloudFormationStackMapOutput() CloudFormationStackMapOutput {
	return o
}

func (o CloudFormationStackMapOutput) ToCloudFormationStackMapOutputWithContext(ctx context.Context) CloudFormationStackMapOutput {
	return o
}

func (o CloudFormationStackMapOutput) MapIndex(k pulumi.StringInput) CloudFormationStackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudFormationStack {
		return vs[0].(map[string]*CloudFormationStack)[vs[1].(string)]
	}).(CloudFormationStackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudFormationStackInput)(nil)).Elem(), &CloudFormationStack{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudFormationStackArrayInput)(nil)).Elem(), CloudFormationStackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudFormationStackMapInput)(nil)).Elem(), CloudFormationStackMap{})
	pulumi.RegisterOutputType(CloudFormationStackOutput{})
	pulumi.RegisterOutputType(CloudFormationStackArrayOutput{})
	pulumi.RegisterOutputType(CloudFormationStackMapOutput{})
}
