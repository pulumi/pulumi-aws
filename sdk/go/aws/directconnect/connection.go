// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Connection struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput    `pulumi:"arn"`
	AwsDevice            pulumi.StringOutput    `pulumi:"awsDevice"`
	Bandwidth            pulumi.StringOutput    `pulumi:"bandwidth"`
	EncryptionMode       pulumi.StringOutput    `pulumi:"encryptionMode"`
	HasLogicalRedundancy pulumi.StringOutput    `pulumi:"hasLogicalRedundancy"`
	JumboFrameCapable    pulumi.BoolOutput      `pulumi:"jumboFrameCapable"`
	Location             pulumi.StringOutput    `pulumi:"location"`
	MacsecCapable        pulumi.BoolOutput      `pulumi:"macsecCapable"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	OwnerAccountId       pulumi.StringOutput    `pulumi:"ownerAccountId"`
	PortEncryptionStatus pulumi.StringOutput    `pulumi:"portEncryptionStatus"`
	ProviderName         pulumi.StringOutput    `pulumi:"providerName"`
	RequestMacsec        pulumi.BoolPtrOutput   `pulumi:"requestMacsec"`
	SkipDestroy          pulumi.BoolPtrOutput   `pulumi:"skipDestroy"`
	Tags                 pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll              pulumi.StringMapOutput `pulumi:"tagsAll"`
	VlanId               pulumi.StringOutput    `pulumi:"vlanId"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bandwidth == nil {
		return nil, errors.New("invalid value for required argument 'Bandwidth'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	var resource Connection
	err := ctx.RegisterResource("aws:directconnect/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("aws:directconnect/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	Arn                  *string           `pulumi:"arn"`
	AwsDevice            *string           `pulumi:"awsDevice"`
	Bandwidth            *string           `pulumi:"bandwidth"`
	EncryptionMode       *string           `pulumi:"encryptionMode"`
	HasLogicalRedundancy *string           `pulumi:"hasLogicalRedundancy"`
	JumboFrameCapable    *bool             `pulumi:"jumboFrameCapable"`
	Location             *string           `pulumi:"location"`
	MacsecCapable        *bool             `pulumi:"macsecCapable"`
	Name                 *string           `pulumi:"name"`
	OwnerAccountId       *string           `pulumi:"ownerAccountId"`
	PortEncryptionStatus *string           `pulumi:"portEncryptionStatus"`
	ProviderName         *string           `pulumi:"providerName"`
	RequestMacsec        *bool             `pulumi:"requestMacsec"`
	SkipDestroy          *bool             `pulumi:"skipDestroy"`
	Tags                 map[string]string `pulumi:"tags"`
	TagsAll              map[string]string `pulumi:"tagsAll"`
	VlanId               *string           `pulumi:"vlanId"`
}

type ConnectionState struct {
	Arn                  pulumi.StringPtrInput
	AwsDevice            pulumi.StringPtrInput
	Bandwidth            pulumi.StringPtrInput
	EncryptionMode       pulumi.StringPtrInput
	HasLogicalRedundancy pulumi.StringPtrInput
	JumboFrameCapable    pulumi.BoolPtrInput
	Location             pulumi.StringPtrInput
	MacsecCapable        pulumi.BoolPtrInput
	Name                 pulumi.StringPtrInput
	OwnerAccountId       pulumi.StringPtrInput
	PortEncryptionStatus pulumi.StringPtrInput
	ProviderName         pulumi.StringPtrInput
	RequestMacsec        pulumi.BoolPtrInput
	SkipDestroy          pulumi.BoolPtrInput
	Tags                 pulumi.StringMapInput
	TagsAll              pulumi.StringMapInput
	VlanId               pulumi.StringPtrInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	Bandwidth      string            `pulumi:"bandwidth"`
	EncryptionMode *string           `pulumi:"encryptionMode"`
	Location       string            `pulumi:"location"`
	Name           *string           `pulumi:"name"`
	ProviderName   *string           `pulumi:"providerName"`
	RequestMacsec  *bool             `pulumi:"requestMacsec"`
	SkipDestroy    *bool             `pulumi:"skipDestroy"`
	Tags           map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	Bandwidth      pulumi.StringInput
	EncryptionMode pulumi.StringPtrInput
	Location       pulumi.StringInput
	Name           pulumi.StringPtrInput
	ProviderName   pulumi.StringPtrInput
	RequestMacsec  pulumi.BoolPtrInput
	SkipDestroy    pulumi.BoolPtrInput
	Tags           pulumi.StringMapInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

func (o ConnectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ConnectionOutput) AwsDevice() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.AwsDevice }).(pulumi.StringOutput)
}

func (o ConnectionOutput) Bandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Bandwidth }).(pulumi.StringOutput)
}

func (o ConnectionOutput) EncryptionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.EncryptionMode }).(pulumi.StringOutput)
}

func (o ConnectionOutput) HasLogicalRedundancy() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.HasLogicalRedundancy }).(pulumi.StringOutput)
}

func (o ConnectionOutput) JumboFrameCapable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.JumboFrameCapable }).(pulumi.BoolOutput)
}

func (o ConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o ConnectionOutput) MacsecCapable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.MacsecCapable }).(pulumi.BoolOutput)
}

func (o ConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConnectionOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

func (o ConnectionOutput) PortEncryptionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.PortEncryptionStatus }).(pulumi.StringOutput)
}

func (o ConnectionOutput) ProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ProviderName }).(pulumi.StringOutput)
}

func (o ConnectionOutput) RequestMacsec() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolPtrOutput { return v.RequestMacsec }).(pulumi.BoolPtrOutput)
}

func (o ConnectionOutput) SkipDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolPtrOutput { return v.SkipDestroy }).(pulumi.BoolPtrOutput)
}

func (o ConnectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ConnectionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ConnectionOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.VlanId }).(pulumi.StringOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
