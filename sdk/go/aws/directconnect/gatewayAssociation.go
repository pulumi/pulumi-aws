// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Associates a Direct Connect Gateway with a VGW or transit gateway.
//
// To create a cross-account association, create an `directconnect.GatewayAssociationProposal` resource
// in the AWS account that owns the VGW or transit gateway and then accept the proposal in the AWS account that owns the Direct Connect Gateway
// by creating an `directconnect.GatewayAssociation` resource with the `proposalId` and `associatedGatewayOwnerAccountId` attributes set.
//
// ## Example Usage
// ### VPN Gateway Association
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/directconnect"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleGateway, err := directconnect.NewGateway(ctx, "exampleGateway", &directconnect.GatewayArgs{
//				AmazonSideAsn: pulumi.String("64512"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVpc, err := ec2.NewVpc(ctx, "exampleVpc", &ec2.VpcArgs{
//				CidrBlock: pulumi.String("10.255.255.0/28"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVpnGateway, err := ec2.NewVpnGateway(ctx, "exampleVpnGateway", &ec2.VpnGatewayArgs{
//				VpcId: exampleVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = directconnect.NewGatewayAssociation(ctx, "exampleGatewayAssociation", &directconnect.GatewayAssociationArgs{
//				DxGatewayId:         exampleGateway.ID(),
//				AssociatedGatewayId: exampleVpnGateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Transit Gateway Association
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/directconnect"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2transitgateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleGateway, err := directconnect.NewGateway(ctx, "exampleGateway", &directconnect.GatewayArgs{
//				AmazonSideAsn: pulumi.String("64512"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleTransitGateway, err := ec2transitgateway.NewTransitGateway(ctx, "exampleTransitGateway", nil)
//			if err != nil {
//				return err
//			}
//			_, err = directconnect.NewGatewayAssociation(ctx, "exampleGatewayAssociation", &directconnect.GatewayAssociationArgs{
//				DxGatewayId:         exampleGateway.ID(),
//				AssociatedGatewayId: exampleTransitGateway.ID(),
//				AllowedPrefixes: pulumi.StringArray{
//					pulumi.String("10.255.255.0/30"),
//					pulumi.String("10.255.255.8/30"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Allowed Prefixes
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/directconnect"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleGateway, err := directconnect.NewGateway(ctx, "exampleGateway", &directconnect.GatewayArgs{
//				AmazonSideAsn: pulumi.String("64512"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVpc, err := ec2.NewVpc(ctx, "exampleVpc", &ec2.VpcArgs{
//				CidrBlock: pulumi.String("10.255.255.0/28"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVpnGateway, err := ec2.NewVpnGateway(ctx, "exampleVpnGateway", &ec2.VpnGatewayArgs{
//				VpcId: exampleVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = directconnect.NewGatewayAssociation(ctx, "exampleGatewayAssociation", &directconnect.GatewayAssociationArgs{
//				DxGatewayId:         exampleGateway.ID(),
//				AssociatedGatewayId: exampleVpnGateway.ID(),
//				AllowedPrefixes: pulumi.StringArray{
//					pulumi.String("210.52.109.0/24"),
//					pulumi.String("175.45.176.0/22"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_dx_gateway_association.example
//
//	id = "345508c3-7215-4aef-9832-07c125d5bd0f/vgw-98765432" } Using `pulumi import`, import Direct Connect gateway associations using `dx_gateway_id` together with `associated_gateway_id`. For exampleconsole % pulumi import aws_dx_gateway_association.example 345508c3-7215-4aef-9832-07c125d5bd0f/vgw-98765432
type GatewayAssociation struct {
	pulumi.CustomResourceState

	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes pulumi.StringArrayOutput `pulumi:"allowedPrefixes"`
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for single account Direct Connect gateway associations.
	AssociatedGatewayId pulumi.StringOutput `pulumi:"associatedGatewayId"`
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for cross-account Direct Connect gateway associations.
	AssociatedGatewayOwnerAccountId pulumi.StringOutput `pulumi:"associatedGatewayOwnerAccountId"`
	// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
	AssociatedGatewayType pulumi.StringOutput `pulumi:"associatedGatewayType"`
	// The ID of the Direct Connect gateway association.
	DxGatewayAssociationId pulumi.StringOutput `pulumi:"dxGatewayAssociationId"`
	// The ID of the Direct Connect gateway.
	DxGatewayId pulumi.StringOutput `pulumi:"dxGatewayId"`
	// The ID of the AWS account that owns the Direct Connect gateway.
	DxGatewayOwnerAccountId pulumi.StringOutput `pulumi:"dxGatewayOwnerAccountId"`
	// The ID of the Direct Connect gateway association proposal.
	// Used for cross-account Direct Connect gateway associations.
	ProposalId pulumi.StringPtrOutput `pulumi:"proposalId"`
	// Deprecated: use 'associated_gateway_id' argument instead
	VpnGatewayId pulumi.StringPtrOutput `pulumi:"vpnGatewayId"`
}

// NewGatewayAssociation registers a new resource with the given unique name, arguments, and options.
func NewGatewayAssociation(ctx *pulumi.Context,
	name string, args *GatewayAssociationArgs, opts ...pulumi.ResourceOption) (*GatewayAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DxGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'DxGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayAssociation
	err := ctx.RegisterResource("aws:directconnect/gatewayAssociation:GatewayAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayAssociation gets an existing GatewayAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayAssociationState, opts ...pulumi.ResourceOption) (*GatewayAssociation, error) {
	var resource GatewayAssociation
	err := ctx.ReadResource("aws:directconnect/gatewayAssociation:GatewayAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayAssociation resources.
type gatewayAssociationState struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes []string `pulumi:"allowedPrefixes"`
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for single account Direct Connect gateway associations.
	AssociatedGatewayId *string `pulumi:"associatedGatewayId"`
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for cross-account Direct Connect gateway associations.
	AssociatedGatewayOwnerAccountId *string `pulumi:"associatedGatewayOwnerAccountId"`
	// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
	AssociatedGatewayType *string `pulumi:"associatedGatewayType"`
	// The ID of the Direct Connect gateway association.
	DxGatewayAssociationId *string `pulumi:"dxGatewayAssociationId"`
	// The ID of the Direct Connect gateway.
	DxGatewayId *string `pulumi:"dxGatewayId"`
	// The ID of the AWS account that owns the Direct Connect gateway.
	DxGatewayOwnerAccountId *string `pulumi:"dxGatewayOwnerAccountId"`
	// The ID of the Direct Connect gateway association proposal.
	// Used for cross-account Direct Connect gateway associations.
	ProposalId *string `pulumi:"proposalId"`
	// Deprecated: use 'associated_gateway_id' argument instead
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

type GatewayAssociationState struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes pulumi.StringArrayInput
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for single account Direct Connect gateway associations.
	AssociatedGatewayId pulumi.StringPtrInput
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for cross-account Direct Connect gateway associations.
	AssociatedGatewayOwnerAccountId pulumi.StringPtrInput
	// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
	AssociatedGatewayType pulumi.StringPtrInput
	// The ID of the Direct Connect gateway association.
	DxGatewayAssociationId pulumi.StringPtrInput
	// The ID of the Direct Connect gateway.
	DxGatewayId pulumi.StringPtrInput
	// The ID of the AWS account that owns the Direct Connect gateway.
	DxGatewayOwnerAccountId pulumi.StringPtrInput
	// The ID of the Direct Connect gateway association proposal.
	// Used for cross-account Direct Connect gateway associations.
	ProposalId pulumi.StringPtrInput
	// Deprecated: use 'associated_gateway_id' argument instead
	VpnGatewayId pulumi.StringPtrInput
}

func (GatewayAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAssociationState)(nil)).Elem()
}

type gatewayAssociationArgs struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes []string `pulumi:"allowedPrefixes"`
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for single account Direct Connect gateway associations.
	AssociatedGatewayId *string `pulumi:"associatedGatewayId"`
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for cross-account Direct Connect gateway associations.
	AssociatedGatewayOwnerAccountId *string `pulumi:"associatedGatewayOwnerAccountId"`
	// The ID of the Direct Connect gateway.
	DxGatewayId string `pulumi:"dxGatewayId"`
	// The ID of the Direct Connect gateway association proposal.
	// Used for cross-account Direct Connect gateway associations.
	ProposalId *string `pulumi:"proposalId"`
	// Deprecated: use 'associated_gateway_id' argument instead
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a GatewayAssociation resource.
type GatewayAssociationArgs struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes pulumi.StringArrayInput
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for single account Direct Connect gateway associations.
	AssociatedGatewayId pulumi.StringPtrInput
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	// Used for cross-account Direct Connect gateway associations.
	AssociatedGatewayOwnerAccountId pulumi.StringPtrInput
	// The ID of the Direct Connect gateway.
	DxGatewayId pulumi.StringInput
	// The ID of the Direct Connect gateway association proposal.
	// Used for cross-account Direct Connect gateway associations.
	ProposalId pulumi.StringPtrInput
	// Deprecated: use 'associated_gateway_id' argument instead
	VpnGatewayId pulumi.StringPtrInput
}

func (GatewayAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAssociationArgs)(nil)).Elem()
}

type GatewayAssociationInput interface {
	pulumi.Input

	ToGatewayAssociationOutput() GatewayAssociationOutput
	ToGatewayAssociationOutputWithContext(ctx context.Context) GatewayAssociationOutput
}

func (*GatewayAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAssociation)(nil)).Elem()
}

func (i *GatewayAssociation) ToGatewayAssociationOutput() GatewayAssociationOutput {
	return i.ToGatewayAssociationOutputWithContext(context.Background())
}

func (i *GatewayAssociation) ToGatewayAssociationOutputWithContext(ctx context.Context) GatewayAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAssociationOutput)
}

// GatewayAssociationArrayInput is an input type that accepts GatewayAssociationArray and GatewayAssociationArrayOutput values.
// You can construct a concrete instance of `GatewayAssociationArrayInput` via:
//
//	GatewayAssociationArray{ GatewayAssociationArgs{...} }
type GatewayAssociationArrayInput interface {
	pulumi.Input

	ToGatewayAssociationArrayOutput() GatewayAssociationArrayOutput
	ToGatewayAssociationArrayOutputWithContext(context.Context) GatewayAssociationArrayOutput
}

type GatewayAssociationArray []GatewayAssociationInput

func (GatewayAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayAssociation)(nil)).Elem()
}

func (i GatewayAssociationArray) ToGatewayAssociationArrayOutput() GatewayAssociationArrayOutput {
	return i.ToGatewayAssociationArrayOutputWithContext(context.Background())
}

func (i GatewayAssociationArray) ToGatewayAssociationArrayOutputWithContext(ctx context.Context) GatewayAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAssociationArrayOutput)
}

// GatewayAssociationMapInput is an input type that accepts GatewayAssociationMap and GatewayAssociationMapOutput values.
// You can construct a concrete instance of `GatewayAssociationMapInput` via:
//
//	GatewayAssociationMap{ "key": GatewayAssociationArgs{...} }
type GatewayAssociationMapInput interface {
	pulumi.Input

	ToGatewayAssociationMapOutput() GatewayAssociationMapOutput
	ToGatewayAssociationMapOutputWithContext(context.Context) GatewayAssociationMapOutput
}

type GatewayAssociationMap map[string]GatewayAssociationInput

func (GatewayAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayAssociation)(nil)).Elem()
}

func (i GatewayAssociationMap) ToGatewayAssociationMapOutput() GatewayAssociationMapOutput {
	return i.ToGatewayAssociationMapOutputWithContext(context.Background())
}

func (i GatewayAssociationMap) ToGatewayAssociationMapOutputWithContext(ctx context.Context) GatewayAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAssociationMapOutput)
}

type GatewayAssociationOutput struct{ *pulumi.OutputState }

func (GatewayAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAssociation)(nil)).Elem()
}

func (o GatewayAssociationOutput) ToGatewayAssociationOutput() GatewayAssociationOutput {
	return o
}

func (o GatewayAssociationOutput) ToGatewayAssociationOutputWithContext(ctx context.Context) GatewayAssociationOutput {
	return o
}

// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
func (o GatewayAssociationOutput) AllowedPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayAssociation) pulumi.StringArrayOutput { return v.AllowedPrefixes }).(pulumi.StringArrayOutput)
}

// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
// Used for single account Direct Connect gateway associations.
func (o GatewayAssociationOutput) AssociatedGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAssociation) pulumi.StringOutput { return v.AssociatedGatewayId }).(pulumi.StringOutput)
}

// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
// Used for cross-account Direct Connect gateway associations.
func (o GatewayAssociationOutput) AssociatedGatewayOwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAssociation) pulumi.StringOutput { return v.AssociatedGatewayOwnerAccountId }).(pulumi.StringOutput)
}

// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
func (o GatewayAssociationOutput) AssociatedGatewayType() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAssociation) pulumi.StringOutput { return v.AssociatedGatewayType }).(pulumi.StringOutput)
}

// The ID of the Direct Connect gateway association.
func (o GatewayAssociationOutput) DxGatewayAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAssociation) pulumi.StringOutput { return v.DxGatewayAssociationId }).(pulumi.StringOutput)
}

// The ID of the Direct Connect gateway.
func (o GatewayAssociationOutput) DxGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAssociation) pulumi.StringOutput { return v.DxGatewayId }).(pulumi.StringOutput)
}

// The ID of the AWS account that owns the Direct Connect gateway.
func (o GatewayAssociationOutput) DxGatewayOwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAssociation) pulumi.StringOutput { return v.DxGatewayOwnerAccountId }).(pulumi.StringOutput)
}

// The ID of the Direct Connect gateway association proposal.
// Used for cross-account Direct Connect gateway associations.
func (o GatewayAssociationOutput) ProposalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayAssociation) pulumi.StringPtrOutput { return v.ProposalId }).(pulumi.StringPtrOutput)
}

// Deprecated: use 'associated_gateway_id' argument instead
func (o GatewayAssociationOutput) VpnGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayAssociation) pulumi.StringPtrOutput { return v.VpnGatewayId }).(pulumi.StringPtrOutput)
}

type GatewayAssociationArrayOutput struct{ *pulumi.OutputState }

func (GatewayAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayAssociation)(nil)).Elem()
}

func (o GatewayAssociationArrayOutput) ToGatewayAssociationArrayOutput() GatewayAssociationArrayOutput {
	return o
}

func (o GatewayAssociationArrayOutput) ToGatewayAssociationArrayOutputWithContext(ctx context.Context) GatewayAssociationArrayOutput {
	return o
}

func (o GatewayAssociationArrayOutput) Index(i pulumi.IntInput) GatewayAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayAssociation {
		return vs[0].([]*GatewayAssociation)[vs[1].(int)]
	}).(GatewayAssociationOutput)
}

type GatewayAssociationMapOutput struct{ *pulumi.OutputState }

func (GatewayAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayAssociation)(nil)).Elem()
}

func (o GatewayAssociationMapOutput) ToGatewayAssociationMapOutput() GatewayAssociationMapOutput {
	return o
}

func (o GatewayAssociationMapOutput) ToGatewayAssociationMapOutputWithContext(ctx context.Context) GatewayAssociationMapOutput {
	return o
}

func (o GatewayAssociationMapOutput) MapIndex(k pulumi.StringInput) GatewayAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayAssociation {
		return vs[0].(map[string]*GatewayAssociation)[vs[1].(string)]
	}).(GatewayAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAssociationInput)(nil)).Elem(), &GatewayAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAssociationArrayInput)(nil)).Elem(), GatewayAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAssociationMapInput)(nil)).Elem(), GatewayAssociationMap{})
	pulumi.RegisterOutputType(GatewayAssociationOutput{})
	pulumi.RegisterOutputType(GatewayAssociationArrayOutput{})
	pulumi.RegisterOutputType(GatewayAssociationMapOutput{})
}
