// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Associates a Direct Connect Connection with a LAG.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/directconnect"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleConnection, err := directconnect.NewConnection(ctx, "exampleConnection", &directconnect.ConnectionArgs{
// 			Bandwidth: pulumi.String("1Gbps"),
// 			Location:  pulumi.String("EqSe2-EQ"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleLinkAggregationGroup, err := directconnect.NewLinkAggregationGroup(ctx, "exampleLinkAggregationGroup", &directconnect.LinkAggregationGroupArgs{
// 			ConnectionsBandwidth: pulumi.String("1Gbps"),
// 			Location:             pulumi.String("EqSe2-EQ"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = directconnect.NewConnectionAssociation(ctx, "exampleConnectionAssociation", &directconnect.ConnectionAssociationArgs{
// 			ConnectionId: exampleConnection.ID(),
// 			LagId:        exampleLinkAggregationGroup.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ConnectionAssociation struct {
	pulumi.CustomResourceState

	// The ID of the connection.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// The ID of the LAG with which to associate the connection.
	LagId pulumi.StringOutput `pulumi:"lagId"`
}

// NewConnectionAssociation registers a new resource with the given unique name, arguments, and options.
func NewConnectionAssociation(ctx *pulumi.Context,
	name string, args *ConnectionAssociationArgs, opts ...pulumi.ResourceOption) (*ConnectionAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.LagId == nil {
		return nil, errors.New("invalid value for required argument 'LagId'")
	}
	var resource ConnectionAssociation
	err := ctx.RegisterResource("aws:directconnect/connectionAssociation:ConnectionAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionAssociation gets an existing ConnectionAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionAssociationState, opts ...pulumi.ResourceOption) (*ConnectionAssociation, error) {
	var resource ConnectionAssociation
	err := ctx.ReadResource("aws:directconnect/connectionAssociation:ConnectionAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionAssociation resources.
type connectionAssociationState struct {
	// The ID of the connection.
	ConnectionId *string `pulumi:"connectionId"`
	// The ID of the LAG with which to associate the connection.
	LagId *string `pulumi:"lagId"`
}

type ConnectionAssociationState struct {
	// The ID of the connection.
	ConnectionId pulumi.StringPtrInput
	// The ID of the LAG with which to associate the connection.
	LagId pulumi.StringPtrInput
}

func (ConnectionAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionAssociationState)(nil)).Elem()
}

type connectionAssociationArgs struct {
	// The ID of the connection.
	ConnectionId string `pulumi:"connectionId"`
	// The ID of the LAG with which to associate the connection.
	LagId string `pulumi:"lagId"`
}

// The set of arguments for constructing a ConnectionAssociation resource.
type ConnectionAssociationArgs struct {
	// The ID of the connection.
	ConnectionId pulumi.StringInput
	// The ID of the LAG with which to associate the connection.
	LagId pulumi.StringInput
}

func (ConnectionAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionAssociationArgs)(nil)).Elem()
}

type ConnectionAssociationInput interface {
	pulumi.Input

	ToConnectionAssociationOutput() ConnectionAssociationOutput
	ToConnectionAssociationOutputWithContext(ctx context.Context) ConnectionAssociationOutput
}

func (ConnectionAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAssociation)(nil)).Elem()
}

func (i ConnectionAssociation) ToConnectionAssociationOutput() ConnectionAssociationOutput {
	return i.ToConnectionAssociationOutputWithContext(context.Background())
}

func (i ConnectionAssociation) ToConnectionAssociationOutputWithContext(ctx context.Context) ConnectionAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAssociationOutput)
}

type ConnectionAssociationOutput struct {
	*pulumi.OutputState
}

func (ConnectionAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAssociationOutput)(nil)).Elem()
}

func (o ConnectionAssociationOutput) ToConnectionAssociationOutput() ConnectionAssociationOutput {
	return o
}

func (o ConnectionAssociationOutput) ToConnectionAssociationOutputWithContext(ctx context.Context) ConnectionAssociationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConnectionAssociationOutput{})
}
