// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GatewayAssociationProposal struct {
	pulumi.CustomResourceState

	AllowedPrefixes                 pulumi.StringArrayOutput `pulumi:"allowedPrefixes"`
	AssociatedGatewayId             pulumi.StringOutput      `pulumi:"associatedGatewayId"`
	AssociatedGatewayOwnerAccountId pulumi.StringOutput      `pulumi:"associatedGatewayOwnerAccountId"`
	AssociatedGatewayType           pulumi.StringOutput      `pulumi:"associatedGatewayType"`
	DxGatewayId                     pulumi.StringOutput      `pulumi:"dxGatewayId"`
	DxGatewayOwnerAccountId         pulumi.StringOutput      `pulumi:"dxGatewayOwnerAccountId"`
}

// NewGatewayAssociationProposal registers a new resource with the given unique name, arguments, and options.
func NewGatewayAssociationProposal(ctx *pulumi.Context,
	name string, args *GatewayAssociationProposalArgs, opts ...pulumi.ResourceOption) (*GatewayAssociationProposal, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssociatedGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'AssociatedGatewayId'")
	}
	if args.DxGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'DxGatewayId'")
	}
	if args.DxGatewayOwnerAccountId == nil {
		return nil, errors.New("invalid value for required argument 'DxGatewayOwnerAccountId'")
	}
	var resource GatewayAssociationProposal
	err := ctx.RegisterResource("aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayAssociationProposal gets an existing GatewayAssociationProposal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayAssociationProposal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayAssociationProposalState, opts ...pulumi.ResourceOption) (*GatewayAssociationProposal, error) {
	var resource GatewayAssociationProposal
	err := ctx.ReadResource("aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayAssociationProposal resources.
type gatewayAssociationProposalState struct {
	AllowedPrefixes                 []string `pulumi:"allowedPrefixes"`
	AssociatedGatewayId             *string  `pulumi:"associatedGatewayId"`
	AssociatedGatewayOwnerAccountId *string  `pulumi:"associatedGatewayOwnerAccountId"`
	AssociatedGatewayType           *string  `pulumi:"associatedGatewayType"`
	DxGatewayId                     *string  `pulumi:"dxGatewayId"`
	DxGatewayOwnerAccountId         *string  `pulumi:"dxGatewayOwnerAccountId"`
}

type GatewayAssociationProposalState struct {
	AllowedPrefixes                 pulumi.StringArrayInput
	AssociatedGatewayId             pulumi.StringPtrInput
	AssociatedGatewayOwnerAccountId pulumi.StringPtrInput
	AssociatedGatewayType           pulumi.StringPtrInput
	DxGatewayId                     pulumi.StringPtrInput
	DxGatewayOwnerAccountId         pulumi.StringPtrInput
}

func (GatewayAssociationProposalState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAssociationProposalState)(nil)).Elem()
}

type gatewayAssociationProposalArgs struct {
	AllowedPrefixes         []string `pulumi:"allowedPrefixes"`
	AssociatedGatewayId     string   `pulumi:"associatedGatewayId"`
	DxGatewayId             string   `pulumi:"dxGatewayId"`
	DxGatewayOwnerAccountId string   `pulumi:"dxGatewayOwnerAccountId"`
}

// The set of arguments for constructing a GatewayAssociationProposal resource.
type GatewayAssociationProposalArgs struct {
	AllowedPrefixes         pulumi.StringArrayInput
	AssociatedGatewayId     pulumi.StringInput
	DxGatewayId             pulumi.StringInput
	DxGatewayOwnerAccountId pulumi.StringInput
}

func (GatewayAssociationProposalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAssociationProposalArgs)(nil)).Elem()
}

type GatewayAssociationProposalInput interface {
	pulumi.Input

	ToGatewayAssociationProposalOutput() GatewayAssociationProposalOutput
	ToGatewayAssociationProposalOutputWithContext(ctx context.Context) GatewayAssociationProposalOutput
}

func (*GatewayAssociationProposal) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAssociationProposal)(nil)).Elem()
}

func (i *GatewayAssociationProposal) ToGatewayAssociationProposalOutput() GatewayAssociationProposalOutput {
	return i.ToGatewayAssociationProposalOutputWithContext(context.Background())
}

func (i *GatewayAssociationProposal) ToGatewayAssociationProposalOutputWithContext(ctx context.Context) GatewayAssociationProposalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAssociationProposalOutput)
}

// GatewayAssociationProposalArrayInput is an input type that accepts GatewayAssociationProposalArray and GatewayAssociationProposalArrayOutput values.
// You can construct a concrete instance of `GatewayAssociationProposalArrayInput` via:
//
//	GatewayAssociationProposalArray{ GatewayAssociationProposalArgs{...} }
type GatewayAssociationProposalArrayInput interface {
	pulumi.Input

	ToGatewayAssociationProposalArrayOutput() GatewayAssociationProposalArrayOutput
	ToGatewayAssociationProposalArrayOutputWithContext(context.Context) GatewayAssociationProposalArrayOutput
}

type GatewayAssociationProposalArray []GatewayAssociationProposalInput

func (GatewayAssociationProposalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayAssociationProposal)(nil)).Elem()
}

func (i GatewayAssociationProposalArray) ToGatewayAssociationProposalArrayOutput() GatewayAssociationProposalArrayOutput {
	return i.ToGatewayAssociationProposalArrayOutputWithContext(context.Background())
}

func (i GatewayAssociationProposalArray) ToGatewayAssociationProposalArrayOutputWithContext(ctx context.Context) GatewayAssociationProposalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAssociationProposalArrayOutput)
}

// GatewayAssociationProposalMapInput is an input type that accepts GatewayAssociationProposalMap and GatewayAssociationProposalMapOutput values.
// You can construct a concrete instance of `GatewayAssociationProposalMapInput` via:
//
//	GatewayAssociationProposalMap{ "key": GatewayAssociationProposalArgs{...} }
type GatewayAssociationProposalMapInput interface {
	pulumi.Input

	ToGatewayAssociationProposalMapOutput() GatewayAssociationProposalMapOutput
	ToGatewayAssociationProposalMapOutputWithContext(context.Context) GatewayAssociationProposalMapOutput
}

type GatewayAssociationProposalMap map[string]GatewayAssociationProposalInput

func (GatewayAssociationProposalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayAssociationProposal)(nil)).Elem()
}

func (i GatewayAssociationProposalMap) ToGatewayAssociationProposalMapOutput() GatewayAssociationProposalMapOutput {
	return i.ToGatewayAssociationProposalMapOutputWithContext(context.Background())
}

func (i GatewayAssociationProposalMap) ToGatewayAssociationProposalMapOutputWithContext(ctx context.Context) GatewayAssociationProposalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAssociationProposalMapOutput)
}

type GatewayAssociationProposalOutput struct{ *pulumi.OutputState }

func (GatewayAssociationProposalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAssociationProposal)(nil)).Elem()
}

func (o GatewayAssociationProposalOutput) ToGatewayAssociationProposalOutput() GatewayAssociationProposalOutput {
	return o
}

func (o GatewayAssociationProposalOutput) ToGatewayAssociationProposalOutputWithContext(ctx context.Context) GatewayAssociationProposalOutput {
	return o
}

func (o GatewayAssociationProposalOutput) AllowedPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayAssociationProposal) pulumi.StringArrayOutput { return v.AllowedPrefixes }).(pulumi.StringArrayOutput)
}

func (o GatewayAssociationProposalOutput) AssociatedGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAssociationProposal) pulumi.StringOutput { return v.AssociatedGatewayId }).(pulumi.StringOutput)
}

func (o GatewayAssociationProposalOutput) AssociatedGatewayOwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAssociationProposal) pulumi.StringOutput { return v.AssociatedGatewayOwnerAccountId }).(pulumi.StringOutput)
}

func (o GatewayAssociationProposalOutput) AssociatedGatewayType() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAssociationProposal) pulumi.StringOutput { return v.AssociatedGatewayType }).(pulumi.StringOutput)
}

func (o GatewayAssociationProposalOutput) DxGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAssociationProposal) pulumi.StringOutput { return v.DxGatewayId }).(pulumi.StringOutput)
}

func (o GatewayAssociationProposalOutput) DxGatewayOwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAssociationProposal) pulumi.StringOutput { return v.DxGatewayOwnerAccountId }).(pulumi.StringOutput)
}

type GatewayAssociationProposalArrayOutput struct{ *pulumi.OutputState }

func (GatewayAssociationProposalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayAssociationProposal)(nil)).Elem()
}

func (o GatewayAssociationProposalArrayOutput) ToGatewayAssociationProposalArrayOutput() GatewayAssociationProposalArrayOutput {
	return o
}

func (o GatewayAssociationProposalArrayOutput) ToGatewayAssociationProposalArrayOutputWithContext(ctx context.Context) GatewayAssociationProposalArrayOutput {
	return o
}

func (o GatewayAssociationProposalArrayOutput) Index(i pulumi.IntInput) GatewayAssociationProposalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayAssociationProposal {
		return vs[0].([]*GatewayAssociationProposal)[vs[1].(int)]
	}).(GatewayAssociationProposalOutput)
}

type GatewayAssociationProposalMapOutput struct{ *pulumi.OutputState }

func (GatewayAssociationProposalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayAssociationProposal)(nil)).Elem()
}

func (o GatewayAssociationProposalMapOutput) ToGatewayAssociationProposalMapOutput() GatewayAssociationProposalMapOutput {
	return o
}

func (o GatewayAssociationProposalMapOutput) ToGatewayAssociationProposalMapOutputWithContext(ctx context.Context) GatewayAssociationProposalMapOutput {
	return o
}

func (o GatewayAssociationProposalMapOutput) MapIndex(k pulumi.StringInput) GatewayAssociationProposalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayAssociationProposal {
		return vs[0].(map[string]*GatewayAssociationProposal)[vs[1].(string)]
	}).(GatewayAssociationProposalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAssociationProposalInput)(nil)).Elem(), &GatewayAssociationProposal{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAssociationProposalArrayInput)(nil)).Elem(), GatewayAssociationProposalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAssociationProposalMapInput)(nil)).Elem(), GatewayAssociationProposalMap{})
	pulumi.RegisterOutputType(GatewayAssociationProposalOutput{})
	pulumi.RegisterOutputType(GatewayAssociationProposalArrayOutput{})
	pulumi.RegisterOutputType(GatewayAssociationProposalMapOutput{})
}
