// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Direct Connect Gateway Association Proposal, typically for enabling cross-account associations. For single account associations, see the `directconnect.GatewayAssociation` resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/directconnect"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := directconnect.NewGatewayAssociationProposal(ctx, "example", &directconnect.GatewayAssociationProposalArgs{
// 			DxGatewayId:             pulumi.Any(aws_dx_gateway.Example.Id),
// 			DxGatewayOwnerAccountId: pulumi.Any(aws_dx_gateway.Example.Owner_account_id),
// 			AssociatedGatewayId:     pulumi.Any(aws_vpn_gateway.Example.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Direct Connect Gateway Association Proposals can be imported using the proposal ID, e.g.
//
// ```sh
//  $ pulumi import aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal example ac90e981-b718-4364-872d-65478c84fafe
// ```
type GatewayAssociationProposal struct {
	pulumi.CustomResourceState

	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes pulumi.StringArrayOutput `pulumi:"allowedPrefixes"`
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	AssociatedGatewayId pulumi.StringOutput `pulumi:"associatedGatewayId"`
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	AssociatedGatewayOwnerAccountId pulumi.StringOutput `pulumi:"associatedGatewayOwnerAccountId"`
	// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
	AssociatedGatewayType pulumi.StringOutput `pulumi:"associatedGatewayType"`
	// Direct Connect Gateway identifier.
	DxGatewayId pulumi.StringOutput `pulumi:"dxGatewayId"`
	// AWS Account identifier of the Direct Connect Gateway's owner.
	DxGatewayOwnerAccountId pulumi.StringOutput `pulumi:"dxGatewayOwnerAccountId"`
}

// NewGatewayAssociationProposal registers a new resource with the given unique name, arguments, and options.
func NewGatewayAssociationProposal(ctx *pulumi.Context,
	name string, args *GatewayAssociationProposalArgs, opts ...pulumi.ResourceOption) (*GatewayAssociationProposal, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssociatedGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'AssociatedGatewayId'")
	}
	if args.DxGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'DxGatewayId'")
	}
	if args.DxGatewayOwnerAccountId == nil {
		return nil, errors.New("invalid value for required argument 'DxGatewayOwnerAccountId'")
	}
	var resource GatewayAssociationProposal
	err := ctx.RegisterResource("aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayAssociationProposal gets an existing GatewayAssociationProposal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayAssociationProposal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayAssociationProposalState, opts ...pulumi.ResourceOption) (*GatewayAssociationProposal, error) {
	var resource GatewayAssociationProposal
	err := ctx.ReadResource("aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayAssociationProposal resources.
type gatewayAssociationProposalState struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes []string `pulumi:"allowedPrefixes"`
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	AssociatedGatewayId *string `pulumi:"associatedGatewayId"`
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	AssociatedGatewayOwnerAccountId *string `pulumi:"associatedGatewayOwnerAccountId"`
	// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
	AssociatedGatewayType *string `pulumi:"associatedGatewayType"`
	// Direct Connect Gateway identifier.
	DxGatewayId *string `pulumi:"dxGatewayId"`
	// AWS Account identifier of the Direct Connect Gateway's owner.
	DxGatewayOwnerAccountId *string `pulumi:"dxGatewayOwnerAccountId"`
}

type GatewayAssociationProposalState struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes pulumi.StringArrayInput
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	AssociatedGatewayId pulumi.StringPtrInput
	// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
	AssociatedGatewayOwnerAccountId pulumi.StringPtrInput
	// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
	AssociatedGatewayType pulumi.StringPtrInput
	// Direct Connect Gateway identifier.
	DxGatewayId pulumi.StringPtrInput
	// AWS Account identifier of the Direct Connect Gateway's owner.
	DxGatewayOwnerAccountId pulumi.StringPtrInput
}

func (GatewayAssociationProposalState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAssociationProposalState)(nil)).Elem()
}

type gatewayAssociationProposalArgs struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes []string `pulumi:"allowedPrefixes"`
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	AssociatedGatewayId string `pulumi:"associatedGatewayId"`
	// Direct Connect Gateway identifier.
	DxGatewayId string `pulumi:"dxGatewayId"`
	// AWS Account identifier of the Direct Connect Gateway's owner.
	DxGatewayOwnerAccountId string `pulumi:"dxGatewayOwnerAccountId"`
}

// The set of arguments for constructing a GatewayAssociationProposal resource.
type GatewayAssociationProposalArgs struct {
	// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
	AllowedPrefixes pulumi.StringArrayInput
	// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
	AssociatedGatewayId pulumi.StringInput
	// Direct Connect Gateway identifier.
	DxGatewayId pulumi.StringInput
	// AWS Account identifier of the Direct Connect Gateway's owner.
	DxGatewayOwnerAccountId pulumi.StringInput
}

func (GatewayAssociationProposalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAssociationProposalArgs)(nil)).Elem()
}

type GatewayAssociationProposalInput interface {
	pulumi.Input

	ToGatewayAssociationProposalOutput() GatewayAssociationProposalOutput
	ToGatewayAssociationProposalOutputWithContext(ctx context.Context) GatewayAssociationProposalOutput
}

func (*GatewayAssociationProposal) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayAssociationProposal)(nil))
}

func (i *GatewayAssociationProposal) ToGatewayAssociationProposalOutput() GatewayAssociationProposalOutput {
	return i.ToGatewayAssociationProposalOutputWithContext(context.Background())
}

func (i *GatewayAssociationProposal) ToGatewayAssociationProposalOutputWithContext(ctx context.Context) GatewayAssociationProposalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAssociationProposalOutput)
}

func (i *GatewayAssociationProposal) ToGatewayAssociationProposalPtrOutput() GatewayAssociationProposalPtrOutput {
	return i.ToGatewayAssociationProposalPtrOutputWithContext(context.Background())
}

func (i *GatewayAssociationProposal) ToGatewayAssociationProposalPtrOutputWithContext(ctx context.Context) GatewayAssociationProposalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAssociationProposalPtrOutput)
}

type GatewayAssociationProposalPtrInput interface {
	pulumi.Input

	ToGatewayAssociationProposalPtrOutput() GatewayAssociationProposalPtrOutput
	ToGatewayAssociationProposalPtrOutputWithContext(ctx context.Context) GatewayAssociationProposalPtrOutput
}

type gatewayAssociationProposalPtrType GatewayAssociationProposalArgs

func (*gatewayAssociationProposalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAssociationProposal)(nil))
}

func (i *gatewayAssociationProposalPtrType) ToGatewayAssociationProposalPtrOutput() GatewayAssociationProposalPtrOutput {
	return i.ToGatewayAssociationProposalPtrOutputWithContext(context.Background())
}

func (i *gatewayAssociationProposalPtrType) ToGatewayAssociationProposalPtrOutputWithContext(ctx context.Context) GatewayAssociationProposalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAssociationProposalPtrOutput)
}

// GatewayAssociationProposalArrayInput is an input type that accepts GatewayAssociationProposalArray and GatewayAssociationProposalArrayOutput values.
// You can construct a concrete instance of `GatewayAssociationProposalArrayInput` via:
//
//          GatewayAssociationProposalArray{ GatewayAssociationProposalArgs{...} }
type GatewayAssociationProposalArrayInput interface {
	pulumi.Input

	ToGatewayAssociationProposalArrayOutput() GatewayAssociationProposalArrayOutput
	ToGatewayAssociationProposalArrayOutputWithContext(context.Context) GatewayAssociationProposalArrayOutput
}

type GatewayAssociationProposalArray []GatewayAssociationProposalInput

func (GatewayAssociationProposalArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*GatewayAssociationProposal)(nil))
}

func (i GatewayAssociationProposalArray) ToGatewayAssociationProposalArrayOutput() GatewayAssociationProposalArrayOutput {
	return i.ToGatewayAssociationProposalArrayOutputWithContext(context.Background())
}

func (i GatewayAssociationProposalArray) ToGatewayAssociationProposalArrayOutputWithContext(ctx context.Context) GatewayAssociationProposalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAssociationProposalArrayOutput)
}

// GatewayAssociationProposalMapInput is an input type that accepts GatewayAssociationProposalMap and GatewayAssociationProposalMapOutput values.
// You can construct a concrete instance of `GatewayAssociationProposalMapInput` via:
//
//          GatewayAssociationProposalMap{ "key": GatewayAssociationProposalArgs{...} }
type GatewayAssociationProposalMapInput interface {
	pulumi.Input

	ToGatewayAssociationProposalMapOutput() GatewayAssociationProposalMapOutput
	ToGatewayAssociationProposalMapOutputWithContext(context.Context) GatewayAssociationProposalMapOutput
}

type GatewayAssociationProposalMap map[string]GatewayAssociationProposalInput

func (GatewayAssociationProposalMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*GatewayAssociationProposal)(nil))
}

func (i GatewayAssociationProposalMap) ToGatewayAssociationProposalMapOutput() GatewayAssociationProposalMapOutput {
	return i.ToGatewayAssociationProposalMapOutputWithContext(context.Background())
}

func (i GatewayAssociationProposalMap) ToGatewayAssociationProposalMapOutputWithContext(ctx context.Context) GatewayAssociationProposalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAssociationProposalMapOutput)
}

type GatewayAssociationProposalOutput struct {
	*pulumi.OutputState
}

func (GatewayAssociationProposalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayAssociationProposal)(nil))
}

func (o GatewayAssociationProposalOutput) ToGatewayAssociationProposalOutput() GatewayAssociationProposalOutput {
	return o
}

func (o GatewayAssociationProposalOutput) ToGatewayAssociationProposalOutputWithContext(ctx context.Context) GatewayAssociationProposalOutput {
	return o
}

func (o GatewayAssociationProposalOutput) ToGatewayAssociationProposalPtrOutput() GatewayAssociationProposalPtrOutput {
	return o.ToGatewayAssociationProposalPtrOutputWithContext(context.Background())
}

func (o GatewayAssociationProposalOutput) ToGatewayAssociationProposalPtrOutputWithContext(ctx context.Context) GatewayAssociationProposalPtrOutput {
	return o.ApplyT(func(v GatewayAssociationProposal) *GatewayAssociationProposal {
		return &v
	}).(GatewayAssociationProposalPtrOutput)
}

type GatewayAssociationProposalPtrOutput struct {
	*pulumi.OutputState
}

func (GatewayAssociationProposalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAssociationProposal)(nil))
}

func (o GatewayAssociationProposalPtrOutput) ToGatewayAssociationProposalPtrOutput() GatewayAssociationProposalPtrOutput {
	return o
}

func (o GatewayAssociationProposalPtrOutput) ToGatewayAssociationProposalPtrOutputWithContext(ctx context.Context) GatewayAssociationProposalPtrOutput {
	return o
}

type GatewayAssociationProposalArrayOutput struct{ *pulumi.OutputState }

func (GatewayAssociationProposalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewayAssociationProposal)(nil))
}

func (o GatewayAssociationProposalArrayOutput) ToGatewayAssociationProposalArrayOutput() GatewayAssociationProposalArrayOutput {
	return o
}

func (o GatewayAssociationProposalArrayOutput) ToGatewayAssociationProposalArrayOutputWithContext(ctx context.Context) GatewayAssociationProposalArrayOutput {
	return o
}

func (o GatewayAssociationProposalArrayOutput) Index(i pulumi.IntInput) GatewayAssociationProposalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewayAssociationProposal {
		return vs[0].([]GatewayAssociationProposal)[vs[1].(int)]
	}).(GatewayAssociationProposalOutput)
}

type GatewayAssociationProposalMapOutput struct{ *pulumi.OutputState }

func (GatewayAssociationProposalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewayAssociationProposal)(nil))
}

func (o GatewayAssociationProposalMapOutput) ToGatewayAssociationProposalMapOutput() GatewayAssociationProposalMapOutput {
	return o
}

func (o GatewayAssociationProposalMapOutput) ToGatewayAssociationProposalMapOutputWithContext(ctx context.Context) GatewayAssociationProposalMapOutput {
	return o
}

func (o GatewayAssociationProposalMapOutput) MapIndex(k pulumi.StringInput) GatewayAssociationProposalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewayAssociationProposal {
		return vs[0].(map[string]GatewayAssociationProposal)[vs[1].(string)]
	}).(GatewayAssociationProposalOutput)
}

func init() {
	pulumi.RegisterOutputType(GatewayAssociationProposalOutput{})
	pulumi.RegisterOutputType(GatewayAssociationProposalPtrOutput{})
	pulumi.RegisterOutputType(GatewayAssociationProposalArrayOutput{})
	pulumi.RegisterOutputType(GatewayAssociationProposalMapOutput{})
}
