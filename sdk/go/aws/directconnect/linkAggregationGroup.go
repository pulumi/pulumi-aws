// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Direct Connect LAG.
type LinkAggregationGroup struct {
	s *pulumi.ResourceState
}

// NewLinkAggregationGroup registers a new resource with the given unique name, arguments, and options.
func NewLinkAggregationGroup(ctx *pulumi.Context,
	name string, args *LinkAggregationGroupArgs, opts ...pulumi.ResourceOpt) (*LinkAggregationGroup, error) {
	if args == nil || args.ConnectionsBandwidth == nil {
		return nil, errors.New("missing required argument 'ConnectionsBandwidth'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["connectionsBandwidth"] = nil
		inputs["forceDestroy"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["numberOfConnections"] = nil
		inputs["tags"] = nil
	} else {
		inputs["connectionsBandwidth"] = args.ConnectionsBandwidth
		inputs["forceDestroy"] = args.ForceDestroy
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["numberOfConnections"] = args.NumberOfConnections
		inputs["tags"] = args.Tags
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:directconnect/linkAggregationGroup:LinkAggregationGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LinkAggregationGroup{s: s}, nil
}

// GetLinkAggregationGroup gets an existing LinkAggregationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkAggregationGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LinkAggregationGroupState, opts ...pulumi.ResourceOpt) (*LinkAggregationGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["connectionsBandwidth"] = state.ConnectionsBandwidth
		inputs["forceDestroy"] = state.ForceDestroy
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["numberOfConnections"] = state.NumberOfConnections
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("aws:directconnect/linkAggregationGroup:LinkAggregationGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LinkAggregationGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LinkAggregationGroup) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LinkAggregationGroup) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ARN of the LAG.
func (r *LinkAggregationGroup) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The bandwidth of the individual physical connections bundled by the LAG. Available values: 1Gbps, 10Gbps. Case sensitive.
func (r *LinkAggregationGroup) ConnectionsBandwidth() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["connectionsBandwidth"])
}

// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
func (r *LinkAggregationGroup) ForceDestroy() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["forceDestroy"])
}

// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
func (r *LinkAggregationGroup) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// The name of the LAG.
func (r *LinkAggregationGroup) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The number of physical connections initially provisioned and bundled by the LAG. Use `aws_dx_connection` and `aws_dx_connection_association` resources instead. Default connections will be removed as part of LAG creation automatically in future versions.
func (r *LinkAggregationGroup) NumberOfConnections() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["numberOfConnections"])
}

// A mapping of tags to assign to the resource.
func (r *LinkAggregationGroup) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering LinkAggregationGroup resources.
type LinkAggregationGroupState struct {
	// The ARN of the LAG.
	Arn interface{}
	// The bandwidth of the individual physical connections bundled by the LAG. Available values: 1Gbps, 10Gbps. Case sensitive.
	ConnectionsBandwidth interface{}
	// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
	ForceDestroy interface{}
	// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
	Location interface{}
	// The name of the LAG.
	Name interface{}
	// The number of physical connections initially provisioned and bundled by the LAG. Use `aws_dx_connection` and `aws_dx_connection_association` resources instead. Default connections will be removed as part of LAG creation automatically in future versions.
	NumberOfConnections interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a LinkAggregationGroup resource.
type LinkAggregationGroupArgs struct {
	// The bandwidth of the individual physical connections bundled by the LAG. Available values: 1Gbps, 10Gbps. Case sensitive.
	ConnectionsBandwidth interface{}
	// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
	ForceDestroy interface{}
	// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
	Location interface{}
	// The name of the LAG.
	Name interface{}
	// The number of physical connections initially provisioned and bundled by the LAG. Use `aws_dx_connection` and `aws_dx_connection_association` resources instead. Default connections will be removed as part of LAG creation automatically in future versions.
	NumberOfConnections interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
