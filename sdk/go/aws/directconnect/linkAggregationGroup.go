// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LinkAggregationGroup struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput    `pulumi:"arn"`
	ConnectionId         pulumi.StringPtrOutput `pulumi:"connectionId"`
	ConnectionsBandwidth pulumi.StringOutput    `pulumi:"connectionsBandwidth"`
	ForceDestroy         pulumi.BoolPtrOutput   `pulumi:"forceDestroy"`
	HasLogicalRedundancy pulumi.StringOutput    `pulumi:"hasLogicalRedundancy"`
	JumboFrameCapable    pulumi.BoolOutput      `pulumi:"jumboFrameCapable"`
	Location             pulumi.StringOutput    `pulumi:"location"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	OwnerAccountId       pulumi.StringOutput    `pulumi:"ownerAccountId"`
	ProviderName         pulumi.StringOutput    `pulumi:"providerName"`
	Tags                 pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll              pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewLinkAggregationGroup registers a new resource with the given unique name, arguments, and options.
func NewLinkAggregationGroup(ctx *pulumi.Context,
	name string, args *LinkAggregationGroupArgs, opts ...pulumi.ResourceOption) (*LinkAggregationGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionsBandwidth == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionsBandwidth'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	var resource LinkAggregationGroup
	err := ctx.RegisterResource("aws:directconnect/linkAggregationGroup:LinkAggregationGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkAggregationGroup gets an existing LinkAggregationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkAggregationGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkAggregationGroupState, opts ...pulumi.ResourceOption) (*LinkAggregationGroup, error) {
	var resource LinkAggregationGroup
	err := ctx.ReadResource("aws:directconnect/linkAggregationGroup:LinkAggregationGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkAggregationGroup resources.
type linkAggregationGroupState struct {
	Arn                  *string           `pulumi:"arn"`
	ConnectionId         *string           `pulumi:"connectionId"`
	ConnectionsBandwidth *string           `pulumi:"connectionsBandwidth"`
	ForceDestroy         *bool             `pulumi:"forceDestroy"`
	HasLogicalRedundancy *string           `pulumi:"hasLogicalRedundancy"`
	JumboFrameCapable    *bool             `pulumi:"jumboFrameCapable"`
	Location             *string           `pulumi:"location"`
	Name                 *string           `pulumi:"name"`
	OwnerAccountId       *string           `pulumi:"ownerAccountId"`
	ProviderName         *string           `pulumi:"providerName"`
	Tags                 map[string]string `pulumi:"tags"`
	TagsAll              map[string]string `pulumi:"tagsAll"`
}

type LinkAggregationGroupState struct {
	Arn                  pulumi.StringPtrInput
	ConnectionId         pulumi.StringPtrInput
	ConnectionsBandwidth pulumi.StringPtrInput
	ForceDestroy         pulumi.BoolPtrInput
	HasLogicalRedundancy pulumi.StringPtrInput
	JumboFrameCapable    pulumi.BoolPtrInput
	Location             pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	OwnerAccountId       pulumi.StringPtrInput
	ProviderName         pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	TagsAll              pulumi.StringMapInput
}

func (LinkAggregationGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkAggregationGroupState)(nil)).Elem()
}

type linkAggregationGroupArgs struct {
	ConnectionId         *string           `pulumi:"connectionId"`
	ConnectionsBandwidth string            `pulumi:"connectionsBandwidth"`
	ForceDestroy         *bool             `pulumi:"forceDestroy"`
	Location             string            `pulumi:"location"`
	Name                 *string           `pulumi:"name"`
	ProviderName         *string           `pulumi:"providerName"`
	Tags                 map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LinkAggregationGroup resource.
type LinkAggregationGroupArgs struct {
	ConnectionId         pulumi.StringPtrInput
	ConnectionsBandwidth pulumi.StringInput
	ForceDestroy         pulumi.BoolPtrInput
	Location             pulumi.StringInput
	Name                 pulumi.StringPtrInput
	ProviderName         pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
}

func (LinkAggregationGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkAggregationGroupArgs)(nil)).Elem()
}

type LinkAggregationGroupInput interface {
	pulumi.Input

	ToLinkAggregationGroupOutput() LinkAggregationGroupOutput
	ToLinkAggregationGroupOutputWithContext(ctx context.Context) LinkAggregationGroupOutput
}

func (*LinkAggregationGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkAggregationGroup)(nil)).Elem()
}

func (i *LinkAggregationGroup) ToLinkAggregationGroupOutput() LinkAggregationGroupOutput {
	return i.ToLinkAggregationGroupOutputWithContext(context.Background())
}

func (i *LinkAggregationGroup) ToLinkAggregationGroupOutputWithContext(ctx context.Context) LinkAggregationGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkAggregationGroupOutput)
}

// LinkAggregationGroupArrayInput is an input type that accepts LinkAggregationGroupArray and LinkAggregationGroupArrayOutput values.
// You can construct a concrete instance of `LinkAggregationGroupArrayInput` via:
//
//	LinkAggregationGroupArray{ LinkAggregationGroupArgs{...} }
type LinkAggregationGroupArrayInput interface {
	pulumi.Input

	ToLinkAggregationGroupArrayOutput() LinkAggregationGroupArrayOutput
	ToLinkAggregationGroupArrayOutputWithContext(context.Context) LinkAggregationGroupArrayOutput
}

type LinkAggregationGroupArray []LinkAggregationGroupInput

func (LinkAggregationGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkAggregationGroup)(nil)).Elem()
}

func (i LinkAggregationGroupArray) ToLinkAggregationGroupArrayOutput() LinkAggregationGroupArrayOutput {
	return i.ToLinkAggregationGroupArrayOutputWithContext(context.Background())
}

func (i LinkAggregationGroupArray) ToLinkAggregationGroupArrayOutputWithContext(ctx context.Context) LinkAggregationGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkAggregationGroupArrayOutput)
}

// LinkAggregationGroupMapInput is an input type that accepts LinkAggregationGroupMap and LinkAggregationGroupMapOutput values.
// You can construct a concrete instance of `LinkAggregationGroupMapInput` via:
//
//	LinkAggregationGroupMap{ "key": LinkAggregationGroupArgs{...} }
type LinkAggregationGroupMapInput interface {
	pulumi.Input

	ToLinkAggregationGroupMapOutput() LinkAggregationGroupMapOutput
	ToLinkAggregationGroupMapOutputWithContext(context.Context) LinkAggregationGroupMapOutput
}

type LinkAggregationGroupMap map[string]LinkAggregationGroupInput

func (LinkAggregationGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkAggregationGroup)(nil)).Elem()
}

func (i LinkAggregationGroupMap) ToLinkAggregationGroupMapOutput() LinkAggregationGroupMapOutput {
	return i.ToLinkAggregationGroupMapOutputWithContext(context.Background())
}

func (i LinkAggregationGroupMap) ToLinkAggregationGroupMapOutputWithContext(ctx context.Context) LinkAggregationGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkAggregationGroupMapOutput)
}

type LinkAggregationGroupOutput struct{ *pulumi.OutputState }

func (LinkAggregationGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkAggregationGroup)(nil)).Elem()
}

func (o LinkAggregationGroupOutput) ToLinkAggregationGroupOutput() LinkAggregationGroupOutput {
	return o
}

func (o LinkAggregationGroupOutput) ToLinkAggregationGroupOutputWithContext(ctx context.Context) LinkAggregationGroupOutput {
	return o
}

func (o LinkAggregationGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LinkAggregationGroupOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.StringPtrOutput { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

func (o LinkAggregationGroupOutput) ConnectionsBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.StringOutput { return v.ConnectionsBandwidth }).(pulumi.StringOutput)
}

func (o LinkAggregationGroupOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

func (o LinkAggregationGroupOutput) HasLogicalRedundancy() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.StringOutput { return v.HasLogicalRedundancy }).(pulumi.StringOutput)
}

func (o LinkAggregationGroupOutput) JumboFrameCapable() pulumi.BoolOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.BoolOutput { return v.JumboFrameCapable }).(pulumi.BoolOutput)
}

func (o LinkAggregationGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o LinkAggregationGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LinkAggregationGroupOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

func (o LinkAggregationGroupOutput) ProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.StringOutput { return v.ProviderName }).(pulumi.StringOutput)
}

func (o LinkAggregationGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LinkAggregationGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkAggregationGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LinkAggregationGroupArrayOutput struct{ *pulumi.OutputState }

func (LinkAggregationGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkAggregationGroup)(nil)).Elem()
}

func (o LinkAggregationGroupArrayOutput) ToLinkAggregationGroupArrayOutput() LinkAggregationGroupArrayOutput {
	return o
}

func (o LinkAggregationGroupArrayOutput) ToLinkAggregationGroupArrayOutputWithContext(ctx context.Context) LinkAggregationGroupArrayOutput {
	return o
}

func (o LinkAggregationGroupArrayOutput) Index(i pulumi.IntInput) LinkAggregationGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkAggregationGroup {
		return vs[0].([]*LinkAggregationGroup)[vs[1].(int)]
	}).(LinkAggregationGroupOutput)
}

type LinkAggregationGroupMapOutput struct{ *pulumi.OutputState }

func (LinkAggregationGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkAggregationGroup)(nil)).Elem()
}

func (o LinkAggregationGroupMapOutput) ToLinkAggregationGroupMapOutput() LinkAggregationGroupMapOutput {
	return o
}

func (o LinkAggregationGroupMapOutput) ToLinkAggregationGroupMapOutputWithContext(ctx context.Context) LinkAggregationGroupMapOutput {
	return o
}

func (o LinkAggregationGroupMapOutput) MapIndex(k pulumi.StringInput) LinkAggregationGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkAggregationGroup {
		return vs[0].(map[string]*LinkAggregationGroup)[vs[1].(string)]
	}).(LinkAggregationGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkAggregationGroupInput)(nil)).Elem(), &LinkAggregationGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkAggregationGroupArrayInput)(nil)).Elem(), LinkAggregationGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkAggregationGroupMapInput)(nil)).Elem(), LinkAggregationGroupMap{})
	pulumi.RegisterOutputType(LinkAggregationGroupOutput{})
	pulumi.RegisterOutputType(LinkAggregationGroupArrayOutput{})
	pulumi.RegisterOutputType(LinkAggregationGroupMapOutput{})
}
