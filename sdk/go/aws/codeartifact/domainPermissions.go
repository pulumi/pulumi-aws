// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codeartifact

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainPermissions struct {
	pulumi.CustomResourceState

	Domain         pulumi.StringOutput `pulumi:"domain"`
	DomainOwner    pulumi.StringOutput `pulumi:"domainOwner"`
	PolicyDocument pulumi.StringOutput `pulumi:"policyDocument"`
	PolicyRevision pulumi.StringOutput `pulumi:"policyRevision"`
	ResourceArn    pulumi.StringOutput `pulumi:"resourceArn"`
}

// NewDomainPermissions registers a new resource with the given unique name, arguments, and options.
func NewDomainPermissions(ctx *pulumi.Context,
	name string, args *DomainPermissionsArgs, opts ...pulumi.ResourceOption) (*DomainPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.PolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDocument'")
	}
	var resource DomainPermissions
	err := ctx.RegisterResource("aws:codeartifact/domainPermissions:DomainPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainPermissions gets an existing DomainPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainPermissionsState, opts ...pulumi.ResourceOption) (*DomainPermissions, error) {
	var resource DomainPermissions
	err := ctx.ReadResource("aws:codeartifact/domainPermissions:DomainPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainPermissions resources.
type domainPermissionsState struct {
	Domain         *string `pulumi:"domain"`
	DomainOwner    *string `pulumi:"domainOwner"`
	PolicyDocument *string `pulumi:"policyDocument"`
	PolicyRevision *string `pulumi:"policyRevision"`
	ResourceArn    *string `pulumi:"resourceArn"`
}

type DomainPermissionsState struct {
	Domain         pulumi.StringPtrInput
	DomainOwner    pulumi.StringPtrInput
	PolicyDocument pulumi.StringPtrInput
	PolicyRevision pulumi.StringPtrInput
	ResourceArn    pulumi.StringPtrInput
}

func (DomainPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainPermissionsState)(nil)).Elem()
}

type domainPermissionsArgs struct {
	Domain         string  `pulumi:"domain"`
	DomainOwner    *string `pulumi:"domainOwner"`
	PolicyDocument string  `pulumi:"policyDocument"`
	PolicyRevision *string `pulumi:"policyRevision"`
}

// The set of arguments for constructing a DomainPermissions resource.
type DomainPermissionsArgs struct {
	Domain         pulumi.StringInput
	DomainOwner    pulumi.StringPtrInput
	PolicyDocument pulumi.StringInput
	PolicyRevision pulumi.StringPtrInput
}

func (DomainPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainPermissionsArgs)(nil)).Elem()
}

type DomainPermissionsInput interface {
	pulumi.Input

	ToDomainPermissionsOutput() DomainPermissionsOutput
	ToDomainPermissionsOutputWithContext(ctx context.Context) DomainPermissionsOutput
}

func (*DomainPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainPermissions)(nil)).Elem()
}

func (i *DomainPermissions) ToDomainPermissionsOutput() DomainPermissionsOutput {
	return i.ToDomainPermissionsOutputWithContext(context.Background())
}

func (i *DomainPermissions) ToDomainPermissionsOutputWithContext(ctx context.Context) DomainPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPermissionsOutput)
}

// DomainPermissionsArrayInput is an input type that accepts DomainPermissionsArray and DomainPermissionsArrayOutput values.
// You can construct a concrete instance of `DomainPermissionsArrayInput` via:
//
//	DomainPermissionsArray{ DomainPermissionsArgs{...} }
type DomainPermissionsArrayInput interface {
	pulumi.Input

	ToDomainPermissionsArrayOutput() DomainPermissionsArrayOutput
	ToDomainPermissionsArrayOutputWithContext(context.Context) DomainPermissionsArrayOutput
}

type DomainPermissionsArray []DomainPermissionsInput

func (DomainPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainPermissions)(nil)).Elem()
}

func (i DomainPermissionsArray) ToDomainPermissionsArrayOutput() DomainPermissionsArrayOutput {
	return i.ToDomainPermissionsArrayOutputWithContext(context.Background())
}

func (i DomainPermissionsArray) ToDomainPermissionsArrayOutputWithContext(ctx context.Context) DomainPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPermissionsArrayOutput)
}

// DomainPermissionsMapInput is an input type that accepts DomainPermissionsMap and DomainPermissionsMapOutput values.
// You can construct a concrete instance of `DomainPermissionsMapInput` via:
//
//	DomainPermissionsMap{ "key": DomainPermissionsArgs{...} }
type DomainPermissionsMapInput interface {
	pulumi.Input

	ToDomainPermissionsMapOutput() DomainPermissionsMapOutput
	ToDomainPermissionsMapOutputWithContext(context.Context) DomainPermissionsMapOutput
}

type DomainPermissionsMap map[string]DomainPermissionsInput

func (DomainPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainPermissions)(nil)).Elem()
}

func (i DomainPermissionsMap) ToDomainPermissionsMapOutput() DomainPermissionsMapOutput {
	return i.ToDomainPermissionsMapOutputWithContext(context.Background())
}

func (i DomainPermissionsMap) ToDomainPermissionsMapOutputWithContext(ctx context.Context) DomainPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPermissionsMapOutput)
}

type DomainPermissionsOutput struct{ *pulumi.OutputState }

func (DomainPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainPermissions)(nil)).Elem()
}

func (o DomainPermissionsOutput) ToDomainPermissionsOutput() DomainPermissionsOutput {
	return o
}

func (o DomainPermissionsOutput) ToDomainPermissionsOutputWithContext(ctx context.Context) DomainPermissionsOutput {
	return o
}

func (o DomainPermissionsOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainPermissions) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o DomainPermissionsOutput) DomainOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainPermissions) pulumi.StringOutput { return v.DomainOwner }).(pulumi.StringOutput)
}

func (o DomainPermissionsOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainPermissions) pulumi.StringOutput { return v.PolicyDocument }).(pulumi.StringOutput)
}

func (o DomainPermissionsOutput) PolicyRevision() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainPermissions) pulumi.StringOutput { return v.PolicyRevision }).(pulumi.StringOutput)
}

func (o DomainPermissionsOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainPermissions) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

type DomainPermissionsArrayOutput struct{ *pulumi.OutputState }

func (DomainPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainPermissions)(nil)).Elem()
}

func (o DomainPermissionsArrayOutput) ToDomainPermissionsArrayOutput() DomainPermissionsArrayOutput {
	return o
}

func (o DomainPermissionsArrayOutput) ToDomainPermissionsArrayOutputWithContext(ctx context.Context) DomainPermissionsArrayOutput {
	return o
}

func (o DomainPermissionsArrayOutput) Index(i pulumi.IntInput) DomainPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainPermissions {
		return vs[0].([]*DomainPermissions)[vs[1].(int)]
	}).(DomainPermissionsOutput)
}

type DomainPermissionsMapOutput struct{ *pulumi.OutputState }

func (DomainPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainPermissions)(nil)).Elem()
}

func (o DomainPermissionsMapOutput) ToDomainPermissionsMapOutput() DomainPermissionsMapOutput {
	return o
}

func (o DomainPermissionsMapOutput) ToDomainPermissionsMapOutputWithContext(ctx context.Context) DomainPermissionsMapOutput {
	return o
}

func (o DomainPermissionsMapOutput) MapIndex(k pulumi.StringInput) DomainPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainPermissions {
		return vs[0].(map[string]*DomainPermissions)[vs[1].(string)]
	}).(DomainPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainPermissionsInput)(nil)).Elem(), &DomainPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainPermissionsArrayInput)(nil)).Elem(), DomainPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainPermissionsMapInput)(nil)).Elem(), DomainPermissionsMap{})
	pulumi.RegisterOutputType(DomainPermissionsOutput{})
	pulumi.RegisterOutputType(DomainPermissionsArrayOutput{})
	pulumi.RegisterOutputType(DomainPermissionsMapOutput{})
}
