// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codeartifact

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RepositoryPermissionsPolicy struct {
	pulumi.CustomResourceState

	Domain         pulumi.StringOutput `pulumi:"domain"`
	DomainOwner    pulumi.StringOutput `pulumi:"domainOwner"`
	PolicyDocument pulumi.StringOutput `pulumi:"policyDocument"`
	PolicyRevision pulumi.StringOutput `pulumi:"policyRevision"`
	Repository     pulumi.StringOutput `pulumi:"repository"`
	ResourceArn    pulumi.StringOutput `pulumi:"resourceArn"`
}

// NewRepositoryPermissionsPolicy registers a new resource with the given unique name, arguments, and options.
func NewRepositoryPermissionsPolicy(ctx *pulumi.Context,
	name string, args *RepositoryPermissionsPolicyArgs, opts ...pulumi.ResourceOption) (*RepositoryPermissionsPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.PolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDocument'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	var resource RepositoryPermissionsPolicy
	err := ctx.RegisterResource("aws:codeartifact/repositoryPermissionsPolicy:RepositoryPermissionsPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryPermissionsPolicy gets an existing RepositoryPermissionsPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryPermissionsPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryPermissionsPolicyState, opts ...pulumi.ResourceOption) (*RepositoryPermissionsPolicy, error) {
	var resource RepositoryPermissionsPolicy
	err := ctx.ReadResource("aws:codeartifact/repositoryPermissionsPolicy:RepositoryPermissionsPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryPermissionsPolicy resources.
type repositoryPermissionsPolicyState struct {
	Domain         *string `pulumi:"domain"`
	DomainOwner    *string `pulumi:"domainOwner"`
	PolicyDocument *string `pulumi:"policyDocument"`
	PolicyRevision *string `pulumi:"policyRevision"`
	Repository     *string `pulumi:"repository"`
	ResourceArn    *string `pulumi:"resourceArn"`
}

type RepositoryPermissionsPolicyState struct {
	Domain         pulumi.StringPtrInput
	DomainOwner    pulumi.StringPtrInput
	PolicyDocument pulumi.StringPtrInput
	PolicyRevision pulumi.StringPtrInput
	Repository     pulumi.StringPtrInput
	ResourceArn    pulumi.StringPtrInput
}

func (RepositoryPermissionsPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryPermissionsPolicyState)(nil)).Elem()
}

type repositoryPermissionsPolicyArgs struct {
	Domain         string  `pulumi:"domain"`
	DomainOwner    *string `pulumi:"domainOwner"`
	PolicyDocument string  `pulumi:"policyDocument"`
	PolicyRevision *string `pulumi:"policyRevision"`
	Repository     string  `pulumi:"repository"`
}

// The set of arguments for constructing a RepositoryPermissionsPolicy resource.
type RepositoryPermissionsPolicyArgs struct {
	Domain         pulumi.StringInput
	DomainOwner    pulumi.StringPtrInput
	PolicyDocument pulumi.StringInput
	PolicyRevision pulumi.StringPtrInput
	Repository     pulumi.StringInput
}

func (RepositoryPermissionsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryPermissionsPolicyArgs)(nil)).Elem()
}

type RepositoryPermissionsPolicyInput interface {
	pulumi.Input

	ToRepositoryPermissionsPolicyOutput() RepositoryPermissionsPolicyOutput
	ToRepositoryPermissionsPolicyOutputWithContext(ctx context.Context) RepositoryPermissionsPolicyOutput
}

func (*RepositoryPermissionsPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryPermissionsPolicy)(nil)).Elem()
}

func (i *RepositoryPermissionsPolicy) ToRepositoryPermissionsPolicyOutput() RepositoryPermissionsPolicyOutput {
	return i.ToRepositoryPermissionsPolicyOutputWithContext(context.Background())
}

func (i *RepositoryPermissionsPolicy) ToRepositoryPermissionsPolicyOutputWithContext(ctx context.Context) RepositoryPermissionsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPermissionsPolicyOutput)
}

// RepositoryPermissionsPolicyArrayInput is an input type that accepts RepositoryPermissionsPolicyArray and RepositoryPermissionsPolicyArrayOutput values.
// You can construct a concrete instance of `RepositoryPermissionsPolicyArrayInput` via:
//
//	RepositoryPermissionsPolicyArray{ RepositoryPermissionsPolicyArgs{...} }
type RepositoryPermissionsPolicyArrayInput interface {
	pulumi.Input

	ToRepositoryPermissionsPolicyArrayOutput() RepositoryPermissionsPolicyArrayOutput
	ToRepositoryPermissionsPolicyArrayOutputWithContext(context.Context) RepositoryPermissionsPolicyArrayOutput
}

type RepositoryPermissionsPolicyArray []RepositoryPermissionsPolicyInput

func (RepositoryPermissionsPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryPermissionsPolicy)(nil)).Elem()
}

func (i RepositoryPermissionsPolicyArray) ToRepositoryPermissionsPolicyArrayOutput() RepositoryPermissionsPolicyArrayOutput {
	return i.ToRepositoryPermissionsPolicyArrayOutputWithContext(context.Background())
}

func (i RepositoryPermissionsPolicyArray) ToRepositoryPermissionsPolicyArrayOutputWithContext(ctx context.Context) RepositoryPermissionsPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPermissionsPolicyArrayOutput)
}

// RepositoryPermissionsPolicyMapInput is an input type that accepts RepositoryPermissionsPolicyMap and RepositoryPermissionsPolicyMapOutput values.
// You can construct a concrete instance of `RepositoryPermissionsPolicyMapInput` via:
//
//	RepositoryPermissionsPolicyMap{ "key": RepositoryPermissionsPolicyArgs{...} }
type RepositoryPermissionsPolicyMapInput interface {
	pulumi.Input

	ToRepositoryPermissionsPolicyMapOutput() RepositoryPermissionsPolicyMapOutput
	ToRepositoryPermissionsPolicyMapOutputWithContext(context.Context) RepositoryPermissionsPolicyMapOutput
}

type RepositoryPermissionsPolicyMap map[string]RepositoryPermissionsPolicyInput

func (RepositoryPermissionsPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryPermissionsPolicy)(nil)).Elem()
}

func (i RepositoryPermissionsPolicyMap) ToRepositoryPermissionsPolicyMapOutput() RepositoryPermissionsPolicyMapOutput {
	return i.ToRepositoryPermissionsPolicyMapOutputWithContext(context.Background())
}

func (i RepositoryPermissionsPolicyMap) ToRepositoryPermissionsPolicyMapOutputWithContext(ctx context.Context) RepositoryPermissionsPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPermissionsPolicyMapOutput)
}

type RepositoryPermissionsPolicyOutput struct{ *pulumi.OutputState }

func (RepositoryPermissionsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryPermissionsPolicy)(nil)).Elem()
}

func (o RepositoryPermissionsPolicyOutput) ToRepositoryPermissionsPolicyOutput() RepositoryPermissionsPolicyOutput {
	return o
}

func (o RepositoryPermissionsPolicyOutput) ToRepositoryPermissionsPolicyOutputWithContext(ctx context.Context) RepositoryPermissionsPolicyOutput {
	return o
}

func (o RepositoryPermissionsPolicyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPermissionsPolicy) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o RepositoryPermissionsPolicyOutput) DomainOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPermissionsPolicy) pulumi.StringOutput { return v.DomainOwner }).(pulumi.StringOutput)
}

func (o RepositoryPermissionsPolicyOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPermissionsPolicy) pulumi.StringOutput { return v.PolicyDocument }).(pulumi.StringOutput)
}

func (o RepositoryPermissionsPolicyOutput) PolicyRevision() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPermissionsPolicy) pulumi.StringOutput { return v.PolicyRevision }).(pulumi.StringOutput)
}

func (o RepositoryPermissionsPolicyOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPermissionsPolicy) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o RepositoryPermissionsPolicyOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPermissionsPolicy) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

type RepositoryPermissionsPolicyArrayOutput struct{ *pulumi.OutputState }

func (RepositoryPermissionsPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryPermissionsPolicy)(nil)).Elem()
}

func (o RepositoryPermissionsPolicyArrayOutput) ToRepositoryPermissionsPolicyArrayOutput() RepositoryPermissionsPolicyArrayOutput {
	return o
}

func (o RepositoryPermissionsPolicyArrayOutput) ToRepositoryPermissionsPolicyArrayOutputWithContext(ctx context.Context) RepositoryPermissionsPolicyArrayOutput {
	return o
}

func (o RepositoryPermissionsPolicyArrayOutput) Index(i pulumi.IntInput) RepositoryPermissionsPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryPermissionsPolicy {
		return vs[0].([]*RepositoryPermissionsPolicy)[vs[1].(int)]
	}).(RepositoryPermissionsPolicyOutput)
}

type RepositoryPermissionsPolicyMapOutput struct{ *pulumi.OutputState }

func (RepositoryPermissionsPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryPermissionsPolicy)(nil)).Elem()
}

func (o RepositoryPermissionsPolicyMapOutput) ToRepositoryPermissionsPolicyMapOutput() RepositoryPermissionsPolicyMapOutput {
	return o
}

func (o RepositoryPermissionsPolicyMapOutput) ToRepositoryPermissionsPolicyMapOutputWithContext(ctx context.Context) RepositoryPermissionsPolicyMapOutput {
	return o
}

func (o RepositoryPermissionsPolicyMapOutput) MapIndex(k pulumi.StringInput) RepositoryPermissionsPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryPermissionsPolicy {
		return vs[0].(map[string]*RepositoryPermissionsPolicy)[vs[1].(string)]
	}).(RepositoryPermissionsPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryPermissionsPolicyInput)(nil)).Elem(), &RepositoryPermissionsPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryPermissionsPolicyArrayInput)(nil)).Elem(), RepositoryPermissionsPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryPermissionsPolicyMapInput)(nil)).Elem(), RepositoryPermissionsPolicyMap{})
	pulumi.RegisterOutputType(RepositoryPermissionsPolicyOutput{})
	pulumi.RegisterOutputType(RepositoryPermissionsPolicyArrayOutput{})
	pulumi.RegisterOutputType(RepositoryPermissionsPolicyMapOutput{})
}
