// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codeartifact

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type RepositoryExternalConnection struct {
	// The name of the external connection associated with a repository.
	ExternalConnectionName *string `pulumi:"externalConnectionName"`
	// The package format associated with a repository's external connection.
	PackageFormat *string `pulumi:"packageFormat"`
	// The status of the external connection of a repository.
	Status *string `pulumi:"status"`
}

// RepositoryExternalConnectionInput is an input type that accepts RepositoryExternalConnectionArgs and RepositoryExternalConnectionOutput values.
// You can construct a concrete instance of `RepositoryExternalConnectionInput` via:
//
//          RepositoryExternalConnectionArgs{...}
type RepositoryExternalConnectionInput interface {
	pulumi.Input

	ToRepositoryExternalConnectionOutput() RepositoryExternalConnectionOutput
	ToRepositoryExternalConnectionOutputWithContext(context.Context) RepositoryExternalConnectionOutput
}

type RepositoryExternalConnectionArgs struct {
	// The name of the external connection associated with a repository.
	ExternalConnectionName pulumi.StringPtrInput `pulumi:"externalConnectionName"`
	// The package format associated with a repository's external connection.
	PackageFormat pulumi.StringPtrInput `pulumi:"packageFormat"`
	// The status of the external connection of a repository.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (RepositoryExternalConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryExternalConnection)(nil)).Elem()
}

func (i RepositoryExternalConnectionArgs) ToRepositoryExternalConnectionOutput() RepositoryExternalConnectionOutput {
	return i.ToRepositoryExternalConnectionOutputWithContext(context.Background())
}

func (i RepositoryExternalConnectionArgs) ToRepositoryExternalConnectionOutputWithContext(ctx context.Context) RepositoryExternalConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryExternalConnectionOutput)
}

// RepositoryExternalConnectionArrayInput is an input type that accepts RepositoryExternalConnectionArray and RepositoryExternalConnectionArrayOutput values.
// You can construct a concrete instance of `RepositoryExternalConnectionArrayInput` via:
//
//          RepositoryExternalConnectionArray{ RepositoryExternalConnectionArgs{...} }
type RepositoryExternalConnectionArrayInput interface {
	pulumi.Input

	ToRepositoryExternalConnectionArrayOutput() RepositoryExternalConnectionArrayOutput
	ToRepositoryExternalConnectionArrayOutputWithContext(context.Context) RepositoryExternalConnectionArrayOutput
}

type RepositoryExternalConnectionArray []RepositoryExternalConnectionInput

func (RepositoryExternalConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryExternalConnection)(nil)).Elem()
}

func (i RepositoryExternalConnectionArray) ToRepositoryExternalConnectionArrayOutput() RepositoryExternalConnectionArrayOutput {
	return i.ToRepositoryExternalConnectionArrayOutputWithContext(context.Background())
}

func (i RepositoryExternalConnectionArray) ToRepositoryExternalConnectionArrayOutputWithContext(ctx context.Context) RepositoryExternalConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryExternalConnectionArrayOutput)
}

type RepositoryExternalConnectionOutput struct{ *pulumi.OutputState }

func (RepositoryExternalConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryExternalConnection)(nil)).Elem()
}

func (o RepositoryExternalConnectionOutput) ToRepositoryExternalConnectionOutput() RepositoryExternalConnectionOutput {
	return o
}

func (o RepositoryExternalConnectionOutput) ToRepositoryExternalConnectionOutputWithContext(ctx context.Context) RepositoryExternalConnectionOutput {
	return o
}

// The name of the external connection associated with a repository.
func (o RepositoryExternalConnectionOutput) ExternalConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryExternalConnection) *string { return v.ExternalConnectionName }).(pulumi.StringPtrOutput)
}

// The package format associated with a repository's external connection.
func (o RepositoryExternalConnectionOutput) PackageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryExternalConnection) *string { return v.PackageFormat }).(pulumi.StringPtrOutput)
}

// The status of the external connection of a repository.
func (o RepositoryExternalConnectionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryExternalConnection) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type RepositoryExternalConnectionArrayOutput struct{ *pulumi.OutputState }

func (RepositoryExternalConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryExternalConnection)(nil)).Elem()
}

func (o RepositoryExternalConnectionArrayOutput) ToRepositoryExternalConnectionArrayOutput() RepositoryExternalConnectionArrayOutput {
	return o
}

func (o RepositoryExternalConnectionArrayOutput) ToRepositoryExternalConnectionArrayOutputWithContext(ctx context.Context) RepositoryExternalConnectionArrayOutput {
	return o
}

func (o RepositoryExternalConnectionArrayOutput) Index(i pulumi.IntInput) RepositoryExternalConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryExternalConnection {
		return vs[0].([]RepositoryExternalConnection)[vs[1].(int)]
	}).(RepositoryExternalConnectionOutput)
}

type RepositoryUpstream struct {
	// The name of an upstream repository.
	RepositoryName string `pulumi:"repositoryName"`
}

// RepositoryUpstreamInput is an input type that accepts RepositoryUpstreamArgs and RepositoryUpstreamOutput values.
// You can construct a concrete instance of `RepositoryUpstreamInput` via:
//
//          RepositoryUpstreamArgs{...}
type RepositoryUpstreamInput interface {
	pulumi.Input

	ToRepositoryUpstreamOutput() RepositoryUpstreamOutput
	ToRepositoryUpstreamOutputWithContext(context.Context) RepositoryUpstreamOutput
}

type RepositoryUpstreamArgs struct {
	// The name of an upstream repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
}

func (RepositoryUpstreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryUpstream)(nil)).Elem()
}

func (i RepositoryUpstreamArgs) ToRepositoryUpstreamOutput() RepositoryUpstreamOutput {
	return i.ToRepositoryUpstreamOutputWithContext(context.Background())
}

func (i RepositoryUpstreamArgs) ToRepositoryUpstreamOutputWithContext(ctx context.Context) RepositoryUpstreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryUpstreamOutput)
}

// RepositoryUpstreamArrayInput is an input type that accepts RepositoryUpstreamArray and RepositoryUpstreamArrayOutput values.
// You can construct a concrete instance of `RepositoryUpstreamArrayInput` via:
//
//          RepositoryUpstreamArray{ RepositoryUpstreamArgs{...} }
type RepositoryUpstreamArrayInput interface {
	pulumi.Input

	ToRepositoryUpstreamArrayOutput() RepositoryUpstreamArrayOutput
	ToRepositoryUpstreamArrayOutputWithContext(context.Context) RepositoryUpstreamArrayOutput
}

type RepositoryUpstreamArray []RepositoryUpstreamInput

func (RepositoryUpstreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryUpstream)(nil)).Elem()
}

func (i RepositoryUpstreamArray) ToRepositoryUpstreamArrayOutput() RepositoryUpstreamArrayOutput {
	return i.ToRepositoryUpstreamArrayOutputWithContext(context.Background())
}

func (i RepositoryUpstreamArray) ToRepositoryUpstreamArrayOutputWithContext(ctx context.Context) RepositoryUpstreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryUpstreamArrayOutput)
}

type RepositoryUpstreamOutput struct{ *pulumi.OutputState }

func (RepositoryUpstreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryUpstream)(nil)).Elem()
}

func (o RepositoryUpstreamOutput) ToRepositoryUpstreamOutput() RepositoryUpstreamOutput {
	return o
}

func (o RepositoryUpstreamOutput) ToRepositoryUpstreamOutputWithContext(ctx context.Context) RepositoryUpstreamOutput {
	return o
}

// The name of an upstream repository.
func (o RepositoryUpstreamOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryUpstream) string { return v.RepositoryName }).(pulumi.StringOutput)
}

type RepositoryUpstreamArrayOutput struct{ *pulumi.OutputState }

func (RepositoryUpstreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryUpstream)(nil)).Elem()
}

func (o RepositoryUpstreamArrayOutput) ToRepositoryUpstreamArrayOutput() RepositoryUpstreamArrayOutput {
	return o
}

func (o RepositoryUpstreamArrayOutput) ToRepositoryUpstreamArrayOutputWithContext(ctx context.Context) RepositoryUpstreamArrayOutput {
	return o
}

func (o RepositoryUpstreamArrayOutput) Index(i pulumi.IntInput) RepositoryUpstreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryUpstream {
		return vs[0].([]RepositoryUpstream)[vs[1].(int)]
	}).(RepositoryUpstreamOutput)
}

func init() {
	pulumi.RegisterOutputType(RepositoryExternalConnectionOutput{})
	pulumi.RegisterOutputType(RepositoryExternalConnectionArrayOutput{})
	pulumi.RegisterOutputType(RepositoryUpstreamOutput{})
	pulumi.RegisterOutputType(RepositoryUpstreamArrayOutput{})
}
