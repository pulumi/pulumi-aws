// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codeartifact

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type RepositoryExternalConnections struct {
	// The name of the external connection associated with a repository.
	ExternalConnectionName string  `pulumi:"externalConnectionName"`
	PackageFormat          *string `pulumi:"packageFormat"`
	Status                 *string `pulumi:"status"`
}

// RepositoryExternalConnectionsInput is an input type that accepts RepositoryExternalConnectionsArgs and RepositoryExternalConnectionsOutput values.
// You can construct a concrete instance of `RepositoryExternalConnectionsInput` via:
//
//          RepositoryExternalConnectionsArgs{...}
type RepositoryExternalConnectionsInput interface {
	pulumi.Input

	ToRepositoryExternalConnectionsOutput() RepositoryExternalConnectionsOutput
	ToRepositoryExternalConnectionsOutputWithContext(context.Context) RepositoryExternalConnectionsOutput
}

type RepositoryExternalConnectionsArgs struct {
	// The name of the external connection associated with a repository.
	ExternalConnectionName pulumi.StringInput    `pulumi:"externalConnectionName"`
	PackageFormat          pulumi.StringPtrInput `pulumi:"packageFormat"`
	Status                 pulumi.StringPtrInput `pulumi:"status"`
}

func (RepositoryExternalConnectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryExternalConnections)(nil)).Elem()
}

func (i RepositoryExternalConnectionsArgs) ToRepositoryExternalConnectionsOutput() RepositoryExternalConnectionsOutput {
	return i.ToRepositoryExternalConnectionsOutputWithContext(context.Background())
}

func (i RepositoryExternalConnectionsArgs) ToRepositoryExternalConnectionsOutputWithContext(ctx context.Context) RepositoryExternalConnectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryExternalConnectionsOutput)
}

func (i RepositoryExternalConnectionsArgs) ToRepositoryExternalConnectionsPtrOutput() RepositoryExternalConnectionsPtrOutput {
	return i.ToRepositoryExternalConnectionsPtrOutputWithContext(context.Background())
}

func (i RepositoryExternalConnectionsArgs) ToRepositoryExternalConnectionsPtrOutputWithContext(ctx context.Context) RepositoryExternalConnectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryExternalConnectionsOutput).ToRepositoryExternalConnectionsPtrOutputWithContext(ctx)
}

// RepositoryExternalConnectionsPtrInput is an input type that accepts RepositoryExternalConnectionsArgs, RepositoryExternalConnectionsPtr and RepositoryExternalConnectionsPtrOutput values.
// You can construct a concrete instance of `RepositoryExternalConnectionsPtrInput` via:
//
//          RepositoryExternalConnectionsArgs{...}
//
//  or:
//
//          nil
type RepositoryExternalConnectionsPtrInput interface {
	pulumi.Input

	ToRepositoryExternalConnectionsPtrOutput() RepositoryExternalConnectionsPtrOutput
	ToRepositoryExternalConnectionsPtrOutputWithContext(context.Context) RepositoryExternalConnectionsPtrOutput
}

type repositoryExternalConnectionsPtrType RepositoryExternalConnectionsArgs

func RepositoryExternalConnectionsPtr(v *RepositoryExternalConnectionsArgs) RepositoryExternalConnectionsPtrInput {
	return (*repositoryExternalConnectionsPtrType)(v)
}

func (*repositoryExternalConnectionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryExternalConnections)(nil)).Elem()
}

func (i *repositoryExternalConnectionsPtrType) ToRepositoryExternalConnectionsPtrOutput() RepositoryExternalConnectionsPtrOutput {
	return i.ToRepositoryExternalConnectionsPtrOutputWithContext(context.Background())
}

func (i *repositoryExternalConnectionsPtrType) ToRepositoryExternalConnectionsPtrOutputWithContext(ctx context.Context) RepositoryExternalConnectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryExternalConnectionsPtrOutput)
}

type RepositoryExternalConnectionsOutput struct{ *pulumi.OutputState }

func (RepositoryExternalConnectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryExternalConnections)(nil)).Elem()
}

func (o RepositoryExternalConnectionsOutput) ToRepositoryExternalConnectionsOutput() RepositoryExternalConnectionsOutput {
	return o
}

func (o RepositoryExternalConnectionsOutput) ToRepositoryExternalConnectionsOutputWithContext(ctx context.Context) RepositoryExternalConnectionsOutput {
	return o
}

func (o RepositoryExternalConnectionsOutput) ToRepositoryExternalConnectionsPtrOutput() RepositoryExternalConnectionsPtrOutput {
	return o.ToRepositoryExternalConnectionsPtrOutputWithContext(context.Background())
}

func (o RepositoryExternalConnectionsOutput) ToRepositoryExternalConnectionsPtrOutputWithContext(ctx context.Context) RepositoryExternalConnectionsPtrOutput {
	return o.ApplyT(func(v RepositoryExternalConnections) *RepositoryExternalConnections {
		return &v
	}).(RepositoryExternalConnectionsPtrOutput)
}

// The name of the external connection associated with a repository.
func (o RepositoryExternalConnectionsOutput) ExternalConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryExternalConnections) string { return v.ExternalConnectionName }).(pulumi.StringOutput)
}

func (o RepositoryExternalConnectionsOutput) PackageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryExternalConnections) *string { return v.PackageFormat }).(pulumi.StringPtrOutput)
}

func (o RepositoryExternalConnectionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryExternalConnections) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type RepositoryExternalConnectionsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryExternalConnectionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryExternalConnections)(nil)).Elem()
}

func (o RepositoryExternalConnectionsPtrOutput) ToRepositoryExternalConnectionsPtrOutput() RepositoryExternalConnectionsPtrOutput {
	return o
}

func (o RepositoryExternalConnectionsPtrOutput) ToRepositoryExternalConnectionsPtrOutputWithContext(ctx context.Context) RepositoryExternalConnectionsPtrOutput {
	return o
}

func (o RepositoryExternalConnectionsPtrOutput) Elem() RepositoryExternalConnectionsOutput {
	return o.ApplyT(func(v *RepositoryExternalConnections) RepositoryExternalConnections { return *v }).(RepositoryExternalConnectionsOutput)
}

// The name of the external connection associated with a repository.
func (o RepositoryExternalConnectionsPtrOutput) ExternalConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryExternalConnections) *string {
		if v == nil {
			return nil
		}
		return &v.ExternalConnectionName
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryExternalConnectionsPtrOutput) PackageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryExternalConnections) *string {
		if v == nil {
			return nil
		}
		return v.PackageFormat
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryExternalConnectionsPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryExternalConnections) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type RepositoryUpstream struct {
	// The name of an upstream repository.
	RepositoryName string `pulumi:"repositoryName"`
}

// RepositoryUpstreamInput is an input type that accepts RepositoryUpstreamArgs and RepositoryUpstreamOutput values.
// You can construct a concrete instance of `RepositoryUpstreamInput` via:
//
//          RepositoryUpstreamArgs{...}
type RepositoryUpstreamInput interface {
	pulumi.Input

	ToRepositoryUpstreamOutput() RepositoryUpstreamOutput
	ToRepositoryUpstreamOutputWithContext(context.Context) RepositoryUpstreamOutput
}

type RepositoryUpstreamArgs struct {
	// The name of an upstream repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
}

func (RepositoryUpstreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryUpstream)(nil)).Elem()
}

func (i RepositoryUpstreamArgs) ToRepositoryUpstreamOutput() RepositoryUpstreamOutput {
	return i.ToRepositoryUpstreamOutputWithContext(context.Background())
}

func (i RepositoryUpstreamArgs) ToRepositoryUpstreamOutputWithContext(ctx context.Context) RepositoryUpstreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryUpstreamOutput)
}

// RepositoryUpstreamArrayInput is an input type that accepts RepositoryUpstreamArray and RepositoryUpstreamArrayOutput values.
// You can construct a concrete instance of `RepositoryUpstreamArrayInput` via:
//
//          RepositoryUpstreamArray{ RepositoryUpstreamArgs{...} }
type RepositoryUpstreamArrayInput interface {
	pulumi.Input

	ToRepositoryUpstreamArrayOutput() RepositoryUpstreamArrayOutput
	ToRepositoryUpstreamArrayOutputWithContext(context.Context) RepositoryUpstreamArrayOutput
}

type RepositoryUpstreamArray []RepositoryUpstreamInput

func (RepositoryUpstreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryUpstream)(nil)).Elem()
}

func (i RepositoryUpstreamArray) ToRepositoryUpstreamArrayOutput() RepositoryUpstreamArrayOutput {
	return i.ToRepositoryUpstreamArrayOutputWithContext(context.Background())
}

func (i RepositoryUpstreamArray) ToRepositoryUpstreamArrayOutputWithContext(ctx context.Context) RepositoryUpstreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryUpstreamArrayOutput)
}

type RepositoryUpstreamOutput struct{ *pulumi.OutputState }

func (RepositoryUpstreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryUpstream)(nil)).Elem()
}

func (o RepositoryUpstreamOutput) ToRepositoryUpstreamOutput() RepositoryUpstreamOutput {
	return o
}

func (o RepositoryUpstreamOutput) ToRepositoryUpstreamOutputWithContext(ctx context.Context) RepositoryUpstreamOutput {
	return o
}

// The name of an upstream repository.
func (o RepositoryUpstreamOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryUpstream) string { return v.RepositoryName }).(pulumi.StringOutput)
}

type RepositoryUpstreamArrayOutput struct{ *pulumi.OutputState }

func (RepositoryUpstreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryUpstream)(nil)).Elem()
}

func (o RepositoryUpstreamArrayOutput) ToRepositoryUpstreamArrayOutput() RepositoryUpstreamArrayOutput {
	return o
}

func (o RepositoryUpstreamArrayOutput) ToRepositoryUpstreamArrayOutputWithContext(ctx context.Context) RepositoryUpstreamArrayOutput {
	return o
}

func (o RepositoryUpstreamArrayOutput) Index(i pulumi.IntInput) RepositoryUpstreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryUpstream {
		return vs[0].([]RepositoryUpstream)[vs[1].(int)]
	}).(RepositoryUpstreamOutput)
}

func init() {
	pulumi.RegisterOutputType(RepositoryExternalConnectionsOutput{})
	pulumi.RegisterOutputType(RepositoryExternalConnectionsPtrOutput{})
	pulumi.RegisterOutputType(RepositoryUpstreamOutput{})
	pulumi.RegisterOutputType(RepositoryUpstreamArrayOutput{})
}
