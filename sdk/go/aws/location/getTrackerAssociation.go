// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve information about a Location Service Tracker Association.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/location"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := location.LookupTrackerAssociation(ctx, &location.LookupTrackerAssociationArgs{
//				ConsumerArn: "arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollectionConsumer",
//				TrackerName: "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTrackerAssociation(ctx *pulumi.Context, args *LookupTrackerAssociationArgs, opts ...pulumi.InvokeOption) (*LookupTrackerAssociationResult, error) {
	var rv LookupTrackerAssociationResult
	err := ctx.Invoke("aws:location/getTrackerAssociation:getTrackerAssociation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTrackerAssociation.
type LookupTrackerAssociationArgs struct {
	// ARN of the geofence collection associated to tracker resource.
	ConsumerArn string `pulumi:"consumerArn"`
	// Name of the tracker resource associated with a geofence collection.
	TrackerName string `pulumi:"trackerName"`
}

// A collection of values returned by getTrackerAssociation.
type LookupTrackerAssociationResult struct {
	ConsumerArn string `pulumi:"consumerArn"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	TrackerName string `pulumi:"trackerName"`
}

func LookupTrackerAssociationOutput(ctx *pulumi.Context, args LookupTrackerAssociationOutputArgs, opts ...pulumi.InvokeOption) LookupTrackerAssociationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTrackerAssociationResult, error) {
			args := v.(LookupTrackerAssociationArgs)
			r, err := LookupTrackerAssociation(ctx, &args, opts...)
			var s LookupTrackerAssociationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTrackerAssociationResultOutput)
}

// A collection of arguments for invoking getTrackerAssociation.
type LookupTrackerAssociationOutputArgs struct {
	// ARN of the geofence collection associated to tracker resource.
	ConsumerArn pulumi.StringInput `pulumi:"consumerArn"`
	// Name of the tracker resource associated with a geofence collection.
	TrackerName pulumi.StringInput `pulumi:"trackerName"`
}

func (LookupTrackerAssociationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrackerAssociationArgs)(nil)).Elem()
}

// A collection of values returned by getTrackerAssociation.
type LookupTrackerAssociationResultOutput struct{ *pulumi.OutputState }

func (LookupTrackerAssociationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrackerAssociationResult)(nil)).Elem()
}

func (o LookupTrackerAssociationResultOutput) ToLookupTrackerAssociationResultOutput() LookupTrackerAssociationResultOutput {
	return o
}

func (o LookupTrackerAssociationResultOutput) ToLookupTrackerAssociationResultOutputWithContext(ctx context.Context) LookupTrackerAssociationResultOutput {
	return o
}

func (o LookupTrackerAssociationResultOutput) ConsumerArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrackerAssociationResult) string { return v.ConsumerArn }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTrackerAssociationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrackerAssociationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTrackerAssociationResultOutput) TrackerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrackerAssociationResult) string { return v.TrackerName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTrackerAssociationResultOutput{})
}
