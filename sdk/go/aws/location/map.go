// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Location Service Map.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/location"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := location.NewMap(ctx, "example", &location.MapArgs{
//				Configuration: &location.MapConfigurationArgs{
//					Style: pulumi.String("VectorHereBerlin"),
//				},
//				MapName: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_location_map` resources using the map name. For example:
//
// ```sh
//
//	$ pulumi import aws:location/map:Map example example
//
// ```
type Map struct {
	pulumi.CustomResourceState

	// Configuration block with the map style selected from an available data provider. Detailed below.
	Configuration MapConfigurationOutput `pulumi:"configuration"`
	// The timestamp for when the map resource was created in ISO 8601 format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// An optional description for the map resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Amazon Resource Name (ARN) for the map resource. Used to specify a resource across all AWS.
	MapArn pulumi.StringOutput `pulumi:"mapArn"`
	// The name for the map resource.
	//
	// The following arguments are optional:
	MapName pulumi.StringOutput `pulumi:"mapName"`
	// Key-value tags for the map. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The timestamp for when the map resource was last updated in ISO 8601 format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewMap registers a new resource with the given unique name, arguments, and options.
func NewMap(ctx *pulumi.Context,
	name string, args *MapArgs, opts ...pulumi.ResourceOption) (*Map, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.MapName == nil {
		return nil, errors.New("invalid value for required argument 'MapName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Map
	err := ctx.RegisterResource("aws:location/map:Map", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMap gets an existing Map resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MapState, opts ...pulumi.ResourceOption) (*Map, error) {
	var resource Map
	err := ctx.ReadResource("aws:location/map:Map", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Map resources.
type mapState struct {
	// Configuration block with the map style selected from an available data provider. Detailed below.
	Configuration *MapConfiguration `pulumi:"configuration"`
	// The timestamp for when the map resource was created in ISO 8601 format.
	CreateTime *string `pulumi:"createTime"`
	// An optional description for the map resource.
	Description *string `pulumi:"description"`
	// The Amazon Resource Name (ARN) for the map resource. Used to specify a resource across all AWS.
	MapArn *string `pulumi:"mapArn"`
	// The name for the map resource.
	//
	// The following arguments are optional:
	MapName *string `pulumi:"mapName"`
	// Key-value tags for the map. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The timestamp for when the map resource was last updated in ISO 8601 format.
	UpdateTime *string `pulumi:"updateTime"`
}

type MapState struct {
	// Configuration block with the map style selected from an available data provider. Detailed below.
	Configuration MapConfigurationPtrInput
	// The timestamp for when the map resource was created in ISO 8601 format.
	CreateTime pulumi.StringPtrInput
	// An optional description for the map resource.
	Description pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) for the map resource. Used to specify a resource across all AWS.
	MapArn pulumi.StringPtrInput
	// The name for the map resource.
	//
	// The following arguments are optional:
	MapName pulumi.StringPtrInput
	// Key-value tags for the map. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// The timestamp for when the map resource was last updated in ISO 8601 format.
	UpdateTime pulumi.StringPtrInput
}

func (MapState) ElementType() reflect.Type {
	return reflect.TypeOf((*mapState)(nil)).Elem()
}

type mapArgs struct {
	// Configuration block with the map style selected from an available data provider. Detailed below.
	Configuration MapConfiguration `pulumi:"configuration"`
	// An optional description for the map resource.
	Description *string `pulumi:"description"`
	// The name for the map resource.
	//
	// The following arguments are optional:
	MapName string `pulumi:"mapName"`
	// Key-value tags for the map. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Map resource.
type MapArgs struct {
	// Configuration block with the map style selected from an available data provider. Detailed below.
	Configuration MapConfigurationInput
	// An optional description for the map resource.
	Description pulumi.StringPtrInput
	// The name for the map resource.
	//
	// The following arguments are optional:
	MapName pulumi.StringInput
	// Key-value tags for the map. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (MapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mapArgs)(nil)).Elem()
}

type MapInput interface {
	pulumi.Input

	ToMapOutput() MapOutput
	ToMapOutputWithContext(ctx context.Context) MapOutput
}

func (*Map) ElementType() reflect.Type {
	return reflect.TypeOf((**Map)(nil)).Elem()
}

func (i *Map) ToMapOutput() MapOutput {
	return i.ToMapOutputWithContext(context.Background())
}

func (i *Map) ToMapOutputWithContext(ctx context.Context) MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapOutput)
}

// MapArrayInput is an input type that accepts MapArray and MapArrayOutput values.
// You can construct a concrete instance of `MapArrayInput` via:
//
//	MapArray{ MapArgs{...} }
type MapArrayInput interface {
	pulumi.Input

	ToMapArrayOutput() MapArrayOutput
	ToMapArrayOutputWithContext(context.Context) MapArrayOutput
}

type MapArray []MapInput

func (MapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Map)(nil)).Elem()
}

func (i MapArray) ToMapArrayOutput() MapArrayOutput {
	return i.ToMapArrayOutputWithContext(context.Background())
}

func (i MapArray) ToMapArrayOutputWithContext(ctx context.Context) MapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapArrayOutput)
}

// MapMapInput is an input type that accepts MapMap and MapMapOutput values.
// You can construct a concrete instance of `MapMapInput` via:
//
//	MapMap{ "key": MapArgs{...} }
type MapMapInput interface {
	pulumi.Input

	ToMapMapOutput() MapMapOutput
	ToMapMapOutputWithContext(context.Context) MapMapOutput
}

type MapMap map[string]MapInput

func (MapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Map)(nil)).Elem()
}

func (i MapMap) ToMapMapOutput() MapMapOutput {
	return i.ToMapMapOutputWithContext(context.Background())
}

func (i MapMap) ToMapMapOutputWithContext(ctx context.Context) MapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapMapOutput)
}

type MapOutput struct{ *pulumi.OutputState }

func (MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Map)(nil)).Elem()
}

func (o MapOutput) ToMapOutput() MapOutput {
	return o
}

func (o MapOutput) ToMapOutputWithContext(ctx context.Context) MapOutput {
	return o
}

// Configuration block with the map style selected from an available data provider. Detailed below.
func (o MapOutput) Configuration() MapConfigurationOutput {
	return o.ApplyT(func(v *Map) MapConfigurationOutput { return v.Configuration }).(MapConfigurationOutput)
}

// The timestamp for when the map resource was created in ISO 8601 format.
func (o MapOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Map) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// An optional description for the map resource.
func (o MapOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Map) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the map resource. Used to specify a resource across all AWS.
func (o MapOutput) MapArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Map) pulumi.StringOutput { return v.MapArn }).(pulumi.StringOutput)
}

// The name for the map resource.
//
// The following arguments are optional:
func (o MapOutput) MapName() pulumi.StringOutput {
	return o.ApplyT(func(v *Map) pulumi.StringOutput { return v.MapName }).(pulumi.StringOutput)
}

// Key-value tags for the map. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o MapOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Map) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o MapOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Map) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The timestamp for when the map resource was last updated in ISO 8601 format.
func (o MapOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Map) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type MapArrayOutput struct{ *pulumi.OutputState }

func (MapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Map)(nil)).Elem()
}

func (o MapArrayOutput) ToMapArrayOutput() MapArrayOutput {
	return o
}

func (o MapArrayOutput) ToMapArrayOutputWithContext(ctx context.Context) MapArrayOutput {
	return o
}

func (o MapArrayOutput) Index(i pulumi.IntInput) MapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Map {
		return vs[0].([]*Map)[vs[1].(int)]
	}).(MapOutput)
}

type MapMapOutput struct{ *pulumi.OutputState }

func (MapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Map)(nil)).Elem()
}

func (o MapMapOutput) ToMapMapOutput() MapMapOutput {
	return o
}

func (o MapMapOutput) ToMapMapOutputWithContext(ctx context.Context) MapMapOutput {
	return o
}

func (o MapMapOutput) MapIndex(k pulumi.StringInput) MapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Map {
		return vs[0].(map[string]*Map)[vs[1].(string)]
	}).(MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MapInput)(nil)).Elem(), &Map{})
	pulumi.RegisterInputType(reflect.TypeOf((*MapArrayInput)(nil)).Elem(), MapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MapMapInput)(nil)).Elem(), MapMap{})
	pulumi.RegisterOutputType(MapOutput{})
	pulumi.RegisterOutputType(MapArrayOutput{})
	pulumi.RegisterOutputType(MapMapOutput{})
}
