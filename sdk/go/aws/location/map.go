// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Map struct {
	pulumi.CustomResourceState

	Configuration MapConfigurationOutput `pulumi:"configuration"`
	CreateTime    pulumi.StringOutput    `pulumi:"createTime"`
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	MapArn        pulumi.StringOutput    `pulumi:"mapArn"`
	MapName       pulumi.StringOutput    `pulumi:"mapName"`
	Tags          pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll       pulumi.StringMapOutput `pulumi:"tagsAll"`
	UpdateTime    pulumi.StringOutput    `pulumi:"updateTime"`
}

// NewMap registers a new resource with the given unique name, arguments, and options.
func NewMap(ctx *pulumi.Context,
	name string, args *MapArgs, opts ...pulumi.ResourceOption) (*Map, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.MapName == nil {
		return nil, errors.New("invalid value for required argument 'MapName'")
	}
	var resource Map
	err := ctx.RegisterResource("aws:location/map:Map", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMap gets an existing Map resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MapState, opts ...pulumi.ResourceOption) (*Map, error) {
	var resource Map
	err := ctx.ReadResource("aws:location/map:Map", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Map resources.
type mapState struct {
	Configuration *MapConfiguration `pulumi:"configuration"`
	CreateTime    *string           `pulumi:"createTime"`
	Description   *string           `pulumi:"description"`
	MapArn        *string           `pulumi:"mapArn"`
	MapName       *string           `pulumi:"mapName"`
	Tags          map[string]string `pulumi:"tags"`
	TagsAll       map[string]string `pulumi:"tagsAll"`
	UpdateTime    *string           `pulumi:"updateTime"`
}

type MapState struct {
	Configuration MapConfigurationPtrInput
	CreateTime    pulumi.StringPtrInput
	Description   pulumi.StringPtrInput
	MapArn        pulumi.StringPtrInput
	MapName       pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
	TagsAll       pulumi.StringMapInput
	UpdateTime    pulumi.StringPtrInput
}

func (MapState) ElementType() reflect.Type {
	return reflect.TypeOf((*mapState)(nil)).Elem()
}

type mapArgs struct {
	Configuration MapConfiguration  `pulumi:"configuration"`
	Description   *string           `pulumi:"description"`
	MapName       string            `pulumi:"mapName"`
	Tags          map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Map resource.
type MapArgs struct {
	Configuration MapConfigurationInput
	Description   pulumi.StringPtrInput
	MapName       pulumi.StringInput
	Tags          pulumi.StringMapInput
}

func (MapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mapArgs)(nil)).Elem()
}

type MapInput interface {
	pulumi.Input

	ToMapOutput() MapOutput
	ToMapOutputWithContext(ctx context.Context) MapOutput
}

func (*Map) ElementType() reflect.Type {
	return reflect.TypeOf((**Map)(nil)).Elem()
}

func (i *Map) ToMapOutput() MapOutput {
	return i.ToMapOutputWithContext(context.Background())
}

func (i *Map) ToMapOutputWithContext(ctx context.Context) MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapOutput)
}

// MapArrayInput is an input type that accepts MapArray and MapArrayOutput values.
// You can construct a concrete instance of `MapArrayInput` via:
//
//	MapArray{ MapArgs{...} }
type MapArrayInput interface {
	pulumi.Input

	ToMapArrayOutput() MapArrayOutput
	ToMapArrayOutputWithContext(context.Context) MapArrayOutput
}

type MapArray []MapInput

func (MapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Map)(nil)).Elem()
}

func (i MapArray) ToMapArrayOutput() MapArrayOutput {
	return i.ToMapArrayOutputWithContext(context.Background())
}

func (i MapArray) ToMapArrayOutputWithContext(ctx context.Context) MapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapArrayOutput)
}

// MapMapInput is an input type that accepts MapMap and MapMapOutput values.
// You can construct a concrete instance of `MapMapInput` via:
//
//	MapMap{ "key": MapArgs{...} }
type MapMapInput interface {
	pulumi.Input

	ToMapMapOutput() MapMapOutput
	ToMapMapOutputWithContext(context.Context) MapMapOutput
}

type MapMap map[string]MapInput

func (MapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Map)(nil)).Elem()
}

func (i MapMap) ToMapMapOutput() MapMapOutput {
	return i.ToMapMapOutputWithContext(context.Background())
}

func (i MapMap) ToMapMapOutputWithContext(ctx context.Context) MapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapMapOutput)
}

type MapOutput struct{ *pulumi.OutputState }

func (MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Map)(nil)).Elem()
}

func (o MapOutput) ToMapOutput() MapOutput {
	return o
}

func (o MapOutput) ToMapOutputWithContext(ctx context.Context) MapOutput {
	return o
}

func (o MapOutput) Configuration() MapConfigurationOutput {
	return o.ApplyT(func(v *Map) MapConfigurationOutput { return v.Configuration }).(MapConfigurationOutput)
}

func (o MapOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Map) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o MapOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Map) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MapOutput) MapArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Map) pulumi.StringOutput { return v.MapArn }).(pulumi.StringOutput)
}

func (o MapOutput) MapName() pulumi.StringOutput {
	return o.ApplyT(func(v *Map) pulumi.StringOutput { return v.MapName }).(pulumi.StringOutput)
}

func (o MapOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Map) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o MapOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Map) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o MapOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Map) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type MapArrayOutput struct{ *pulumi.OutputState }

func (MapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Map)(nil)).Elem()
}

func (o MapArrayOutput) ToMapArrayOutput() MapArrayOutput {
	return o
}

func (o MapArrayOutput) ToMapArrayOutputWithContext(ctx context.Context) MapArrayOutput {
	return o
}

func (o MapArrayOutput) Index(i pulumi.IntInput) MapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Map {
		return vs[0].([]*Map)[vs[1].(int)]
	}).(MapOutput)
}

type MapMapOutput struct{ *pulumi.OutputState }

func (MapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Map)(nil)).Elem()
}

func (o MapMapOutput) ToMapMapOutput() MapMapOutput {
	return o
}

func (o MapMapOutput) ToMapMapOutputWithContext(ctx context.Context) MapMapOutput {
	return o
}

func (o MapMapOutput) MapIndex(k pulumi.StringInput) MapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Map {
		return vs[0].(map[string]*Map)[vs[1].(string)]
	}).(MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MapInput)(nil)).Elem(), &Map{})
	pulumi.RegisterInputType(reflect.TypeOf((*MapArrayInput)(nil)).Elem(), MapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MapMapInput)(nil)).Elem(), MapMap{})
	pulumi.RegisterOutputType(MapOutput{})
	pulumi.RegisterOutputType(MapArrayOutput{})
	pulumi.RegisterOutputType(MapMapOutput{})
}
