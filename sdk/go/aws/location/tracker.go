// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Location Service Tracker.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/location"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := location.NewTracker(ctx, "example", &location.TrackerArgs{
//				TrackerName: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `aws_location_tracker` resources can be imported using the tracker name, e.g.
//
// ```sh
//
//	$ pulumi import aws:location/tracker:Tracker example example
//
// ```
type Tracker struct {
	pulumi.CustomResourceState

	// The timestamp for when the tracker resource was created in ISO 8601 format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The optional description for the tracker resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// The position filtering method of the tracker resource. Valid values: `TimeBased`, `DistanceBased`, `AccuracyBased`. Default: `TimeBased`.
	PositionFiltering pulumi.StringPtrOutput `pulumi:"positionFiltering"`
	// Key-value tags for the tracker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS.
	TrackerArn pulumi.StringOutput `pulumi:"trackerArn"`
	// The name of the tracker resource.
	//
	// The following arguments are optional:
	TrackerName pulumi.StringOutput `pulumi:"trackerName"`
	// The timestamp for when the tracker resource was last updated in ISO 8601 format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTracker registers a new resource with the given unique name, arguments, and options.
func NewTracker(ctx *pulumi.Context,
	name string, args *TrackerArgs, opts ...pulumi.ResourceOption) (*Tracker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TrackerName == nil {
		return nil, errors.New("invalid value for required argument 'TrackerName'")
	}
	var resource Tracker
	err := ctx.RegisterResource("aws:location/tracker:Tracker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTracker gets an existing Tracker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTracker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrackerState, opts ...pulumi.ResourceOption) (*Tracker, error) {
	var resource Tracker
	err := ctx.ReadResource("aws:location/tracker:Tracker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tracker resources.
type trackerState struct {
	// The timestamp for when the tracker resource was created in ISO 8601 format.
	CreateTime *string `pulumi:"createTime"`
	// The optional description for the tracker resource.
	Description *string `pulumi:"description"`
	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The position filtering method of the tracker resource. Valid values: `TimeBased`, `DistanceBased`, `AccuracyBased`. Default: `TimeBased`.
	PositionFiltering *string `pulumi:"positionFiltering"`
	// Key-value tags for the tracker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS.
	TrackerArn *string `pulumi:"trackerArn"`
	// The name of the tracker resource.
	//
	// The following arguments are optional:
	TrackerName *string `pulumi:"trackerName"`
	// The timestamp for when the tracker resource was last updated in ISO 8601 format.
	UpdateTime *string `pulumi:"updateTime"`
}

type TrackerState struct {
	// The timestamp for when the tracker resource was created in ISO 8601 format.
	CreateTime pulumi.StringPtrInput
	// The optional description for the tracker resource.
	Description pulumi.StringPtrInput
	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId pulumi.StringPtrInput
	// The position filtering method of the tracker resource. Valid values: `TimeBased`, `DistanceBased`, `AccuracyBased`. Default: `TimeBased`.
	PositionFiltering pulumi.StringPtrInput
	// Key-value tags for the tracker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS.
	TrackerArn pulumi.StringPtrInput
	// The name of the tracker resource.
	//
	// The following arguments are optional:
	TrackerName pulumi.StringPtrInput
	// The timestamp for when the tracker resource was last updated in ISO 8601 format.
	UpdateTime pulumi.StringPtrInput
}

func (TrackerState) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerState)(nil)).Elem()
}

type trackerArgs struct {
	// The optional description for the tracker resource.
	Description *string `pulumi:"description"`
	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The position filtering method of the tracker resource. Valid values: `TimeBased`, `DistanceBased`, `AccuracyBased`. Default: `TimeBased`.
	PositionFiltering *string `pulumi:"positionFiltering"`
	// Key-value tags for the tracker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The name of the tracker resource.
	//
	// The following arguments are optional:
	TrackerName string `pulumi:"trackerName"`
}

// The set of arguments for constructing a Tracker resource.
type TrackerArgs struct {
	// The optional description for the tracker resource.
	Description pulumi.StringPtrInput
	// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId pulumi.StringPtrInput
	// The position filtering method of the tracker resource. Valid values: `TimeBased`, `DistanceBased`, `AccuracyBased`. Default: `TimeBased`.
	PositionFiltering pulumi.StringPtrInput
	// Key-value tags for the tracker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The name of the tracker resource.
	//
	// The following arguments are optional:
	TrackerName pulumi.StringInput
}

func (TrackerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerArgs)(nil)).Elem()
}

type TrackerInput interface {
	pulumi.Input

	ToTrackerOutput() TrackerOutput
	ToTrackerOutputWithContext(ctx context.Context) TrackerOutput
}

func (*Tracker) ElementType() reflect.Type {
	return reflect.TypeOf((**Tracker)(nil)).Elem()
}

func (i *Tracker) ToTrackerOutput() TrackerOutput {
	return i.ToTrackerOutputWithContext(context.Background())
}

func (i *Tracker) ToTrackerOutputWithContext(ctx context.Context) TrackerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerOutput)
}

// TrackerArrayInput is an input type that accepts TrackerArray and TrackerArrayOutput values.
// You can construct a concrete instance of `TrackerArrayInput` via:
//
//	TrackerArray{ TrackerArgs{...} }
type TrackerArrayInput interface {
	pulumi.Input

	ToTrackerArrayOutput() TrackerArrayOutput
	ToTrackerArrayOutputWithContext(context.Context) TrackerArrayOutput
}

type TrackerArray []TrackerInput

func (TrackerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tracker)(nil)).Elem()
}

func (i TrackerArray) ToTrackerArrayOutput() TrackerArrayOutput {
	return i.ToTrackerArrayOutputWithContext(context.Background())
}

func (i TrackerArray) ToTrackerArrayOutputWithContext(ctx context.Context) TrackerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerArrayOutput)
}

// TrackerMapInput is an input type that accepts TrackerMap and TrackerMapOutput values.
// You can construct a concrete instance of `TrackerMapInput` via:
//
//	TrackerMap{ "key": TrackerArgs{...} }
type TrackerMapInput interface {
	pulumi.Input

	ToTrackerMapOutput() TrackerMapOutput
	ToTrackerMapOutputWithContext(context.Context) TrackerMapOutput
}

type TrackerMap map[string]TrackerInput

func (TrackerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tracker)(nil)).Elem()
}

func (i TrackerMap) ToTrackerMapOutput() TrackerMapOutput {
	return i.ToTrackerMapOutputWithContext(context.Background())
}

func (i TrackerMap) ToTrackerMapOutputWithContext(ctx context.Context) TrackerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerMapOutput)
}

type TrackerOutput struct{ *pulumi.OutputState }

func (TrackerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tracker)(nil)).Elem()
}

func (o TrackerOutput) ToTrackerOutput() TrackerOutput {
	return o
}

func (o TrackerOutput) ToTrackerOutputWithContext(ctx context.Context) TrackerOutput {
	return o
}

// The timestamp for when the tracker resource was created in ISO 8601 format.
func (o TrackerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The optional description for the tracker resource.
func (o TrackerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
func (o TrackerOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The position filtering method of the tracker resource. Valid values: `TimeBased`, `DistanceBased`, `AccuracyBased`. Default: `TimeBased`.
func (o TrackerOutput) PositionFiltering() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringPtrOutput { return v.PositionFiltering }).(pulumi.StringPtrOutput)
}

// Key-value tags for the tracker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TrackerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TrackerOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS.
func (o TrackerOutput) TrackerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.TrackerArn }).(pulumi.StringOutput)
}

// The name of the tracker resource.
//
// The following arguments are optional:
func (o TrackerOutput) TrackerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.TrackerName }).(pulumi.StringOutput)
}

// The timestamp for when the tracker resource was last updated in ISO 8601 format.
func (o TrackerOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type TrackerArrayOutput struct{ *pulumi.OutputState }

func (TrackerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tracker)(nil)).Elem()
}

func (o TrackerArrayOutput) ToTrackerArrayOutput() TrackerArrayOutput {
	return o
}

func (o TrackerArrayOutput) ToTrackerArrayOutputWithContext(ctx context.Context) TrackerArrayOutput {
	return o
}

func (o TrackerArrayOutput) Index(i pulumi.IntInput) TrackerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tracker {
		return vs[0].([]*Tracker)[vs[1].(int)]
	}).(TrackerOutput)
}

type TrackerMapOutput struct{ *pulumi.OutputState }

func (TrackerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tracker)(nil)).Elem()
}

func (o TrackerMapOutput) ToTrackerMapOutput() TrackerMapOutput {
	return o
}

func (o TrackerMapOutput) ToTrackerMapOutputWithContext(ctx context.Context) TrackerMapOutput {
	return o
}

func (o TrackerMapOutput) MapIndex(k pulumi.StringInput) TrackerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tracker {
		return vs[0].(map[string]*Tracker)[vs[1].(string)]
	}).(TrackerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerInput)(nil)).Elem(), &Tracker{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerArrayInput)(nil)).Elem(), TrackerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerMapInput)(nil)).Elem(), TrackerMap{})
	pulumi.RegisterOutputType(TrackerOutput{})
	pulumi.RegisterOutputType(TrackerArrayOutput{})
	pulumi.RegisterOutputType(TrackerMapOutput{})
}
