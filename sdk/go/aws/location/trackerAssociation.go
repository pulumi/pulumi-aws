// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TrackerAssociation struct {
	pulumi.CustomResourceState

	ConsumerArn pulumi.StringOutput `pulumi:"consumerArn"`
	TrackerName pulumi.StringOutput `pulumi:"trackerName"`
}

// NewTrackerAssociation registers a new resource with the given unique name, arguments, and options.
func NewTrackerAssociation(ctx *pulumi.Context,
	name string, args *TrackerAssociationArgs, opts ...pulumi.ResourceOption) (*TrackerAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerArn == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerArn'")
	}
	if args.TrackerName == nil {
		return nil, errors.New("invalid value for required argument 'TrackerName'")
	}
	var resource TrackerAssociation
	err := ctx.RegisterResource("aws:location/trackerAssociation:TrackerAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrackerAssociation gets an existing TrackerAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrackerAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrackerAssociationState, opts ...pulumi.ResourceOption) (*TrackerAssociation, error) {
	var resource TrackerAssociation
	err := ctx.ReadResource("aws:location/trackerAssociation:TrackerAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrackerAssociation resources.
type trackerAssociationState struct {
	ConsumerArn *string `pulumi:"consumerArn"`
	TrackerName *string `pulumi:"trackerName"`
}

type TrackerAssociationState struct {
	ConsumerArn pulumi.StringPtrInput
	TrackerName pulumi.StringPtrInput
}

func (TrackerAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerAssociationState)(nil)).Elem()
}

type trackerAssociationArgs struct {
	ConsumerArn string `pulumi:"consumerArn"`
	TrackerName string `pulumi:"trackerName"`
}

// The set of arguments for constructing a TrackerAssociation resource.
type TrackerAssociationArgs struct {
	ConsumerArn pulumi.StringInput
	TrackerName pulumi.StringInput
}

func (TrackerAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerAssociationArgs)(nil)).Elem()
}

type TrackerAssociationInput interface {
	pulumi.Input

	ToTrackerAssociationOutput() TrackerAssociationOutput
	ToTrackerAssociationOutputWithContext(ctx context.Context) TrackerAssociationOutput
}

func (*TrackerAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**TrackerAssociation)(nil)).Elem()
}

func (i *TrackerAssociation) ToTrackerAssociationOutput() TrackerAssociationOutput {
	return i.ToTrackerAssociationOutputWithContext(context.Background())
}

func (i *TrackerAssociation) ToTrackerAssociationOutputWithContext(ctx context.Context) TrackerAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerAssociationOutput)
}

// TrackerAssociationArrayInput is an input type that accepts TrackerAssociationArray and TrackerAssociationArrayOutput values.
// You can construct a concrete instance of `TrackerAssociationArrayInput` via:
//
//	TrackerAssociationArray{ TrackerAssociationArgs{...} }
type TrackerAssociationArrayInput interface {
	pulumi.Input

	ToTrackerAssociationArrayOutput() TrackerAssociationArrayOutput
	ToTrackerAssociationArrayOutputWithContext(context.Context) TrackerAssociationArrayOutput
}

type TrackerAssociationArray []TrackerAssociationInput

func (TrackerAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrackerAssociation)(nil)).Elem()
}

func (i TrackerAssociationArray) ToTrackerAssociationArrayOutput() TrackerAssociationArrayOutput {
	return i.ToTrackerAssociationArrayOutputWithContext(context.Background())
}

func (i TrackerAssociationArray) ToTrackerAssociationArrayOutputWithContext(ctx context.Context) TrackerAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerAssociationArrayOutput)
}

// TrackerAssociationMapInput is an input type that accepts TrackerAssociationMap and TrackerAssociationMapOutput values.
// You can construct a concrete instance of `TrackerAssociationMapInput` via:
//
//	TrackerAssociationMap{ "key": TrackerAssociationArgs{...} }
type TrackerAssociationMapInput interface {
	pulumi.Input

	ToTrackerAssociationMapOutput() TrackerAssociationMapOutput
	ToTrackerAssociationMapOutputWithContext(context.Context) TrackerAssociationMapOutput
}

type TrackerAssociationMap map[string]TrackerAssociationInput

func (TrackerAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrackerAssociation)(nil)).Elem()
}

func (i TrackerAssociationMap) ToTrackerAssociationMapOutput() TrackerAssociationMapOutput {
	return i.ToTrackerAssociationMapOutputWithContext(context.Background())
}

func (i TrackerAssociationMap) ToTrackerAssociationMapOutputWithContext(ctx context.Context) TrackerAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerAssociationMapOutput)
}

type TrackerAssociationOutput struct{ *pulumi.OutputState }

func (TrackerAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrackerAssociation)(nil)).Elem()
}

func (o TrackerAssociationOutput) ToTrackerAssociationOutput() TrackerAssociationOutput {
	return o
}

func (o TrackerAssociationOutput) ToTrackerAssociationOutputWithContext(ctx context.Context) TrackerAssociationOutput {
	return o
}

func (o TrackerAssociationOutput) ConsumerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TrackerAssociation) pulumi.StringOutput { return v.ConsumerArn }).(pulumi.StringOutput)
}

func (o TrackerAssociationOutput) TrackerName() pulumi.StringOutput {
	return o.ApplyT(func(v *TrackerAssociation) pulumi.StringOutput { return v.TrackerName }).(pulumi.StringOutput)
}

type TrackerAssociationArrayOutput struct{ *pulumi.OutputState }

func (TrackerAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrackerAssociation)(nil)).Elem()
}

func (o TrackerAssociationArrayOutput) ToTrackerAssociationArrayOutput() TrackerAssociationArrayOutput {
	return o
}

func (o TrackerAssociationArrayOutput) ToTrackerAssociationArrayOutputWithContext(ctx context.Context) TrackerAssociationArrayOutput {
	return o
}

func (o TrackerAssociationArrayOutput) Index(i pulumi.IntInput) TrackerAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrackerAssociation {
		return vs[0].([]*TrackerAssociation)[vs[1].(int)]
	}).(TrackerAssociationOutput)
}

type TrackerAssociationMapOutput struct{ *pulumi.OutputState }

func (TrackerAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrackerAssociation)(nil)).Elem()
}

func (o TrackerAssociationMapOutput) ToTrackerAssociationMapOutput() TrackerAssociationMapOutput {
	return o
}

func (o TrackerAssociationMapOutput) ToTrackerAssociationMapOutputWithContext(ctx context.Context) TrackerAssociationMapOutput {
	return o
}

func (o TrackerAssociationMapOutput) MapIndex(k pulumi.StringInput) TrackerAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrackerAssociation {
		return vs[0].(map[string]*TrackerAssociation)[vs[1].(string)]
	}).(TrackerAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerAssociationInput)(nil)).Elem(), &TrackerAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerAssociationArrayInput)(nil)).Elem(), TrackerAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerAssociationMapInput)(nil)).Elem(), TrackerAssociationMap{})
	pulumi.RegisterOutputType(TrackerAssociationOutput{})
	pulumi.RegisterOutputType(TrackerAssociationArrayOutput{})
	pulumi.RegisterOutputType(TrackerAssociationMapOutput{})
}
