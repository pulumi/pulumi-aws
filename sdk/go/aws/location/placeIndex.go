// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PlaceIndex struct {
	pulumi.CustomResourceState

	CreateTime              pulumi.StringOutput                     `pulumi:"createTime"`
	DataSource              pulumi.StringOutput                     `pulumi:"dataSource"`
	DataSourceConfiguration PlaceIndexDataSourceConfigurationOutput `pulumi:"dataSourceConfiguration"`
	Description             pulumi.StringPtrOutput                  `pulumi:"description"`
	IndexArn                pulumi.StringOutput                     `pulumi:"indexArn"`
	IndexName               pulumi.StringOutput                     `pulumi:"indexName"`
	Tags                    pulumi.StringMapOutput                  `pulumi:"tags"`
	TagsAll                 pulumi.StringMapOutput                  `pulumi:"tagsAll"`
	UpdateTime              pulumi.StringOutput                     `pulumi:"updateTime"`
}

// NewPlaceIndex registers a new resource with the given unique name, arguments, and options.
func NewPlaceIndex(ctx *pulumi.Context,
	name string, args *PlaceIndexArgs, opts ...pulumi.ResourceOption) (*PlaceIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSource == nil {
		return nil, errors.New("invalid value for required argument 'DataSource'")
	}
	if args.IndexName == nil {
		return nil, errors.New("invalid value for required argument 'IndexName'")
	}
	var resource PlaceIndex
	err := ctx.RegisterResource("aws:location/placeIndex:PlaceIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlaceIndex gets an existing PlaceIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlaceIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaceIndexState, opts ...pulumi.ResourceOption) (*PlaceIndex, error) {
	var resource PlaceIndex
	err := ctx.ReadResource("aws:location/placeIndex:PlaceIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlaceIndex resources.
type placeIndexState struct {
	CreateTime              *string                            `pulumi:"createTime"`
	DataSource              *string                            `pulumi:"dataSource"`
	DataSourceConfiguration *PlaceIndexDataSourceConfiguration `pulumi:"dataSourceConfiguration"`
	Description             *string                            `pulumi:"description"`
	IndexArn                *string                            `pulumi:"indexArn"`
	IndexName               *string                            `pulumi:"indexName"`
	Tags                    map[string]string                  `pulumi:"tags"`
	TagsAll                 map[string]string                  `pulumi:"tagsAll"`
	UpdateTime              *string                            `pulumi:"updateTime"`
}

type PlaceIndexState struct {
	CreateTime              pulumi.StringPtrInput
	DataSource              pulumi.StringPtrInput
	DataSourceConfiguration PlaceIndexDataSourceConfigurationPtrInput
	Description             pulumi.StringPtrInput
	IndexArn                pulumi.StringPtrInput
	IndexName               pulumi.StringPtrInput
	Tags                    pulumi.StringMapInput
	TagsAll                 pulumi.StringMapInput
	UpdateTime              pulumi.StringPtrInput
}

func (PlaceIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*placeIndexState)(nil)).Elem()
}

type placeIndexArgs struct {
	DataSource              string                             `pulumi:"dataSource"`
	DataSourceConfiguration *PlaceIndexDataSourceConfiguration `pulumi:"dataSourceConfiguration"`
	Description             *string                            `pulumi:"description"`
	IndexName               string                             `pulumi:"indexName"`
	Tags                    map[string]string                  `pulumi:"tags"`
}

// The set of arguments for constructing a PlaceIndex resource.
type PlaceIndexArgs struct {
	DataSource              pulumi.StringInput
	DataSourceConfiguration PlaceIndexDataSourceConfigurationPtrInput
	Description             pulumi.StringPtrInput
	IndexName               pulumi.StringInput
	Tags                    pulumi.StringMapInput
}

func (PlaceIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*placeIndexArgs)(nil)).Elem()
}

type PlaceIndexInput interface {
	pulumi.Input

	ToPlaceIndexOutput() PlaceIndexOutput
	ToPlaceIndexOutputWithContext(ctx context.Context) PlaceIndexOutput
}

func (*PlaceIndex) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaceIndex)(nil)).Elem()
}

func (i *PlaceIndex) ToPlaceIndexOutput() PlaceIndexOutput {
	return i.ToPlaceIndexOutputWithContext(context.Background())
}

func (i *PlaceIndex) ToPlaceIndexOutputWithContext(ctx context.Context) PlaceIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaceIndexOutput)
}

// PlaceIndexArrayInput is an input type that accepts PlaceIndexArray and PlaceIndexArrayOutput values.
// You can construct a concrete instance of `PlaceIndexArrayInput` via:
//
//	PlaceIndexArray{ PlaceIndexArgs{...} }
type PlaceIndexArrayInput interface {
	pulumi.Input

	ToPlaceIndexArrayOutput() PlaceIndexArrayOutput
	ToPlaceIndexArrayOutputWithContext(context.Context) PlaceIndexArrayOutput
}

type PlaceIndexArray []PlaceIndexInput

func (PlaceIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlaceIndex)(nil)).Elem()
}

func (i PlaceIndexArray) ToPlaceIndexArrayOutput() PlaceIndexArrayOutput {
	return i.ToPlaceIndexArrayOutputWithContext(context.Background())
}

func (i PlaceIndexArray) ToPlaceIndexArrayOutputWithContext(ctx context.Context) PlaceIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaceIndexArrayOutput)
}

// PlaceIndexMapInput is an input type that accepts PlaceIndexMap and PlaceIndexMapOutput values.
// You can construct a concrete instance of `PlaceIndexMapInput` via:
//
//	PlaceIndexMap{ "key": PlaceIndexArgs{...} }
type PlaceIndexMapInput interface {
	pulumi.Input

	ToPlaceIndexMapOutput() PlaceIndexMapOutput
	ToPlaceIndexMapOutputWithContext(context.Context) PlaceIndexMapOutput
}

type PlaceIndexMap map[string]PlaceIndexInput

func (PlaceIndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlaceIndex)(nil)).Elem()
}

func (i PlaceIndexMap) ToPlaceIndexMapOutput() PlaceIndexMapOutput {
	return i.ToPlaceIndexMapOutputWithContext(context.Background())
}

func (i PlaceIndexMap) ToPlaceIndexMapOutputWithContext(ctx context.Context) PlaceIndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaceIndexMapOutput)
}

type PlaceIndexOutput struct{ *pulumi.OutputState }

func (PlaceIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaceIndex)(nil)).Elem()
}

func (o PlaceIndexOutput) ToPlaceIndexOutput() PlaceIndexOutput {
	return o
}

func (o PlaceIndexOutput) ToPlaceIndexOutputWithContext(ctx context.Context) PlaceIndexOutput {
	return o
}

func (o PlaceIndexOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaceIndex) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o PlaceIndexOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaceIndex) pulumi.StringOutput { return v.DataSource }).(pulumi.StringOutput)
}

func (o PlaceIndexOutput) DataSourceConfiguration() PlaceIndexDataSourceConfigurationOutput {
	return o.ApplyT(func(v *PlaceIndex) PlaceIndexDataSourceConfigurationOutput { return v.DataSourceConfiguration }).(PlaceIndexDataSourceConfigurationOutput)
}

func (o PlaceIndexOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaceIndex) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PlaceIndexOutput) IndexArn() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaceIndex) pulumi.StringOutput { return v.IndexArn }).(pulumi.StringOutput)
}

func (o PlaceIndexOutput) IndexName() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaceIndex) pulumi.StringOutput { return v.IndexName }).(pulumi.StringOutput)
}

func (o PlaceIndexOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PlaceIndex) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o PlaceIndexOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PlaceIndex) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o PlaceIndexOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaceIndex) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type PlaceIndexArrayOutput struct{ *pulumi.OutputState }

func (PlaceIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlaceIndex)(nil)).Elem()
}

func (o PlaceIndexArrayOutput) ToPlaceIndexArrayOutput() PlaceIndexArrayOutput {
	return o
}

func (o PlaceIndexArrayOutput) ToPlaceIndexArrayOutputWithContext(ctx context.Context) PlaceIndexArrayOutput {
	return o
}

func (o PlaceIndexArrayOutput) Index(i pulumi.IntInput) PlaceIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlaceIndex {
		return vs[0].([]*PlaceIndex)[vs[1].(int)]
	}).(PlaceIndexOutput)
}

type PlaceIndexMapOutput struct{ *pulumi.OutputState }

func (PlaceIndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlaceIndex)(nil)).Elem()
}

func (o PlaceIndexMapOutput) ToPlaceIndexMapOutput() PlaceIndexMapOutput {
	return o
}

func (o PlaceIndexMapOutput) ToPlaceIndexMapOutputWithContext(ctx context.Context) PlaceIndexMapOutput {
	return o
}

func (o PlaceIndexMapOutput) MapIndex(k pulumi.StringInput) PlaceIndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlaceIndex {
		return vs[0].(map[string]*PlaceIndex)[vs[1].(string)]
	}).(PlaceIndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlaceIndexInput)(nil)).Elem(), &PlaceIndex{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaceIndexArrayInput)(nil)).Elem(), PlaceIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaceIndexMapInput)(nil)).Elem(), PlaceIndexMap{})
	pulumi.RegisterOutputType(PlaceIndexOutput{})
	pulumi.RegisterOutputType(PlaceIndexArrayOutput{})
	pulumi.RegisterOutputType(PlaceIndexMapOutput{})
}
