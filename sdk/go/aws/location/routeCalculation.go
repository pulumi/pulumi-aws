// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Location Service Route Calculator.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/location"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := location.NewRouteCalculation(ctx, "example", &location.RouteCalculationArgs{
//				CalculatorName: pulumi.String("example"),
//				DataSource:     pulumi.String("Here"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_location_route_calculator.example
//
//	id = "example" } Using `pulumi import`, import `aws_location_route_calculator` using the route calculator name. For exampleconsole % pulumi import aws_location_route_calculator.example example
type RouteCalculation struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) for the Route calculator resource. Use the ARN when you specify a resource across AWS.
	CalculatorArn pulumi.StringOutput `pulumi:"calculatorArn"`
	// The name of the route calculator resource.
	CalculatorName pulumi.StringOutput `pulumi:"calculatorName"`
	// The timestamp for when the route calculator resource was created in ISO 8601 format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies the data provider of traffic and road network data.
	//
	// The following arguments are optional:
	DataSource pulumi.StringOutput `pulumi:"dataSource"`
	// The optional description for the route calculator resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Key-value tags for the route calculator. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The timestamp for when the route calculator resource was last update in ISO 8601.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRouteCalculation registers a new resource with the given unique name, arguments, and options.
func NewRouteCalculation(ctx *pulumi.Context,
	name string, args *RouteCalculationArgs, opts ...pulumi.ResourceOption) (*RouteCalculation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CalculatorName == nil {
		return nil, errors.New("invalid value for required argument 'CalculatorName'")
	}
	if args.DataSource == nil {
		return nil, errors.New("invalid value for required argument 'DataSource'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteCalculation
	err := ctx.RegisterResource("aws:location/routeCalculation:RouteCalculation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteCalculation gets an existing RouteCalculation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteCalculation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteCalculationState, opts ...pulumi.ResourceOption) (*RouteCalculation, error) {
	var resource RouteCalculation
	err := ctx.ReadResource("aws:location/routeCalculation:RouteCalculation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteCalculation resources.
type routeCalculationState struct {
	// The Amazon Resource Name (ARN) for the Route calculator resource. Use the ARN when you specify a resource across AWS.
	CalculatorArn *string `pulumi:"calculatorArn"`
	// The name of the route calculator resource.
	CalculatorName *string `pulumi:"calculatorName"`
	// The timestamp for when the route calculator resource was created in ISO 8601 format.
	CreateTime *string `pulumi:"createTime"`
	// Specifies the data provider of traffic and road network data.
	//
	// The following arguments are optional:
	DataSource *string `pulumi:"dataSource"`
	// The optional description for the route calculator resource.
	Description *string `pulumi:"description"`
	// Key-value tags for the route calculator. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The timestamp for when the route calculator resource was last update in ISO 8601.
	UpdateTime *string `pulumi:"updateTime"`
}

type RouteCalculationState struct {
	// The Amazon Resource Name (ARN) for the Route calculator resource. Use the ARN when you specify a resource across AWS.
	CalculatorArn pulumi.StringPtrInput
	// The name of the route calculator resource.
	CalculatorName pulumi.StringPtrInput
	// The timestamp for when the route calculator resource was created in ISO 8601 format.
	CreateTime pulumi.StringPtrInput
	// Specifies the data provider of traffic and road network data.
	//
	// The following arguments are optional:
	DataSource pulumi.StringPtrInput
	// The optional description for the route calculator resource.
	Description pulumi.StringPtrInput
	// Key-value tags for the route calculator. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// The timestamp for when the route calculator resource was last update in ISO 8601.
	UpdateTime pulumi.StringPtrInput
}

func (RouteCalculationState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeCalculationState)(nil)).Elem()
}

type routeCalculationArgs struct {
	// The name of the route calculator resource.
	CalculatorName string `pulumi:"calculatorName"`
	// Specifies the data provider of traffic and road network data.
	//
	// The following arguments are optional:
	DataSource string `pulumi:"dataSource"`
	// The optional description for the route calculator resource.
	Description *string `pulumi:"description"`
	// Key-value tags for the route calculator. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RouteCalculation resource.
type RouteCalculationArgs struct {
	// The name of the route calculator resource.
	CalculatorName pulumi.StringInput
	// Specifies the data provider of traffic and road network data.
	//
	// The following arguments are optional:
	DataSource pulumi.StringInput
	// The optional description for the route calculator resource.
	Description pulumi.StringPtrInput
	// Key-value tags for the route calculator. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (RouteCalculationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeCalculationArgs)(nil)).Elem()
}

type RouteCalculationInput interface {
	pulumi.Input

	ToRouteCalculationOutput() RouteCalculationOutput
	ToRouteCalculationOutputWithContext(ctx context.Context) RouteCalculationOutput
}

func (*RouteCalculation) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteCalculation)(nil)).Elem()
}

func (i *RouteCalculation) ToRouteCalculationOutput() RouteCalculationOutput {
	return i.ToRouteCalculationOutputWithContext(context.Background())
}

func (i *RouteCalculation) ToRouteCalculationOutputWithContext(ctx context.Context) RouteCalculationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteCalculationOutput)
}

// RouteCalculationArrayInput is an input type that accepts RouteCalculationArray and RouteCalculationArrayOutput values.
// You can construct a concrete instance of `RouteCalculationArrayInput` via:
//
//	RouteCalculationArray{ RouteCalculationArgs{...} }
type RouteCalculationArrayInput interface {
	pulumi.Input

	ToRouteCalculationArrayOutput() RouteCalculationArrayOutput
	ToRouteCalculationArrayOutputWithContext(context.Context) RouteCalculationArrayOutput
}

type RouteCalculationArray []RouteCalculationInput

func (RouteCalculationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteCalculation)(nil)).Elem()
}

func (i RouteCalculationArray) ToRouteCalculationArrayOutput() RouteCalculationArrayOutput {
	return i.ToRouteCalculationArrayOutputWithContext(context.Background())
}

func (i RouteCalculationArray) ToRouteCalculationArrayOutputWithContext(ctx context.Context) RouteCalculationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteCalculationArrayOutput)
}

// RouteCalculationMapInput is an input type that accepts RouteCalculationMap and RouteCalculationMapOutput values.
// You can construct a concrete instance of `RouteCalculationMapInput` via:
//
//	RouteCalculationMap{ "key": RouteCalculationArgs{...} }
type RouteCalculationMapInput interface {
	pulumi.Input

	ToRouteCalculationMapOutput() RouteCalculationMapOutput
	ToRouteCalculationMapOutputWithContext(context.Context) RouteCalculationMapOutput
}

type RouteCalculationMap map[string]RouteCalculationInput

func (RouteCalculationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteCalculation)(nil)).Elem()
}

func (i RouteCalculationMap) ToRouteCalculationMapOutput() RouteCalculationMapOutput {
	return i.ToRouteCalculationMapOutputWithContext(context.Background())
}

func (i RouteCalculationMap) ToRouteCalculationMapOutputWithContext(ctx context.Context) RouteCalculationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteCalculationMapOutput)
}

type RouteCalculationOutput struct{ *pulumi.OutputState }

func (RouteCalculationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteCalculation)(nil)).Elem()
}

func (o RouteCalculationOutput) ToRouteCalculationOutput() RouteCalculationOutput {
	return o
}

func (o RouteCalculationOutput) ToRouteCalculationOutputWithContext(ctx context.Context) RouteCalculationOutput {
	return o
}

// The Amazon Resource Name (ARN) for the Route calculator resource. Use the ARN when you specify a resource across AWS.
func (o RouteCalculationOutput) CalculatorArn() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringOutput { return v.CalculatorArn }).(pulumi.StringOutput)
}

// The name of the route calculator resource.
func (o RouteCalculationOutput) CalculatorName() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringOutput { return v.CalculatorName }).(pulumi.StringOutput)
}

// The timestamp for when the route calculator resource was created in ISO 8601 format.
func (o RouteCalculationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies the data provider of traffic and road network data.
//
// The following arguments are optional:
func (o RouteCalculationOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringOutput { return v.DataSource }).(pulumi.StringOutput)
}

// The optional description for the route calculator resource.
func (o RouteCalculationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Key-value tags for the route calculator. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RouteCalculationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RouteCalculationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The timestamp for when the route calculator resource was last update in ISO 8601.
func (o RouteCalculationOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type RouteCalculationArrayOutput struct{ *pulumi.OutputState }

func (RouteCalculationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteCalculation)(nil)).Elem()
}

func (o RouteCalculationArrayOutput) ToRouteCalculationArrayOutput() RouteCalculationArrayOutput {
	return o
}

func (o RouteCalculationArrayOutput) ToRouteCalculationArrayOutputWithContext(ctx context.Context) RouteCalculationArrayOutput {
	return o
}

func (o RouteCalculationArrayOutput) Index(i pulumi.IntInput) RouteCalculationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteCalculation {
		return vs[0].([]*RouteCalculation)[vs[1].(int)]
	}).(RouteCalculationOutput)
}

type RouteCalculationMapOutput struct{ *pulumi.OutputState }

func (RouteCalculationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteCalculation)(nil)).Elem()
}

func (o RouteCalculationMapOutput) ToRouteCalculationMapOutput() RouteCalculationMapOutput {
	return o
}

func (o RouteCalculationMapOutput) ToRouteCalculationMapOutputWithContext(ctx context.Context) RouteCalculationMapOutput {
	return o
}

func (o RouteCalculationMapOutput) MapIndex(k pulumi.StringInput) RouteCalculationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteCalculation {
		return vs[0].(map[string]*RouteCalculation)[vs[1].(string)]
	}).(RouteCalculationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteCalculationInput)(nil)).Elem(), &RouteCalculation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteCalculationArrayInput)(nil)).Elem(), RouteCalculationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteCalculationMapInput)(nil)).Elem(), RouteCalculationMap{})
	pulumi.RegisterOutputType(RouteCalculationOutput{})
	pulumi.RegisterOutputType(RouteCalculationArrayOutput{})
	pulumi.RegisterOutputType(RouteCalculationMapOutput{})
}
