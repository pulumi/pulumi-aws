// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RouteCalculation struct {
	pulumi.CustomResourceState

	CalculatorArn  pulumi.StringOutput    `pulumi:"calculatorArn"`
	CalculatorName pulumi.StringOutput    `pulumi:"calculatorName"`
	CreateTime     pulumi.StringOutput    `pulumi:"createTime"`
	DataSource     pulumi.StringOutput    `pulumi:"dataSource"`
	Description    pulumi.StringPtrOutput `pulumi:"description"`
	Tags           pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll        pulumi.StringMapOutput `pulumi:"tagsAll"`
	UpdateTime     pulumi.StringOutput    `pulumi:"updateTime"`
}

// NewRouteCalculation registers a new resource with the given unique name, arguments, and options.
func NewRouteCalculation(ctx *pulumi.Context,
	name string, args *RouteCalculationArgs, opts ...pulumi.ResourceOption) (*RouteCalculation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CalculatorName == nil {
		return nil, errors.New("invalid value for required argument 'CalculatorName'")
	}
	if args.DataSource == nil {
		return nil, errors.New("invalid value for required argument 'DataSource'")
	}
	var resource RouteCalculation
	err := ctx.RegisterResource("aws:location/routeCalculation:RouteCalculation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteCalculation gets an existing RouteCalculation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteCalculation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteCalculationState, opts ...pulumi.ResourceOption) (*RouteCalculation, error) {
	var resource RouteCalculation
	err := ctx.ReadResource("aws:location/routeCalculation:RouteCalculation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteCalculation resources.
type routeCalculationState struct {
	CalculatorArn  *string           `pulumi:"calculatorArn"`
	CalculatorName *string           `pulumi:"calculatorName"`
	CreateTime     *string           `pulumi:"createTime"`
	DataSource     *string           `pulumi:"dataSource"`
	Description    *string           `pulumi:"description"`
	Tags           map[string]string `pulumi:"tags"`
	TagsAll        map[string]string `pulumi:"tagsAll"`
	UpdateTime     *string           `pulumi:"updateTime"`
}

type RouteCalculationState struct {
	CalculatorArn  pulumi.StringPtrInput
	CalculatorName pulumi.StringPtrInput
	CreateTime     pulumi.StringPtrInput
	DataSource     pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
	TagsAll        pulumi.StringMapInput
	UpdateTime     pulumi.StringPtrInput
}

func (RouteCalculationState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeCalculationState)(nil)).Elem()
}

type routeCalculationArgs struct {
	CalculatorName string            `pulumi:"calculatorName"`
	DataSource     string            `pulumi:"dataSource"`
	Description    *string           `pulumi:"description"`
	Tags           map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RouteCalculation resource.
type RouteCalculationArgs struct {
	CalculatorName pulumi.StringInput
	DataSource     pulumi.StringInput
	Description    pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
}

func (RouteCalculationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeCalculationArgs)(nil)).Elem()
}

type RouteCalculationInput interface {
	pulumi.Input

	ToRouteCalculationOutput() RouteCalculationOutput
	ToRouteCalculationOutputWithContext(ctx context.Context) RouteCalculationOutput
}

func (*RouteCalculation) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteCalculation)(nil)).Elem()
}

func (i *RouteCalculation) ToRouteCalculationOutput() RouteCalculationOutput {
	return i.ToRouteCalculationOutputWithContext(context.Background())
}

func (i *RouteCalculation) ToRouteCalculationOutputWithContext(ctx context.Context) RouteCalculationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteCalculationOutput)
}

// RouteCalculationArrayInput is an input type that accepts RouteCalculationArray and RouteCalculationArrayOutput values.
// You can construct a concrete instance of `RouteCalculationArrayInput` via:
//
//	RouteCalculationArray{ RouteCalculationArgs{...} }
type RouteCalculationArrayInput interface {
	pulumi.Input

	ToRouteCalculationArrayOutput() RouteCalculationArrayOutput
	ToRouteCalculationArrayOutputWithContext(context.Context) RouteCalculationArrayOutput
}

type RouteCalculationArray []RouteCalculationInput

func (RouteCalculationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteCalculation)(nil)).Elem()
}

func (i RouteCalculationArray) ToRouteCalculationArrayOutput() RouteCalculationArrayOutput {
	return i.ToRouteCalculationArrayOutputWithContext(context.Background())
}

func (i RouteCalculationArray) ToRouteCalculationArrayOutputWithContext(ctx context.Context) RouteCalculationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteCalculationArrayOutput)
}

// RouteCalculationMapInput is an input type that accepts RouteCalculationMap and RouteCalculationMapOutput values.
// You can construct a concrete instance of `RouteCalculationMapInput` via:
//
//	RouteCalculationMap{ "key": RouteCalculationArgs{...} }
type RouteCalculationMapInput interface {
	pulumi.Input

	ToRouteCalculationMapOutput() RouteCalculationMapOutput
	ToRouteCalculationMapOutputWithContext(context.Context) RouteCalculationMapOutput
}

type RouteCalculationMap map[string]RouteCalculationInput

func (RouteCalculationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteCalculation)(nil)).Elem()
}

func (i RouteCalculationMap) ToRouteCalculationMapOutput() RouteCalculationMapOutput {
	return i.ToRouteCalculationMapOutputWithContext(context.Background())
}

func (i RouteCalculationMap) ToRouteCalculationMapOutputWithContext(ctx context.Context) RouteCalculationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteCalculationMapOutput)
}

type RouteCalculationOutput struct{ *pulumi.OutputState }

func (RouteCalculationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteCalculation)(nil)).Elem()
}

func (o RouteCalculationOutput) ToRouteCalculationOutput() RouteCalculationOutput {
	return o
}

func (o RouteCalculationOutput) ToRouteCalculationOutputWithContext(ctx context.Context) RouteCalculationOutput {
	return o
}

func (o RouteCalculationOutput) CalculatorArn() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringOutput { return v.CalculatorArn }).(pulumi.StringOutput)
}

func (o RouteCalculationOutput) CalculatorName() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringOutput { return v.CalculatorName }).(pulumi.StringOutput)
}

func (o RouteCalculationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o RouteCalculationOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringOutput { return v.DataSource }).(pulumi.StringOutput)
}

func (o RouteCalculationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RouteCalculationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o RouteCalculationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o RouteCalculationOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculation) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type RouteCalculationArrayOutput struct{ *pulumi.OutputState }

func (RouteCalculationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteCalculation)(nil)).Elem()
}

func (o RouteCalculationArrayOutput) ToRouteCalculationArrayOutput() RouteCalculationArrayOutput {
	return o
}

func (o RouteCalculationArrayOutput) ToRouteCalculationArrayOutputWithContext(ctx context.Context) RouteCalculationArrayOutput {
	return o
}

func (o RouteCalculationArrayOutput) Index(i pulumi.IntInput) RouteCalculationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteCalculation {
		return vs[0].([]*RouteCalculation)[vs[1].(int)]
	}).(RouteCalculationOutput)
}

type RouteCalculationMapOutput struct{ *pulumi.OutputState }

func (RouteCalculationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteCalculation)(nil)).Elem()
}

func (o RouteCalculationMapOutput) ToRouteCalculationMapOutput() RouteCalculationMapOutput {
	return o
}

func (o RouteCalculationMapOutput) ToRouteCalculationMapOutputWithContext(ctx context.Context) RouteCalculationMapOutput {
	return o
}

func (o RouteCalculationMapOutput) MapIndex(k pulumi.StringInput) RouteCalculationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteCalculation {
		return vs[0].(map[string]*RouteCalculation)[vs[1].(string)]
	}).(RouteCalculationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteCalculationInput)(nil)).Elem(), &RouteCalculation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteCalculationArrayInput)(nil)).Elem(), RouteCalculationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteCalculationMapInput)(nil)).Elem(), RouteCalculationMap{})
	pulumi.RegisterOutputType(RouteCalculationOutput{})
	pulumi.RegisterOutputType(RouteCalculationArrayOutput{})
	pulumi.RegisterOutputType(RouteCalculationMapOutput{})
}
