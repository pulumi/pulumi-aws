// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mskconnect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CustomPlugin struct {
	pulumi.CustomResourceState

	Arn            pulumi.StringOutput        `pulumi:"arn"`
	ContentType    pulumi.StringOutput        `pulumi:"contentType"`
	Description    pulumi.StringPtrOutput     `pulumi:"description"`
	LatestRevision pulumi.IntOutput           `pulumi:"latestRevision"`
	Location       CustomPluginLocationOutput `pulumi:"location"`
	Name           pulumi.StringOutput        `pulumi:"name"`
	State          pulumi.StringOutput        `pulumi:"state"`
}

// NewCustomPlugin registers a new resource with the given unique name, arguments, and options.
func NewCustomPlugin(ctx *pulumi.Context,
	name string, args *CustomPluginArgs, opts ...pulumi.ResourceOption) (*CustomPlugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	var resource CustomPlugin
	err := ctx.RegisterResource("aws:mskconnect/customPlugin:CustomPlugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomPlugin gets an existing CustomPlugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomPluginState, opts ...pulumi.ResourceOption) (*CustomPlugin, error) {
	var resource CustomPlugin
	err := ctx.ReadResource("aws:mskconnect/customPlugin:CustomPlugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomPlugin resources.
type customPluginState struct {
	Arn            *string               `pulumi:"arn"`
	ContentType    *string               `pulumi:"contentType"`
	Description    *string               `pulumi:"description"`
	LatestRevision *int                  `pulumi:"latestRevision"`
	Location       *CustomPluginLocation `pulumi:"location"`
	Name           *string               `pulumi:"name"`
	State          *string               `pulumi:"state"`
}

type CustomPluginState struct {
	Arn            pulumi.StringPtrInput
	ContentType    pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	LatestRevision pulumi.IntPtrInput
	Location       CustomPluginLocationPtrInput
	Name           pulumi.StringPtrInput
	State          pulumi.StringPtrInput
}

func (CustomPluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*customPluginState)(nil)).Elem()
}

type customPluginArgs struct {
	ContentType string               `pulumi:"contentType"`
	Description *string              `pulumi:"description"`
	Location    CustomPluginLocation `pulumi:"location"`
	Name        *string              `pulumi:"name"`
}

// The set of arguments for constructing a CustomPlugin resource.
type CustomPluginArgs struct {
	ContentType pulumi.StringInput
	Description pulumi.StringPtrInput
	Location    CustomPluginLocationInput
	Name        pulumi.StringPtrInput
}

func (CustomPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customPluginArgs)(nil)).Elem()
}

type CustomPluginInput interface {
	pulumi.Input

	ToCustomPluginOutput() CustomPluginOutput
	ToCustomPluginOutputWithContext(ctx context.Context) CustomPluginOutput
}

func (*CustomPlugin) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomPlugin)(nil)).Elem()
}

func (i *CustomPlugin) ToCustomPluginOutput() CustomPluginOutput {
	return i.ToCustomPluginOutputWithContext(context.Background())
}

func (i *CustomPlugin) ToCustomPluginOutputWithContext(ctx context.Context) CustomPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomPluginOutput)
}

// CustomPluginArrayInput is an input type that accepts CustomPluginArray and CustomPluginArrayOutput values.
// You can construct a concrete instance of `CustomPluginArrayInput` via:
//
//	CustomPluginArray{ CustomPluginArgs{...} }
type CustomPluginArrayInput interface {
	pulumi.Input

	ToCustomPluginArrayOutput() CustomPluginArrayOutput
	ToCustomPluginArrayOutputWithContext(context.Context) CustomPluginArrayOutput
}

type CustomPluginArray []CustomPluginInput

func (CustomPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomPlugin)(nil)).Elem()
}

func (i CustomPluginArray) ToCustomPluginArrayOutput() CustomPluginArrayOutput {
	return i.ToCustomPluginArrayOutputWithContext(context.Background())
}

func (i CustomPluginArray) ToCustomPluginArrayOutputWithContext(ctx context.Context) CustomPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomPluginArrayOutput)
}

// CustomPluginMapInput is an input type that accepts CustomPluginMap and CustomPluginMapOutput values.
// You can construct a concrete instance of `CustomPluginMapInput` via:
//
//	CustomPluginMap{ "key": CustomPluginArgs{...} }
type CustomPluginMapInput interface {
	pulumi.Input

	ToCustomPluginMapOutput() CustomPluginMapOutput
	ToCustomPluginMapOutputWithContext(context.Context) CustomPluginMapOutput
}

type CustomPluginMap map[string]CustomPluginInput

func (CustomPluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomPlugin)(nil)).Elem()
}

func (i CustomPluginMap) ToCustomPluginMapOutput() CustomPluginMapOutput {
	return i.ToCustomPluginMapOutputWithContext(context.Background())
}

func (i CustomPluginMap) ToCustomPluginMapOutputWithContext(ctx context.Context) CustomPluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomPluginMapOutput)
}

type CustomPluginOutput struct{ *pulumi.OutputState }

func (CustomPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomPlugin)(nil)).Elem()
}

func (o CustomPluginOutput) ToCustomPluginOutput() CustomPluginOutput {
	return o
}

func (o CustomPluginOutput) ToCustomPluginOutputWithContext(ctx context.Context) CustomPluginOutput {
	return o
}

func (o CustomPluginOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomPlugin) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CustomPluginOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomPlugin) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

func (o CustomPluginOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomPlugin) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CustomPluginOutput) LatestRevision() pulumi.IntOutput {
	return o.ApplyT(func(v *CustomPlugin) pulumi.IntOutput { return v.LatestRevision }).(pulumi.IntOutput)
}

func (o CustomPluginOutput) Location() CustomPluginLocationOutput {
	return o.ApplyT(func(v *CustomPlugin) CustomPluginLocationOutput { return v.Location }).(CustomPluginLocationOutput)
}

func (o CustomPluginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomPlugin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CustomPluginOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomPlugin) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type CustomPluginArrayOutput struct{ *pulumi.OutputState }

func (CustomPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomPlugin)(nil)).Elem()
}

func (o CustomPluginArrayOutput) ToCustomPluginArrayOutput() CustomPluginArrayOutput {
	return o
}

func (o CustomPluginArrayOutput) ToCustomPluginArrayOutputWithContext(ctx context.Context) CustomPluginArrayOutput {
	return o
}

func (o CustomPluginArrayOutput) Index(i pulumi.IntInput) CustomPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomPlugin {
		return vs[0].([]*CustomPlugin)[vs[1].(int)]
	}).(CustomPluginOutput)
}

type CustomPluginMapOutput struct{ *pulumi.OutputState }

func (CustomPluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomPlugin)(nil)).Elem()
}

func (o CustomPluginMapOutput) ToCustomPluginMapOutput() CustomPluginMapOutput {
	return o
}

func (o CustomPluginMapOutput) ToCustomPluginMapOutputWithContext(ctx context.Context) CustomPluginMapOutput {
	return o
}

func (o CustomPluginMapOutput) MapIndex(k pulumi.StringInput) CustomPluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomPlugin {
		return vs[0].(map[string]*CustomPlugin)[vs[1].(string)]
	}).(CustomPluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomPluginInput)(nil)).Elem(), &CustomPlugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomPluginArrayInput)(nil)).Elem(), CustomPluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomPluginMapInput)(nil)).Elem(), CustomPluginMap{})
	pulumi.RegisterOutputType(CustomPluginOutput{})
	pulumi.RegisterOutputType(CustomPluginArrayOutput{})
	pulumi.RegisterOutputType(CustomPluginMapOutput{})
}
