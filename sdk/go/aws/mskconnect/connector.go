// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mskconnect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Connector struct {
	pulumi.CustomResourceState

	Arn                              pulumi.StringOutput                             `pulumi:"arn"`
	Capacity                         ConnectorCapacityOutput                         `pulumi:"capacity"`
	ConnectorConfiguration           pulumi.StringMapOutput                          `pulumi:"connectorConfiguration"`
	Description                      pulumi.StringPtrOutput                          `pulumi:"description"`
	KafkaCluster                     ConnectorKafkaClusterOutput                     `pulumi:"kafkaCluster"`
	KafkaClusterClientAuthentication ConnectorKafkaClusterClientAuthenticationOutput `pulumi:"kafkaClusterClientAuthentication"`
	KafkaClusterEncryptionInTransit  ConnectorKafkaClusterEncryptionInTransitOutput  `pulumi:"kafkaClusterEncryptionInTransit"`
	KafkaconnectVersion              pulumi.StringOutput                             `pulumi:"kafkaconnectVersion"`
	LogDelivery                      ConnectorLogDeliveryPtrOutput                   `pulumi:"logDelivery"`
	Name                             pulumi.StringOutput                             `pulumi:"name"`
	Plugins                          ConnectorPluginArrayOutput                      `pulumi:"plugins"`
	ServiceExecutionRoleArn          pulumi.StringOutput                             `pulumi:"serviceExecutionRoleArn"`
	Version                          pulumi.StringOutput                             `pulumi:"version"`
	WorkerConfiguration              ConnectorWorkerConfigurationPtrOutput           `pulumi:"workerConfiguration"`
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOption) (*Connector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Capacity == nil {
		return nil, errors.New("invalid value for required argument 'Capacity'")
	}
	if args.ConnectorConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorConfiguration'")
	}
	if args.KafkaCluster == nil {
		return nil, errors.New("invalid value for required argument 'KafkaCluster'")
	}
	if args.KafkaClusterClientAuthentication == nil {
		return nil, errors.New("invalid value for required argument 'KafkaClusterClientAuthentication'")
	}
	if args.KafkaClusterEncryptionInTransit == nil {
		return nil, errors.New("invalid value for required argument 'KafkaClusterEncryptionInTransit'")
	}
	if args.KafkaconnectVersion == nil {
		return nil, errors.New("invalid value for required argument 'KafkaconnectVersion'")
	}
	if args.Plugins == nil {
		return nil, errors.New("invalid value for required argument 'Plugins'")
	}
	if args.ServiceExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ServiceExecutionRoleArn'")
	}
	var resource Connector
	err := ctx.RegisterResource("aws:mskconnect/connector:Connector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorState, opts ...pulumi.ResourceOption) (*Connector, error) {
	var resource Connector
	err := ctx.ReadResource("aws:mskconnect/connector:Connector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connector resources.
type connectorState struct {
	Arn                              *string                                    `pulumi:"arn"`
	Capacity                         *ConnectorCapacity                         `pulumi:"capacity"`
	ConnectorConfiguration           map[string]string                          `pulumi:"connectorConfiguration"`
	Description                      *string                                    `pulumi:"description"`
	KafkaCluster                     *ConnectorKafkaCluster                     `pulumi:"kafkaCluster"`
	KafkaClusterClientAuthentication *ConnectorKafkaClusterClientAuthentication `pulumi:"kafkaClusterClientAuthentication"`
	KafkaClusterEncryptionInTransit  *ConnectorKafkaClusterEncryptionInTransit  `pulumi:"kafkaClusterEncryptionInTransit"`
	KafkaconnectVersion              *string                                    `pulumi:"kafkaconnectVersion"`
	LogDelivery                      *ConnectorLogDelivery                      `pulumi:"logDelivery"`
	Name                             *string                                    `pulumi:"name"`
	Plugins                          []ConnectorPlugin                          `pulumi:"plugins"`
	ServiceExecutionRoleArn          *string                                    `pulumi:"serviceExecutionRoleArn"`
	Version                          *string                                    `pulumi:"version"`
	WorkerConfiguration              *ConnectorWorkerConfiguration              `pulumi:"workerConfiguration"`
}

type ConnectorState struct {
	Arn                              pulumi.StringPtrInput
	Capacity                         ConnectorCapacityPtrInput
	ConnectorConfiguration           pulumi.StringMapInput
	Description                      pulumi.StringPtrInput
	KafkaCluster                     ConnectorKafkaClusterPtrInput
	KafkaClusterClientAuthentication ConnectorKafkaClusterClientAuthenticationPtrInput
	KafkaClusterEncryptionInTransit  ConnectorKafkaClusterEncryptionInTransitPtrInput
	KafkaconnectVersion              pulumi.StringPtrInput
	LogDelivery                      ConnectorLogDeliveryPtrInput
	Name                             pulumi.StringPtrInput
	Plugins                          ConnectorPluginArrayInput
	ServiceExecutionRoleArn          pulumi.StringPtrInput
	Version                          pulumi.StringPtrInput
	WorkerConfiguration              ConnectorWorkerConfigurationPtrInput
}

func (ConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorState)(nil)).Elem()
}

type connectorArgs struct {
	Capacity                         ConnectorCapacity                         `pulumi:"capacity"`
	ConnectorConfiguration           map[string]string                         `pulumi:"connectorConfiguration"`
	Description                      *string                                   `pulumi:"description"`
	KafkaCluster                     ConnectorKafkaCluster                     `pulumi:"kafkaCluster"`
	KafkaClusterClientAuthentication ConnectorKafkaClusterClientAuthentication `pulumi:"kafkaClusterClientAuthentication"`
	KafkaClusterEncryptionInTransit  ConnectorKafkaClusterEncryptionInTransit  `pulumi:"kafkaClusterEncryptionInTransit"`
	KafkaconnectVersion              string                                    `pulumi:"kafkaconnectVersion"`
	LogDelivery                      *ConnectorLogDelivery                     `pulumi:"logDelivery"`
	Name                             *string                                   `pulumi:"name"`
	Plugins                          []ConnectorPlugin                         `pulumi:"plugins"`
	ServiceExecutionRoleArn          string                                    `pulumi:"serviceExecutionRoleArn"`
	WorkerConfiguration              *ConnectorWorkerConfiguration             `pulumi:"workerConfiguration"`
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	Capacity                         ConnectorCapacityInput
	ConnectorConfiguration           pulumi.StringMapInput
	Description                      pulumi.StringPtrInput
	KafkaCluster                     ConnectorKafkaClusterInput
	KafkaClusterClientAuthentication ConnectorKafkaClusterClientAuthenticationInput
	KafkaClusterEncryptionInTransit  ConnectorKafkaClusterEncryptionInTransitInput
	KafkaconnectVersion              pulumi.StringInput
	LogDelivery                      ConnectorLogDeliveryPtrInput
	Name                             pulumi.StringPtrInput
	Plugins                          ConnectorPluginArrayInput
	ServiceExecutionRoleArn          pulumi.StringInput
	WorkerConfiguration              ConnectorWorkerConfigurationPtrInput
}

func (ConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorArgs)(nil)).Elem()
}

type ConnectorInput interface {
	pulumi.Input

	ToConnectorOutput() ConnectorOutput
	ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput
}

func (*Connector) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (i *Connector) ToConnectorOutput() ConnectorOutput {
	return i.ToConnectorOutputWithContext(context.Background())
}

func (i *Connector) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOutput)
}

// ConnectorArrayInput is an input type that accepts ConnectorArray and ConnectorArrayOutput values.
// You can construct a concrete instance of `ConnectorArrayInput` via:
//
//	ConnectorArray{ ConnectorArgs{...} }
type ConnectorArrayInput interface {
	pulumi.Input

	ToConnectorArrayOutput() ConnectorArrayOutput
	ToConnectorArrayOutputWithContext(context.Context) ConnectorArrayOutput
}

type ConnectorArray []ConnectorInput

func (ConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connector)(nil)).Elem()
}

func (i ConnectorArray) ToConnectorArrayOutput() ConnectorArrayOutput {
	return i.ToConnectorArrayOutputWithContext(context.Background())
}

func (i ConnectorArray) ToConnectorArrayOutputWithContext(ctx context.Context) ConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorArrayOutput)
}

// ConnectorMapInput is an input type that accepts ConnectorMap and ConnectorMapOutput values.
// You can construct a concrete instance of `ConnectorMapInput` via:
//
//	ConnectorMap{ "key": ConnectorArgs{...} }
type ConnectorMapInput interface {
	pulumi.Input

	ToConnectorMapOutput() ConnectorMapOutput
	ToConnectorMapOutputWithContext(context.Context) ConnectorMapOutput
}

type ConnectorMap map[string]ConnectorInput

func (ConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connector)(nil)).Elem()
}

func (i ConnectorMap) ToConnectorMapOutput() ConnectorMapOutput {
	return i.ToConnectorMapOutputWithContext(context.Background())
}

func (i ConnectorMap) ToConnectorMapOutputWithContext(ctx context.Context) ConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMapOutput)
}

type ConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (o ConnectorOutput) ToConnectorOutput() ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return o
}

func (o ConnectorOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ConnectorOutput) Capacity() ConnectorCapacityOutput {
	return o.ApplyT(func(v *Connector) ConnectorCapacityOutput { return v.Capacity }).(ConnectorCapacityOutput)
}

func (o ConnectorOutput) ConnectorConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringMapOutput { return v.ConnectorConfiguration }).(pulumi.StringMapOutput)
}

func (o ConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConnectorOutput) KafkaCluster() ConnectorKafkaClusterOutput {
	return o.ApplyT(func(v *Connector) ConnectorKafkaClusterOutput { return v.KafkaCluster }).(ConnectorKafkaClusterOutput)
}

func (o ConnectorOutput) KafkaClusterClientAuthentication() ConnectorKafkaClusterClientAuthenticationOutput {
	return o.ApplyT(func(v *Connector) ConnectorKafkaClusterClientAuthenticationOutput {
		return v.KafkaClusterClientAuthentication
	}).(ConnectorKafkaClusterClientAuthenticationOutput)
}

func (o ConnectorOutput) KafkaClusterEncryptionInTransit() ConnectorKafkaClusterEncryptionInTransitOutput {
	return o.ApplyT(func(v *Connector) ConnectorKafkaClusterEncryptionInTransitOutput {
		return v.KafkaClusterEncryptionInTransit
	}).(ConnectorKafkaClusterEncryptionInTransitOutput)
}

func (o ConnectorOutput) KafkaconnectVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.KafkaconnectVersion }).(pulumi.StringOutput)
}

func (o ConnectorOutput) LogDelivery() ConnectorLogDeliveryPtrOutput {
	return o.ApplyT(func(v *Connector) ConnectorLogDeliveryPtrOutput { return v.LogDelivery }).(ConnectorLogDeliveryPtrOutput)
}

func (o ConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConnectorOutput) Plugins() ConnectorPluginArrayOutput {
	return o.ApplyT(func(v *Connector) ConnectorPluginArrayOutput { return v.Plugins }).(ConnectorPluginArrayOutput)
}

func (o ConnectorOutput) ServiceExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.ServiceExecutionRoleArn }).(pulumi.StringOutput)
}

func (o ConnectorOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o ConnectorOutput) WorkerConfiguration() ConnectorWorkerConfigurationPtrOutput {
	return o.ApplyT(func(v *Connector) ConnectorWorkerConfigurationPtrOutput { return v.WorkerConfiguration }).(ConnectorWorkerConfigurationPtrOutput)
}

type ConnectorArrayOutput struct{ *pulumi.OutputState }

func (ConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connector)(nil)).Elem()
}

func (o ConnectorArrayOutput) ToConnectorArrayOutput() ConnectorArrayOutput {
	return o
}

func (o ConnectorArrayOutput) ToConnectorArrayOutputWithContext(ctx context.Context) ConnectorArrayOutput {
	return o
}

func (o ConnectorArrayOutput) Index(i pulumi.IntInput) ConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connector {
		return vs[0].([]*Connector)[vs[1].(int)]
	}).(ConnectorOutput)
}

type ConnectorMapOutput struct{ *pulumi.OutputState }

func (ConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connector)(nil)).Elem()
}

func (o ConnectorMapOutput) ToConnectorMapOutput() ConnectorMapOutput {
	return o
}

func (o ConnectorMapOutput) ToConnectorMapOutputWithContext(ctx context.Context) ConnectorMapOutput {
	return o
}

func (o ConnectorMapOutput) MapIndex(k pulumi.StringInput) ConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connector {
		return vs[0].(map[string]*Connector)[vs[1].(string)]
	}).(ConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorInput)(nil)).Elem(), &Connector{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorArrayInput)(nil)).Elem(), ConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorMapInput)(nil)).Elem(), ConnectorMap{})
	pulumi.RegisterOutputType(ConnectorOutput{})
	pulumi.RegisterOutputType(ConnectorArrayOutput{})
	pulumi.RegisterOutputType(ConnectorMapOutput{})
}
