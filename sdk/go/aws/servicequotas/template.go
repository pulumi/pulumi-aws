// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicequotas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Service Quotas Template.
//
// > Only the management account of an organization can alter Service Quota templates, and this must be done from the `us-east-1` region.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/servicequotas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := servicequotas.NewTemplate(ctx, "example", &servicequotas.TemplateArgs{
//				QuotaCode:   pulumi.String("L-2ACBD22F"),
//				Region:      pulumi.String("us-east-1"),
//				ServiceCode: pulumi.String("lambda"),
//				Value:       pulumi.Float64(80),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// In TODO v1.5.0 and later, use an `import` block to import Service Quotas Template using the `example_id_arg`. For exampleterraform import {
//
//	to = aws_servicequotas_template.example
//
//	id = "us-east-1,L-2ACBD22F,lambda" } Using `TODO import`, import Service Quotas Template using the `id`. For exampleconsole % TODO import aws_servicequotas_template.example us-east-1,L-2ACBD22F,lambda
type Template struct {
	pulumi.CustomResourceState

	// Indicates whether the quota is global.
	GlobalQuota pulumi.BoolOutput `pulumi:"globalQuota"`
	// Quota identifier. To find the quota code for a specific quota, use the servicequotas.ServiceQuota data source.
	QuotaCode pulumi.StringOutput `pulumi:"quotaCode"`
	// Quota name.
	QuotaName pulumi.StringOutput `pulumi:"quotaName"`
	// AWS Region to which the template applies.
	Region pulumi.StringOutput `pulumi:"region"`
	// Service identifier. To find the service code value for an AWS service, use the servicequotas.getService data source.
	ServiceCode pulumi.StringOutput `pulumi:"serviceCode"`
	// Service name.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Unit of measurement.
	Unit pulumi.StringOutput `pulumi:"unit"`
	// The new, increased value for the quota.
	Value pulumi.Float64Output `pulumi:"value"`
}

// NewTemplate registers a new resource with the given unique name, arguments, and options.
func NewTemplate(ctx *pulumi.Context,
	name string, args *TemplateArgs, opts ...pulumi.ResourceOption) (*Template, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.QuotaCode == nil {
		return nil, errors.New("invalid value for required argument 'QuotaCode'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.ServiceCode == nil {
		return nil, errors.New("invalid value for required argument 'ServiceCode'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Template
	err := ctx.RegisterResource("aws:servicequotas/template:Template", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplate gets an existing Template resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateState, opts ...pulumi.ResourceOption) (*Template, error) {
	var resource Template
	err := ctx.ReadResource("aws:servicequotas/template:Template", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Template resources.
type templateState struct {
	// Indicates whether the quota is global.
	GlobalQuota *bool `pulumi:"globalQuota"`
	// Quota identifier. To find the quota code for a specific quota, use the servicequotas.ServiceQuota data source.
	QuotaCode *string `pulumi:"quotaCode"`
	// Quota name.
	QuotaName *string `pulumi:"quotaName"`
	// AWS Region to which the template applies.
	Region *string `pulumi:"region"`
	// Service identifier. To find the service code value for an AWS service, use the servicequotas.getService data source.
	ServiceCode *string `pulumi:"serviceCode"`
	// Service name.
	ServiceName *string `pulumi:"serviceName"`
	// Unit of measurement.
	Unit *string `pulumi:"unit"`
	// The new, increased value for the quota.
	Value *float64 `pulumi:"value"`
}

type TemplateState struct {
	// Indicates whether the quota is global.
	GlobalQuota pulumi.BoolPtrInput
	// Quota identifier. To find the quota code for a specific quota, use the servicequotas.ServiceQuota data source.
	QuotaCode pulumi.StringPtrInput
	// Quota name.
	QuotaName pulumi.StringPtrInput
	// AWS Region to which the template applies.
	Region pulumi.StringPtrInput
	// Service identifier. To find the service code value for an AWS service, use the servicequotas.getService data source.
	ServiceCode pulumi.StringPtrInput
	// Service name.
	ServiceName pulumi.StringPtrInput
	// Unit of measurement.
	Unit pulumi.StringPtrInput
	// The new, increased value for the quota.
	Value pulumi.Float64PtrInput
}

func (TemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateState)(nil)).Elem()
}

type templateArgs struct {
	// Quota identifier. To find the quota code for a specific quota, use the servicequotas.ServiceQuota data source.
	QuotaCode string `pulumi:"quotaCode"`
	// AWS Region to which the template applies.
	Region string `pulumi:"region"`
	// Service identifier. To find the service code value for an AWS service, use the servicequotas.getService data source.
	ServiceCode string `pulumi:"serviceCode"`
	// The new, increased value for the quota.
	Value float64 `pulumi:"value"`
}

// The set of arguments for constructing a Template resource.
type TemplateArgs struct {
	// Quota identifier. To find the quota code for a specific quota, use the servicequotas.ServiceQuota data source.
	QuotaCode pulumi.StringInput
	// AWS Region to which the template applies.
	Region pulumi.StringInput
	// Service identifier. To find the service code value for an AWS service, use the servicequotas.getService data source.
	ServiceCode pulumi.StringInput
	// The new, increased value for the quota.
	Value pulumi.Float64Input
}

func (TemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateArgs)(nil)).Elem()
}

type TemplateInput interface {
	pulumi.Input

	ToTemplateOutput() TemplateOutput
	ToTemplateOutputWithContext(ctx context.Context) TemplateOutput
}

func (*Template) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (i *Template) ToTemplateOutput() TemplateOutput {
	return i.ToTemplateOutputWithContext(context.Background())
}

func (i *Template) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateOutput)
}

func (i *Template) ToOutput(ctx context.Context) pulumix.Output[*Template] {
	return pulumix.Output[*Template]{
		OutputState: i.ToTemplateOutputWithContext(ctx).OutputState,
	}
}

// TemplateArrayInput is an input type that accepts TemplateArray and TemplateArrayOutput values.
// You can construct a concrete instance of `TemplateArrayInput` via:
//
//	TemplateArray{ TemplateArgs{...} }
type TemplateArrayInput interface {
	pulumi.Input

	ToTemplateArrayOutput() TemplateArrayOutput
	ToTemplateArrayOutputWithContext(context.Context) TemplateArrayOutput
}

type TemplateArray []TemplateInput

func (TemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Template)(nil)).Elem()
}

func (i TemplateArray) ToTemplateArrayOutput() TemplateArrayOutput {
	return i.ToTemplateArrayOutputWithContext(context.Background())
}

func (i TemplateArray) ToTemplateArrayOutputWithContext(ctx context.Context) TemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArrayOutput)
}

func (i TemplateArray) ToOutput(ctx context.Context) pulumix.Output[[]*Template] {
	return pulumix.Output[[]*Template]{
		OutputState: i.ToTemplateArrayOutputWithContext(ctx).OutputState,
	}
}

// TemplateMapInput is an input type that accepts TemplateMap and TemplateMapOutput values.
// You can construct a concrete instance of `TemplateMapInput` via:
//
//	TemplateMap{ "key": TemplateArgs{...} }
type TemplateMapInput interface {
	pulumi.Input

	ToTemplateMapOutput() TemplateMapOutput
	ToTemplateMapOutputWithContext(context.Context) TemplateMapOutput
}

type TemplateMap map[string]TemplateInput

func (TemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Template)(nil)).Elem()
}

func (i TemplateMap) ToTemplateMapOutput() TemplateMapOutput {
	return i.ToTemplateMapOutputWithContext(context.Background())
}

func (i TemplateMap) ToTemplateMapOutputWithContext(ctx context.Context) TemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMapOutput)
}

func (i TemplateMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Template] {
	return pulumix.Output[map[string]*Template]{
		OutputState: i.ToTemplateMapOutputWithContext(ctx).OutputState,
	}
}

type TemplateOutput struct{ *pulumi.OutputState }

func (TemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (o TemplateOutput) ToTemplateOutput() TemplateOutput {
	return o
}

func (o TemplateOutput) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return o
}

func (o TemplateOutput) ToOutput(ctx context.Context) pulumix.Output[*Template] {
	return pulumix.Output[*Template]{
		OutputState: o.OutputState,
	}
}

// Indicates whether the quota is global.
func (o TemplateOutput) GlobalQuota() pulumi.BoolOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolOutput { return v.GlobalQuota }).(pulumi.BoolOutput)
}

// Quota identifier. To find the quota code for a specific quota, use the servicequotas.ServiceQuota data source.
func (o TemplateOutput) QuotaCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.QuotaCode }).(pulumi.StringOutput)
}

// Quota name.
func (o TemplateOutput) QuotaName() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.QuotaName }).(pulumi.StringOutput)
}

// AWS Region to which the template applies.
func (o TemplateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Service identifier. To find the service code value for an AWS service, use the servicequotas.getService data source.
func (o TemplateOutput) ServiceCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.ServiceCode }).(pulumi.StringOutput)
}

// Service name.
func (o TemplateOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Unit of measurement.
func (o TemplateOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.Unit }).(pulumi.StringOutput)
}

// The new, increased value for the quota.
func (o TemplateOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v *Template) pulumi.Float64Output { return v.Value }).(pulumi.Float64Output)
}

type TemplateArrayOutput struct{ *pulumi.OutputState }

func (TemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Template)(nil)).Elem()
}

func (o TemplateArrayOutput) ToTemplateArrayOutput() TemplateArrayOutput {
	return o
}

func (o TemplateArrayOutput) ToTemplateArrayOutputWithContext(ctx context.Context) TemplateArrayOutput {
	return o
}

func (o TemplateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Template] {
	return pulumix.Output[[]*Template]{
		OutputState: o.OutputState,
	}
}

func (o TemplateArrayOutput) Index(i pulumi.IntInput) TemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Template {
		return vs[0].([]*Template)[vs[1].(int)]
	}).(TemplateOutput)
}

type TemplateMapOutput struct{ *pulumi.OutputState }

func (TemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Template)(nil)).Elem()
}

func (o TemplateMapOutput) ToTemplateMapOutput() TemplateMapOutput {
	return o
}

func (o TemplateMapOutput) ToTemplateMapOutputWithContext(ctx context.Context) TemplateMapOutput {
	return o
}

func (o TemplateMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Template] {
	return pulumix.Output[map[string]*Template]{
		OutputState: o.OutputState,
	}
}

func (o TemplateMapOutput) MapIndex(k pulumi.StringInput) TemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Template {
		return vs[0].(map[string]*Template)[vs[1].(string)]
	}).(TemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInput)(nil)).Elem(), &Template{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArrayInput)(nil)).Elem(), TemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMapInput)(nil)).Elem(), TemplateMap{})
	pulumi.RegisterOutputType(TemplateOutput{})
	pulumi.RegisterOutputType(TemplateArrayOutput{})
	pulumi.RegisterOutputType(TemplateMapOutput{})
}
