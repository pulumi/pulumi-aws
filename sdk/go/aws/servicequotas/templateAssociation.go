// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicequotas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Service Quotas Template Association.
//
// > Only the management account of an organization can associate Service Quota templates, and this must be done from the `us-east-1` region.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/servicequotas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := servicequotas.NewTemplateAssociation(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Service Quotas Template Association using the `id`. For example:
//
// ```sh
//
//	$ pulumi import aws:servicequotas/templateAssociation:TemplateAssociation example 012345678901
//
// ```
type TemplateAssociation struct {
	pulumi.CustomResourceState

	SkipDestroy pulumi.BoolPtrOutput `pulumi:"skipDestroy"`
	// Association status. Creating this resource will result in an `ASSOCIATED` status, and quota increase requests in the template are automatically applied to new AWS accounts in the organization.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewTemplateAssociation registers a new resource with the given unique name, arguments, and options.
func NewTemplateAssociation(ctx *pulumi.Context,
	name string, args *TemplateAssociationArgs, opts ...pulumi.ResourceOption) (*TemplateAssociation, error) {
	if args == nil {
		args = &TemplateAssociationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TemplateAssociation
	err := ctx.RegisterResource("aws:servicequotas/templateAssociation:TemplateAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplateAssociation gets an existing TemplateAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplateAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateAssociationState, opts ...pulumi.ResourceOption) (*TemplateAssociation, error) {
	var resource TemplateAssociation
	err := ctx.ReadResource("aws:servicequotas/templateAssociation:TemplateAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TemplateAssociation resources.
type templateAssociationState struct {
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// Association status. Creating this resource will result in an `ASSOCIATED` status, and quota increase requests in the template are automatically applied to new AWS accounts in the organization.
	Status *string `pulumi:"status"`
}

type TemplateAssociationState struct {
	SkipDestroy pulumi.BoolPtrInput
	// Association status. Creating this resource will result in an `ASSOCIATED` status, and quota increase requests in the template are automatically applied to new AWS accounts in the organization.
	Status pulumi.StringPtrInput
}

func (TemplateAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateAssociationState)(nil)).Elem()
}

type templateAssociationArgs struct {
	SkipDestroy *bool `pulumi:"skipDestroy"`
}

// The set of arguments for constructing a TemplateAssociation resource.
type TemplateAssociationArgs struct {
	SkipDestroy pulumi.BoolPtrInput
}

func (TemplateAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateAssociationArgs)(nil)).Elem()
}

type TemplateAssociationInput interface {
	pulumi.Input

	ToTemplateAssociationOutput() TemplateAssociationOutput
	ToTemplateAssociationOutputWithContext(ctx context.Context) TemplateAssociationOutput
}

func (*TemplateAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAssociation)(nil)).Elem()
}

func (i *TemplateAssociation) ToTemplateAssociationOutput() TemplateAssociationOutput {
	return i.ToTemplateAssociationOutputWithContext(context.Background())
}

func (i *TemplateAssociation) ToTemplateAssociationOutputWithContext(ctx context.Context) TemplateAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAssociationOutput)
}

func (i *TemplateAssociation) ToOutput(ctx context.Context) pulumix.Output[*TemplateAssociation] {
	return pulumix.Output[*TemplateAssociation]{
		OutputState: i.ToTemplateAssociationOutputWithContext(ctx).OutputState,
	}
}

// TemplateAssociationArrayInput is an input type that accepts TemplateAssociationArray and TemplateAssociationArrayOutput values.
// You can construct a concrete instance of `TemplateAssociationArrayInput` via:
//
//	TemplateAssociationArray{ TemplateAssociationArgs{...} }
type TemplateAssociationArrayInput interface {
	pulumi.Input

	ToTemplateAssociationArrayOutput() TemplateAssociationArrayOutput
	ToTemplateAssociationArrayOutputWithContext(context.Context) TemplateAssociationArrayOutput
}

type TemplateAssociationArray []TemplateAssociationInput

func (TemplateAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemplateAssociation)(nil)).Elem()
}

func (i TemplateAssociationArray) ToTemplateAssociationArrayOutput() TemplateAssociationArrayOutput {
	return i.ToTemplateAssociationArrayOutputWithContext(context.Background())
}

func (i TemplateAssociationArray) ToTemplateAssociationArrayOutputWithContext(ctx context.Context) TemplateAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAssociationArrayOutput)
}

func (i TemplateAssociationArray) ToOutput(ctx context.Context) pulumix.Output[[]*TemplateAssociation] {
	return pulumix.Output[[]*TemplateAssociation]{
		OutputState: i.ToTemplateAssociationArrayOutputWithContext(ctx).OutputState,
	}
}

// TemplateAssociationMapInput is an input type that accepts TemplateAssociationMap and TemplateAssociationMapOutput values.
// You can construct a concrete instance of `TemplateAssociationMapInput` via:
//
//	TemplateAssociationMap{ "key": TemplateAssociationArgs{...} }
type TemplateAssociationMapInput interface {
	pulumi.Input

	ToTemplateAssociationMapOutput() TemplateAssociationMapOutput
	ToTemplateAssociationMapOutputWithContext(context.Context) TemplateAssociationMapOutput
}

type TemplateAssociationMap map[string]TemplateAssociationInput

func (TemplateAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemplateAssociation)(nil)).Elem()
}

func (i TemplateAssociationMap) ToTemplateAssociationMapOutput() TemplateAssociationMapOutput {
	return i.ToTemplateAssociationMapOutputWithContext(context.Background())
}

func (i TemplateAssociationMap) ToTemplateAssociationMapOutputWithContext(ctx context.Context) TemplateAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAssociationMapOutput)
}

func (i TemplateAssociationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TemplateAssociation] {
	return pulumix.Output[map[string]*TemplateAssociation]{
		OutputState: i.ToTemplateAssociationMapOutputWithContext(ctx).OutputState,
	}
}

type TemplateAssociationOutput struct{ *pulumi.OutputState }

func (TemplateAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAssociation)(nil)).Elem()
}

func (o TemplateAssociationOutput) ToTemplateAssociationOutput() TemplateAssociationOutput {
	return o
}

func (o TemplateAssociationOutput) ToTemplateAssociationOutputWithContext(ctx context.Context) TemplateAssociationOutput {
	return o
}

func (o TemplateAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[*TemplateAssociation] {
	return pulumix.Output[*TemplateAssociation]{
		OutputState: o.OutputState,
	}
}

func (o TemplateAssociationOutput) SkipDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TemplateAssociation) pulumi.BoolPtrOutput { return v.SkipDestroy }).(pulumi.BoolPtrOutput)
}

// Association status. Creating this resource will result in an `ASSOCIATED` status, and quota increase requests in the template are automatically applied to new AWS accounts in the organization.
func (o TemplateAssociationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TemplateAssociation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type TemplateAssociationArrayOutput struct{ *pulumi.OutputState }

func (TemplateAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemplateAssociation)(nil)).Elem()
}

func (o TemplateAssociationArrayOutput) ToTemplateAssociationArrayOutput() TemplateAssociationArrayOutput {
	return o
}

func (o TemplateAssociationArrayOutput) ToTemplateAssociationArrayOutputWithContext(ctx context.Context) TemplateAssociationArrayOutput {
	return o
}

func (o TemplateAssociationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TemplateAssociation] {
	return pulumix.Output[[]*TemplateAssociation]{
		OutputState: o.OutputState,
	}
}

func (o TemplateAssociationArrayOutput) Index(i pulumi.IntInput) TemplateAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TemplateAssociation {
		return vs[0].([]*TemplateAssociation)[vs[1].(int)]
	}).(TemplateAssociationOutput)
}

type TemplateAssociationMapOutput struct{ *pulumi.OutputState }

func (TemplateAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemplateAssociation)(nil)).Elem()
}

func (o TemplateAssociationMapOutput) ToTemplateAssociationMapOutput() TemplateAssociationMapOutput {
	return o
}

func (o TemplateAssociationMapOutput) ToTemplateAssociationMapOutputWithContext(ctx context.Context) TemplateAssociationMapOutput {
	return o
}

func (o TemplateAssociationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TemplateAssociation] {
	return pulumix.Output[map[string]*TemplateAssociation]{
		OutputState: o.OutputState,
	}
}

func (o TemplateAssociationMapOutput) MapIndex(k pulumi.StringInput) TemplateAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TemplateAssociation {
		return vs[0].(map[string]*TemplateAssociation)[vs[1].(string)]
	}).(TemplateAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAssociationInput)(nil)).Elem(), &TemplateAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAssociationArrayInput)(nil)).Elem(), TemplateAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAssociationMapInput)(nil)).Elem(), TemplateAssociationMap{})
	pulumi.RegisterOutputType(TemplateAssociationOutput{})
	pulumi.RegisterOutputType(TemplateAssociationArrayOutput{})
	pulumi.RegisterOutputType(TemplateAssociationMapOutput{})
}
