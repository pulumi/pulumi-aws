// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Upload struct {
	pulumi.CustomResourceState

	Arn         pulumi.StringOutput    `pulumi:"arn"`
	Category    pulumi.StringOutput    `pulumi:"category"`
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	Metadata    pulumi.StringOutput    `pulumi:"metadata"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	ProjectArn  pulumi.StringOutput    `pulumi:"projectArn"`
	Type        pulumi.StringOutput    `pulumi:"type"`
	Url         pulumi.StringOutput    `pulumi:"url"`
}

// NewUpload registers a new resource with the given unique name, arguments, and options.
func NewUpload(ctx *pulumi.Context,
	name string, args *UploadArgs, opts ...pulumi.ResourceOption) (*Upload, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectArn == nil {
		return nil, errors.New("invalid value for required argument 'ProjectArn'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Upload
	err := ctx.RegisterResource("aws:devicefarm/upload:Upload", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpload gets an existing Upload resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpload(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UploadState, opts ...pulumi.ResourceOption) (*Upload, error) {
	var resource Upload
	err := ctx.ReadResource("aws:devicefarm/upload:Upload", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Upload resources.
type uploadState struct {
	Arn         *string `pulumi:"arn"`
	Category    *string `pulumi:"category"`
	ContentType *string `pulumi:"contentType"`
	Metadata    *string `pulumi:"metadata"`
	Name        *string `pulumi:"name"`
	ProjectArn  *string `pulumi:"projectArn"`
	Type        *string `pulumi:"type"`
	Url         *string `pulumi:"url"`
}

type UploadState struct {
	Arn         pulumi.StringPtrInput
	Category    pulumi.StringPtrInput
	ContentType pulumi.StringPtrInput
	Metadata    pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	ProjectArn  pulumi.StringPtrInput
	Type        pulumi.StringPtrInput
	Url         pulumi.StringPtrInput
}

func (UploadState) ElementType() reflect.Type {
	return reflect.TypeOf((*uploadState)(nil)).Elem()
}

type uploadArgs struct {
	ContentType *string `pulumi:"contentType"`
	Name        *string `pulumi:"name"`
	ProjectArn  string  `pulumi:"projectArn"`
	Type        string  `pulumi:"type"`
}

// The set of arguments for constructing a Upload resource.
type UploadArgs struct {
	ContentType pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	ProjectArn  pulumi.StringInput
	Type        pulumi.StringInput
}

func (UploadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*uploadArgs)(nil)).Elem()
}

type UploadInput interface {
	pulumi.Input

	ToUploadOutput() UploadOutput
	ToUploadOutputWithContext(ctx context.Context) UploadOutput
}

func (*Upload) ElementType() reflect.Type {
	return reflect.TypeOf((**Upload)(nil)).Elem()
}

func (i *Upload) ToUploadOutput() UploadOutput {
	return i.ToUploadOutputWithContext(context.Background())
}

func (i *Upload) ToUploadOutputWithContext(ctx context.Context) UploadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadOutput)
}

// UploadArrayInput is an input type that accepts UploadArray and UploadArrayOutput values.
// You can construct a concrete instance of `UploadArrayInput` via:
//
//	UploadArray{ UploadArgs{...} }
type UploadArrayInput interface {
	pulumi.Input

	ToUploadArrayOutput() UploadArrayOutput
	ToUploadArrayOutputWithContext(context.Context) UploadArrayOutput
}

type UploadArray []UploadInput

func (UploadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Upload)(nil)).Elem()
}

func (i UploadArray) ToUploadArrayOutput() UploadArrayOutput {
	return i.ToUploadArrayOutputWithContext(context.Background())
}

func (i UploadArray) ToUploadArrayOutputWithContext(ctx context.Context) UploadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadArrayOutput)
}

// UploadMapInput is an input type that accepts UploadMap and UploadMapOutput values.
// You can construct a concrete instance of `UploadMapInput` via:
//
//	UploadMap{ "key": UploadArgs{...} }
type UploadMapInput interface {
	pulumi.Input

	ToUploadMapOutput() UploadMapOutput
	ToUploadMapOutputWithContext(context.Context) UploadMapOutput
}

type UploadMap map[string]UploadInput

func (UploadMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Upload)(nil)).Elem()
}

func (i UploadMap) ToUploadMapOutput() UploadMapOutput {
	return i.ToUploadMapOutputWithContext(context.Background())
}

func (i UploadMap) ToUploadMapOutputWithContext(ctx context.Context) UploadMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadMapOutput)
}

type UploadOutput struct{ *pulumi.OutputState }

func (UploadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Upload)(nil)).Elem()
}

func (o UploadOutput) ToUploadOutput() UploadOutput {
	return o
}

func (o UploadOutput) ToUploadOutputWithContext(ctx context.Context) UploadOutput {
	return o
}

func (o UploadOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Upload) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o UploadOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *Upload) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

func (o UploadOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Upload) pulumi.StringPtrOutput { return v.ContentType }).(pulumi.StringPtrOutput)
}

func (o UploadOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *Upload) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

func (o UploadOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Upload) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UploadOutput) ProjectArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Upload) pulumi.StringOutput { return v.ProjectArn }).(pulumi.StringOutput)
}

func (o UploadOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Upload) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o UploadOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Upload) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type UploadArrayOutput struct{ *pulumi.OutputState }

func (UploadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Upload)(nil)).Elem()
}

func (o UploadArrayOutput) ToUploadArrayOutput() UploadArrayOutput {
	return o
}

func (o UploadArrayOutput) ToUploadArrayOutputWithContext(ctx context.Context) UploadArrayOutput {
	return o
}

func (o UploadArrayOutput) Index(i pulumi.IntInput) UploadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Upload {
		return vs[0].([]*Upload)[vs[1].(int)]
	}).(UploadOutput)
}

type UploadMapOutput struct{ *pulumi.OutputState }

func (UploadMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Upload)(nil)).Elem()
}

func (o UploadMapOutput) ToUploadMapOutput() UploadMapOutput {
	return o
}

func (o UploadMapOutput) ToUploadMapOutputWithContext(ctx context.Context) UploadMapOutput {
	return o
}

func (o UploadMapOutput) MapIndex(k pulumi.StringInput) UploadOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Upload {
		return vs[0].(map[string]*Upload)[vs[1].(string)]
	}).(UploadOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UploadInput)(nil)).Elem(), &Upload{})
	pulumi.RegisterInputType(reflect.TypeOf((*UploadArrayInput)(nil)).Elem(), UploadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UploadMapInput)(nil)).Elem(), UploadMap{})
	pulumi.RegisterOutputType(UploadOutput{})
	pulumi.RegisterOutputType(UploadArrayOutput{})
	pulumi.RegisterOutputType(UploadMapOutput{})
}
