// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DevicePool struct {
	pulumi.CustomResourceState

	Arn         pulumi.StringOutput       `pulumi:"arn"`
	Description pulumi.StringPtrOutput    `pulumi:"description"`
	MaxDevices  pulumi.IntPtrOutput       `pulumi:"maxDevices"`
	Name        pulumi.StringOutput       `pulumi:"name"`
	ProjectArn  pulumi.StringOutput       `pulumi:"projectArn"`
	Rules       DevicePoolRuleArrayOutput `pulumi:"rules"`
	Tags        pulumi.StringMapOutput    `pulumi:"tags"`
	TagsAll     pulumi.StringMapOutput    `pulumi:"tagsAll"`
	Type        pulumi.StringOutput       `pulumi:"type"`
}

// NewDevicePool registers a new resource with the given unique name, arguments, and options.
func NewDevicePool(ctx *pulumi.Context,
	name string, args *DevicePoolArgs, opts ...pulumi.ResourceOption) (*DevicePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectArn == nil {
		return nil, errors.New("invalid value for required argument 'ProjectArn'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	var resource DevicePool
	err := ctx.RegisterResource("aws:devicefarm/devicePool:DevicePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicePool gets an existing DevicePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicePoolState, opts ...pulumi.ResourceOption) (*DevicePool, error) {
	var resource DevicePool
	err := ctx.ReadResource("aws:devicefarm/devicePool:DevicePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicePool resources.
type devicePoolState struct {
	Arn         *string           `pulumi:"arn"`
	Description *string           `pulumi:"description"`
	MaxDevices  *int              `pulumi:"maxDevices"`
	Name        *string           `pulumi:"name"`
	ProjectArn  *string           `pulumi:"projectArn"`
	Rules       []DevicePoolRule  `pulumi:"rules"`
	Tags        map[string]string `pulumi:"tags"`
	TagsAll     map[string]string `pulumi:"tagsAll"`
	Type        *string           `pulumi:"type"`
}

type DevicePoolState struct {
	Arn         pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	MaxDevices  pulumi.IntPtrInput
	Name        pulumi.StringPtrInput
	ProjectArn  pulumi.StringPtrInput
	Rules       DevicePoolRuleArrayInput
	Tags        pulumi.StringMapInput
	TagsAll     pulumi.StringMapInput
	Type        pulumi.StringPtrInput
}

func (DevicePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePoolState)(nil)).Elem()
}

type devicePoolArgs struct {
	Description *string           `pulumi:"description"`
	MaxDevices  *int              `pulumi:"maxDevices"`
	Name        *string           `pulumi:"name"`
	ProjectArn  string            `pulumi:"projectArn"`
	Rules       []DevicePoolRule  `pulumi:"rules"`
	Tags        map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DevicePool resource.
type DevicePoolArgs struct {
	Description pulumi.StringPtrInput
	MaxDevices  pulumi.IntPtrInput
	Name        pulumi.StringPtrInput
	ProjectArn  pulumi.StringInput
	Rules       DevicePoolRuleArrayInput
	Tags        pulumi.StringMapInput
}

func (DevicePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePoolArgs)(nil)).Elem()
}

type DevicePoolInput interface {
	pulumi.Input

	ToDevicePoolOutput() DevicePoolOutput
	ToDevicePoolOutputWithContext(ctx context.Context) DevicePoolOutput
}

func (*DevicePool) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePool)(nil)).Elem()
}

func (i *DevicePool) ToDevicePoolOutput() DevicePoolOutput {
	return i.ToDevicePoolOutputWithContext(context.Background())
}

func (i *DevicePool) ToDevicePoolOutputWithContext(ctx context.Context) DevicePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePoolOutput)
}

// DevicePoolArrayInput is an input type that accepts DevicePoolArray and DevicePoolArrayOutput values.
// You can construct a concrete instance of `DevicePoolArrayInput` via:
//
//	DevicePoolArray{ DevicePoolArgs{...} }
type DevicePoolArrayInput interface {
	pulumi.Input

	ToDevicePoolArrayOutput() DevicePoolArrayOutput
	ToDevicePoolArrayOutputWithContext(context.Context) DevicePoolArrayOutput
}

type DevicePoolArray []DevicePoolInput

func (DevicePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePool)(nil)).Elem()
}

func (i DevicePoolArray) ToDevicePoolArrayOutput() DevicePoolArrayOutput {
	return i.ToDevicePoolArrayOutputWithContext(context.Background())
}

func (i DevicePoolArray) ToDevicePoolArrayOutputWithContext(ctx context.Context) DevicePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePoolArrayOutput)
}

// DevicePoolMapInput is an input type that accepts DevicePoolMap and DevicePoolMapOutput values.
// You can construct a concrete instance of `DevicePoolMapInput` via:
//
//	DevicePoolMap{ "key": DevicePoolArgs{...} }
type DevicePoolMapInput interface {
	pulumi.Input

	ToDevicePoolMapOutput() DevicePoolMapOutput
	ToDevicePoolMapOutputWithContext(context.Context) DevicePoolMapOutput
}

type DevicePoolMap map[string]DevicePoolInput

func (DevicePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePool)(nil)).Elem()
}

func (i DevicePoolMap) ToDevicePoolMapOutput() DevicePoolMapOutput {
	return i.ToDevicePoolMapOutputWithContext(context.Background())
}

func (i DevicePoolMap) ToDevicePoolMapOutputWithContext(ctx context.Context) DevicePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePoolMapOutput)
}

type DevicePoolOutput struct{ *pulumi.OutputState }

func (DevicePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePool)(nil)).Elem()
}

func (o DevicePoolOutput) ToDevicePoolOutput() DevicePoolOutput {
	return o
}

func (o DevicePoolOutput) ToDevicePoolOutputWithContext(ctx context.Context) DevicePoolOutput {
	return o
}

func (o DevicePoolOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DevicePoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DevicePoolOutput) MaxDevices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.IntPtrOutput { return v.MaxDevices }).(pulumi.IntPtrOutput)
}

func (o DevicePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DevicePoolOutput) ProjectArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.StringOutput { return v.ProjectArn }).(pulumi.StringOutput)
}

func (o DevicePoolOutput) Rules() DevicePoolRuleArrayOutput {
	return o.ApplyT(func(v *DevicePool) DevicePoolRuleArrayOutput { return v.Rules }).(DevicePoolRuleArrayOutput)
}

func (o DevicePoolOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DevicePoolOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DevicePoolOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DevicePoolArrayOutput struct{ *pulumi.OutputState }

func (DevicePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePool)(nil)).Elem()
}

func (o DevicePoolArrayOutput) ToDevicePoolArrayOutput() DevicePoolArrayOutput {
	return o
}

func (o DevicePoolArrayOutput) ToDevicePoolArrayOutputWithContext(ctx context.Context) DevicePoolArrayOutput {
	return o
}

func (o DevicePoolArrayOutput) Index(i pulumi.IntInput) DevicePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicePool {
		return vs[0].([]*DevicePool)[vs[1].(int)]
	}).(DevicePoolOutput)
}

type DevicePoolMapOutput struct{ *pulumi.OutputState }

func (DevicePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePool)(nil)).Elem()
}

func (o DevicePoolMapOutput) ToDevicePoolMapOutput() DevicePoolMapOutput {
	return o
}

func (o DevicePoolMapOutput) ToDevicePoolMapOutputWithContext(ctx context.Context) DevicePoolMapOutput {
	return o
}

func (o DevicePoolMapOutput) MapIndex(k pulumi.StringInput) DevicePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicePool {
		return vs[0].(map[string]*DevicePool)[vs[1].(string)]
	}).(DevicePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePoolInput)(nil)).Elem(), &DevicePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePoolArrayInput)(nil)).Elem(), DevicePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePoolMapInput)(nil)).Elem(), DevicePoolMap{})
	pulumi.RegisterOutputType(DevicePoolOutput{})
	pulumi.RegisterOutputType(DevicePoolArrayOutput{})
	pulumi.RegisterOutputType(DevicePoolMapOutput{})
}
