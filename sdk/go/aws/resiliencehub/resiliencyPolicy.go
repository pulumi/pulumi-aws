// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resiliencehub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Resilience Hub Resiliency Policy.
//
// ## Import
//
// Using `pulumi import`, import Resilience Hub Resiliency Policy using the `arn`. For example:
//
// ```sh
// $ pulumi import aws:resiliencehub/resiliencyPolicy:ResiliencyPolicy example arn:aws:resiliencehub:us-east-1:123456789012:resiliency-policy/8c1cfa29-d1dd-4421-aa68-c9f64cced4c2
// ```
type ResiliencyPolicy struct {
	pulumi.CustomResourceState

	// ARN of the Resiliency Policy.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Data Location Constraint of the Policy.
	// Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
	DataLocationConstraint pulumi.StringOutput `pulumi:"dataLocationConstraint"`
	// Description of Resiliency Policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Estimated Cost Tier of the Resiliency Policy.
	EstimatedCostTier pulumi.StringOutput `pulumi:"estimatedCostTier"`
	// Name of Resiliency Policy.
	// Must be between 2 and 60 characters long.
	// Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
	//
	// The following arguments are optional:
	Policy ResiliencyPolicyPolicyPtrOutput `pulumi:"policy"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Resiliency Policy Tier.
	// Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
	Tier     pulumi.StringOutput               `pulumi:"tier"`
	Timeouts ResiliencyPolicyTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewResiliencyPolicy registers a new resource with the given unique name, arguments, and options.
func NewResiliencyPolicy(ctx *pulumi.Context,
	name string, args *ResiliencyPolicyArgs, opts ...pulumi.ResourceOption) (*ResiliencyPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Tier == nil {
		return nil, errors.New("invalid value for required argument 'Tier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResiliencyPolicy
	err := ctx.RegisterResource("aws:resiliencehub/resiliencyPolicy:ResiliencyPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResiliencyPolicy gets an existing ResiliencyPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResiliencyPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResiliencyPolicyState, opts ...pulumi.ResourceOption) (*ResiliencyPolicy, error) {
	var resource ResiliencyPolicy
	err := ctx.ReadResource("aws:resiliencehub/resiliencyPolicy:ResiliencyPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResiliencyPolicy resources.
type resiliencyPolicyState struct {
	// ARN of the Resiliency Policy.
	Arn *string `pulumi:"arn"`
	// Data Location Constraint of the Policy.
	// Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
	DataLocationConstraint *string `pulumi:"dataLocationConstraint"`
	// Description of Resiliency Policy.
	Description *string `pulumi:"description"`
	// Estimated Cost Tier of the Resiliency Policy.
	EstimatedCostTier *string `pulumi:"estimatedCostTier"`
	// Name of Resiliency Policy.
	// Must be between 2 and 60 characters long.
	// Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
	Name *string `pulumi:"name"`
	// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
	//
	// The following arguments are optional:
	Policy *ResiliencyPolicyPolicy `pulumi:"policy"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Resiliency Policy Tier.
	// Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
	Tier     *string                   `pulumi:"tier"`
	Timeouts *ResiliencyPolicyTimeouts `pulumi:"timeouts"`
}

type ResiliencyPolicyState struct {
	// ARN of the Resiliency Policy.
	Arn pulumi.StringPtrInput
	// Data Location Constraint of the Policy.
	// Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
	DataLocationConstraint pulumi.StringPtrInput
	// Description of Resiliency Policy.
	Description pulumi.StringPtrInput
	// Estimated Cost Tier of the Resiliency Policy.
	EstimatedCostTier pulumi.StringPtrInput
	// Name of Resiliency Policy.
	// Must be between 2 and 60 characters long.
	// Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
	Name pulumi.StringPtrInput
	// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
	//
	// The following arguments are optional:
	Policy ResiliencyPolicyPolicyPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// Resiliency Policy Tier.
	// Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
	Tier     pulumi.StringPtrInput
	Timeouts ResiliencyPolicyTimeoutsPtrInput
}

func (ResiliencyPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*resiliencyPolicyState)(nil)).Elem()
}

type resiliencyPolicyArgs struct {
	// Data Location Constraint of the Policy.
	// Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
	DataLocationConstraint *string `pulumi:"dataLocationConstraint"`
	// Description of Resiliency Policy.
	Description *string `pulumi:"description"`
	// Name of Resiliency Policy.
	// Must be between 2 and 60 characters long.
	// Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
	Name *string `pulumi:"name"`
	// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
	//
	// The following arguments are optional:
	Policy *ResiliencyPolicyPolicy `pulumi:"policy"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Resiliency Policy Tier.
	// Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
	Tier     string                    `pulumi:"tier"`
	Timeouts *ResiliencyPolicyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ResiliencyPolicy resource.
type ResiliencyPolicyArgs struct {
	// Data Location Constraint of the Policy.
	// Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
	DataLocationConstraint pulumi.StringPtrInput
	// Description of Resiliency Policy.
	Description pulumi.StringPtrInput
	// Name of Resiliency Policy.
	// Must be between 2 and 60 characters long.
	// Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
	Name pulumi.StringPtrInput
	// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
	//
	// The following arguments are optional:
	Policy ResiliencyPolicyPolicyPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Resiliency Policy Tier.
	// Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
	Tier     pulumi.StringInput
	Timeouts ResiliencyPolicyTimeoutsPtrInput
}

func (ResiliencyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resiliencyPolicyArgs)(nil)).Elem()
}

type ResiliencyPolicyInput interface {
	pulumi.Input

	ToResiliencyPolicyOutput() ResiliencyPolicyOutput
	ToResiliencyPolicyOutputWithContext(ctx context.Context) ResiliencyPolicyOutput
}

func (*ResiliencyPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ResiliencyPolicy)(nil)).Elem()
}

func (i *ResiliencyPolicy) ToResiliencyPolicyOutput() ResiliencyPolicyOutput {
	return i.ToResiliencyPolicyOutputWithContext(context.Background())
}

func (i *ResiliencyPolicy) ToResiliencyPolicyOutputWithContext(ctx context.Context) ResiliencyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyOutput)
}

// ResiliencyPolicyArrayInput is an input type that accepts ResiliencyPolicyArray and ResiliencyPolicyArrayOutput values.
// You can construct a concrete instance of `ResiliencyPolicyArrayInput` via:
//
//	ResiliencyPolicyArray{ ResiliencyPolicyArgs{...} }
type ResiliencyPolicyArrayInput interface {
	pulumi.Input

	ToResiliencyPolicyArrayOutput() ResiliencyPolicyArrayOutput
	ToResiliencyPolicyArrayOutputWithContext(context.Context) ResiliencyPolicyArrayOutput
}

type ResiliencyPolicyArray []ResiliencyPolicyInput

func (ResiliencyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResiliencyPolicy)(nil)).Elem()
}

func (i ResiliencyPolicyArray) ToResiliencyPolicyArrayOutput() ResiliencyPolicyArrayOutput {
	return i.ToResiliencyPolicyArrayOutputWithContext(context.Background())
}

func (i ResiliencyPolicyArray) ToResiliencyPolicyArrayOutputWithContext(ctx context.Context) ResiliencyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyArrayOutput)
}

// ResiliencyPolicyMapInput is an input type that accepts ResiliencyPolicyMap and ResiliencyPolicyMapOutput values.
// You can construct a concrete instance of `ResiliencyPolicyMapInput` via:
//
//	ResiliencyPolicyMap{ "key": ResiliencyPolicyArgs{...} }
type ResiliencyPolicyMapInput interface {
	pulumi.Input

	ToResiliencyPolicyMapOutput() ResiliencyPolicyMapOutput
	ToResiliencyPolicyMapOutputWithContext(context.Context) ResiliencyPolicyMapOutput
}

type ResiliencyPolicyMap map[string]ResiliencyPolicyInput

func (ResiliencyPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResiliencyPolicy)(nil)).Elem()
}

func (i ResiliencyPolicyMap) ToResiliencyPolicyMapOutput() ResiliencyPolicyMapOutput {
	return i.ToResiliencyPolicyMapOutputWithContext(context.Background())
}

func (i ResiliencyPolicyMap) ToResiliencyPolicyMapOutputWithContext(ctx context.Context) ResiliencyPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyMapOutput)
}

type ResiliencyPolicyOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResiliencyPolicy)(nil)).Elem()
}

func (o ResiliencyPolicyOutput) ToResiliencyPolicyOutput() ResiliencyPolicyOutput {
	return o
}

func (o ResiliencyPolicyOutput) ToResiliencyPolicyOutputWithContext(ctx context.Context) ResiliencyPolicyOutput {
	return o
}

// ARN of the Resiliency Policy.
func (o ResiliencyPolicyOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Data Location Constraint of the Policy.
// Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
func (o ResiliencyPolicyOutput) DataLocationConstraint() pulumi.StringOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) pulumi.StringOutput { return v.DataLocationConstraint }).(pulumi.StringOutput)
}

// Description of Resiliency Policy.
func (o ResiliencyPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Estimated Cost Tier of the Resiliency Policy.
func (o ResiliencyPolicyOutput) EstimatedCostTier() pulumi.StringOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) pulumi.StringOutput { return v.EstimatedCostTier }).(pulumi.StringOutput)
}

// Name of Resiliency Policy.
// Must be between 2 and 60 characters long.
// Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
func (o ResiliencyPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
//
// The following arguments are optional:
func (o ResiliencyPolicyOutput) Policy() ResiliencyPolicyPolicyPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) ResiliencyPolicyPolicyPtrOutput { return v.Policy }).(ResiliencyPolicyPolicyPtrOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ResiliencyPolicyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ResiliencyPolicyOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Resiliency Policy Tier.
// Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
func (o ResiliencyPolicyOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) pulumi.StringOutput { return v.Tier }).(pulumi.StringOutput)
}

func (o ResiliencyPolicyOutput) Timeouts() ResiliencyPolicyTimeoutsPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) ResiliencyPolicyTimeoutsPtrOutput { return v.Timeouts }).(ResiliencyPolicyTimeoutsPtrOutput)
}

type ResiliencyPolicyArrayOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResiliencyPolicy)(nil)).Elem()
}

func (o ResiliencyPolicyArrayOutput) ToResiliencyPolicyArrayOutput() ResiliencyPolicyArrayOutput {
	return o
}

func (o ResiliencyPolicyArrayOutput) ToResiliencyPolicyArrayOutputWithContext(ctx context.Context) ResiliencyPolicyArrayOutput {
	return o
}

func (o ResiliencyPolicyArrayOutput) Index(i pulumi.IntInput) ResiliencyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResiliencyPolicy {
		return vs[0].([]*ResiliencyPolicy)[vs[1].(int)]
	}).(ResiliencyPolicyOutput)
}

type ResiliencyPolicyMapOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResiliencyPolicy)(nil)).Elem()
}

func (o ResiliencyPolicyMapOutput) ToResiliencyPolicyMapOutput() ResiliencyPolicyMapOutput {
	return o
}

func (o ResiliencyPolicyMapOutput) ToResiliencyPolicyMapOutputWithContext(ctx context.Context) ResiliencyPolicyMapOutput {
	return o
}

func (o ResiliencyPolicyMapOutput) MapIndex(k pulumi.StringInput) ResiliencyPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResiliencyPolicy {
		return vs[0].(map[string]*ResiliencyPolicy)[vs[1].(string)]
	}).(ResiliencyPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResiliencyPolicyInput)(nil)).Elem(), &ResiliencyPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResiliencyPolicyArrayInput)(nil)).Elem(), ResiliencyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResiliencyPolicyMapInput)(nil)).Elem(), ResiliencyPolicyMap{})
	pulumi.RegisterOutputType(ResiliencyPolicyOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyArrayOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyMapOutput{})
}
