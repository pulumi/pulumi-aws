// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AWS Cognito IDP (Identity Provider) Log Delivery Configuration.
//
// ## Example Usage
//
// ### Basic Usage with CloudWatch Logs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cognito"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := cognito.NewUserPool(ctx, "example", &cognito.UserPoolArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogGroup, err := cloudwatch.NewLogGroup(ctx, "example", &cloudwatch.LogGroupArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cognito.NewLogDeliveryConfiguration(ctx, "example", &cognito.LogDeliveryConfigurationArgs{
//				UserPoolId: example.ID(),
//				LogConfigurations: cognito.LogDeliveryConfigurationLogConfigurationArray{
//					&cognito.LogDeliveryConfigurationLogConfigurationArgs{
//						EventSource: pulumi.String("userNotification"),
//						LogLevel:    pulumi.String("ERROR"),
//						CloudWatchLogsConfiguration: &cognito.LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfigurationArgs{
//							LogGroupArn: exampleLogGroup.Arn,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Multiple Log Configurations with Different Destinations
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cognito"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/kinesis"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := cognito.NewUserPool(ctx, "example", &cognito.UserPoolArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogGroup, err := cloudwatch.NewLogGroup(ctx, "example", &cloudwatch.LogGroupArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBucket, err := s3.NewBucket(ctx, "example", &s3.BucketArgs{
//				Bucket:       pulumi.String("example-bucket"),
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": "sts:AssumeRole",
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": "firehose.amazonaws.com",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			firehose, err := iam.NewRole(ctx, "firehose", &iam.RoleArgs{
//				Name:             pulumi.String("firehose-role"),
//				AssumeRolePolicy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewRolePolicy(ctx, "firehose", &iam.RolePolicyArgs{
//				Name: pulumi.String("firehose-policy"),
//				Role: firehose.ID(),
//				Policy: pulumi.All(exampleBucket.Arn, exampleBucket.Arn).ApplyT(func(_args []interface{}) (string, error) {
//					exampleBucketArn := _args[0].(string)
//					exampleBucketArn1 := _args[1].(string)
//					var _zero string
//					tmpJSON1, err := json.Marshal(map[string]interface{}{
//						"Version": "2012-10-17",
//						"Statement": []map[string]interface{}{
//							map[string]interface{}{
//								"Effect": "Allow",
//								"Action": []string{
//									"s3:AbortMultipartUpload",
//									"s3:GetBucketLocation",
//									"s3:GetObject",
//									"s3:ListBucket",
//									"s3:ListBucketMultipartUploads",
//									"s3:PutObject",
//								},
//								"Resource": []string{
//									exampleBucketArn,
//									fmt.Sprintf("%v/*", exampleBucketArn1),
//								},
//							},
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json1 := string(tmpJSON1)
//					return json1, nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFirehoseDeliveryStream, err := kinesis.NewFirehoseDeliveryStream(ctx, "example", &kinesis.FirehoseDeliveryStreamArgs{
//				Name:        pulumi.String("example-stream"),
//				Destination: pulumi.String("extended_s3"),
//				ExtendedS3Configuration: &kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationArgs{
//					RoleArn:   firehose.Arn,
//					BucketArn: exampleBucket.Arn,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cognito.NewLogDeliveryConfiguration(ctx, "example", &cognito.LogDeliveryConfigurationArgs{
//				UserPoolId: example.ID(),
//				LogConfigurations: cognito.LogDeliveryConfigurationLogConfigurationArray{
//					&cognito.LogDeliveryConfigurationLogConfigurationArgs{
//						EventSource: pulumi.String("userNotification"),
//						LogLevel:    pulumi.String("INFO"),
//						CloudWatchLogsConfiguration: &cognito.LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfigurationArgs{
//							LogGroupArn: exampleLogGroup.Arn,
//						},
//					},
//					&cognito.LogDeliveryConfigurationLogConfigurationArgs{
//						EventSource: pulumi.String("userAuthEvents"),
//						LogLevel:    pulumi.String("ERROR"),
//						FirehoseConfiguration: &cognito.LogDeliveryConfigurationLogConfigurationFirehoseConfigurationArgs{
//							StreamArn: exampleFirehoseDeliveryStream.Arn,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### S3 Configuration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cognito"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := cognito.NewUserPool(ctx, "example", &cognito.UserPoolArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBucket, err := s3.NewBucket(ctx, "example", &s3.BucketArgs{
//				Bucket:       pulumi.String("example-bucket"),
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cognito.NewLogDeliveryConfiguration(ctx, "example", &cognito.LogDeliveryConfigurationArgs{
//				UserPoolId: example.ID(),
//				LogConfigurations: cognito.LogDeliveryConfigurationLogConfigurationArray{
//					&cognito.LogDeliveryConfigurationLogConfigurationArgs{
//						EventSource: pulumi.String("userNotification"),
//						LogLevel:    pulumi.String("ERROR"),
//						S3Configuration: &cognito.LogDeliveryConfigurationLogConfigurationS3ConfigurationArgs{
//							BucketArn: exampleBucket.Arn,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Cognito IDP (Identity Provider) Log Delivery Configuration using the `user_pool_id`. For example:
//
// ```sh
// $ pulumi import aws:cognito/logDeliveryConfiguration:LogDeliveryConfiguration example us-west-2_example123
// ```
type LogDeliveryConfiguration struct {
	pulumi.CustomResourceState

	// Configuration block for log delivery. At least one configuration block is required. See Log Configurations below.
	LogConfigurations LogDeliveryConfigurationLogConfigurationArrayOutput `pulumi:"logConfigurations"`
	// The AWS region.
	Region pulumi.StringOutput `pulumi:"region"`
	// The ID of the user pool for which to configure log delivery.
	//
	// The following arguments are optional:
	UserPoolId pulumi.StringOutput `pulumi:"userPoolId"`
}

// NewLogDeliveryConfiguration registers a new resource with the given unique name, arguments, and options.
func NewLogDeliveryConfiguration(ctx *pulumi.Context,
	name string, args *LogDeliveryConfigurationArgs, opts ...pulumi.ResourceOption) (*LogDeliveryConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogDeliveryConfiguration
	err := ctx.RegisterResource("aws:cognito/logDeliveryConfiguration:LogDeliveryConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogDeliveryConfiguration gets an existing LogDeliveryConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogDeliveryConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogDeliveryConfigurationState, opts ...pulumi.ResourceOption) (*LogDeliveryConfiguration, error) {
	var resource LogDeliveryConfiguration
	err := ctx.ReadResource("aws:cognito/logDeliveryConfiguration:LogDeliveryConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogDeliveryConfiguration resources.
type logDeliveryConfigurationState struct {
	// Configuration block for log delivery. At least one configuration block is required. See Log Configurations below.
	LogConfigurations []LogDeliveryConfigurationLogConfiguration `pulumi:"logConfigurations"`
	// The AWS region.
	Region *string `pulumi:"region"`
	// The ID of the user pool for which to configure log delivery.
	//
	// The following arguments are optional:
	UserPoolId *string `pulumi:"userPoolId"`
}

type LogDeliveryConfigurationState struct {
	// Configuration block for log delivery. At least one configuration block is required. See Log Configurations below.
	LogConfigurations LogDeliveryConfigurationLogConfigurationArrayInput
	// The AWS region.
	Region pulumi.StringPtrInput
	// The ID of the user pool for which to configure log delivery.
	//
	// The following arguments are optional:
	UserPoolId pulumi.StringPtrInput
}

func (LogDeliveryConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliveryConfigurationState)(nil)).Elem()
}

type logDeliveryConfigurationArgs struct {
	// Configuration block for log delivery. At least one configuration block is required. See Log Configurations below.
	LogConfigurations []LogDeliveryConfigurationLogConfiguration `pulumi:"logConfigurations"`
	// The AWS region.
	Region *string `pulumi:"region"`
	// The ID of the user pool for which to configure log delivery.
	//
	// The following arguments are optional:
	UserPoolId string `pulumi:"userPoolId"`
}

// The set of arguments for constructing a LogDeliveryConfiguration resource.
type LogDeliveryConfigurationArgs struct {
	// Configuration block for log delivery. At least one configuration block is required. See Log Configurations below.
	LogConfigurations LogDeliveryConfigurationLogConfigurationArrayInput
	// The AWS region.
	Region pulumi.StringPtrInput
	// The ID of the user pool for which to configure log delivery.
	//
	// The following arguments are optional:
	UserPoolId pulumi.StringInput
}

func (LogDeliveryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliveryConfigurationArgs)(nil)).Elem()
}

type LogDeliveryConfigurationInput interface {
	pulumi.Input

	ToLogDeliveryConfigurationOutput() LogDeliveryConfigurationOutput
	ToLogDeliveryConfigurationOutputWithContext(ctx context.Context) LogDeliveryConfigurationOutput
}

func (*LogDeliveryConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDeliveryConfiguration)(nil)).Elem()
}

func (i *LogDeliveryConfiguration) ToLogDeliveryConfigurationOutput() LogDeliveryConfigurationOutput {
	return i.ToLogDeliveryConfigurationOutputWithContext(context.Background())
}

func (i *LogDeliveryConfiguration) ToLogDeliveryConfigurationOutputWithContext(ctx context.Context) LogDeliveryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryConfigurationOutput)
}

// LogDeliveryConfigurationArrayInput is an input type that accepts LogDeliveryConfigurationArray and LogDeliveryConfigurationArrayOutput values.
// You can construct a concrete instance of `LogDeliveryConfigurationArrayInput` via:
//
//	LogDeliveryConfigurationArray{ LogDeliveryConfigurationArgs{...} }
type LogDeliveryConfigurationArrayInput interface {
	pulumi.Input

	ToLogDeliveryConfigurationArrayOutput() LogDeliveryConfigurationArrayOutput
	ToLogDeliveryConfigurationArrayOutputWithContext(context.Context) LogDeliveryConfigurationArrayOutput
}

type LogDeliveryConfigurationArray []LogDeliveryConfigurationInput

func (LogDeliveryConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDeliveryConfiguration)(nil)).Elem()
}

func (i LogDeliveryConfigurationArray) ToLogDeliveryConfigurationArrayOutput() LogDeliveryConfigurationArrayOutput {
	return i.ToLogDeliveryConfigurationArrayOutputWithContext(context.Background())
}

func (i LogDeliveryConfigurationArray) ToLogDeliveryConfigurationArrayOutputWithContext(ctx context.Context) LogDeliveryConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryConfigurationArrayOutput)
}

// LogDeliveryConfigurationMapInput is an input type that accepts LogDeliveryConfigurationMap and LogDeliveryConfigurationMapOutput values.
// You can construct a concrete instance of `LogDeliveryConfigurationMapInput` via:
//
//	LogDeliveryConfigurationMap{ "key": LogDeliveryConfigurationArgs{...} }
type LogDeliveryConfigurationMapInput interface {
	pulumi.Input

	ToLogDeliveryConfigurationMapOutput() LogDeliveryConfigurationMapOutput
	ToLogDeliveryConfigurationMapOutputWithContext(context.Context) LogDeliveryConfigurationMapOutput
}

type LogDeliveryConfigurationMap map[string]LogDeliveryConfigurationInput

func (LogDeliveryConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDeliveryConfiguration)(nil)).Elem()
}

func (i LogDeliveryConfigurationMap) ToLogDeliveryConfigurationMapOutput() LogDeliveryConfigurationMapOutput {
	return i.ToLogDeliveryConfigurationMapOutputWithContext(context.Background())
}

func (i LogDeliveryConfigurationMap) ToLogDeliveryConfigurationMapOutputWithContext(ctx context.Context) LogDeliveryConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryConfigurationMapOutput)
}

type LogDeliveryConfigurationOutput struct{ *pulumi.OutputState }

func (LogDeliveryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDeliveryConfiguration)(nil)).Elem()
}

func (o LogDeliveryConfigurationOutput) ToLogDeliveryConfigurationOutput() LogDeliveryConfigurationOutput {
	return o
}

func (o LogDeliveryConfigurationOutput) ToLogDeliveryConfigurationOutputWithContext(ctx context.Context) LogDeliveryConfigurationOutput {
	return o
}

// Configuration block for log delivery. At least one configuration block is required. See Log Configurations below.
func (o LogDeliveryConfigurationOutput) LogConfigurations() LogDeliveryConfigurationLogConfigurationArrayOutput {
	return o.ApplyT(func(v *LogDeliveryConfiguration) LogDeliveryConfigurationLogConfigurationArrayOutput {
		return v.LogConfigurations
	}).(LogDeliveryConfigurationLogConfigurationArrayOutput)
}

// The AWS region.
func (o LogDeliveryConfigurationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliveryConfiguration) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The ID of the user pool for which to configure log delivery.
//
// The following arguments are optional:
func (o LogDeliveryConfigurationOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDeliveryConfiguration) pulumi.StringOutput { return v.UserPoolId }).(pulumi.StringOutput)
}

type LogDeliveryConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LogDeliveryConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDeliveryConfiguration)(nil)).Elem()
}

func (o LogDeliveryConfigurationArrayOutput) ToLogDeliveryConfigurationArrayOutput() LogDeliveryConfigurationArrayOutput {
	return o
}

func (o LogDeliveryConfigurationArrayOutput) ToLogDeliveryConfigurationArrayOutputWithContext(ctx context.Context) LogDeliveryConfigurationArrayOutput {
	return o
}

func (o LogDeliveryConfigurationArrayOutput) Index(i pulumi.IntInput) LogDeliveryConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogDeliveryConfiguration {
		return vs[0].([]*LogDeliveryConfiguration)[vs[1].(int)]
	}).(LogDeliveryConfigurationOutput)
}

type LogDeliveryConfigurationMapOutput struct{ *pulumi.OutputState }

func (LogDeliveryConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDeliveryConfiguration)(nil)).Elem()
}

func (o LogDeliveryConfigurationMapOutput) ToLogDeliveryConfigurationMapOutput() LogDeliveryConfigurationMapOutput {
	return o
}

func (o LogDeliveryConfigurationMapOutput) ToLogDeliveryConfigurationMapOutputWithContext(ctx context.Context) LogDeliveryConfigurationMapOutput {
	return o
}

func (o LogDeliveryConfigurationMapOutput) MapIndex(k pulumi.StringInput) LogDeliveryConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogDeliveryConfiguration {
		return vs[0].(map[string]*LogDeliveryConfiguration)[vs[1].(string)]
	}).(LogDeliveryConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryConfigurationInput)(nil)).Elem(), &LogDeliveryConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryConfigurationArrayInput)(nil)).Elem(), LogDeliveryConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryConfigurationMapInput)(nil)).Elem(), LogDeliveryConfigurationMap{})
	pulumi.RegisterOutputType(LogDeliveryConfigurationOutput{})
	pulumi.RegisterOutputType(LogDeliveryConfigurationArrayOutput{})
	pulumi.RegisterOutputType(LogDeliveryConfigurationMapOutput{})
}
