// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the signing certificate for a Cognito IdP user pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/cognito"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cognito.GetUserPoolSigningCertificate(ctx, &cognito.GetUserPoolSigningCertificateArgs{
// 			UserPoolId: aws_cognito_user_pool.My_pool.Id,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetUserPoolSigningCertificate(ctx *pulumi.Context, args *GetUserPoolSigningCertificateArgs, opts ...pulumi.InvokeOption) (*GetUserPoolSigningCertificateResult, error) {
	var rv GetUserPoolSigningCertificateResult
	err := ctx.Invoke("aws:cognito/getUserPoolSigningCertificate:getUserPoolSigningCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserPoolSigningCertificate.
type GetUserPoolSigningCertificateArgs struct {
	// The Cognito user pool ID.
	UserPoolId string `pulumi:"userPoolId"`
}

// A collection of values returned by getUserPoolSigningCertificate.
type GetUserPoolSigningCertificateResult struct {
	// The certificate string
	Certificate string `pulumi:"certificate"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	UserPoolId string `pulumi:"userPoolId"`
}

func GetUserPoolSigningCertificateOutput(ctx *pulumi.Context, args GetUserPoolSigningCertificateOutputArgs, opts ...pulumi.InvokeOption) GetUserPoolSigningCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUserPoolSigningCertificateResult, error) {
			args := v.(GetUserPoolSigningCertificateArgs)
			r, err := GetUserPoolSigningCertificate(ctx, &args, opts...)
			var s GetUserPoolSigningCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUserPoolSigningCertificateResultOutput)
}

// A collection of arguments for invoking getUserPoolSigningCertificate.
type GetUserPoolSigningCertificateOutputArgs struct {
	// The Cognito user pool ID.
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

func (GetUserPoolSigningCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPoolSigningCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getUserPoolSigningCertificate.
type GetUserPoolSigningCertificateResultOutput struct{ *pulumi.OutputState }

func (GetUserPoolSigningCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPoolSigningCertificateResult)(nil)).Elem()
}

func (o GetUserPoolSigningCertificateResultOutput) ToGetUserPoolSigningCertificateResultOutput() GetUserPoolSigningCertificateResultOutput {
	return o
}

func (o GetUserPoolSigningCertificateResultOutput) ToGetUserPoolSigningCertificateResultOutputWithContext(ctx context.Context) GetUserPoolSigningCertificateResultOutput {
	return o
}

// The certificate string
func (o GetUserPoolSigningCertificateResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPoolSigningCertificateResult) string { return v.Certificate }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUserPoolSigningCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPoolSigningCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUserPoolSigningCertificateResultOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPoolSigningCertificateResult) string { return v.UserPoolId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUserPoolSigningCertificateResultOutput{})
}
