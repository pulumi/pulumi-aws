// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS Cognito Identity Pool.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cognito"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cognito.LookupIdentityPool(ctx, &cognito.LookupIdentityPoolArgs{
//				IdentityPoolName: "test pool",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIdentityPool(ctx *pulumi.Context, args *LookupIdentityPoolArgs, opts ...pulumi.InvokeOption) (*LookupIdentityPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIdentityPoolResult
	err := ctx.Invoke("aws:cognito/getIdentityPool:getIdentityPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIdentityPool.
type LookupIdentityPoolArgs struct {
	// The Cognito Identity Pool name.
	IdentityPoolName string `pulumi:"identityPoolName"`
	// A map of tags to assigned to the Identity Pool.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getIdentityPool.
type LookupIdentityPoolResult struct {
	// Whether the classic / basic authentication flow is enabled.
	AllowClassicFlow bool `pulumi:"allowClassicFlow"`
	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities bool `pulumi:"allowUnauthenticatedIdentities"`
	// ARN of the Pool.
	Arn string `pulumi:"arn"`
	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders []GetIdentityPoolCognitoIdentityProvider `pulumi:"cognitoIdentityProviders"`
	// The "domain" by which Cognito will refer to your users.
	DeveloperProviderName string `pulumi:"developerProviderName"`
	// The provider-assigned unique ID for this managed resource.
	Id               string `pulumi:"id"`
	IdentityPoolName string `pulumi:"identityPoolName"`
	// Set of OpendID Connect provider ARNs.
	OpenidConnectProviderArns []string `pulumi:"openidConnectProviderArns"`
	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns []string `pulumi:"samlProviderArns"`
	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders map[string]string `pulumi:"supportedLoginProviders"`
	// A map of tags to assigned to the Identity Pool.
	Tags map[string]string `pulumi:"tags"`
}

func LookupIdentityPoolOutput(ctx *pulumi.Context, args LookupIdentityPoolOutputArgs, opts ...pulumi.InvokeOption) LookupIdentityPoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIdentityPoolResult, error) {
			args := v.(LookupIdentityPoolArgs)
			r, err := LookupIdentityPool(ctx, &args, opts...)
			var s LookupIdentityPoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIdentityPoolResultOutput)
}

// A collection of arguments for invoking getIdentityPool.
type LookupIdentityPoolOutputArgs struct {
	// The Cognito Identity Pool name.
	IdentityPoolName pulumi.StringInput `pulumi:"identityPoolName"`
	// A map of tags to assigned to the Identity Pool.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupIdentityPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIdentityPoolArgs)(nil)).Elem()
}

// A collection of values returned by getIdentityPool.
type LookupIdentityPoolResultOutput struct{ *pulumi.OutputState }

func (LookupIdentityPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIdentityPoolResult)(nil)).Elem()
}

func (o LookupIdentityPoolResultOutput) ToLookupIdentityPoolResultOutput() LookupIdentityPoolResultOutput {
	return o
}

func (o LookupIdentityPoolResultOutput) ToLookupIdentityPoolResultOutputWithContext(ctx context.Context) LookupIdentityPoolResultOutput {
	return o
}

// Whether the classic / basic authentication flow is enabled.
func (o LookupIdentityPoolResultOutput) AllowClassicFlow() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIdentityPoolResult) bool { return v.AllowClassicFlow }).(pulumi.BoolOutput)
}

// Whether the identity pool supports unauthenticated logins or not.
func (o LookupIdentityPoolResultOutput) AllowUnauthenticatedIdentities() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIdentityPoolResult) bool { return v.AllowUnauthenticatedIdentities }).(pulumi.BoolOutput)
}

// ARN of the Pool.
func (o LookupIdentityPoolResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIdentityPoolResult) string { return v.Arn }).(pulumi.StringOutput)
}

// An array of Amazon Cognito Identity user pools and their client IDs.
func (o LookupIdentityPoolResultOutput) CognitoIdentityProviders() GetIdentityPoolCognitoIdentityProviderArrayOutput {
	return o.ApplyT(func(v LookupIdentityPoolResult) []GetIdentityPoolCognitoIdentityProvider {
		return v.CognitoIdentityProviders
	}).(GetIdentityPoolCognitoIdentityProviderArrayOutput)
}

// The "domain" by which Cognito will refer to your users.
func (o LookupIdentityPoolResultOutput) DeveloperProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIdentityPoolResult) string { return v.DeveloperProviderName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupIdentityPoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIdentityPoolResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupIdentityPoolResultOutput) IdentityPoolName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIdentityPoolResult) string { return v.IdentityPoolName }).(pulumi.StringOutput)
}

// Set of OpendID Connect provider ARNs.
func (o LookupIdentityPoolResultOutput) OpenidConnectProviderArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIdentityPoolResult) []string { return v.OpenidConnectProviderArns }).(pulumi.StringArrayOutput)
}

// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
func (o LookupIdentityPoolResultOutput) SamlProviderArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIdentityPoolResult) []string { return v.SamlProviderArns }).(pulumi.StringArrayOutput)
}

// Key-Value pairs mapping provider names to provider app IDs.
func (o LookupIdentityPoolResultOutput) SupportedLoginProviders() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupIdentityPoolResult) map[string]string { return v.SupportedLoginProviders }).(pulumi.StringMapOutput)
}

// A map of tags to assigned to the Identity Pool.
func (o LookupIdentityPoolResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupIdentityPoolResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIdentityPoolResultOutput{})
}
