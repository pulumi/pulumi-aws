// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cognito User Pool resource.
type UserPool struct {
	s *pulumi.ResourceState
}

// NewUserPool registers a new resource with the given unique name, arguments, and options.
func NewUserPool(ctx *pulumi.Context,
	name string, args *UserPoolArgs, opts ...pulumi.ResourceOpt) (*UserPool, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminCreateUserConfig"] = nil
		inputs["aliasAttributes"] = nil
		inputs["autoVerifiedAttributes"] = nil
		inputs["deviceConfiguration"] = nil
		inputs["emailConfiguration"] = nil
		inputs["emailVerificationMessage"] = nil
		inputs["emailVerificationSubject"] = nil
		inputs["lambdaConfig"] = nil
		inputs["mfaConfiguration"] = nil
		inputs["name"] = nil
		inputs["passwordPolicy"] = nil
		inputs["schemas"] = nil
		inputs["smsAuthenticationMessage"] = nil
		inputs["smsConfiguration"] = nil
		inputs["smsVerificationMessage"] = nil
		inputs["tags"] = nil
		inputs["usernameAttributes"] = nil
		inputs["verificationMessageTemplate"] = nil
	} else {
		inputs["adminCreateUserConfig"] = args.AdminCreateUserConfig
		inputs["aliasAttributes"] = args.AliasAttributes
		inputs["autoVerifiedAttributes"] = args.AutoVerifiedAttributes
		inputs["deviceConfiguration"] = args.DeviceConfiguration
		inputs["emailConfiguration"] = args.EmailConfiguration
		inputs["emailVerificationMessage"] = args.EmailVerificationMessage
		inputs["emailVerificationSubject"] = args.EmailVerificationSubject
		inputs["lambdaConfig"] = args.LambdaConfig
		inputs["mfaConfiguration"] = args.MfaConfiguration
		inputs["name"] = args.Name
		inputs["passwordPolicy"] = args.PasswordPolicy
		inputs["schemas"] = args.Schemas
		inputs["smsAuthenticationMessage"] = args.SmsAuthenticationMessage
		inputs["smsConfiguration"] = args.SmsConfiguration
		inputs["smsVerificationMessage"] = args.SmsVerificationMessage
		inputs["tags"] = args.Tags
		inputs["usernameAttributes"] = args.UsernameAttributes
		inputs["verificationMessageTemplate"] = args.VerificationMessageTemplate
	}
	inputs["arn"] = nil
	inputs["creationDate"] = nil
	inputs["endpoint"] = nil
	inputs["lastModifiedDate"] = nil
	s, err := ctx.RegisterResource("aws:cognito/userPool:UserPool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserPool{s: s}, nil
}

// GetUserPool gets an existing UserPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserPoolState, opts ...pulumi.ResourceOpt) (*UserPool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminCreateUserConfig"] = state.AdminCreateUserConfig
		inputs["aliasAttributes"] = state.AliasAttributes
		inputs["arn"] = state.Arn
		inputs["autoVerifiedAttributes"] = state.AutoVerifiedAttributes
		inputs["creationDate"] = state.CreationDate
		inputs["deviceConfiguration"] = state.DeviceConfiguration
		inputs["emailConfiguration"] = state.EmailConfiguration
		inputs["emailVerificationMessage"] = state.EmailVerificationMessage
		inputs["emailVerificationSubject"] = state.EmailVerificationSubject
		inputs["endpoint"] = state.Endpoint
		inputs["lambdaConfig"] = state.LambdaConfig
		inputs["lastModifiedDate"] = state.LastModifiedDate
		inputs["mfaConfiguration"] = state.MfaConfiguration
		inputs["name"] = state.Name
		inputs["passwordPolicy"] = state.PasswordPolicy
		inputs["schemas"] = state.Schemas
		inputs["smsAuthenticationMessage"] = state.SmsAuthenticationMessage
		inputs["smsConfiguration"] = state.SmsConfiguration
		inputs["smsVerificationMessage"] = state.SmsVerificationMessage
		inputs["tags"] = state.Tags
		inputs["usernameAttributes"] = state.UsernameAttributes
		inputs["verificationMessageTemplate"] = state.VerificationMessageTemplate
	}
	s, err := ctx.ReadResource("aws:cognito/userPool:UserPool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserPool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *UserPool) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *UserPool) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The configuration for AdminCreateUser requests.
func (r *UserPool) AdminCreateUserConfig() *pulumi.Output {
	return r.s.State["adminCreateUserConfig"]
}

// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username. Conflicts with `username_attributes`.
func (r *UserPool) AliasAttributes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["aliasAttributes"])
}

// The ARN of the user pool.
func (r *UserPool) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The attributes to be auto-verified. Possible values: email, phone_number.
func (r *UserPool) AutoVerifiedAttributes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["autoVerifiedAttributes"])
}

// The date the user pool was created.
func (r *UserPool) CreationDate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["creationDate"])
}

// The configuration for the user pool's device tracking.
func (r *UserPool) DeviceConfiguration() *pulumi.Output {
	return r.s.State["deviceConfiguration"]
}

// The Email Configuration.
func (r *UserPool) EmailConfiguration() *pulumi.Output {
	return r.s.State["emailConfiguration"]
}

// A string representing the email verification message. Must contain the `{####}` placeholder. **NOTE:** - If `email_verification_message` and `verification_message_template.email_message` are specified and the values are different, either one is prioritized and updated.
func (r *UserPool) EmailVerificationMessage() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["emailVerificationMessage"])
}

// A string representing the email verification subject. **NOTE:** - If `email_verification_subject` and `verification_message_template.email_subject` are specified and the values are different, either one is prioritized and updated.
func (r *UserPool) EmailVerificationSubject() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["emailVerificationSubject"])
}

// The endpoint name of the user pool. Example format: cognito-idp.REGION.amazonaws.com/xxxx_yyyyy
func (r *UserPool) Endpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpoint"])
}

// A container for the AWS Lambda triggers associated with the user pool.
func (r *UserPool) LambdaConfig() *pulumi.Output {
	return r.s.State["lambdaConfig"]
}

// The date the user pool was last modified.
func (r *UserPool) LastModifiedDate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lastModifiedDate"])
}

// Set to enable multi-factor authentication. Must be one of the following values (ON, OFF, OPTIONAL)
func (r *UserPool) MfaConfiguration() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mfaConfiguration"])
}

// The name of the attribute.
func (r *UserPool) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A container for information about the user pool password policy.
func (r *UserPool) PasswordPolicy() *pulumi.Output {
	return r.s.State["passwordPolicy"]
}

// A container with the schema attributes of a user pool. Maximum of 50 attributes.
func (r *UserPool) Schemas() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["schemas"])
}

// A string representing the SMS authentication message.
func (r *UserPool) SmsAuthenticationMessage() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["smsAuthenticationMessage"])
}

// The SMS Configuration.
func (r *UserPool) SmsConfiguration() *pulumi.Output {
	return r.s.State["smsConfiguration"]
}

// A string representing the SMS verification message.
func (r *UserPool) SmsVerificationMessage() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["smsVerificationMessage"])
}

// A mapping of tags to assign to the User Pool.
func (r *UserPool) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `alias_attributes`.
func (r *UserPool) UsernameAttributes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["usernameAttributes"])
}

// The verification message templates configuration.
func (r *UserPool) VerificationMessageTemplate() *pulumi.Output {
	return r.s.State["verificationMessageTemplate"]
}

// Input properties used for looking up and filtering UserPool resources.
type UserPoolState struct {
	// The configuration for AdminCreateUser requests.
	AdminCreateUserConfig interface{}
	// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username. Conflicts with `username_attributes`.
	AliasAttributes interface{}
	// The ARN of the user pool.
	Arn interface{}
	// The attributes to be auto-verified. Possible values: email, phone_number.
	AutoVerifiedAttributes interface{}
	// The date the user pool was created.
	CreationDate interface{}
	// The configuration for the user pool's device tracking.
	DeviceConfiguration interface{}
	// The Email Configuration.
	EmailConfiguration interface{}
	// A string representing the email verification message. Must contain the `{####}` placeholder. **NOTE:** - If `email_verification_message` and `verification_message_template.email_message` are specified and the values are different, either one is prioritized and updated.
	EmailVerificationMessage interface{}
	// A string representing the email verification subject. **NOTE:** - If `email_verification_subject` and `verification_message_template.email_subject` are specified and the values are different, either one is prioritized and updated.
	EmailVerificationSubject interface{}
	// The endpoint name of the user pool. Example format: cognito-idp.REGION.amazonaws.com/xxxx_yyyyy
	Endpoint interface{}
	// A container for the AWS Lambda triggers associated with the user pool.
	LambdaConfig interface{}
	// The date the user pool was last modified.
	LastModifiedDate interface{}
	// Set to enable multi-factor authentication. Must be one of the following values (ON, OFF, OPTIONAL)
	MfaConfiguration interface{}
	// The name of the attribute.
	Name interface{}
	// A container for information about the user pool password policy.
	PasswordPolicy interface{}
	// A container with the schema attributes of a user pool. Maximum of 50 attributes.
	Schemas interface{}
	// A string representing the SMS authentication message.
	SmsAuthenticationMessage interface{}
	// The SMS Configuration.
	SmsConfiguration interface{}
	// A string representing the SMS verification message.
	SmsVerificationMessage interface{}
	// A mapping of tags to assign to the User Pool.
	Tags interface{}
	// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `alias_attributes`.
	UsernameAttributes interface{}
	// The verification message templates configuration.
	VerificationMessageTemplate interface{}
}

// The set of arguments for constructing a UserPool resource.
type UserPoolArgs struct {
	// The configuration for AdminCreateUser requests.
	AdminCreateUserConfig interface{}
	// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username. Conflicts with `username_attributes`.
	AliasAttributes interface{}
	// The attributes to be auto-verified. Possible values: email, phone_number.
	AutoVerifiedAttributes interface{}
	// The configuration for the user pool's device tracking.
	DeviceConfiguration interface{}
	// The Email Configuration.
	EmailConfiguration interface{}
	// A string representing the email verification message. Must contain the `{####}` placeholder. **NOTE:** - If `email_verification_message` and `verification_message_template.email_message` are specified and the values are different, either one is prioritized and updated.
	EmailVerificationMessage interface{}
	// A string representing the email verification subject. **NOTE:** - If `email_verification_subject` and `verification_message_template.email_subject` are specified and the values are different, either one is prioritized and updated.
	EmailVerificationSubject interface{}
	// A container for the AWS Lambda triggers associated with the user pool.
	LambdaConfig interface{}
	// Set to enable multi-factor authentication. Must be one of the following values (ON, OFF, OPTIONAL)
	MfaConfiguration interface{}
	// The name of the attribute.
	Name interface{}
	// A container for information about the user pool password policy.
	PasswordPolicy interface{}
	// A container with the schema attributes of a user pool. Maximum of 50 attributes.
	Schemas interface{}
	// A string representing the SMS authentication message.
	SmsAuthenticationMessage interface{}
	// The SMS Configuration.
	SmsConfiguration interface{}
	// A string representing the SMS verification message.
	SmsVerificationMessage interface{}
	// A mapping of tags to assign to the User Pool.
	Tags interface{}
	// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with `alias_attributes`.
	UsernameAttributes interface{}
	// The verification message templates configuration.
	VerificationMessageTemplate interface{}
}
