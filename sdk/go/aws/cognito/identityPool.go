// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IdentityPool struct {
	pulumi.CustomResourceState

	AllowClassicFlow               pulumi.BoolPtrOutput                           `pulumi:"allowClassicFlow"`
	AllowUnauthenticatedIdentities pulumi.BoolPtrOutput                           `pulumi:"allowUnauthenticatedIdentities"`
	Arn                            pulumi.StringOutput                            `pulumi:"arn"`
	CognitoIdentityProviders       IdentityPoolCognitoIdentityProviderArrayOutput `pulumi:"cognitoIdentityProviders"`
	DeveloperProviderName          pulumi.StringPtrOutput                         `pulumi:"developerProviderName"`
	IdentityPoolName               pulumi.StringOutput                            `pulumi:"identityPoolName"`
	OpenidConnectProviderArns      pulumi.StringArrayOutput                       `pulumi:"openidConnectProviderArns"`
	SamlProviderArns               pulumi.StringArrayOutput                       `pulumi:"samlProviderArns"`
	SupportedLoginProviders        pulumi.StringMapOutput                         `pulumi:"supportedLoginProviders"`
	Tags                           pulumi.StringMapOutput                         `pulumi:"tags"`
	TagsAll                        pulumi.StringMapOutput                         `pulumi:"tagsAll"`
}

// NewIdentityPool registers a new resource with the given unique name, arguments, and options.
func NewIdentityPool(ctx *pulumi.Context,
	name string, args *IdentityPoolArgs, opts ...pulumi.ResourceOption) (*IdentityPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityPoolName == nil {
		return nil, errors.New("invalid value for required argument 'IdentityPoolName'")
	}
	var resource IdentityPool
	err := ctx.RegisterResource("aws:cognito/identityPool:IdentityPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityPool gets an existing IdentityPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityPoolState, opts ...pulumi.ResourceOption) (*IdentityPool, error) {
	var resource IdentityPool
	err := ctx.ReadResource("aws:cognito/identityPool:IdentityPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityPool resources.
type identityPoolState struct {
	AllowClassicFlow               *bool                                 `pulumi:"allowClassicFlow"`
	AllowUnauthenticatedIdentities *bool                                 `pulumi:"allowUnauthenticatedIdentities"`
	Arn                            *string                               `pulumi:"arn"`
	CognitoIdentityProviders       []IdentityPoolCognitoIdentityProvider `pulumi:"cognitoIdentityProviders"`
	DeveloperProviderName          *string                               `pulumi:"developerProviderName"`
	IdentityPoolName               *string                               `pulumi:"identityPoolName"`
	OpenidConnectProviderArns      []string                              `pulumi:"openidConnectProviderArns"`
	SamlProviderArns               []string                              `pulumi:"samlProviderArns"`
	SupportedLoginProviders        map[string]string                     `pulumi:"supportedLoginProviders"`
	Tags                           map[string]string                     `pulumi:"tags"`
	TagsAll                        map[string]string                     `pulumi:"tagsAll"`
}

type IdentityPoolState struct {
	AllowClassicFlow               pulumi.BoolPtrInput
	AllowUnauthenticatedIdentities pulumi.BoolPtrInput
	Arn                            pulumi.StringPtrInput
	CognitoIdentityProviders       IdentityPoolCognitoIdentityProviderArrayInput
	DeveloperProviderName          pulumi.StringPtrInput
	IdentityPoolName               pulumi.StringPtrInput
	OpenidConnectProviderArns      pulumi.StringArrayInput
	SamlProviderArns               pulumi.StringArrayInput
	SupportedLoginProviders        pulumi.StringMapInput
	Tags                           pulumi.StringMapInput
	TagsAll                        pulumi.StringMapInput
}

func (IdentityPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPoolState)(nil)).Elem()
}

type identityPoolArgs struct {
	AllowClassicFlow               *bool                                 `pulumi:"allowClassicFlow"`
	AllowUnauthenticatedIdentities *bool                                 `pulumi:"allowUnauthenticatedIdentities"`
	CognitoIdentityProviders       []IdentityPoolCognitoIdentityProvider `pulumi:"cognitoIdentityProviders"`
	DeveloperProviderName          *string                               `pulumi:"developerProviderName"`
	IdentityPoolName               string                                `pulumi:"identityPoolName"`
	OpenidConnectProviderArns      []string                              `pulumi:"openidConnectProviderArns"`
	SamlProviderArns               []string                              `pulumi:"samlProviderArns"`
	SupportedLoginProviders        map[string]string                     `pulumi:"supportedLoginProviders"`
	Tags                           map[string]string                     `pulumi:"tags"`
}

// The set of arguments for constructing a IdentityPool resource.
type IdentityPoolArgs struct {
	AllowClassicFlow               pulumi.BoolPtrInput
	AllowUnauthenticatedIdentities pulumi.BoolPtrInput
	CognitoIdentityProviders       IdentityPoolCognitoIdentityProviderArrayInput
	DeveloperProviderName          pulumi.StringPtrInput
	IdentityPoolName               pulumi.StringInput
	OpenidConnectProviderArns      pulumi.StringArrayInput
	SamlProviderArns               pulumi.StringArrayInput
	SupportedLoginProviders        pulumi.StringMapInput
	Tags                           pulumi.StringMapInput
}

func (IdentityPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPoolArgs)(nil)).Elem()
}

type IdentityPoolInput interface {
	pulumi.Input

	ToIdentityPoolOutput() IdentityPoolOutput
	ToIdentityPoolOutputWithContext(ctx context.Context) IdentityPoolOutput
}

func (*IdentityPool) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPool)(nil)).Elem()
}

func (i *IdentityPool) ToIdentityPoolOutput() IdentityPoolOutput {
	return i.ToIdentityPoolOutputWithContext(context.Background())
}

func (i *IdentityPool) ToIdentityPoolOutputWithContext(ctx context.Context) IdentityPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPoolOutput)
}

// IdentityPoolArrayInput is an input type that accepts IdentityPoolArray and IdentityPoolArrayOutput values.
// You can construct a concrete instance of `IdentityPoolArrayInput` via:
//
//	IdentityPoolArray{ IdentityPoolArgs{...} }
type IdentityPoolArrayInput interface {
	pulumi.Input

	ToIdentityPoolArrayOutput() IdentityPoolArrayOutput
	ToIdentityPoolArrayOutputWithContext(context.Context) IdentityPoolArrayOutput
}

type IdentityPoolArray []IdentityPoolInput

func (IdentityPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityPool)(nil)).Elem()
}

func (i IdentityPoolArray) ToIdentityPoolArrayOutput() IdentityPoolArrayOutput {
	return i.ToIdentityPoolArrayOutputWithContext(context.Background())
}

func (i IdentityPoolArray) ToIdentityPoolArrayOutputWithContext(ctx context.Context) IdentityPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPoolArrayOutput)
}

// IdentityPoolMapInput is an input type that accepts IdentityPoolMap and IdentityPoolMapOutput values.
// You can construct a concrete instance of `IdentityPoolMapInput` via:
//
//	IdentityPoolMap{ "key": IdentityPoolArgs{...} }
type IdentityPoolMapInput interface {
	pulumi.Input

	ToIdentityPoolMapOutput() IdentityPoolMapOutput
	ToIdentityPoolMapOutputWithContext(context.Context) IdentityPoolMapOutput
}

type IdentityPoolMap map[string]IdentityPoolInput

func (IdentityPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityPool)(nil)).Elem()
}

func (i IdentityPoolMap) ToIdentityPoolMapOutput() IdentityPoolMapOutput {
	return i.ToIdentityPoolMapOutputWithContext(context.Background())
}

func (i IdentityPoolMap) ToIdentityPoolMapOutputWithContext(ctx context.Context) IdentityPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPoolMapOutput)
}

type IdentityPoolOutput struct{ *pulumi.OutputState }

func (IdentityPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPool)(nil)).Elem()
}

func (o IdentityPoolOutput) ToIdentityPoolOutput() IdentityPoolOutput {
	return o
}

func (o IdentityPoolOutput) ToIdentityPoolOutputWithContext(ctx context.Context) IdentityPoolOutput {
	return o
}

func (o IdentityPoolOutput) AllowClassicFlow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.BoolPtrOutput { return v.AllowClassicFlow }).(pulumi.BoolPtrOutput)
}

func (o IdentityPoolOutput) AllowUnauthenticatedIdentities() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.BoolPtrOutput { return v.AllowUnauthenticatedIdentities }).(pulumi.BoolPtrOutput)
}

func (o IdentityPoolOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o IdentityPoolOutput) CognitoIdentityProviders() IdentityPoolCognitoIdentityProviderArrayOutput {
	return o.ApplyT(func(v *IdentityPool) IdentityPoolCognitoIdentityProviderArrayOutput {
		return v.CognitoIdentityProviders
	}).(IdentityPoolCognitoIdentityProviderArrayOutput)
}

func (o IdentityPoolOutput) DeveloperProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringPtrOutput { return v.DeveloperProviderName }).(pulumi.StringPtrOutput)
}

func (o IdentityPoolOutput) IdentityPoolName() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringOutput { return v.IdentityPoolName }).(pulumi.StringOutput)
}

func (o IdentityPoolOutput) OpenidConnectProviderArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringArrayOutput { return v.OpenidConnectProviderArns }).(pulumi.StringArrayOutput)
}

func (o IdentityPoolOutput) SamlProviderArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringArrayOutput { return v.SamlProviderArns }).(pulumi.StringArrayOutput)
}

func (o IdentityPoolOutput) SupportedLoginProviders() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringMapOutput { return v.SupportedLoginProviders }).(pulumi.StringMapOutput)
}

func (o IdentityPoolOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o IdentityPoolOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type IdentityPoolArrayOutput struct{ *pulumi.OutputState }

func (IdentityPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityPool)(nil)).Elem()
}

func (o IdentityPoolArrayOutput) ToIdentityPoolArrayOutput() IdentityPoolArrayOutput {
	return o
}

func (o IdentityPoolArrayOutput) ToIdentityPoolArrayOutputWithContext(ctx context.Context) IdentityPoolArrayOutput {
	return o
}

func (o IdentityPoolArrayOutput) Index(i pulumi.IntInput) IdentityPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityPool {
		return vs[0].([]*IdentityPool)[vs[1].(int)]
	}).(IdentityPoolOutput)
}

type IdentityPoolMapOutput struct{ *pulumi.OutputState }

func (IdentityPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityPool)(nil)).Elem()
}

func (o IdentityPoolMapOutput) ToIdentityPoolMapOutput() IdentityPoolMapOutput {
	return o
}

func (o IdentityPoolMapOutput) ToIdentityPoolMapOutputWithContext(ctx context.Context) IdentityPoolMapOutput {
	return o
}

func (o IdentityPoolMapOutput) MapIndex(k pulumi.StringInput) IdentityPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityPool {
		return vs[0].(map[string]*IdentityPool)[vs[1].(string)]
	}).(IdentityPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityPoolInput)(nil)).Elem(), &IdentityPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityPoolArrayInput)(nil)).Elem(), IdentityPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityPoolMapInput)(nil)).Elem(), IdentityPoolMap{})
	pulumi.RegisterOutputType(IdentityPoolOutput{})
	pulumi.RegisterOutputType(IdentityPoolArrayOutput{})
	pulumi.RegisterOutputType(IdentityPoolMapOutput{})
}
