// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cognito User Group resource.
type UserGroup struct {
	s *pulumi.ResourceState
}

// NewUserGroup registers a new resource with the given unique name, arguments, and options.
func NewUserGroup(ctx *pulumi.Context,
	name string, args *UserGroupArgs, opts ...pulumi.ResourceOpt) (*UserGroup, error) {
	if args == nil || args.UserPoolId == nil {
		return nil, errors.New("missing required argument 'UserPoolId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["precedence"] = nil
		inputs["roleArn"] = nil
		inputs["userPoolId"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["precedence"] = args.Precedence
		inputs["roleArn"] = args.RoleArn
		inputs["userPoolId"] = args.UserPoolId
	}
	s, err := ctx.RegisterResource("aws:cognito/userGroup:UserGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserGroup{s: s}, nil
}

// GetUserGroup gets an existing UserGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserGroupState, opts ...pulumi.ResourceOpt) (*UserGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["precedence"] = state.Precedence
		inputs["roleArn"] = state.RoleArn
		inputs["userPoolId"] = state.UserPoolId
	}
	s, err := ctx.ReadResource("aws:cognito/userGroup:UserGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *UserGroup) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *UserGroup) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The description of the user group.
func (r *UserGroup) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The name of the user group.
func (r *UserGroup) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The precedence of the user group.
func (r *UserGroup) Precedence() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["precedence"])
}

// The ARN of the IAM role to be associated with the user group.
func (r *UserGroup) RoleArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["roleArn"])
}

// The user pool ID.
func (r *UserGroup) UserPoolId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userPoolId"])
}

// Input properties used for looking up and filtering UserGroup resources.
type UserGroupState struct {
	// The description of the user group.
	Description interface{}
	// The name of the user group.
	Name interface{}
	// The precedence of the user group.
	Precedence interface{}
	// The ARN of the IAM role to be associated with the user group.
	RoleArn interface{}
	// The user pool ID.
	UserPoolId interface{}
}

// The set of arguments for constructing a UserGroup resource.
type UserGroupArgs struct {
	// The description of the user group.
	Description interface{}
	// The name of the user group.
	Name interface{}
	// The precedence of the user group.
	Precedence interface{}
	// The ARN of the IAM role to be associated with the user group.
	RoleArn interface{}
	// The user pool ID.
	UserPoolId interface{}
}
