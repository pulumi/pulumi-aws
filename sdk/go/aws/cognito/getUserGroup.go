// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS Cognito IDP (Identity Provider) User Group.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cognito"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cognito.LookupUserGroup(ctx, &cognito.LookupUserGroupArgs{
//				UserPoolId: "us-west-2_aaaaaaaaa",
//				Name:       "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupUserGroup(ctx *pulumi.Context, args *LookupUserGroupArgs, opts ...pulumi.InvokeOption) (*LookupUserGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserGroupResult
	err := ctx.Invoke("aws:cognito/getUserGroup:getUserGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserGroup.
type LookupUserGroupArgs struct {
	// Name of the user group.
	Name string `pulumi:"name"`
	// User pool the client belongs to.
	UserPoolId string `pulumi:"userPoolId"`
}

// A collection of values returned by getUserGroup.
type LookupUserGroupResult struct {
	// Description of the user group.
	Description string `pulumi:"description"`
	// A comma-delimited string concatenating `name` and `userPoolId`.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Precedence of the user group.
	Precedence int `pulumi:"precedence"`
	// ARN of the IAM role to be associated with the user group.
	RoleArn    string `pulumi:"roleArn"`
	UserPoolId string `pulumi:"userPoolId"`
}

func LookupUserGroupOutput(ctx *pulumi.Context, args LookupUserGroupOutputArgs, opts ...pulumi.InvokeOption) LookupUserGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserGroupResult, error) {
			args := v.(LookupUserGroupArgs)
			r, err := LookupUserGroup(ctx, &args, opts...)
			var s LookupUserGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserGroupResultOutput)
}

// A collection of arguments for invoking getUserGroup.
type LookupUserGroupOutputArgs struct {
	// Name of the user group.
	Name pulumi.StringInput `pulumi:"name"`
	// User pool the client belongs to.
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

func (LookupUserGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserGroupArgs)(nil)).Elem()
}

// A collection of values returned by getUserGroup.
type LookupUserGroupResultOutput struct{ *pulumi.OutputState }

func (LookupUserGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserGroupResult)(nil)).Elem()
}

func (o LookupUserGroupResultOutput) ToLookupUserGroupResultOutput() LookupUserGroupResultOutput {
	return o
}

func (o LookupUserGroupResultOutput) ToLookupUserGroupResultOutputWithContext(ctx context.Context) LookupUserGroupResultOutput {
	return o
}

// Description of the user group.
func (o LookupUserGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// A comma-delimited string concatenating `name` and `userPoolId`.
func (o LookupUserGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupUserGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// Precedence of the user group.
func (o LookupUserGroupResultOutput) Precedence() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUserGroupResult) int { return v.Precedence }).(pulumi.IntOutput)
}

// ARN of the IAM role to be associated with the user group.
func (o LookupUserGroupResultOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserGroupResult) string { return v.RoleArn }).(pulumi.StringOutput)
}

func (o LookupUserGroupResultOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserGroupResult) string { return v.UserPoolId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserGroupResultOutput{})
}
