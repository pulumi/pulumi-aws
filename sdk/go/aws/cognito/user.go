// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type User struct {
	pulumi.CustomResourceState

	Attributes             pulumi.StringMapOutput   `pulumi:"attributes"`
	ClientMetadata         pulumi.StringMapOutput   `pulumi:"clientMetadata"`
	CreationDate           pulumi.StringOutput      `pulumi:"creationDate"`
	DesiredDeliveryMediums pulumi.StringArrayOutput `pulumi:"desiredDeliveryMediums"`
	Enabled                pulumi.BoolPtrOutput     `pulumi:"enabled"`
	ForceAliasCreation     pulumi.BoolPtrOutput     `pulumi:"forceAliasCreation"`
	LastModifiedDate       pulumi.StringOutput      `pulumi:"lastModifiedDate"`
	MessageAction          pulumi.StringPtrOutput   `pulumi:"messageAction"`
	MfaSettingLists        pulumi.StringArrayOutput `pulumi:"mfaSettingLists"`
	Password               pulumi.StringPtrOutput   `pulumi:"password"`
	PreferredMfaSetting    pulumi.StringOutput      `pulumi:"preferredMfaSetting"`
	Status                 pulumi.StringOutput      `pulumi:"status"`
	Sub                    pulumi.StringOutput      `pulumi:"sub"`
	TemporaryPassword      pulumi.StringPtrOutput   `pulumi:"temporaryPassword"`
	UserPoolId             pulumi.StringOutput      `pulumi:"userPoolId"`
	Username               pulumi.StringOutput      `pulumi:"username"`
	ValidationData         pulumi.StringMapOutput   `pulumi:"validationData"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.TemporaryPassword != nil {
		args.TemporaryPassword = pulumi.ToSecret(args.TemporaryPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"temporaryPassword",
	})
	opts = append(opts, secrets)
	var resource User
	err := ctx.RegisterResource("aws:cognito/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aws:cognito/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	Attributes             map[string]string `pulumi:"attributes"`
	ClientMetadata         map[string]string `pulumi:"clientMetadata"`
	CreationDate           *string           `pulumi:"creationDate"`
	DesiredDeliveryMediums []string          `pulumi:"desiredDeliveryMediums"`
	Enabled                *bool             `pulumi:"enabled"`
	ForceAliasCreation     *bool             `pulumi:"forceAliasCreation"`
	LastModifiedDate       *string           `pulumi:"lastModifiedDate"`
	MessageAction          *string           `pulumi:"messageAction"`
	MfaSettingLists        []string          `pulumi:"mfaSettingLists"`
	Password               *string           `pulumi:"password"`
	PreferredMfaSetting    *string           `pulumi:"preferredMfaSetting"`
	Status                 *string           `pulumi:"status"`
	Sub                    *string           `pulumi:"sub"`
	TemporaryPassword      *string           `pulumi:"temporaryPassword"`
	UserPoolId             *string           `pulumi:"userPoolId"`
	Username               *string           `pulumi:"username"`
	ValidationData         map[string]string `pulumi:"validationData"`
}

type UserState struct {
	Attributes             pulumi.StringMapInput
	ClientMetadata         pulumi.StringMapInput
	CreationDate           pulumi.StringPtrInput
	DesiredDeliveryMediums pulumi.StringArrayInput
	Enabled                pulumi.BoolPtrInput
	ForceAliasCreation     pulumi.BoolPtrInput
	LastModifiedDate       pulumi.StringPtrInput
	MessageAction          pulumi.StringPtrInput
	MfaSettingLists        pulumi.StringArrayInput
	Password               pulumi.StringPtrInput
	PreferredMfaSetting    pulumi.StringPtrInput
	Status                 pulumi.StringPtrInput
	Sub                    pulumi.StringPtrInput
	TemporaryPassword      pulumi.StringPtrInput
	UserPoolId             pulumi.StringPtrInput
	Username               pulumi.StringPtrInput
	ValidationData         pulumi.StringMapInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	Attributes             map[string]string `pulumi:"attributes"`
	ClientMetadata         map[string]string `pulumi:"clientMetadata"`
	DesiredDeliveryMediums []string          `pulumi:"desiredDeliveryMediums"`
	Enabled                *bool             `pulumi:"enabled"`
	ForceAliasCreation     *bool             `pulumi:"forceAliasCreation"`
	MessageAction          *string           `pulumi:"messageAction"`
	Password               *string           `pulumi:"password"`
	TemporaryPassword      *string           `pulumi:"temporaryPassword"`
	UserPoolId             string            `pulumi:"userPoolId"`
	Username               string            `pulumi:"username"`
	ValidationData         map[string]string `pulumi:"validationData"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	Attributes             pulumi.StringMapInput
	ClientMetadata         pulumi.StringMapInput
	DesiredDeliveryMediums pulumi.StringArrayInput
	Enabled                pulumi.BoolPtrInput
	ForceAliasCreation     pulumi.BoolPtrInput
	MessageAction          pulumi.StringPtrInput
	Password               pulumi.StringPtrInput
	TemporaryPassword      pulumi.StringPtrInput
	UserPoolId             pulumi.StringInput
	Username               pulumi.StringInput
	ValidationData         pulumi.StringMapInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *User) pulumi.StringMapOutput { return v.Attributes }).(pulumi.StringMapOutput)
}

func (o UserOutput) ClientMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *User) pulumi.StringMapOutput { return v.ClientMetadata }).(pulumi.StringMapOutput)
}

func (o UserOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

func (o UserOutput) DesiredDeliveryMediums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.DesiredDeliveryMediums }).(pulumi.StringArrayOutput)
}

func (o UserOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o UserOutput) ForceAliasCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.ForceAliasCreation }).(pulumi.BoolPtrOutput)
}

func (o UserOutput) LastModifiedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.LastModifiedDate }).(pulumi.StringOutput)
}

func (o UserOutput) MessageAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.MessageAction }).(pulumi.StringPtrOutput)
}

func (o UserOutput) MfaSettingLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.MfaSettingLists }).(pulumi.StringArrayOutput)
}

func (o UserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o UserOutput) PreferredMfaSetting() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.PreferredMfaSetting }).(pulumi.StringOutput)
}

func (o UserOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o UserOutput) Sub() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Sub }).(pulumi.StringOutput)
}

func (o UserOutput) TemporaryPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.TemporaryPassword }).(pulumi.StringPtrOutput)
}

func (o UserOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.UserPoolId }).(pulumi.StringOutput)
}

func (o UserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func (o UserOutput) ValidationData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *User) pulumi.StringMapOutput { return v.ValidationData }).(pulumi.StringMapOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
