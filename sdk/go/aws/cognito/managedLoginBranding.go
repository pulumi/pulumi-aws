// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages branding settings for a user pool style and associates it with an app client.
//
// ## Example Usage
//
// ### Default Branding Style
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cognito"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cognito.NewManagedLoginBranding(ctx, "client", &cognito.ManagedLoginBrandingArgs{
//				ClientId:                 pulumi.Any(example.Id),
//				UserPoolId:               pulumi.Any(exampleAwsCognitoUserPool.Id),
//				UseCognitoProvidedValues: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Custom Branding Style
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cognito"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFilebase64, err := std.Filebase64(ctx, &std.Filebase64Args{
//				Input: "login_branding_asset.svg",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = cognito.NewManagedLoginBranding(ctx, "client", &cognito.ManagedLoginBrandingArgs{
//				ClientId:   pulumi.Any(example.Id),
//				UserPoolId: pulumi.Any(exampleAwsCognitoUserPool.Id),
//				Assets: cognito.ManagedLoginBrandingAssetArray{
//					&cognito.ManagedLoginBrandingAssetArgs{
//						Bytes:     pulumi.String(invokeFilebase64.Result),
//						Category:  pulumi.String("PAGE_HEADER_BACKGROUND"),
//						ColorMode: pulumi.String("DARK"),
//						Extension: pulumi.String("SVG"),
//					},
//				},
//				Settings: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Cognito branding settings using `user_pool_id` and `managed_login_branding_id` separated by `,`. For example:
//
// ```sh
// $ pulumi import aws:cognito/managedLoginBranding:ManagedLoginBranding example us-west-2_rSss9Zltr,06c6ae7b-1e66-46d2-87a9-1203ea3307bd
// ```
type ManagedLoginBranding struct {
	pulumi.CustomResourceState

	// Image files to apply to roles like backgrounds, logos, and icons. See details below.
	Assets ManagedLoginBrandingAssetArrayOutput `pulumi:"assets"`
	// App client that the branding style is for.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// ID of the managed login branding style.
	ManagedLoginBrandingId pulumi.StringOutput `pulumi:"managedLoginBrandingId"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// JSON document with the the settings to apply to the style.
	Settings pulumi.StringPtrOutput `pulumi:"settings"`
	// Settings including Amazon Cognito defaults.
	SettingsAll pulumi.StringOutput `pulumi:"settingsAll"`
	// When `true`, applies the default branding style options.
	UseCognitoProvidedValues pulumi.BoolOutput `pulumi:"useCognitoProvidedValues"`
	// User pool the client belongs to.
	//
	// The following arguments are optional:
	UserPoolId pulumi.StringOutput `pulumi:"userPoolId"`
}

// NewManagedLoginBranding registers a new resource with the given unique name, arguments, and options.
func NewManagedLoginBranding(ctx *pulumi.Context,
	name string, args *ManagedLoginBrandingArgs, opts ...pulumi.ResourceOption) (*ManagedLoginBranding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedLoginBranding
	err := ctx.RegisterResource("aws:cognito/managedLoginBranding:ManagedLoginBranding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedLoginBranding gets an existing ManagedLoginBranding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedLoginBranding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedLoginBrandingState, opts ...pulumi.ResourceOption) (*ManagedLoginBranding, error) {
	var resource ManagedLoginBranding
	err := ctx.ReadResource("aws:cognito/managedLoginBranding:ManagedLoginBranding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedLoginBranding resources.
type managedLoginBrandingState struct {
	// Image files to apply to roles like backgrounds, logos, and icons. See details below.
	Assets []ManagedLoginBrandingAsset `pulumi:"assets"`
	// App client that the branding style is for.
	ClientId *string `pulumi:"clientId"`
	// ID of the managed login branding style.
	ManagedLoginBrandingId *string `pulumi:"managedLoginBrandingId"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// JSON document with the the settings to apply to the style.
	Settings *string `pulumi:"settings"`
	// Settings including Amazon Cognito defaults.
	SettingsAll *string `pulumi:"settingsAll"`
	// When `true`, applies the default branding style options.
	UseCognitoProvidedValues *bool `pulumi:"useCognitoProvidedValues"`
	// User pool the client belongs to.
	//
	// The following arguments are optional:
	UserPoolId *string `pulumi:"userPoolId"`
}

type ManagedLoginBrandingState struct {
	// Image files to apply to roles like backgrounds, logos, and icons. See details below.
	Assets ManagedLoginBrandingAssetArrayInput
	// App client that the branding style is for.
	ClientId pulumi.StringPtrInput
	// ID of the managed login branding style.
	ManagedLoginBrandingId pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// JSON document with the the settings to apply to the style.
	Settings pulumi.StringPtrInput
	// Settings including Amazon Cognito defaults.
	SettingsAll pulumi.StringPtrInput
	// When `true`, applies the default branding style options.
	UseCognitoProvidedValues pulumi.BoolPtrInput
	// User pool the client belongs to.
	//
	// The following arguments are optional:
	UserPoolId pulumi.StringPtrInput
}

func (ManagedLoginBrandingState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedLoginBrandingState)(nil)).Elem()
}

type managedLoginBrandingArgs struct {
	// Image files to apply to roles like backgrounds, logos, and icons. See details below.
	Assets []ManagedLoginBrandingAsset `pulumi:"assets"`
	// App client that the branding style is for.
	ClientId string `pulumi:"clientId"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// JSON document with the the settings to apply to the style.
	Settings *string `pulumi:"settings"`
	// When `true`, applies the default branding style options.
	UseCognitoProvidedValues *bool `pulumi:"useCognitoProvidedValues"`
	// User pool the client belongs to.
	//
	// The following arguments are optional:
	UserPoolId string `pulumi:"userPoolId"`
}

// The set of arguments for constructing a ManagedLoginBranding resource.
type ManagedLoginBrandingArgs struct {
	// Image files to apply to roles like backgrounds, logos, and icons. See details below.
	Assets ManagedLoginBrandingAssetArrayInput
	// App client that the branding style is for.
	ClientId pulumi.StringInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// JSON document with the the settings to apply to the style.
	Settings pulumi.StringPtrInput
	// When `true`, applies the default branding style options.
	UseCognitoProvidedValues pulumi.BoolPtrInput
	// User pool the client belongs to.
	//
	// The following arguments are optional:
	UserPoolId pulumi.StringInput
}

func (ManagedLoginBrandingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedLoginBrandingArgs)(nil)).Elem()
}

type ManagedLoginBrandingInput interface {
	pulumi.Input

	ToManagedLoginBrandingOutput() ManagedLoginBrandingOutput
	ToManagedLoginBrandingOutputWithContext(ctx context.Context) ManagedLoginBrandingOutput
}

func (*ManagedLoginBranding) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedLoginBranding)(nil)).Elem()
}

func (i *ManagedLoginBranding) ToManagedLoginBrandingOutput() ManagedLoginBrandingOutput {
	return i.ToManagedLoginBrandingOutputWithContext(context.Background())
}

func (i *ManagedLoginBranding) ToManagedLoginBrandingOutputWithContext(ctx context.Context) ManagedLoginBrandingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedLoginBrandingOutput)
}

// ManagedLoginBrandingArrayInput is an input type that accepts ManagedLoginBrandingArray and ManagedLoginBrandingArrayOutput values.
// You can construct a concrete instance of `ManagedLoginBrandingArrayInput` via:
//
//	ManagedLoginBrandingArray{ ManagedLoginBrandingArgs{...} }
type ManagedLoginBrandingArrayInput interface {
	pulumi.Input

	ToManagedLoginBrandingArrayOutput() ManagedLoginBrandingArrayOutput
	ToManagedLoginBrandingArrayOutputWithContext(context.Context) ManagedLoginBrandingArrayOutput
}

type ManagedLoginBrandingArray []ManagedLoginBrandingInput

func (ManagedLoginBrandingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedLoginBranding)(nil)).Elem()
}

func (i ManagedLoginBrandingArray) ToManagedLoginBrandingArrayOutput() ManagedLoginBrandingArrayOutput {
	return i.ToManagedLoginBrandingArrayOutputWithContext(context.Background())
}

func (i ManagedLoginBrandingArray) ToManagedLoginBrandingArrayOutputWithContext(ctx context.Context) ManagedLoginBrandingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedLoginBrandingArrayOutput)
}

// ManagedLoginBrandingMapInput is an input type that accepts ManagedLoginBrandingMap and ManagedLoginBrandingMapOutput values.
// You can construct a concrete instance of `ManagedLoginBrandingMapInput` via:
//
//	ManagedLoginBrandingMap{ "key": ManagedLoginBrandingArgs{...} }
type ManagedLoginBrandingMapInput interface {
	pulumi.Input

	ToManagedLoginBrandingMapOutput() ManagedLoginBrandingMapOutput
	ToManagedLoginBrandingMapOutputWithContext(context.Context) ManagedLoginBrandingMapOutput
}

type ManagedLoginBrandingMap map[string]ManagedLoginBrandingInput

func (ManagedLoginBrandingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedLoginBranding)(nil)).Elem()
}

func (i ManagedLoginBrandingMap) ToManagedLoginBrandingMapOutput() ManagedLoginBrandingMapOutput {
	return i.ToManagedLoginBrandingMapOutputWithContext(context.Background())
}

func (i ManagedLoginBrandingMap) ToManagedLoginBrandingMapOutputWithContext(ctx context.Context) ManagedLoginBrandingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedLoginBrandingMapOutput)
}

type ManagedLoginBrandingOutput struct{ *pulumi.OutputState }

func (ManagedLoginBrandingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedLoginBranding)(nil)).Elem()
}

func (o ManagedLoginBrandingOutput) ToManagedLoginBrandingOutput() ManagedLoginBrandingOutput {
	return o
}

func (o ManagedLoginBrandingOutput) ToManagedLoginBrandingOutputWithContext(ctx context.Context) ManagedLoginBrandingOutput {
	return o
}

// Image files to apply to roles like backgrounds, logos, and icons. See details below.
func (o ManagedLoginBrandingOutput) Assets() ManagedLoginBrandingAssetArrayOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) ManagedLoginBrandingAssetArrayOutput { return v.Assets }).(ManagedLoginBrandingAssetArrayOutput)
}

// App client that the branding style is for.
func (o ManagedLoginBrandingOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// ID of the managed login branding style.
func (o ManagedLoginBrandingOutput) ManagedLoginBrandingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.StringOutput { return v.ManagedLoginBrandingId }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o ManagedLoginBrandingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// JSON document with the the settings to apply to the style.
func (o ManagedLoginBrandingOutput) Settings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.StringPtrOutput { return v.Settings }).(pulumi.StringPtrOutput)
}

// Settings including Amazon Cognito defaults.
func (o ManagedLoginBrandingOutput) SettingsAll() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.StringOutput { return v.SettingsAll }).(pulumi.StringOutput)
}

// When `true`, applies the default branding style options.
func (o ManagedLoginBrandingOutput) UseCognitoProvidedValues() pulumi.BoolOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.BoolOutput { return v.UseCognitoProvidedValues }).(pulumi.BoolOutput)
}

// User pool the client belongs to.
//
// The following arguments are optional:
func (o ManagedLoginBrandingOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.StringOutput { return v.UserPoolId }).(pulumi.StringOutput)
}

type ManagedLoginBrandingArrayOutput struct{ *pulumi.OutputState }

func (ManagedLoginBrandingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedLoginBranding)(nil)).Elem()
}

func (o ManagedLoginBrandingArrayOutput) ToManagedLoginBrandingArrayOutput() ManagedLoginBrandingArrayOutput {
	return o
}

func (o ManagedLoginBrandingArrayOutput) ToManagedLoginBrandingArrayOutputWithContext(ctx context.Context) ManagedLoginBrandingArrayOutput {
	return o
}

func (o ManagedLoginBrandingArrayOutput) Index(i pulumi.IntInput) ManagedLoginBrandingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedLoginBranding {
		return vs[0].([]*ManagedLoginBranding)[vs[1].(int)]
	}).(ManagedLoginBrandingOutput)
}

type ManagedLoginBrandingMapOutput struct{ *pulumi.OutputState }

func (ManagedLoginBrandingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedLoginBranding)(nil)).Elem()
}

func (o ManagedLoginBrandingMapOutput) ToManagedLoginBrandingMapOutput() ManagedLoginBrandingMapOutput {
	return o
}

func (o ManagedLoginBrandingMapOutput) ToManagedLoginBrandingMapOutputWithContext(ctx context.Context) ManagedLoginBrandingMapOutput {
	return o
}

func (o ManagedLoginBrandingMapOutput) MapIndex(k pulumi.StringInput) ManagedLoginBrandingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedLoginBranding {
		return vs[0].(map[string]*ManagedLoginBranding)[vs[1].(string)]
	}).(ManagedLoginBrandingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedLoginBrandingInput)(nil)).Elem(), &ManagedLoginBranding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedLoginBrandingArrayInput)(nil)).Elem(), ManagedLoginBrandingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedLoginBrandingMapInput)(nil)).Elem(), ManagedLoginBrandingMap{})
	pulumi.RegisterOutputType(ManagedLoginBrandingOutput{})
	pulumi.RegisterOutputType(ManagedLoginBrandingArrayOutput{})
	pulumi.RegisterOutputType(ManagedLoginBrandingMapOutput{})
}
