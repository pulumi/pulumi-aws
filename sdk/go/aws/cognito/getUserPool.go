// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS Cognito User Pool.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cognito"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cognito.LookupUserPool(ctx, &cognito.LookupUserPoolArgs{
//				UserPoolId: "us-west-2_aaaaaaaaa",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUserPool(ctx *pulumi.Context, args *LookupUserPoolArgs, opts ...pulumi.InvokeOption) (*LookupUserPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserPoolResult
	err := ctx.Invoke("aws:cognito/getUserPool:getUserPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserPool.
type LookupUserPoolArgs struct {
	// The cognito pool ID
	UserPoolId string `pulumi:"userPoolId"`
}

// A collection of values returned by getUserPool.
type LookupUserPoolResult struct {
	AccountRecoverySettings []GetUserPoolAccountRecoverySetting `pulumi:"accountRecoverySettings"`
	AdminCreateUserConfigs  []GetUserPoolAdminCreateUserConfig  `pulumi:"adminCreateUserConfigs"`
	// ARN of the User Pool.
	// * accountRecoverySetting - The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
	// * adminCreateUserConfig - The configuration for AdminCreateUser requests.
	Arn string `pulumi:"arn"`
	// The attributes that are auto-verified in a user pool.
	AutoVerifiedAttributes []string `pulumi:"autoVerifiedAttributes"`
	// The date and time, in ISO 8601 format, when the item was created.
	CreationDate string `pulumi:"creationDate"`
	// A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. An example of a custom domain name might be auth.example.com.
	CustomDomain string `pulumi:"customDomain"`
	// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature.
	// * deviceConfiguration - The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool.
	DeletionProtection   string                           `pulumi:"deletionProtection"`
	DeviceConfigurations []GetUserPoolDeviceConfiguration `pulumi:"deviceConfigurations"`
	// The domain prefix, if the user pool has a domain associated with it.
	// * emailConfiguration - The email configuration of your user pool. The email configuration type sets your preferred sending method, AWS Region, and sender for messages from your user pool.
	Domain              string                          `pulumi:"domain"`
	EmailConfigurations []GetUserPoolEmailConfiguration `pulumi:"emailConfigurations"`
	// A number estimating the size of the user pool.
	// * lambdaConfig - The AWS Lambda triggers associated with the user pool.
	EstimatedNumberOfUsers int                       `pulumi:"estimatedNumberOfUsers"`
	Id                     string                    `pulumi:"id"`
	LambdaConfigs          []GetUserPoolLambdaConfig `pulumi:"lambdaConfigs"`
	// The date and time, in ISO 8601 format, when the item was modified.
	LastModifiedDate string `pulumi:"lastModifiedDate"`
	// Can be one of the following values: `OFF` | `ON` | `OPTIONAL`
	MfaConfiguration string `pulumi:"mfaConfiguration"`
	// - Name of the attribute.
	Name             string                       `pulumi:"name"`
	SchemaAttributes []GetUserPoolSchemaAttribute `pulumi:"schemaAttributes"`
	// The contents of the SMS authentication message.
	SmsAuthenticationMessage string `pulumi:"smsAuthenticationMessage"`
	// The reason why the SMS configuration can't send the messages to your users.
	SmsConfigurationFailure string `pulumi:"smsConfigurationFailure"`
	// The contents of the SMS authentication message.
	SmsVerificationMessage string `pulumi:"smsVerificationMessage"`
	UserPoolId             string `pulumi:"userPoolId"`
	// The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.
	UserPoolTags map[string]string `pulumi:"userPoolTags"`
	// Specifies whether a user can use an email address or phone number as a username when they sign up.
	UsernameAttributes []string `pulumi:"usernameAttributes"`
}

func LookupUserPoolOutput(ctx *pulumi.Context, args LookupUserPoolOutputArgs, opts ...pulumi.InvokeOption) LookupUserPoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserPoolResult, error) {
			args := v.(LookupUserPoolArgs)
			r, err := LookupUserPool(ctx, &args, opts...)
			var s LookupUserPoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserPoolResultOutput)
}

// A collection of arguments for invoking getUserPool.
type LookupUserPoolOutputArgs struct {
	// The cognito pool ID
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

func (LookupUserPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserPoolArgs)(nil)).Elem()
}

// A collection of values returned by getUserPool.
type LookupUserPoolResultOutput struct{ *pulumi.OutputState }

func (LookupUserPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserPoolResult)(nil)).Elem()
}

func (o LookupUserPoolResultOutput) ToLookupUserPoolResultOutput() LookupUserPoolResultOutput {
	return o
}

func (o LookupUserPoolResultOutput) ToLookupUserPoolResultOutputWithContext(ctx context.Context) LookupUserPoolResultOutput {
	return o
}

func (o LookupUserPoolResultOutput) AccountRecoverySettings() GetUserPoolAccountRecoverySettingArrayOutput {
	return o.ApplyT(func(v LookupUserPoolResult) []GetUserPoolAccountRecoverySetting { return v.AccountRecoverySettings }).(GetUserPoolAccountRecoverySettingArrayOutput)
}

func (o LookupUserPoolResultOutput) AdminCreateUserConfigs() GetUserPoolAdminCreateUserConfigArrayOutput {
	return o.ApplyT(func(v LookupUserPoolResult) []GetUserPoolAdminCreateUserConfig { return v.AdminCreateUserConfigs }).(GetUserPoolAdminCreateUserConfigArrayOutput)
}

// ARN of the User Pool.
// * accountRecoverySetting - The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
// * adminCreateUserConfig - The configuration for AdminCreateUser requests.
func (o LookupUserPoolResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.Arn }).(pulumi.StringOutput)
}

// The attributes that are auto-verified in a user pool.
func (o LookupUserPoolResultOutput) AutoVerifiedAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserPoolResult) []string { return v.AutoVerifiedAttributes }).(pulumi.StringArrayOutput)
}

// The date and time, in ISO 8601 format, when the item was created.
func (o LookupUserPoolResultOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.CreationDate }).(pulumi.StringOutput)
}

// A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. An example of a custom domain name might be auth.example.com.
func (o LookupUserPoolResultOutput) CustomDomain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.CustomDomain }).(pulumi.StringOutput)
}

// When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature.
// * deviceConfiguration - The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool.
func (o LookupUserPoolResultOutput) DeletionProtection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.DeletionProtection }).(pulumi.StringOutput)
}

func (o LookupUserPoolResultOutput) DeviceConfigurations() GetUserPoolDeviceConfigurationArrayOutput {
	return o.ApplyT(func(v LookupUserPoolResult) []GetUserPoolDeviceConfiguration { return v.DeviceConfigurations }).(GetUserPoolDeviceConfigurationArrayOutput)
}

// The domain prefix, if the user pool has a domain associated with it.
// * emailConfiguration - The email configuration of your user pool. The email configuration type sets your preferred sending method, AWS Region, and sender for messages from your user pool.
func (o LookupUserPoolResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.Domain }).(pulumi.StringOutput)
}

func (o LookupUserPoolResultOutput) EmailConfigurations() GetUserPoolEmailConfigurationArrayOutput {
	return o.ApplyT(func(v LookupUserPoolResult) []GetUserPoolEmailConfiguration { return v.EmailConfigurations }).(GetUserPoolEmailConfigurationArrayOutput)
}

// A number estimating the size of the user pool.
// * lambdaConfig - The AWS Lambda triggers associated with the user pool.
func (o LookupUserPoolResultOutput) EstimatedNumberOfUsers() pulumi.IntOutput {
	return o.ApplyT(func(v LookupUserPoolResult) int { return v.EstimatedNumberOfUsers }).(pulumi.IntOutput)
}

func (o LookupUserPoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupUserPoolResultOutput) LambdaConfigs() GetUserPoolLambdaConfigArrayOutput {
	return o.ApplyT(func(v LookupUserPoolResult) []GetUserPoolLambdaConfig { return v.LambdaConfigs }).(GetUserPoolLambdaConfigArrayOutput)
}

// The date and time, in ISO 8601 format, when the item was modified.
func (o LookupUserPoolResultOutput) LastModifiedDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.LastModifiedDate }).(pulumi.StringOutput)
}

// Can be one of the following values: `OFF` | `ON` | `OPTIONAL`
func (o LookupUserPoolResultOutput) MfaConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.MfaConfiguration }).(pulumi.StringOutput)
}

// - Name of the attribute.
func (o LookupUserPoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupUserPoolResultOutput) SchemaAttributes() GetUserPoolSchemaAttributeArrayOutput {
	return o.ApplyT(func(v LookupUserPoolResult) []GetUserPoolSchemaAttribute { return v.SchemaAttributes }).(GetUserPoolSchemaAttributeArrayOutput)
}

// The contents of the SMS authentication message.
func (o LookupUserPoolResultOutput) SmsAuthenticationMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.SmsAuthenticationMessage }).(pulumi.StringOutput)
}

// The reason why the SMS configuration can't send the messages to your users.
func (o LookupUserPoolResultOutput) SmsConfigurationFailure() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.SmsConfigurationFailure }).(pulumi.StringOutput)
}

// The contents of the SMS authentication message.
func (o LookupUserPoolResultOutput) SmsVerificationMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.SmsVerificationMessage }).(pulumi.StringOutput)
}

func (o LookupUserPoolResultOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserPoolResult) string { return v.UserPoolId }).(pulumi.StringOutput)
}

// The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.
func (o LookupUserPoolResultOutput) UserPoolTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupUserPoolResult) map[string]string { return v.UserPoolTags }).(pulumi.StringMapOutput)
}

// Specifies whether a user can use an email address or phone number as a username when they sign up.
func (o LookupUserPoolResultOutput) UsernameAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserPoolResult) []string { return v.UsernameAttributes }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserPoolResultOutput{})
}
