// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS Cognito Identity Pool Roles Attachment.
type IdentityPoolRoleAttachment struct {
	s *pulumi.ResourceState
}

// NewIdentityPoolRoleAttachment registers a new resource with the given unique name, arguments, and options.
func NewIdentityPoolRoleAttachment(ctx *pulumi.Context,
	name string, args *IdentityPoolRoleAttachmentArgs, opts ...pulumi.ResourceOpt) (*IdentityPoolRoleAttachment, error) {
	if args == nil || args.IdentityPoolId == nil {
		return nil, errors.New("missing required argument 'IdentityPoolId'")
	}
	if args == nil || args.Roles == nil {
		return nil, errors.New("missing required argument 'Roles'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["identityPoolId"] = nil
		inputs["roleMappings"] = nil
		inputs["roles"] = nil
	} else {
		inputs["identityPoolId"] = args.IdentityPoolId
		inputs["roleMappings"] = args.RoleMappings
		inputs["roles"] = args.Roles
	}
	s, err := ctx.RegisterResource("aws:cognito/identityPoolRoleAttachment:IdentityPoolRoleAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IdentityPoolRoleAttachment{s: s}, nil
}

// GetIdentityPoolRoleAttachment gets an existing IdentityPoolRoleAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityPoolRoleAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IdentityPoolRoleAttachmentState, opts ...pulumi.ResourceOpt) (*IdentityPoolRoleAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["identityPoolId"] = state.IdentityPoolId
		inputs["roleMappings"] = state.RoleMappings
		inputs["roles"] = state.Roles
	}
	s, err := ctx.ReadResource("aws:cognito/identityPoolRoleAttachment:IdentityPoolRoleAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IdentityPoolRoleAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IdentityPoolRoleAttachment) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IdentityPoolRoleAttachment) ID() *pulumi.IDOutput {
	return r.s.ID
}

// An identity pool ID in the format REGION:GUID.
func (r *IdentityPoolRoleAttachment) IdentityPoolId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["identityPoolId"])
}

// A List of [Role Mapping](#role-mappings).
func (r *IdentityPoolRoleAttachment) RoleMappings() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["roleMappings"])
}

// The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.
func (r *IdentityPoolRoleAttachment) Roles() *pulumi.Output {
	return r.s.State["roles"]
}

// Input properties used for looking up and filtering IdentityPoolRoleAttachment resources.
type IdentityPoolRoleAttachmentState struct {
	// An identity pool ID in the format REGION:GUID.
	IdentityPoolId interface{}
	// A List of [Role Mapping](#role-mappings).
	RoleMappings interface{}
	// The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.
	Roles interface{}
}

// The set of arguments for constructing a IdentityPoolRoleAttachment resource.
type IdentityPoolRoleAttachmentArgs struct {
	// An identity pool ID in the format REGION:GUID.
	IdentityPoolId interface{}
	// A List of [Role Mapping](#role-mappings).
	RoleMappings interface{}
	// The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.
	Roles interface{}
}
