// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserPoolDomain struct {
	pulumi.CustomResourceState

	AwsAccountId              pulumi.StringOutput    `pulumi:"awsAccountId"`
	CertificateArn            pulumi.StringPtrOutput `pulumi:"certificateArn"`
	CloudfrontDistributionArn pulumi.StringOutput    `pulumi:"cloudfrontDistributionArn"`
	Domain                    pulumi.StringOutput    `pulumi:"domain"`
	S3Bucket                  pulumi.StringOutput    `pulumi:"s3Bucket"`
	UserPoolId                pulumi.StringOutput    `pulumi:"userPoolId"`
	Version                   pulumi.StringOutput    `pulumi:"version"`
}

// NewUserPoolDomain registers a new resource with the given unique name, arguments, and options.
func NewUserPoolDomain(ctx *pulumi.Context,
	name string, args *UserPoolDomainArgs, opts ...pulumi.ResourceOption) (*UserPoolDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	var resource UserPoolDomain
	err := ctx.RegisterResource("aws:cognito/userPoolDomain:UserPoolDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPoolDomain gets an existing UserPoolDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPoolDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPoolDomainState, opts ...pulumi.ResourceOption) (*UserPoolDomain, error) {
	var resource UserPoolDomain
	err := ctx.ReadResource("aws:cognito/userPoolDomain:UserPoolDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPoolDomain resources.
type userPoolDomainState struct {
	AwsAccountId              *string `pulumi:"awsAccountId"`
	CertificateArn            *string `pulumi:"certificateArn"`
	CloudfrontDistributionArn *string `pulumi:"cloudfrontDistributionArn"`
	Domain                    *string `pulumi:"domain"`
	S3Bucket                  *string `pulumi:"s3Bucket"`
	UserPoolId                *string `pulumi:"userPoolId"`
	Version                   *string `pulumi:"version"`
}

type UserPoolDomainState struct {
	AwsAccountId              pulumi.StringPtrInput
	CertificateArn            pulumi.StringPtrInput
	CloudfrontDistributionArn pulumi.StringPtrInput
	Domain                    pulumi.StringPtrInput
	S3Bucket                  pulumi.StringPtrInput
	UserPoolId                pulumi.StringPtrInput
	Version                   pulumi.StringPtrInput
}

func (UserPoolDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolDomainState)(nil)).Elem()
}

type userPoolDomainArgs struct {
	CertificateArn *string `pulumi:"certificateArn"`
	Domain         string  `pulumi:"domain"`
	UserPoolId     string  `pulumi:"userPoolId"`
}

// The set of arguments for constructing a UserPoolDomain resource.
type UserPoolDomainArgs struct {
	CertificateArn pulumi.StringPtrInput
	Domain         pulumi.StringInput
	UserPoolId     pulumi.StringInput
}

func (UserPoolDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolDomainArgs)(nil)).Elem()
}

type UserPoolDomainInput interface {
	pulumi.Input

	ToUserPoolDomainOutput() UserPoolDomainOutput
	ToUserPoolDomainOutputWithContext(ctx context.Context) UserPoolDomainOutput
}

func (*UserPoolDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPoolDomain)(nil)).Elem()
}

func (i *UserPoolDomain) ToUserPoolDomainOutput() UserPoolDomainOutput {
	return i.ToUserPoolDomainOutputWithContext(context.Background())
}

func (i *UserPoolDomain) ToUserPoolDomainOutputWithContext(ctx context.Context) UserPoolDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolDomainOutput)
}

// UserPoolDomainArrayInput is an input type that accepts UserPoolDomainArray and UserPoolDomainArrayOutput values.
// You can construct a concrete instance of `UserPoolDomainArrayInput` via:
//
//	UserPoolDomainArray{ UserPoolDomainArgs{...} }
type UserPoolDomainArrayInput interface {
	pulumi.Input

	ToUserPoolDomainArrayOutput() UserPoolDomainArrayOutput
	ToUserPoolDomainArrayOutputWithContext(context.Context) UserPoolDomainArrayOutput
}

type UserPoolDomainArray []UserPoolDomainInput

func (UserPoolDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPoolDomain)(nil)).Elem()
}

func (i UserPoolDomainArray) ToUserPoolDomainArrayOutput() UserPoolDomainArrayOutput {
	return i.ToUserPoolDomainArrayOutputWithContext(context.Background())
}

func (i UserPoolDomainArray) ToUserPoolDomainArrayOutputWithContext(ctx context.Context) UserPoolDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolDomainArrayOutput)
}

// UserPoolDomainMapInput is an input type that accepts UserPoolDomainMap and UserPoolDomainMapOutput values.
// You can construct a concrete instance of `UserPoolDomainMapInput` via:
//
//	UserPoolDomainMap{ "key": UserPoolDomainArgs{...} }
type UserPoolDomainMapInput interface {
	pulumi.Input

	ToUserPoolDomainMapOutput() UserPoolDomainMapOutput
	ToUserPoolDomainMapOutputWithContext(context.Context) UserPoolDomainMapOutput
}

type UserPoolDomainMap map[string]UserPoolDomainInput

func (UserPoolDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPoolDomain)(nil)).Elem()
}

func (i UserPoolDomainMap) ToUserPoolDomainMapOutput() UserPoolDomainMapOutput {
	return i.ToUserPoolDomainMapOutputWithContext(context.Background())
}

func (i UserPoolDomainMap) ToUserPoolDomainMapOutputWithContext(ctx context.Context) UserPoolDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolDomainMapOutput)
}

type UserPoolDomainOutput struct{ *pulumi.OutputState }

func (UserPoolDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPoolDomain)(nil)).Elem()
}

func (o UserPoolDomainOutput) ToUserPoolDomainOutput() UserPoolDomainOutput {
	return o
}

func (o UserPoolDomainOutput) ToUserPoolDomainOutputWithContext(ctx context.Context) UserPoolDomainOutput {
	return o
}

func (o UserPoolDomainOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolDomain) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

func (o UserPoolDomainOutput) CertificateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPoolDomain) pulumi.StringPtrOutput { return v.CertificateArn }).(pulumi.StringPtrOutput)
}

func (o UserPoolDomainOutput) CloudfrontDistributionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolDomain) pulumi.StringOutput { return v.CloudfrontDistributionArn }).(pulumi.StringOutput)
}

func (o UserPoolDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolDomain) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o UserPoolDomainOutput) S3Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolDomain) pulumi.StringOutput { return v.S3Bucket }).(pulumi.StringOutput)
}

func (o UserPoolDomainOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolDomain) pulumi.StringOutput { return v.UserPoolId }).(pulumi.StringOutput)
}

func (o UserPoolDomainOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolDomain) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type UserPoolDomainArrayOutput struct{ *pulumi.OutputState }

func (UserPoolDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPoolDomain)(nil)).Elem()
}

func (o UserPoolDomainArrayOutput) ToUserPoolDomainArrayOutput() UserPoolDomainArrayOutput {
	return o
}

func (o UserPoolDomainArrayOutput) ToUserPoolDomainArrayOutputWithContext(ctx context.Context) UserPoolDomainArrayOutput {
	return o
}

func (o UserPoolDomainArrayOutput) Index(i pulumi.IntInput) UserPoolDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserPoolDomain {
		return vs[0].([]*UserPoolDomain)[vs[1].(int)]
	}).(UserPoolDomainOutput)
}

type UserPoolDomainMapOutput struct{ *pulumi.OutputState }

func (UserPoolDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPoolDomain)(nil)).Elem()
}

func (o UserPoolDomainMapOutput) ToUserPoolDomainMapOutput() UserPoolDomainMapOutput {
	return o
}

func (o UserPoolDomainMapOutput) ToUserPoolDomainMapOutputWithContext(ctx context.Context) UserPoolDomainMapOutput {
	return o
}

func (o UserPoolDomainMapOutput) MapIndex(k pulumi.StringInput) UserPoolDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserPoolDomain {
		return vs[0].(map[string]*UserPoolDomain)[vs[1].(string)]
	}).(UserPoolDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPoolDomainInput)(nil)).Elem(), &UserPoolDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPoolDomainArrayInput)(nil)).Elem(), UserPoolDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPoolDomainMapInput)(nil)).Elem(), UserPoolDomainMap{})
	pulumi.RegisterOutputType(UserPoolDomainOutput{})
	pulumi.RegisterOutputType(UserPoolDomainArrayOutput{})
	pulumi.RegisterOutputType(UserPoolDomainMapOutput{})
}
