// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package notifications

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS User Notifications Event Rule.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/notifications"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := notifications.NewNotificationConfiguration(ctx, "example", &notifications.NotificationConfigurationArgs{
//				Name:        pulumi.String("example"),
//				Description: pulumi.String("example configuration"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"detail": map[string]interface{}{
//					"state": map[string]interface{}{
//						"value": []string{
//							"ALARM",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = notifications.NewEventRule(ctx, "example", &notifications.EventRuleArgs{
//				EventPattern:                 pulumi.String(json0),
//				EventType:                    pulumi.String("CloudWatch Alarm State Change"),
//				NotificationConfigurationArn: example.Arn,
//				Regions: pulumi.StringArray{
//					pulumi.String("us-east-1"),
//					pulumi.String("us-west-2"),
//				},
//				Source: pulumi.String("aws.cloudwatch"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import User Notifications Event Rule using the `arn`. For example:
//
// ```sh
// $ pulumi import aws:notifications/eventRule:EventRule example arn:aws:notifications::123456789012:configuration/abc123def456ghi789jkl012mno345/rule/abc123def456ghi789jkl012mno345
// ```
type EventRule struct {
	pulumi.CustomResourceState

	// ARN of the Event Rule.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// JSON string defining the event pattern to match. Maximum length is 4096 characters.
	EventPattern pulumi.StringPtrOutput `pulumi:"eventPattern"`
	// Type of event to match. Must be between 1 and 128 characters, and match the pattern `([a-zA-Z0-9 \-\(\)])+`.
	EventType pulumi.StringOutput `pulumi:"eventType"`
	// ARN of the notification configuration to associate with this event rule. Must match the pattern `arn:aws:notifications::[0-9]{12}:configuration/[a-z0-9]{27}`.
	NotificationConfigurationArn pulumi.StringOutput `pulumi:"notificationConfigurationArn"`
	// Set of AWS regions where the event rule will be applied. Each region must be between 2 and 25 characters, and match the pattern `([a-z]{1,2})-([a-z]{1,15}-)+([0-9])`.
	Regions pulumi.StringArrayOutput `pulumi:"regions"`
	// Source of the event. Must be between 1 and 36 characters, and match the pattern `aws.([a-z0-9\-])+`.
	//
	// The following arguments are optional:
	Source pulumi.StringOutput `pulumi:"source"`
}

// NewEventRule registers a new resource with the given unique name, arguments, and options.
func NewEventRule(ctx *pulumi.Context,
	name string, args *EventRuleArgs, opts ...pulumi.ResourceOption) (*EventRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventType == nil {
		return nil, errors.New("invalid value for required argument 'EventType'")
	}
	if args.NotificationConfigurationArn == nil {
		return nil, errors.New("invalid value for required argument 'NotificationConfigurationArn'")
	}
	if args.Regions == nil {
		return nil, errors.New("invalid value for required argument 'Regions'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventRule
	err := ctx.RegisterResource("aws:notifications/eventRule:EventRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventRule gets an existing EventRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventRuleState, opts ...pulumi.ResourceOption) (*EventRule, error) {
	var resource EventRule
	err := ctx.ReadResource("aws:notifications/eventRule:EventRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventRule resources.
type eventRuleState struct {
	// ARN of the Event Rule.
	Arn *string `pulumi:"arn"`
	// JSON string defining the event pattern to match. Maximum length is 4096 characters.
	EventPattern *string `pulumi:"eventPattern"`
	// Type of event to match. Must be between 1 and 128 characters, and match the pattern `([a-zA-Z0-9 \-\(\)])+`.
	EventType *string `pulumi:"eventType"`
	// ARN of the notification configuration to associate with this event rule. Must match the pattern `arn:aws:notifications::[0-9]{12}:configuration/[a-z0-9]{27}`.
	NotificationConfigurationArn *string `pulumi:"notificationConfigurationArn"`
	// Set of AWS regions where the event rule will be applied. Each region must be between 2 and 25 characters, and match the pattern `([a-z]{1,2})-([a-z]{1,15}-)+([0-9])`.
	Regions []string `pulumi:"regions"`
	// Source of the event. Must be between 1 and 36 characters, and match the pattern `aws.([a-z0-9\-])+`.
	//
	// The following arguments are optional:
	Source *string `pulumi:"source"`
}

type EventRuleState struct {
	// ARN of the Event Rule.
	Arn pulumi.StringPtrInput
	// JSON string defining the event pattern to match. Maximum length is 4096 characters.
	EventPattern pulumi.StringPtrInput
	// Type of event to match. Must be between 1 and 128 characters, and match the pattern `([a-zA-Z0-9 \-\(\)])+`.
	EventType pulumi.StringPtrInput
	// ARN of the notification configuration to associate with this event rule. Must match the pattern `arn:aws:notifications::[0-9]{12}:configuration/[a-z0-9]{27}`.
	NotificationConfigurationArn pulumi.StringPtrInput
	// Set of AWS regions where the event rule will be applied. Each region must be between 2 and 25 characters, and match the pattern `([a-z]{1,2})-([a-z]{1,15}-)+([0-9])`.
	Regions pulumi.StringArrayInput
	// Source of the event. Must be between 1 and 36 characters, and match the pattern `aws.([a-z0-9\-])+`.
	//
	// The following arguments are optional:
	Source pulumi.StringPtrInput
}

func (EventRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventRuleState)(nil)).Elem()
}

type eventRuleArgs struct {
	// JSON string defining the event pattern to match. Maximum length is 4096 characters.
	EventPattern *string `pulumi:"eventPattern"`
	// Type of event to match. Must be between 1 and 128 characters, and match the pattern `([a-zA-Z0-9 \-\(\)])+`.
	EventType string `pulumi:"eventType"`
	// ARN of the notification configuration to associate with this event rule. Must match the pattern `arn:aws:notifications::[0-9]{12}:configuration/[a-z0-9]{27}`.
	NotificationConfigurationArn string `pulumi:"notificationConfigurationArn"`
	// Set of AWS regions where the event rule will be applied. Each region must be between 2 and 25 characters, and match the pattern `([a-z]{1,2})-([a-z]{1,15}-)+([0-9])`.
	Regions []string `pulumi:"regions"`
	// Source of the event. Must be between 1 and 36 characters, and match the pattern `aws.([a-z0-9\-])+`.
	//
	// The following arguments are optional:
	Source string `pulumi:"source"`
}

// The set of arguments for constructing a EventRule resource.
type EventRuleArgs struct {
	// JSON string defining the event pattern to match. Maximum length is 4096 characters.
	EventPattern pulumi.StringPtrInput
	// Type of event to match. Must be between 1 and 128 characters, and match the pattern `([a-zA-Z0-9 \-\(\)])+`.
	EventType pulumi.StringInput
	// ARN of the notification configuration to associate with this event rule. Must match the pattern `arn:aws:notifications::[0-9]{12}:configuration/[a-z0-9]{27}`.
	NotificationConfigurationArn pulumi.StringInput
	// Set of AWS regions where the event rule will be applied. Each region must be between 2 and 25 characters, and match the pattern `([a-z]{1,2})-([a-z]{1,15}-)+([0-9])`.
	Regions pulumi.StringArrayInput
	// Source of the event. Must be between 1 and 36 characters, and match the pattern `aws.([a-z0-9\-])+`.
	//
	// The following arguments are optional:
	Source pulumi.StringInput
}

func (EventRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventRuleArgs)(nil)).Elem()
}

type EventRuleInput interface {
	pulumi.Input

	ToEventRuleOutput() EventRuleOutput
	ToEventRuleOutputWithContext(ctx context.Context) EventRuleOutput
}

func (*EventRule) ElementType() reflect.Type {
	return reflect.TypeOf((**EventRule)(nil)).Elem()
}

func (i *EventRule) ToEventRuleOutput() EventRuleOutput {
	return i.ToEventRuleOutputWithContext(context.Background())
}

func (i *EventRule) ToEventRuleOutputWithContext(ctx context.Context) EventRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleOutput)
}

// EventRuleArrayInput is an input type that accepts EventRuleArray and EventRuleArrayOutput values.
// You can construct a concrete instance of `EventRuleArrayInput` via:
//
//	EventRuleArray{ EventRuleArgs{...} }
type EventRuleArrayInput interface {
	pulumi.Input

	ToEventRuleArrayOutput() EventRuleArrayOutput
	ToEventRuleArrayOutputWithContext(context.Context) EventRuleArrayOutput
}

type EventRuleArray []EventRuleInput

func (EventRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventRule)(nil)).Elem()
}

func (i EventRuleArray) ToEventRuleArrayOutput() EventRuleArrayOutput {
	return i.ToEventRuleArrayOutputWithContext(context.Background())
}

func (i EventRuleArray) ToEventRuleArrayOutputWithContext(ctx context.Context) EventRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleArrayOutput)
}

// EventRuleMapInput is an input type that accepts EventRuleMap and EventRuleMapOutput values.
// You can construct a concrete instance of `EventRuleMapInput` via:
//
//	EventRuleMap{ "key": EventRuleArgs{...} }
type EventRuleMapInput interface {
	pulumi.Input

	ToEventRuleMapOutput() EventRuleMapOutput
	ToEventRuleMapOutputWithContext(context.Context) EventRuleMapOutput
}

type EventRuleMap map[string]EventRuleInput

func (EventRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventRule)(nil)).Elem()
}

func (i EventRuleMap) ToEventRuleMapOutput() EventRuleMapOutput {
	return i.ToEventRuleMapOutputWithContext(context.Background())
}

func (i EventRuleMap) ToEventRuleMapOutputWithContext(ctx context.Context) EventRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleMapOutput)
}

type EventRuleOutput struct{ *pulumi.OutputState }

func (EventRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventRule)(nil)).Elem()
}

func (o EventRuleOutput) ToEventRuleOutput() EventRuleOutput {
	return o
}

func (o EventRuleOutput) ToEventRuleOutputWithContext(ctx context.Context) EventRuleOutput {
	return o
}

// ARN of the Event Rule.
func (o EventRuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// JSON string defining the event pattern to match. Maximum length is 4096 characters.
func (o EventRuleOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringPtrOutput { return v.EventPattern }).(pulumi.StringPtrOutput)
}

// Type of event to match. Must be between 1 and 128 characters, and match the pattern `([a-zA-Z0-9 \-\(\)])+`.
func (o EventRuleOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringOutput { return v.EventType }).(pulumi.StringOutput)
}

// ARN of the notification configuration to associate with this event rule. Must match the pattern `arn:aws:notifications::[0-9]{12}:configuration/[a-z0-9]{27}`.
func (o EventRuleOutput) NotificationConfigurationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringOutput { return v.NotificationConfigurationArn }).(pulumi.StringOutput)
}

// Set of AWS regions where the event rule will be applied. Each region must be between 2 and 25 characters, and match the pattern `([a-z]{1,2})-([a-z]{1,15}-)+([0-9])`.
func (o EventRuleOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringArrayOutput { return v.Regions }).(pulumi.StringArrayOutput)
}

// Source of the event. Must be between 1 and 36 characters, and match the pattern `aws.([a-z0-9\-])+`.
//
// The following arguments are optional:
func (o EventRuleOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type EventRuleArrayOutput struct{ *pulumi.OutputState }

func (EventRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventRule)(nil)).Elem()
}

func (o EventRuleArrayOutput) ToEventRuleArrayOutput() EventRuleArrayOutput {
	return o
}

func (o EventRuleArrayOutput) ToEventRuleArrayOutputWithContext(ctx context.Context) EventRuleArrayOutput {
	return o
}

func (o EventRuleArrayOutput) Index(i pulumi.IntInput) EventRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventRule {
		return vs[0].([]*EventRule)[vs[1].(int)]
	}).(EventRuleOutput)
}

type EventRuleMapOutput struct{ *pulumi.OutputState }

func (EventRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventRule)(nil)).Elem()
}

func (o EventRuleMapOutput) ToEventRuleMapOutput() EventRuleMapOutput {
	return o
}

func (o EventRuleMapOutput) ToEventRuleMapOutputWithContext(ctx context.Context) EventRuleMapOutput {
	return o
}

func (o EventRuleMapOutput) MapIndex(k pulumi.StringInput) EventRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventRule {
		return vs[0].(map[string]*EventRule)[vs[1].(string)]
	}).(EventRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleInput)(nil)).Elem(), &EventRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleArrayInput)(nil)).Elem(), EventRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleMapInput)(nil)).Elem(), EventRuleMap{})
	pulumi.RegisterOutputType(EventRuleOutput{})
	pulumi.RegisterOutputType(EventRuleArrayOutput{})
	pulumi.RegisterOutputType(EventRuleMapOutput{})
}
