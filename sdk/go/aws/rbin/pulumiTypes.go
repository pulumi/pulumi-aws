// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rbin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RuleLockConfiguration struct {
	// Information about the retention rule unlock delay. See `unlockDelay` below.
	UnlockDelay RuleLockConfigurationUnlockDelay `pulumi:"unlockDelay"`
}

// RuleLockConfigurationInput is an input type that accepts RuleLockConfigurationArgs and RuleLockConfigurationOutput values.
// You can construct a concrete instance of `RuleLockConfigurationInput` via:
//
//	RuleLockConfigurationArgs{...}
type RuleLockConfigurationInput interface {
	pulumi.Input

	ToRuleLockConfigurationOutput() RuleLockConfigurationOutput
	ToRuleLockConfigurationOutputWithContext(context.Context) RuleLockConfigurationOutput
}

type RuleLockConfigurationArgs struct {
	// Information about the retention rule unlock delay. See `unlockDelay` below.
	UnlockDelay RuleLockConfigurationUnlockDelayInput `pulumi:"unlockDelay"`
}

func (RuleLockConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleLockConfiguration)(nil)).Elem()
}

func (i RuleLockConfigurationArgs) ToRuleLockConfigurationOutput() RuleLockConfigurationOutput {
	return i.ToRuleLockConfigurationOutputWithContext(context.Background())
}

func (i RuleLockConfigurationArgs) ToRuleLockConfigurationOutputWithContext(ctx context.Context) RuleLockConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleLockConfigurationOutput)
}

func (i RuleLockConfigurationArgs) ToRuleLockConfigurationPtrOutput() RuleLockConfigurationPtrOutput {
	return i.ToRuleLockConfigurationPtrOutputWithContext(context.Background())
}

func (i RuleLockConfigurationArgs) ToRuleLockConfigurationPtrOutputWithContext(ctx context.Context) RuleLockConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleLockConfigurationOutput).ToRuleLockConfigurationPtrOutputWithContext(ctx)
}

// RuleLockConfigurationPtrInput is an input type that accepts RuleLockConfigurationArgs, RuleLockConfigurationPtr and RuleLockConfigurationPtrOutput values.
// You can construct a concrete instance of `RuleLockConfigurationPtrInput` via:
//
//	        RuleLockConfigurationArgs{...}
//
//	or:
//
//	        nil
type RuleLockConfigurationPtrInput interface {
	pulumi.Input

	ToRuleLockConfigurationPtrOutput() RuleLockConfigurationPtrOutput
	ToRuleLockConfigurationPtrOutputWithContext(context.Context) RuleLockConfigurationPtrOutput
}

type ruleLockConfigurationPtrType RuleLockConfigurationArgs

func RuleLockConfigurationPtr(v *RuleLockConfigurationArgs) RuleLockConfigurationPtrInput {
	return (*ruleLockConfigurationPtrType)(v)
}

func (*ruleLockConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleLockConfiguration)(nil)).Elem()
}

func (i *ruleLockConfigurationPtrType) ToRuleLockConfigurationPtrOutput() RuleLockConfigurationPtrOutput {
	return i.ToRuleLockConfigurationPtrOutputWithContext(context.Background())
}

func (i *ruleLockConfigurationPtrType) ToRuleLockConfigurationPtrOutputWithContext(ctx context.Context) RuleLockConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleLockConfigurationPtrOutput)
}

type RuleLockConfigurationOutput struct{ *pulumi.OutputState }

func (RuleLockConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleLockConfiguration)(nil)).Elem()
}

func (o RuleLockConfigurationOutput) ToRuleLockConfigurationOutput() RuleLockConfigurationOutput {
	return o
}

func (o RuleLockConfigurationOutput) ToRuleLockConfigurationOutputWithContext(ctx context.Context) RuleLockConfigurationOutput {
	return o
}

func (o RuleLockConfigurationOutput) ToRuleLockConfigurationPtrOutput() RuleLockConfigurationPtrOutput {
	return o.ToRuleLockConfigurationPtrOutputWithContext(context.Background())
}

func (o RuleLockConfigurationOutput) ToRuleLockConfigurationPtrOutputWithContext(ctx context.Context) RuleLockConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleLockConfiguration) *RuleLockConfiguration {
		return &v
	}).(RuleLockConfigurationPtrOutput)
}

// Information about the retention rule unlock delay. See `unlockDelay` below.
func (o RuleLockConfigurationOutput) UnlockDelay() RuleLockConfigurationUnlockDelayOutput {
	return o.ApplyT(func(v RuleLockConfiguration) RuleLockConfigurationUnlockDelay { return v.UnlockDelay }).(RuleLockConfigurationUnlockDelayOutput)
}

type RuleLockConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RuleLockConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleLockConfiguration)(nil)).Elem()
}

func (o RuleLockConfigurationPtrOutput) ToRuleLockConfigurationPtrOutput() RuleLockConfigurationPtrOutput {
	return o
}

func (o RuleLockConfigurationPtrOutput) ToRuleLockConfigurationPtrOutputWithContext(ctx context.Context) RuleLockConfigurationPtrOutput {
	return o
}

func (o RuleLockConfigurationPtrOutput) Elem() RuleLockConfigurationOutput {
	return o.ApplyT(func(v *RuleLockConfiguration) RuleLockConfiguration {
		if v != nil {
			return *v
		}
		var ret RuleLockConfiguration
		return ret
	}).(RuleLockConfigurationOutput)
}

// Information about the retention rule unlock delay. See `unlockDelay` below.
func (o RuleLockConfigurationPtrOutput) UnlockDelay() RuleLockConfigurationUnlockDelayPtrOutput {
	return o.ApplyT(func(v *RuleLockConfiguration) *RuleLockConfigurationUnlockDelay {
		if v == nil {
			return nil
		}
		return &v.UnlockDelay
	}).(RuleLockConfigurationUnlockDelayPtrOutput)
}

type RuleLockConfigurationUnlockDelay struct {
	// The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
	UnlockDelayUnit string `pulumi:"unlockDelayUnit"`
	// The unlock delay period, measured in the unit specified for UnlockDelayUnit.
	UnlockDelayValue int `pulumi:"unlockDelayValue"`
}

// RuleLockConfigurationUnlockDelayInput is an input type that accepts RuleLockConfigurationUnlockDelayArgs and RuleLockConfigurationUnlockDelayOutput values.
// You can construct a concrete instance of `RuleLockConfigurationUnlockDelayInput` via:
//
//	RuleLockConfigurationUnlockDelayArgs{...}
type RuleLockConfigurationUnlockDelayInput interface {
	pulumi.Input

	ToRuleLockConfigurationUnlockDelayOutput() RuleLockConfigurationUnlockDelayOutput
	ToRuleLockConfigurationUnlockDelayOutputWithContext(context.Context) RuleLockConfigurationUnlockDelayOutput
}

type RuleLockConfigurationUnlockDelayArgs struct {
	// The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
	UnlockDelayUnit pulumi.StringInput `pulumi:"unlockDelayUnit"`
	// The unlock delay period, measured in the unit specified for UnlockDelayUnit.
	UnlockDelayValue pulumi.IntInput `pulumi:"unlockDelayValue"`
}

func (RuleLockConfigurationUnlockDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleLockConfigurationUnlockDelay)(nil)).Elem()
}

func (i RuleLockConfigurationUnlockDelayArgs) ToRuleLockConfigurationUnlockDelayOutput() RuleLockConfigurationUnlockDelayOutput {
	return i.ToRuleLockConfigurationUnlockDelayOutputWithContext(context.Background())
}

func (i RuleLockConfigurationUnlockDelayArgs) ToRuleLockConfigurationUnlockDelayOutputWithContext(ctx context.Context) RuleLockConfigurationUnlockDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleLockConfigurationUnlockDelayOutput)
}

func (i RuleLockConfigurationUnlockDelayArgs) ToRuleLockConfigurationUnlockDelayPtrOutput() RuleLockConfigurationUnlockDelayPtrOutput {
	return i.ToRuleLockConfigurationUnlockDelayPtrOutputWithContext(context.Background())
}

func (i RuleLockConfigurationUnlockDelayArgs) ToRuleLockConfigurationUnlockDelayPtrOutputWithContext(ctx context.Context) RuleLockConfigurationUnlockDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleLockConfigurationUnlockDelayOutput).ToRuleLockConfigurationUnlockDelayPtrOutputWithContext(ctx)
}

// RuleLockConfigurationUnlockDelayPtrInput is an input type that accepts RuleLockConfigurationUnlockDelayArgs, RuleLockConfigurationUnlockDelayPtr and RuleLockConfigurationUnlockDelayPtrOutput values.
// You can construct a concrete instance of `RuleLockConfigurationUnlockDelayPtrInput` via:
//
//	        RuleLockConfigurationUnlockDelayArgs{...}
//
//	or:
//
//	        nil
type RuleLockConfigurationUnlockDelayPtrInput interface {
	pulumi.Input

	ToRuleLockConfigurationUnlockDelayPtrOutput() RuleLockConfigurationUnlockDelayPtrOutput
	ToRuleLockConfigurationUnlockDelayPtrOutputWithContext(context.Context) RuleLockConfigurationUnlockDelayPtrOutput
}

type ruleLockConfigurationUnlockDelayPtrType RuleLockConfigurationUnlockDelayArgs

func RuleLockConfigurationUnlockDelayPtr(v *RuleLockConfigurationUnlockDelayArgs) RuleLockConfigurationUnlockDelayPtrInput {
	return (*ruleLockConfigurationUnlockDelayPtrType)(v)
}

func (*ruleLockConfigurationUnlockDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleLockConfigurationUnlockDelay)(nil)).Elem()
}

func (i *ruleLockConfigurationUnlockDelayPtrType) ToRuleLockConfigurationUnlockDelayPtrOutput() RuleLockConfigurationUnlockDelayPtrOutput {
	return i.ToRuleLockConfigurationUnlockDelayPtrOutputWithContext(context.Background())
}

func (i *ruleLockConfigurationUnlockDelayPtrType) ToRuleLockConfigurationUnlockDelayPtrOutputWithContext(ctx context.Context) RuleLockConfigurationUnlockDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleLockConfigurationUnlockDelayPtrOutput)
}

type RuleLockConfigurationUnlockDelayOutput struct{ *pulumi.OutputState }

func (RuleLockConfigurationUnlockDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleLockConfigurationUnlockDelay)(nil)).Elem()
}

func (o RuleLockConfigurationUnlockDelayOutput) ToRuleLockConfigurationUnlockDelayOutput() RuleLockConfigurationUnlockDelayOutput {
	return o
}

func (o RuleLockConfigurationUnlockDelayOutput) ToRuleLockConfigurationUnlockDelayOutputWithContext(ctx context.Context) RuleLockConfigurationUnlockDelayOutput {
	return o
}

func (o RuleLockConfigurationUnlockDelayOutput) ToRuleLockConfigurationUnlockDelayPtrOutput() RuleLockConfigurationUnlockDelayPtrOutput {
	return o.ToRuleLockConfigurationUnlockDelayPtrOutputWithContext(context.Background())
}

func (o RuleLockConfigurationUnlockDelayOutput) ToRuleLockConfigurationUnlockDelayPtrOutputWithContext(ctx context.Context) RuleLockConfigurationUnlockDelayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleLockConfigurationUnlockDelay) *RuleLockConfigurationUnlockDelay {
		return &v
	}).(RuleLockConfigurationUnlockDelayPtrOutput)
}

// The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
func (o RuleLockConfigurationUnlockDelayOutput) UnlockDelayUnit() pulumi.StringOutput {
	return o.ApplyT(func(v RuleLockConfigurationUnlockDelay) string { return v.UnlockDelayUnit }).(pulumi.StringOutput)
}

// The unlock delay period, measured in the unit specified for UnlockDelayUnit.
func (o RuleLockConfigurationUnlockDelayOutput) UnlockDelayValue() pulumi.IntOutput {
	return o.ApplyT(func(v RuleLockConfigurationUnlockDelay) int { return v.UnlockDelayValue }).(pulumi.IntOutput)
}

type RuleLockConfigurationUnlockDelayPtrOutput struct{ *pulumi.OutputState }

func (RuleLockConfigurationUnlockDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleLockConfigurationUnlockDelay)(nil)).Elem()
}

func (o RuleLockConfigurationUnlockDelayPtrOutput) ToRuleLockConfigurationUnlockDelayPtrOutput() RuleLockConfigurationUnlockDelayPtrOutput {
	return o
}

func (o RuleLockConfigurationUnlockDelayPtrOutput) ToRuleLockConfigurationUnlockDelayPtrOutputWithContext(ctx context.Context) RuleLockConfigurationUnlockDelayPtrOutput {
	return o
}

func (o RuleLockConfigurationUnlockDelayPtrOutput) Elem() RuleLockConfigurationUnlockDelayOutput {
	return o.ApplyT(func(v *RuleLockConfigurationUnlockDelay) RuleLockConfigurationUnlockDelay {
		if v != nil {
			return *v
		}
		var ret RuleLockConfigurationUnlockDelay
		return ret
	}).(RuleLockConfigurationUnlockDelayOutput)
}

// The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
func (o RuleLockConfigurationUnlockDelayPtrOutput) UnlockDelayUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleLockConfigurationUnlockDelay) *string {
		if v == nil {
			return nil
		}
		return &v.UnlockDelayUnit
	}).(pulumi.StringPtrOutput)
}

// The unlock delay period, measured in the unit specified for UnlockDelayUnit.
func (o RuleLockConfigurationUnlockDelayPtrOutput) UnlockDelayValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleLockConfigurationUnlockDelay) *int {
		if v == nil {
			return nil
		}
		return &v.UnlockDelayValue
	}).(pulumi.IntPtrOutput)
}

type RuleResourceTag struct {
	// The tag key.
	//
	// The following argument is optional:
	ResourceTagKey string `pulumi:"resourceTagKey"`
	// The tag value.
	ResourceTagValue *string `pulumi:"resourceTagValue"`
}

// RuleResourceTagInput is an input type that accepts RuleResourceTagArgs and RuleResourceTagOutput values.
// You can construct a concrete instance of `RuleResourceTagInput` via:
//
//	RuleResourceTagArgs{...}
type RuleResourceTagInput interface {
	pulumi.Input

	ToRuleResourceTagOutput() RuleResourceTagOutput
	ToRuleResourceTagOutputWithContext(context.Context) RuleResourceTagOutput
}

type RuleResourceTagArgs struct {
	// The tag key.
	//
	// The following argument is optional:
	ResourceTagKey pulumi.StringInput `pulumi:"resourceTagKey"`
	// The tag value.
	ResourceTagValue pulumi.StringPtrInput `pulumi:"resourceTagValue"`
}

func (RuleResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResourceTag)(nil)).Elem()
}

func (i RuleResourceTagArgs) ToRuleResourceTagOutput() RuleResourceTagOutput {
	return i.ToRuleResourceTagOutputWithContext(context.Background())
}

func (i RuleResourceTagArgs) ToRuleResourceTagOutputWithContext(ctx context.Context) RuleResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleResourceTagOutput)
}

// RuleResourceTagArrayInput is an input type that accepts RuleResourceTagArray and RuleResourceTagArrayOutput values.
// You can construct a concrete instance of `RuleResourceTagArrayInput` via:
//
//	RuleResourceTagArray{ RuleResourceTagArgs{...} }
type RuleResourceTagArrayInput interface {
	pulumi.Input

	ToRuleResourceTagArrayOutput() RuleResourceTagArrayOutput
	ToRuleResourceTagArrayOutputWithContext(context.Context) RuleResourceTagArrayOutput
}

type RuleResourceTagArray []RuleResourceTagInput

func (RuleResourceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleResourceTag)(nil)).Elem()
}

func (i RuleResourceTagArray) ToRuleResourceTagArrayOutput() RuleResourceTagArrayOutput {
	return i.ToRuleResourceTagArrayOutputWithContext(context.Background())
}

func (i RuleResourceTagArray) ToRuleResourceTagArrayOutputWithContext(ctx context.Context) RuleResourceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleResourceTagArrayOutput)
}

type RuleResourceTagOutput struct{ *pulumi.OutputState }

func (RuleResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResourceTag)(nil)).Elem()
}

func (o RuleResourceTagOutput) ToRuleResourceTagOutput() RuleResourceTagOutput {
	return o
}

func (o RuleResourceTagOutput) ToRuleResourceTagOutputWithContext(ctx context.Context) RuleResourceTagOutput {
	return o
}

// The tag key.
//
// The following argument is optional:
func (o RuleResourceTagOutput) ResourceTagKey() pulumi.StringOutput {
	return o.ApplyT(func(v RuleResourceTag) string { return v.ResourceTagKey }).(pulumi.StringOutput)
}

// The tag value.
func (o RuleResourceTagOutput) ResourceTagValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleResourceTag) *string { return v.ResourceTagValue }).(pulumi.StringPtrOutput)
}

type RuleResourceTagArrayOutput struct{ *pulumi.OutputState }

func (RuleResourceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleResourceTag)(nil)).Elem()
}

func (o RuleResourceTagArrayOutput) ToRuleResourceTagArrayOutput() RuleResourceTagArrayOutput {
	return o
}

func (o RuleResourceTagArrayOutput) ToRuleResourceTagArrayOutputWithContext(ctx context.Context) RuleResourceTagArrayOutput {
	return o
}

func (o RuleResourceTagArrayOutput) Index(i pulumi.IntInput) RuleResourceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleResourceTag {
		return vs[0].([]RuleResourceTag)[vs[1].(int)]
	}).(RuleResourceTagOutput)
}

type RuleRetentionPeriod struct {
	// The unit of time in which the retention period is measured. Currently, only DAYS is supported.
	RetentionPeriodUnit string `pulumi:"retentionPeriodUnit"`
	// The period value for which the retention rule is to retain resources. The period is measured using the unit specified for RetentionPeriodUnit.
	RetentionPeriodValue int `pulumi:"retentionPeriodValue"`
}

// RuleRetentionPeriodInput is an input type that accepts RuleRetentionPeriodArgs and RuleRetentionPeriodOutput values.
// You can construct a concrete instance of `RuleRetentionPeriodInput` via:
//
//	RuleRetentionPeriodArgs{...}
type RuleRetentionPeriodInput interface {
	pulumi.Input

	ToRuleRetentionPeriodOutput() RuleRetentionPeriodOutput
	ToRuleRetentionPeriodOutputWithContext(context.Context) RuleRetentionPeriodOutput
}

type RuleRetentionPeriodArgs struct {
	// The unit of time in which the retention period is measured. Currently, only DAYS is supported.
	RetentionPeriodUnit pulumi.StringInput `pulumi:"retentionPeriodUnit"`
	// The period value for which the retention rule is to retain resources. The period is measured using the unit specified for RetentionPeriodUnit.
	RetentionPeriodValue pulumi.IntInput `pulumi:"retentionPeriodValue"`
}

func (RuleRetentionPeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRetentionPeriod)(nil)).Elem()
}

func (i RuleRetentionPeriodArgs) ToRuleRetentionPeriodOutput() RuleRetentionPeriodOutput {
	return i.ToRuleRetentionPeriodOutputWithContext(context.Background())
}

func (i RuleRetentionPeriodArgs) ToRuleRetentionPeriodOutputWithContext(ctx context.Context) RuleRetentionPeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRetentionPeriodOutput)
}

func (i RuleRetentionPeriodArgs) ToRuleRetentionPeriodPtrOutput() RuleRetentionPeriodPtrOutput {
	return i.ToRuleRetentionPeriodPtrOutputWithContext(context.Background())
}

func (i RuleRetentionPeriodArgs) ToRuleRetentionPeriodPtrOutputWithContext(ctx context.Context) RuleRetentionPeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRetentionPeriodOutput).ToRuleRetentionPeriodPtrOutputWithContext(ctx)
}

// RuleRetentionPeriodPtrInput is an input type that accepts RuleRetentionPeriodArgs, RuleRetentionPeriodPtr and RuleRetentionPeriodPtrOutput values.
// You can construct a concrete instance of `RuleRetentionPeriodPtrInput` via:
//
//	        RuleRetentionPeriodArgs{...}
//
//	or:
//
//	        nil
type RuleRetentionPeriodPtrInput interface {
	pulumi.Input

	ToRuleRetentionPeriodPtrOutput() RuleRetentionPeriodPtrOutput
	ToRuleRetentionPeriodPtrOutputWithContext(context.Context) RuleRetentionPeriodPtrOutput
}

type ruleRetentionPeriodPtrType RuleRetentionPeriodArgs

func RuleRetentionPeriodPtr(v *RuleRetentionPeriodArgs) RuleRetentionPeriodPtrInput {
	return (*ruleRetentionPeriodPtrType)(v)
}

func (*ruleRetentionPeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRetentionPeriod)(nil)).Elem()
}

func (i *ruleRetentionPeriodPtrType) ToRuleRetentionPeriodPtrOutput() RuleRetentionPeriodPtrOutput {
	return i.ToRuleRetentionPeriodPtrOutputWithContext(context.Background())
}

func (i *ruleRetentionPeriodPtrType) ToRuleRetentionPeriodPtrOutputWithContext(ctx context.Context) RuleRetentionPeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRetentionPeriodPtrOutput)
}

type RuleRetentionPeriodOutput struct{ *pulumi.OutputState }

func (RuleRetentionPeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRetentionPeriod)(nil)).Elem()
}

func (o RuleRetentionPeriodOutput) ToRuleRetentionPeriodOutput() RuleRetentionPeriodOutput {
	return o
}

func (o RuleRetentionPeriodOutput) ToRuleRetentionPeriodOutputWithContext(ctx context.Context) RuleRetentionPeriodOutput {
	return o
}

func (o RuleRetentionPeriodOutput) ToRuleRetentionPeriodPtrOutput() RuleRetentionPeriodPtrOutput {
	return o.ToRuleRetentionPeriodPtrOutputWithContext(context.Background())
}

func (o RuleRetentionPeriodOutput) ToRuleRetentionPeriodPtrOutputWithContext(ctx context.Context) RuleRetentionPeriodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleRetentionPeriod) *RuleRetentionPeriod {
		return &v
	}).(RuleRetentionPeriodPtrOutput)
}

// The unit of time in which the retention period is measured. Currently, only DAYS is supported.
func (o RuleRetentionPeriodOutput) RetentionPeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v RuleRetentionPeriod) string { return v.RetentionPeriodUnit }).(pulumi.StringOutput)
}

// The period value for which the retention rule is to retain resources. The period is measured using the unit specified for RetentionPeriodUnit.
func (o RuleRetentionPeriodOutput) RetentionPeriodValue() pulumi.IntOutput {
	return o.ApplyT(func(v RuleRetentionPeriod) int { return v.RetentionPeriodValue }).(pulumi.IntOutput)
}

type RuleRetentionPeriodPtrOutput struct{ *pulumi.OutputState }

func (RuleRetentionPeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRetentionPeriod)(nil)).Elem()
}

func (o RuleRetentionPeriodPtrOutput) ToRuleRetentionPeriodPtrOutput() RuleRetentionPeriodPtrOutput {
	return o
}

func (o RuleRetentionPeriodPtrOutput) ToRuleRetentionPeriodPtrOutputWithContext(ctx context.Context) RuleRetentionPeriodPtrOutput {
	return o
}

func (o RuleRetentionPeriodPtrOutput) Elem() RuleRetentionPeriodOutput {
	return o.ApplyT(func(v *RuleRetentionPeriod) RuleRetentionPeriod {
		if v != nil {
			return *v
		}
		var ret RuleRetentionPeriod
		return ret
	}).(RuleRetentionPeriodOutput)
}

// The unit of time in which the retention period is measured. Currently, only DAYS is supported.
func (o RuleRetentionPeriodPtrOutput) RetentionPeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRetentionPeriod) *string {
		if v == nil {
			return nil
		}
		return &v.RetentionPeriodUnit
	}).(pulumi.StringPtrOutput)
}

// The period value for which the retention rule is to retain resources. The period is measured using the unit specified for RetentionPeriodUnit.
func (o RuleRetentionPeriodPtrOutput) RetentionPeriodValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleRetentionPeriod) *int {
		if v == nil {
			return nil
		}
		return &v.RetentionPeriodValue
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleLockConfigurationInput)(nil)).Elem(), RuleLockConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleLockConfigurationPtrInput)(nil)).Elem(), RuleLockConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleLockConfigurationUnlockDelayInput)(nil)).Elem(), RuleLockConfigurationUnlockDelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleLockConfigurationUnlockDelayPtrInput)(nil)).Elem(), RuleLockConfigurationUnlockDelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleResourceTagInput)(nil)).Elem(), RuleResourceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleResourceTagArrayInput)(nil)).Elem(), RuleResourceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRetentionPeriodInput)(nil)).Elem(), RuleRetentionPeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRetentionPeriodPtrInput)(nil)).Elem(), RuleRetentionPeriodArgs{})
	pulumi.RegisterOutputType(RuleLockConfigurationOutput{})
	pulumi.RegisterOutputType(RuleLockConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RuleLockConfigurationUnlockDelayOutput{})
	pulumi.RegisterOutputType(RuleLockConfigurationUnlockDelayPtrOutput{})
	pulumi.RegisterOutputType(RuleResourceTagOutput{})
	pulumi.RegisterOutputType(RuleResourceTagArrayOutput{})
	pulumi.RegisterOutputType(RuleRetentionPeriodOutput{})
	pulumi.RegisterOutputType(RuleRetentionPeriodPtrOutput{})
}
