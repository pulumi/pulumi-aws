// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accessanalyzer

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Analyzer struct {
	pulumi.CustomResourceState

	AnalyzerName pulumi.StringOutput    `pulumi:"analyzerName"`
	Arn          pulumi.StringOutput    `pulumi:"arn"`
	Tags         pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll      pulumi.StringMapOutput `pulumi:"tagsAll"`
	Type         pulumi.StringPtrOutput `pulumi:"type"`
}

// NewAnalyzer registers a new resource with the given unique name, arguments, and options.
func NewAnalyzer(ctx *pulumi.Context,
	name string, args *AnalyzerArgs, opts ...pulumi.ResourceOption) (*Analyzer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnalyzerName == nil {
		return nil, errors.New("invalid value for required argument 'AnalyzerName'")
	}
	var resource Analyzer
	err := ctx.RegisterResource("aws:accessanalyzer/analyzer:Analyzer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyzer gets an existing Analyzer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyzer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyzerState, opts ...pulumi.ResourceOption) (*Analyzer, error) {
	var resource Analyzer
	err := ctx.ReadResource("aws:accessanalyzer/analyzer:Analyzer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Analyzer resources.
type analyzerState struct {
	AnalyzerName *string           `pulumi:"analyzerName"`
	Arn          *string           `pulumi:"arn"`
	Tags         map[string]string `pulumi:"tags"`
	TagsAll      map[string]string `pulumi:"tagsAll"`
	Type         *string           `pulumi:"type"`
}

type AnalyzerState struct {
	AnalyzerName pulumi.StringPtrInput
	Arn          pulumi.StringPtrInput
	Tags         pulumi.StringMapInput
	TagsAll      pulumi.StringMapInput
	Type         pulumi.StringPtrInput
}

func (AnalyzerState) ElementType() reflect.Type {
	return reflect.TypeOf((*analyzerState)(nil)).Elem()
}

type analyzerArgs struct {
	AnalyzerName string            `pulumi:"analyzerName"`
	Tags         map[string]string `pulumi:"tags"`
	Type         *string           `pulumi:"type"`
}

// The set of arguments for constructing a Analyzer resource.
type AnalyzerArgs struct {
	AnalyzerName pulumi.StringInput
	Tags         pulumi.StringMapInput
	Type         pulumi.StringPtrInput
}

func (AnalyzerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analyzerArgs)(nil)).Elem()
}

type AnalyzerInput interface {
	pulumi.Input

	ToAnalyzerOutput() AnalyzerOutput
	ToAnalyzerOutputWithContext(ctx context.Context) AnalyzerOutput
}

func (*Analyzer) ElementType() reflect.Type {
	return reflect.TypeOf((**Analyzer)(nil)).Elem()
}

func (i *Analyzer) ToAnalyzerOutput() AnalyzerOutput {
	return i.ToAnalyzerOutputWithContext(context.Background())
}

func (i *Analyzer) ToAnalyzerOutputWithContext(ctx context.Context) AnalyzerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerOutput)
}

// AnalyzerArrayInput is an input type that accepts AnalyzerArray and AnalyzerArrayOutput values.
// You can construct a concrete instance of `AnalyzerArrayInput` via:
//
//	AnalyzerArray{ AnalyzerArgs{...} }
type AnalyzerArrayInput interface {
	pulumi.Input

	ToAnalyzerArrayOutput() AnalyzerArrayOutput
	ToAnalyzerArrayOutputWithContext(context.Context) AnalyzerArrayOutput
}

type AnalyzerArray []AnalyzerInput

func (AnalyzerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Analyzer)(nil)).Elem()
}

func (i AnalyzerArray) ToAnalyzerArrayOutput() AnalyzerArrayOutput {
	return i.ToAnalyzerArrayOutputWithContext(context.Background())
}

func (i AnalyzerArray) ToAnalyzerArrayOutputWithContext(ctx context.Context) AnalyzerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerArrayOutput)
}

// AnalyzerMapInput is an input type that accepts AnalyzerMap and AnalyzerMapOutput values.
// You can construct a concrete instance of `AnalyzerMapInput` via:
//
//	AnalyzerMap{ "key": AnalyzerArgs{...} }
type AnalyzerMapInput interface {
	pulumi.Input

	ToAnalyzerMapOutput() AnalyzerMapOutput
	ToAnalyzerMapOutputWithContext(context.Context) AnalyzerMapOutput
}

type AnalyzerMap map[string]AnalyzerInput

func (AnalyzerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Analyzer)(nil)).Elem()
}

func (i AnalyzerMap) ToAnalyzerMapOutput() AnalyzerMapOutput {
	return i.ToAnalyzerMapOutputWithContext(context.Background())
}

func (i AnalyzerMap) ToAnalyzerMapOutputWithContext(ctx context.Context) AnalyzerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerMapOutput)
}

type AnalyzerOutput struct{ *pulumi.OutputState }

func (AnalyzerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Analyzer)(nil)).Elem()
}

func (o AnalyzerOutput) ToAnalyzerOutput() AnalyzerOutput {
	return o
}

func (o AnalyzerOutput) ToAnalyzerOutputWithContext(ctx context.Context) AnalyzerOutput {
	return o
}

func (o AnalyzerOutput) AnalyzerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Analyzer) pulumi.StringOutput { return v.AnalyzerName }).(pulumi.StringOutput)
}

func (o AnalyzerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Analyzer) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o AnalyzerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Analyzer) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o AnalyzerOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Analyzer) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o AnalyzerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Analyzer) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type AnalyzerArrayOutput struct{ *pulumi.OutputState }

func (AnalyzerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Analyzer)(nil)).Elem()
}

func (o AnalyzerArrayOutput) ToAnalyzerArrayOutput() AnalyzerArrayOutput {
	return o
}

func (o AnalyzerArrayOutput) ToAnalyzerArrayOutputWithContext(ctx context.Context) AnalyzerArrayOutput {
	return o
}

func (o AnalyzerArrayOutput) Index(i pulumi.IntInput) AnalyzerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Analyzer {
		return vs[0].([]*Analyzer)[vs[1].(int)]
	}).(AnalyzerOutput)
}

type AnalyzerMapOutput struct{ *pulumi.OutputState }

func (AnalyzerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Analyzer)(nil)).Elem()
}

func (o AnalyzerMapOutput) ToAnalyzerMapOutput() AnalyzerMapOutput {
	return o
}

func (o AnalyzerMapOutput) ToAnalyzerMapOutputWithContext(ctx context.Context) AnalyzerMapOutput {
	return o
}

func (o AnalyzerMapOutput) MapIndex(k pulumi.StringInput) AnalyzerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Analyzer {
		return vs[0].(map[string]*Analyzer)[vs[1].(string)]
	}).(AnalyzerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerInput)(nil)).Elem(), &Analyzer{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerArrayInput)(nil)).Elem(), AnalyzerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerMapInput)(nil)).Elem(), AnalyzerMap{})
	pulumi.RegisterOutputType(AnalyzerOutput{})
	pulumi.RegisterOutputType(AnalyzerArrayOutput{})
	pulumi.RegisterOutputType(AnalyzerMapOutput{})
}
