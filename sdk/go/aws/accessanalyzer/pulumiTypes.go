// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accessanalyzer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AnalyzerConfiguration struct {
	// Specifies the configuration of an internal access analyzer for an AWS organization or account. This configuration determines how the analyzer evaluates access within your AWS environment. See `internalAccess` Block for details.
	InternalAccess *AnalyzerConfigurationInternalAccess `pulumi:"internalAccess"`
	// Specifies the configuration of an unused access analyzer for an AWS organization or account. See `unusedAccess` Block for details.
	UnusedAccess *AnalyzerConfigurationUnusedAccess `pulumi:"unusedAccess"`
}

// AnalyzerConfigurationInput is an input type that accepts AnalyzerConfigurationArgs and AnalyzerConfigurationOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationInput` via:
//
//	AnalyzerConfigurationArgs{...}
type AnalyzerConfigurationInput interface {
	pulumi.Input

	ToAnalyzerConfigurationOutput() AnalyzerConfigurationOutput
	ToAnalyzerConfigurationOutputWithContext(context.Context) AnalyzerConfigurationOutput
}

type AnalyzerConfigurationArgs struct {
	// Specifies the configuration of an internal access analyzer for an AWS organization or account. This configuration determines how the analyzer evaluates access within your AWS environment. See `internalAccess` Block for details.
	InternalAccess AnalyzerConfigurationInternalAccessPtrInput `pulumi:"internalAccess"`
	// Specifies the configuration of an unused access analyzer for an AWS organization or account. See `unusedAccess` Block for details.
	UnusedAccess AnalyzerConfigurationUnusedAccessPtrInput `pulumi:"unusedAccess"`
}

func (AnalyzerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfiguration)(nil)).Elem()
}

func (i AnalyzerConfigurationArgs) ToAnalyzerConfigurationOutput() AnalyzerConfigurationOutput {
	return i.ToAnalyzerConfigurationOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationArgs) ToAnalyzerConfigurationOutputWithContext(ctx context.Context) AnalyzerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationOutput)
}

func (i AnalyzerConfigurationArgs) ToAnalyzerConfigurationPtrOutput() AnalyzerConfigurationPtrOutput {
	return i.ToAnalyzerConfigurationPtrOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationArgs) ToAnalyzerConfigurationPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationOutput).ToAnalyzerConfigurationPtrOutputWithContext(ctx)
}

// AnalyzerConfigurationPtrInput is an input type that accepts AnalyzerConfigurationArgs, AnalyzerConfigurationPtr and AnalyzerConfigurationPtrOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationPtrInput` via:
//
//	        AnalyzerConfigurationArgs{...}
//
//	or:
//
//	        nil
type AnalyzerConfigurationPtrInput interface {
	pulumi.Input

	ToAnalyzerConfigurationPtrOutput() AnalyzerConfigurationPtrOutput
	ToAnalyzerConfigurationPtrOutputWithContext(context.Context) AnalyzerConfigurationPtrOutput
}

type analyzerConfigurationPtrType AnalyzerConfigurationArgs

func AnalyzerConfigurationPtr(v *AnalyzerConfigurationArgs) AnalyzerConfigurationPtrInput {
	return (*analyzerConfigurationPtrType)(v)
}

func (*analyzerConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyzerConfiguration)(nil)).Elem()
}

func (i *analyzerConfigurationPtrType) ToAnalyzerConfigurationPtrOutput() AnalyzerConfigurationPtrOutput {
	return i.ToAnalyzerConfigurationPtrOutputWithContext(context.Background())
}

func (i *analyzerConfigurationPtrType) ToAnalyzerConfigurationPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationPtrOutput)
}

type AnalyzerConfigurationOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfiguration)(nil)).Elem()
}

func (o AnalyzerConfigurationOutput) ToAnalyzerConfigurationOutput() AnalyzerConfigurationOutput {
	return o
}

func (o AnalyzerConfigurationOutput) ToAnalyzerConfigurationOutputWithContext(ctx context.Context) AnalyzerConfigurationOutput {
	return o
}

func (o AnalyzerConfigurationOutput) ToAnalyzerConfigurationPtrOutput() AnalyzerConfigurationPtrOutput {
	return o.ToAnalyzerConfigurationPtrOutputWithContext(context.Background())
}

func (o AnalyzerConfigurationOutput) ToAnalyzerConfigurationPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalyzerConfiguration) *AnalyzerConfiguration {
		return &v
	}).(AnalyzerConfigurationPtrOutput)
}

// Specifies the configuration of an internal access analyzer for an AWS organization or account. This configuration determines how the analyzer evaluates access within your AWS environment. See `internalAccess` Block for details.
func (o AnalyzerConfigurationOutput) InternalAccess() AnalyzerConfigurationInternalAccessPtrOutput {
	return o.ApplyT(func(v AnalyzerConfiguration) *AnalyzerConfigurationInternalAccess { return v.InternalAccess }).(AnalyzerConfigurationInternalAccessPtrOutput)
}

// Specifies the configuration of an unused access analyzer for an AWS organization or account. See `unusedAccess` Block for details.
func (o AnalyzerConfigurationOutput) UnusedAccess() AnalyzerConfigurationUnusedAccessPtrOutput {
	return o.ApplyT(func(v AnalyzerConfiguration) *AnalyzerConfigurationUnusedAccess { return v.UnusedAccess }).(AnalyzerConfigurationUnusedAccessPtrOutput)
}

type AnalyzerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyzerConfiguration)(nil)).Elem()
}

func (o AnalyzerConfigurationPtrOutput) ToAnalyzerConfigurationPtrOutput() AnalyzerConfigurationPtrOutput {
	return o
}

func (o AnalyzerConfigurationPtrOutput) ToAnalyzerConfigurationPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationPtrOutput {
	return o
}

func (o AnalyzerConfigurationPtrOutput) Elem() AnalyzerConfigurationOutput {
	return o.ApplyT(func(v *AnalyzerConfiguration) AnalyzerConfiguration {
		if v != nil {
			return *v
		}
		var ret AnalyzerConfiguration
		return ret
	}).(AnalyzerConfigurationOutput)
}

// Specifies the configuration of an internal access analyzer for an AWS organization or account. This configuration determines how the analyzer evaluates access within your AWS environment. See `internalAccess` Block for details.
func (o AnalyzerConfigurationPtrOutput) InternalAccess() AnalyzerConfigurationInternalAccessPtrOutput {
	return o.ApplyT(func(v *AnalyzerConfiguration) *AnalyzerConfigurationInternalAccess {
		if v == nil {
			return nil
		}
		return v.InternalAccess
	}).(AnalyzerConfigurationInternalAccessPtrOutput)
}

// Specifies the configuration of an unused access analyzer for an AWS organization or account. See `unusedAccess` Block for details.
func (o AnalyzerConfigurationPtrOutput) UnusedAccess() AnalyzerConfigurationUnusedAccessPtrOutput {
	return o.ApplyT(func(v *AnalyzerConfiguration) *AnalyzerConfigurationUnusedAccess {
		if v == nil {
			return nil
		}
		return v.UnusedAccess
	}).(AnalyzerConfigurationUnusedAccessPtrOutput)
}

type AnalyzerConfigurationInternalAccess struct {
	// Information about analysis rules for the internal access analyzer. These rules determine which resources and access patterns will be analyzed. See `analysisRule` Block for Internal Access Analyzer for details.
	AnalysisRule *AnalyzerConfigurationInternalAccessAnalysisRule `pulumi:"analysisRule"`
}

// AnalyzerConfigurationInternalAccessInput is an input type that accepts AnalyzerConfigurationInternalAccessArgs and AnalyzerConfigurationInternalAccessOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationInternalAccessInput` via:
//
//	AnalyzerConfigurationInternalAccessArgs{...}
type AnalyzerConfigurationInternalAccessInput interface {
	pulumi.Input

	ToAnalyzerConfigurationInternalAccessOutput() AnalyzerConfigurationInternalAccessOutput
	ToAnalyzerConfigurationInternalAccessOutputWithContext(context.Context) AnalyzerConfigurationInternalAccessOutput
}

type AnalyzerConfigurationInternalAccessArgs struct {
	// Information about analysis rules for the internal access analyzer. These rules determine which resources and access patterns will be analyzed. See `analysisRule` Block for Internal Access Analyzer for details.
	AnalysisRule AnalyzerConfigurationInternalAccessAnalysisRulePtrInput `pulumi:"analysisRule"`
}

func (AnalyzerConfigurationInternalAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationInternalAccess)(nil)).Elem()
}

func (i AnalyzerConfigurationInternalAccessArgs) ToAnalyzerConfigurationInternalAccessOutput() AnalyzerConfigurationInternalAccessOutput {
	return i.ToAnalyzerConfigurationInternalAccessOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationInternalAccessArgs) ToAnalyzerConfigurationInternalAccessOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationInternalAccessOutput)
}

func (i AnalyzerConfigurationInternalAccessArgs) ToAnalyzerConfigurationInternalAccessPtrOutput() AnalyzerConfigurationInternalAccessPtrOutput {
	return i.ToAnalyzerConfigurationInternalAccessPtrOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationInternalAccessArgs) ToAnalyzerConfigurationInternalAccessPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationInternalAccessOutput).ToAnalyzerConfigurationInternalAccessPtrOutputWithContext(ctx)
}

// AnalyzerConfigurationInternalAccessPtrInput is an input type that accepts AnalyzerConfigurationInternalAccessArgs, AnalyzerConfigurationInternalAccessPtr and AnalyzerConfigurationInternalAccessPtrOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationInternalAccessPtrInput` via:
//
//	        AnalyzerConfigurationInternalAccessArgs{...}
//
//	or:
//
//	        nil
type AnalyzerConfigurationInternalAccessPtrInput interface {
	pulumi.Input

	ToAnalyzerConfigurationInternalAccessPtrOutput() AnalyzerConfigurationInternalAccessPtrOutput
	ToAnalyzerConfigurationInternalAccessPtrOutputWithContext(context.Context) AnalyzerConfigurationInternalAccessPtrOutput
}

type analyzerConfigurationInternalAccessPtrType AnalyzerConfigurationInternalAccessArgs

func AnalyzerConfigurationInternalAccessPtr(v *AnalyzerConfigurationInternalAccessArgs) AnalyzerConfigurationInternalAccessPtrInput {
	return (*analyzerConfigurationInternalAccessPtrType)(v)
}

func (*analyzerConfigurationInternalAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyzerConfigurationInternalAccess)(nil)).Elem()
}

func (i *analyzerConfigurationInternalAccessPtrType) ToAnalyzerConfigurationInternalAccessPtrOutput() AnalyzerConfigurationInternalAccessPtrOutput {
	return i.ToAnalyzerConfigurationInternalAccessPtrOutputWithContext(context.Background())
}

func (i *analyzerConfigurationInternalAccessPtrType) ToAnalyzerConfigurationInternalAccessPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationInternalAccessPtrOutput)
}

type AnalyzerConfigurationInternalAccessOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationInternalAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationInternalAccess)(nil)).Elem()
}

func (o AnalyzerConfigurationInternalAccessOutput) ToAnalyzerConfigurationInternalAccessOutput() AnalyzerConfigurationInternalAccessOutput {
	return o
}

func (o AnalyzerConfigurationInternalAccessOutput) ToAnalyzerConfigurationInternalAccessOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessOutput {
	return o
}

func (o AnalyzerConfigurationInternalAccessOutput) ToAnalyzerConfigurationInternalAccessPtrOutput() AnalyzerConfigurationInternalAccessPtrOutput {
	return o.ToAnalyzerConfigurationInternalAccessPtrOutputWithContext(context.Background())
}

func (o AnalyzerConfigurationInternalAccessOutput) ToAnalyzerConfigurationInternalAccessPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalyzerConfigurationInternalAccess) *AnalyzerConfigurationInternalAccess {
		return &v
	}).(AnalyzerConfigurationInternalAccessPtrOutput)
}

// Information about analysis rules for the internal access analyzer. These rules determine which resources and access patterns will be analyzed. See `analysisRule` Block for Internal Access Analyzer for details.
func (o AnalyzerConfigurationInternalAccessOutput) AnalysisRule() AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput {
	return o.ApplyT(func(v AnalyzerConfigurationInternalAccess) *AnalyzerConfigurationInternalAccessAnalysisRule {
		return v.AnalysisRule
	}).(AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput)
}

type AnalyzerConfigurationInternalAccessPtrOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationInternalAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyzerConfigurationInternalAccess)(nil)).Elem()
}

func (o AnalyzerConfigurationInternalAccessPtrOutput) ToAnalyzerConfigurationInternalAccessPtrOutput() AnalyzerConfigurationInternalAccessPtrOutput {
	return o
}

func (o AnalyzerConfigurationInternalAccessPtrOutput) ToAnalyzerConfigurationInternalAccessPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessPtrOutput {
	return o
}

func (o AnalyzerConfigurationInternalAccessPtrOutput) Elem() AnalyzerConfigurationInternalAccessOutput {
	return o.ApplyT(func(v *AnalyzerConfigurationInternalAccess) AnalyzerConfigurationInternalAccess {
		if v != nil {
			return *v
		}
		var ret AnalyzerConfigurationInternalAccess
		return ret
	}).(AnalyzerConfigurationInternalAccessOutput)
}

// Information about analysis rules for the internal access analyzer. These rules determine which resources and access patterns will be analyzed. See `analysisRule` Block for Internal Access Analyzer for details.
func (o AnalyzerConfigurationInternalAccessPtrOutput) AnalysisRule() AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput {
	return o.ApplyT(func(v *AnalyzerConfigurationInternalAccess) *AnalyzerConfigurationInternalAccessAnalysisRule {
		if v == nil {
			return nil
		}
		return v.AnalysisRule
	}).(AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput)
}

type AnalyzerConfigurationInternalAccessAnalysisRule struct {
	// List of rules for the internal access analyzer containing criteria to include in analysis. Only resources that meet the rule criteria will generate findings. See `inclusion` Block for details.
	Inclusions []AnalyzerConfigurationInternalAccessAnalysisRuleInclusion `pulumi:"inclusions"`
}

// AnalyzerConfigurationInternalAccessAnalysisRuleInput is an input type that accepts AnalyzerConfigurationInternalAccessAnalysisRuleArgs and AnalyzerConfigurationInternalAccessAnalysisRuleOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationInternalAccessAnalysisRuleInput` via:
//
//	AnalyzerConfigurationInternalAccessAnalysisRuleArgs{...}
type AnalyzerConfigurationInternalAccessAnalysisRuleInput interface {
	pulumi.Input

	ToAnalyzerConfigurationInternalAccessAnalysisRuleOutput() AnalyzerConfigurationInternalAccessAnalysisRuleOutput
	ToAnalyzerConfigurationInternalAccessAnalysisRuleOutputWithContext(context.Context) AnalyzerConfigurationInternalAccessAnalysisRuleOutput
}

type AnalyzerConfigurationInternalAccessAnalysisRuleArgs struct {
	// List of rules for the internal access analyzer containing criteria to include in analysis. Only resources that meet the rule criteria will generate findings. See `inclusion` Block for details.
	Inclusions AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayInput `pulumi:"inclusions"`
}

func (AnalyzerConfigurationInternalAccessAnalysisRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationInternalAccessAnalysisRule)(nil)).Elem()
}

func (i AnalyzerConfigurationInternalAccessAnalysisRuleArgs) ToAnalyzerConfigurationInternalAccessAnalysisRuleOutput() AnalyzerConfigurationInternalAccessAnalysisRuleOutput {
	return i.ToAnalyzerConfigurationInternalAccessAnalysisRuleOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationInternalAccessAnalysisRuleArgs) ToAnalyzerConfigurationInternalAccessAnalysisRuleOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessAnalysisRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationInternalAccessAnalysisRuleOutput)
}

func (i AnalyzerConfigurationInternalAccessAnalysisRuleArgs) ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutput() AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput {
	return i.ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationInternalAccessAnalysisRuleArgs) ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationInternalAccessAnalysisRuleOutput).ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutputWithContext(ctx)
}

// AnalyzerConfigurationInternalAccessAnalysisRulePtrInput is an input type that accepts AnalyzerConfigurationInternalAccessAnalysisRuleArgs, AnalyzerConfigurationInternalAccessAnalysisRulePtr and AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationInternalAccessAnalysisRulePtrInput` via:
//
//	        AnalyzerConfigurationInternalAccessAnalysisRuleArgs{...}
//
//	or:
//
//	        nil
type AnalyzerConfigurationInternalAccessAnalysisRulePtrInput interface {
	pulumi.Input

	ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutput() AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput
	ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutputWithContext(context.Context) AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput
}

type analyzerConfigurationInternalAccessAnalysisRulePtrType AnalyzerConfigurationInternalAccessAnalysisRuleArgs

func AnalyzerConfigurationInternalAccessAnalysisRulePtr(v *AnalyzerConfigurationInternalAccessAnalysisRuleArgs) AnalyzerConfigurationInternalAccessAnalysisRulePtrInput {
	return (*analyzerConfigurationInternalAccessAnalysisRulePtrType)(v)
}

func (*analyzerConfigurationInternalAccessAnalysisRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyzerConfigurationInternalAccessAnalysisRule)(nil)).Elem()
}

func (i *analyzerConfigurationInternalAccessAnalysisRulePtrType) ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutput() AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput {
	return i.ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutputWithContext(context.Background())
}

func (i *analyzerConfigurationInternalAccessAnalysisRulePtrType) ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput)
}

type AnalyzerConfigurationInternalAccessAnalysisRuleOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationInternalAccessAnalysisRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationInternalAccessAnalysisRule)(nil)).Elem()
}

func (o AnalyzerConfigurationInternalAccessAnalysisRuleOutput) ToAnalyzerConfigurationInternalAccessAnalysisRuleOutput() AnalyzerConfigurationInternalAccessAnalysisRuleOutput {
	return o
}

func (o AnalyzerConfigurationInternalAccessAnalysisRuleOutput) ToAnalyzerConfigurationInternalAccessAnalysisRuleOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessAnalysisRuleOutput {
	return o
}

func (o AnalyzerConfigurationInternalAccessAnalysisRuleOutput) ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutput() AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput {
	return o.ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutputWithContext(context.Background())
}

func (o AnalyzerConfigurationInternalAccessAnalysisRuleOutput) ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalyzerConfigurationInternalAccessAnalysisRule) *AnalyzerConfigurationInternalAccessAnalysisRule {
		return &v
	}).(AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput)
}

// List of rules for the internal access analyzer containing criteria to include in analysis. Only resources that meet the rule criteria will generate findings. See `inclusion` Block for details.
func (o AnalyzerConfigurationInternalAccessAnalysisRuleOutput) Inclusions() AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput {
	return o.ApplyT(func(v AnalyzerConfigurationInternalAccessAnalysisRule) []AnalyzerConfigurationInternalAccessAnalysisRuleInclusion {
		return v.Inclusions
	}).(AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput)
}

type AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyzerConfigurationInternalAccessAnalysisRule)(nil)).Elem()
}

func (o AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput) ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutput() AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput {
	return o
}

func (o AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput) ToAnalyzerConfigurationInternalAccessAnalysisRulePtrOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput {
	return o
}

func (o AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput) Elem() AnalyzerConfigurationInternalAccessAnalysisRuleOutput {
	return o.ApplyT(func(v *AnalyzerConfigurationInternalAccessAnalysisRule) AnalyzerConfigurationInternalAccessAnalysisRule {
		if v != nil {
			return *v
		}
		var ret AnalyzerConfigurationInternalAccessAnalysisRule
		return ret
	}).(AnalyzerConfigurationInternalAccessAnalysisRuleOutput)
}

// List of rules for the internal access analyzer containing criteria to include in analysis. Only resources that meet the rule criteria will generate findings. See `inclusion` Block for details.
func (o AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput) Inclusions() AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput {
	return o.ApplyT(func(v *AnalyzerConfigurationInternalAccessAnalysisRule) []AnalyzerConfigurationInternalAccessAnalysisRuleInclusion {
		if v == nil {
			return nil
		}
		return v.Inclusions
	}).(AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput)
}

type AnalyzerConfigurationInternalAccessAnalysisRuleInclusion struct {
	// List of AWS account IDs to apply to the internal access analysis rule criteria. Account IDs can only be applied to the analysis rule criteria for organization-level analyzers.
	AccountIds []string `pulumi:"accountIds"`
	// List of resource ARNs to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources that match these ARNs.
	ResourceArns []string `pulumi:"resourceArns"`
	// List of resource types to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources of these types. Refer to [InternalAccessAnalysisRuleCriteria](https://docs.aws.amazon.com/access-analyzer/latest/APIReference/API_InternalAccessAnalysisRuleCriteria.html) in the AWS IAM Access Analyzer API Reference for valid values.
	ResourceTypes []string `pulumi:"resourceTypes"`
}

// AnalyzerConfigurationInternalAccessAnalysisRuleInclusionInput is an input type that accepts AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArgs and AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationInternalAccessAnalysisRuleInclusionInput` via:
//
//	AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArgs{...}
type AnalyzerConfigurationInternalAccessAnalysisRuleInclusionInput interface {
	pulumi.Input

	ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput() AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput
	ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutputWithContext(context.Context) AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput
}

type AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArgs struct {
	// List of AWS account IDs to apply to the internal access analysis rule criteria. Account IDs can only be applied to the analysis rule criteria for organization-level analyzers.
	AccountIds pulumi.StringArrayInput `pulumi:"accountIds"`
	// List of resource ARNs to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources that match these ARNs.
	ResourceArns pulumi.StringArrayInput `pulumi:"resourceArns"`
	// List of resource types to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources of these types. Refer to [InternalAccessAnalysisRuleCriteria](https://docs.aws.amazon.com/access-analyzer/latest/APIReference/API_InternalAccessAnalysisRuleCriteria.html) in the AWS IAM Access Analyzer API Reference for valid values.
	ResourceTypes pulumi.StringArrayInput `pulumi:"resourceTypes"`
}

func (AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationInternalAccessAnalysisRuleInclusion)(nil)).Elem()
}

func (i AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArgs) ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput() AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput {
	return i.ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArgs) ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput)
}

// AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayInput is an input type that accepts AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArray and AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayInput` via:
//
//	AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArray{ AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArgs{...} }
type AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayInput interface {
	pulumi.Input

	ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput() AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput
	ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutputWithContext(context.Context) AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput
}

type AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArray []AnalyzerConfigurationInternalAccessAnalysisRuleInclusionInput

func (AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalyzerConfigurationInternalAccessAnalysisRuleInclusion)(nil)).Elem()
}

func (i AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArray) ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput() AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput {
	return i.ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArray) ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput)
}

type AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationInternalAccessAnalysisRuleInclusion)(nil)).Elem()
}

func (o AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput) ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput() AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput {
	return o
}

func (o AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput) ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput {
	return o
}

// List of AWS account IDs to apply to the internal access analysis rule criteria. Account IDs can only be applied to the analysis rule criteria for organization-level analyzers.
func (o AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput) AccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalyzerConfigurationInternalAccessAnalysisRuleInclusion) []string { return v.AccountIds }).(pulumi.StringArrayOutput)
}

// List of resource ARNs to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources that match these ARNs.
func (o AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput) ResourceArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalyzerConfigurationInternalAccessAnalysisRuleInclusion) []string { return v.ResourceArns }).(pulumi.StringArrayOutput)
}

// List of resource types to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources of these types. Refer to [InternalAccessAnalysisRuleCriteria](https://docs.aws.amazon.com/access-analyzer/latest/APIReference/API_InternalAccessAnalysisRuleCriteria.html) in the AWS IAM Access Analyzer API Reference for valid values.
func (o AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalyzerConfigurationInternalAccessAnalysisRuleInclusion) []string { return v.ResourceTypes }).(pulumi.StringArrayOutput)
}

type AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalyzerConfigurationInternalAccessAnalysisRuleInclusion)(nil)).Elem()
}

func (o AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput) ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput() AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput {
	return o
}

func (o AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput) ToAnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutputWithContext(ctx context.Context) AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput {
	return o
}

func (o AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput) Index(i pulumi.IntInput) AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalyzerConfigurationInternalAccessAnalysisRuleInclusion {
		return vs[0].([]AnalyzerConfigurationInternalAccessAnalysisRuleInclusion)[vs[1].(int)]
	}).(AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput)
}

type AnalyzerConfigurationUnusedAccess struct {
	// Information about analysis rules for the analyzer. Analysis rules determine which entities will generate findings based on the criteria you define when you create the rule. See `analysisRule` Block for Unused Access Analyzer for details.
	AnalysisRule *AnalyzerConfigurationUnusedAccessAnalysisRule `pulumi:"analysisRule"`
	// Specified access age in days for which to generate findings for unused access.
	UnusedAccessAge *int `pulumi:"unusedAccessAge"`
}

// AnalyzerConfigurationUnusedAccessInput is an input type that accepts AnalyzerConfigurationUnusedAccessArgs and AnalyzerConfigurationUnusedAccessOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationUnusedAccessInput` via:
//
//	AnalyzerConfigurationUnusedAccessArgs{...}
type AnalyzerConfigurationUnusedAccessInput interface {
	pulumi.Input

	ToAnalyzerConfigurationUnusedAccessOutput() AnalyzerConfigurationUnusedAccessOutput
	ToAnalyzerConfigurationUnusedAccessOutputWithContext(context.Context) AnalyzerConfigurationUnusedAccessOutput
}

type AnalyzerConfigurationUnusedAccessArgs struct {
	// Information about analysis rules for the analyzer. Analysis rules determine which entities will generate findings based on the criteria you define when you create the rule. See `analysisRule` Block for Unused Access Analyzer for details.
	AnalysisRule AnalyzerConfigurationUnusedAccessAnalysisRulePtrInput `pulumi:"analysisRule"`
	// Specified access age in days for which to generate findings for unused access.
	UnusedAccessAge pulumi.IntPtrInput `pulumi:"unusedAccessAge"`
}

func (AnalyzerConfigurationUnusedAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationUnusedAccess)(nil)).Elem()
}

func (i AnalyzerConfigurationUnusedAccessArgs) ToAnalyzerConfigurationUnusedAccessOutput() AnalyzerConfigurationUnusedAccessOutput {
	return i.ToAnalyzerConfigurationUnusedAccessOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationUnusedAccessArgs) ToAnalyzerConfigurationUnusedAccessOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationUnusedAccessOutput)
}

func (i AnalyzerConfigurationUnusedAccessArgs) ToAnalyzerConfigurationUnusedAccessPtrOutput() AnalyzerConfigurationUnusedAccessPtrOutput {
	return i.ToAnalyzerConfigurationUnusedAccessPtrOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationUnusedAccessArgs) ToAnalyzerConfigurationUnusedAccessPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationUnusedAccessOutput).ToAnalyzerConfigurationUnusedAccessPtrOutputWithContext(ctx)
}

// AnalyzerConfigurationUnusedAccessPtrInput is an input type that accepts AnalyzerConfigurationUnusedAccessArgs, AnalyzerConfigurationUnusedAccessPtr and AnalyzerConfigurationUnusedAccessPtrOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationUnusedAccessPtrInput` via:
//
//	        AnalyzerConfigurationUnusedAccessArgs{...}
//
//	or:
//
//	        nil
type AnalyzerConfigurationUnusedAccessPtrInput interface {
	pulumi.Input

	ToAnalyzerConfigurationUnusedAccessPtrOutput() AnalyzerConfigurationUnusedAccessPtrOutput
	ToAnalyzerConfigurationUnusedAccessPtrOutputWithContext(context.Context) AnalyzerConfigurationUnusedAccessPtrOutput
}

type analyzerConfigurationUnusedAccessPtrType AnalyzerConfigurationUnusedAccessArgs

func AnalyzerConfigurationUnusedAccessPtr(v *AnalyzerConfigurationUnusedAccessArgs) AnalyzerConfigurationUnusedAccessPtrInput {
	return (*analyzerConfigurationUnusedAccessPtrType)(v)
}

func (*analyzerConfigurationUnusedAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyzerConfigurationUnusedAccess)(nil)).Elem()
}

func (i *analyzerConfigurationUnusedAccessPtrType) ToAnalyzerConfigurationUnusedAccessPtrOutput() AnalyzerConfigurationUnusedAccessPtrOutput {
	return i.ToAnalyzerConfigurationUnusedAccessPtrOutputWithContext(context.Background())
}

func (i *analyzerConfigurationUnusedAccessPtrType) ToAnalyzerConfigurationUnusedAccessPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationUnusedAccessPtrOutput)
}

type AnalyzerConfigurationUnusedAccessOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationUnusedAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationUnusedAccess)(nil)).Elem()
}

func (o AnalyzerConfigurationUnusedAccessOutput) ToAnalyzerConfigurationUnusedAccessOutput() AnalyzerConfigurationUnusedAccessOutput {
	return o
}

func (o AnalyzerConfigurationUnusedAccessOutput) ToAnalyzerConfigurationUnusedAccessOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessOutput {
	return o
}

func (o AnalyzerConfigurationUnusedAccessOutput) ToAnalyzerConfigurationUnusedAccessPtrOutput() AnalyzerConfigurationUnusedAccessPtrOutput {
	return o.ToAnalyzerConfigurationUnusedAccessPtrOutputWithContext(context.Background())
}

func (o AnalyzerConfigurationUnusedAccessOutput) ToAnalyzerConfigurationUnusedAccessPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalyzerConfigurationUnusedAccess) *AnalyzerConfigurationUnusedAccess {
		return &v
	}).(AnalyzerConfigurationUnusedAccessPtrOutput)
}

// Information about analysis rules for the analyzer. Analysis rules determine which entities will generate findings based on the criteria you define when you create the rule. See `analysisRule` Block for Unused Access Analyzer for details.
func (o AnalyzerConfigurationUnusedAccessOutput) AnalysisRule() AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput {
	return o.ApplyT(func(v AnalyzerConfigurationUnusedAccess) *AnalyzerConfigurationUnusedAccessAnalysisRule {
		return v.AnalysisRule
	}).(AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput)
}

// Specified access age in days for which to generate findings for unused access.
func (o AnalyzerConfigurationUnusedAccessOutput) UnusedAccessAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AnalyzerConfigurationUnusedAccess) *int { return v.UnusedAccessAge }).(pulumi.IntPtrOutput)
}

type AnalyzerConfigurationUnusedAccessPtrOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationUnusedAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyzerConfigurationUnusedAccess)(nil)).Elem()
}

func (o AnalyzerConfigurationUnusedAccessPtrOutput) ToAnalyzerConfigurationUnusedAccessPtrOutput() AnalyzerConfigurationUnusedAccessPtrOutput {
	return o
}

func (o AnalyzerConfigurationUnusedAccessPtrOutput) ToAnalyzerConfigurationUnusedAccessPtrOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessPtrOutput {
	return o
}

func (o AnalyzerConfigurationUnusedAccessPtrOutput) Elem() AnalyzerConfigurationUnusedAccessOutput {
	return o.ApplyT(func(v *AnalyzerConfigurationUnusedAccess) AnalyzerConfigurationUnusedAccess {
		if v != nil {
			return *v
		}
		var ret AnalyzerConfigurationUnusedAccess
		return ret
	}).(AnalyzerConfigurationUnusedAccessOutput)
}

// Information about analysis rules for the analyzer. Analysis rules determine which entities will generate findings based on the criteria you define when you create the rule. See `analysisRule` Block for Unused Access Analyzer for details.
func (o AnalyzerConfigurationUnusedAccessPtrOutput) AnalysisRule() AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput {
	return o.ApplyT(func(v *AnalyzerConfigurationUnusedAccess) *AnalyzerConfigurationUnusedAccessAnalysisRule {
		if v == nil {
			return nil
		}
		return v.AnalysisRule
	}).(AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput)
}

// Specified access age in days for which to generate findings for unused access.
func (o AnalyzerConfigurationUnusedAccessPtrOutput) UnusedAccessAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AnalyzerConfigurationUnusedAccess) *int {
		if v == nil {
			return nil
		}
		return v.UnusedAccessAge
	}).(pulumi.IntPtrOutput)
}

type AnalyzerConfigurationUnusedAccessAnalysisRule struct {
	// List of rules for the analyzer containing criteria to exclude from analysis. Entities that meet the rule criteria will not generate findings. See `exclusion` Block for details.
	Exclusions []AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion `pulumi:"exclusions"`
}

// AnalyzerConfigurationUnusedAccessAnalysisRuleInput is an input type that accepts AnalyzerConfigurationUnusedAccessAnalysisRuleArgs and AnalyzerConfigurationUnusedAccessAnalysisRuleOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationUnusedAccessAnalysisRuleInput` via:
//
//	AnalyzerConfigurationUnusedAccessAnalysisRuleArgs{...}
type AnalyzerConfigurationUnusedAccessAnalysisRuleInput interface {
	pulumi.Input

	ToAnalyzerConfigurationUnusedAccessAnalysisRuleOutput() AnalyzerConfigurationUnusedAccessAnalysisRuleOutput
	ToAnalyzerConfigurationUnusedAccessAnalysisRuleOutputWithContext(context.Context) AnalyzerConfigurationUnusedAccessAnalysisRuleOutput
}

type AnalyzerConfigurationUnusedAccessAnalysisRuleArgs struct {
	// List of rules for the analyzer containing criteria to exclude from analysis. Entities that meet the rule criteria will not generate findings. See `exclusion` Block for details.
	Exclusions AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayInput `pulumi:"exclusions"`
}

func (AnalyzerConfigurationUnusedAccessAnalysisRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationUnusedAccessAnalysisRule)(nil)).Elem()
}

func (i AnalyzerConfigurationUnusedAccessAnalysisRuleArgs) ToAnalyzerConfigurationUnusedAccessAnalysisRuleOutput() AnalyzerConfigurationUnusedAccessAnalysisRuleOutput {
	return i.ToAnalyzerConfigurationUnusedAccessAnalysisRuleOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationUnusedAccessAnalysisRuleArgs) ToAnalyzerConfigurationUnusedAccessAnalysisRuleOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessAnalysisRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationUnusedAccessAnalysisRuleOutput)
}

func (i AnalyzerConfigurationUnusedAccessAnalysisRuleArgs) ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput() AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput {
	return i.ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationUnusedAccessAnalysisRuleArgs) ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationUnusedAccessAnalysisRuleOutput).ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutputWithContext(ctx)
}

// AnalyzerConfigurationUnusedAccessAnalysisRulePtrInput is an input type that accepts AnalyzerConfigurationUnusedAccessAnalysisRuleArgs, AnalyzerConfigurationUnusedAccessAnalysisRulePtr and AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationUnusedAccessAnalysisRulePtrInput` via:
//
//	        AnalyzerConfigurationUnusedAccessAnalysisRuleArgs{...}
//
//	or:
//
//	        nil
type AnalyzerConfigurationUnusedAccessAnalysisRulePtrInput interface {
	pulumi.Input

	ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput() AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput
	ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutputWithContext(context.Context) AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput
}

type analyzerConfigurationUnusedAccessAnalysisRulePtrType AnalyzerConfigurationUnusedAccessAnalysisRuleArgs

func AnalyzerConfigurationUnusedAccessAnalysisRulePtr(v *AnalyzerConfigurationUnusedAccessAnalysisRuleArgs) AnalyzerConfigurationUnusedAccessAnalysisRulePtrInput {
	return (*analyzerConfigurationUnusedAccessAnalysisRulePtrType)(v)
}

func (*analyzerConfigurationUnusedAccessAnalysisRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyzerConfigurationUnusedAccessAnalysisRule)(nil)).Elem()
}

func (i *analyzerConfigurationUnusedAccessAnalysisRulePtrType) ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput() AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput {
	return i.ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutputWithContext(context.Background())
}

func (i *analyzerConfigurationUnusedAccessAnalysisRulePtrType) ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput)
}

type AnalyzerConfigurationUnusedAccessAnalysisRuleOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationUnusedAccessAnalysisRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationUnusedAccessAnalysisRule)(nil)).Elem()
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRuleOutput) ToAnalyzerConfigurationUnusedAccessAnalysisRuleOutput() AnalyzerConfigurationUnusedAccessAnalysisRuleOutput {
	return o
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRuleOutput) ToAnalyzerConfigurationUnusedAccessAnalysisRuleOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessAnalysisRuleOutput {
	return o
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRuleOutput) ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput() AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput {
	return o.ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutputWithContext(context.Background())
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRuleOutput) ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalyzerConfigurationUnusedAccessAnalysisRule) *AnalyzerConfigurationUnusedAccessAnalysisRule {
		return &v
	}).(AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput)
}

// List of rules for the analyzer containing criteria to exclude from analysis. Entities that meet the rule criteria will not generate findings. See `exclusion` Block for details.
func (o AnalyzerConfigurationUnusedAccessAnalysisRuleOutput) Exclusions() AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput {
	return o.ApplyT(func(v AnalyzerConfigurationUnusedAccessAnalysisRule) []AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion {
		return v.Exclusions
	}).(AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput)
}

type AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyzerConfigurationUnusedAccessAnalysisRule)(nil)).Elem()
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput) ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput() AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput {
	return o
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput) ToAnalyzerConfigurationUnusedAccessAnalysisRulePtrOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput {
	return o
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput) Elem() AnalyzerConfigurationUnusedAccessAnalysisRuleOutput {
	return o.ApplyT(func(v *AnalyzerConfigurationUnusedAccessAnalysisRule) AnalyzerConfigurationUnusedAccessAnalysisRule {
		if v != nil {
			return *v
		}
		var ret AnalyzerConfigurationUnusedAccessAnalysisRule
		return ret
	}).(AnalyzerConfigurationUnusedAccessAnalysisRuleOutput)
}

// List of rules for the analyzer containing criteria to exclude from analysis. Entities that meet the rule criteria will not generate findings. See `exclusion` Block for details.
func (o AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput) Exclusions() AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput {
	return o.ApplyT(func(v *AnalyzerConfigurationUnusedAccessAnalysisRule) []AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion {
		if v == nil {
			return nil
		}
		return v.Exclusions
	}).(AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput)
}

type AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion struct {
	// List of AWS account IDs to apply to the analysis rule criteria. The accounts cannot include the organization analyzer owner account. Account IDs can only be applied to the analysis rule criteria for organization-level analyzers.
	AccountIds []string `pulumi:"accountIds"`
	// List of key-value pairs for resource tags to exclude from the analysis.
	ResourceTags []map[string]string `pulumi:"resourceTags"`
}

// AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionInput is an input type that accepts AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs and AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionInput` via:
//
//	AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs{...}
type AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionInput interface {
	pulumi.Input

	ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput() AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput
	ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutputWithContext(context.Context) AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput
}

type AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs struct {
	// List of AWS account IDs to apply to the analysis rule criteria. The accounts cannot include the organization analyzer owner account. Account IDs can only be applied to the analysis rule criteria for organization-level analyzers.
	AccountIds pulumi.StringArrayInput `pulumi:"accountIds"`
	// List of key-value pairs for resource tags to exclude from the analysis.
	ResourceTags pulumi.StringMapArrayInput `pulumi:"resourceTags"`
}

func (AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion)(nil)).Elem()
}

func (i AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs) ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput() AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput {
	return i.ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs) ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput)
}

// AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayInput is an input type that accepts AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArray and AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput values.
// You can construct a concrete instance of `AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayInput` via:
//
//	AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArray{ AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs{...} }
type AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayInput interface {
	pulumi.Input

	ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput() AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput
	ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutputWithContext(context.Context) AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput
}

type AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArray []AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionInput

func (AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion)(nil)).Elem()
}

func (i AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArray) ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput() AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput {
	return i.ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutputWithContext(context.Background())
}

func (i AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArray) ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput)
}

type AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion)(nil)).Elem()
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput) ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput() AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput {
	return o
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput) ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput {
	return o
}

// List of AWS account IDs to apply to the analysis rule criteria. The accounts cannot include the organization analyzer owner account. Account IDs can only be applied to the analysis rule criteria for organization-level analyzers.
func (o AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput) AccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion) []string { return v.AccountIds }).(pulumi.StringArrayOutput)
}

// List of key-value pairs for resource tags to exclude from the analysis.
func (o AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput) ResourceTags() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion) []map[string]string {
		return v.ResourceTags
	}).(pulumi.StringMapArrayOutput)
}

type AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput struct{ *pulumi.OutputState }

func (AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion)(nil)).Elem()
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput) ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput() AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput {
	return o
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput) ToAnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutputWithContext(ctx context.Context) AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput {
	return o
}

func (o AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput) Index(i pulumi.IntInput) AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion {
		return vs[0].([]AnalyzerConfigurationUnusedAccessAnalysisRuleExclusion)[vs[1].(int)]
	}).(AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput)
}

type ArchiveRuleFilter struct {
	// Contains comparator.
	Contains []string `pulumi:"contains"`
	// Filter criteria.
	Criteria string `pulumi:"criteria"`
	// Equals comparator.
	Eqs []string `pulumi:"eqs"`
	// Boolean comparator.
	Exists *string `pulumi:"exists"`
	// Not Equals comparator.
	Neqs []string `pulumi:"neqs"`
}

// ArchiveRuleFilterInput is an input type that accepts ArchiveRuleFilterArgs and ArchiveRuleFilterOutput values.
// You can construct a concrete instance of `ArchiveRuleFilterInput` via:
//
//	ArchiveRuleFilterArgs{...}
type ArchiveRuleFilterInput interface {
	pulumi.Input

	ToArchiveRuleFilterOutput() ArchiveRuleFilterOutput
	ToArchiveRuleFilterOutputWithContext(context.Context) ArchiveRuleFilterOutput
}

type ArchiveRuleFilterArgs struct {
	// Contains comparator.
	Contains pulumi.StringArrayInput `pulumi:"contains"`
	// Filter criteria.
	Criteria pulumi.StringInput `pulumi:"criteria"`
	// Equals comparator.
	Eqs pulumi.StringArrayInput `pulumi:"eqs"`
	// Boolean comparator.
	Exists pulumi.StringPtrInput `pulumi:"exists"`
	// Not Equals comparator.
	Neqs pulumi.StringArrayInput `pulumi:"neqs"`
}

func (ArchiveRuleFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArchiveRuleFilter)(nil)).Elem()
}

func (i ArchiveRuleFilterArgs) ToArchiveRuleFilterOutput() ArchiveRuleFilterOutput {
	return i.ToArchiveRuleFilterOutputWithContext(context.Background())
}

func (i ArchiveRuleFilterArgs) ToArchiveRuleFilterOutputWithContext(ctx context.Context) ArchiveRuleFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchiveRuleFilterOutput)
}

// ArchiveRuleFilterArrayInput is an input type that accepts ArchiveRuleFilterArray and ArchiveRuleFilterArrayOutput values.
// You can construct a concrete instance of `ArchiveRuleFilterArrayInput` via:
//
//	ArchiveRuleFilterArray{ ArchiveRuleFilterArgs{...} }
type ArchiveRuleFilterArrayInput interface {
	pulumi.Input

	ToArchiveRuleFilterArrayOutput() ArchiveRuleFilterArrayOutput
	ToArchiveRuleFilterArrayOutputWithContext(context.Context) ArchiveRuleFilterArrayOutput
}

type ArchiveRuleFilterArray []ArchiveRuleFilterInput

func (ArchiveRuleFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArchiveRuleFilter)(nil)).Elem()
}

func (i ArchiveRuleFilterArray) ToArchiveRuleFilterArrayOutput() ArchiveRuleFilterArrayOutput {
	return i.ToArchiveRuleFilterArrayOutputWithContext(context.Background())
}

func (i ArchiveRuleFilterArray) ToArchiveRuleFilterArrayOutputWithContext(ctx context.Context) ArchiveRuleFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchiveRuleFilterArrayOutput)
}

type ArchiveRuleFilterOutput struct{ *pulumi.OutputState }

func (ArchiveRuleFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArchiveRuleFilter)(nil)).Elem()
}

func (o ArchiveRuleFilterOutput) ToArchiveRuleFilterOutput() ArchiveRuleFilterOutput {
	return o
}

func (o ArchiveRuleFilterOutput) ToArchiveRuleFilterOutputWithContext(ctx context.Context) ArchiveRuleFilterOutput {
	return o
}

// Contains comparator.
func (o ArchiveRuleFilterOutput) Contains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArchiveRuleFilter) []string { return v.Contains }).(pulumi.StringArrayOutput)
}

// Filter criteria.
func (o ArchiveRuleFilterOutput) Criteria() pulumi.StringOutput {
	return o.ApplyT(func(v ArchiveRuleFilter) string { return v.Criteria }).(pulumi.StringOutput)
}

// Equals comparator.
func (o ArchiveRuleFilterOutput) Eqs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArchiveRuleFilter) []string { return v.Eqs }).(pulumi.StringArrayOutput)
}

// Boolean comparator.
func (o ArchiveRuleFilterOutput) Exists() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArchiveRuleFilter) *string { return v.Exists }).(pulumi.StringPtrOutput)
}

// Not Equals comparator.
func (o ArchiveRuleFilterOutput) Neqs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArchiveRuleFilter) []string { return v.Neqs }).(pulumi.StringArrayOutput)
}

type ArchiveRuleFilterArrayOutput struct{ *pulumi.OutputState }

func (ArchiveRuleFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArchiveRuleFilter)(nil)).Elem()
}

func (o ArchiveRuleFilterArrayOutput) ToArchiveRuleFilterArrayOutput() ArchiveRuleFilterArrayOutput {
	return o
}

func (o ArchiveRuleFilterArrayOutput) ToArchiveRuleFilterArrayOutputWithContext(ctx context.Context) ArchiveRuleFilterArrayOutput {
	return o
}

func (o ArchiveRuleFilterArrayOutput) Index(i pulumi.IntInput) ArchiveRuleFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArchiveRuleFilter {
		return vs[0].([]ArchiveRuleFilter)[vs[1].(int)]
	}).(ArchiveRuleFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationInput)(nil)).Elem(), AnalyzerConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationPtrInput)(nil)).Elem(), AnalyzerConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationInternalAccessInput)(nil)).Elem(), AnalyzerConfigurationInternalAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationInternalAccessPtrInput)(nil)).Elem(), AnalyzerConfigurationInternalAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationInternalAccessAnalysisRuleInput)(nil)).Elem(), AnalyzerConfigurationInternalAccessAnalysisRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationInternalAccessAnalysisRulePtrInput)(nil)).Elem(), AnalyzerConfigurationInternalAccessAnalysisRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationInternalAccessAnalysisRuleInclusionInput)(nil)).Elem(), AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayInput)(nil)).Elem(), AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationUnusedAccessInput)(nil)).Elem(), AnalyzerConfigurationUnusedAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationUnusedAccessPtrInput)(nil)).Elem(), AnalyzerConfigurationUnusedAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationUnusedAccessAnalysisRuleInput)(nil)).Elem(), AnalyzerConfigurationUnusedAccessAnalysisRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationUnusedAccessAnalysisRulePtrInput)(nil)).Elem(), AnalyzerConfigurationUnusedAccessAnalysisRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionInput)(nil)).Elem(), AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayInput)(nil)).Elem(), AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArchiveRuleFilterInput)(nil)).Elem(), ArchiveRuleFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArchiveRuleFilterArrayInput)(nil)).Elem(), ArchiveRuleFilterArray{})
	pulumi.RegisterOutputType(AnalyzerConfigurationOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationInternalAccessOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationInternalAccessPtrOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationInternalAccessAnalysisRuleOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationInternalAccessAnalysisRulePtrOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationInternalAccessAnalysisRuleInclusionOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationInternalAccessAnalysisRuleInclusionArrayOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationUnusedAccessOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationUnusedAccessPtrOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationUnusedAccessAnalysisRuleOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationUnusedAccessAnalysisRulePtrOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionOutput{})
	pulumi.RegisterOutputType(AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArrayOutput{})
	pulumi.RegisterOutputType(ArchiveRuleFilterOutput{})
	pulumi.RegisterOutputType(ArchiveRuleFilterArrayOutput{})
}
