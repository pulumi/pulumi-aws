// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EmailChannel struct {
	pulumi.CustomResourceState

	ApplicationId     pulumi.StringOutput    `pulumi:"applicationId"`
	ConfigurationSet  pulumi.StringPtrOutput `pulumi:"configurationSet"`
	Enabled           pulumi.BoolPtrOutput   `pulumi:"enabled"`
	FromAddress       pulumi.StringOutput    `pulumi:"fromAddress"`
	Identity          pulumi.StringOutput    `pulumi:"identity"`
	MessagesPerSecond pulumi.IntOutput       `pulumi:"messagesPerSecond"`
	RoleArn           pulumi.StringPtrOutput `pulumi:"roleArn"`
}

// NewEmailChannel registers a new resource with the given unique name, arguments, and options.
func NewEmailChannel(ctx *pulumi.Context,
	name string, args *EmailChannelArgs, opts ...pulumi.ResourceOption) (*EmailChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.FromAddress == nil {
		return nil, errors.New("invalid value for required argument 'FromAddress'")
	}
	if args.Identity == nil {
		return nil, errors.New("invalid value for required argument 'Identity'")
	}
	var resource EmailChannel
	err := ctx.RegisterResource("aws:pinpoint/emailChannel:EmailChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailChannel gets an existing EmailChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailChannelState, opts ...pulumi.ResourceOption) (*EmailChannel, error) {
	var resource EmailChannel
	err := ctx.ReadResource("aws:pinpoint/emailChannel:EmailChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailChannel resources.
type emailChannelState struct {
	ApplicationId     *string `pulumi:"applicationId"`
	ConfigurationSet  *string `pulumi:"configurationSet"`
	Enabled           *bool   `pulumi:"enabled"`
	FromAddress       *string `pulumi:"fromAddress"`
	Identity          *string `pulumi:"identity"`
	MessagesPerSecond *int    `pulumi:"messagesPerSecond"`
	RoleArn           *string `pulumi:"roleArn"`
}

type EmailChannelState struct {
	ApplicationId     pulumi.StringPtrInput
	ConfigurationSet  pulumi.StringPtrInput
	Enabled           pulumi.BoolPtrInput
	FromAddress       pulumi.StringPtrInput
	Identity          pulumi.StringPtrInput
	MessagesPerSecond pulumi.IntPtrInput
	RoleArn           pulumi.StringPtrInput
}

func (EmailChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailChannelState)(nil)).Elem()
}

type emailChannelArgs struct {
	ApplicationId    string  `pulumi:"applicationId"`
	ConfigurationSet *string `pulumi:"configurationSet"`
	Enabled          *bool   `pulumi:"enabled"`
	FromAddress      string  `pulumi:"fromAddress"`
	Identity         string  `pulumi:"identity"`
	RoleArn          *string `pulumi:"roleArn"`
}

// The set of arguments for constructing a EmailChannel resource.
type EmailChannelArgs struct {
	ApplicationId    pulumi.StringInput
	ConfigurationSet pulumi.StringPtrInput
	Enabled          pulumi.BoolPtrInput
	FromAddress      pulumi.StringInput
	Identity         pulumi.StringInput
	RoleArn          pulumi.StringPtrInput
}

func (EmailChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailChannelArgs)(nil)).Elem()
}

type EmailChannelInput interface {
	pulumi.Input

	ToEmailChannelOutput() EmailChannelOutput
	ToEmailChannelOutputWithContext(ctx context.Context) EmailChannelOutput
}

func (*EmailChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailChannel)(nil)).Elem()
}

func (i *EmailChannel) ToEmailChannelOutput() EmailChannelOutput {
	return i.ToEmailChannelOutputWithContext(context.Background())
}

func (i *EmailChannel) ToEmailChannelOutputWithContext(ctx context.Context) EmailChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailChannelOutput)
}

// EmailChannelArrayInput is an input type that accepts EmailChannelArray and EmailChannelArrayOutput values.
// You can construct a concrete instance of `EmailChannelArrayInput` via:
//
//	EmailChannelArray{ EmailChannelArgs{...} }
type EmailChannelArrayInput interface {
	pulumi.Input

	ToEmailChannelArrayOutput() EmailChannelArrayOutput
	ToEmailChannelArrayOutputWithContext(context.Context) EmailChannelArrayOutput
}

type EmailChannelArray []EmailChannelInput

func (EmailChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailChannel)(nil)).Elem()
}

func (i EmailChannelArray) ToEmailChannelArrayOutput() EmailChannelArrayOutput {
	return i.ToEmailChannelArrayOutputWithContext(context.Background())
}

func (i EmailChannelArray) ToEmailChannelArrayOutputWithContext(ctx context.Context) EmailChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailChannelArrayOutput)
}

// EmailChannelMapInput is an input type that accepts EmailChannelMap and EmailChannelMapOutput values.
// You can construct a concrete instance of `EmailChannelMapInput` via:
//
//	EmailChannelMap{ "key": EmailChannelArgs{...} }
type EmailChannelMapInput interface {
	pulumi.Input

	ToEmailChannelMapOutput() EmailChannelMapOutput
	ToEmailChannelMapOutputWithContext(context.Context) EmailChannelMapOutput
}

type EmailChannelMap map[string]EmailChannelInput

func (EmailChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailChannel)(nil)).Elem()
}

func (i EmailChannelMap) ToEmailChannelMapOutput() EmailChannelMapOutput {
	return i.ToEmailChannelMapOutputWithContext(context.Background())
}

func (i EmailChannelMap) ToEmailChannelMapOutputWithContext(ctx context.Context) EmailChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailChannelMapOutput)
}

type EmailChannelOutput struct{ *pulumi.OutputState }

func (EmailChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailChannel)(nil)).Elem()
}

func (o EmailChannelOutput) ToEmailChannelOutput() EmailChannelOutput {
	return o
}

func (o EmailChannelOutput) ToEmailChannelOutputWithContext(ctx context.Context) EmailChannelOutput {
	return o
}

func (o EmailChannelOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailChannel) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

func (o EmailChannelOutput) ConfigurationSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailChannel) pulumi.StringPtrOutput { return v.ConfigurationSet }).(pulumi.StringPtrOutput)
}

func (o EmailChannelOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailChannel) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o EmailChannelOutput) FromAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailChannel) pulumi.StringOutput { return v.FromAddress }).(pulumi.StringOutput)
}

func (o EmailChannelOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailChannel) pulumi.StringOutput { return v.Identity }).(pulumi.StringOutput)
}

func (o EmailChannelOutput) MessagesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v *EmailChannel) pulumi.IntOutput { return v.MessagesPerSecond }).(pulumi.IntOutput)
}

func (o EmailChannelOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailChannel) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

type EmailChannelArrayOutput struct{ *pulumi.OutputState }

func (EmailChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailChannel)(nil)).Elem()
}

func (o EmailChannelArrayOutput) ToEmailChannelArrayOutput() EmailChannelArrayOutput {
	return o
}

func (o EmailChannelArrayOutput) ToEmailChannelArrayOutputWithContext(ctx context.Context) EmailChannelArrayOutput {
	return o
}

func (o EmailChannelArrayOutput) Index(i pulumi.IntInput) EmailChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailChannel {
		return vs[0].([]*EmailChannel)[vs[1].(int)]
	}).(EmailChannelOutput)
}

type EmailChannelMapOutput struct{ *pulumi.OutputState }

func (EmailChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailChannel)(nil)).Elem()
}

func (o EmailChannelMapOutput) ToEmailChannelMapOutput() EmailChannelMapOutput {
	return o
}

func (o EmailChannelMapOutput) ToEmailChannelMapOutputWithContext(ctx context.Context) EmailChannelMapOutput {
	return o
}

func (o EmailChannelMapOutput) MapIndex(k pulumi.StringInput) EmailChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailChannel {
		return vs[0].(map[string]*EmailChannel)[vs[1].(string)]
	}).(EmailChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailChannelInput)(nil)).Elem(), &EmailChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailChannelArrayInput)(nil)).Elem(), EmailChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailChannelMapInput)(nil)).Elem(), EmailChannelMap{})
	pulumi.RegisterOutputType(EmailChannelOutput{})
	pulumi.RegisterOutputType(EmailChannelArrayOutput{})
	pulumi.RegisterOutputType(EmailChannelMapOutput{})
}
