// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type EmailChannel struct {
	s *pulumi.ResourceState
}

// NewEmailChannel registers a new resource with the given unique name, arguments, and options.
func NewEmailChannel(ctx *pulumi.Context,
	name string, args *EmailChannelArgs, opts ...pulumi.ResourceOpt) (*EmailChannel, error) {
	if args == nil || args.ApplicationId == nil {
		return nil, errors.New("missing required argument 'ApplicationId'")
	}
	if args == nil || args.FromAddress == nil {
		return nil, errors.New("missing required argument 'FromAddress'")
	}
	if args == nil || args.Identity == nil {
		return nil, errors.New("missing required argument 'Identity'")
	}
	if args == nil || args.RoleArn == nil {
		return nil, errors.New("missing required argument 'RoleArn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["applicationId"] = nil
		inputs["enabled"] = nil
		inputs["fromAddress"] = nil
		inputs["identity"] = nil
		inputs["roleArn"] = nil
	} else {
		inputs["applicationId"] = args.ApplicationId
		inputs["enabled"] = args.Enabled
		inputs["fromAddress"] = args.FromAddress
		inputs["identity"] = args.Identity
		inputs["roleArn"] = args.RoleArn
	}
	inputs["messagesPerSecond"] = nil
	s, err := ctx.RegisterResource("aws:pinpoint/emailChannel:EmailChannel", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EmailChannel{s: s}, nil
}

// GetEmailChannel gets an existing EmailChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailChannel(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EmailChannelState, opts ...pulumi.ResourceOpt) (*EmailChannel, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["applicationId"] = state.ApplicationId
		inputs["enabled"] = state.Enabled
		inputs["fromAddress"] = state.FromAddress
		inputs["identity"] = state.Identity
		inputs["messagesPerSecond"] = state.MessagesPerSecond
		inputs["roleArn"] = state.RoleArn
	}
	s, err := ctx.ReadResource("aws:pinpoint/emailChannel:EmailChannel", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EmailChannel{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *EmailChannel) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *EmailChannel) ID() *pulumi.IDOutput {
	return r.s.ID
}

func (r *EmailChannel) ApplicationId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["applicationId"])
}

func (r *EmailChannel) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

func (r *EmailChannel) FromAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fromAddress"])
}

func (r *EmailChannel) Identity() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["identity"])
}

func (r *EmailChannel) MessagesPerSecond() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["messagesPerSecond"])
}

func (r *EmailChannel) RoleArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["roleArn"])
}

// Input properties used for looking up and filtering EmailChannel resources.
type EmailChannelState struct {
	ApplicationId interface{}
	Enabled interface{}
	FromAddress interface{}
	Identity interface{}
	MessagesPerSecond interface{}
	RoleArn interface{}
}

// The set of arguments for constructing a EmailChannel resource.
type EmailChannelArgs struct {
	ApplicationId interface{}
	Enabled interface{}
	FromAddress interface{}
	Identity interface{}
	RoleArn interface{}
}
