// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use the `pinpoint.SmsChannel` resource to manage Pinpoint SMS Channels.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/pinpoint"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			app, err := pinpoint.NewApp(ctx, "app", nil)
//			if err != nil {
//				return err
//			}
//			_, err = pinpoint.NewSmsChannel(ctx, "sms", &pinpoint.SmsChannelArgs{
//				ApplicationId: app.ApplicationId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// In TODO v1.5.0 and later, use an `import` block to import the Pinpoint SMS Channel using the `application_id`. For exampleterraform import {
//
//	to = aws_pinpoint_sms_channel.sms
//
//	id = "application-id" } Using `TODO import`, import the Pinpoint SMS Channel using the `application_id`. For exampleconsole % TODO import aws_pinpoint_sms_channel.sms application-id
type SmsChannel struct {
	pulumi.CustomResourceState

	// ID of the application.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Whether the channel is enabled or disabled. By default, it is set to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Maximum number of promotional messages that can be sent per second.
	PromotionalMessagesPerSecond pulumi.IntOutput `pulumi:"promotionalMessagesPerSecond"`
	// Identifier of the sender for your messages.
	SenderId pulumi.StringPtrOutput `pulumi:"senderId"`
	// Short Code registered with the phone provider.
	ShortCode pulumi.StringPtrOutput `pulumi:"shortCode"`
	// Maximum number of transactional messages per second that can be sent.
	TransactionalMessagesPerSecond pulumi.IntOutput `pulumi:"transactionalMessagesPerSecond"`
}

// NewSmsChannel registers a new resource with the given unique name, arguments, and options.
func NewSmsChannel(ctx *pulumi.Context,
	name string, args *SmsChannelArgs, opts ...pulumi.ResourceOption) (*SmsChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmsChannel
	err := ctx.RegisterResource("aws:pinpoint/smsChannel:SmsChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmsChannel gets an existing SmsChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmsChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmsChannelState, opts ...pulumi.ResourceOption) (*SmsChannel, error) {
	var resource SmsChannel
	err := ctx.ReadResource("aws:pinpoint/smsChannel:SmsChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmsChannel resources.
type smsChannelState struct {
	// ID of the application.
	ApplicationId *string `pulumi:"applicationId"`
	// Whether the channel is enabled or disabled. By default, it is set to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Maximum number of promotional messages that can be sent per second.
	PromotionalMessagesPerSecond *int `pulumi:"promotionalMessagesPerSecond"`
	// Identifier of the sender for your messages.
	SenderId *string `pulumi:"senderId"`
	// Short Code registered with the phone provider.
	ShortCode *string `pulumi:"shortCode"`
	// Maximum number of transactional messages per second that can be sent.
	TransactionalMessagesPerSecond *int `pulumi:"transactionalMessagesPerSecond"`
}

type SmsChannelState struct {
	// ID of the application.
	ApplicationId pulumi.StringPtrInput
	// Whether the channel is enabled or disabled. By default, it is set to `true`.
	Enabled pulumi.BoolPtrInput
	// Maximum number of promotional messages that can be sent per second.
	PromotionalMessagesPerSecond pulumi.IntPtrInput
	// Identifier of the sender for your messages.
	SenderId pulumi.StringPtrInput
	// Short Code registered with the phone provider.
	ShortCode pulumi.StringPtrInput
	// Maximum number of transactional messages per second that can be sent.
	TransactionalMessagesPerSecond pulumi.IntPtrInput
}

func (SmsChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*smsChannelState)(nil)).Elem()
}

type smsChannelArgs struct {
	// ID of the application.
	ApplicationId string `pulumi:"applicationId"`
	// Whether the channel is enabled or disabled. By default, it is set to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Identifier of the sender for your messages.
	SenderId *string `pulumi:"senderId"`
	// Short Code registered with the phone provider.
	ShortCode *string `pulumi:"shortCode"`
}

// The set of arguments for constructing a SmsChannel resource.
type SmsChannelArgs struct {
	// ID of the application.
	ApplicationId pulumi.StringInput
	// Whether the channel is enabled or disabled. By default, it is set to `true`.
	Enabled pulumi.BoolPtrInput
	// Identifier of the sender for your messages.
	SenderId pulumi.StringPtrInput
	// Short Code registered with the phone provider.
	ShortCode pulumi.StringPtrInput
}

func (SmsChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smsChannelArgs)(nil)).Elem()
}

type SmsChannelInput interface {
	pulumi.Input

	ToSmsChannelOutput() SmsChannelOutput
	ToSmsChannelOutputWithContext(ctx context.Context) SmsChannelOutput
}

func (*SmsChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**SmsChannel)(nil)).Elem()
}

func (i *SmsChannel) ToSmsChannelOutput() SmsChannelOutput {
	return i.ToSmsChannelOutputWithContext(context.Background())
}

func (i *SmsChannel) ToSmsChannelOutputWithContext(ctx context.Context) SmsChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsChannelOutput)
}

func (i *SmsChannel) ToOutput(ctx context.Context) pulumix.Output[*SmsChannel] {
	return pulumix.Output[*SmsChannel]{
		OutputState: i.ToSmsChannelOutputWithContext(ctx).OutputState,
	}
}

// SmsChannelArrayInput is an input type that accepts SmsChannelArray and SmsChannelArrayOutput values.
// You can construct a concrete instance of `SmsChannelArrayInput` via:
//
//	SmsChannelArray{ SmsChannelArgs{...} }
type SmsChannelArrayInput interface {
	pulumi.Input

	ToSmsChannelArrayOutput() SmsChannelArrayOutput
	ToSmsChannelArrayOutputWithContext(context.Context) SmsChannelArrayOutput
}

type SmsChannelArray []SmsChannelInput

func (SmsChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmsChannel)(nil)).Elem()
}

func (i SmsChannelArray) ToSmsChannelArrayOutput() SmsChannelArrayOutput {
	return i.ToSmsChannelArrayOutputWithContext(context.Background())
}

func (i SmsChannelArray) ToSmsChannelArrayOutputWithContext(ctx context.Context) SmsChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsChannelArrayOutput)
}

func (i SmsChannelArray) ToOutput(ctx context.Context) pulumix.Output[[]*SmsChannel] {
	return pulumix.Output[[]*SmsChannel]{
		OutputState: i.ToSmsChannelArrayOutputWithContext(ctx).OutputState,
	}
}

// SmsChannelMapInput is an input type that accepts SmsChannelMap and SmsChannelMapOutput values.
// You can construct a concrete instance of `SmsChannelMapInput` via:
//
//	SmsChannelMap{ "key": SmsChannelArgs{...} }
type SmsChannelMapInput interface {
	pulumi.Input

	ToSmsChannelMapOutput() SmsChannelMapOutput
	ToSmsChannelMapOutputWithContext(context.Context) SmsChannelMapOutput
}

type SmsChannelMap map[string]SmsChannelInput

func (SmsChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmsChannel)(nil)).Elem()
}

func (i SmsChannelMap) ToSmsChannelMapOutput() SmsChannelMapOutput {
	return i.ToSmsChannelMapOutputWithContext(context.Background())
}

func (i SmsChannelMap) ToSmsChannelMapOutputWithContext(ctx context.Context) SmsChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsChannelMapOutput)
}

func (i SmsChannelMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SmsChannel] {
	return pulumix.Output[map[string]*SmsChannel]{
		OutputState: i.ToSmsChannelMapOutputWithContext(ctx).OutputState,
	}
}

type SmsChannelOutput struct{ *pulumi.OutputState }

func (SmsChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmsChannel)(nil)).Elem()
}

func (o SmsChannelOutput) ToSmsChannelOutput() SmsChannelOutput {
	return o
}

func (o SmsChannelOutput) ToSmsChannelOutputWithContext(ctx context.Context) SmsChannelOutput {
	return o
}

func (o SmsChannelOutput) ToOutput(ctx context.Context) pulumix.Output[*SmsChannel] {
	return pulumix.Output[*SmsChannel]{
		OutputState: o.OutputState,
	}
}

// ID of the application.
func (o SmsChannelOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmsChannel) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Whether the channel is enabled or disabled. By default, it is set to `true`.
func (o SmsChannelOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SmsChannel) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Maximum number of promotional messages that can be sent per second.
func (o SmsChannelOutput) PromotionalMessagesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v *SmsChannel) pulumi.IntOutput { return v.PromotionalMessagesPerSecond }).(pulumi.IntOutput)
}

// Identifier of the sender for your messages.
func (o SmsChannelOutput) SenderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmsChannel) pulumi.StringPtrOutput { return v.SenderId }).(pulumi.StringPtrOutput)
}

// Short Code registered with the phone provider.
func (o SmsChannelOutput) ShortCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmsChannel) pulumi.StringPtrOutput { return v.ShortCode }).(pulumi.StringPtrOutput)
}

// Maximum number of transactional messages per second that can be sent.
func (o SmsChannelOutput) TransactionalMessagesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v *SmsChannel) pulumi.IntOutput { return v.TransactionalMessagesPerSecond }).(pulumi.IntOutput)
}

type SmsChannelArrayOutput struct{ *pulumi.OutputState }

func (SmsChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmsChannel)(nil)).Elem()
}

func (o SmsChannelArrayOutput) ToSmsChannelArrayOutput() SmsChannelArrayOutput {
	return o
}

func (o SmsChannelArrayOutput) ToSmsChannelArrayOutputWithContext(ctx context.Context) SmsChannelArrayOutput {
	return o
}

func (o SmsChannelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SmsChannel] {
	return pulumix.Output[[]*SmsChannel]{
		OutputState: o.OutputState,
	}
}

func (o SmsChannelArrayOutput) Index(i pulumi.IntInput) SmsChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmsChannel {
		return vs[0].([]*SmsChannel)[vs[1].(int)]
	}).(SmsChannelOutput)
}

type SmsChannelMapOutput struct{ *pulumi.OutputState }

func (SmsChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmsChannel)(nil)).Elem()
}

func (o SmsChannelMapOutput) ToSmsChannelMapOutput() SmsChannelMapOutput {
	return o
}

func (o SmsChannelMapOutput) ToSmsChannelMapOutputWithContext(ctx context.Context) SmsChannelMapOutput {
	return o
}

func (o SmsChannelMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SmsChannel] {
	return pulumix.Output[map[string]*SmsChannel]{
		OutputState: o.OutputState,
	}
}

func (o SmsChannelMapOutput) MapIndex(k pulumi.StringInput) SmsChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmsChannel {
		return vs[0].(map[string]*SmsChannel)[vs[1].(string)]
	}).(SmsChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmsChannelInput)(nil)).Elem(), &SmsChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmsChannelArrayInput)(nil)).Elem(), SmsChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmsChannelMapInput)(nil)).Elem(), SmsChannelMap{})
	pulumi.RegisterOutputType(SmsChannelOutput{})
	pulumi.RegisterOutputType(SmsChannelArrayOutput{})
	pulumi.RegisterOutputType(SmsChannelMapOutput{})
}
