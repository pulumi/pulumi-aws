// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Pinpoint GCM Channel resource.
//
// > **Note:** Credentials (Service Account JSON and API Key) will be stored in the raw state as plain-text.
// ## Import
//
// Using `pulumi import`, import Pinpoint GCM Channel using the `application-id`. For example:
//
// ```sh
// $ pulumi import aws:pinpoint/gcmChannel:GcmChannel gcm application-id
// ```
type GcmChannel struct {
	pulumi.CustomResourceState

	// Platform credential API key from Google.
	ApiKey pulumi.StringPtrOutput `pulumi:"apiKey"`
	// The application ID.
	ApplicationId               pulumi.StringOutput    `pulumi:"applicationId"`
	DefaultAuthenticationMethod pulumi.StringPtrOutput `pulumi:"defaultAuthenticationMethod"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled     pulumi.BoolPtrOutput   `pulumi:"enabled"`
	ServiceJson pulumi.StringPtrOutput `pulumi:"serviceJson"`
}

// NewGcmChannel registers a new resource with the given unique name, arguments, and options.
func NewGcmChannel(ctx *pulumi.Context,
	name string, args *GcmChannelArgs, opts ...pulumi.ResourceOption) (*GcmChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringPtrInput)
	}
	if args.ServiceJson != nil {
		args.ServiceJson = pulumi.ToSecret(args.ServiceJson).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
		"serviceJson",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcmChannel
	err := ctx.RegisterResource("aws:pinpoint/gcmChannel:GcmChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcmChannel gets an existing GcmChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcmChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcmChannelState, opts ...pulumi.ResourceOption) (*GcmChannel, error) {
	var resource GcmChannel
	err := ctx.ReadResource("aws:pinpoint/gcmChannel:GcmChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcmChannel resources.
type gcmChannelState struct {
	// Platform credential API key from Google.
	ApiKey *string `pulumi:"apiKey"`
	// The application ID.
	ApplicationId               *string `pulumi:"applicationId"`
	DefaultAuthenticationMethod *string `pulumi:"defaultAuthenticationMethod"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled     *bool   `pulumi:"enabled"`
	ServiceJson *string `pulumi:"serviceJson"`
}

type GcmChannelState struct {
	// Platform credential API key from Google.
	ApiKey pulumi.StringPtrInput
	// The application ID.
	ApplicationId               pulumi.StringPtrInput
	DefaultAuthenticationMethod pulumi.StringPtrInput
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled     pulumi.BoolPtrInput
	ServiceJson pulumi.StringPtrInput
}

func (GcmChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcmChannelState)(nil)).Elem()
}

type gcmChannelArgs struct {
	// Platform credential API key from Google.
	ApiKey *string `pulumi:"apiKey"`
	// The application ID.
	ApplicationId               string  `pulumi:"applicationId"`
	DefaultAuthenticationMethod *string `pulumi:"defaultAuthenticationMethod"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled     *bool   `pulumi:"enabled"`
	ServiceJson *string `pulumi:"serviceJson"`
}

// The set of arguments for constructing a GcmChannel resource.
type GcmChannelArgs struct {
	// Platform credential API key from Google.
	ApiKey pulumi.StringPtrInput
	// The application ID.
	ApplicationId               pulumi.StringInput
	DefaultAuthenticationMethod pulumi.StringPtrInput
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled     pulumi.BoolPtrInput
	ServiceJson pulumi.StringPtrInput
}

func (GcmChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcmChannelArgs)(nil)).Elem()
}

type GcmChannelInput interface {
	pulumi.Input

	ToGcmChannelOutput() GcmChannelOutput
	ToGcmChannelOutputWithContext(ctx context.Context) GcmChannelOutput
}

func (*GcmChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**GcmChannel)(nil)).Elem()
}

func (i *GcmChannel) ToGcmChannelOutput() GcmChannelOutput {
	return i.ToGcmChannelOutputWithContext(context.Background())
}

func (i *GcmChannel) ToGcmChannelOutputWithContext(ctx context.Context) GcmChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcmChannelOutput)
}

// GcmChannelArrayInput is an input type that accepts GcmChannelArray and GcmChannelArrayOutput values.
// You can construct a concrete instance of `GcmChannelArrayInput` via:
//
//	GcmChannelArray{ GcmChannelArgs{...} }
type GcmChannelArrayInput interface {
	pulumi.Input

	ToGcmChannelArrayOutput() GcmChannelArrayOutput
	ToGcmChannelArrayOutputWithContext(context.Context) GcmChannelArrayOutput
}

type GcmChannelArray []GcmChannelInput

func (GcmChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcmChannel)(nil)).Elem()
}

func (i GcmChannelArray) ToGcmChannelArrayOutput() GcmChannelArrayOutput {
	return i.ToGcmChannelArrayOutputWithContext(context.Background())
}

func (i GcmChannelArray) ToGcmChannelArrayOutputWithContext(ctx context.Context) GcmChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcmChannelArrayOutput)
}

// GcmChannelMapInput is an input type that accepts GcmChannelMap and GcmChannelMapOutput values.
// You can construct a concrete instance of `GcmChannelMapInput` via:
//
//	GcmChannelMap{ "key": GcmChannelArgs{...} }
type GcmChannelMapInput interface {
	pulumi.Input

	ToGcmChannelMapOutput() GcmChannelMapOutput
	ToGcmChannelMapOutputWithContext(context.Context) GcmChannelMapOutput
}

type GcmChannelMap map[string]GcmChannelInput

func (GcmChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcmChannel)(nil)).Elem()
}

func (i GcmChannelMap) ToGcmChannelMapOutput() GcmChannelMapOutput {
	return i.ToGcmChannelMapOutputWithContext(context.Background())
}

func (i GcmChannelMap) ToGcmChannelMapOutputWithContext(ctx context.Context) GcmChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcmChannelMapOutput)
}

type GcmChannelOutput struct{ *pulumi.OutputState }

func (GcmChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcmChannel)(nil)).Elem()
}

func (o GcmChannelOutput) ToGcmChannelOutput() GcmChannelOutput {
	return o
}

func (o GcmChannelOutput) ToGcmChannelOutputWithContext(ctx context.Context) GcmChannelOutput {
	return o
}

// Platform credential API key from Google.
func (o GcmChannelOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcmChannel) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// The application ID.
func (o GcmChannelOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *GcmChannel) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

func (o GcmChannelOutput) DefaultAuthenticationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcmChannel) pulumi.StringPtrOutput { return v.DefaultAuthenticationMethod }).(pulumi.StringPtrOutput)
}

// Whether the channel is enabled or disabled. Defaults to `true`.
func (o GcmChannelOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcmChannel) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o GcmChannelOutput) ServiceJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcmChannel) pulumi.StringPtrOutput { return v.ServiceJson }).(pulumi.StringPtrOutput)
}

type GcmChannelArrayOutput struct{ *pulumi.OutputState }

func (GcmChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcmChannel)(nil)).Elem()
}

func (o GcmChannelArrayOutput) ToGcmChannelArrayOutput() GcmChannelArrayOutput {
	return o
}

func (o GcmChannelArrayOutput) ToGcmChannelArrayOutputWithContext(ctx context.Context) GcmChannelArrayOutput {
	return o
}

func (o GcmChannelArrayOutput) Index(i pulumi.IntInput) GcmChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcmChannel {
		return vs[0].([]*GcmChannel)[vs[1].(int)]
	}).(GcmChannelOutput)
}

type GcmChannelMapOutput struct{ *pulumi.OutputState }

func (GcmChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcmChannel)(nil)).Elem()
}

func (o GcmChannelMapOutput) ToGcmChannelMapOutput() GcmChannelMapOutput {
	return o
}

func (o GcmChannelMapOutput) ToGcmChannelMapOutputWithContext(ctx context.Context) GcmChannelMapOutput {
	return o
}

func (o GcmChannelMapOutput) MapIndex(k pulumi.StringInput) GcmChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcmChannel {
		return vs[0].(map[string]*GcmChannel)[vs[1].(string)]
	}).(GcmChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcmChannelInput)(nil)).Elem(), &GcmChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcmChannelArrayInput)(nil)).Elem(), GcmChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcmChannelMapInput)(nil)).Elem(), GcmChannelMap{})
	pulumi.RegisterOutputType(GcmChannelOutput{})
	pulumi.RegisterOutputType(GcmChannelArrayOutput{})
	pulumi.RegisterOutputType(GcmChannelMapOutput{})
}
