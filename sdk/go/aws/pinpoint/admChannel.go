// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AdmChannel struct {
	pulumi.CustomResourceState

	ApplicationId pulumi.StringOutput  `pulumi:"applicationId"`
	ClientId      pulumi.StringOutput  `pulumi:"clientId"`
	ClientSecret  pulumi.StringOutput  `pulumi:"clientSecret"`
	Enabled       pulumi.BoolPtrOutput `pulumi:"enabled"`
}

// NewAdmChannel registers a new resource with the given unique name, arguments, and options.
func NewAdmChannel(ctx *pulumi.Context,
	name string, args *AdmChannelArgs, opts ...pulumi.ResourceOption) (*AdmChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.ClientId != nil {
		args.ClientId = pulumi.ToSecret(args.ClientId).(pulumi.StringInput)
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientId",
		"clientSecret",
	})
	opts = append(opts, secrets)
	var resource AdmChannel
	err := ctx.RegisterResource("aws:pinpoint/admChannel:AdmChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdmChannel gets an existing AdmChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdmChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdmChannelState, opts ...pulumi.ResourceOption) (*AdmChannel, error) {
	var resource AdmChannel
	err := ctx.ReadResource("aws:pinpoint/admChannel:AdmChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdmChannel resources.
type admChannelState struct {
	ApplicationId *string `pulumi:"applicationId"`
	ClientId      *string `pulumi:"clientId"`
	ClientSecret  *string `pulumi:"clientSecret"`
	Enabled       *bool   `pulumi:"enabled"`
}

type AdmChannelState struct {
	ApplicationId pulumi.StringPtrInput
	ClientId      pulumi.StringPtrInput
	ClientSecret  pulumi.StringPtrInput
	Enabled       pulumi.BoolPtrInput
}

func (AdmChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*admChannelState)(nil)).Elem()
}

type admChannelArgs struct {
	ApplicationId string `pulumi:"applicationId"`
	ClientId      string `pulumi:"clientId"`
	ClientSecret  string `pulumi:"clientSecret"`
	Enabled       *bool  `pulumi:"enabled"`
}

// The set of arguments for constructing a AdmChannel resource.
type AdmChannelArgs struct {
	ApplicationId pulumi.StringInput
	ClientId      pulumi.StringInput
	ClientSecret  pulumi.StringInput
	Enabled       pulumi.BoolPtrInput
}

func (AdmChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*admChannelArgs)(nil)).Elem()
}

type AdmChannelInput interface {
	pulumi.Input

	ToAdmChannelOutput() AdmChannelOutput
	ToAdmChannelOutputWithContext(ctx context.Context) AdmChannelOutput
}

func (*AdmChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**AdmChannel)(nil)).Elem()
}

func (i *AdmChannel) ToAdmChannelOutput() AdmChannelOutput {
	return i.ToAdmChannelOutputWithContext(context.Background())
}

func (i *AdmChannel) ToAdmChannelOutputWithContext(ctx context.Context) AdmChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdmChannelOutput)
}

// AdmChannelArrayInput is an input type that accepts AdmChannelArray and AdmChannelArrayOutput values.
// You can construct a concrete instance of `AdmChannelArrayInput` via:
//
//	AdmChannelArray{ AdmChannelArgs{...} }
type AdmChannelArrayInput interface {
	pulumi.Input

	ToAdmChannelArrayOutput() AdmChannelArrayOutput
	ToAdmChannelArrayOutputWithContext(context.Context) AdmChannelArrayOutput
}

type AdmChannelArray []AdmChannelInput

func (AdmChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdmChannel)(nil)).Elem()
}

func (i AdmChannelArray) ToAdmChannelArrayOutput() AdmChannelArrayOutput {
	return i.ToAdmChannelArrayOutputWithContext(context.Background())
}

func (i AdmChannelArray) ToAdmChannelArrayOutputWithContext(ctx context.Context) AdmChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdmChannelArrayOutput)
}

// AdmChannelMapInput is an input type that accepts AdmChannelMap and AdmChannelMapOutput values.
// You can construct a concrete instance of `AdmChannelMapInput` via:
//
//	AdmChannelMap{ "key": AdmChannelArgs{...} }
type AdmChannelMapInput interface {
	pulumi.Input

	ToAdmChannelMapOutput() AdmChannelMapOutput
	ToAdmChannelMapOutputWithContext(context.Context) AdmChannelMapOutput
}

type AdmChannelMap map[string]AdmChannelInput

func (AdmChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdmChannel)(nil)).Elem()
}

func (i AdmChannelMap) ToAdmChannelMapOutput() AdmChannelMapOutput {
	return i.ToAdmChannelMapOutputWithContext(context.Background())
}

func (i AdmChannelMap) ToAdmChannelMapOutputWithContext(ctx context.Context) AdmChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdmChannelMapOutput)
}

type AdmChannelOutput struct{ *pulumi.OutputState }

func (AdmChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdmChannel)(nil)).Elem()
}

func (o AdmChannelOutput) ToAdmChannelOutput() AdmChannelOutput {
	return o
}

func (o AdmChannelOutput) ToAdmChannelOutputWithContext(ctx context.Context) AdmChannelOutput {
	return o
}

func (o AdmChannelOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AdmChannel) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

func (o AdmChannelOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *AdmChannel) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

func (o AdmChannelOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *AdmChannel) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

func (o AdmChannelOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdmChannel) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AdmChannelArrayOutput struct{ *pulumi.OutputState }

func (AdmChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdmChannel)(nil)).Elem()
}

func (o AdmChannelArrayOutput) ToAdmChannelArrayOutput() AdmChannelArrayOutput {
	return o
}

func (o AdmChannelArrayOutput) ToAdmChannelArrayOutputWithContext(ctx context.Context) AdmChannelArrayOutput {
	return o
}

func (o AdmChannelArrayOutput) Index(i pulumi.IntInput) AdmChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdmChannel {
		return vs[0].([]*AdmChannel)[vs[1].(int)]
	}).(AdmChannelOutput)
}

type AdmChannelMapOutput struct{ *pulumi.OutputState }

func (AdmChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdmChannel)(nil)).Elem()
}

func (o AdmChannelMapOutput) ToAdmChannelMapOutput() AdmChannelMapOutput {
	return o
}

func (o AdmChannelMapOutput) ToAdmChannelMapOutputWithContext(ctx context.Context) AdmChannelMapOutput {
	return o
}

func (o AdmChannelMapOutput) MapIndex(k pulumi.StringInput) AdmChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdmChannel {
		return vs[0].(map[string]*AdmChannel)[vs[1].(string)]
	}).(AdmChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdmChannelInput)(nil)).Elem(), &AdmChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdmChannelArrayInput)(nil)).Elem(), AdmChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdmChannelMapInput)(nil)).Elem(), AdmChannelMap{})
	pulumi.RegisterOutputType(AdmChannelOutput{})
	pulumi.RegisterOutputType(AdmChannelArrayOutput{})
	pulumi.RegisterOutputType(AdmChannelMapOutput{})
}
