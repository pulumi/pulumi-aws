// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventStream struct {
	pulumi.CustomResourceState

	ApplicationId        pulumi.StringOutput `pulumi:"applicationId"`
	DestinationStreamArn pulumi.StringOutput `pulumi:"destinationStreamArn"`
	RoleArn              pulumi.StringOutput `pulumi:"roleArn"`
}

// NewEventStream registers a new resource with the given unique name, arguments, and options.
func NewEventStream(ctx *pulumi.Context,
	name string, args *EventStreamArgs, opts ...pulumi.ResourceOption) (*EventStream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.DestinationStreamArn == nil {
		return nil, errors.New("invalid value for required argument 'DestinationStreamArn'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource EventStream
	err := ctx.RegisterResource("aws:pinpoint/eventStream:EventStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventStream gets an existing EventStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventStreamState, opts ...pulumi.ResourceOption) (*EventStream, error) {
	var resource EventStream
	err := ctx.ReadResource("aws:pinpoint/eventStream:EventStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventStream resources.
type eventStreamState struct {
	ApplicationId        *string `pulumi:"applicationId"`
	DestinationStreamArn *string `pulumi:"destinationStreamArn"`
	RoleArn              *string `pulumi:"roleArn"`
}

type EventStreamState struct {
	ApplicationId        pulumi.StringPtrInput
	DestinationStreamArn pulumi.StringPtrInput
	RoleArn              pulumi.StringPtrInput
}

func (EventStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventStreamState)(nil)).Elem()
}

type eventStreamArgs struct {
	ApplicationId        string `pulumi:"applicationId"`
	DestinationStreamArn string `pulumi:"destinationStreamArn"`
	RoleArn              string `pulumi:"roleArn"`
}

// The set of arguments for constructing a EventStream resource.
type EventStreamArgs struct {
	ApplicationId        pulumi.StringInput
	DestinationStreamArn pulumi.StringInput
	RoleArn              pulumi.StringInput
}

func (EventStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventStreamArgs)(nil)).Elem()
}

type EventStreamInput interface {
	pulumi.Input

	ToEventStreamOutput() EventStreamOutput
	ToEventStreamOutputWithContext(ctx context.Context) EventStreamOutput
}

func (*EventStream) ElementType() reflect.Type {
	return reflect.TypeOf((**EventStream)(nil)).Elem()
}

func (i *EventStream) ToEventStreamOutput() EventStreamOutput {
	return i.ToEventStreamOutputWithContext(context.Background())
}

func (i *EventStream) ToEventStreamOutputWithContext(ctx context.Context) EventStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventStreamOutput)
}

// EventStreamArrayInput is an input type that accepts EventStreamArray and EventStreamArrayOutput values.
// You can construct a concrete instance of `EventStreamArrayInput` via:
//
//	EventStreamArray{ EventStreamArgs{...} }
type EventStreamArrayInput interface {
	pulumi.Input

	ToEventStreamArrayOutput() EventStreamArrayOutput
	ToEventStreamArrayOutputWithContext(context.Context) EventStreamArrayOutput
}

type EventStreamArray []EventStreamInput

func (EventStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventStream)(nil)).Elem()
}

func (i EventStreamArray) ToEventStreamArrayOutput() EventStreamArrayOutput {
	return i.ToEventStreamArrayOutputWithContext(context.Background())
}

func (i EventStreamArray) ToEventStreamArrayOutputWithContext(ctx context.Context) EventStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventStreamArrayOutput)
}

// EventStreamMapInput is an input type that accepts EventStreamMap and EventStreamMapOutput values.
// You can construct a concrete instance of `EventStreamMapInput` via:
//
//	EventStreamMap{ "key": EventStreamArgs{...} }
type EventStreamMapInput interface {
	pulumi.Input

	ToEventStreamMapOutput() EventStreamMapOutput
	ToEventStreamMapOutputWithContext(context.Context) EventStreamMapOutput
}

type EventStreamMap map[string]EventStreamInput

func (EventStreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventStream)(nil)).Elem()
}

func (i EventStreamMap) ToEventStreamMapOutput() EventStreamMapOutput {
	return i.ToEventStreamMapOutputWithContext(context.Background())
}

func (i EventStreamMap) ToEventStreamMapOutputWithContext(ctx context.Context) EventStreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventStreamMapOutput)
}

type EventStreamOutput struct{ *pulumi.OutputState }

func (EventStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventStream)(nil)).Elem()
}

func (o EventStreamOutput) ToEventStreamOutput() EventStreamOutput {
	return o
}

func (o EventStreamOutput) ToEventStreamOutputWithContext(ctx context.Context) EventStreamOutput {
	return o
}

func (o EventStreamOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventStream) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

func (o EventStreamOutput) DestinationStreamArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventStream) pulumi.StringOutput { return v.DestinationStreamArn }).(pulumi.StringOutput)
}

func (o EventStreamOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventStream) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

type EventStreamArrayOutput struct{ *pulumi.OutputState }

func (EventStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventStream)(nil)).Elem()
}

func (o EventStreamArrayOutput) ToEventStreamArrayOutput() EventStreamArrayOutput {
	return o
}

func (o EventStreamArrayOutput) ToEventStreamArrayOutputWithContext(ctx context.Context) EventStreamArrayOutput {
	return o
}

func (o EventStreamArrayOutput) Index(i pulumi.IntInput) EventStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventStream {
		return vs[0].([]*EventStream)[vs[1].(int)]
	}).(EventStreamOutput)
}

type EventStreamMapOutput struct{ *pulumi.OutputState }

func (EventStreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventStream)(nil)).Elem()
}

func (o EventStreamMapOutput) ToEventStreamMapOutput() EventStreamMapOutput {
	return o
}

func (o EventStreamMapOutput) ToEventStreamMapOutputWithContext(ctx context.Context) EventStreamMapOutput {
	return o
}

func (o EventStreamMapOutput) MapIndex(k pulumi.StringInput) EventStreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventStream {
		return vs[0].(map[string]*EventStream)[vs[1].(string)]
	}).(EventStreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventStreamInput)(nil)).Elem(), &EventStream{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventStreamArrayInput)(nil)).Elem(), EventStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventStreamMapInput)(nil)).Elem(), EventStreamMap{})
	pulumi.RegisterOutputType(EventStreamOutput{})
	pulumi.RegisterOutputType(EventStreamArrayOutput{})
	pulumi.RegisterOutputType(EventStreamMapOutput{})
}
