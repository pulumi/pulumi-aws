// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Pinpoint Email Template resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/pinpoint"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pinpoint.NewEmailTemplate(ctx, "test", &pinpoint.EmailTemplateArgs{
//				TemplateName: pulumi.String("testing"),
//				EmailTemplates: pinpoint.EmailTemplateEmailTemplateArray{
//					&pinpoint.EmailTemplateEmailTemplateArgs{
//						Subject:  pulumi.String("testing"),
//						TextPart: pulumi.String("we are testing template text part"),
//						Headers: pinpoint.EmailTemplateEmailTemplateHeaderArray{
//							&pinpoint.EmailTemplateEmailTemplateHeaderArgs{
//								Name:  pulumi.String("testingname"),
//								Value: pulumi.String("testingvalue"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Pinpoint Email Template using the `template_name`. For example:
//
// ```sh
// $ pulumi import aws:pinpoint/emailTemplate:EmailTemplate reset template_name
// ```
type EmailTemplate struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the message template.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Specifies the content and settings for a message template that can be used in messages that are sent through the email channel. See Email Template
	EmailTemplates EmailTemplateEmailTemplateArrayOutput `pulumi:"emailTemplates"`
	Tags           pulumi.StringMapOutput                `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewEmailTemplate registers a new resource with the given unique name, arguments, and options.
func NewEmailTemplate(ctx *pulumi.Context,
	name string, args *EmailTemplateArgs, opts ...pulumi.ResourceOption) (*EmailTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailTemplate
	err := ctx.RegisterResource("aws:pinpoint/emailTemplate:EmailTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailTemplate gets an existing EmailTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailTemplateState, opts ...pulumi.ResourceOption) (*EmailTemplate, error) {
	var resource EmailTemplate
	err := ctx.ReadResource("aws:pinpoint/emailTemplate:EmailTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailTemplate resources.
type emailTemplateState struct {
	// Amazon Resource Name (ARN) of the message template.
	Arn *string `pulumi:"arn"`
	// Specifies the content and settings for a message template that can be used in messages that are sent through the email channel. See Email Template
	EmailTemplates []EmailTemplateEmailTemplate `pulumi:"emailTemplates"`
	Tags           map[string]string            `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
	TemplateName *string `pulumi:"templateName"`
}

type EmailTemplateState struct {
	// Amazon Resource Name (ARN) of the message template.
	Arn pulumi.StringPtrInput
	// Specifies the content and settings for a message template that can be used in messages that are sent through the email channel. See Email Template
	EmailTemplates EmailTemplateEmailTemplateArrayInput
	Tags           pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
	TemplateName pulumi.StringPtrInput
}

func (EmailTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailTemplateState)(nil)).Elem()
}

type emailTemplateArgs struct {
	// Specifies the content and settings for a message template that can be used in messages that are sent through the email channel. See Email Template
	EmailTemplates []EmailTemplateEmailTemplate `pulumi:"emailTemplates"`
	Tags           map[string]string            `pulumi:"tags"`
	// name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a EmailTemplate resource.
type EmailTemplateArgs struct {
	// Specifies the content and settings for a message template that can be used in messages that are sent through the email channel. See Email Template
	EmailTemplates EmailTemplateEmailTemplateArrayInput
	Tags           pulumi.StringMapInput
	// name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
	TemplateName pulumi.StringInput
}

func (EmailTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailTemplateArgs)(nil)).Elem()
}

type EmailTemplateInput interface {
	pulumi.Input

	ToEmailTemplateOutput() EmailTemplateOutput
	ToEmailTemplateOutputWithContext(ctx context.Context) EmailTemplateOutput
}

func (*EmailTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailTemplate)(nil)).Elem()
}

func (i *EmailTemplate) ToEmailTemplateOutput() EmailTemplateOutput {
	return i.ToEmailTemplateOutputWithContext(context.Background())
}

func (i *EmailTemplate) ToEmailTemplateOutputWithContext(ctx context.Context) EmailTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailTemplateOutput)
}

// EmailTemplateArrayInput is an input type that accepts EmailTemplateArray and EmailTemplateArrayOutput values.
// You can construct a concrete instance of `EmailTemplateArrayInput` via:
//
//	EmailTemplateArray{ EmailTemplateArgs{...} }
type EmailTemplateArrayInput interface {
	pulumi.Input

	ToEmailTemplateArrayOutput() EmailTemplateArrayOutput
	ToEmailTemplateArrayOutputWithContext(context.Context) EmailTemplateArrayOutput
}

type EmailTemplateArray []EmailTemplateInput

func (EmailTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailTemplate)(nil)).Elem()
}

func (i EmailTemplateArray) ToEmailTemplateArrayOutput() EmailTemplateArrayOutput {
	return i.ToEmailTemplateArrayOutputWithContext(context.Background())
}

func (i EmailTemplateArray) ToEmailTemplateArrayOutputWithContext(ctx context.Context) EmailTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailTemplateArrayOutput)
}

// EmailTemplateMapInput is an input type that accepts EmailTemplateMap and EmailTemplateMapOutput values.
// You can construct a concrete instance of `EmailTemplateMapInput` via:
//
//	EmailTemplateMap{ "key": EmailTemplateArgs{...} }
type EmailTemplateMapInput interface {
	pulumi.Input

	ToEmailTemplateMapOutput() EmailTemplateMapOutput
	ToEmailTemplateMapOutputWithContext(context.Context) EmailTemplateMapOutput
}

type EmailTemplateMap map[string]EmailTemplateInput

func (EmailTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailTemplate)(nil)).Elem()
}

func (i EmailTemplateMap) ToEmailTemplateMapOutput() EmailTemplateMapOutput {
	return i.ToEmailTemplateMapOutputWithContext(context.Background())
}

func (i EmailTemplateMap) ToEmailTemplateMapOutputWithContext(ctx context.Context) EmailTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailTemplateMapOutput)
}

type EmailTemplateOutput struct{ *pulumi.OutputState }

func (EmailTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailTemplate)(nil)).Elem()
}

func (o EmailTemplateOutput) ToEmailTemplateOutput() EmailTemplateOutput {
	return o
}

func (o EmailTemplateOutput) ToEmailTemplateOutputWithContext(ctx context.Context) EmailTemplateOutput {
	return o
}

// Amazon Resource Name (ARN) of the message template.
func (o EmailTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailTemplate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Specifies the content and settings for a message template that can be used in messages that are sent through the email channel. See Email Template
func (o EmailTemplateOutput) EmailTemplates() EmailTemplateEmailTemplateArrayOutput {
	return o.ApplyT(func(v *EmailTemplate) EmailTemplateEmailTemplateArrayOutput { return v.EmailTemplates }).(EmailTemplateEmailTemplateArrayOutput)
}

func (o EmailTemplateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EmailTemplate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o EmailTemplateOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EmailTemplate) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
func (o EmailTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailTemplate) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

type EmailTemplateArrayOutput struct{ *pulumi.OutputState }

func (EmailTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailTemplate)(nil)).Elem()
}

func (o EmailTemplateArrayOutput) ToEmailTemplateArrayOutput() EmailTemplateArrayOutput {
	return o
}

func (o EmailTemplateArrayOutput) ToEmailTemplateArrayOutputWithContext(ctx context.Context) EmailTemplateArrayOutput {
	return o
}

func (o EmailTemplateArrayOutput) Index(i pulumi.IntInput) EmailTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailTemplate {
		return vs[0].([]*EmailTemplate)[vs[1].(int)]
	}).(EmailTemplateOutput)
}

type EmailTemplateMapOutput struct{ *pulumi.OutputState }

func (EmailTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailTemplate)(nil)).Elem()
}

func (o EmailTemplateMapOutput) ToEmailTemplateMapOutput() EmailTemplateMapOutput {
	return o
}

func (o EmailTemplateMapOutput) ToEmailTemplateMapOutputWithContext(ctx context.Context) EmailTemplateMapOutput {
	return o
}

func (o EmailTemplateMapOutput) MapIndex(k pulumi.StringInput) EmailTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailTemplate {
		return vs[0].(map[string]*EmailTemplate)[vs[1].(string)]
	}).(EmailTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailTemplateInput)(nil)).Elem(), &EmailTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailTemplateArrayInput)(nil)).Elem(), EmailTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailTemplateMapInput)(nil)).Elem(), EmailTemplateMap{})
	pulumi.RegisterOutputType(EmailTemplateOutput{})
	pulumi.RegisterOutputType(EmailTemplateArrayOutput{})
	pulumi.RegisterOutputType(EmailTemplateMapOutput{})
}
