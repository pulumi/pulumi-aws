// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoveryreadiness

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ResourceSet struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput            `pulumi:"arn"`
	ResourceSetName pulumi.StringOutput            `pulumi:"resourceSetName"`
	ResourceSetType pulumi.StringOutput            `pulumi:"resourceSetType"`
	Resources       ResourceSetResourceArrayOutput `pulumi:"resources"`
	Tags            pulumi.StringMapOutput         `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput         `pulumi:"tagsAll"`
}

// NewResourceSet registers a new resource with the given unique name, arguments, and options.
func NewResourceSet(ctx *pulumi.Context,
	name string, args *ResourceSetArgs, opts ...pulumi.ResourceOption) (*ResourceSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceSetName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceSetName'")
	}
	if args.ResourceSetType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceSetType'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	var resource ResourceSet
	err := ctx.RegisterResource("aws:route53recoveryreadiness/resourceSet:ResourceSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceSet gets an existing ResourceSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceSetState, opts ...pulumi.ResourceOption) (*ResourceSet, error) {
	var resource ResourceSet
	err := ctx.ReadResource("aws:route53recoveryreadiness/resourceSet:ResourceSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceSet resources.
type resourceSetState struct {
	Arn             *string               `pulumi:"arn"`
	ResourceSetName *string               `pulumi:"resourceSetName"`
	ResourceSetType *string               `pulumi:"resourceSetType"`
	Resources       []ResourceSetResource `pulumi:"resources"`
	Tags            map[string]string     `pulumi:"tags"`
	TagsAll         map[string]string     `pulumi:"tagsAll"`
}

type ResourceSetState struct {
	Arn             pulumi.StringPtrInput
	ResourceSetName pulumi.StringPtrInput
	ResourceSetType pulumi.StringPtrInput
	Resources       ResourceSetResourceArrayInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
}

func (ResourceSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSetState)(nil)).Elem()
}

type resourceSetArgs struct {
	ResourceSetName string                `pulumi:"resourceSetName"`
	ResourceSetType string                `pulumi:"resourceSetType"`
	Resources       []ResourceSetResource `pulumi:"resources"`
	Tags            map[string]string     `pulumi:"tags"`
}

// The set of arguments for constructing a ResourceSet resource.
type ResourceSetArgs struct {
	ResourceSetName pulumi.StringInput
	ResourceSetType pulumi.StringInput
	Resources       ResourceSetResourceArrayInput
	Tags            pulumi.StringMapInput
}

func (ResourceSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSetArgs)(nil)).Elem()
}

type ResourceSetInput interface {
	pulumi.Input

	ToResourceSetOutput() ResourceSetOutput
	ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput
}

func (*ResourceSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSet)(nil)).Elem()
}

func (i *ResourceSet) ToResourceSetOutput() ResourceSetOutput {
	return i.ToResourceSetOutputWithContext(context.Background())
}

func (i *ResourceSet) ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetOutput)
}

// ResourceSetArrayInput is an input type that accepts ResourceSetArray and ResourceSetArrayOutput values.
// You can construct a concrete instance of `ResourceSetArrayInput` via:
//
//	ResourceSetArray{ ResourceSetArgs{...} }
type ResourceSetArrayInput interface {
	pulumi.Input

	ToResourceSetArrayOutput() ResourceSetArrayOutput
	ToResourceSetArrayOutputWithContext(context.Context) ResourceSetArrayOutput
}

type ResourceSetArray []ResourceSetInput

func (ResourceSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSet)(nil)).Elem()
}

func (i ResourceSetArray) ToResourceSetArrayOutput() ResourceSetArrayOutput {
	return i.ToResourceSetArrayOutputWithContext(context.Background())
}

func (i ResourceSetArray) ToResourceSetArrayOutputWithContext(ctx context.Context) ResourceSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetArrayOutput)
}

// ResourceSetMapInput is an input type that accepts ResourceSetMap and ResourceSetMapOutput values.
// You can construct a concrete instance of `ResourceSetMapInput` via:
//
//	ResourceSetMap{ "key": ResourceSetArgs{...} }
type ResourceSetMapInput interface {
	pulumi.Input

	ToResourceSetMapOutput() ResourceSetMapOutput
	ToResourceSetMapOutputWithContext(context.Context) ResourceSetMapOutput
}

type ResourceSetMap map[string]ResourceSetInput

func (ResourceSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSet)(nil)).Elem()
}

func (i ResourceSetMap) ToResourceSetMapOutput() ResourceSetMapOutput {
	return i.ToResourceSetMapOutputWithContext(context.Background())
}

func (i ResourceSetMap) ToResourceSetMapOutputWithContext(ctx context.Context) ResourceSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetMapOutput)
}

type ResourceSetOutput struct{ *pulumi.OutputState }

func (ResourceSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSet)(nil)).Elem()
}

func (o ResourceSetOutput) ToResourceSetOutput() ResourceSetOutput {
	return o
}

func (o ResourceSetOutput) ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput {
	return o
}

func (o ResourceSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ResourceSetOutput) ResourceSetName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringOutput { return v.ResourceSetName }).(pulumi.StringOutput)
}

func (o ResourceSetOutput) ResourceSetType() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringOutput { return v.ResourceSetType }).(pulumi.StringOutput)
}

func (o ResourceSetOutput) Resources() ResourceSetResourceArrayOutput {
	return o.ApplyT(func(v *ResourceSet) ResourceSetResourceArrayOutput { return v.Resources }).(ResourceSetResourceArrayOutput)
}

func (o ResourceSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ResourceSetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ResourceSetArrayOutput struct{ *pulumi.OutputState }

func (ResourceSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSet)(nil)).Elem()
}

func (o ResourceSetArrayOutput) ToResourceSetArrayOutput() ResourceSetArrayOutput {
	return o
}

func (o ResourceSetArrayOutput) ToResourceSetArrayOutputWithContext(ctx context.Context) ResourceSetArrayOutput {
	return o
}

func (o ResourceSetArrayOutput) Index(i pulumi.IntInput) ResourceSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceSet {
		return vs[0].([]*ResourceSet)[vs[1].(int)]
	}).(ResourceSetOutput)
}

type ResourceSetMapOutput struct{ *pulumi.OutputState }

func (ResourceSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSet)(nil)).Elem()
}

func (o ResourceSetMapOutput) ToResourceSetMapOutput() ResourceSetMapOutput {
	return o
}

func (o ResourceSetMapOutput) ToResourceSetMapOutputWithContext(ctx context.Context) ResourceSetMapOutput {
	return o
}

func (o ResourceSetMapOutput) MapIndex(k pulumi.StringInput) ResourceSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceSet {
		return vs[0].(map[string]*ResourceSet)[vs[1].(string)]
	}).(ResourceSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetInput)(nil)).Elem(), &ResourceSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetArrayInput)(nil)).Elem(), ResourceSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSetMapInput)(nil)).Elem(), ResourceSetMap{})
	pulumi.RegisterOutputType(ResourceSetOutput{})
	pulumi.RegisterOutputType(ResourceSetArrayOutput{})
	pulumi.RegisterOutputType(ResourceSetMapOutput{})
}
