// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoveryreadiness

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AWS Route 53 Recovery Readiness Recovery Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53recoveryreadiness"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := route53recoveryreadiness.NewRecoveryGroup(ctx, "example", &route53recoveryreadiness.RecoveryGroupArgs{
//				RecoveryGroupName: pulumi.String("my-high-availability-app"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Route53 Recovery Readiness recovery groups can be imported via the recovery group name, e.g.,
//
// ```sh
//
//	$ pulumi import aws:route53recoveryreadiness/recoveryGroup:RecoveryGroup my-high-availability-app my-high-availability-app
//
// ```
type RecoveryGroup struct {
	pulumi.CustomResourceState

	// ARN of the recovery group
	Arn pulumi.StringOutput `pulumi:"arn"`
	// List of cell arns to add as nested fault domains within this recovery group
	Cells pulumi.StringArrayOutput `pulumi:"cells"`
	// A unique name describing the recovery group.
	RecoveryGroupName pulumi.StringOutput `pulumi:"recoveryGroupName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewRecoveryGroup registers a new resource with the given unique name, arguments, and options.
func NewRecoveryGroup(ctx *pulumi.Context,
	name string, args *RecoveryGroupArgs, opts ...pulumi.ResourceOption) (*RecoveryGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecoveryGroupName == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryGroupName'")
	}
	var resource RecoveryGroup
	err := ctx.RegisterResource("aws:route53recoveryreadiness/recoveryGroup:RecoveryGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecoveryGroup gets an existing RecoveryGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecoveryGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecoveryGroupState, opts ...pulumi.ResourceOption) (*RecoveryGroup, error) {
	var resource RecoveryGroup
	err := ctx.ReadResource("aws:route53recoveryreadiness/recoveryGroup:RecoveryGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecoveryGroup resources.
type recoveryGroupState struct {
	// ARN of the recovery group
	Arn *string `pulumi:"arn"`
	// List of cell arns to add as nested fault domains within this recovery group
	Cells []string `pulumi:"cells"`
	// A unique name describing the recovery group.
	RecoveryGroupName *string `pulumi:"recoveryGroupName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RecoveryGroupState struct {
	// ARN of the recovery group
	Arn pulumi.StringPtrInput
	// List of cell arns to add as nested fault domains within this recovery group
	Cells pulumi.StringArrayInput
	// A unique name describing the recovery group.
	RecoveryGroupName pulumi.StringPtrInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (RecoveryGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*recoveryGroupState)(nil)).Elem()
}

type recoveryGroupArgs struct {
	// List of cell arns to add as nested fault domains within this recovery group
	Cells []string `pulumi:"cells"`
	// A unique name describing the recovery group.
	RecoveryGroupName string `pulumi:"recoveryGroupName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RecoveryGroup resource.
type RecoveryGroupArgs struct {
	// List of cell arns to add as nested fault domains within this recovery group
	Cells pulumi.StringArrayInput
	// A unique name describing the recovery group.
	RecoveryGroupName pulumi.StringInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumi.StringMapInput
}

func (RecoveryGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recoveryGroupArgs)(nil)).Elem()
}

type RecoveryGroupInput interface {
	pulumi.Input

	ToRecoveryGroupOutput() RecoveryGroupOutput
	ToRecoveryGroupOutputWithContext(ctx context.Context) RecoveryGroupOutput
}

func (*RecoveryGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**RecoveryGroup)(nil)).Elem()
}

func (i *RecoveryGroup) ToRecoveryGroupOutput() RecoveryGroupOutput {
	return i.ToRecoveryGroupOutputWithContext(context.Background())
}

func (i *RecoveryGroup) ToRecoveryGroupOutputWithContext(ctx context.Context) RecoveryGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoveryGroupOutput)
}

// RecoveryGroupArrayInput is an input type that accepts RecoveryGroupArray and RecoveryGroupArrayOutput values.
// You can construct a concrete instance of `RecoveryGroupArrayInput` via:
//
//	RecoveryGroupArray{ RecoveryGroupArgs{...} }
type RecoveryGroupArrayInput interface {
	pulumi.Input

	ToRecoveryGroupArrayOutput() RecoveryGroupArrayOutput
	ToRecoveryGroupArrayOutputWithContext(context.Context) RecoveryGroupArrayOutput
}

type RecoveryGroupArray []RecoveryGroupInput

func (RecoveryGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecoveryGroup)(nil)).Elem()
}

func (i RecoveryGroupArray) ToRecoveryGroupArrayOutput() RecoveryGroupArrayOutput {
	return i.ToRecoveryGroupArrayOutputWithContext(context.Background())
}

func (i RecoveryGroupArray) ToRecoveryGroupArrayOutputWithContext(ctx context.Context) RecoveryGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoveryGroupArrayOutput)
}

// RecoveryGroupMapInput is an input type that accepts RecoveryGroupMap and RecoveryGroupMapOutput values.
// You can construct a concrete instance of `RecoveryGroupMapInput` via:
//
//	RecoveryGroupMap{ "key": RecoveryGroupArgs{...} }
type RecoveryGroupMapInput interface {
	pulumi.Input

	ToRecoveryGroupMapOutput() RecoveryGroupMapOutput
	ToRecoveryGroupMapOutputWithContext(context.Context) RecoveryGroupMapOutput
}

type RecoveryGroupMap map[string]RecoveryGroupInput

func (RecoveryGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecoveryGroup)(nil)).Elem()
}

func (i RecoveryGroupMap) ToRecoveryGroupMapOutput() RecoveryGroupMapOutput {
	return i.ToRecoveryGroupMapOutputWithContext(context.Background())
}

func (i RecoveryGroupMap) ToRecoveryGroupMapOutputWithContext(ctx context.Context) RecoveryGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoveryGroupMapOutput)
}

type RecoveryGroupOutput struct{ *pulumi.OutputState }

func (RecoveryGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecoveryGroup)(nil)).Elem()
}

func (o RecoveryGroupOutput) ToRecoveryGroupOutput() RecoveryGroupOutput {
	return o
}

func (o RecoveryGroupOutput) ToRecoveryGroupOutputWithContext(ctx context.Context) RecoveryGroupOutput {
	return o
}

// ARN of the recovery group
func (o RecoveryGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// List of cell arns to add as nested fault domains within this recovery group
func (o RecoveryGroupOutput) Cells() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecoveryGroup) pulumi.StringArrayOutput { return v.Cells }).(pulumi.StringArrayOutput)
}

// A unique name describing the recovery group.
func (o RecoveryGroupOutput) RecoveryGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoveryGroup) pulumi.StringOutput { return v.RecoveryGroupName }).(pulumi.StringOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
func (o RecoveryGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RecoveryGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RecoveryGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RecoveryGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type RecoveryGroupArrayOutput struct{ *pulumi.OutputState }

func (RecoveryGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecoveryGroup)(nil)).Elem()
}

func (o RecoveryGroupArrayOutput) ToRecoveryGroupArrayOutput() RecoveryGroupArrayOutput {
	return o
}

func (o RecoveryGroupArrayOutput) ToRecoveryGroupArrayOutputWithContext(ctx context.Context) RecoveryGroupArrayOutput {
	return o
}

func (o RecoveryGroupArrayOutput) Index(i pulumi.IntInput) RecoveryGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RecoveryGroup {
		return vs[0].([]*RecoveryGroup)[vs[1].(int)]
	}).(RecoveryGroupOutput)
}

type RecoveryGroupMapOutput struct{ *pulumi.OutputState }

func (RecoveryGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecoveryGroup)(nil)).Elem()
}

func (o RecoveryGroupMapOutput) ToRecoveryGroupMapOutput() RecoveryGroupMapOutput {
	return o
}

func (o RecoveryGroupMapOutput) ToRecoveryGroupMapOutputWithContext(ctx context.Context) RecoveryGroupMapOutput {
	return o
}

func (o RecoveryGroupMapOutput) MapIndex(k pulumi.StringInput) RecoveryGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RecoveryGroup {
		return vs[0].(map[string]*RecoveryGroup)[vs[1].(string)]
	}).(RecoveryGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecoveryGroupInput)(nil)).Elem(), &RecoveryGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecoveryGroupArrayInput)(nil)).Elem(), RecoveryGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecoveryGroupMapInput)(nil)).Elem(), RecoveryGroupMap{})
	pulumi.RegisterOutputType(RecoveryGroupOutput{})
	pulumi.RegisterOutputType(RecoveryGroupArrayOutput{})
	pulumi.RegisterOutputType(RecoveryGroupMapOutput{})
}
