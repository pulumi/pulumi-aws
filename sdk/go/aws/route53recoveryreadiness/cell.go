// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoveryreadiness

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AWS Route 53 Recovery Readiness Cell.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/route53recoveryreadiness"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := route53recoveryreadiness.NewCell(ctx, "example", &route53recoveryreadiness.CellArgs{
// 			CellName: pulumi.String("us-west-2-failover-cell"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Route53 Recovery Readiness cells can be imported via the cell name, e.g.,
//
// ```sh
//  $ pulumi import aws:route53recoveryreadiness/cell:Cell us-west-2-failover-cell us-west-2-failover-cell
// ```
type Cell struct {
	pulumi.CustomResourceState

	// ARN of the cell
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Unique name describing the cell.
	CellName pulumi.StringOutput `pulumi:"cellName"`
	// List of cell arns to add as nested fault domains within this cell.
	Cells pulumi.StringArrayOutput `pulumi:"cells"`
	// List of readiness scopes (recovery groups or cells) that contain this cell.
	ParentReadinessScopes pulumi.StringArrayOutput `pulumi:"parentReadinessScopes"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewCell registers a new resource with the given unique name, arguments, and options.
func NewCell(ctx *pulumi.Context,
	name string, args *CellArgs, opts ...pulumi.ResourceOption) (*Cell, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CellName == nil {
		return nil, errors.New("invalid value for required argument 'CellName'")
	}
	var resource Cell
	err := ctx.RegisterResource("aws:route53recoveryreadiness/cell:Cell", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCell gets an existing Cell resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCell(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CellState, opts ...pulumi.ResourceOption) (*Cell, error) {
	var resource Cell
	err := ctx.ReadResource("aws:route53recoveryreadiness/cell:Cell", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cell resources.
type cellState struct {
	// ARN of the cell
	Arn *string `pulumi:"arn"`
	// Unique name describing the cell.
	CellName *string `pulumi:"cellName"`
	// List of cell arns to add as nested fault domains within this cell.
	Cells []string `pulumi:"cells"`
	// List of readiness scopes (recovery groups or cells) that contain this cell.
	ParentReadinessScopes []string `pulumi:"parentReadinessScopes"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type CellState struct {
	// ARN of the cell
	Arn pulumi.StringPtrInput
	// Unique name describing the cell.
	CellName pulumi.StringPtrInput
	// List of cell arns to add as nested fault domains within this cell.
	Cells pulumi.StringArrayInput
	// List of readiness scopes (recovery groups or cells) that contain this cell.
	ParentReadinessScopes pulumi.StringArrayInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (CellState) ElementType() reflect.Type {
	return reflect.TypeOf((*cellState)(nil)).Elem()
}

type cellArgs struct {
	// Unique name describing the cell.
	CellName string `pulumi:"cellName"`
	// List of cell arns to add as nested fault domains within this cell.
	Cells []string `pulumi:"cells"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Cell resource.
type CellArgs struct {
	// Unique name describing the cell.
	CellName pulumi.StringInput
	// List of cell arns to add as nested fault domains within this cell.
	Cells pulumi.StringArrayInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (CellArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cellArgs)(nil)).Elem()
}

type CellInput interface {
	pulumi.Input

	ToCellOutput() CellOutput
	ToCellOutputWithContext(ctx context.Context) CellOutput
}

func (*Cell) ElementType() reflect.Type {
	return reflect.TypeOf((*Cell)(nil))
}

func (i *Cell) ToCellOutput() CellOutput {
	return i.ToCellOutputWithContext(context.Background())
}

func (i *Cell) ToCellOutputWithContext(ctx context.Context) CellOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellOutput)
}

func (i *Cell) ToCellPtrOutput() CellPtrOutput {
	return i.ToCellPtrOutputWithContext(context.Background())
}

func (i *Cell) ToCellPtrOutputWithContext(ctx context.Context) CellPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellPtrOutput)
}

type CellPtrInput interface {
	pulumi.Input

	ToCellPtrOutput() CellPtrOutput
	ToCellPtrOutputWithContext(ctx context.Context) CellPtrOutput
}

type cellPtrType CellArgs

func (*cellPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Cell)(nil))
}

func (i *cellPtrType) ToCellPtrOutput() CellPtrOutput {
	return i.ToCellPtrOutputWithContext(context.Background())
}

func (i *cellPtrType) ToCellPtrOutputWithContext(ctx context.Context) CellPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellPtrOutput)
}

// CellArrayInput is an input type that accepts CellArray and CellArrayOutput values.
// You can construct a concrete instance of `CellArrayInput` via:
//
//          CellArray{ CellArgs{...} }
type CellArrayInput interface {
	pulumi.Input

	ToCellArrayOutput() CellArrayOutput
	ToCellArrayOutputWithContext(context.Context) CellArrayOutput
}

type CellArray []CellInput

func (CellArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cell)(nil)).Elem()
}

func (i CellArray) ToCellArrayOutput() CellArrayOutput {
	return i.ToCellArrayOutputWithContext(context.Background())
}

func (i CellArray) ToCellArrayOutputWithContext(ctx context.Context) CellArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellArrayOutput)
}

// CellMapInput is an input type that accepts CellMap and CellMapOutput values.
// You can construct a concrete instance of `CellMapInput` via:
//
//          CellMap{ "key": CellArgs{...} }
type CellMapInput interface {
	pulumi.Input

	ToCellMapOutput() CellMapOutput
	ToCellMapOutputWithContext(context.Context) CellMapOutput
}

type CellMap map[string]CellInput

func (CellMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cell)(nil)).Elem()
}

func (i CellMap) ToCellMapOutput() CellMapOutput {
	return i.ToCellMapOutputWithContext(context.Background())
}

func (i CellMap) ToCellMapOutputWithContext(ctx context.Context) CellMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellMapOutput)
}

type CellOutput struct{ *pulumi.OutputState }

func (CellOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cell)(nil))
}

func (o CellOutput) ToCellOutput() CellOutput {
	return o
}

func (o CellOutput) ToCellOutputWithContext(ctx context.Context) CellOutput {
	return o
}

func (o CellOutput) ToCellPtrOutput() CellPtrOutput {
	return o.ToCellPtrOutputWithContext(context.Background())
}

func (o CellOutput) ToCellPtrOutputWithContext(ctx context.Context) CellPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Cell) *Cell {
		return &v
	}).(CellPtrOutput)
}

type CellPtrOutput struct{ *pulumi.OutputState }

func (CellPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cell)(nil))
}

func (o CellPtrOutput) ToCellPtrOutput() CellPtrOutput {
	return o
}

func (o CellPtrOutput) ToCellPtrOutputWithContext(ctx context.Context) CellPtrOutput {
	return o
}

func (o CellPtrOutput) Elem() CellOutput {
	return o.ApplyT(func(v *Cell) Cell {
		if v != nil {
			return *v
		}
		var ret Cell
		return ret
	}).(CellOutput)
}

type CellArrayOutput struct{ *pulumi.OutputState }

func (CellArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Cell)(nil))
}

func (o CellArrayOutput) ToCellArrayOutput() CellArrayOutput {
	return o
}

func (o CellArrayOutput) ToCellArrayOutputWithContext(ctx context.Context) CellArrayOutput {
	return o
}

func (o CellArrayOutput) Index(i pulumi.IntInput) CellOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Cell {
		return vs[0].([]Cell)[vs[1].(int)]
	}).(CellOutput)
}

type CellMapOutput struct{ *pulumi.OutputState }

func (CellMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Cell)(nil))
}

func (o CellMapOutput) ToCellMapOutput() CellMapOutput {
	return o
}

func (o CellMapOutput) ToCellMapOutputWithContext(ctx context.Context) CellMapOutput {
	return o
}

func (o CellMapOutput) MapIndex(k pulumi.StringInput) CellOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Cell {
		return vs[0].(map[string]Cell)[vs[1].(string)]
	}).(CellOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CellInput)(nil)).Elem(), &Cell{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellPtrInput)(nil)).Elem(), &Cell{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellArrayInput)(nil)).Elem(), CellArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellMapInput)(nil)).Elem(), CellMap{})
	pulumi.RegisterOutputType(CellOutput{})
	pulumi.RegisterOutputType(CellPtrOutput{})
	pulumi.RegisterOutputType(CellArrayOutput{})
	pulumi.RegisterOutputType(CellMapOutput{})
}
