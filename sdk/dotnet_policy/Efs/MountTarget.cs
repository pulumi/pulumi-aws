// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Efs
{
    [PolicyResourceType("aws:efs/mountTarget:MountTarget")]
    public sealed class MountTarget : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The unique and consistent identifier of the Availability Zone (AZ) that the mount target resides in.
        /// </summary>
        [PolicyResourceProperty("availabilityZoneId", "_mUnknown_AvailabilityZoneId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZoneId;
        private bool _mUnknown_AvailabilityZoneId;
        public string? AvailabilityZoneId
        {
            get
            {
                if (!_mUnknown_AvailabilityZoneId) return _mValue_AvailabilityZoneId;
                throw new UndeferrableValueException("Value 'MountTarget.AvailabilityZoneId' is not present");
            }
        }

        /// <summary>
        /// The name of the Availability Zone (AZ) that the mount target resides in.
        /// </summary>
        [PolicyResourceProperty("availabilityZoneName", "_mUnknown_AvailabilityZoneName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZoneName;
        private bool _mUnknown_AvailabilityZoneName;
        public string? AvailabilityZoneName
        {
            get
            {
                if (!_mUnknown_AvailabilityZoneName) return _mValue_AvailabilityZoneName;
                throw new UndeferrableValueException("Value 'MountTarget.AvailabilityZoneName' is not present");
            }
        }

        /// <summary>
        /// The DNS name for the EFS file system.
        /// </summary>
        [PolicyResourceProperty("dnsName", "_mUnknown_DnsName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DnsName;
        private bool _mUnknown_DnsName;
        public string? DnsName
        {
            get
            {
                if (!_mUnknown_DnsName) return _mValue_DnsName;
                throw new UndeferrableValueException("Value 'MountTarget.DnsName' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Name of the file system.
        /// </summary>
        [PolicyResourceProperty("fileSystemArn", "_mUnknown_FileSystemArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FileSystemArn;
        private bool _mUnknown_FileSystemArn;
        public string? FileSystemArn
        {
            get
            {
                if (!_mUnknown_FileSystemArn) return _mValue_FileSystemArn;
                throw new UndeferrableValueException("Value 'MountTarget.FileSystemArn' is not present");
            }
        }

        /// <summary>
        /// The ID of the file system for which the mount target is intended.
        /// </summary>
        [PolicyResourceProperty("fileSystemId", "_mUnknown_FileSystemId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FileSystemId;
        private bool _mUnknown_FileSystemId;
        public string? FileSystemId
        {
            get
            {
                if (!_mUnknown_FileSystemId) return _mValue_FileSystemId;
                throw new UndeferrableValueException("Value 'MountTarget.FileSystemId' is not present");
            }
        }

        /// <summary>
        /// The address (within the address range of the specified subnet) at
        /// which the file system may be mounted via the mount target.
        /// </summary>
        [PolicyResourceProperty("ipAddress", "_mUnknown_IpAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IpAddress;
        private bool _mUnknown_IpAddress;
        public string? IpAddress
        {
            get
            {
                if (!_mUnknown_IpAddress) return _mValue_IpAddress;
                throw new UndeferrableValueException("Value 'MountTarget.IpAddress' is not present");
            }
        }

        /// <summary>
        /// The DNS name for the given subnet/AZ per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
        /// </summary>
        [PolicyResourceProperty("mountTargetDnsName", "_mUnknown_MountTargetDnsName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MountTargetDnsName;
        private bool _mUnknown_MountTargetDnsName;
        public string? MountTargetDnsName
        {
            get
            {
                if (!_mUnknown_MountTargetDnsName) return _mValue_MountTargetDnsName;
                throw new UndeferrableValueException("Value 'MountTarget.MountTargetDnsName' is not present");
            }
        }

        /// <summary>
        /// The ID of the network interface that Amazon EFS created when it created the mount target.
        /// </summary>
        [PolicyResourceProperty("networkInterfaceId", "_mUnknown_NetworkInterfaceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NetworkInterfaceId;
        private bool _mUnknown_NetworkInterfaceId;
        public string? NetworkInterfaceId
        {
            get
            {
                if (!_mUnknown_NetworkInterfaceId) return _mValue_NetworkInterfaceId;
                throw new UndeferrableValueException("Value 'MountTarget.NetworkInterfaceId' is not present");
            }
        }

        /// <summary>
        /// AWS account ID that owns the resource.
        /// </summary>
        [PolicyResourceProperty("ownerId", "_mUnknown_OwnerId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_OwnerId;
        private bool _mUnknown_OwnerId;
        public string? OwnerId
        {
            get
            {
                if (!_mUnknown_OwnerId) return _mValue_OwnerId;
                throw new UndeferrableValueException("Value 'MountTarget.OwnerId' is not present");
            }
        }

        /// <summary>
        /// A list of up to 5 VPC security group IDs (that must
        /// be for the same VPC as subnet specified) in effect for the mount target.
        /// </summary>
        [PolicyResourceProperty("securityGroups", "_mUnknown_SecurityGroups")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecurityGroups;
        private bool _mUnknown_SecurityGroups;
        public List<string>? SecurityGroups
        {
            get
            {
                if (!_mUnknown_SecurityGroups) return _mValue_SecurityGroups;
                throw new UndeferrableValueException("Value 'MountTarget.SecurityGroups' is not present");
            }
        }

        /// <summary>
        /// The ID of the subnet to add the mount target in.
        /// </summary>
        [PolicyResourceProperty("subnetId", "_mUnknown_SubnetId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SubnetId;
        private bool _mUnknown_SubnetId;
        public string? SubnetId
        {
            get
            {
                if (!_mUnknown_SubnetId) return _mValue_SubnetId;
                throw new UndeferrableValueException("Value 'MountTarget.SubnetId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:efs/mountTarget:MountTarget")]
    public sealed class MountTargetArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The ID of the file system for which the mount target is intended.
        /// </summary>
        [PolicyResourceProperty("fileSystemId", "_mUnknown_FileSystemId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FileSystemId;
        private bool _mUnknown_FileSystemId;
        public string? FileSystemId
        {
            get
            {
                if (!_mUnknown_FileSystemId) return _mValue_FileSystemId;
                throw new UndeferrableValueException("Value 'MountTargetArgs.FileSystemId' is not present");
            }
        }

        /// <summary>
        /// The address (within the address range of the specified subnet) at
        /// which the file system may be mounted via the mount target.
        /// </summary>
        [PolicyResourceProperty("ipAddress", "_mUnknown_IpAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IpAddress;
        private bool _mUnknown_IpAddress;
        public string? IpAddress
        {
            get
            {
                if (!_mUnknown_IpAddress) return _mValue_IpAddress;
                throw new UndeferrableValueException("Value 'MountTargetArgs.IpAddress' is not present");
            }
        }

        /// <summary>
        /// A list of up to 5 VPC security group IDs (that must
        /// be for the same VPC as subnet specified) in effect for the mount target.
        /// </summary>
        [PolicyResourceProperty("securityGroups", "_mUnknown_SecurityGroups")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecurityGroups;
        private bool _mUnknown_SecurityGroups;
        public List<string>? SecurityGroups
        {
            get
            {
                if (!_mUnknown_SecurityGroups) return _mValue_SecurityGroups;
                throw new UndeferrableValueException("Value 'MountTargetArgs.SecurityGroups' is not present");
            }
        }

        /// <summary>
        /// The ID of the subnet to add the mount target in.
        /// </summary>
        [PolicyResourceProperty("subnetId", "_mUnknown_SubnetId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SubnetId;
        private bool _mUnknown_SubnetId;
        public string? SubnetId
        {
            get
            {
                if (!_mUnknown_SubnetId) return _mValue_SubnetId;
                throw new UndeferrableValueException("Value 'MountTargetArgs.SubnetId' is not present");
            }
        }
    }
}
