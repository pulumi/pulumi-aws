// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Chatbot
{
    [PolicyResourceType("aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration")]
    public sealed class TeamsChannelConfiguration : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// ID of the Microsoft Teams channel.
        /// </summary>
        [Input("channelId")]
        public string? ChannelId;

        /// <summary>
        /// Name of the Microsoft Teams channel.
        /// </summary>
        [Input("channelName")]
        public string? ChannelName;

        /// <summary>
        /// ARN of the Microsoft Teams channel configuration.
        /// </summary>
        [Input("chatConfigurationArn")]
        public string? ChatConfigurationArn;

        /// <summary>
        /// Name of the Microsoft Teams channel configuration.
        /// </summary>
        [Input("configurationName")]
        public string? ConfigurationName;

        /// <summary>
        /// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
        /// </summary>
        [Input("guardrailPolicyArns")]
        public List<string>? GuardrailPolicyArns;

        /// <summary>
        /// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
        /// </summary>
        [Input("iamRoleArn")]
        public string? IamRoleArn;

        /// <summary>
        /// Logging levels include `ERROR`, `INFO`, or `NONE`.
        /// </summary>
        [Input("loggingLevel")]
        public string? LoggingLevel;

        /// <summary>
        /// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// </summary>
        [Input("snsTopicArns")]
        public List<string>? SnsTopicArns;

        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
        /// </summary>
        [Input("teamId")]
        public string? TeamId;

        /// <summary>
        /// Name of the Microsoft Teams team.
        /// </summary>
        [Input("teamName")]
        public string? TeamName;

        /// <summary>
        /// ID of the Microsoft Teams tenant.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("tenantId")]
        public string? TenantId;

        [Input("timeouts")]
        public TeamsChannelConfigurationTimeouts? Timeouts;

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration.
        /// </summary>
        [Input("userAuthorizationRequired")]
        public bool? UserAuthorizationRequired;
    }
}
