// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Chatbot
{
    [PolicyResourceType("aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration")]
    public sealed class TeamsChannelConfiguration : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// ID of the Microsoft Teams channel.
        /// </summary>
        [PolicyResourceProperty("channelId", "_mUnknown_ChannelId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ChannelId;
        private bool _mUnknown_ChannelId;
        public string? ChannelId
        {
            get
            {
                if (!_mUnknown_ChannelId) return _mValue_ChannelId;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.ChannelId' is not present");
            }
        }

        /// <summary>
        /// Name of the Microsoft Teams channel.
        /// </summary>
        [PolicyResourceProperty("channelName", "_mUnknown_ChannelName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ChannelName;
        private bool _mUnknown_ChannelName;
        public string? ChannelName
        {
            get
            {
                if (!_mUnknown_ChannelName) return _mValue_ChannelName;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.ChannelName' is not present");
            }
        }

        /// <summary>
        /// ARN of the Microsoft Teams channel configuration.
        /// </summary>
        [PolicyResourceProperty("chatConfigurationArn", "_mUnknown_ChatConfigurationArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ChatConfigurationArn;
        private bool _mUnknown_ChatConfigurationArn;
        public string? ChatConfigurationArn
        {
            get
            {
                if (!_mUnknown_ChatConfigurationArn) return _mValue_ChatConfigurationArn;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.ChatConfigurationArn' is not present");
            }
        }

        /// <summary>
        /// Name of the Microsoft Teams channel configuration.
        /// </summary>
        [PolicyResourceProperty("configurationName", "_mUnknown_ConfigurationName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConfigurationName;
        private bool _mUnknown_ConfigurationName;
        public string? ConfigurationName
        {
            get
            {
                if (!_mUnknown_ConfigurationName) return _mValue_ConfigurationName;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.ConfigurationName' is not present");
            }
        }

        /// <summary>
        /// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
        /// </summary>
        [PolicyResourceProperty("guardrailPolicyArns", "_mUnknown_GuardrailPolicyArns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_GuardrailPolicyArns;
        private bool _mUnknown_GuardrailPolicyArns;
        public List<string>? GuardrailPolicyArns
        {
            get
            {
                if (!_mUnknown_GuardrailPolicyArns) return _mValue_GuardrailPolicyArns;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.GuardrailPolicyArns' is not present");
            }
        }

        /// <summary>
        /// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
        /// </summary>
        [PolicyResourceProperty("iamRoleArn", "_mUnknown_IamRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IamRoleArn;
        private bool _mUnknown_IamRoleArn;
        public string? IamRoleArn
        {
            get
            {
                if (!_mUnknown_IamRoleArn) return _mValue_IamRoleArn;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.IamRoleArn' is not present");
            }
        }

        /// <summary>
        /// Logging levels include `ERROR`, `INFO`, or `NONE`.
        /// </summary>
        [PolicyResourceProperty("loggingLevel", "_mUnknown_LoggingLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LoggingLevel;
        private bool _mUnknown_LoggingLevel;
        public string? LoggingLevel
        {
            get
            {
                if (!_mUnknown_LoggingLevel) return _mValue_LoggingLevel;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.LoggingLevel' is not present");
            }
        }

        /// <summary>
        /// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// </summary>
        [PolicyResourceProperty("snsTopicArns", "_mUnknown_SnsTopicArns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SnsTopicArns;
        private bool _mUnknown_SnsTopicArns;
        public List<string>? SnsTopicArns
        {
            get
            {
                if (!_mUnknown_SnsTopicArns) return _mValue_SnsTopicArns;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.SnsTopicArns' is not present");
            }
        }

        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.Tags' is not present");
            }
        }

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.TagsAll' is not present");
            }
        }

        /// <summary>
        /// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
        /// </summary>
        [PolicyResourceProperty("teamId", "_mUnknown_TeamId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TeamId;
        private bool _mUnknown_TeamId;
        public string? TeamId
        {
            get
            {
                if (!_mUnknown_TeamId) return _mValue_TeamId;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.TeamId' is not present");
            }
        }

        /// <summary>
        /// Name of the Microsoft Teams team.
        /// </summary>
        [PolicyResourceProperty("teamName", "_mUnknown_TeamName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TeamName;
        private bool _mUnknown_TeamName;
        public string? TeamName
        {
            get
            {
                if (!_mUnknown_TeamName) return _mValue_TeamName;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.TeamName' is not present");
            }
        }

        /// <summary>
        /// ID of the Microsoft Teams tenant.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("tenantId", "_mUnknown_TenantId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TenantId;
        private bool _mUnknown_TenantId;
        public string? TenantId
        {
            get
            {
                if (!_mUnknown_TenantId) return _mValue_TenantId;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.TenantId' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.TeamsChannelConfigurationTimeouts? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Outputs.TeamsChannelConfigurationTimeouts? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.Timeouts' is not present");
            }
        }

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration.
        /// </summary>
        [PolicyResourceProperty("userAuthorizationRequired", "_mUnknown_UserAuthorizationRequired")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UserAuthorizationRequired;
        private bool _mUnknown_UserAuthorizationRequired;
        public bool? UserAuthorizationRequired
        {
            get
            {
                if (!_mUnknown_UserAuthorizationRequired) return _mValue_UserAuthorizationRequired;
                throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.UserAuthorizationRequired' is not present");
            }
        }
    }

    [PolicyResourceType("aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration")]
    public sealed class TeamsChannelConfigurationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// ID of the Microsoft Teams channel.
        /// </summary>
        [PolicyResourceProperty("channelId", "_mUnknown_ChannelId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ChannelId;
        private bool _mUnknown_ChannelId;
        public string? ChannelId
        {
            get
            {
                if (!_mUnknown_ChannelId) return _mValue_ChannelId;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.ChannelId' is not present");
            }
        }

        /// <summary>
        /// Name of the Microsoft Teams channel.
        /// </summary>
        [PolicyResourceProperty("channelName", "_mUnknown_ChannelName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ChannelName;
        private bool _mUnknown_ChannelName;
        public string? ChannelName
        {
            get
            {
                if (!_mUnknown_ChannelName) return _mValue_ChannelName;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.ChannelName' is not present");
            }
        }

        /// <summary>
        /// Name of the Microsoft Teams channel configuration.
        /// </summary>
        [PolicyResourceProperty("configurationName", "_mUnknown_ConfigurationName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConfigurationName;
        private bool _mUnknown_ConfigurationName;
        public string? ConfigurationName
        {
            get
            {
                if (!_mUnknown_ConfigurationName) return _mValue_ConfigurationName;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.ConfigurationName' is not present");
            }
        }

        /// <summary>
        /// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
        /// </summary>
        [PolicyResourceProperty("guardrailPolicyArns", "_mUnknown_GuardrailPolicyArns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_GuardrailPolicyArns;
        private bool _mUnknown_GuardrailPolicyArns;
        public List<string>? GuardrailPolicyArns
        {
            get
            {
                if (!_mUnknown_GuardrailPolicyArns) return _mValue_GuardrailPolicyArns;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.GuardrailPolicyArns' is not present");
            }
        }

        /// <summary>
        /// ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
        /// </summary>
        [PolicyResourceProperty("iamRoleArn", "_mUnknown_IamRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IamRoleArn;
        private bool _mUnknown_IamRoleArn;
        public string? IamRoleArn
        {
            get
            {
                if (!_mUnknown_IamRoleArn) return _mValue_IamRoleArn;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.IamRoleArn' is not present");
            }
        }

        /// <summary>
        /// Logging levels include `ERROR`, `INFO`, or `NONE`.
        /// </summary>
        [PolicyResourceProperty("loggingLevel", "_mUnknown_LoggingLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LoggingLevel;
        private bool _mUnknown_LoggingLevel;
        public string? LoggingLevel
        {
            get
            {
                if (!_mUnknown_LoggingLevel) return _mValue_LoggingLevel;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.LoggingLevel' is not present");
            }
        }

        /// <summary>
        /// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// </summary>
        [PolicyResourceProperty("snsTopicArns", "_mUnknown_SnsTopicArns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SnsTopicArns;
        private bool _mUnknown_SnsTopicArns;
        public List<string>? SnsTopicArns
        {
            get
            {
                if (!_mUnknown_SnsTopicArns) return _mValue_SnsTopicArns;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.SnsTopicArns' is not present");
            }
        }

        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
        /// </summary>
        [PolicyResourceProperty("teamId", "_mUnknown_TeamId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TeamId;
        private bool _mUnknown_TeamId;
        public string? TeamId
        {
            get
            {
                if (!_mUnknown_TeamId) return _mValue_TeamId;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.TeamId' is not present");
            }
        }

        /// <summary>
        /// Name of the Microsoft Teams team.
        /// </summary>
        [PolicyResourceProperty("teamName", "_mUnknown_TeamName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TeamName;
        private bool _mUnknown_TeamName;
        public string? TeamName
        {
            get
            {
                if (!_mUnknown_TeamName) return _mValue_TeamName;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.TeamName' is not present");
            }
        }

        /// <summary>
        /// ID of the Microsoft Teams tenant.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("tenantId", "_mUnknown_TenantId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TenantId;
        private bool _mUnknown_TenantId;
        public string? TenantId
        {
            get
            {
                if (!_mUnknown_TenantId) return _mValue_TenantId;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.TenantId' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.TeamsChannelConfigurationTimeoutsArgs? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Inputs.TeamsChannelConfigurationTimeoutsArgs? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.Timeouts' is not present");
            }
        }

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration.
        /// </summary>
        [PolicyResourceProperty("userAuthorizationRequired", "_mUnknown_UserAuthorizationRequired")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UserAuthorizationRequired;
        private bool _mUnknown_UserAuthorizationRequired;
        public bool? UserAuthorizationRequired
        {
            get
            {
                if (!_mUnknown_UserAuthorizationRequired) return _mValue_UserAuthorizationRequired;
                throw new UndeferrableValueException("Value 'TeamsChannelConfigurationArgs.UserAuthorizationRequired' is not present");
            }
        }
    }
}
