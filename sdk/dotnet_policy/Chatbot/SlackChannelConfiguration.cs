// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Chatbot
{
    [PolicyResourceType("aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration")]
    public sealed class SlackChannelConfiguration : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// ARN of the Slack channel configuration.
        /// </summary>
        [PolicyResourceProperty("chatConfigurationArn", "_mUnknown_ChatConfigurationArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ChatConfigurationArn;
        private bool _mUnknown_ChatConfigurationArn;
        public string? ChatConfigurationArn
        {
            get
            {
                if (!_mUnknown_ChatConfigurationArn) return _mValue_ChatConfigurationArn;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.ChatConfigurationArn' is not present");
            }
        }

        /// <summary>
        /// Name of the Slack channel configuration.
        /// </summary>
        [PolicyResourceProperty("configurationName", "_mUnknown_ConfigurationName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConfigurationName;
        private bool _mUnknown_ConfigurationName;
        public string? ConfigurationName
        {
            get
            {
                if (!_mUnknown_ConfigurationName) return _mValue_ConfigurationName;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.ConfigurationName' is not present");
            }
        }

        /// <summary>
        /// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
        /// </summary>
        [PolicyResourceProperty("guardrailPolicyArns", "_mUnknown_GuardrailPolicyArns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_GuardrailPolicyArns;
        private bool _mUnknown_GuardrailPolicyArns;
        public List<string>? GuardrailPolicyArns
        {
            get
            {
                if (!_mUnknown_GuardrailPolicyArns) return _mValue_GuardrailPolicyArns;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.GuardrailPolicyArns' is not present");
            }
        }

        /// <summary>
        /// User-defined role that AWS Chatbot assumes. This is not the service-linked role.
        /// </summary>
        [PolicyResourceProperty("iamRoleArn", "_mUnknown_IamRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IamRoleArn;
        private bool _mUnknown_IamRoleArn;
        public string? IamRoleArn
        {
            get
            {
                if (!_mUnknown_IamRoleArn) return _mValue_IamRoleArn;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.IamRoleArn' is not present");
            }
        }

        /// <summary>
        /// Logging levels include `ERROR`, `INFO`, or `NONE`.
        /// </summary>
        [PolicyResourceProperty("loggingLevel", "_mUnknown_LoggingLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LoggingLevel;
        private bool _mUnknown_LoggingLevel;
        public string? LoggingLevel
        {
            get
            {
                if (!_mUnknown_LoggingLevel) return _mValue_LoggingLevel;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.LoggingLevel' is not present");
            }
        }

        /// <summary>
        /// ID of the Slack channel. For example, `C07EZ1ABC23`.
        /// </summary>
        [PolicyResourceProperty("slackChannelId", "_mUnknown_SlackChannelId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SlackChannelId;
        private bool _mUnknown_SlackChannelId;
        public string? SlackChannelId
        {
            get
            {
                if (!_mUnknown_SlackChannelId) return _mValue_SlackChannelId;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.SlackChannelId' is not present");
            }
        }

        /// <summary>
        /// Name of the Slack channel.
        /// </summary>
        [PolicyResourceProperty("slackChannelName", "_mUnknown_SlackChannelName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SlackChannelName;
        private bool _mUnknown_SlackChannelName;
        public string? SlackChannelName
        {
            get
            {
                if (!_mUnknown_SlackChannelName) return _mValue_SlackChannelName;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.SlackChannelName' is not present");
            }
        }

        /// <summary>
        /// ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("slackTeamId", "_mUnknown_SlackTeamId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SlackTeamId;
        private bool _mUnknown_SlackTeamId;
        public string? SlackTeamId
        {
            get
            {
                if (!_mUnknown_SlackTeamId) return _mValue_SlackTeamId;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.SlackTeamId' is not present");
            }
        }

        /// <summary>
        /// Name of the Slack team.
        /// </summary>
        [PolicyResourceProperty("slackTeamName", "_mUnknown_SlackTeamName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SlackTeamName;
        private bool _mUnknown_SlackTeamName;
        public string? SlackTeamName
        {
            get
            {
                if (!_mUnknown_SlackTeamName) return _mValue_SlackTeamName;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.SlackTeamName' is not present");
            }
        }

        /// <summary>
        /// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// </summary>
        [PolicyResourceProperty("snsTopicArns", "_mUnknown_SnsTopicArns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SnsTopicArns;
        private bool _mUnknown_SnsTopicArns;
        public List<string>? SnsTopicArns
        {
            get
            {
                if (!_mUnknown_SnsTopicArns) return _mValue_SnsTopicArns;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.SnsTopicArns' is not present");
            }
        }

        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.Tags' is not present");
            }
        }

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.TagsAll' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.SlackChannelConfigurationTimeouts? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Outputs.SlackChannelConfigurationTimeouts? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.Timeouts' is not present");
            }
        }

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration.
        /// </summary>
        [PolicyResourceProperty("userAuthorizationRequired", "_mUnknown_UserAuthorizationRequired")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UserAuthorizationRequired;
        private bool _mUnknown_UserAuthorizationRequired;
        public bool? UserAuthorizationRequired
        {
            get
            {
                if (!_mUnknown_UserAuthorizationRequired) return _mValue_UserAuthorizationRequired;
                throw new UndeferrableValueException("Value 'SlackChannelConfiguration.UserAuthorizationRequired' is not present");
            }
        }
    }

    [PolicyResourceType("aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration")]
    public sealed class SlackChannelConfigurationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Name of the Slack channel configuration.
        /// </summary>
        [PolicyResourceProperty("configurationName", "_mUnknown_ConfigurationName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConfigurationName;
        private bool _mUnknown_ConfigurationName;
        public string? ConfigurationName
        {
            get
            {
                if (!_mUnknown_ConfigurationName) return _mValue_ConfigurationName;
                throw new UndeferrableValueException("Value 'SlackChannelConfigurationArgs.ConfigurationName' is not present");
            }
        }

        /// <summary>
        /// List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
        /// </summary>
        [PolicyResourceProperty("guardrailPolicyArns", "_mUnknown_GuardrailPolicyArns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_GuardrailPolicyArns;
        private bool _mUnknown_GuardrailPolicyArns;
        public List<string>? GuardrailPolicyArns
        {
            get
            {
                if (!_mUnknown_GuardrailPolicyArns) return _mValue_GuardrailPolicyArns;
                throw new UndeferrableValueException("Value 'SlackChannelConfigurationArgs.GuardrailPolicyArns' is not present");
            }
        }

        /// <summary>
        /// User-defined role that AWS Chatbot assumes. This is not the service-linked role.
        /// </summary>
        [PolicyResourceProperty("iamRoleArn", "_mUnknown_IamRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IamRoleArn;
        private bool _mUnknown_IamRoleArn;
        public string? IamRoleArn
        {
            get
            {
                if (!_mUnknown_IamRoleArn) return _mValue_IamRoleArn;
                throw new UndeferrableValueException("Value 'SlackChannelConfigurationArgs.IamRoleArn' is not present");
            }
        }

        /// <summary>
        /// Logging levels include `ERROR`, `INFO`, or `NONE`.
        /// </summary>
        [PolicyResourceProperty("loggingLevel", "_mUnknown_LoggingLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LoggingLevel;
        private bool _mUnknown_LoggingLevel;
        public string? LoggingLevel
        {
            get
            {
                if (!_mUnknown_LoggingLevel) return _mValue_LoggingLevel;
                throw new UndeferrableValueException("Value 'SlackChannelConfigurationArgs.LoggingLevel' is not present");
            }
        }

        /// <summary>
        /// ID of the Slack channel. For example, `C07EZ1ABC23`.
        /// </summary>
        [PolicyResourceProperty("slackChannelId", "_mUnknown_SlackChannelId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SlackChannelId;
        private bool _mUnknown_SlackChannelId;
        public string? SlackChannelId
        {
            get
            {
                if (!_mUnknown_SlackChannelId) return _mValue_SlackChannelId;
                throw new UndeferrableValueException("Value 'SlackChannelConfigurationArgs.SlackChannelId' is not present");
            }
        }

        /// <summary>
        /// ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("slackTeamId", "_mUnknown_SlackTeamId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SlackTeamId;
        private bool _mUnknown_SlackTeamId;
        public string? SlackTeamId
        {
            get
            {
                if (!_mUnknown_SlackTeamId) return _mValue_SlackTeamId;
                throw new UndeferrableValueException("Value 'SlackChannelConfigurationArgs.SlackTeamId' is not present");
            }
        }

        /// <summary>
        /// ARNs of the SNS topics that deliver notifications to AWS Chatbot.
        /// </summary>
        [PolicyResourceProperty("snsTopicArns", "_mUnknown_SnsTopicArns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SnsTopicArns;
        private bool _mUnknown_SnsTopicArns;
        public List<string>? SnsTopicArns
        {
            get
            {
                if (!_mUnknown_SnsTopicArns) return _mValue_SnsTopicArns;
                throw new UndeferrableValueException("Value 'SlackChannelConfigurationArgs.SnsTopicArns' is not present");
            }
        }

        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'SlackChannelConfigurationArgs.Tags' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.SlackChannelConfigurationTimeoutsArgs? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Inputs.SlackChannelConfigurationTimeoutsArgs? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'SlackChannelConfigurationArgs.Timeouts' is not present");
            }
        }

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration.
        /// </summary>
        [PolicyResourceProperty("userAuthorizationRequired", "_mUnknown_UserAuthorizationRequired")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UserAuthorizationRequired;
        private bool _mUnknown_UserAuthorizationRequired;
        public bool? UserAuthorizationRequired
        {
            get
            {
                if (!_mUnknown_UserAuthorizationRequired) return _mValue_UserAuthorizationRequired;
                throw new UndeferrableValueException("Value 'SlackChannelConfigurationArgs.UserAuthorizationRequired' is not present");
            }
        }
    }
}
