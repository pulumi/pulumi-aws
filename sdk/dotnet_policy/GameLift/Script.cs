// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.GameLift
{
    [PolicyResourceType("aws:gamelift/script:Script")]
    public sealed class Script : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// GameLift Script ARN.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Script.Arn' is not present");
            }
        }

        /// <summary>
        /// Name of the script
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Script.Name' is not present");
            }
        }

        /// <summary>
        /// Information indicating where your game script files are stored. See below.
        /// </summary>
        [PolicyResourceProperty("storageLocation", "_mUnknown_StorageLocation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ScriptStorageLocation? _mValue_StorageLocation;
        private bool _mUnknown_StorageLocation;
        public Outputs.ScriptStorageLocation? StorageLocation
        {
            get
            {
                if (!_mUnknown_StorageLocation) return _mValue_StorageLocation;
                throw new UndeferrableValueException("Value 'Script.StorageLocation' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Script.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Script.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Version that is associated with this script.
        /// </summary>
        [PolicyResourceProperty("version", "_mUnknown_Version")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Version;
        private bool _mUnknown_Version;
        public string? Version
        {
            get
            {
                if (!_mUnknown_Version) return _mValue_Version;
                throw new UndeferrableValueException("Value 'Script.Version' is not present");
            }
        }

        /// <summary>
        /// A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
        /// </summary>
        [PolicyResourceProperty("zipFile", "_mUnknown_ZipFile")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ZipFile;
        private bool _mUnknown_ZipFile;
        public string? ZipFile
        {
            get
            {
                if (!_mUnknown_ZipFile) return _mValue_ZipFile;
                throw new UndeferrableValueException("Value 'Script.ZipFile' is not present");
            }
        }
    }

    [PolicyResourceType("aws:gamelift/script:Script")]
    public sealed class ScriptArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Name of the script
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'ScriptArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Information indicating where your game script files are stored. See below.
        /// </summary>
        [PolicyResourceProperty("storageLocation", "_mUnknown_StorageLocation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ScriptStorageLocationArgs? _mValue_StorageLocation;
        private bool _mUnknown_StorageLocation;
        public Inputs.ScriptStorageLocationArgs? StorageLocation
        {
            get
            {
                if (!_mUnknown_StorageLocation) return _mValue_StorageLocation;
                throw new UndeferrableValueException("Value 'ScriptArgs.StorageLocation' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ScriptArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Version that is associated with this script.
        /// </summary>
        [PolicyResourceProperty("version", "_mUnknown_Version")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Version;
        private bool _mUnknown_Version;
        public string? Version
        {
            get
            {
                if (!_mUnknown_Version) return _mValue_Version;
                throw new UndeferrableValueException("Value 'ScriptArgs.Version' is not present");
            }
        }

        /// <summary>
        /// A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
        /// </summary>
        [PolicyResourceProperty("zipFile", "_mUnknown_ZipFile")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ZipFile;
        private bool _mUnknown_ZipFile;
        public string? ZipFile
        {
            get
            {
                if (!_mUnknown_ZipFile) return _mValue_ZipFile;
                throw new UndeferrableValueException("Value 'ScriptArgs.ZipFile' is not present");
            }
        }
    }
}
