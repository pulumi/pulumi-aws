// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.GameLift
{
    [PolicyResourceType("aws:gamelift/matchmakingConfiguration:MatchmakingConfiguration")]
    public sealed class MatchmakingConfiguration : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Specifies if the match that was created with this configuration must be accepted by matched players.
        /// </summary>
        [Input("acceptanceRequired")]
        public bool? AcceptanceRequired;

        /// <summary>
        /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
        /// </summary>
        [Input("acceptanceTimeoutSeconds")]
        public int? AcceptanceTimeoutSeconds;

        /// <summary>
        /// The number of player slots in a match to keep open for future players.
        /// </summary>
        [Input("additionalPlayerCount")]
        public int? AdditionalPlayerCount;

        /// <summary>
        /// Matchmaking Configuration ARN.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The method used to backfill game sessions that are created with this matchmaking configuration.
        /// </summary>
        [Input("backfillMode")]
        public string? BackfillMode;

        /// <summary>
        /// The time when the Matchmaking Configuration was created.
        /// </summary>
        [Input("creationTime")]
        public string? CreationTime;

        /// <summary>
        /// Information to be added to all events related to this matchmaking configuration.
        /// </summary>
        [Input("customEventData")]
        public string? CustomEventData;

        /// <summary>
        /// A human-readable description of the matchmaking configuration.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
        /// </summary>
        [Input("flexMatchMode")]
        public string? FlexMatchMode;

        /// <summary>
        /// One or more custom game properties. See below.
        /// </summary>
        [Input("gameProperties")]
        public List<MatchmakingConfigurationGameProperty>? GameProperties;

        /// <summary>
        /// A set of custom game session properties.
        /// </summary>
        [Input("gameSessionData")]
        public string? GameSessionData;

        /// <summary>
        /// The ARNs of the GameLift game session queue resources.
        /// </summary>
        [Input("gameSessionQueueArns")]
        public List<string>? GameSessionQueueArns;

        /// <summary>
        /// Name of the matchmaking configuration
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// An SNS topic ARN that is set up to receive matchmaking notifications.
        /// </summary>
        [Input("notificationTarget")]
        public string? NotificationTarget;

        /// <summary>
        /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
        /// </summary>
        [Input("requestTimeoutSeconds")]
        public int? RequestTimeoutSeconds;

        [Input("ruleSetArn")]
        public string? RuleSetArn;

        /// <summary>
        /// A rule set names for the matchmaking rule set to use with this configuration.
        /// </summary>
        [Input("ruleSetName")]
        public string? RuleSetName;

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
