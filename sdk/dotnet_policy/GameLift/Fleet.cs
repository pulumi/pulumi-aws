// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.GameLift
{
    [PolicyResourceType("aws:gamelift/fleet:Fleet")]
    public sealed class Fleet : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Fleet ARN.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Build ARN.
        /// </summary>
        [Input("buildArn")]
        public string? BuildArn;

        /// <summary>
        /// ID of the GameLift Build to be deployed on the fleet.
        /// </summary>
        [Input("buildId")]
        public string? BuildId;

        /// <summary>
        /// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
        /// </summary>
        [Input("certificateConfiguration")]
        public FleetCertificateConfiguration? CertificateConfiguration;

        /// <summary>
        /// Human-readable description of the fleet.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
        /// </summary>
        [Input("ec2InboundPermissions")]
        public List<FleetEc2InboundPermission>? Ec2InboundPermissions;

        /// <summary>
        /// Name of an EC2 instance typeE.g., `t2.micro`
        /// </summary>
        [Input("ec2InstanceType")]
        public string? Ec2InstanceType;

        /// <summary>
        /// Type of fleet. This value must be `ON_DEMAND` or `SPOT`. Defaults to `ON_DEMAND`.
        /// </summary>
        [Input("fleetType")]
        public string? FleetType;

        /// <summary>
        /// ARN of an IAM role that instances in the fleet can assume.
        /// </summary>
        [Input("instanceRoleArn")]
        public string? InstanceRoleArn;

        [Input("logPaths")]
        public List<string>? LogPaths;

        /// <summary>
        /// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`.
        /// </summary>
        [Input("metricGroups")]
        public List<string>? MetricGroups;

        /// <summary>
        /// The name of the fleet.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Game session protection policy to apply to all instances in this fleetE.g., `FullProtection`. Defaults to `NoProtection`.
        /// </summary>
        [Input("newGameSessionProtectionPolicy")]
        public string? NewGameSessionProtectionPolicy;

        /// <summary>
        /// Operating system of the fleet's computing resources.
        /// </summary>
        [Input("operatingSystem")]
        public string? OperatingSystem;

        /// <summary>
        /// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
        /// </summary>
        [Input("resourceCreationLimitPolicy")]
        public FleetResourceCreationLimitPolicy? ResourceCreationLimitPolicy;

        /// <summary>
        /// Instructions for launching server processes on each instance in the fleet. See below.
        /// </summary>
        [Input("runtimeConfiguration")]
        public FleetRuntimeConfiguration? RuntimeConfiguration;

        /// <summary>
        /// Script ARN.
        /// </summary>
        [Input("scriptArn")]
        public string? ScriptArn;

        /// <summary>
        /// ID of the GameLift Script to be deployed on the fleet.
        /// </summary>
        [Input("scriptId")]
        public string? ScriptId;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
