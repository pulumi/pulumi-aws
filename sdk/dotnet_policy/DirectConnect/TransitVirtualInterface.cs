// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.DirectConnect
{
    [PolicyResourceType("aws:directconnect/transitVirtualInterface:TransitVirtualInterface")]
    public sealed class TransitVirtualInterface : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The address family for the BGP peer. `ipv4 ` or `ipv6`.
        /// </summary>
        [PolicyResourceProperty("addressFamily", "_mUnknown_AddressFamily")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AddressFamily;
        private bool _mUnknown_AddressFamily;
        public string? AddressFamily
        {
            get
            {
                if (!_mUnknown_AddressFamily) return _mValue_AddressFamily;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.AddressFamily' is not present");
            }
        }

        /// <summary>
        /// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
        /// </summary>
        [PolicyResourceProperty("amazonAddress", "_mUnknown_AmazonAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AmazonAddress;
        private bool _mUnknown_AmazonAddress;
        public string? AmazonAddress
        {
            get
            {
                if (!_mUnknown_AmazonAddress) return _mValue_AmazonAddress;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.AmazonAddress' is not present");
            }
        }

        [PolicyResourceProperty("amazonSideAsn", "_mUnknown_AmazonSideAsn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AmazonSideAsn;
        private bool _mUnknown_AmazonSideAsn;
        public string? AmazonSideAsn
        {
            get
            {
                if (!_mUnknown_AmazonSideAsn) return _mValue_AmazonSideAsn;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.AmazonSideAsn' is not present");
            }
        }

        /// <summary>
        /// The ARN of the virtual interface.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.Arn' is not present");
            }
        }

        /// <summary>
        /// The Direct Connect endpoint on which the virtual interface terminates.
        /// </summary>
        [PolicyResourceProperty("awsDevice", "_mUnknown_AwsDevice")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AwsDevice;
        private bool _mUnknown_AwsDevice;
        public string? AwsDevice
        {
            get
            {
                if (!_mUnknown_AwsDevice) return _mValue_AwsDevice;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.AwsDevice' is not present");
            }
        }

        /// <summary>
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        /// </summary>
        [PolicyResourceProperty("bgpAsn", "_mUnknown_BgpAsn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_BgpAsn;
        private bool _mUnknown_BgpAsn;
        public int? BgpAsn
        {
            get
            {
                if (!_mUnknown_BgpAsn) return _mValue_BgpAsn;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.BgpAsn' is not present");
            }
        }

        /// <summary>
        /// The authentication key for BGP configuration.
        /// </summary>
        [PolicyResourceProperty("bgpAuthKey", "_mUnknown_BgpAuthKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BgpAuthKey;
        private bool _mUnknown_BgpAuthKey;
        public string? BgpAuthKey
        {
            get
            {
                if (!_mUnknown_BgpAuthKey) return _mValue_BgpAuthKey;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.BgpAuthKey' is not present");
            }
        }

        /// <summary>
        /// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
        /// </summary>
        [PolicyResourceProperty("connectionId", "_mUnknown_ConnectionId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConnectionId;
        private bool _mUnknown_ConnectionId;
        public string? ConnectionId
        {
            get
            {
                if (!_mUnknown_ConnectionId) return _mValue_ConnectionId;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.ConnectionId' is not present");
            }
        }

        /// <summary>
        /// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
        /// </summary>
        [PolicyResourceProperty("customerAddress", "_mUnknown_CustomerAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CustomerAddress;
        private bool _mUnknown_CustomerAddress;
        public string? CustomerAddress
        {
            get
            {
                if (!_mUnknown_CustomerAddress) return _mValue_CustomerAddress;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.CustomerAddress' is not present");
            }
        }

        /// <summary>
        /// The ID of the Direct Connect gateway to which to connect the virtual interface.
        /// </summary>
        [PolicyResourceProperty("dxGatewayId", "_mUnknown_DxGatewayId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DxGatewayId;
        private bool _mUnknown_DxGatewayId;
        public string? DxGatewayId
        {
            get
            {
                if (!_mUnknown_DxGatewayId) return _mValue_DxGatewayId;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.DxGatewayId' is not present");
            }
        }

        /// <summary>
        /// Indicates whether jumbo frames (8500 MTU) are supported.
        /// </summary>
        [PolicyResourceProperty("jumboFrameCapable", "_mUnknown_JumboFrameCapable")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_JumboFrameCapable;
        private bool _mUnknown_JumboFrameCapable;
        public bool? JumboFrameCapable
        {
            get
            {
                if (!_mUnknown_JumboFrameCapable) return _mValue_JumboFrameCapable;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.JumboFrameCapable' is not present");
            }
        }

        /// <summary>
        /// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
        /// The MTU of a virtual transit interface can be either `1500` or `8500` (jumbo frames). Default is `1500`.
        /// </summary>
        [PolicyResourceProperty("mtu", "_mUnknown_Mtu")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Mtu;
        private bool _mUnknown_Mtu;
        public int? Mtu
        {
            get
            {
                if (!_mUnknown_Mtu) return _mValue_Mtu;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.Mtu' is not present");
            }
        }

        /// <summary>
        /// The name for the virtual interface.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.Name' is not present");
            }
        }

        /// <summary>
        /// Indicates whether to enable or disable SiteLink.
        /// </summary>
        [PolicyResourceProperty("sitelinkEnabled", "_mUnknown_SitelinkEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SitelinkEnabled;
        private bool _mUnknown_SitelinkEnabled;
        public bool? SitelinkEnabled
        {
            get
            {
                if (!_mUnknown_SitelinkEnabled) return _mValue_SitelinkEnabled;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.SitelinkEnabled' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.TagsAll' is not present");
            }
        }

        /// <summary>
        /// The VLAN ID.
        /// </summary>
        [PolicyResourceProperty("vlan", "_mUnknown_Vlan")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Vlan;
        private bool _mUnknown_Vlan;
        public int? Vlan
        {
            get
            {
                if (!_mUnknown_Vlan) return _mValue_Vlan;
                throw new UndeferrableValueException("Value 'TransitVirtualInterface.Vlan' is not present");
            }
        }
    }

    [PolicyResourceType("aws:directconnect/transitVirtualInterface:TransitVirtualInterface")]
    public sealed class TransitVirtualInterfaceArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The address family for the BGP peer. `ipv4 ` or `ipv6`.
        /// </summary>
        [PolicyResourceProperty("addressFamily", "_mUnknown_AddressFamily")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AddressFamily;
        private bool _mUnknown_AddressFamily;
        public string? AddressFamily
        {
            get
            {
                if (!_mUnknown_AddressFamily) return _mValue_AddressFamily;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.AddressFamily' is not present");
            }
        }

        /// <summary>
        /// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
        /// </summary>
        [PolicyResourceProperty("amazonAddress", "_mUnknown_AmazonAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AmazonAddress;
        private bool _mUnknown_AmazonAddress;
        public string? AmazonAddress
        {
            get
            {
                if (!_mUnknown_AmazonAddress) return _mValue_AmazonAddress;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.AmazonAddress' is not present");
            }
        }

        /// <summary>
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        /// </summary>
        [PolicyResourceProperty("bgpAsn", "_mUnknown_BgpAsn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_BgpAsn;
        private bool _mUnknown_BgpAsn;
        public int? BgpAsn
        {
            get
            {
                if (!_mUnknown_BgpAsn) return _mValue_BgpAsn;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.BgpAsn' is not present");
            }
        }

        /// <summary>
        /// The authentication key for BGP configuration.
        /// </summary>
        [PolicyResourceProperty("bgpAuthKey", "_mUnknown_BgpAuthKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BgpAuthKey;
        private bool _mUnknown_BgpAuthKey;
        public string? BgpAuthKey
        {
            get
            {
                if (!_mUnknown_BgpAuthKey) return _mValue_BgpAuthKey;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.BgpAuthKey' is not present");
            }
        }

        /// <summary>
        /// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
        /// </summary>
        [PolicyResourceProperty("connectionId", "_mUnknown_ConnectionId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConnectionId;
        private bool _mUnknown_ConnectionId;
        public string? ConnectionId
        {
            get
            {
                if (!_mUnknown_ConnectionId) return _mValue_ConnectionId;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.ConnectionId' is not present");
            }
        }

        /// <summary>
        /// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
        /// </summary>
        [PolicyResourceProperty("customerAddress", "_mUnknown_CustomerAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CustomerAddress;
        private bool _mUnknown_CustomerAddress;
        public string? CustomerAddress
        {
            get
            {
                if (!_mUnknown_CustomerAddress) return _mValue_CustomerAddress;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.CustomerAddress' is not present");
            }
        }

        /// <summary>
        /// The ID of the Direct Connect gateway to which to connect the virtual interface.
        /// </summary>
        [PolicyResourceProperty("dxGatewayId", "_mUnknown_DxGatewayId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DxGatewayId;
        private bool _mUnknown_DxGatewayId;
        public string? DxGatewayId
        {
            get
            {
                if (!_mUnknown_DxGatewayId) return _mValue_DxGatewayId;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.DxGatewayId' is not present");
            }
        }

        /// <summary>
        /// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
        /// The MTU of a virtual transit interface can be either `1500` or `8500` (jumbo frames). Default is `1500`.
        /// </summary>
        [PolicyResourceProperty("mtu", "_mUnknown_Mtu")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Mtu;
        private bool _mUnknown_Mtu;
        public int? Mtu
        {
            get
            {
                if (!_mUnknown_Mtu) return _mValue_Mtu;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.Mtu' is not present");
            }
        }

        /// <summary>
        /// The name for the virtual interface.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Indicates whether to enable or disable SiteLink.
        /// </summary>
        [PolicyResourceProperty("sitelinkEnabled", "_mUnknown_SitelinkEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SitelinkEnabled;
        private bool _mUnknown_SitelinkEnabled;
        public bool? SitelinkEnabled
        {
            get
            {
                if (!_mUnknown_SitelinkEnabled) return _mValue_SitelinkEnabled;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.SitelinkEnabled' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// The VLAN ID.
        /// </summary>
        [PolicyResourceProperty("vlan", "_mUnknown_Vlan")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Vlan;
        private bool _mUnknown_Vlan;
        public int? Vlan
        {
            get
            {
                if (!_mUnknown_Vlan) return _mValue_Vlan;
                throw new UndeferrableValueException("Value 'TransitVirtualInterfaceArgs.Vlan' is not present");
            }
        }
    }
}
