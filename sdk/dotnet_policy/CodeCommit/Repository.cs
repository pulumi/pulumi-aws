// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CodeCommit
{
    [PolicyResourceType("aws:codecommit/repository:Repository")]
    public sealed class Repository : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the repository
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Repository.Arn' is not present");
            }
        }

        /// <summary>
        /// The URL to use for cloning the repository over HTTPS.
        /// </summary>
        [PolicyResourceProperty("cloneUrlHttp", "_mUnknown_CloneUrlHttp")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CloneUrlHttp;
        private bool _mUnknown_CloneUrlHttp;
        public string? CloneUrlHttp
        {
            get
            {
                if (!_mUnknown_CloneUrlHttp) return _mValue_CloneUrlHttp;
                throw new UndeferrableValueException("Value 'Repository.CloneUrlHttp' is not present");
            }
        }

        /// <summary>
        /// The URL to use for cloning the repository over SSH.
        /// </summary>
        [PolicyResourceProperty("cloneUrlSsh", "_mUnknown_CloneUrlSsh")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CloneUrlSsh;
        private bool _mUnknown_CloneUrlSsh;
        public string? CloneUrlSsh
        {
            get
            {
                if (!_mUnknown_CloneUrlSsh) return _mValue_CloneUrlSsh;
                throw new UndeferrableValueException("Value 'Repository.CloneUrlSsh' is not present");
            }
        }

        /// <summary>
        /// The default branch of the repository. The branch specified here needs to exist.
        /// </summary>
        [PolicyResourceProperty("defaultBranch", "_mUnknown_DefaultBranch")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultBranch;
        private bool _mUnknown_DefaultBranch;
        public string? DefaultBranch
        {
            get
            {
                if (!_mUnknown_DefaultBranch) return _mValue_DefaultBranch;
                throw new UndeferrableValueException("Value 'Repository.DefaultBranch' is not present");
            }
        }

        /// <summary>
        /// The description of the repository. This needs to be less than 1000 characters
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'Repository.Description' is not present");
            }
        }

        /// <summary>
        /// The ARN of the encryption key. If no key is specified, the default `aws/codecommit` Amazon Web Services managed key is used.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'Repository.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// The ID of the repository
        /// </summary>
        [PolicyResourceProperty("repositoryId", "_mUnknown_RepositoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RepositoryId;
        private bool _mUnknown_RepositoryId;
        public string? RepositoryId
        {
            get
            {
                if (!_mUnknown_RepositoryId) return _mValue_RepositoryId;
                throw new UndeferrableValueException("Value 'Repository.RepositoryId' is not present");
            }
        }

        /// <summary>
        /// The name for the repository. This needs to be less than 100 characters.
        /// </summary>
        [PolicyResourceProperty("repositoryName", "_mUnknown_RepositoryName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RepositoryName;
        private bool _mUnknown_RepositoryName;
        public string? RepositoryName
        {
            get
            {
                if (!_mUnknown_RepositoryName) return _mValue_RepositoryName;
                throw new UndeferrableValueException("Value 'Repository.RepositoryName' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Repository.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Repository.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:codecommit/repository:Repository")]
    public sealed class RepositoryArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The default branch of the repository. The branch specified here needs to exist.
        /// </summary>
        [PolicyResourceProperty("defaultBranch", "_mUnknown_DefaultBranch")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultBranch;
        private bool _mUnknown_DefaultBranch;
        public string? DefaultBranch
        {
            get
            {
                if (!_mUnknown_DefaultBranch) return _mValue_DefaultBranch;
                throw new UndeferrableValueException("Value 'RepositoryArgs.DefaultBranch' is not present");
            }
        }

        /// <summary>
        /// The description of the repository. This needs to be less than 1000 characters
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'RepositoryArgs.Description' is not present");
            }
        }

        /// <summary>
        /// The ARN of the encryption key. If no key is specified, the default `aws/codecommit` Amazon Web Services managed key is used.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'RepositoryArgs.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// The name for the repository. This needs to be less than 100 characters.
        /// </summary>
        [PolicyResourceProperty("repositoryName", "_mUnknown_RepositoryName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RepositoryName;
        private bool _mUnknown_RepositoryName;
        public string? RepositoryName
        {
            get
            {
                if (!_mUnknown_RepositoryName) return _mValue_RepositoryName;
                throw new UndeferrableValueException("Value 'RepositoryArgs.RepositoryName' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'RepositoryArgs.Tags' is not present");
            }
        }
    }
}
