// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.LakeFormation
{
    [PolicyResourceType("aws:lakeformation/resource:Resource")]
    public sealed class Resource : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the resource.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Resource.Arn' is not present");
            }
        }

        /// <summary>
        /// Flag to enable AWS LakeFormation hybrid access permission mode.
        /// 
        /// &gt; **NOTE:** AWS does not support registering an S3 location with an IAM role and subsequently updating the S3 location registration to a service-linked role.
        /// </summary>
        [PolicyResourceProperty("hybridAccessEnabled", "_mUnknown_HybridAccessEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_HybridAccessEnabled;
        private bool _mUnknown_HybridAccessEnabled;
        public bool? HybridAccessEnabled
        {
            get
            {
                if (!_mUnknown_HybridAccessEnabled) return _mValue_HybridAccessEnabled;
                throw new UndeferrableValueException("Value 'Resource.HybridAccessEnabled' is not present");
            }
        }

        /// <summary>
        /// Date and time the resource was last modified in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
        /// </summary>
        [PolicyResourceProperty("lastModified", "_mUnknown_LastModified")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LastModified;
        private bool _mUnknown_LastModified;
        public string? LastModified
        {
            get
            {
                if (!_mUnknown_LastModified) return _mValue_LastModified;
                throw new UndeferrableValueException("Value 'Resource.LastModified' is not present");
            }
        }

        /// <summary>
        /// Role that has read/write access to the resource.
        /// </summary>
        [PolicyResourceProperty("roleArn", "_mUnknown_RoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoleArn;
        private bool _mUnknown_RoleArn;
        public string? RoleArn
        {
            get
            {
                if (!_mUnknown_RoleArn) return _mValue_RoleArn;
                throw new UndeferrableValueException("Value 'Resource.RoleArn' is not present");
            }
        }

        /// <summary>
        /// Designates an AWS Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog.
        /// </summary>
        [PolicyResourceProperty("useServiceLinkedRole", "_mUnknown_UseServiceLinkedRole")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UseServiceLinkedRole;
        private bool _mUnknown_UseServiceLinkedRole;
        public bool? UseServiceLinkedRole
        {
            get
            {
                if (!_mUnknown_UseServiceLinkedRole) return _mValue_UseServiceLinkedRole;
                throw new UndeferrableValueException("Value 'Resource.UseServiceLinkedRole' is not present");
            }
        }

        [PolicyResourceProperty("withFederation", "_mUnknown_WithFederation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_WithFederation;
        private bool _mUnknown_WithFederation;
        public bool? WithFederation
        {
            get
            {
                if (!_mUnknown_WithFederation) return _mValue_WithFederation;
                throw new UndeferrableValueException("Value 'Resource.WithFederation' is not present");
            }
        }
    }

    [PolicyResourceType("aws:lakeformation/resource:Resource")]
    public sealed class ResourceArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the resource.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'ResourceArgs.Arn' is not present");
            }
        }

        /// <summary>
        /// Flag to enable AWS LakeFormation hybrid access permission mode.
        /// 
        /// &gt; **NOTE:** AWS does not support registering an S3 location with an IAM role and subsequently updating the S3 location registration to a service-linked role.
        /// </summary>
        [PolicyResourceProperty("hybridAccessEnabled", "_mUnknown_HybridAccessEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_HybridAccessEnabled;
        private bool _mUnknown_HybridAccessEnabled;
        public bool? HybridAccessEnabled
        {
            get
            {
                if (!_mUnknown_HybridAccessEnabled) return _mValue_HybridAccessEnabled;
                throw new UndeferrableValueException("Value 'ResourceArgs.HybridAccessEnabled' is not present");
            }
        }

        /// <summary>
        /// Role that has read/write access to the resource.
        /// </summary>
        [PolicyResourceProperty("roleArn", "_mUnknown_RoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoleArn;
        private bool _mUnknown_RoleArn;
        public string? RoleArn
        {
            get
            {
                if (!_mUnknown_RoleArn) return _mValue_RoleArn;
                throw new UndeferrableValueException("Value 'ResourceArgs.RoleArn' is not present");
            }
        }

        /// <summary>
        /// Designates an AWS Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog.
        /// </summary>
        [PolicyResourceProperty("useServiceLinkedRole", "_mUnknown_UseServiceLinkedRole")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UseServiceLinkedRole;
        private bool _mUnknown_UseServiceLinkedRole;
        public bool? UseServiceLinkedRole
        {
            get
            {
                if (!_mUnknown_UseServiceLinkedRole) return _mValue_UseServiceLinkedRole;
                throw new UndeferrableValueException("Value 'ResourceArgs.UseServiceLinkedRole' is not present");
            }
        }

        [PolicyResourceProperty("withFederation", "_mUnknown_WithFederation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_WithFederation;
        private bool _mUnknown_WithFederation;
        public bool? WithFederation
        {
            get
            {
                if (!_mUnknown_WithFederation) return _mValue_WithFederation;
                throw new UndeferrableValueException("Value 'ResourceArgs.WithFederation' is not present");
            }
        }
    }
}
