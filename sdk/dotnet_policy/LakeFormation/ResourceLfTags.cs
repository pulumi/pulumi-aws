// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.LakeFormation
{
    [PolicyResourceType("aws:lakeformation/resourceLfTags:ResourceLfTags")]
    public sealed class ResourceLfTags : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
        /// </summary>
        [PolicyResourceProperty("catalogId", "_mUnknown_CatalogId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CatalogId;
        private bool _mUnknown_CatalogId;
        public string? CatalogId
        {
            get
            {
                if (!_mUnknown_CatalogId) return _mValue_CatalogId;
                throw new UndeferrableValueException("Value 'ResourceLfTags.CatalogId' is not present");
            }
        }

        /// <summary>
        /// Configuration block for a database resource. See below.
        /// </summary>
        [PolicyResourceProperty("database", "_mUnknown_Database")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ResourceLfTagsDatabase? _mValue_Database;
        private bool _mUnknown_Database;
        public Outputs.ResourceLfTagsDatabase? Database
        {
            get
            {
                if (!_mUnknown_Database) return _mValue_Database;
                throw new UndeferrableValueException("Value 'ResourceLfTags.Database' is not present");
            }
        }

        /// <summary>
        /// Set of LF-tags to attach to the resource. See below.
        /// 
        /// Exactly one of the following is required:
        /// </summary>
        [PolicyResourceProperty("lfTags", "_mUnknown_LfTags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.ResourceLfTagsLfTag>? _mValue_LfTags;
        private bool _mUnknown_LfTags;
        public List<Outputs.ResourceLfTagsLfTag>? LfTags
        {
            get
            {
                if (!_mUnknown_LfTags) return _mValue_LfTags;
                throw new UndeferrableValueException("Value 'ResourceLfTags.LfTags' is not present");
            }
        }

        /// <summary>
        /// Configuration block for a table resource. See below.
        /// </summary>
        [PolicyResourceProperty("table", "_mUnknown_Table")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ResourceLfTagsTable? _mValue_Table;
        private bool _mUnknown_Table;
        public Outputs.ResourceLfTagsTable? Table
        {
            get
            {
                if (!_mUnknown_Table) return _mValue_Table;
                throw new UndeferrableValueException("Value 'ResourceLfTags.Table' is not present");
            }
        }

        /// <summary>
        /// Configuration block for a table with columns resource. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("tableWithColumns", "_mUnknown_TableWithColumns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ResourceLfTagsTableWithColumns? _mValue_TableWithColumns;
        private bool _mUnknown_TableWithColumns;
        public Outputs.ResourceLfTagsTableWithColumns? TableWithColumns
        {
            get
            {
                if (!_mUnknown_TableWithColumns) return _mValue_TableWithColumns;
                throw new UndeferrableValueException("Value 'ResourceLfTags.TableWithColumns' is not present");
            }
        }
    }

    [PolicyResourceType("aws:lakeformation/resourceLfTags:ResourceLfTags")]
    public sealed class ResourceLfTagsArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
        /// </summary>
        [PolicyResourceProperty("catalogId", "_mUnknown_CatalogId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CatalogId;
        private bool _mUnknown_CatalogId;
        public string? CatalogId
        {
            get
            {
                if (!_mUnknown_CatalogId) return _mValue_CatalogId;
                throw new UndeferrableValueException("Value 'ResourceLfTagsArgs.CatalogId' is not present");
            }
        }

        /// <summary>
        /// Configuration block for a database resource. See below.
        /// </summary>
        [PolicyResourceProperty("database", "_mUnknown_Database")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ResourceLfTagsDatabaseArgs? _mValue_Database;
        private bool _mUnknown_Database;
        public Inputs.ResourceLfTagsDatabaseArgs? Database
        {
            get
            {
                if (!_mUnknown_Database) return _mValue_Database;
                throw new UndeferrableValueException("Value 'ResourceLfTagsArgs.Database' is not present");
            }
        }

        /// <summary>
        /// Set of LF-tags to attach to the resource. See below.
        /// 
        /// Exactly one of the following is required:
        /// </summary>
        [PolicyResourceProperty("lfTags", "_mUnknown_LfTags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.ResourceLfTagsLfTagArgs>? _mValue_LfTags;
        private bool _mUnknown_LfTags;
        public List<Inputs.ResourceLfTagsLfTagArgs>? LfTags
        {
            get
            {
                if (!_mUnknown_LfTags) return _mValue_LfTags;
                throw new UndeferrableValueException("Value 'ResourceLfTagsArgs.LfTags' is not present");
            }
        }

        /// <summary>
        /// Configuration block for a table resource. See below.
        /// </summary>
        [PolicyResourceProperty("table", "_mUnknown_Table")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ResourceLfTagsTableArgs? _mValue_Table;
        private bool _mUnknown_Table;
        public Inputs.ResourceLfTagsTableArgs? Table
        {
            get
            {
                if (!_mUnknown_Table) return _mValue_Table;
                throw new UndeferrableValueException("Value 'ResourceLfTagsArgs.Table' is not present");
            }
        }

        /// <summary>
        /// Configuration block for a table with columns resource. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("tableWithColumns", "_mUnknown_TableWithColumns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ResourceLfTagsTableWithColumnsArgs? _mValue_TableWithColumns;
        private bool _mUnknown_TableWithColumns;
        public Inputs.ResourceLfTagsTableWithColumnsArgs? TableWithColumns
        {
            get
            {
                if (!_mUnknown_TableWithColumns) return _mValue_TableWithColumns;
                throw new UndeferrableValueException("Value 'ResourceLfTagsArgs.TableWithColumns' is not present");
            }
        }
    }
}
