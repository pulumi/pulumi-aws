// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.MediaLive.Outputs
{
    public sealed class ChannelEncoderSettingsAudioDescription
    {
        /// <summary>
        /// Advanced audio normalization settings. See Audio Normalization Settings for more details.
        /// </summary>
        [PolicyResourceProperty("audioNormalizationSettings", "_mUnknown_AudioNormalizationSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings? _mValue_AudioNormalizationSettings;
        private bool _mUnknown_AudioNormalizationSettings;
        public Outputs.ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings? AudioNormalizationSettings
        {
            get
            {
                if (!_mUnknown_AudioNormalizationSettings) return _mValue_AudioNormalizationSettings;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescription.AudioNormalizationSettings' is not present");
            }
        }

        /// <summary>
        /// The name of the audio selector used as the source for this AudioDescription.
        /// </summary>
        [PolicyResourceProperty("audioSelectorName", "_mUnknown_AudioSelectorName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AudioSelectorName;
        private bool _mUnknown_AudioSelectorName;
        public string? AudioSelectorName
        {
            get
            {
                if (!_mUnknown_AudioSelectorName) return _mValue_AudioSelectorName;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescription.AudioSelectorName' is not present");
            }
        }

        /// <summary>
        /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
        /// </summary>
        [PolicyResourceProperty("audioType", "_mUnknown_AudioType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AudioType;
        private bool _mUnknown_AudioType;
        public string? AudioType
        {
            get
            {
                if (!_mUnknown_AudioType) return _mValue_AudioType;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescription.AudioType' is not present");
            }
        }

        /// <summary>
        /// Determined how audio type is determined.
        /// </summary>
        [PolicyResourceProperty("audioTypeControl", "_mUnknown_AudioTypeControl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AudioTypeControl;
        private bool _mUnknown_AudioTypeControl;
        public string? AudioTypeControl
        {
            get
            {
                if (!_mUnknown_AudioTypeControl) return _mValue_AudioTypeControl;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescription.AudioTypeControl' is not present");
            }
        }

        /// <summary>
        /// Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
        /// </summary>
        [PolicyResourceProperty("audioWatermarkSettings", "_mUnknown_AudioWatermarkSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings? _mValue_AudioWatermarkSettings;
        private bool _mUnknown_AudioWatermarkSettings;
        public Outputs.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings? AudioWatermarkSettings
        {
            get
            {
                if (!_mUnknown_AudioWatermarkSettings) return _mValue_AudioWatermarkSettings;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescription.AudioWatermarkSettings' is not present");
            }
        }

        /// <summary>
        /// Audio codec settings. See Audio Codec Settings for more details.
        /// </summary>
        [PolicyResourceProperty("codecSettings", "_mUnknown_CodecSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ChannelEncoderSettingsAudioDescriptionCodecSettings? _mValue_CodecSettings;
        private bool _mUnknown_CodecSettings;
        public Outputs.ChannelEncoderSettingsAudioDescriptionCodecSettings? CodecSettings
        {
            get
            {
                if (!_mUnknown_CodecSettings) return _mValue_CodecSettings;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescription.CodecSettings' is not present");
            }
        }

        [PolicyResourceProperty("languageCode", "_mUnknown_LanguageCode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LanguageCode;
        private bool _mUnknown_LanguageCode;
        public string? LanguageCode
        {
            get
            {
                if (!_mUnknown_LanguageCode) return _mValue_LanguageCode;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescription.LanguageCode' is not present");
            }
        }

        [PolicyResourceProperty("languageCodeControl", "_mUnknown_LanguageCodeControl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LanguageCodeControl;
        private bool _mUnknown_LanguageCodeControl;
        public string? LanguageCodeControl
        {
            get
            {
                if (!_mUnknown_LanguageCodeControl) return _mValue_LanguageCodeControl;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescription.LanguageCodeControl' is not present");
            }
        }

        /// <summary>
        /// The name of this audio description.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescription.Name' is not present");
            }
        }

        [PolicyResourceProperty("remixSettings", "_mUnknown_RemixSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ChannelEncoderSettingsAudioDescriptionRemixSettings? _mValue_RemixSettings;
        private bool _mUnknown_RemixSettings;
        public Outputs.ChannelEncoderSettingsAudioDescriptionRemixSettings? RemixSettings
        {
            get
            {
                if (!_mUnknown_RemixSettings) return _mValue_RemixSettings;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescription.RemixSettings' is not present");
            }
        }

        /// <summary>
        /// Stream name RTMP destinations (URLs of type rtmp://)
        /// </summary>
        [PolicyResourceProperty("streamName", "_mUnknown_StreamName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StreamName;
        private bool _mUnknown_StreamName;
        public string? StreamName
        {
            get
            {
                if (!_mUnknown_StreamName) return _mValue_StreamName;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsAudioDescription.StreamName' is not present");
            }
        }
    }
}
