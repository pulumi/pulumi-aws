// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.MediaLive.Inputs
{
    public sealed class ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs
    {
        /// <summary>
        /// Enables or disables adaptive quantization.
        /// </summary>
        [PolicyResourceProperty("adaptiveQuantization", "_mUnknown_AdaptiveQuantization")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AdaptiveQuantization;
        private bool _mUnknown_AdaptiveQuantization;
        public string? AdaptiveQuantization
        {
            get
            {
                if (!_mUnknown_AdaptiveQuantization) return _mValue_AdaptiveQuantization;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.AdaptiveQuantization' is not present");
            }
        }

        /// <summary>
        /// Indicates that AFD values will be written into the output stream.
        /// </summary>
        [PolicyResourceProperty("afdSignaling", "_mUnknown_AfdSignaling")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AfdSignaling;
        private bool _mUnknown_AfdSignaling;
        public string? AfdSignaling
        {
            get
            {
                if (!_mUnknown_AfdSignaling) return _mValue_AfdSignaling;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.AfdSignaling' is not present");
            }
        }

        /// <summary>
        /// Average bitrate in bits/second.
        /// </summary>
        [PolicyResourceProperty("bitrate", "_mUnknown_Bitrate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Bitrate;
        private bool _mUnknown_Bitrate;
        public int? Bitrate
        {
            get
            {
                if (!_mUnknown_Bitrate) return _mValue_Bitrate;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.Bitrate' is not present");
            }
        }

        [PolicyResourceProperty("bufFillPct", "_mUnknown_BufFillPct")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_BufFillPct;
        private bool _mUnknown_BufFillPct;
        public int? BufFillPct
        {
            get
            {
                if (!_mUnknown_BufFillPct) return _mValue_BufFillPct;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.BufFillPct' is not present");
            }
        }

        /// <summary>
        /// Size of buffer in bits.
        /// </summary>
        [PolicyResourceProperty("bufSize", "_mUnknown_BufSize")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_BufSize;
        private bool _mUnknown_BufSize;
        public int? BufSize
        {
            get
            {
                if (!_mUnknown_BufSize) return _mValue_BufSize;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.BufSize' is not present");
            }
        }

        /// <summary>
        /// Includes color space metadata in the output.
        /// </summary>
        [PolicyResourceProperty("colorMetadata", "_mUnknown_ColorMetadata")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ColorMetadata;
        private bool _mUnknown_ColorMetadata;
        public string? ColorMetadata
        {
            get
            {
                if (!_mUnknown_ColorMetadata) return _mValue_ColorMetadata;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.ColorMetadata' is not present");
            }
        }

        /// <summary>
        /// Entropy encoding mode.
        /// </summary>
        [PolicyResourceProperty("entropyEncoding", "_mUnknown_EntropyEncoding")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EntropyEncoding;
        private bool _mUnknown_EntropyEncoding;
        public string? EntropyEncoding
        {
            get
            {
                if (!_mUnknown_EntropyEncoding) return _mValue_EntropyEncoding;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.EntropyEncoding' is not present");
            }
        }

        /// <summary>
        /// Filters to apply to an encode. See H264 Filter Settings for more details.
        /// </summary>
        [PolicyResourceProperty("filterSettings", "_mUnknown_FilterSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs? _mValue_FilterSettings;
        private bool _mUnknown_FilterSettings;
        public Inputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsArgs? FilterSettings
        {
            get
            {
                if (!_mUnknown_FilterSettings) return _mValue_FilterSettings;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.FilterSettings' is not present");
            }
        }

        /// <summary>
        /// Four bit AFD value to write on all frames of video in the output stream.
        /// </summary>
        [PolicyResourceProperty("fixedAfd", "_mUnknown_FixedAfd")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FixedAfd;
        private bool _mUnknown_FixedAfd;
        public string? FixedAfd
        {
            get
            {
                if (!_mUnknown_FixedAfd) return _mValue_FixedAfd;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.FixedAfd' is not present");
            }
        }

        [PolicyResourceProperty("flickerAq", "_mUnknown_FlickerAq")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FlickerAq;
        private bool _mUnknown_FlickerAq;
        public string? FlickerAq
        {
            get
            {
                if (!_mUnknown_FlickerAq) return _mValue_FlickerAq;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.FlickerAq' is not present");
            }
        }

        /// <summary>
        /// Controls whether coding is performed on a field basis or on a frame basis.
        /// </summary>
        [PolicyResourceProperty("forceFieldPictures", "_mUnknown_ForceFieldPictures")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ForceFieldPictures;
        private bool _mUnknown_ForceFieldPictures;
        public string? ForceFieldPictures
        {
            get
            {
                if (!_mUnknown_ForceFieldPictures) return _mValue_ForceFieldPictures;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.ForceFieldPictures' is not present");
            }
        }

        /// <summary>
        /// Indicates how the output video frame rate is specified.
        /// </summary>
        [PolicyResourceProperty("framerateControl", "_mUnknown_FramerateControl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FramerateControl;
        private bool _mUnknown_FramerateControl;
        public string? FramerateControl
        {
            get
            {
                if (!_mUnknown_FramerateControl) return _mValue_FramerateControl;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.FramerateControl' is not present");
            }
        }

        /// <summary>
        /// Framerate denominator.
        /// </summary>
        [PolicyResourceProperty("framerateDenominator", "_mUnknown_FramerateDenominator")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_FramerateDenominator;
        private bool _mUnknown_FramerateDenominator;
        public int? FramerateDenominator
        {
            get
            {
                if (!_mUnknown_FramerateDenominator) return _mValue_FramerateDenominator;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.FramerateDenominator' is not present");
            }
        }

        /// <summary>
        /// Framerate numerator.
        /// </summary>
        [PolicyResourceProperty("framerateNumerator", "_mUnknown_FramerateNumerator")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_FramerateNumerator;
        private bool _mUnknown_FramerateNumerator;
        public int? FramerateNumerator
        {
            get
            {
                if (!_mUnknown_FramerateNumerator) return _mValue_FramerateNumerator;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.FramerateNumerator' is not present");
            }
        }

        /// <summary>
        /// GOP-B reference.
        /// </summary>
        [PolicyResourceProperty("gopBReference", "_mUnknown_GopBReference")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GopBReference;
        private bool _mUnknown_GopBReference;
        public string? GopBReference
        {
            get
            {
                if (!_mUnknown_GopBReference) return _mValue_GopBReference;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.GopBReference' is not present");
            }
        }

        /// <summary>
        /// Frequency of closed GOPs.
        /// </summary>
        [PolicyResourceProperty("gopClosedCadence", "_mUnknown_GopClosedCadence")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_GopClosedCadence;
        private bool _mUnknown_GopClosedCadence;
        public int? GopClosedCadence
        {
            get
            {
                if (!_mUnknown_GopClosedCadence) return _mValue_GopClosedCadence;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.GopClosedCadence' is not present");
            }
        }

        /// <summary>
        /// Number of B-frames between reference frames.
        /// </summary>
        [PolicyResourceProperty("gopNumBFrames", "_mUnknown_GopNumBFrames")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_GopNumBFrames;
        private bool _mUnknown_GopNumBFrames;
        public int? GopNumBFrames
        {
            get
            {
                if (!_mUnknown_GopNumBFrames) return _mValue_GopNumBFrames;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.GopNumBFrames' is not present");
            }
        }

        /// <summary>
        /// GOP size in units of either frames of seconds per `gop_size_units`.
        /// </summary>
        [PolicyResourceProperty("gopSize", "_mUnknown_GopSize")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private double? _mValue_GopSize;
        private bool _mUnknown_GopSize;
        public double? GopSize
        {
            get
            {
                if (!_mUnknown_GopSize) return _mValue_GopSize;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.GopSize' is not present");
            }
        }

        /// <summary>
        /// Indicates if the `gop_size` is specified in frames or seconds.
        /// </summary>
        [PolicyResourceProperty("gopSizeUnits", "_mUnknown_GopSizeUnits")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GopSizeUnits;
        private bool _mUnknown_GopSizeUnits;
        public string? GopSizeUnits
        {
            get
            {
                if (!_mUnknown_GopSizeUnits) return _mValue_GopSizeUnits;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.GopSizeUnits' is not present");
            }
        }

        /// <summary>
        /// H264 level.
        /// </summary>
        [PolicyResourceProperty("level", "_mUnknown_Level")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Level;
        private bool _mUnknown_Level;
        public string? Level
        {
            get
            {
                if (!_mUnknown_Level) return _mValue_Level;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.Level' is not present");
            }
        }

        /// <summary>
        /// Amount of lookahead.
        /// </summary>
        [PolicyResourceProperty("lookAheadRateControl", "_mUnknown_LookAheadRateControl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LookAheadRateControl;
        private bool _mUnknown_LookAheadRateControl;
        public string? LookAheadRateControl
        {
            get
            {
                if (!_mUnknown_LookAheadRateControl) return _mValue_LookAheadRateControl;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.LookAheadRateControl' is not present");
            }
        }

        /// <summary>
        /// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
        /// </summary>
        [PolicyResourceProperty("maxBitrate", "_mUnknown_MaxBitrate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxBitrate;
        private bool _mUnknown_MaxBitrate;
        public int? MaxBitrate
        {
            get
            {
                if (!_mUnknown_MaxBitrate) return _mValue_MaxBitrate;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.MaxBitrate' is not present");
            }
        }

        /// <summary>
        /// Min interval.
        /// </summary>
        [PolicyResourceProperty("minIInterval", "_mUnknown_MinIInterval")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MinIInterval;
        private bool _mUnknown_MinIInterval;
        public int? MinIInterval
        {
            get
            {
                if (!_mUnknown_MinIInterval) return _mValue_MinIInterval;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.MinIInterval' is not present");
            }
        }

        /// <summary>
        /// Number of reference frames to use.
        /// </summary>
        [PolicyResourceProperty("numRefFrames", "_mUnknown_NumRefFrames")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_NumRefFrames;
        private bool _mUnknown_NumRefFrames;
        public int? NumRefFrames
        {
            get
            {
                if (!_mUnknown_NumRefFrames) return _mValue_NumRefFrames;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.NumRefFrames' is not present");
            }
        }

        /// <summary>
        /// Indicates how the output pixel aspect ratio is specified.
        /// </summary>
        [PolicyResourceProperty("parControl", "_mUnknown_ParControl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ParControl;
        private bool _mUnknown_ParControl;
        public string? ParControl
        {
            get
            {
                if (!_mUnknown_ParControl) return _mValue_ParControl;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.ParControl' is not present");
            }
        }

        /// <summary>
        /// Pixel Aspect Ratio denominator.
        /// </summary>
        [PolicyResourceProperty("parDenominator", "_mUnknown_ParDenominator")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ParDenominator;
        private bool _mUnknown_ParDenominator;
        public int? ParDenominator
        {
            get
            {
                if (!_mUnknown_ParDenominator) return _mValue_ParDenominator;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.ParDenominator' is not present");
            }
        }

        /// <summary>
        /// Pixel Aspect Ratio numerator.
        /// </summary>
        [PolicyResourceProperty("parNumerator", "_mUnknown_ParNumerator")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ParNumerator;
        private bool _mUnknown_ParNumerator;
        public int? ParNumerator
        {
            get
            {
                if (!_mUnknown_ParNumerator) return _mValue_ParNumerator;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.ParNumerator' is not present");
            }
        }

        /// <summary>
        /// H264 profile.
        /// </summary>
        [PolicyResourceProperty("profile", "_mUnknown_Profile")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Profile;
        private bool _mUnknown_Profile;
        public string? Profile
        {
            get
            {
                if (!_mUnknown_Profile) return _mValue_Profile;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.Profile' is not present");
            }
        }

        /// <summary>
        /// Quality level.
        /// </summary>
        [PolicyResourceProperty("qualityLevel", "_mUnknown_QualityLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_QualityLevel;
        private bool _mUnknown_QualityLevel;
        public string? QualityLevel
        {
            get
            {
                if (!_mUnknown_QualityLevel) return _mValue_QualityLevel;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.QualityLevel' is not present");
            }
        }

        /// <summary>
        /// Controls the target quality for the video encode.
        /// </summary>
        [PolicyResourceProperty("qvbrQualityLevel", "_mUnknown_QvbrQualityLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_QvbrQualityLevel;
        private bool _mUnknown_QvbrQualityLevel;
        public int? QvbrQualityLevel
        {
            get
            {
                if (!_mUnknown_QvbrQualityLevel) return _mValue_QvbrQualityLevel;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.QvbrQualityLevel' is not present");
            }
        }

        /// <summary>
        /// Rate control mode.
        /// </summary>
        [PolicyResourceProperty("rateControlMode", "_mUnknown_RateControlMode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RateControlMode;
        private bool _mUnknown_RateControlMode;
        public string? RateControlMode
        {
            get
            {
                if (!_mUnknown_RateControlMode) return _mValue_RateControlMode;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.RateControlMode' is not present");
            }
        }

        /// <summary>
        /// Sets the scan type of the output.
        /// </summary>
        [PolicyResourceProperty("scanType", "_mUnknown_ScanType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ScanType;
        private bool _mUnknown_ScanType;
        public string? ScanType
        {
            get
            {
                if (!_mUnknown_ScanType) return _mValue_ScanType;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.ScanType' is not present");
            }
        }

        /// <summary>
        /// Scene change detection.
        /// </summary>
        [PolicyResourceProperty("sceneChangeDetect", "_mUnknown_SceneChangeDetect")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SceneChangeDetect;
        private bool _mUnknown_SceneChangeDetect;
        public string? SceneChangeDetect
        {
            get
            {
                if (!_mUnknown_SceneChangeDetect) return _mValue_SceneChangeDetect;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.SceneChangeDetect' is not present");
            }
        }

        /// <summary>
        /// Number of slices per picture.
        /// </summary>
        [PolicyResourceProperty("slices", "_mUnknown_Slices")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Slices;
        private bool _mUnknown_Slices;
        public int? Slices
        {
            get
            {
                if (!_mUnknown_Slices) return _mValue_Slices;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.Slices' is not present");
            }
        }

        /// <summary>
        /// Softness.
        /// </summary>
        [PolicyResourceProperty("softness", "_mUnknown_Softness")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Softness;
        private bool _mUnknown_Softness;
        public int? Softness
        {
            get
            {
                if (!_mUnknown_Softness) return _mValue_Softness;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.Softness' is not present");
            }
        }

        /// <summary>
        /// Makes adjustments within each frame based on spatial variation of content complexity.
        /// </summary>
        [PolicyResourceProperty("spatialAq", "_mUnknown_SpatialAq")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SpatialAq;
        private bool _mUnknown_SpatialAq;
        public string? SpatialAq
        {
            get
            {
                if (!_mUnknown_SpatialAq) return _mValue_SpatialAq;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.SpatialAq' is not present");
            }
        }

        /// <summary>
        /// Subgop length.
        /// </summary>
        [PolicyResourceProperty("subgopLength", "_mUnknown_SubgopLength")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SubgopLength;
        private bool _mUnknown_SubgopLength;
        public string? SubgopLength
        {
            get
            {
                if (!_mUnknown_SubgopLength) return _mValue_SubgopLength;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.SubgopLength' is not present");
            }
        }

        /// <summary>
        /// Produces a bitstream compliant with SMPTE RP-2027.
        /// </summary>
        [PolicyResourceProperty("syntax", "_mUnknown_Syntax")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Syntax;
        private bool _mUnknown_Syntax;
        public string? Syntax
        {
            get
            {
                if (!_mUnknown_Syntax) return _mValue_Syntax;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.Syntax' is not present");
            }
        }

        /// <summary>
        /// Makes adjustments within each frame based on temporal variation of content complexity.
        /// </summary>
        [PolicyResourceProperty("temporalAq", "_mUnknown_TemporalAq")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TemporalAq;
        private bool _mUnknown_TemporalAq;
        public string? TemporalAq
        {
            get
            {
                if (!_mUnknown_TemporalAq) return _mValue_TemporalAq;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.TemporalAq' is not present");
            }
        }

        /// <summary>
        /// Determines how timecodes should be inserted into the video elementary stream.
        /// </summary>
        [PolicyResourceProperty("timecodeInsertion", "_mUnknown_TimecodeInsertion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TimecodeInsertion;
        private bool _mUnknown_TimecodeInsertion;
        public string? TimecodeInsertion
        {
            get
            {
                if (!_mUnknown_TimecodeInsertion) return _mValue_TimecodeInsertion;
                throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsArgs.TimecodeInsertion' is not present");
            }
        }
    }
}
