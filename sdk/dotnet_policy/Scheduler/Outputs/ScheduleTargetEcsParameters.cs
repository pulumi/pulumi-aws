// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Scheduler.Outputs
{
    public sealed class ScheduleTargetEcsParameters
    {
        /// <summary>
        /// Up to `6` capacity provider strategies to use for the task. Detailed below.
        /// </summary>
        [PolicyResourceProperty("capacityProviderStrategies", "_mUnknown_CapacityProviderStrategies")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.ScheduleTargetEcsParametersCapacityProviderStrategy>? _mValue_CapacityProviderStrategies;
        private bool _mUnknown_CapacityProviderStrategies;
        public List<Outputs.ScheduleTargetEcsParametersCapacityProviderStrategy>? CapacityProviderStrategies
        {
            get
            {
                if (!_mUnknown_CapacityProviderStrategies) return _mValue_CapacityProviderStrategies;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.CapacityProviderStrategies' is not present");
            }
        }

        /// <summary>
        /// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
        /// </summary>
        [PolicyResourceProperty("enableEcsManagedTags", "_mUnknown_EnableEcsManagedTags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableEcsManagedTags;
        private bool _mUnknown_EnableEcsManagedTags;
        public bool? EnableEcsManagedTags
        {
            get
            {
                if (!_mUnknown_EnableEcsManagedTags) return _mValue_EnableEcsManagedTags;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.EnableEcsManagedTags' is not present");
            }
        }

        /// <summary>
        /// Specifies whether to enable the execute command functionality for the containers in this task.
        /// </summary>
        [PolicyResourceProperty("enableExecuteCommand", "_mUnknown_EnableExecuteCommand")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableExecuteCommand;
        private bool _mUnknown_EnableExecuteCommand;
        public bool? EnableExecuteCommand
        {
            get
            {
                if (!_mUnknown_EnableExecuteCommand) return _mValue_EnableExecuteCommand;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.EnableExecuteCommand' is not present");
            }
        }

        /// <summary>
        /// Specifies an ECS task group for the task. At most 255 characters.
        /// </summary>
        [PolicyResourceProperty("group", "_mUnknown_Group")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Group;
        private bool _mUnknown_Group;
        public string? Group
        {
            get
            {
                if (!_mUnknown_Group) return _mValue_Group;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.Group' is not present");
            }
        }

        /// <summary>
        /// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
        /// </summary>
        [PolicyResourceProperty("launchType", "_mUnknown_LaunchType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LaunchType;
        private bool _mUnknown_LaunchType;
        public string? LaunchType
        {
            get
            {
                if (!_mUnknown_LaunchType) return _mValue_LaunchType;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.LaunchType' is not present");
            }
        }

        /// <summary>
        /// Configures the networking associated with the task. Detailed below.
        /// </summary>
        [PolicyResourceProperty("networkConfiguration", "_mUnknown_NetworkConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ScheduleTargetEcsParametersNetworkConfiguration? _mValue_NetworkConfiguration;
        private bool _mUnknown_NetworkConfiguration;
        public Outputs.ScheduleTargetEcsParametersNetworkConfiguration? NetworkConfiguration
        {
            get
            {
                if (!_mUnknown_NetworkConfiguration) return _mValue_NetworkConfiguration;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.NetworkConfiguration' is not present");
            }
        }

        /// <summary>
        /// A set of up to 10 placement constraints to use for the task. Detailed below.
        /// </summary>
        [PolicyResourceProperty("placementConstraints", "_mUnknown_PlacementConstraints")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.ScheduleTargetEcsParametersPlacementConstraint>? _mValue_PlacementConstraints;
        private bool _mUnknown_PlacementConstraints;
        public List<Outputs.ScheduleTargetEcsParametersPlacementConstraint>? PlacementConstraints
        {
            get
            {
                if (!_mUnknown_PlacementConstraints) return _mValue_PlacementConstraints;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.PlacementConstraints' is not present");
            }
        }

        /// <summary>
        /// A set of up to 5 placement strategies. Detailed below.
        /// </summary>
        [PolicyResourceProperty("placementStrategies", "_mUnknown_PlacementStrategies")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.ScheduleTargetEcsParametersPlacementStrategy>? _mValue_PlacementStrategies;
        private bool _mUnknown_PlacementStrategies;
        public List<Outputs.ScheduleTargetEcsParametersPlacementStrategy>? PlacementStrategies
        {
            get
            {
                if (!_mUnknown_PlacementStrategies) return _mValue_PlacementStrategies;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.PlacementStrategies' is not present");
            }
        }

        /// <summary>
        /// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
        /// </summary>
        [PolicyResourceProperty("platformVersion", "_mUnknown_PlatformVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PlatformVersion;
        private bool _mUnknown_PlatformVersion;
        public string? PlatformVersion
        {
            get
            {
                if (!_mUnknown_PlatformVersion) return _mValue_PlatformVersion;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.PlatformVersion' is not present");
            }
        }

        /// <summary>
        /// Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
        /// </summary>
        [PolicyResourceProperty("propagateTags", "_mUnknown_PropagateTags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PropagateTags;
        private bool _mUnknown_PropagateTags;
        public string? PropagateTags
        {
            get
            {
                if (!_mUnknown_PropagateTags) return _mValue_PropagateTags;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.PropagateTags' is not present");
            }
        }

        /// <summary>
        /// Reference ID to use for the task.
        /// </summary>
        [PolicyResourceProperty("referenceId", "_mUnknown_ReferenceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ReferenceId;
        private bool _mUnknown_ReferenceId;
        public string? ReferenceId
        {
            get
            {
                if (!_mUnknown_ReferenceId) return _mValue_ReferenceId;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.ReferenceId' is not present");
            }
        }

        /// <summary>
        /// The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.Tags' is not present");
            }
        }

        /// <summary>
        /// The number of tasks to create. Ranges from `1` (default) to `10`.
        /// </summary>
        [PolicyResourceProperty("taskCount", "_mUnknown_TaskCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_TaskCount;
        private bool _mUnknown_TaskCount;
        public int? TaskCount
        {
            get
            {
                if (!_mUnknown_TaskCount) return _mValue_TaskCount;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.TaskCount' is not present");
            }
        }

        /// <summary>
        /// ARN of the task definition to use.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("taskDefinitionArn", "_mUnknown_TaskDefinitionArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TaskDefinitionArn;
        private bool _mUnknown_TaskDefinitionArn;
        public string? TaskDefinitionArn
        {
            get
            {
                if (!_mUnknown_TaskDefinitionArn) return _mValue_TaskDefinitionArn;
                throw new UndeferrableValueException("Value 'ScheduleTargetEcsParameters.TaskDefinitionArn' is not present");
            }
        }
    }
}
