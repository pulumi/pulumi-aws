// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Iot
{
    [PolicyResourceType("aws:iot/loggingOptions:LoggingOptions")]
    public sealed class LoggingOptions : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
        /// </summary>
        [PolicyResourceProperty("defaultLogLevel", "_mUnknown_DefaultLogLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultLogLevel;
        private bool _mUnknown_DefaultLogLevel;
        public string? DefaultLogLevel
        {
            get
            {
                if (!_mUnknown_DefaultLogLevel) return _mValue_DefaultLogLevel;
                throw new UndeferrableValueException("Value 'LoggingOptions.DefaultLogLevel' is not present");
            }
        }

        /// <summary>
        /// If `true` all logs are disabled. The default is `false`.
        /// </summary>
        [PolicyResourceProperty("disableAllLogs", "_mUnknown_DisableAllLogs")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DisableAllLogs;
        private bool _mUnknown_DisableAllLogs;
        public bool? DisableAllLogs
        {
            get
            {
                if (!_mUnknown_DisableAllLogs) return _mValue_DisableAllLogs;
                throw new UndeferrableValueException("Value 'LoggingOptions.DisableAllLogs' is not present");
            }
        }

        /// <summary>
        /// The ARN of the role that allows IoT to write to Cloudwatch logs.
        /// </summary>
        [PolicyResourceProperty("roleArn", "_mUnknown_RoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoleArn;
        private bool _mUnknown_RoleArn;
        public string? RoleArn
        {
            get
            {
                if (!_mUnknown_RoleArn) return _mValue_RoleArn;
                throw new UndeferrableValueException("Value 'LoggingOptions.RoleArn' is not present");
            }
        }
    }

    [PolicyResourceType("aws:iot/loggingOptions:LoggingOptions")]
    public sealed class LoggingOptionsArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
        /// </summary>
        [PolicyResourceProperty("defaultLogLevel", "_mUnknown_DefaultLogLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultLogLevel;
        private bool _mUnknown_DefaultLogLevel;
        public string? DefaultLogLevel
        {
            get
            {
                if (!_mUnknown_DefaultLogLevel) return _mValue_DefaultLogLevel;
                throw new UndeferrableValueException("Value 'LoggingOptionsArgs.DefaultLogLevel' is not present");
            }
        }

        /// <summary>
        /// If `true` all logs are disabled. The default is `false`.
        /// </summary>
        [PolicyResourceProperty("disableAllLogs", "_mUnknown_DisableAllLogs")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DisableAllLogs;
        private bool _mUnknown_DisableAllLogs;
        public bool? DisableAllLogs
        {
            get
            {
                if (!_mUnknown_DisableAllLogs) return _mValue_DisableAllLogs;
                throw new UndeferrableValueException("Value 'LoggingOptionsArgs.DisableAllLogs' is not present");
            }
        }

        /// <summary>
        /// The ARN of the role that allows IoT to write to Cloudwatch logs.
        /// </summary>
        [PolicyResourceProperty("roleArn", "_mUnknown_RoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoleArn;
        private bool _mUnknown_RoleArn;
        public string? RoleArn
        {
            get
            {
                if (!_mUnknown_RoleArn) return _mValue_RoleArn;
                throw new UndeferrableValueException("Value 'LoggingOptionsArgs.RoleArn' is not present");
            }
        }
    }
}
