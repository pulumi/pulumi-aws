// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Iot
{
    [PolicyResourceType("aws:iot/topicRule:TopicRule")]
    public sealed class TopicRule : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The ARN of the topic rule
        /// </summary>
        [Input("arn")]
        public string? Arn;

        [Input("cloudwatchAlarms")]
        public List<TopicRuleCloudwatchAlarm>? CloudwatchAlarms;

        [Input("cloudwatchLogs")]
        public List<TopicRuleCloudwatchLog>? CloudwatchLogs;

        [Input("cloudwatchMetrics")]
        public List<TopicRuleCloudwatchMetric>? CloudwatchMetrics;

        /// <summary>
        /// The description of the rule.
        /// </summary>
        [Input("description")]
        public string? Description;

        [Input("dynamodbs")]
        public List<TopicRuleDynamodb>? Dynamodbs;

        [Input("dynamodbv2s")]
        public List<TopicRuleDynamodbv2>? Dynamodbv2s;

        [Input("elasticsearch")]
        public List<TopicRuleElasticsearch>? Elasticsearch;

        /// <summary>
        /// Specifies whether the rule is enabled.
        /// </summary>
        [Input("enabled")]
        public bool? Enabled;

        /// <summary>
        /// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatch_alarm`, `cloudwatch_logs`, `cloudwatch_metric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iot_analytics`, `iot_events`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `step_functions`, `timestream` configuration blocks for further configuration details.
        /// </summary>
        [Input("errorAction")]
        public TopicRuleErrorAction? ErrorAction;

        [Input("firehoses")]
        public List<TopicRuleFirehose>? Firehoses;

        [Input("https")]
        public List<TopicRuleHttp>? Https;

        [Input("iotAnalytics")]
        public List<TopicRuleIotAnalytic>? IotAnalytics;

        [Input("iotEvents")]
        public List<TopicRuleIotEvent>? IotEvents;

        [Input("kafkas")]
        public List<TopicRuleKafka>? Kafkas;

        [Input("kineses")]
        public List<TopicRuleKinesis>? Kineses;

        [Input("lambdas")]
        public List<TopicRuleLambda>? Lambdas;

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Input("name")]
        public string? Name;

        [Input("republishes")]
        public List<TopicRuleRepublish>? Republishes;

        [Input("s3")]
        public List<TopicRuleS3>? S3;

        [Input("sns")]
        public List<TopicRuleSns>? Sns;

        /// <summary>
        /// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
        /// </summary>
        [Input("sql")]
        public string? Sql;

        /// <summary>
        /// The version of the SQL rules engine to use when evaluating the rule.
        /// </summary>
        [Input("sqlVersion")]
        public string? SqlVersion;

        [Input("sqs")]
        public List<TopicRuleSqs>? Sqs;

        [Input("stepFunctions")]
        public List<TopicRuleStepFunction>? StepFunctions;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        [Input("timestreams")]
        public List<TopicRuleTimestream>? Timestreams;
    }
}
