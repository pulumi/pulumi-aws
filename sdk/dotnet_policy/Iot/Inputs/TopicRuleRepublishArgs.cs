// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Iot.Inputs
{
    public sealed class TopicRuleRepublishArgs
    {
        /// <summary>
        /// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
        /// </summary>
        [PolicyResourceProperty("qos", "_mUnknown_Qos")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Qos;
        private bool _mUnknown_Qos;
        public int? Qos
        {
            get
            {
                if (!_mUnknown_Qos) return _mValue_Qos;
                throw new UndeferrableValueException("Value 'TopicRuleRepublishArgs.Qos' is not present");
            }
        }

        /// <summary>
        /// The ARN of the IAM role that grants access.
        /// </summary>
        [PolicyResourceProperty("roleArn", "_mUnknown_RoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoleArn;
        private bool _mUnknown_RoleArn;
        public string? RoleArn
        {
            get
            {
                if (!_mUnknown_RoleArn) return _mValue_RoleArn;
                throw new UndeferrableValueException("Value 'TopicRuleRepublishArgs.RoleArn' is not present");
            }
        }

        /// <summary>
        /// The name of the MQTT topic the message should be republished to.
        /// </summary>
        [PolicyResourceProperty("topic", "_mUnknown_Topic")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Topic;
        private bool _mUnknown_Topic;
        public string? Topic
        {
            get
            {
                if (!_mUnknown_Topic) return _mValue_Topic;
                throw new UndeferrableValueException("Value 'TopicRuleRepublishArgs.Topic' is not present");
            }
        }
    }
}
