// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudFront.Outputs
{
    public sealed class ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig
    {
        /// <summary>
        /// Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to the staging distribution, while others are sent to the primary distribution. Define the session duration using TTL values. See `session_stickiness_config`.
        /// </summary>
        [PolicyResourceProperty("sessionStickinessConfig", "_mUnknown_SessionStickinessConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig? _mValue_SessionStickinessConfig;
        private bool _mUnknown_SessionStickinessConfig;
        public Outputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig? SessionStickinessConfig
        {
            get
            {
                if (!_mUnknown_SessionStickinessConfig) return _mValue_SessionStickinessConfig;
                throw new UndeferrableValueException("Value 'ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig.SessionStickinessConfig' is not present");
            }
        }

        /// <summary>
        /// The percentage of traffic to send to a staging distribution, expressed as a decimal number between `0` and `.15`.
        /// </summary>
        [PolicyResourceProperty("weight", "_mUnknown_Weight")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private double? _mValue_Weight;
        private bool _mUnknown_Weight;
        public double? Weight
        {
            get
            {
                if (!_mUnknown_Weight) return _mValue_Weight;
                throw new UndeferrableValueException("Value 'ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig.Weight' is not present");
            }
        }
    }
}
