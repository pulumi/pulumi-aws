// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudFront.Inputs
{
    public sealed class DistributionDefaultCacheBehaviorForwardedValuesArgs
    {
        /// <summary>
        /// The forwarded values cookies that specifies how CloudFront handles cookies (maximum one).
        /// </summary>
        [PolicyResourceProperty("cookies", "_mUnknown_Cookies")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs? _mValue_Cookies;
        private bool _mUnknown_Cookies;
        public Inputs.DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs? Cookies
        {
            get
            {
                if (!_mUnknown_Cookies) return _mValue_Cookies;
                throw new UndeferrableValueException("Value 'DistributionDefaultCacheBehaviorForwardedValuesArgs.Cookies' is not present");
            }
        }

        /// <summary>
        /// Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify `*` to include all headers.
        /// </summary>
        [PolicyResourceProperty("headers", "_mUnknown_Headers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Headers;
        private bool _mUnknown_Headers;
        public List<string>? Headers
        {
            get
            {
                if (!_mUnknown_Headers) return _mValue_Headers;
                throw new UndeferrableValueException("Value 'DistributionDefaultCacheBehaviorForwardedValuesArgs.Headers' is not present");
            }
        }

        /// <summary>
        /// Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.
        /// </summary>
        [PolicyResourceProperty("queryString", "_mUnknown_QueryString")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_QueryString;
        private bool _mUnknown_QueryString;
        public bool? QueryString
        {
            get
            {
                if (!_mUnknown_QueryString) return _mValue_QueryString;
                throw new UndeferrableValueException("Value 'DistributionDefaultCacheBehaviorForwardedValuesArgs.QueryString' is not present");
            }
        }

        /// <summary>
        /// When specified, along with a value of `true` for `query_string`, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of `true` for `query_string`, all query string keys are cached.
        /// </summary>
        [PolicyResourceProperty("queryStringCacheKeys", "_mUnknown_QueryStringCacheKeys")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_QueryStringCacheKeys;
        private bool _mUnknown_QueryStringCacheKeys;
        public List<string>? QueryStringCacheKeys
        {
            get
            {
                if (!_mUnknown_QueryStringCacheKeys) return _mValue_QueryStringCacheKeys;
                throw new UndeferrableValueException("Value 'DistributionDefaultCacheBehaviorForwardedValuesArgs.QueryStringCacheKeys' is not present");
            }
        }
    }
}
