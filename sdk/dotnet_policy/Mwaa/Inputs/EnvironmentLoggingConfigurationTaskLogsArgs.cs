// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Mwaa.Inputs
{
    public sealed class EnvironmentLoggingConfigurationTaskLogsArgs
    {
        [PolicyResourceProperty("cloudWatchLogGroupArn", "_mUnknown_CloudWatchLogGroupArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CloudWatchLogGroupArn;
        private bool _mUnknown_CloudWatchLogGroupArn;
        public string? CloudWatchLogGroupArn
        {
            get
            {
                if (!_mUnknown_CloudWatchLogGroupArn) return _mValue_CloudWatchLogGroupArn;
                throw new UndeferrableValueException("Value 'EnvironmentLoggingConfigurationTaskLogsArgs.CloudWatchLogGroupArn' is not present");
            }
        }

        /// <summary>
        /// Enabling or disabling the collection of logs
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'EnvironmentLoggingConfigurationTaskLogsArgs.Enabled' is not present");
            }
        }

        /// <summary>
        /// Logging level. Valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`. Will be `INFO` by default.
        /// </summary>
        [PolicyResourceProperty("logLevel", "_mUnknown_LogLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LogLevel;
        private bool _mUnknown_LogLevel;
        public string? LogLevel
        {
            get
            {
                if (!_mUnknown_LogLevel) return _mValue_LogLevel;
                throw new UndeferrableValueException("Value 'EnvironmentLoggingConfigurationTaskLogsArgs.LogLevel' is not present");
            }
        }
    }
}
