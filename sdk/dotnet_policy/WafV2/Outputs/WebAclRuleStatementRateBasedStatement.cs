// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.WafV2.Outputs
{
    public sealed class WebAclRuleStatementRateBasedStatement
    {
        /// <summary>
        /// Setting that indicates how to aggregate the request counts. Valid values include: `CONSTANT`, `CUSTOM_KEYS`, `FORWARDED_IP`, or `IP`. Default: `IP`.
        /// </summary>
        [PolicyResourceProperty("aggregateKeyType", "_mUnknown_AggregateKeyType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AggregateKeyType;
        private bool _mUnknown_AggregateKeyType;
        public string? AggregateKeyType
        {
            get
            {
                if (!_mUnknown_AggregateKeyType) return _mValue_AggregateKeyType;
                throw new UndeferrableValueException("Value 'WebAclRuleStatementRateBasedStatement.AggregateKeyType' is not present");
            }
        }

        /// <summary>
        /// Aggregate the request counts using one or more web request components as the aggregate keys. See `custom_key` below for details.
        /// </summary>
        [PolicyResourceProperty("customKeys", "_mUnknown_CustomKeys")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.WebAclRuleStatementRateBasedStatementCustomKey>? _mValue_CustomKeys;
        private bool _mUnknown_CustomKeys;
        public List<Outputs.WebAclRuleStatementRateBasedStatementCustomKey>? CustomKeys
        {
            get
            {
                if (!_mUnknown_CustomKeys) return _mValue_CustomKeys;
                throw new UndeferrableValueException("Value 'WebAclRuleStatementRateBasedStatement.CustomKeys' is not present");
            }
        }

        /// <summary>
        /// The amount of time, in seconds, that AWS WAF should include in its request counts, looking back from the current time. Valid values are `60`, `120`, `300`, and `600`. Defaults to `300` (5 minutes).
        /// 
        /// **NOTE:** This setting doesn't determine how often AWS WAF checks the rate, but how far back it looks each time it checks. AWS WAF checks the rate about every 10 seconds.
        /// </summary>
        [PolicyResourceProperty("evaluationWindowSec", "_mUnknown_EvaluationWindowSec")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_EvaluationWindowSec;
        private bool _mUnknown_EvaluationWindowSec;
        public int? EvaluationWindowSec
        {
            get
            {
                if (!_mUnknown_EvaluationWindowSec) return _mValue_EvaluationWindowSec;
                throw new UndeferrableValueException("Value 'WebAclRuleStatementRateBasedStatement.EvaluationWindowSec' is not present");
            }
        }

        /// <summary>
        /// Configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. If `aggregate_key_type` is set to `FORWARDED_IP`, this block is required. See `forwarded_ip_config` below for details.
        /// </summary>
        [PolicyResourceProperty("forwardedIpConfig", "_mUnknown_ForwardedIpConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.WebAclRuleStatementRateBasedStatementForwardedIpConfig? _mValue_ForwardedIpConfig;
        private bool _mUnknown_ForwardedIpConfig;
        public Outputs.WebAclRuleStatementRateBasedStatementForwardedIpConfig? ForwardedIpConfig
        {
            get
            {
                if (!_mUnknown_ForwardedIpConfig) return _mValue_ForwardedIpConfig;
                throw new UndeferrableValueException("Value 'WebAclRuleStatementRateBasedStatement.ForwardedIpConfig' is not present");
            }
        }

        /// <summary>
        /// Limit on requests per 5-minute period for a single originating IP address.
        /// </summary>
        [PolicyResourceProperty("limit", "_mUnknown_Limit")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Limit;
        private bool _mUnknown_Limit;
        public int? Limit
        {
            get
            {
                if (!_mUnknown_Limit) return _mValue_Limit;
                throw new UndeferrableValueException("Value 'WebAclRuleStatementRateBasedStatement.Limit' is not present");
            }
        }

        /// <summary>
        /// Optional nested statement that narrows the scope of the rate-based statement to matching web requests. This can be any nestable statement, and you can nest statements at any level below this scope-down statement. See `statement` above for details. If `aggregate_key_type` is set to `CONSTANT`, this block is required.
        /// </summary>
        [PolicyResourceProperty("scopeDownStatement", "_mUnknown_ScopeDownStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.WebAclRuleStatementRateBasedStatementScopeDownStatement? _mValue_ScopeDownStatement;
        private bool _mUnknown_ScopeDownStatement;
        public Outputs.WebAclRuleStatementRateBasedStatementScopeDownStatement? ScopeDownStatement
        {
            get
            {
                if (!_mUnknown_ScopeDownStatement) return _mValue_ScopeDownStatement;
                throw new UndeferrableValueException("Value 'WebAclRuleStatementRateBasedStatement.ScopeDownStatement' is not present");
            }
        }
    }
}
