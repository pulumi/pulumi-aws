// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.WafV2.Outputs
{
    public sealed class RuleGroupRuleStatementRateBasedStatementScopeDownStatement
    {
        /// <summary>
        /// A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
        /// </summary>
        [PolicyResourceProperty("andStatement", "_mUnknown_AndStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementAndStatement? _mValue_AndStatement;
        private bool _mUnknown_AndStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementAndStatement? AndStatement
        {
            get
            {
                if (!_mUnknown_AndStatement) return _mValue_AndStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.AndStatement' is not present");
            }
        }

        /// <summary>
        /// A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
        /// </summary>
        [PolicyResourceProperty("byteMatchStatement", "_mUnknown_ByteMatchStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatement? _mValue_ByteMatchStatement;
        private bool _mUnknown_ByteMatchStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatement? ByteMatchStatement
        {
            get
            {
                if (!_mUnknown_ByteMatchStatement) return _mValue_ByteMatchStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.ByteMatchStatement' is not present");
            }
        }

        /// <summary>
        /// A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
        /// </summary>
        [PolicyResourceProperty("geoMatchStatement", "_mUnknown_GeoMatchStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatement? _mValue_GeoMatchStatement;
        private bool _mUnknown_GeoMatchStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatement? GeoMatchStatement
        {
            get
            {
                if (!_mUnknown_GeoMatchStatement) return _mValue_GeoMatchStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.GeoMatchStatement' is not present");
            }
        }

        /// <summary>
        /// A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
        /// </summary>
        [PolicyResourceProperty("ipSetReferenceStatement", "_mUnknown_IpSetReferenceStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatement? _mValue_IpSetReferenceStatement;
        private bool _mUnknown_IpSetReferenceStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatement? IpSetReferenceStatement
        {
            get
            {
                if (!_mUnknown_IpSetReferenceStatement) return _mValue_IpSetReferenceStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.IpSetReferenceStatement' is not present");
            }
        }

        /// <summary>
        /// A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. See Label Match Statement below for details.
        /// </summary>
        [PolicyResourceProperty("labelMatchStatement", "_mUnknown_LabelMatchStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementLabelMatchStatement? _mValue_LabelMatchStatement;
        private bool _mUnknown_LabelMatchStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementLabelMatchStatement? LabelMatchStatement
        {
            get
            {
                if (!_mUnknown_LabelMatchStatement) return _mValue_LabelMatchStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.LabelMatchStatement' is not present");
            }
        }

        /// <summary>
        /// A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
        /// </summary>
        [PolicyResourceProperty("notStatement", "_mUnknown_NotStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementNotStatement? _mValue_NotStatement;
        private bool _mUnknown_NotStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementNotStatement? NotStatement
        {
            get
            {
                if (!_mUnknown_NotStatement) return _mValue_NotStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.NotStatement' is not present");
            }
        }

        /// <summary>
        /// A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
        /// </summary>
        [PolicyResourceProperty("orStatement", "_mUnknown_OrStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementOrStatement? _mValue_OrStatement;
        private bool _mUnknown_OrStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementOrStatement? OrStatement
        {
            get
            {
                if (!_mUnknown_OrStatement) return _mValue_OrStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.OrStatement' is not present");
            }
        }

        /// <summary>
        /// A rule statement used to search web request components for a match against a single regular expression. See Regex Match Statement below for details.
        /// </summary>
        [PolicyResourceProperty("regexMatchStatement", "_mUnknown_RegexMatchStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatement? _mValue_RegexMatchStatement;
        private bool _mUnknown_RegexMatchStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatement? RegexMatchStatement
        {
            get
            {
                if (!_mUnknown_RegexMatchStatement) return _mValue_RegexMatchStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.RegexMatchStatement' is not present");
            }
        }

        /// <summary>
        /// A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
        /// </summary>
        [PolicyResourceProperty("regexPatternSetReferenceStatement", "_mUnknown_RegexPatternSetReferenceStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatement? _mValue_RegexPatternSetReferenceStatement;
        private bool _mUnknown_RegexPatternSetReferenceStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatement? RegexPatternSetReferenceStatement
        {
            get
            {
                if (!_mUnknown_RegexPatternSetReferenceStatement) return _mValue_RegexPatternSetReferenceStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.RegexPatternSetReferenceStatement' is not present");
            }
        }

        /// <summary>
        /// A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (&gt;) or less than (&lt;). See Size Constraint Statement below for more details.
        /// </summary>
        [PolicyResourceProperty("sizeConstraintStatement", "_mUnknown_SizeConstraintStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatement? _mValue_SizeConstraintStatement;
        private bool _mUnknown_SizeConstraintStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatement? SizeConstraintStatement
        {
            get
            {
                if (!_mUnknown_SizeConstraintStatement) return _mValue_SizeConstraintStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.SizeConstraintStatement' is not present");
            }
        }

        /// <summary>
        /// An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
        /// </summary>
        [PolicyResourceProperty("sqliMatchStatement", "_mUnknown_SqliMatchStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatement? _mValue_SqliMatchStatement;
        private bool _mUnknown_SqliMatchStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatement? SqliMatchStatement
        {
            get
            {
                if (!_mUnknown_SqliMatchStatement) return _mValue_SqliMatchStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.SqliMatchStatement' is not present");
            }
        }

        /// <summary>
        /// A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
        /// </summary>
        [PolicyResourceProperty("xssMatchStatement", "_mUnknown_XssMatchStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatement? _mValue_XssMatchStatement;
        private bool _mUnknown_XssMatchStatement;
        public Outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatement? XssMatchStatement
        {
            get
            {
                if (!_mUnknown_XssMatchStatement) return _mValue_XssMatchStatement;
                throw new UndeferrableValueException("Value 'RuleGroupRuleStatementRateBasedStatementScopeDownStatement.XssMatchStatement' is not present");
            }
        }
    }
}
