// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.WafV2
{
    [PolicyResourceType("aws:wafv2/webAcl:WebAcl")]
    public sealed class WebAcl : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The URL to use in SDK integrations with managed rule groups.
        /// </summary>
        [Input("applicationIntegrationUrl")]
        public string? ApplicationIntegrationUrl;

        /// <summary>
        /// The ARN of the WAF WebACL.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Specifies custom configurations for the associations between the web ACL and protected resources. See `association_config` below for details.
        /// </summary>
        [Input("associationConfig")]
        public WebAclAssociationConfig? AssociationConfig;

        /// <summary>
        /// Web ACL capacity units (WCUs) currently being used by this web ACL.
        /// </summary>
        [Input("capacity")]
        public int? Capacity;

        /// <summary>
        /// Specifies how AWS WAF should handle CAPTCHA evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `captcha_config` below for details.
        /// </summary>
        [Input("captchaConfig")]
        public WebAclCaptchaConfig? CaptchaConfig;

        /// <summary>
        /// Specifies how AWS WAF should handle Challenge evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `challenge_config` below for details.
        /// </summary>
        [Input("challengeConfig")]
        public WebAclChallengeConfig? ChallengeConfig;

        /// <summary>
        /// Defines custom response bodies that can be referenced by `custom_response` actions. See `custom_response_body` below for details.
        /// </summary>
        [Input("customResponseBodies")]
        public List<WebAclCustomResponseBody>? CustomResponseBodies;

        /// <summary>
        /// Action to perform if none of the `rules` contained in the WebACL match. See `default_action` below for details.
        /// </summary>
        [Input("defaultAction")]
        public WebAclDefaultAction? DefaultAction;

        /// <summary>
        /// Friendly description of the WebACL.
        /// </summary>
        [Input("description")]
        public string? Description;

        [Input("lockToken")]
        public string? LockToken;

        /// <summary>
        /// Friendly name of the WebACL. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix;

        /// <summary>
        /// Raw JSON string to allow more than three nested statements. Conflicts with `rule` attribute. This is for advanced use cases where more than 3 levels of nested statements are required. **There is no drift detection at this time**. If you use this attribute instead of `rule`, you will be foregoing drift detection. Additionally, importing an existing web ACL into a configuration with `rule_json` set will result in a one time in-place update as the remote rule configuration is initially written to the `rule` attribute. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_CreateWebACL.html) for the JSON structure.
        /// </summary>
        [Input("ruleJson")]
        public string? RuleJson;

        /// <summary>
        /// Rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See `rule` below for details.
        /// </summary>
        [Input("rules")]
        public List<WebAclRule>? Rules;

        /// <summary>
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        /// </summary>
        [Input("scope")]
        public string? Scope;

        /// <summary>
        /// Map of key-value pairs to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        /// </summary>
        [Input("tokenDomains")]
        public List<string>? TokenDomains;

        /// <summary>
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibility_config` below for details.
        /// </summary>
        [Input("visibilityConfig")]
        public WebAclVisibilityConfig? VisibilityConfig;
    }
}
