// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.WafV2.Inputs
{
    public sealed class WebAclRuleStatementRateBasedStatementArgs
    {
        /// <summary>
        /// Setting that indicates how to aggregate the request counts. Valid values include: `CONSTANT`, `CUSTOM_KEYS`, `FORWARDED_IP`, or `IP`. Default: `IP`.
        /// </summary>
        [Input("aggregateKeyType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<string> _mAggregateKeyType;

        public string? AggregateKeyType => _mAggregateKeyType.GetValue("aggregateKeyType");

        /// <summary>
        /// Aggregate the request counts using one or more web request components as the aggregate keys. See `custom_key` below for details.
        /// </summary>
        [Input("customKeys")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<List<Inputs.WebAclRuleStatementRateBasedStatementCustomKeyArgs>> _mCustomKeys;

        public List<Inputs.WebAclRuleStatementRateBasedStatementCustomKeyArgs>? CustomKeys => _mCustomKeys.GetValue("customKeys");

        /// <summary>
        /// The amount of time, in seconds, that AWS WAF should include in its request counts, looking back from the current time. Valid values are `60`, `120`, `300`, and `600`. Defaults to `300` (5 minutes).
        /// 
        /// **NOTE:** This setting doesn't determine how often AWS WAF checks the rate, but how far back it looks each time it checks. AWS WAF checks the rate about every 10 seconds.
        /// </summary>
        [Input("evaluationWindowSec")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<int> _mEvaluationWindowSec;

        public int? EvaluationWindowSec => _mEvaluationWindowSec.GetValue("evaluationWindowSec");

        /// <summary>
        /// Configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. If `aggregate_key_type` is set to `FORWARDED_IP`, this block is required. See `forwarded_ip_config` below for details.
        /// </summary>
        [Input("forwardedIpConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<Inputs.WebAclRuleStatementRateBasedStatementForwardedIpConfigArgs> _mForwardedIpConfig;

        public Inputs.WebAclRuleStatementRateBasedStatementForwardedIpConfigArgs? ForwardedIpConfig => _mForwardedIpConfig.GetValue("forwardedIpConfig");

        /// <summary>
        /// Limit on requests per 5-minute period for a single originating IP address.
        /// </summary>
        [Input("limit")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<int> _mLimit;

        public int? Limit => _mLimit.GetValue("limit");

        /// <summary>
        /// Optional nested statement that narrows the scope of the rate-based statement to matching web requests. This can be any nestable statement, and you can nest statements at any level below this scope-down statement. See `statement` above for details. If `aggregate_key_type` is set to `CONSTANT`, this block is required.
        /// </summary>
        [Input("scopeDownStatement")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<Inputs.WebAclRuleStatementRateBasedStatementScopeDownStatementArgs> _mScopeDownStatement;

        public Inputs.WebAclRuleStatementRateBasedStatementScopeDownStatementArgs? ScopeDownStatement => _mScopeDownStatement.GetValue("scopeDownStatement");
    }
}
