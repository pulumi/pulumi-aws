// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.WafV2
{
    [PolicyResourceType("aws:wafv2/regexPatternSet:RegexPatternSet")]
    public sealed class RegexPatternSet : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) that identifies the cluster.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'RegexPatternSet.Arn' is not present");
            }
        }

        /// <summary>
        /// A friendly description of the regular expression pattern set.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'RegexPatternSet.Description' is not present");
            }
        }

        [PolicyResourceProperty("lockToken", "_mUnknown_LockToken")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LockToken;
        private bool _mUnknown_LockToken;
        public string? LockToken
        {
            get
            {
                if (!_mUnknown_LockToken) return _mValue_LockToken;
                throw new UndeferrableValueException("Value 'RegexPatternSet.LockToken' is not present");
            }
        }

        /// <summary>
        /// A friendly name of the regular expression pattern set. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'RegexPatternSet.Name' is not present");
            }
        }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [PolicyResourceProperty("namePrefix", "_mUnknown_NamePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamePrefix;
        private bool _mUnknown_NamePrefix;
        public string? NamePrefix
        {
            get
            {
                if (!_mUnknown_NamePrefix) return _mValue_NamePrefix;
                throw new UndeferrableValueException("Value 'RegexPatternSet.NamePrefix' is not present");
            }
        }

        /// <summary>
        /// One or more blocks of regular expression patterns that you want AWS WAF to search for, such as `B[a@]dB[o0]t`. See Regular Expression below for details. A maximum of 10 `regular_expression` blocks may be specified.
        /// </summary>
        [PolicyResourceProperty("regularExpressions", "_mUnknown_RegularExpressions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.RegexPatternSetRegularExpression>? _mValue_RegularExpressions;
        private bool _mUnknown_RegularExpressions;
        public List<Outputs.RegexPatternSetRegularExpression>? RegularExpressions
        {
            get
            {
                if (!_mUnknown_RegularExpressions) return _mValue_RegularExpressions;
                throw new UndeferrableValueException("Value 'RegexPatternSet.RegularExpressions' is not present");
            }
        }

        /// <summary>
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        /// </summary>
        [PolicyResourceProperty("scope", "_mUnknown_Scope")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Scope;
        private bool _mUnknown_Scope;
        public string? Scope
        {
            get
            {
                if (!_mUnknown_Scope) return _mValue_Scope;
                throw new UndeferrableValueException("Value 'RegexPatternSet.Scope' is not present");
            }
        }

        /// <summary>
        /// An array of key:value pairs to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'RegexPatternSet.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'RegexPatternSet.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:wafv2/regexPatternSet:RegexPatternSet")]
    public sealed class RegexPatternSetArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// A friendly description of the regular expression pattern set.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'RegexPatternSetArgs.Description' is not present");
            }
        }

        /// <summary>
        /// A friendly name of the regular expression pattern set. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'RegexPatternSetArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [PolicyResourceProperty("namePrefix", "_mUnknown_NamePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamePrefix;
        private bool _mUnknown_NamePrefix;
        public string? NamePrefix
        {
            get
            {
                if (!_mUnknown_NamePrefix) return _mValue_NamePrefix;
                throw new UndeferrableValueException("Value 'RegexPatternSetArgs.NamePrefix' is not present");
            }
        }

        /// <summary>
        /// One or more blocks of regular expression patterns that you want AWS WAF to search for, such as `B[a@]dB[o0]t`. See Regular Expression below for details. A maximum of 10 `regular_expression` blocks may be specified.
        /// </summary>
        [PolicyResourceProperty("regularExpressions", "_mUnknown_RegularExpressions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.RegexPatternSetRegularExpressionArgs>? _mValue_RegularExpressions;
        private bool _mUnknown_RegularExpressions;
        public List<Inputs.RegexPatternSetRegularExpressionArgs>? RegularExpressions
        {
            get
            {
                if (!_mUnknown_RegularExpressions) return _mValue_RegularExpressions;
                throw new UndeferrableValueException("Value 'RegexPatternSetArgs.RegularExpressions' is not present");
            }
        }

        /// <summary>
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        /// </summary>
        [PolicyResourceProperty("scope", "_mUnknown_Scope")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Scope;
        private bool _mUnknown_Scope;
        public string? Scope
        {
            get
            {
                if (!_mUnknown_Scope) return _mValue_Scope;
                throw new UndeferrableValueException("Value 'RegexPatternSetArgs.Scope' is not present");
            }
        }

        /// <summary>
        /// An array of key:value pairs to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'RegexPatternSetArgs.Tags' is not present");
            }
        }
    }
}
