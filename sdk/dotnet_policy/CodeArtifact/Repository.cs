// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CodeArtifact
{
    [PolicyResourceType("aws:codeartifact/repository:Repository")]
    public sealed class Repository : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The account number of the AWS account that manages the repository.
        /// </summary>
        [PolicyResourceProperty("administratorAccount", "_mUnknown_AdministratorAccount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AdministratorAccount;
        private bool _mUnknown_AdministratorAccount;
        public string? AdministratorAccount
        {
            get
            {
                if (!_mUnknown_AdministratorAccount) return _mValue_AdministratorAccount;
                throw new UndeferrableValueException("Value 'Repository.AdministratorAccount' is not present");
            }
        }

        /// <summary>
        /// The ARN of the repository.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Repository.Arn' is not present");
            }
        }

        /// <summary>
        /// The description of the repository.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'Repository.Description' is not present");
            }
        }

        /// <summary>
        /// The domain that contains the created repository.
        /// </summary>
        [PolicyResourceProperty("domain", "_mUnknown_Domain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Domain;
        private bool _mUnknown_Domain;
        public string? Domain
        {
            get
            {
                if (!_mUnknown_Domain) return _mValue_Domain;
                throw new UndeferrableValueException("Value 'Repository.Domain' is not present");
            }
        }

        /// <summary>
        /// The account number of the AWS account that owns the domain.
        /// </summary>
        [PolicyResourceProperty("domainOwner", "_mUnknown_DomainOwner")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DomainOwner;
        private bool _mUnknown_DomainOwner;
        public string? DomainOwner
        {
            get
            {
                if (!_mUnknown_DomainOwner) return _mValue_DomainOwner;
                throw new UndeferrableValueException("Value 'Repository.DomainOwner' is not present");
            }
        }

        /// <summary>
        /// An array of external connections associated with the repository. Only one external connection can be set per repository. see External Connections.
        /// </summary>
        [PolicyResourceProperty("externalConnections", "_mUnknown_ExternalConnections")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RepositoryExternalConnections? _mValue_ExternalConnections;
        private bool _mUnknown_ExternalConnections;
        public Outputs.RepositoryExternalConnections? ExternalConnections
        {
            get
            {
                if (!_mUnknown_ExternalConnections) return _mValue_ExternalConnections;
                throw new UndeferrableValueException("Value 'Repository.ExternalConnections' is not present");
            }
        }

        /// <summary>
        /// The name of the repository to create.
        /// </summary>
        [PolicyResourceProperty("repository", "_mUnknown_RepositoryName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RepositoryName;
        private bool _mUnknown_RepositoryName;
        public string? RepositoryName
        {
            get
            {
                if (!_mUnknown_RepositoryName) return _mValue_RepositoryName;
                throw new UndeferrableValueException("Value 'Repository.RepositoryName' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Repository.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Repository.TagsAll' is not present");
            }
        }

        /// <summary>
        /// A list of upstream repositories to associate with the repository. The order of the upstream repositories in the list determines their priority order when AWS CodeArtifact looks for a requested package version. see Upstream
        /// </summary>
        [PolicyResourceProperty("upstreams", "_mUnknown_Upstreams")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.RepositoryUpstream>? _mValue_Upstreams;
        private bool _mUnknown_Upstreams;
        public List<Outputs.RepositoryUpstream>? Upstreams
        {
            get
            {
                if (!_mUnknown_Upstreams) return _mValue_Upstreams;
                throw new UndeferrableValueException("Value 'Repository.Upstreams' is not present");
            }
        }
    }

    [PolicyResourceType("aws:codeartifact/repository:Repository")]
    public sealed class RepositoryArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The description of the repository.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'RepositoryArgs.Description' is not present");
            }
        }

        /// <summary>
        /// The domain that contains the created repository.
        /// </summary>
        [PolicyResourceProperty("domain", "_mUnknown_Domain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Domain;
        private bool _mUnknown_Domain;
        public string? Domain
        {
            get
            {
                if (!_mUnknown_Domain) return _mValue_Domain;
                throw new UndeferrableValueException("Value 'RepositoryArgs.Domain' is not present");
            }
        }

        /// <summary>
        /// The account number of the AWS account that owns the domain.
        /// </summary>
        [PolicyResourceProperty("domainOwner", "_mUnknown_DomainOwner")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DomainOwner;
        private bool _mUnknown_DomainOwner;
        public string? DomainOwner
        {
            get
            {
                if (!_mUnknown_DomainOwner) return _mValue_DomainOwner;
                throw new UndeferrableValueException("Value 'RepositoryArgs.DomainOwner' is not present");
            }
        }

        /// <summary>
        /// An array of external connections associated with the repository. Only one external connection can be set per repository. see External Connections.
        /// </summary>
        [PolicyResourceProperty("externalConnections", "_mUnknown_ExternalConnections")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.RepositoryExternalConnectionsArgs? _mValue_ExternalConnections;
        private bool _mUnknown_ExternalConnections;
        public Inputs.RepositoryExternalConnectionsArgs? ExternalConnections
        {
            get
            {
                if (!_mUnknown_ExternalConnections) return _mValue_ExternalConnections;
                throw new UndeferrableValueException("Value 'RepositoryArgs.ExternalConnections' is not present");
            }
        }

        /// <summary>
        /// The name of the repository to create.
        /// </summary>
        [PolicyResourceProperty("repository", "_mUnknown_RepositoryName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RepositoryName;
        private bool _mUnknown_RepositoryName;
        public string? RepositoryName
        {
            get
            {
                if (!_mUnknown_RepositoryName) return _mValue_RepositoryName;
                throw new UndeferrableValueException("Value 'RepositoryArgs.RepositoryName' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'RepositoryArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// A list of upstream repositories to associate with the repository. The order of the upstream repositories in the list determines their priority order when AWS CodeArtifact looks for a requested package version. see Upstream
        /// </summary>
        [PolicyResourceProperty("upstreams", "_mUnknown_Upstreams")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.RepositoryUpstreamArgs>? _mValue_Upstreams;
        private bool _mUnknown_Upstreams;
        public List<Inputs.RepositoryUpstreamArgs>? Upstreams
        {
            get
            {
                if (!_mUnknown_Upstreams) return _mValue_Upstreams;
                throw new UndeferrableValueException("Value 'RepositoryArgs.Upstreams' is not present");
            }
        }
    }
}
