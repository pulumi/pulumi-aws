// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.SecurityLake.Inputs
{
    public sealed class SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs
    {
        /// <summary>
        /// The API key name for the notification subscription.
        /// </summary>
        [PolicyResourceProperty("authorizationApiKeyName", "_mUnknown_AuthorizationApiKeyName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AuthorizationApiKeyName;
        private bool _mUnknown_AuthorizationApiKeyName;
        public string? AuthorizationApiKeyName
        {
            get
            {
                if (!_mUnknown_AuthorizationApiKeyName) return _mValue_AuthorizationApiKeyName;
                throw new UndeferrableValueException("Value 'SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs.AuthorizationApiKeyName' is not present");
            }
        }

        /// <summary>
        /// The API key value for the notification subscription.
        /// </summary>
        [PolicyResourceProperty("authorizationApiKeyValue", "_mUnknown_AuthorizationApiKeyValue")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AuthorizationApiKeyValue;
        private bool _mUnknown_AuthorizationApiKeyValue;
        public string? AuthorizationApiKeyValue
        {
            get
            {
                if (!_mUnknown_AuthorizationApiKeyValue) return _mValue_AuthorizationApiKeyValue;
                throw new UndeferrableValueException("Value 'SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs.AuthorizationApiKeyValue' is not present");
            }
        }

        /// <summary>
        /// The subscription endpoint in Security Lake.
        /// If you prefer notification with an HTTPS endpoint, populate this field.
        /// </summary>
        [PolicyResourceProperty("endpoint", "_mUnknown_Endpoint")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Endpoint;
        private bool _mUnknown_Endpoint;
        public string? Endpoint
        {
            get
            {
                if (!_mUnknown_Endpoint) return _mValue_Endpoint;
                throw new UndeferrableValueException("Value 'SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs.Endpoint' is not present");
            }
        }

        /// <summary>
        /// The HTTP method used for the notification subscription.
        /// Valid values are `POST` and `PUT`.
        /// </summary>
        [PolicyResourceProperty("httpMethod", "_mUnknown_HttpMethod")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HttpMethod;
        private bool _mUnknown_HttpMethod;
        public string? HttpMethod
        {
            get
            {
                if (!_mUnknown_HttpMethod) return _mValue_HttpMethod;
                throw new UndeferrableValueException("Value 'SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs.HttpMethod' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created.
        /// For more information about ARNs and how to use them in policies, see Managing data access and AWS Managed Policies in the Amazon Security Lake User Guide.
        /// </summary>
        [PolicyResourceProperty("targetRoleArn", "_mUnknown_TargetRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TargetRoleArn;
        private bool _mUnknown_TargetRoleArn;
        public string? TargetRoleArn
        {
            get
            {
                if (!_mUnknown_TargetRoleArn) return _mValue_TargetRoleArn;
                throw new UndeferrableValueException("Value 'SubscriberNotificationConfigurationHttpsNotificationConfigurationArgs.TargetRoleArn' is not present");
            }
        }
    }
}
