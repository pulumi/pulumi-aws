// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.SecurityLake
{
    [PolicyResourceType("aws:securitylake/dataLake:DataLake")]
    public sealed class DataLake : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// ARN of the Data Lake.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'DataLake.Arn' is not present");
            }
        }

        /// <summary>
        /// Specify the Region or Regions that will contribute data to the rollup region.
        /// </summary>
        [PolicyResourceProperty("configuration", "_mUnknown_Configuration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DataLakeConfiguration? _mValue_Configuration;
        private bool _mUnknown_Configuration;
        public Outputs.DataLakeConfiguration? Configuration
        {
            get
            {
                if (!_mUnknown_Configuration) return _mValue_Configuration;
                throw new UndeferrableValueException("Value 'DataLake.Configuration' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
        /// </summary>
        [PolicyResourceProperty("metaStoreManagerRoleArn", "_mUnknown_MetaStoreManagerRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MetaStoreManagerRoleArn;
        private bool _mUnknown_MetaStoreManagerRoleArn;
        public string? MetaStoreManagerRoleArn
        {
            get
            {
                if (!_mUnknown_MetaStoreManagerRoleArn) return _mValue_MetaStoreManagerRoleArn;
                throw new UndeferrableValueException("Value 'DataLake.MetaStoreManagerRoleArn' is not present");
            }
        }

        /// <summary>
        /// The ARN for the Amazon Security Lake Amazon S3 bucket.
        /// </summary>
        [PolicyResourceProperty("s3BucketArn", "_mUnknown_S3BucketArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_S3BucketArn;
        private bool _mUnknown_S3BucketArn;
        public string? S3BucketArn
        {
            get
            {
                if (!_mUnknown_S3BucketArn) return _mValue_S3BucketArn;
                throw new UndeferrableValueException("Value 'DataLake.S3BucketArn' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'DataLake.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'DataLake.TagsAll' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DataLakeTimeouts? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Outputs.DataLakeTimeouts? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'DataLake.Timeouts' is not present");
            }
        }
    }

    [PolicyResourceType("aws:securitylake/dataLake:DataLake")]
    public sealed class DataLakeArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Specify the Region or Regions that will contribute data to the rollup region.
        /// </summary>
        [PolicyResourceProperty("configuration", "_mUnknown_Configuration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DataLakeConfigurationArgs? _mValue_Configuration;
        private bool _mUnknown_Configuration;
        public Inputs.DataLakeConfigurationArgs? Configuration
        {
            get
            {
                if (!_mUnknown_Configuration) return _mValue_Configuration;
                throw new UndeferrableValueException("Value 'DataLakeArgs.Configuration' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
        /// </summary>
        [PolicyResourceProperty("metaStoreManagerRoleArn", "_mUnknown_MetaStoreManagerRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MetaStoreManagerRoleArn;
        private bool _mUnknown_MetaStoreManagerRoleArn;
        public string? MetaStoreManagerRoleArn
        {
            get
            {
                if (!_mUnknown_MetaStoreManagerRoleArn) return _mValue_MetaStoreManagerRoleArn;
                throw new UndeferrableValueException("Value 'DataLakeArgs.MetaStoreManagerRoleArn' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'DataLakeArgs.Tags' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DataLakeTimeoutsArgs? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Inputs.DataLakeTimeoutsArgs? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'DataLakeArgs.Timeouts' is not present");
            }
        }
    }
}
