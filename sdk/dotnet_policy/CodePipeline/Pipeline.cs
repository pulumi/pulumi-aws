// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CodePipeline
{
    [PolicyResourceType("aws:codepipeline/pipeline:Pipeline")]
    public sealed class Pipeline : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Codepipeline ARN.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// One or more artifact_store blocks. Artifact stores are documented below.
        /// </summary>
        [Input("artifactStores")]
        public List<PipelineArtifactStore>? ArtifactStores;

        /// <summary>
        /// The method that the pipeline will use to handle multiple executions. The default mode is `SUPERSEDED`. For value values, refer to the [AWS documentation](https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_PipelineDeclaration.html#CodePipeline-Type-PipelineDeclaration-executionMode).
        /// 
        /// **Note:** `QUEUED` or `PARALLEL` mode can only be used with V2 pipelines.
        /// </summary>
        [Input("executionMode")]
        public string? ExecutionMode;

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Type of the pipeline. Possible values are: `V1` and `V2`. Default value is `V1`.
        /// </summary>
        [Input("pipelineType")]
        public string? PipelineType;

        /// <summary>
        /// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
        /// </summary>
        [Input("roleArn")]
        public string? RoleArn;

        /// <summary>
        /// A stage block. Stages are documented below.
        /// </summary>
        [Input("stages")]
        public List<PipelineStage>? Stages;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// A list of all triggers present on the pipeline, including default triggers added by AWS for `V2` pipelines which omit an explicit `trigger` definition.
        /// </summary>
        [Input("triggerAlls")]
        public List<PipelineTriggerAll>? TriggerAlls;

        /// <summary>
        /// A trigger block. Valid only when `pipeline_type` is `V2`. Triggers are documented below.
        /// </summary>
        [Input("triggers")]
        public List<PipelineTrigger>? Triggers;

        /// <summary>
        /// A pipeline-level variable block. Valid only when `pipeline_type` is `V2`. Variable are documented below.
        /// </summary>
        [Input("variables")]
        public List<PipelineVariable>? Variables;
    }
}
