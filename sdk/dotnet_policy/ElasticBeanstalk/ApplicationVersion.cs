// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ElasticBeanstalk
{
    [PolicyResourceType("aws:elasticbeanstalk/applicationVersion:ApplicationVersion")]
    public sealed class ApplicationVersion : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Name of the Beanstalk Application the version is associated with.
        /// </summary>
        [Input("application")]
        public string? Application;

        /// <summary>
        /// ARN assigned by AWS for this Elastic Beanstalk Application.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// S3 bucket that contains the Application Version source bundle.
        /// </summary>
        [Input("bucket")]
        public string? Bucket;

        /// <summary>
        /// Short description of the Application Version.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// On delete, force an Application Version to be deleted when it may be in use by multiple Elastic Beanstalk Environments.
        /// </summary>
        [Input("forceDelete")]
        public bool? ForceDelete;

        /// <summary>
        /// S3 object that is the Application Version source bundle.
        /// </summary>
        [Input("key")]
        public string? Key;

        /// <summary>
        /// Unique name for the this Application Version.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Pre-processes and validates the environment manifest (env.yaml ) and configuration files (*.config files in the .ebextensions folder) in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment. You must turn processing on for application versions that you create using AWS CodeBuild or AWS CodeCommit. For application versions built from a source bundle in Amazon S3, processing is optional. It validates Elastic Beanstalk configuration files. It doesn’t validate your application’s configuration files, like proxy server or Docker configuration.
        /// </summary>
        [Input("process")]
        public bool? Process;

        /// <summary>
        /// Key-value map of tags for the Elastic Beanstalk Application Version. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
