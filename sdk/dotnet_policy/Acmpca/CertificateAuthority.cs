// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Acmpca
{
    [PolicyResourceType("aws:acmpca/certificateAuthority:CertificateAuthority")]
    public sealed class CertificateAuthority : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// ARN of the certificate authority.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
        /// </summary>
        [Input("certificate")]
        public string? Certificate;

        /// <summary>
        /// Nested argument containing algorithms and certificate subject information. Defined below.
        /// </summary>
        [Input("certificateAuthorityConfiguration")]
        public CertificateAuthorityCertificateAuthorityConfiguration? CertificateAuthorityConfiguration;

        /// <summary>
        /// Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
        /// </summary>
        [Input("certificateChain")]
        public string? CertificateChain;

        /// <summary>
        /// The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
        /// </summary>
        [Input("certificateSigningRequest")]
        public string? CertificateSigningRequest;

        /// <summary>
        /// Whether the certificate authority is enabled or disabled. Defaults to `true`. Can only be disabled if the CA is in an `ACTIVE` state.
        /// </summary>
        [Input("enabled")]
        public bool? Enabled;

        /// <summary>
        /// Cryptographic key management compliance standard used for handling CA keys. Defaults to `FIPS_140_2_LEVEL_3_OR_HIGHER`. Valid values: `FIPS_140_2_LEVEL_3_OR_HIGHER` and `FIPS_140_2_LEVEL_2_OR_HIGHER`. Supported standard for each region can be found in the [Storage and security compliance of AWS Private CA private keys Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/data-protection.html#private-keys).
        /// </summary>
        [Input("keyStorageSecurityStandard")]
        public string? KeyStorageSecurityStandard;

        /// <summary>
        /// Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
        /// </summary>
        [Input("notAfter")]
        public string? NotAfter;

        /// <summary>
        /// Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
        /// </summary>
        [Input("notBefore")]
        public string? NotBefore;

        /// <summary>
        /// Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
        /// </summary>
        [Input("permanentDeletionTimeInDays")]
        public int? PermanentDeletionTimeInDays;

        /// <summary>
        /// Nested argument containing revocation configuration. Defined below.
        /// </summary>
        [Input("revocationConfiguration")]
        public CertificateAuthorityRevocationConfiguration? RevocationConfiguration;

        /// <summary>
        /// Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
        /// </summary>
        [Input("serial")]
        public string? Serial;

        /// <summary>
        /// Key-value map of user-defined tags that are attached to the certificate authority. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.
        /// </summary>
        [Input("type")]
        public string? Type;

        /// <summary>
        /// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to `GENERAL_PURPOSE`. Valid values: `GENERAL_PURPOSE` and `SHORT_LIVED_CERTIFICATE`.
        /// </summary>
        [Input("usageMode")]
        public string? UsageMode;
    }
}
