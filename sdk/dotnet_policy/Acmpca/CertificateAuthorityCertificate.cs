// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Acmpca
{
    [PolicyResourceType("aws:acmpca/certificateAuthorityCertificate:CertificateAuthorityCertificate")]
    public sealed class CertificateAuthorityCertificate : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// PEM-encoded certificate for the Certificate Authority.
        /// </summary>
        [PolicyResourceProperty("certificate", "_mUnknown_Certificate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Certificate;
        private bool _mUnknown_Certificate;
        public string? Certificate
        {
            get
            {
                if (!_mUnknown_Certificate) return _mValue_Certificate;
                throw new UndeferrableValueException("Value 'CertificateAuthorityCertificate.Certificate' is not present");
            }
        }

        /// <summary>
        /// ARN of the Certificate Authority.
        /// </summary>
        [PolicyResourceProperty("certificateAuthorityArn", "_mUnknown_CertificateAuthorityArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateAuthorityArn;
        private bool _mUnknown_CertificateAuthorityArn;
        public string? CertificateAuthorityArn
        {
            get
            {
                if (!_mUnknown_CertificateAuthorityArn) return _mValue_CertificateAuthorityArn;
                throw new UndeferrableValueException("Value 'CertificateAuthorityCertificate.CertificateAuthorityArn' is not present");
            }
        }

        /// <summary>
        /// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.
        /// </summary>
        [PolicyResourceProperty("certificateChain", "_mUnknown_CertificateChain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateChain;
        private bool _mUnknown_CertificateChain;
        public string? CertificateChain
        {
            get
            {
                if (!_mUnknown_CertificateChain) return _mValue_CertificateChain;
                throw new UndeferrableValueException("Value 'CertificateAuthorityCertificate.CertificateChain' is not present");
            }
        }
    }

    [PolicyResourceType("aws:acmpca/certificateAuthorityCertificate:CertificateAuthorityCertificate")]
    public sealed class CertificateAuthorityCertificateArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// PEM-encoded certificate for the Certificate Authority.
        /// </summary>
        [PolicyResourceProperty("certificate", "_mUnknown_Certificate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Certificate;
        private bool _mUnknown_Certificate;
        public string? Certificate
        {
            get
            {
                if (!_mUnknown_Certificate) return _mValue_Certificate;
                throw new UndeferrableValueException("Value 'CertificateAuthorityCertificateArgs.Certificate' is not present");
            }
        }

        /// <summary>
        /// ARN of the Certificate Authority.
        /// </summary>
        [PolicyResourceProperty("certificateAuthorityArn", "_mUnknown_CertificateAuthorityArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateAuthorityArn;
        private bool _mUnknown_CertificateAuthorityArn;
        public string? CertificateAuthorityArn
        {
            get
            {
                if (!_mUnknown_CertificateAuthorityArn) return _mValue_CertificateAuthorityArn;
                throw new UndeferrableValueException("Value 'CertificateAuthorityCertificateArgs.CertificateAuthorityArn' is not present");
            }
        }

        /// <summary>
        /// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.
        /// </summary>
        [PolicyResourceProperty("certificateChain", "_mUnknown_CertificateChain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateChain;
        private bool _mUnknown_CertificateChain;
        public string? CertificateChain
        {
            get
            {
                if (!_mUnknown_CertificateChain) return _mValue_CertificateChain;
                throw new UndeferrableValueException("Value 'CertificateAuthorityCertificateArgs.CertificateChain' is not present");
            }
        }
    }
}
