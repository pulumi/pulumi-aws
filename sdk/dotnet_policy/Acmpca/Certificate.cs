// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Acmpca
{
    [PolicyResourceType("aws:acmpca/certificate:Certificate")]
    public sealed class Certificate : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
        /// </summary>
        [PolicyResourceProperty("apiPassthrough", "_mUnknown_ApiPassthrough")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ApiPassthrough;
        private bool _mUnknown_ApiPassthrough;
        public string? ApiPassthrough
        {
            get
            {
                if (!_mUnknown_ApiPassthrough) return _mValue_ApiPassthrough;
                throw new UndeferrableValueException("Value 'Certificate.ApiPassthrough' is not present");
            }
        }

        /// <summary>
        /// ARN of the certificate.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Certificate.Arn' is not present");
            }
        }

        /// <summary>
        /// PEM-encoded certificate value.
        /// </summary>
        [PolicyResourceProperty("certificate", "_mUnknown_CertificateDetails")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateDetails;
        private bool _mUnknown_CertificateDetails;
        public string? CertificateDetails
        {
            get
            {
                if (!_mUnknown_CertificateDetails) return _mValue_CertificateDetails;
                throw new UndeferrableValueException("Value 'Certificate.CertificateDetails' is not present");
            }
        }

        /// <summary>
        /// ARN of the certificate authority.
        /// </summary>
        [PolicyResourceProperty("certificateAuthorityArn", "_mUnknown_CertificateAuthorityArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateAuthorityArn;
        private bool _mUnknown_CertificateAuthorityArn;
        public string? CertificateAuthorityArn
        {
            get
            {
                if (!_mUnknown_CertificateAuthorityArn) return _mValue_CertificateAuthorityArn;
                throw new UndeferrableValueException("Value 'Certificate.CertificateAuthorityArn' is not present");
            }
        }

        /// <summary>
        /// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.
        /// </summary>
        [PolicyResourceProperty("certificateChain", "_mUnknown_CertificateChain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateChain;
        private bool _mUnknown_CertificateChain;
        public string? CertificateChain
        {
            get
            {
                if (!_mUnknown_CertificateChain) return _mValue_CertificateChain;
                throw new UndeferrableValueException("Value 'Certificate.CertificateChain' is not present");
            }
        }

        /// <summary>
        /// Certificate Signing Request in PEM format.
        /// </summary>
        [PolicyResourceProperty("certificateSigningRequest", "_mUnknown_CertificateSigningRequest")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateSigningRequest;
        private bool _mUnknown_CertificateSigningRequest;
        public string? CertificateSigningRequest
        {
            get
            {
                if (!_mUnknown_CertificateSigningRequest) return _mValue_CertificateSigningRequest;
                throw new UndeferrableValueException("Value 'Certificate.CertificateSigningRequest' is not present");
            }
        }

        /// <summary>
        /// Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
        /// </summary>
        [PolicyResourceProperty("signingAlgorithm", "_mUnknown_SigningAlgorithm")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SigningAlgorithm;
        private bool _mUnknown_SigningAlgorithm;
        public string? SigningAlgorithm
        {
            get
            {
                if (!_mUnknown_SigningAlgorithm) return _mValue_SigningAlgorithm;
                throw new UndeferrableValueException("Value 'Certificate.SigningAlgorithm' is not present");
            }
        }

        /// <summary>
        /// Template to use when issuing a certificate.
        /// See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
        /// </summary>
        [PolicyResourceProperty("templateArn", "_mUnknown_TemplateArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TemplateArn;
        private bool _mUnknown_TemplateArn;
        public string? TemplateArn
        {
            get
            {
                if (!_mUnknown_TemplateArn) return _mValue_TemplateArn;
                throw new UndeferrableValueException("Value 'Certificate.TemplateArn' is not present");
            }
        }

        /// <summary>
        /// Configures end of the validity period for the certificate. See validity block below.
        /// </summary>
        [PolicyResourceProperty("validity", "_mUnknown_Validity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.CertificateValidity? _mValue_Validity;
        private bool _mUnknown_Validity;
        public Outputs.CertificateValidity? Validity
        {
            get
            {
                if (!_mUnknown_Validity) return _mValue_Validity;
                throw new UndeferrableValueException("Value 'Certificate.Validity' is not present");
            }
        }
    }

    [PolicyResourceType("aws:acmpca/certificate:Certificate")]
    public sealed class CertificateArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
        /// </summary>
        [PolicyResourceProperty("apiPassthrough", "_mUnknown_ApiPassthrough")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ApiPassthrough;
        private bool _mUnknown_ApiPassthrough;
        public string? ApiPassthrough
        {
            get
            {
                if (!_mUnknown_ApiPassthrough) return _mValue_ApiPassthrough;
                throw new UndeferrableValueException("Value 'CertificateArgs.ApiPassthrough' is not present");
            }
        }

        /// <summary>
        /// ARN of the certificate authority.
        /// </summary>
        [PolicyResourceProperty("certificateAuthorityArn", "_mUnknown_CertificateAuthorityArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateAuthorityArn;
        private bool _mUnknown_CertificateAuthorityArn;
        public string? CertificateAuthorityArn
        {
            get
            {
                if (!_mUnknown_CertificateAuthorityArn) return _mValue_CertificateAuthorityArn;
                throw new UndeferrableValueException("Value 'CertificateArgs.CertificateAuthorityArn' is not present");
            }
        }

        /// <summary>
        /// Certificate Signing Request in PEM format.
        /// </summary>
        [PolicyResourceProperty("certificateSigningRequest", "_mUnknown_CertificateSigningRequest")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateSigningRequest;
        private bool _mUnknown_CertificateSigningRequest;
        public string? CertificateSigningRequest
        {
            get
            {
                if (!_mUnknown_CertificateSigningRequest) return _mValue_CertificateSigningRequest;
                throw new UndeferrableValueException("Value 'CertificateArgs.CertificateSigningRequest' is not present");
            }
        }

        /// <summary>
        /// Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
        /// </summary>
        [PolicyResourceProperty("signingAlgorithm", "_mUnknown_SigningAlgorithm")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SigningAlgorithm;
        private bool _mUnknown_SigningAlgorithm;
        public string? SigningAlgorithm
        {
            get
            {
                if (!_mUnknown_SigningAlgorithm) return _mValue_SigningAlgorithm;
                throw new UndeferrableValueException("Value 'CertificateArgs.SigningAlgorithm' is not present");
            }
        }

        /// <summary>
        /// Template to use when issuing a certificate.
        /// See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
        /// </summary>
        [PolicyResourceProperty("templateArn", "_mUnknown_TemplateArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TemplateArn;
        private bool _mUnknown_TemplateArn;
        public string? TemplateArn
        {
            get
            {
                if (!_mUnknown_TemplateArn) return _mValue_TemplateArn;
                throw new UndeferrableValueException("Value 'CertificateArgs.TemplateArn' is not present");
            }
        }

        /// <summary>
        /// Configures end of the validity period for the certificate. See validity block below.
        /// </summary>
        [PolicyResourceProperty("validity", "_mUnknown_Validity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.CertificateValidityArgs? _mValue_Validity;
        private bool _mUnknown_Validity;
        public Inputs.CertificateValidityArgs? Validity
        {
            get
            {
                if (!_mUnknown_Validity) return _mValue_Validity;
                throw new UndeferrableValueException("Value 'CertificateArgs.Validity' is not present");
            }
        }
    }
}
