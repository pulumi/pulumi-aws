// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Acmpca
{
    [PolicyResourceType("aws:acmpca/permission:Permission")]
    public sealed class Permission : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
        /// </summary>
        [PolicyResourceProperty("actions", "_mUnknown_Actions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Actions;
        private bool _mUnknown_Actions;
        public List<string>? Actions
        {
            get
            {
                if (!_mUnknown_Actions) return _mValue_Actions;
                throw new UndeferrableValueException("Value 'Permission.Actions' is not present");
            }
        }

        /// <summary>
        /// ARN of the CA that grants the permissions.
        /// </summary>
        [PolicyResourceProperty("certificateAuthorityArn", "_mUnknown_CertificateAuthorityArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateAuthorityArn;
        private bool _mUnknown_CertificateAuthorityArn;
        public string? CertificateAuthorityArn
        {
            get
            {
                if (!_mUnknown_CertificateAuthorityArn) return _mValue_CertificateAuthorityArn;
                throw new UndeferrableValueException("Value 'Permission.CertificateAuthorityArn' is not present");
            }
        }

        /// <summary>
        /// IAM policy that is associated with the permission.
        /// </summary>
        [PolicyResourceProperty("policy", "_mUnknown_Policy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Policy;
        private bool _mUnknown_Policy;
        public string? Policy
        {
            get
            {
                if (!_mUnknown_Policy) return _mValue_Policy;
                throw new UndeferrableValueException("Value 'Permission.Policy' is not present");
            }
        }

        /// <summary>
        /// AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
        /// </summary>
        [PolicyResourceProperty("principal", "_mUnknown_Principal")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Principal;
        private bool _mUnknown_Principal;
        public string? Principal
        {
            get
            {
                if (!_mUnknown_Principal) return _mValue_Principal;
                throw new UndeferrableValueException("Value 'Permission.Principal' is not present");
            }
        }

        /// <summary>
        /// ID of the calling account
        /// </summary>
        [PolicyResourceProperty("sourceAccount", "_mUnknown_SourceAccount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceAccount;
        private bool _mUnknown_SourceAccount;
        public string? SourceAccount
        {
            get
            {
                if (!_mUnknown_SourceAccount) return _mValue_SourceAccount;
                throw new UndeferrableValueException("Value 'Permission.SourceAccount' is not present");
            }
        }
    }

    [PolicyResourceType("aws:acmpca/permission:Permission")]
    public sealed class PermissionArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
        /// </summary>
        [PolicyResourceProperty("actions", "_mUnknown_Actions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Actions;
        private bool _mUnknown_Actions;
        public List<string>? Actions
        {
            get
            {
                if (!_mUnknown_Actions) return _mValue_Actions;
                throw new UndeferrableValueException("Value 'PermissionArgs.Actions' is not present");
            }
        }

        /// <summary>
        /// ARN of the CA that grants the permissions.
        /// </summary>
        [PolicyResourceProperty("certificateAuthorityArn", "_mUnknown_CertificateAuthorityArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateAuthorityArn;
        private bool _mUnknown_CertificateAuthorityArn;
        public string? CertificateAuthorityArn
        {
            get
            {
                if (!_mUnknown_CertificateAuthorityArn) return _mValue_CertificateAuthorityArn;
                throw new UndeferrableValueException("Value 'PermissionArgs.CertificateAuthorityArn' is not present");
            }
        }

        /// <summary>
        /// AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
        /// </summary>
        [PolicyResourceProperty("principal", "_mUnknown_Principal")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Principal;
        private bool _mUnknown_Principal;
        public string? Principal
        {
            get
            {
                if (!_mUnknown_Principal) return _mValue_Principal;
                throw new UndeferrableValueException("Value 'PermissionArgs.Principal' is not present");
            }
        }

        /// <summary>
        /// ID of the calling account
        /// </summary>
        [PolicyResourceProperty("sourceAccount", "_mUnknown_SourceAccount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceAccount;
        private bool _mUnknown_SourceAccount;
        public string? SourceAccount
        {
            get
            {
                if (!_mUnknown_SourceAccount) return _mValue_SourceAccount;
                throw new UndeferrableValueException("Value 'PermissionArgs.SourceAccount' is not present");
            }
        }
    }
}
