// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.SecretsManager
{
    [PolicyResourceType("aws:secretsmanager/secretRotation:SecretRotation")]
    public sealed class SecretRotation : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Specifies whether to rotate the secret immediately or wait until the next scheduled rotation window. The rotation schedule is defined in `rotation_rules`. For secrets that use a Lambda rotation function to rotate, if you don't immediately rotate the secret, Secrets Manager tests the rotation configuration by running the testSecret step (https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_how.html) of the Lambda rotation function. The test creates an AWSPENDING version of the secret and then removes it. Defaults to `true`.
        /// </summary>
        [PolicyResourceProperty("rotateImmediately", "_mUnknown_RotateImmediately")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RotateImmediately;
        private bool _mUnknown_RotateImmediately;
        public bool? RotateImmediately
        {
            get
            {
                if (!_mUnknown_RotateImmediately) return _mValue_RotateImmediately;
                throw new UndeferrableValueException("Value 'SecretRotation.RotateImmediately' is not present");
            }
        }

        /// <summary>
        /// Specifies whether automatic rotation is enabled for this secret.
        /// </summary>
        [PolicyResourceProperty("rotationEnabled", "_mUnknown_RotationEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RotationEnabled;
        private bool _mUnknown_RotationEnabled;
        public bool? RotationEnabled
        {
            get
            {
                if (!_mUnknown_RotationEnabled) return _mValue_RotationEnabled;
                throw new UndeferrableValueException("Value 'SecretRotation.RotationEnabled' is not present");
            }
        }

        /// <summary>
        /// Specifies the ARN of the Lambda function that can rotate the secret. Must be supplied if the secret is not managed by AWS.
        /// </summary>
        [PolicyResourceProperty("rotationLambdaArn", "_mUnknown_RotationLambdaArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RotationLambdaArn;
        private bool _mUnknown_RotationLambdaArn;
        public string? RotationLambdaArn
        {
            get
            {
                if (!_mUnknown_RotationLambdaArn) return _mValue_RotationLambdaArn;
                throw new UndeferrableValueException("Value 'SecretRotation.RotationLambdaArn' is not present");
            }
        }

        /// <summary>
        /// A structure that defines the rotation configuration for this secret. Defined below.
        /// </summary>
        [PolicyResourceProperty("rotationRules", "_mUnknown_RotationRules")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.SecretRotationRotationRules? _mValue_RotationRules;
        private bool _mUnknown_RotationRules;
        public Outputs.SecretRotationRotationRules? RotationRules
        {
            get
            {
                if (!_mUnknown_RotationRules) return _mValue_RotationRules;
                throw new UndeferrableValueException("Value 'SecretRotation.RotationRules' is not present");
            }
        }

        /// <summary>
        /// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
        /// </summary>
        [PolicyResourceProperty("secretId", "_mUnknown_SecretId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecretId;
        private bool _mUnknown_SecretId;
        public string? SecretId
        {
            get
            {
                if (!_mUnknown_SecretId) return _mValue_SecretId;
                throw new UndeferrableValueException("Value 'SecretRotation.SecretId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:secretsmanager/secretRotation:SecretRotation")]
    public sealed class SecretRotationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Specifies whether to rotate the secret immediately or wait until the next scheduled rotation window. The rotation schedule is defined in `rotation_rules`. For secrets that use a Lambda rotation function to rotate, if you don't immediately rotate the secret, Secrets Manager tests the rotation configuration by running the testSecret step (https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_how.html) of the Lambda rotation function. The test creates an AWSPENDING version of the secret and then removes it. Defaults to `true`.
        /// </summary>
        [PolicyResourceProperty("rotateImmediately", "_mUnknown_RotateImmediately")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RotateImmediately;
        private bool _mUnknown_RotateImmediately;
        public bool? RotateImmediately
        {
            get
            {
                if (!_mUnknown_RotateImmediately) return _mValue_RotateImmediately;
                throw new UndeferrableValueException("Value 'SecretRotationArgs.RotateImmediately' is not present");
            }
        }

        /// <summary>
        /// Specifies the ARN of the Lambda function that can rotate the secret. Must be supplied if the secret is not managed by AWS.
        /// </summary>
        [PolicyResourceProperty("rotationLambdaArn", "_mUnknown_RotationLambdaArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RotationLambdaArn;
        private bool _mUnknown_RotationLambdaArn;
        public string? RotationLambdaArn
        {
            get
            {
                if (!_mUnknown_RotationLambdaArn) return _mValue_RotationLambdaArn;
                throw new UndeferrableValueException("Value 'SecretRotationArgs.RotationLambdaArn' is not present");
            }
        }

        /// <summary>
        /// A structure that defines the rotation configuration for this secret. Defined below.
        /// </summary>
        [PolicyResourceProperty("rotationRules", "_mUnknown_RotationRules")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.SecretRotationRotationRulesArgs? _mValue_RotationRules;
        private bool _mUnknown_RotationRules;
        public Inputs.SecretRotationRotationRulesArgs? RotationRules
        {
            get
            {
                if (!_mUnknown_RotationRules) return _mValue_RotationRules;
                throw new UndeferrableValueException("Value 'SecretRotationArgs.RotationRules' is not present");
            }
        }

        /// <summary>
        /// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
        /// </summary>
        [PolicyResourceProperty("secretId", "_mUnknown_SecretId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecretId;
        private bool _mUnknown_SecretId;
        public string? SecretId
        {
            get
            {
                if (!_mUnknown_SecretId) return _mValue_SecretId;
                throw new UndeferrableValueException("Value 'SecretRotationArgs.SecretId' is not present");
            }
        }
    }
}
