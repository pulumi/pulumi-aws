// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Eks.Inputs
{
    public sealed class ClusterKubernetesNetworkConfigArgs
    {
        /// <summary>
        /// Configuration block with elastic load balancing configuration for the cluster. Detailed below.
        /// </summary>
        [PolicyResourceProperty("elasticLoadBalancing", "_mUnknown_ElasticLoadBalancing")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ClusterKubernetesNetworkConfigElasticLoadBalancingArgs? _mValue_ElasticLoadBalancing;
        private bool _mUnknown_ElasticLoadBalancing;
        public Inputs.ClusterKubernetesNetworkConfigElasticLoadBalancingArgs? ElasticLoadBalancing
        {
            get
            {
                if (!_mUnknown_ElasticLoadBalancing) return _mValue_ElasticLoadBalancing;
                throw new UndeferrableValueException("Value 'ClusterKubernetesNetworkConfigArgs.ElasticLoadBalancing' is not present");
            }
        }

        /// <summary>
        /// The IP family used to assign Kubernetes pod and service addresses. Valid values are `ipv4` (default) and `ipv6`. You can only specify an IP family when you create a cluster, changing this value will force a new cluster to be created.
        /// </summary>
        [PolicyResourceProperty("ipFamily", "_mUnknown_IpFamily")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IpFamily;
        private bool _mUnknown_IpFamily;
        public string? IpFamily
        {
            get
            {
                if (!_mUnknown_IpFamily) return _mValue_IpFamily;
                throw new UndeferrableValueException("Value 'ClusterKubernetesNetworkConfigArgs.IpFamily' is not present");
            }
        }

        /// <summary>
        /// The CIDR block to assign Kubernetes pod and service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. You can only specify a custom CIDR block when you create a cluster, changing this value will force a new cluster to be created. The block must meet the following requirements:
        /// 
        /// * Within one of the following private IP address blocks: 10.0.0.0/8, 172.16.0.0/12, or 192.168.0.0/16.
        /// 
        /// * Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.
        /// 
        /// * Between /24 and /12.
        /// </summary>
        [PolicyResourceProperty("serviceIpv4Cidr", "_mUnknown_ServiceIpv4Cidr")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServiceIpv4Cidr;
        private bool _mUnknown_ServiceIpv4Cidr;
        public string? ServiceIpv4Cidr
        {
            get
            {
                if (!_mUnknown_ServiceIpv4Cidr) return _mValue_ServiceIpv4Cidr;
                throw new UndeferrableValueException("Value 'ClusterKubernetesNetworkConfigArgs.ServiceIpv4Cidr' is not present");
            }
        }

        /// <summary>
        /// The CIDR block that Kubernetes pod and service IP addresses are assigned from if you specify `ipv6` for `ip_family` when you create the cluster. Kubernetes assigns service addresses from the unique local address range (fc00::/7) because you can't specify a custom IPv6 CIDR block when you create the cluster.
        /// </summary>
        [PolicyResourceProperty("serviceIpv6Cidr", "_mUnknown_ServiceIpv6Cidr")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServiceIpv6Cidr;
        private bool _mUnknown_ServiceIpv6Cidr;
        public string? ServiceIpv6Cidr
        {
            get
            {
                if (!_mUnknown_ServiceIpv6Cidr) return _mValue_ServiceIpv6Cidr;
                throw new UndeferrableValueException("Value 'ClusterKubernetesNetworkConfigArgs.ServiceIpv6Cidr' is not present");
            }
        }
    }
}
