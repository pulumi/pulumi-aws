// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Eks
{
    [PolicyResourceType("aws:eks/podIdentityAssociation:PodIdentityAssociation")]
    public sealed class PodIdentityAssociation : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the association.
        /// </summary>
        [PolicyResourceProperty("associationArn", "_mUnknown_AssociationArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AssociationArn;
        private bool _mUnknown_AssociationArn;
        public string? AssociationArn
        {
            get
            {
                if (!_mUnknown_AssociationArn) return _mValue_AssociationArn;
                throw new UndeferrableValueException("Value 'PodIdentityAssociation.AssociationArn' is not present");
            }
        }

        /// <summary>
        /// The ID of the association.
        /// </summary>
        [PolicyResourceProperty("associationId", "_mUnknown_AssociationId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AssociationId;
        private bool _mUnknown_AssociationId;
        public string? AssociationId
        {
            get
            {
                if (!_mUnknown_AssociationId) return _mValue_AssociationId;
                throw new UndeferrableValueException("Value 'PodIdentityAssociation.AssociationId' is not present");
            }
        }

        /// <summary>
        /// The name of the cluster to create the association in.
        /// </summary>
        [PolicyResourceProperty("clusterName", "_mUnknown_ClusterName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ClusterName;
        private bool _mUnknown_ClusterName;
        public string? ClusterName
        {
            get
            {
                if (!_mUnknown_ClusterName) return _mValue_ClusterName;
                throw new UndeferrableValueException("Value 'PodIdentityAssociation.ClusterName' is not present");
            }
        }

        /// <summary>
        /// The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
        /// </summary>
        [PolicyResourceProperty("namespace", "_mUnknown_Namespace")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Namespace;
        private bool _mUnknown_Namespace;
        public string? Namespace
        {
            get
            {
                if (!_mUnknown_Namespace) return _mValue_Namespace;
                throw new UndeferrableValueException("Value 'PodIdentityAssociation.Namespace' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the pods that use this service account.
        /// </summary>
        [PolicyResourceProperty("roleArn", "_mUnknown_RoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoleArn;
        private bool _mUnknown_RoleArn;
        public string? RoleArn
        {
            get
            {
                if (!_mUnknown_RoleArn) return _mValue_RoleArn;
                throw new UndeferrableValueException("Value 'PodIdentityAssociation.RoleArn' is not present");
            }
        }

        /// <summary>
        /// The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("serviceAccount", "_mUnknown_ServiceAccount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServiceAccount;
        private bool _mUnknown_ServiceAccount;
        public string? ServiceAccount
        {
            get
            {
                if (!_mUnknown_ServiceAccount) return _mValue_ServiceAccount;
                throw new UndeferrableValueException("Value 'PodIdentityAssociation.ServiceAccount' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'PodIdentityAssociation.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'PodIdentityAssociation.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:eks/podIdentityAssociation:PodIdentityAssociation")]
    public sealed class PodIdentityAssociationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The name of the cluster to create the association in.
        /// </summary>
        [PolicyResourceProperty("clusterName", "_mUnknown_ClusterName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ClusterName;
        private bool _mUnknown_ClusterName;
        public string? ClusterName
        {
            get
            {
                if (!_mUnknown_ClusterName) return _mValue_ClusterName;
                throw new UndeferrableValueException("Value 'PodIdentityAssociationArgs.ClusterName' is not present");
            }
        }

        /// <summary>
        /// The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
        /// </summary>
        [PolicyResourceProperty("namespace", "_mUnknown_Namespace")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Namespace;
        private bool _mUnknown_Namespace;
        public string? Namespace
        {
            get
            {
                if (!_mUnknown_Namespace) return _mValue_Namespace;
                throw new UndeferrableValueException("Value 'PodIdentityAssociationArgs.Namespace' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the pods that use this service account.
        /// </summary>
        [PolicyResourceProperty("roleArn", "_mUnknown_RoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoleArn;
        private bool _mUnknown_RoleArn;
        public string? RoleArn
        {
            get
            {
                if (!_mUnknown_RoleArn) return _mValue_RoleArn;
                throw new UndeferrableValueException("Value 'PodIdentityAssociationArgs.RoleArn' is not present");
            }
        }

        /// <summary>
        /// The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("serviceAccount", "_mUnknown_ServiceAccount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServiceAccount;
        private bool _mUnknown_ServiceAccount;
        public string? ServiceAccount
        {
            get
            {
                if (!_mUnknown_ServiceAccount) return _mValue_ServiceAccount;
                throw new UndeferrableValueException("Value 'PodIdentityAssociationArgs.ServiceAccount' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'PodIdentityAssociationArgs.Tags' is not present");
            }
        }
    }
}
