// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Eks
{
    [PolicyResourceType("aws:eks/podIdentityAssociation:PodIdentityAssociation")]
    public sealed class PodIdentityAssociation : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the association.
        /// </summary>
        [Input("associationArn")]
        public string? AssociationArn;

        /// <summary>
        /// The ID of the association.
        /// </summary>
        [Input("associationId")]
        public string? AssociationId;

        /// <summary>
        /// The name of the cluster to create the association in.
        /// </summary>
        [Input("clusterName")]
        public string? ClusterName;

        /// <summary>
        /// The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
        /// </summary>
        [Input("namespace")]
        public string? Namespace;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the pods that use this service account.
        /// </summary>
        [Input("roleArn")]
        public string? RoleArn;

        /// <summary>
        /// The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("serviceAccount")]
        public string? ServiceAccount;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
