// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ServiceDiscovery
{
    [PolicyResourceType("aws:servicediscovery/service:Service")]
    public sealed class Service : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the service.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Service.Arn' is not present");
            }
        }

        /// <summary>
        /// The description of the service.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'Service.Description' is not present");
            }
        }

        /// <summary>
        /// A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance. See `dns_config` Block for details.
        /// </summary>
        [PolicyResourceProperty("dnsConfig", "_mUnknown_DnsConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ServiceDnsConfig? _mValue_DnsConfig;
        private bool _mUnknown_DnsConfig;
        public Outputs.ServiceDnsConfig? DnsConfig
        {
            get
            {
                if (!_mUnknown_DnsConfig) return _mValue_DnsConfig;
                throw new UndeferrableValueException("Value 'Service.DnsConfig' is not present");
            }
        }

        /// <summary>
        /// A boolean that indicates all instances should be deleted from the service so that the service can be destroyed without error. These instances are not recoverable. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("forceDestroy", "_mUnknown_ForceDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ForceDestroy;
        private bool _mUnknown_ForceDestroy;
        public bool? ForceDestroy
        {
            get
            {
                if (!_mUnknown_ForceDestroy) return _mValue_ForceDestroy;
                throw new UndeferrableValueException("Value 'Service.ForceDestroy' is not present");
            }
        }

        /// <summary>
        /// A complex type that contains settings for an optional health check. Only for Public DNS namespaces. See `health_check_config` Block for details.
        /// </summary>
        [PolicyResourceProperty("healthCheckConfig", "_mUnknown_HealthCheckConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ServiceHealthCheckConfig? _mValue_HealthCheckConfig;
        private bool _mUnknown_HealthCheckConfig;
        public Outputs.ServiceHealthCheckConfig? HealthCheckConfig
        {
            get
            {
                if (!_mUnknown_HealthCheckConfig) return _mValue_HealthCheckConfig;
                throw new UndeferrableValueException("Value 'Service.HealthCheckConfig' is not present");
            }
        }

        /// <summary>
        /// A complex type that contains settings for ECS managed health checks. See `health_check_custom_config` Block for details.
        /// </summary>
        [PolicyResourceProperty("healthCheckCustomConfig", "_mUnknown_HealthCheckCustomConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ServiceHealthCheckCustomConfig? _mValue_HealthCheckCustomConfig;
        private bool _mUnknown_HealthCheckCustomConfig;
        public Outputs.ServiceHealthCheckCustomConfig? HealthCheckCustomConfig
        {
            get
            {
                if (!_mUnknown_HealthCheckCustomConfig) return _mValue_HealthCheckCustomConfig;
                throw new UndeferrableValueException("Value 'Service.HealthCheckCustomConfig' is not present");
            }
        }

        /// <summary>
        /// The name of the service.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Service.Name' is not present");
            }
        }

        /// <summary>
        /// The ID of the namespace that you want to use to create the service.
        /// </summary>
        [PolicyResourceProperty("namespaceId", "_mUnknown_NamespaceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamespaceId;
        private bool _mUnknown_NamespaceId;
        public string? NamespaceId
        {
            get
            {
                if (!_mUnknown_NamespaceId) return _mValue_NamespaceId;
                throw new UndeferrableValueException("Value 'Service.NamespaceId' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the service. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Service.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Service.TagsAll' is not present");
            }
        }

        /// <summary>
        /// If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation. No DNS records is registered for the service instances. The only valid value is `HTTP`.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'Service.Type' is not present");
            }
        }
    }

    [PolicyResourceType("aws:servicediscovery/service:Service")]
    public sealed class ServiceArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The description of the service.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'ServiceArgs.Description' is not present");
            }
        }

        /// <summary>
        /// A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance. See `dns_config` Block for details.
        /// </summary>
        [PolicyResourceProperty("dnsConfig", "_mUnknown_DnsConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ServiceDnsConfigArgs? _mValue_DnsConfig;
        private bool _mUnknown_DnsConfig;
        public Inputs.ServiceDnsConfigArgs? DnsConfig
        {
            get
            {
                if (!_mUnknown_DnsConfig) return _mValue_DnsConfig;
                throw new UndeferrableValueException("Value 'ServiceArgs.DnsConfig' is not present");
            }
        }

        /// <summary>
        /// A boolean that indicates all instances should be deleted from the service so that the service can be destroyed without error. These instances are not recoverable. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("forceDestroy", "_mUnknown_ForceDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ForceDestroy;
        private bool _mUnknown_ForceDestroy;
        public bool? ForceDestroy
        {
            get
            {
                if (!_mUnknown_ForceDestroy) return _mValue_ForceDestroy;
                throw new UndeferrableValueException("Value 'ServiceArgs.ForceDestroy' is not present");
            }
        }

        /// <summary>
        /// A complex type that contains settings for an optional health check. Only for Public DNS namespaces. See `health_check_config` Block for details.
        /// </summary>
        [PolicyResourceProperty("healthCheckConfig", "_mUnknown_HealthCheckConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ServiceHealthCheckConfigArgs? _mValue_HealthCheckConfig;
        private bool _mUnknown_HealthCheckConfig;
        public Inputs.ServiceHealthCheckConfigArgs? HealthCheckConfig
        {
            get
            {
                if (!_mUnknown_HealthCheckConfig) return _mValue_HealthCheckConfig;
                throw new UndeferrableValueException("Value 'ServiceArgs.HealthCheckConfig' is not present");
            }
        }

        /// <summary>
        /// A complex type that contains settings for ECS managed health checks. See `health_check_custom_config` Block for details.
        /// </summary>
        [PolicyResourceProperty("healthCheckCustomConfig", "_mUnknown_HealthCheckCustomConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ServiceHealthCheckCustomConfigArgs? _mValue_HealthCheckCustomConfig;
        private bool _mUnknown_HealthCheckCustomConfig;
        public Inputs.ServiceHealthCheckCustomConfigArgs? HealthCheckCustomConfig
        {
            get
            {
                if (!_mUnknown_HealthCheckCustomConfig) return _mValue_HealthCheckCustomConfig;
                throw new UndeferrableValueException("Value 'ServiceArgs.HealthCheckCustomConfig' is not present");
            }
        }

        /// <summary>
        /// The name of the service.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'ServiceArgs.Name' is not present");
            }
        }

        /// <summary>
        /// The ID of the namespace that you want to use to create the service.
        /// </summary>
        [PolicyResourceProperty("namespaceId", "_mUnknown_NamespaceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamespaceId;
        private bool _mUnknown_NamespaceId;
        public string? NamespaceId
        {
            get
            {
                if (!_mUnknown_NamespaceId) return _mValue_NamespaceId;
                throw new UndeferrableValueException("Value 'ServiceArgs.NamespaceId' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the service. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ServiceArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation. No DNS records is registered for the service instances. The only valid value is `HTTP`.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'ServiceArgs.Type' is not present");
            }
        }
    }
}
