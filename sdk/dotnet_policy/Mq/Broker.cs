// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Mq
{
    [PolicyResourceType("aws:mq/broker:Broker")]
    public sealed class Broker : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is `false`.
        /// </summary>
        [Input("applyImmediately")]
        public bool? ApplyImmediately;

        /// <summary>
        /// ARN of the broker.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engine_type` `RabbitMQ`.
        /// </summary>
        [Input("authenticationStrategy")]
        public string? AuthenticationStrategy;

        /// <summary>
        /// Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
        /// </summary>
        [Input("autoMinorVersionUpgrade")]
        public bool? AutoMinorVersionUpgrade;

        /// <summary>
        /// Name of the broker.
        /// </summary>
        [Input("brokerName")]
        public string? BrokerName;

        /// <summary>
        /// Configuration block for broker configuration. Applies to `engine_type` of `ActiveMQ` and `RabbitMQ` only. Detailed below.
        /// </summary>
        [Input("configuration")]
        public BrokerConfiguration? Configuration;

        /// <summary>
        /// Defines whether this broker is a part of a data replication pair. Valid values are `CRDR` and `NONE`.
        /// </summary>
        [Input("dataReplicationMode")]
        public string? DataReplicationMode;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when `data_replication_mode` is `CRDR`.
        /// </summary>
        [Input("dataReplicationPrimaryBrokerArn")]
        public string? DataReplicationPrimaryBrokerArn;

        /// <summary>
        /// Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
        /// </summary>
        [Input("deploymentMode")]
        public string? DeploymentMode;

        /// <summary>
        /// Configuration block containing encryption options. Detailed below.
        /// </summary>
        [Input("encryptionOptions")]
        public BrokerEncryptionOptions? EncryptionOptions;

        /// <summary>
        /// Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
        /// </summary>
        [Input("engineType")]
        public string? EngineType;

        /// <summary>
        /// Version of the broker engine. See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions. For example, `5.17.6`.
        /// </summary>
        [Input("engineVersion")]
        public string? EngineVersion;

        /// <summary>
        /// Broker's instance type. For example, `mq.t3.micro`, `mq.m5.large`.
        /// </summary>
        [Input("hostInstanceType")]
        public string? HostInstanceType;

        /// <summary>
        /// List of information about allocated brokers (both active &amp; standby).
        /// </summary>
        [Input("instances")]
        public List<BrokerInstance>? Instances;

        /// <summary>
        /// Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for `engine_type` `RabbitMQ`. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)
        /// </summary>
        [Input("ldapServerMetadata")]
        public BrokerLdapServerMetadata? LdapServerMetadata;

        /// <summary>
        /// Configuration block for the logging configuration of the broker. Detailed below.
        /// </summary>
        [Input("logs")]
        public BrokerLogs? Logs;

        /// <summary>
        /// Configuration block for the maintenance window start time. Detailed below.
        /// </summary>
        [Input("maintenanceWindowStartTime")]
        public BrokerMaintenanceWindowStartTime? MaintenanceWindowStartTime;

        /// <summary>
        /// (Optional) The data replication mode that will be applied after reboot.
        /// </summary>
        [Input("pendingDataReplicationMode")]
        public string? PendingDataReplicationMode;

        /// <summary>
        /// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
        /// </summary>
        [Input("publiclyAccessible")]
        public bool? PubliclyAccessible;

        /// <summary>
        /// List of security group IDs assigned to the broker.
        /// </summary>
        [Input("securityGroups")]
        public List<string>? SecurityGroups;

        /// <summary>
        /// Storage type of the broker. For `engine_type` `ActiveMQ`, the valid values are `efs` and `ebs`, and the AWS-default is `efs`. For `engine_type` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
        /// </summary>
        [Input("storageType")]
        public string? StorageType;

        /// <summary>
        /// List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
        /// </summary>
        [Input("subnetIds")]
        public List<string>? SubnetIds;

        /// <summary>
        /// Map of tags to assign to the broker. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Configuration block for broker users. For `engine_type` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("users")]
        public List<BrokerUser>? Users;
    }
}
