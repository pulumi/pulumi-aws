// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2ClientVpn.Outputs
{
    public sealed class EndpointAuthenticationOption
    {
        /// <summary>
        /// The ID of the Active Directory to be used for authentication if type is `directory-service-authentication`.
        /// </summary>
        [PolicyResourceProperty("activeDirectoryId", "_mUnknown_ActiveDirectoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ActiveDirectoryId;
        private bool _mUnknown_ActiveDirectoryId;
        public string? ActiveDirectoryId
        {
            get
            {
                if (!_mUnknown_ActiveDirectoryId) return _mValue_ActiveDirectoryId;
                throw new UndeferrableValueException("Value 'EndpointAuthenticationOption.ActiveDirectoryId' is not present");
            }
        }

        /// <summary>
        /// The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM). Only necessary when type is set to `certificate-authentication`.
        /// </summary>
        [PolicyResourceProperty("rootCertificateChainArn", "_mUnknown_RootCertificateChainArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RootCertificateChainArn;
        private bool _mUnknown_RootCertificateChainArn;
        public string? RootCertificateChainArn
        {
            get
            {
                if (!_mUnknown_RootCertificateChainArn) return _mValue_RootCertificateChainArn;
                throw new UndeferrableValueException("Value 'EndpointAuthenticationOption.RootCertificateChainArn' is not present");
            }
        }

        /// <summary>
        /// The ARN of the IAM SAML identity provider if type is `federated-authentication`.
        /// </summary>
        [PolicyResourceProperty("samlProviderArn", "_mUnknown_SamlProviderArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SamlProviderArn;
        private bool _mUnknown_SamlProviderArn;
        public string? SamlProviderArn
        {
            get
            {
                if (!_mUnknown_SamlProviderArn) return _mValue_SamlProviderArn;
                throw new UndeferrableValueException("Value 'EndpointAuthenticationOption.SamlProviderArn' is not present");
            }
        }

        /// <summary>
        /// The ARN of the IAM SAML identity provider for the self service portal if type is `federated-authentication`.
        /// </summary>
        [PolicyResourceProperty("selfServiceSamlProviderArn", "_mUnknown_SelfServiceSamlProviderArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SelfServiceSamlProviderArn;
        private bool _mUnknown_SelfServiceSamlProviderArn;
        public string? SelfServiceSamlProviderArn
        {
            get
            {
                if (!_mUnknown_SelfServiceSamlProviderArn) return _mValue_SelfServiceSamlProviderArn;
                throw new UndeferrableValueException("Value 'EndpointAuthenticationOption.SelfServiceSamlProviderArn' is not present");
            }
        }

        /// <summary>
        /// The type of client authentication to be used. Specify `certificate-authentication` to use certificate-based authentication, `directory-service-authentication` to use Active Directory authentication, or `federated-authentication` to use Federated Authentication via SAML 2.0.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'EndpointAuthenticationOption.Type' is not present");
            }
        }
    }
}
