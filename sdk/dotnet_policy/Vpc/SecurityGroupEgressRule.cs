// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Vpc
{
    [PolicyResourceType("aws:vpc/securityGroupEgressRule:SecurityGroupEgressRule")]
    public sealed class SecurityGroupEgressRule : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the security group rule.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.Arn' is not present");
            }
        }

        /// <summary>
        /// The destination IPv4 CIDR range.
        /// </summary>
        [PolicyResourceProperty("cidrIpv4", "_mUnknown_CidrIpv4")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CidrIpv4;
        private bool _mUnknown_CidrIpv4;
        public string? CidrIpv4
        {
            get
            {
                if (!_mUnknown_CidrIpv4) return _mValue_CidrIpv4;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.CidrIpv4' is not present");
            }
        }

        /// <summary>
        /// The destination IPv6 CIDR range.
        /// </summary>
        [PolicyResourceProperty("cidrIpv6", "_mUnknown_CidrIpv6")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CidrIpv6;
        private bool _mUnknown_CidrIpv6;
        public string? CidrIpv6
        {
            get
            {
                if (!_mUnknown_CidrIpv6) return _mValue_CidrIpv6;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.CidrIpv6' is not present");
            }
        }

        /// <summary>
        /// The security group rule description.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.Description' is not present");
            }
        }

        /// <summary>
        /// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
        /// </summary>
        [PolicyResourceProperty("fromPort", "_mUnknown_FromPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_FromPort;
        private bool _mUnknown_FromPort;
        public int? FromPort
        {
            get
            {
                if (!_mUnknown_FromPort) return _mValue_FromPort;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.FromPort' is not present");
            }
        }

        /// <summary>
        /// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ip_protocol` is set to `-1`, it translates to all protocols, all port ranges, and `from_port` and `to_port` values should not be defined.
        /// </summary>
        [PolicyResourceProperty("ipProtocol", "_mUnknown_IpProtocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IpProtocol;
        private bool _mUnknown_IpProtocol;
        public string? IpProtocol
        {
            get
            {
                if (!_mUnknown_IpProtocol) return _mValue_IpProtocol;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.IpProtocol' is not present");
            }
        }

        /// <summary>
        /// The ID of the destination prefix list.
        /// </summary>
        [PolicyResourceProperty("prefixListId", "_mUnknown_PrefixListId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrefixListId;
        private bool _mUnknown_PrefixListId;
        public string? PrefixListId
        {
            get
            {
                if (!_mUnknown_PrefixListId) return _mValue_PrefixListId;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.PrefixListId' is not present");
            }
        }

        /// <summary>
        /// The destination security group that is referenced in the rule.
        /// </summary>
        [PolicyResourceProperty("referencedSecurityGroupId", "_mUnknown_ReferencedSecurityGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ReferencedSecurityGroupId;
        private bool _mUnknown_ReferencedSecurityGroupId;
        public string? ReferencedSecurityGroupId
        {
            get
            {
                if (!_mUnknown_ReferencedSecurityGroupId) return _mValue_ReferencedSecurityGroupId;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.ReferencedSecurityGroupId' is not present");
            }
        }

        /// <summary>
        /// The ID of the security group.
        /// </summary>
        [PolicyResourceProperty("securityGroupId", "_mUnknown_SecurityGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityGroupId;
        private bool _mUnknown_SecurityGroupId;
        public string? SecurityGroupId
        {
            get
            {
                if (!_mUnknown_SecurityGroupId) return _mValue_SecurityGroupId;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.SecurityGroupId' is not present");
            }
        }

        /// <summary>
        /// The ID of the security group rule.
        /// </summary>
        [PolicyResourceProperty("securityGroupRuleId", "_mUnknown_SecurityGroupRuleId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityGroupRuleId;
        private bool _mUnknown_SecurityGroupRuleId;
        public string? SecurityGroupRuleId
        {
            get
            {
                if (!_mUnknown_SecurityGroupRuleId) return _mValue_SecurityGroupRuleId;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.SecurityGroupRuleId' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.TagsAll' is not present");
            }
        }

        /// <summary>
        /// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
        /// </summary>
        [PolicyResourceProperty("toPort", "_mUnknown_ToPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ToPort;
        private bool _mUnknown_ToPort;
        public int? ToPort
        {
            get
            {
                if (!_mUnknown_ToPort) return _mValue_ToPort;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRule.ToPort' is not present");
            }
        }
    }

    [PolicyResourceType("aws:vpc/securityGroupEgressRule:SecurityGroupEgressRule")]
    public sealed class SecurityGroupEgressRuleArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The destination IPv4 CIDR range.
        /// </summary>
        [PolicyResourceProperty("cidrIpv4", "_mUnknown_CidrIpv4")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CidrIpv4;
        private bool _mUnknown_CidrIpv4;
        public string? CidrIpv4
        {
            get
            {
                if (!_mUnknown_CidrIpv4) return _mValue_CidrIpv4;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.CidrIpv4' is not present");
            }
        }

        /// <summary>
        /// The destination IPv6 CIDR range.
        /// </summary>
        [PolicyResourceProperty("cidrIpv6", "_mUnknown_CidrIpv6")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CidrIpv6;
        private bool _mUnknown_CidrIpv6;
        public string? CidrIpv6
        {
            get
            {
                if (!_mUnknown_CidrIpv6) return _mValue_CidrIpv6;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.CidrIpv6' is not present");
            }
        }

        /// <summary>
        /// The security group rule description.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.Description' is not present");
            }
        }

        /// <summary>
        /// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
        /// </summary>
        [PolicyResourceProperty("fromPort", "_mUnknown_FromPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_FromPort;
        private bool _mUnknown_FromPort;
        public int? FromPort
        {
            get
            {
                if (!_mUnknown_FromPort) return _mValue_FromPort;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.FromPort' is not present");
            }
        }

        /// <summary>
        /// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ip_protocol` is set to `-1`, it translates to all protocols, all port ranges, and `from_port` and `to_port` values should not be defined.
        /// </summary>
        [PolicyResourceProperty("ipProtocol", "_mUnknown_IpProtocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IpProtocol;
        private bool _mUnknown_IpProtocol;
        public string? IpProtocol
        {
            get
            {
                if (!_mUnknown_IpProtocol) return _mValue_IpProtocol;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.IpProtocol' is not present");
            }
        }

        /// <summary>
        /// The ID of the destination prefix list.
        /// </summary>
        [PolicyResourceProperty("prefixListId", "_mUnknown_PrefixListId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrefixListId;
        private bool _mUnknown_PrefixListId;
        public string? PrefixListId
        {
            get
            {
                if (!_mUnknown_PrefixListId) return _mValue_PrefixListId;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.PrefixListId' is not present");
            }
        }

        /// <summary>
        /// The destination security group that is referenced in the rule.
        /// </summary>
        [PolicyResourceProperty("referencedSecurityGroupId", "_mUnknown_ReferencedSecurityGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ReferencedSecurityGroupId;
        private bool _mUnknown_ReferencedSecurityGroupId;
        public string? ReferencedSecurityGroupId
        {
            get
            {
                if (!_mUnknown_ReferencedSecurityGroupId) return _mValue_ReferencedSecurityGroupId;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.ReferencedSecurityGroupId' is not present");
            }
        }

        /// <summary>
        /// The ID of the security group.
        /// </summary>
        [PolicyResourceProperty("securityGroupId", "_mUnknown_SecurityGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityGroupId;
        private bool _mUnknown_SecurityGroupId;
        public string? SecurityGroupId
        {
            get
            {
                if (!_mUnknown_SecurityGroupId) return _mValue_SecurityGroupId;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.SecurityGroupId' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
        /// </summary>
        [PolicyResourceProperty("toPort", "_mUnknown_ToPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ToPort;
        private bool _mUnknown_ToPort;
        public int? ToPort
        {
            get
            {
                if (!_mUnknown_ToPort) return _mValue_ToPort;
                throw new UndeferrableValueException("Value 'SecurityGroupEgressRuleArgs.ToPort' is not present");
            }
        }
    }
}
