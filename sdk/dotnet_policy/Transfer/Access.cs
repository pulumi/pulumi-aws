// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Transfer
{
    [PolicyResourceType("aws:transfer/access:Access")]
    public sealed class Access : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The SID of a group in the directory connected to the Transfer Server (e.g., `S-1-1-12-1234567890-123456789-1234567890-1234`)
        /// </summary>
        [PolicyResourceProperty("externalId", "_mUnknown_ExternalId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ExternalId;
        private bool _mUnknown_ExternalId;
        public string? ExternalId
        {
            get
            {
                if (!_mUnknown_ExternalId) return _mValue_ExternalId;
                throw new UndeferrableValueException("Value 'Access.ExternalId' is not present");
            }
        }

        /// <summary>
        /// The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a `/`.  The first item in the path is the name of the home bucket (accessible as `${Transfer:HomeBucket}` in the policy) and the rest is the home directory (accessible as `${Transfer:HomeDirectory}` in the policy). For example, `/example-bucket-1234/username` would set the home bucket to `example-bucket-1234` and the home directory to `username`.
        /// </summary>
        [PolicyResourceProperty("homeDirectory", "_mUnknown_HomeDirectory")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HomeDirectory;
        private bool _mUnknown_HomeDirectory;
        public string? HomeDirectory
        {
            get
            {
                if (!_mUnknown_HomeDirectory) return _mValue_HomeDirectory;
                throw new UndeferrableValueException("Value 'Access.HomeDirectory' is not present");
            }
        }

        /// <summary>
        /// Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
        /// </summary>
        [PolicyResourceProperty("homeDirectoryMappings", "_mUnknown_HomeDirectoryMappings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.AccessHomeDirectoryMapping>? _mValue_HomeDirectoryMappings;
        private bool _mUnknown_HomeDirectoryMappings;
        public List<Outputs.AccessHomeDirectoryMapping>? HomeDirectoryMappings
        {
            get
            {
                if (!_mUnknown_HomeDirectoryMappings) return _mValue_HomeDirectoryMappings;
                throw new UndeferrableValueException("Value 'Access.HomeDirectoryMappings' is not present");
            }
        }

        /// <summary>
        /// The type of landing directory (folder) you mapped for your users' home directory. Valid values are `PATH` and `LOGICAL`.
        /// </summary>
        [PolicyResourceProperty("homeDirectoryType", "_mUnknown_HomeDirectoryType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HomeDirectoryType;
        private bool _mUnknown_HomeDirectoryType;
        public string? HomeDirectoryType
        {
            get
            {
                if (!_mUnknown_HomeDirectoryType) return _mValue_HomeDirectoryType;
                throw new UndeferrableValueException("Value 'Access.HomeDirectoryType' is not present");
            }
        }

        /// <summary>
        /// An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include `${Transfer:UserName}`, `${Transfer:HomeDirectory}`, and `${Transfer:HomeBucket}`. These are evaluated on-the-fly when navigating the bucket.
        /// </summary>
        [PolicyResourceProperty("policy", "_mUnknown_Policy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Policy;
        private bool _mUnknown_Policy;
        public string? Policy
        {
            get
            {
                if (!_mUnknown_Policy) return _mValue_Policy;
                throw new UndeferrableValueException("Value 'Access.Policy' is not present");
            }
        }

        /// <summary>
        /// Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. See Posix Profile below.
        /// </summary>
        [PolicyResourceProperty("posixProfile", "_mUnknown_PosixProfile")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.AccessPosixProfile? _mValue_PosixProfile;
        private bool _mUnknown_PosixProfile;
        public Outputs.AccessPosixProfile? PosixProfile
        {
            get
            {
                if (!_mUnknown_PosixProfile) return _mValue_PosixProfile;
                throw new UndeferrableValueException("Value 'Access.PosixProfile' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of an IAM role that allows the service to controls your userâ€™s access to your Amazon S3 bucket.
        /// </summary>
        [PolicyResourceProperty("role", "_mUnknown_Role")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Role;
        private bool _mUnknown_Role;
        public string? Role
        {
            get
            {
                if (!_mUnknown_Role) return _mValue_Role;
                throw new UndeferrableValueException("Value 'Access.Role' is not present");
            }
        }

        /// <summary>
        /// The Server ID of the Transfer Server (e.g., `s-12345678`)
        /// </summary>
        [PolicyResourceProperty("serverId", "_mUnknown_ServerId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServerId;
        private bool _mUnknown_ServerId;
        public string? ServerId
        {
            get
            {
                if (!_mUnknown_ServerId) return _mValue_ServerId;
                throw new UndeferrableValueException("Value 'Access.ServerId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:transfer/access:Access")]
    public sealed class AccessArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The SID of a group in the directory connected to the Transfer Server (e.g., `S-1-1-12-1234567890-123456789-1234567890-1234`)
        /// </summary>
        [PolicyResourceProperty("externalId", "_mUnknown_ExternalId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ExternalId;
        private bool _mUnknown_ExternalId;
        public string? ExternalId
        {
            get
            {
                if (!_mUnknown_ExternalId) return _mValue_ExternalId;
                throw new UndeferrableValueException("Value 'AccessArgs.ExternalId' is not present");
            }
        }

        /// <summary>
        /// The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a `/`.  The first item in the path is the name of the home bucket (accessible as `${Transfer:HomeBucket}` in the policy) and the rest is the home directory (accessible as `${Transfer:HomeDirectory}` in the policy). For example, `/example-bucket-1234/username` would set the home bucket to `example-bucket-1234` and the home directory to `username`.
        /// </summary>
        [PolicyResourceProperty("homeDirectory", "_mUnknown_HomeDirectory")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HomeDirectory;
        private bool _mUnknown_HomeDirectory;
        public string? HomeDirectory
        {
            get
            {
                if (!_mUnknown_HomeDirectory) return _mValue_HomeDirectory;
                throw new UndeferrableValueException("Value 'AccessArgs.HomeDirectory' is not present");
            }
        }

        /// <summary>
        /// Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
        /// </summary>
        [PolicyResourceProperty("homeDirectoryMappings", "_mUnknown_HomeDirectoryMappings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.AccessHomeDirectoryMappingArgs>? _mValue_HomeDirectoryMappings;
        private bool _mUnknown_HomeDirectoryMappings;
        public List<Inputs.AccessHomeDirectoryMappingArgs>? HomeDirectoryMappings
        {
            get
            {
                if (!_mUnknown_HomeDirectoryMappings) return _mValue_HomeDirectoryMappings;
                throw new UndeferrableValueException("Value 'AccessArgs.HomeDirectoryMappings' is not present");
            }
        }

        /// <summary>
        /// The type of landing directory (folder) you mapped for your users' home directory. Valid values are `PATH` and `LOGICAL`.
        /// </summary>
        [PolicyResourceProperty("homeDirectoryType", "_mUnknown_HomeDirectoryType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HomeDirectoryType;
        private bool _mUnknown_HomeDirectoryType;
        public string? HomeDirectoryType
        {
            get
            {
                if (!_mUnknown_HomeDirectoryType) return _mValue_HomeDirectoryType;
                throw new UndeferrableValueException("Value 'AccessArgs.HomeDirectoryType' is not present");
            }
        }

        /// <summary>
        /// An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include `${Transfer:UserName}`, `${Transfer:HomeDirectory}`, and `${Transfer:HomeBucket}`. These are evaluated on-the-fly when navigating the bucket.
        /// </summary>
        [PolicyResourceProperty("policy", "_mUnknown_Policy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Policy;
        private bool _mUnknown_Policy;
        public string? Policy
        {
            get
            {
                if (!_mUnknown_Policy) return _mValue_Policy;
                throw new UndeferrableValueException("Value 'AccessArgs.Policy' is not present");
            }
        }

        /// <summary>
        /// Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. See Posix Profile below.
        /// </summary>
        [PolicyResourceProperty("posixProfile", "_mUnknown_PosixProfile")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.AccessPosixProfileArgs? _mValue_PosixProfile;
        private bool _mUnknown_PosixProfile;
        public Inputs.AccessPosixProfileArgs? PosixProfile
        {
            get
            {
                if (!_mUnknown_PosixProfile) return _mValue_PosixProfile;
                throw new UndeferrableValueException("Value 'AccessArgs.PosixProfile' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of an IAM role that allows the service to controls your userâ€™s access to your Amazon S3 bucket.
        /// </summary>
        [PolicyResourceProperty("role", "_mUnknown_Role")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Role;
        private bool _mUnknown_Role;
        public string? Role
        {
            get
            {
                if (!_mUnknown_Role) return _mValue_Role;
                throw new UndeferrableValueException("Value 'AccessArgs.Role' is not present");
            }
        }

        /// <summary>
        /// The Server ID of the Transfer Server (e.g., `s-12345678`)
        /// </summary>
        [PolicyResourceProperty("serverId", "_mUnknown_ServerId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServerId;
        private bool _mUnknown_ServerId;
        public string? ServerId
        {
            get
            {
                if (!_mUnknown_ServerId) return _mValue_ServerId;
                throw new UndeferrableValueException("Value 'AccessArgs.ServerId' is not present");
            }
        }
    }
}
