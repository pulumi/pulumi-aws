// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Transfer.Inputs
{
    public sealed class ServerProtocolDetailsArgs
    {
        /// <summary>
        /// Indicates the transport method for the AS2 messages. Currently, only `HTTP` is supported.
        /// </summary>
        [PolicyResourceProperty("as2Transports", "_mUnknown_As2Transports")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_As2Transports;
        private bool _mUnknown_As2Transports;
        public List<string>? As2Transports
        {
            get
            {
                if (!_mUnknown_As2Transports) return _mValue_As2Transports;
                throw new UndeferrableValueException("Value 'ServerProtocolDetailsArgs.As2Transports' is not present");
            }
        }

        /// <summary>
        /// Indicates passive mode, for FTP and FTPS protocols. Enter a single IPv4 address, such as the public IP address of a firewall, router, or load balancer.
        /// </summary>
        [PolicyResourceProperty("passiveIp", "_mUnknown_PassiveIp")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PassiveIp;
        private bool _mUnknown_PassiveIp;
        public string? PassiveIp
        {
            get
            {
                if (!_mUnknown_PassiveIp) return _mValue_PassiveIp;
                throw new UndeferrableValueException("Value 'ServerProtocolDetailsArgs.PassiveIp' is not present");
            }
        }

        /// <summary>
        /// Use to ignore the error that is generated when the client attempts to use `SETSTAT` on a file you are uploading to an S3 bucket. Valid values: `DEFAULT`, `ENABLE_NO_OP`.
        /// </summary>
        [PolicyResourceProperty("setStatOption", "_mUnknown_SetStatOption")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SetStatOption;
        private bool _mUnknown_SetStatOption;
        public string? SetStatOption
        {
            get
            {
                if (!_mUnknown_SetStatOption) return _mValue_SetStatOption;
                throw new UndeferrableValueException("Value 'ServerProtocolDetailsArgs.SetStatOption' is not present");
            }
        }

        /// <summary>
        /// A property used with Transfer Family servers that use the FTPS protocol. Provides a mechanism to resume or share a negotiated secret key between the control and data connection for an FTPS session. Valid values: `DISABLED`, `ENABLED`, `ENFORCED`.
        /// </summary>
        [PolicyResourceProperty("tlsSessionResumptionMode", "_mUnknown_TlsSessionResumptionMode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TlsSessionResumptionMode;
        private bool _mUnknown_TlsSessionResumptionMode;
        public string? TlsSessionResumptionMode
        {
            get
            {
                if (!_mUnknown_TlsSessionResumptionMode) return _mValue_TlsSessionResumptionMode;
                throw new UndeferrableValueException("Value 'ServerProtocolDetailsArgs.TlsSessionResumptionMode' is not present");
            }
        }
    }
}
