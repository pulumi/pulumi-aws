// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Transfer
{
    [PolicyResourceType("aws:transfer/agreement:Agreement")]
    public sealed class Agreement : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
        /// </summary>
        [Input("accessRole")]
        public string? AccessRole;

        /// <summary>
        /// The unique identifier for the AS2 agreement.
        /// </summary>
        [Input("agreementId")]
        public string? AgreementId;

        /// <summary>
        /// The ARN of the agreement.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The landing directory for the files transferred by using the AS2 protocol.
        /// </summary>
        [Input("baseDirectory")]
        public string? BaseDirectory;

        /// <summary>
        /// The Optional description of the transdfer.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// The unique identifier for the AS2 local profile.
        /// </summary>
        [Input("localProfileId")]
        public string? LocalProfileId;

        /// <summary>
        /// The unique identifier for the AS2 partner profile.
        /// </summary>
        [Input("partnerProfileId")]
        public string? PartnerProfileId;

        /// <summary>
        /// The unique server identifier for the server instance. This is the specific server the agreement uses.
        /// </summary>
        [Input("serverId")]
        public string? ServerId;

        [Input("status")]
        public string? Status;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
