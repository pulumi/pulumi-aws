// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Transfer
{
    [PolicyResourceType("aws:transfer/certificate:Certificate")]
    public sealed class Certificate : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// An date when the certificate becomes active
        /// </summary>
        [Input("activeDate")]
        public string? ActiveDate;

        /// <summary>
        /// The ARN of the certificate
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The valid certificate file required for the transfer.
        /// </summary>
        [Input("certificate")]
        public string? CertificateFile;

        /// <summary>
        /// The optional list of certificate that make up the chain for the certificate that is being imported.
        /// </summary>
        [Input("certificateChain")]
        public string? CertificateChain;

        /// <summary>
        /// The unique identifier for the AS2 certificate
        /// </summary>
        [Input("certificateId")]
        public string? CertificateId;

        /// <summary>
        /// A short description that helps identify the certificate.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// An date when the certificate becomes inactive
        /// </summary>
        [Input("inactiveDate")]
        public string? InactiveDate;

        /// <summary>
        /// The private key associated with the certificate being imported.
        /// </summary>
        [Input("privateKey")]
        public string? PrivateKey;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
        /// </summary>
        [Input("usage")]
        public string? Usage;
    }
}
