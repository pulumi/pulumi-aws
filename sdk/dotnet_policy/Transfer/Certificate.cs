// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Transfer
{
    [PolicyResourceType("aws:transfer/certificate:Certificate")]
    public sealed class Certificate : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// An date when the certificate becomes active
        /// </summary>
        [PolicyResourceProperty("activeDate", "_mUnknown_ActiveDate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ActiveDate;
        private bool _mUnknown_ActiveDate;
        public string? ActiveDate
        {
            get
            {
                if (!_mUnknown_ActiveDate) return _mValue_ActiveDate;
                throw new UndeferrableValueException("Value 'Certificate.ActiveDate' is not present");
            }
        }

        /// <summary>
        /// The ARN of the certificate
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Certificate.Arn' is not present");
            }
        }

        /// <summary>
        /// The valid certificate file required for the transfer.
        /// </summary>
        [PolicyResourceProperty("certificate", "_mUnknown_CertificateFile")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateFile;
        private bool _mUnknown_CertificateFile;
        public string? CertificateFile
        {
            get
            {
                if (!_mUnknown_CertificateFile) return _mValue_CertificateFile;
                throw new UndeferrableValueException("Value 'Certificate.CertificateFile' is not present");
            }
        }

        /// <summary>
        /// The optional list of certificate that make up the chain for the certificate that is being imported.
        /// </summary>
        [PolicyResourceProperty("certificateChain", "_mUnknown_CertificateChain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateChain;
        private bool _mUnknown_CertificateChain;
        public string? CertificateChain
        {
            get
            {
                if (!_mUnknown_CertificateChain) return _mValue_CertificateChain;
                throw new UndeferrableValueException("Value 'Certificate.CertificateChain' is not present");
            }
        }

        /// <summary>
        /// The unique identifier for the AS2 certificate
        /// </summary>
        [PolicyResourceProperty("certificateId", "_mUnknown_CertificateId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateId;
        private bool _mUnknown_CertificateId;
        public string? CertificateId
        {
            get
            {
                if (!_mUnknown_CertificateId) return _mValue_CertificateId;
                throw new UndeferrableValueException("Value 'Certificate.CertificateId' is not present");
            }
        }

        /// <summary>
        /// A short description that helps identify the certificate.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'Certificate.Description' is not present");
            }
        }

        /// <summary>
        /// An date when the certificate becomes inactive
        /// </summary>
        [PolicyResourceProperty("inactiveDate", "_mUnknown_InactiveDate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InactiveDate;
        private bool _mUnknown_InactiveDate;
        public string? InactiveDate
        {
            get
            {
                if (!_mUnknown_InactiveDate) return _mValue_InactiveDate;
                throw new UndeferrableValueException("Value 'Certificate.InactiveDate' is not present");
            }
        }

        /// <summary>
        /// The private key associated with the certificate being imported.
        /// </summary>
        [PolicyResourceProperty("privateKey", "_mUnknown_PrivateKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrivateKey;
        private bool _mUnknown_PrivateKey;
        public string? PrivateKey
        {
            get
            {
                if (!_mUnknown_PrivateKey) return _mValue_PrivateKey;
                throw new UndeferrableValueException("Value 'Certificate.PrivateKey' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Certificate.Tags' is not present");
            }
        }

        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Certificate.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
        /// </summary>
        [PolicyResourceProperty("usage", "_mUnknown_Usage")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Usage;
        private bool _mUnknown_Usage;
        public string? Usage
        {
            get
            {
                if (!_mUnknown_Usage) return _mValue_Usage;
                throw new UndeferrableValueException("Value 'Certificate.Usage' is not present");
            }
        }
    }

    [PolicyResourceType("aws:transfer/certificate:Certificate")]
    public sealed class CertificateArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The valid certificate file required for the transfer.
        /// </summary>
        [PolicyResourceProperty("certificate", "_mUnknown_CertificateFile")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateFile;
        private bool _mUnknown_CertificateFile;
        public string? CertificateFile
        {
            get
            {
                if (!_mUnknown_CertificateFile) return _mValue_CertificateFile;
                throw new UndeferrableValueException("Value 'CertificateArgs.CertificateFile' is not present");
            }
        }

        /// <summary>
        /// The optional list of certificate that make up the chain for the certificate that is being imported.
        /// </summary>
        [PolicyResourceProperty("certificateChain", "_mUnknown_CertificateChain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateChain;
        private bool _mUnknown_CertificateChain;
        public string? CertificateChain
        {
            get
            {
                if (!_mUnknown_CertificateChain) return _mValue_CertificateChain;
                throw new UndeferrableValueException("Value 'CertificateArgs.CertificateChain' is not present");
            }
        }

        /// <summary>
        /// A short description that helps identify the certificate.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'CertificateArgs.Description' is not present");
            }
        }

        /// <summary>
        /// The private key associated with the certificate being imported.
        /// </summary>
        [PolicyResourceProperty("privateKey", "_mUnknown_PrivateKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrivateKey;
        private bool _mUnknown_PrivateKey;
        public string? PrivateKey
        {
            get
            {
                if (!_mUnknown_PrivateKey) return _mValue_PrivateKey;
                throw new UndeferrableValueException("Value 'CertificateArgs.PrivateKey' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'CertificateArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
        /// </summary>
        [PolicyResourceProperty("usage", "_mUnknown_Usage")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Usage;
        private bool _mUnknown_Usage;
        public string? Usage
        {
            get
            {
                if (!_mUnknown_Usage) return _mValue_Usage;
                throw new UndeferrableValueException("Value 'CertificateArgs.Usage' is not present");
            }
        }
    }
}
