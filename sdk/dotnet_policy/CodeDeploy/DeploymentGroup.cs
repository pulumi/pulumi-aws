// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CodeDeploy
{
    [PolicyResourceType("aws:codedeploy/deploymentGroup:DeploymentGroup")]
    public sealed class DeploymentGroup : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Configuration block of alarms associated with the deployment group (documented below).
        /// </summary>
        [Input("alarmConfiguration")]
        public DeploymentGroupAlarmConfiguration? AlarmConfiguration;

        /// <summary>
        /// The name of the application.
        /// </summary>
        [Input("appName")]
        public string? AppName;

        /// <summary>
        /// The ARN of the CodeDeploy deployment group.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
        /// </summary>
        [Input("autoRollbackConfiguration")]
        public DeploymentGroupAutoRollbackConfiguration? AutoRollbackConfiguration;

        /// <summary>
        /// Autoscaling groups associated with the deployment group.
        /// </summary>
        [Input("autoscalingGroups")]
        public List<string>? AutoscalingGroups;

        /// <summary>
        /// Configuration block of the blue/green deployment options for a deployment group (documented below).
        /// </summary>
        [Input("blueGreenDeploymentConfig")]
        public DeploymentGroupBlueGreenDeploymentConfig? BlueGreenDeploymentConfig;

        /// <summary>
        /// The destination platform type for the deployment.
        /// </summary>
        [Input("computePlatform")]
        public string? ComputePlatform;

        /// <summary>
        /// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
        /// </summary>
        [Input("deploymentConfigName")]
        public string? DeploymentConfigName;

        /// <summary>
        /// The ID of the CodeDeploy deployment group.
        /// </summary>
        [Input("deploymentGroupId")]
        public string? DeploymentGroupId;

        /// <summary>
        /// The name of the deployment group.
        /// </summary>
        [Input("deploymentGroupName")]
        public string? DeploymentGroupName;

        /// <summary>
        /// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
        /// </summary>
        [Input("deploymentStyle")]
        public DeploymentGroupDeploymentStyle? DeploymentStyle;

        /// <summary>
        /// Tag filters associated with the deployment group. See the AWS docs for details.
        /// </summary>
        [Input("ec2TagFilters")]
        public List<DeploymentGroupEc2TagFilter>? Ec2TagFilters;

        /// <summary>
        /// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
        /// </summary>
        [Input("ec2TagSets")]
        public List<DeploymentGroupEc2TagSet>? Ec2TagSets;

        /// <summary>
        /// Configuration block(s) of the ECS services for a deployment group (documented below).
        /// </summary>
        [Input("ecsService")]
        public DeploymentGroupEcsService? EcsService;

        /// <summary>
        /// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
        /// </summary>
        [Input("loadBalancerInfo")]
        public DeploymentGroupLoadBalancerInfo? LoadBalancerInfo;

        /// <summary>
        /// On premise tag filters associated with the group. See the AWS docs for details.
        /// </summary>
        [Input("onPremisesInstanceTagFilters")]
        public List<DeploymentGroupOnPremisesInstanceTagFilter>? OnPremisesInstanceTagFilters;

        /// <summary>
        /// Configuration block of Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. Valid values are `UPDATE` and `IGNORE`. Defaults to `UPDATE`.
        /// </summary>
        [Input("outdatedInstancesStrategy")]
        public string? OutdatedInstancesStrategy;

        /// <summary>
        /// The service role ARN that allows deployments.
        /// </summary>
        [Input("serviceRoleArn")]
        public string? ServiceRoleArn;

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Indicates whether the deployment group was configured to have CodeDeploy install a termination hook into an Auto Scaling group.
        /// </summary>
        [Input("terminationHookEnabled")]
        public bool? TerminationHookEnabled;

        /// <summary>
        /// Configuration block(s) of the triggers for the deployment group (documented below).
        /// </summary>
        [Input("triggerConfigurations")]
        public List<DeploymentGroupTriggerConfiguration>? TriggerConfigurations;
    }
}
