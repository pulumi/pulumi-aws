// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CodeDeploy
{
    [PolicyResourceType("aws:codedeploy/application:Application")]
    public sealed class Application : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The application ID.
        /// </summary>
        [Input("applicationId")]
        public string? ApplicationId;

        /// <summary>
        /// The ARN of the CodeDeploy application.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
        /// </summary>
        [Input("computePlatform")]
        public string? ComputePlatform;

        /// <summary>
        /// The name for a connection to a GitHub account.
        /// </summary>
        [Input("githubAccountName")]
        public string? GithubAccountName;

        /// <summary>
        /// Whether the user has authenticated with GitHub for the specified application.
        /// </summary>
        [Input("linkedToGithub")]
        public bool? LinkedToGithub;

        /// <summary>
        /// The name of the application.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
