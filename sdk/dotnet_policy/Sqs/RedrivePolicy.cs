// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Sqs
{
    [PolicyResourceType("aws:sqs/redrivePolicy:RedrivePolicy")]
    public sealed class RedrivePolicy : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The URL of the SQS Queue to which to attach the policy
        /// </summary>
        [PolicyResourceProperty("queueUrl", "_mUnknown_QueueUrl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_QueueUrl;
        private bool _mUnknown_QueueUrl;
        public string? QueueUrl
        {
            get
            {
                if (!_mUnknown_QueueUrl) return _mValue_QueueUrl;
                throw new UndeferrableValueException("Value 'RedrivePolicy.QueueUrl' is not present");
            }
        }

        /// <summary>
        /// The JSON redrive policy for the SQS queue. Accepts two key/val pairs: `deadLetterTargetArn` and `maxReceiveCount`. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
        /// </summary>
        [PolicyResourceProperty("redrivePolicy", "_mUnknown_RedrivePolicyName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RedrivePolicyName;
        private bool _mUnknown_RedrivePolicyName;
        public string? RedrivePolicyName
        {
            get
            {
                if (!_mUnknown_RedrivePolicyName) return _mValue_RedrivePolicyName;
                throw new UndeferrableValueException("Value 'RedrivePolicy.RedrivePolicyName' is not present");
            }
        }
    }

    [PolicyResourceType("aws:sqs/redrivePolicy:RedrivePolicy")]
    public sealed class RedrivePolicyArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The URL of the SQS Queue to which to attach the policy
        /// </summary>
        [PolicyResourceProperty("queueUrl", "_mUnknown_QueueUrl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_QueueUrl;
        private bool _mUnknown_QueueUrl;
        public string? QueueUrl
        {
            get
            {
                if (!_mUnknown_QueueUrl) return _mValue_QueueUrl;
                throw new UndeferrableValueException("Value 'RedrivePolicyArgs.QueueUrl' is not present");
            }
        }

        /// <summary>
        /// The JSON redrive policy for the SQS queue. Accepts two key/val pairs: `deadLetterTargetArn` and `maxReceiveCount`. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).
        /// </summary>
        [PolicyResourceProperty("redrivePolicy", "_mUnknown_RedrivePolicyName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RedrivePolicyName;
        private bool _mUnknown_RedrivePolicyName;
        public string? RedrivePolicyName
        {
            get
            {
                if (!_mUnknown_RedrivePolicyName) return _mValue_RedrivePolicyName;
                throw new UndeferrableValueException("Value 'RedrivePolicyArgs.RedrivePolicyName' is not present");
            }
        }
    }
}
