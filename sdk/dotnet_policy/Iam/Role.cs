// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Iam
{
    [PolicyResourceType("aws:iam/role:Role")]
    public sealed class Role : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Amazon Resource Name (ARN) specifying the role.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Role.Arn' is not present");
            }
        }

        /// <summary>
        /// Policy that grants an entity permission to assume the role.
        /// 
        /// &gt; **NOTE:** The `assume_role_policy` is very similar to but slightly different than a standard IAM policy and cannot use an `aws.iam.Policy` resource.  However, it _can_ use an `aws.iam.getPolicyDocument` data source. See the example above of how this works.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("assumeRolePolicy", "_mUnknown_AssumeRolePolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AssumeRolePolicy;
        private bool _mUnknown_AssumeRolePolicy;
        public string? AssumeRolePolicy
        {
            get
            {
                if (!_mUnknown_AssumeRolePolicy) return _mValue_AssumeRolePolicy;
                throw new UndeferrableValueException("Value 'Role.AssumeRolePolicy' is not present");
            }
        }

        /// <summary>
        /// Creation date of the IAM role.
        /// </summary>
        [PolicyResourceProperty("createDate", "_mUnknown_CreateDate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CreateDate;
        private bool _mUnknown_CreateDate;
        public string? CreateDate
        {
            get
            {
                if (!_mUnknown_CreateDate) return _mValue_CreateDate;
                throw new UndeferrableValueException("Value 'Role.CreateDate' is not present");
            }
        }

        /// <summary>
        /// Description of the role.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'Role.Description' is not present");
            }
        }

        /// <summary>
        /// Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("forceDetachPolicies", "_mUnknown_ForceDetachPolicies")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ForceDetachPolicies;
        private bool _mUnknown_ForceDetachPolicies;
        public bool? ForceDetachPolicies
        {
            get
            {
                if (!_mUnknown_ForceDetachPolicies) return _mValue_ForceDetachPolicies;
                throw new UndeferrableValueException("Value 'Role.ForceDetachPolicies' is not present");
            }
        }

        /// <summary>
        /// Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, Pulumi will not manage any inline policies in this resource. Configuring one empty block (i.e., `inline_policy {}`) will cause Pulumi to remove _all_ inline policies added out of band on `apply`.
        /// </summary>
        [PolicyResourceProperty("inlinePolicies", "_mUnknown_InlinePolicies")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.RoleInlinePolicy>? _mValue_InlinePolicies;
        private bool _mUnknown_InlinePolicies;
        public List<Outputs.RoleInlinePolicy>? InlinePolicies
        {
            get
            {
                if (!_mUnknown_InlinePolicies) return _mValue_InlinePolicies;
                throw new UndeferrableValueException("Value 'Role.InlinePolicies' is not present");
            }
        }

        /// <summary>
        /// Set of exclusive IAM managed policy ARNs to attach to the IAM role. If this attribute is not configured, Pulumi will ignore policy attachments to this resource. When configured, Pulumi will align the role's managed policy attachments with this set by attaching or detaching managed policies. Configuring an empty set (i.e., `managed_policy_arns = []`) will cause Pulumi to remove _all_ managed policy attachments.
        /// </summary>
        [PolicyResourceProperty("managedPolicyArns", "_mUnknown_ManagedPolicyArns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_ManagedPolicyArns;
        private bool _mUnknown_ManagedPolicyArns;
        public List<string>? ManagedPolicyArns
        {
            get
            {
                if (!_mUnknown_ManagedPolicyArns) return _mValue_ManagedPolicyArns;
                throw new UndeferrableValueException("Value 'Role.ManagedPolicyArns' is not present");
            }
        }

        /// <summary>
        /// Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
        /// </summary>
        [PolicyResourceProperty("maxSessionDuration", "_mUnknown_MaxSessionDuration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxSessionDuration;
        private bool _mUnknown_MaxSessionDuration;
        public int? MaxSessionDuration
        {
            get
            {
                if (!_mUnknown_MaxSessionDuration) return _mValue_MaxSessionDuration;
                throw new UndeferrableValueException("Value 'Role.MaxSessionDuration' is not present");
            }
        }

        /// <summary>
        /// Friendly name of the role. If omitted, the provider will assign a random, unique name. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Role.Name' is not present");
            }
        }

        /// <summary>
        /// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [PolicyResourceProperty("namePrefix", "_mUnknown_NamePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamePrefix;
        private bool _mUnknown_NamePrefix;
        public string? NamePrefix
        {
            get
            {
                if (!_mUnknown_NamePrefix) return _mValue_NamePrefix;
                throw new UndeferrableValueException("Value 'Role.NamePrefix' is not present");
            }
        }

        /// <summary>
        /// Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
        /// </summary>
        [PolicyResourceProperty("path", "_mUnknown_Path")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Path;
        private bool _mUnknown_Path;
        public string? Path
        {
            get
            {
                if (!_mUnknown_Path) return _mValue_Path;
                throw new UndeferrableValueException("Value 'Role.Path' is not present");
            }
        }

        /// <summary>
        /// ARN of the policy that is used to set the permissions boundary for the role.
        /// </summary>
        [PolicyResourceProperty("permissionsBoundary", "_mUnknown_PermissionsBoundary")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PermissionsBoundary;
        private bool _mUnknown_PermissionsBoundary;
        public string? PermissionsBoundary
        {
            get
            {
                if (!_mUnknown_PermissionsBoundary) return _mValue_PermissionsBoundary;
                throw new UndeferrableValueException("Value 'Role.PermissionsBoundary' is not present");
            }
        }

        /// <summary>
        /// Key-value mapping of tags for the IAM role. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Role.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Role.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Stable and unique string identifying the role.
        /// </summary>
        [PolicyResourceProperty("uniqueId", "_mUnknown_UniqueId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UniqueId;
        private bool _mUnknown_UniqueId;
        public string? UniqueId
        {
            get
            {
                if (!_mUnknown_UniqueId) return _mValue_UniqueId;
                throw new UndeferrableValueException("Value 'Role.UniqueId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:iam/role:Role")]
    public sealed class RoleArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Policy that grants an entity permission to assume the role.
        /// 
        /// &gt; **NOTE:** The `assume_role_policy` is very similar to but slightly different than a standard IAM policy and cannot use an `aws.iam.Policy` resource.  However, it _can_ use an `aws.iam.getPolicyDocument` data source. See the example above of how this works.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("assumeRolePolicy", "_mUnknown_AssumeRolePolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AssumeRolePolicy;
        private bool _mUnknown_AssumeRolePolicy;
        public string? AssumeRolePolicy
        {
            get
            {
                if (!_mUnknown_AssumeRolePolicy) return _mValue_AssumeRolePolicy;
                throw new UndeferrableValueException("Value 'RoleArgs.AssumeRolePolicy' is not present");
            }
        }

        /// <summary>
        /// Description of the role.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'RoleArgs.Description' is not present");
            }
        }

        /// <summary>
        /// Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("forceDetachPolicies", "_mUnknown_ForceDetachPolicies")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ForceDetachPolicies;
        private bool _mUnknown_ForceDetachPolicies;
        public bool? ForceDetachPolicies
        {
            get
            {
                if (!_mUnknown_ForceDetachPolicies) return _mValue_ForceDetachPolicies;
                throw new UndeferrableValueException("Value 'RoleArgs.ForceDetachPolicies' is not present");
            }
        }

        /// <summary>
        /// Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, Pulumi will not manage any inline policies in this resource. Configuring one empty block (i.e., `inline_policy {}`) will cause Pulumi to remove _all_ inline policies added out of band on `apply`.
        /// </summary>
        [PolicyResourceProperty("inlinePolicies", "_mUnknown_InlinePolicies")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.RoleInlinePolicyArgs>? _mValue_InlinePolicies;
        private bool _mUnknown_InlinePolicies;
        public List<Inputs.RoleInlinePolicyArgs>? InlinePolicies
        {
            get
            {
                if (!_mUnknown_InlinePolicies) return _mValue_InlinePolicies;
                throw new UndeferrableValueException("Value 'RoleArgs.InlinePolicies' is not present");
            }
        }

        /// <summary>
        /// Set of exclusive IAM managed policy ARNs to attach to the IAM role. If this attribute is not configured, Pulumi will ignore policy attachments to this resource. When configured, Pulumi will align the role's managed policy attachments with this set by attaching or detaching managed policies. Configuring an empty set (i.e., `managed_policy_arns = []`) will cause Pulumi to remove _all_ managed policy attachments.
        /// </summary>
        [PolicyResourceProperty("managedPolicyArns", "_mUnknown_ManagedPolicyArns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_ManagedPolicyArns;
        private bool _mUnknown_ManagedPolicyArns;
        public List<string>? ManagedPolicyArns
        {
            get
            {
                if (!_mUnknown_ManagedPolicyArns) return _mValue_ManagedPolicyArns;
                throw new UndeferrableValueException("Value 'RoleArgs.ManagedPolicyArns' is not present");
            }
        }

        /// <summary>
        /// Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
        /// </summary>
        [PolicyResourceProperty("maxSessionDuration", "_mUnknown_MaxSessionDuration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxSessionDuration;
        private bool _mUnknown_MaxSessionDuration;
        public int? MaxSessionDuration
        {
            get
            {
                if (!_mUnknown_MaxSessionDuration) return _mValue_MaxSessionDuration;
                throw new UndeferrableValueException("Value 'RoleArgs.MaxSessionDuration' is not present");
            }
        }

        /// <summary>
        /// Friendly name of the role. If omitted, the provider will assign a random, unique name. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'RoleArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [PolicyResourceProperty("namePrefix", "_mUnknown_NamePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamePrefix;
        private bool _mUnknown_NamePrefix;
        public string? NamePrefix
        {
            get
            {
                if (!_mUnknown_NamePrefix) return _mValue_NamePrefix;
                throw new UndeferrableValueException("Value 'RoleArgs.NamePrefix' is not present");
            }
        }

        /// <summary>
        /// Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
        /// </summary>
        [PolicyResourceProperty("path", "_mUnknown_Path")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Path;
        private bool _mUnknown_Path;
        public string? Path
        {
            get
            {
                if (!_mUnknown_Path) return _mValue_Path;
                throw new UndeferrableValueException("Value 'RoleArgs.Path' is not present");
            }
        }

        /// <summary>
        /// ARN of the policy that is used to set the permissions boundary for the role.
        /// </summary>
        [PolicyResourceProperty("permissionsBoundary", "_mUnknown_PermissionsBoundary")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PermissionsBoundary;
        private bool _mUnknown_PermissionsBoundary;
        public string? PermissionsBoundary
        {
            get
            {
                if (!_mUnknown_PermissionsBoundary) return _mValue_PermissionsBoundary;
                throw new UndeferrableValueException("Value 'RoleArgs.PermissionsBoundary' is not present");
            }
        }

        /// <summary>
        /// Key-value mapping of tags for the IAM role. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'RoleArgs.Tags' is not present");
            }
        }
    }
}
