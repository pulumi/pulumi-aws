// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Iam
{
    [PolicyResourceType("aws:iam/group:Group")]
    public sealed class Group : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN assigned by AWS for this group.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Group.Arn' is not present");
            }
        }

        /// <summary>
        /// The group's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. Group names are not distinguished by case. For example, you cannot create groups named both "ADMINS" and "admins".
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Group.Name' is not present");
            }
        }

        /// <summary>
        /// Path in which to create the group.
        /// </summary>
        [PolicyResourceProperty("path", "_mUnknown_Path")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Path;
        private bool _mUnknown_Path;
        public string? Path
        {
            get
            {
                if (!_mUnknown_Path) return _mValue_Path;
                throw new UndeferrableValueException("Value 'Group.Path' is not present");
            }
        }

        /// <summary>
        /// The [unique ID][1] assigned by AWS.
        /// </summary>
        [PolicyResourceProperty("uniqueId", "_mUnknown_UniqueId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UniqueId;
        private bool _mUnknown_UniqueId;
        public string? UniqueId
        {
            get
            {
                if (!_mUnknown_UniqueId) return _mValue_UniqueId;
                throw new UndeferrableValueException("Value 'Group.UniqueId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:iam/group:Group")]
    public sealed class GroupArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The group's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. Group names are not distinguished by case. For example, you cannot create groups named both "ADMINS" and "admins".
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'GroupArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Path in which to create the group.
        /// </summary>
        [PolicyResourceProperty("path", "_mUnknown_Path")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Path;
        private bool _mUnknown_Path;
        public string? Path
        {
            get
            {
                if (!_mUnknown_Path) return _mValue_Path;
                throw new UndeferrableValueException("Value 'GroupArgs.Path' is not present");
            }
        }
    }
}
