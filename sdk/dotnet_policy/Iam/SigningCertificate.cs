// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Iam
{
    [PolicyResourceType("aws:iam/signingCertificate:SigningCertificate")]
    public sealed class SigningCertificate : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The contents of the signing certificate in PEM-encoded format.
        /// </summary>
        [PolicyResourceProperty("certificateBody", "_mUnknown_CertificateBody")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateBody;
        private bool _mUnknown_CertificateBody;
        public string? CertificateBody
        {
            get
            {
                if (!_mUnknown_CertificateBody) return _mValue_CertificateBody;
                throw new UndeferrableValueException("Value 'SigningCertificate.CertificateBody' is not present");
            }
        }

        /// <summary>
        /// The ID for the signing certificate.
        /// </summary>
        [PolicyResourceProperty("certificateId", "_mUnknown_CertificateId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateId;
        private bool _mUnknown_CertificateId;
        public string? CertificateId
        {
            get
            {
                if (!_mUnknown_CertificateId) return _mValue_CertificateId;
                throw new UndeferrableValueException("Value 'SigningCertificate.CertificateId' is not present");
            }
        }

        /// <summary>
        /// The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
        /// </summary>
        [PolicyResourceProperty("status", "_mUnknown_Status")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Status;
        private bool _mUnknown_Status;
        public string? Status
        {
            get
            {
                if (!_mUnknown_Status) return _mValue_Status;
                throw new UndeferrableValueException("Value 'SigningCertificate.Status' is not present");
            }
        }

        /// <summary>
        /// The name of the user the signing certificate is for.
        /// </summary>
        [PolicyResourceProperty("userName", "_mUnknown_UserName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserName;
        private bool _mUnknown_UserName;
        public string? UserName
        {
            get
            {
                if (!_mUnknown_UserName) return _mValue_UserName;
                throw new UndeferrableValueException("Value 'SigningCertificate.UserName' is not present");
            }
        }
    }

    [PolicyResourceType("aws:iam/signingCertificate:SigningCertificate")]
    public sealed class SigningCertificateArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The contents of the signing certificate in PEM-encoded format.
        /// </summary>
        [PolicyResourceProperty("certificateBody", "_mUnknown_CertificateBody")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateBody;
        private bool _mUnknown_CertificateBody;
        public string? CertificateBody
        {
            get
            {
                if (!_mUnknown_CertificateBody) return _mValue_CertificateBody;
                throw new UndeferrableValueException("Value 'SigningCertificateArgs.CertificateBody' is not present");
            }
        }

        /// <summary>
        /// The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
        /// </summary>
        [PolicyResourceProperty("status", "_mUnknown_Status")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Status;
        private bool _mUnknown_Status;
        public string? Status
        {
            get
            {
                if (!_mUnknown_Status) return _mValue_Status;
                throw new UndeferrableValueException("Value 'SigningCertificateArgs.Status' is not present");
            }
        }

        /// <summary>
        /// The name of the user the signing certificate is for.
        /// </summary>
        [PolicyResourceProperty("userName", "_mUnknown_UserName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserName;
        private bool _mUnknown_UserName;
        public string? UserName
        {
            get
            {
                if (!_mUnknown_UserName) return _mValue_UserName;
                throw new UndeferrableValueException("Value 'SigningCertificateArgs.UserName' is not present");
            }
        }
    }
}
