// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Iam
{
    [PolicyResourceType("aws:iam/serviceSpecificCredential:ServiceSpecificCredential")]
    public sealed class ServiceSpecificCredential : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
        /// </summary>
        [PolicyResourceProperty("serviceName", "_mUnknown_ServiceName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServiceName;
        private bool _mUnknown_ServiceName;
        public string? ServiceName
        {
            get
            {
                if (!_mUnknown_ServiceName) return _mValue_ServiceName;
                throw new UndeferrableValueException("Value 'ServiceSpecificCredential.ServiceName' is not present");
            }
        }

        /// <summary>
        /// The generated password for the service-specific credential.
        /// </summary>
        [PolicyResourceProperty("servicePassword", "_mUnknown_ServicePassword")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServicePassword;
        private bool _mUnknown_ServicePassword;
        public string? ServicePassword
        {
            get
            {
                if (!_mUnknown_ServicePassword) return _mValue_ServicePassword;
                throw new UndeferrableValueException("Value 'ServiceSpecificCredential.ServicePassword' is not present");
            }
        }

        /// <summary>
        /// The unique identifier for the service-specific credential.
        /// </summary>
        [PolicyResourceProperty("serviceSpecificCredentialId", "_mUnknown_ServiceSpecificCredentialId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServiceSpecificCredentialId;
        private bool _mUnknown_ServiceSpecificCredentialId;
        public string? ServiceSpecificCredentialId
        {
            get
            {
                if (!_mUnknown_ServiceSpecificCredentialId) return _mValue_ServiceSpecificCredentialId;
                throw new UndeferrableValueException("Value 'ServiceSpecificCredential.ServiceSpecificCredentialId' is not present");
            }
        }

        /// <summary>
        /// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
        /// </summary>
        [PolicyResourceProperty("serviceUserName", "_mUnknown_ServiceUserName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServiceUserName;
        private bool _mUnknown_ServiceUserName;
        public string? ServiceUserName
        {
            get
            {
                if (!_mUnknown_ServiceUserName) return _mValue_ServiceUserName;
                throw new UndeferrableValueException("Value 'ServiceSpecificCredential.ServiceUserName' is not present");
            }
        }

        /// <summary>
        /// The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
        /// </summary>
        [PolicyResourceProperty("status", "_mUnknown_Status")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Status;
        private bool _mUnknown_Status;
        public string? Status
        {
            get
            {
                if (!_mUnknown_Status) return _mValue_Status;
                throw new UndeferrableValueException("Value 'ServiceSpecificCredential.Status' is not present");
            }
        }

        /// <summary>
        /// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
        /// </summary>
        [PolicyResourceProperty("userName", "_mUnknown_UserName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserName;
        private bool _mUnknown_UserName;
        public string? UserName
        {
            get
            {
                if (!_mUnknown_UserName) return _mValue_UserName;
                throw new UndeferrableValueException("Value 'ServiceSpecificCredential.UserName' is not present");
            }
        }
    }

    [PolicyResourceType("aws:iam/serviceSpecificCredential:ServiceSpecificCredential")]
    public sealed class ServiceSpecificCredentialArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
        /// </summary>
        [PolicyResourceProperty("serviceName", "_mUnknown_ServiceName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServiceName;
        private bool _mUnknown_ServiceName;
        public string? ServiceName
        {
            get
            {
                if (!_mUnknown_ServiceName) return _mValue_ServiceName;
                throw new UndeferrableValueException("Value 'ServiceSpecificCredentialArgs.ServiceName' is not present");
            }
        }

        /// <summary>
        /// The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
        /// </summary>
        [PolicyResourceProperty("status", "_mUnknown_Status")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Status;
        private bool _mUnknown_Status;
        public string? Status
        {
            get
            {
                if (!_mUnknown_Status) return _mValue_Status;
                throw new UndeferrableValueException("Value 'ServiceSpecificCredentialArgs.Status' is not present");
            }
        }

        /// <summary>
        /// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
        /// </summary>
        [PolicyResourceProperty("userName", "_mUnknown_UserName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserName;
        private bool _mUnknown_UserName;
        public string? UserName
        {
            get
            {
                if (!_mUnknown_UserName) return _mValue_UserName;
                throw new UndeferrableValueException("Value 'ServiceSpecificCredentialArgs.UserName' is not present");
            }
        }
    }
}
