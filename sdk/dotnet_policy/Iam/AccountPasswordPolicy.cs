// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Iam
{
    [PolicyResourceType("aws:iam/accountPasswordPolicy:AccountPasswordPolicy")]
    public sealed class AccountPasswordPolicy : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Whether to allow users to change their own password
        /// </summary>
        [PolicyResourceProperty("allowUsersToChangePassword", "_mUnknown_AllowUsersToChangePassword")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AllowUsersToChangePassword;
        private bool _mUnknown_AllowUsersToChangePassword;
        public bool? AllowUsersToChangePassword
        {
            get
            {
                if (!_mUnknown_AllowUsersToChangePassword) return _mValue_AllowUsersToChangePassword;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicy.AllowUsersToChangePassword' is not present");
            }
        }

        /// <summary>
        /// Indicates whether passwords in the account expire. Returns `true` if `max_password_age` contains a value greater than `0`. Returns `false` if it is `0` or _not present_.
        /// </summary>
        [PolicyResourceProperty("expirePasswords", "_mUnknown_ExpirePasswords")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ExpirePasswords;
        private bool _mUnknown_ExpirePasswords;
        public bool? ExpirePasswords
        {
            get
            {
                if (!_mUnknown_ExpirePasswords) return _mValue_ExpirePasswords;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicy.ExpirePasswords' is not present");
            }
        }

        /// <summary>
        /// Whether users are prevented from setting a new password after their password has expired (i.e., require administrator reset)
        /// </summary>
        [PolicyResourceProperty("hardExpiry", "_mUnknown_HardExpiry")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_HardExpiry;
        private bool _mUnknown_HardExpiry;
        public bool? HardExpiry
        {
            get
            {
                if (!_mUnknown_HardExpiry) return _mValue_HardExpiry;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicy.HardExpiry' is not present");
            }
        }

        /// <summary>
        /// The number of days that an user password is valid.
        /// </summary>
        [PolicyResourceProperty("maxPasswordAge", "_mUnknown_MaxPasswordAge")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxPasswordAge;
        private bool _mUnknown_MaxPasswordAge;
        public int? MaxPasswordAge
        {
            get
            {
                if (!_mUnknown_MaxPasswordAge) return _mValue_MaxPasswordAge;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicy.MaxPasswordAge' is not present");
            }
        }

        /// <summary>
        /// Minimum length to require for user passwords.
        /// </summary>
        [PolicyResourceProperty("minimumPasswordLength", "_mUnknown_MinimumPasswordLength")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MinimumPasswordLength;
        private bool _mUnknown_MinimumPasswordLength;
        public int? MinimumPasswordLength
        {
            get
            {
                if (!_mUnknown_MinimumPasswordLength) return _mValue_MinimumPasswordLength;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicy.MinimumPasswordLength' is not present");
            }
        }

        /// <summary>
        /// The number of previous passwords that users are prevented from reusing.
        /// </summary>
        [PolicyResourceProperty("passwordReusePrevention", "_mUnknown_PasswordReusePrevention")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_PasswordReusePrevention;
        private bool _mUnknown_PasswordReusePrevention;
        public int? PasswordReusePrevention
        {
            get
            {
                if (!_mUnknown_PasswordReusePrevention) return _mValue_PasswordReusePrevention;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicy.PasswordReusePrevention' is not present");
            }
        }

        /// <summary>
        /// Whether to require lowercase characters for user passwords.
        /// </summary>
        [PolicyResourceProperty("requireLowercaseCharacters", "_mUnknown_RequireLowercaseCharacters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RequireLowercaseCharacters;
        private bool _mUnknown_RequireLowercaseCharacters;
        public bool? RequireLowercaseCharacters
        {
            get
            {
                if (!_mUnknown_RequireLowercaseCharacters) return _mValue_RequireLowercaseCharacters;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicy.RequireLowercaseCharacters' is not present");
            }
        }

        /// <summary>
        /// Whether to require numbers for user passwords.
        /// </summary>
        [PolicyResourceProperty("requireNumbers", "_mUnknown_RequireNumbers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RequireNumbers;
        private bool _mUnknown_RequireNumbers;
        public bool? RequireNumbers
        {
            get
            {
                if (!_mUnknown_RequireNumbers) return _mValue_RequireNumbers;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicy.RequireNumbers' is not present");
            }
        }

        /// <summary>
        /// Whether to require symbols for user passwords.
        /// </summary>
        [PolicyResourceProperty("requireSymbols", "_mUnknown_RequireSymbols")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RequireSymbols;
        private bool _mUnknown_RequireSymbols;
        public bool? RequireSymbols
        {
            get
            {
                if (!_mUnknown_RequireSymbols) return _mValue_RequireSymbols;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicy.RequireSymbols' is not present");
            }
        }

        /// <summary>
        /// Whether to require uppercase characters for user passwords.
        /// </summary>
        [PolicyResourceProperty("requireUppercaseCharacters", "_mUnknown_RequireUppercaseCharacters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RequireUppercaseCharacters;
        private bool _mUnknown_RequireUppercaseCharacters;
        public bool? RequireUppercaseCharacters
        {
            get
            {
                if (!_mUnknown_RequireUppercaseCharacters) return _mValue_RequireUppercaseCharacters;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicy.RequireUppercaseCharacters' is not present");
            }
        }
    }

    [PolicyResourceType("aws:iam/accountPasswordPolicy:AccountPasswordPolicy")]
    public sealed class AccountPasswordPolicyArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Whether to allow users to change their own password
        /// </summary>
        [PolicyResourceProperty("allowUsersToChangePassword", "_mUnknown_AllowUsersToChangePassword")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AllowUsersToChangePassword;
        private bool _mUnknown_AllowUsersToChangePassword;
        public bool? AllowUsersToChangePassword
        {
            get
            {
                if (!_mUnknown_AllowUsersToChangePassword) return _mValue_AllowUsersToChangePassword;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicyArgs.AllowUsersToChangePassword' is not present");
            }
        }

        /// <summary>
        /// Whether users are prevented from setting a new password after their password has expired (i.e., require administrator reset)
        /// </summary>
        [PolicyResourceProperty("hardExpiry", "_mUnknown_HardExpiry")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_HardExpiry;
        private bool _mUnknown_HardExpiry;
        public bool? HardExpiry
        {
            get
            {
                if (!_mUnknown_HardExpiry) return _mValue_HardExpiry;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicyArgs.HardExpiry' is not present");
            }
        }

        /// <summary>
        /// The number of days that an user password is valid.
        /// </summary>
        [PolicyResourceProperty("maxPasswordAge", "_mUnknown_MaxPasswordAge")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxPasswordAge;
        private bool _mUnknown_MaxPasswordAge;
        public int? MaxPasswordAge
        {
            get
            {
                if (!_mUnknown_MaxPasswordAge) return _mValue_MaxPasswordAge;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicyArgs.MaxPasswordAge' is not present");
            }
        }

        /// <summary>
        /// Minimum length to require for user passwords.
        /// </summary>
        [PolicyResourceProperty("minimumPasswordLength", "_mUnknown_MinimumPasswordLength")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MinimumPasswordLength;
        private bool _mUnknown_MinimumPasswordLength;
        public int? MinimumPasswordLength
        {
            get
            {
                if (!_mUnknown_MinimumPasswordLength) return _mValue_MinimumPasswordLength;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicyArgs.MinimumPasswordLength' is not present");
            }
        }

        /// <summary>
        /// The number of previous passwords that users are prevented from reusing.
        /// </summary>
        [PolicyResourceProperty("passwordReusePrevention", "_mUnknown_PasswordReusePrevention")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_PasswordReusePrevention;
        private bool _mUnknown_PasswordReusePrevention;
        public int? PasswordReusePrevention
        {
            get
            {
                if (!_mUnknown_PasswordReusePrevention) return _mValue_PasswordReusePrevention;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicyArgs.PasswordReusePrevention' is not present");
            }
        }

        /// <summary>
        /// Whether to require lowercase characters for user passwords.
        /// </summary>
        [PolicyResourceProperty("requireLowercaseCharacters", "_mUnknown_RequireLowercaseCharacters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RequireLowercaseCharacters;
        private bool _mUnknown_RequireLowercaseCharacters;
        public bool? RequireLowercaseCharacters
        {
            get
            {
                if (!_mUnknown_RequireLowercaseCharacters) return _mValue_RequireLowercaseCharacters;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicyArgs.RequireLowercaseCharacters' is not present");
            }
        }

        /// <summary>
        /// Whether to require numbers for user passwords.
        /// </summary>
        [PolicyResourceProperty("requireNumbers", "_mUnknown_RequireNumbers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RequireNumbers;
        private bool _mUnknown_RequireNumbers;
        public bool? RequireNumbers
        {
            get
            {
                if (!_mUnknown_RequireNumbers) return _mValue_RequireNumbers;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicyArgs.RequireNumbers' is not present");
            }
        }

        /// <summary>
        /// Whether to require symbols for user passwords.
        /// </summary>
        [PolicyResourceProperty("requireSymbols", "_mUnknown_RequireSymbols")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RequireSymbols;
        private bool _mUnknown_RequireSymbols;
        public bool? RequireSymbols
        {
            get
            {
                if (!_mUnknown_RequireSymbols) return _mValue_RequireSymbols;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicyArgs.RequireSymbols' is not present");
            }
        }

        /// <summary>
        /// Whether to require uppercase characters for user passwords.
        /// </summary>
        [PolicyResourceProperty("requireUppercaseCharacters", "_mUnknown_RequireUppercaseCharacters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RequireUppercaseCharacters;
        private bool _mUnknown_RequireUppercaseCharacters;
        public bool? RequireUppercaseCharacters
        {
            get
            {
                if (!_mUnknown_RequireUppercaseCharacters) return _mValue_RequireUppercaseCharacters;
                throw new UndeferrableValueException("Value 'AccountPasswordPolicyArgs.RequireUppercaseCharacters' is not present");
            }
        }
    }
}
