// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.AppFabric
{
    [PolicyResourceType("aws:appfabric/ingestionDestination:IngestionDestination")]
    public sealed class IngestionDestination : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the app bundle to use for the request.
        /// </summary>
        [PolicyResourceProperty("appBundleArn", "_mUnknown_AppBundleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AppBundleArn;
        private bool _mUnknown_AppBundleArn;
        public string? AppBundleArn
        {
            get
            {
                if (!_mUnknown_AppBundleArn) return _mValue_AppBundleArn;
                throw new UndeferrableValueException("Value 'IngestionDestination.AppBundleArn' is not present");
            }
        }

        /// <summary>
        /// ARN of the Ingestion Destination.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'IngestionDestination.Arn' is not present");
            }
        }

        /// <summary>
        /// Contains information about the destination of ingested data.
        /// </summary>
        [PolicyResourceProperty("destinationConfiguration", "_mUnknown_DestinationConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.IngestionDestinationDestinationConfiguration? _mValue_DestinationConfiguration;
        private bool _mUnknown_DestinationConfiguration;
        public Outputs.IngestionDestinationDestinationConfiguration? DestinationConfiguration
        {
            get
            {
                if (!_mUnknown_DestinationConfiguration) return _mValue_DestinationConfiguration;
                throw new UndeferrableValueException("Value 'IngestionDestination.DestinationConfiguration' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the ingestion to use for the request.
        /// </summary>
        [PolicyResourceProperty("ingestionArn", "_mUnknown_IngestionArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IngestionArn;
        private bool _mUnknown_IngestionArn;
        public string? IngestionArn
        {
            get
            {
                if (!_mUnknown_IngestionArn) return _mValue_IngestionArn;
                throw new UndeferrableValueException("Value 'IngestionDestination.IngestionArn' is not present");
            }
        }

        /// <summary>
        /// Contains information about how ingested data is processed.
        /// </summary>
        [PolicyResourceProperty("processingConfiguration", "_mUnknown_ProcessingConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.IngestionDestinationProcessingConfiguration? _mValue_ProcessingConfiguration;
        private bool _mUnknown_ProcessingConfiguration;
        public Outputs.IngestionDestinationProcessingConfiguration? ProcessingConfiguration
        {
            get
            {
                if (!_mUnknown_ProcessingConfiguration) return _mValue_ProcessingConfiguration;
                throw new UndeferrableValueException("Value 'IngestionDestination.ProcessingConfiguration' is not present");
            }
        }

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'IngestionDestination.Tags' is not present");
            }
        }

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'IngestionDestination.TagsAll' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.IngestionDestinationTimeouts? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Outputs.IngestionDestinationTimeouts? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'IngestionDestination.Timeouts' is not present");
            }
        }
    }

    [PolicyResourceType("aws:appfabric/ingestionDestination:IngestionDestination")]
    public sealed class IngestionDestinationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the app bundle to use for the request.
        /// </summary>
        [PolicyResourceProperty("appBundleArn", "_mUnknown_AppBundleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AppBundleArn;
        private bool _mUnknown_AppBundleArn;
        public string? AppBundleArn
        {
            get
            {
                if (!_mUnknown_AppBundleArn) return _mValue_AppBundleArn;
                throw new UndeferrableValueException("Value 'IngestionDestinationArgs.AppBundleArn' is not present");
            }
        }

        /// <summary>
        /// Contains information about the destination of ingested data.
        /// </summary>
        [PolicyResourceProperty("destinationConfiguration", "_mUnknown_DestinationConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.IngestionDestinationDestinationConfigurationArgs? _mValue_DestinationConfiguration;
        private bool _mUnknown_DestinationConfiguration;
        public Inputs.IngestionDestinationDestinationConfigurationArgs? DestinationConfiguration
        {
            get
            {
                if (!_mUnknown_DestinationConfiguration) return _mValue_DestinationConfiguration;
                throw new UndeferrableValueException("Value 'IngestionDestinationArgs.DestinationConfiguration' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the ingestion to use for the request.
        /// </summary>
        [PolicyResourceProperty("ingestionArn", "_mUnknown_IngestionArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IngestionArn;
        private bool _mUnknown_IngestionArn;
        public string? IngestionArn
        {
            get
            {
                if (!_mUnknown_IngestionArn) return _mValue_IngestionArn;
                throw new UndeferrableValueException("Value 'IngestionDestinationArgs.IngestionArn' is not present");
            }
        }

        /// <summary>
        /// Contains information about how ingested data is processed.
        /// </summary>
        [PolicyResourceProperty("processingConfiguration", "_mUnknown_ProcessingConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.IngestionDestinationProcessingConfigurationArgs? _mValue_ProcessingConfiguration;
        private bool _mUnknown_ProcessingConfiguration;
        public Inputs.IngestionDestinationProcessingConfigurationArgs? ProcessingConfiguration
        {
            get
            {
                if (!_mUnknown_ProcessingConfiguration) return _mValue_ProcessingConfiguration;
                throw new UndeferrableValueException("Value 'IngestionDestinationArgs.ProcessingConfiguration' is not present");
            }
        }

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'IngestionDestinationArgs.Tags' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.IngestionDestinationTimeoutsArgs? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Inputs.IngestionDestinationTimeoutsArgs? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'IngestionDestinationArgs.Timeouts' is not present");
            }
        }
    }
}
