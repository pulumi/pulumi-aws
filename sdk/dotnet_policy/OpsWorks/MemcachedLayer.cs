// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.OpsWorks
{
    [PolicyResourceType("aws:opsworks/memcachedLayer:MemcachedLayer")]
    public sealed class MemcachedLayer : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Amount of memory to allocate for the cache on each instance, in megabytes. Defaults to 512MB.
        /// </summary>
        [PolicyResourceProperty("allocatedMemory", "_mUnknown_AllocatedMemory")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_AllocatedMemory;
        private bool _mUnknown_AllocatedMemory;
        public int? AllocatedMemory
        {
            get
            {
                if (!_mUnknown_AllocatedMemory) return _mValue_AllocatedMemory;
                throw new UndeferrableValueException("Value 'MemcachedLayer.AllocatedMemory' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name(ARN) of the layer.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'MemcachedLayer.Arn' is not present");
            }
        }

        /// <summary>
        /// Whether to automatically assign an elastic IP address to the layer's instances.
        /// </summary>
        [PolicyResourceProperty("autoAssignElasticIps", "_mUnknown_AutoAssignElasticIps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutoAssignElasticIps;
        private bool _mUnknown_AutoAssignElasticIps;
        public bool? AutoAssignElasticIps
        {
            get
            {
                if (!_mUnknown_AutoAssignElasticIps) return _mValue_AutoAssignElasticIps;
                throw new UndeferrableValueException("Value 'MemcachedLayer.AutoAssignElasticIps' is not present");
            }
        }

        /// <summary>
        /// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
        /// </summary>
        [PolicyResourceProperty("autoAssignPublicIps", "_mUnknown_AutoAssignPublicIps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutoAssignPublicIps;
        private bool _mUnknown_AutoAssignPublicIps;
        public bool? AutoAssignPublicIps
        {
            get
            {
                if (!_mUnknown_AutoAssignPublicIps) return _mValue_AutoAssignPublicIps;
                throw new UndeferrableValueException("Value 'MemcachedLayer.AutoAssignPublicIps' is not present");
            }
        }

        /// <summary>
        /// Whether to enable auto-healing for the layer.
        /// </summary>
        [PolicyResourceProperty("autoHealing", "_mUnknown_AutoHealing")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutoHealing;
        private bool _mUnknown_AutoHealing;
        public bool? AutoHealing
        {
            get
            {
                if (!_mUnknown_AutoHealing) return _mValue_AutoHealing;
                throw new UndeferrableValueException("Value 'MemcachedLayer.AutoHealing' is not present");
            }
        }

        [PolicyResourceProperty("cloudwatchConfiguration", "_mUnknown_CloudwatchConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.MemcachedLayerCloudwatchConfiguration? _mValue_CloudwatchConfiguration;
        private bool _mUnknown_CloudwatchConfiguration;
        public Outputs.MemcachedLayerCloudwatchConfiguration? CloudwatchConfiguration
        {
            get
            {
                if (!_mUnknown_CloudwatchConfiguration) return _mValue_CloudwatchConfiguration;
                throw new UndeferrableValueException("Value 'MemcachedLayer.CloudwatchConfiguration' is not present");
            }
        }

        [PolicyResourceProperty("customConfigureRecipes", "_mUnknown_CustomConfigureRecipes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomConfigureRecipes;
        private bool _mUnknown_CustomConfigureRecipes;
        public List<string>? CustomConfigureRecipes
        {
            get
            {
                if (!_mUnknown_CustomConfigureRecipes) return _mValue_CustomConfigureRecipes;
                throw new UndeferrableValueException("Value 'MemcachedLayer.CustomConfigureRecipes' is not present");
            }
        }

        [PolicyResourceProperty("customDeployRecipes", "_mUnknown_CustomDeployRecipes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomDeployRecipes;
        private bool _mUnknown_CustomDeployRecipes;
        public List<string>? CustomDeployRecipes
        {
            get
            {
                if (!_mUnknown_CustomDeployRecipes) return _mValue_CustomDeployRecipes;
                throw new UndeferrableValueException("Value 'MemcachedLayer.CustomDeployRecipes' is not present");
            }
        }

        /// <summary>
        /// The ARN of an IAM profile that will be used for the layer's instances.
        /// </summary>
        [PolicyResourceProperty("customInstanceProfileArn", "_mUnknown_CustomInstanceProfileArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CustomInstanceProfileArn;
        private bool _mUnknown_CustomInstanceProfileArn;
        public string? CustomInstanceProfileArn
        {
            get
            {
                if (!_mUnknown_CustomInstanceProfileArn) return _mValue_CustomInstanceProfileArn;
                throw new UndeferrableValueException("Value 'MemcachedLayer.CustomInstanceProfileArn' is not present");
            }
        }

        /// <summary>
        /// Custom JSON attributes to apply to the layer.
        /// </summary>
        [PolicyResourceProperty("customJson", "_mUnknown_CustomJson")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CustomJson;
        private bool _mUnknown_CustomJson;
        public string? CustomJson
        {
            get
            {
                if (!_mUnknown_CustomJson) return _mValue_CustomJson;
                throw new UndeferrableValueException("Value 'MemcachedLayer.CustomJson' is not present");
            }
        }

        /// <summary>
        /// Ids for a set of security groups to apply to the layer's instances.
        /// </summary>
        [PolicyResourceProperty("customSecurityGroupIds", "_mUnknown_CustomSecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomSecurityGroupIds;
        private bool _mUnknown_CustomSecurityGroupIds;
        public List<string>? CustomSecurityGroupIds
        {
            get
            {
                if (!_mUnknown_CustomSecurityGroupIds) return _mValue_CustomSecurityGroupIds;
                throw new UndeferrableValueException("Value 'MemcachedLayer.CustomSecurityGroupIds' is not present");
            }
        }

        [PolicyResourceProperty("customSetupRecipes", "_mUnknown_CustomSetupRecipes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomSetupRecipes;
        private bool _mUnknown_CustomSetupRecipes;
        public List<string>? CustomSetupRecipes
        {
            get
            {
                if (!_mUnknown_CustomSetupRecipes) return _mValue_CustomSetupRecipes;
                throw new UndeferrableValueException("Value 'MemcachedLayer.CustomSetupRecipes' is not present");
            }
        }

        [PolicyResourceProperty("customShutdownRecipes", "_mUnknown_CustomShutdownRecipes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomShutdownRecipes;
        private bool _mUnknown_CustomShutdownRecipes;
        public List<string>? CustomShutdownRecipes
        {
            get
            {
                if (!_mUnknown_CustomShutdownRecipes) return _mValue_CustomShutdownRecipes;
                throw new UndeferrableValueException("Value 'MemcachedLayer.CustomShutdownRecipes' is not present");
            }
        }

        [PolicyResourceProperty("customUndeployRecipes", "_mUnknown_CustomUndeployRecipes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomUndeployRecipes;
        private bool _mUnknown_CustomUndeployRecipes;
        public List<string>? CustomUndeployRecipes
        {
            get
            {
                if (!_mUnknown_CustomUndeployRecipes) return _mValue_CustomUndeployRecipes;
                throw new UndeferrableValueException("Value 'MemcachedLayer.CustomUndeployRecipes' is not present");
            }
        }

        /// <summary>
        /// Whether to enable Elastic Load Balancing connection draining.
        /// </summary>
        [PolicyResourceProperty("drainElbOnShutdown", "_mUnknown_DrainElbOnShutdown")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DrainElbOnShutdown;
        private bool _mUnknown_DrainElbOnShutdown;
        public bool? DrainElbOnShutdown
        {
            get
            {
                if (!_mUnknown_DrainElbOnShutdown) return _mValue_DrainElbOnShutdown;
                throw new UndeferrableValueException("Value 'MemcachedLayer.DrainElbOnShutdown' is not present");
            }
        }

        /// <summary>
        /// `ebs_volume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
        /// </summary>
        [PolicyResourceProperty("ebsVolumes", "_mUnknown_EbsVolumes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.MemcachedLayerEbsVolume>? _mValue_EbsVolumes;
        private bool _mUnknown_EbsVolumes;
        public List<Outputs.MemcachedLayerEbsVolume>? EbsVolumes
        {
            get
            {
                if (!_mUnknown_EbsVolumes) return _mValue_EbsVolumes;
                throw new UndeferrableValueException("Value 'MemcachedLayer.EbsVolumes' is not present");
            }
        }

        /// <summary>
        /// Name of an Elastic Load Balancer to attach to this layer
        /// </summary>
        [PolicyResourceProperty("elasticLoadBalancer", "_mUnknown_ElasticLoadBalancer")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ElasticLoadBalancer;
        private bool _mUnknown_ElasticLoadBalancer;
        public string? ElasticLoadBalancer
        {
            get
            {
                if (!_mUnknown_ElasticLoadBalancer) return _mValue_ElasticLoadBalancer;
                throw new UndeferrableValueException("Value 'MemcachedLayer.ElasticLoadBalancer' is not present");
            }
        }

        /// <summary>
        /// Whether to install OS and package updates on each instance when it boots.
        /// </summary>
        [PolicyResourceProperty("installUpdatesOnBoot", "_mUnknown_InstallUpdatesOnBoot")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_InstallUpdatesOnBoot;
        private bool _mUnknown_InstallUpdatesOnBoot;
        public bool? InstallUpdatesOnBoot
        {
            get
            {
                if (!_mUnknown_InstallUpdatesOnBoot) return _mValue_InstallUpdatesOnBoot;
                throw new UndeferrableValueException("Value 'MemcachedLayer.InstallUpdatesOnBoot' is not present");
            }
        }

        /// <summary>
        /// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
        /// </summary>
        [PolicyResourceProperty("instanceShutdownTimeout", "_mUnknown_InstanceShutdownTimeout")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_InstanceShutdownTimeout;
        private bool _mUnknown_InstanceShutdownTimeout;
        public int? InstanceShutdownTimeout
        {
            get
            {
                if (!_mUnknown_InstanceShutdownTimeout) return _mValue_InstanceShutdownTimeout;
                throw new UndeferrableValueException("Value 'MemcachedLayer.InstanceShutdownTimeout' is not present");
            }
        }

        [PolicyResourceProperty("loadBasedAutoScaling", "_mUnknown_LoadBasedAutoScaling")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.MemcachedLayerLoadBasedAutoScaling? _mValue_LoadBasedAutoScaling;
        private bool _mUnknown_LoadBasedAutoScaling;
        public Outputs.MemcachedLayerLoadBasedAutoScaling? LoadBasedAutoScaling
        {
            get
            {
                if (!_mUnknown_LoadBasedAutoScaling) return _mValue_LoadBasedAutoScaling;
                throw new UndeferrableValueException("Value 'MemcachedLayer.LoadBasedAutoScaling' is not present");
            }
        }

        /// <summary>
        /// A human-readable name for the layer.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'MemcachedLayer.Name' is not present");
            }
        }

        /// <summary>
        /// ID of the stack the layer will belong to.
        /// </summary>
        [PolicyResourceProperty("stackId", "_mUnknown_StackId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StackId;
        private bool _mUnknown_StackId;
        public string? StackId
        {
            get
            {
                if (!_mUnknown_StackId) return _mValue_StackId;
                throw new UndeferrableValueException("Value 'MemcachedLayer.StackId' is not present");
            }
        }

        /// <summary>
        /// Names of a set of system packages to install on the layer's instances.
        /// </summary>
        [PolicyResourceProperty("systemPackages", "_mUnknown_SystemPackages")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SystemPackages;
        private bool _mUnknown_SystemPackages;
        public List<string>? SystemPackages
        {
            get
            {
                if (!_mUnknown_SystemPackages) return _mValue_SystemPackages;
                throw new UndeferrableValueException("Value 'MemcachedLayer.SystemPackages' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// 
        /// The following extra optional arguments, all lists of Chef recipe names, allow
        /// custom Chef recipes to be applied to layer instances at the five different
        /// lifecycle events, if custom cookbooks are enabled on the layer's stack:
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'MemcachedLayer.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'MemcachedLayer.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Whether to use EBS-optimized instances.
        /// </summary>
        [PolicyResourceProperty("useEbsOptimizedInstances", "_mUnknown_UseEbsOptimizedInstances")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UseEbsOptimizedInstances;
        private bool _mUnknown_UseEbsOptimizedInstances;
        public bool? UseEbsOptimizedInstances
        {
            get
            {
                if (!_mUnknown_UseEbsOptimizedInstances) return _mValue_UseEbsOptimizedInstances;
                throw new UndeferrableValueException("Value 'MemcachedLayer.UseEbsOptimizedInstances' is not present");
            }
        }
    }

    [PolicyResourceType("aws:opsworks/memcachedLayer:MemcachedLayer")]
    public sealed class MemcachedLayerArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Amount of memory to allocate for the cache on each instance, in megabytes. Defaults to 512MB.
        /// </summary>
        [PolicyResourceProperty("allocatedMemory", "_mUnknown_AllocatedMemory")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_AllocatedMemory;
        private bool _mUnknown_AllocatedMemory;
        public int? AllocatedMemory
        {
            get
            {
                if (!_mUnknown_AllocatedMemory) return _mValue_AllocatedMemory;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.AllocatedMemory' is not present");
            }
        }

        /// <summary>
        /// Whether to automatically assign an elastic IP address to the layer's instances.
        /// </summary>
        [PolicyResourceProperty("autoAssignElasticIps", "_mUnknown_AutoAssignElasticIps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutoAssignElasticIps;
        private bool _mUnknown_AutoAssignElasticIps;
        public bool? AutoAssignElasticIps
        {
            get
            {
                if (!_mUnknown_AutoAssignElasticIps) return _mValue_AutoAssignElasticIps;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.AutoAssignElasticIps' is not present");
            }
        }

        /// <summary>
        /// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
        /// </summary>
        [PolicyResourceProperty("autoAssignPublicIps", "_mUnknown_AutoAssignPublicIps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutoAssignPublicIps;
        private bool _mUnknown_AutoAssignPublicIps;
        public bool? AutoAssignPublicIps
        {
            get
            {
                if (!_mUnknown_AutoAssignPublicIps) return _mValue_AutoAssignPublicIps;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.AutoAssignPublicIps' is not present");
            }
        }

        /// <summary>
        /// Whether to enable auto-healing for the layer.
        /// </summary>
        [PolicyResourceProperty("autoHealing", "_mUnknown_AutoHealing")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutoHealing;
        private bool _mUnknown_AutoHealing;
        public bool? AutoHealing
        {
            get
            {
                if (!_mUnknown_AutoHealing) return _mValue_AutoHealing;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.AutoHealing' is not present");
            }
        }

        [PolicyResourceProperty("cloudwatchConfiguration", "_mUnknown_CloudwatchConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.MemcachedLayerCloudwatchConfigurationArgs? _mValue_CloudwatchConfiguration;
        private bool _mUnknown_CloudwatchConfiguration;
        public Inputs.MemcachedLayerCloudwatchConfigurationArgs? CloudwatchConfiguration
        {
            get
            {
                if (!_mUnknown_CloudwatchConfiguration) return _mValue_CloudwatchConfiguration;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.CloudwatchConfiguration' is not present");
            }
        }

        [PolicyResourceProperty("customConfigureRecipes", "_mUnknown_CustomConfigureRecipes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomConfigureRecipes;
        private bool _mUnknown_CustomConfigureRecipes;
        public List<string>? CustomConfigureRecipes
        {
            get
            {
                if (!_mUnknown_CustomConfigureRecipes) return _mValue_CustomConfigureRecipes;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.CustomConfigureRecipes' is not present");
            }
        }

        [PolicyResourceProperty("customDeployRecipes", "_mUnknown_CustomDeployRecipes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomDeployRecipes;
        private bool _mUnknown_CustomDeployRecipes;
        public List<string>? CustomDeployRecipes
        {
            get
            {
                if (!_mUnknown_CustomDeployRecipes) return _mValue_CustomDeployRecipes;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.CustomDeployRecipes' is not present");
            }
        }

        /// <summary>
        /// The ARN of an IAM profile that will be used for the layer's instances.
        /// </summary>
        [PolicyResourceProperty("customInstanceProfileArn", "_mUnknown_CustomInstanceProfileArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CustomInstanceProfileArn;
        private bool _mUnknown_CustomInstanceProfileArn;
        public string? CustomInstanceProfileArn
        {
            get
            {
                if (!_mUnknown_CustomInstanceProfileArn) return _mValue_CustomInstanceProfileArn;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.CustomInstanceProfileArn' is not present");
            }
        }

        /// <summary>
        /// Custom JSON attributes to apply to the layer.
        /// </summary>
        [PolicyResourceProperty("customJson", "_mUnknown_CustomJson")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CustomJson;
        private bool _mUnknown_CustomJson;
        public string? CustomJson
        {
            get
            {
                if (!_mUnknown_CustomJson) return _mValue_CustomJson;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.CustomJson' is not present");
            }
        }

        /// <summary>
        /// Ids for a set of security groups to apply to the layer's instances.
        /// </summary>
        [PolicyResourceProperty("customSecurityGroupIds", "_mUnknown_CustomSecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomSecurityGroupIds;
        private bool _mUnknown_CustomSecurityGroupIds;
        public List<string>? CustomSecurityGroupIds
        {
            get
            {
                if (!_mUnknown_CustomSecurityGroupIds) return _mValue_CustomSecurityGroupIds;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.CustomSecurityGroupIds' is not present");
            }
        }

        [PolicyResourceProperty("customSetupRecipes", "_mUnknown_CustomSetupRecipes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomSetupRecipes;
        private bool _mUnknown_CustomSetupRecipes;
        public List<string>? CustomSetupRecipes
        {
            get
            {
                if (!_mUnknown_CustomSetupRecipes) return _mValue_CustomSetupRecipes;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.CustomSetupRecipes' is not present");
            }
        }

        [PolicyResourceProperty("customShutdownRecipes", "_mUnknown_CustomShutdownRecipes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomShutdownRecipes;
        private bool _mUnknown_CustomShutdownRecipes;
        public List<string>? CustomShutdownRecipes
        {
            get
            {
                if (!_mUnknown_CustomShutdownRecipes) return _mValue_CustomShutdownRecipes;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.CustomShutdownRecipes' is not present");
            }
        }

        [PolicyResourceProperty("customUndeployRecipes", "_mUnknown_CustomUndeployRecipes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomUndeployRecipes;
        private bool _mUnknown_CustomUndeployRecipes;
        public List<string>? CustomUndeployRecipes
        {
            get
            {
                if (!_mUnknown_CustomUndeployRecipes) return _mValue_CustomUndeployRecipes;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.CustomUndeployRecipes' is not present");
            }
        }

        /// <summary>
        /// Whether to enable Elastic Load Balancing connection draining.
        /// </summary>
        [PolicyResourceProperty("drainElbOnShutdown", "_mUnknown_DrainElbOnShutdown")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DrainElbOnShutdown;
        private bool _mUnknown_DrainElbOnShutdown;
        public bool? DrainElbOnShutdown
        {
            get
            {
                if (!_mUnknown_DrainElbOnShutdown) return _mValue_DrainElbOnShutdown;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.DrainElbOnShutdown' is not present");
            }
        }

        /// <summary>
        /// `ebs_volume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
        /// </summary>
        [PolicyResourceProperty("ebsVolumes", "_mUnknown_EbsVolumes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.MemcachedLayerEbsVolumeArgs>? _mValue_EbsVolumes;
        private bool _mUnknown_EbsVolumes;
        public List<Inputs.MemcachedLayerEbsVolumeArgs>? EbsVolumes
        {
            get
            {
                if (!_mUnknown_EbsVolumes) return _mValue_EbsVolumes;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.EbsVolumes' is not present");
            }
        }

        /// <summary>
        /// Name of an Elastic Load Balancer to attach to this layer
        /// </summary>
        [PolicyResourceProperty("elasticLoadBalancer", "_mUnknown_ElasticLoadBalancer")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ElasticLoadBalancer;
        private bool _mUnknown_ElasticLoadBalancer;
        public string? ElasticLoadBalancer
        {
            get
            {
                if (!_mUnknown_ElasticLoadBalancer) return _mValue_ElasticLoadBalancer;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.ElasticLoadBalancer' is not present");
            }
        }

        /// <summary>
        /// Whether to install OS and package updates on each instance when it boots.
        /// </summary>
        [PolicyResourceProperty("installUpdatesOnBoot", "_mUnknown_InstallUpdatesOnBoot")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_InstallUpdatesOnBoot;
        private bool _mUnknown_InstallUpdatesOnBoot;
        public bool? InstallUpdatesOnBoot
        {
            get
            {
                if (!_mUnknown_InstallUpdatesOnBoot) return _mValue_InstallUpdatesOnBoot;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.InstallUpdatesOnBoot' is not present");
            }
        }

        /// <summary>
        /// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
        /// </summary>
        [PolicyResourceProperty("instanceShutdownTimeout", "_mUnknown_InstanceShutdownTimeout")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_InstanceShutdownTimeout;
        private bool _mUnknown_InstanceShutdownTimeout;
        public int? InstanceShutdownTimeout
        {
            get
            {
                if (!_mUnknown_InstanceShutdownTimeout) return _mValue_InstanceShutdownTimeout;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.InstanceShutdownTimeout' is not present");
            }
        }

        [PolicyResourceProperty("loadBasedAutoScaling", "_mUnknown_LoadBasedAutoScaling")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.MemcachedLayerLoadBasedAutoScalingArgs? _mValue_LoadBasedAutoScaling;
        private bool _mUnknown_LoadBasedAutoScaling;
        public Inputs.MemcachedLayerLoadBasedAutoScalingArgs? LoadBasedAutoScaling
        {
            get
            {
                if (!_mUnknown_LoadBasedAutoScaling) return _mValue_LoadBasedAutoScaling;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.LoadBasedAutoScaling' is not present");
            }
        }

        /// <summary>
        /// A human-readable name for the layer.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.Name' is not present");
            }
        }

        /// <summary>
        /// ID of the stack the layer will belong to.
        /// </summary>
        [PolicyResourceProperty("stackId", "_mUnknown_StackId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StackId;
        private bool _mUnknown_StackId;
        public string? StackId
        {
            get
            {
                if (!_mUnknown_StackId) return _mValue_StackId;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.StackId' is not present");
            }
        }

        /// <summary>
        /// Names of a set of system packages to install on the layer's instances.
        /// </summary>
        [PolicyResourceProperty("systemPackages", "_mUnknown_SystemPackages")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SystemPackages;
        private bool _mUnknown_SystemPackages;
        public List<string>? SystemPackages
        {
            get
            {
                if (!_mUnknown_SystemPackages) return _mValue_SystemPackages;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.SystemPackages' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// 
        /// The following extra optional arguments, all lists of Chef recipe names, allow
        /// custom Chef recipes to be applied to layer instances at the five different
        /// lifecycle events, if custom cookbooks are enabled on the layer's stack:
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Whether to use EBS-optimized instances.
        /// </summary>
        [PolicyResourceProperty("useEbsOptimizedInstances", "_mUnknown_UseEbsOptimizedInstances")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UseEbsOptimizedInstances;
        private bool _mUnknown_UseEbsOptimizedInstances;
        public bool? UseEbsOptimizedInstances
        {
            get
            {
                if (!_mUnknown_UseEbsOptimizedInstances) return _mValue_UseEbsOptimizedInstances;
                throw new UndeferrableValueException("Value 'MemcachedLayerArgs.UseEbsOptimizedInstances' is not present");
            }
        }
    }
}
