// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.OpsWorks
{
    [PolicyResourceType("aws:opsworks/memcachedLayer:MemcachedLayer")]
    public sealed class MemcachedLayer : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Amount of memory to allocate for the cache on each instance, in megabytes. Defaults to 512MB.
        /// </summary>
        [Input("allocatedMemory")]
        public int? AllocatedMemory;

        /// <summary>
        /// The Amazon Resource Name(ARN) of the layer.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Whether to automatically assign an elastic IP address to the layer's instances.
        /// </summary>
        [Input("autoAssignElasticIps")]
        public bool? AutoAssignElasticIps;

        /// <summary>
        /// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
        /// </summary>
        [Input("autoAssignPublicIps")]
        public bool? AutoAssignPublicIps;

        /// <summary>
        /// Whether to enable auto-healing for the layer.
        /// </summary>
        [Input("autoHealing")]
        public bool? AutoHealing;

        [Input("cloudwatchConfiguration")]
        public MemcachedLayerCloudwatchConfiguration? CloudwatchConfiguration;

        [Input("customConfigureRecipes")]
        public List<string>? CustomConfigureRecipes;

        [Input("customDeployRecipes")]
        public List<string>? CustomDeployRecipes;

        /// <summary>
        /// The ARN of an IAM profile that will be used for the layer's instances.
        /// </summary>
        [Input("customInstanceProfileArn")]
        public string? CustomInstanceProfileArn;

        /// <summary>
        /// Custom JSON attributes to apply to the layer.
        /// </summary>
        [Input("customJson")]
        public string? CustomJson;

        /// <summary>
        /// Ids for a set of security groups to apply to the layer's instances.
        /// </summary>
        [Input("customSecurityGroupIds")]
        public List<string>? CustomSecurityGroupIds;

        [Input("customSetupRecipes")]
        public List<string>? CustomSetupRecipes;

        [Input("customShutdownRecipes")]
        public List<string>? CustomShutdownRecipes;

        [Input("customUndeployRecipes")]
        public List<string>? CustomUndeployRecipes;

        /// <summary>
        /// Whether to enable Elastic Load Balancing connection draining.
        /// </summary>
        [Input("drainElbOnShutdown")]
        public bool? DrainElbOnShutdown;

        /// <summary>
        /// `ebs_volume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
        /// </summary>
        [Input("ebsVolumes")]
        public List<MemcachedLayerEbsVolume>? EbsVolumes;

        /// <summary>
        /// Name of an Elastic Load Balancer to attach to this layer
        /// </summary>
        [Input("elasticLoadBalancer")]
        public string? ElasticLoadBalancer;

        /// <summary>
        /// Whether to install OS and package updates on each instance when it boots.
        /// </summary>
        [Input("installUpdatesOnBoot")]
        public bool? InstallUpdatesOnBoot;

        /// <summary>
        /// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
        /// </summary>
        [Input("instanceShutdownTimeout")]
        public int? InstanceShutdownTimeout;

        [Input("loadBasedAutoScaling")]
        public MemcachedLayerLoadBasedAutoScaling? LoadBasedAutoScaling;

        /// <summary>
        /// A human-readable name for the layer.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// ID of the stack the layer will belong to.
        /// </summary>
        [Input("stackId")]
        public string? StackId;

        /// <summary>
        /// Names of a set of system packages to install on the layer's instances.
        /// </summary>
        [Input("systemPackages")]
        public List<string>? SystemPackages;

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// 
        /// The following extra optional arguments, all lists of Chef recipe names, allow
        /// custom Chef recipes to be applied to layer instances at the five different
        /// lifecycle events, if custom cookbooks are enabled on the layer's stack:
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Whether to use EBS-optimized instances.
        /// </summary>
        [Input("useEbsOptimizedInstances")]
        public bool? UseEbsOptimizedInstances;
    }
}
