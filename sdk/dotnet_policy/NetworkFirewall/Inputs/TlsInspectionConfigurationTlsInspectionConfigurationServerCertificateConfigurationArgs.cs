// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.NetworkFirewall.Inputs
{
    public sealed class TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationArgs
    {
        /// <summary>
        /// ARN of the imported certificate authority (CA) certificate within Certificate Manager (ACM) to use for outbound SSL/TLS inspection. See [Using SSL/TLS certificates with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html) for limitations on CA certificates.
        /// </summary>
        [PolicyResourceProperty("certificateAuthorityArn", "_mUnknown_CertificateAuthorityArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateAuthorityArn;
        private bool _mUnknown_CertificateAuthorityArn;
        public string? CertificateAuthorityArn
        {
            get
            {
                if (!_mUnknown_CertificateAuthorityArn) return _mValue_CertificateAuthorityArn;
                throw new UndeferrableValueException("Value 'TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationArgs.CertificateAuthorityArn' is not present");
            }
        }

        /// <summary>
        /// Check Certificate Revocation Status block. Detailed below.
        /// </summary>
        [PolicyResourceProperty("checkCertificateRevocationStatus", "_mUnknown_CheckCertificateRevocationStatus")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationCheckCertificateRevocationStatusArgs? _mValue_CheckCertificateRevocationStatus;
        private bool _mUnknown_CheckCertificateRevocationStatus;
        public Inputs.TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationCheckCertificateRevocationStatusArgs? CheckCertificateRevocationStatus
        {
            get
            {
                if (!_mUnknown_CheckCertificateRevocationStatus) return _mValue_CheckCertificateRevocationStatus;
                throw new UndeferrableValueException("Value 'TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationArgs.CheckCertificateRevocationStatus' is not present");
            }
        }

        /// <summary>
        /// Scope block. Detailed below.
        /// </summary>
        [PolicyResourceProperty("scopes", "_mUnknown_Scopes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationScopeArgs>? _mValue_Scopes;
        private bool _mUnknown_Scopes;
        public List<Inputs.TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationScopeArgs>? Scopes
        {
            get
            {
                if (!_mUnknown_Scopes) return _mValue_Scopes;
                throw new UndeferrableValueException("Value 'TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationArgs.Scopes' is not present");
            }
        }

        /// <summary>
        /// Server certificates to use for inbound SSL/TLS inspection. See [Using SSL/TLS certificates with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html).
        /// </summary>
        [PolicyResourceProperty("serverCertificates", "_mUnknown_ServerCertificates")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationServerCertificateArgs>? _mValue_ServerCertificates;
        private bool _mUnknown_ServerCertificates;
        public List<Inputs.TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationServerCertificateArgs>? ServerCertificates
        {
            get
            {
                if (!_mUnknown_ServerCertificates) return _mValue_ServerCertificates;
                throw new UndeferrableValueException("Value 'TlsInspectionConfigurationTlsInspectionConfigurationServerCertificateConfigurationArgs.ServerCertificates' is not present");
            }
        }
    }
}
