// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.NetworkFirewall.Inputs
{
    public sealed class FirewallPolicyFirewallPolicyArgs
    {
        /// <summary>
        /// . Contains variables that you can use to override default Suricata settings in your firewall policy. See Rule Variables for details.
        /// </summary>
        [PolicyResourceProperty("policyVariables", "_mUnknown_PolicyVariables")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.FirewallPolicyFirewallPolicyPolicyVariablesArgs? _mValue_PolicyVariables;
        private bool _mUnknown_PolicyVariables;
        public Inputs.FirewallPolicyFirewallPolicyPolicyVariablesArgs? PolicyVariables
        {
            get
            {
                if (!_mUnknown_PolicyVariables) return _mValue_PolicyVariables;
                throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.PolicyVariables' is not present");
            }
        }

        /// <summary>
        /// Set of actions to take on a packet if it does not match any stateful rules in the policy. This can only be specified if the policy has a `stateful_engine_options` block with a `rule_order` value of `STRICT_ORDER`. You can specify one of either or neither values of `aws:drop_strict` or `aws:drop_established`, as well as any combination of `aws:alert_strict` and `aws:alert_established`.
        /// </summary>
        [PolicyResourceProperty("statefulDefaultActions", "_mUnknown_StatefulDefaultActions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_StatefulDefaultActions;
        private bool _mUnknown_StatefulDefaultActions;
        public List<string>? StatefulDefaultActions
        {
            get
            {
                if (!_mUnknown_StatefulDefaultActions) return _mValue_StatefulDefaultActions;
                throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.StatefulDefaultActions' is not present");
            }
        }

        /// <summary>
        /// A configuration block that defines options on how the policy handles stateful rules. See Stateful Engine Options below for details.
        /// </summary>
        [PolicyResourceProperty("statefulEngineOptions", "_mUnknown_StatefulEngineOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.FirewallPolicyFirewallPolicyStatefulEngineOptionsArgs? _mValue_StatefulEngineOptions;
        private bool _mUnknown_StatefulEngineOptions;
        public Inputs.FirewallPolicyFirewallPolicyStatefulEngineOptionsArgs? StatefulEngineOptions
        {
            get
            {
                if (!_mUnknown_StatefulEngineOptions) return _mValue_StatefulEngineOptions;
                throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.StatefulEngineOptions' is not present");
            }
        }

        /// <summary>
        /// Set of configuration blocks containing references to the stateful rule groups that are used in the policy. See Stateful Rule Group Reference below for details.
        /// </summary>
        [PolicyResourceProperty("statefulRuleGroupReferences", "_mUnknown_StatefulRuleGroupReferences")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.FirewallPolicyFirewallPolicyStatefulRuleGroupReferenceArgs>? _mValue_StatefulRuleGroupReferences;
        private bool _mUnknown_StatefulRuleGroupReferences;
        public List<Inputs.FirewallPolicyFirewallPolicyStatefulRuleGroupReferenceArgs>? StatefulRuleGroupReferences
        {
            get
            {
                if (!_mUnknown_StatefulRuleGroupReferences) return _mValue_StatefulRuleGroupReferences;
                throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.StatefulRuleGroupReferences' is not present");
            }
        }

        /// <summary>
        /// Set of configuration blocks describing the custom action definitions that are available for use in the firewall policy's `stateless_default_actions`. See Stateless Custom Action below for details.
        /// </summary>
        [PolicyResourceProperty("statelessCustomActions", "_mUnknown_StatelessCustomActions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.FirewallPolicyFirewallPolicyStatelessCustomActionArgs>? _mValue_StatelessCustomActions;
        private bool _mUnknown_StatelessCustomActions;
        public List<Inputs.FirewallPolicyFirewallPolicyStatelessCustomActionArgs>? StatelessCustomActions
        {
            get
            {
                if (!_mUnknown_StatelessCustomActions) return _mValue_StatelessCustomActions;
                throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.StatelessCustomActions' is not present");
            }
        }

        /// <summary>
        /// Set of actions to take on a packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: `aws:drop`, `aws:pass`, or `aws:forward_to_sfe`.
        /// In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe`.
        /// </summary>
        [PolicyResourceProperty("statelessDefaultActions", "_mUnknown_StatelessDefaultActions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_StatelessDefaultActions;
        private bool _mUnknown_StatelessDefaultActions;
        public List<string>? StatelessDefaultActions
        {
            get
            {
                if (!_mUnknown_StatelessDefaultActions) return _mValue_StatelessDefaultActions;
                throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.StatelessDefaultActions' is not present");
            }
        }

        /// <summary>
        /// Set of actions to take on a fragmented packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: `aws:drop`, `aws:pass`, or `aws:forward_to_sfe`.
        /// In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe`.
        /// </summary>
        [PolicyResourceProperty("statelessFragmentDefaultActions", "_mUnknown_StatelessFragmentDefaultActions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_StatelessFragmentDefaultActions;
        private bool _mUnknown_StatelessFragmentDefaultActions;
        public List<string>? StatelessFragmentDefaultActions
        {
            get
            {
                if (!_mUnknown_StatelessFragmentDefaultActions) return _mValue_StatelessFragmentDefaultActions;
                throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.StatelessFragmentDefaultActions' is not present");
            }
        }

        /// <summary>
        /// Set of configuration blocks containing references to the stateless rule groups that are used in the policy. See Stateless Rule Group Reference below for details.
        /// </summary>
        [PolicyResourceProperty("statelessRuleGroupReferences", "_mUnknown_StatelessRuleGroupReferences")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.FirewallPolicyFirewallPolicyStatelessRuleGroupReferenceArgs>? _mValue_StatelessRuleGroupReferences;
        private bool _mUnknown_StatelessRuleGroupReferences;
        public List<Inputs.FirewallPolicyFirewallPolicyStatelessRuleGroupReferenceArgs>? StatelessRuleGroupReferences
        {
            get
            {
                if (!_mUnknown_StatelessRuleGroupReferences) return _mValue_StatelessRuleGroupReferences;
                throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.StatelessRuleGroupReferences' is not present");
            }
        }

        /// <summary>
        /// The (ARN) of the TLS Inspection policy to attach to the FW Policy.  This must be added at creation of the resource per AWS documentation. "You can only add a TLS inspection configuration to a new policy, not to an existing policy."  This cannot be removed from a FW Policy.
        /// </summary>
        [PolicyResourceProperty("tlsInspectionConfigurationArn", "_mUnknown_TlsInspectionConfigurationArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TlsInspectionConfigurationArn;
        private bool _mUnknown_TlsInspectionConfigurationArn;
        public string? TlsInspectionConfigurationArn
        {
            get
            {
                if (!_mUnknown_TlsInspectionConfigurationArn) return _mValue_TlsInspectionConfigurationArn;
                throw new UndeferrableValueException("Value 'FirewallPolicyFirewallPolicyArgs.TlsInspectionConfigurationArn' is not present");
            }
        }
    }
}
