// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.LightSail
{
    [PolicyResourceType("aws:lightsail/containerService:ContainerService")]
    public sealed class ContainerService : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the container service.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The Availability Zone. Follows the format us-east-2a (case-sensitive).
        /// </summary>
        [Input("availabilityZone")]
        public string? AvailabilityZone;

        [Input("createdAt")]
        public string? CreatedAt;

        /// <summary>
        /// A Boolean value indicating whether the container service is disabled. Defaults to `false`.
        /// </summary>
        [Input("isDisabled")]
        public bool? IsDisabled;

        /// <summary>
        /// The name for the container service. Names must be of length 1 to 63, and be
        /// unique within each AWS Region in your Lightsail account.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// The power specification for the container service. The power specifies the amount of memory,
        /// the number of vCPUs, and the monthly price of each node of the container service.
        /// Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
        /// </summary>
        [Input("power")]
        public string? Power;

        /// <summary>
        /// The ID of the power of the container service.
        /// </summary>
        [Input("powerId")]
        public string? PowerId;

        /// <summary>
        /// The principal ARN of the container service. The principal ARN can be used to create a trust
        /// relationship between your standard AWS account and your Lightsail container service. This allows you to give your
        /// service permission to access resources in your standard AWS account.
        /// </summary>
        [Input("principalArn")]
        public string? PrincipalArn;

        /// <summary>
        /// The private domain name of the container service. The private domain name is accessible only
        /// by other resources within the default virtual private cloud (VPC) of your Lightsail account.
        /// </summary>
        [Input("privateDomainName")]
        public string? PrivateDomainName;

        /// <summary>
        /// An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
        /// </summary>
        [Input("privateRegistryAccess")]
        public ContainerServicePrivateRegistryAccess? PrivateRegistryAccess;

        /// <summary>
        /// The public domain names to use with the container service, such as example.com
        /// and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
        /// specify are used when you create a deployment with a container configured as the public endpoint of your container
        /// service. If you don't specify public domain names, then you can use the default domain of the container service.
        /// Defined below.
        /// </summary>
        [Input("publicDomainNames")]
        public ContainerServicePublicDomainNames? PublicDomainNames;

        /// <summary>
        /// The Lightsail resource type of the container service (i.e., ContainerService).
        /// </summary>
        [Input("resourceType")]
        public string? ResourceType;

        /// <summary>
        /// The scale specification for the container service. The scale specifies the allocated compute
        /// nodes of the container service.
        /// </summary>
        [Input("scale")]
        public int? Scale;

        /// <summary>
        /// The current state of the container service.
        /// </summary>
        [Input("state")]
        public string? State;

        /// <summary>
        /// Map of container service tags. To create a key-only tag, use an empty string as the value. To tag at launch, specify the tags in the Launch Template. If
        /// configured with a provider
        /// `default_tags` configuration block
        /// present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider
        /// `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// The publicly accessible URL of the container service. If no public endpoint is specified in the
        /// currentDeployment, this URL returns a 404 response.
        /// </summary>
        [Input("url")]
        public string? Url;
    }
}
