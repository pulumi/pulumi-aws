// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.LightSail
{
    [PolicyResourceType("aws:lightsail/disk:Disk")]
    public sealed class Disk : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the Lightsail disk.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Disk.Arn' is not present");
            }
        }

        /// <summary>
        /// The Availability Zone in which to create your disk.
        /// </summary>
        [PolicyResourceProperty("availabilityZone", "_mUnknown_AvailabilityZone")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZone;
        private bool _mUnknown_AvailabilityZone;
        public string? AvailabilityZone
        {
            get
            {
                if (!_mUnknown_AvailabilityZone) return _mValue_AvailabilityZone;
                throw new UndeferrableValueException("Value 'Disk.AvailabilityZone' is not present");
            }
        }

        /// <summary>
        /// The timestamp when the disk was created.
        /// </summary>
        [PolicyResourceProperty("createdAt", "_mUnknown_CreatedAt")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CreatedAt;
        private bool _mUnknown_CreatedAt;
        public string? CreatedAt
        {
            get
            {
                if (!_mUnknown_CreatedAt) return _mValue_CreatedAt;
                throw new UndeferrableValueException("Value 'Disk.CreatedAt' is not present");
            }
        }

        /// <summary>
        /// The name of the disk.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Disk.Name' is not present");
            }
        }

        /// <summary>
        /// The size of the disk in GB.
        /// </summary>
        [PolicyResourceProperty("sizeInGb", "_mUnknown_SizeInGb")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_SizeInGb;
        private bool _mUnknown_SizeInGb;
        public int? SizeInGb
        {
            get
            {
                if (!_mUnknown_SizeInGb) return _mValue_SizeInGb;
                throw new UndeferrableValueException("Value 'Disk.SizeInGb' is not present");
            }
        }

        /// <summary>
        /// The support code for the disk. Include this code in your email to support when you have questions about a disk in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        /// </summary>
        [PolicyResourceProperty("supportCode", "_mUnknown_SupportCode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SupportCode;
        private bool _mUnknown_SupportCode;
        public string? SupportCode
        {
            get
            {
                if (!_mUnknown_SupportCode) return _mValue_SupportCode;
                throw new UndeferrableValueException("Value 'Disk.SupportCode' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Disk.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Disk.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:lightsail/disk:Disk")]
    public sealed class DiskArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The Availability Zone in which to create your disk.
        /// </summary>
        [PolicyResourceProperty("availabilityZone", "_mUnknown_AvailabilityZone")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZone;
        private bool _mUnknown_AvailabilityZone;
        public string? AvailabilityZone
        {
            get
            {
                if (!_mUnknown_AvailabilityZone) return _mValue_AvailabilityZone;
                throw new UndeferrableValueException("Value 'DiskArgs.AvailabilityZone' is not present");
            }
        }

        /// <summary>
        /// The name of the disk.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'DiskArgs.Name' is not present");
            }
        }

        /// <summary>
        /// The size of the disk in GB.
        /// </summary>
        [PolicyResourceProperty("sizeInGb", "_mUnknown_SizeInGb")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_SizeInGb;
        private bool _mUnknown_SizeInGb;
        public int? SizeInGb
        {
            get
            {
                if (!_mUnknown_SizeInGb) return _mValue_SizeInGb;
                throw new UndeferrableValueException("Value 'DiskArgs.SizeInGb' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'DiskArgs.Tags' is not present");
            }
        }
    }
}
