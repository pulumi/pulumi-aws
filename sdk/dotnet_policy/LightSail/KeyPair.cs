// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.LightSail
{
    [PolicyResourceType("aws:lightsail/keyPair:KeyPair")]
    public sealed class KeyPair : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the Lightsail key pair.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'KeyPair.Arn' is not present");
            }
        }

        /// <summary>
        /// The MD5 public key fingerprint for the encrypted private key.
        /// </summary>
        [PolicyResourceProperty("encryptedFingerprint", "_mUnknown_EncryptedFingerprint")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EncryptedFingerprint;
        private bool _mUnknown_EncryptedFingerprint;
        public string? EncryptedFingerprint
        {
            get
            {
                if (!_mUnknown_EncryptedFingerprint) return _mValue_EncryptedFingerprint;
                throw new UndeferrableValueException("Value 'KeyPair.EncryptedFingerprint' is not present");
            }
        }

        /// <summary>
        /// the private key material, base 64 encoded and encrypted with the given `pgp_key`. This is only populated when creating a new key and `pgp_key` is supplied.
        /// </summary>
        [PolicyResourceProperty("encryptedPrivateKey", "_mUnknown_EncryptedPrivateKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EncryptedPrivateKey;
        private bool _mUnknown_EncryptedPrivateKey;
        public string? EncryptedPrivateKey
        {
            get
            {
                if (!_mUnknown_EncryptedPrivateKey) return _mValue_EncryptedPrivateKey;
                throw new UndeferrableValueException("Value 'KeyPair.EncryptedPrivateKey' is not present");
            }
        }

        /// <summary>
        /// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
        /// </summary>
        [PolicyResourceProperty("fingerprint", "_mUnknown_Fingerprint")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Fingerprint;
        private bool _mUnknown_Fingerprint;
        public string? Fingerprint
        {
            get
            {
                if (!_mUnknown_Fingerprint) return _mValue_Fingerprint;
                throw new UndeferrableValueException("Value 'KeyPair.Fingerprint' is not present");
            }
        }

        /// <summary>
        /// The name of the Lightsail Key Pair. If omitted, a unique name will be generated by this provider
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'KeyPair.Name' is not present");
            }
        }

        [PolicyResourceProperty("namePrefix", "_mUnknown_NamePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamePrefix;
        private bool _mUnknown_NamePrefix;
        public string? NamePrefix
        {
            get
            {
                if (!_mUnknown_NamePrefix) return _mValue_NamePrefix;
                throw new UndeferrableValueException("Value 'KeyPair.NamePrefix' is not present");
            }
        }

        /// <summary>
        /// An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair
        /// </summary>
        [PolicyResourceProperty("pgpKey", "_mUnknown_PgpKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PgpKey;
        private bool _mUnknown_PgpKey;
        public string? PgpKey
        {
            get
            {
                if (!_mUnknown_PgpKey) return _mValue_PgpKey;
                throw new UndeferrableValueException("Value 'KeyPair.PgpKey' is not present");
            }
        }

        /// <summary>
        /// the private key, base64 encoded. This is only populated when creating a new key, and when no `pgp_key` is provided.
        /// </summary>
        [PolicyResourceProperty("privateKey", "_mUnknown_PrivateKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrivateKey;
        private bool _mUnknown_PrivateKey;
        public string? PrivateKey
        {
            get
            {
                if (!_mUnknown_PrivateKey) return _mValue_PrivateKey;
                throw new UndeferrableValueException("Value 'KeyPair.PrivateKey' is not present");
            }
        }

        /// <summary>
        /// The public key material. This public key will be imported into Lightsail
        /// </summary>
        [PolicyResourceProperty("publicKey", "_mUnknown_PublicKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PublicKey;
        private bool _mUnknown_PublicKey;
        public string? PublicKey
        {
            get
            {
                if (!_mUnknown_PublicKey) return _mValue_PublicKey;
                throw new UndeferrableValueException("Value 'KeyPair.PublicKey' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the collection. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// 
        /// &gt; **NOTE:** a PGP key is not required, however it is strongly encouraged. Without a PGP key, the private key material will be stored in state unencrypted.`pgp_key` is ignored if `public_key` is supplied.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'KeyPair.Tags' is not present");
            }
        }

        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'KeyPair.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:lightsail/keyPair:KeyPair")]
    public sealed class KeyPairArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The name of the Lightsail Key Pair. If omitted, a unique name will be generated by this provider
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'KeyPairArgs.Name' is not present");
            }
        }

        [PolicyResourceProperty("namePrefix", "_mUnknown_NamePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamePrefix;
        private bool _mUnknown_NamePrefix;
        public string? NamePrefix
        {
            get
            {
                if (!_mUnknown_NamePrefix) return _mValue_NamePrefix;
                throw new UndeferrableValueException("Value 'KeyPairArgs.NamePrefix' is not present");
            }
        }

        /// <summary>
        /// An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair
        /// </summary>
        [PolicyResourceProperty("pgpKey", "_mUnknown_PgpKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PgpKey;
        private bool _mUnknown_PgpKey;
        public string? PgpKey
        {
            get
            {
                if (!_mUnknown_PgpKey) return _mValue_PgpKey;
                throw new UndeferrableValueException("Value 'KeyPairArgs.PgpKey' is not present");
            }
        }

        /// <summary>
        /// The public key material. This public key will be imported into Lightsail
        /// </summary>
        [PolicyResourceProperty("publicKey", "_mUnknown_PublicKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PublicKey;
        private bool _mUnknown_PublicKey;
        public string? PublicKey
        {
            get
            {
                if (!_mUnknown_PublicKey) return _mValue_PublicKey;
                throw new UndeferrableValueException("Value 'KeyPairArgs.PublicKey' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the collection. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// 
        /// &gt; **NOTE:** a PGP key is not required, however it is strongly encouraged. Without a PGP key, the private key material will be stored in state unencrypted.`pgp_key` is ignored if `public_key` is supplied.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'KeyPairArgs.Tags' is not present");
            }
        }
    }
}
