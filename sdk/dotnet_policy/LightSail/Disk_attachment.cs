// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.LightSail
{
    [PolicyResourceType("aws:lightsail/disk_attachment:Disk_attachment")]
    public sealed class Disk_attachment : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The name of the Lightsail Disk.
        /// </summary>
        [PolicyResourceProperty("diskName", "_mUnknown_DiskName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DiskName;
        private bool _mUnknown_DiskName;
        public string? DiskName
        {
            get
            {
                if (!_mUnknown_DiskName) return _mValue_DiskName;
                throw new UndeferrableValueException("Value 'Disk_attachment.DiskName' is not present");
            }
        }

        /// <summary>
        /// The disk path to expose to the instance.
        /// </summary>
        [PolicyResourceProperty("diskPath", "_mUnknown_DiskPath")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DiskPath;
        private bool _mUnknown_DiskPath;
        public string? DiskPath
        {
            get
            {
                if (!_mUnknown_DiskPath) return _mValue_DiskPath;
                throw new UndeferrableValueException("Value 'Disk_attachment.DiskPath' is not present");
            }
        }

        /// <summary>
        /// The name of the Lightsail Instance to attach to.
        /// </summary>
        [PolicyResourceProperty("instanceName", "_mUnknown_InstanceName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceName;
        private bool _mUnknown_InstanceName;
        public string? InstanceName
        {
            get
            {
                if (!_mUnknown_InstanceName) return _mValue_InstanceName;
                throw new UndeferrableValueException("Value 'Disk_attachment.InstanceName' is not present");
            }
        }
    }

    [PolicyResourceType("aws:lightsail/disk_attachment:Disk_attachment")]
    public sealed class Disk_attachmentArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The name of the Lightsail Disk.
        /// </summary>
        [PolicyResourceProperty("diskName", "_mUnknown_DiskName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DiskName;
        private bool _mUnknown_DiskName;
        public string? DiskName
        {
            get
            {
                if (!_mUnknown_DiskName) return _mValue_DiskName;
                throw new UndeferrableValueException("Value 'Disk_attachmentArgs.DiskName' is not present");
            }
        }

        /// <summary>
        /// The disk path to expose to the instance.
        /// </summary>
        [PolicyResourceProperty("diskPath", "_mUnknown_DiskPath")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DiskPath;
        private bool _mUnknown_DiskPath;
        public string? DiskPath
        {
            get
            {
                if (!_mUnknown_DiskPath) return _mValue_DiskPath;
                throw new UndeferrableValueException("Value 'Disk_attachmentArgs.DiskPath' is not present");
            }
        }

        /// <summary>
        /// The name of the Lightsail Instance to attach to.
        /// </summary>
        [PolicyResourceProperty("instanceName", "_mUnknown_InstanceName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceName;
        private bool _mUnknown_InstanceName;
        public string? InstanceName
        {
            get
            {
                if (!_mUnknown_InstanceName) return _mValue_InstanceName;
                throw new UndeferrableValueException("Value 'Disk_attachmentArgs.InstanceName' is not present");
            }
        }
    }
}
