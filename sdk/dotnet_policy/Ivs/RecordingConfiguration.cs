// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ivs
{
    [PolicyResourceType("aws:ivs/recordingConfiguration:RecordingConfiguration")]
    public sealed class RecordingConfiguration : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// ARN of the Recording Configuration.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'RecordingConfiguration.Arn' is not present");
            }
        }

        /// <summary>
        /// Object containing destination configuration for where recorded video will be stored.
        /// </summary>
        [PolicyResourceProperty("destinationConfiguration", "_mUnknown_DestinationConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RecordingConfigurationDestinationConfiguration? _mValue_DestinationConfiguration;
        private bool _mUnknown_DestinationConfiguration;
        public Outputs.RecordingConfigurationDestinationConfiguration? DestinationConfiguration
        {
            get
            {
                if (!_mUnknown_DestinationConfiguration) return _mValue_DestinationConfiguration;
                throw new UndeferrableValueException("Value 'RecordingConfiguration.DestinationConfiguration' is not present");
            }
        }

        /// <summary>
        /// Recording Configuration name.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'RecordingConfiguration.Name' is not present");
            }
        }

        /// <summary>
        /// If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
        /// </summary>
        [PolicyResourceProperty("recordingReconnectWindowSeconds", "_mUnknown_RecordingReconnectWindowSeconds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RecordingReconnectWindowSeconds;
        private bool _mUnknown_RecordingReconnectWindowSeconds;
        public int? RecordingReconnectWindowSeconds
        {
            get
            {
                if (!_mUnknown_RecordingReconnectWindowSeconds) return _mValue_RecordingReconnectWindowSeconds;
                throw new UndeferrableValueException("Value 'RecordingConfiguration.RecordingReconnectWindowSeconds' is not present");
            }
        }

        /// <summary>
        /// The current state of the Recording Configuration.
        /// </summary>
        [PolicyResourceProperty("state", "_mUnknown_State")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_State;
        private bool _mUnknown_State;
        public string? State
        {
            get
            {
                if (!_mUnknown_State) return _mValue_State;
                throw new UndeferrableValueException("Value 'RecordingConfiguration.State' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'RecordingConfiguration.Tags' is not present");
            }
        }

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'RecordingConfiguration.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
        /// </summary>
        [PolicyResourceProperty("thumbnailConfiguration", "_mUnknown_ThumbnailConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RecordingConfigurationThumbnailConfiguration? _mValue_ThumbnailConfiguration;
        private bool _mUnknown_ThumbnailConfiguration;
        public Outputs.RecordingConfigurationThumbnailConfiguration? ThumbnailConfiguration
        {
            get
            {
                if (!_mUnknown_ThumbnailConfiguration) return _mValue_ThumbnailConfiguration;
                throw new UndeferrableValueException("Value 'RecordingConfiguration.ThumbnailConfiguration' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ivs/recordingConfiguration:RecordingConfiguration")]
    public sealed class RecordingConfigurationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Object containing destination configuration for where recorded video will be stored.
        /// </summary>
        [PolicyResourceProperty("destinationConfiguration", "_mUnknown_DestinationConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.RecordingConfigurationDestinationConfigurationArgs? _mValue_DestinationConfiguration;
        private bool _mUnknown_DestinationConfiguration;
        public Inputs.RecordingConfigurationDestinationConfigurationArgs? DestinationConfiguration
        {
            get
            {
                if (!_mUnknown_DestinationConfiguration) return _mValue_DestinationConfiguration;
                throw new UndeferrableValueException("Value 'RecordingConfigurationArgs.DestinationConfiguration' is not present");
            }
        }

        /// <summary>
        /// Recording Configuration name.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'RecordingConfigurationArgs.Name' is not present");
            }
        }

        /// <summary>
        /// If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
        /// </summary>
        [PolicyResourceProperty("recordingReconnectWindowSeconds", "_mUnknown_RecordingReconnectWindowSeconds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RecordingReconnectWindowSeconds;
        private bool _mUnknown_RecordingReconnectWindowSeconds;
        public int? RecordingReconnectWindowSeconds
        {
            get
            {
                if (!_mUnknown_RecordingReconnectWindowSeconds) return _mValue_RecordingReconnectWindowSeconds;
                throw new UndeferrableValueException("Value 'RecordingConfigurationArgs.RecordingReconnectWindowSeconds' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'RecordingConfigurationArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
        /// </summary>
        [PolicyResourceProperty("thumbnailConfiguration", "_mUnknown_ThumbnailConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.RecordingConfigurationThumbnailConfigurationArgs? _mValue_ThumbnailConfiguration;
        private bool _mUnknown_ThumbnailConfiguration;
        public Inputs.RecordingConfigurationThumbnailConfigurationArgs? ThumbnailConfiguration
        {
            get
            {
                if (!_mUnknown_ThumbnailConfiguration) return _mValue_ThumbnailConfiguration;
                throw new UndeferrableValueException("Value 'RecordingConfigurationArgs.ThumbnailConfiguration' is not present");
            }
        }
    }
}
