// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudWatch
{
    [PolicyResourceType("aws:cloudwatch/eventRule:EventRule")]
    public sealed class EventRule : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the rule.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The description of the rule.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// The name or ARN of the event bus to associate with this rule.
        /// If you omit this, the `default` event bus is used.
        /// </summary>
        [Input("eventBusName")]
        public string? EventBusName;

        /// <summary>
        /// The event pattern described a JSON object. At least one of `schedule_expression` or `event_pattern` is required. See full documentation of [Events and Event Patterns in EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html) for details. **Note**: The event pattern size is 2048 by default but it is adjustable up to 4096 characters by submitting a service quota increase request. See [Amazon EventBridge quotas](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-quota.html) for details.
        /// </summary>
        [Input("eventPattern")]
        public string? EventPattern;

        /// <summary>
        /// Used to delete managed rules created by AWS. Defaults to `false`.
        /// </summary>
        [Input("forceDestroy")]
        public bool? ForceDestroy;

        /// <summary>
        /// Whether the rule should be enabled.
        /// Defaults to `true`.
        /// Conflicts with `state`.
        /// </summary>
        [Input("isEnabled")]
        public bool? IsEnabled;

        /// <summary>
        /// The name of the rule. If omitted, this provider will assign a random, unique name. Conflicts with `name_prefix`.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`. **Note**: Due to the length of the generated suffix, must be 38 characters or less.
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix;

        /// <summary>
        /// The Amazon Resource Name (ARN) associated with the role that is used for target invocation.
        /// </summary>
        [Input("roleArn")]
        public string? RoleArn;

        /// <summary>
        /// The scheduling expression. For example, `cron(0 20 * * ? *)` or `rate(5 minutes)`. At least one of `schedule_expression` or `event_pattern` is required. Can only be used on the default event bus. For more information, refer to the AWS documentation [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
        /// </summary>
        [Input("scheduleExpression")]
        public string? ScheduleExpression;

        /// <summary>
        /// State of the rule.
        /// Valid values are `DISABLED`, `ENABLED`, and `ENABLED_WITH_ALL_CLOUDTRAIL_MANAGEMENT_EVENTS`.
        /// When state is `ENABLED`, the rule is enabled for all events except those delivered by CloudTrail.
        /// To also enable the rule for events delivered by CloudTrail, set `state` to `ENABLED_WITH_ALL_CLOUDTRAIL_MANAGEMENT_EVENTS`.
        /// Defaults to `ENABLED`.
        /// Conflicts with `is_enabled`.
        /// 
        /// **NOTE:** The rule state  `ENABLED_WITH_ALL_CLOUDTRAIL_MANAGEMENT_EVENTS` cannot be used in conjunction with the `schedule_expression` argument.
        /// </summary>
        [Input("state")]
        public string? State;

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
