// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudWatch
{
    [PolicyResourceType("aws:cloudwatch/logAccountPolicy:LogAccountPolicy")]
    public sealed class LogAccountPolicy : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Text of the account policy. Refer to the [AWS docs](https://docs.aws.amazon.com/cli/latest/reference/logs/put-account-policy.html) for more information.
        /// </summary>
        [PolicyResourceProperty("policyDocument", "_mUnknown_PolicyDocument")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyDocument;
        private bool _mUnknown_PolicyDocument;
        public string? PolicyDocument
        {
            get
            {
                if (!_mUnknown_PolicyDocument) return _mValue_PolicyDocument;
                throw new UndeferrableValueException("Value 'LogAccountPolicy.PolicyDocument' is not present");
            }
        }

        /// <summary>
        /// Name of the account policy.
        /// </summary>
        [PolicyResourceProperty("policyName", "_mUnknown_PolicyName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyName;
        private bool _mUnknown_PolicyName;
        public string? PolicyName
        {
            get
            {
                if (!_mUnknown_PolicyName) return _mValue_PolicyName;
                throw new UndeferrableValueException("Value 'LogAccountPolicy.PolicyName' is not present");
            }
        }

        /// <summary>
        /// Type of account policy. One of `DATA_PROTECTION_POLICY`, `SUBSCRIPTION_FILTER_POLICY`, `FIELD_INDEX_POLICY` or `TRANSFORMER_POLICY`. You can have one account policy per type in an account.
        /// </summary>
        [PolicyResourceProperty("policyType", "_mUnknown_PolicyType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyType;
        private bool _mUnknown_PolicyType;
        public string? PolicyType
        {
            get
            {
                if (!_mUnknown_PolicyType) return _mValue_PolicyType;
                throw new UndeferrableValueException("Value 'LogAccountPolicy.PolicyType' is not present");
            }
        }

        /// <summary>
        /// Currently defaults to and only accepts the value: `ALL`.
        /// </summary>
        [PolicyResourceProperty("scope", "_mUnknown_Scope")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Scope;
        private bool _mUnknown_Scope;
        public string? Scope
        {
            get
            {
                if (!_mUnknown_Scope) return _mValue_Scope;
                throw new UndeferrableValueException("Value 'LogAccountPolicy.Scope' is not present");
            }
        }

        /// <summary>
        /// Criteria for applying a subscription filter policy to a selection of log groups. The only allowable criteria selector is `LogGroupName NOT IN []`.
        /// </summary>
        [PolicyResourceProperty("selectionCriteria", "_mUnknown_SelectionCriteria")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SelectionCriteria;
        private bool _mUnknown_SelectionCriteria;
        public string? SelectionCriteria
        {
            get
            {
                if (!_mUnknown_SelectionCriteria) return _mValue_SelectionCriteria;
                throw new UndeferrableValueException("Value 'LogAccountPolicy.SelectionCriteria' is not present");
            }
        }
    }

    [PolicyResourceType("aws:cloudwatch/logAccountPolicy:LogAccountPolicy")]
    public sealed class LogAccountPolicyArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Text of the account policy. Refer to the [AWS docs](https://docs.aws.amazon.com/cli/latest/reference/logs/put-account-policy.html) for more information.
        /// </summary>
        [PolicyResourceProperty("policyDocument", "_mUnknown_PolicyDocument")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyDocument;
        private bool _mUnknown_PolicyDocument;
        public string? PolicyDocument
        {
            get
            {
                if (!_mUnknown_PolicyDocument) return _mValue_PolicyDocument;
                throw new UndeferrableValueException("Value 'LogAccountPolicyArgs.PolicyDocument' is not present");
            }
        }

        /// <summary>
        /// Name of the account policy.
        /// </summary>
        [PolicyResourceProperty("policyName", "_mUnknown_PolicyName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyName;
        private bool _mUnknown_PolicyName;
        public string? PolicyName
        {
            get
            {
                if (!_mUnknown_PolicyName) return _mValue_PolicyName;
                throw new UndeferrableValueException("Value 'LogAccountPolicyArgs.PolicyName' is not present");
            }
        }

        /// <summary>
        /// Type of account policy. One of `DATA_PROTECTION_POLICY`, `SUBSCRIPTION_FILTER_POLICY`, `FIELD_INDEX_POLICY` or `TRANSFORMER_POLICY`. You can have one account policy per type in an account.
        /// </summary>
        [PolicyResourceProperty("policyType", "_mUnknown_PolicyType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyType;
        private bool _mUnknown_PolicyType;
        public string? PolicyType
        {
            get
            {
                if (!_mUnknown_PolicyType) return _mValue_PolicyType;
                throw new UndeferrableValueException("Value 'LogAccountPolicyArgs.PolicyType' is not present");
            }
        }

        /// <summary>
        /// Currently defaults to and only accepts the value: `ALL`.
        /// </summary>
        [PolicyResourceProperty("scope", "_mUnknown_Scope")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Scope;
        private bool _mUnknown_Scope;
        public string? Scope
        {
            get
            {
                if (!_mUnknown_Scope) return _mValue_Scope;
                throw new UndeferrableValueException("Value 'LogAccountPolicyArgs.Scope' is not present");
            }
        }

        /// <summary>
        /// Criteria for applying a subscription filter policy to a selection of log groups. The only allowable criteria selector is `LogGroupName NOT IN []`.
        /// </summary>
        [PolicyResourceProperty("selectionCriteria", "_mUnknown_SelectionCriteria")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SelectionCriteria;
        private bool _mUnknown_SelectionCriteria;
        public string? SelectionCriteria
        {
            get
            {
                if (!_mUnknown_SelectionCriteria) return _mValue_SelectionCriteria;
                throw new UndeferrableValueException("Value 'LogAccountPolicyArgs.SelectionCriteria' is not present");
            }
        }
    }
}
