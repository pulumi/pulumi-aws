// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudWatch
{
    [PolicyResourceType("aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter")]
    public sealed class LogSubscriptionFilter : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
        /// </summary>
        [PolicyResourceProperty("destinationArn", "_mUnknown_DestinationArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DestinationArn;
        private bool _mUnknown_DestinationArn;
        public string? DestinationArn
        {
            get
            {
                if (!_mUnknown_DestinationArn) return _mValue_DestinationArn;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilter.DestinationArn' is not present");
            }
        }

        /// <summary>
        /// The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
        /// </summary>
        [PolicyResourceProperty("distribution", "_mUnknown_Distribution")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Distribution;
        private bool _mUnknown_Distribution;
        public string? Distribution
        {
            get
            {
                if (!_mUnknown_Distribution) return _mValue_Distribution;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilter.Distribution' is not present");
            }
        }

        /// <summary>
        /// A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events. Use empty string `""` to match everything. For more information, see the [Amazon CloudWatch Logs User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        /// </summary>
        [PolicyResourceProperty("filterPattern", "_mUnknown_FilterPattern")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FilterPattern;
        private bool _mUnknown_FilterPattern;
        public string? FilterPattern
        {
            get
            {
                if (!_mUnknown_FilterPattern) return _mValue_FilterPattern;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilter.FilterPattern' is not present");
            }
        }

        /// <summary>
        /// The name of the log group to associate the subscription filter with
        /// </summary>
        [PolicyResourceProperty("logGroup", "_mUnknown_LogGroup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LogGroup;
        private bool _mUnknown_LogGroup;
        public string? LogGroup
        {
            get
            {
                if (!_mUnknown_LogGroup) return _mValue_LogGroup;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilter.LogGroup' is not present");
            }
        }

        /// <summary>
        /// A name for the subscription filter
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilter.Name' is not present");
            }
        }

        /// <summary>
        /// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `aws.lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
        /// </summary>
        [PolicyResourceProperty("roleArn", "_mUnknown_RoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoleArn;
        private bool _mUnknown_RoleArn;
        public string? RoleArn
        {
            get
            {
                if (!_mUnknown_RoleArn) return _mValue_RoleArn;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilter.RoleArn' is not present");
            }
        }
    }

    [PolicyResourceType("aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter")]
    public sealed class LogSubscriptionFilterArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
        /// </summary>
        [PolicyResourceProperty("destinationArn", "_mUnknown_DestinationArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DestinationArn;
        private bool _mUnknown_DestinationArn;
        public string? DestinationArn
        {
            get
            {
                if (!_mUnknown_DestinationArn) return _mValue_DestinationArn;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilterArgs.DestinationArn' is not present");
            }
        }

        /// <summary>
        /// The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
        /// </summary>
        [PolicyResourceProperty("distribution", "_mUnknown_Distribution")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Distribution;
        private bool _mUnknown_Distribution;
        public string? Distribution
        {
            get
            {
                if (!_mUnknown_Distribution) return _mValue_Distribution;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilterArgs.Distribution' is not present");
            }
        }

        /// <summary>
        /// A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events. Use empty string `""` to match everything. For more information, see the [Amazon CloudWatch Logs User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        /// </summary>
        [PolicyResourceProperty("filterPattern", "_mUnknown_FilterPattern")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FilterPattern;
        private bool _mUnknown_FilterPattern;
        public string? FilterPattern
        {
            get
            {
                if (!_mUnknown_FilterPattern) return _mValue_FilterPattern;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilterArgs.FilterPattern' is not present");
            }
        }

        /// <summary>
        /// The name of the log group to associate the subscription filter with
        /// </summary>
        [PolicyResourceProperty("logGroup", "_mUnknown_LogGroup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LogGroup;
        private bool _mUnknown_LogGroup;
        public string? LogGroup
        {
            get
            {
                if (!_mUnknown_LogGroup) return _mValue_LogGroup;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilterArgs.LogGroup' is not present");
            }
        }

        /// <summary>
        /// A name for the subscription filter
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilterArgs.Name' is not present");
            }
        }

        /// <summary>
        /// The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `aws.lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
        /// </summary>
        [PolicyResourceProperty("roleArn", "_mUnknown_RoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoleArn;
        private bool _mUnknown_RoleArn;
        public string? RoleArn
        {
            get
            {
                if (!_mUnknown_RoleArn) return _mValue_RoleArn;
                throw new UndeferrableValueException("Value 'LogSubscriptionFilterArgs.RoleArn' is not present");
            }
        }
    }
}
