// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudWatch
{
    [PolicyResourceType("aws:cloudwatch/eventPermission:EventPermission")]
    public sealed class EventPermission : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
        /// </summary>
        [PolicyResourceProperty("action", "_mUnknown_Action")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Action;
        private bool _mUnknown_Action;
        public string? Action
        {
            get
            {
                if (!_mUnknown_Action) return _mValue_Action;
                throw new UndeferrableValueException("Value 'EventPermission.Action' is not present");
            }
        }

        /// <summary>
        /// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
        /// </summary>
        [PolicyResourceProperty("condition", "_mUnknown_Condition")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.EventPermissionCondition? _mValue_Condition;
        private bool _mUnknown_Condition;
        public Outputs.EventPermissionCondition? Condition
        {
            get
            {
                if (!_mUnknown_Condition) return _mValue_Condition;
                throw new UndeferrableValueException("Value 'EventPermission.Condition' is not present");
            }
        }

        /// <summary>
        /// The name of the event bus to set the permissions on.
        /// If you omit this, the permissions are set on the `default` event bus.
        /// </summary>
        [PolicyResourceProperty("eventBusName", "_mUnknown_EventBusName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EventBusName;
        private bool _mUnknown_EventBusName;
        public string? EventBusName
        {
            get
            {
                if (!_mUnknown_EventBusName) return _mValue_EventBusName;
                throw new UndeferrableValueException("Value 'EventPermission.EventBusName' is not present");
            }
        }

        /// <summary>
        /// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
        /// </summary>
        [PolicyResourceProperty("principal", "_mUnknown_Principal")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Principal;
        private bool _mUnknown_Principal;
        public string? Principal
        {
            get
            {
                if (!_mUnknown_Principal) return _mValue_Principal;
                throw new UndeferrableValueException("Value 'EventPermission.Principal' is not present");
            }
        }

        /// <summary>
        /// An identifier string for the external account that you are granting permissions to.
        /// </summary>
        [PolicyResourceProperty("statementId", "_mUnknown_StatementId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StatementId;
        private bool _mUnknown_StatementId;
        public string? StatementId
        {
            get
            {
                if (!_mUnknown_StatementId) return _mValue_StatementId;
                throw new UndeferrableValueException("Value 'EventPermission.StatementId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:cloudwatch/eventPermission:EventPermission")]
    public sealed class EventPermissionArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
        /// </summary>
        [PolicyResourceProperty("action", "_mUnknown_Action")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Action;
        private bool _mUnknown_Action;
        public string? Action
        {
            get
            {
                if (!_mUnknown_Action) return _mValue_Action;
                throw new UndeferrableValueException("Value 'EventPermissionArgs.Action' is not present");
            }
        }

        /// <summary>
        /// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
        /// </summary>
        [PolicyResourceProperty("condition", "_mUnknown_Condition")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.EventPermissionConditionArgs? _mValue_Condition;
        private bool _mUnknown_Condition;
        public Inputs.EventPermissionConditionArgs? Condition
        {
            get
            {
                if (!_mUnknown_Condition) return _mValue_Condition;
                throw new UndeferrableValueException("Value 'EventPermissionArgs.Condition' is not present");
            }
        }

        /// <summary>
        /// The name of the event bus to set the permissions on.
        /// If you omit this, the permissions are set on the `default` event bus.
        /// </summary>
        [PolicyResourceProperty("eventBusName", "_mUnknown_EventBusName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EventBusName;
        private bool _mUnknown_EventBusName;
        public string? EventBusName
        {
            get
            {
                if (!_mUnknown_EventBusName) return _mValue_EventBusName;
                throw new UndeferrableValueException("Value 'EventPermissionArgs.EventBusName' is not present");
            }
        }

        /// <summary>
        /// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
        /// </summary>
        [PolicyResourceProperty("principal", "_mUnknown_Principal")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Principal;
        private bool _mUnknown_Principal;
        public string? Principal
        {
            get
            {
                if (!_mUnknown_Principal) return _mValue_Principal;
                throw new UndeferrableValueException("Value 'EventPermissionArgs.Principal' is not present");
            }
        }

        /// <summary>
        /// An identifier string for the external account that you are granting permissions to.
        /// </summary>
        [PolicyResourceProperty("statementId", "_mUnknown_StatementId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StatementId;
        private bool _mUnknown_StatementId;
        public string? StatementId
        {
            get
            {
                if (!_mUnknown_StatementId) return _mValue_StatementId;
                throw new UndeferrableValueException("Value 'EventPermissionArgs.StatementId' is not present");
            }
        }
    }
}
