// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudWatch
{
    [PolicyResourceType("aws:cloudwatch/logDeliveryDestination:LogDeliveryDestination")]
    public sealed class LogDeliveryDestination : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the delivery destination.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The AWS resource that will receive the logs.
        /// </summary>
        [Input("deliveryDestinationConfiguration")]
        public LogDeliveryDestinationDeliveryDestinationConfiguration? DeliveryDestinationConfiguration;

        /// <summary>
        /// Whether this delivery destination is CloudWatch Logs, Amazon S3, or Firehose.
        /// </summary>
        [Input("deliveryDestinationType")]
        public string? DeliveryDestinationType;

        /// <summary>
        /// The name for this delivery destination.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
        /// </summary>
        [Input("outputFormat")]
        public string? OutputFormat;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
