// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudWatch
{
    [PolicyResourceType("aws:cloudwatch/logDeliverySource:LogDeliverySource")]
    public sealed class LogDeliverySource : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the delivery source.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'LogDeliverySource.Arn' is not present");
            }
        }

        /// <summary>
        /// The type of log that the source is sending. For Amazon Bedrock, the valid value is `APPLICATION_LOGS`. For Amazon CodeWhisperer, the valid value is `EVENT_LOGS`. For IAM Identity Center, the valid value is `ERROR_LOGS`. For Amazon WorkMail, the valid values are `ACCESS_CONTROL_LOGS`, `AUTHENTICATION_LOGS`, `WORKMAIL_AVAILABILITY_PROVIDER_LOGS`, and `WORKMAIL_MAILBOX_ACCESS_LOGS`.
        /// </summary>
        [PolicyResourceProperty("logType", "_mUnknown_LogType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LogType;
        private bool _mUnknown_LogType;
        public string? LogType
        {
            get
            {
                if (!_mUnknown_LogType) return _mValue_LogType;
                throw new UndeferrableValueException("Value 'LogDeliverySource.LogType' is not present");
            }
        }

        /// <summary>
        /// The name for this delivery source.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'LogDeliverySource.Name' is not present");
            }
        }

        /// <summary>
        /// The ARN of the AWS resource that is generating and sending logs.
        /// </summary>
        [PolicyResourceProperty("resourceArn", "_mUnknown_ResourceArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ResourceArn;
        private bool _mUnknown_ResourceArn;
        public string? ResourceArn
        {
            get
            {
                if (!_mUnknown_ResourceArn) return _mValue_ResourceArn;
                throw new UndeferrableValueException("Value 'LogDeliverySource.ResourceArn' is not present");
            }
        }

        /// <summary>
        /// The AWS service that is sending logs.
        /// </summary>
        [PolicyResourceProperty("service", "_mUnknown_Service")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Service;
        private bool _mUnknown_Service;
        public string? Service
        {
            get
            {
                if (!_mUnknown_Service) return _mValue_Service;
                throw new UndeferrableValueException("Value 'LogDeliverySource.Service' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'LogDeliverySource.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'LogDeliverySource.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:cloudwatch/logDeliverySource:LogDeliverySource")]
    public sealed class LogDeliverySourceArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The type of log that the source is sending. For Amazon Bedrock, the valid value is `APPLICATION_LOGS`. For Amazon CodeWhisperer, the valid value is `EVENT_LOGS`. For IAM Identity Center, the valid value is `ERROR_LOGS`. For Amazon WorkMail, the valid values are `ACCESS_CONTROL_LOGS`, `AUTHENTICATION_LOGS`, `WORKMAIL_AVAILABILITY_PROVIDER_LOGS`, and `WORKMAIL_MAILBOX_ACCESS_LOGS`.
        /// </summary>
        [PolicyResourceProperty("logType", "_mUnknown_LogType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LogType;
        private bool _mUnknown_LogType;
        public string? LogType
        {
            get
            {
                if (!_mUnknown_LogType) return _mValue_LogType;
                throw new UndeferrableValueException("Value 'LogDeliverySourceArgs.LogType' is not present");
            }
        }

        /// <summary>
        /// The name for this delivery source.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'LogDeliverySourceArgs.Name' is not present");
            }
        }

        /// <summary>
        /// The ARN of the AWS resource that is generating and sending logs.
        /// </summary>
        [PolicyResourceProperty("resourceArn", "_mUnknown_ResourceArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ResourceArn;
        private bool _mUnknown_ResourceArn;
        public string? ResourceArn
        {
            get
            {
                if (!_mUnknown_ResourceArn) return _mValue_ResourceArn;
                throw new UndeferrableValueException("Value 'LogDeliverySourceArgs.ResourceArn' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'LogDeliverySourceArgs.Tags' is not present");
            }
        }
    }
}
