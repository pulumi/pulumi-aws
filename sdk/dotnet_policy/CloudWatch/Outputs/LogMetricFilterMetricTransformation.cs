// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudWatch.Outputs
{
    public sealed class LogMetricFilterMetricTransformation
    {
        /// <summary>
        /// The value to emit when a filter pattern does not match a log event. Conflicts with `dimensions`.
        /// </summary>
        [PolicyResourceProperty("defaultValue", "_mUnknown_DefaultValue")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultValue;
        private bool _mUnknown_DefaultValue;
        public string? DefaultValue
        {
            get
            {
                if (!_mUnknown_DefaultValue) return _mValue_DefaultValue;
                throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.DefaultValue' is not present");
            }
        }

        /// <summary>
        /// Map of fields to use as dimensions for the metric. Up to 3 dimensions are allowed. Conflicts with `default_value`.
        /// </summary>
        [PolicyResourceProperty("dimensions", "_mUnknown_Dimensions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Dimensions;
        private bool _mUnknown_Dimensions;
        public Dictionary<string, string>? Dimensions
        {
            get
            {
                if (!_mUnknown_Dimensions) return _mValue_Dimensions;
                throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.Dimensions' is not present");
            }
        }

        /// <summary>
        /// The name of the CloudWatch metric to which the monitored log information should be published (e.g., `ErrorCount`)
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.Name' is not present");
            }
        }

        /// <summary>
        /// The destination namespace of the CloudWatch metric.
        /// </summary>
        [PolicyResourceProperty("namespace", "_mUnknown_Namespace")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Namespace;
        private bool _mUnknown_Namespace;
        public string? Namespace
        {
            get
            {
                if (!_mUnknown_Namespace) return _mValue_Namespace;
                throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.Namespace' is not present");
            }
        }

        /// <summary>
        /// The unit to assign to the metric. If you omit this, the unit is set as `None`.
        /// </summary>
        [PolicyResourceProperty("unit", "_mUnknown_Unit")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Unit;
        private bool _mUnknown_Unit;
        public string? Unit
        {
            get
            {
                if (!_mUnknown_Unit) return _mValue_Unit;
                throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.Unit' is not present");
            }
        }

        /// <summary>
        /// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
        /// </summary>
        [PolicyResourceProperty("value", "_mUnknown_Value")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Value;
        private bool _mUnknown_Value;
        public string? Value
        {
            get
            {
                if (!_mUnknown_Value) return _mValue_Value;
                throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.Value' is not present");
            }
        }
    }
}
