// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudWatch
{
    [PolicyResourceType("aws:cloudwatch/compositeAlarm:CompositeAlarm")]
    public sealed class CompositeAlarm : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
        /// </summary>
        [Input("actionsEnabled")]
        public bool? ActionsEnabled;

        /// <summary>
        /// Actions will be suppressed if the suppressor alarm is in the ALARM state.
        /// </summary>
        [Input("actionsSuppressor")]
        public CompositeAlarmActionsSuppressor? ActionsSuppressor;

        /// <summary>
        /// The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
        /// </summary>
        [Input("alarmActions")]
        public List<string>? AlarmActions;

        /// <summary>
        /// The description for the composite alarm.
        /// </summary>
        [Input("alarmDescription")]
        public string? AlarmDescription;

        /// <summary>
        /// The name for the composite alarm. This name must be unique within the region.
        /// </summary>
        [Input("alarmName")]
        public string? AlarmName;

        /// <summary>
        /// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
        /// </summary>
        [Input("alarmRule")]
        public string? AlarmRule;

        /// <summary>
        /// The ARN of the composite alarm.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
        /// </summary>
        [Input("insufficientDataActions")]
        public List<string>? InsufficientDataActions;

        /// <summary>
        /// The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
        /// </summary>
        [Input("okActions")]
        public List<string>? OkActions;

        /// <summary>
        /// A map of tags to associate with the alarm. Up to 50 tags are allowed. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
