// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudWatch
{
    [PolicyResourceType("aws:cloudwatch/logGroup:LogGroup")]
    public sealed class LogGroup : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) specifying the log group. Any `:*` suffix added by the API, denoting all CloudWatch Log Streams under the CloudWatch Log Group, is removed for greater compatibility with other AWS services that do not accept the suffix.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'LogGroup.Arn' is not present");
            }
        }

        /// <summary>
        /// The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group,
        /// AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires
        /// permissions for the CMK whenever the encrypted data is requested.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'LogGroup.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// Specified the log class of the log group. Possible values are: `STANDARD` or `INFREQUENT_ACCESS`.
        /// </summary>
        [PolicyResourceProperty("logGroupClass", "_mUnknown_LogGroupClass")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LogGroupClass;
        private bool _mUnknown_LogGroupClass;
        public string? LogGroupClass
        {
            get
            {
                if (!_mUnknown_LogGroupClass) return _mValue_LogGroupClass;
                throw new UndeferrableValueException("Value 'LogGroup.LogGroupClass' is not present");
            }
        }

        /// <summary>
        /// The name of the log group. If omitted, this provider will assign a random, unique name.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'LogGroup.Name' is not present");
            }
        }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [PolicyResourceProperty("namePrefix", "_mUnknown_NamePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamePrefix;
        private bool _mUnknown_NamePrefix;
        public string? NamePrefix
        {
            get
            {
                if (!_mUnknown_NamePrefix) return _mValue_NamePrefix;
                throw new UndeferrableValueException("Value 'LogGroup.NamePrefix' is not present");
            }
        }

        /// <summary>
        /// Specifies the number of days
        /// you want to retain log events in the specified log group.  Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, 3653, and 0.
        /// If you select 0, the events in the log group are always retained and never expire.
        /// </summary>
        [PolicyResourceProperty("retentionInDays", "_mUnknown_RetentionInDays")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RetentionInDays;
        private bool _mUnknown_RetentionInDays;
        public int? RetentionInDays
        {
            get
            {
                if (!_mUnknown_RetentionInDays) return _mValue_RetentionInDays;
                throw new UndeferrableValueException("Value 'LogGroup.RetentionInDays' is not present");
            }
        }

        /// <summary>
        /// Set to true if you do not wish the log group (and any logs it may contain) to be deleted at destroy time, and instead just remove the log group from the state.
        /// </summary>
        [PolicyResourceProperty("skipDestroy", "_mUnknown_SkipDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SkipDestroy;
        private bool _mUnknown_SkipDestroy;
        public bool? SkipDestroy
        {
            get
            {
                if (!_mUnknown_SkipDestroy) return _mValue_SkipDestroy;
                throw new UndeferrableValueException("Value 'LogGroup.SkipDestroy' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'LogGroup.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'LogGroup.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:cloudwatch/logGroup:LogGroup")]
    public sealed class LogGroupArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group,
        /// AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires
        /// permissions for the CMK whenever the encrypted data is requested.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'LogGroupArgs.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// Specified the log class of the log group. Possible values are: `STANDARD` or `INFREQUENT_ACCESS`.
        /// </summary>
        [PolicyResourceProperty("logGroupClass", "_mUnknown_LogGroupClass")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LogGroupClass;
        private bool _mUnknown_LogGroupClass;
        public string? LogGroupClass
        {
            get
            {
                if (!_mUnknown_LogGroupClass) return _mValue_LogGroupClass;
                throw new UndeferrableValueException("Value 'LogGroupArgs.LogGroupClass' is not present");
            }
        }

        /// <summary>
        /// The name of the log group. If omitted, this provider will assign a random, unique name.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'LogGroupArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [PolicyResourceProperty("namePrefix", "_mUnknown_NamePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamePrefix;
        private bool _mUnknown_NamePrefix;
        public string? NamePrefix
        {
            get
            {
                if (!_mUnknown_NamePrefix) return _mValue_NamePrefix;
                throw new UndeferrableValueException("Value 'LogGroupArgs.NamePrefix' is not present");
            }
        }

        /// <summary>
        /// Specifies the number of days
        /// you want to retain log events in the specified log group.  Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, 3653, and 0.
        /// If you select 0, the events in the log group are always retained and never expire.
        /// </summary>
        [PolicyResourceProperty("retentionInDays", "_mUnknown_RetentionInDays")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RetentionInDays;
        private bool _mUnknown_RetentionInDays;
        public int? RetentionInDays
        {
            get
            {
                if (!_mUnknown_RetentionInDays) return _mValue_RetentionInDays;
                throw new UndeferrableValueException("Value 'LogGroupArgs.RetentionInDays' is not present");
            }
        }

        /// <summary>
        /// Set to true if you do not wish the log group (and any logs it may contain) to be deleted at destroy time, and instead just remove the log group from the state.
        /// </summary>
        [PolicyResourceProperty("skipDestroy", "_mUnknown_SkipDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SkipDestroy;
        private bool _mUnknown_SkipDestroy;
        public bool? SkipDestroy
        {
            get
            {
                if (!_mUnknown_SkipDestroy) return _mValue_SkipDestroy;
                throw new UndeferrableValueException("Value 'LogGroupArgs.SkipDestroy' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'LogGroupArgs.Tags' is not present");
            }
        }
    }
}
