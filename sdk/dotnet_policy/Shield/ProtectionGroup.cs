// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Shield
{
    [PolicyResourceType("aws:shield/protectionGroup:ProtectionGroup")]
    public sealed class ProtectionGroup : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Defines how AWS Shield combines resource data for the group in order to detect, mitigate, and report events.
        /// </summary>
        [PolicyResourceProperty("aggregation", "_mUnknown_Aggregation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Aggregation;
        private bool _mUnknown_Aggregation;
        public string? Aggregation
        {
            get
            {
                if (!_mUnknown_Aggregation) return _mValue_Aggregation;
                throw new UndeferrableValueException("Value 'ProtectionGroup.Aggregation' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Names (ARNs) of the resources to include in the protection group. You must set this when you set `pattern` to ARBITRARY and you must not set it for any other `pattern` setting.
        /// </summary>
        [PolicyResourceProperty("members", "_mUnknown_Members")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Members;
        private bool _mUnknown_Members;
        public List<string>? Members
        {
            get
            {
                if (!_mUnknown_Members) return _mValue_Members;
                throw new UndeferrableValueException("Value 'ProtectionGroup.Members' is not present");
            }
        }

        /// <summary>
        /// The criteria to use to choose the protected resources for inclusion in the group.
        /// </summary>
        [PolicyResourceProperty("pattern", "_mUnknown_Pattern")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Pattern;
        private bool _mUnknown_Pattern;
        public string? Pattern
        {
            get
            {
                if (!_mUnknown_Pattern) return _mValue_Pattern;
                throw new UndeferrableValueException("Value 'ProtectionGroup.Pattern' is not present");
            }
        }

        /// <summary>
        /// The ARN (Amazon Resource Name) of the protection group.
        /// </summary>
        [PolicyResourceProperty("protectionGroupArn", "_mUnknown_ProtectionGroupArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ProtectionGroupArn;
        private bool _mUnknown_ProtectionGroupArn;
        public string? ProtectionGroupArn
        {
            get
            {
                if (!_mUnknown_ProtectionGroupArn) return _mValue_ProtectionGroupArn;
                throw new UndeferrableValueException("Value 'ProtectionGroup.ProtectionGroupArn' is not present");
            }
        }

        /// <summary>
        /// The name of the protection group.
        /// </summary>
        [PolicyResourceProperty("protectionGroupId", "_mUnknown_ProtectionGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ProtectionGroupId;
        private bool _mUnknown_ProtectionGroupId;
        public string? ProtectionGroupId
        {
            get
            {
                if (!_mUnknown_ProtectionGroupId) return _mValue_ProtectionGroupId;
                throw new UndeferrableValueException("Value 'ProtectionGroup.ProtectionGroupId' is not present");
            }
        }

        /// <summary>
        /// The resource type to include in the protection group. You must set this when you set `pattern` to BY_RESOURCE_TYPE and you must not set it for any other `pattern` setting.
        /// </summary>
        [PolicyResourceProperty("resourceType", "_mUnknown_ResourceType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ResourceType;
        private bool _mUnknown_ResourceType;
        public string? ResourceType
        {
            get
            {
                if (!_mUnknown_ResourceType) return _mValue_ResourceType;
                throw new UndeferrableValueException("Value 'ProtectionGroup.ResourceType' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ProtectionGroup.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'ProtectionGroup.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:shield/protectionGroup:ProtectionGroup")]
    public sealed class ProtectionGroupArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Defines how AWS Shield combines resource data for the group in order to detect, mitigate, and report events.
        /// </summary>
        [PolicyResourceProperty("aggregation", "_mUnknown_Aggregation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Aggregation;
        private bool _mUnknown_Aggregation;
        public string? Aggregation
        {
            get
            {
                if (!_mUnknown_Aggregation) return _mValue_Aggregation;
                throw new UndeferrableValueException("Value 'ProtectionGroupArgs.Aggregation' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Names (ARNs) of the resources to include in the protection group. You must set this when you set `pattern` to ARBITRARY and you must not set it for any other `pattern` setting.
        /// </summary>
        [PolicyResourceProperty("members", "_mUnknown_Members")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Members;
        private bool _mUnknown_Members;
        public List<string>? Members
        {
            get
            {
                if (!_mUnknown_Members) return _mValue_Members;
                throw new UndeferrableValueException("Value 'ProtectionGroupArgs.Members' is not present");
            }
        }

        /// <summary>
        /// The criteria to use to choose the protected resources for inclusion in the group.
        /// </summary>
        [PolicyResourceProperty("pattern", "_mUnknown_Pattern")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Pattern;
        private bool _mUnknown_Pattern;
        public string? Pattern
        {
            get
            {
                if (!_mUnknown_Pattern) return _mValue_Pattern;
                throw new UndeferrableValueException("Value 'ProtectionGroupArgs.Pattern' is not present");
            }
        }

        /// <summary>
        /// The name of the protection group.
        /// </summary>
        [PolicyResourceProperty("protectionGroupId", "_mUnknown_ProtectionGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ProtectionGroupId;
        private bool _mUnknown_ProtectionGroupId;
        public string? ProtectionGroupId
        {
            get
            {
                if (!_mUnknown_ProtectionGroupId) return _mValue_ProtectionGroupId;
                throw new UndeferrableValueException("Value 'ProtectionGroupArgs.ProtectionGroupId' is not present");
            }
        }

        /// <summary>
        /// The resource type to include in the protection group. You must set this when you set `pattern` to BY_RESOURCE_TYPE and you must not set it for any other `pattern` setting.
        /// </summary>
        [PolicyResourceProperty("resourceType", "_mUnknown_ResourceType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ResourceType;
        private bool _mUnknown_ResourceType;
        public string? ResourceType
        {
            get
            {
                if (!_mUnknown_ResourceType) return _mValue_ResourceType;
                throw new UndeferrableValueException("Value 'ProtectionGroupArgs.ResourceType' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ProtectionGroupArgs.Tags' is not present");
            }
        }
    }
}
