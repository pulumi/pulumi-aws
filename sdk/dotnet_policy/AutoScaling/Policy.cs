// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.AutoScaling
{
    [PolicyResourceType("aws:autoscaling/policy:Policy")]
    public sealed class Policy : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
        /// </summary>
        [PolicyResourceProperty("adjustmentType", "_mUnknown_AdjustmentType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AdjustmentType;
        private bool _mUnknown_AdjustmentType;
        public string? AdjustmentType
        {
            get
            {
                if (!_mUnknown_AdjustmentType) return _mValue_AdjustmentType;
                throw new UndeferrableValueException("Value 'Policy.AdjustmentType' is not present");
            }
        }

        /// <summary>
        /// ARN assigned by AWS to the scaling policy.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Policy.Arn' is not present");
            }
        }

        /// <summary>
        /// Name of the autoscaling group.
        /// </summary>
        [PolicyResourceProperty("autoscalingGroupName", "_mUnknown_AutoscalingGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AutoscalingGroupName;
        private bool _mUnknown_AutoscalingGroupName;
        public string? AutoscalingGroupName
        {
            get
            {
                if (!_mUnknown_AutoscalingGroupName) return _mValue_AutoscalingGroupName;
                throw new UndeferrableValueException("Value 'Policy.AutoscalingGroupName' is not present");
            }
        }

        /// <summary>
        /// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
        /// </summary>
        [PolicyResourceProperty("cooldown", "_mUnknown_Cooldown")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Cooldown;
        private bool _mUnknown_Cooldown;
        public int? Cooldown
        {
            get
            {
                if (!_mUnknown_Cooldown) return _mValue_Cooldown;
                throw new UndeferrableValueException("Value 'Policy.Cooldown' is not present");
            }
        }

        /// <summary>
        /// Whether the scaling policy is enabled or disabled. Default: `true`.
        /// 
        /// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'Policy.Enabled' is not present");
            }
        }

        /// <summary>
        /// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
        /// </summary>
        [PolicyResourceProperty("estimatedInstanceWarmup", "_mUnknown_EstimatedInstanceWarmup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_EstimatedInstanceWarmup;
        private bool _mUnknown_EstimatedInstanceWarmup;
        public int? EstimatedInstanceWarmup
        {
            get
            {
                if (!_mUnknown_EstimatedInstanceWarmup) return _mValue_EstimatedInstanceWarmup;
                throw new UndeferrableValueException("Value 'Policy.EstimatedInstanceWarmup' is not present");
            }
        }

        /// <summary>
        /// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
        /// </summary>
        [PolicyResourceProperty("metricAggregationType", "_mUnknown_MetricAggregationType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MetricAggregationType;
        private bool _mUnknown_MetricAggregationType;
        public string? MetricAggregationType
        {
            get
            {
                if (!_mUnknown_MetricAggregationType) return _mValue_MetricAggregationType;
                throw new UndeferrableValueException("Value 'Policy.MetricAggregationType' is not present");
            }
        }

        /// <summary>
        /// Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.
        /// 
        /// The following arguments are only available to "SimpleScaling" type policies:
        /// </summary>
        [PolicyResourceProperty("minAdjustmentMagnitude", "_mUnknown_MinAdjustmentMagnitude")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MinAdjustmentMagnitude;
        private bool _mUnknown_MinAdjustmentMagnitude;
        public int? MinAdjustmentMagnitude
        {
            get
            {
                if (!_mUnknown_MinAdjustmentMagnitude) return _mValue_MinAdjustmentMagnitude;
                throw new UndeferrableValueException("Value 'Policy.MinAdjustmentMagnitude' is not present");
            }
        }

        /// <summary>
        /// Name of the policy.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Policy.Name' is not present");
            }
        }

        /// <summary>
        /// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
        /// </summary>
        [PolicyResourceProperty("policyType", "_mUnknown_PolicyType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyType;
        private bool _mUnknown_PolicyType;
        public string? PolicyType
        {
            get
            {
                if (!_mUnknown_PolicyType) return _mValue_PolicyType;
                throw new UndeferrableValueException("Value 'Policy.PolicyType' is not present");
            }
        }

        /// <summary>
        /// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
        /// </summary>
        [PolicyResourceProperty("predictiveScalingConfiguration", "_mUnknown_PredictiveScalingConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.PolicyPredictiveScalingConfiguration? _mValue_PredictiveScalingConfiguration;
        private bool _mUnknown_PredictiveScalingConfiguration;
        public Outputs.PolicyPredictiveScalingConfiguration? PredictiveScalingConfiguration
        {
            get
            {
                if (!_mUnknown_PredictiveScalingConfiguration) return _mValue_PredictiveScalingConfiguration;
                throw new UndeferrableValueException("Value 'Policy.PredictiveScalingConfiguration' is not present");
            }
        }

        /// <summary>
        /// Number of members by which to
        /// scale, when the adjustment bounds are breached. A positive value scales
        /// up. A negative value scales down.
        /// </summary>
        [PolicyResourceProperty("scalingAdjustment", "_mUnknown_ScalingAdjustment")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ScalingAdjustment;
        private bool _mUnknown_ScalingAdjustment;
        public int? ScalingAdjustment
        {
            get
            {
                if (!_mUnknown_ScalingAdjustment) return _mValue_ScalingAdjustment;
                throw new UndeferrableValueException("Value 'Policy.ScalingAdjustment' is not present");
            }
        }

        /// <summary>
        /// Set of adjustments that manage
        /// group scaling. These have the following structure:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Aws.AutoScaling.Policy("example", new()
        ///     {
        ///         StepAdjustments = new[]
        ///         {
        ///             new Aws.AutoScaling.Inputs.PolicyStepAdjustmentArgs
        ///             {
        ///                 ScalingAdjustment = -1,
        ///                 MetricIntervalLowerBound = "1",
        ///                 MetricIntervalUpperBound = "2",
        ///             },
        ///             new Aws.AutoScaling.Inputs.PolicyStepAdjustmentArgs
        ///             {
        ///                 ScalingAdjustment = 1,
        ///                 MetricIntervalLowerBound = "2",
        ///                 MetricIntervalUpperBound = "3",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// The following fields are available in step adjustments:
        /// </summary>
        [PolicyResourceProperty("stepAdjustments", "_mUnknown_StepAdjustments")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.PolicyStepAdjustment>? _mValue_StepAdjustments;
        private bool _mUnknown_StepAdjustments;
        public List<Outputs.PolicyStepAdjustment>? StepAdjustments
        {
            get
            {
                if (!_mUnknown_StepAdjustments) return _mValue_StepAdjustments;
                throw new UndeferrableValueException("Value 'Policy.StepAdjustments' is not present");
            }
        }

        /// <summary>
        /// Target tracking policy. These have the following structure:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Aws.AutoScaling.Policy("example", new()
        ///     {
        ///         TargetTrackingConfiguration = new Aws.AutoScaling.Inputs.PolicyTargetTrackingConfigurationArgs
        ///         {
        ///             PredefinedMetricSpecification = new Aws.AutoScaling.Inputs.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs
        ///             {
        ///                 PredefinedMetricType = "ASGAverageCPUUtilization",
        ///             },
        ///             TargetValue = 40,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// The following fields are available in target tracking configuration:
        /// </summary>
        [PolicyResourceProperty("targetTrackingConfiguration", "_mUnknown_TargetTrackingConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.PolicyTargetTrackingConfiguration? _mValue_TargetTrackingConfiguration;
        private bool _mUnknown_TargetTrackingConfiguration;
        public Outputs.PolicyTargetTrackingConfiguration? TargetTrackingConfiguration
        {
            get
            {
                if (!_mUnknown_TargetTrackingConfiguration) return _mValue_TargetTrackingConfiguration;
                throw new UndeferrableValueException("Value 'Policy.TargetTrackingConfiguration' is not present");
            }
        }
    }

    [PolicyResourceType("aws:autoscaling/policy:Policy")]
    public sealed class PolicyArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
        /// </summary>
        [PolicyResourceProperty("adjustmentType", "_mUnknown_AdjustmentType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AdjustmentType;
        private bool _mUnknown_AdjustmentType;
        public string? AdjustmentType
        {
            get
            {
                if (!_mUnknown_AdjustmentType) return _mValue_AdjustmentType;
                throw new UndeferrableValueException("Value 'PolicyArgs.AdjustmentType' is not present");
            }
        }

        /// <summary>
        /// Name of the autoscaling group.
        /// </summary>
        [PolicyResourceProperty("autoscalingGroupName", "_mUnknown_AutoscalingGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AutoscalingGroupName;
        private bool _mUnknown_AutoscalingGroupName;
        public string? AutoscalingGroupName
        {
            get
            {
                if (!_mUnknown_AutoscalingGroupName) return _mValue_AutoscalingGroupName;
                throw new UndeferrableValueException("Value 'PolicyArgs.AutoscalingGroupName' is not present");
            }
        }

        /// <summary>
        /// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
        /// </summary>
        [PolicyResourceProperty("cooldown", "_mUnknown_Cooldown")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Cooldown;
        private bool _mUnknown_Cooldown;
        public int? Cooldown
        {
            get
            {
                if (!_mUnknown_Cooldown) return _mValue_Cooldown;
                throw new UndeferrableValueException("Value 'PolicyArgs.Cooldown' is not present");
            }
        }

        /// <summary>
        /// Whether the scaling policy is enabled or disabled. Default: `true`.
        /// 
        /// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'PolicyArgs.Enabled' is not present");
            }
        }

        /// <summary>
        /// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
        /// </summary>
        [PolicyResourceProperty("estimatedInstanceWarmup", "_mUnknown_EstimatedInstanceWarmup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_EstimatedInstanceWarmup;
        private bool _mUnknown_EstimatedInstanceWarmup;
        public int? EstimatedInstanceWarmup
        {
            get
            {
                if (!_mUnknown_EstimatedInstanceWarmup) return _mValue_EstimatedInstanceWarmup;
                throw new UndeferrableValueException("Value 'PolicyArgs.EstimatedInstanceWarmup' is not present");
            }
        }

        /// <summary>
        /// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
        /// </summary>
        [PolicyResourceProperty("metricAggregationType", "_mUnknown_MetricAggregationType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MetricAggregationType;
        private bool _mUnknown_MetricAggregationType;
        public string? MetricAggregationType
        {
            get
            {
                if (!_mUnknown_MetricAggregationType) return _mValue_MetricAggregationType;
                throw new UndeferrableValueException("Value 'PolicyArgs.MetricAggregationType' is not present");
            }
        }

        /// <summary>
        /// Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.
        /// 
        /// The following arguments are only available to "SimpleScaling" type policies:
        /// </summary>
        [PolicyResourceProperty("minAdjustmentMagnitude", "_mUnknown_MinAdjustmentMagnitude")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MinAdjustmentMagnitude;
        private bool _mUnknown_MinAdjustmentMagnitude;
        public int? MinAdjustmentMagnitude
        {
            get
            {
                if (!_mUnknown_MinAdjustmentMagnitude) return _mValue_MinAdjustmentMagnitude;
                throw new UndeferrableValueException("Value 'PolicyArgs.MinAdjustmentMagnitude' is not present");
            }
        }

        /// <summary>
        /// Name of the policy.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'PolicyArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
        /// </summary>
        [PolicyResourceProperty("policyType", "_mUnknown_PolicyType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyType;
        private bool _mUnknown_PolicyType;
        public string? PolicyType
        {
            get
            {
                if (!_mUnknown_PolicyType) return _mValue_PolicyType;
                throw new UndeferrableValueException("Value 'PolicyArgs.PolicyType' is not present");
            }
        }

        /// <summary>
        /// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
        /// </summary>
        [PolicyResourceProperty("predictiveScalingConfiguration", "_mUnknown_PredictiveScalingConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.PolicyPredictiveScalingConfigurationArgs? _mValue_PredictiveScalingConfiguration;
        private bool _mUnknown_PredictiveScalingConfiguration;
        public Inputs.PolicyPredictiveScalingConfigurationArgs? PredictiveScalingConfiguration
        {
            get
            {
                if (!_mUnknown_PredictiveScalingConfiguration) return _mValue_PredictiveScalingConfiguration;
                throw new UndeferrableValueException("Value 'PolicyArgs.PredictiveScalingConfiguration' is not present");
            }
        }

        /// <summary>
        /// Number of members by which to
        /// scale, when the adjustment bounds are breached. A positive value scales
        /// up. A negative value scales down.
        /// </summary>
        [PolicyResourceProperty("scalingAdjustment", "_mUnknown_ScalingAdjustment")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ScalingAdjustment;
        private bool _mUnknown_ScalingAdjustment;
        public int? ScalingAdjustment
        {
            get
            {
                if (!_mUnknown_ScalingAdjustment) return _mValue_ScalingAdjustment;
                throw new UndeferrableValueException("Value 'PolicyArgs.ScalingAdjustment' is not present");
            }
        }

        /// <summary>
        /// Set of adjustments that manage
        /// group scaling. These have the following structure:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Aws.AutoScaling.Policy("example", new()
        ///     {
        ///         StepAdjustments = new[]
        ///         {
        ///             new Aws.AutoScaling.Inputs.PolicyStepAdjustmentArgs
        ///             {
        ///                 ScalingAdjustment = -1,
        ///                 MetricIntervalLowerBound = "1",
        ///                 MetricIntervalUpperBound = "2",
        ///             },
        ///             new Aws.AutoScaling.Inputs.PolicyStepAdjustmentArgs
        ///             {
        ///                 ScalingAdjustment = 1,
        ///                 MetricIntervalLowerBound = "2",
        ///                 MetricIntervalUpperBound = "3",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// The following fields are available in step adjustments:
        /// </summary>
        [PolicyResourceProperty("stepAdjustments", "_mUnknown_StepAdjustments")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.PolicyStepAdjustmentArgs>? _mValue_StepAdjustments;
        private bool _mUnknown_StepAdjustments;
        public List<Inputs.PolicyStepAdjustmentArgs>? StepAdjustments
        {
            get
            {
                if (!_mUnknown_StepAdjustments) return _mValue_StepAdjustments;
                throw new UndeferrableValueException("Value 'PolicyArgs.StepAdjustments' is not present");
            }
        }

        /// <summary>
        /// Target tracking policy. These have the following structure:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Aws.AutoScaling.Policy("example", new()
        ///     {
        ///         TargetTrackingConfiguration = new Aws.AutoScaling.Inputs.PolicyTargetTrackingConfigurationArgs
        ///         {
        ///             PredefinedMetricSpecification = new Aws.AutoScaling.Inputs.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs
        ///             {
        ///                 PredefinedMetricType = "ASGAverageCPUUtilization",
        ///             },
        ///             TargetValue = 40,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// The following fields are available in target tracking configuration:
        /// </summary>
        [PolicyResourceProperty("targetTrackingConfiguration", "_mUnknown_TargetTrackingConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.PolicyTargetTrackingConfigurationArgs? _mValue_TargetTrackingConfiguration;
        private bool _mUnknown_TargetTrackingConfiguration;
        public Inputs.PolicyTargetTrackingConfigurationArgs? TargetTrackingConfiguration
        {
            get
            {
                if (!_mUnknown_TargetTrackingConfiguration) return _mValue_TargetTrackingConfiguration;
                throw new UndeferrableValueException("Value 'PolicyArgs.TargetTrackingConfiguration' is not present");
            }
        }
    }
}
