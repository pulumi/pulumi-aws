// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.AutoScaling.Outputs
{
    public sealed class GroupWarmPool
    {
        /// <summary>
        /// Whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
        /// </summary>
        [PolicyResourceProperty("instanceReusePolicy", "_mUnknown_InstanceReusePolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.GroupWarmPoolInstanceReusePolicy? _mValue_InstanceReusePolicy;
        private bool _mUnknown_InstanceReusePolicy;
        public Outputs.GroupWarmPoolInstanceReusePolicy? InstanceReusePolicy
        {
            get
            {
                if (!_mUnknown_InstanceReusePolicy) return _mValue_InstanceReusePolicy;
                throw new UndeferrableValueException("Value 'GroupWarmPool.InstanceReusePolicy' is not present");
            }
        }

        /// <summary>
        /// Total maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group.
        /// </summary>
        [PolicyResourceProperty("maxGroupPreparedCapacity", "_mUnknown_MaxGroupPreparedCapacity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxGroupPreparedCapacity;
        private bool _mUnknown_MaxGroupPreparedCapacity;
        public int? MaxGroupPreparedCapacity
        {
            get
            {
                if (!_mUnknown_MaxGroupPreparedCapacity) return _mValue_MaxGroupPreparedCapacity;
                throw new UndeferrableValueException("Value 'GroupWarmPool.MaxGroupPreparedCapacity' is not present");
            }
        }

        /// <summary>
        /// Minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
        /// </summary>
        [PolicyResourceProperty("minSize", "_mUnknown_MinSize")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MinSize;
        private bool _mUnknown_MinSize;
        public int? MinSize
        {
            get
            {
                if (!_mUnknown_MinSize) return _mValue_MinSize;
                throw new UndeferrableValueException("Value 'GroupWarmPool.MinSize' is not present");
            }
        }

        /// <summary>
        /// Sets the instance state to transition to after the lifecycle hooks finish. Valid values are: Stopped (default), Running or Hibernated.
        /// </summary>
        [PolicyResourceProperty("poolState", "_mUnknown_PoolState")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PoolState;
        private bool _mUnknown_PoolState;
        public string? PoolState
        {
            get
            {
                if (!_mUnknown_PoolState) return _mValue_PoolState;
                throw new UndeferrableValueException("Value 'GroupWarmPool.PoolState' is not present");
            }
        }
    }
}
