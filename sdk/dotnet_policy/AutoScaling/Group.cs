// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.AutoScaling
{
    [PolicyResourceType("aws:autoscaling/group:Group")]
    public sealed class Group : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// ARN for this Auto Scaling Group
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The instance capacity distribution across Availability Zones. See Availability Zone Distribution below for more details.
        /// </summary>
        [Input("availabilityZoneDistribution")]
        public GroupAvailabilityZoneDistribution? AvailabilityZoneDistribution;

        /// <summary>
        /// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpc_zone_identifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpc_zone_identifier`.
        /// </summary>
        [Input("availabilityZones")]
        public List<string>? AvailabilityZones;

        /// <summary>
        /// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
        /// </summary>
        [Input("capacityRebalance")]
        public bool? CapacityRebalance;

        /// <summary>
        /// Reserved.
        /// </summary>
        [Input("context")]
        public string? Context;

        /// <summary>
        /// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
        /// </summary>
        [Input("defaultCooldown")]
        public int? DefaultCooldown;

        /// <summary>
        /// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
        /// </summary>
        [Input("defaultInstanceWarmup")]
        public int? DefaultInstanceWarmup;

        /// <summary>
        /// Number of Amazon EC2 instances that
        /// should be running in the group. (See also Waiting for
        /// Capacity below.)
        /// </summary>
        [Input("desiredCapacity")]
        public int? DesiredCapacity;

        /// <summary>
        /// The unit of measurement for the value specified for `desired_capacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
        /// </summary>
        [Input("desiredCapacityType")]
        public string? DesiredCapacityType;

        /// <summary>
        /// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
        /// </summary>
        [Input("enabledMetrics")]
        public List<string>? EnabledMetrics;

        /// <summary>
        /// Allows deleting the Auto Scaling Group without waiting
        /// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
        /// even if it's in the process of scaling a resource. Normally, this provider
        /// drains all the instances before deleting the group. This bypasses that
        /// behavior and potentially leaves resources dangling.
        /// </summary>
        [Input("forceDelete")]
        public bool? ForceDelete;

        /// <summary>
        /// Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
        /// </summary>
        [Input("forceDeleteWarmPool")]
        public bool? ForceDeleteWarmPool;

        /// <summary>
        /// Time (in seconds) after instance comes into service before checking health.
        /// </summary>
        [Input("healthCheckGracePeriod")]
        public int? HealthCheckGracePeriod;

        /// <summary>
        /// "EC2" or "ELB". Controls how health checking is done.
        /// </summary>
        [Input("healthCheckType")]
        public string? HealthCheckType;

        /// <summary>
        /// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
        /// </summary>
        [Input("ignoreFailedScalingActivities")]
        public bool? IgnoreFailedScalingActivities;

        /// <summary>
        /// One or more
        /// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
        /// to attach to the Auto Scaling Group **before** instances are launched. The
        /// syntax is exactly the same as the separate
        /// `aws.autoscaling.LifecycleHook`
        /// resource, without the `autoscaling_group_name` attribute. Please note that this will only work when creating
        /// a new Auto Scaling Group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.
        /// </summary>
        [Input("initialLifecycleHooks")]
        public List<GroupInitialLifecycleHook>? InitialLifecycleHooks;

        /// <summary>
        /// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
        /// </summary>
        [Input("instanceMaintenancePolicy")]
        public GroupInstanceMaintenancePolicy? InstanceMaintenancePolicy;

        /// <summary>
        /// If this block is configured, start an
        /// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
        /// when this Auto Scaling Group is updated. Defined below.
        /// </summary>
        [Input("instanceRefresh")]
        public GroupInstanceRefresh? InstanceRefresh;

        /// <summary>
        /// Name of the launch configuration to use.
        /// </summary>
        [Input("launchConfiguration")]
        public string? LaunchConfiguration;

        /// <summary>
        /// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
        /// </summary>
        [Input("launchTemplate")]
        public GroupLaunchTemplate? LaunchTemplate;

        /// <summary>
        /// List of elastic load balancer names to add to the autoscaling
        /// group names. Only valid for classic load balancers. For ALBs, use `target_group_arns` instead. To remove all load balancer attachments an empty list should be specified.
        /// </summary>
        [Input("loadBalancers")]
        public List<string>? LoadBalancers;

        /// <summary>
        /// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
        /// </summary>
        [Input("maxInstanceLifetime")]
        public int? MaxInstanceLifetime;

        /// <summary>
        /// Maximum size of the Auto Scaling Group.
        /// </summary>
        [Input("maxSize")]
        public int? MaxSize;

        /// <summary>
        /// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
        /// </summary>
        [Input("metricsGranularity")]
        public string? MetricsGranularity;

        /// <summary>
        /// Setting this causes Pulumi to wait for
        /// this number of instances from this Auto Scaling Group to show up healthy in the
        /// ELB only on creation. Updates will not wait on ELB instance number changes.
        /// (See also Waiting for Capacity below.)
        /// </summary>
        [Input("minElbCapacity")]
        public int? MinElbCapacity;

        /// <summary>
        /// Minimum size of the Auto Scaling Group.
        /// (See also Waiting for Capacity below.)
        /// </summary>
        [Input("minSize")]
        public int? MinSize;

        /// <summary>
        /// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
        /// </summary>
        [Input("mixedInstancesPolicy")]
        public GroupMixedInstancesPolicy? MixedInstancesPolicy;

        /// <summary>
        /// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `name_prefix`.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Creates a unique name beginning with the specified
        /// prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix;

        /// <summary>
        /// Name of the placement group into which you'll launch your instances, if any.
        /// </summary>
        [Input("placementGroup")]
        public string? PlacementGroup;

        /// <summary>
        /// Predicted capacity of the group.
        /// </summary>
        [Input("predictedCapacity")]
        public int? PredictedCapacity;

        /// <summary>
        /// Whether newly launched instances
        /// are automatically protected from termination by Amazon EC2 Auto Scaling when
        /// scaling in. For more information about preventing instances from terminating
        /// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
        /// in the Amazon EC2 Auto Scaling User Guide.
        /// </summary>
        [Input("protectFromScaleIn")]
        public bool? ProtectFromScaleIn;

        /// <summary>
        /// ARN of the service-linked role that the ASG will use to call other AWS services
        /// </summary>
        [Input("serviceLinkedRoleArn")]
        public string? ServiceLinkedRoleArn;

        /// <summary>
        /// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
        /// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
        /// </summary>
        [Input("suspendedProcesses")]
        public List<string>? SuspendedProcesses;

        /// <summary>
        /// Configuration block(s) containing resource tags. See Tag below for more details.
        /// </summary>
        [Input("tags")]
        public List<GroupTag>? Tags;

        /// <summary>
        /// Set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
        /// </summary>
        [Input("targetGroupArns")]
        public List<string>? TargetGroupArns;

        /// <summary>
        /// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
        /// </summary>
        [Input("terminationPolicies")]
        public List<string>? TerminationPolicies;

        /// <summary>
        /// Attaches one or more traffic sources to the specified Auto Scaling group.
        /// </summary>
        [Input("trafficSources")]
        public List<GroupTrafficSource>? TrafficSources;

        /// <summary>
        /// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availability_zones`.
        /// </summary>
        [Input("vpcZoneIdentifiers")]
        public List<string>? VpcZoneIdentifiers;

        /// <summary>
        /// Maximum
        /// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
        /// wait for ASG instances to be healthy before timing out. (See also Waiting
        /// for Capacity below.) Setting this to "0" causes
        /// the provider to skip all Capacity Waiting behavior.
        /// </summary>
        [Input("waitForCapacityTimeout")]
        public string? WaitForCapacityTimeout;

        /// <summary>
        /// Setting this will cause Pulumi to wait
        /// for exactly this number of healthy instances from this Auto Scaling Group in
        /// all attached load balancers on both create and update operations. (Takes
        /// precedence over `min_elb_capacity` behavior.)
        /// (See also Waiting for Capacity below.)
        /// </summary>
        [Input("waitForElbCapacity")]
        public int? WaitForElbCapacity;

        /// <summary>
        /// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
        /// to the specified Auto Scaling group. Defined below
        /// </summary>
        [Input("warmPool")]
        public GroupWarmPool? WarmPool;

        /// <summary>
        /// Current size of the warm pool.
        /// </summary>
        [Input("warmPoolSize")]
        public int? WarmPoolSize;
    }
}
