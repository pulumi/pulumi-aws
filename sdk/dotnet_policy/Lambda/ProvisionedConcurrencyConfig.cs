// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Lambda
{
    [PolicyResourceType("aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig")]
    public sealed class ProvisionedConcurrencyConfig : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Name or Amazon Resource Name (ARN) of the Lambda Function.
        /// </summary>
        [PolicyResourceProperty("functionName", "_mUnknown_FunctionName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FunctionName;
        private bool _mUnknown_FunctionName;
        public string? FunctionName
        {
            get
            {
                if (!_mUnknown_FunctionName) return _mValue_FunctionName;
                throw new UndeferrableValueException("Value 'ProvisionedConcurrencyConfig.FunctionName' is not present");
            }
        }

        /// <summary>
        /// Amount of capacity to allocate. Must be greater than or equal to `1`.
        /// </summary>
        [PolicyResourceProperty("provisionedConcurrentExecutions", "_mUnknown_ProvisionedConcurrentExecutions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ProvisionedConcurrentExecutions;
        private bool _mUnknown_ProvisionedConcurrentExecutions;
        public int? ProvisionedConcurrentExecutions
        {
            get
            {
                if (!_mUnknown_ProvisionedConcurrentExecutions) return _mValue_ProvisionedConcurrentExecutions;
                throw new UndeferrableValueException("Value 'ProvisionedConcurrencyConfig.ProvisionedConcurrentExecutions' is not present");
            }
        }

        /// <summary>
        /// Lambda Function version or Lambda Alias name.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("qualifier", "_mUnknown_Qualifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Qualifier;
        private bool _mUnknown_Qualifier;
        public string? Qualifier
        {
            get
            {
                if (!_mUnknown_Qualifier) return _mValue_Qualifier;
                throw new UndeferrableValueException("Value 'ProvisionedConcurrencyConfig.Qualifier' is not present");
            }
        }

        /// <summary>
        /// Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
        /// </summary>
        [PolicyResourceProperty("skipDestroy", "_mUnknown_SkipDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SkipDestroy;
        private bool _mUnknown_SkipDestroy;
        public bool? SkipDestroy
        {
            get
            {
                if (!_mUnknown_SkipDestroy) return _mValue_SkipDestroy;
                throw new UndeferrableValueException("Value 'ProvisionedConcurrencyConfig.SkipDestroy' is not present");
            }
        }
    }

    [PolicyResourceType("aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig")]
    public sealed class ProvisionedConcurrencyConfigArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Name or Amazon Resource Name (ARN) of the Lambda Function.
        /// </summary>
        [PolicyResourceProperty("functionName", "_mUnknown_FunctionName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FunctionName;
        private bool _mUnknown_FunctionName;
        public string? FunctionName
        {
            get
            {
                if (!_mUnknown_FunctionName) return _mValue_FunctionName;
                throw new UndeferrableValueException("Value 'ProvisionedConcurrencyConfigArgs.FunctionName' is not present");
            }
        }

        /// <summary>
        /// Amount of capacity to allocate. Must be greater than or equal to `1`.
        /// </summary>
        [PolicyResourceProperty("provisionedConcurrentExecutions", "_mUnknown_ProvisionedConcurrentExecutions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ProvisionedConcurrentExecutions;
        private bool _mUnknown_ProvisionedConcurrentExecutions;
        public int? ProvisionedConcurrentExecutions
        {
            get
            {
                if (!_mUnknown_ProvisionedConcurrentExecutions) return _mValue_ProvisionedConcurrentExecutions;
                throw new UndeferrableValueException("Value 'ProvisionedConcurrencyConfigArgs.ProvisionedConcurrentExecutions' is not present");
            }
        }

        /// <summary>
        /// Lambda Function version or Lambda Alias name.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("qualifier", "_mUnknown_Qualifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Qualifier;
        private bool _mUnknown_Qualifier;
        public string? Qualifier
        {
            get
            {
                if (!_mUnknown_Qualifier) return _mValue_Qualifier;
                throw new UndeferrableValueException("Value 'ProvisionedConcurrencyConfigArgs.Qualifier' is not present");
            }
        }

        /// <summary>
        /// Whether to retain the provisoned concurrency configuration upon destruction. Defaults to `false`. If set to `true`, the resource in simply removed from state instead.
        /// </summary>
        [PolicyResourceProperty("skipDestroy", "_mUnknown_SkipDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SkipDestroy;
        private bool _mUnknown_SkipDestroy;
        public bool? SkipDestroy
        {
            get
            {
                if (!_mUnknown_SkipDestroy) return _mValue_SkipDestroy;
                throw new UndeferrableValueException("Value 'ProvisionedConcurrencyConfigArgs.SkipDestroy' is not present");
            }
        }
    }
}
