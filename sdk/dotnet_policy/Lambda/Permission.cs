// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Lambda
{
    [PolicyResourceType("aws:lambda/permission:Permission")]
    public sealed class Permission : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The AWS Lambda action you want to allow in this statement. (e.g., `lambda:InvokeFunction`)
        /// </summary>
        [PolicyResourceProperty("action", "_mUnknown_Action")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Action;
        private bool _mUnknown_Action;
        public string? Action
        {
            get
            {
                if (!_mUnknown_Action) return _mValue_Action;
                throw new UndeferrableValueException("Value 'Permission.Action' is not present");
            }
        }

        /// <summary>
        /// The Event Source Token to validate.  Used with [Alexa Skills](https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli).
        /// </summary>
        [PolicyResourceProperty("eventSourceToken", "_mUnknown_EventSourceToken")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EventSourceToken;
        private bool _mUnknown_EventSourceToken;
        public string? EventSourceToken
        {
            get
            {
                if (!_mUnknown_EventSourceToken) return _mValue_EventSourceToken;
                throw new UndeferrableValueException("Value 'Permission.EventSourceToken' is not present");
            }
        }

        /// <summary>
        /// Name of the Lambda function whose resource policy you are updating
        /// </summary>
        [PolicyResourceProperty("function", "_mUnknown_Function")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Function;
        private bool _mUnknown_Function;
        public string? Function
        {
            get
            {
                if (!_mUnknown_Function) return _mValue_Function;
                throw new UndeferrableValueException("Value 'Permission.Function' is not present");
            }
        }

        /// <summary>
        /// Lambda Function URLs [authentication type](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html). Valid values are: `AWS_IAM` or `NONE`. Only supported for `lambda:InvokeFunctionUrl` action.
        /// </summary>
        [PolicyResourceProperty("functionUrlAuthType", "_mUnknown_FunctionUrlAuthType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FunctionUrlAuthType;
        private bool _mUnknown_FunctionUrlAuthType;
        public string? FunctionUrlAuthType
        {
            get
            {
                if (!_mUnknown_FunctionUrlAuthType) return _mValue_FunctionUrlAuthType;
                throw new UndeferrableValueException("Value 'Permission.FunctionUrlAuthType' is not present");
            }
        }

        /// <summary>
        /// The principal who is getting this permission e.g., `s3.amazonaws.com`, an AWS account ID, or AWS IAM principal, or AWS service principal such as `events.amazonaws.com` or `sns.amazonaws.com`.
        /// </summary>
        [PolicyResourceProperty("principal", "_mUnknown_Principal")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Principal;
        private bool _mUnknown_Principal;
        public string? Principal
        {
            get
            {
                if (!_mUnknown_Principal) return _mValue_Principal;
                throw new UndeferrableValueException("Value 'Permission.Principal' is not present");
            }
        }

        /// <summary>
        /// The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
        /// 
        /// [1]: https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli
        /// [2]: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html
        /// [3]: https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html
        /// </summary>
        [PolicyResourceProperty("principalOrgId", "_mUnknown_PrincipalOrgId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrincipalOrgId;
        private bool _mUnknown_PrincipalOrgId;
        public string? PrincipalOrgId
        {
            get
            {
                if (!_mUnknown_PrincipalOrgId) return _mValue_PrincipalOrgId;
                throw new UndeferrableValueException("Value 'Permission.PrincipalOrgId' is not present");
            }
        }

        /// <summary>
        /// Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
        /// </summary>
        [PolicyResourceProperty("qualifier", "_mUnknown_Qualifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Qualifier;
        private bool _mUnknown_Qualifier;
        public string? Qualifier
        {
            get
            {
                if (!_mUnknown_Qualifier) return _mValue_Qualifier;
                throw new UndeferrableValueException("Value 'Permission.Qualifier' is not present");
            }
        }

        /// <summary>
        /// This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
        /// </summary>
        [PolicyResourceProperty("sourceAccount", "_mUnknown_SourceAccount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceAccount;
        private bool _mUnknown_SourceAccount;
        public string? SourceAccount
        {
            get
            {
                if (!_mUnknown_SourceAccount) return _mValue_SourceAccount;
                throw new UndeferrableValueException("Value 'Permission.SourceAccount' is not present");
            }
        }

        /// <summary>
        /// When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
        /// Without this, any resource from `principal` will be granted permission â€“ even if that resource is from another account.
        /// For S3, this should be the ARN of the S3 Bucket.
        /// For EventBridge events, this should be the ARN of the EventBridge Rule.
        /// For API Gateway, this should be the ARN of the API, as described [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
        /// </summary>
        [PolicyResourceProperty("sourceArn", "_mUnknown_SourceArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceArn;
        private bool _mUnknown_SourceArn;
        public string? SourceArn
        {
            get
            {
                if (!_mUnknown_SourceArn) return _mValue_SourceArn;
                throw new UndeferrableValueException("Value 'Permission.SourceArn' is not present");
            }
        }

        /// <summary>
        /// A unique statement identifier. By default generated by the provider.
        /// </summary>
        [PolicyResourceProperty("statementId", "_mUnknown_StatementId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StatementId;
        private bool _mUnknown_StatementId;
        public string? StatementId
        {
            get
            {
                if (!_mUnknown_StatementId) return _mValue_StatementId;
                throw new UndeferrableValueException("Value 'Permission.StatementId' is not present");
            }
        }

        /// <summary>
        /// A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statement_id`.
        /// </summary>
        [PolicyResourceProperty("statementIdPrefix", "_mUnknown_StatementIdPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StatementIdPrefix;
        private bool _mUnknown_StatementIdPrefix;
        public string? StatementIdPrefix
        {
            get
            {
                if (!_mUnknown_StatementIdPrefix) return _mValue_StatementIdPrefix;
                throw new UndeferrableValueException("Value 'Permission.StatementIdPrefix' is not present");
            }
        }
    }

    [PolicyResourceType("aws:lambda/permission:Permission")]
    public sealed class PermissionArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The AWS Lambda action you want to allow in this statement. (e.g., `lambda:InvokeFunction`)
        /// </summary>
        [PolicyResourceProperty("action", "_mUnknown_Action")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Action;
        private bool _mUnknown_Action;
        public string? Action
        {
            get
            {
                if (!_mUnknown_Action) return _mValue_Action;
                throw new UndeferrableValueException("Value 'PermissionArgs.Action' is not present");
            }
        }

        /// <summary>
        /// The Event Source Token to validate.  Used with [Alexa Skills](https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli).
        /// </summary>
        [PolicyResourceProperty("eventSourceToken", "_mUnknown_EventSourceToken")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EventSourceToken;
        private bool _mUnknown_EventSourceToken;
        public string? EventSourceToken
        {
            get
            {
                if (!_mUnknown_EventSourceToken) return _mValue_EventSourceToken;
                throw new UndeferrableValueException("Value 'PermissionArgs.EventSourceToken' is not present");
            }
        }

        /// <summary>
        /// Name of the Lambda function whose resource policy you are updating
        /// </summary>
        [PolicyResourceProperty("function", "_mUnknown_Function")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Function;
        private bool _mUnknown_Function;
        public string? Function
        {
            get
            {
                if (!_mUnknown_Function) return _mValue_Function;
                throw new UndeferrableValueException("Value 'PermissionArgs.Function' is not present");
            }
        }

        /// <summary>
        /// Lambda Function URLs [authentication type](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html). Valid values are: `AWS_IAM` or `NONE`. Only supported for `lambda:InvokeFunctionUrl` action.
        /// </summary>
        [PolicyResourceProperty("functionUrlAuthType", "_mUnknown_FunctionUrlAuthType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FunctionUrlAuthType;
        private bool _mUnknown_FunctionUrlAuthType;
        public string? FunctionUrlAuthType
        {
            get
            {
                if (!_mUnknown_FunctionUrlAuthType) return _mValue_FunctionUrlAuthType;
                throw new UndeferrableValueException("Value 'PermissionArgs.FunctionUrlAuthType' is not present");
            }
        }

        /// <summary>
        /// The principal who is getting this permission e.g., `s3.amazonaws.com`, an AWS account ID, or AWS IAM principal, or AWS service principal such as `events.amazonaws.com` or `sns.amazonaws.com`.
        /// </summary>
        [PolicyResourceProperty("principal", "_mUnknown_Principal")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Principal;
        private bool _mUnknown_Principal;
        public string? Principal
        {
            get
            {
                if (!_mUnknown_Principal) return _mValue_Principal;
                throw new UndeferrableValueException("Value 'PermissionArgs.Principal' is not present");
            }
        }

        /// <summary>
        /// The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
        /// 
        /// [1]: https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli
        /// [2]: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html
        /// [3]: https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html
        /// </summary>
        [PolicyResourceProperty("principalOrgId", "_mUnknown_PrincipalOrgId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrincipalOrgId;
        private bool _mUnknown_PrincipalOrgId;
        public string? PrincipalOrgId
        {
            get
            {
                if (!_mUnknown_PrincipalOrgId) return _mValue_PrincipalOrgId;
                throw new UndeferrableValueException("Value 'PermissionArgs.PrincipalOrgId' is not present");
            }
        }

        /// <summary>
        /// Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
        /// </summary>
        [PolicyResourceProperty("qualifier", "_mUnknown_Qualifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Qualifier;
        private bool _mUnknown_Qualifier;
        public string? Qualifier
        {
            get
            {
                if (!_mUnknown_Qualifier) return _mValue_Qualifier;
                throw new UndeferrableValueException("Value 'PermissionArgs.Qualifier' is not present");
            }
        }

        /// <summary>
        /// This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
        /// </summary>
        [PolicyResourceProperty("sourceAccount", "_mUnknown_SourceAccount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceAccount;
        private bool _mUnknown_SourceAccount;
        public string? SourceAccount
        {
            get
            {
                if (!_mUnknown_SourceAccount) return _mValue_SourceAccount;
                throw new UndeferrableValueException("Value 'PermissionArgs.SourceAccount' is not present");
            }
        }

        /// <summary>
        /// When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
        /// Without this, any resource from `principal` will be granted permission â€“ even if that resource is from another account.
        /// For S3, this should be the ARN of the S3 Bucket.
        /// For EventBridge events, this should be the ARN of the EventBridge Rule.
        /// For API Gateway, this should be the ARN of the API, as described [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
        /// </summary>
        [PolicyResourceProperty("sourceArn", "_mUnknown_SourceArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceArn;
        private bool _mUnknown_SourceArn;
        public string? SourceArn
        {
            get
            {
                if (!_mUnknown_SourceArn) return _mValue_SourceArn;
                throw new UndeferrableValueException("Value 'PermissionArgs.SourceArn' is not present");
            }
        }

        /// <summary>
        /// A unique statement identifier. By default generated by the provider.
        /// </summary>
        [PolicyResourceProperty("statementId", "_mUnknown_StatementId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StatementId;
        private bool _mUnknown_StatementId;
        public string? StatementId
        {
            get
            {
                if (!_mUnknown_StatementId) return _mValue_StatementId;
                throw new UndeferrableValueException("Value 'PermissionArgs.StatementId' is not present");
            }
        }

        /// <summary>
        /// A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statement_id`.
        /// </summary>
        [PolicyResourceProperty("statementIdPrefix", "_mUnknown_StatementIdPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StatementIdPrefix;
        private bool _mUnknown_StatementIdPrefix;
        public string? StatementIdPrefix
        {
            get
            {
                if (!_mUnknown_StatementIdPrefix) return _mValue_StatementIdPrefix;
                throw new UndeferrableValueException("Value 'PermissionArgs.StatementIdPrefix' is not present");
            }
        }
    }
}
