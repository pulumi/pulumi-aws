// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ssm.Outputs
{
    public sealed class MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig
    {
        /// <summary>
        /// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
        /// </summary>
        [PolicyResourceProperty("notificationArn", "_mUnknown_NotificationArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NotificationArn;
        private bool _mUnknown_NotificationArn;
        public string? NotificationArn
        {
            get
            {
                if (!_mUnknown_NotificationArn) return _mValue_NotificationArn;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig.NotificationArn' is not present");
            }
        }

        /// <summary>
        /// The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
        /// </summary>
        [PolicyResourceProperty("notificationEvents", "_mUnknown_NotificationEvents")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_NotificationEvents;
        private bool _mUnknown_NotificationEvents;
        public List<string>? NotificationEvents
        {
            get
            {
                if (!_mUnknown_NotificationEvents) return _mValue_NotificationEvents;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig.NotificationEvents' is not present");
            }
        }

        /// <summary>
        /// When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
        /// </summary>
        [PolicyResourceProperty("notificationType", "_mUnknown_NotificationType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NotificationType;
        private bool _mUnknown_NotificationType;
        public string? NotificationType
        {
            get
            {
                if (!_mUnknown_NotificationType) return _mValue_NotificationType;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig.NotificationType' is not present");
            }
        }
    }
}
