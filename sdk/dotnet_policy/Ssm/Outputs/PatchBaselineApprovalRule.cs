// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ssm.Outputs
{
    public sealed class PatchBaselineApprovalRule
    {
        /// <summary>
        /// Number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline. Valid Range: 0 to 360. Conflicts with `approve_until_date`.
        /// </summary>
        [PolicyResourceProperty("approveAfterDays", "_mUnknown_ApproveAfterDays")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ApproveAfterDays;
        private bool _mUnknown_ApproveAfterDays;
        public int? ApproveAfterDays
        {
            get
            {
                if (!_mUnknown_ApproveAfterDays) return _mValue_ApproveAfterDays;
                throw new UndeferrableValueException("Value 'PatchBaselineApprovalRule.ApproveAfterDays' is not present");
            }
        }

        /// <summary>
        /// Cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Date is formatted as `YYYY-MM-DD`. Conflicts with `approve_after_days`
        /// </summary>
        [PolicyResourceProperty("approveUntilDate", "_mUnknown_ApproveUntilDate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ApproveUntilDate;
        private bool _mUnknown_ApproveUntilDate;
        public string? ApproveUntilDate
        {
            get
            {
                if (!_mUnknown_ApproveUntilDate) return _mValue_ApproveUntilDate;
                throw new UndeferrableValueException("Value 'PatchBaselineApprovalRule.ApproveUntilDate' is not present");
            }
        }

        /// <summary>
        /// Compliance level for patches approved by this rule. Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, and `UNSPECIFIED`. The default value is `UNSPECIFIED`.
        /// </summary>
        [PolicyResourceProperty("complianceLevel", "_mUnknown_ComplianceLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ComplianceLevel;
        private bool _mUnknown_ComplianceLevel;
        public string? ComplianceLevel
        {
            get
            {
                if (!_mUnknown_ComplianceLevel) return _mValue_ComplianceLevel;
                throw new UndeferrableValueException("Value 'PatchBaselineApprovalRule.ComplianceLevel' is not present");
            }
        }

        /// <summary>
        /// Boolean enabling the application of non-security updates. The default value is `false`. Valid for Linux instances only.
        /// </summary>
        [PolicyResourceProperty("enableNonSecurity", "_mUnknown_EnableNonSecurity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableNonSecurity;
        private bool _mUnknown_EnableNonSecurity;
        public bool? EnableNonSecurity
        {
            get
            {
                if (!_mUnknown_EnableNonSecurity) return _mValue_EnableNonSecurity;
                throw new UndeferrableValueException("Value 'PatchBaselineApprovalRule.EnableNonSecurity' is not present");
            }
        }

        /// <summary>
        /// Patch filter group that defines the criteria for the rule. Up to 5 patch filters can be specified per approval rule using Key/Value pairs. Valid combinations of these Keys and the `operating_system` value can be found in the [SSM DescribePatchProperties API Reference](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_DescribePatchProperties.html). Valid Values are exact values for the patch property given as the key, or a wildcard `*`, which matches all values. `PATCH_SET` defaults to `OS` if unspecified
        /// </summary>
        [PolicyResourceProperty("patchFilters", "_mUnknown_PatchFilters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.PatchBaselineApprovalRulePatchFilter>? _mValue_PatchFilters;
        private bool _mUnknown_PatchFilters;
        public List<Outputs.PatchBaselineApprovalRulePatchFilter>? PatchFilters
        {
            get
            {
                if (!_mUnknown_PatchFilters) return _mValue_PatchFilters;
                throw new UndeferrableValueException("Value 'PatchBaselineApprovalRule.PatchFilters' is not present");
            }
        }
    }
}
