// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ssm.Inputs
{
    public sealed class MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs
    {
        /// <summary>
        /// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
        /// </summary>
        [Input("notificationArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<string> _mNotificationArn;

        public string? NotificationArn => _mNotificationArn.GetValue("notificationArn");

        /// <summary>
        /// The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
        /// </summary>
        [Input("notificationEvents")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<List<string>> _mNotificationEvents;

        public List<string>? NotificationEvents => _mNotificationEvents.GetValue("notificationEvents");

        /// <summary>
        /// When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
        /// </summary>
        [Input("notificationType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<string> _mNotificationType;

        public string? NotificationType => _mNotificationType.GetValue("notificationType");
    }
}
