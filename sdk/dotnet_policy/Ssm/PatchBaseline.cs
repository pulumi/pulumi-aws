// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ssm
{
    [PolicyResourceType("aws:ssm/patchBaseline:PatchBaseline")]
    public sealed class PatchBaseline : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Set of rules used to include patches in the baseline. Up to 10 approval rules can be specified. See `approval_rule` below.
        /// </summary>
        [Input("approvalRules")]
        public List<PatchBaselineApprovalRule>? ApprovalRules;

        /// <summary>
        /// List of explicitly approved patches for the baseline. Cannot be specified with `approval_rule`.
        /// </summary>
        [Input("approvedPatches")]
        public List<string>? ApprovedPatches;

        /// <summary>
        /// Compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
        /// </summary>
        [Input("approvedPatchesComplianceLevel")]
        public string? ApprovedPatchesComplianceLevel;

        /// <summary>
        /// Whether the list of approved patches includes non-security updates that should be applied to the instances. Applies to Linux instances only.
        /// </summary>
        [Input("approvedPatchesEnableNonSecurity")]
        public bool? ApprovedPatchesEnableNonSecurity;

        /// <summary>
        /// ARN of the baseline.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Description of the patch baseline.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// Set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are `PRODUCT`, `CLASSIFICATION`, `MSRC_SEVERITY`, and `PATCH_ID`.
        /// </summary>
        [Input("globalFilters")]
        public List<PatchBaselineGlobalFilter>? GlobalFilters;

        /// <summary>
        /// JSON definition of the baseline.
        /// </summary>
        [Input("json")]
        public string? Json;

        /// <summary>
        /// Name of the patch baseline.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Operating system the patch baseline applies to. Valid values are `ALMA_LINUX`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `AMAZON_LINUX_2022`, `AMAZON_LINUX_2023`, `CENTOS`, `DEBIAN`, `MACOS`, `ORACLE_LINUX`, `RASPBIAN`, `REDHAT_ENTERPRISE_LINUX`, `ROCKY_LINUX`, `SUSE`, `UBUNTU`, and `WINDOWS`. The default value is `WINDOWS`.
        /// </summary>
        [Input("operatingSystem")]
        public string? OperatingSystem;

        /// <summary>
        /// List of rejected patches.
        /// </summary>
        [Input("rejectedPatches")]
        public List<string>? RejectedPatches;

        /// <summary>
        /// Action for Patch Manager to take on patches included in the `rejected_patches` list. Valid values are `ALLOW_AS_DEPENDENCY` and `BLOCK`.
        /// </summary>
        [Input("rejectedPatchesAction")]
        public string? RejectedPatchesAction;

        /// <summary>
        /// Configuration block with alternate sources for patches. Applies to Linux instances only. See `source` below.
        /// </summary>
        [Input("sources")]
        public List<PatchBaselineSource>? Sources;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
