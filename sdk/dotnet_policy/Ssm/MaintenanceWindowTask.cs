// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ssm
{
    [PolicyResourceType("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask")]
    public sealed class MaintenanceWindowTask : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the maintenance window task.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.Arn' is not present");
            }
        }

        /// <summary>
        /// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are `CONTINUE_TASK` and `CANCEL_TASK`.
        /// </summary>
        [PolicyResourceProperty("cutoffBehavior", "_mUnknown_CutoffBehavior")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CutoffBehavior;
        private bool _mUnknown_CutoffBehavior;
        public string? CutoffBehavior
        {
            get
            {
                if (!_mUnknown_CutoffBehavior) return _mValue_CutoffBehavior;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.CutoffBehavior' is not present");
            }
        }

        /// <summary>
        /// The description of the maintenance window task.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.Description' is not present");
            }
        }

        /// <summary>
        /// The maximum number of targets this task can be run for in parallel.
        /// </summary>
        [PolicyResourceProperty("maxConcurrency", "_mUnknown_MaxConcurrency")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MaxConcurrency;
        private bool _mUnknown_MaxConcurrency;
        public string? MaxConcurrency
        {
            get
            {
                if (!_mUnknown_MaxConcurrency) return _mValue_MaxConcurrency;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.MaxConcurrency' is not present");
            }
        }

        /// <summary>
        /// The maximum number of errors allowed before this task stops being scheduled.
        /// </summary>
        [PolicyResourceProperty("maxErrors", "_mUnknown_MaxErrors")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MaxErrors;
        private bool _mUnknown_MaxErrors;
        public string? MaxErrors
        {
            get
            {
                if (!_mUnknown_MaxErrors) return _mValue_MaxErrors;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.MaxErrors' is not present");
            }
        }

        /// <summary>
        /// The name of the maintenance window task.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.Name' is not present");
            }
        }

        /// <summary>
        /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
        /// </summary>
        [PolicyResourceProperty("priority", "_mUnknown_Priority")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Priority;
        private bool _mUnknown_Priority;
        public int? Priority
        {
            get
            {
                if (!_mUnknown_Priority) return _mValue_Priority;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.Priority' is not present");
            }
        }

        /// <summary>
        /// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
        /// </summary>
        [PolicyResourceProperty("serviceRoleArn", "_mUnknown_ServiceRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServiceRoleArn;
        private bool _mUnknown_ServiceRoleArn;
        public string? ServiceRoleArn
        {
            get
            {
                if (!_mUnknown_ServiceRoleArn) return _mValue_ServiceRoleArn;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.ServiceRoleArn' is not present");
            }
        }

        /// <summary>
        /// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
        /// </summary>
        [PolicyResourceProperty("targets", "_mUnknown_Targets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.MaintenanceWindowTaskTarget>? _mValue_Targets;
        private bool _mUnknown_Targets;
        public List<Outputs.MaintenanceWindowTaskTarget>? Targets
        {
            get
            {
                if (!_mUnknown_Targets) return _mValue_Targets;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.Targets' is not present");
            }
        }

        /// <summary>
        /// The ARN of the task to execute.
        /// </summary>
        [PolicyResourceProperty("taskArn", "_mUnknown_TaskArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TaskArn;
        private bool _mUnknown_TaskArn;
        public string? TaskArn
        {
            get
            {
                if (!_mUnknown_TaskArn) return _mValue_TaskArn;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.TaskArn' is not present");
            }
        }

        /// <summary>
        /// Configuration block with parameters for task execution.
        /// </summary>
        [PolicyResourceProperty("taskInvocationParameters", "_mUnknown_TaskInvocationParameters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.MaintenanceWindowTaskTaskInvocationParameters? _mValue_TaskInvocationParameters;
        private bool _mUnknown_TaskInvocationParameters;
        public Outputs.MaintenanceWindowTaskTaskInvocationParameters? TaskInvocationParameters
        {
            get
            {
                if (!_mUnknown_TaskInvocationParameters) return _mValue_TaskInvocationParameters;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.TaskInvocationParameters' is not present");
            }
        }

        /// <summary>
        /// The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
        /// </summary>
        [PolicyResourceProperty("taskType", "_mUnknown_TaskType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TaskType;
        private bool _mUnknown_TaskType;
        public string? TaskType
        {
            get
            {
                if (!_mUnknown_TaskType) return _mValue_TaskType;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.TaskType' is not present");
            }
        }

        /// <summary>
        /// The Id of the maintenance window to register the task with.
        /// </summary>
        [PolicyResourceProperty("windowId", "_mUnknown_WindowId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_WindowId;
        private bool _mUnknown_WindowId;
        public string? WindowId
        {
            get
            {
                if (!_mUnknown_WindowId) return _mValue_WindowId;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.WindowId' is not present");
            }
        }

        /// <summary>
        /// The ID of the maintenance window task.
        /// </summary>
        [PolicyResourceProperty("windowTaskId", "_mUnknown_WindowTaskId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_WindowTaskId;
        private bool _mUnknown_WindowTaskId;
        public string? WindowTaskId
        {
            get
            {
                if (!_mUnknown_WindowTaskId) return _mValue_WindowTaskId;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTask.WindowTaskId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask")]
    public sealed class MaintenanceWindowTaskArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are `CONTINUE_TASK` and `CANCEL_TASK`.
        /// </summary>
        [PolicyResourceProperty("cutoffBehavior", "_mUnknown_CutoffBehavior")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CutoffBehavior;
        private bool _mUnknown_CutoffBehavior;
        public string? CutoffBehavior
        {
            get
            {
                if (!_mUnknown_CutoffBehavior) return _mValue_CutoffBehavior;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.CutoffBehavior' is not present");
            }
        }

        /// <summary>
        /// The description of the maintenance window task.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.Description' is not present");
            }
        }

        /// <summary>
        /// The maximum number of targets this task can be run for in parallel.
        /// </summary>
        [PolicyResourceProperty("maxConcurrency", "_mUnknown_MaxConcurrency")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MaxConcurrency;
        private bool _mUnknown_MaxConcurrency;
        public string? MaxConcurrency
        {
            get
            {
                if (!_mUnknown_MaxConcurrency) return _mValue_MaxConcurrency;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.MaxConcurrency' is not present");
            }
        }

        /// <summary>
        /// The maximum number of errors allowed before this task stops being scheduled.
        /// </summary>
        [PolicyResourceProperty("maxErrors", "_mUnknown_MaxErrors")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MaxErrors;
        private bool _mUnknown_MaxErrors;
        public string? MaxErrors
        {
            get
            {
                if (!_mUnknown_MaxErrors) return _mValue_MaxErrors;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.MaxErrors' is not present");
            }
        }

        /// <summary>
        /// The name of the maintenance window task.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.Name' is not present");
            }
        }

        /// <summary>
        /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
        /// </summary>
        [PolicyResourceProperty("priority", "_mUnknown_Priority")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Priority;
        private bool _mUnknown_Priority;
        public int? Priority
        {
            get
            {
                if (!_mUnknown_Priority) return _mValue_Priority;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.Priority' is not present");
            }
        }

        /// <summary>
        /// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
        /// </summary>
        [PolicyResourceProperty("serviceRoleArn", "_mUnknown_ServiceRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServiceRoleArn;
        private bool _mUnknown_ServiceRoleArn;
        public string? ServiceRoleArn
        {
            get
            {
                if (!_mUnknown_ServiceRoleArn) return _mValue_ServiceRoleArn;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.ServiceRoleArn' is not present");
            }
        }

        /// <summary>
        /// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
        /// </summary>
        [PolicyResourceProperty("targets", "_mUnknown_Targets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.MaintenanceWindowTaskTargetArgs>? _mValue_Targets;
        private bool _mUnknown_Targets;
        public List<Inputs.MaintenanceWindowTaskTargetArgs>? Targets
        {
            get
            {
                if (!_mUnknown_Targets) return _mValue_Targets;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.Targets' is not present");
            }
        }

        /// <summary>
        /// The ARN of the task to execute.
        /// </summary>
        [PolicyResourceProperty("taskArn", "_mUnknown_TaskArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TaskArn;
        private bool _mUnknown_TaskArn;
        public string? TaskArn
        {
            get
            {
                if (!_mUnknown_TaskArn) return _mValue_TaskArn;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.TaskArn' is not present");
            }
        }

        /// <summary>
        /// Configuration block with parameters for task execution.
        /// </summary>
        [PolicyResourceProperty("taskInvocationParameters", "_mUnknown_TaskInvocationParameters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.MaintenanceWindowTaskTaskInvocationParametersArgs? _mValue_TaskInvocationParameters;
        private bool _mUnknown_TaskInvocationParameters;
        public Inputs.MaintenanceWindowTaskTaskInvocationParametersArgs? TaskInvocationParameters
        {
            get
            {
                if (!_mUnknown_TaskInvocationParameters) return _mValue_TaskInvocationParameters;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.TaskInvocationParameters' is not present");
            }
        }

        /// <summary>
        /// The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
        /// </summary>
        [PolicyResourceProperty("taskType", "_mUnknown_TaskType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TaskType;
        private bool _mUnknown_TaskType;
        public string? TaskType
        {
            get
            {
                if (!_mUnknown_TaskType) return _mValue_TaskType;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.TaskType' is not present");
            }
        }

        /// <summary>
        /// The Id of the maintenance window to register the task with.
        /// </summary>
        [PolicyResourceProperty("windowId", "_mUnknown_WindowId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_WindowId;
        private bool _mUnknown_WindowId;
        public string? WindowId
        {
            get
            {
                if (!_mUnknown_WindowId) return _mValue_WindowId;
                throw new UndeferrableValueException("Value 'MaintenanceWindowTaskArgs.WindowId' is not present");
            }
        }
    }
}
