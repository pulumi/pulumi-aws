// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ssm
{
    [PolicyResourceType("aws:ssm/contactsRotation:ContactsRotation")]
    public sealed class ContactsRotation : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the rotation.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'ContactsRotation.Arn' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
        /// </summary>
        [PolicyResourceProperty("contactIds", "_mUnknown_ContactIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_ContactIds;
        private bool _mUnknown_ContactIds;
        public List<string>? ContactIds
        {
            get
            {
                if (!_mUnknown_ContactIds) return _mValue_ContactIds;
                throw new UndeferrableValueException("Value 'ContactsRotation.ContactIds' is not present");
            }
        }

        /// <summary>
        /// The name for the rotation.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'ContactsRotation.Name' is not present");
            }
        }

        /// <summary>
        /// Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `daily_settings`, `monthly_settings`, or `weekly_settings` must be populated. See Recurrence for more details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("recurrence", "_mUnknown_Recurrence")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ContactsRotationRecurrence? _mValue_Recurrence;
        private bool _mUnknown_Recurrence;
        public Outputs.ContactsRotationRecurrence? Recurrence
        {
            get
            {
                if (!_mUnknown_Recurrence) return _mValue_Recurrence;
                throw new UndeferrableValueException("Value 'ContactsRotation.Recurrence' is not present");
            }
        }

        /// <summary>
        /// The date and time, in RFC 3339 format, that the rotation goes into effect.
        /// </summary>
        [PolicyResourceProperty("startTime", "_mUnknown_StartTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StartTime;
        private bool _mUnknown_StartTime;
        public string? StartTime
        {
            get
            {
                if (!_mUnknown_StartTime) return _mValue_StartTime;
                throw new UndeferrableValueException("Value 'ContactsRotation.StartTime' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ContactsRotation.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'ContactsRotation.TagsAll' is not present");
            }
        }

        /// <summary>
        /// The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
        /// </summary>
        [PolicyResourceProperty("timeZoneId", "_mUnknown_TimeZoneId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TimeZoneId;
        private bool _mUnknown_TimeZoneId;
        public string? TimeZoneId
        {
            get
            {
                if (!_mUnknown_TimeZoneId) return _mValue_TimeZoneId;
                throw new UndeferrableValueException("Value 'ContactsRotation.TimeZoneId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ssm/contactsRotation:ContactsRotation")]
    public sealed class ContactsRotationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
        /// </summary>
        [PolicyResourceProperty("contactIds", "_mUnknown_ContactIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_ContactIds;
        private bool _mUnknown_ContactIds;
        public List<string>? ContactIds
        {
            get
            {
                if (!_mUnknown_ContactIds) return _mValue_ContactIds;
                throw new UndeferrableValueException("Value 'ContactsRotationArgs.ContactIds' is not present");
            }
        }

        /// <summary>
        /// The name for the rotation.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'ContactsRotationArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `daily_settings`, `monthly_settings`, or `weekly_settings` must be populated. See Recurrence for more details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("recurrence", "_mUnknown_Recurrence")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ContactsRotationRecurrenceArgs? _mValue_Recurrence;
        private bool _mUnknown_Recurrence;
        public Inputs.ContactsRotationRecurrenceArgs? Recurrence
        {
            get
            {
                if (!_mUnknown_Recurrence) return _mValue_Recurrence;
                throw new UndeferrableValueException("Value 'ContactsRotationArgs.Recurrence' is not present");
            }
        }

        /// <summary>
        /// The date and time, in RFC 3339 format, that the rotation goes into effect.
        /// </summary>
        [PolicyResourceProperty("startTime", "_mUnknown_StartTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StartTime;
        private bool _mUnknown_StartTime;
        public string? StartTime
        {
            get
            {
                if (!_mUnknown_StartTime) return _mValue_StartTime;
                throw new UndeferrableValueException("Value 'ContactsRotationArgs.StartTime' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ContactsRotationArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// The time zone to base the rotation’s activity on in Internet Assigned Numbers Authority (IANA) format.
        /// </summary>
        [PolicyResourceProperty("timeZoneId", "_mUnknown_TimeZoneId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TimeZoneId;
        private bool _mUnknown_TimeZoneId;
        public string? TimeZoneId
        {
            get
            {
                if (!_mUnknown_TimeZoneId) return _mValue_TimeZoneId;
                throw new UndeferrableValueException("Value 'ContactsRotationArgs.TimeZoneId' is not present");
            }
        }
    }
}
