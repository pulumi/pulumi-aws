// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ApiGatewayV2
{
    [PolicyResourceType("aws:apigatewayv2/stage:Stage")]
    public sealed class Stage : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Settings for logging access in this stage.
        /// Use the `aws.apigateway.Account` resource to configure [permissions for CloudWatch Logging](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-permissions).
        /// </summary>
        [Input("accessLogSettings")]
        public StageAccessLogSettings? AccessLogSettings;

        /// <summary>
        /// API identifier.
        /// </summary>
        [Input("apiId")]
        public string? ApiId;

        /// <summary>
        /// ARN of the stage.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Whether updates to an API automatically trigger a new deployment. Defaults to `false`. Applicable for HTTP APIs.
        /// </summary>
        [Input("autoDeploy")]
        public bool? AutoDeploy;

        /// <summary>
        /// Identifier of a client certificate for the stage. Use the `aws.apigateway.ClientCertificate` resource to configure a client certificate.
        /// Supported only for WebSocket APIs.
        /// </summary>
        [Input("clientCertificateId")]
        public string? ClientCertificateId;

        /// <summary>
        /// Default route settings for the stage.
        /// </summary>
        [Input("defaultRouteSettings")]
        public StageDefaultRouteSettings? DefaultRouteSettings;

        /// <summary>
        /// Deployment identifier of the stage. Use the `aws.apigatewayv2.Deployment` resource to configure a deployment.
        /// </summary>
        [Input("deploymentId")]
        public string? DeploymentId;

        /// <summary>
        /// Description for the stage. Must be less than or equal to 1024 characters in length.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// ARN prefix to be used in an `aws.lambda.Permission`'s `source_arn` attribute.
        /// For WebSocket APIs this attribute can additionally be used in an `aws.iam.Policy` to authorize access to the [`@connections` API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html).
        /// See the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-control-access-iam.html) for details.
        /// </summary>
        [Input("executionArn")]
        public string? ExecutionArn;

        /// <summary>
        /// URL to invoke the API pointing to the stage,
        /// e.g., `wss://z4675bid1j.execute-api.eu-west-2.amazonaws.com/example-stage`, or `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/`
        /// </summary>
        [Input("invokeUrl")]
        public string? InvokeUrl;

        /// <summary>
        /// Name of the stage. Must be between 1 and 128 characters in length.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Route settings for the stage.
        /// </summary>
        [Input("routeSettings")]
        public List<StageRouteSetting>? RouteSettings;

        /// <summary>
        /// Map that defines the stage variables for the stage.
        /// </summary>
        [Input("stageVariables")]
        public Dictionary<string, string>? StageVariables;

        /// <summary>
        /// Map of tags to assign to the stage. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
