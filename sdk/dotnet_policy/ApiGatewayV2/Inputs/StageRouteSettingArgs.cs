// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ApiGatewayV2.Inputs
{
    public sealed class StageRouteSettingArgs
    {
        /// <summary>
        /// Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
        /// Defaults to `false`. Supported only for WebSocket APIs.
        /// </summary>
        [PolicyResourceProperty("dataTraceEnabled", "_mUnknown_DataTraceEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DataTraceEnabled;
        private bool _mUnknown_DataTraceEnabled;
        public bool? DataTraceEnabled
        {
            get
            {
                if (!_mUnknown_DataTraceEnabled) return _mValue_DataTraceEnabled;
                throw new UndeferrableValueException("Value 'StageRouteSettingArgs.DataTraceEnabled' is not present");
            }
        }

        /// <summary>
        /// Whether detailed metrics are enabled for the route. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("detailedMetricsEnabled", "_mUnknown_DetailedMetricsEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DetailedMetricsEnabled;
        private bool _mUnknown_DetailedMetricsEnabled;
        public bool? DetailedMetricsEnabled
        {
            get
            {
                if (!_mUnknown_DetailedMetricsEnabled) return _mValue_DetailedMetricsEnabled;
                throw new UndeferrableValueException("Value 'StageRouteSettingArgs.DetailedMetricsEnabled' is not present");
            }
        }

        /// <summary>
        /// Logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
        /// Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.
        /// </summary>
        [PolicyResourceProperty("loggingLevel", "_mUnknown_LoggingLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LoggingLevel;
        private bool _mUnknown_LoggingLevel;
        public string? LoggingLevel
        {
            get
            {
                if (!_mUnknown_LoggingLevel) return _mValue_LoggingLevel;
                throw new UndeferrableValueException("Value 'StageRouteSettingArgs.LoggingLevel' is not present");
            }
        }

        /// <summary>
        /// Route key.
        /// </summary>
        [PolicyResourceProperty("routeKey", "_mUnknown_RouteKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RouteKey;
        private bool _mUnknown_RouteKey;
        public string? RouteKey
        {
            get
            {
                if (!_mUnknown_RouteKey) return _mValue_RouteKey;
                throw new UndeferrableValueException("Value 'StageRouteSettingArgs.RouteKey' is not present");
            }
        }

        /// <summary>
        /// Throttling burst limit for the route.
        /// </summary>
        [PolicyResourceProperty("throttlingBurstLimit", "_mUnknown_ThrottlingBurstLimit")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ThrottlingBurstLimit;
        private bool _mUnknown_ThrottlingBurstLimit;
        public int? ThrottlingBurstLimit
        {
            get
            {
                if (!_mUnknown_ThrottlingBurstLimit) return _mValue_ThrottlingBurstLimit;
                throw new UndeferrableValueException("Value 'StageRouteSettingArgs.ThrottlingBurstLimit' is not present");
            }
        }

        /// <summary>
        /// Throttling rate limit for the route.
        /// </summary>
        [PolicyResourceProperty("throttlingRateLimit", "_mUnknown_ThrottlingRateLimit")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private double? _mValue_ThrottlingRateLimit;
        private bool _mUnknown_ThrottlingRateLimit;
        public double? ThrottlingRateLimit
        {
            get
            {
                if (!_mUnknown_ThrottlingRateLimit) return _mValue_ThrottlingRateLimit;
                throw new UndeferrableValueException("Value 'StageRouteSettingArgs.ThrottlingRateLimit' is not present");
            }
        }
    }
}
