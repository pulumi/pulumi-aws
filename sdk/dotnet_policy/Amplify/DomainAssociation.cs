// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Amplify
{
    [PolicyResourceType("aws:amplify/domainAssociation:DomainAssociation")]
    public sealed class DomainAssociation : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Unique ID for an Amplify app.
        /// </summary>
        [PolicyResourceProperty("appId", "_mUnknown_AppId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AppId;
        private bool _mUnknown_AppId;
        public string? AppId
        {
            get
            {
                if (!_mUnknown_AppId) return _mValue_AppId;
                throw new UndeferrableValueException("Value 'DomainAssociation.AppId' is not present");
            }
        }

        /// <summary>
        /// ARN for the domain association.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'DomainAssociation.Arn' is not present");
            }
        }

        /// <summary>
        /// The type of SSL/TLS certificate to use for your custom domain. If you don't specify a certificate type, Amplify uses the default certificate that it provisions and manages for you.
        /// </summary>
        [PolicyResourceProperty("certificateSettings", "_mUnknown_CertificateSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DomainAssociationCertificateSettings? _mValue_CertificateSettings;
        private bool _mUnknown_CertificateSettings;
        public Outputs.DomainAssociationCertificateSettings? CertificateSettings
        {
            get
            {
                if (!_mUnknown_CertificateSettings) return _mValue_CertificateSettings;
                throw new UndeferrableValueException("Value 'DomainAssociation.CertificateSettings' is not present");
            }
        }

        /// <summary>
        /// DNS records for certificate verification in a space-delimited format (`&lt;record&gt; CNAME &lt;target&gt;`).
        /// </summary>
        [PolicyResourceProperty("certificateVerificationDnsRecord", "_mUnknown_CertificateVerificationDnsRecord")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateVerificationDnsRecord;
        private bool _mUnknown_CertificateVerificationDnsRecord;
        public string? CertificateVerificationDnsRecord
        {
            get
            {
                if (!_mUnknown_CertificateVerificationDnsRecord) return _mValue_CertificateVerificationDnsRecord;
                throw new UndeferrableValueException("Value 'DomainAssociation.CertificateVerificationDnsRecord' is not present");
            }
        }

        /// <summary>
        /// Domain name for the domain association.
        /// </summary>
        [PolicyResourceProperty("domainName", "_mUnknown_DomainName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DomainName;
        private bool _mUnknown_DomainName;
        public string? DomainName
        {
            get
            {
                if (!_mUnknown_DomainName) return _mValue_DomainName;
                throw new UndeferrableValueException("Value 'DomainAssociation.DomainName' is not present");
            }
        }

        /// <summary>
        /// Enables the automated creation of subdomains for branches.
        /// </summary>
        [PolicyResourceProperty("enableAutoSubDomain", "_mUnknown_EnableAutoSubDomain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableAutoSubDomain;
        private bool _mUnknown_EnableAutoSubDomain;
        public bool? EnableAutoSubDomain
        {
            get
            {
                if (!_mUnknown_EnableAutoSubDomain) return _mValue_EnableAutoSubDomain;
                throw new UndeferrableValueException("Value 'DomainAssociation.EnableAutoSubDomain' is not present");
            }
        }

        /// <summary>
        /// Setting for the subdomain. Documented below.
        /// </summary>
        [PolicyResourceProperty("subDomains", "_mUnknown_SubDomains")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.DomainAssociationSubDomain>? _mValue_SubDomains;
        private bool _mUnknown_SubDomains;
        public List<Outputs.DomainAssociationSubDomain>? SubDomains
        {
            get
            {
                if (!_mUnknown_SubDomains) return _mValue_SubDomains;
                throw new UndeferrableValueException("Value 'DomainAssociation.SubDomains' is not present");
            }
        }

        /// <summary>
        /// If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
        /// </summary>
        [PolicyResourceProperty("waitForVerification", "_mUnknown_WaitForVerification")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_WaitForVerification;
        private bool _mUnknown_WaitForVerification;
        public bool? WaitForVerification
        {
            get
            {
                if (!_mUnknown_WaitForVerification) return _mValue_WaitForVerification;
                throw new UndeferrableValueException("Value 'DomainAssociation.WaitForVerification' is not present");
            }
        }
    }

    [PolicyResourceType("aws:amplify/domainAssociation:DomainAssociation")]
    public sealed class DomainAssociationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Unique ID for an Amplify app.
        /// </summary>
        [PolicyResourceProperty("appId", "_mUnknown_AppId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AppId;
        private bool _mUnknown_AppId;
        public string? AppId
        {
            get
            {
                if (!_mUnknown_AppId) return _mValue_AppId;
                throw new UndeferrableValueException("Value 'DomainAssociationArgs.AppId' is not present");
            }
        }

        /// <summary>
        /// The type of SSL/TLS certificate to use for your custom domain. If you don't specify a certificate type, Amplify uses the default certificate that it provisions and manages for you.
        /// </summary>
        [PolicyResourceProperty("certificateSettings", "_mUnknown_CertificateSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DomainAssociationCertificateSettingsArgs? _mValue_CertificateSettings;
        private bool _mUnknown_CertificateSettings;
        public Inputs.DomainAssociationCertificateSettingsArgs? CertificateSettings
        {
            get
            {
                if (!_mUnknown_CertificateSettings) return _mValue_CertificateSettings;
                throw new UndeferrableValueException("Value 'DomainAssociationArgs.CertificateSettings' is not present");
            }
        }

        /// <summary>
        /// Domain name for the domain association.
        /// </summary>
        [PolicyResourceProperty("domainName", "_mUnknown_DomainName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DomainName;
        private bool _mUnknown_DomainName;
        public string? DomainName
        {
            get
            {
                if (!_mUnknown_DomainName) return _mValue_DomainName;
                throw new UndeferrableValueException("Value 'DomainAssociationArgs.DomainName' is not present");
            }
        }

        /// <summary>
        /// Enables the automated creation of subdomains for branches.
        /// </summary>
        [PolicyResourceProperty("enableAutoSubDomain", "_mUnknown_EnableAutoSubDomain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableAutoSubDomain;
        private bool _mUnknown_EnableAutoSubDomain;
        public bool? EnableAutoSubDomain
        {
            get
            {
                if (!_mUnknown_EnableAutoSubDomain) return _mValue_EnableAutoSubDomain;
                throw new UndeferrableValueException("Value 'DomainAssociationArgs.EnableAutoSubDomain' is not present");
            }
        }

        /// <summary>
        /// Setting for the subdomain. Documented below.
        /// </summary>
        [PolicyResourceProperty("subDomains", "_mUnknown_SubDomains")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.DomainAssociationSubDomainArgs>? _mValue_SubDomains;
        private bool _mUnknown_SubDomains;
        public List<Inputs.DomainAssociationSubDomainArgs>? SubDomains
        {
            get
            {
                if (!_mUnknown_SubDomains) return _mValue_SubDomains;
                throw new UndeferrableValueException("Value 'DomainAssociationArgs.SubDomains' is not present");
            }
        }

        /// <summary>
        /// If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
        /// </summary>
        [PolicyResourceProperty("waitForVerification", "_mUnknown_WaitForVerification")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_WaitForVerification;
        private bool _mUnknown_WaitForVerification;
        public bool? WaitForVerification
        {
            get
            {
                if (!_mUnknown_WaitForVerification) return _mValue_WaitForVerification;
                throw new UndeferrableValueException("Value 'DomainAssociationArgs.WaitForVerification' is not present");
            }
        }
    }
}
