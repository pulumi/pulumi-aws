// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.StorageGateway
{
    [PolicyResourceType("aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume")]
    public sealed class CachesIscsiVolume : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Volume Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.Arn' is not present");
            }
        }

        /// <summary>
        /// Whether mutual CHAP is enabled for the iSCSI target.
        /// </summary>
        [PolicyResourceProperty("chapEnabled", "_mUnknown_ChapEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ChapEnabled;
        private bool _mUnknown_ChapEnabled;
        public bool? ChapEnabled
        {
            get
            {
                if (!_mUnknown_ChapEnabled) return _mValue_ChapEnabled;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.ChapEnabled' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the gateway.
        /// </summary>
        [PolicyResourceProperty("gatewayArn", "_mUnknown_GatewayArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GatewayArn;
        private bool _mUnknown_GatewayArn;
        public string? GatewayArn
        {
            get
            {
                if (!_mUnknown_GatewayArn) return _mValue_GatewayArn;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.GatewayArn' is not present");
            }
        }

        /// <summary>
        /// Set to `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3.
        /// </summary>
        [PolicyResourceProperty("kmsEncrypted", "_mUnknown_KmsEncrypted")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_KmsEncrypted;
        private bool _mUnknown_KmsEncrypted;
        public bool? KmsEncrypted
        {
            get
            {
                if (!_mUnknown_KmsEncrypted) return _mValue_KmsEncrypted;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.KmsEncrypted' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. Is required when `kms_encrypted` is set.
        /// </summary>
        [PolicyResourceProperty("kmsKey", "_mUnknown_KmsKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKey;
        private bool _mUnknown_KmsKey;
        public string? KmsKey
        {
            get
            {
                if (!_mUnknown_KmsKey) return _mValue_KmsKey;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.KmsKey' is not present");
            }
        }

        /// <summary>
        /// Logical disk number.
        /// </summary>
        [PolicyResourceProperty("lunNumber", "_mUnknown_LunNumber")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_LunNumber;
        private bool _mUnknown_LunNumber;
        public int? LunNumber
        {
            get
            {
                if (!_mUnknown_LunNumber) return _mValue_LunNumber;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.LunNumber' is not present");
            }
        }

        /// <summary>
        /// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
        /// </summary>
        [PolicyResourceProperty("networkInterfaceId", "_mUnknown_NetworkInterfaceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NetworkInterfaceId;
        private bool _mUnknown_NetworkInterfaceId;
        public string? NetworkInterfaceId
        {
            get
            {
                if (!_mUnknown_NetworkInterfaceId) return _mValue_NetworkInterfaceId;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.NetworkInterfaceId' is not present");
            }
        }

        /// <summary>
        /// The port used to communicate with iSCSI targets.
        /// </summary>
        [PolicyResourceProperty("networkInterfacePort", "_mUnknown_NetworkInterfacePort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_NetworkInterfacePort;
        private bool _mUnknown_NetworkInterfacePort;
        public int? NetworkInterfacePort
        {
            get
            {
                if (!_mUnknown_NetworkInterfacePort) return _mValue_NetworkInterfacePort;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.NetworkInterfacePort' is not present");
            }
        }

        /// <summary>
        /// The snapshot ID of the snapshot to restore as the new cached volumeE.g., `snap-1122aabb`.
        /// </summary>
        [PolicyResourceProperty("snapshotId", "_mUnknown_SnapshotId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnapshotId;
        private bool _mUnknown_SnapshotId;
        public string? SnapshotId
        {
            get
            {
                if (!_mUnknown_SnapshotId) return _mValue_SnapshotId;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.SnapshotId' is not present");
            }
        }

        /// <summary>
        /// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volume_size_in_bytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
        /// </summary>
        [PolicyResourceProperty("sourceVolumeArn", "_mUnknown_SourceVolumeArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceVolumeArn;
        private bool _mUnknown_SourceVolumeArn;
        public string? SourceVolumeArn
        {
            get
            {
                if (!_mUnknown_SourceVolumeArn) return _mValue_SourceVolumeArn;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.SourceVolumeArn' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Target Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/target/iqn.1997-05.com.amazon:TargetName`.
        /// </summary>
        [PolicyResourceProperty("targetArn", "_mUnknown_TargetArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TargetArn;
        private bool _mUnknown_TargetArn;
        public string? TargetArn
        {
            get
            {
                if (!_mUnknown_TargetArn) return _mValue_TargetArn;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.TargetArn' is not present");
            }
        }

        /// <summary>
        /// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
        /// </summary>
        [PolicyResourceProperty("targetName", "_mUnknown_TargetName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TargetName;
        private bool _mUnknown_TargetName;
        public string? TargetName
        {
            get
            {
                if (!_mUnknown_TargetName) return _mValue_TargetName;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.TargetName' is not present");
            }
        }

        /// <summary>
        /// Volume Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
        /// </summary>
        [PolicyResourceProperty("volumeArn", "_mUnknown_VolumeArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VolumeArn;
        private bool _mUnknown_VolumeArn;
        public string? VolumeArn
        {
            get
            {
                if (!_mUnknown_VolumeArn) return _mValue_VolumeArn;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.VolumeArn' is not present");
            }
        }

        /// <summary>
        /// Volume ID, e.g., `vol-12345678`.
        /// </summary>
        [PolicyResourceProperty("volumeId", "_mUnknown_VolumeId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VolumeId;
        private bool _mUnknown_VolumeId;
        public string? VolumeId
        {
            get
            {
                if (!_mUnknown_VolumeId) return _mValue_VolumeId;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.VolumeId' is not present");
            }
        }

        /// <summary>
        /// The size of the volume in bytes.
        /// </summary>
        [PolicyResourceProperty("volumeSizeInBytes", "_mUnknown_VolumeSizeInBytes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_VolumeSizeInBytes;
        private bool _mUnknown_VolumeSizeInBytes;
        public int? VolumeSizeInBytes
        {
            get
            {
                if (!_mUnknown_VolumeSizeInBytes) return _mValue_VolumeSizeInBytes;
                throw new UndeferrableValueException("Value 'CachesIscsiVolume.VolumeSizeInBytes' is not present");
            }
        }
    }

    [PolicyResourceType("aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume")]
    public sealed class CachesIscsiVolumeArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the gateway.
        /// </summary>
        [PolicyResourceProperty("gatewayArn", "_mUnknown_GatewayArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GatewayArn;
        private bool _mUnknown_GatewayArn;
        public string? GatewayArn
        {
            get
            {
                if (!_mUnknown_GatewayArn) return _mValue_GatewayArn;
                throw new UndeferrableValueException("Value 'CachesIscsiVolumeArgs.GatewayArn' is not present");
            }
        }

        /// <summary>
        /// Set to `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3.
        /// </summary>
        [PolicyResourceProperty("kmsEncrypted", "_mUnknown_KmsEncrypted")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_KmsEncrypted;
        private bool _mUnknown_KmsEncrypted;
        public bool? KmsEncrypted
        {
            get
            {
                if (!_mUnknown_KmsEncrypted) return _mValue_KmsEncrypted;
                throw new UndeferrableValueException("Value 'CachesIscsiVolumeArgs.KmsEncrypted' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. Is required when `kms_encrypted` is set.
        /// </summary>
        [PolicyResourceProperty("kmsKey", "_mUnknown_KmsKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKey;
        private bool _mUnknown_KmsKey;
        public string? KmsKey
        {
            get
            {
                if (!_mUnknown_KmsKey) return _mValue_KmsKey;
                throw new UndeferrableValueException("Value 'CachesIscsiVolumeArgs.KmsKey' is not present");
            }
        }

        /// <summary>
        /// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
        /// </summary>
        [PolicyResourceProperty("networkInterfaceId", "_mUnknown_NetworkInterfaceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NetworkInterfaceId;
        private bool _mUnknown_NetworkInterfaceId;
        public string? NetworkInterfaceId
        {
            get
            {
                if (!_mUnknown_NetworkInterfaceId) return _mValue_NetworkInterfaceId;
                throw new UndeferrableValueException("Value 'CachesIscsiVolumeArgs.NetworkInterfaceId' is not present");
            }
        }

        /// <summary>
        /// The snapshot ID of the snapshot to restore as the new cached volumeE.g., `snap-1122aabb`.
        /// </summary>
        [PolicyResourceProperty("snapshotId", "_mUnknown_SnapshotId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnapshotId;
        private bool _mUnknown_SnapshotId;
        public string? SnapshotId
        {
            get
            {
                if (!_mUnknown_SnapshotId) return _mValue_SnapshotId;
                throw new UndeferrableValueException("Value 'CachesIscsiVolumeArgs.SnapshotId' is not present");
            }
        }

        /// <summary>
        /// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volume_size_in_bytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
        /// </summary>
        [PolicyResourceProperty("sourceVolumeArn", "_mUnknown_SourceVolumeArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceVolumeArn;
        private bool _mUnknown_SourceVolumeArn;
        public string? SourceVolumeArn
        {
            get
            {
                if (!_mUnknown_SourceVolumeArn) return _mValue_SourceVolumeArn;
                throw new UndeferrableValueException("Value 'CachesIscsiVolumeArgs.SourceVolumeArn' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'CachesIscsiVolumeArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
        /// </summary>
        [PolicyResourceProperty("targetName", "_mUnknown_TargetName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TargetName;
        private bool _mUnknown_TargetName;
        public string? TargetName
        {
            get
            {
                if (!_mUnknown_TargetName) return _mValue_TargetName;
                throw new UndeferrableValueException("Value 'CachesIscsiVolumeArgs.TargetName' is not present");
            }
        }

        /// <summary>
        /// The size of the volume in bytes.
        /// </summary>
        [PolicyResourceProperty("volumeSizeInBytes", "_mUnknown_VolumeSizeInBytes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_VolumeSizeInBytes;
        private bool _mUnknown_VolumeSizeInBytes;
        public int? VolumeSizeInBytes
        {
            get
            {
                if (!_mUnknown_VolumeSizeInBytes) return _mValue_VolumeSizeInBytes;
                throw new UndeferrableValueException("Value 'CachesIscsiVolumeArgs.VolumeSizeInBytes' is not present");
            }
        }
    }
}
