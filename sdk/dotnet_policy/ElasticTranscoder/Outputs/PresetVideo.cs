// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ElasticTranscoder.Outputs
{
    public sealed class PresetVideo
    {
        /// <summary>
        /// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
        /// </summary>
        [PolicyResourceProperty("aspectRatio", "_mUnknown_AspectRatio")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AspectRatio;
        private bool _mUnknown_AspectRatio;
        public string? AspectRatio
        {
            get
            {
                if (!_mUnknown_AspectRatio) return _mValue_AspectRatio;
                throw new UndeferrableValueException("Value 'PresetVideo.AspectRatio' is not present");
            }
        }

        /// <summary>
        /// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
        /// </summary>
        [PolicyResourceProperty("bitRate", "_mUnknown_BitRate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BitRate;
        private bool _mUnknown_BitRate;
        public string? BitRate
        {
            get
            {
                if (!_mUnknown_BitRate) return _mValue_BitRate;
                throw new UndeferrableValueException("Value 'PresetVideo.BitRate' is not present");
            }
        }

        /// <summary>
        /// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
        /// </summary>
        [PolicyResourceProperty("codec", "_mUnknown_Codec")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Codec;
        private bool _mUnknown_Codec;
        public string? Codec
        {
            get
            {
                if (!_mUnknown_Codec) return _mValue_Codec;
                throw new UndeferrableValueException("Value 'PresetVideo.Codec' is not present");
            }
        }

        /// <summary>
        /// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
        /// </summary>
        [PolicyResourceProperty("displayAspectRatio", "_mUnknown_DisplayAspectRatio")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DisplayAspectRatio;
        private bool _mUnknown_DisplayAspectRatio;
        public string? DisplayAspectRatio
        {
            get
            {
                if (!_mUnknown_DisplayAspectRatio) return _mValue_DisplayAspectRatio;
                throw new UndeferrableValueException("Value 'PresetVideo.DisplayAspectRatio' is not present");
            }
        }

        /// <summary>
        /// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
        /// </summary>
        [PolicyResourceProperty("fixedGop", "_mUnknown_FixedGop")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FixedGop;
        private bool _mUnknown_FixedGop;
        public string? FixedGop
        {
            get
            {
                if (!_mUnknown_FixedGop) return _mValue_FixedGop;
                throw new UndeferrableValueException("Value 'PresetVideo.FixedGop' is not present");
            }
        }

        /// <summary>
        /// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
        /// </summary>
        [PolicyResourceProperty("frameRate", "_mUnknown_FrameRate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FrameRate;
        private bool _mUnknown_FrameRate;
        public string? FrameRate
        {
            get
            {
                if (!_mUnknown_FrameRate) return _mValue_FrameRate;
                throw new UndeferrableValueException("Value 'PresetVideo.FrameRate' is not present");
            }
        }

        /// <summary>
        /// The maximum number of frames between key frames. Not applicable for containers of type gif.
        /// </summary>
        [PolicyResourceProperty("keyframesMaxDist", "_mUnknown_KeyframesMaxDist")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KeyframesMaxDist;
        private bool _mUnknown_KeyframesMaxDist;
        public string? KeyframesMaxDist
        {
            get
            {
                if (!_mUnknown_KeyframesMaxDist) return _mValue_KeyframesMaxDist;
                throw new UndeferrableValueException("Value 'PresetVideo.KeyframesMaxDist' is not present");
            }
        }

        /// <summary>
        /// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
        /// </summary>
        [PolicyResourceProperty("maxFrameRate", "_mUnknown_MaxFrameRate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MaxFrameRate;
        private bool _mUnknown_MaxFrameRate;
        public string? MaxFrameRate
        {
            get
            {
                if (!_mUnknown_MaxFrameRate) return _mValue_MaxFrameRate;
                throw new UndeferrableValueException("Value 'PresetVideo.MaxFrameRate' is not present");
            }
        }

        /// <summary>
        /// The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
        /// </summary>
        [PolicyResourceProperty("maxHeight", "_mUnknown_MaxHeight")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MaxHeight;
        private bool _mUnknown_MaxHeight;
        public string? MaxHeight
        {
            get
            {
                if (!_mUnknown_MaxHeight) return _mValue_MaxHeight;
                throw new UndeferrableValueException("Value 'PresetVideo.MaxHeight' is not present");
            }
        }

        /// <summary>
        /// The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
        /// </summary>
        [PolicyResourceProperty("maxWidth", "_mUnknown_MaxWidth")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MaxWidth;
        private bool _mUnknown_MaxWidth;
        public string? MaxWidth
        {
            get
            {
                if (!_mUnknown_MaxWidth) return _mValue_MaxWidth;
                throw new UndeferrableValueException("Value 'PresetVideo.MaxWidth' is not present");
            }
        }

        /// <summary>
        /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
        /// </summary>
        [PolicyResourceProperty("paddingPolicy", "_mUnknown_PaddingPolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PaddingPolicy;
        private bool _mUnknown_PaddingPolicy;
        public string? PaddingPolicy
        {
            get
            {
                if (!_mUnknown_PaddingPolicy) return _mValue_PaddingPolicy;
                throw new UndeferrableValueException("Value 'PresetVideo.PaddingPolicy' is not present");
            }
        }

        /// <summary>
        /// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
        /// </summary>
        [PolicyResourceProperty("resolution", "_mUnknown_Resolution")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Resolution;
        private bool _mUnknown_Resolution;
        public string? Resolution
        {
            get
            {
                if (!_mUnknown_Resolution) return _mValue_Resolution;
                throw new UndeferrableValueException("Value 'PresetVideo.Resolution' is not present");
            }
        }

        /// <summary>
        /// A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
        /// </summary>
        [PolicyResourceProperty("sizingPolicy", "_mUnknown_SizingPolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SizingPolicy;
        private bool _mUnknown_SizingPolicy;
        public string? SizingPolicy
        {
            get
            {
                if (!_mUnknown_SizingPolicy) return _mValue_SizingPolicy;
                throw new UndeferrableValueException("Value 'PresetVideo.SizingPolicy' is not present");
            }
        }
    }
}
