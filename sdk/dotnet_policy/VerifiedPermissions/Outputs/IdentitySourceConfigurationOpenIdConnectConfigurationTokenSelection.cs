// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.VerifiedPermissions.Outputs
{
    public sealed class IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection
    {
        /// <summary>
        /// The OIDC configuration for processing access tokens. See Access Token Only below.
        /// </summary>
        [PolicyResourceProperty("accessTokenOnly", "_mUnknown_AccessTokenOnly")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnly? _mValue_AccessTokenOnly;
        private bool _mUnknown_AccessTokenOnly;
        public Outputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnly? AccessTokenOnly
        {
            get
            {
                if (!_mUnknown_AccessTokenOnly) return _mValue_AccessTokenOnly;
                throw new UndeferrableValueException("Value 'IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection.AccessTokenOnly' is not present");
            }
        }

        /// <summary>
        /// The OIDC configuration for processing identity (ID) tokens. See Identity Token Only below.
        /// </summary>
        [PolicyResourceProperty("identityTokenOnly", "_mUnknown_IdentityTokenOnly")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnly? _mValue_IdentityTokenOnly;
        private bool _mUnknown_IdentityTokenOnly;
        public Outputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnly? IdentityTokenOnly
        {
            get
            {
                if (!_mUnknown_IdentityTokenOnly) return _mValue_IdentityTokenOnly;
                throw new UndeferrableValueException("Value 'IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection.IdentityTokenOnly' is not present");
            }
        }
    }
}
