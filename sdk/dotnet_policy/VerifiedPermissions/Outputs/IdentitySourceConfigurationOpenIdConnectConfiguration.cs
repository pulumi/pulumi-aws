// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.VerifiedPermissions.Outputs
{
    public sealed class IdentitySourceConfigurationOpenIdConnectConfiguration
    {
        /// <summary>
        /// A descriptive string that you want to prefix to user entities from your OIDC identity provider.
        /// </summary>
        [PolicyResourceProperty("entityIdPrefix", "_mUnknown_EntityIdPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EntityIdPrefix;
        private bool _mUnknown_EntityIdPrefix;
        public string? EntityIdPrefix
        {
            get
            {
                if (!_mUnknown_EntityIdPrefix) return _mValue_EntityIdPrefix;
                throw new UndeferrableValueException("Value 'IdentitySourceConfigurationOpenIdConnectConfiguration.EntityIdPrefix' is not present");
            }
        }

        /// <summary>
        /// The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
        /// </summary>
        [PolicyResourceProperty("groupConfiguration", "_mUnknown_GroupConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfiguration? _mValue_GroupConfiguration;
        private bool _mUnknown_GroupConfiguration;
        public Outputs.IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfiguration? GroupConfiguration
        {
            get
            {
                if (!_mUnknown_GroupConfiguration) return _mValue_GroupConfiguration;
                throw new UndeferrableValueException("Value 'IdentitySourceConfigurationOpenIdConnectConfiguration.GroupConfiguration' is not present");
            }
        }

        /// <summary>
        /// The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
        /// </summary>
        [PolicyResourceProperty("issuer", "_mUnknown_Issuer")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Issuer;
        private bool _mUnknown_Issuer;
        public string? Issuer
        {
            get
            {
                if (!_mUnknown_Issuer) return _mValue_Issuer;
                throw new UndeferrableValueException("Value 'IdentitySourceConfigurationOpenIdConnectConfiguration.Issuer' is not present");
            }
        }

        /// <summary>
        /// The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
        /// </summary>
        [PolicyResourceProperty("tokenSelection", "_mUnknown_TokenSelection")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection? _mValue_TokenSelection;
        private bool _mUnknown_TokenSelection;
        public Outputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelection? TokenSelection
        {
            get
            {
                if (!_mUnknown_TokenSelection) return _mValue_TokenSelection;
                throw new UndeferrableValueException("Value 'IdentitySourceConfigurationOpenIdConnectConfiguration.TokenSelection' is not present");
            }
        }
    }
}
