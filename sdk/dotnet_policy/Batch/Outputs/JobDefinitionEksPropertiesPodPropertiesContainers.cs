// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Batch.Outputs
{
    public sealed class JobDefinitionEksPropertiesPodPropertiesContainers
    {
        /// <summary>
        /// Array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container's environment.
        /// </summary>
        [PolicyResourceProperty("args", "_mUnknown_Args")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Args;
        private bool _mUnknown_Args;
        public List<string>? Args
        {
            get
            {
                if (!_mUnknown_Args) return _mValue_Args;
                throw new UndeferrableValueException("Value 'JobDefinitionEksPropertiesPodPropertiesContainers.Args' is not present");
            }
        }

        /// <summary>
        /// Entrypoint for the container. This isn't run within a shell. If this isn't specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container's environment.
        /// </summary>
        [PolicyResourceProperty("commands", "_mUnknown_Commands")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Commands;
        private bool _mUnknown_Commands;
        public List<string>? Commands
        {
            get
            {
                if (!_mUnknown_Commands) return _mValue_Commands;
                throw new UndeferrableValueException("Value 'JobDefinitionEksPropertiesPodPropertiesContainers.Commands' is not present");
            }
        }

        /// <summary>
        /// Environment variables to pass to a container. See EKS Environment below.
        /// </summary>
        [PolicyResourceProperty("envs", "_mUnknown_Envs")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.JobDefinitionEksPropertiesPodPropertiesContainersEnv>? _mValue_Envs;
        private bool _mUnknown_Envs;
        public List<Outputs.JobDefinitionEksPropertiesPodPropertiesContainersEnv>? Envs
        {
            get
            {
                if (!_mUnknown_Envs) return _mValue_Envs;
                throw new UndeferrableValueException("Value 'JobDefinitionEksPropertiesPodPropertiesContainers.Envs' is not present");
            }
        }

        /// <summary>
        /// Docker image used to start the container.
        /// </summary>
        [PolicyResourceProperty("image", "_mUnknown_Image")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Image;
        private bool _mUnknown_Image;
        public string? Image
        {
            get
            {
                if (!_mUnknown_Image) return _mValue_Image;
                throw new UndeferrableValueException("Value 'JobDefinitionEksPropertiesPodPropertiesContainers.Image' is not present");
            }
        }

        /// <summary>
        /// Image pull policy for the container. Supported values are `Always`, `IfNotPresent`, and `Never`.
        /// </summary>
        [PolicyResourceProperty("imagePullPolicy", "_mUnknown_ImagePullPolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ImagePullPolicy;
        private bool _mUnknown_ImagePullPolicy;
        public string? ImagePullPolicy
        {
            get
            {
                if (!_mUnknown_ImagePullPolicy) return _mValue_ImagePullPolicy;
                throw new UndeferrableValueException("Value 'JobDefinitionEksPropertiesPodPropertiesContainers.ImagePullPolicy' is not present");
            }
        }

        /// <summary>
        /// Name of the container. If the name isn't specified, the default name "Default" is used. Each container in a pod must have a unique name.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'JobDefinitionEksPropertiesPodPropertiesContainers.Name' is not present");
            }
        }

        /// <summary>
        /// Type and amount of resources to assign to a container. The supported resources include `memory`, `cpu`, and `nvidia.com/gpu`.
        /// </summary>
        [PolicyResourceProperty("resources", "_mUnknown_Resources")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.JobDefinitionEksPropertiesPodPropertiesContainersResources? _mValue_Resources;
        private bool _mUnknown_Resources;
        public Outputs.JobDefinitionEksPropertiesPodPropertiesContainersResources? Resources
        {
            get
            {
                if (!_mUnknown_Resources) return _mValue_Resources;
                throw new UndeferrableValueException("Value 'JobDefinitionEksPropertiesPodPropertiesContainers.Resources' is not present");
            }
        }

        /// <summary>
        /// Security context for a job.
        /// </summary>
        [PolicyResourceProperty("securityContext", "_mUnknown_SecurityContext")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.JobDefinitionEksPropertiesPodPropertiesContainersSecurityContext? _mValue_SecurityContext;
        private bool _mUnknown_SecurityContext;
        public Outputs.JobDefinitionEksPropertiesPodPropertiesContainersSecurityContext? SecurityContext
        {
            get
            {
                if (!_mUnknown_SecurityContext) return _mValue_SecurityContext;
                throw new UndeferrableValueException("Value 'JobDefinitionEksPropertiesPodPropertiesContainers.SecurityContext' is not present");
            }
        }

        /// <summary>
        /// Volume mounts for the container.
        /// </summary>
        [PolicyResourceProperty("volumeMounts", "_mUnknown_VolumeMounts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.JobDefinitionEksPropertiesPodPropertiesContainersVolumeMount>? _mValue_VolumeMounts;
        private bool _mUnknown_VolumeMounts;
        public List<Outputs.JobDefinitionEksPropertiesPodPropertiesContainersVolumeMount>? VolumeMounts
        {
            get
            {
                if (!_mUnknown_VolumeMounts) return _mValue_VolumeMounts;
                throw new UndeferrableValueException("Value 'JobDefinitionEksPropertiesPodPropertiesContainers.VolumeMounts' is not present");
            }
        }
    }
}
