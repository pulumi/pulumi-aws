// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ElastiCache
{
    [PolicyResourceType("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup")]
    public sealed class GlobalReplicationGroup : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the ElastiCache Global Replication Group.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.Arn' is not present");
            }
        }

        /// <summary>
        /// A flag that indicate whether the encryption at rest is enabled.
        /// </summary>
        [PolicyResourceProperty("atRestEncryptionEnabled", "_mUnknown_AtRestEncryptionEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AtRestEncryptionEnabled;
        private bool _mUnknown_AtRestEncryptionEnabled;
        public bool? AtRestEncryptionEnabled
        {
            get
            {
                if (!_mUnknown_AtRestEncryptionEnabled) return _mValue_AtRestEncryptionEnabled;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.AtRestEncryptionEnabled' is not present");
            }
        }

        /// <summary>
        /// A flag that indicate whether AuthToken (password) is enabled.
        /// </summary>
        [PolicyResourceProperty("authTokenEnabled", "_mUnknown_AuthTokenEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AuthTokenEnabled;
        private bool _mUnknown_AuthTokenEnabled;
        public bool? AuthTokenEnabled
        {
            get
            {
                if (!_mUnknown_AuthTokenEnabled) return _mValue_AuthTokenEnabled;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.AuthTokenEnabled' is not present");
            }
        }

        /// <summary>
        /// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
        /// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
        /// </summary>
        [PolicyResourceProperty("automaticFailoverEnabled", "_mUnknown_AutomaticFailoverEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutomaticFailoverEnabled;
        private bool _mUnknown_AutomaticFailoverEnabled;
        public bool? AutomaticFailoverEnabled
        {
            get
            {
                if (!_mUnknown_AutomaticFailoverEnabled) return _mValue_AutomaticFailoverEnabled;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.AutomaticFailoverEnabled' is not present");
            }
        }

        /// <summary>
        /// The instance class used.
        /// See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
        /// and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
        /// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
        /// </summary>
        [PolicyResourceProperty("cacheNodeType", "_mUnknown_CacheNodeType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CacheNodeType;
        private bool _mUnknown_CacheNodeType;
        public string? CacheNodeType
        {
            get
            {
                if (!_mUnknown_CacheNodeType) return _mValue_CacheNodeType;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.CacheNodeType' is not present");
            }
        }

        /// <summary>
        /// Indicates whether the Global Datastore is cluster enabled.
        /// </summary>
        [PolicyResourceProperty("clusterEnabled", "_mUnknown_ClusterEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ClusterEnabled;
        private bool _mUnknown_ClusterEnabled;
        public bool? ClusterEnabled
        {
            get
            {
                if (!_mUnknown_ClusterEnabled) return _mValue_ClusterEnabled;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.ClusterEnabled' is not present");
            }
        }

        /// <summary>
        /// The name of the cache engine to be used for the clusters in this global replication group.
        /// </summary>
        [PolicyResourceProperty("engine", "_mUnknown_Engine")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Engine;
        private bool _mUnknown_Engine;
        public string? Engine
        {
            get
            {
                if (!_mUnknown_Engine) return _mValue_Engine;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.Engine' is not present");
            }
        }

        /// <summary>
        /// Redis version to use for the Global Replication Group.
        /// When creating, by default the Global Replication Group inherits the version of the primary replication group.
        /// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
        /// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
        /// When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
        /// When the version is 6, the major and minor version can be set, e.g., `6.2`,
        /// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
        /// The actual engine version used is returned in the attribute `engine_version_actual`, see Attribute Reference below.
        /// </summary>
        [PolicyResourceProperty("engineVersion", "_mUnknown_EngineVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EngineVersion;
        private bool _mUnknown_EngineVersion;
        public string? EngineVersion
        {
            get
            {
                if (!_mUnknown_EngineVersion) return _mValue_EngineVersion;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.EngineVersion' is not present");
            }
        }

        /// <summary>
        /// The full version number of the cache engine running on the members of this global replication group.
        /// </summary>
        [PolicyResourceProperty("engineVersionActual", "_mUnknown_EngineVersionActual")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EngineVersionActual;
        private bool _mUnknown_EngineVersionActual;
        public string? EngineVersionActual
        {
            get
            {
                if (!_mUnknown_EngineVersionActual) return _mValue_EngineVersionActual;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.EngineVersionActual' is not present");
            }
        }

        /// <summary>
        /// Set of node groups (shards) on the global replication group.
        /// Has the values:
        /// </summary>
        [PolicyResourceProperty("globalNodeGroups", "_mUnknown_GlobalNodeGroups")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.GlobalReplicationGroupGlobalNodeGroup>? _mValue_GlobalNodeGroups;
        private bool _mUnknown_GlobalNodeGroups;
        public List<Outputs.GlobalReplicationGroupGlobalNodeGroup>? GlobalNodeGroups
        {
            get
            {
                if (!_mUnknown_GlobalNodeGroups) return _mValue_GlobalNodeGroups;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.GlobalNodeGroups' is not present");
            }
        }

        /// <summary>
        /// A user-created description for the global replication group.
        /// </summary>
        [PolicyResourceProperty("globalReplicationGroupDescription", "_mUnknown_GlobalReplicationGroupDescription")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GlobalReplicationGroupDescription;
        private bool _mUnknown_GlobalReplicationGroupDescription;
        public string? GlobalReplicationGroupDescription
        {
            get
            {
                if (!_mUnknown_GlobalReplicationGroupDescription) return _mValue_GlobalReplicationGroupDescription;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.GlobalReplicationGroupDescription' is not present");
            }
        }

        /// <summary>
        /// The full ID of the global replication group.
        /// </summary>
        [PolicyResourceProperty("globalReplicationGroupId", "_mUnknown_GlobalReplicationGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GlobalReplicationGroupId;
        private bool _mUnknown_GlobalReplicationGroupId;
        public string? GlobalReplicationGroupId
        {
            get
            {
                if (!_mUnknown_GlobalReplicationGroupId) return _mValue_GlobalReplicationGroupId;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.GlobalReplicationGroupId' is not present");
            }
        }

        /// <summary>
        /// The suffix name of a Global Datastore. If `global_replication_group_id_suffix` is changed, creates a new resource.
        /// </summary>
        [PolicyResourceProperty("globalReplicationGroupIdSuffix", "_mUnknown_GlobalReplicationGroupIdSuffix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GlobalReplicationGroupIdSuffix;
        private bool _mUnknown_GlobalReplicationGroupIdSuffix;
        public string? GlobalReplicationGroupIdSuffix
        {
            get
            {
                if (!_mUnknown_GlobalReplicationGroupIdSuffix) return _mValue_GlobalReplicationGroupIdSuffix;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.GlobalReplicationGroupIdSuffix' is not present");
            }
        }

        /// <summary>
        /// The number of node groups (shards) on the global replication group.
        /// </summary>
        [PolicyResourceProperty("numNodeGroups", "_mUnknown_NumNodeGroups")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_NumNodeGroups;
        private bool _mUnknown_NumNodeGroups;
        public int? NumNodeGroups
        {
            get
            {
                if (!_mUnknown_NumNodeGroups) return _mValue_NumNodeGroups;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.NumNodeGroups' is not present");
            }
        }

        /// <summary>
        /// An ElastiCache Parameter Group to use for the Global Replication Group.
        /// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
        /// Specifying without a major version upgrade will fail.
        /// Note that ElastiCache creates a copy of this parameter group for each member replication group.
        /// </summary>
        [PolicyResourceProperty("parameterGroupName", "_mUnknown_ParameterGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ParameterGroupName;
        private bool _mUnknown_ParameterGroupName;
        public string? ParameterGroupName
        {
            get
            {
                if (!_mUnknown_ParameterGroupName) return _mValue_ParameterGroupName;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.ParameterGroupName' is not present");
            }
        }

        /// <summary>
        /// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primary_replication_group_id` is changed, creates a new resource.
        /// </summary>
        [PolicyResourceProperty("primaryReplicationGroupId", "_mUnknown_PrimaryReplicationGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrimaryReplicationGroupId;
        private bool _mUnknown_PrimaryReplicationGroupId;
        public string? PrimaryReplicationGroupId
        {
            get
            {
                if (!_mUnknown_PrimaryReplicationGroupId) return _mValue_PrimaryReplicationGroupId;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.PrimaryReplicationGroupId' is not present");
            }
        }

        /// <summary>
        /// A flag that indicates whether the encryption in transit is enabled.
        /// </summary>
        [PolicyResourceProperty("transitEncryptionEnabled", "_mUnknown_TransitEncryptionEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_TransitEncryptionEnabled;
        private bool _mUnknown_TransitEncryptionEnabled;
        public bool? TransitEncryptionEnabled
        {
            get
            {
                if (!_mUnknown_TransitEncryptionEnabled) return _mValue_TransitEncryptionEnabled;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroup.TransitEncryptionEnabled' is not present");
            }
        }
    }

    [PolicyResourceType("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup")]
    public sealed class GlobalReplicationGroupArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
        /// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
        /// </summary>
        [PolicyResourceProperty("automaticFailoverEnabled", "_mUnknown_AutomaticFailoverEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutomaticFailoverEnabled;
        private bool _mUnknown_AutomaticFailoverEnabled;
        public bool? AutomaticFailoverEnabled
        {
            get
            {
                if (!_mUnknown_AutomaticFailoverEnabled) return _mValue_AutomaticFailoverEnabled;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.AutomaticFailoverEnabled' is not present");
            }
        }

        /// <summary>
        /// The instance class used.
        /// See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
        /// and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
        /// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
        /// </summary>
        [PolicyResourceProperty("cacheNodeType", "_mUnknown_CacheNodeType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CacheNodeType;
        private bool _mUnknown_CacheNodeType;
        public string? CacheNodeType
        {
            get
            {
                if (!_mUnknown_CacheNodeType) return _mValue_CacheNodeType;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.CacheNodeType' is not present");
            }
        }

        /// <summary>
        /// Redis version to use for the Global Replication Group.
        /// When creating, by default the Global Replication Group inherits the version of the primary replication group.
        /// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
        /// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
        /// When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
        /// When the version is 6, the major and minor version can be set, e.g., `6.2`,
        /// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
        /// The actual engine version used is returned in the attribute `engine_version_actual`, see Attribute Reference below.
        /// </summary>
        [PolicyResourceProperty("engineVersion", "_mUnknown_EngineVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EngineVersion;
        private bool _mUnknown_EngineVersion;
        public string? EngineVersion
        {
            get
            {
                if (!_mUnknown_EngineVersion) return _mValue_EngineVersion;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.EngineVersion' is not present");
            }
        }

        /// <summary>
        /// A user-created description for the global replication group.
        /// </summary>
        [PolicyResourceProperty("globalReplicationGroupDescription", "_mUnknown_GlobalReplicationGroupDescription")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GlobalReplicationGroupDescription;
        private bool _mUnknown_GlobalReplicationGroupDescription;
        public string? GlobalReplicationGroupDescription
        {
            get
            {
                if (!_mUnknown_GlobalReplicationGroupDescription) return _mValue_GlobalReplicationGroupDescription;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.GlobalReplicationGroupDescription' is not present");
            }
        }

        /// <summary>
        /// The suffix name of a Global Datastore. If `global_replication_group_id_suffix` is changed, creates a new resource.
        /// </summary>
        [PolicyResourceProperty("globalReplicationGroupIdSuffix", "_mUnknown_GlobalReplicationGroupIdSuffix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GlobalReplicationGroupIdSuffix;
        private bool _mUnknown_GlobalReplicationGroupIdSuffix;
        public string? GlobalReplicationGroupIdSuffix
        {
            get
            {
                if (!_mUnknown_GlobalReplicationGroupIdSuffix) return _mValue_GlobalReplicationGroupIdSuffix;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.GlobalReplicationGroupIdSuffix' is not present");
            }
        }

        /// <summary>
        /// The number of node groups (shards) on the global replication group.
        /// </summary>
        [PolicyResourceProperty("numNodeGroups", "_mUnknown_NumNodeGroups")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_NumNodeGroups;
        private bool _mUnknown_NumNodeGroups;
        public int? NumNodeGroups
        {
            get
            {
                if (!_mUnknown_NumNodeGroups) return _mValue_NumNodeGroups;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.NumNodeGroups' is not present");
            }
        }

        /// <summary>
        /// An ElastiCache Parameter Group to use for the Global Replication Group.
        /// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
        /// Specifying without a major version upgrade will fail.
        /// Note that ElastiCache creates a copy of this parameter group for each member replication group.
        /// </summary>
        [PolicyResourceProperty("parameterGroupName", "_mUnknown_ParameterGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ParameterGroupName;
        private bool _mUnknown_ParameterGroupName;
        public string? ParameterGroupName
        {
            get
            {
                if (!_mUnknown_ParameterGroupName) return _mValue_ParameterGroupName;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.ParameterGroupName' is not present");
            }
        }

        /// <summary>
        /// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primary_replication_group_id` is changed, creates a new resource.
        /// </summary>
        [PolicyResourceProperty("primaryReplicationGroupId", "_mUnknown_PrimaryReplicationGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrimaryReplicationGroupId;
        private bool _mUnknown_PrimaryReplicationGroupId;
        public string? PrimaryReplicationGroupId
        {
            get
            {
                if (!_mUnknown_PrimaryReplicationGroupId) return _mValue_PrimaryReplicationGroupId;
                throw new UndeferrableValueException("Value 'GlobalReplicationGroupArgs.PrimaryReplicationGroupId' is not present");
            }
        }
    }
}
