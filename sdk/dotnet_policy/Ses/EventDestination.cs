// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ses
{
    [PolicyResourceType("aws:ses/eventDestination:EventDestination")]
    public sealed class EventDestination : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The SES event destination ARN.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'EventDestination.Arn' is not present");
            }
        }

        /// <summary>
        /// CloudWatch destination for the events
        /// </summary>
        [PolicyResourceProperty("cloudwatchDestinations", "_mUnknown_CloudwatchDestinations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.EventDestinationCloudwatchDestination>? _mValue_CloudwatchDestinations;
        private bool _mUnknown_CloudwatchDestinations;
        public List<Outputs.EventDestinationCloudwatchDestination>? CloudwatchDestinations
        {
            get
            {
                if (!_mUnknown_CloudwatchDestinations) return _mValue_CloudwatchDestinations;
                throw new UndeferrableValueException("Value 'EventDestination.CloudwatchDestinations' is not present");
            }
        }

        /// <summary>
        /// The name of the configuration set
        /// </summary>
        [PolicyResourceProperty("configurationSetName", "_mUnknown_ConfigurationSetName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConfigurationSetName;
        private bool _mUnknown_ConfigurationSetName;
        public string? ConfigurationSetName
        {
            get
            {
                if (!_mUnknown_ConfigurationSetName) return _mValue_ConfigurationSetName;
                throw new UndeferrableValueException("Value 'EventDestination.ConfigurationSetName' is not present");
            }
        }

        /// <summary>
        /// If true, the event destination will be enabled
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'EventDestination.Enabled' is not present");
            }
        }

        /// <summary>
        /// Send the events to a kinesis firehose destination
        /// </summary>
        [PolicyResourceProperty("kinesisDestination", "_mUnknown_KinesisDestination")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.EventDestinationKinesisDestination? _mValue_KinesisDestination;
        private bool _mUnknown_KinesisDestination;
        public Outputs.EventDestinationKinesisDestination? KinesisDestination
        {
            get
            {
                if (!_mUnknown_KinesisDestination) return _mValue_KinesisDestination;
                throw new UndeferrableValueException("Value 'EventDestination.KinesisDestination' is not present");
            }
        }

        /// <summary>
        /// A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
        /// </summary>
        [PolicyResourceProperty("matchingTypes", "_mUnknown_MatchingTypes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_MatchingTypes;
        private bool _mUnknown_MatchingTypes;
        public List<string>? MatchingTypes
        {
            get
            {
                if (!_mUnknown_MatchingTypes) return _mValue_MatchingTypes;
                throw new UndeferrableValueException("Value 'EventDestination.MatchingTypes' is not present");
            }
        }

        /// <summary>
        /// The name of the event destination
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'EventDestination.Name' is not present");
            }
        }

        /// <summary>
        /// Send the events to an SNS Topic destination
        /// 
        /// &gt; **NOTE:** You can specify `"cloudwatch_destination"` or `"kinesis_destination"` but not both
        /// </summary>
        [PolicyResourceProperty("snsDestination", "_mUnknown_SnsDestination")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.EventDestinationSnsDestination? _mValue_SnsDestination;
        private bool _mUnknown_SnsDestination;
        public Outputs.EventDestinationSnsDestination? SnsDestination
        {
            get
            {
                if (!_mUnknown_SnsDestination) return _mValue_SnsDestination;
                throw new UndeferrableValueException("Value 'EventDestination.SnsDestination' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ses/eventDestination:EventDestination")]
    public sealed class EventDestinationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// CloudWatch destination for the events
        /// </summary>
        [PolicyResourceProperty("cloudwatchDestinations", "_mUnknown_CloudwatchDestinations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.EventDestinationCloudwatchDestinationArgs>? _mValue_CloudwatchDestinations;
        private bool _mUnknown_CloudwatchDestinations;
        public List<Inputs.EventDestinationCloudwatchDestinationArgs>? CloudwatchDestinations
        {
            get
            {
                if (!_mUnknown_CloudwatchDestinations) return _mValue_CloudwatchDestinations;
                throw new UndeferrableValueException("Value 'EventDestinationArgs.CloudwatchDestinations' is not present");
            }
        }

        /// <summary>
        /// The name of the configuration set
        /// </summary>
        [PolicyResourceProperty("configurationSetName", "_mUnknown_ConfigurationSetName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConfigurationSetName;
        private bool _mUnknown_ConfigurationSetName;
        public string? ConfigurationSetName
        {
            get
            {
                if (!_mUnknown_ConfigurationSetName) return _mValue_ConfigurationSetName;
                throw new UndeferrableValueException("Value 'EventDestinationArgs.ConfigurationSetName' is not present");
            }
        }

        /// <summary>
        /// If true, the event destination will be enabled
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'EventDestinationArgs.Enabled' is not present");
            }
        }

        /// <summary>
        /// Send the events to a kinesis firehose destination
        /// </summary>
        [PolicyResourceProperty("kinesisDestination", "_mUnknown_KinesisDestination")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.EventDestinationKinesisDestinationArgs? _mValue_KinesisDestination;
        private bool _mUnknown_KinesisDestination;
        public Inputs.EventDestinationKinesisDestinationArgs? KinesisDestination
        {
            get
            {
                if (!_mUnknown_KinesisDestination) return _mValue_KinesisDestination;
                throw new UndeferrableValueException("Value 'EventDestinationArgs.KinesisDestination' is not present");
            }
        }

        /// <summary>
        /// A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
        /// </summary>
        [PolicyResourceProperty("matchingTypes", "_mUnknown_MatchingTypes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_MatchingTypes;
        private bool _mUnknown_MatchingTypes;
        public List<string>? MatchingTypes
        {
            get
            {
                if (!_mUnknown_MatchingTypes) return _mValue_MatchingTypes;
                throw new UndeferrableValueException("Value 'EventDestinationArgs.MatchingTypes' is not present");
            }
        }

        /// <summary>
        /// The name of the event destination
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'EventDestinationArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Send the events to an SNS Topic destination
        /// 
        /// &gt; **NOTE:** You can specify `"cloudwatch_destination"` or `"kinesis_destination"` but not both
        /// </summary>
        [PolicyResourceProperty("snsDestination", "_mUnknown_SnsDestination")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.EventDestinationSnsDestinationArgs? _mValue_SnsDestination;
        private bool _mUnknown_SnsDestination;
        public Inputs.EventDestinationSnsDestinationArgs? SnsDestination
        {
            get
            {
                if (!_mUnknown_SnsDestination) return _mValue_SnsDestination;
                throw new UndeferrableValueException("Value 'EventDestinationArgs.SnsDestination' is not present");
            }
        }
    }
}
