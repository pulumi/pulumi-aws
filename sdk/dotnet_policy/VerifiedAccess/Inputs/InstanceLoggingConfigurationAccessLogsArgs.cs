// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.VerifiedAccess.Inputs
{
    public sealed class InstanceLoggingConfigurationAccessLogsArgs
    {
        /// <summary>
        /// A block that specifies configures sending Verified Access logs to CloudWatch Logs. Detailed below.
        /// </summary>
        [PolicyResourceProperty("cloudwatchLogs", "_mUnknown_CloudwatchLogs")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgs? _mValue_CloudwatchLogs;
        private bool _mUnknown_CloudwatchLogs;
        public Inputs.InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgs? CloudwatchLogs
        {
            get
            {
                if (!_mUnknown_CloudwatchLogs) return _mValue_CloudwatchLogs;
                throw new UndeferrableValueException("Value 'InstanceLoggingConfigurationAccessLogsArgs.CloudwatchLogs' is not present");
            }
        }

        /// <summary>
        /// Include trust data sent by trust providers into the logs.
        /// </summary>
        [PolicyResourceProperty("includeTrustContext", "_mUnknown_IncludeTrustContext")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_IncludeTrustContext;
        private bool _mUnknown_IncludeTrustContext;
        public bool? IncludeTrustContext
        {
            get
            {
                if (!_mUnknown_IncludeTrustContext) return _mValue_IncludeTrustContext;
                throw new UndeferrableValueException("Value 'InstanceLoggingConfigurationAccessLogsArgs.IncludeTrustContext' is not present");
            }
        }

        /// <summary>
        /// A block that specifies configures sending Verified Access logs to Kinesis. Detailed below.
        /// </summary>
        [PolicyResourceProperty("kinesisDataFirehose", "_mUnknown_KinesisDataFirehose")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgs? _mValue_KinesisDataFirehose;
        private bool _mUnknown_KinesisDataFirehose;
        public Inputs.InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgs? KinesisDataFirehose
        {
            get
            {
                if (!_mUnknown_KinesisDataFirehose) return _mValue_KinesisDataFirehose;
                throw new UndeferrableValueException("Value 'InstanceLoggingConfigurationAccessLogsArgs.KinesisDataFirehose' is not present");
            }
        }

        /// <summary>
        /// The logging version to use. Refer to [VerifiedAccessLogOptions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VerifiedAccessLogOptions.html) for the allowed values.
        /// </summary>
        [PolicyResourceProperty("logVersion", "_mUnknown_LogVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LogVersion;
        private bool _mUnknown_LogVersion;
        public string? LogVersion
        {
            get
            {
                if (!_mUnknown_LogVersion) return _mValue_LogVersion;
                throw new UndeferrableValueException("Value 'InstanceLoggingConfigurationAccessLogsArgs.LogVersion' is not present");
            }
        }

        /// <summary>
        /// A block that specifies configures sending Verified Access logs to S3. Detailed below.
        /// </summary>
        [PolicyResourceProperty("s3", "_mUnknown_S3")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.InstanceLoggingConfigurationAccessLogsS3Args? _mValue_S3;
        private bool _mUnknown_S3;
        public Inputs.InstanceLoggingConfigurationAccessLogsS3Args? S3
        {
            get
            {
                if (!_mUnknown_S3) return _mValue_S3;
                throw new UndeferrableValueException("Value 'InstanceLoggingConfigurationAccessLogsArgs.S3' is not present");
            }
        }
    }
}
