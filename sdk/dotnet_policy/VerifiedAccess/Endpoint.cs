// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.VerifiedAccess
{
    [PolicyResourceType("aws:verifiedaccess/endpoint:Endpoint")]
    public sealed class Endpoint : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The DNS name for users to reach your application. This parameter is required if the endpoint type is `load-balancer` or `network-interface`.
        /// </summary>
        [PolicyResourceProperty("applicationDomain", "_mUnknown_ApplicationDomain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ApplicationDomain;
        private bool _mUnknown_ApplicationDomain;
        public string? ApplicationDomain
        {
            get
            {
                if (!_mUnknown_ApplicationDomain) return _mValue_ApplicationDomain;
                throw new UndeferrableValueException("Value 'Endpoint.ApplicationDomain' is not present");
            }
        }

        /// <summary>
        /// The type of attachment. Currently, only `vpc` is supported.
        /// </summary>
        [PolicyResourceProperty("attachmentType", "_mUnknown_AttachmentType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AttachmentType;
        private bool _mUnknown_AttachmentType;
        public string? AttachmentType
        {
            get
            {
                if (!_mUnknown_AttachmentType) return _mValue_AttachmentType;
                throw new UndeferrableValueException("Value 'Endpoint.AttachmentType' is not present");
            }
        }

        /// <summary>
        /// The CIDR block details. This parameter is required if the endpoint type is `cidr`.
        /// </summary>
        [PolicyResourceProperty("cidrOptions", "_mUnknown_CidrOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.EndpointCidrOptions? _mValue_CidrOptions;
        private bool _mUnknown_CidrOptions;
        public Outputs.EndpointCidrOptions? CidrOptions
        {
            get
            {
                if (!_mUnknown_CidrOptions) return _mValue_CidrOptions;
                throw new UndeferrableValueException("Value 'Endpoint.CidrOptions' is not present");
            }
        }

        /// <summary>
        /// A description for the Verified Access endpoint.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'Endpoint.Description' is not present");
            }
        }

        /// <summary>
        /// Returned if endpoint has a device trust provider attached.
        /// </summary>
        [PolicyResourceProperty("deviceValidationDomain", "_mUnknown_DeviceValidationDomain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DeviceValidationDomain;
        private bool _mUnknown_DeviceValidationDomain;
        public string? DeviceValidationDomain
        {
            get
            {
                if (!_mUnknown_DeviceValidationDomain) return _mValue_DeviceValidationDomain;
                throw new UndeferrableValueException("Value 'Endpoint.DeviceValidationDomain' is not present");
            }
        }

        /// <summary>
        /// The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application. This parameter is required if the endpoint type is `load-balancer` or `network-interface`.
        /// </summary>
        [PolicyResourceProperty("domainCertificateArn", "_mUnknown_DomainCertificateArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DomainCertificateArn;
        private bool _mUnknown_DomainCertificateArn;
        public string? DomainCertificateArn
        {
            get
            {
                if (!_mUnknown_DomainCertificateArn) return _mValue_DomainCertificateArn;
                throw new UndeferrableValueException("Value 'Endpoint.DomainCertificateArn' is not present");
            }
        }

        /// <summary>
        /// A DNS name that is generated for the endpoint.
        /// </summary>
        [PolicyResourceProperty("endpointDomain", "_mUnknown_EndpointDomain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EndpointDomain;
        private bool _mUnknown_EndpointDomain;
        public string? EndpointDomain
        {
            get
            {
                if (!_mUnknown_EndpointDomain) return _mValue_EndpointDomain;
                throw new UndeferrableValueException("Value 'Endpoint.EndpointDomain' is not present");
            }
        }

        /// <summary>
        /// A custom identifier that is prepended to the DNS name that is generated for the endpoint.
        /// </summary>
        [PolicyResourceProperty("endpointDomainPrefix", "_mUnknown_EndpointDomainPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EndpointDomainPrefix;
        private bool _mUnknown_EndpointDomainPrefix;
        public string? EndpointDomainPrefix
        {
            get
            {
                if (!_mUnknown_EndpointDomainPrefix) return _mValue_EndpointDomainPrefix;
                throw new UndeferrableValueException("Value 'Endpoint.EndpointDomainPrefix' is not present");
            }
        }

        /// <summary>
        /// The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
        /// </summary>
        [PolicyResourceProperty("endpointType", "_mUnknown_EndpointType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EndpointType;
        private bool _mUnknown_EndpointType;
        public string? EndpointType
        {
            get
            {
                if (!_mUnknown_EndpointType) return _mValue_EndpointType;
                throw new UndeferrableValueException("Value 'Endpoint.EndpointType' is not present");
            }
        }

        /// <summary>
        /// The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
        /// </summary>
        [PolicyResourceProperty("loadBalancerOptions", "_mUnknown_LoadBalancerOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.EndpointLoadBalancerOptions? _mValue_LoadBalancerOptions;
        private bool _mUnknown_LoadBalancerOptions;
        public Outputs.EndpointLoadBalancerOptions? LoadBalancerOptions
        {
            get
            {
                if (!_mUnknown_LoadBalancerOptions) return _mValue_LoadBalancerOptions;
                throw new UndeferrableValueException("Value 'Endpoint.LoadBalancerOptions' is not present");
            }
        }

        /// <summary>
        /// The network interface details. This parameter is required if the endpoint type is `network-interface`.
        /// </summary>
        [PolicyResourceProperty("networkInterfaceOptions", "_mUnknown_NetworkInterfaceOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.EndpointNetworkInterfaceOptions? _mValue_NetworkInterfaceOptions;
        private bool _mUnknown_NetworkInterfaceOptions;
        public Outputs.EndpointNetworkInterfaceOptions? NetworkInterfaceOptions
        {
            get
            {
                if (!_mUnknown_NetworkInterfaceOptions) return _mValue_NetworkInterfaceOptions;
                throw new UndeferrableValueException("Value 'Endpoint.NetworkInterfaceOptions' is not present");
            }
        }

        /// <summary>
        /// The policy document that is associated with this resource.
        /// </summary>
        [PolicyResourceProperty("policyDocument", "_mUnknown_PolicyDocument")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyDocument;
        private bool _mUnknown_PolicyDocument;
        public string? PolicyDocument
        {
            get
            {
                if (!_mUnknown_PolicyDocument) return _mValue_PolicyDocument;
                throw new UndeferrableValueException("Value 'Endpoint.PolicyDocument' is not present");
            }
        }

        [PolicyResourceProperty("rdsOptions", "_mUnknown_RdsOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.EndpointRdsOptions? _mValue_RdsOptions;
        private bool _mUnknown_RdsOptions;
        public Outputs.EndpointRdsOptions? RdsOptions
        {
            get
            {
                if (!_mUnknown_RdsOptions) return _mValue_RdsOptions;
                throw new UndeferrableValueException("Value 'Endpoint.RdsOptions' is not present");
            }
        }

        /// <summary>
        /// List of the the security groups IDs to associate with the Verified Access endpoint.
        /// </summary>
        [PolicyResourceProperty("securityGroupIds", "_mUnknown_SecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecurityGroupIds;
        private bool _mUnknown_SecurityGroupIds;
        public List<string>? SecurityGroupIds
        {
            get
            {
                if (!_mUnknown_SecurityGroupIds) return _mValue_SecurityGroupIds;
                throw new UndeferrableValueException("Value 'Endpoint.SecurityGroupIds' is not present");
            }
        }

        /// <summary>
        /// The options in use for server side encryption.
        /// </summary>
        [PolicyResourceProperty("sseSpecification", "_mUnknown_SseSpecification")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.EndpointSseSpecification? _mValue_SseSpecification;
        private bool _mUnknown_SseSpecification;
        public Outputs.EndpointSseSpecification? SseSpecification
        {
            get
            {
                if (!_mUnknown_SseSpecification) return _mValue_SseSpecification;
                throw new UndeferrableValueException("Value 'Endpoint.SseSpecification' is not present");
            }
        }

        /// <summary>
        /// Key-value tags for the Verified Access Endpoint. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Endpoint.Tags' is not present");
            }
        }

        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Endpoint.TagsAll' is not present");
            }
        }

        /// <summary>
        /// The ID of the Verified Access group to associate the endpoint with.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("verifiedAccessGroupId", "_mUnknown_VerifiedAccessGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VerifiedAccessGroupId;
        private bool _mUnknown_VerifiedAccessGroupId;
        public string? VerifiedAccessGroupId
        {
            get
            {
                if (!_mUnknown_VerifiedAccessGroupId) return _mValue_VerifiedAccessGroupId;
                throw new UndeferrableValueException("Value 'Endpoint.VerifiedAccessGroupId' is not present");
            }
        }

        [PolicyResourceProperty("verifiedAccessInstanceId", "_mUnknown_VerifiedAccessInstanceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VerifiedAccessInstanceId;
        private bool _mUnknown_VerifiedAccessInstanceId;
        public string? VerifiedAccessInstanceId
        {
            get
            {
                if (!_mUnknown_VerifiedAccessInstanceId) return _mValue_VerifiedAccessInstanceId;
                throw new UndeferrableValueException("Value 'Endpoint.VerifiedAccessInstanceId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:verifiedaccess/endpoint:Endpoint")]
    public sealed class EndpointArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The DNS name for users to reach your application. This parameter is required if the endpoint type is `load-balancer` or `network-interface`.
        /// </summary>
        [PolicyResourceProperty("applicationDomain", "_mUnknown_ApplicationDomain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ApplicationDomain;
        private bool _mUnknown_ApplicationDomain;
        public string? ApplicationDomain
        {
            get
            {
                if (!_mUnknown_ApplicationDomain) return _mValue_ApplicationDomain;
                throw new UndeferrableValueException("Value 'EndpointArgs.ApplicationDomain' is not present");
            }
        }

        /// <summary>
        /// The type of attachment. Currently, only `vpc` is supported.
        /// </summary>
        [PolicyResourceProperty("attachmentType", "_mUnknown_AttachmentType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AttachmentType;
        private bool _mUnknown_AttachmentType;
        public string? AttachmentType
        {
            get
            {
                if (!_mUnknown_AttachmentType) return _mValue_AttachmentType;
                throw new UndeferrableValueException("Value 'EndpointArgs.AttachmentType' is not present");
            }
        }

        /// <summary>
        /// The CIDR block details. This parameter is required if the endpoint type is `cidr`.
        /// </summary>
        [PolicyResourceProperty("cidrOptions", "_mUnknown_CidrOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.EndpointCidrOptionsArgs? _mValue_CidrOptions;
        private bool _mUnknown_CidrOptions;
        public Inputs.EndpointCidrOptionsArgs? CidrOptions
        {
            get
            {
                if (!_mUnknown_CidrOptions) return _mValue_CidrOptions;
                throw new UndeferrableValueException("Value 'EndpointArgs.CidrOptions' is not present");
            }
        }

        /// <summary>
        /// A description for the Verified Access endpoint.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'EndpointArgs.Description' is not present");
            }
        }

        /// <summary>
        /// The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application. This parameter is required if the endpoint type is `load-balancer` or `network-interface`.
        /// </summary>
        [PolicyResourceProperty("domainCertificateArn", "_mUnknown_DomainCertificateArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DomainCertificateArn;
        private bool _mUnknown_DomainCertificateArn;
        public string? DomainCertificateArn
        {
            get
            {
                if (!_mUnknown_DomainCertificateArn) return _mValue_DomainCertificateArn;
                throw new UndeferrableValueException("Value 'EndpointArgs.DomainCertificateArn' is not present");
            }
        }

        /// <summary>
        /// A custom identifier that is prepended to the DNS name that is generated for the endpoint.
        /// </summary>
        [PolicyResourceProperty("endpointDomainPrefix", "_mUnknown_EndpointDomainPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EndpointDomainPrefix;
        private bool _mUnknown_EndpointDomainPrefix;
        public string? EndpointDomainPrefix
        {
            get
            {
                if (!_mUnknown_EndpointDomainPrefix) return _mValue_EndpointDomainPrefix;
                throw new UndeferrableValueException("Value 'EndpointArgs.EndpointDomainPrefix' is not present");
            }
        }

        /// <summary>
        /// The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
        /// </summary>
        [PolicyResourceProperty("endpointType", "_mUnknown_EndpointType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EndpointType;
        private bool _mUnknown_EndpointType;
        public string? EndpointType
        {
            get
            {
                if (!_mUnknown_EndpointType) return _mValue_EndpointType;
                throw new UndeferrableValueException("Value 'EndpointArgs.EndpointType' is not present");
            }
        }

        /// <summary>
        /// The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
        /// </summary>
        [PolicyResourceProperty("loadBalancerOptions", "_mUnknown_LoadBalancerOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.EndpointLoadBalancerOptionsArgs? _mValue_LoadBalancerOptions;
        private bool _mUnknown_LoadBalancerOptions;
        public Inputs.EndpointLoadBalancerOptionsArgs? LoadBalancerOptions
        {
            get
            {
                if (!_mUnknown_LoadBalancerOptions) return _mValue_LoadBalancerOptions;
                throw new UndeferrableValueException("Value 'EndpointArgs.LoadBalancerOptions' is not present");
            }
        }

        /// <summary>
        /// The network interface details. This parameter is required if the endpoint type is `network-interface`.
        /// </summary>
        [PolicyResourceProperty("networkInterfaceOptions", "_mUnknown_NetworkInterfaceOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.EndpointNetworkInterfaceOptionsArgs? _mValue_NetworkInterfaceOptions;
        private bool _mUnknown_NetworkInterfaceOptions;
        public Inputs.EndpointNetworkInterfaceOptionsArgs? NetworkInterfaceOptions
        {
            get
            {
                if (!_mUnknown_NetworkInterfaceOptions) return _mValue_NetworkInterfaceOptions;
                throw new UndeferrableValueException("Value 'EndpointArgs.NetworkInterfaceOptions' is not present");
            }
        }

        /// <summary>
        /// The policy document that is associated with this resource.
        /// </summary>
        [PolicyResourceProperty("policyDocument", "_mUnknown_PolicyDocument")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyDocument;
        private bool _mUnknown_PolicyDocument;
        public string? PolicyDocument
        {
            get
            {
                if (!_mUnknown_PolicyDocument) return _mValue_PolicyDocument;
                throw new UndeferrableValueException("Value 'EndpointArgs.PolicyDocument' is not present");
            }
        }

        [PolicyResourceProperty("rdsOptions", "_mUnknown_RdsOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.EndpointRdsOptionsArgs? _mValue_RdsOptions;
        private bool _mUnknown_RdsOptions;
        public Inputs.EndpointRdsOptionsArgs? RdsOptions
        {
            get
            {
                if (!_mUnknown_RdsOptions) return _mValue_RdsOptions;
                throw new UndeferrableValueException("Value 'EndpointArgs.RdsOptions' is not present");
            }
        }

        /// <summary>
        /// List of the the security groups IDs to associate with the Verified Access endpoint.
        /// </summary>
        [PolicyResourceProperty("securityGroupIds", "_mUnknown_SecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecurityGroupIds;
        private bool _mUnknown_SecurityGroupIds;
        public List<string>? SecurityGroupIds
        {
            get
            {
                if (!_mUnknown_SecurityGroupIds) return _mValue_SecurityGroupIds;
                throw new UndeferrableValueException("Value 'EndpointArgs.SecurityGroupIds' is not present");
            }
        }

        /// <summary>
        /// The options in use for server side encryption.
        /// </summary>
        [PolicyResourceProperty("sseSpecification", "_mUnknown_SseSpecification")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.EndpointSseSpecificationArgs? _mValue_SseSpecification;
        private bool _mUnknown_SseSpecification;
        public Inputs.EndpointSseSpecificationArgs? SseSpecification
        {
            get
            {
                if (!_mUnknown_SseSpecification) return _mValue_SseSpecification;
                throw new UndeferrableValueException("Value 'EndpointArgs.SseSpecification' is not present");
            }
        }

        /// <summary>
        /// Key-value tags for the Verified Access Endpoint. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'EndpointArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// The ID of the Verified Access group to associate the endpoint with.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("verifiedAccessGroupId", "_mUnknown_VerifiedAccessGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VerifiedAccessGroupId;
        private bool _mUnknown_VerifiedAccessGroupId;
        public string? VerifiedAccessGroupId
        {
            get
            {
                if (!_mUnknown_VerifiedAccessGroupId) return _mValue_VerifiedAccessGroupId;
                throw new UndeferrableValueException("Value 'EndpointArgs.VerifiedAccessGroupId' is not present");
            }
        }
    }
}
