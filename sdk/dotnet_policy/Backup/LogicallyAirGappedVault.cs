// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Backup
{
    [PolicyResourceType("aws:backup/logicallyAirGappedVault:LogicallyAirGappedVault")]
    public sealed class LogicallyAirGappedVault : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the Logically Air Gapped Backup Vault.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.Arn' is not present");
            }
        }

        /// <summary>
        /// Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
        /// </summary>
        [PolicyResourceProperty("maxRetentionDays", "_mUnknown_MaxRetentionDays")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxRetentionDays;
        private bool _mUnknown_MaxRetentionDays;
        public int? MaxRetentionDays
        {
            get
            {
                if (!_mUnknown_MaxRetentionDays) return _mValue_MaxRetentionDays;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.MaxRetentionDays' is not present");
            }
        }

        /// <summary>
        /// Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
        /// </summary>
        [PolicyResourceProperty("minRetentionDays", "_mUnknown_MinRetentionDays")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MinRetentionDays;
        private bool _mUnknown_MinRetentionDays;
        public int? MinRetentionDays
        {
            get
            {
                if (!_mUnknown_MinRetentionDays) return _mValue_MinRetentionDays;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.MinRetentionDays' is not present");
            }
        }

        /// <summary>
        /// Name of the Logically Air Gapped Backup Vault to create.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.Name' is not present");
            }
        }

        /// <summary>
        /// Metadata that you can assign to help organize the resources that you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.TagsAll' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.LogicallyAirGappedVaultTimeouts? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Outputs.LogicallyAirGappedVaultTimeouts? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.Timeouts' is not present");
            }
        }
    }

    [PolicyResourceType("aws:backup/logicallyAirGappedVault:LogicallyAirGappedVault")]
    public sealed class LogicallyAirGappedVaultArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
        /// </summary>
        [PolicyResourceProperty("maxRetentionDays", "_mUnknown_MaxRetentionDays")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxRetentionDays;
        private bool _mUnknown_MaxRetentionDays;
        public int? MaxRetentionDays
        {
            get
            {
                if (!_mUnknown_MaxRetentionDays) return _mValue_MaxRetentionDays;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVaultArgs.MaxRetentionDays' is not present");
            }
        }

        /// <summary>
        /// Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
        /// </summary>
        [PolicyResourceProperty("minRetentionDays", "_mUnknown_MinRetentionDays")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MinRetentionDays;
        private bool _mUnknown_MinRetentionDays;
        public int? MinRetentionDays
        {
            get
            {
                if (!_mUnknown_MinRetentionDays) return _mValue_MinRetentionDays;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVaultArgs.MinRetentionDays' is not present");
            }
        }

        /// <summary>
        /// Name of the Logically Air Gapped Backup Vault to create.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVaultArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Metadata that you can assign to help organize the resources that you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVaultArgs.Tags' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.LogicallyAirGappedVaultTimeoutsArgs? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Inputs.LogicallyAirGappedVaultTimeoutsArgs? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'LogicallyAirGappedVaultArgs.Timeouts' is not present");
            }
        }
    }
}
