// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.AppFlow.Inputs
{
    public sealed class FlowTriggerConfigTriggerPropertiesScheduledArgs
    {
        /// <summary>
        /// Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
        /// </summary>
        [PolicyResourceProperty("dataPullMode", "_mUnknown_DataPullMode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DataPullMode;
        private bool _mUnknown_DataPullMode;
        public string? DataPullMode
        {
            get
            {
                if (!_mUnknown_DataPullMode) return _mValue_DataPullMode;
                throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.DataPullMode' is not present");
            }
        }

        /// <summary>
        /// Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
        /// </summary>
        [PolicyResourceProperty("firstExecutionFrom", "_mUnknown_FirstExecutionFrom")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FirstExecutionFrom;
        private bool _mUnknown_FirstExecutionFrom;
        public string? FirstExecutionFrom
        {
            get
            {
                if (!_mUnknown_FirstExecutionFrom) return _mValue_FirstExecutionFrom;
                throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.FirstExecutionFrom' is not present");
            }
        }

        /// <summary>
        /// Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
        /// </summary>
        [PolicyResourceProperty("scheduleEndTime", "_mUnknown_ScheduleEndTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ScheduleEndTime;
        private bool _mUnknown_ScheduleEndTime;
        public string? ScheduleEndTime
        {
            get
            {
                if (!_mUnknown_ScheduleEndTime) return _mValue_ScheduleEndTime;
                throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.ScheduleEndTime' is not present");
            }
        }

        /// <summary>
        /// Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
        /// </summary>
        [PolicyResourceProperty("scheduleExpression", "_mUnknown_ScheduleExpression")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ScheduleExpression;
        private bool _mUnknown_ScheduleExpression;
        public string? ScheduleExpression
        {
            get
            {
                if (!_mUnknown_ScheduleExpression) return _mValue_ScheduleExpression;
                throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.ScheduleExpression' is not present");
            }
        }

        /// <summary>
        /// Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
        /// </summary>
        [PolicyResourceProperty("scheduleOffset", "_mUnknown_ScheduleOffset")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ScheduleOffset;
        private bool _mUnknown_ScheduleOffset;
        public int? ScheduleOffset
        {
            get
            {
                if (!_mUnknown_ScheduleOffset) return _mValue_ScheduleOffset;
                throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.ScheduleOffset' is not present");
            }
        }

        /// <summary>
        /// Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
        /// </summary>
        [PolicyResourceProperty("scheduleStartTime", "_mUnknown_ScheduleStartTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ScheduleStartTime;
        private bool _mUnknown_ScheduleStartTime;
        public string? ScheduleStartTime
        {
            get
            {
                if (!_mUnknown_ScheduleStartTime) return _mValue_ScheduleStartTime;
                throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.ScheduleStartTime' is not present");
            }
        }

        /// <summary>
        /// Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
        /// </summary>
        [PolicyResourceProperty("timezone", "_mUnknown_Timezone")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Timezone;
        private bool _mUnknown_Timezone;
        public string? Timezone
        {
            get
            {
                if (!_mUnknown_Timezone) return _mValue_Timezone;
                throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.Timezone' is not present");
            }
        }
    }
}
