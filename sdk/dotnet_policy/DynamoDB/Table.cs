// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.DynamoDB
{
    [PolicyResourceType("aws:dynamodb/table:Table")]
    public sealed class Table : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// ARN of the table
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Set of nested attribute definitions. Only required for `hash_key` and `range_key` attributes. See below.
        /// </summary>
        [Input("attributes")]
        public List<TableAttribute>? Attributes;

        /// <summary>
        /// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
        /// </summary>
        [Input("billingMode")]
        public string? BillingMode;

        /// <summary>
        /// Enables deletion protection for table. Defaults to `false`.
        /// </summary>
        [Input("deletionProtectionEnabled")]
        public bool? DeletionProtectionEnabled;

        /// <summary>
        /// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc. See below.
        /// </summary>
        [Input("globalSecondaryIndexes")]
        public List<TableGlobalSecondaryIndex>? GlobalSecondaryIndexes;

        /// <summary>
        /// Attribute to use as the hash (partition) key. Must also be defined as an `attribute`. See below.
        /// </summary>
        [Input("hashKey")]
        public string? HashKey;

        /// <summary>
        /// Import Amazon S3 data into a new table. See below.
        /// </summary>
        [Input("importTable")]
        public TableImportTable? ImportTable;

        /// <summary>
        /// Describe an LSI on the table; these can only be allocated _at creation_ so you cannot change this definition after you have created the resource. See below.
        /// </summary>
        [Input("localSecondaryIndexes")]
        public List<TableLocalSecondaryIndex>? LocalSecondaryIndexes;

        /// <summary>
        /// Unique within a region name of the table.
        /// 
        /// Optional arguments:
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Sets the maximum number of read and write units for the specified on-demand table. See below.
        /// </summary>
        [Input("onDemandThroughput")]
        public TableOnDemandThroughput? OnDemandThroughput;

        /// <summary>
        /// Enable point-in-time recovery options. See below.
        /// </summary>
        [Input("pointInTimeRecovery")]
        public TablePointInTimeRecovery? PointInTimeRecovery;

        /// <summary>
        /// Attribute to use as the range (sort) key. Must also be defined as an `attribute`, see below.
        /// </summary>
        [Input("rangeKey")]
        public string? RangeKey;

        /// <summary>
        /// Number of read units for this table. If the `billing_mode` is `PROVISIONED`, this field is required.
        /// </summary>
        [Input("readCapacity")]
        public int? ReadCapacity;

        /// <summary>
        /// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. See below.
        /// </summary>
        [Input("replicas")]
        public List<TableReplica>? Replicas;

        /// <summary>
        /// Time of the point-in-time recovery point to restore.
        /// </summary>
        [Input("restoreDateTime")]
        public string? RestoreDateTime;

        /// <summary>
        /// Name of the table to restore. Must match the name of an existing table.
        /// </summary>
        [Input("restoreSourceName")]
        public string? RestoreSourceName;

        /// <summary>
        /// ARN of the source table to restore. Must be supplied for cross-region restores.
        /// </summary>
        [Input("restoreSourceTableArn")]
        public string? RestoreSourceTableArn;

        /// <summary>
        /// If set, restores table to the most recent point-in-time recovery point.
        /// </summary>
        [Input("restoreToLatestTime")]
        public bool? RestoreToLatestTime;

        /// <summary>
        /// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS-owned Customer Master Key if this argument isn't specified. Must be supplied for cross-region restores. See below.
        /// </summary>
        [Input("serverSideEncryption")]
        public TableServerSideEncryption? ServerSideEncryption;

        /// <summary>
        /// ARN of the Table Stream. Only available when `stream_enabled = true`
        /// </summary>
        [Input("streamArn")]
        public string? StreamArn;

        /// <summary>
        /// Whether Streams are enabled.
        /// </summary>
        [Input("streamEnabled")]
        public bool? StreamEnabled;

        /// <summary>
        /// Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `stream_enabled = true`.
        /// </summary>
        [Input("streamLabel")]
        public string? StreamLabel;

        /// <summary>
        /// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
        /// </summary>
        [Input("streamViewType")]
        public string? StreamViewType;

        /// <summary>
        /// Storage class of the table.
        /// Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
        /// Default value is `STANDARD`.
        /// </summary>
        [Input("tableClass")]
        public string? TableClass;

        /// <summary>
        /// A map of tags to populate on the created table. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Configuration block for TTL. See below.
        /// </summary>
        [Input("ttl")]
        public TableTtl? Ttl;

        /// <summary>
        /// Number of write units for this table. If the `billing_mode` is `PROVISIONED`, this field is required.
        /// </summary>
        [Input("writeCapacity")]
        public int? WriteCapacity;
    }
}
