// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ImageBuilder
{
    [PolicyResourceType("aws:imagebuilder/containerRecipe:ContainerRecipe")]
    public sealed class ContainerRecipe : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// (Required) Amazon Resource Name (ARN) of the container recipe.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Ordered configuration block(s) with components for the container recipe. Detailed below.
        /// </summary>
        [Input("components")]
        public List<ContainerRecipeComponent>? Components;

        /// <summary>
        /// The type of the container to create. Valid values: `DOCKER`.
        /// </summary>
        [Input("containerType")]
        public string? ContainerType;

        /// <summary>
        /// Date the container recipe was created.
        /// </summary>
        [Input("dateCreated")]
        public string? DateCreated;

        /// <summary>
        /// The description of the container recipe.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// The Dockerfile template used to build the image as an inline data blob.
        /// </summary>
        [Input("dockerfileTemplateData")]
        public string? DockerfileTemplateData;

        /// <summary>
        /// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
        /// </summary>
        [Input("dockerfileTemplateUri")]
        public string? DockerfileTemplateUri;

        /// <summary>
        /// A flag that indicates if the target container is encrypted.
        /// </summary>
        [Input("encrypted")]
        public bool? Encrypted;

        /// <summary>
        /// Configuration block used to configure an instance for building and testing container images. Detailed below.
        /// </summary>
        [Input("instanceConfiguration")]
        public ContainerRecipeInstanceConfiguration? InstanceConfiguration;

        /// <summary>
        /// The KMS key used to encrypt the container image.
        /// </summary>
        [Input("kmsKeyId")]
        public string? KmsKeyId;

        /// <summary>
        /// The name of the container recipe.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Owner of the container recipe.
        /// </summary>
        [Input("owner")]
        public string? Owner;

        /// <summary>
        /// The base image for the container recipe.
        /// </summary>
        [Input("parentImage")]
        public string? ParentImage;

        /// <summary>
        /// Platform of the container recipe.
        /// </summary>
        [Input("platform")]
        public string? Platform;

        /// <summary>
        /// Specifies the operating system platform when you use a custom base image.
        /// </summary>
        [Input("platformOverride")]
        public string? PlatformOverride;

        /// <summary>
        /// Key-value map of resource tags for the container recipe. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// The destination repository for the container image. Detailed below.
        /// </summary>
        [Input("targetRepository")]
        public ContainerRecipeTargetRepository? TargetRepository;

        /// <summary>
        /// Version of the container recipe.
        /// 
        /// The following attributes are optional:
        /// </summary>
        [Input("version")]
        public string? Version;

        /// <summary>
        /// The working directory to be used during build and test workflows.
        /// </summary>
        [Input("workingDirectory")]
        public string? WorkingDirectory;
    }
}
