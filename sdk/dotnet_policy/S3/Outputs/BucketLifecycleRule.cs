// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.S3.Outputs
{
    public sealed class BucketLifecycleRule
    {
        /// <summary>
        /// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
        /// </summary>
        [PolicyResourceProperty("abortIncompleteMultipartUploadDays", "_mUnknown_AbortIncompleteMultipartUploadDays")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_AbortIncompleteMultipartUploadDays;
        private bool _mUnknown_AbortIncompleteMultipartUploadDays;
        public int? AbortIncompleteMultipartUploadDays
        {
            get
            {
                if (!_mUnknown_AbortIncompleteMultipartUploadDays) return _mValue_AbortIncompleteMultipartUploadDays;
                throw new UndeferrableValueException("Value 'BucketLifecycleRule.AbortIncompleteMultipartUploadDays' is not present");
            }
        }

        /// <summary>
        /// Specifies lifecycle rule status.
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'BucketLifecycleRule.Enabled' is not present");
            }
        }

        /// <summary>
        /// Specifies a period in the object's expire (documented below).
        /// </summary>
        [PolicyResourceProperty("expiration", "_mUnknown_Expiration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.BucketLifecycleRuleExpiration? _mValue_Expiration;
        private bool _mUnknown_Expiration;
        public Outputs.BucketLifecycleRuleExpiration? Expiration
        {
            get
            {
                if (!_mUnknown_Expiration) return _mValue_Expiration;
                throw new UndeferrableValueException("Value 'BucketLifecycleRule.Expiration' is not present");
            }
        }

        /// <summary>
        /// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
        /// </summary>
        [PolicyResourceProperty("id", "_mUnknown_Id")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Id;
        private bool _mUnknown_Id;
        public string? Id
        {
            get
            {
                if (!_mUnknown_Id) return _mValue_Id;
                throw new UndeferrableValueException("Value 'BucketLifecycleRule.Id' is not present");
            }
        }

        /// <summary>
        /// Specifies when noncurrent object versions expire (documented below).
        /// </summary>
        [PolicyResourceProperty("noncurrentVersionExpiration", "_mUnknown_NoncurrentVersionExpiration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.BucketLifecycleRuleNoncurrentVersionExpiration? _mValue_NoncurrentVersionExpiration;
        private bool _mUnknown_NoncurrentVersionExpiration;
        public Outputs.BucketLifecycleRuleNoncurrentVersionExpiration? NoncurrentVersionExpiration
        {
            get
            {
                if (!_mUnknown_NoncurrentVersionExpiration) return _mValue_NoncurrentVersionExpiration;
                throw new UndeferrableValueException("Value 'BucketLifecycleRule.NoncurrentVersionExpiration' is not present");
            }
        }

        /// <summary>
        /// Specifies when noncurrent object versions transitions (documented below).
        /// 
        /// At least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition`, `noncurrent_version_expiration`, `noncurrent_version_transition` must be specified.
        /// </summary>
        [PolicyResourceProperty("noncurrentVersionTransitions", "_mUnknown_NoncurrentVersionTransitions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.BucketLifecycleRuleNoncurrentVersionTransition>? _mValue_NoncurrentVersionTransitions;
        private bool _mUnknown_NoncurrentVersionTransitions;
        public List<Outputs.BucketLifecycleRuleNoncurrentVersionTransition>? NoncurrentVersionTransitions
        {
            get
            {
                if (!_mUnknown_NoncurrentVersionTransitions) return _mValue_NoncurrentVersionTransitions;
                throw new UndeferrableValueException("Value 'BucketLifecycleRule.NoncurrentVersionTransitions' is not present");
            }
        }

        /// <summary>
        /// Object key prefix identifying one or more objects to which the rule applies.
        /// </summary>
        [PolicyResourceProperty("prefix", "_mUnknown_Prefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Prefix;
        private bool _mUnknown_Prefix;
        public string? Prefix
        {
            get
            {
                if (!_mUnknown_Prefix) return _mValue_Prefix;
                throw new UndeferrableValueException("Value 'BucketLifecycleRule.Prefix' is not present");
            }
        }

        /// <summary>
        /// Specifies object tags key and value.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'BucketLifecycleRule.Tags' is not present");
            }
        }

        /// <summary>
        /// Specifies a period in the object's transitions (documented below).
        /// </summary>
        [PolicyResourceProperty("transitions", "_mUnknown_Transitions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.BucketLifecycleRuleTransition>? _mValue_Transitions;
        private bool _mUnknown_Transitions;
        public List<Outputs.BucketLifecycleRuleTransition>? Transitions
        {
            get
            {
                if (!_mUnknown_Transitions) return _mValue_Transitions;
                throw new UndeferrableValueException("Value 'BucketLifecycleRule.Transitions' is not present");
            }
        }
    }
}
