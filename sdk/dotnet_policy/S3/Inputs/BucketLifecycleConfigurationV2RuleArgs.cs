// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.S3.Inputs
{
    public sealed class BucketLifecycleConfigurationV2RuleArgs
    {
        /// <summary>
        /// Configuration block that specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. See below.
        /// </summary>
        [PolicyResourceProperty("abortIncompleteMultipartUpload", "_mUnknown_AbortIncompleteMultipartUpload")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs? _mValue_AbortIncompleteMultipartUpload;
        private bool _mUnknown_AbortIncompleteMultipartUpload;
        public Inputs.BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUploadArgs? AbortIncompleteMultipartUpload
        {
            get
            {
                if (!_mUnknown_AbortIncompleteMultipartUpload) return _mValue_AbortIncompleteMultipartUpload;
                throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2RuleArgs.AbortIncompleteMultipartUpload' is not present");
            }
        }

        /// <summary>
        /// Configuration block that specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker. See below.
        /// </summary>
        [PolicyResourceProperty("expiration", "_mUnknown_Expiration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.BucketLifecycleConfigurationV2RuleExpirationArgs? _mValue_Expiration;
        private bool _mUnknown_Expiration;
        public Inputs.BucketLifecycleConfigurationV2RuleExpirationArgs? Expiration
        {
            get
            {
                if (!_mUnknown_Expiration) return _mValue_Expiration;
                throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2RuleArgs.Expiration' is not present");
            }
        }

        /// <summary>
        /// Configuration block used to identify objects that a Lifecycle Rule applies to.
        /// See below.
        /// If not specified, the `rule` will default to using `prefix`.
        /// One of `filter` or `prefix` should be specified.
        /// </summary>
        [PolicyResourceProperty("filter", "_mUnknown_Filter")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.BucketLifecycleConfigurationV2RuleFilterArgs? _mValue_Filter;
        private bool _mUnknown_Filter;
        public Inputs.BucketLifecycleConfigurationV2RuleFilterArgs? Filter
        {
            get
            {
                if (!_mUnknown_Filter) return _mValue_Filter;
                throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2RuleArgs.Filter' is not present");
            }
        }

        /// <summary>
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        /// </summary>
        [PolicyResourceProperty("id", "_mUnknown_Id")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Id;
        private bool _mUnknown_Id;
        public string? Id
        {
            get
            {
                if (!_mUnknown_Id) return _mValue_Id;
                throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2RuleArgs.Id' is not present");
            }
        }

        /// <summary>
        /// Configuration block that specifies when noncurrent object versions expire. See below.
        /// </summary>
        [PolicyResourceProperty("noncurrentVersionExpiration", "_mUnknown_NoncurrentVersionExpiration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs? _mValue_NoncurrentVersionExpiration;
        private bool _mUnknown_NoncurrentVersionExpiration;
        public Inputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs? NoncurrentVersionExpiration
        {
            get
            {
                if (!_mUnknown_NoncurrentVersionExpiration) return _mValue_NoncurrentVersionExpiration;
                throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2RuleArgs.NoncurrentVersionExpiration' is not present");
            }
        }

        /// <summary>
        /// Set of configuration blocks that specify the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. See below.
        /// </summary>
        [PolicyResourceProperty("noncurrentVersionTransitions", "_mUnknown_NoncurrentVersionTransitions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs>? _mValue_NoncurrentVersionTransitions;
        private bool _mUnknown_NoncurrentVersionTransitions;
        public List<Inputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs>? NoncurrentVersionTransitions
        {
            get
            {
                if (!_mUnknown_NoncurrentVersionTransitions) return _mValue_NoncurrentVersionTransitions;
                throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2RuleArgs.NoncurrentVersionTransitions' is not present");
            }
        }

        /// <summary>
        /// **DEPRECATED** Use `filter` instead.
        /// This has been deprecated by Amazon S3.
        /// Prefix identifying one or more objects to which the rule applies.
        /// Defaults to an empty string (`""`) if `filter` is not specified.
        /// One of `prefix` or `filter` should be specified.
        /// </summary>
        [PolicyResourceProperty("prefix", "_mUnknown_Prefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Prefix;
        private bool _mUnknown_Prefix;
        public string? Prefix
        {
            get
            {
                if (!_mUnknown_Prefix) return _mValue_Prefix;
                throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2RuleArgs.Prefix' is not present");
            }
        }

        /// <summary>
        /// Whether the rule is currently being applied. Valid values: `Enabled` or `Disabled`.
        /// </summary>
        [PolicyResourceProperty("status", "_mUnknown_Status")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Status;
        private bool _mUnknown_Status;
        public string? Status
        {
            get
            {
                if (!_mUnknown_Status) return _mValue_Status;
                throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2RuleArgs.Status' is not present");
            }
        }

        /// <summary>
        /// Set of configuration blocks that specify when an Amazon S3 object transitions to a specified storage class. See below.
        /// </summary>
        [PolicyResourceProperty("transitions", "_mUnknown_Transitions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.BucketLifecycleConfigurationV2RuleTransitionArgs>? _mValue_Transitions;
        private bool _mUnknown_Transitions;
        public List<Inputs.BucketLifecycleConfigurationV2RuleTransitionArgs>? Transitions
        {
            get
            {
                if (!_mUnknown_Transitions) return _mValue_Transitions;
                throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2RuleArgs.Transitions' is not present");
            }
        }
    }
}
