// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Workspaces
{
    [PolicyResourceType("aws:workspaces/ipGroup:IpGroup")]
    public sealed class IpGroup : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The description of the IP group.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'IpGroup.Description' is not present");
            }
        }

        /// <summary>
        /// The name of the IP group.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'IpGroup.Name' is not present");
            }
        }

        /// <summary>
        /// One or more pairs specifying the IP group rule (in CIDR format) from which web requests originate.
        /// </summary>
        [PolicyResourceProperty("rules", "_mUnknown_Rules")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.IpGroupRule>? _mValue_Rules;
        private bool _mUnknown_Rules;
        public List<Outputs.IpGroupRule>? Rules
        {
            get
            {
                if (!_mUnknown_Rules) return _mValue_Rules;
                throw new UndeferrableValueException("Value 'IpGroup.Rules' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the WorkSpaces directory. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'IpGroup.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'IpGroup.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:workspaces/ipGroup:IpGroup")]
    public sealed class IpGroupArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The description of the IP group.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'IpGroupArgs.Description' is not present");
            }
        }

        /// <summary>
        /// The name of the IP group.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'IpGroupArgs.Name' is not present");
            }
        }

        /// <summary>
        /// One or more pairs specifying the IP group rule (in CIDR format) from which web requests originate.
        /// </summary>
        [PolicyResourceProperty("rules", "_mUnknown_Rules")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.IpGroupRuleArgs>? _mValue_Rules;
        private bool _mUnknown_Rules;
        public List<Inputs.IpGroupRuleArgs>? Rules
        {
            get
            {
                if (!_mUnknown_Rules) return _mValue_Rules;
                throw new UndeferrableValueException("Value 'IpGroupArgs.Rules' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the WorkSpaces directory. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'IpGroupArgs.Tags' is not present");
            }
        }
    }
}
