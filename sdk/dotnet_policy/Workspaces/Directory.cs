// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Workspaces
{
    [PolicyResourceType("aws:workspaces/directory:Directory")]
    public sealed class Directory : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The directory alias.
        /// </summary>
        [PolicyResourceProperty("alias", "_mUnknown_Alias")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Alias;
        private bool _mUnknown_Alias;
        public string? Alias
        {
            get
            {
                if (!_mUnknown_Alias) return _mValue_Alias;
                throw new UndeferrableValueException("Value 'Directory.Alias' is not present");
            }
        }

        /// <summary>
        /// The user name for the service account.
        /// </summary>
        [PolicyResourceProperty("customerUserName", "_mUnknown_CustomerUserName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CustomerUserName;
        private bool _mUnknown_CustomerUserName;
        public string? CustomerUserName
        {
            get
            {
                if (!_mUnknown_CustomerUserName) return _mValue_CustomerUserName;
                throw new UndeferrableValueException("Value 'Directory.CustomerUserName' is not present");
            }
        }

        /// <summary>
        /// The directory identifier for registration in WorkSpaces service.
        /// </summary>
        [PolicyResourceProperty("directoryId", "_mUnknown_DirectoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DirectoryId;
        private bool _mUnknown_DirectoryId;
        public string? DirectoryId
        {
            get
            {
                if (!_mUnknown_DirectoryId) return _mValue_DirectoryId;
                throw new UndeferrableValueException("Value 'Directory.DirectoryId' is not present");
            }
        }

        /// <summary>
        /// The name of the directory.
        /// </summary>
        [PolicyResourceProperty("directoryName", "_mUnknown_DirectoryName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DirectoryName;
        private bool _mUnknown_DirectoryName;
        public string? DirectoryName
        {
            get
            {
                if (!_mUnknown_DirectoryName) return _mValue_DirectoryName;
                throw new UndeferrableValueException("Value 'Directory.DirectoryName' is not present");
            }
        }

        /// <summary>
        /// The directory type.
        /// </summary>
        [PolicyResourceProperty("directoryType", "_mUnknown_DirectoryType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DirectoryType;
        private bool _mUnknown_DirectoryType;
        public string? DirectoryType
        {
            get
            {
                if (!_mUnknown_DirectoryType) return _mValue_DirectoryType;
                throw new UndeferrableValueException("Value 'Directory.DirectoryType' is not present");
            }
        }

        /// <summary>
        /// The IP addresses of the DNS servers for the directory.
        /// </summary>
        [PolicyResourceProperty("dnsIpAddresses", "_mUnknown_DnsIpAddresses")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_DnsIpAddresses;
        private bool _mUnknown_DnsIpAddresses;
        public List<string>? DnsIpAddresses
        {
            get
            {
                if (!_mUnknown_DnsIpAddresses) return _mValue_DnsIpAddresses;
                throw new UndeferrableValueException("Value 'Directory.DnsIpAddresses' is not present");
            }
        }

        /// <summary>
        /// The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.
        /// </summary>
        [PolicyResourceProperty("iamRoleId", "_mUnknown_IamRoleId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IamRoleId;
        private bool _mUnknown_IamRoleId;
        public string? IamRoleId
        {
            get
            {
                if (!_mUnknown_IamRoleId) return _mValue_IamRoleId;
                throw new UndeferrableValueException("Value 'Directory.IamRoleId' is not present");
            }
        }

        /// <summary>
        /// The identifiers of the IP access control groups associated with the directory.
        /// </summary>
        [PolicyResourceProperty("ipGroupIds", "_mUnknown_IpGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_IpGroupIds;
        private bool _mUnknown_IpGroupIds;
        public List<string>? IpGroupIds
        {
            get
            {
                if (!_mUnknown_IpGroupIds) return _mValue_IpGroupIds;
                throw new UndeferrableValueException("Value 'Directory.IpGroupIds' is not present");
            }
        }

        /// <summary>
        /// The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.
        /// </summary>
        [PolicyResourceProperty("registrationCode", "_mUnknown_RegistrationCode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RegistrationCode;
        private bool _mUnknown_RegistrationCode;
        public string? RegistrationCode
        {
            get
            {
                if (!_mUnknown_RegistrationCode) return _mValue_RegistrationCode;
                throw new UndeferrableValueException("Value 'Directory.RegistrationCode' is not present");
            }
        }

        /// <summary>
        /// Configuration of SAML authentication integration. Defined below.
        /// </summary>
        [PolicyResourceProperty("samlProperties", "_mUnknown_SamlProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DirectorySamlProperties? _mValue_SamlProperties;
        private bool _mUnknown_SamlProperties;
        public Outputs.DirectorySamlProperties? SamlProperties
        {
            get
            {
                if (!_mUnknown_SamlProperties) return _mValue_SamlProperties;
                throw new UndeferrableValueException("Value 'Directory.SamlProperties' is not present");
            }
        }

        /// <summary>
        /// Permissions to enable or disable self-service capabilities. Defined below.
        /// </summary>
        [PolicyResourceProperty("selfServicePermissions", "_mUnknown_SelfServicePermissions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DirectorySelfServicePermissions? _mValue_SelfServicePermissions;
        private bool _mUnknown_SelfServicePermissions;
        public Outputs.DirectorySelfServicePermissions? SelfServicePermissions
        {
            get
            {
                if (!_mUnknown_SelfServicePermissions) return _mValue_SelfServicePermissions;
                throw new UndeferrableValueException("Value 'Directory.SelfServicePermissions' is not present");
            }
        }

        /// <summary>
        /// The identifiers of the subnets where the directory resides.
        /// </summary>
        [PolicyResourceProperty("subnetIds", "_mUnknown_SubnetIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SubnetIds;
        private bool _mUnknown_SubnetIds;
        public List<string>? SubnetIds
        {
            get
            {
                if (!_mUnknown_SubnetIds) return _mValue_SubnetIds;
                throw new UndeferrableValueException("Value 'Directory.SubnetIds' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the WorkSpaces directory. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Directory.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Directory.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
        /// </summary>
        [PolicyResourceProperty("workspaceAccessProperties", "_mUnknown_WorkspaceAccessProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DirectoryWorkspaceAccessProperties? _mValue_WorkspaceAccessProperties;
        private bool _mUnknown_WorkspaceAccessProperties;
        public Outputs.DirectoryWorkspaceAccessProperties? WorkspaceAccessProperties
        {
            get
            {
                if (!_mUnknown_WorkspaceAccessProperties) return _mValue_WorkspaceAccessProperties;
                throw new UndeferrableValueException("Value 'Directory.WorkspaceAccessProperties' is not present");
            }
        }

        /// <summary>
        /// Default properties that are used for creating WorkSpaces. Defined below.
        /// </summary>
        [PolicyResourceProperty("workspaceCreationProperties", "_mUnknown_WorkspaceCreationProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DirectoryWorkspaceCreationProperties? _mValue_WorkspaceCreationProperties;
        private bool _mUnknown_WorkspaceCreationProperties;
        public Outputs.DirectoryWorkspaceCreationProperties? WorkspaceCreationProperties
        {
            get
            {
                if (!_mUnknown_WorkspaceCreationProperties) return _mValue_WorkspaceCreationProperties;
                throw new UndeferrableValueException("Value 'Directory.WorkspaceCreationProperties' is not present");
            }
        }

        /// <summary>
        /// The identifier of the security group that is assigned to new WorkSpaces.
        /// </summary>
        [PolicyResourceProperty("workspaceSecurityGroupId", "_mUnknown_WorkspaceSecurityGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_WorkspaceSecurityGroupId;
        private bool _mUnknown_WorkspaceSecurityGroupId;
        public string? WorkspaceSecurityGroupId
        {
            get
            {
                if (!_mUnknown_WorkspaceSecurityGroupId) return _mValue_WorkspaceSecurityGroupId;
                throw new UndeferrableValueException("Value 'Directory.WorkspaceSecurityGroupId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:workspaces/directory:Directory")]
    public sealed class DirectoryArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The directory identifier for registration in WorkSpaces service.
        /// </summary>
        [PolicyResourceProperty("directoryId", "_mUnknown_DirectoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DirectoryId;
        private bool _mUnknown_DirectoryId;
        public string? DirectoryId
        {
            get
            {
                if (!_mUnknown_DirectoryId) return _mValue_DirectoryId;
                throw new UndeferrableValueException("Value 'DirectoryArgs.DirectoryId' is not present");
            }
        }

        /// <summary>
        /// The identifiers of the IP access control groups associated with the directory.
        /// </summary>
        [PolicyResourceProperty("ipGroupIds", "_mUnknown_IpGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_IpGroupIds;
        private bool _mUnknown_IpGroupIds;
        public List<string>? IpGroupIds
        {
            get
            {
                if (!_mUnknown_IpGroupIds) return _mValue_IpGroupIds;
                throw new UndeferrableValueException("Value 'DirectoryArgs.IpGroupIds' is not present");
            }
        }

        /// <summary>
        /// Configuration of SAML authentication integration. Defined below.
        /// </summary>
        [PolicyResourceProperty("samlProperties", "_mUnknown_SamlProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DirectorySamlPropertiesArgs? _mValue_SamlProperties;
        private bool _mUnknown_SamlProperties;
        public Inputs.DirectorySamlPropertiesArgs? SamlProperties
        {
            get
            {
                if (!_mUnknown_SamlProperties) return _mValue_SamlProperties;
                throw new UndeferrableValueException("Value 'DirectoryArgs.SamlProperties' is not present");
            }
        }

        /// <summary>
        /// Permissions to enable or disable self-service capabilities. Defined below.
        /// </summary>
        [PolicyResourceProperty("selfServicePermissions", "_mUnknown_SelfServicePermissions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DirectorySelfServicePermissionsArgs? _mValue_SelfServicePermissions;
        private bool _mUnknown_SelfServicePermissions;
        public Inputs.DirectorySelfServicePermissionsArgs? SelfServicePermissions
        {
            get
            {
                if (!_mUnknown_SelfServicePermissions) return _mValue_SelfServicePermissions;
                throw new UndeferrableValueException("Value 'DirectoryArgs.SelfServicePermissions' is not present");
            }
        }

        /// <summary>
        /// The identifiers of the subnets where the directory resides.
        /// </summary>
        [PolicyResourceProperty("subnetIds", "_mUnknown_SubnetIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SubnetIds;
        private bool _mUnknown_SubnetIds;
        public List<string>? SubnetIds
        {
            get
            {
                if (!_mUnknown_SubnetIds) return _mValue_SubnetIds;
                throw new UndeferrableValueException("Value 'DirectoryArgs.SubnetIds' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the WorkSpaces directory. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'DirectoryArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
        /// </summary>
        [PolicyResourceProperty("workspaceAccessProperties", "_mUnknown_WorkspaceAccessProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DirectoryWorkspaceAccessPropertiesArgs? _mValue_WorkspaceAccessProperties;
        private bool _mUnknown_WorkspaceAccessProperties;
        public Inputs.DirectoryWorkspaceAccessPropertiesArgs? WorkspaceAccessProperties
        {
            get
            {
                if (!_mUnknown_WorkspaceAccessProperties) return _mValue_WorkspaceAccessProperties;
                throw new UndeferrableValueException("Value 'DirectoryArgs.WorkspaceAccessProperties' is not present");
            }
        }

        /// <summary>
        /// Default properties that are used for creating WorkSpaces. Defined below.
        /// </summary>
        [PolicyResourceProperty("workspaceCreationProperties", "_mUnknown_WorkspaceCreationProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DirectoryWorkspaceCreationPropertiesArgs? _mValue_WorkspaceCreationProperties;
        private bool _mUnknown_WorkspaceCreationProperties;
        public Inputs.DirectoryWorkspaceCreationPropertiesArgs? WorkspaceCreationProperties
        {
            get
            {
                if (!_mUnknown_WorkspaceCreationProperties) return _mValue_WorkspaceCreationProperties;
                throw new UndeferrableValueException("Value 'DirectoryArgs.WorkspaceCreationProperties' is not present");
            }
        }
    }
}
