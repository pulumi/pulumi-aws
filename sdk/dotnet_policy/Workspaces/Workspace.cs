// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Workspaces
{
    [PolicyResourceType("aws:workspaces/workspace:Workspace")]
    public sealed class Workspace : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ID of the bundle for the WorkSpace.
        /// </summary>
        [PolicyResourceProperty("bundleId", "_mUnknown_BundleId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BundleId;
        private bool _mUnknown_BundleId;
        public string? BundleId
        {
            get
            {
                if (!_mUnknown_BundleId) return _mValue_BundleId;
                throw new UndeferrableValueException("Value 'Workspace.BundleId' is not present");
            }
        }

        /// <summary>
        /// The name of the WorkSpace, as seen by the operating system.
        /// </summary>
        [PolicyResourceProperty("computerName", "_mUnknown_ComputerName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ComputerName;
        private bool _mUnknown_ComputerName;
        public string? ComputerName
        {
            get
            {
                if (!_mUnknown_ComputerName) return _mValue_ComputerName;
                throw new UndeferrableValueException("Value 'Workspace.ComputerName' is not present");
            }
        }

        /// <summary>
        /// The ID of the directory for the WorkSpace.
        /// </summary>
        [PolicyResourceProperty("directoryId", "_mUnknown_DirectoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DirectoryId;
        private bool _mUnknown_DirectoryId;
        public string? DirectoryId
        {
            get
            {
                if (!_mUnknown_DirectoryId) return _mValue_DirectoryId;
                throw new UndeferrableValueException("Value 'Workspace.DirectoryId' is not present");
            }
        }

        /// <summary>
        /// The IP address of the WorkSpace.
        /// </summary>
        [PolicyResourceProperty("ipAddress", "_mUnknown_IpAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IpAddress;
        private bool _mUnknown_IpAddress;
        public string? IpAddress
        {
            get
            {
                if (!_mUnknown_IpAddress) return _mValue_IpAddress;
                throw new UndeferrableValueException("Value 'Workspace.IpAddress' is not present");
            }
        }

        /// <summary>
        /// Indicates whether the data stored on the root volume is encrypted.
        /// </summary>
        [PolicyResourceProperty("rootVolumeEncryptionEnabled", "_mUnknown_RootVolumeEncryptionEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RootVolumeEncryptionEnabled;
        private bool _mUnknown_RootVolumeEncryptionEnabled;
        public bool? RootVolumeEncryptionEnabled
        {
            get
            {
                if (!_mUnknown_RootVolumeEncryptionEnabled) return _mValue_RootVolumeEncryptionEnabled;
                throw new UndeferrableValueException("Value 'Workspace.RootVolumeEncryptionEnabled' is not present");
            }
        }

        /// <summary>
        /// The operational state of the WorkSpace.
        /// </summary>
        [PolicyResourceProperty("state", "_mUnknown_State")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_State;
        private bool _mUnknown_State;
        public string? State
        {
            get
            {
                if (!_mUnknown_State) return _mValue_State;
                throw new UndeferrableValueException("Value 'Workspace.State' is not present");
            }
        }

        /// <summary>
        /// The tags for the WorkSpace. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Workspace.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Workspace.TagsAll' is not present");
            }
        }

        /// <summary>
        /// The user name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace.
        /// </summary>
        [PolicyResourceProperty("userName", "_mUnknown_UserName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserName;
        private bool _mUnknown_UserName;
        public string? UserName
        {
            get
            {
                if (!_mUnknown_UserName) return _mValue_UserName;
                throw new UndeferrableValueException("Value 'Workspace.UserName' is not present");
            }
        }

        /// <summary>
        /// Indicates whether the data stored on the user volume is encrypted.
        /// </summary>
        [PolicyResourceProperty("userVolumeEncryptionEnabled", "_mUnknown_UserVolumeEncryptionEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UserVolumeEncryptionEnabled;
        private bool _mUnknown_UserVolumeEncryptionEnabled;
        public bool? UserVolumeEncryptionEnabled
        {
            get
            {
                if (!_mUnknown_UserVolumeEncryptionEnabled) return _mValue_UserVolumeEncryptionEnabled;
                throw new UndeferrableValueException("Value 'Workspace.UserVolumeEncryptionEnabled' is not present");
            }
        }

        /// <summary>
        /// The ARN of a symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.
        /// </summary>
        [PolicyResourceProperty("volumeEncryptionKey", "_mUnknown_VolumeEncryptionKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VolumeEncryptionKey;
        private bool _mUnknown_VolumeEncryptionKey;
        public string? VolumeEncryptionKey
        {
            get
            {
                if (!_mUnknown_VolumeEncryptionKey) return _mValue_VolumeEncryptionKey;
                throw new UndeferrableValueException("Value 'Workspace.VolumeEncryptionKey' is not present");
            }
        }

        /// <summary>
        /// The WorkSpace properties.
        /// </summary>
        [PolicyResourceProperty("workspaceProperties", "_mUnknown_WorkspaceProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.WorkspaceWorkspaceProperties? _mValue_WorkspaceProperties;
        private bool _mUnknown_WorkspaceProperties;
        public Outputs.WorkspaceWorkspaceProperties? WorkspaceProperties
        {
            get
            {
                if (!_mUnknown_WorkspaceProperties) return _mValue_WorkspaceProperties;
                throw new UndeferrableValueException("Value 'Workspace.WorkspaceProperties' is not present");
            }
        }
    }

    [PolicyResourceType("aws:workspaces/workspace:Workspace")]
    public sealed class WorkspaceArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The ID of the bundle for the WorkSpace.
        /// </summary>
        [PolicyResourceProperty("bundleId", "_mUnknown_BundleId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BundleId;
        private bool _mUnknown_BundleId;
        public string? BundleId
        {
            get
            {
                if (!_mUnknown_BundleId) return _mValue_BundleId;
                throw new UndeferrableValueException("Value 'WorkspaceArgs.BundleId' is not present");
            }
        }

        /// <summary>
        /// The ID of the directory for the WorkSpace.
        /// </summary>
        [PolicyResourceProperty("directoryId", "_mUnknown_DirectoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DirectoryId;
        private bool _mUnknown_DirectoryId;
        public string? DirectoryId
        {
            get
            {
                if (!_mUnknown_DirectoryId) return _mValue_DirectoryId;
                throw new UndeferrableValueException("Value 'WorkspaceArgs.DirectoryId' is not present");
            }
        }

        /// <summary>
        /// Indicates whether the data stored on the root volume is encrypted.
        /// </summary>
        [PolicyResourceProperty("rootVolumeEncryptionEnabled", "_mUnknown_RootVolumeEncryptionEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RootVolumeEncryptionEnabled;
        private bool _mUnknown_RootVolumeEncryptionEnabled;
        public bool? RootVolumeEncryptionEnabled
        {
            get
            {
                if (!_mUnknown_RootVolumeEncryptionEnabled) return _mValue_RootVolumeEncryptionEnabled;
                throw new UndeferrableValueException("Value 'WorkspaceArgs.RootVolumeEncryptionEnabled' is not present");
            }
        }

        /// <summary>
        /// The tags for the WorkSpace. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'WorkspaceArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// The user name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace.
        /// </summary>
        [PolicyResourceProperty("userName", "_mUnknown_UserName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserName;
        private bool _mUnknown_UserName;
        public string? UserName
        {
            get
            {
                if (!_mUnknown_UserName) return _mValue_UserName;
                throw new UndeferrableValueException("Value 'WorkspaceArgs.UserName' is not present");
            }
        }

        /// <summary>
        /// Indicates whether the data stored on the user volume is encrypted.
        /// </summary>
        [PolicyResourceProperty("userVolumeEncryptionEnabled", "_mUnknown_UserVolumeEncryptionEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UserVolumeEncryptionEnabled;
        private bool _mUnknown_UserVolumeEncryptionEnabled;
        public bool? UserVolumeEncryptionEnabled
        {
            get
            {
                if (!_mUnknown_UserVolumeEncryptionEnabled) return _mValue_UserVolumeEncryptionEnabled;
                throw new UndeferrableValueException("Value 'WorkspaceArgs.UserVolumeEncryptionEnabled' is not present");
            }
        }

        /// <summary>
        /// The ARN of a symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.
        /// </summary>
        [PolicyResourceProperty("volumeEncryptionKey", "_mUnknown_VolumeEncryptionKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VolumeEncryptionKey;
        private bool _mUnknown_VolumeEncryptionKey;
        public string? VolumeEncryptionKey
        {
            get
            {
                if (!_mUnknown_VolumeEncryptionKey) return _mValue_VolumeEncryptionKey;
                throw new UndeferrableValueException("Value 'WorkspaceArgs.VolumeEncryptionKey' is not present");
            }
        }

        /// <summary>
        /// The WorkSpace properties.
        /// </summary>
        [PolicyResourceProperty("workspaceProperties", "_mUnknown_WorkspaceProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.WorkspaceWorkspacePropertiesArgs? _mValue_WorkspaceProperties;
        private bool _mUnknown_WorkspaceProperties;
        public Inputs.WorkspaceWorkspacePropertiesArgs? WorkspaceProperties
        {
            get
            {
                if (!_mUnknown_WorkspaceProperties) return _mValue_WorkspaceProperties;
                throw new UndeferrableValueException("Value 'WorkspaceArgs.WorkspaceProperties' is not present");
            }
        }
    }
}
