// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2
{
    [PolicyResourceType("aws:ec2/subnet:Subnet")]
    public sealed class Subnet : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The ARN of the subnet.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Specify true to indicate
        /// that network interfaces created in the specified subnet should be
        /// assigned an IPv6 address. Default is `false`
        /// </summary>
        [Input("assignIpv6AddressOnCreation")]
        public bool? AssignIpv6AddressOnCreation;

        /// <summary>
        /// AZ for the subnet.
        /// </summary>
        [Input("availabilityZone")]
        public string? AvailabilityZone;

        /// <summary>
        /// AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use `availability_zone` instead.
        /// </summary>
        [Input("availabilityZoneId")]
        public string? AvailabilityZoneId;

        /// <summary>
        /// The IPv4 CIDR block for the subnet.
        /// </summary>
        [Input("cidrBlock")]
        public string? CidrBlock;

        /// <summary>
        /// The customer owned IPv4 address pool. Typically used with the `map_customer_owned_ip_on_launch` argument. The `outpost_arn` argument must be specified when configured.
        /// </summary>
        [Input("customerOwnedIpv4Pool")]
        public string? CustomerOwnedIpv4Pool;

        /// <summary>
        /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `false`.
        /// </summary>
        [Input("enableDns64")]
        public bool? EnableDns64;

        /// <summary>
        /// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
        /// </summary>
        [Input("enableLniAtDeviceIndex")]
        public int? EnableLniAtDeviceIndex;

        /// <summary>
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`.
        /// </summary>
        [Input("enableResourceNameDnsARecordOnLaunch")]
        public bool? EnableResourceNameDnsARecordOnLaunch;

        /// <summary>
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `false`.
        /// </summary>
        [Input("enableResourceNameDnsAaaaRecordOnLaunch")]
        public bool? EnableResourceNameDnsAaaaRecordOnLaunch;

        /// <summary>
        /// The IPv6 network range for the subnet,
        /// in CIDR notation. The subnet size must use a /64 prefix length.
        /// </summary>
        [Input("ipv6CidrBlock")]
        public string? Ipv6CidrBlock;

        /// <summary>
        /// The association ID for the IPv6 CIDR block.
        /// </summary>
        [Input("ipv6CidrBlockAssociationId")]
        public string? Ipv6CidrBlockAssociationId;

        /// <summary>
        /// Indicates whether to create an IPv6-only subnet. Default: `false`.
        /// </summary>
        [Input("ipv6Native")]
        public bool? Ipv6Native;

        /// <summary>
        /// Specify `true` to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The `customer_owned_ipv4_pool` and `outpost_arn` arguments must be specified when set to `true`. Default is `false`.
        /// </summary>
        [Input("mapCustomerOwnedIpOnLaunch")]
        public bool? MapCustomerOwnedIpOnLaunch;

        /// <summary>
        /// Specify true to indicate
        /// that instances launched into the subnet should be assigned
        /// a public IP address. Default is `false`.
        /// </summary>
        [Input("mapPublicIpOnLaunch")]
        public bool? MapPublicIpOnLaunch;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the Outpost.
        /// </summary>
        [Input("outpostArn")]
        public string? OutpostArn;

        /// <summary>
        /// The ID of the AWS account that owns the subnet.
        /// </summary>
        [Input("ownerId")]
        public string? OwnerId;

        /// <summary>
        /// The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`.
        /// </summary>
        [Input("privateDnsHostnameTypeOnLaunch")]
        public string? PrivateDnsHostnameTypeOnLaunch;

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// The VPC ID.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId;
    }
}
