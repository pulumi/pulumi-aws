// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2
{
    [PolicyResourceType("aws:ec2/capacityReservation:CapacityReservation")]
    public sealed class CapacityReservation : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The ARN of the Capacity Reservation.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The Availability Zone in which to create the Capacity Reservation.
        /// </summary>
        [Input("availabilityZone")]
        public string? AvailabilityZone;

        /// <summary>
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances.
        /// </summary>
        [Input("ebsOptimized")]
        public bool? EbsOptimized;

        /// <summary>
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
        /// </summary>
        [Input("endDate")]
        public string? EndDate;

        /// <summary>
        /// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
        /// </summary>
        [Input("endDateType")]
        public string? EndDateType;

        /// <summary>
        /// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
        /// </summary>
        [Input("ephemeralStorage")]
        public bool? EphemeralStorage;

        /// <summary>
        /// The number of instances for which to reserve capacity.
        /// </summary>
        [Input("instanceCount")]
        public int? InstanceCount;

        /// <summary>
        /// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
        /// </summary>
        [Input("instanceMatchCriteria")]
        public string? InstanceMatchCriteria;

        /// <summary>
        /// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
        /// </summary>
        [Input("instancePlatform")]
        public string? InstancePlatform;

        /// <summary>
        /// The instance type for which to reserve capacity.
        /// </summary>
        [Input("instanceType")]
        public string? InstanceType;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
        /// </summary>
        [Input("outpostArn")]
        public string? OutpostArn;

        /// <summary>
        /// The ID of the AWS account that owns the Capacity Reservation.
        /// </summary>
        [Input("ownerId")]
        public string? OwnerId;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation.
        /// </summary>
        [Input("placementGroupArn")]
        public string? PlacementGroupArn;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
        /// </summary>
        [Input("tenancy")]
        public string? Tenancy;
    }
}
