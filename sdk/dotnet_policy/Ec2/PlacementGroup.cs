// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2
{
    [PolicyResourceType("aws:ec2/placementGroup:PlacementGroup")]
    public sealed class PlacementGroup : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the placement group.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'PlacementGroup.Arn' is not present");
            }
        }

        /// <summary>
        /// The name of the placement group.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'PlacementGroup.Name' is not present");
            }
        }

        /// <summary>
        /// The number of partitions to create in the
        /// placement group.  Can only be specified when the `strategy` is set to
        /// `partition`.  Valid values are 1 - 7 (default is `2`).
        /// </summary>
        [PolicyResourceProperty("partitionCount", "_mUnknown_PartitionCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_PartitionCount;
        private bool _mUnknown_PartitionCount;
        public int? PartitionCount
        {
            get
            {
                if (!_mUnknown_PartitionCount) return _mValue_PartitionCount;
                throw new UndeferrableValueException("Value 'PlacementGroup.PartitionCount' is not present");
            }
        }

        /// <summary>
        /// The ID of the placement group.
        /// </summary>
        [PolicyResourceProperty("placementGroupId", "_mUnknown_PlacementGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PlacementGroupId;
        private bool _mUnknown_PlacementGroupId;
        public string? PlacementGroupId
        {
            get
            {
                if (!_mUnknown_PlacementGroupId) return _mValue_PlacementGroupId;
                throw new UndeferrableValueException("Value 'PlacementGroup.PlacementGroupId' is not present");
            }
        }

        /// <summary>
        /// Determines how placement groups spread instances. Can only be used
        /// when the `strategy` is set to `spread`. Can be `host` or `rack`. `host` can only be used for Outpost placement groups. Defaults to `rack`.
        /// </summary>
        [PolicyResourceProperty("spreadLevel", "_mUnknown_SpreadLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SpreadLevel;
        private bool _mUnknown_SpreadLevel;
        public string? SpreadLevel
        {
            get
            {
                if (!_mUnknown_SpreadLevel) return _mValue_SpreadLevel;
                throw new UndeferrableValueException("Value 'PlacementGroup.SpreadLevel' is not present");
            }
        }

        /// <summary>
        /// The placement strategy. Can be `cluster`, `partition` or `spread`.
        /// </summary>
        [PolicyResourceProperty("strategy", "_mUnknown_Strategy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Strategy;
        private bool _mUnknown_Strategy;
        public string? Strategy
        {
            get
            {
                if (!_mUnknown_Strategy) return _mValue_Strategy;
                throw new UndeferrableValueException("Value 'PlacementGroup.Strategy' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'PlacementGroup.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'PlacementGroup.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ec2/placementGroup:PlacementGroup")]
    public sealed class PlacementGroupArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The name of the placement group.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'PlacementGroupArgs.Name' is not present");
            }
        }

        /// <summary>
        /// The number of partitions to create in the
        /// placement group.  Can only be specified when the `strategy` is set to
        /// `partition`.  Valid values are 1 - 7 (default is `2`).
        /// </summary>
        [PolicyResourceProperty("partitionCount", "_mUnknown_PartitionCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_PartitionCount;
        private bool _mUnknown_PartitionCount;
        public int? PartitionCount
        {
            get
            {
                if (!_mUnknown_PartitionCount) return _mValue_PartitionCount;
                throw new UndeferrableValueException("Value 'PlacementGroupArgs.PartitionCount' is not present");
            }
        }

        /// <summary>
        /// Determines how placement groups spread instances. Can only be used
        /// when the `strategy` is set to `spread`. Can be `host` or `rack`. `host` can only be used for Outpost placement groups. Defaults to `rack`.
        /// </summary>
        [PolicyResourceProperty("spreadLevel", "_mUnknown_SpreadLevel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SpreadLevel;
        private bool _mUnknown_SpreadLevel;
        public string? SpreadLevel
        {
            get
            {
                if (!_mUnknown_SpreadLevel) return _mValue_SpreadLevel;
                throw new UndeferrableValueException("Value 'PlacementGroupArgs.SpreadLevel' is not present");
            }
        }

        /// <summary>
        /// The placement strategy. Can be `cluster`, `partition` or `spread`.
        /// </summary>
        [PolicyResourceProperty("strategy", "_mUnknown_Strategy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Strategy;
        private bool _mUnknown_Strategy;
        public string? Strategy
        {
            get
            {
                if (!_mUnknown_Strategy) return _mValue_Strategy;
                throw new UndeferrableValueException("Value 'PlacementGroupArgs.Strategy' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'PlacementGroupArgs.Tags' is not present");
            }
        }
    }
}
