// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2
{
    [PolicyResourceType("aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule")]
    public sealed class TrafficMirrorFilterRule : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// ARN of the traffic mirror filter rule.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRule.Arn' is not present");
            }
        }

        /// <summary>
        /// Description of the traffic mirror filter rule.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRule.Description' is not present");
            }
        }

        /// <summary>
        /// Destination CIDR block to assign to the Traffic Mirror rule.
        /// </summary>
        [PolicyResourceProperty("destinationCidrBlock", "_mUnknown_DestinationCidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DestinationCidrBlock;
        private bool _mUnknown_DestinationCidrBlock;
        public string? DestinationCidrBlock
        {
            get
            {
                if (!_mUnknown_DestinationCidrBlock) return _mValue_DestinationCidrBlock;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRule.DestinationCidrBlock' is not present");
            }
        }

        /// <summary>
        /// Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
        /// </summary>
        [PolicyResourceProperty("destinationPortRange", "_mUnknown_DestinationPortRange")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.TrafficMirrorFilterRuleDestinationPortRange? _mValue_DestinationPortRange;
        private bool _mUnknown_DestinationPortRange;
        public Outputs.TrafficMirrorFilterRuleDestinationPortRange? DestinationPortRange
        {
            get
            {
                if (!_mUnknown_DestinationPortRange) return _mValue_DestinationPortRange;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRule.DestinationPortRange' is not present");
            }
        }

        /// <summary>
        /// Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
        /// </summary>
        [PolicyResourceProperty("protocol", "_mUnknown_Protocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Protocol;
        private bool _mUnknown_Protocol;
        public int? Protocol
        {
            get
            {
                if (!_mUnknown_Protocol) return _mValue_Protocol;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRule.Protocol' is not present");
            }
        }

        /// <summary>
        /// Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
        /// </summary>
        [PolicyResourceProperty("ruleAction", "_mUnknown_RuleAction")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RuleAction;
        private bool _mUnknown_RuleAction;
        public string? RuleAction
        {
            get
            {
                if (!_mUnknown_RuleAction) return _mValue_RuleAction;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRule.RuleAction' is not present");
            }
        }

        /// <summary>
        /// Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
        /// </summary>
        [PolicyResourceProperty("ruleNumber", "_mUnknown_RuleNumber")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RuleNumber;
        private bool _mUnknown_RuleNumber;
        public int? RuleNumber
        {
            get
            {
                if (!_mUnknown_RuleNumber) return _mValue_RuleNumber;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRule.RuleNumber' is not present");
            }
        }

        /// <summary>
        /// Source CIDR block to assign to the Traffic Mirror rule.
        /// </summary>
        [PolicyResourceProperty("sourceCidrBlock", "_mUnknown_SourceCidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceCidrBlock;
        private bool _mUnknown_SourceCidrBlock;
        public string? SourceCidrBlock
        {
            get
            {
                if (!_mUnknown_SourceCidrBlock) return _mValue_SourceCidrBlock;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRule.SourceCidrBlock' is not present");
            }
        }

        /// <summary>
        /// Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
        /// </summary>
        [PolicyResourceProperty("sourcePortRange", "_mUnknown_SourcePortRange")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.TrafficMirrorFilterRuleSourcePortRange? _mValue_SourcePortRange;
        private bool _mUnknown_SourcePortRange;
        public Outputs.TrafficMirrorFilterRuleSourcePortRange? SourcePortRange
        {
            get
            {
                if (!_mUnknown_SourcePortRange) return _mValue_SourcePortRange;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRule.SourcePortRange' is not present");
            }
        }

        /// <summary>
        /// Direction of traffic to be captured. Valid values are `ingress` and `egress`
        /// 
        /// Traffic mirror port range support following attributes:
        /// </summary>
        [PolicyResourceProperty("trafficDirection", "_mUnknown_TrafficDirection")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TrafficDirection;
        private bool _mUnknown_TrafficDirection;
        public string? TrafficDirection
        {
            get
            {
                if (!_mUnknown_TrafficDirection) return _mValue_TrafficDirection;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRule.TrafficDirection' is not present");
            }
        }

        /// <summary>
        /// ID of the traffic mirror filter to which this rule should be added
        /// </summary>
        [PolicyResourceProperty("trafficMirrorFilterId", "_mUnknown_TrafficMirrorFilterId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TrafficMirrorFilterId;
        private bool _mUnknown_TrafficMirrorFilterId;
        public string? TrafficMirrorFilterId
        {
            get
            {
                if (!_mUnknown_TrafficMirrorFilterId) return _mValue_TrafficMirrorFilterId;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRule.TrafficMirrorFilterId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule")]
    public sealed class TrafficMirrorFilterRuleArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Description of the traffic mirror filter rule.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRuleArgs.Description' is not present");
            }
        }

        /// <summary>
        /// Destination CIDR block to assign to the Traffic Mirror rule.
        /// </summary>
        [PolicyResourceProperty("destinationCidrBlock", "_mUnknown_DestinationCidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DestinationCidrBlock;
        private bool _mUnknown_DestinationCidrBlock;
        public string? DestinationCidrBlock
        {
            get
            {
                if (!_mUnknown_DestinationCidrBlock) return _mValue_DestinationCidrBlock;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRuleArgs.DestinationCidrBlock' is not present");
            }
        }

        /// <summary>
        /// Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
        /// </summary>
        [PolicyResourceProperty("destinationPortRange", "_mUnknown_DestinationPortRange")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.TrafficMirrorFilterRuleDestinationPortRangeArgs? _mValue_DestinationPortRange;
        private bool _mUnknown_DestinationPortRange;
        public Inputs.TrafficMirrorFilterRuleDestinationPortRangeArgs? DestinationPortRange
        {
            get
            {
                if (!_mUnknown_DestinationPortRange) return _mValue_DestinationPortRange;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRuleArgs.DestinationPortRange' is not present");
            }
        }

        /// <summary>
        /// Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
        /// </summary>
        [PolicyResourceProperty("protocol", "_mUnknown_Protocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Protocol;
        private bool _mUnknown_Protocol;
        public int? Protocol
        {
            get
            {
                if (!_mUnknown_Protocol) return _mValue_Protocol;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRuleArgs.Protocol' is not present");
            }
        }

        /// <summary>
        /// Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
        /// </summary>
        [PolicyResourceProperty("ruleAction", "_mUnknown_RuleAction")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RuleAction;
        private bool _mUnknown_RuleAction;
        public string? RuleAction
        {
            get
            {
                if (!_mUnknown_RuleAction) return _mValue_RuleAction;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRuleArgs.RuleAction' is not present");
            }
        }

        /// <summary>
        /// Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
        /// </summary>
        [PolicyResourceProperty("ruleNumber", "_mUnknown_RuleNumber")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RuleNumber;
        private bool _mUnknown_RuleNumber;
        public int? RuleNumber
        {
            get
            {
                if (!_mUnknown_RuleNumber) return _mValue_RuleNumber;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRuleArgs.RuleNumber' is not present");
            }
        }

        /// <summary>
        /// Source CIDR block to assign to the Traffic Mirror rule.
        /// </summary>
        [PolicyResourceProperty("sourceCidrBlock", "_mUnknown_SourceCidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceCidrBlock;
        private bool _mUnknown_SourceCidrBlock;
        public string? SourceCidrBlock
        {
            get
            {
                if (!_mUnknown_SourceCidrBlock) return _mValue_SourceCidrBlock;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRuleArgs.SourceCidrBlock' is not present");
            }
        }

        /// <summary>
        /// Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
        /// </summary>
        [PolicyResourceProperty("sourcePortRange", "_mUnknown_SourcePortRange")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.TrafficMirrorFilterRuleSourcePortRangeArgs? _mValue_SourcePortRange;
        private bool _mUnknown_SourcePortRange;
        public Inputs.TrafficMirrorFilterRuleSourcePortRangeArgs? SourcePortRange
        {
            get
            {
                if (!_mUnknown_SourcePortRange) return _mValue_SourcePortRange;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRuleArgs.SourcePortRange' is not present");
            }
        }

        /// <summary>
        /// Direction of traffic to be captured. Valid values are `ingress` and `egress`
        /// 
        /// Traffic mirror port range support following attributes:
        /// </summary>
        [PolicyResourceProperty("trafficDirection", "_mUnknown_TrafficDirection")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TrafficDirection;
        private bool _mUnknown_TrafficDirection;
        public string? TrafficDirection
        {
            get
            {
                if (!_mUnknown_TrafficDirection) return _mValue_TrafficDirection;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRuleArgs.TrafficDirection' is not present");
            }
        }

        /// <summary>
        /// ID of the traffic mirror filter to which this rule should be added
        /// </summary>
        [PolicyResourceProperty("trafficMirrorFilterId", "_mUnknown_TrafficMirrorFilterId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TrafficMirrorFilterId;
        private bool _mUnknown_TrafficMirrorFilterId;
        public string? TrafficMirrorFilterId
        {
            get
            {
                if (!_mUnknown_TrafficMirrorFilterId) return _mValue_TrafficMirrorFilterId;
                throw new UndeferrableValueException("Value 'TrafficMirrorFilterRuleArgs.TrafficMirrorFilterId' is not present");
            }
        }
    }
}
