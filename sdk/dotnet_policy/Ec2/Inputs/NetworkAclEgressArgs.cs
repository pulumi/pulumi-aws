// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2.Inputs
{
    public sealed class NetworkAclEgressArgs
    {
        /// <summary>
        /// The action to take.
        /// </summary>
        [PolicyResourceProperty("action", "_mUnknown_Action")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Action;
        private bool _mUnknown_Action;
        public string? Action
        {
            get
            {
                if (!_mUnknown_Action) return _mValue_Action;
                throw new UndeferrableValueException("Value 'NetworkAclEgressArgs.Action' is not present");
            }
        }

        /// <summary>
        /// The CIDR block to match. This must be a
        /// valid network mask.
        /// </summary>
        [PolicyResourceProperty("cidrBlock", "_mUnknown_CidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CidrBlock;
        private bool _mUnknown_CidrBlock;
        public string? CidrBlock
        {
            get
            {
                if (!_mUnknown_CidrBlock) return _mValue_CidrBlock;
                throw new UndeferrableValueException("Value 'NetworkAclEgressArgs.CidrBlock' is not present");
            }
        }

        /// <summary>
        /// The from port to match.
        /// </summary>
        [PolicyResourceProperty("fromPort", "_mUnknown_FromPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_FromPort;
        private bool _mUnknown_FromPort;
        public int? FromPort
        {
            get
            {
                if (!_mUnknown_FromPort) return _mValue_FromPort;
                throw new UndeferrableValueException("Value 'NetworkAclEgressArgs.FromPort' is not present");
            }
        }

        /// <summary>
        /// The ICMP type code to be used. Default 0.
        /// 
        /// &gt; Note: For more information on ICMP types and codes, see here: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
        /// </summary>
        [PolicyResourceProperty("icmpCode", "_mUnknown_IcmpCode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_IcmpCode;
        private bool _mUnknown_IcmpCode;
        public int? IcmpCode
        {
            get
            {
                if (!_mUnknown_IcmpCode) return _mValue_IcmpCode;
                throw new UndeferrableValueException("Value 'NetworkAclEgressArgs.IcmpCode' is not present");
            }
        }

        /// <summary>
        /// The ICMP type to be used. Default 0.
        /// </summary>
        [PolicyResourceProperty("icmpType", "_mUnknown_IcmpType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_IcmpType;
        private bool _mUnknown_IcmpType;
        public int? IcmpType
        {
            get
            {
                if (!_mUnknown_IcmpType) return _mValue_IcmpType;
                throw new UndeferrableValueException("Value 'NetworkAclEgressArgs.IcmpType' is not present");
            }
        }

        /// <summary>
        /// The IPv6 CIDR block.
        /// </summary>
        [PolicyResourceProperty("ipv6CidrBlock", "_mUnknown_Ipv6CidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv6CidrBlock;
        private bool _mUnknown_Ipv6CidrBlock;
        public string? Ipv6CidrBlock
        {
            get
            {
                if (!_mUnknown_Ipv6CidrBlock) return _mValue_Ipv6CidrBlock;
                throw new UndeferrableValueException("Value 'NetworkAclEgressArgs.Ipv6CidrBlock' is not present");
            }
        }

        /// <summary>
        /// The protocol to match. If using the -1 'all'
        /// protocol, you must specify a from and to port of 0.
        /// </summary>
        [PolicyResourceProperty("protocol", "_mUnknown_Protocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Protocol;
        private bool _mUnknown_Protocol;
        public string? Protocol
        {
            get
            {
                if (!_mUnknown_Protocol) return _mValue_Protocol;
                throw new UndeferrableValueException("Value 'NetworkAclEgressArgs.Protocol' is not present");
            }
        }

        /// <summary>
        /// The rule number. Used for ordering.
        /// </summary>
        [PolicyResourceProperty("ruleNo", "_mUnknown_RuleNo")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RuleNo;
        private bool _mUnknown_RuleNo;
        public int? RuleNo
        {
            get
            {
                if (!_mUnknown_RuleNo) return _mValue_RuleNo;
                throw new UndeferrableValueException("Value 'NetworkAclEgressArgs.RuleNo' is not present");
            }
        }

        /// <summary>
        /// The to port to match.
        /// </summary>
        [PolicyResourceProperty("toPort", "_mUnknown_ToPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ToPort;
        private bool _mUnknown_ToPort;
        public int? ToPort
        {
            get
            {
                if (!_mUnknown_ToPort) return _mValue_ToPort;
                throw new UndeferrableValueException("Value 'NetworkAclEgressArgs.ToPort' is not present");
            }
        }
    }
}
