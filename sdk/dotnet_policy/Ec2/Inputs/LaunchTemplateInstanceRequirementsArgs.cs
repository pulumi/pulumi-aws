// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2.Inputs
{
    public sealed class LaunchTemplateInstanceRequirementsArgs
    {
        /// <summary>
        /// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum.
        /// </summary>
        [PolicyResourceProperty("acceleratorCount", "_mUnknown_AcceleratorCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.LaunchTemplateInstanceRequirementsAcceleratorCountArgs? _mValue_AcceleratorCount;
        private bool _mUnknown_AcceleratorCount;
        public Inputs.LaunchTemplateInstanceRequirementsAcceleratorCountArgs? AcceleratorCount
        {
            get
            {
                if (!_mUnknown_AcceleratorCount) return _mValue_AcceleratorCount;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.AcceleratorCount' is not present");
            }
        }

        /// <summary>
        /// List of accelerator manufacturer names. Default is any manufacturer.
        /// 
        /// ```
        /// Valid names:
        /// * amazon-web-services
        /// * amd
        /// * nvidia
        /// * xilinx
        /// ```
        /// </summary>
        [PolicyResourceProperty("acceleratorManufacturers", "_mUnknown_AcceleratorManufacturers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_AcceleratorManufacturers;
        private bool _mUnknown_AcceleratorManufacturers;
        public List<string>? AcceleratorManufacturers
        {
            get
            {
                if (!_mUnknown_AcceleratorManufacturers) return _mValue_AcceleratorManufacturers;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.AcceleratorManufacturers' is not present");
            }
        }

        /// <summary>
        /// List of accelerator names. Default is any acclerator.
        /// 
        /// ```
        /// Valid names:
        /// * a100            - NVIDIA A100 GPUs
        /// * v100            - NVIDIA V100 GPUs
        /// * k80             - NVIDIA K80 GPUs
        /// * t4              - NVIDIA T4 GPUs
        /// * m60             - NVIDIA M60 GPUs
        /// * radeon-pro-v520 - AMD Radeon Pro V520 GPUs
        /// * vu9p            - Xilinx VU9P FPGAs
        /// ```
        /// </summary>
        [PolicyResourceProperty("acceleratorNames", "_mUnknown_AcceleratorNames")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_AcceleratorNames;
        private bool _mUnknown_AcceleratorNames;
        public List<string>? AcceleratorNames
        {
            get
            {
                if (!_mUnknown_AcceleratorNames) return _mValue_AcceleratorNames;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.AcceleratorNames' is not present");
            }
        }

        /// <summary>
        /// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
        /// </summary>
        [PolicyResourceProperty("acceleratorTotalMemoryMib", "_mUnknown_AcceleratorTotalMemoryMib")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.LaunchTemplateInstanceRequirementsAcceleratorTotalMemoryMibArgs? _mValue_AcceleratorTotalMemoryMib;
        private bool _mUnknown_AcceleratorTotalMemoryMib;
        public Inputs.LaunchTemplateInstanceRequirementsAcceleratorTotalMemoryMibArgs? AcceleratorTotalMemoryMib
        {
            get
            {
                if (!_mUnknown_AcceleratorTotalMemoryMib) return _mValue_AcceleratorTotalMemoryMib;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.AcceleratorTotalMemoryMib' is not present");
            }
        }

        /// <summary>
        /// List of accelerator types. Default is any accelerator type.
        /// 
        /// ```
        /// Valid types:
        /// * fpga
        /// * gpu
        /// * inference
        /// ```
        /// </summary>
        [PolicyResourceProperty("acceleratorTypes", "_mUnknown_AcceleratorTypes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_AcceleratorTypes;
        private bool _mUnknown_AcceleratorTypes;
        public List<string>? AcceleratorTypes
        {
            get
            {
                if (!_mUnknown_AcceleratorTypes) return _mValue_AcceleratorTypes;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.AcceleratorTypes' is not present");
            }
        }

        /// <summary>
        /// List of instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes. You can use strings with one or more wild cards, represented by an asterisk (\*), to allow an instance type, size, or generation. The following are examples: `m5.8xlarge`, `c5*.*`, `m5a.*`, `r*`, `*3*`. For example, if you specify `c5*`, you are allowing the entire C5 instance family, which includes all C5a and C5n instance types. If you specify `m5a.*`, you are allowing all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is all instance types.
        /// 
        /// &gt; **NOTE:** If you specify `allowed_instance_types`, you can't specify `excluded_instance_types`.
        /// </summary>
        [PolicyResourceProperty("allowedInstanceTypes", "_mUnknown_AllowedInstanceTypes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_AllowedInstanceTypes;
        private bool _mUnknown_AllowedInstanceTypes;
        public List<string>? AllowedInstanceTypes
        {
            get
            {
                if (!_mUnknown_AllowedInstanceTypes) return _mValue_AllowedInstanceTypes;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.AllowedInstanceTypes' is not present");
            }
        }

        /// <summary>
        /// Indicate whether bare metal instace types should be `included`, `excluded`, or `required`. Default is `excluded`.
        /// </summary>
        [PolicyResourceProperty("bareMetal", "_mUnknown_BareMetal")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BareMetal;
        private bool _mUnknown_BareMetal;
        public string? BareMetal
        {
            get
            {
                if (!_mUnknown_BareMetal) return _mValue_BareMetal;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.BareMetal' is not present");
            }
        }

        /// <summary>
        /// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
        /// </summary>
        [PolicyResourceProperty("baselineEbsBandwidthMbps", "_mUnknown_BaselineEbsBandwidthMbps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.LaunchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsArgs? _mValue_BaselineEbsBandwidthMbps;
        private bool _mUnknown_BaselineEbsBandwidthMbps;
        public Inputs.LaunchTemplateInstanceRequirementsBaselineEbsBandwidthMbpsArgs? BaselineEbsBandwidthMbps
        {
            get
            {
                if (!_mUnknown_BaselineEbsBandwidthMbps) return _mValue_BaselineEbsBandwidthMbps;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.BaselineEbsBandwidthMbps' is not present");
            }
        }

        /// <summary>
        /// Indicate whether burstable performance instance types should be `included`, `excluded`, or `required`. Default is `excluded`.
        /// </summary>
        [PolicyResourceProperty("burstablePerformance", "_mUnknown_BurstablePerformance")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BurstablePerformance;
        private bool _mUnknown_BurstablePerformance;
        public string? BurstablePerformance
        {
            get
            {
                if (!_mUnknown_BurstablePerformance) return _mValue_BurstablePerformance;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.BurstablePerformance' is not present");
            }
        }

        /// <summary>
        /// List of CPU manufacturer names. Default is any manufacturer.
        /// 
        /// &gt; **NOTE:** Don't confuse the CPU hardware manufacturer with the CPU hardware architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template.
        /// 
        /// ```
        /// Valid names:
        /// * amazon-web-services
        /// * amd
        /// * intel
        /// ```
        /// </summary>
        [PolicyResourceProperty("cpuManufacturers", "_mUnknown_CpuManufacturers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CpuManufacturers;
        private bool _mUnknown_CpuManufacturers;
        public List<string>? CpuManufacturers
        {
            get
            {
                if (!_mUnknown_CpuManufacturers) return _mValue_CpuManufacturers;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.CpuManufacturers' is not present");
            }
        }

        /// <summary>
        /// List of instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (\*), to exclude an instance type, size, or generation. The following are examples: `m5.8xlarge`, `c5*.*`, `m5a.*`, `r*`, `*3*`. For example, if you specify `c5*`, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify `m5a.*`, you are excluding all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is no excluded instance types.
        /// 
        /// &gt; **NOTE:** If you specify `excluded_instance_types`, you can't specify `allowed_instance_types`.
        /// </summary>
        [PolicyResourceProperty("excludedInstanceTypes", "_mUnknown_ExcludedInstanceTypes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_ExcludedInstanceTypes;
        private bool _mUnknown_ExcludedInstanceTypes;
        public List<string>? ExcludedInstanceTypes
        {
            get
            {
                if (!_mUnknown_ExcludedInstanceTypes) return _mValue_ExcludedInstanceTypes;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.ExcludedInstanceTypes' is not present");
            }
        }

        /// <summary>
        /// List of instance generation names. Default is any generation.
        /// 
        /// ```
        /// Valid names:
        /// * current  - Recommended for best performance.
        /// * previous - For existing applications optimized for older instance types.
        /// ```
        /// </summary>
        [PolicyResourceProperty("instanceGenerations", "_mUnknown_InstanceGenerations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_InstanceGenerations;
        private bool _mUnknown_InstanceGenerations;
        public List<string>? InstanceGenerations
        {
            get
            {
                if (!_mUnknown_InstanceGenerations) return _mValue_InstanceGenerations;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.InstanceGenerations' is not present");
            }
        }

        /// <summary>
        /// Indicate whether instance types with local storage volumes are `included`, `excluded`, or `required`. Default is `included`.
        /// </summary>
        [PolicyResourceProperty("localStorage", "_mUnknown_LocalStorage")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LocalStorage;
        private bool _mUnknown_LocalStorage;
        public string? LocalStorage
        {
            get
            {
                if (!_mUnknown_LocalStorage) return _mValue_LocalStorage;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.LocalStorage' is not present");
            }
        }

        /// <summary>
        /// List of local storage type names. Default any storage type.
        /// 
        /// ```
        /// Value names:
        /// * hdd - hard disk drive
        /// * ssd - solid state drive
        /// ```
        /// </summary>
        [PolicyResourceProperty("localStorageTypes", "_mUnknown_LocalStorageTypes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_LocalStorageTypes;
        private bool _mUnknown_LocalStorageTypes;
        public List<string>? LocalStorageTypes
        {
            get
            {
                if (!_mUnknown_LocalStorageTypes) return _mValue_LocalStorageTypes;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.LocalStorageTypes' is not present");
            }
        }

        /// <summary>
        /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Conflicts with `spot_max_price_percentage_over_lowest_price`
        /// </summary>
        [PolicyResourceProperty("maxSpotPriceAsPercentageOfOptimalOnDemandPrice", "_mUnknown_MaxSpotPriceAsPercentageOfOptimalOnDemandPrice")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxSpotPriceAsPercentageOfOptimalOnDemandPrice;
        private bool _mUnknown_MaxSpotPriceAsPercentageOfOptimalOnDemandPrice;
        public int? MaxSpotPriceAsPercentageOfOptimalOnDemandPrice
        {
            get
            {
                if (!_mUnknown_MaxSpotPriceAsPercentageOfOptimalOnDemandPrice) return _mValue_MaxSpotPriceAsPercentageOfOptimalOnDemandPrice;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice' is not present");
            }
        }

        /// <summary>
        /// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
        /// </summary>
        [PolicyResourceProperty("memoryGibPerVcpu", "_mUnknown_MemoryGibPerVcpu")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.LaunchTemplateInstanceRequirementsMemoryGibPerVcpuArgs? _mValue_MemoryGibPerVcpu;
        private bool _mUnknown_MemoryGibPerVcpu;
        public Inputs.LaunchTemplateInstanceRequirementsMemoryGibPerVcpuArgs? MemoryGibPerVcpu
        {
            get
            {
                if (!_mUnknown_MemoryGibPerVcpu) return _mValue_MemoryGibPerVcpu;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.MemoryGibPerVcpu' is not present");
            }
        }

        /// <summary>
        /// Block describing the minimum and maximum amount of memory (MiB). Default is no maximum.
        /// </summary>
        [PolicyResourceProperty("memoryMib", "_mUnknown_MemoryMib")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.LaunchTemplateInstanceRequirementsMemoryMibArgs? _mValue_MemoryMib;
        private bool _mUnknown_MemoryMib;
        public Inputs.LaunchTemplateInstanceRequirementsMemoryMibArgs? MemoryMib
        {
            get
            {
                if (!_mUnknown_MemoryMib) return _mValue_MemoryMib;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.MemoryMib' is not present");
            }
        }

        /// <summary>
        /// Block describing the minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is no minimum or maximum.
        /// </summary>
        [PolicyResourceProperty("networkBandwidthGbps", "_mUnknown_NetworkBandwidthGbps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.LaunchTemplateInstanceRequirementsNetworkBandwidthGbpsArgs? _mValue_NetworkBandwidthGbps;
        private bool _mUnknown_NetworkBandwidthGbps;
        public Inputs.LaunchTemplateInstanceRequirementsNetworkBandwidthGbpsArgs? NetworkBandwidthGbps
        {
            get
            {
                if (!_mUnknown_NetworkBandwidthGbps) return _mValue_NetworkBandwidthGbps;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.NetworkBandwidthGbps' is not present");
            }
        }

        /// <summary>
        /// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
        /// </summary>
        [PolicyResourceProperty("networkInterfaceCount", "_mUnknown_NetworkInterfaceCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.LaunchTemplateInstanceRequirementsNetworkInterfaceCountArgs? _mValue_NetworkInterfaceCount;
        private bool _mUnknown_NetworkInterfaceCount;
        public Inputs.LaunchTemplateInstanceRequirementsNetworkInterfaceCountArgs? NetworkInterfaceCount
        {
            get
            {
                if (!_mUnknown_NetworkInterfaceCount) return _mValue_NetworkInterfaceCount;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.NetworkInterfaceCount' is not present");
            }
        }

        /// <summary>
        /// The price protection threshold for On-Demand Instances. This is the maximum you’ll pay for an On-Demand Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 20.
        /// 
        /// If you set DesiredCapacityType to vcpu or memory-mib, the price protection threshold is applied based on the per vCPU or per memory price instead of the per instance price.
        /// </summary>
        [PolicyResourceProperty("onDemandMaxPricePercentageOverLowestPrice", "_mUnknown_OnDemandMaxPricePercentageOverLowestPrice")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_OnDemandMaxPricePercentageOverLowestPrice;
        private bool _mUnknown_OnDemandMaxPricePercentageOverLowestPrice;
        public int? OnDemandMaxPricePercentageOverLowestPrice
        {
            get
            {
                if (!_mUnknown_OnDemandMaxPricePercentageOverLowestPrice) return _mValue_OnDemandMaxPricePercentageOverLowestPrice;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.OnDemandMaxPricePercentageOverLowestPrice' is not present");
            }
        }

        /// <summary>
        /// Indicate whether instance types must support On-Demand Instance Hibernation, either `true` or `false`. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("requireHibernateSupport", "_mUnknown_RequireHibernateSupport")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_RequireHibernateSupport;
        private bool _mUnknown_RequireHibernateSupport;
        public bool? RequireHibernateSupport
        {
            get
            {
                if (!_mUnknown_RequireHibernateSupport) return _mValue_RequireHibernateSupport;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.RequireHibernateSupport' is not present");
            }
        }

        /// <summary>
        /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 100. Conflicts with `max_spot_price_as_percentage_of_optimal_on_demand_price`
        /// 
        /// If you set DesiredCapacityType to vcpu or memory-mib, the price protection threshold is applied based on the per vCPU or per memory price instead of the per instance price.
        /// </summary>
        [PolicyResourceProperty("spotMaxPricePercentageOverLowestPrice", "_mUnknown_SpotMaxPricePercentageOverLowestPrice")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_SpotMaxPricePercentageOverLowestPrice;
        private bool _mUnknown_SpotMaxPricePercentageOverLowestPrice;
        public int? SpotMaxPricePercentageOverLowestPrice
        {
            get
            {
                if (!_mUnknown_SpotMaxPricePercentageOverLowestPrice) return _mValue_SpotMaxPricePercentageOverLowestPrice;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.SpotMaxPricePercentageOverLowestPrice' is not present");
            }
        }

        /// <summary>
        /// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
        /// </summary>
        [PolicyResourceProperty("totalLocalStorageGb", "_mUnknown_TotalLocalStorageGb")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.LaunchTemplateInstanceRequirementsTotalLocalStorageGbArgs? _mValue_TotalLocalStorageGb;
        private bool _mUnknown_TotalLocalStorageGb;
        public Inputs.LaunchTemplateInstanceRequirementsTotalLocalStorageGbArgs? TotalLocalStorageGb
        {
            get
            {
                if (!_mUnknown_TotalLocalStorageGb) return _mValue_TotalLocalStorageGb;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.TotalLocalStorageGb' is not present");
            }
        }

        /// <summary>
        /// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
        /// </summary>
        [PolicyResourceProperty("vcpuCount", "_mUnknown_VcpuCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.LaunchTemplateInstanceRequirementsVcpuCountArgs? _mValue_VcpuCount;
        private bool _mUnknown_VcpuCount;
        public Inputs.LaunchTemplateInstanceRequirementsVcpuCountArgs? VcpuCount
        {
            get
            {
                if (!_mUnknown_VcpuCount) return _mValue_VcpuCount;
                throw new UndeferrableValueException("Value 'LaunchTemplateInstanceRequirementsArgs.VcpuCount' is not present");
            }
        }
    }
}
