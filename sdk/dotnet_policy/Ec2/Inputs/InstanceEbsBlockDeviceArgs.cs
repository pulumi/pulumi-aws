// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2.Inputs
{
    public sealed class InstanceEbsBlockDeviceArgs
    {
        /// <summary>
        /// Whether the volume should be destroyed on instance termination. Defaults to `true`.
        /// </summary>
        [PolicyResourceProperty("deleteOnTermination", "_mUnknown_DeleteOnTermination")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DeleteOnTermination;
        private bool _mUnknown_DeleteOnTermination;
        public bool? DeleteOnTermination
        {
            get
            {
                if (!_mUnknown_DeleteOnTermination) return _mValue_DeleteOnTermination;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.DeleteOnTermination' is not present");
            }
        }

        /// <summary>
        /// Name of the device to mount.
        /// </summary>
        [PolicyResourceProperty("deviceName", "_mUnknown_DeviceName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DeviceName;
        private bool _mUnknown_DeviceName;
        public string? DeviceName
        {
            get
            {
                if (!_mUnknown_DeviceName) return _mValue_DeviceName;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.DeviceName' is not present");
            }
        }

        /// <summary>
        /// Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume. Defaults to `false`. Cannot be used with `snapshot_id`. Must be configured to perform drift detection.
        /// </summary>
        [PolicyResourceProperty("encrypted", "_mUnknown_Encrypted")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Encrypted;
        private bool _mUnknown_Encrypted;
        public bool? Encrypted
        {
            get
            {
                if (!_mUnknown_Encrypted) return _mValue_Encrypted;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.Encrypted' is not present");
            }
        }

        /// <summary>
        /// Amount of provisioned [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html). Only valid for volume_type of `io1`, `io2` or `gp3`.
        /// </summary>
        [PolicyResourceProperty("iops", "_mUnknown_Iops")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Iops;
        private bool _mUnknown_Iops;
        public int? Iops
        {
            get
            {
                if (!_mUnknown_Iops) return _mValue_Iops;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.Iops' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// Snapshot ID to mount.
        /// </summary>
        [PolicyResourceProperty("snapshotId", "_mUnknown_SnapshotId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnapshotId;
        private bool _mUnknown_SnapshotId;
        public string? SnapshotId
        {
            get
            {
                if (!_mUnknown_SnapshotId) return _mValue_SnapshotId;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.SnapshotId' is not present");
            }
        }

        /// <summary>
        /// Map of tags to assign to the device.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Throughput to provision for a volume in mebibytes per second (MiB/s). This is only valid for `volume_type` of `gp3`.
        /// </summary>
        [PolicyResourceProperty("throughput", "_mUnknown_Throughput")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Throughput;
        private bool _mUnknown_Throughput;
        public int? Throughput
        {
            get
            {
                if (!_mUnknown_Throughput) return _mValue_Throughput;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.Throughput' is not present");
            }
        }

        /// <summary>
        /// ID of the volume. For example, the ID can be accessed like this, `aws_instance.web.root_block_device.0.volume_id`.
        /// </summary>
        [PolicyResourceProperty("volumeId", "_mUnknown_VolumeId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VolumeId;
        private bool _mUnknown_VolumeId;
        public string? VolumeId
        {
            get
            {
                if (!_mUnknown_VolumeId) return _mValue_VolumeId;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.VolumeId' is not present");
            }
        }

        /// <summary>
        /// Size of the volume in gibibytes (GiB).
        /// </summary>
        [PolicyResourceProperty("volumeSize", "_mUnknown_VolumeSize")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_VolumeSize;
        private bool _mUnknown_VolumeSize;
        public int? VolumeSize
        {
            get
            {
                if (!_mUnknown_VolumeSize) return _mValue_VolumeSize;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.VolumeSize' is not present");
            }
        }

        /// <summary>
        /// Type of volume. Valid values include `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1`, or `st1`. Defaults to `gp2`.
        /// 
        /// &gt; **NOTE:** Currently, changes to the `ebs_block_device` configuration of _existing_ resources cannot be automatically detected by this provider. To manage changes and attachments of an EBS block to an instance, use the `aws.ebs.Volume` and `aws.ec2.VolumeAttachment` resources instead. If you use `ebs_block_device` on an `aws.ec2.Instance`, this provider will assume management over the full set of non-root EBS block devices for the instance, treating additional block devices as drift. For this reason, `ebs_block_device` cannot be mixed with external `aws.ebs.Volume` and `aws.ec2.VolumeAttachment` resources for a given instance.
        /// </summary>
        [PolicyResourceProperty("volumeType", "_mUnknown_VolumeType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VolumeType;
        private bool _mUnknown_VolumeType;
        public string? VolumeType
        {
            get
            {
                if (!_mUnknown_VolumeType) return _mValue_VolumeType;
                throw new UndeferrableValueException("Value 'InstanceEbsBlockDeviceArgs.VolumeType' is not present");
            }
        }
    }
}
