// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2
{
    [PolicyResourceType("aws:ec2/securityGroupRule:SecurityGroupRule")]
    public sealed class SecurityGroupRule : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// List of CIDR blocks. Cannot be specified with `source_security_group_id` or `self`.
        /// </summary>
        [PolicyResourceProperty("cidrBlocks", "_mUnknown_CidrBlocks")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CidrBlocks;
        private bool _mUnknown_CidrBlocks;
        public List<string>? CidrBlocks
        {
            get
            {
                if (!_mUnknown_CidrBlocks) return _mValue_CidrBlocks;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.CidrBlocks' is not present");
            }
        }

        /// <summary>
        /// Description of the rule.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.Description' is not present");
            }
        }

        /// <summary>
        /// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
        /// </summary>
        [PolicyResourceProperty("fromPort", "_mUnknown_FromPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_FromPort;
        private bool _mUnknown_FromPort;
        public int? FromPort
        {
            get
            {
                if (!_mUnknown_FromPort) return _mValue_FromPort;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.FromPort' is not present");
            }
        }

        /// <summary>
        /// List of IPv6 CIDR blocks. Cannot be specified with `source_security_group_id` or `self`.
        /// </summary>
        [PolicyResourceProperty("ipv6CidrBlocks", "_mUnknown_Ipv6CidrBlocks")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Ipv6CidrBlocks;
        private bool _mUnknown_Ipv6CidrBlocks;
        public List<string>? Ipv6CidrBlocks
        {
            get
            {
                if (!_mUnknown_Ipv6CidrBlocks) return _mValue_Ipv6CidrBlocks;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.Ipv6CidrBlocks' is not present");
            }
        }

        /// <summary>
        /// List of Prefix List IDs.
        /// </summary>
        [PolicyResourceProperty("prefixListIds", "_mUnknown_PrefixListIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_PrefixListIds;
        private bool _mUnknown_PrefixListIds;
        public List<string>? PrefixListIds
        {
            get
            {
                if (!_mUnknown_PrefixListIds) return _mValue_PrefixListIds;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.PrefixListIds' is not present");
            }
        }

        /// <summary>
        /// Protocol. If not icmp, icmpv6, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
        /// </summary>
        [PolicyResourceProperty("protocol", "_mUnknown_Protocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Protocol;
        private bool _mUnknown_Protocol;
        public string? Protocol
        {
            get
            {
                if (!_mUnknown_Protocol) return _mValue_Protocol;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.Protocol' is not present");
            }
        }

        /// <summary>
        /// Security group to apply this rule to.
        /// </summary>
        [PolicyResourceProperty("securityGroupId", "_mUnknown_SecurityGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityGroupId;
        private bool _mUnknown_SecurityGroupId;
        public string? SecurityGroupId
        {
            get
            {
                if (!_mUnknown_SecurityGroupId) return _mValue_SecurityGroupId;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.SecurityGroupId' is not present");
            }
        }

        /// <summary>
        /// If the `aws.ec2.SecurityGroupRule` resource has a single source or destination then this is the AWS Security Group Rule resource ID. Otherwise it is empty.
        /// </summary>
        [PolicyResourceProperty("securityGroupRuleId", "_mUnknown_SecurityGroupRuleId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityGroupRuleId;
        private bool _mUnknown_SecurityGroupRuleId;
        public string? SecurityGroupRuleId
        {
            get
            {
                if (!_mUnknown_SecurityGroupRuleId) return _mValue_SecurityGroupRuleId;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.SecurityGroupRuleId' is not present");
            }
        }

        /// <summary>
        /// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with `cidr_blocks`, `ipv6_cidr_blocks`, or `source_security_group_id`.
        /// </summary>
        [PolicyResourceProperty("self", "_mUnknown_Self")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Self;
        private bool _mUnknown_Self;
        public bool? Self
        {
            get
            {
                if (!_mUnknown_Self) return _mValue_Self;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.Self' is not present");
            }
        }

        /// <summary>
        /// Security group id to allow access to/from, depending on the `type`. Cannot be specified with `cidr_blocks`, `ipv6_cidr_blocks`, or `self`.
        /// </summary>
        [PolicyResourceProperty("sourceSecurityGroupId", "_mUnknown_SourceSecurityGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceSecurityGroupId;
        private bool _mUnknown_SourceSecurityGroupId;
        public string? SourceSecurityGroupId
        {
            get
            {
                if (!_mUnknown_SourceSecurityGroupId) return _mValue_SourceSecurityGroupId;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.SourceSecurityGroupId' is not present");
            }
        }

        /// <summary>
        /// End port (or ICMP code if protocol is "icmp").
        /// </summary>
        [PolicyResourceProperty("toPort", "_mUnknown_ToPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ToPort;
        private bool _mUnknown_ToPort;
        public int? ToPort
        {
            get
            {
                if (!_mUnknown_ToPort) return _mValue_ToPort;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.ToPort' is not present");
            }
        }

        /// <summary>
        /// Type of rule being created. Valid options are `ingress` (inbound)
        /// or `egress` (outbound).
        /// 
        /// The following arguments are optional:
        /// 
        /// &gt; **Note** Although `cidr_blocks`, `ipv6_cidr_blocks`, `prefix_list_ids`, and `source_security_group_id` are all marked as optional, you _must_ provide one of them in order to configure the source of the traffic.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'SecurityGroupRule.Type' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ec2/securityGroupRule:SecurityGroupRule")]
    public sealed class SecurityGroupRuleArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// List of CIDR blocks. Cannot be specified with `source_security_group_id` or `self`.
        /// </summary>
        [PolicyResourceProperty("cidrBlocks", "_mUnknown_CidrBlocks")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CidrBlocks;
        private bool _mUnknown_CidrBlocks;
        public List<string>? CidrBlocks
        {
            get
            {
                if (!_mUnknown_CidrBlocks) return _mValue_CidrBlocks;
                throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.CidrBlocks' is not present");
            }
        }

        /// <summary>
        /// Description of the rule.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.Description' is not present");
            }
        }

        /// <summary>
        /// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
        /// </summary>
        [PolicyResourceProperty("fromPort", "_mUnknown_FromPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_FromPort;
        private bool _mUnknown_FromPort;
        public int? FromPort
        {
            get
            {
                if (!_mUnknown_FromPort) return _mValue_FromPort;
                throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.FromPort' is not present");
            }
        }

        /// <summary>
        /// List of IPv6 CIDR blocks. Cannot be specified with `source_security_group_id` or `self`.
        /// </summary>
        [PolicyResourceProperty("ipv6CidrBlocks", "_mUnknown_Ipv6CidrBlocks")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Ipv6CidrBlocks;
        private bool _mUnknown_Ipv6CidrBlocks;
        public List<string>? Ipv6CidrBlocks
        {
            get
            {
                if (!_mUnknown_Ipv6CidrBlocks) return _mValue_Ipv6CidrBlocks;
                throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.Ipv6CidrBlocks' is not present");
            }
        }

        /// <summary>
        /// List of Prefix List IDs.
        /// </summary>
        [PolicyResourceProperty("prefixListIds", "_mUnknown_PrefixListIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_PrefixListIds;
        private bool _mUnknown_PrefixListIds;
        public List<string>? PrefixListIds
        {
            get
            {
                if (!_mUnknown_PrefixListIds) return _mValue_PrefixListIds;
                throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.PrefixListIds' is not present");
            }
        }

        /// <summary>
        /// Protocol. If not icmp, icmpv6, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
        /// </summary>
        [PolicyResourceProperty("protocol", "_mUnknown_Protocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Protocol;
        private bool _mUnknown_Protocol;
        public string? Protocol
        {
            get
            {
                if (!_mUnknown_Protocol) return _mValue_Protocol;
                throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.Protocol' is not present");
            }
        }

        /// <summary>
        /// Security group to apply this rule to.
        /// </summary>
        [PolicyResourceProperty("securityGroupId", "_mUnknown_SecurityGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityGroupId;
        private bool _mUnknown_SecurityGroupId;
        public string? SecurityGroupId
        {
            get
            {
                if (!_mUnknown_SecurityGroupId) return _mValue_SecurityGroupId;
                throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.SecurityGroupId' is not present");
            }
        }

        /// <summary>
        /// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with `cidr_blocks`, `ipv6_cidr_blocks`, or `source_security_group_id`.
        /// </summary>
        [PolicyResourceProperty("self", "_mUnknown_Self")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Self;
        private bool _mUnknown_Self;
        public bool? Self
        {
            get
            {
                if (!_mUnknown_Self) return _mValue_Self;
                throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.Self' is not present");
            }
        }

        /// <summary>
        /// Security group id to allow access to/from, depending on the `type`. Cannot be specified with `cidr_blocks`, `ipv6_cidr_blocks`, or `self`.
        /// </summary>
        [PolicyResourceProperty("sourceSecurityGroupId", "_mUnknown_SourceSecurityGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceSecurityGroupId;
        private bool _mUnknown_SourceSecurityGroupId;
        public string? SourceSecurityGroupId
        {
            get
            {
                if (!_mUnknown_SourceSecurityGroupId) return _mValue_SourceSecurityGroupId;
                throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.SourceSecurityGroupId' is not present");
            }
        }

        /// <summary>
        /// End port (or ICMP code if protocol is "icmp").
        /// </summary>
        [PolicyResourceProperty("toPort", "_mUnknown_ToPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ToPort;
        private bool _mUnknown_ToPort;
        public int? ToPort
        {
            get
            {
                if (!_mUnknown_ToPort) return _mValue_ToPort;
                throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.ToPort' is not present");
            }
        }

        /// <summary>
        /// Type of rule being created. Valid options are `ingress` (inbound)
        /// or `egress` (outbound).
        /// 
        /// The following arguments are optional:
        /// 
        /// &gt; **Note** Although `cidr_blocks`, `ipv6_cidr_blocks`, `prefix_list_ids`, and `source_security_group_id` are all marked as optional, you _must_ provide one of them in order to configure the source of the traffic.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'SecurityGroupRuleArgs.Type' is not present");
            }
        }
    }
}
