// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2
{
    [PolicyResourceType("aws:ec2/vpc:Vpc")]
    public sealed class Vpc : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of VPC
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Vpc.Arn' is not present");
            }
        }

        /// <summary>
        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`. Conflicts with `ipv6_ipam_pool_id`
        /// </summary>
        [PolicyResourceProperty("assignGeneratedIpv6CidrBlock", "_mUnknown_AssignGeneratedIpv6CidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AssignGeneratedIpv6CidrBlock;
        private bool _mUnknown_AssignGeneratedIpv6CidrBlock;
        public bool? AssignGeneratedIpv6CidrBlock
        {
            get
            {
                if (!_mUnknown_AssignGeneratedIpv6CidrBlock) return _mValue_AssignGeneratedIpv6CidrBlock;
                throw new UndeferrableValueException("Value 'Vpc.AssignGeneratedIpv6CidrBlock' is not present");
            }
        }

        /// <summary>
        /// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4_netmask_length`.
        /// </summary>
        [PolicyResourceProperty("cidrBlock", "_mUnknown_CidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CidrBlock;
        private bool _mUnknown_CidrBlock;
        public string? CidrBlock
        {
            get
            {
                if (!_mUnknown_CidrBlock) return _mValue_CidrBlock;
                throw new UndeferrableValueException("Value 'Vpc.CidrBlock' is not present");
            }
        }

        /// <summary>
        /// The ID of the network ACL created by default on VPC creation
        /// </summary>
        [PolicyResourceProperty("defaultNetworkAclId", "_mUnknown_DefaultNetworkAclId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultNetworkAclId;
        private bool _mUnknown_DefaultNetworkAclId;
        public string? DefaultNetworkAclId
        {
            get
            {
                if (!_mUnknown_DefaultNetworkAclId) return _mValue_DefaultNetworkAclId;
                throw new UndeferrableValueException("Value 'Vpc.DefaultNetworkAclId' is not present");
            }
        }

        /// <summary>
        /// The ID of the route table created by default on VPC creation
        /// </summary>
        [PolicyResourceProperty("defaultRouteTableId", "_mUnknown_DefaultRouteTableId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultRouteTableId;
        private bool _mUnknown_DefaultRouteTableId;
        public string? DefaultRouteTableId
        {
            get
            {
                if (!_mUnknown_DefaultRouteTableId) return _mValue_DefaultRouteTableId;
                throw new UndeferrableValueException("Value 'Vpc.DefaultRouteTableId' is not present");
            }
        }

        /// <summary>
        /// The ID of the security group created by default on VPC creation
        /// </summary>
        [PolicyResourceProperty("defaultSecurityGroupId", "_mUnknown_DefaultSecurityGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultSecurityGroupId;
        private bool _mUnknown_DefaultSecurityGroupId;
        public string? DefaultSecurityGroupId
        {
            get
            {
                if (!_mUnknown_DefaultSecurityGroupId) return _mValue_DefaultSecurityGroupId;
                throw new UndeferrableValueException("Value 'Vpc.DefaultSecurityGroupId' is not present");
            }
        }

        /// <summary>
        /// DHCP options id of the desired VPC.
        /// </summary>
        [PolicyResourceProperty("dhcpOptionsId", "_mUnknown_DhcpOptionsId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DhcpOptionsId;
        private bool _mUnknown_DhcpOptionsId;
        public string? DhcpOptionsId
        {
            get
            {
                if (!_mUnknown_DhcpOptionsId) return _mValue_DhcpOptionsId;
                throw new UndeferrableValueException("Value 'Vpc.DhcpOptionsId' is not present");
            }
        }

        /// <summary>
        /// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
        /// </summary>
        [PolicyResourceProperty("enableDnsHostnames", "_mUnknown_EnableDnsHostnames")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableDnsHostnames;
        private bool _mUnknown_EnableDnsHostnames;
        public bool? EnableDnsHostnames
        {
            get
            {
                if (!_mUnknown_EnableDnsHostnames) return _mValue_EnableDnsHostnames;
                throw new UndeferrableValueException("Value 'Vpc.EnableDnsHostnames' is not present");
            }
        }

        /// <summary>
        /// A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
        /// </summary>
        [PolicyResourceProperty("enableDnsSupport", "_mUnknown_EnableDnsSupport")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableDnsSupport;
        private bool _mUnknown_EnableDnsSupport;
        public bool? EnableDnsSupport
        {
            get
            {
                if (!_mUnknown_EnableDnsSupport) return _mValue_EnableDnsSupport;
                throw new UndeferrableValueException("Value 'Vpc.EnableDnsSupport' is not present");
            }
        }

        /// <summary>
        /// Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
        /// </summary>
        [PolicyResourceProperty("enableNetworkAddressUsageMetrics", "_mUnknown_EnableNetworkAddressUsageMetrics")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableNetworkAddressUsageMetrics;
        private bool _mUnknown_EnableNetworkAddressUsageMetrics;
        public bool? EnableNetworkAddressUsageMetrics
        {
            get
            {
                if (!_mUnknown_EnableNetworkAddressUsageMetrics) return _mValue_EnableNetworkAddressUsageMetrics;
                throw new UndeferrableValueException("Value 'Vpc.EnableNetworkAddressUsageMetrics' is not present");
            }
        }

        /// <summary>
        /// A tenancy option for instances launched into the VPC. Default is `default`, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is `dedicated`, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
        /// </summary>
        [PolicyResourceProperty("instanceTenancy", "_mUnknown_InstanceTenancy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceTenancy;
        private bool _mUnknown_InstanceTenancy;
        public string? InstanceTenancy
        {
            get
            {
                if (!_mUnknown_InstanceTenancy) return _mValue_InstanceTenancy;
                throw new UndeferrableValueException("Value 'Vpc.InstanceTenancy' is not present");
            }
        }

        /// <summary>
        /// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
        /// </summary>
        [PolicyResourceProperty("ipv4IpamPoolId", "_mUnknown_Ipv4IpamPoolId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv4IpamPoolId;
        private bool _mUnknown_Ipv4IpamPoolId;
        public string? Ipv4IpamPoolId
        {
            get
            {
                if (!_mUnknown_Ipv4IpamPoolId) return _mValue_Ipv4IpamPoolId;
                throw new UndeferrableValueException("Value 'Vpc.Ipv4IpamPoolId' is not present");
            }
        }

        /// <summary>
        /// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a `ipv4_ipam_pool_id`.
        /// </summary>
        [PolicyResourceProperty("ipv4NetmaskLength", "_mUnknown_Ipv4NetmaskLength")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Ipv4NetmaskLength;
        private bool _mUnknown_Ipv4NetmaskLength;
        public int? Ipv4NetmaskLength
        {
            get
            {
                if (!_mUnknown_Ipv4NetmaskLength) return _mValue_Ipv4NetmaskLength;
                throw new UndeferrableValueException("Value 'Vpc.Ipv4NetmaskLength' is not present");
            }
        }

        /// <summary>
        /// The association ID for the IPv6 CIDR block.
        /// </summary>
        [PolicyResourceProperty("ipv6AssociationId", "_mUnknown_Ipv6AssociationId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv6AssociationId;
        private bool _mUnknown_Ipv6AssociationId;
        public string? Ipv6AssociationId
        {
            get
            {
                if (!_mUnknown_Ipv6AssociationId) return _mValue_Ipv6AssociationId;
                throw new UndeferrableValueException("Value 'Vpc.Ipv6AssociationId' is not present");
            }
        }

        /// <summary>
        /// IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6_netmask_length`.
        /// </summary>
        [PolicyResourceProperty("ipv6CidrBlock", "_mUnknown_Ipv6CidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv6CidrBlock;
        private bool _mUnknown_Ipv6CidrBlock;
        public string? Ipv6CidrBlock
        {
            get
            {
                if (!_mUnknown_Ipv6CidrBlock) return _mValue_Ipv6CidrBlock;
                throw new UndeferrableValueException("Value 'Vpc.Ipv6CidrBlock' is not present");
            }
        }

        /// <summary>
        /// By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
        /// </summary>
        [PolicyResourceProperty("ipv6CidrBlockNetworkBorderGroup", "_mUnknown_Ipv6CidrBlockNetworkBorderGroup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv6CidrBlockNetworkBorderGroup;
        private bool _mUnknown_Ipv6CidrBlockNetworkBorderGroup;
        public string? Ipv6CidrBlockNetworkBorderGroup
        {
            get
            {
                if (!_mUnknown_Ipv6CidrBlockNetworkBorderGroup) return _mValue_Ipv6CidrBlockNetworkBorderGroup;
                throw new UndeferrableValueException("Value 'Vpc.Ipv6CidrBlockNetworkBorderGroup' is not present");
            }
        }

        /// <summary>
        /// IPAM Pool ID for a IPv6 pool. Conflicts with `assign_generated_ipv6_cidr_block`.
        /// </summary>
        [PolicyResourceProperty("ipv6IpamPoolId", "_mUnknown_Ipv6IpamPoolId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv6IpamPoolId;
        private bool _mUnknown_Ipv6IpamPoolId;
        public string? Ipv6IpamPoolId
        {
            get
            {
                if (!_mUnknown_Ipv6IpamPoolId) return _mValue_Ipv6IpamPoolId;
                throw new UndeferrableValueException("Value 'Vpc.Ipv6IpamPoolId' is not present");
            }
        }

        /// <summary>
        /// Netmask length to request from IPAM Pool. Conflicts with `ipv6_cidr_block`. This can be omitted if IPAM pool as a `allocation_default_netmask_length` set. Valid values are from `44` to `60` in increments of 4.
        /// </summary>
        [PolicyResourceProperty("ipv6NetmaskLength", "_mUnknown_Ipv6NetmaskLength")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Ipv6NetmaskLength;
        private bool _mUnknown_Ipv6NetmaskLength;
        public int? Ipv6NetmaskLength
        {
            get
            {
                if (!_mUnknown_Ipv6NetmaskLength) return _mValue_Ipv6NetmaskLength;
                throw new UndeferrableValueException("Value 'Vpc.Ipv6NetmaskLength' is not present");
            }
        }

        /// <summary>
        /// The ID of the main route table associated with
        /// this VPC. Note that you can change a VPC's main route table by using an
        /// `aws.ec2.MainRouteTableAssociation`.
        /// </summary>
        [PolicyResourceProperty("mainRouteTableId", "_mUnknown_MainRouteTableId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MainRouteTableId;
        private bool _mUnknown_MainRouteTableId;
        public string? MainRouteTableId
        {
            get
            {
                if (!_mUnknown_MainRouteTableId) return _mValue_MainRouteTableId;
                throw new UndeferrableValueException("Value 'Vpc.MainRouteTableId' is not present");
            }
        }

        /// <summary>
        /// The ID of the AWS account that owns the VPC.
        /// </summary>
        [PolicyResourceProperty("ownerId", "_mUnknown_OwnerId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_OwnerId;
        private bool _mUnknown_OwnerId;
        public string? OwnerId
        {
            get
            {
                if (!_mUnknown_OwnerId) return _mValue_OwnerId;
                throw new UndeferrableValueException("Value 'Vpc.OwnerId' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Vpc.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Vpc.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ec2/vpc:Vpc")]
    public sealed class VpcArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`. Conflicts with `ipv6_ipam_pool_id`
        /// </summary>
        [PolicyResourceProperty("assignGeneratedIpv6CidrBlock", "_mUnknown_AssignGeneratedIpv6CidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AssignGeneratedIpv6CidrBlock;
        private bool _mUnknown_AssignGeneratedIpv6CidrBlock;
        public bool? AssignGeneratedIpv6CidrBlock
        {
            get
            {
                if (!_mUnknown_AssignGeneratedIpv6CidrBlock) return _mValue_AssignGeneratedIpv6CidrBlock;
                throw new UndeferrableValueException("Value 'VpcArgs.AssignGeneratedIpv6CidrBlock' is not present");
            }
        }

        /// <summary>
        /// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4_netmask_length`.
        /// </summary>
        [PolicyResourceProperty("cidrBlock", "_mUnknown_CidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CidrBlock;
        private bool _mUnknown_CidrBlock;
        public string? CidrBlock
        {
            get
            {
                if (!_mUnknown_CidrBlock) return _mValue_CidrBlock;
                throw new UndeferrableValueException("Value 'VpcArgs.CidrBlock' is not present");
            }
        }

        /// <summary>
        /// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
        /// </summary>
        [PolicyResourceProperty("enableDnsHostnames", "_mUnknown_EnableDnsHostnames")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableDnsHostnames;
        private bool _mUnknown_EnableDnsHostnames;
        public bool? EnableDnsHostnames
        {
            get
            {
                if (!_mUnknown_EnableDnsHostnames) return _mValue_EnableDnsHostnames;
                throw new UndeferrableValueException("Value 'VpcArgs.EnableDnsHostnames' is not present");
            }
        }

        /// <summary>
        /// A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
        /// </summary>
        [PolicyResourceProperty("enableDnsSupport", "_mUnknown_EnableDnsSupport")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableDnsSupport;
        private bool _mUnknown_EnableDnsSupport;
        public bool? EnableDnsSupport
        {
            get
            {
                if (!_mUnknown_EnableDnsSupport) return _mValue_EnableDnsSupport;
                throw new UndeferrableValueException("Value 'VpcArgs.EnableDnsSupport' is not present");
            }
        }

        /// <summary>
        /// Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
        /// </summary>
        [PolicyResourceProperty("enableNetworkAddressUsageMetrics", "_mUnknown_EnableNetworkAddressUsageMetrics")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableNetworkAddressUsageMetrics;
        private bool _mUnknown_EnableNetworkAddressUsageMetrics;
        public bool? EnableNetworkAddressUsageMetrics
        {
            get
            {
                if (!_mUnknown_EnableNetworkAddressUsageMetrics) return _mValue_EnableNetworkAddressUsageMetrics;
                throw new UndeferrableValueException("Value 'VpcArgs.EnableNetworkAddressUsageMetrics' is not present");
            }
        }

        /// <summary>
        /// A tenancy option for instances launched into the VPC. Default is `default`, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is `dedicated`, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
        /// </summary>
        [PolicyResourceProperty("instanceTenancy", "_mUnknown_InstanceTenancy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceTenancy;
        private bool _mUnknown_InstanceTenancy;
        public string? InstanceTenancy
        {
            get
            {
                if (!_mUnknown_InstanceTenancy) return _mValue_InstanceTenancy;
                throw new UndeferrableValueException("Value 'VpcArgs.InstanceTenancy' is not present");
            }
        }

        /// <summary>
        /// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
        /// </summary>
        [PolicyResourceProperty("ipv4IpamPoolId", "_mUnknown_Ipv4IpamPoolId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv4IpamPoolId;
        private bool _mUnknown_Ipv4IpamPoolId;
        public string? Ipv4IpamPoolId
        {
            get
            {
                if (!_mUnknown_Ipv4IpamPoolId) return _mValue_Ipv4IpamPoolId;
                throw new UndeferrableValueException("Value 'VpcArgs.Ipv4IpamPoolId' is not present");
            }
        }

        /// <summary>
        /// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a `ipv4_ipam_pool_id`.
        /// </summary>
        [PolicyResourceProperty("ipv4NetmaskLength", "_mUnknown_Ipv4NetmaskLength")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Ipv4NetmaskLength;
        private bool _mUnknown_Ipv4NetmaskLength;
        public int? Ipv4NetmaskLength
        {
            get
            {
                if (!_mUnknown_Ipv4NetmaskLength) return _mValue_Ipv4NetmaskLength;
                throw new UndeferrableValueException("Value 'VpcArgs.Ipv4NetmaskLength' is not present");
            }
        }

        /// <summary>
        /// IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6_netmask_length`.
        /// </summary>
        [PolicyResourceProperty("ipv6CidrBlock", "_mUnknown_Ipv6CidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv6CidrBlock;
        private bool _mUnknown_Ipv6CidrBlock;
        public string? Ipv6CidrBlock
        {
            get
            {
                if (!_mUnknown_Ipv6CidrBlock) return _mValue_Ipv6CidrBlock;
                throw new UndeferrableValueException("Value 'VpcArgs.Ipv6CidrBlock' is not present");
            }
        }

        /// <summary>
        /// By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
        /// </summary>
        [PolicyResourceProperty("ipv6CidrBlockNetworkBorderGroup", "_mUnknown_Ipv6CidrBlockNetworkBorderGroup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv6CidrBlockNetworkBorderGroup;
        private bool _mUnknown_Ipv6CidrBlockNetworkBorderGroup;
        public string? Ipv6CidrBlockNetworkBorderGroup
        {
            get
            {
                if (!_mUnknown_Ipv6CidrBlockNetworkBorderGroup) return _mValue_Ipv6CidrBlockNetworkBorderGroup;
                throw new UndeferrableValueException("Value 'VpcArgs.Ipv6CidrBlockNetworkBorderGroup' is not present");
            }
        }

        /// <summary>
        /// IPAM Pool ID for a IPv6 pool. Conflicts with `assign_generated_ipv6_cidr_block`.
        /// </summary>
        [PolicyResourceProperty("ipv6IpamPoolId", "_mUnknown_Ipv6IpamPoolId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv6IpamPoolId;
        private bool _mUnknown_Ipv6IpamPoolId;
        public string? Ipv6IpamPoolId
        {
            get
            {
                if (!_mUnknown_Ipv6IpamPoolId) return _mValue_Ipv6IpamPoolId;
                throw new UndeferrableValueException("Value 'VpcArgs.Ipv6IpamPoolId' is not present");
            }
        }

        /// <summary>
        /// Netmask length to request from IPAM Pool. Conflicts with `ipv6_cidr_block`. This can be omitted if IPAM pool as a `allocation_default_netmask_length` set. Valid values are from `44` to `60` in increments of 4.
        /// </summary>
        [PolicyResourceProperty("ipv6NetmaskLength", "_mUnknown_Ipv6NetmaskLength")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Ipv6NetmaskLength;
        private bool _mUnknown_Ipv6NetmaskLength;
        public int? Ipv6NetmaskLength
        {
            get
            {
                if (!_mUnknown_Ipv6NetmaskLength) return _mValue_Ipv6NetmaskLength;
                throw new UndeferrableValueException("Value 'VpcArgs.Ipv6NetmaskLength' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'VpcArgs.Tags' is not present");
            }
        }
    }
}
