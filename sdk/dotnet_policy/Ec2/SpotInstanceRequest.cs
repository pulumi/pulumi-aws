// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2
{
    [PolicyResourceType("aws:ec2/spotInstanceRequest:SpotInstanceRequest")]
    public sealed class SpotInstanceRequest : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// AMI to use for the instance. Required unless `launch_template` is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting `ami` will override the AMI specified in the Launch Template.
        /// </summary>
        [PolicyResourceProperty("ami", "_mUnknown_Ami")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ami;
        private bool _mUnknown_Ami;
        public string? Ami
        {
            get
            {
                if (!_mUnknown_Ami) return _mValue_Ami;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.Ami' is not present");
            }
        }

        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.Arn' is not present");
            }
        }

        /// <summary>
        /// Whether to associate a public IP address with an instance in a VPC.
        /// </summary>
        [PolicyResourceProperty("associatePublicIpAddress", "_mUnknown_AssociatePublicIpAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AssociatePublicIpAddress;
        private bool _mUnknown_AssociatePublicIpAddress;
        public bool? AssociatePublicIpAddress
        {
            get
            {
                if (!_mUnknown_AssociatePublicIpAddress) return _mValue_AssociatePublicIpAddress;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.AssociatePublicIpAddress' is not present");
            }
        }

        /// <summary>
        /// AZ to start the instance in.
        /// </summary>
        [PolicyResourceProperty("availabilityZone", "_mUnknown_AvailabilityZone")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZone;
        private bool _mUnknown_AvailabilityZone;
        public string? AvailabilityZone
        {
            get
            {
                if (!_mUnknown_AvailabilityZone) return _mValue_AvailabilityZone;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.AvailabilityZone' is not present");
            }
        }

        /// <summary>
        /// The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        /// The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
        /// Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
        /// </summary>
        [PolicyResourceProperty("blockDurationMinutes", "_mUnknown_BlockDurationMinutes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_BlockDurationMinutes;
        private bool _mUnknown_BlockDurationMinutes;
        public int? BlockDurationMinutes
        {
            get
            {
                if (!_mUnknown_BlockDurationMinutes) return _mValue_BlockDurationMinutes;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.BlockDurationMinutes' is not present");
            }
        }

        /// <summary>
        /// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
        /// 
        /// &gt; **NOTE:** Changing `cpu_core_count` and/or `cpu_threads_per_core` will cause the resource to be destroyed and re-created.
        /// </summary>
        [PolicyResourceProperty("capacityReservationSpecification", "_mUnknown_CapacityReservationSpecification")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.SpotInstanceRequestCapacityReservationSpecification? _mValue_CapacityReservationSpecification;
        private bool _mUnknown_CapacityReservationSpecification;
        public Outputs.SpotInstanceRequestCapacityReservationSpecification? CapacityReservationSpecification
        {
            get
            {
                if (!_mUnknown_CapacityReservationSpecification) return _mValue_CapacityReservationSpecification;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.CapacityReservationSpecification' is not present");
            }
        }

        /// <summary>
        /// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options [CPU Cores and Threads Per CPU Core Per Instance Type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html#cpu-options-supported-instances-values) - specifying this option for unsupported instance types will return an error from the EC2 API.
        /// </summary>
        [PolicyResourceProperty("cpuCoreCount", "_mUnknown_CpuCoreCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_CpuCoreCount;
        private bool _mUnknown_CpuCoreCount;
        public int? CpuCoreCount
        {
            get
            {
                if (!_mUnknown_CpuCoreCount) return _mValue_CpuCoreCount;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.CpuCoreCount' is not present");
            }
        }

        /// <summary>
        /// The CPU options for the instance. See CPU Options below for more details.
        /// </summary>
        [PolicyResourceProperty("cpuOptions", "_mUnknown_CpuOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.SpotInstanceRequestCpuOptions? _mValue_CpuOptions;
        private bool _mUnknown_CpuOptions;
        public Outputs.SpotInstanceRequestCpuOptions? CpuOptions
        {
            get
            {
                if (!_mUnknown_CpuOptions) return _mValue_CpuOptions;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.CpuOptions' is not present");
            }
        }

        /// <summary>
        /// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) for more information.
        /// </summary>
        [PolicyResourceProperty("cpuThreadsPerCore", "_mUnknown_CpuThreadsPerCore")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_CpuThreadsPerCore;
        private bool _mUnknown_CpuThreadsPerCore;
        public int? CpuThreadsPerCore
        {
            get
            {
                if (!_mUnknown_CpuThreadsPerCore) return _mValue_CpuThreadsPerCore;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.CpuThreadsPerCore' is not present");
            }
        }

        /// <summary>
        /// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. This provider will only perform drift detection of its value when present in a configuration. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
        /// </summary>
        [PolicyResourceProperty("creditSpecification", "_mUnknown_CreditSpecification")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.SpotInstanceRequestCreditSpecification? _mValue_CreditSpecification;
        private bool _mUnknown_CreditSpecification;
        public Outputs.SpotInstanceRequestCreditSpecification? CreditSpecification
        {
            get
            {
                if (!_mUnknown_CreditSpecification) return _mValue_CreditSpecification;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.CreditSpecification' is not present");
            }
        }

        /// <summary>
        /// If true, enables [EC2 Instance Stop Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).
        /// </summary>
        [PolicyResourceProperty("disableApiStop", "_mUnknown_DisableApiStop")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DisableApiStop;
        private bool _mUnknown_DisableApiStop;
        public bool? DisableApiStop
        {
            get
            {
                if (!_mUnknown_DisableApiStop) return _mValue_DisableApiStop;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.DisableApiStop' is not present");
            }
        }

        /// <summary>
        /// If true, enables [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination).
        /// </summary>
        [PolicyResourceProperty("disableApiTermination", "_mUnknown_DisableApiTermination")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DisableApiTermination;
        private bool _mUnknown_DisableApiTermination;
        public bool? DisableApiTermination
        {
            get
            {
                if (!_mUnknown_DisableApiTermination) return _mValue_DisableApiTermination;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.DisableApiTermination' is not present");
            }
        }

        /// <summary>
        /// One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
        /// </summary>
        [PolicyResourceProperty("ebsBlockDevices", "_mUnknown_EbsBlockDevices")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.SpotInstanceRequestEbsBlockDevice>? _mValue_EbsBlockDevices;
        private bool _mUnknown_EbsBlockDevices;
        public List<Outputs.SpotInstanceRequestEbsBlockDevice>? EbsBlockDevices
        {
            get
            {
                if (!_mUnknown_EbsBlockDevices) return _mValue_EbsBlockDevices;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.EbsBlockDevices' is not present");
            }
        }

        /// <summary>
        /// If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the [EBS Optimized section](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) of the AWS User Guide for more information.
        /// </summary>
        [PolicyResourceProperty("ebsOptimized", "_mUnknown_EbsOptimized")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EbsOptimized;
        private bool _mUnknown_EbsOptimized;
        public bool? EbsOptimized
        {
            get
            {
                if (!_mUnknown_EbsOptimized) return _mValue_EbsOptimized;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.EbsOptimized' is not present");
            }
        }

        /// <summary>
        /// Whether to assign a primary IPv6 Global Unicast Address (GUA) to the instance when launched in a dual-stack or IPv6-only subnet. A primary IPv6 address ensures a consistent IPv6 address for the instance and is automatically assigned by AWS to the ENI. Once enabled, the first IPv6 GUA becomes the primary IPv6 address and cannot be disabled. The primary IPv6 address remains until the instance is terminated or the ENI is detached. Disabling `enable_primary_ipv6` after it has been enabled forces recreation of the instance.
        /// </summary>
        [PolicyResourceProperty("enablePrimaryIpv6", "_mUnknown_EnablePrimaryIpv6")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnablePrimaryIpv6;
        private bool _mUnknown_EnablePrimaryIpv6;
        public bool? EnablePrimaryIpv6
        {
            get
            {
                if (!_mUnknown_EnablePrimaryIpv6) return _mValue_EnablePrimaryIpv6;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.EnablePrimaryIpv6' is not present");
            }
        }

        /// <summary>
        /// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
        /// </summary>
        [PolicyResourceProperty("enclaveOptions", "_mUnknown_EnclaveOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.SpotInstanceRequestEnclaveOptions? _mValue_EnclaveOptions;
        private bool _mUnknown_EnclaveOptions;
        public Outputs.SpotInstanceRequestEnclaveOptions? EnclaveOptions
        {
            get
            {
                if (!_mUnknown_EnclaveOptions) return _mValue_EnclaveOptions;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.EnclaveOptions' is not present");
            }
        }

        /// <summary>
        /// One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
        /// </summary>
        [PolicyResourceProperty("ephemeralBlockDevices", "_mUnknown_EphemeralBlockDevices")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.SpotInstanceRequestEphemeralBlockDevice>? _mValue_EphemeralBlockDevices;
        private bool _mUnknown_EphemeralBlockDevices;
        public List<Outputs.SpotInstanceRequestEphemeralBlockDevice>? EphemeralBlockDevices
        {
            get
            {
                if (!_mUnknown_EphemeralBlockDevices) return _mValue_EphemeralBlockDevices;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.EphemeralBlockDevices' is not present");
            }
        }

        /// <summary>
        /// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `password_data` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
        /// </summary>
        [PolicyResourceProperty("getPasswordData", "_mUnknown_GetPasswordData")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_GetPasswordData;
        private bool _mUnknown_GetPasswordData;
        public bool? GetPasswordData
        {
            get
            {
                if (!_mUnknown_GetPasswordData) return _mValue_GetPasswordData;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.GetPasswordData' is not present");
            }
        }

        /// <summary>
        /// If true, the launched EC2 instance will support hibernation.
        /// </summary>
        [PolicyResourceProperty("hibernation", "_mUnknown_Hibernation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Hibernation;
        private bool _mUnknown_Hibernation;
        public bool? Hibernation
        {
            get
            {
                if (!_mUnknown_Hibernation) return _mValue_Hibernation;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.Hibernation' is not present");
            }
        }

        /// <summary>
        /// ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
        /// </summary>
        [PolicyResourceProperty("hostId", "_mUnknown_HostId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HostId;
        private bool _mUnknown_HostId;
        public string? HostId
        {
            get
            {
                if (!_mUnknown_HostId) return _mValue_HostId;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.HostId' is not present");
            }
        }

        /// <summary>
        /// ARN of the host resource group in which to launch the instances. If you specify an ARN, omit the `tenancy` parameter or set it to `host`.
        /// </summary>
        [PolicyResourceProperty("hostResourceGroupArn", "_mUnknown_HostResourceGroupArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HostResourceGroupArn;
        private bool _mUnknown_HostResourceGroupArn;
        public string? HostResourceGroupArn
        {
            get
            {
                if (!_mUnknown_HostResourceGroupArn) return _mValue_HostResourceGroupArn;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.HostResourceGroupArn' is not present");
            }
        }

        /// <summary>
        /// IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the [EC2 documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions), notably `iam:PassRole`.
        /// </summary>
        [PolicyResourceProperty("iamInstanceProfile", "_mUnknown_IamInstanceProfile")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IamInstanceProfile;
        private bool _mUnknown_IamInstanceProfile;
        public string? IamInstanceProfile
        {
            get
            {
                if (!_mUnknown_IamInstanceProfile) return _mValue_IamInstanceProfile;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.IamInstanceProfile' is not present");
            }
        }

        /// <summary>
        /// Shutdown behavior for the instance. Amazon defaults this to `stop` for EBS-backed instances and `terminate` for instance-store instances. Cannot be set on instance-store instances. See [Shutdown Behavior](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior) for more information.
        /// </summary>
        [PolicyResourceProperty("instanceInitiatedShutdownBehavior", "_mUnknown_InstanceInitiatedShutdownBehavior")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceInitiatedShutdownBehavior;
        private bool _mUnknown_InstanceInitiatedShutdownBehavior;
        public string? InstanceInitiatedShutdownBehavior
        {
            get
            {
                if (!_mUnknown_InstanceInitiatedShutdownBehavior) return _mValue_InstanceInitiatedShutdownBehavior;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.InstanceInitiatedShutdownBehavior' is not present");
            }
        }

        /// <summary>
        /// Indicates Spot instance behavior when it is interrupted. Valid values are `terminate`, `stop`, or `hibernate`. Default value is `terminate`.
        /// </summary>
        [PolicyResourceProperty("instanceInterruptionBehavior", "_mUnknown_InstanceInterruptionBehavior")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceInterruptionBehavior;
        private bool _mUnknown_InstanceInterruptionBehavior;
        public string? InstanceInterruptionBehavior
        {
            get
            {
                if (!_mUnknown_InstanceInterruptionBehavior) return _mValue_InstanceInterruptionBehavior;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.InstanceInterruptionBehavior' is not present");
            }
        }

        [PolicyResourceProperty("instanceState", "_mUnknown_InstanceState")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceState;
        private bool _mUnknown_InstanceState;
        public string? InstanceState
        {
            get
            {
                if (!_mUnknown_InstanceState) return _mValue_InstanceState;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.InstanceState' is not present");
            }
        }

        /// <summary>
        /// Instance type to use for the instance. Required unless `launch_template` is specified and the Launch Template specifies an instance type. If an instance type is specified in the Launch Template, setting `instance_type` will override the instance type specified in the Launch Template. Updates to this field will trigger a stop/start of the EC2 instance.
        /// </summary>
        [PolicyResourceProperty("instanceType", "_mUnknown_InstanceType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceType;
        private bool _mUnknown_InstanceType;
        public string? InstanceType
        {
            get
            {
                if (!_mUnknown_InstanceType) return _mValue_InstanceType;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.InstanceType' is not present");
            }
        }

        /// <summary>
        /// Number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
        /// </summary>
        [PolicyResourceProperty("ipv6AddressCount", "_mUnknown_Ipv6AddressCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Ipv6AddressCount;
        private bool _mUnknown_Ipv6AddressCount;
        public int? Ipv6AddressCount
        {
            get
            {
                if (!_mUnknown_Ipv6AddressCount) return _mValue_Ipv6AddressCount;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.Ipv6AddressCount' is not present");
            }
        }

        /// <summary>
        /// Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
        /// </summary>
        [PolicyResourceProperty("ipv6Addresses", "_mUnknown_Ipv6Addresses")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Ipv6Addresses;
        private bool _mUnknown_Ipv6Addresses;
        public List<string>? Ipv6Addresses
        {
            get
            {
                if (!_mUnknown_Ipv6Addresses) return _mValue_Ipv6Addresses;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.Ipv6Addresses' is not present");
            }
        }

        /// <summary>
        /// Key name of the Key Pair to use for the instance; which can be managed using the `aws.ec2.KeyPair` resource.
        /// </summary>
        [PolicyResourceProperty("keyName", "_mUnknown_KeyName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KeyName;
        private bool _mUnknown_KeyName;
        public string? KeyName
        {
            get
            {
                if (!_mUnknown_KeyName) return _mValue_KeyName;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.KeyName' is not present");
            }
        }

        /// <summary>
        /// A launch group is a group of spot instances that launch together and terminate together.
        /// If left empty instances are launched and terminated individually.
        /// </summary>
        [PolicyResourceProperty("launchGroup", "_mUnknown_LaunchGroup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LaunchGroup;
        private bool _mUnknown_LaunchGroup;
        public string? LaunchGroup
        {
            get
            {
                if (!_mUnknown_LaunchGroup) return _mValue_LaunchGroup;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.LaunchGroup' is not present");
            }
        }

        /// <summary>
        /// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
        /// </summary>
        [PolicyResourceProperty("launchTemplate", "_mUnknown_LaunchTemplate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.SpotInstanceRequestLaunchTemplate? _mValue_LaunchTemplate;
        private bool _mUnknown_LaunchTemplate;
        public Outputs.SpotInstanceRequestLaunchTemplate? LaunchTemplate
        {
            get
            {
                if (!_mUnknown_LaunchTemplate) return _mValue_LaunchTemplate;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.LaunchTemplate' is not present");
            }
        }

        /// <summary>
        /// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
        /// </summary>
        [PolicyResourceProperty("maintenanceOptions", "_mUnknown_MaintenanceOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.SpotInstanceRequestMaintenanceOptions? _mValue_MaintenanceOptions;
        private bool _mUnknown_MaintenanceOptions;
        public Outputs.SpotInstanceRequestMaintenanceOptions? MaintenanceOptions
        {
            get
            {
                if (!_mUnknown_MaintenanceOptions) return _mValue_MaintenanceOptions;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.MaintenanceOptions' is not present");
            }
        }

        /// <summary>
        /// Customize the metadata options of the instance. See Metadata Options below for more details.
        /// </summary>
        [PolicyResourceProperty("metadataOptions", "_mUnknown_MetadataOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.SpotInstanceRequestMetadataOptions? _mValue_MetadataOptions;
        private bool _mUnknown_MetadataOptions;
        public Outputs.SpotInstanceRequestMetadataOptions? MetadataOptions
        {
            get
            {
                if (!_mUnknown_MetadataOptions) return _mValue_MetadataOptions;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.MetadataOptions' is not present");
            }
        }

        /// <summary>
        /// If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
        /// </summary>
        [PolicyResourceProperty("monitoring", "_mUnknown_Monitoring")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Monitoring;
        private bool _mUnknown_Monitoring;
        public bool? Monitoring
        {
            get
            {
                if (!_mUnknown_Monitoring) return _mValue_Monitoring;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.Monitoring' is not present");
            }
        }

        /// <summary>
        /// Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
        /// </summary>
        [PolicyResourceProperty("networkInterfaces", "_mUnknown_NetworkInterfaces")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.SpotInstanceRequestNetworkInterface>? _mValue_NetworkInterfaces;
        private bool _mUnknown_NetworkInterfaces;
        public List<Outputs.SpotInstanceRequestNetworkInterface>? NetworkInterfaces
        {
            get
            {
                if (!_mUnknown_NetworkInterfaces) return _mValue_NetworkInterfaces;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.NetworkInterfaces' is not present");
            }
        }

        [PolicyResourceProperty("outpostArn", "_mUnknown_OutpostArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_OutpostArn;
        private bool _mUnknown_OutpostArn;
        public string? OutpostArn
        {
            get
            {
                if (!_mUnknown_OutpostArn) return _mValue_OutpostArn;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.OutpostArn' is not present");
            }
        }

        [PolicyResourceProperty("passwordData", "_mUnknown_PasswordData")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PasswordData;
        private bool _mUnknown_PasswordData;
        public string? PasswordData
        {
            get
            {
                if (!_mUnknown_PasswordData) return _mValue_PasswordData;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.PasswordData' is not present");
            }
        }

        /// <summary>
        /// Placement Group to start the instance in.
        /// </summary>
        [PolicyResourceProperty("placementGroup", "_mUnknown_PlacementGroup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PlacementGroup;
        private bool _mUnknown_PlacementGroup;
        public string? PlacementGroup
        {
            get
            {
                if (!_mUnknown_PlacementGroup) return _mValue_PlacementGroup;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.PlacementGroup' is not present");
            }
        }

        /// <summary>
        /// Number of the partition the instance is in. Valid only if the `aws.ec2.PlacementGroup` resource's `strategy` argument is set to `"partition"`.
        /// </summary>
        [PolicyResourceProperty("placementPartitionNumber", "_mUnknown_PlacementPartitionNumber")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_PlacementPartitionNumber;
        private bool _mUnknown_PlacementPartitionNumber;
        public int? PlacementPartitionNumber
        {
            get
            {
                if (!_mUnknown_PlacementPartitionNumber) return _mValue_PlacementPartitionNumber;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.PlacementPartitionNumber' is not present");
            }
        }

        [PolicyResourceProperty("primaryNetworkInterfaceId", "_mUnknown_PrimaryNetworkInterfaceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrimaryNetworkInterfaceId;
        private bool _mUnknown_PrimaryNetworkInterfaceId;
        public string? PrimaryNetworkInterfaceId
        {
            get
            {
                if (!_mUnknown_PrimaryNetworkInterfaceId) return _mValue_PrimaryNetworkInterfaceId;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.PrimaryNetworkInterfaceId' is not present");
            }
        }

        /// <summary>
        /// The private DNS name assigned to the instance. Can only be
        /// used inside the Amazon EC2, and only available if you've enabled DNS hostnames
        /// for your VPC
        /// </summary>
        [PolicyResourceProperty("privateDns", "_mUnknown_PrivateDns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrivateDns;
        private bool _mUnknown_PrivateDns;
        public string? PrivateDns
        {
            get
            {
                if (!_mUnknown_PrivateDns) return _mValue_PrivateDns;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.PrivateDns' is not present");
            }
        }

        /// <summary>
        /// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
        /// </summary>
        [PolicyResourceProperty("privateDnsNameOptions", "_mUnknown_PrivateDnsNameOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.SpotInstanceRequestPrivateDnsNameOptions? _mValue_PrivateDnsNameOptions;
        private bool _mUnknown_PrivateDnsNameOptions;
        public Outputs.SpotInstanceRequestPrivateDnsNameOptions? PrivateDnsNameOptions
        {
            get
            {
                if (!_mUnknown_PrivateDnsNameOptions) return _mValue_PrivateDnsNameOptions;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.PrivateDnsNameOptions' is not present");
            }
        }

        /// <summary>
        /// Private IP address to associate with the instance in a VPC.
        /// </summary>
        [PolicyResourceProperty("privateIp", "_mUnknown_PrivateIp")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrivateIp;
        private bool _mUnknown_PrivateIp;
        public string? PrivateIp
        {
            get
            {
                if (!_mUnknown_PrivateIp) return _mValue_PrivateIp;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.PrivateIp' is not present");
            }
        }

        /// <summary>
        /// The public DNS name assigned to the instance. For EC2-VPC, this
        /// is only available if you've enabled DNS hostnames for your VPC
        /// </summary>
        [PolicyResourceProperty("publicDns", "_mUnknown_PublicDns")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PublicDns;
        private bool _mUnknown_PublicDns;
        public string? PublicDns
        {
            get
            {
                if (!_mUnknown_PublicDns) return _mValue_PublicDns;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.PublicDns' is not present");
            }
        }

        /// <summary>
        /// The public IP address assigned to the instance, if applicable.
        /// </summary>
        [PolicyResourceProperty("publicIp", "_mUnknown_PublicIp")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PublicIp;
        private bool _mUnknown_PublicIp;
        public string? PublicIp
        {
            get
            {
                if (!_mUnknown_PublicIp) return _mValue_PublicIp;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.PublicIp' is not present");
            }
        }

        /// <summary>
        /// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
        /// </summary>
        [PolicyResourceProperty("rootBlockDevice", "_mUnknown_RootBlockDevice")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.SpotInstanceRequestRootBlockDevice? _mValue_RootBlockDevice;
        private bool _mUnknown_RootBlockDevice;
        public Outputs.SpotInstanceRequestRootBlockDevice? RootBlockDevice
        {
            get
            {
                if (!_mUnknown_RootBlockDevice) return _mValue_RootBlockDevice;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.RootBlockDevice' is not present");
            }
        }

        /// <summary>
        /// List of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a `network_interface` block. Refer to the [Elastic network interfaces documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI) to see the maximum number of private IP addresses allowed per instance type.
        /// </summary>
        [PolicyResourceProperty("secondaryPrivateIps", "_mUnknown_SecondaryPrivateIps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecondaryPrivateIps;
        private bool _mUnknown_SecondaryPrivateIps;
        public List<string>? SecondaryPrivateIps
        {
            get
            {
                if (!_mUnknown_SecondaryPrivateIps) return _mValue_SecondaryPrivateIps;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.SecondaryPrivateIps' is not present");
            }
        }

        /// <summary>
        /// List of security group names to associate with.
        /// 
        /// &gt; **NOTE:** If you are creating Instances in a VPC, use `vpc_security_group_ids` instead.
        /// </summary>
        [PolicyResourceProperty("securityGroups", "_mUnknown_SecurityGroups")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecurityGroups;
        private bool _mUnknown_SecurityGroups;
        public List<string>? SecurityGroups
        {
            get
            {
                if (!_mUnknown_SecurityGroups) return _mValue_SecurityGroups;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.SecurityGroups' is not present");
            }
        }

        /// <summary>
        /// Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
        /// </summary>
        [PolicyResourceProperty("sourceDestCheck", "_mUnknown_SourceDestCheck")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SourceDestCheck;
        private bool _mUnknown_SourceDestCheck;
        public bool? SourceDestCheck
        {
            get
            {
                if (!_mUnknown_SourceDestCheck) return _mValue_SourceDestCheck;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.SourceDestCheck' is not present");
            }
        }

        /// <summary>
        /// The current [bid
        /// status](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html)
        /// of the Spot Instance Request.
        /// </summary>
        [PolicyResourceProperty("spotBidStatus", "_mUnknown_SpotBidStatus")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SpotBidStatus;
        private bool _mUnknown_SpotBidStatus;
        public string? SpotBidStatus
        {
            get
            {
                if (!_mUnknown_SpotBidStatus) return _mValue_SpotBidStatus;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.SpotBidStatus' is not present");
            }
        }

        /// <summary>
        /// The Instance ID (if any) that is currently fulfilling
        /// the Spot Instance request.
        /// </summary>
        [PolicyResourceProperty("spotInstanceId", "_mUnknown_SpotInstanceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SpotInstanceId;
        private bool _mUnknown_SpotInstanceId;
        public string? SpotInstanceId
        {
            get
            {
                if (!_mUnknown_SpotInstanceId) return _mValue_SpotInstanceId;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.SpotInstanceId' is not present");
            }
        }

        /// <summary>
        /// The maximum price to request on the spot market.
        /// </summary>
        [PolicyResourceProperty("spotPrice", "_mUnknown_SpotPrice")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SpotPrice;
        private bool _mUnknown_SpotPrice;
        public string? SpotPrice
        {
            get
            {
                if (!_mUnknown_SpotPrice) return _mValue_SpotPrice;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.SpotPrice' is not present");
            }
        }

        /// <summary>
        /// The current [request
        /// state](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html#creating-spot-request-status)
        /// of the Spot Instance Request.
        /// </summary>
        [PolicyResourceProperty("spotRequestState", "_mUnknown_SpotRequestState")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SpotRequestState;
        private bool _mUnknown_SpotRequestState;
        public string? SpotRequestState
        {
            get
            {
                if (!_mUnknown_SpotRequestState) return _mValue_SpotRequestState;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.SpotRequestState' is not present");
            }
        }

        /// <summary>
        /// If set to `one-time`, after
        /// the instance is terminated, the spot request will be closed.
        /// </summary>
        [PolicyResourceProperty("spotType", "_mUnknown_SpotType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SpotType;
        private bool _mUnknown_SpotType;
        public string? SpotType
        {
            get
            {
                if (!_mUnknown_SpotType) return _mValue_SpotType;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.SpotType' is not present");
            }
        }

        /// <summary>
        /// VPC Subnet ID to launch in.
        /// </summary>
        [PolicyResourceProperty("subnetId", "_mUnknown_SubnetId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SubnetId;
        private bool _mUnknown_SubnetId;
        public string? SubnetId
        {
            get
            {
                if (!_mUnknown_SubnetId) return _mValue_SubnetId;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.SubnetId' is not present");
            }
        }

        /// <summary>
        /// Map of tags to assign to the resource. Note that these tags apply to the instance and not block storage devices. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of `dedicated` runs on single-tenant hardware. The `host` tenancy is not supported for the import-instance command. Valid values are `default`, `dedicated`, and `host`.
        /// </summary>
        [PolicyResourceProperty("tenancy", "_mUnknown_Tenancy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Tenancy;
        private bool _mUnknown_Tenancy;
        public string? Tenancy
        {
            get
            {
                if (!_mUnknown_Tenancy) return _mValue_Tenancy;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.Tenancy' is not present");
            }
        }

        /// <summary>
        /// User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `user_data_base64` instead. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `user_data_replace_on_change` is set then updates to this field will trigger a destroy and recreate of the EC2 instance.
        /// </summary>
        [PolicyResourceProperty("userData", "_mUnknown_UserData")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserData;
        private bool _mUnknown_UserData;
        public string? UserData
        {
            get
            {
                if (!_mUnknown_UserData) return _mValue_UserData;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.UserData' is not present");
            }
        }

        /// <summary>
        /// Can be used instead of `user_data` to pass base64-encoded binary data directly. Use this instead of `user_data` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `user_data_replace_on_change` is set then updates to this field will trigger a destroy and recreate of the EC2 instance.
        /// </summary>
        [PolicyResourceProperty("userDataBase64", "_mUnknown_UserDataBase64")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserDataBase64;
        private bool _mUnknown_UserDataBase64;
        public string? UserDataBase64
        {
            get
            {
                if (!_mUnknown_UserDataBase64) return _mValue_UserDataBase64;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.UserDataBase64' is not present");
            }
        }

        /// <summary>
        /// When used in combination with `user_data` or `user_data_base64` will trigger a destroy and recreate of the EC2 instance when set to `true`. Defaults to `false` if not set.
        /// </summary>
        [PolicyResourceProperty("userDataReplaceOnChange", "_mUnknown_UserDataReplaceOnChange")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UserDataReplaceOnChange;
        private bool _mUnknown_UserDataReplaceOnChange;
        public bool? UserDataReplaceOnChange
        {
            get
            {
                if (!_mUnknown_UserDataReplaceOnChange) return _mValue_UserDataReplaceOnChange;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.UserDataReplaceOnChange' is not present");
            }
        }

        /// <summary>
        /// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        /// </summary>
        [PolicyResourceProperty("validFrom", "_mUnknown_ValidFrom")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ValidFrom;
        private bool _mUnknown_ValidFrom;
        public string? ValidFrom
        {
            get
            {
                if (!_mUnknown_ValidFrom) return _mValue_ValidFrom;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.ValidFrom' is not present");
            }
        }

        /// <summary>
        /// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. The default end date is 7 days from the current date.
        /// </summary>
        [PolicyResourceProperty("validUntil", "_mUnknown_ValidUntil")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ValidUntil;
        private bool _mUnknown_ValidUntil;
        public string? ValidUntil
        {
            get
            {
                if (!_mUnknown_ValidUntil) return _mValue_ValidUntil;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.ValidUntil' is not present");
            }
        }

        /// <summary>
        /// Map of tags to assign, at instance-creation time, to root and EBS volumes.
        /// 
        /// &gt; **NOTE:** Do not use `volume_tags` if you plan to manage block device tags outside the `aws.ec2.Instance` configuration, such as using `tags` in an `aws.ebs.Volume` resource attached via `aws.ec2.VolumeAttachment`. Doing so will result in resource cycling and inconsistent behavior.
        /// </summary>
        [PolicyResourceProperty("volumeTags", "_mUnknown_VolumeTags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_VolumeTags;
        private bool _mUnknown_VolumeTags;
        public Dictionary<string, string>? VolumeTags
        {
            get
            {
                if (!_mUnknown_VolumeTags) return _mValue_VolumeTags;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.VolumeTags' is not present");
            }
        }

        /// <summary>
        /// List of security group IDs to associate with.
        /// </summary>
        [PolicyResourceProperty("vpcSecurityGroupIds", "_mUnknown_VpcSecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_VpcSecurityGroupIds;
        private bool _mUnknown_VpcSecurityGroupIds;
        public List<string>? VpcSecurityGroupIds
        {
            get
            {
                if (!_mUnknown_VpcSecurityGroupIds) return _mValue_VpcSecurityGroupIds;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.VpcSecurityGroupIds' is not present");
            }
        }

        /// <summary>
        /// If set, this provider will
        /// wait for the Spot Request to be fulfilled, and will throw an error if the
        /// timeout of 10m is reached.
        /// </summary>
        [PolicyResourceProperty("waitForFulfillment", "_mUnknown_WaitForFulfillment")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_WaitForFulfillment;
        private bool _mUnknown_WaitForFulfillment;
        public bool? WaitForFulfillment
        {
            get
            {
                if (!_mUnknown_WaitForFulfillment) return _mValue_WaitForFulfillment;
                throw new UndeferrableValueException("Value 'SpotInstanceRequest.WaitForFulfillment' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ec2/spotInstanceRequest:SpotInstanceRequest")]
    public sealed class SpotInstanceRequestArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// AMI to use for the instance. Required unless `launch_template` is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting `ami` will override the AMI specified in the Launch Template.
        /// </summary>
        [PolicyResourceProperty("ami", "_mUnknown_Ami")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ami;
        private bool _mUnknown_Ami;
        public string? Ami
        {
            get
            {
                if (!_mUnknown_Ami) return _mValue_Ami;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.Ami' is not present");
            }
        }

        /// <summary>
        /// Whether to associate a public IP address with an instance in a VPC.
        /// </summary>
        [PolicyResourceProperty("associatePublicIpAddress", "_mUnknown_AssociatePublicIpAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AssociatePublicIpAddress;
        private bool _mUnknown_AssociatePublicIpAddress;
        public bool? AssociatePublicIpAddress
        {
            get
            {
                if (!_mUnknown_AssociatePublicIpAddress) return _mValue_AssociatePublicIpAddress;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.AssociatePublicIpAddress' is not present");
            }
        }

        /// <summary>
        /// AZ to start the instance in.
        /// </summary>
        [PolicyResourceProperty("availabilityZone", "_mUnknown_AvailabilityZone")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZone;
        private bool _mUnknown_AvailabilityZone;
        public string? AvailabilityZone
        {
            get
            {
                if (!_mUnknown_AvailabilityZone) return _mValue_AvailabilityZone;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.AvailabilityZone' is not present");
            }
        }

        /// <summary>
        /// The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        /// The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
        /// Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
        /// </summary>
        [PolicyResourceProperty("blockDurationMinutes", "_mUnknown_BlockDurationMinutes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_BlockDurationMinutes;
        private bool _mUnknown_BlockDurationMinutes;
        public int? BlockDurationMinutes
        {
            get
            {
                if (!_mUnknown_BlockDurationMinutes) return _mValue_BlockDurationMinutes;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.BlockDurationMinutes' is not present");
            }
        }

        /// <summary>
        /// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
        /// 
        /// &gt; **NOTE:** Changing `cpu_core_count` and/or `cpu_threads_per_core` will cause the resource to be destroyed and re-created.
        /// </summary>
        [PolicyResourceProperty("capacityReservationSpecification", "_mUnknown_CapacityReservationSpecification")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.SpotInstanceRequestCapacityReservationSpecificationArgs? _mValue_CapacityReservationSpecification;
        private bool _mUnknown_CapacityReservationSpecification;
        public Inputs.SpotInstanceRequestCapacityReservationSpecificationArgs? CapacityReservationSpecification
        {
            get
            {
                if (!_mUnknown_CapacityReservationSpecification) return _mValue_CapacityReservationSpecification;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.CapacityReservationSpecification' is not present");
            }
        }

        /// <summary>
        /// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options [CPU Cores and Threads Per CPU Core Per Instance Type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html#cpu-options-supported-instances-values) - specifying this option for unsupported instance types will return an error from the EC2 API.
        /// </summary>
        [PolicyResourceProperty("cpuCoreCount", "_mUnknown_CpuCoreCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_CpuCoreCount;
        private bool _mUnknown_CpuCoreCount;
        public int? CpuCoreCount
        {
            get
            {
                if (!_mUnknown_CpuCoreCount) return _mValue_CpuCoreCount;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.CpuCoreCount' is not present");
            }
        }

        /// <summary>
        /// The CPU options for the instance. See CPU Options below for more details.
        /// </summary>
        [PolicyResourceProperty("cpuOptions", "_mUnknown_CpuOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.SpotInstanceRequestCpuOptionsArgs? _mValue_CpuOptions;
        private bool _mUnknown_CpuOptions;
        public Inputs.SpotInstanceRequestCpuOptionsArgs? CpuOptions
        {
            get
            {
                if (!_mUnknown_CpuOptions) return _mValue_CpuOptions;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.CpuOptions' is not present");
            }
        }

        /// <summary>
        /// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) for more information.
        /// </summary>
        [PolicyResourceProperty("cpuThreadsPerCore", "_mUnknown_CpuThreadsPerCore")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_CpuThreadsPerCore;
        private bool _mUnknown_CpuThreadsPerCore;
        public int? CpuThreadsPerCore
        {
            get
            {
                if (!_mUnknown_CpuThreadsPerCore) return _mValue_CpuThreadsPerCore;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.CpuThreadsPerCore' is not present");
            }
        }

        /// <summary>
        /// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. This provider will only perform drift detection of its value when present in a configuration. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
        /// </summary>
        [PolicyResourceProperty("creditSpecification", "_mUnknown_CreditSpecification")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.SpotInstanceRequestCreditSpecificationArgs? _mValue_CreditSpecification;
        private bool _mUnknown_CreditSpecification;
        public Inputs.SpotInstanceRequestCreditSpecificationArgs? CreditSpecification
        {
            get
            {
                if (!_mUnknown_CreditSpecification) return _mValue_CreditSpecification;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.CreditSpecification' is not present");
            }
        }

        /// <summary>
        /// If true, enables [EC2 Instance Stop Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).
        /// </summary>
        [PolicyResourceProperty("disableApiStop", "_mUnknown_DisableApiStop")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DisableApiStop;
        private bool _mUnknown_DisableApiStop;
        public bool? DisableApiStop
        {
            get
            {
                if (!_mUnknown_DisableApiStop) return _mValue_DisableApiStop;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.DisableApiStop' is not present");
            }
        }

        /// <summary>
        /// If true, enables [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination).
        /// </summary>
        [PolicyResourceProperty("disableApiTermination", "_mUnknown_DisableApiTermination")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DisableApiTermination;
        private bool _mUnknown_DisableApiTermination;
        public bool? DisableApiTermination
        {
            get
            {
                if (!_mUnknown_DisableApiTermination) return _mValue_DisableApiTermination;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.DisableApiTermination' is not present");
            }
        }

        /// <summary>
        /// One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
        /// </summary>
        [PolicyResourceProperty("ebsBlockDevices", "_mUnknown_EbsBlockDevices")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.SpotInstanceRequestEbsBlockDeviceArgs>? _mValue_EbsBlockDevices;
        private bool _mUnknown_EbsBlockDevices;
        public List<Inputs.SpotInstanceRequestEbsBlockDeviceArgs>? EbsBlockDevices
        {
            get
            {
                if (!_mUnknown_EbsBlockDevices) return _mValue_EbsBlockDevices;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.EbsBlockDevices' is not present");
            }
        }

        /// <summary>
        /// If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the [EBS Optimized section](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) of the AWS User Guide for more information.
        /// </summary>
        [PolicyResourceProperty("ebsOptimized", "_mUnknown_EbsOptimized")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EbsOptimized;
        private bool _mUnknown_EbsOptimized;
        public bool? EbsOptimized
        {
            get
            {
                if (!_mUnknown_EbsOptimized) return _mValue_EbsOptimized;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.EbsOptimized' is not present");
            }
        }

        /// <summary>
        /// Whether to assign a primary IPv6 Global Unicast Address (GUA) to the instance when launched in a dual-stack or IPv6-only subnet. A primary IPv6 address ensures a consistent IPv6 address for the instance and is automatically assigned by AWS to the ENI. Once enabled, the first IPv6 GUA becomes the primary IPv6 address and cannot be disabled. The primary IPv6 address remains until the instance is terminated or the ENI is detached. Disabling `enable_primary_ipv6` after it has been enabled forces recreation of the instance.
        /// </summary>
        [PolicyResourceProperty("enablePrimaryIpv6", "_mUnknown_EnablePrimaryIpv6")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnablePrimaryIpv6;
        private bool _mUnknown_EnablePrimaryIpv6;
        public bool? EnablePrimaryIpv6
        {
            get
            {
                if (!_mUnknown_EnablePrimaryIpv6) return _mValue_EnablePrimaryIpv6;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.EnablePrimaryIpv6' is not present");
            }
        }

        /// <summary>
        /// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
        /// </summary>
        [PolicyResourceProperty("enclaveOptions", "_mUnknown_EnclaveOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.SpotInstanceRequestEnclaveOptionsArgs? _mValue_EnclaveOptions;
        private bool _mUnknown_EnclaveOptions;
        public Inputs.SpotInstanceRequestEnclaveOptionsArgs? EnclaveOptions
        {
            get
            {
                if (!_mUnknown_EnclaveOptions) return _mValue_EnclaveOptions;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.EnclaveOptions' is not present");
            }
        }

        /// <summary>
        /// One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
        /// </summary>
        [PolicyResourceProperty("ephemeralBlockDevices", "_mUnknown_EphemeralBlockDevices")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.SpotInstanceRequestEphemeralBlockDeviceArgs>? _mValue_EphemeralBlockDevices;
        private bool _mUnknown_EphemeralBlockDevices;
        public List<Inputs.SpotInstanceRequestEphemeralBlockDeviceArgs>? EphemeralBlockDevices
        {
            get
            {
                if (!_mUnknown_EphemeralBlockDevices) return _mValue_EphemeralBlockDevices;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.EphemeralBlockDevices' is not present");
            }
        }

        /// <summary>
        /// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `password_data` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
        /// </summary>
        [PolicyResourceProperty("getPasswordData", "_mUnknown_GetPasswordData")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_GetPasswordData;
        private bool _mUnknown_GetPasswordData;
        public bool? GetPasswordData
        {
            get
            {
                if (!_mUnknown_GetPasswordData) return _mValue_GetPasswordData;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.GetPasswordData' is not present");
            }
        }

        /// <summary>
        /// If true, the launched EC2 instance will support hibernation.
        /// </summary>
        [PolicyResourceProperty("hibernation", "_mUnknown_Hibernation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Hibernation;
        private bool _mUnknown_Hibernation;
        public bool? Hibernation
        {
            get
            {
                if (!_mUnknown_Hibernation) return _mValue_Hibernation;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.Hibernation' is not present");
            }
        }

        /// <summary>
        /// ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
        /// </summary>
        [PolicyResourceProperty("hostId", "_mUnknown_HostId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HostId;
        private bool _mUnknown_HostId;
        public string? HostId
        {
            get
            {
                if (!_mUnknown_HostId) return _mValue_HostId;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.HostId' is not present");
            }
        }

        /// <summary>
        /// ARN of the host resource group in which to launch the instances. If you specify an ARN, omit the `tenancy` parameter or set it to `host`.
        /// </summary>
        [PolicyResourceProperty("hostResourceGroupArn", "_mUnknown_HostResourceGroupArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HostResourceGroupArn;
        private bool _mUnknown_HostResourceGroupArn;
        public string? HostResourceGroupArn
        {
            get
            {
                if (!_mUnknown_HostResourceGroupArn) return _mValue_HostResourceGroupArn;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.HostResourceGroupArn' is not present");
            }
        }

        /// <summary>
        /// IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the [EC2 documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions), notably `iam:PassRole`.
        /// </summary>
        [PolicyResourceProperty("iamInstanceProfile", "_mUnknown_IamInstanceProfile")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IamInstanceProfile;
        private bool _mUnknown_IamInstanceProfile;
        public string? IamInstanceProfile
        {
            get
            {
                if (!_mUnknown_IamInstanceProfile) return _mValue_IamInstanceProfile;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.IamInstanceProfile' is not present");
            }
        }

        /// <summary>
        /// Shutdown behavior for the instance. Amazon defaults this to `stop` for EBS-backed instances and `terminate` for instance-store instances. Cannot be set on instance-store instances. See [Shutdown Behavior](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior) for more information.
        /// </summary>
        [PolicyResourceProperty("instanceInitiatedShutdownBehavior", "_mUnknown_InstanceInitiatedShutdownBehavior")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceInitiatedShutdownBehavior;
        private bool _mUnknown_InstanceInitiatedShutdownBehavior;
        public string? InstanceInitiatedShutdownBehavior
        {
            get
            {
                if (!_mUnknown_InstanceInitiatedShutdownBehavior) return _mValue_InstanceInitiatedShutdownBehavior;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.InstanceInitiatedShutdownBehavior' is not present");
            }
        }

        /// <summary>
        /// Indicates Spot instance behavior when it is interrupted. Valid values are `terminate`, `stop`, or `hibernate`. Default value is `terminate`.
        /// </summary>
        [PolicyResourceProperty("instanceInterruptionBehavior", "_mUnknown_InstanceInterruptionBehavior")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceInterruptionBehavior;
        private bool _mUnknown_InstanceInterruptionBehavior;
        public string? InstanceInterruptionBehavior
        {
            get
            {
                if (!_mUnknown_InstanceInterruptionBehavior) return _mValue_InstanceInterruptionBehavior;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.InstanceInterruptionBehavior' is not present");
            }
        }

        /// <summary>
        /// Instance type to use for the instance. Required unless `launch_template` is specified and the Launch Template specifies an instance type. If an instance type is specified in the Launch Template, setting `instance_type` will override the instance type specified in the Launch Template. Updates to this field will trigger a stop/start of the EC2 instance.
        /// </summary>
        [PolicyResourceProperty("instanceType", "_mUnknown_InstanceType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceType;
        private bool _mUnknown_InstanceType;
        public string? InstanceType
        {
            get
            {
                if (!_mUnknown_InstanceType) return _mValue_InstanceType;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.InstanceType' is not present");
            }
        }

        /// <summary>
        /// Number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
        /// </summary>
        [PolicyResourceProperty("ipv6AddressCount", "_mUnknown_Ipv6AddressCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Ipv6AddressCount;
        private bool _mUnknown_Ipv6AddressCount;
        public int? Ipv6AddressCount
        {
            get
            {
                if (!_mUnknown_Ipv6AddressCount) return _mValue_Ipv6AddressCount;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.Ipv6AddressCount' is not present");
            }
        }

        /// <summary>
        /// Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
        /// </summary>
        [PolicyResourceProperty("ipv6Addresses", "_mUnknown_Ipv6Addresses")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Ipv6Addresses;
        private bool _mUnknown_Ipv6Addresses;
        public List<string>? Ipv6Addresses
        {
            get
            {
                if (!_mUnknown_Ipv6Addresses) return _mValue_Ipv6Addresses;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.Ipv6Addresses' is not present");
            }
        }

        /// <summary>
        /// Key name of the Key Pair to use for the instance; which can be managed using the `aws.ec2.KeyPair` resource.
        /// </summary>
        [PolicyResourceProperty("keyName", "_mUnknown_KeyName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KeyName;
        private bool _mUnknown_KeyName;
        public string? KeyName
        {
            get
            {
                if (!_mUnknown_KeyName) return _mValue_KeyName;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.KeyName' is not present");
            }
        }

        /// <summary>
        /// A launch group is a group of spot instances that launch together and terminate together.
        /// If left empty instances are launched and terminated individually.
        /// </summary>
        [PolicyResourceProperty("launchGroup", "_mUnknown_LaunchGroup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LaunchGroup;
        private bool _mUnknown_LaunchGroup;
        public string? LaunchGroup
        {
            get
            {
                if (!_mUnknown_LaunchGroup) return _mValue_LaunchGroup;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.LaunchGroup' is not present");
            }
        }

        /// <summary>
        /// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
        /// </summary>
        [PolicyResourceProperty("launchTemplate", "_mUnknown_LaunchTemplate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.SpotInstanceRequestLaunchTemplateArgs? _mValue_LaunchTemplate;
        private bool _mUnknown_LaunchTemplate;
        public Inputs.SpotInstanceRequestLaunchTemplateArgs? LaunchTemplate
        {
            get
            {
                if (!_mUnknown_LaunchTemplate) return _mValue_LaunchTemplate;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.LaunchTemplate' is not present");
            }
        }

        /// <summary>
        /// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
        /// </summary>
        [PolicyResourceProperty("maintenanceOptions", "_mUnknown_MaintenanceOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.SpotInstanceRequestMaintenanceOptionsArgs? _mValue_MaintenanceOptions;
        private bool _mUnknown_MaintenanceOptions;
        public Inputs.SpotInstanceRequestMaintenanceOptionsArgs? MaintenanceOptions
        {
            get
            {
                if (!_mUnknown_MaintenanceOptions) return _mValue_MaintenanceOptions;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.MaintenanceOptions' is not present");
            }
        }

        /// <summary>
        /// Customize the metadata options of the instance. See Metadata Options below for more details.
        /// </summary>
        [PolicyResourceProperty("metadataOptions", "_mUnknown_MetadataOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.SpotInstanceRequestMetadataOptionsArgs? _mValue_MetadataOptions;
        private bool _mUnknown_MetadataOptions;
        public Inputs.SpotInstanceRequestMetadataOptionsArgs? MetadataOptions
        {
            get
            {
                if (!_mUnknown_MetadataOptions) return _mValue_MetadataOptions;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.MetadataOptions' is not present");
            }
        }

        /// <summary>
        /// If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
        /// </summary>
        [PolicyResourceProperty("monitoring", "_mUnknown_Monitoring")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Monitoring;
        private bool _mUnknown_Monitoring;
        public bool? Monitoring
        {
            get
            {
                if (!_mUnknown_Monitoring) return _mValue_Monitoring;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.Monitoring' is not present");
            }
        }

        /// <summary>
        /// Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
        /// </summary>
        [PolicyResourceProperty("networkInterfaces", "_mUnknown_NetworkInterfaces")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.SpotInstanceRequestNetworkInterfaceArgs>? _mValue_NetworkInterfaces;
        private bool _mUnknown_NetworkInterfaces;
        public List<Inputs.SpotInstanceRequestNetworkInterfaceArgs>? NetworkInterfaces
        {
            get
            {
                if (!_mUnknown_NetworkInterfaces) return _mValue_NetworkInterfaces;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.NetworkInterfaces' is not present");
            }
        }

        /// <summary>
        /// Placement Group to start the instance in.
        /// </summary>
        [PolicyResourceProperty("placementGroup", "_mUnknown_PlacementGroup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PlacementGroup;
        private bool _mUnknown_PlacementGroup;
        public string? PlacementGroup
        {
            get
            {
                if (!_mUnknown_PlacementGroup) return _mValue_PlacementGroup;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.PlacementGroup' is not present");
            }
        }

        /// <summary>
        /// Number of the partition the instance is in. Valid only if the `aws.ec2.PlacementGroup` resource's `strategy` argument is set to `"partition"`.
        /// </summary>
        [PolicyResourceProperty("placementPartitionNumber", "_mUnknown_PlacementPartitionNumber")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_PlacementPartitionNumber;
        private bool _mUnknown_PlacementPartitionNumber;
        public int? PlacementPartitionNumber
        {
            get
            {
                if (!_mUnknown_PlacementPartitionNumber) return _mValue_PlacementPartitionNumber;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.PlacementPartitionNumber' is not present");
            }
        }

        /// <summary>
        /// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
        /// </summary>
        [PolicyResourceProperty("privateDnsNameOptions", "_mUnknown_PrivateDnsNameOptions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.SpotInstanceRequestPrivateDnsNameOptionsArgs? _mValue_PrivateDnsNameOptions;
        private bool _mUnknown_PrivateDnsNameOptions;
        public Inputs.SpotInstanceRequestPrivateDnsNameOptionsArgs? PrivateDnsNameOptions
        {
            get
            {
                if (!_mUnknown_PrivateDnsNameOptions) return _mValue_PrivateDnsNameOptions;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.PrivateDnsNameOptions' is not present");
            }
        }

        /// <summary>
        /// Private IP address to associate with the instance in a VPC.
        /// </summary>
        [PolicyResourceProperty("privateIp", "_mUnknown_PrivateIp")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrivateIp;
        private bool _mUnknown_PrivateIp;
        public string? PrivateIp
        {
            get
            {
                if (!_mUnknown_PrivateIp) return _mValue_PrivateIp;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.PrivateIp' is not present");
            }
        }

        /// <summary>
        /// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
        /// </summary>
        [PolicyResourceProperty("rootBlockDevice", "_mUnknown_RootBlockDevice")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.SpotInstanceRequestRootBlockDeviceArgs? _mValue_RootBlockDevice;
        private bool _mUnknown_RootBlockDevice;
        public Inputs.SpotInstanceRequestRootBlockDeviceArgs? RootBlockDevice
        {
            get
            {
                if (!_mUnknown_RootBlockDevice) return _mValue_RootBlockDevice;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.RootBlockDevice' is not present");
            }
        }

        /// <summary>
        /// List of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a `network_interface` block. Refer to the [Elastic network interfaces documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI) to see the maximum number of private IP addresses allowed per instance type.
        /// </summary>
        [PolicyResourceProperty("secondaryPrivateIps", "_mUnknown_SecondaryPrivateIps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecondaryPrivateIps;
        private bool _mUnknown_SecondaryPrivateIps;
        public List<string>? SecondaryPrivateIps
        {
            get
            {
                if (!_mUnknown_SecondaryPrivateIps) return _mValue_SecondaryPrivateIps;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.SecondaryPrivateIps' is not present");
            }
        }

        /// <summary>
        /// List of security group names to associate with.
        /// 
        /// &gt; **NOTE:** If you are creating Instances in a VPC, use `vpc_security_group_ids` instead.
        /// </summary>
        [PolicyResourceProperty("securityGroups", "_mUnknown_SecurityGroups")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecurityGroups;
        private bool _mUnknown_SecurityGroups;
        public List<string>? SecurityGroups
        {
            get
            {
                if (!_mUnknown_SecurityGroups) return _mValue_SecurityGroups;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.SecurityGroups' is not present");
            }
        }

        /// <summary>
        /// Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
        /// </summary>
        [PolicyResourceProperty("sourceDestCheck", "_mUnknown_SourceDestCheck")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SourceDestCheck;
        private bool _mUnknown_SourceDestCheck;
        public bool? SourceDestCheck
        {
            get
            {
                if (!_mUnknown_SourceDestCheck) return _mValue_SourceDestCheck;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.SourceDestCheck' is not present");
            }
        }

        /// <summary>
        /// The maximum price to request on the spot market.
        /// </summary>
        [PolicyResourceProperty("spotPrice", "_mUnknown_SpotPrice")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SpotPrice;
        private bool _mUnknown_SpotPrice;
        public string? SpotPrice
        {
            get
            {
                if (!_mUnknown_SpotPrice) return _mValue_SpotPrice;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.SpotPrice' is not present");
            }
        }

        /// <summary>
        /// If set to `one-time`, after
        /// the instance is terminated, the spot request will be closed.
        /// </summary>
        [PolicyResourceProperty("spotType", "_mUnknown_SpotType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SpotType;
        private bool _mUnknown_SpotType;
        public string? SpotType
        {
            get
            {
                if (!_mUnknown_SpotType) return _mValue_SpotType;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.SpotType' is not present");
            }
        }

        /// <summary>
        /// VPC Subnet ID to launch in.
        /// </summary>
        [PolicyResourceProperty("subnetId", "_mUnknown_SubnetId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SubnetId;
        private bool _mUnknown_SubnetId;
        public string? SubnetId
        {
            get
            {
                if (!_mUnknown_SubnetId) return _mValue_SubnetId;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.SubnetId' is not present");
            }
        }

        /// <summary>
        /// Map of tags to assign to the resource. Note that these tags apply to the instance and not block storage devices. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of `dedicated` runs on single-tenant hardware. The `host` tenancy is not supported for the import-instance command. Valid values are `default`, `dedicated`, and `host`.
        /// </summary>
        [PolicyResourceProperty("tenancy", "_mUnknown_Tenancy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Tenancy;
        private bool _mUnknown_Tenancy;
        public string? Tenancy
        {
            get
            {
                if (!_mUnknown_Tenancy) return _mValue_Tenancy;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.Tenancy' is not present");
            }
        }

        /// <summary>
        /// User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `user_data_base64` instead. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `user_data_replace_on_change` is set then updates to this field will trigger a destroy and recreate of the EC2 instance.
        /// </summary>
        [PolicyResourceProperty("userData", "_mUnknown_UserData")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserData;
        private bool _mUnknown_UserData;
        public string? UserData
        {
            get
            {
                if (!_mUnknown_UserData) return _mValue_UserData;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.UserData' is not present");
            }
        }

        /// <summary>
        /// Can be used instead of `user_data` to pass base64-encoded binary data directly. Use this instead of `user_data` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `user_data_replace_on_change` is set then updates to this field will trigger a destroy and recreate of the EC2 instance.
        /// </summary>
        [PolicyResourceProperty("userDataBase64", "_mUnknown_UserDataBase64")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserDataBase64;
        private bool _mUnknown_UserDataBase64;
        public string? UserDataBase64
        {
            get
            {
                if (!_mUnknown_UserDataBase64) return _mValue_UserDataBase64;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.UserDataBase64' is not present");
            }
        }

        /// <summary>
        /// When used in combination with `user_data` or `user_data_base64` will trigger a destroy and recreate of the EC2 instance when set to `true`. Defaults to `false` if not set.
        /// </summary>
        [PolicyResourceProperty("userDataReplaceOnChange", "_mUnknown_UserDataReplaceOnChange")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UserDataReplaceOnChange;
        private bool _mUnknown_UserDataReplaceOnChange;
        public bool? UserDataReplaceOnChange
        {
            get
            {
                if (!_mUnknown_UserDataReplaceOnChange) return _mValue_UserDataReplaceOnChange;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.UserDataReplaceOnChange' is not present");
            }
        }

        /// <summary>
        /// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        /// </summary>
        [PolicyResourceProperty("validFrom", "_mUnknown_ValidFrom")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ValidFrom;
        private bool _mUnknown_ValidFrom;
        public string? ValidFrom
        {
            get
            {
                if (!_mUnknown_ValidFrom) return _mValue_ValidFrom;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.ValidFrom' is not present");
            }
        }

        /// <summary>
        /// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. The default end date is 7 days from the current date.
        /// </summary>
        [PolicyResourceProperty("validUntil", "_mUnknown_ValidUntil")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ValidUntil;
        private bool _mUnknown_ValidUntil;
        public string? ValidUntil
        {
            get
            {
                if (!_mUnknown_ValidUntil) return _mValue_ValidUntil;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.ValidUntil' is not present");
            }
        }

        /// <summary>
        /// Map of tags to assign, at instance-creation time, to root and EBS volumes.
        /// 
        /// &gt; **NOTE:** Do not use `volume_tags` if you plan to manage block device tags outside the `aws.ec2.Instance` configuration, such as using `tags` in an `aws.ebs.Volume` resource attached via `aws.ec2.VolumeAttachment`. Doing so will result in resource cycling and inconsistent behavior.
        /// </summary>
        [PolicyResourceProperty("volumeTags", "_mUnknown_VolumeTags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_VolumeTags;
        private bool _mUnknown_VolumeTags;
        public Dictionary<string, string>? VolumeTags
        {
            get
            {
                if (!_mUnknown_VolumeTags) return _mValue_VolumeTags;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.VolumeTags' is not present");
            }
        }

        /// <summary>
        /// List of security group IDs to associate with.
        /// </summary>
        [PolicyResourceProperty("vpcSecurityGroupIds", "_mUnknown_VpcSecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_VpcSecurityGroupIds;
        private bool _mUnknown_VpcSecurityGroupIds;
        public List<string>? VpcSecurityGroupIds
        {
            get
            {
                if (!_mUnknown_VpcSecurityGroupIds) return _mValue_VpcSecurityGroupIds;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.VpcSecurityGroupIds' is not present");
            }
        }

        /// <summary>
        /// If set, this provider will
        /// wait for the Spot Request to be fulfilled, and will throw an error if the
        /// timeout of 10m is reached.
        /// </summary>
        [PolicyResourceProperty("waitForFulfillment", "_mUnknown_WaitForFulfillment")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_WaitForFulfillment;
        private bool _mUnknown_WaitForFulfillment;
        public bool? WaitForFulfillment
        {
            get
            {
                if (!_mUnknown_WaitForFulfillment) return _mValue_WaitForFulfillment;
                throw new UndeferrableValueException("Value 'SpotInstanceRequestArgs.WaitForFulfillment' is not present");
            }
        }
    }
}
