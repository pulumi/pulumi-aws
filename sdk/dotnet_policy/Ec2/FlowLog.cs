// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2
{
    [PolicyResourceType("aws:ec2/flowLog:FlowLog")]
    public sealed class FlowLog : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The ARN of the Flow Log.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
        /// </summary>
        [Input("deliverCrossAccountRole")]
        public string? DeliverCrossAccountRole;

        /// <summary>
        /// Describes the destination options for a flow log. More details below.
        /// </summary>
        [Input("destinationOptions")]
        public FlowLogDestinationOptions? DestinationOptions;

        /// <summary>
        /// Elastic Network Interface ID to attach to
        /// </summary>
        [Input("eniId")]
        public string? EniId;

        /// <summary>
        /// The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group
        /// </summary>
        [Input("iamRoleArn")]
        public string? IamRoleArn;

        /// <summary>
        /// The ARN of the logging destination. Either `log_destination` or `log_group_name` must be set.
        /// </summary>
        [Input("logDestination")]
        public string? LogDestination;

        /// <summary>
        /// The type of the logging destination. Valid values: `cloud-watch-logs`, `s3`, `kinesis-data-firehose`. Default: `cloud-watch-logs`.
        /// </summary>
        [Input("logDestinationType")]
        public string? LogDestinationType;

        /// <summary>
        /// The fields to include in the flow log record. Accepted format example: `"$${interface-id} $${srcaddr} $${dstaddr} $${srcport} $${dstport}"`.
        /// </summary>
        [Input("logFormat")]
        public string? LogFormat;

        /// <summary>
        /// **Deprecated:** Use `log_destination` instead. The name of the CloudWatch log group. Either `log_group_name` or `log_destination` must be set.
        /// </summary>
        [Input("logGroupName")]
        public string? LogGroupName;

        /// <summary>
        /// The maximum interval of time
        /// during which a flow of packets is captured and aggregated into a flow
        /// log record. Valid Values: `60` seconds (1 minute) or `600` seconds (10
        /// minutes). Default: `600`. When `transit_gateway_id` or `transit_gateway_attachment_id` is specified, `max_aggregation_interval` *must* be 60 seconds (1 minute).
        /// </summary>
        [Input("maxAggregationInterval")]
        public int? MaxAggregationInterval;

        /// <summary>
        /// Subnet ID to attach to
        /// </summary>
        [Input("subnetId")]
        public string? SubnetId;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// The type of traffic to capture. Valid values: `ACCEPT`,`REJECT`, `ALL`.
        /// </summary>
        [Input("trafficType")]
        public string? TrafficType;

        /// <summary>
        /// Transit Gateway Attachment ID to attach to
        /// </summary>
        [Input("transitGatewayAttachmentId")]
        public string? TransitGatewayAttachmentId;

        /// <summary>
        /// Transit Gateway ID to attach to
        /// </summary>
        [Input("transitGatewayId")]
        public string? TransitGatewayId;

        /// <summary>
        /// VPC ID to attach to
        /// </summary>
        [Input("vpcId")]
        public string? VpcId;
    }
}
