// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2TransitGateway
{
    [PolicyResourceType("aws:ec2transitgateway/route:Route")]
    public sealed class Route : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Indicates whether to drop traffic that matches this route (default to `false`).
        /// </summary>
        [PolicyResourceProperty("blackhole", "_mUnknown_Blackhole")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Blackhole;
        private bool _mUnknown_Blackhole;
        public bool? Blackhole
        {
            get
            {
                if (!_mUnknown_Blackhole) return _mValue_Blackhole;
                throw new UndeferrableValueException("Value 'Route.Blackhole' is not present");
            }
        }

        /// <summary>
        /// IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
        /// </summary>
        [PolicyResourceProperty("destinationCidrBlock", "_mUnknown_DestinationCidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DestinationCidrBlock;
        private bool _mUnknown_DestinationCidrBlock;
        public string? DestinationCidrBlock
        {
            get
            {
                if (!_mUnknown_DestinationCidrBlock) return _mValue_DestinationCidrBlock;
                throw new UndeferrableValueException("Value 'Route.DestinationCidrBlock' is not present");
            }
        }

        /// <summary>
        /// Identifier of EC2 Transit Gateway Attachment (required if `blackhole` is set to false).
        /// </summary>
        [PolicyResourceProperty("transitGatewayAttachmentId", "_mUnknown_TransitGatewayAttachmentId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayAttachmentId;
        private bool _mUnknown_TransitGatewayAttachmentId;
        public string? TransitGatewayAttachmentId
        {
            get
            {
                if (!_mUnknown_TransitGatewayAttachmentId) return _mValue_TransitGatewayAttachmentId;
                throw new UndeferrableValueException("Value 'Route.TransitGatewayAttachmentId' is not present");
            }
        }

        /// <summary>
        /// Identifier of EC2 Transit Gateway Route Table.
        /// </summary>
        [PolicyResourceProperty("transitGatewayRouteTableId", "_mUnknown_TransitGatewayRouteTableId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayRouteTableId;
        private bool _mUnknown_TransitGatewayRouteTableId;
        public string? TransitGatewayRouteTableId
        {
            get
            {
                if (!_mUnknown_TransitGatewayRouteTableId) return _mValue_TransitGatewayRouteTableId;
                throw new UndeferrableValueException("Value 'Route.TransitGatewayRouteTableId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ec2transitgateway/route:Route")]
    public sealed class RouteArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Indicates whether to drop traffic that matches this route (default to `false`).
        /// </summary>
        [PolicyResourceProperty("blackhole", "_mUnknown_Blackhole")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Blackhole;
        private bool _mUnknown_Blackhole;
        public bool? Blackhole
        {
            get
            {
                if (!_mUnknown_Blackhole) return _mValue_Blackhole;
                throw new UndeferrableValueException("Value 'RouteArgs.Blackhole' is not present");
            }
        }

        /// <summary>
        /// IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
        /// </summary>
        [PolicyResourceProperty("destinationCidrBlock", "_mUnknown_DestinationCidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DestinationCidrBlock;
        private bool _mUnknown_DestinationCidrBlock;
        public string? DestinationCidrBlock
        {
            get
            {
                if (!_mUnknown_DestinationCidrBlock) return _mValue_DestinationCidrBlock;
                throw new UndeferrableValueException("Value 'RouteArgs.DestinationCidrBlock' is not present");
            }
        }

        /// <summary>
        /// Identifier of EC2 Transit Gateway Attachment (required if `blackhole` is set to false).
        /// </summary>
        [PolicyResourceProperty("transitGatewayAttachmentId", "_mUnknown_TransitGatewayAttachmentId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayAttachmentId;
        private bool _mUnknown_TransitGatewayAttachmentId;
        public string? TransitGatewayAttachmentId
        {
            get
            {
                if (!_mUnknown_TransitGatewayAttachmentId) return _mValue_TransitGatewayAttachmentId;
                throw new UndeferrableValueException("Value 'RouteArgs.TransitGatewayAttachmentId' is not present");
            }
        }

        /// <summary>
        /// Identifier of EC2 Transit Gateway Route Table.
        /// </summary>
        [PolicyResourceProperty("transitGatewayRouteTableId", "_mUnknown_TransitGatewayRouteTableId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayRouteTableId;
        private bool _mUnknown_TransitGatewayRouteTableId;
        public string? TransitGatewayRouteTableId
        {
            get
            {
                if (!_mUnknown_TransitGatewayRouteTableId) return _mValue_TransitGatewayRouteTableId;
                throw new UndeferrableValueException("Value 'RouteArgs.TransitGatewayRouteTableId' is not present");
            }
        }
    }
}
