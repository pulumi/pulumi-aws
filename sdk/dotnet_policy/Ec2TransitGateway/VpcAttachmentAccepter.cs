// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2TransitGateway
{
    [PolicyResourceType("aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter")]
    public sealed class VpcAttachmentAccepter : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Whether Appliance Mode support is enabled. Valid values: `disable`, `enable`.
        /// </summary>
        [PolicyResourceProperty("applianceModeSupport", "_mUnknown_ApplianceModeSupport")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ApplianceModeSupport;
        private bool _mUnknown_ApplianceModeSupport;
        public string? ApplianceModeSupport
        {
            get
            {
                if (!_mUnknown_ApplianceModeSupport) return _mValue_ApplianceModeSupport;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.ApplianceModeSupport' is not present");
            }
        }

        /// <summary>
        /// Whether DNS support is enabled. Valid values: `disable`, `enable`.
        /// </summary>
        [PolicyResourceProperty("dnsSupport", "_mUnknown_DnsSupport")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DnsSupport;
        private bool _mUnknown_DnsSupport;
        public string? DnsSupport
        {
            get
            {
                if (!_mUnknown_DnsSupport) return _mValue_DnsSupport;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.DnsSupport' is not present");
            }
        }

        /// <summary>
        /// Whether IPv6 support is enabled. Valid values: `disable`, `enable`.
        /// </summary>
        [PolicyResourceProperty("ipv6Support", "_mUnknown_Ipv6Support")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv6Support;
        private bool _mUnknown_Ipv6Support;
        public string? Ipv6Support
        {
            get
            {
                if (!_mUnknown_Ipv6Support) return _mValue_Ipv6Support;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.Ipv6Support' is not present");
            }
        }

        /// <summary>
        /// Whether Security Group Referencing Support is enabled. Valid values: `disable`, `enable`.
        /// </summary>
        [PolicyResourceProperty("securityGroupReferencingSupport", "_mUnknown_SecurityGroupReferencingSupport")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityGroupReferencingSupport;
        private bool _mUnknown_SecurityGroupReferencingSupport;
        public string? SecurityGroupReferencingSupport
        {
            get
            {
                if (!_mUnknown_SecurityGroupReferencingSupport) return _mValue_SecurityGroupReferencingSupport;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.SecurityGroupReferencingSupport' is not present");
            }
        }

        /// <summary>
        /// Identifiers of EC2 Subnets.
        /// </summary>
        [PolicyResourceProperty("subnetIds", "_mUnknown_SubnetIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SubnetIds;
        private bool _mUnknown_SubnetIds;
        public List<string>? SubnetIds
        {
            get
            {
                if (!_mUnknown_SubnetIds) return _mValue_SubnetIds;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.SubnetIds' is not present");
            }
        }

        /// <summary>
        /// Key-value tags for the EC2 Transit Gateway VPC Attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.TagsAll' is not present");
            }
        }

        /// <summary>
        /// The ID of the EC2 Transit Gateway Attachment to manage.
        /// </summary>
        [PolicyResourceProperty("transitGatewayAttachmentId", "_mUnknown_TransitGatewayAttachmentId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayAttachmentId;
        private bool _mUnknown_TransitGatewayAttachmentId;
        public string? TransitGatewayAttachmentId
        {
            get
            {
                if (!_mUnknown_TransitGatewayAttachmentId) return _mValue_TransitGatewayAttachmentId;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.TransitGatewayAttachmentId' is not present");
            }
        }

        /// <summary>
        /// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
        /// </summary>
        [PolicyResourceProperty("transitGatewayDefaultRouteTableAssociation", "_mUnknown_TransitGatewayDefaultRouteTableAssociation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_TransitGatewayDefaultRouteTableAssociation;
        private bool _mUnknown_TransitGatewayDefaultRouteTableAssociation;
        public bool? TransitGatewayDefaultRouteTableAssociation
        {
            get
            {
                if (!_mUnknown_TransitGatewayDefaultRouteTableAssociation) return _mValue_TransitGatewayDefaultRouteTableAssociation;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.TransitGatewayDefaultRouteTableAssociation' is not present");
            }
        }

        /// <summary>
        /// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
        /// </summary>
        [PolicyResourceProperty("transitGatewayDefaultRouteTablePropagation", "_mUnknown_TransitGatewayDefaultRouteTablePropagation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_TransitGatewayDefaultRouteTablePropagation;
        private bool _mUnknown_TransitGatewayDefaultRouteTablePropagation;
        public bool? TransitGatewayDefaultRouteTablePropagation
        {
            get
            {
                if (!_mUnknown_TransitGatewayDefaultRouteTablePropagation) return _mValue_TransitGatewayDefaultRouteTablePropagation;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.TransitGatewayDefaultRouteTablePropagation' is not present");
            }
        }

        /// <summary>
        /// Identifier of EC2 Transit Gateway.
        /// </summary>
        [PolicyResourceProperty("transitGatewayId", "_mUnknown_TransitGatewayId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayId;
        private bool _mUnknown_TransitGatewayId;
        public string? TransitGatewayId
        {
            get
            {
                if (!_mUnknown_TransitGatewayId) return _mValue_TransitGatewayId;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.TransitGatewayId' is not present");
            }
        }

        /// <summary>
        /// Identifier of EC2 VPC.
        /// </summary>
        [PolicyResourceProperty("vpcId", "_mUnknown_VpcId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VpcId;
        private bool _mUnknown_VpcId;
        public string? VpcId
        {
            get
            {
                if (!_mUnknown_VpcId) return _mValue_VpcId;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.VpcId' is not present");
            }
        }

        /// <summary>
        /// Identifier of the AWS account that owns the EC2 VPC.
        /// </summary>
        [PolicyResourceProperty("vpcOwnerId", "_mUnknown_VpcOwnerId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VpcOwnerId;
        private bool _mUnknown_VpcOwnerId;
        public string? VpcOwnerId
        {
            get
            {
                if (!_mUnknown_VpcOwnerId) return _mValue_VpcOwnerId;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepter.VpcOwnerId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter")]
    public sealed class VpcAttachmentAccepterArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Key-value tags for the EC2 Transit Gateway VPC Attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepterArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// The ID of the EC2 Transit Gateway Attachment to manage.
        /// </summary>
        [PolicyResourceProperty("transitGatewayAttachmentId", "_mUnknown_TransitGatewayAttachmentId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayAttachmentId;
        private bool _mUnknown_TransitGatewayAttachmentId;
        public string? TransitGatewayAttachmentId
        {
            get
            {
                if (!_mUnknown_TransitGatewayAttachmentId) return _mValue_TransitGatewayAttachmentId;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepterArgs.TransitGatewayAttachmentId' is not present");
            }
        }

        /// <summary>
        /// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
        /// </summary>
        [PolicyResourceProperty("transitGatewayDefaultRouteTableAssociation", "_mUnknown_TransitGatewayDefaultRouteTableAssociation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_TransitGatewayDefaultRouteTableAssociation;
        private bool _mUnknown_TransitGatewayDefaultRouteTableAssociation;
        public bool? TransitGatewayDefaultRouteTableAssociation
        {
            get
            {
                if (!_mUnknown_TransitGatewayDefaultRouteTableAssociation) return _mValue_TransitGatewayDefaultRouteTableAssociation;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepterArgs.TransitGatewayDefaultRouteTableAssociation' is not present");
            }
        }

        /// <summary>
        /// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
        /// </summary>
        [PolicyResourceProperty("transitGatewayDefaultRouteTablePropagation", "_mUnknown_TransitGatewayDefaultRouteTablePropagation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_TransitGatewayDefaultRouteTablePropagation;
        private bool _mUnknown_TransitGatewayDefaultRouteTablePropagation;
        public bool? TransitGatewayDefaultRouteTablePropagation
        {
            get
            {
                if (!_mUnknown_TransitGatewayDefaultRouteTablePropagation) return _mValue_TransitGatewayDefaultRouteTablePropagation;
                throw new UndeferrableValueException("Value 'VpcAttachmentAccepterArgs.TransitGatewayDefaultRouteTablePropagation' is not present");
            }
        }
    }
}
