// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2TransitGateway
{
    [PolicyResourceType("aws:ec2transitgateway/multicastDomain:MulticastDomain")]
    public sealed class MulticastDomain : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// EC2 Transit Gateway Multicast Domain Amazon Resource Name (ARN).
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'MulticastDomain.Arn' is not present");
            }
        }

        /// <summary>
        /// Whether to automatically accept cross-account subnet associations that are associated with the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
        /// </summary>
        [PolicyResourceProperty("autoAcceptSharedAssociations", "_mUnknown_AutoAcceptSharedAssociations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AutoAcceptSharedAssociations;
        private bool _mUnknown_AutoAcceptSharedAssociations;
        public string? AutoAcceptSharedAssociations
        {
            get
            {
                if (!_mUnknown_AutoAcceptSharedAssociations) return _mValue_AutoAcceptSharedAssociations;
                throw new UndeferrableValueException("Value 'MulticastDomain.AutoAcceptSharedAssociations' is not present");
            }
        }

        /// <summary>
        /// Whether to enable Internet Group Management Protocol (IGMP) version 2 for the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
        /// </summary>
        [PolicyResourceProperty("igmpv2Support", "_mUnknown_Igmpv2Support")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Igmpv2Support;
        private bool _mUnknown_Igmpv2Support;
        public string? Igmpv2Support
        {
            get
            {
                if (!_mUnknown_Igmpv2Support) return _mValue_Igmpv2Support;
                throw new UndeferrableValueException("Value 'MulticastDomain.Igmpv2Support' is not present");
            }
        }

        /// <summary>
        /// Identifier of the AWS account that owns the EC2 Transit Gateway Multicast Domain.
        /// </summary>
        [PolicyResourceProperty("ownerId", "_mUnknown_OwnerId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_OwnerId;
        private bool _mUnknown_OwnerId;
        public string? OwnerId
        {
            get
            {
                if (!_mUnknown_OwnerId) return _mValue_OwnerId;
                throw new UndeferrableValueException("Value 'MulticastDomain.OwnerId' is not present");
            }
        }

        /// <summary>
        /// Whether to enable support for statically configuring multicast group sources for the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
        /// </summary>
        [PolicyResourceProperty("staticSourcesSupport", "_mUnknown_StaticSourcesSupport")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StaticSourcesSupport;
        private bool _mUnknown_StaticSourcesSupport;
        public string? StaticSourcesSupport
        {
            get
            {
                if (!_mUnknown_StaticSourcesSupport) return _mValue_StaticSourcesSupport;
                throw new UndeferrableValueException("Value 'MulticastDomain.StaticSourcesSupport' is not present");
            }
        }

        /// <summary>
        /// Key-value tags for the EC2 Transit Gateway Multicast Domain. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'MulticastDomain.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'MulticastDomain.TagsAll' is not present");
            }
        }

        /// <summary>
        /// EC2 Transit Gateway identifier. The EC2 Transit Gateway must have `multicast_support` enabled.
        /// </summary>
        [PolicyResourceProperty("transitGatewayId", "_mUnknown_TransitGatewayId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayId;
        private bool _mUnknown_TransitGatewayId;
        public string? TransitGatewayId
        {
            get
            {
                if (!_mUnknown_TransitGatewayId) return _mValue_TransitGatewayId;
                throw new UndeferrableValueException("Value 'MulticastDomain.TransitGatewayId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ec2transitgateway/multicastDomain:MulticastDomain")]
    public sealed class MulticastDomainArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Whether to automatically accept cross-account subnet associations that are associated with the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
        /// </summary>
        [PolicyResourceProperty("autoAcceptSharedAssociations", "_mUnknown_AutoAcceptSharedAssociations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AutoAcceptSharedAssociations;
        private bool _mUnknown_AutoAcceptSharedAssociations;
        public string? AutoAcceptSharedAssociations
        {
            get
            {
                if (!_mUnknown_AutoAcceptSharedAssociations) return _mValue_AutoAcceptSharedAssociations;
                throw new UndeferrableValueException("Value 'MulticastDomainArgs.AutoAcceptSharedAssociations' is not present");
            }
        }

        /// <summary>
        /// Whether to enable Internet Group Management Protocol (IGMP) version 2 for the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
        /// </summary>
        [PolicyResourceProperty("igmpv2Support", "_mUnknown_Igmpv2Support")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Igmpv2Support;
        private bool _mUnknown_Igmpv2Support;
        public string? Igmpv2Support
        {
            get
            {
                if (!_mUnknown_Igmpv2Support) return _mValue_Igmpv2Support;
                throw new UndeferrableValueException("Value 'MulticastDomainArgs.Igmpv2Support' is not present");
            }
        }

        /// <summary>
        /// Whether to enable support for statically configuring multicast group sources for the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
        /// </summary>
        [PolicyResourceProperty("staticSourcesSupport", "_mUnknown_StaticSourcesSupport")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StaticSourcesSupport;
        private bool _mUnknown_StaticSourcesSupport;
        public string? StaticSourcesSupport
        {
            get
            {
                if (!_mUnknown_StaticSourcesSupport) return _mValue_StaticSourcesSupport;
                throw new UndeferrableValueException("Value 'MulticastDomainArgs.StaticSourcesSupport' is not present");
            }
        }

        /// <summary>
        /// Key-value tags for the EC2 Transit Gateway Multicast Domain. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'MulticastDomainArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// EC2 Transit Gateway identifier. The EC2 Transit Gateway must have `multicast_support` enabled.
        /// </summary>
        [PolicyResourceProperty("transitGatewayId", "_mUnknown_TransitGatewayId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayId;
        private bool _mUnknown_TransitGatewayId;
        public string? TransitGatewayId
        {
            get
            {
                if (!_mUnknown_TransitGatewayId) return _mValue_TransitGatewayId;
                throw new UndeferrableValueException("Value 'MulticastDomainArgs.TransitGatewayId' is not present");
            }
        }
    }
}
