// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ec2TransitGateway
{
    [PolicyResourceType("aws:ec2transitgateway/peeringAttachmentAccepter:PeeringAttachmentAccepter")]
    public sealed class PeeringAttachmentAccepter : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Identifier of the AWS account that owns the EC2 TGW peering.
        /// </summary>
        [PolicyResourceProperty("peerAccountId", "_mUnknown_PeerAccountId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PeerAccountId;
        private bool _mUnknown_PeerAccountId;
        public string? PeerAccountId
        {
            get
            {
                if (!_mUnknown_PeerAccountId) return _mValue_PeerAccountId;
                throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.PeerAccountId' is not present");
            }
        }

        [PolicyResourceProperty("peerRegion", "_mUnknown_PeerRegion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PeerRegion;
        private bool _mUnknown_PeerRegion;
        public string? PeerRegion
        {
            get
            {
                if (!_mUnknown_PeerRegion) return _mValue_PeerRegion;
                throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.PeerRegion' is not present");
            }
        }

        /// <summary>
        /// Identifier of EC2 Transit Gateway to peer with.
        /// </summary>
        [PolicyResourceProperty("peerTransitGatewayId", "_mUnknown_PeerTransitGatewayId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PeerTransitGatewayId;
        private bool _mUnknown_PeerTransitGatewayId;
        public string? PeerTransitGatewayId
        {
            get
            {
                if (!_mUnknown_PeerTransitGatewayId) return _mValue_PeerTransitGatewayId;
                throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.PeerTransitGatewayId' is not present");
            }
        }

        /// <summary>
        /// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.TagsAll' is not present");
            }
        }

        /// <summary>
        /// The ID of the EC2 Transit Gateway Peering Attachment to manage.
        /// </summary>
        [PolicyResourceProperty("transitGatewayAttachmentId", "_mUnknown_TransitGatewayAttachmentId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayAttachmentId;
        private bool _mUnknown_TransitGatewayAttachmentId;
        public string? TransitGatewayAttachmentId
        {
            get
            {
                if (!_mUnknown_TransitGatewayAttachmentId) return _mValue_TransitGatewayAttachmentId;
                throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.TransitGatewayAttachmentId' is not present");
            }
        }

        /// <summary>
        /// Identifier of EC2 Transit Gateway.
        /// </summary>
        [PolicyResourceProperty("transitGatewayId", "_mUnknown_TransitGatewayId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayId;
        private bool _mUnknown_TransitGatewayId;
        public string? TransitGatewayId
        {
            get
            {
                if (!_mUnknown_TransitGatewayId) return _mValue_TransitGatewayId;
                throw new UndeferrableValueException("Value 'PeeringAttachmentAccepter.TransitGatewayId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ec2transitgateway/peeringAttachmentAccepter:PeeringAttachmentAccepter")]
    public sealed class PeeringAttachmentAccepterArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'PeeringAttachmentAccepterArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// The ID of the EC2 Transit Gateway Peering Attachment to manage.
        /// </summary>
        [PolicyResourceProperty("transitGatewayAttachmentId", "_mUnknown_TransitGatewayAttachmentId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TransitGatewayAttachmentId;
        private bool _mUnknown_TransitGatewayAttachmentId;
        public string? TransitGatewayAttachmentId
        {
            get
            {
                if (!_mUnknown_TransitGatewayAttachmentId) return _mValue_TransitGatewayAttachmentId;
                throw new UndeferrableValueException("Value 'PeeringAttachmentAccepterArgs.TransitGatewayAttachmentId' is not present");
            }
        }
    }
}
