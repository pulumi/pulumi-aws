// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.TimestreamQuery
{
    [PolicyResourceType("aws:timestreamquery/scheduledQuery:ScheduledQuery")]
    public sealed class ScheduledQuery : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// ARN of the Scheduled Query.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Creation time for the scheduled query.
        /// </summary>
        [Input("creationTime")]
        public string? CreationTime;

        /// <summary>
        /// Configuration block for error reporting configuration. See below.
        /// </summary>
        [Input("errorReportConfiguration")]
        public ScheduledQueryErrorReportConfiguration? ErrorReportConfiguration;

        /// <summary>
        /// ARN for the IAM role that Timestream will assume when running the scheduled query.
        /// </summary>
        [Input("executionRoleArn")]
        public string? ExecutionRoleArn;

        /// <summary>
        /// Amazon KMS key used to encrypt the scheduled query resource, at-rest. If not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with "alias/". If `error_report_configuration` uses `SSE_KMS` as the encryption type, the same `kms_key_id` is used to encrypt the error report at rest.
        /// </summary>
        [Input("kmsKeyId")]
        public string? KmsKeyId;

        /// <summary>
        /// Runtime summary for the last scheduled query run.
        /// </summary>
        [Input("lastRunSummaries")]
        public List<ScheduledQueryLastRunSummary>? LastRunSummaries;

        /// <summary>
        /// Name of the scheduled query.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Next time the scheduled query is scheduled to run.
        /// </summary>
        [Input("nextInvocationTime")]
        public string? NextInvocationTime;

        /// <summary>
        /// Configuration block for notification configuration for a scheduled query. A notification is sent by Timestream when a scheduled query is created, its state is updated, or when it is deleted. See below.
        /// </summary>
        [Input("notificationConfiguration")]
        public ScheduledQueryNotificationConfiguration? NotificationConfiguration;

        /// <summary>
        /// Last time the scheduled query was run.
        /// </summary>
        [Input("previousInvocationTime")]
        public string? PreviousInvocationTime;

        /// <summary>
        /// Query string to run. Parameter names can be specified in the query string using the `@` character followed by an identifier. The named parameter `@scheduled_runtime` is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the `schedule_configuration` parameter, will be the value of `@scheduled_runtime` paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the `@scheduled_runtime` parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
        /// </summary>
        [Input("queryString")]
        public string? QueryString;

        /// <summary>
        /// Runtime summary for the last five failed scheduled query runs.
        /// </summary>
        [Input("recentlyFailedRuns")]
        public List<ScheduledQueryRecentlyFailedRun>? RecentlyFailedRuns;

        /// <summary>
        /// Configuration block for schedule configuration for the query. See below.
        /// </summary>
        [Input("scheduleConfiguration")]
        public ScheduledQueryScheduleConfiguration? ScheduleConfiguration;

        /// <summary>
        /// State of the scheduled query, either `ENABLED` or `DISABLED`.
        /// </summary>
        [Input("state")]
        public string? State;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Configuration block for writing the result of a query. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("targetConfiguration")]
        public ScheduledQueryTargetConfiguration? TargetConfiguration;

        [Input("timeouts")]
        public ScheduledQueryTimeouts? Timeouts;
    }
}
