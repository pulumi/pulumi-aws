// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ApiGateway.Outputs
{
    public sealed class UsagePlanApiStage
    {
        /// <summary>
        /// API Id of the associated API stage in a usage plan.
        /// </summary>
        [PolicyResourceProperty("apiId", "_mUnknown_ApiId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ApiId;
        private bool _mUnknown_ApiId;
        public string? ApiId
        {
            get
            {
                if (!_mUnknown_ApiId) return _mValue_ApiId;
                throw new UndeferrableValueException("Value 'UsagePlanApiStage.ApiId' is not present");
            }
        }

        /// <summary>
        /// API stage name of the associated API stage in a usage plan.
        /// </summary>
        [PolicyResourceProperty("stage", "_mUnknown_Stage")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Stage;
        private bool _mUnknown_Stage;
        public string? Stage
        {
            get
            {
                if (!_mUnknown_Stage) return _mValue_Stage;
                throw new UndeferrableValueException("Value 'UsagePlanApiStage.Stage' is not present");
            }
        }

        /// <summary>
        /// The throttling limits of the usage plan.
        /// </summary>
        [PolicyResourceProperty("throttles", "_mUnknown_Throttles")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.UsagePlanApiStageThrottle>? _mValue_Throttles;
        private bool _mUnknown_Throttles;
        public List<Outputs.UsagePlanApiStageThrottle>? Throttles
        {
            get
            {
                if (!_mUnknown_Throttles) return _mValue_Throttles;
                throw new UndeferrableValueException("Value 'UsagePlanApiStage.Throttles' is not present");
            }
        }
    }
}
