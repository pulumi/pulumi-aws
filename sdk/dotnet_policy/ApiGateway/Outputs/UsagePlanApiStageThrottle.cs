// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ApiGateway.Outputs
{
    public sealed class UsagePlanApiStageThrottle
    {
        /// <summary>
        /// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
        /// </summary>
        [PolicyResourceProperty("burstLimit", "_mUnknown_BurstLimit")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_BurstLimit;
        private bool _mUnknown_BurstLimit;
        public int? BurstLimit
        {
            get
            {
                if (!_mUnknown_BurstLimit) return _mValue_BurstLimit;
                throw new UndeferrableValueException("Value 'UsagePlanApiStageThrottle.BurstLimit' is not present");
            }
        }

        /// <summary>
        /// Method to apply the throttle settings for. Specfiy the path and method, for example `/test/GET`.
        /// </summary>
        [PolicyResourceProperty("path", "_mUnknown_Path")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Path;
        private bool _mUnknown_Path;
        public string? Path
        {
            get
            {
                if (!_mUnknown_Path) return _mValue_Path;
                throw new UndeferrableValueException("Value 'UsagePlanApiStageThrottle.Path' is not present");
            }
        }

        /// <summary>
        /// The API request steady-state rate limit.
        /// </summary>
        [PolicyResourceProperty("rateLimit", "_mUnknown_RateLimit")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private double? _mValue_RateLimit;
        private bool _mUnknown_RateLimit;
        public double? RateLimit
        {
            get
            {
                if (!_mUnknown_RateLimit) return _mValue_RateLimit;
                throw new UndeferrableValueException("Value 'UsagePlanApiStageThrottle.RateLimit' is not present");
            }
        }
    }
}
