// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ApiGateway
{
    [PolicyResourceType("aws:apigateway/MethodSettingsSettings:MethodSettingsSettings")]
    public sealed class MethodSettingsSettings
    {
        /// <summary>
        /// Whether the cached responses are encrypted.
        /// </summary>
        [Input("cacheDataEncrypted")]
        public bool? CacheDataEncrypted;

        /// <summary>
        /// Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
        /// </summary>
        [Input("cacheTtlInSeconds")]
        public int? CacheTtlInSeconds;

        /// <summary>
        /// Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
        /// </summary>
        [Input("cachingEnabled")]
        public bool? CachingEnabled;

        /// <summary>
        /// Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
        /// </summary>
        [Input("dataTraceEnabled")]
        public bool? DataTraceEnabled;

        /// <summary>
        /// Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
        /// </summary>
        [Input("loggingLevel")]
        public string? LoggingLevel;

        /// <summary>
        /// Whether Amazon CloudWatch metrics are enabled for this method.
        /// </summary>
        [Input("metricsEnabled")]
        public bool? MetricsEnabled;

        /// <summary>
        /// Whether authorization is required for a cache invalidation request.
        /// </summary>
        [Input("requireAuthorizationForCacheControl")]
        public bool? RequireAuthorizationForCacheControl;

        /// <summary>
        /// Throttling burst limit. Default: `-1` (throttling disabled).
        /// </summary>
        [Input("throttlingBurstLimit")]
        public int? ThrottlingBurstLimit;

        /// <summary>
        /// Throttling rate limit. Default: `-1` (throttling disabled).
        /// </summary>
        [Input("throttlingRateLimit")]
        public double? ThrottlingRateLimit;

        /// <summary>
        /// How to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
        /// </summary>
        [Input("unauthorizedCacheControlHeaderStrategy")]
        public string? UnauthorizedCacheControlHeaderStrategy;
    }
}
