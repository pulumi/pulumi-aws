// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ApiGateway
{
    [PolicyResourceType("aws:apigateway/domainName:DomainName")]
    public sealed class DomainName : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// ARN of domain name.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'DomainName.Arn' is not present");
            }
        }

        /// <summary>
        /// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificate_name`, `certificate_body`, `certificate_chain`, `certificate_private_key`, `regional_certificate_arn`, and `regional_certificate_name`.
        /// </summary>
        [PolicyResourceProperty("certificateArn", "_mUnknown_CertificateArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateArn;
        private bool _mUnknown_CertificateArn;
        public string? CertificateArn
        {
            get
            {
                if (!_mUnknown_CertificateArn) return _mValue_CertificateArn;
                throw new UndeferrableValueException("Value 'DomainName.CertificateArn' is not present");
            }
        }

        /// <summary>
        /// Certificate issued for the domain name being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
        /// </summary>
        [PolicyResourceProperty("certificateBody", "_mUnknown_CertificateBody")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateBody;
        private bool _mUnknown_CertificateBody;
        public string? CertificateBody
        {
            get
            {
                if (!_mUnknown_CertificateBody) return _mValue_CertificateBody;
                throw new UndeferrableValueException("Value 'DomainName.CertificateBody' is not present");
            }
        }

        /// <summary>
        /// Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
        /// </summary>
        [PolicyResourceProperty("certificateChain", "_mUnknown_CertificateChain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateChain;
        private bool _mUnknown_CertificateChain;
        public string? CertificateChain
        {
            get
            {
                if (!_mUnknown_CertificateChain) return _mValue_CertificateChain;
                throw new UndeferrableValueException("Value 'DomainName.CertificateChain' is not present");
            }
        }

        /// <summary>
        /// Unique name to use when registering this certificate as an IAM server certificate. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`. Required if `certificate_arn` is not set.
        /// </summary>
        [PolicyResourceProperty("certificateName", "_mUnknown_CertificateName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateName;
        private bool _mUnknown_CertificateName;
        public string? CertificateName
        {
            get
            {
                if (!_mUnknown_CertificateName) return _mValue_CertificateName;
                throw new UndeferrableValueException("Value 'DomainName.CertificateName' is not present");
            }
        }

        /// <summary>
        /// Private key associated with the domain certificate given in `certificate_body`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
        /// </summary>
        [PolicyResourceProperty("certificatePrivateKey", "_mUnknown_CertificatePrivateKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificatePrivateKey;
        private bool _mUnknown_CertificatePrivateKey;
        public string? CertificatePrivateKey
        {
            get
            {
                if (!_mUnknown_CertificatePrivateKey) return _mValue_CertificatePrivateKey;
                throw new UndeferrableValueException("Value 'DomainName.CertificatePrivateKey' is not present");
            }
        }

        /// <summary>
        /// Upload date associated with the domain certificate.
        /// </summary>
        [PolicyResourceProperty("certificateUploadDate", "_mUnknown_CertificateUploadDate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateUploadDate;
        private bool _mUnknown_CertificateUploadDate;
        public string? CertificateUploadDate
        {
            get
            {
                if (!_mUnknown_CertificateUploadDate) return _mValue_CertificateUploadDate;
                throw new UndeferrableValueException("Value 'DomainName.CertificateUploadDate' is not present");
            }
        }

        /// <summary>
        /// Hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
        /// </summary>
        [PolicyResourceProperty("cloudfrontDomainName", "_mUnknown_CloudfrontDomainName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CloudfrontDomainName;
        private bool _mUnknown_CloudfrontDomainName;
        public string? CloudfrontDomainName
        {
            get
            {
                if (!_mUnknown_CloudfrontDomainName) return _mValue_CloudfrontDomainName;
                throw new UndeferrableValueException("Value 'DomainName.CloudfrontDomainName' is not present");
            }
        }

        /// <summary>
        /// For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
        /// </summary>
        [PolicyResourceProperty("cloudfrontZoneId", "_mUnknown_CloudfrontZoneId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CloudfrontZoneId;
        private bool _mUnknown_CloudfrontZoneId;
        public string? CloudfrontZoneId
        {
            get
            {
                if (!_mUnknown_CloudfrontZoneId) return _mValue_CloudfrontZoneId;
                throw new UndeferrableValueException("Value 'DomainName.CloudfrontZoneId' is not present");
            }
        }

        /// <summary>
        /// Fully-qualified domain name to register.
        /// </summary>
        [PolicyResourceProperty("domainName", "_mUnknown_Domain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Domain;
        private bool _mUnknown_Domain;
        public string? Domain
        {
            get
            {
                if (!_mUnknown_Domain) return _mValue_Domain;
                throw new UndeferrableValueException("Value 'DomainName.Domain' is not present");
            }
        }

        /// <summary>
        /// The identifier for the domain name resource. Supported only for private custom domain names.
        /// </summary>
        [PolicyResourceProperty("domainNameId", "_mUnknown_DomainNameId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DomainNameId;
        private bool _mUnknown_DomainNameId;
        public string? DomainNameId
        {
            get
            {
                if (!_mUnknown_DomainNameId) return _mValue_DomainNameId;
                throw new UndeferrableValueException("Value 'DomainName.DomainNameId' is not present");
            }
        }

        /// <summary>
        /// Configuration block defining API endpoint information including type. See below.
        /// </summary>
        [PolicyResourceProperty("endpointConfiguration", "_mUnknown_EndpointConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DomainNameEndpointConfiguration? _mValue_EndpointConfiguration;
        private bool _mUnknown_EndpointConfiguration;
        public Outputs.DomainNameEndpointConfiguration? EndpointConfiguration
        {
            get
            {
                if (!_mUnknown_EndpointConfiguration) return _mValue_EndpointConfiguration;
                throw new UndeferrableValueException("Value 'DomainName.EndpointConfiguration' is not present");
            }
        }

        /// <summary>
        /// Mutual TLS authentication configuration for the domain name. See below.
        /// </summary>
        [PolicyResourceProperty("mutualTlsAuthentication", "_mUnknown_MutualTlsAuthentication")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DomainNameMutualTlsAuthentication? _mValue_MutualTlsAuthentication;
        private bool _mUnknown_MutualTlsAuthentication;
        public Outputs.DomainNameMutualTlsAuthentication? MutualTlsAuthentication
        {
            get
            {
                if (!_mUnknown_MutualTlsAuthentication) return _mValue_MutualTlsAuthentication;
                throw new UndeferrableValueException("Value 'DomainName.MutualTlsAuthentication' is not present");
            }
        }

        /// <summary>
        /// ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificate_arn` is issued via an ACM Private CA or `mutual_tls_authentication` is configured with an ACM-imported certificate.)
        /// </summary>
        [PolicyResourceProperty("ownershipVerificationCertificateArn", "_mUnknown_OwnershipVerificationCertificateArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_OwnershipVerificationCertificateArn;
        private bool _mUnknown_OwnershipVerificationCertificateArn;
        public string? OwnershipVerificationCertificateArn
        {
            get
            {
                if (!_mUnknown_OwnershipVerificationCertificateArn) return _mValue_OwnershipVerificationCertificateArn;
                throw new UndeferrableValueException("Value 'DomainName.OwnershipVerificationCertificateArn' is not present");
            }
        }

        /// <summary>
        /// A stringified JSON policy document that applies to the execute-api service for this DomainName regardless of the caller and Method configuration. Supported only for private custom domain names.
        /// </summary>
        [PolicyResourceProperty("policy", "_mUnknown_Policy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Policy;
        private bool _mUnknown_Policy;
        public string? Policy
        {
            get
            {
                if (!_mUnknown_Policy) return _mValue_Policy;
                throw new UndeferrableValueException("Value 'DomainName.Policy' is not present");
            }
        }

        /// <summary>
        /// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and `certificate_private_key`.
        /// 
        /// When uploading a certificate, the following arguments are supported:
        /// </summary>
        [PolicyResourceProperty("regionalCertificateArn", "_mUnknown_RegionalCertificateArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RegionalCertificateArn;
        private bool _mUnknown_RegionalCertificateArn;
        public string? RegionalCertificateArn
        {
            get
            {
                if (!_mUnknown_RegionalCertificateArn) return _mValue_RegionalCertificateArn;
                throw new UndeferrableValueException("Value 'DomainName.RegionalCertificateArn' is not present");
            }
        }

        /// <summary>
        /// User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and `certificate_private_key`.
        /// </summary>
        [PolicyResourceProperty("regionalCertificateName", "_mUnknown_RegionalCertificateName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RegionalCertificateName;
        private bool _mUnknown_RegionalCertificateName;
        public string? RegionalCertificateName
        {
            get
            {
                if (!_mUnknown_RegionalCertificateName) return _mValue_RegionalCertificateName;
                throw new UndeferrableValueException("Value 'DomainName.RegionalCertificateName' is not present");
            }
        }

        /// <summary>
        /// Hostname for the custom domain's regional endpoint.
        /// </summary>
        [PolicyResourceProperty("regionalDomainName", "_mUnknown_RegionalDomainName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RegionalDomainName;
        private bool _mUnknown_RegionalDomainName;
        public string? RegionalDomainName
        {
            get
            {
                if (!_mUnknown_RegionalDomainName) return _mValue_RegionalDomainName;
                throw new UndeferrableValueException("Value 'DomainName.RegionalDomainName' is not present");
            }
        }

        /// <summary>
        /// Hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
        /// </summary>
        [PolicyResourceProperty("regionalZoneId", "_mUnknown_RegionalZoneId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RegionalZoneId;
        private bool _mUnknown_RegionalZoneId;
        public string? RegionalZoneId
        {
            get
            {
                if (!_mUnknown_RegionalZoneId) return _mValue_RegionalZoneId;
                throw new UndeferrableValueException("Value 'DomainName.RegionalZoneId' is not present");
            }
        }

        /// <summary>
        /// Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
        /// </summary>
        [PolicyResourceProperty("securityPolicy", "_mUnknown_SecurityPolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityPolicy;
        private bool _mUnknown_SecurityPolicy;
        public string? SecurityPolicy
        {
            get
            {
                if (!_mUnknown_SecurityPolicy) return _mValue_SecurityPolicy;
                throw new UndeferrableValueException("Value 'DomainName.SecurityPolicy' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// 
        /// When referencing an AWS-managed certificate, the following arguments are supported:
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'DomainName.Tags' is not present");
            }
        }

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'DomainName.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:apigateway/domainName:DomainName")]
    public sealed class DomainNameArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificate_name`, `certificate_body`, `certificate_chain`, `certificate_private_key`, `regional_certificate_arn`, and `regional_certificate_name`.
        /// </summary>
        [PolicyResourceProperty("certificateArn", "_mUnknown_CertificateArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateArn;
        private bool _mUnknown_CertificateArn;
        public string? CertificateArn
        {
            get
            {
                if (!_mUnknown_CertificateArn) return _mValue_CertificateArn;
                throw new UndeferrableValueException("Value 'DomainNameArgs.CertificateArn' is not present");
            }
        }

        /// <summary>
        /// Certificate issued for the domain name being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
        /// </summary>
        [PolicyResourceProperty("certificateBody", "_mUnknown_CertificateBody")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateBody;
        private bool _mUnknown_CertificateBody;
        public string? CertificateBody
        {
            get
            {
                if (!_mUnknown_CertificateBody) return _mValue_CertificateBody;
                throw new UndeferrableValueException("Value 'DomainNameArgs.CertificateBody' is not present");
            }
        }

        /// <summary>
        /// Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
        /// </summary>
        [PolicyResourceProperty("certificateChain", "_mUnknown_CertificateChain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateChain;
        private bool _mUnknown_CertificateChain;
        public string? CertificateChain
        {
            get
            {
                if (!_mUnknown_CertificateChain) return _mValue_CertificateChain;
                throw new UndeferrableValueException("Value 'DomainNameArgs.CertificateChain' is not present");
            }
        }

        /// <summary>
        /// Unique name to use when registering this certificate as an IAM server certificate. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`. Required if `certificate_arn` is not set.
        /// </summary>
        [PolicyResourceProperty("certificateName", "_mUnknown_CertificateName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificateName;
        private bool _mUnknown_CertificateName;
        public string? CertificateName
        {
            get
            {
                if (!_mUnknown_CertificateName) return _mValue_CertificateName;
                throw new UndeferrableValueException("Value 'DomainNameArgs.CertificateName' is not present");
            }
        }

        /// <summary>
        /// Private key associated with the domain certificate given in `certificate_body`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
        /// </summary>
        [PolicyResourceProperty("certificatePrivateKey", "_mUnknown_CertificatePrivateKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CertificatePrivateKey;
        private bool _mUnknown_CertificatePrivateKey;
        public string? CertificatePrivateKey
        {
            get
            {
                if (!_mUnknown_CertificatePrivateKey) return _mValue_CertificatePrivateKey;
                throw new UndeferrableValueException("Value 'DomainNameArgs.CertificatePrivateKey' is not present");
            }
        }

        /// <summary>
        /// Fully-qualified domain name to register.
        /// </summary>
        [PolicyResourceProperty("domainName", "_mUnknown_Domain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Domain;
        private bool _mUnknown_Domain;
        public string? Domain
        {
            get
            {
                if (!_mUnknown_Domain) return _mValue_Domain;
                throw new UndeferrableValueException("Value 'DomainNameArgs.Domain' is not present");
            }
        }

        /// <summary>
        /// Configuration block defining API endpoint information including type. See below.
        /// </summary>
        [PolicyResourceProperty("endpointConfiguration", "_mUnknown_EndpointConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DomainNameEndpointConfigurationArgs? _mValue_EndpointConfiguration;
        private bool _mUnknown_EndpointConfiguration;
        public Inputs.DomainNameEndpointConfigurationArgs? EndpointConfiguration
        {
            get
            {
                if (!_mUnknown_EndpointConfiguration) return _mValue_EndpointConfiguration;
                throw new UndeferrableValueException("Value 'DomainNameArgs.EndpointConfiguration' is not present");
            }
        }

        /// <summary>
        /// Mutual TLS authentication configuration for the domain name. See below.
        /// </summary>
        [PolicyResourceProperty("mutualTlsAuthentication", "_mUnknown_MutualTlsAuthentication")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DomainNameMutualTlsAuthenticationArgs? _mValue_MutualTlsAuthentication;
        private bool _mUnknown_MutualTlsAuthentication;
        public Inputs.DomainNameMutualTlsAuthenticationArgs? MutualTlsAuthentication
        {
            get
            {
                if (!_mUnknown_MutualTlsAuthentication) return _mValue_MutualTlsAuthentication;
                throw new UndeferrableValueException("Value 'DomainNameArgs.MutualTlsAuthentication' is not present");
            }
        }

        /// <summary>
        /// ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificate_arn` is issued via an ACM Private CA or `mutual_tls_authentication` is configured with an ACM-imported certificate.)
        /// </summary>
        [PolicyResourceProperty("ownershipVerificationCertificateArn", "_mUnknown_OwnershipVerificationCertificateArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_OwnershipVerificationCertificateArn;
        private bool _mUnknown_OwnershipVerificationCertificateArn;
        public string? OwnershipVerificationCertificateArn
        {
            get
            {
                if (!_mUnknown_OwnershipVerificationCertificateArn) return _mValue_OwnershipVerificationCertificateArn;
                throw new UndeferrableValueException("Value 'DomainNameArgs.OwnershipVerificationCertificateArn' is not present");
            }
        }

        /// <summary>
        /// A stringified JSON policy document that applies to the execute-api service for this DomainName regardless of the caller and Method configuration. Supported only for private custom domain names.
        /// </summary>
        [PolicyResourceProperty("policy", "_mUnknown_Policy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Policy;
        private bool _mUnknown_Policy;
        public string? Policy
        {
            get
            {
                if (!_mUnknown_Policy) return _mValue_Policy;
                throw new UndeferrableValueException("Value 'DomainNameArgs.Policy' is not present");
            }
        }

        /// <summary>
        /// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and `certificate_private_key`.
        /// 
        /// When uploading a certificate, the following arguments are supported:
        /// </summary>
        [PolicyResourceProperty("regionalCertificateArn", "_mUnknown_RegionalCertificateArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RegionalCertificateArn;
        private bool _mUnknown_RegionalCertificateArn;
        public string? RegionalCertificateArn
        {
            get
            {
                if (!_mUnknown_RegionalCertificateArn) return _mValue_RegionalCertificateArn;
                throw new UndeferrableValueException("Value 'DomainNameArgs.RegionalCertificateArn' is not present");
            }
        }

        /// <summary>
        /// User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and `certificate_private_key`.
        /// </summary>
        [PolicyResourceProperty("regionalCertificateName", "_mUnknown_RegionalCertificateName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RegionalCertificateName;
        private bool _mUnknown_RegionalCertificateName;
        public string? RegionalCertificateName
        {
            get
            {
                if (!_mUnknown_RegionalCertificateName) return _mValue_RegionalCertificateName;
                throw new UndeferrableValueException("Value 'DomainNameArgs.RegionalCertificateName' is not present");
            }
        }

        /// <summary>
        /// Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
        /// </summary>
        [PolicyResourceProperty("securityPolicy", "_mUnknown_SecurityPolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityPolicy;
        private bool _mUnknown_SecurityPolicy;
        public string? SecurityPolicy
        {
            get
            {
                if (!_mUnknown_SecurityPolicy) return _mValue_SecurityPolicy;
                throw new UndeferrableValueException("Value 'DomainNameArgs.SecurityPolicy' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// 
        /// When referencing an AWS-managed certificate, the following arguments are supported:
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'DomainNameArgs.Tags' is not present");
            }
        }
    }
}
