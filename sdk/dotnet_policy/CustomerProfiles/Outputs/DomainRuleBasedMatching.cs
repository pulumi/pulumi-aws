// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CustomerProfiles.Outputs
{
    public sealed class DomainRuleBasedMatching
    {
        /// <summary>
        /// A block that configures information about the `AttributeTypesSelector` where the rule-based identity resolution uses to match profiles. Documented below.
        /// </summary>
        [PolicyResourceProperty("attributeTypesSelector", "_mUnknown_AttributeTypesSelector")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DomainRuleBasedMatchingAttributeTypesSelector? _mValue_AttributeTypesSelector;
        private bool _mUnknown_AttributeTypesSelector;
        public Outputs.DomainRuleBasedMatchingAttributeTypesSelector? AttributeTypesSelector
        {
            get
            {
                if (!_mUnknown_AttributeTypesSelector) return _mValue_AttributeTypesSelector;
                throw new UndeferrableValueException("Value 'DomainRuleBasedMatching.AttributeTypesSelector' is not present");
            }
        }

        /// <summary>
        /// A block that specifies how the auto-merging process should resolve conflicts between different profiles. Documented below.
        /// </summary>
        [PolicyResourceProperty("conflictResolution", "_mUnknown_ConflictResolution")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DomainRuleBasedMatchingConflictResolution? _mValue_ConflictResolution;
        private bool _mUnknown_ConflictResolution;
        public Outputs.DomainRuleBasedMatchingConflictResolution? ConflictResolution
        {
            get
            {
                if (!_mUnknown_ConflictResolution) return _mValue_ConflictResolution;
                throw new UndeferrableValueException("Value 'DomainRuleBasedMatching.ConflictResolution' is not present");
            }
        }

        /// <summary>
        /// The flag that enables the rule-based matching process of duplicate profiles.
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'DomainRuleBasedMatching.Enabled' is not present");
            }
        }

        /// <summary>
        /// A block that specifies the configuration for exporting Identity Resolution results. Documented below.
        /// </summary>
        [PolicyResourceProperty("exportingConfig", "_mUnknown_ExportingConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DomainRuleBasedMatchingExportingConfig? _mValue_ExportingConfig;
        private bool _mUnknown_ExportingConfig;
        public Outputs.DomainRuleBasedMatchingExportingConfig? ExportingConfig
        {
            get
            {
                if (!_mUnknown_ExportingConfig) return _mValue_ExportingConfig;
                throw new UndeferrableValueException("Value 'DomainRuleBasedMatching.ExportingConfig' is not present");
            }
        }

        /// <summary>
        /// A block that configures how the rule-based matching process should match profiles. You can have up to 15 `rule` in the `natching_rules`. Documented below.
        /// </summary>
        [PolicyResourceProperty("matchingRules", "_mUnknown_MatchingRules")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.DomainRuleBasedMatchingMatchingRule>? _mValue_MatchingRules;
        private bool _mUnknown_MatchingRules;
        public List<Outputs.DomainRuleBasedMatchingMatchingRule>? MatchingRules
        {
            get
            {
                if (!_mUnknown_MatchingRules) return _mValue_MatchingRules;
                throw new UndeferrableValueException("Value 'DomainRuleBasedMatching.MatchingRules' is not present");
            }
        }

        /// <summary>
        /// Indicates the maximum allowed rule level for matching.
        /// </summary>
        [PolicyResourceProperty("maxAllowedRuleLevelForMatching", "_mUnknown_MaxAllowedRuleLevelForMatching")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxAllowedRuleLevelForMatching;
        private bool _mUnknown_MaxAllowedRuleLevelForMatching;
        public int? MaxAllowedRuleLevelForMatching
        {
            get
            {
                if (!_mUnknown_MaxAllowedRuleLevelForMatching) return _mValue_MaxAllowedRuleLevelForMatching;
                throw new UndeferrableValueException("Value 'DomainRuleBasedMatching.MaxAllowedRuleLevelForMatching' is not present");
            }
        }

        /// <summary>
        /// Indicates the maximum allowed rule level for merging.
        /// </summary>
        [PolicyResourceProperty("maxAllowedRuleLevelForMerging", "_mUnknown_MaxAllowedRuleLevelForMerging")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxAllowedRuleLevelForMerging;
        private bool _mUnknown_MaxAllowedRuleLevelForMerging;
        public int? MaxAllowedRuleLevelForMerging
        {
            get
            {
                if (!_mUnknown_MaxAllowedRuleLevelForMerging) return _mValue_MaxAllowedRuleLevelForMerging;
                throw new UndeferrableValueException("Value 'DomainRuleBasedMatching.MaxAllowedRuleLevelForMerging' is not present");
            }
        }

        [PolicyResourceProperty("status", "_mUnknown_Status")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Status;
        private bool _mUnknown_Status;
        public string? Status
        {
            get
            {
                if (!_mUnknown_Status) return _mValue_Status;
                throw new UndeferrableValueException("Value 'DomainRuleBasedMatching.Status' is not present");
            }
        }
    }
}
