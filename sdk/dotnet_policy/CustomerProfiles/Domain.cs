// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CustomerProfiles
{
    [PolicyResourceType("aws:customerprofiles/domain:Domain")]
    public sealed class Domain : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the Customer Profiles Domain.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications.
        /// </summary>
        [Input("deadLetterQueueUrl")]
        public string? DeadLetterQueueUrl;

        /// <summary>
        /// The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.
        /// </summary>
        [Input("defaultEncryptionKey")]
        public string? DefaultEncryptionKey;

        /// <summary>
        /// The default number of days until the data within the domain expires.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("defaultExpirationDays")]
        public int? DefaultExpirationDays;

        /// <summary>
        /// The name for your Customer Profile domain. It must be unique for your AWS account.
        /// </summary>
        [Input("domainName")]
        public string? DomainName;

        /// <summary>
        /// A block that specifies the process of matching duplicate profiles. Documented below.
        /// </summary>
        [Input("matching")]
        public DomainMatching? Matching;

        /// <summary>
        /// A block that specifies the process of matching duplicate profiles using the Rule-Based matching. Documented below.
        /// </summary>
        [Input("ruleBasedMatching")]
        public DomainRuleBasedMatching? RuleBasedMatching;

        /// <summary>
        /// Tags to apply to the domain. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
