// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.ResilienceHub
{
    [PolicyResourceType("aws:resiliencehub/resiliencyPolicy:ResiliencyPolicy")]
    public sealed class ResiliencyPolicy : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// ARN of the Resiliency Policy.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'ResiliencyPolicy.Arn' is not present");
            }
        }

        /// <summary>
        /// Data Location Constraint of the Policy.
        /// Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
        /// </summary>
        [PolicyResourceProperty("dataLocationConstraint", "_mUnknown_DataLocationConstraint")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DataLocationConstraint;
        private bool _mUnknown_DataLocationConstraint;
        public string? DataLocationConstraint
        {
            get
            {
                if (!_mUnknown_DataLocationConstraint) return _mValue_DataLocationConstraint;
                throw new UndeferrableValueException("Value 'ResiliencyPolicy.DataLocationConstraint' is not present");
            }
        }

        /// <summary>
        /// Description of Resiliency Policy.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'ResiliencyPolicy.Description' is not present");
            }
        }

        /// <summary>
        /// Estimated Cost Tier of the Resiliency Policy.
        /// </summary>
        [PolicyResourceProperty("estimatedCostTier", "_mUnknown_EstimatedCostTier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EstimatedCostTier;
        private bool _mUnknown_EstimatedCostTier;
        public string? EstimatedCostTier
        {
            get
            {
                if (!_mUnknown_EstimatedCostTier) return _mValue_EstimatedCostTier;
                throw new UndeferrableValueException("Value 'ResiliencyPolicy.EstimatedCostTier' is not present");
            }
        }

        /// <summary>
        /// Name of Resiliency Policy.
        /// Must be between 2 and 60 characters long.
        /// Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'ResiliencyPolicy.Name' is not present");
            }
        }

        /// <summary>
        /// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("policy", "_mUnknown_Policy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ResiliencyPolicyPolicy? _mValue_Policy;
        private bool _mUnknown_Policy;
        public Outputs.ResiliencyPolicyPolicy? Policy
        {
            get
            {
                if (!_mUnknown_Policy) return _mValue_Policy;
                throw new UndeferrableValueException("Value 'ResiliencyPolicy.Policy' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ResiliencyPolicy.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'ResiliencyPolicy.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Resiliency Policy Tier.
        /// Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
        /// </summary>
        [PolicyResourceProperty("tier", "_mUnknown_Tier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Tier;
        private bool _mUnknown_Tier;
        public string? Tier
        {
            get
            {
                if (!_mUnknown_Tier) return _mValue_Tier;
                throw new UndeferrableValueException("Value 'ResiliencyPolicy.Tier' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ResiliencyPolicyTimeouts? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Outputs.ResiliencyPolicyTimeouts? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'ResiliencyPolicy.Timeouts' is not present");
            }
        }
    }

    [PolicyResourceType("aws:resiliencehub/resiliencyPolicy:ResiliencyPolicy")]
    public sealed class ResiliencyPolicyArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Data Location Constraint of the Policy.
        /// Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
        /// </summary>
        [PolicyResourceProperty("dataLocationConstraint", "_mUnknown_DataLocationConstraint")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DataLocationConstraint;
        private bool _mUnknown_DataLocationConstraint;
        public string? DataLocationConstraint
        {
            get
            {
                if (!_mUnknown_DataLocationConstraint) return _mValue_DataLocationConstraint;
                throw new UndeferrableValueException("Value 'ResiliencyPolicyArgs.DataLocationConstraint' is not present");
            }
        }

        /// <summary>
        /// Description of Resiliency Policy.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'ResiliencyPolicyArgs.Description' is not present");
            }
        }

        /// <summary>
        /// Name of Resiliency Policy.
        /// Must be between 2 and 60 characters long.
        /// Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'ResiliencyPolicyArgs.Name' is not present");
            }
        }

        /// <summary>
        /// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("policy", "_mUnknown_Policy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ResiliencyPolicyPolicyArgs? _mValue_Policy;
        private bool _mUnknown_Policy;
        public Inputs.ResiliencyPolicyPolicyArgs? Policy
        {
            get
            {
                if (!_mUnknown_Policy) return _mValue_Policy;
                throw new UndeferrableValueException("Value 'ResiliencyPolicyArgs.Policy' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ResiliencyPolicyArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Resiliency Policy Tier.
        /// Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
        /// </summary>
        [PolicyResourceProperty("tier", "_mUnknown_Tier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Tier;
        private bool _mUnknown_Tier;
        public string? Tier
        {
            get
            {
                if (!_mUnknown_Tier) return _mValue_Tier;
                throw new UndeferrableValueException("Value 'ResiliencyPolicyArgs.Tier' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ResiliencyPolicyTimeoutsArgs? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Inputs.ResiliencyPolicyTimeoutsArgs? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'ResiliencyPolicyArgs.Timeouts' is not present");
            }
        }
    }
}
