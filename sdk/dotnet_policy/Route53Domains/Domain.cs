// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Route53Domains
{
    [PolicyResourceType("aws:route53domains/domain:Domain")]
    public sealed class Domain : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.
        /// </summary>
        [Input("abuseContactEmail")]
        public string? AbuseContactEmail;

        /// <summary>
        /// Phone number for reporting abuse.
        /// </summary>
        [Input("abuseContactPhone")]
        public string? AbuseContactPhone;

        /// <summary>
        /// Details about the domain administrative contact. See Contact Blocks for more details.
        /// </summary>
        [Input("adminContact")]
        public DomainAdminContact? AdminContact;

        /// <summary>
        /// Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
        /// </summary>
        [Input("adminPrivacy")]
        public bool? AdminPrivacy;

        /// <summary>
        /// Whether the domain registration is set to renew automatically. Default: `true`.
        /// </summary>
        [Input("autoRenew")]
        public bool? AutoRenew;

        /// <summary>
        /// Details about the domain billing contact. See Contact Blocks for more details.
        /// </summary>
        [Input("billingContacts")]
        public List<DomainBillingContact>? BillingContacts;

        /// <summary>
        /// Whether domain billing contact information is concealed from WHOIS queries. Default: `true`.
        /// </summary>
        [Input("billingPrivacy")]
        public bool? BillingPrivacy;

        /// <summary>
        /// The date when the domain was created as found in the response to a WHOIS query.
        /// </summary>
        [Input("creationDate")]
        public string? CreationDate;

        /// <summary>
        /// The name of the domain.
        /// </summary>
        [Input("domainName")]
        public string? DomainName;

        /// <summary>
        /// The number of years that you want to register the domain for. Domains are registered for a minimum of one year. Increasing the duration renews the domain.
        /// </summary>
        [Input("durationInYears")]
        public int? DurationInYears;

        /// <summary>
        /// The date when the registration for the domain is set to expire.
        /// </summary>
        [Input("expirationDate")]
        public string? ExpirationDate;

        /// <summary>
        /// The ID of the public Route 53 hosted zone created for the domain. This hosted zone is deleted when the domain is deregistered.
        /// </summary>
        [Input("hostedZoneId")]
        public string? HostedZoneId;

        /// <summary>
        /// The list of nameservers for the domain. See `name_server` Blocks for more details.
        /// </summary>
        [Input("nameServers")]
        public List<DomainNameServer>? NameServers;

        /// <summary>
        /// Details about the domain registrant. See Contact Blocks for more details.
        /// </summary>
        [Input("registrantContact")]
        public DomainRegistrantContact? RegistrantContact;

        /// <summary>
        /// Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
        /// </summary>
        [Input("registrantPrivacy")]
        public bool? RegistrantPrivacy;

        /// <summary>
        /// Name of the registrar of the domain as identified in the registry.
        /// </summary>
        [Input("registrarName")]
        public string? RegistrarName;

        /// <summary>
        /// Web address of the registrar.
        /// </summary>
        [Input("registrarUrl")]
        public string? RegistrarUrl;

        /// <summary>
        /// List of [domain name status codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).
        /// </summary>
        [Input("statusLists")]
        public List<string>? StatusLists;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Details about the domain technical contact. See Contact Blocks for more details.
        /// </summary>
        [Input("techContact")]
        public DomainTechContact? TechContact;

        /// <summary>
        /// Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
        /// </summary>
        [Input("techPrivacy")]
        public bool? TechPrivacy;

        [Input("timeouts")]
        public DomainTimeouts? Timeouts;

        /// <summary>
        /// Whether the domain is locked for transfer. Default: `true`.
        /// </summary>
        [Input("transferLock")]
        public bool? TransferLock;

        /// <summary>
        /// The last updated date of the domain as found in the response to a WHOIS query.
        /// </summary>
        [Input("updatedDate")]
        public string? UpdatedDate;

        /// <summary>
        /// The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.
        /// </summary>
        [Input("whoisServer")]
        public string? WhoisServer;
    }
}
