// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Athena
{
    [PolicyResourceType("aws:athena/dataCatalog:DataCatalog")]
    public sealed class DataCatalog : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// ARN of the data catalog.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Description of the data catalog.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
        /// </summary>
        [Input("parameters")]
        public Dictionary<string, string>? Parameters;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
        /// </summary>
        [Input("type")]
        public string? Type;
    }
}
