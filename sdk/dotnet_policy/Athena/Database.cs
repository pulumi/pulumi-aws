// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Athena
{
    [PolicyResourceType("aws:athena/database:Database")]
    public sealed class Database : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
        /// </summary>
        [PolicyResourceProperty("aclConfiguration", "_mUnknown_AclConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DatabaseAclConfiguration? _mValue_AclConfiguration;
        private bool _mUnknown_AclConfiguration;
        public Outputs.DatabaseAclConfiguration? AclConfiguration
        {
            get
            {
                if (!_mUnknown_AclConfiguration) return _mValue_AclConfiguration;
                throw new UndeferrableValueException("Value 'Database.AclConfiguration' is not present");
            }
        }

        /// <summary>
        /// Name of S3 bucket to save the results of the query execution.
        /// </summary>
        [PolicyResourceProperty("bucket", "_mUnknown_Bucket")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Bucket;
        private bool _mUnknown_Bucket;
        public string? Bucket
        {
            get
            {
                if (!_mUnknown_Bucket) return _mValue_Bucket;
                throw new UndeferrableValueException("Value 'Database.Bucket' is not present");
            }
        }

        /// <summary>
        /// Description of the database.
        /// </summary>
        [PolicyResourceProperty("comment", "_mUnknown_Comment")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Comment;
        private bool _mUnknown_Comment;
        public string? Comment
        {
            get
            {
                if (!_mUnknown_Comment) return _mValue_Comment;
                throw new UndeferrableValueException("Value 'Database.Comment' is not present");
            }
        }

        /// <summary>
        /// Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.
        /// </summary>
        [PolicyResourceProperty("encryptionConfiguration", "_mUnknown_EncryptionConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DatabaseEncryptionConfiguration? _mValue_EncryptionConfiguration;
        private bool _mUnknown_EncryptionConfiguration;
        public Outputs.DatabaseEncryptionConfiguration? EncryptionConfiguration
        {
            get
            {
                if (!_mUnknown_EncryptionConfiguration) return _mValue_EncryptionConfiguration;
                throw new UndeferrableValueException("Value 'Database.EncryptionConfiguration' is not present");
            }
        }

        /// <summary>
        /// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
        /// </summary>
        [PolicyResourceProperty("expectedBucketOwner", "_mUnknown_ExpectedBucketOwner")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ExpectedBucketOwner;
        private bool _mUnknown_ExpectedBucketOwner;
        public string? ExpectedBucketOwner
        {
            get
            {
                if (!_mUnknown_ExpectedBucketOwner) return _mValue_ExpectedBucketOwner;
                throw new UndeferrableValueException("Value 'Database.ExpectedBucketOwner' is not present");
            }
        }

        /// <summary>
        /// Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.
        /// </summary>
        [PolicyResourceProperty("forceDestroy", "_mUnknown_ForceDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ForceDestroy;
        private bool _mUnknown_ForceDestroy;
        public bool? ForceDestroy
        {
            get
            {
                if (!_mUnknown_ForceDestroy) return _mValue_ForceDestroy;
                throw new UndeferrableValueException("Value 'Database.ForceDestroy' is not present");
            }
        }

        /// <summary>
        /// Name of the database to create.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Database.Name' is not present");
            }
        }

        /// <summary>
        /// Key-value map of custom metadata properties for the database definition.
        /// </summary>
        [PolicyResourceProperty("properties", "_mUnknown_Properties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Properties;
        private bool _mUnknown_Properties;
        public Dictionary<string, string>? Properties
        {
            get
            {
                if (!_mUnknown_Properties) return _mValue_Properties;
                throw new UndeferrableValueException("Value 'Database.Properties' is not present");
            }
        }
    }

    [PolicyResourceType("aws:athena/database:Database")]
    public sealed class DatabaseArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
        /// </summary>
        [PolicyResourceProperty("aclConfiguration", "_mUnknown_AclConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DatabaseAclConfigurationArgs? _mValue_AclConfiguration;
        private bool _mUnknown_AclConfiguration;
        public Inputs.DatabaseAclConfigurationArgs? AclConfiguration
        {
            get
            {
                if (!_mUnknown_AclConfiguration) return _mValue_AclConfiguration;
                throw new UndeferrableValueException("Value 'DatabaseArgs.AclConfiguration' is not present");
            }
        }

        /// <summary>
        /// Name of S3 bucket to save the results of the query execution.
        /// </summary>
        [PolicyResourceProperty("bucket", "_mUnknown_Bucket")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Bucket;
        private bool _mUnknown_Bucket;
        public string? Bucket
        {
            get
            {
                if (!_mUnknown_Bucket) return _mValue_Bucket;
                throw new UndeferrableValueException("Value 'DatabaseArgs.Bucket' is not present");
            }
        }

        /// <summary>
        /// Description of the database.
        /// </summary>
        [PolicyResourceProperty("comment", "_mUnknown_Comment")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Comment;
        private bool _mUnknown_Comment;
        public string? Comment
        {
            get
            {
                if (!_mUnknown_Comment) return _mValue_Comment;
                throw new UndeferrableValueException("Value 'DatabaseArgs.Comment' is not present");
            }
        }

        /// <summary>
        /// Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.
        /// </summary>
        [PolicyResourceProperty("encryptionConfiguration", "_mUnknown_EncryptionConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DatabaseEncryptionConfigurationArgs? _mValue_EncryptionConfiguration;
        private bool _mUnknown_EncryptionConfiguration;
        public Inputs.DatabaseEncryptionConfigurationArgs? EncryptionConfiguration
        {
            get
            {
                if (!_mUnknown_EncryptionConfiguration) return _mValue_EncryptionConfiguration;
                throw new UndeferrableValueException("Value 'DatabaseArgs.EncryptionConfiguration' is not present");
            }
        }

        /// <summary>
        /// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
        /// </summary>
        [PolicyResourceProperty("expectedBucketOwner", "_mUnknown_ExpectedBucketOwner")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ExpectedBucketOwner;
        private bool _mUnknown_ExpectedBucketOwner;
        public string? ExpectedBucketOwner
        {
            get
            {
                if (!_mUnknown_ExpectedBucketOwner) return _mValue_ExpectedBucketOwner;
                throw new UndeferrableValueException("Value 'DatabaseArgs.ExpectedBucketOwner' is not present");
            }
        }

        /// <summary>
        /// Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.
        /// </summary>
        [PolicyResourceProperty("forceDestroy", "_mUnknown_ForceDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ForceDestroy;
        private bool _mUnknown_ForceDestroy;
        public bool? ForceDestroy
        {
            get
            {
                if (!_mUnknown_ForceDestroy) return _mValue_ForceDestroy;
                throw new UndeferrableValueException("Value 'DatabaseArgs.ForceDestroy' is not present");
            }
        }

        /// <summary>
        /// Name of the database to create.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'DatabaseArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Key-value map of custom metadata properties for the database definition.
        /// </summary>
        [PolicyResourceProperty("properties", "_mUnknown_Properties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Properties;
        private bool _mUnknown_Properties;
        public Dictionary<string, string>? Properties
        {
            get
            {
                if (!_mUnknown_Properties) return _mValue_Properties;
                throw new UndeferrableValueException("Value 'DatabaseArgs.Properties' is not present");
            }
        }
    }
}
