// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Athena
{
    [PolicyResourceType("aws:athena/database:Database")]
    public sealed class Database : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
        /// </summary>
        [Input("aclConfiguration")]
        public DatabaseAclConfiguration? AclConfiguration;

        /// <summary>
        /// Name of S3 bucket to save the results of the query execution.
        /// </summary>
        [Input("bucket")]
        public string? Bucket;

        /// <summary>
        /// Description of the database.
        /// </summary>
        [Input("comment")]
        public string? Comment;

        /// <summary>
        /// Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.
        /// </summary>
        [Input("encryptionConfiguration")]
        public DatabaseEncryptionConfiguration? EncryptionConfiguration;

        /// <summary>
        /// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
        /// </summary>
        [Input("expectedBucketOwner")]
        public string? ExpectedBucketOwner;

        /// <summary>
        /// Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.
        /// </summary>
        [Input("forceDestroy")]
        public bool? ForceDestroy;

        /// <summary>
        /// Name of the database to create.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Key-value map of custom metadata properties for the database definition.
        /// </summary>
        [Input("properties")]
        public Dictionary<string, string>? Properties;
    }
}
