// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ecr
{
    [PolicyResourceType("aws:ecr/registryScanningConfiguration:RegistryScanningConfiguration")]
    public sealed class RegistryScanningConfiguration : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The registry ID the scanning configuration applies to.
        /// </summary>
        [PolicyResourceProperty("registryId", "_mUnknown_RegistryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RegistryId;
        private bool _mUnknown_RegistryId;
        public string? RegistryId
        {
            get
            {
                if (!_mUnknown_RegistryId) return _mValue_RegistryId;
                throw new UndeferrableValueException("Value 'RegistryScanningConfiguration.RegistryId' is not present");
            }
        }

        /// <summary>
        /// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
        /// </summary>
        [PolicyResourceProperty("rules", "_mUnknown_Rules")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.RegistryScanningConfigurationRule>? _mValue_Rules;
        private bool _mUnknown_Rules;
        public List<Outputs.RegistryScanningConfigurationRule>? Rules
        {
            get
            {
                if (!_mUnknown_Rules) return _mValue_Rules;
                throw new UndeferrableValueException("Value 'RegistryScanningConfiguration.Rules' is not present");
            }
        }

        /// <summary>
        /// the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
        /// </summary>
        [PolicyResourceProperty("scanType", "_mUnknown_ScanType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ScanType;
        private bool _mUnknown_ScanType;
        public string? ScanType
        {
            get
            {
                if (!_mUnknown_ScanType) return _mValue_ScanType;
                throw new UndeferrableValueException("Value 'RegistryScanningConfiguration.ScanType' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ecr/registryScanningConfiguration:RegistryScanningConfiguration")]
    public sealed class RegistryScanningConfigurationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
        /// </summary>
        [PolicyResourceProperty("rules", "_mUnknown_Rules")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.RegistryScanningConfigurationRuleArgs>? _mValue_Rules;
        private bool _mUnknown_Rules;
        public List<Inputs.RegistryScanningConfigurationRuleArgs>? Rules
        {
            get
            {
                if (!_mUnknown_Rules) return _mValue_Rules;
                throw new UndeferrableValueException("Value 'RegistryScanningConfigurationArgs.Rules' is not present");
            }
        }

        /// <summary>
        /// the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
        /// </summary>
        [PolicyResourceProperty("scanType", "_mUnknown_ScanType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ScanType;
        private bool _mUnknown_ScanType;
        public string? ScanType
        {
            get
            {
                if (!_mUnknown_ScanType) return _mValue_ScanType;
                throw new UndeferrableValueException("Value 'RegistryScanningConfigurationArgs.ScanType' is not present");
            }
        }
    }
}
