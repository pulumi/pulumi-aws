// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Sagemaker
{
    [PolicyResourceType("aws:sagemaker/model:Model")]
    public sealed class Model : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this model.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Model.Arn' is not present");
            }
        }

        /// <summary>
        /// Specifies containers in the inference pipeline. If not specified, the `primary_container` argument is required. Fields are documented below.
        /// </summary>
        [PolicyResourceProperty("containers", "_mUnknown_Containers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.ModelContainer>? _mValue_Containers;
        private bool _mUnknown_Containers;
        public List<Outputs.ModelContainer>? Containers
        {
            get
            {
                if (!_mUnknown_Containers) return _mValue_Containers;
                throw new UndeferrableValueException("Value 'Model.Containers' is not present");
            }
        }

        /// <summary>
        /// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
        /// </summary>
        [PolicyResourceProperty("enableNetworkIsolation", "_mUnknown_EnableNetworkIsolation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableNetworkIsolation;
        private bool _mUnknown_EnableNetworkIsolation;
        public bool? EnableNetworkIsolation
        {
            get
            {
                if (!_mUnknown_EnableNetworkIsolation) return _mValue_EnableNetworkIsolation;
                throw new UndeferrableValueException("Value 'Model.EnableNetworkIsolation' is not present");
            }
        }

        /// <summary>
        /// A role that SageMaker AI can assume to access model artifacts and docker images for deployment.
        /// </summary>
        [PolicyResourceProperty("executionRoleArn", "_mUnknown_ExecutionRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ExecutionRoleArn;
        private bool _mUnknown_ExecutionRoleArn;
        public string? ExecutionRoleArn
        {
            get
            {
                if (!_mUnknown_ExecutionRoleArn) return _mValue_ExecutionRoleArn;
                throw new UndeferrableValueException("Value 'Model.ExecutionRoleArn' is not present");
            }
        }

        /// <summary>
        /// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
        /// </summary>
        [PolicyResourceProperty("inferenceExecutionConfig", "_mUnknown_InferenceExecutionConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ModelInferenceExecutionConfig? _mValue_InferenceExecutionConfig;
        private bool _mUnknown_InferenceExecutionConfig;
        public Outputs.ModelInferenceExecutionConfig? InferenceExecutionConfig
        {
            get
            {
                if (!_mUnknown_InferenceExecutionConfig) return _mValue_InferenceExecutionConfig;
                throw new UndeferrableValueException("Value 'Model.InferenceExecutionConfig' is not present");
            }
        }

        /// <summary>
        /// The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Model.Name' is not present");
            }
        }

        /// <summary>
        /// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
        /// </summary>
        [PolicyResourceProperty("primaryContainer", "_mUnknown_PrimaryContainer")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ModelPrimaryContainer? _mValue_PrimaryContainer;
        private bool _mUnknown_PrimaryContainer;
        public Outputs.ModelPrimaryContainer? PrimaryContainer
        {
            get
            {
                if (!_mUnknown_PrimaryContainer) return _mValue_PrimaryContainer;
                throw new UndeferrableValueException("Value 'Model.PrimaryContainer' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Model.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Model.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
        /// </summary>
        [PolicyResourceProperty("vpcConfig", "_mUnknown_VpcConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ModelVpcConfig? _mValue_VpcConfig;
        private bool _mUnknown_VpcConfig;
        public Outputs.ModelVpcConfig? VpcConfig
        {
            get
            {
                if (!_mUnknown_VpcConfig) return _mValue_VpcConfig;
                throw new UndeferrableValueException("Value 'Model.VpcConfig' is not present");
            }
        }
    }

    [PolicyResourceType("aws:sagemaker/model:Model")]
    public sealed class ModelArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Specifies containers in the inference pipeline. If not specified, the `primary_container` argument is required. Fields are documented below.
        /// </summary>
        [PolicyResourceProperty("containers", "_mUnknown_Containers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.ModelContainerArgs>? _mValue_Containers;
        private bool _mUnknown_Containers;
        public List<Inputs.ModelContainerArgs>? Containers
        {
            get
            {
                if (!_mUnknown_Containers) return _mValue_Containers;
                throw new UndeferrableValueException("Value 'ModelArgs.Containers' is not present");
            }
        }

        /// <summary>
        /// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
        /// </summary>
        [PolicyResourceProperty("enableNetworkIsolation", "_mUnknown_EnableNetworkIsolation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableNetworkIsolation;
        private bool _mUnknown_EnableNetworkIsolation;
        public bool? EnableNetworkIsolation
        {
            get
            {
                if (!_mUnknown_EnableNetworkIsolation) return _mValue_EnableNetworkIsolation;
                throw new UndeferrableValueException("Value 'ModelArgs.EnableNetworkIsolation' is not present");
            }
        }

        /// <summary>
        /// A role that SageMaker AI can assume to access model artifacts and docker images for deployment.
        /// </summary>
        [PolicyResourceProperty("executionRoleArn", "_mUnknown_ExecutionRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ExecutionRoleArn;
        private bool _mUnknown_ExecutionRoleArn;
        public string? ExecutionRoleArn
        {
            get
            {
                if (!_mUnknown_ExecutionRoleArn) return _mValue_ExecutionRoleArn;
                throw new UndeferrableValueException("Value 'ModelArgs.ExecutionRoleArn' is not present");
            }
        }

        /// <summary>
        /// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
        /// </summary>
        [PolicyResourceProperty("inferenceExecutionConfig", "_mUnknown_InferenceExecutionConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ModelInferenceExecutionConfigArgs? _mValue_InferenceExecutionConfig;
        private bool _mUnknown_InferenceExecutionConfig;
        public Inputs.ModelInferenceExecutionConfigArgs? InferenceExecutionConfig
        {
            get
            {
                if (!_mUnknown_InferenceExecutionConfig) return _mValue_InferenceExecutionConfig;
                throw new UndeferrableValueException("Value 'ModelArgs.InferenceExecutionConfig' is not present");
            }
        }

        /// <summary>
        /// The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'ModelArgs.Name' is not present");
            }
        }

        /// <summary>
        /// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
        /// </summary>
        [PolicyResourceProperty("primaryContainer", "_mUnknown_PrimaryContainer")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ModelPrimaryContainerArgs? _mValue_PrimaryContainer;
        private bool _mUnknown_PrimaryContainer;
        public Inputs.ModelPrimaryContainerArgs? PrimaryContainer
        {
            get
            {
                if (!_mUnknown_PrimaryContainer) return _mValue_PrimaryContainer;
                throw new UndeferrableValueException("Value 'ModelArgs.PrimaryContainer' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ModelArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
        /// </summary>
        [PolicyResourceProperty("vpcConfig", "_mUnknown_VpcConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ModelVpcConfigArgs? _mValue_VpcConfig;
        private bool _mUnknown_VpcConfig;
        public Inputs.ModelVpcConfigArgs? VpcConfig
        {
            get
            {
                if (!_mUnknown_VpcConfig) return _mValue_VpcConfig;
                throw new UndeferrableValueException("Value 'ModelArgs.VpcConfig' is not present");
            }
        }
    }
}
