// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Sagemaker
{
    [PolicyResourceType("aws:sagemaker/studioLifecycleConfig:StudioLifecycleConfig")]
    public sealed class StudioLifecycleConfig : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer`, `JupyterLab`, `CodeEditor` and `KernelGateway`.
        /// </summary>
        [Input("studioLifecycleConfigAppType")]
        public string? StudioLifecycleConfigAppType;

        /// <summary>
        /// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
        /// </summary>
        [Input("studioLifecycleConfigContent")]
        public string? StudioLifecycleConfigContent;

        /// <summary>
        /// The name of the Studio Lifecycle Configuration to create.
        /// </summary>
        [Input("studioLifecycleConfigName")]
        public string? StudioLifecycleConfigName;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
