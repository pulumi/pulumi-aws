// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Sagemaker
{
    [PolicyResourceType("aws:sagemaker/appImageConfig:AppImageConfig")]
    public sealed class AppImageConfig : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The name of the App Image Config.
        /// </summary>
        [PolicyResourceProperty("appImageConfigName", "_mUnknown_AppImageConfigName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AppImageConfigName;
        private bool _mUnknown_AppImageConfigName;
        public string? AppImageConfigName
        {
            get
            {
                if (!_mUnknown_AppImageConfigName) return _mValue_AppImageConfigName;
                throw new UndeferrableValueException("Value 'AppImageConfig.AppImageConfigName' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this App Image Config.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'AppImageConfig.Arn' is not present");
            }
        }

        /// <summary>
        /// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor. See Code Editor App Image Config details below.
        /// </summary>
        [PolicyResourceProperty("codeEditorAppImageConfig", "_mUnknown_CodeEditorAppImageConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.AppImageConfigCodeEditorAppImageConfig? _mValue_CodeEditorAppImageConfig;
        private bool _mUnknown_CodeEditorAppImageConfig;
        public Outputs.AppImageConfigCodeEditorAppImageConfig? CodeEditorAppImageConfig
        {
            get
            {
                if (!_mUnknown_CodeEditorAppImageConfig) return _mValue_CodeEditorAppImageConfig;
                throw new UndeferrableValueException("Value 'AppImageConfig.CodeEditorAppImageConfig' is not present");
            }
        }

        /// <summary>
        /// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab. See Jupyter Lab Image Config details below.
        /// </summary>
        [PolicyResourceProperty("jupyterLabImageConfig", "_mUnknown_JupyterLabImageConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.AppImageConfigJupyterLabImageConfig? _mValue_JupyterLabImageConfig;
        private bool _mUnknown_JupyterLabImageConfig;
        public Outputs.AppImageConfigJupyterLabImageConfig? JupyterLabImageConfig
        {
            get
            {
                if (!_mUnknown_JupyterLabImageConfig) return _mValue_JupyterLabImageConfig;
                throw new UndeferrableValueException("Value 'AppImageConfig.JupyterLabImageConfig' is not present");
            }
        }

        /// <summary>
        /// The configuration for the file system and kernels in a SageMaker AI image running as a KernelGateway app. See Kernel Gateway Image Config details below.
        /// </summary>
        [PolicyResourceProperty("kernelGatewayImageConfig", "_mUnknown_KernelGatewayImageConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.AppImageConfigKernelGatewayImageConfig? _mValue_KernelGatewayImageConfig;
        private bool _mUnknown_KernelGatewayImageConfig;
        public Outputs.AppImageConfigKernelGatewayImageConfig? KernelGatewayImageConfig
        {
            get
            {
                if (!_mUnknown_KernelGatewayImageConfig) return _mValue_KernelGatewayImageConfig;
                throw new UndeferrableValueException("Value 'AppImageConfig.KernelGatewayImageConfig' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'AppImageConfig.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'AppImageConfig.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:sagemaker/appImageConfig:AppImageConfig")]
    public sealed class AppImageConfigArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The name of the App Image Config.
        /// </summary>
        [PolicyResourceProperty("appImageConfigName", "_mUnknown_AppImageConfigName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AppImageConfigName;
        private bool _mUnknown_AppImageConfigName;
        public string? AppImageConfigName
        {
            get
            {
                if (!_mUnknown_AppImageConfigName) return _mValue_AppImageConfigName;
                throw new UndeferrableValueException("Value 'AppImageConfigArgs.AppImageConfigName' is not present");
            }
        }

        /// <summary>
        /// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor. See Code Editor App Image Config details below.
        /// </summary>
        [PolicyResourceProperty("codeEditorAppImageConfig", "_mUnknown_CodeEditorAppImageConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.AppImageConfigCodeEditorAppImageConfigArgs? _mValue_CodeEditorAppImageConfig;
        private bool _mUnknown_CodeEditorAppImageConfig;
        public Inputs.AppImageConfigCodeEditorAppImageConfigArgs? CodeEditorAppImageConfig
        {
            get
            {
                if (!_mUnknown_CodeEditorAppImageConfig) return _mValue_CodeEditorAppImageConfig;
                throw new UndeferrableValueException("Value 'AppImageConfigArgs.CodeEditorAppImageConfig' is not present");
            }
        }

        /// <summary>
        /// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab. See Jupyter Lab Image Config details below.
        /// </summary>
        [PolicyResourceProperty("jupyterLabImageConfig", "_mUnknown_JupyterLabImageConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.AppImageConfigJupyterLabImageConfigArgs? _mValue_JupyterLabImageConfig;
        private bool _mUnknown_JupyterLabImageConfig;
        public Inputs.AppImageConfigJupyterLabImageConfigArgs? JupyterLabImageConfig
        {
            get
            {
                if (!_mUnknown_JupyterLabImageConfig) return _mValue_JupyterLabImageConfig;
                throw new UndeferrableValueException("Value 'AppImageConfigArgs.JupyterLabImageConfig' is not present");
            }
        }

        /// <summary>
        /// The configuration for the file system and kernels in a SageMaker AI image running as a KernelGateway app. See Kernel Gateway Image Config details below.
        /// </summary>
        [PolicyResourceProperty("kernelGatewayImageConfig", "_mUnknown_KernelGatewayImageConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.AppImageConfigKernelGatewayImageConfigArgs? _mValue_KernelGatewayImageConfig;
        private bool _mUnknown_KernelGatewayImageConfig;
        public Inputs.AppImageConfigKernelGatewayImageConfigArgs? KernelGatewayImageConfig
        {
            get
            {
                if (!_mUnknown_KernelGatewayImageConfig) return _mValue_KernelGatewayImageConfig;
                throw new UndeferrableValueException("Value 'AppImageConfigArgs.KernelGatewayImageConfig' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'AppImageConfigArgs.Tags' is not present");
            }
        }
    }
}
