// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Sagemaker.Outputs
{
    public sealed class DomainDomainSettings
    {
        /// <summary>
        /// A collection of settings that configure the domainâ€™s Docker interaction. see `docker_settings` Block below.
        /// </summary>
        [PolicyResourceProperty("dockerSettings", "_mUnknown_DockerSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DomainDomainSettingsDockerSettings? _mValue_DockerSettings;
        private bool _mUnknown_DockerSettings;
        public Outputs.DomainDomainSettingsDockerSettings? DockerSettings
        {
            get
            {
                if (!_mUnknown_DockerSettings) return _mValue_DockerSettings;
                throw new UndeferrableValueException("Value 'DomainDomainSettings.DockerSettings' is not present");
            }
        }

        /// <summary>
        /// The configuration for attaching a SageMaker AI user profile name to the execution role as a sts:SourceIdentity key [AWS Docs](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html). Valid values are `USER_PROFILE_NAME` and `DISABLED`.
        /// </summary>
        [PolicyResourceProperty("executionRoleIdentityConfig", "_mUnknown_ExecutionRoleIdentityConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ExecutionRoleIdentityConfig;
        private bool _mUnknown_ExecutionRoleIdentityConfig;
        public string? ExecutionRoleIdentityConfig
        {
            get
            {
                if (!_mUnknown_ExecutionRoleIdentityConfig) return _mValue_ExecutionRoleIdentityConfig;
                throw new UndeferrableValueException("Value 'DomainDomainSettings.ExecutionRoleIdentityConfig' is not present");
            }
        }

        /// <summary>
        /// A collection of settings that configure the RStudioServerPro Domain-level app. see `r_studio_server_pro_domain_settings` Block below.
        /// </summary>
        [PolicyResourceProperty("rStudioServerProDomainSettings", "_mUnknown_RStudioServerProDomainSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DomainDomainSettingsRStudioServerProDomainSettings? _mValue_RStudioServerProDomainSettings;
        private bool _mUnknown_RStudioServerProDomainSettings;
        public Outputs.DomainDomainSettingsRStudioServerProDomainSettings? RStudioServerProDomainSettings
        {
            get
            {
                if (!_mUnknown_RStudioServerProDomainSettings) return _mValue_RStudioServerProDomainSettings;
                throw new UndeferrableValueException("Value 'DomainDomainSettings.RStudioServerProDomainSettings' is not present");
            }
        }

        /// <summary>
        /// The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        /// </summary>
        [PolicyResourceProperty("securityGroupIds", "_mUnknown_SecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecurityGroupIds;
        private bool _mUnknown_SecurityGroupIds;
        public List<string>? SecurityGroupIds
        {
            get
            {
                if (!_mUnknown_SecurityGroupIds) return _mValue_SecurityGroupIds;
                throw new UndeferrableValueException("Value 'DomainDomainSettings.SecurityGroupIds' is not present");
            }
        }
    }
}
