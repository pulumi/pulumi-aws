// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Sagemaker.Outputs
{
    public sealed class ModelPrimaryContainer
    {
        /// <summary>
        /// The DNS host name for the container.
        /// </summary>
        [PolicyResourceProperty("containerHostname", "_mUnknown_ContainerHostname")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ContainerHostname;
        private bool _mUnknown_ContainerHostname;
        public string? ContainerHostname
        {
            get
            {
                if (!_mUnknown_ContainerHostname) return _mValue_ContainerHostname;
                throw new UndeferrableValueException("Value 'ModelPrimaryContainer.ContainerHostname' is not present");
            }
        }

        /// <summary>
        /// Environment variables for the Docker container.
        /// A list of key value pairs.
        /// </summary>
        [PolicyResourceProperty("environment", "_mUnknown_Environment")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Environment;
        private bool _mUnknown_Environment;
        public Dictionary<string, string>? Environment
        {
            get
            {
                if (!_mUnknown_Environment) return _mValue_Environment;
                throw new UndeferrableValueException("Value 'ModelPrimaryContainer.Environment' is not present");
            }
        }

        /// <summary>
        /// The registry path where the inference code image is stored in Amazon ECR.
        /// </summary>
        [PolicyResourceProperty("image", "_mUnknown_Image")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Image;
        private bool _mUnknown_Image;
        public string? Image
        {
            get
            {
                if (!_mUnknown_Image) return _mValue_Image;
                throw new UndeferrableValueException("Value 'ModelPrimaryContainer.Image' is not present");
            }
        }

        /// <summary>
        /// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
        /// </summary>
        [PolicyResourceProperty("imageConfig", "_mUnknown_ImageConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ModelPrimaryContainerImageConfig? _mValue_ImageConfig;
        private bool _mUnknown_ImageConfig;
        public Outputs.ModelPrimaryContainerImageConfig? ImageConfig
        {
            get
            {
                if (!_mUnknown_ImageConfig) return _mValue_ImageConfig;
                throw new UndeferrableValueException("Value 'ModelPrimaryContainer.ImageConfig' is not present");
            }
        }

        /// <summary>
        /// The inference specification name in the model package version.
        /// </summary>
        [PolicyResourceProperty("inferenceSpecificationName", "_mUnknown_InferenceSpecificationName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InferenceSpecificationName;
        private bool _mUnknown_InferenceSpecificationName;
        public string? InferenceSpecificationName
        {
            get
            {
                if (!_mUnknown_InferenceSpecificationName) return _mValue_InferenceSpecificationName;
                throw new UndeferrableValueException("Value 'ModelPrimaryContainer.InferenceSpecificationName' is not present");
            }
        }

        /// <summary>
        /// The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        /// </summary>
        [PolicyResourceProperty("mode", "_mUnknown_Mode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Mode;
        private bool _mUnknown_Mode;
        public string? Mode
        {
            get
            {
                if (!_mUnknown_Mode) return _mValue_Mode;
                throw new UndeferrableValueException("Value 'ModelPrimaryContainer.Mode' is not present");
            }
        }

        /// <summary>
        /// The location of model data to deploy. Use this for uncompressed model deployment. For information about how to deploy an uncompressed model, see [Deploying uncompressed models](https://docs.aws.amazon.com/sagemaker/latest/dg/large-model-inference-uncompressed.html) in the _AWS SageMaker AI Developer Guide_.
        /// </summary>
        [PolicyResourceProperty("modelDataSource", "_mUnknown_ModelDataSource")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ModelPrimaryContainerModelDataSource? _mValue_ModelDataSource;
        private bool _mUnknown_ModelDataSource;
        public Outputs.ModelPrimaryContainerModelDataSource? ModelDataSource
        {
            get
            {
                if (!_mUnknown_ModelDataSource) return _mValue_ModelDataSource;
                throw new UndeferrableValueException("Value 'ModelPrimaryContainer.ModelDataSource' is not present");
            }
        }

        /// <summary>
        /// The URL for the S3 location where model artifacts are stored.
        /// </summary>
        [PolicyResourceProperty("modelDataUrl", "_mUnknown_ModelDataUrl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ModelDataUrl;
        private bool _mUnknown_ModelDataUrl;
        public string? ModelDataUrl
        {
            get
            {
                if (!_mUnknown_ModelDataUrl) return _mValue_ModelDataUrl;
                throw new UndeferrableValueException("Value 'ModelPrimaryContainer.ModelDataUrl' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the model package to use to create the model.
        /// </summary>
        [PolicyResourceProperty("modelPackageName", "_mUnknown_ModelPackageName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ModelPackageName;
        private bool _mUnknown_ModelPackageName;
        public string? ModelPackageName
        {
            get
            {
                if (!_mUnknown_ModelPackageName) return _mValue_ModelPackageName;
                throw new UndeferrableValueException("Value 'ModelPrimaryContainer.ModelPackageName' is not present");
            }
        }

        /// <summary>
        /// Specifies additional configuration for multi-model endpoints. see Multi Model Config.
        /// </summary>
        [PolicyResourceProperty("multiModelConfig", "_mUnknown_MultiModelConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ModelPrimaryContainerMultiModelConfig? _mValue_MultiModelConfig;
        private bool _mUnknown_MultiModelConfig;
        public Outputs.ModelPrimaryContainerMultiModelConfig? MultiModelConfig
        {
            get
            {
                if (!_mUnknown_MultiModelConfig) return _mValue_MultiModelConfig;
                throw new UndeferrableValueException("Value 'ModelPrimaryContainer.MultiModelConfig' is not present");
            }
        }
    }
}
