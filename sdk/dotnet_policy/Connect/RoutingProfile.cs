// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Connect
{
    [PolicyResourceType("aws:connect/routingProfile:RoutingProfile")]
    public sealed class RoutingProfile : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the Routing Profile.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'RoutingProfile.Arn' is not present");
            }
        }

        /// <summary>
        /// Specifies the default outbound queue for the Routing Profile.
        /// </summary>
        [PolicyResourceProperty("defaultOutboundQueueId", "_mUnknown_DefaultOutboundQueueId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultOutboundQueueId;
        private bool _mUnknown_DefaultOutboundQueueId;
        public string? DefaultOutboundQueueId
        {
            get
            {
                if (!_mUnknown_DefaultOutboundQueueId) return _mValue_DefaultOutboundQueueId;
                throw new UndeferrableValueException("Value 'RoutingProfile.DefaultOutboundQueueId' is not present");
            }
        }

        /// <summary>
        /// Specifies the description of the Routing Profile.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'RoutingProfile.Description' is not present");
            }
        }

        /// <summary>
        /// Specifies the identifier of the hosting Amazon Connect Instance.
        /// </summary>
        [PolicyResourceProperty("instanceId", "_mUnknown_InstanceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceId;
        private bool _mUnknown_InstanceId;
        public string? InstanceId
        {
            get
            {
                if (!_mUnknown_InstanceId) return _mValue_InstanceId;
                throw new UndeferrableValueException("Value 'RoutingProfile.InstanceId' is not present");
            }
        }

        /// <summary>
        /// One or more `media_concurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `media_concurrencies` block is documented below.
        /// </summary>
        [PolicyResourceProperty("mediaConcurrencies", "_mUnknown_MediaConcurrencies")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.RoutingProfileMediaConcurrency>? _mValue_MediaConcurrencies;
        private bool _mUnknown_MediaConcurrencies;
        public List<Outputs.RoutingProfileMediaConcurrency>? MediaConcurrencies
        {
            get
            {
                if (!_mUnknown_MediaConcurrencies) return _mValue_MediaConcurrencies;
                throw new UndeferrableValueException("Value 'RoutingProfile.MediaConcurrencies' is not present");
            }
        }

        /// <summary>
        /// Specifies the name of the Routing Profile.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'RoutingProfile.Name' is not present");
            }
        }

        /// <summary>
        /// One or more `queue_configs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queue_configs` block is documented below.
        /// </summary>
        [PolicyResourceProperty("queueConfigs", "_mUnknown_QueueConfigs")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.RoutingProfileQueueConfig>? _mValue_QueueConfigs;
        private bool _mUnknown_QueueConfigs;
        public List<Outputs.RoutingProfileQueueConfig>? QueueConfigs
        {
            get
            {
                if (!_mUnknown_QueueConfigs) return _mValue_QueueConfigs;
                throw new UndeferrableValueException("Value 'RoutingProfile.QueueConfigs' is not present");
            }
        }

        /// <summary>
        /// The identifier for the Routing Profile.
        /// </summary>
        [PolicyResourceProperty("routingProfileId", "_mUnknown_RoutingProfileId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoutingProfileId;
        private bool _mUnknown_RoutingProfileId;
        public string? RoutingProfileId
        {
            get
            {
                if (!_mUnknown_RoutingProfileId) return _mValue_RoutingProfileId;
                throw new UndeferrableValueException("Value 'RoutingProfile.RoutingProfileId' is not present");
            }
        }

        /// <summary>
        /// Tags to apply to the Routing Profile. If configured with a provider
        /// `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'RoutingProfile.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'RoutingProfile.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:connect/routingProfile:RoutingProfile")]
    public sealed class RoutingProfileArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Specifies the default outbound queue for the Routing Profile.
        /// </summary>
        [PolicyResourceProperty("defaultOutboundQueueId", "_mUnknown_DefaultOutboundQueueId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultOutboundQueueId;
        private bool _mUnknown_DefaultOutboundQueueId;
        public string? DefaultOutboundQueueId
        {
            get
            {
                if (!_mUnknown_DefaultOutboundQueueId) return _mValue_DefaultOutboundQueueId;
                throw new UndeferrableValueException("Value 'RoutingProfileArgs.DefaultOutboundQueueId' is not present");
            }
        }

        /// <summary>
        /// Specifies the description of the Routing Profile.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'RoutingProfileArgs.Description' is not present");
            }
        }

        /// <summary>
        /// Specifies the identifier of the hosting Amazon Connect Instance.
        /// </summary>
        [PolicyResourceProperty("instanceId", "_mUnknown_InstanceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceId;
        private bool _mUnknown_InstanceId;
        public string? InstanceId
        {
            get
            {
                if (!_mUnknown_InstanceId) return _mValue_InstanceId;
                throw new UndeferrableValueException("Value 'RoutingProfileArgs.InstanceId' is not present");
            }
        }

        /// <summary>
        /// One or more `media_concurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `media_concurrencies` block is documented below.
        /// </summary>
        [PolicyResourceProperty("mediaConcurrencies", "_mUnknown_MediaConcurrencies")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.RoutingProfileMediaConcurrencyArgs>? _mValue_MediaConcurrencies;
        private bool _mUnknown_MediaConcurrencies;
        public List<Inputs.RoutingProfileMediaConcurrencyArgs>? MediaConcurrencies
        {
            get
            {
                if (!_mUnknown_MediaConcurrencies) return _mValue_MediaConcurrencies;
                throw new UndeferrableValueException("Value 'RoutingProfileArgs.MediaConcurrencies' is not present");
            }
        }

        /// <summary>
        /// Specifies the name of the Routing Profile.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'RoutingProfileArgs.Name' is not present");
            }
        }

        /// <summary>
        /// One or more `queue_configs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queue_configs` block is documented below.
        /// </summary>
        [PolicyResourceProperty("queueConfigs", "_mUnknown_QueueConfigs")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.RoutingProfileQueueConfigArgs>? _mValue_QueueConfigs;
        private bool _mUnknown_QueueConfigs;
        public List<Inputs.RoutingProfileQueueConfigArgs>? QueueConfigs
        {
            get
            {
                if (!_mUnknown_QueueConfigs) return _mValue_QueueConfigs;
                throw new UndeferrableValueException("Value 'RoutingProfileArgs.QueueConfigs' is not present");
            }
        }

        /// <summary>
        /// Tags to apply to the Routing Profile. If configured with a provider
        /// `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'RoutingProfileArgs.Tags' is not present");
            }
        }
    }
}
