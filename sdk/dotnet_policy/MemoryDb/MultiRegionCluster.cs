// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.MemoryDb
{
    [PolicyResourceType("aws:memorydb/multiRegionCluster:MultiRegionCluster")]
    public sealed class MultiRegionCluster : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the multi-region cluster.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.Arn' is not present");
            }
        }

        /// <summary>
        /// description for the multi-region cluster.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.Description' is not present");
            }
        }

        /// <summary>
        /// The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
        /// </summary>
        [PolicyResourceProperty("engine", "_mUnknown_Engine")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Engine;
        private bool _mUnknown_Engine;
        public string? Engine
        {
            get
            {
                if (!_mUnknown_Engine) return _mValue_Engine;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.Engine' is not present");
            }
        }

        /// <summary>
        /// The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
        /// </summary>
        [PolicyResourceProperty("engineVersion", "_mUnknown_EngineVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EngineVersion;
        private bool _mUnknown_EngineVersion;
        public string? EngineVersion
        {
            get
            {
                if (!_mUnknown_EngineVersion) return _mValue_EngineVersion;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.EngineVersion' is not present");
            }
        }

        /// <summary>
        /// The name of the multi-region cluster.
        /// </summary>
        [PolicyResourceProperty("multiRegionClusterName", "_mUnknown_MultiRegionClusterName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MultiRegionClusterName;
        private bool _mUnknown_MultiRegionClusterName;
        public string? MultiRegionClusterName
        {
            get
            {
                if (!_mUnknown_MultiRegionClusterName) return _mValue_MultiRegionClusterName;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.MultiRegionClusterName' is not present");
            }
        }

        /// <summary>
        /// A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
        /// </summary>
        [PolicyResourceProperty("multiRegionClusterNameSuffix", "_mUnknown_MultiRegionClusterNameSuffix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MultiRegionClusterNameSuffix;
        private bool _mUnknown_MultiRegionClusterNameSuffix;
        public string? MultiRegionClusterNameSuffix
        {
            get
            {
                if (!_mUnknown_MultiRegionClusterNameSuffix) return _mValue_MultiRegionClusterNameSuffix;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.MultiRegionClusterNameSuffix' is not present");
            }
        }

        /// <summary>
        /// The name of the multi-region parameter group to be associated with the cluster.
        /// </summary>
        [PolicyResourceProperty("multiRegionParameterGroupName", "_mUnknown_MultiRegionParameterGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MultiRegionParameterGroupName;
        private bool _mUnknown_MultiRegionParameterGroupName;
        public string? MultiRegionParameterGroupName
        {
            get
            {
                if (!_mUnknown_MultiRegionParameterGroupName) return _mValue_MultiRegionParameterGroupName;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.MultiRegionParameterGroupName' is not present");
            }
        }

        /// <summary>
        /// The node type to be used for the multi-region cluster.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("nodeType", "_mUnknown_NodeType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NodeType;
        private bool _mUnknown_NodeType;
        public string? NodeType
        {
            get
            {
                if (!_mUnknown_NodeType) return _mValue_NodeType;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.NodeType' is not present");
            }
        }

        /// <summary>
        /// The number of shards for the multi-region cluster.
        /// </summary>
        [PolicyResourceProperty("numShards", "_mUnknown_NumShards")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_NumShards;
        private bool _mUnknown_NumShards;
        public int? NumShards
        {
            get
            {
                if (!_mUnknown_NumShards) return _mValue_NumShards;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.NumShards' is not present");
            }
        }

        [PolicyResourceProperty("status", "_mUnknown_Status")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Status;
        private bool _mUnknown_Status;
        public string? Status
        {
            get
            {
                if (!_mUnknown_Status) return _mValue_Status;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.Status' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.TagsAll' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.MultiRegionClusterTimeouts? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Outputs.MultiRegionClusterTimeouts? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.Timeouts' is not present");
            }
        }

        /// <summary>
        /// A flag to enable in-transit encryption on the cluster.
        /// </summary>
        [PolicyResourceProperty("tlsEnabled", "_mUnknown_TlsEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_TlsEnabled;
        private bool _mUnknown_TlsEnabled;
        public bool? TlsEnabled
        {
            get
            {
                if (!_mUnknown_TlsEnabled) return _mValue_TlsEnabled;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.TlsEnabled' is not present");
            }
        }

        [PolicyResourceProperty("updateStrategy", "_mUnknown_UpdateStrategy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UpdateStrategy;
        private bool _mUnknown_UpdateStrategy;
        public string? UpdateStrategy
        {
            get
            {
                if (!_mUnknown_UpdateStrategy) return _mValue_UpdateStrategy;
                throw new UndeferrableValueException("Value 'MultiRegionCluster.UpdateStrategy' is not present");
            }
        }
    }

    [PolicyResourceType("aws:memorydb/multiRegionCluster:MultiRegionCluster")]
    public sealed class MultiRegionClusterArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// description for the multi-region cluster.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'MultiRegionClusterArgs.Description' is not present");
            }
        }

        /// <summary>
        /// The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
        /// </summary>
        [PolicyResourceProperty("engine", "_mUnknown_Engine")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Engine;
        private bool _mUnknown_Engine;
        public string? Engine
        {
            get
            {
                if (!_mUnknown_Engine) return _mValue_Engine;
                throw new UndeferrableValueException("Value 'MultiRegionClusterArgs.Engine' is not present");
            }
        }

        /// <summary>
        /// The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
        /// </summary>
        [PolicyResourceProperty("engineVersion", "_mUnknown_EngineVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EngineVersion;
        private bool _mUnknown_EngineVersion;
        public string? EngineVersion
        {
            get
            {
                if (!_mUnknown_EngineVersion) return _mValue_EngineVersion;
                throw new UndeferrableValueException("Value 'MultiRegionClusterArgs.EngineVersion' is not present");
            }
        }

        /// <summary>
        /// A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
        /// </summary>
        [PolicyResourceProperty("multiRegionClusterNameSuffix", "_mUnknown_MultiRegionClusterNameSuffix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MultiRegionClusterNameSuffix;
        private bool _mUnknown_MultiRegionClusterNameSuffix;
        public string? MultiRegionClusterNameSuffix
        {
            get
            {
                if (!_mUnknown_MultiRegionClusterNameSuffix) return _mValue_MultiRegionClusterNameSuffix;
                throw new UndeferrableValueException("Value 'MultiRegionClusterArgs.MultiRegionClusterNameSuffix' is not present");
            }
        }

        /// <summary>
        /// The name of the multi-region parameter group to be associated with the cluster.
        /// </summary>
        [PolicyResourceProperty("multiRegionParameterGroupName", "_mUnknown_MultiRegionParameterGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MultiRegionParameterGroupName;
        private bool _mUnknown_MultiRegionParameterGroupName;
        public string? MultiRegionParameterGroupName
        {
            get
            {
                if (!_mUnknown_MultiRegionParameterGroupName) return _mValue_MultiRegionParameterGroupName;
                throw new UndeferrableValueException("Value 'MultiRegionClusterArgs.MultiRegionParameterGroupName' is not present");
            }
        }

        /// <summary>
        /// The node type to be used for the multi-region cluster.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("nodeType", "_mUnknown_NodeType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NodeType;
        private bool _mUnknown_NodeType;
        public string? NodeType
        {
            get
            {
                if (!_mUnknown_NodeType) return _mValue_NodeType;
                throw new UndeferrableValueException("Value 'MultiRegionClusterArgs.NodeType' is not present");
            }
        }

        /// <summary>
        /// The number of shards for the multi-region cluster.
        /// </summary>
        [PolicyResourceProperty("numShards", "_mUnknown_NumShards")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_NumShards;
        private bool _mUnknown_NumShards;
        public int? NumShards
        {
            get
            {
                if (!_mUnknown_NumShards) return _mValue_NumShards;
                throw new UndeferrableValueException("Value 'MultiRegionClusterArgs.NumShards' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'MultiRegionClusterArgs.Tags' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.MultiRegionClusterTimeoutsArgs? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Inputs.MultiRegionClusterTimeoutsArgs? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'MultiRegionClusterArgs.Timeouts' is not present");
            }
        }

        /// <summary>
        /// A flag to enable in-transit encryption on the cluster.
        /// </summary>
        [PolicyResourceProperty("tlsEnabled", "_mUnknown_TlsEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_TlsEnabled;
        private bool _mUnknown_TlsEnabled;
        public bool? TlsEnabled
        {
            get
            {
                if (!_mUnknown_TlsEnabled) return _mValue_TlsEnabled;
                throw new UndeferrableValueException("Value 'MultiRegionClusterArgs.TlsEnabled' is not present");
            }
        }

        [PolicyResourceProperty("updateStrategy", "_mUnknown_UpdateStrategy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UpdateStrategy;
        private bool _mUnknown_UpdateStrategy;
        public string? UpdateStrategy
        {
            get
            {
                if (!_mUnknown_UpdateStrategy) return _mValue_UpdateStrategy;
                throw new UndeferrableValueException("Value 'MultiRegionClusterArgs.UpdateStrategy' is not present");
            }
        }
    }
}
