// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.FinSpace.Outputs
{
    public sealed class KxClusterAutoScalingConfiguration
    {
        /// <summary>
        /// Metric your cluster will track in order to scale in and out. For example, CPU_UTILIZATION_PERCENTAGE is the average CPU usage across all nodes in a cluster.
        /// </summary>
        [PolicyResourceProperty("autoScalingMetric", "_mUnknown_AutoScalingMetric")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AutoScalingMetric;
        private bool _mUnknown_AutoScalingMetric;
        public string? AutoScalingMetric
        {
            get
            {
                if (!_mUnknown_AutoScalingMetric) return _mValue_AutoScalingMetric;
                throw new UndeferrableValueException("Value 'KxClusterAutoScalingConfiguration.AutoScalingMetric' is not present");
            }
        }

        /// <summary>
        /// Highest number of nodes to scale. Cannot be greater than 5
        /// </summary>
        [PolicyResourceProperty("maxNodeCount", "_mUnknown_MaxNodeCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxNodeCount;
        private bool _mUnknown_MaxNodeCount;
        public int? MaxNodeCount
        {
            get
            {
                if (!_mUnknown_MaxNodeCount) return _mValue_MaxNodeCount;
                throw new UndeferrableValueException("Value 'KxClusterAutoScalingConfiguration.MaxNodeCount' is not present");
            }
        }

        /// <summary>
        /// Desired value of chosen `auto_scaling_metric`. When metric drops below this value, cluster will scale in. When metric goes above this value, cluster will scale out. Can be set between 0 and 100 percent.
        /// </summary>
        [PolicyResourceProperty("metricTarget", "_mUnknown_MetricTarget")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private double? _mValue_MetricTarget;
        private bool _mUnknown_MetricTarget;
        public double? MetricTarget
        {
            get
            {
                if (!_mUnknown_MetricTarget) return _mValue_MetricTarget;
                throw new UndeferrableValueException("Value 'KxClusterAutoScalingConfiguration.MetricTarget' is not present");
            }
        }

        /// <summary>
        /// Lowest number of nodes to scale. Must be at least 1 and less than the `max_node_count`. If nodes in cluster belong to multiple availability zones, then `min_node_count` must be at least 3.
        /// </summary>
        [PolicyResourceProperty("minNodeCount", "_mUnknown_MinNodeCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MinNodeCount;
        private bool _mUnknown_MinNodeCount;
        public int? MinNodeCount
        {
            get
            {
                if (!_mUnknown_MinNodeCount) return _mValue_MinNodeCount;
                throw new UndeferrableValueException("Value 'KxClusterAutoScalingConfiguration.MinNodeCount' is not present");
            }
        }

        /// <summary>
        /// Duration in seconds that FinSpace will wait after a scale in event before initiating another scaling event.
        /// </summary>
        [PolicyResourceProperty("scaleInCooldownSeconds", "_mUnknown_ScaleInCooldownSeconds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private double? _mValue_ScaleInCooldownSeconds;
        private bool _mUnknown_ScaleInCooldownSeconds;
        public double? ScaleInCooldownSeconds
        {
            get
            {
                if (!_mUnknown_ScaleInCooldownSeconds) return _mValue_ScaleInCooldownSeconds;
                throw new UndeferrableValueException("Value 'KxClusterAutoScalingConfiguration.ScaleInCooldownSeconds' is not present");
            }
        }

        /// <summary>
        /// Duration in seconds that FinSpace will wait after a scale out event before initiating another scaling event.
        /// </summary>
        [PolicyResourceProperty("scaleOutCooldownSeconds", "_mUnknown_ScaleOutCooldownSeconds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private double? _mValue_ScaleOutCooldownSeconds;
        private bool _mUnknown_ScaleOutCooldownSeconds;
        public double? ScaleOutCooldownSeconds
        {
            get
            {
                if (!_mUnknown_ScaleOutCooldownSeconds) return _mValue_ScaleOutCooldownSeconds;
                throw new UndeferrableValueException("Value 'KxClusterAutoScalingConfiguration.ScaleOutCooldownSeconds' is not present");
            }
        }
    }
}
