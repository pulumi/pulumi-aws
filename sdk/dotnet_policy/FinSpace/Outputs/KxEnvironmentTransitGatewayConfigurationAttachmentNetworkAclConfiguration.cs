// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.FinSpace.Outputs
{
    public sealed class KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration
    {
        /// <summary>
        /// The IPv4 network range to allow or deny, in CIDR notation. The specified CIDR block is modified to its canonical form. For example, `100.68.0.18/18` will be converted to `100.68.0.0/18`.
        /// </summary>
        [PolicyResourceProperty("cidrBlock", "_mUnknown_CidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CidrBlock;
        private bool _mUnknown_CidrBlock;
        public string? CidrBlock
        {
            get
            {
                if (!_mUnknown_CidrBlock) return _mValue_CidrBlock;
                throw new UndeferrableValueException("Value 'KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration.CidrBlock' is not present");
            }
        }

        /// <summary>
        /// Defines the ICMP protocol that consists of the ICMP type and code. Defined below.
        /// </summary>
        [PolicyResourceProperty("icmpTypeCode", "_mUnknown_IcmpTypeCode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode? _mValue_IcmpTypeCode;
        private bool _mUnknown_IcmpTypeCode;
        public Outputs.KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode? IcmpTypeCode
        {
            get
            {
                if (!_mUnknown_IcmpTypeCode) return _mValue_IcmpTypeCode;
                throw new UndeferrableValueException("Value 'KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration.IcmpTypeCode' is not present");
            }
        }

        /// <summary>
        /// Range of ports the rule applies to. Defined below.
        /// </summary>
        [PolicyResourceProperty("portRange", "_mUnknown_PortRange")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange? _mValue_PortRange;
        private bool _mUnknown_PortRange;
        public Outputs.KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange? PortRange
        {
            get
            {
                if (!_mUnknown_PortRange) return _mValue_PortRange;
                throw new UndeferrableValueException("Value 'KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration.PortRange' is not present");
            }
        }

        /// <summary>
        /// Protocol number. A value of `1` means all the protocols.
        /// </summary>
        [PolicyResourceProperty("protocol", "_mUnknown_Protocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Protocol;
        private bool _mUnknown_Protocol;
        public string? Protocol
        {
            get
            {
                if (!_mUnknown_Protocol) return _mValue_Protocol;
                throw new UndeferrableValueException("Value 'KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration.Protocol' is not present");
            }
        }

        /// <summary>
        /// Indicates whether to `allow` or `deny` the traffic that matches the rule.
        /// </summary>
        [PolicyResourceProperty("ruleAction", "_mUnknown_RuleAction")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RuleAction;
        private bool _mUnknown_RuleAction;
        public string? RuleAction
        {
            get
            {
                if (!_mUnknown_RuleAction) return _mValue_RuleAction;
                throw new UndeferrableValueException("Value 'KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration.RuleAction' is not present");
            }
        }

        /// <summary>
        /// Rule number for the entry. All the network ACL entries are processed in ascending order by rule number.
        /// </summary>
        [PolicyResourceProperty("ruleNumber", "_mUnknown_RuleNumber")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RuleNumber;
        private bool _mUnknown_RuleNumber;
        public int? RuleNumber
        {
            get
            {
                if (!_mUnknown_RuleNumber) return _mValue_RuleNumber;
                throw new UndeferrableValueException("Value 'KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration.RuleNumber' is not present");
            }
        }
    }
}
