// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.FinSpace
{
    [PolicyResourceType("aws:finspace/kxVolume:KxVolume")]
    public sealed class KxVolume : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Amazon Resource Name (ARN) identifier of the KX volume.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'KxVolume.Arn' is not present");
            }
        }

        [PolicyResourceProperty("attachedClusters", "_mUnknown_AttachedClusters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.KxVolumeAttachedCluster>? _mValue_AttachedClusters;
        private bool _mUnknown_AttachedClusters;
        public List<Outputs.KxVolumeAttachedCluster>? AttachedClusters
        {
            get
            {
                if (!_mUnknown_AttachedClusters) return _mValue_AttachedClusters;
                throw new UndeferrableValueException("Value 'KxVolume.AttachedClusters' is not present");
            }
        }

        /// <summary>
        /// The identifier of the AWS Availability Zone IDs.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("availabilityZones", "_mUnknown_AvailabilityZones")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_AvailabilityZones;
        private bool _mUnknown_AvailabilityZones;
        public List<string>? AvailabilityZones
        {
            get
            {
                if (!_mUnknown_AvailabilityZones) return _mValue_AvailabilityZones;
                throw new UndeferrableValueException("Value 'KxVolume.AvailabilityZones' is not present");
            }
        }

        /// <summary>
        /// The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
        /// * `SINGLE` - Assigns one availability zone per volume.
        /// </summary>
        [PolicyResourceProperty("azMode", "_mUnknown_AzMode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AzMode;
        private bool _mUnknown_AzMode;
        public string? AzMode
        {
            get
            {
                if (!_mUnknown_AzMode) return _mValue_AzMode;
                throw new UndeferrableValueException("Value 'KxVolume.AzMode' is not present");
            }
        }

        /// <summary>
        /// The timestamp at which the volume was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        /// </summary>
        [PolicyResourceProperty("createdTimestamp", "_mUnknown_CreatedTimestamp")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CreatedTimestamp;
        private bool _mUnknown_CreatedTimestamp;
        public string? CreatedTimestamp
        {
            get
            {
                if (!_mUnknown_CreatedTimestamp) return _mValue_CreatedTimestamp;
                throw new UndeferrableValueException("Value 'KxVolume.CreatedTimestamp' is not present");
            }
        }

        /// <summary>
        /// Description of the volume.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'KxVolume.Description' is not present");
            }
        }

        /// <summary>
        /// A unique identifier for the kdb environment, whose clusters can attach to the volume.
        /// </summary>
        [PolicyResourceProperty("environmentId", "_mUnknown_EnvironmentId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EnvironmentId;
        private bool _mUnknown_EnvironmentId;
        public string? EnvironmentId
        {
            get
            {
                if (!_mUnknown_EnvironmentId) return _mValue_EnvironmentId;
                throw new UndeferrableValueException("Value 'KxVolume.EnvironmentId' is not present");
            }
        }

        /// <summary>
        /// Last timestamp at which the volume was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
        /// </summary>
        [PolicyResourceProperty("lastModifiedTimestamp", "_mUnknown_LastModifiedTimestamp")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LastModifiedTimestamp;
        private bool _mUnknown_LastModifiedTimestamp;
        public string? LastModifiedTimestamp
        {
            get
            {
                if (!_mUnknown_LastModifiedTimestamp) return _mValue_LastModifiedTimestamp;
                throw new UndeferrableValueException("Value 'KxVolume.LastModifiedTimestamp' is not present");
            }
        }

        /// <summary>
        /// Unique name for the volumr that you want to create.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'KxVolume.Name' is not present");
            }
        }

        /// <summary>
        /// Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volume_type` is `NAS_1`. See `nas1_configuration` Argument Reference below.
        /// </summary>
        [PolicyResourceProperty("nas1Configurations", "_mUnknown_Nas1Configurations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.KxVolumeNas1Configuration>? _mValue_Nas1Configurations;
        private bool _mUnknown_Nas1Configurations;
        public List<Outputs.KxVolumeNas1Configuration>? Nas1Configurations
        {
            get
            {
                if (!_mUnknown_Nas1Configurations) return _mValue_Nas1Configurations;
                throw new UndeferrableValueException("Value 'KxVolume.Nas1Configurations' is not present");
            }
        }

        /// <summary>
        /// The status of volume creation.
        /// * `CREATING` – The volume creation is in progress.
        /// * `CREATE_FAILED` – The volume creation has failed.
        /// * `ACTIVE` – The volume is active.
        /// * `UPDATING` – The volume is in the process of being updated.
        /// * `UPDATE_FAILED` – The update action failed.
        /// * `UPDATED` – The volume is successfully updated.
        /// * `DELETING` – The volume is in the process of being deleted.
        /// * `DELETE_FAILED` – The system failed to delete the volume.
        /// * `DELETED` – The volume is successfully deleted.
        /// </summary>
        [PolicyResourceProperty("status", "_mUnknown_Status")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Status;
        private bool _mUnknown_Status;
        public string? Status
        {
            get
            {
                if (!_mUnknown_Status) return _mValue_Status;
                throw new UndeferrableValueException("Value 'KxVolume.Status' is not present");
            }
        }

        /// <summary>
        /// The error message when a failed state occurs.
        /// </summary>
        [PolicyResourceProperty("statusReason", "_mUnknown_StatusReason")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StatusReason;
        private bool _mUnknown_StatusReason;
        public string? StatusReason
        {
            get
            {
                if (!_mUnknown_StatusReason) return _mValue_StatusReason;
                throw new UndeferrableValueException("Value 'KxVolume.StatusReason' is not present");
            }
        }

        /// <summary>
        /// A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'KxVolume.Tags' is not present");
            }
        }

        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'KxVolume.TagsAll' is not present");
            }
        }

        /// <summary>
        /// The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1_configuration`.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'KxVolume.Type' is not present");
            }
        }
    }

    [PolicyResourceType("aws:finspace/kxVolume:KxVolume")]
    public sealed class KxVolumeArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The identifier of the AWS Availability Zone IDs.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("availabilityZones", "_mUnknown_AvailabilityZones")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_AvailabilityZones;
        private bool _mUnknown_AvailabilityZones;
        public List<string>? AvailabilityZones
        {
            get
            {
                if (!_mUnknown_AvailabilityZones) return _mValue_AvailabilityZones;
                throw new UndeferrableValueException("Value 'KxVolumeArgs.AvailabilityZones' is not present");
            }
        }

        /// <summary>
        /// The number of availability zones you want to assign per volume. Currently, Finspace only support SINGLE for volumes.
        /// * `SINGLE` - Assigns one availability zone per volume.
        /// </summary>
        [PolicyResourceProperty("azMode", "_mUnknown_AzMode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AzMode;
        private bool _mUnknown_AzMode;
        public string? AzMode
        {
            get
            {
                if (!_mUnknown_AzMode) return _mValue_AzMode;
                throw new UndeferrableValueException("Value 'KxVolumeArgs.AzMode' is not present");
            }
        }

        /// <summary>
        /// Description of the volume.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'KxVolumeArgs.Description' is not present");
            }
        }

        /// <summary>
        /// A unique identifier for the kdb environment, whose clusters can attach to the volume.
        /// </summary>
        [PolicyResourceProperty("environmentId", "_mUnknown_EnvironmentId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EnvironmentId;
        private bool _mUnknown_EnvironmentId;
        public string? EnvironmentId
        {
            get
            {
                if (!_mUnknown_EnvironmentId) return _mValue_EnvironmentId;
                throw new UndeferrableValueException("Value 'KxVolumeArgs.EnvironmentId' is not present");
            }
        }

        /// <summary>
        /// Unique name for the volumr that you want to create.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'KxVolumeArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Specifies the configuration for the Network attached storage (`NAS_1`) file system volume. This parameter is required when `volume_type` is `NAS_1`. See `nas1_configuration` Argument Reference below.
        /// </summary>
        [PolicyResourceProperty("nas1Configurations", "_mUnknown_Nas1Configurations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.KxVolumeNas1ConfigurationArgs>? _mValue_Nas1Configurations;
        private bool _mUnknown_Nas1Configurations;
        public List<Inputs.KxVolumeNas1ConfigurationArgs>? Nas1Configurations
        {
            get
            {
                if (!_mUnknown_Nas1Configurations) return _mValue_Nas1Configurations;
                throw new UndeferrableValueException("Value 'KxVolumeArgs.Nas1Configurations' is not present");
            }
        }

        /// <summary>
        /// A list of key-value pairs to label the volume. You can add up to 50 tags to a volume
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'KxVolumeArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// The type of file system volume. Currently, FinSpace only supports the `NAS_1` volume type. When you select the `NAS_1` volume type, you must also provide `nas1_configuration`.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'KxVolumeArgs.Type' is not present");
            }
        }
    }
}
