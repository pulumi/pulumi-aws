// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Dax
{
    [PolicyResourceType("aws:dax/cluster:Cluster")]
    public sealed class Cluster : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the DAX cluster
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Cluster.Arn' is not present");
            }
        }

        /// <summary>
        /// List of Availability Zones in which the
        /// nodes will be created
        /// </summary>
        [PolicyResourceProperty("availabilityZones", "_mUnknown_AvailabilityZones")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_AvailabilityZones;
        private bool _mUnknown_AvailabilityZones;
        public List<string>? AvailabilityZones
        {
            get
            {
                if (!_mUnknown_AvailabilityZones) return _mValue_AvailabilityZones;
                throw new UndeferrableValueException("Value 'Cluster.AvailabilityZones' is not present");
            }
        }

        /// <summary>
        /// The DNS name of the DAX cluster without the port appended
        /// </summary>
        [PolicyResourceProperty("clusterAddress", "_mUnknown_ClusterAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ClusterAddress;
        private bool _mUnknown_ClusterAddress;
        public string? ClusterAddress
        {
            get
            {
                if (!_mUnknown_ClusterAddress) return _mValue_ClusterAddress;
                throw new UndeferrableValueException("Value 'Cluster.ClusterAddress' is not present");
            }
        }

        /// <summary>
        /// The type of encryption the
        /// cluster's endpoint should support. Valid values are: `NONE` and `TLS`.
        /// Default value is `NONE`.
        /// </summary>
        [PolicyResourceProperty("clusterEndpointEncryptionType", "_mUnknown_ClusterEndpointEncryptionType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ClusterEndpointEncryptionType;
        private bool _mUnknown_ClusterEndpointEncryptionType;
        public string? ClusterEndpointEncryptionType
        {
            get
            {
                if (!_mUnknown_ClusterEndpointEncryptionType) return _mValue_ClusterEndpointEncryptionType;
                throw new UndeferrableValueException("Value 'Cluster.ClusterEndpointEncryptionType' is not present");
            }
        }

        /// <summary>
        /// Group identifier. DAX converts this name to
        /// lowercase
        /// </summary>
        [PolicyResourceProperty("clusterName", "_mUnknown_ClusterName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ClusterName;
        private bool _mUnknown_ClusterName;
        public string? ClusterName
        {
            get
            {
                if (!_mUnknown_ClusterName) return _mValue_ClusterName;
                throw new UndeferrableValueException("Value 'Cluster.ClusterName' is not present");
            }
        }

        /// <summary>
        /// The configuration endpoint for this DAX cluster,
        /// consisting of a DNS name and a port number
        /// </summary>
        [PolicyResourceProperty("configurationEndpoint", "_mUnknown_ConfigurationEndpoint")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConfigurationEndpoint;
        private bool _mUnknown_ConfigurationEndpoint;
        public string? ConfigurationEndpoint
        {
            get
            {
                if (!_mUnknown_ConfigurationEndpoint) return _mValue_ConfigurationEndpoint;
                throw new UndeferrableValueException("Value 'Cluster.ConfigurationEndpoint' is not present");
            }
        }

        /// <summary>
        /// Description for the cluster
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'Cluster.Description' is not present");
            }
        }

        /// <summary>
        /// A valid Amazon Resource Name (ARN) that identifies
        /// an IAM role. At runtime, DAX will assume this role and use the role's
        /// permissions to access DynamoDB on your behalf
        /// </summary>
        [PolicyResourceProperty("iamRoleArn", "_mUnknown_IamRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IamRoleArn;
        private bool _mUnknown_IamRoleArn;
        public string? IamRoleArn
        {
            get
            {
                if (!_mUnknown_IamRoleArn) return _mValue_IamRoleArn;
                throw new UndeferrableValueException("Value 'Cluster.IamRoleArn' is not present");
            }
        }

        /// <summary>
        /// Specifies the weekly time range for when
        /// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
        /// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
        /// `sun:05:00-sun:09:00`
        /// </summary>
        [PolicyResourceProperty("maintenanceWindow", "_mUnknown_MaintenanceWindow")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MaintenanceWindow;
        private bool _mUnknown_MaintenanceWindow;
        public string? MaintenanceWindow
        {
            get
            {
                if (!_mUnknown_MaintenanceWindow) return _mValue_MaintenanceWindow;
                throw new UndeferrableValueException("Value 'Cluster.MaintenanceWindow' is not present");
            }
        }

        /// <summary>
        /// The compute and memory capacity of the nodes. See
        /// [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
        /// </summary>
        [PolicyResourceProperty("nodeType", "_mUnknown_NodeType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NodeType;
        private bool _mUnknown_NodeType;
        public string? NodeType
        {
            get
            {
                if (!_mUnknown_NodeType) return _mValue_NodeType;
                throw new UndeferrableValueException("Value 'Cluster.NodeType' is not present");
            }
        }

        /// <summary>
        /// List of node objects including `id`, `address`, `port` and
        /// `availability_zone`. Referenceable e.g., as
        /// `${aws_dax_cluster.test.nodes.0.address}`
        /// </summary>
        [PolicyResourceProperty("nodes", "_mUnknown_Nodes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.ClusterNode>? _mValue_Nodes;
        private bool _mUnknown_Nodes;
        public List<Outputs.ClusterNode>? Nodes
        {
            get
            {
                if (!_mUnknown_Nodes) return _mValue_Nodes;
                throw new UndeferrableValueException("Value 'Cluster.Nodes' is not present");
            }
        }

        /// <summary>
        /// An Amazon Resource Name (ARN) of an
        /// SNS topic to send DAX notifications to. Example:
        /// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
        /// </summary>
        [PolicyResourceProperty("notificationTopicArn", "_mUnknown_NotificationTopicArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NotificationTopicArn;
        private bool _mUnknown_NotificationTopicArn;
        public string? NotificationTopicArn
        {
            get
            {
                if (!_mUnknown_NotificationTopicArn) return _mValue_NotificationTopicArn;
                throw new UndeferrableValueException("Value 'Cluster.NotificationTopicArn' is not present");
            }
        }

        /// <summary>
        /// Name of the parameter group to associate
        /// with this DAX cluster
        /// </summary>
        [PolicyResourceProperty("parameterGroupName", "_mUnknown_ParameterGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ParameterGroupName;
        private bool _mUnknown_ParameterGroupName;
        public string? ParameterGroupName
        {
            get
            {
                if (!_mUnknown_ParameterGroupName) return _mValue_ParameterGroupName;
                throw new UndeferrableValueException("Value 'Cluster.ParameterGroupName' is not present");
            }
        }

        /// <summary>
        /// The port used by the configuration endpoint
        /// </summary>
        [PolicyResourceProperty("port", "_mUnknown_Port")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Port;
        private bool _mUnknown_Port;
        public int? Port
        {
            get
            {
                if (!_mUnknown_Port) return _mValue_Port;
                throw new UndeferrableValueException("Value 'Cluster.Port' is not present");
            }
        }

        /// <summary>
        /// The number of nodes in the DAX cluster. A
        /// replication factor of 1 will create a single-node cluster, without any read
        /// replicas
        /// </summary>
        [PolicyResourceProperty("replicationFactor", "_mUnknown_ReplicationFactor")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ReplicationFactor;
        private bool _mUnknown_ReplicationFactor;
        public int? ReplicationFactor
        {
            get
            {
                if (!_mUnknown_ReplicationFactor) return _mValue_ReplicationFactor;
                throw new UndeferrableValueException("Value 'Cluster.ReplicationFactor' is not present");
            }
        }

        /// <summary>
        /// One or more VPC security groups associated
        /// with the cluster
        /// </summary>
        [PolicyResourceProperty("securityGroupIds", "_mUnknown_SecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecurityGroupIds;
        private bool _mUnknown_SecurityGroupIds;
        public List<string>? SecurityGroupIds
        {
            get
            {
                if (!_mUnknown_SecurityGroupIds) return _mValue_SecurityGroupIds;
                throw new UndeferrableValueException("Value 'Cluster.SecurityGroupIds' is not present");
            }
        }

        /// <summary>
        /// Encrypt at rest options
        /// </summary>
        [PolicyResourceProperty("serverSideEncryption", "_mUnknown_ServerSideEncryption")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ClusterServerSideEncryption? _mValue_ServerSideEncryption;
        private bool _mUnknown_ServerSideEncryption;
        public Outputs.ClusterServerSideEncryption? ServerSideEncryption
        {
            get
            {
                if (!_mUnknown_ServerSideEncryption) return _mValue_ServerSideEncryption;
                throw new UndeferrableValueException("Value 'Cluster.ServerSideEncryption' is not present");
            }
        }

        /// <summary>
        /// Name of the subnet group to be used for the
        /// cluster
        /// </summary>
        [PolicyResourceProperty("subnetGroupName", "_mUnknown_SubnetGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SubnetGroupName;
        private bool _mUnknown_SubnetGroupName;
        public string? SubnetGroupName
        {
            get
            {
                if (!_mUnknown_SubnetGroupName) return _mValue_SubnetGroupName;
                throw new UndeferrableValueException("Value 'Cluster.SubnetGroupName' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Cluster.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Cluster.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:dax/cluster:Cluster")]
    public sealed class ClusterArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// List of Availability Zones in which the
        /// nodes will be created
        /// </summary>
        [PolicyResourceProperty("availabilityZones", "_mUnknown_AvailabilityZones")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_AvailabilityZones;
        private bool _mUnknown_AvailabilityZones;
        public List<string>? AvailabilityZones
        {
            get
            {
                if (!_mUnknown_AvailabilityZones) return _mValue_AvailabilityZones;
                throw new UndeferrableValueException("Value 'ClusterArgs.AvailabilityZones' is not present");
            }
        }

        /// <summary>
        /// The type of encryption the
        /// cluster's endpoint should support. Valid values are: `NONE` and `TLS`.
        /// Default value is `NONE`.
        /// </summary>
        [PolicyResourceProperty("clusterEndpointEncryptionType", "_mUnknown_ClusterEndpointEncryptionType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ClusterEndpointEncryptionType;
        private bool _mUnknown_ClusterEndpointEncryptionType;
        public string? ClusterEndpointEncryptionType
        {
            get
            {
                if (!_mUnknown_ClusterEndpointEncryptionType) return _mValue_ClusterEndpointEncryptionType;
                throw new UndeferrableValueException("Value 'ClusterArgs.ClusterEndpointEncryptionType' is not present");
            }
        }

        /// <summary>
        /// Group identifier. DAX converts this name to
        /// lowercase
        /// </summary>
        [PolicyResourceProperty("clusterName", "_mUnknown_ClusterName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ClusterName;
        private bool _mUnknown_ClusterName;
        public string? ClusterName
        {
            get
            {
                if (!_mUnknown_ClusterName) return _mValue_ClusterName;
                throw new UndeferrableValueException("Value 'ClusterArgs.ClusterName' is not present");
            }
        }

        /// <summary>
        /// Description for the cluster
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'ClusterArgs.Description' is not present");
            }
        }

        /// <summary>
        /// A valid Amazon Resource Name (ARN) that identifies
        /// an IAM role. At runtime, DAX will assume this role and use the role's
        /// permissions to access DynamoDB on your behalf
        /// </summary>
        [PolicyResourceProperty("iamRoleArn", "_mUnknown_IamRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IamRoleArn;
        private bool _mUnknown_IamRoleArn;
        public string? IamRoleArn
        {
            get
            {
                if (!_mUnknown_IamRoleArn) return _mValue_IamRoleArn;
                throw new UndeferrableValueException("Value 'ClusterArgs.IamRoleArn' is not present");
            }
        }

        /// <summary>
        /// Specifies the weekly time range for when
        /// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
        /// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
        /// `sun:05:00-sun:09:00`
        /// </summary>
        [PolicyResourceProperty("maintenanceWindow", "_mUnknown_MaintenanceWindow")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MaintenanceWindow;
        private bool _mUnknown_MaintenanceWindow;
        public string? MaintenanceWindow
        {
            get
            {
                if (!_mUnknown_MaintenanceWindow) return _mValue_MaintenanceWindow;
                throw new UndeferrableValueException("Value 'ClusterArgs.MaintenanceWindow' is not present");
            }
        }

        /// <summary>
        /// The compute and memory capacity of the nodes. See
        /// [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
        /// </summary>
        [PolicyResourceProperty("nodeType", "_mUnknown_NodeType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NodeType;
        private bool _mUnknown_NodeType;
        public string? NodeType
        {
            get
            {
                if (!_mUnknown_NodeType) return _mValue_NodeType;
                throw new UndeferrableValueException("Value 'ClusterArgs.NodeType' is not present");
            }
        }

        /// <summary>
        /// An Amazon Resource Name (ARN) of an
        /// SNS topic to send DAX notifications to. Example:
        /// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
        /// </summary>
        [PolicyResourceProperty("notificationTopicArn", "_mUnknown_NotificationTopicArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NotificationTopicArn;
        private bool _mUnknown_NotificationTopicArn;
        public string? NotificationTopicArn
        {
            get
            {
                if (!_mUnknown_NotificationTopicArn) return _mValue_NotificationTopicArn;
                throw new UndeferrableValueException("Value 'ClusterArgs.NotificationTopicArn' is not present");
            }
        }

        /// <summary>
        /// Name of the parameter group to associate
        /// with this DAX cluster
        /// </summary>
        [PolicyResourceProperty("parameterGroupName", "_mUnknown_ParameterGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ParameterGroupName;
        private bool _mUnknown_ParameterGroupName;
        public string? ParameterGroupName
        {
            get
            {
                if (!_mUnknown_ParameterGroupName) return _mValue_ParameterGroupName;
                throw new UndeferrableValueException("Value 'ClusterArgs.ParameterGroupName' is not present");
            }
        }

        /// <summary>
        /// The number of nodes in the DAX cluster. A
        /// replication factor of 1 will create a single-node cluster, without any read
        /// replicas
        /// </summary>
        [PolicyResourceProperty("replicationFactor", "_mUnknown_ReplicationFactor")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ReplicationFactor;
        private bool _mUnknown_ReplicationFactor;
        public int? ReplicationFactor
        {
            get
            {
                if (!_mUnknown_ReplicationFactor) return _mValue_ReplicationFactor;
                throw new UndeferrableValueException("Value 'ClusterArgs.ReplicationFactor' is not present");
            }
        }

        /// <summary>
        /// One or more VPC security groups associated
        /// with the cluster
        /// </summary>
        [PolicyResourceProperty("securityGroupIds", "_mUnknown_SecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecurityGroupIds;
        private bool _mUnknown_SecurityGroupIds;
        public List<string>? SecurityGroupIds
        {
            get
            {
                if (!_mUnknown_SecurityGroupIds) return _mValue_SecurityGroupIds;
                throw new UndeferrableValueException("Value 'ClusterArgs.SecurityGroupIds' is not present");
            }
        }

        /// <summary>
        /// Encrypt at rest options
        /// </summary>
        [PolicyResourceProperty("serverSideEncryption", "_mUnknown_ServerSideEncryption")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ClusterServerSideEncryptionArgs? _mValue_ServerSideEncryption;
        private bool _mUnknown_ServerSideEncryption;
        public Inputs.ClusterServerSideEncryptionArgs? ServerSideEncryption
        {
            get
            {
                if (!_mUnknown_ServerSideEncryption) return _mValue_ServerSideEncryption;
                throw new UndeferrableValueException("Value 'ClusterArgs.ServerSideEncryption' is not present");
            }
        }

        /// <summary>
        /// Name of the subnet group to be used for the
        /// cluster
        /// </summary>
        [PolicyResourceProperty("subnetGroupName", "_mUnknown_SubnetGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SubnetGroupName;
        private bool _mUnknown_SubnetGroupName;
        public string? SubnetGroupName
        {
            get
            {
                if (!_mUnknown_SubnetGroupName) return _mValue_SubnetGroupName;
                throw new UndeferrableValueException("Value 'ClusterArgs.SubnetGroupName' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ClusterArgs.Tags' is not present");
            }
        }
    }
}
