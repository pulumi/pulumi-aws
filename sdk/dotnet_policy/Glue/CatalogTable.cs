// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Glue
{
    [PolicyResourceType("aws:glue/catalogTable:CatalogTable")]
    public sealed class CatalogTable : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the Glue Table.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'CatalogTable.Arn' is not present");
            }
        }

        /// <summary>
        /// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
        /// </summary>
        [PolicyResourceProperty("catalogId", "_mUnknown_CatalogId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CatalogId;
        private bool _mUnknown_CatalogId;
        public string? CatalogId
        {
            get
            {
                if (!_mUnknown_CatalogId) return _mValue_CatalogId;
                throw new UndeferrableValueException("Value 'CatalogTable.CatalogId' is not present");
            }
        }

        /// <summary>
        /// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
        /// 
        /// The follow arguments are optional:
        /// </summary>
        [PolicyResourceProperty("databaseName", "_mUnknown_DatabaseName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DatabaseName;
        private bool _mUnknown_DatabaseName;
        public string? DatabaseName
        {
            get
            {
                if (!_mUnknown_DatabaseName) return _mValue_DatabaseName;
                throw new UndeferrableValueException("Value 'CatalogTable.DatabaseName' is not present");
            }
        }

        /// <summary>
        /// Description of the table.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'CatalogTable.Description' is not present");
            }
        }

        /// <summary>
        /// Name of the table. For Hive compatibility, this must be entirely lowercase.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'CatalogTable.Name' is not present");
            }
        }

        /// <summary>
        /// Configuration block for open table formats. See `open_table_format_input` below.
        /// </summary>
        [PolicyResourceProperty("openTableFormatInput", "_mUnknown_OpenTableFormatInput")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.CatalogTableOpenTableFormatInput? _mValue_OpenTableFormatInput;
        private bool _mUnknown_OpenTableFormatInput;
        public Outputs.CatalogTableOpenTableFormatInput? OpenTableFormatInput
        {
            get
            {
                if (!_mUnknown_OpenTableFormatInput) return _mValue_OpenTableFormatInput;
                throw new UndeferrableValueException("Value 'CatalogTable.OpenTableFormatInput' is not present");
            }
        }

        /// <summary>
        /// Owner of the table.
        /// </summary>
        [PolicyResourceProperty("owner", "_mUnknown_Owner")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Owner;
        private bool _mUnknown_Owner;
        public string? Owner
        {
            get
            {
                if (!_mUnknown_Owner) return _mValue_Owner;
                throw new UndeferrableValueException("Value 'CatalogTable.Owner' is not present");
            }
        }

        /// <summary>
        /// Properties associated with this table, as a list of key-value pairs.
        /// </summary>
        [PolicyResourceProperty("parameters", "_mUnknown_Parameters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Parameters;
        private bool _mUnknown_Parameters;
        public Dictionary<string, string>? Parameters
        {
            get
            {
                if (!_mUnknown_Parameters) return _mValue_Parameters;
                throw new UndeferrableValueException("Value 'CatalogTable.Parameters' is not present");
            }
        }

        /// <summary>
        /// Configuration block for a maximum of 3 partition indexes. See `partition_index` below.
        /// </summary>
        [PolicyResourceProperty("partitionIndices", "_mUnknown_PartitionIndices")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.CatalogTablePartitionIndex>? _mValue_PartitionIndices;
        private bool _mUnknown_PartitionIndices;
        public List<Outputs.CatalogTablePartitionIndex>? PartitionIndices
        {
            get
            {
                if (!_mUnknown_PartitionIndices) return _mValue_PartitionIndices;
                throw new UndeferrableValueException("Value 'CatalogTable.PartitionIndices' is not present");
            }
        }

        /// <summary>
        /// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partition_keys` below.
        /// </summary>
        [PolicyResourceProperty("partitionKeys", "_mUnknown_PartitionKeys")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.CatalogTablePartitionKey>? _mValue_PartitionKeys;
        private bool _mUnknown_PartitionKeys;
        public List<Outputs.CatalogTablePartitionKey>? PartitionKeys
        {
            get
            {
                if (!_mUnknown_PartitionKeys) return _mValue_PartitionKeys;
                throw new UndeferrableValueException("Value 'CatalogTable.PartitionKeys' is not present");
            }
        }

        /// <summary>
        /// Retention time for this table.
        /// </summary>
        [PolicyResourceProperty("retention", "_mUnknown_Retention")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Retention;
        private bool _mUnknown_Retention;
        public int? Retention
        {
            get
            {
                if (!_mUnknown_Retention) return _mValue_Retention;
                throw new UndeferrableValueException("Value 'CatalogTable.Retention' is not present");
            }
        }

        /// <summary>
        /// Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storage_descriptor` below.
        /// </summary>
        [PolicyResourceProperty("storageDescriptor", "_mUnknown_StorageDescriptor")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.CatalogTableStorageDescriptor? _mValue_StorageDescriptor;
        private bool _mUnknown_StorageDescriptor;
        public Outputs.CatalogTableStorageDescriptor? StorageDescriptor
        {
            get
            {
                if (!_mUnknown_StorageDescriptor) return _mValue_StorageDescriptor;
                throw new UndeferrableValueException("Value 'CatalogTable.StorageDescriptor' is not present");
            }
        }

        /// <summary>
        /// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
        /// </summary>
        [PolicyResourceProperty("tableType", "_mUnknown_TableType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TableType;
        private bool _mUnknown_TableType;
        public string? TableType
        {
            get
            {
                if (!_mUnknown_TableType) return _mValue_TableType;
                throw new UndeferrableValueException("Value 'CatalogTable.TableType' is not present");
            }
        }

        /// <summary>
        /// Configuration block of a target table for resource linking. See `target_table` below.
        /// </summary>
        [PolicyResourceProperty("targetTable", "_mUnknown_TargetTable")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.CatalogTableTargetTable? _mValue_TargetTable;
        private bool _mUnknown_TargetTable;
        public Outputs.CatalogTableTargetTable? TargetTable
        {
            get
            {
                if (!_mUnknown_TargetTable) return _mValue_TargetTable;
                throw new UndeferrableValueException("Value 'CatalogTable.TargetTable' is not present");
            }
        }

        /// <summary>
        /// If the table is a view, the expanded text of the view; otherwise null.
        /// </summary>
        [PolicyResourceProperty("viewExpandedText", "_mUnknown_ViewExpandedText")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ViewExpandedText;
        private bool _mUnknown_ViewExpandedText;
        public string? ViewExpandedText
        {
            get
            {
                if (!_mUnknown_ViewExpandedText) return _mValue_ViewExpandedText;
                throw new UndeferrableValueException("Value 'CatalogTable.ViewExpandedText' is not present");
            }
        }

        /// <summary>
        /// If the table is a view, the original text of the view; otherwise null.
        /// </summary>
        [PolicyResourceProperty("viewOriginalText", "_mUnknown_ViewOriginalText")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ViewOriginalText;
        private bool _mUnknown_ViewOriginalText;
        public string? ViewOriginalText
        {
            get
            {
                if (!_mUnknown_ViewOriginalText) return _mValue_ViewOriginalText;
                throw new UndeferrableValueException("Value 'CatalogTable.ViewOriginalText' is not present");
            }
        }
    }

    [PolicyResourceType("aws:glue/catalogTable:CatalogTable")]
    public sealed class CatalogTableArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
        /// </summary>
        [PolicyResourceProperty("catalogId", "_mUnknown_CatalogId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CatalogId;
        private bool _mUnknown_CatalogId;
        public string? CatalogId
        {
            get
            {
                if (!_mUnknown_CatalogId) return _mValue_CatalogId;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.CatalogId' is not present");
            }
        }

        /// <summary>
        /// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
        /// 
        /// The follow arguments are optional:
        /// </summary>
        [PolicyResourceProperty("databaseName", "_mUnknown_DatabaseName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DatabaseName;
        private bool _mUnknown_DatabaseName;
        public string? DatabaseName
        {
            get
            {
                if (!_mUnknown_DatabaseName) return _mValue_DatabaseName;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.DatabaseName' is not present");
            }
        }

        /// <summary>
        /// Description of the table.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.Description' is not present");
            }
        }

        /// <summary>
        /// Name of the table. For Hive compatibility, this must be entirely lowercase.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Configuration block for open table formats. See `open_table_format_input` below.
        /// </summary>
        [PolicyResourceProperty("openTableFormatInput", "_mUnknown_OpenTableFormatInput")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.CatalogTableOpenTableFormatInputArgs? _mValue_OpenTableFormatInput;
        private bool _mUnknown_OpenTableFormatInput;
        public Inputs.CatalogTableOpenTableFormatInputArgs? OpenTableFormatInput
        {
            get
            {
                if (!_mUnknown_OpenTableFormatInput) return _mValue_OpenTableFormatInput;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.OpenTableFormatInput' is not present");
            }
        }

        /// <summary>
        /// Owner of the table.
        /// </summary>
        [PolicyResourceProperty("owner", "_mUnknown_Owner")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Owner;
        private bool _mUnknown_Owner;
        public string? Owner
        {
            get
            {
                if (!_mUnknown_Owner) return _mValue_Owner;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.Owner' is not present");
            }
        }

        /// <summary>
        /// Properties associated with this table, as a list of key-value pairs.
        /// </summary>
        [PolicyResourceProperty("parameters", "_mUnknown_Parameters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Parameters;
        private bool _mUnknown_Parameters;
        public Dictionary<string, string>? Parameters
        {
            get
            {
                if (!_mUnknown_Parameters) return _mValue_Parameters;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.Parameters' is not present");
            }
        }

        /// <summary>
        /// Configuration block for a maximum of 3 partition indexes. See `partition_index` below.
        /// </summary>
        [PolicyResourceProperty("partitionIndices", "_mUnknown_PartitionIndices")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.CatalogTablePartitionIndexArgs>? _mValue_PartitionIndices;
        private bool _mUnknown_PartitionIndices;
        public List<Inputs.CatalogTablePartitionIndexArgs>? PartitionIndices
        {
            get
            {
                if (!_mUnknown_PartitionIndices) return _mValue_PartitionIndices;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.PartitionIndices' is not present");
            }
        }

        /// <summary>
        /// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partition_keys` below.
        /// </summary>
        [PolicyResourceProperty("partitionKeys", "_mUnknown_PartitionKeys")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.CatalogTablePartitionKeyArgs>? _mValue_PartitionKeys;
        private bool _mUnknown_PartitionKeys;
        public List<Inputs.CatalogTablePartitionKeyArgs>? PartitionKeys
        {
            get
            {
                if (!_mUnknown_PartitionKeys) return _mValue_PartitionKeys;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.PartitionKeys' is not present");
            }
        }

        /// <summary>
        /// Retention time for this table.
        /// </summary>
        [PolicyResourceProperty("retention", "_mUnknown_Retention")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Retention;
        private bool _mUnknown_Retention;
        public int? Retention
        {
            get
            {
                if (!_mUnknown_Retention) return _mValue_Retention;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.Retention' is not present");
            }
        }

        /// <summary>
        /// Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storage_descriptor` below.
        /// </summary>
        [PolicyResourceProperty("storageDescriptor", "_mUnknown_StorageDescriptor")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.CatalogTableStorageDescriptorArgs? _mValue_StorageDescriptor;
        private bool _mUnknown_StorageDescriptor;
        public Inputs.CatalogTableStorageDescriptorArgs? StorageDescriptor
        {
            get
            {
                if (!_mUnknown_StorageDescriptor) return _mValue_StorageDescriptor;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.StorageDescriptor' is not present");
            }
        }

        /// <summary>
        /// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
        /// </summary>
        [PolicyResourceProperty("tableType", "_mUnknown_TableType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TableType;
        private bool _mUnknown_TableType;
        public string? TableType
        {
            get
            {
                if (!_mUnknown_TableType) return _mValue_TableType;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.TableType' is not present");
            }
        }

        /// <summary>
        /// Configuration block of a target table for resource linking. See `target_table` below.
        /// </summary>
        [PolicyResourceProperty("targetTable", "_mUnknown_TargetTable")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.CatalogTableTargetTableArgs? _mValue_TargetTable;
        private bool _mUnknown_TargetTable;
        public Inputs.CatalogTableTargetTableArgs? TargetTable
        {
            get
            {
                if (!_mUnknown_TargetTable) return _mValue_TargetTable;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.TargetTable' is not present");
            }
        }

        /// <summary>
        /// If the table is a view, the expanded text of the view; otherwise null.
        /// </summary>
        [PolicyResourceProperty("viewExpandedText", "_mUnknown_ViewExpandedText")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ViewExpandedText;
        private bool _mUnknown_ViewExpandedText;
        public string? ViewExpandedText
        {
            get
            {
                if (!_mUnknown_ViewExpandedText) return _mValue_ViewExpandedText;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.ViewExpandedText' is not present");
            }
        }

        /// <summary>
        /// If the table is a view, the original text of the view; otherwise null.
        /// </summary>
        [PolicyResourceProperty("viewOriginalText", "_mUnknown_ViewOriginalText")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ViewOriginalText;
        private bool _mUnknown_ViewOriginalText;
        public string? ViewOriginalText
        {
            get
            {
                if (!_mUnknown_ViewOriginalText) return _mValue_ViewOriginalText;
                throw new UndeferrableValueException("Value 'CatalogTableArgs.ViewOriginalText' is not present");
            }
        }
    }
}
