// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Glue.Inputs
{
    public sealed class ClassifierCsvClassifierArgs
    {
        /// <summary>
        /// Enables the processing of files that contain only one column.
        /// </summary>
        [PolicyResourceProperty("allowSingleColumn", "_mUnknown_AllowSingleColumn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AllowSingleColumn;
        private bool _mUnknown_AllowSingleColumn;
        public bool? AllowSingleColumn
        {
            get
            {
                if (!_mUnknown_AllowSingleColumn) return _mValue_AllowSingleColumn;
                throw new UndeferrableValueException("Value 'ClassifierCsvClassifierArgs.AllowSingleColumn' is not present");
            }
        }

        /// <summary>
        /// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
        /// </summary>
        [PolicyResourceProperty("containsHeader", "_mUnknown_ContainsHeader")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ContainsHeader;
        private bool _mUnknown_ContainsHeader;
        public string? ContainsHeader
        {
            get
            {
                if (!_mUnknown_ContainsHeader) return _mValue_ContainsHeader;
                throw new UndeferrableValueException("Value 'ClassifierCsvClassifierArgs.ContainsHeader' is not present");
            }
        }

        /// <summary>
        /// Enables the custom datatype to be configured.
        /// </summary>
        [PolicyResourceProperty("customDatatypeConfigured", "_mUnknown_CustomDatatypeConfigured")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_CustomDatatypeConfigured;
        private bool _mUnknown_CustomDatatypeConfigured;
        public bool? CustomDatatypeConfigured
        {
            get
            {
                if (!_mUnknown_CustomDatatypeConfigured) return _mValue_CustomDatatypeConfigured;
                throw new UndeferrableValueException("Value 'ClassifierCsvClassifierArgs.CustomDatatypeConfigured' is not present");
            }
        }

        /// <summary>
        /// A list of supported custom datatypes. Valid values are `BINARY`, `BOOLEAN`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `INT`, `LONG`, `SHORT`, `STRING`, `TIMESTAMP`.
        /// </summary>
        [PolicyResourceProperty("customDatatypes", "_mUnknown_CustomDatatypes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomDatatypes;
        private bool _mUnknown_CustomDatatypes;
        public List<string>? CustomDatatypes
        {
            get
            {
                if (!_mUnknown_CustomDatatypes) return _mValue_CustomDatatypes;
                throw new UndeferrableValueException("Value 'ClassifierCsvClassifierArgs.CustomDatatypes' is not present");
            }
        }

        /// <summary>
        /// The delimiter used in the CSV to separate columns.
        /// </summary>
        [PolicyResourceProperty("delimiter", "_mUnknown_Delimiter")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Delimiter;
        private bool _mUnknown_Delimiter;
        public string? Delimiter
        {
            get
            {
                if (!_mUnknown_Delimiter) return _mValue_Delimiter;
                throw new UndeferrableValueException("Value 'ClassifierCsvClassifierArgs.Delimiter' is not present");
            }
        }

        /// <summary>
        /// Specifies whether to trim column values.
        /// </summary>
        [PolicyResourceProperty("disableValueTrimming", "_mUnknown_DisableValueTrimming")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DisableValueTrimming;
        private bool _mUnknown_DisableValueTrimming;
        public bool? DisableValueTrimming
        {
            get
            {
                if (!_mUnknown_DisableValueTrimming) return _mValue_DisableValueTrimming;
                throw new UndeferrableValueException("Value 'ClassifierCsvClassifierArgs.DisableValueTrimming' is not present");
            }
        }

        /// <summary>
        /// A list of strings representing column names.
        /// </summary>
        [PolicyResourceProperty("headers", "_mUnknown_Headers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Headers;
        private bool _mUnknown_Headers;
        public List<string>? Headers
        {
            get
            {
                if (!_mUnknown_Headers) return _mValue_Headers;
                throw new UndeferrableValueException("Value 'ClassifierCsvClassifierArgs.Headers' is not present");
            }
        }

        /// <summary>
        /// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
        /// </summary>
        [PolicyResourceProperty("quoteSymbol", "_mUnknown_QuoteSymbol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_QuoteSymbol;
        private bool _mUnknown_QuoteSymbol;
        public string? QuoteSymbol
        {
            get
            {
                if (!_mUnknown_QuoteSymbol) return _mValue_QuoteSymbol;
                throw new UndeferrableValueException("Value 'ClassifierCsvClassifierArgs.QuoteSymbol' is not present");
            }
        }

        /// <summary>
        /// The SerDe for processing CSV. Valid values are `OpenCSVSerDe`, `LazySimpleSerDe`, `None`.
        /// </summary>
        [PolicyResourceProperty("serde", "_mUnknown_Serde")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Serde;
        private bool _mUnknown_Serde;
        public string? Serde
        {
            get
            {
                if (!_mUnknown_Serde) return _mValue_Serde;
                throw new UndeferrableValueException("Value 'ClassifierCsvClassifierArgs.Serde' is not present");
            }
        }
    }
}
