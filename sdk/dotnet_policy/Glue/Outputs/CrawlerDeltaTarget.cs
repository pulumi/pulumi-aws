// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Glue.Outputs
{
    public sealed class CrawlerDeltaTarget
    {
        /// <summary>
        /// The name of the connection to use to connect to the Delta table target.
        /// </summary>
        [Input("connectionName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<string> _mConnectionName;

        public string? ConnectionName => _mConnectionName.GetValue("connectionName");

        /// <summary>
        /// Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
        /// </summary>
        [Input("createNativeDeltaTable")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<bool> _mCreateNativeDeltaTable;

        public bool? CreateNativeDeltaTable => _mCreateNativeDeltaTable.GetValue("createNativeDeltaTable");

        /// <summary>
        /// A list of the Amazon S3 paths to the Delta tables.
        /// </summary>
        [Input("deltaTables")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<List<string>> _mDeltaTables;

        public List<string>? DeltaTables => _mDeltaTables.GetValue("deltaTables");

        /// <summary>
        /// Specifies whether to write the manifest files to the Delta table path.
        /// </summary>
        [Input("writeManifest")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<bool> _mWriteManifest;

        public bool? WriteManifest => _mWriteManifest.GetValue("writeManifest");
    }
}
