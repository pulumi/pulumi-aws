// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Glue
{
    [PolicyResourceType("aws:glue/crawler:Crawler")]
    public sealed class Crawler : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ARN of the crawler
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Crawler.Arn' is not present");
            }
        }

        /// <summary>
        /// List of nested AWS Glue Data Catalog target arguments. See Catalog Target below.
        /// </summary>
        [PolicyResourceProperty("catalogTargets", "_mUnknown_CatalogTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.CrawlerCatalogTarget>? _mValue_CatalogTargets;
        private bool _mUnknown_CatalogTargets;
        public List<Outputs.CrawlerCatalogTarget>? CatalogTargets
        {
            get
            {
                if (!_mUnknown_CatalogTargets) return _mValue_CatalogTargets;
                throw new UndeferrableValueException("Value 'Crawler.CatalogTargets' is not present");
            }
        }

        /// <summary>
        /// List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
        /// </summary>
        [PolicyResourceProperty("classifiers", "_mUnknown_Classifiers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Classifiers;
        private bool _mUnknown_Classifiers;
        public List<string>? Classifiers
        {
            get
            {
                if (!_mUnknown_Classifiers) return _mValue_Classifiers;
                throw new UndeferrableValueException("Value 'Crawler.Classifiers' is not present");
            }
        }

        /// <summary>
        /// JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
        /// </summary>
        [PolicyResourceProperty("configuration", "_mUnknown_Configuration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Configuration;
        private bool _mUnknown_Configuration;
        public string? Configuration
        {
            get
            {
                if (!_mUnknown_Configuration) return _mValue_Configuration;
                throw new UndeferrableValueException("Value 'Crawler.Configuration' is not present");
            }
        }

        /// <summary>
        /// Glue database where results are written.
        /// </summary>
        [PolicyResourceProperty("databaseName", "_mUnknown_DatabaseName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DatabaseName;
        private bool _mUnknown_DatabaseName;
        public string? DatabaseName
        {
            get
            {
                if (!_mUnknown_DatabaseName) return _mValue_DatabaseName;
                throw new UndeferrableValueException("Value 'Crawler.DatabaseName' is not present");
            }
        }

        /// <summary>
        /// List of nested Delta Lake target arguments. See Delta Target below.
        /// </summary>
        [PolicyResourceProperty("deltaTargets", "_mUnknown_DeltaTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.CrawlerDeltaTarget>? _mValue_DeltaTargets;
        private bool _mUnknown_DeltaTargets;
        public List<Outputs.CrawlerDeltaTarget>? DeltaTargets
        {
            get
            {
                if (!_mUnknown_DeltaTargets) return _mValue_DeltaTargets;
                throw new UndeferrableValueException("Value 'Crawler.DeltaTargets' is not present");
            }
        }

        /// <summary>
        /// Description of the crawler.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'Crawler.Description' is not present");
            }
        }

        /// <summary>
        /// List of nested DynamoDB target arguments. See Dynamodb Target below.
        /// </summary>
        [PolicyResourceProperty("dynamodbTargets", "_mUnknown_DynamodbTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.CrawlerDynamodbTarget>? _mValue_DynamodbTargets;
        private bool _mUnknown_DynamodbTargets;
        public List<Outputs.CrawlerDynamodbTarget>? DynamodbTargets
        {
            get
            {
                if (!_mUnknown_DynamodbTargets) return _mValue_DynamodbTargets;
                throw new UndeferrableValueException("Value 'Crawler.DynamodbTargets' is not present");
            }
        }

        /// <summary>
        /// List of nested Hudi target arguments. See Iceberg Target below.
        /// </summary>
        [PolicyResourceProperty("hudiTargets", "_mUnknown_HudiTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.CrawlerHudiTarget>? _mValue_HudiTargets;
        private bool _mUnknown_HudiTargets;
        public List<Outputs.CrawlerHudiTarget>? HudiTargets
        {
            get
            {
                if (!_mUnknown_HudiTargets) return _mValue_HudiTargets;
                throw new UndeferrableValueException("Value 'Crawler.HudiTargets' is not present");
            }
        }

        /// <summary>
        /// List of nested Iceberg target arguments. See Iceberg Target below.
        /// </summary>
        [PolicyResourceProperty("icebergTargets", "_mUnknown_IcebergTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.CrawlerIcebergTarget>? _mValue_IcebergTargets;
        private bool _mUnknown_IcebergTargets;
        public List<Outputs.CrawlerIcebergTarget>? IcebergTargets
        {
            get
            {
                if (!_mUnknown_IcebergTargets) return _mValue_IcebergTargets;
                throw new UndeferrableValueException("Value 'Crawler.IcebergTargets' is not present");
            }
        }

        /// <summary>
        /// List of nested JDBC target arguments. See JDBC Target below.
        /// </summary>
        [PolicyResourceProperty("jdbcTargets", "_mUnknown_JdbcTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.CrawlerJdbcTarget>? _mValue_JdbcTargets;
        private bool _mUnknown_JdbcTargets;
        public List<Outputs.CrawlerJdbcTarget>? JdbcTargets
        {
            get
            {
                if (!_mUnknown_JdbcTargets) return _mValue_JdbcTargets;
                throw new UndeferrableValueException("Value 'Crawler.JdbcTargets' is not present");
            }
        }

        /// <summary>
        /// Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
        /// </summary>
        [PolicyResourceProperty("lakeFormationConfiguration", "_mUnknown_LakeFormationConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.CrawlerLakeFormationConfiguration? _mValue_LakeFormationConfiguration;
        private bool _mUnknown_LakeFormationConfiguration;
        public Outputs.CrawlerLakeFormationConfiguration? LakeFormationConfiguration
        {
            get
            {
                if (!_mUnknown_LakeFormationConfiguration) return _mValue_LakeFormationConfiguration;
                throw new UndeferrableValueException("Value 'Crawler.LakeFormationConfiguration' is not present");
            }
        }

        /// <summary>
        /// Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
        /// </summary>
        [PolicyResourceProperty("lineageConfiguration", "_mUnknown_LineageConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.CrawlerLineageConfiguration? _mValue_LineageConfiguration;
        private bool _mUnknown_LineageConfiguration;
        public Outputs.CrawlerLineageConfiguration? LineageConfiguration
        {
            get
            {
                if (!_mUnknown_LineageConfiguration) return _mValue_LineageConfiguration;
                throw new UndeferrableValueException("Value 'Crawler.LineageConfiguration' is not present");
            }
        }

        /// <summary>
        /// List of nested MongoDB target arguments. See MongoDB Target below.
        /// </summary>
        [PolicyResourceProperty("mongodbTargets", "_mUnknown_MongodbTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.CrawlerMongodbTarget>? _mValue_MongodbTargets;
        private bool _mUnknown_MongodbTargets;
        public List<Outputs.CrawlerMongodbTarget>? MongodbTargets
        {
            get
            {
                if (!_mUnknown_MongodbTargets) return _mValue_MongodbTargets;
                throw new UndeferrableValueException("Value 'Crawler.MongodbTargets' is not present");
            }
        }

        /// <summary>
        /// Name of the crawler.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Crawler.Name' is not present");
            }
        }

        /// <summary>
        /// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
        /// </summary>
        [PolicyResourceProperty("recrawlPolicy", "_mUnknown_RecrawlPolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.CrawlerRecrawlPolicy? _mValue_RecrawlPolicy;
        private bool _mUnknown_RecrawlPolicy;
        public Outputs.CrawlerRecrawlPolicy? RecrawlPolicy
        {
            get
            {
                if (!_mUnknown_RecrawlPolicy) return _mValue_RecrawlPolicy;
                throw new UndeferrableValueException("Value 'Crawler.RecrawlPolicy' is not present");
            }
        }

        /// <summary>
        /// The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
        /// </summary>
        [PolicyResourceProperty("role", "_mUnknown_Role")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Role;
        private bool _mUnknown_Role;
        public string? Role
        {
            get
            {
                if (!_mUnknown_Role) return _mValue_Role;
                throw new UndeferrableValueException("Value 'Crawler.Role' is not present");
            }
        }

        /// <summary>
        /// List of nested Amazon S3 target arguments. See S3 Target below.
        /// </summary>
        [PolicyResourceProperty("s3Targets", "_mUnknown_S3Targets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.CrawlerS3Target>? _mValue_S3Targets;
        private bool _mUnknown_S3Targets;
        public List<Outputs.CrawlerS3Target>? S3Targets
        {
            get
            {
                if (!_mUnknown_S3Targets) return _mValue_S3Targets;
                throw new UndeferrableValueException("Value 'Crawler.S3Targets' is not present");
            }
        }

        /// <summary>
        /// A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
        /// </summary>
        [PolicyResourceProperty("schedule", "_mUnknown_Schedule")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Schedule;
        private bool _mUnknown_Schedule;
        public string? Schedule
        {
            get
            {
                if (!_mUnknown_Schedule) return _mValue_Schedule;
                throw new UndeferrableValueException("Value 'Crawler.Schedule' is not present");
            }
        }

        /// <summary>
        /// Policy for the crawler's update and deletion behavior. See Schema Change Policy below.
        /// </summary>
        [PolicyResourceProperty("schemaChangePolicy", "_mUnknown_SchemaChangePolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.CrawlerSchemaChangePolicy? _mValue_SchemaChangePolicy;
        private bool _mUnknown_SchemaChangePolicy;
        public Outputs.CrawlerSchemaChangePolicy? SchemaChangePolicy
        {
            get
            {
                if (!_mUnknown_SchemaChangePolicy) return _mValue_SchemaChangePolicy;
                throw new UndeferrableValueException("Value 'Crawler.SchemaChangePolicy' is not present");
            }
        }

        /// <summary>
        /// The name of Security Configuration to be used by the crawler
        /// </summary>
        [PolicyResourceProperty("securityConfiguration", "_mUnknown_SecurityConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityConfiguration;
        private bool _mUnknown_SecurityConfiguration;
        public string? SecurityConfiguration
        {
            get
            {
                if (!_mUnknown_SecurityConfiguration) return _mValue_SecurityConfiguration;
                throw new UndeferrableValueException("Value 'Crawler.SecurityConfiguration' is not present");
            }
        }

        /// <summary>
        /// The table prefix used for catalog tables that are created.
        /// </summary>
        [PolicyResourceProperty("tablePrefix", "_mUnknown_TablePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TablePrefix;
        private bool _mUnknown_TablePrefix;
        public string? TablePrefix
        {
            get
            {
                if (!_mUnknown_TablePrefix) return _mValue_TablePrefix;
                throw new UndeferrableValueException("Value 'Crawler.TablePrefix' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Crawler.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Crawler.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:glue/crawler:Crawler")]
    public sealed class CrawlerArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// List of nested AWS Glue Data Catalog target arguments. See Catalog Target below.
        /// </summary>
        [PolicyResourceProperty("catalogTargets", "_mUnknown_CatalogTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.CrawlerCatalogTargetArgs>? _mValue_CatalogTargets;
        private bool _mUnknown_CatalogTargets;
        public List<Inputs.CrawlerCatalogTargetArgs>? CatalogTargets
        {
            get
            {
                if (!_mUnknown_CatalogTargets) return _mValue_CatalogTargets;
                throw new UndeferrableValueException("Value 'CrawlerArgs.CatalogTargets' is not present");
            }
        }

        /// <summary>
        /// List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
        /// </summary>
        [PolicyResourceProperty("classifiers", "_mUnknown_Classifiers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Classifiers;
        private bool _mUnknown_Classifiers;
        public List<string>? Classifiers
        {
            get
            {
                if (!_mUnknown_Classifiers) return _mValue_Classifiers;
                throw new UndeferrableValueException("Value 'CrawlerArgs.Classifiers' is not present");
            }
        }

        /// <summary>
        /// JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
        /// </summary>
        [PolicyResourceProperty("configuration", "_mUnknown_Configuration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Configuration;
        private bool _mUnknown_Configuration;
        public string? Configuration
        {
            get
            {
                if (!_mUnknown_Configuration) return _mValue_Configuration;
                throw new UndeferrableValueException("Value 'CrawlerArgs.Configuration' is not present");
            }
        }

        /// <summary>
        /// Glue database where results are written.
        /// </summary>
        [PolicyResourceProperty("databaseName", "_mUnknown_DatabaseName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DatabaseName;
        private bool _mUnknown_DatabaseName;
        public string? DatabaseName
        {
            get
            {
                if (!_mUnknown_DatabaseName) return _mValue_DatabaseName;
                throw new UndeferrableValueException("Value 'CrawlerArgs.DatabaseName' is not present");
            }
        }

        /// <summary>
        /// List of nested Delta Lake target arguments. See Delta Target below.
        /// </summary>
        [PolicyResourceProperty("deltaTargets", "_mUnknown_DeltaTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.CrawlerDeltaTargetArgs>? _mValue_DeltaTargets;
        private bool _mUnknown_DeltaTargets;
        public List<Inputs.CrawlerDeltaTargetArgs>? DeltaTargets
        {
            get
            {
                if (!_mUnknown_DeltaTargets) return _mValue_DeltaTargets;
                throw new UndeferrableValueException("Value 'CrawlerArgs.DeltaTargets' is not present");
            }
        }

        /// <summary>
        /// Description of the crawler.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'CrawlerArgs.Description' is not present");
            }
        }

        /// <summary>
        /// List of nested DynamoDB target arguments. See Dynamodb Target below.
        /// </summary>
        [PolicyResourceProperty("dynamodbTargets", "_mUnknown_DynamodbTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.CrawlerDynamodbTargetArgs>? _mValue_DynamodbTargets;
        private bool _mUnknown_DynamodbTargets;
        public List<Inputs.CrawlerDynamodbTargetArgs>? DynamodbTargets
        {
            get
            {
                if (!_mUnknown_DynamodbTargets) return _mValue_DynamodbTargets;
                throw new UndeferrableValueException("Value 'CrawlerArgs.DynamodbTargets' is not present");
            }
        }

        /// <summary>
        /// List of nested Hudi target arguments. See Iceberg Target below.
        /// </summary>
        [PolicyResourceProperty("hudiTargets", "_mUnknown_HudiTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.CrawlerHudiTargetArgs>? _mValue_HudiTargets;
        private bool _mUnknown_HudiTargets;
        public List<Inputs.CrawlerHudiTargetArgs>? HudiTargets
        {
            get
            {
                if (!_mUnknown_HudiTargets) return _mValue_HudiTargets;
                throw new UndeferrableValueException("Value 'CrawlerArgs.HudiTargets' is not present");
            }
        }

        /// <summary>
        /// List of nested Iceberg target arguments. See Iceberg Target below.
        /// </summary>
        [PolicyResourceProperty("icebergTargets", "_mUnknown_IcebergTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.CrawlerIcebergTargetArgs>? _mValue_IcebergTargets;
        private bool _mUnknown_IcebergTargets;
        public List<Inputs.CrawlerIcebergTargetArgs>? IcebergTargets
        {
            get
            {
                if (!_mUnknown_IcebergTargets) return _mValue_IcebergTargets;
                throw new UndeferrableValueException("Value 'CrawlerArgs.IcebergTargets' is not present");
            }
        }

        /// <summary>
        /// List of nested JDBC target arguments. See JDBC Target below.
        /// </summary>
        [PolicyResourceProperty("jdbcTargets", "_mUnknown_JdbcTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.CrawlerJdbcTargetArgs>? _mValue_JdbcTargets;
        private bool _mUnknown_JdbcTargets;
        public List<Inputs.CrawlerJdbcTargetArgs>? JdbcTargets
        {
            get
            {
                if (!_mUnknown_JdbcTargets) return _mValue_JdbcTargets;
                throw new UndeferrableValueException("Value 'CrawlerArgs.JdbcTargets' is not present");
            }
        }

        /// <summary>
        /// Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
        /// </summary>
        [PolicyResourceProperty("lakeFormationConfiguration", "_mUnknown_LakeFormationConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.CrawlerLakeFormationConfigurationArgs? _mValue_LakeFormationConfiguration;
        private bool _mUnknown_LakeFormationConfiguration;
        public Inputs.CrawlerLakeFormationConfigurationArgs? LakeFormationConfiguration
        {
            get
            {
                if (!_mUnknown_LakeFormationConfiguration) return _mValue_LakeFormationConfiguration;
                throw new UndeferrableValueException("Value 'CrawlerArgs.LakeFormationConfiguration' is not present");
            }
        }

        /// <summary>
        /// Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
        /// </summary>
        [PolicyResourceProperty("lineageConfiguration", "_mUnknown_LineageConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.CrawlerLineageConfigurationArgs? _mValue_LineageConfiguration;
        private bool _mUnknown_LineageConfiguration;
        public Inputs.CrawlerLineageConfigurationArgs? LineageConfiguration
        {
            get
            {
                if (!_mUnknown_LineageConfiguration) return _mValue_LineageConfiguration;
                throw new UndeferrableValueException("Value 'CrawlerArgs.LineageConfiguration' is not present");
            }
        }

        /// <summary>
        /// List of nested MongoDB target arguments. See MongoDB Target below.
        /// </summary>
        [PolicyResourceProperty("mongodbTargets", "_mUnknown_MongodbTargets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.CrawlerMongodbTargetArgs>? _mValue_MongodbTargets;
        private bool _mUnknown_MongodbTargets;
        public List<Inputs.CrawlerMongodbTargetArgs>? MongodbTargets
        {
            get
            {
                if (!_mUnknown_MongodbTargets) return _mValue_MongodbTargets;
                throw new UndeferrableValueException("Value 'CrawlerArgs.MongodbTargets' is not present");
            }
        }

        /// <summary>
        /// Name of the crawler.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'CrawlerArgs.Name' is not present");
            }
        }

        /// <summary>
        /// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
        /// </summary>
        [PolicyResourceProperty("recrawlPolicy", "_mUnknown_RecrawlPolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.CrawlerRecrawlPolicyArgs? _mValue_RecrawlPolicy;
        private bool _mUnknown_RecrawlPolicy;
        public Inputs.CrawlerRecrawlPolicyArgs? RecrawlPolicy
        {
            get
            {
                if (!_mUnknown_RecrawlPolicy) return _mValue_RecrawlPolicy;
                throw new UndeferrableValueException("Value 'CrawlerArgs.RecrawlPolicy' is not present");
            }
        }

        /// <summary>
        /// The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
        /// </summary>
        [PolicyResourceProperty("role", "_mUnknown_Role")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Role;
        private bool _mUnknown_Role;
        public string? Role
        {
            get
            {
                if (!_mUnknown_Role) return _mValue_Role;
                throw new UndeferrableValueException("Value 'CrawlerArgs.Role' is not present");
            }
        }

        /// <summary>
        /// List of nested Amazon S3 target arguments. See S3 Target below.
        /// </summary>
        [PolicyResourceProperty("s3Targets", "_mUnknown_S3Targets")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.CrawlerS3TargetArgs>? _mValue_S3Targets;
        private bool _mUnknown_S3Targets;
        public List<Inputs.CrawlerS3TargetArgs>? S3Targets
        {
            get
            {
                if (!_mUnknown_S3Targets) return _mValue_S3Targets;
                throw new UndeferrableValueException("Value 'CrawlerArgs.S3Targets' is not present");
            }
        }

        /// <summary>
        /// A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
        /// </summary>
        [PolicyResourceProperty("schedule", "_mUnknown_Schedule")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Schedule;
        private bool _mUnknown_Schedule;
        public string? Schedule
        {
            get
            {
                if (!_mUnknown_Schedule) return _mValue_Schedule;
                throw new UndeferrableValueException("Value 'CrawlerArgs.Schedule' is not present");
            }
        }

        /// <summary>
        /// Policy for the crawler's update and deletion behavior. See Schema Change Policy below.
        /// </summary>
        [PolicyResourceProperty("schemaChangePolicy", "_mUnknown_SchemaChangePolicy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.CrawlerSchemaChangePolicyArgs? _mValue_SchemaChangePolicy;
        private bool _mUnknown_SchemaChangePolicy;
        public Inputs.CrawlerSchemaChangePolicyArgs? SchemaChangePolicy
        {
            get
            {
                if (!_mUnknown_SchemaChangePolicy) return _mValue_SchemaChangePolicy;
                throw new UndeferrableValueException("Value 'CrawlerArgs.SchemaChangePolicy' is not present");
            }
        }

        /// <summary>
        /// The name of Security Configuration to be used by the crawler
        /// </summary>
        [PolicyResourceProperty("securityConfiguration", "_mUnknown_SecurityConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityConfiguration;
        private bool _mUnknown_SecurityConfiguration;
        public string? SecurityConfiguration
        {
            get
            {
                if (!_mUnknown_SecurityConfiguration) return _mValue_SecurityConfiguration;
                throw new UndeferrableValueException("Value 'CrawlerArgs.SecurityConfiguration' is not present");
            }
        }

        /// <summary>
        /// The table prefix used for catalog tables that are created.
        /// </summary>
        [PolicyResourceProperty("tablePrefix", "_mUnknown_TablePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TablePrefix;
        private bool _mUnknown_TablePrefix;
        public string? TablePrefix
        {
            get
            {
                if (!_mUnknown_TablePrefix) return _mValue_TablePrefix;
                throw new UndeferrableValueException("Value 'CrawlerArgs.TablePrefix' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'CrawlerArgs.Tags' is not present");
            }
        }
    }
}
