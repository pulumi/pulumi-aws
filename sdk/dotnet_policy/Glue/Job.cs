// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Glue
{
    [PolicyResourceType("aws:glue/job:Job")]
    public sealed class Job : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of Glue Job
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Job.Arn' is not present");
            }
        }

        /// <summary>
        /// The command of the job. Defined below.
        /// </summary>
        [PolicyResourceProperty("command", "_mUnknown_Command")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.JobCommand? _mValue_Command;
        private bool _mUnknown_Command;
        public Outputs.JobCommand? Command
        {
            get
            {
                if (!_mUnknown_Command) return _mValue_Command;
                throw new UndeferrableValueException("Value 'Job.Command' is not present");
            }
        }

        /// <summary>
        /// The list of connections used for this job.
        /// </summary>
        [PolicyResourceProperty("connections", "_mUnknown_Connections")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Connections;
        private bool _mUnknown_Connections;
        public List<string>? Connections
        {
            get
            {
                if (!_mUnknown_Connections) return _mValue_Connections;
                throw new UndeferrableValueException("Value 'Job.Connections' is not present");
            }
        }

        /// <summary>
        /// The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
        /// </summary>
        [PolicyResourceProperty("defaultArguments", "_mUnknown_DefaultArguments")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_DefaultArguments;
        private bool _mUnknown_DefaultArguments;
        public Dictionary<string, string>? DefaultArguments
        {
            get
            {
                if (!_mUnknown_DefaultArguments) return _mValue_DefaultArguments;
                throw new UndeferrableValueException("Value 'Job.DefaultArguments' is not present");
            }
        }

        /// <summary>
        /// Description of the job.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'Job.Description' is not present");
            }
        }

        /// <summary>
        /// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: `FLEX`, `STANDARD`.
        /// </summary>
        [PolicyResourceProperty("executionClass", "_mUnknown_ExecutionClass")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ExecutionClass;
        private bool _mUnknown_ExecutionClass;
        public string? ExecutionClass
        {
            get
            {
                if (!_mUnknown_ExecutionClass) return _mValue_ExecutionClass;
                throw new UndeferrableValueException("Value 'Job.ExecutionClass' is not present");
            }
        }

        /// <summary>
        /// Execution property of the job. Defined below.
        /// </summary>
        [PolicyResourceProperty("executionProperty", "_mUnknown_ExecutionProperty")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.JobExecutionProperty? _mValue_ExecutionProperty;
        private bool _mUnknown_ExecutionProperty;
        public Outputs.JobExecutionProperty? ExecutionProperty
        {
            get
            {
                if (!_mUnknown_ExecutionProperty) return _mValue_ExecutionProperty;
                throw new UndeferrableValueException("Value 'Job.ExecutionProperty' is not present");
            }
        }

        /// <summary>
        /// The version of glue to use, for example "1.0". Ray jobs should set this to 4.0 or greater. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
        /// </summary>
        [PolicyResourceProperty("glueVersion", "_mUnknown_GlueVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GlueVersion;
        private bool _mUnknown_GlueVersion;
        public string? GlueVersion
        {
            get
            {
                if (!_mUnknown_GlueVersion) return _mValue_GlueVersion;
                throw new UndeferrableValueException("Value 'Job.GlueVersion' is not present");
            }
        }

        /// <summary>
        /// Specifies whether job run queuing is enabled for the job runs for this job. A value of true means job run queuing is enabled for the job runs. If false or not populated, the job runs will not be considered for queueing.
        /// </summary>
        [PolicyResourceProperty("jobRunQueuingEnabled", "_mUnknown_JobRunQueuingEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_JobRunQueuingEnabled;
        private bool _mUnknown_JobRunQueuingEnabled;
        public bool? JobRunQueuingEnabled
        {
            get
            {
                if (!_mUnknown_JobRunQueuingEnabled) return _mValue_JobRunQueuingEnabled;
                throw new UndeferrableValueException("Value 'Job.JobRunQueuingEnabled' is not present");
            }
        }

        /// <summary>
        /// Specifies the day of the week and hour for the maintenance window for streaming jobs.
        /// </summary>
        [PolicyResourceProperty("maintenanceWindow", "_mUnknown_MaintenanceWindow")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MaintenanceWindow;
        private bool _mUnknown_MaintenanceWindow;
        public string? MaintenanceWindow
        {
            get
            {
                if (!_mUnknown_MaintenanceWindow) return _mValue_MaintenanceWindow;
                throw new UndeferrableValueException("Value 'Job.MaintenanceWindow' is not present");
            }
        }

        /// <summary>
        /// The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `number_of_workers` and `worker_type` arguments instead with `glue_version` `2.0` and above.
        /// </summary>
        [PolicyResourceProperty("maxCapacity", "_mUnknown_MaxCapacity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private double? _mValue_MaxCapacity;
        private bool _mUnknown_MaxCapacity;
        public double? MaxCapacity
        {
            get
            {
                if (!_mUnknown_MaxCapacity) return _mValue_MaxCapacity;
                throw new UndeferrableValueException("Value 'Job.MaxCapacity' is not present");
            }
        }

        /// <summary>
        /// The maximum number of times to retry this job if it fails.
        /// </summary>
        [PolicyResourceProperty("maxRetries", "_mUnknown_MaxRetries")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxRetries;
        private bool _mUnknown_MaxRetries;
        public int? MaxRetries
        {
            get
            {
                if (!_mUnknown_MaxRetries) return _mValue_MaxRetries;
                throw new UndeferrableValueException("Value 'Job.MaxRetries' is not present");
            }
        }

        /// <summary>
        /// The name you assign to this job. It must be unique in your account.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Job.Name' is not present");
            }
        }

        /// <summary>
        /// Non-overridable arguments for this job, specified as name-value pairs.
        /// </summary>
        [PolicyResourceProperty("nonOverridableArguments", "_mUnknown_NonOverridableArguments")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_NonOverridableArguments;
        private bool _mUnknown_NonOverridableArguments;
        public Dictionary<string, string>? NonOverridableArguments
        {
            get
            {
                if (!_mUnknown_NonOverridableArguments) return _mValue_NonOverridableArguments;
                throw new UndeferrableValueException("Value 'Job.NonOverridableArguments' is not present");
            }
        }

        /// <summary>
        /// Notification property of the job. Defined below.
        /// </summary>
        [PolicyResourceProperty("notificationProperty", "_mUnknown_NotificationProperty")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.JobNotificationProperty? _mValue_NotificationProperty;
        private bool _mUnknown_NotificationProperty;
        public Outputs.JobNotificationProperty? NotificationProperty
        {
            get
            {
                if (!_mUnknown_NotificationProperty) return _mValue_NotificationProperty;
                throw new UndeferrableValueException("Value 'Job.NotificationProperty' is not present");
            }
        }

        /// <summary>
        /// The number of workers of a defined workerType that are allocated when a job runs.
        /// </summary>
        [PolicyResourceProperty("numberOfWorkers", "_mUnknown_NumberOfWorkers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_NumberOfWorkers;
        private bool _mUnknown_NumberOfWorkers;
        public int? NumberOfWorkers
        {
            get
            {
                if (!_mUnknown_NumberOfWorkers) return _mValue_NumberOfWorkers;
                throw new UndeferrableValueException("Value 'Job.NumberOfWorkers' is not present");
            }
        }

        /// <summary>
        /// The ARN of the IAM role associated with this job.
        /// </summary>
        [PolicyResourceProperty("roleArn", "_mUnknown_RoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoleArn;
        private bool _mUnknown_RoleArn;
        public string? RoleArn
        {
            get
            {
                if (!_mUnknown_RoleArn) return _mValue_RoleArn;
                throw new UndeferrableValueException("Value 'Job.RoleArn' is not present");
            }
        }

        /// <summary>
        /// The name of the Security Configuration to be associated with the job.
        /// </summary>
        [PolicyResourceProperty("securityConfiguration", "_mUnknown_SecurityConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityConfiguration;
        private bool _mUnknown_SecurityConfiguration;
        public string? SecurityConfiguration
        {
            get
            {
                if (!_mUnknown_SecurityConfiguration) return _mValue_SecurityConfiguration;
                throw new UndeferrableValueException("Value 'Job.SecurityConfiguration' is not present");
            }
        }

        /// <summary>
        /// The details for a source control configuration for a job, allowing synchronization of job artifacts to or from a remote repository. Defined below.
        /// </summary>
        [PolicyResourceProperty("sourceControlDetails", "_mUnknown_SourceControlDetails")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.JobSourceControlDetails? _mValue_SourceControlDetails;
        private bool _mUnknown_SourceControlDetails;
        public Outputs.JobSourceControlDetails? SourceControlDetails
        {
            get
            {
                if (!_mUnknown_SourceControlDetails) return _mValue_SourceControlDetails;
                throw new UndeferrableValueException("Value 'Job.SourceControlDetails' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Job.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Job.TagsAll' is not present");
            }
        }

        /// <summary>
        /// The job timeout in minutes. The default is 2880 minutes (48 hours) for `glueetl` and `pythonshell` jobs, and null (unlimited) for `gluestreaming` jobs.
        /// </summary>
        [PolicyResourceProperty("timeout", "_mUnknown_Timeout")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Timeout;
        private bool _mUnknown_Timeout;
        public int? Timeout
        {
            get
            {
                if (!_mUnknown_Timeout) return _mValue_Timeout;
                throw new UndeferrableValueException("Value 'Job.Timeout' is not present");
            }
        }

        /// <summary>
        /// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
        /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
        /// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
        /// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
        /// * For the G.4X worker type, each worker maps to 4 DPU (16 vCPUs, 64 GB of memory) with 256GB disk (approximately 235GB free), and provides 1 executor per worker. Recommended for memory-intensive jobs. Only available for Glue version 3.0. Available AWS Regions: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Canada (Central), Europe (Frankfurt), Europe (Ireland), and Europe (Stockholm).
        /// * For the G.8X worker type, each worker maps to 8 DPU (32 vCPUs, 128 GB of memory) with 512GB disk (approximately 487GB free), and provides 1 executor per worker. Recommended for memory-intensive jobs. Only available for Glue version 3.0. Available AWS Regions: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Canada (Central), Europe (Frankfurt), Europe (Ireland), and Europe (Stockholm).
        /// * For the G.025X worker type, each worker maps to 0.25 DPU (2 vCPU, 4GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for low volume streaming jobs. Only available for Glue version 3.0.
        /// * For the Z.2X worker type, each worker maps to 2 M-DPU (8vCPU, 64 GB of m emory, 128 GB disk), and provides up to 8 Ray workers based on the autoscaler.
        /// </summary>
        [PolicyResourceProperty("workerType", "_mUnknown_WorkerType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_WorkerType;
        private bool _mUnknown_WorkerType;
        public string? WorkerType
        {
            get
            {
                if (!_mUnknown_WorkerType) return _mValue_WorkerType;
                throw new UndeferrableValueException("Value 'Job.WorkerType' is not present");
            }
        }
    }

    [PolicyResourceType("aws:glue/job:Job")]
    public sealed class JobArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The command of the job. Defined below.
        /// </summary>
        [PolicyResourceProperty("command", "_mUnknown_Command")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.JobCommandArgs? _mValue_Command;
        private bool _mUnknown_Command;
        public Inputs.JobCommandArgs? Command
        {
            get
            {
                if (!_mUnknown_Command) return _mValue_Command;
                throw new UndeferrableValueException("Value 'JobArgs.Command' is not present");
            }
        }

        /// <summary>
        /// The list of connections used for this job.
        /// </summary>
        [PolicyResourceProperty("connections", "_mUnknown_Connections")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Connections;
        private bool _mUnknown_Connections;
        public List<string>? Connections
        {
            get
            {
                if (!_mUnknown_Connections) return _mValue_Connections;
                throw new UndeferrableValueException("Value 'JobArgs.Connections' is not present");
            }
        }

        /// <summary>
        /// The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
        /// </summary>
        [PolicyResourceProperty("defaultArguments", "_mUnknown_DefaultArguments")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_DefaultArguments;
        private bool _mUnknown_DefaultArguments;
        public Dictionary<string, string>? DefaultArguments
        {
            get
            {
                if (!_mUnknown_DefaultArguments) return _mValue_DefaultArguments;
                throw new UndeferrableValueException("Value 'JobArgs.DefaultArguments' is not present");
            }
        }

        /// <summary>
        /// Description of the job.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'JobArgs.Description' is not present");
            }
        }

        /// <summary>
        /// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: `FLEX`, `STANDARD`.
        /// </summary>
        [PolicyResourceProperty("executionClass", "_mUnknown_ExecutionClass")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ExecutionClass;
        private bool _mUnknown_ExecutionClass;
        public string? ExecutionClass
        {
            get
            {
                if (!_mUnknown_ExecutionClass) return _mValue_ExecutionClass;
                throw new UndeferrableValueException("Value 'JobArgs.ExecutionClass' is not present");
            }
        }

        /// <summary>
        /// Execution property of the job. Defined below.
        /// </summary>
        [PolicyResourceProperty("executionProperty", "_mUnknown_ExecutionProperty")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.JobExecutionPropertyArgs? _mValue_ExecutionProperty;
        private bool _mUnknown_ExecutionProperty;
        public Inputs.JobExecutionPropertyArgs? ExecutionProperty
        {
            get
            {
                if (!_mUnknown_ExecutionProperty) return _mValue_ExecutionProperty;
                throw new UndeferrableValueException("Value 'JobArgs.ExecutionProperty' is not present");
            }
        }

        /// <summary>
        /// The version of glue to use, for example "1.0". Ray jobs should set this to 4.0 or greater. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
        /// </summary>
        [PolicyResourceProperty("glueVersion", "_mUnknown_GlueVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GlueVersion;
        private bool _mUnknown_GlueVersion;
        public string? GlueVersion
        {
            get
            {
                if (!_mUnknown_GlueVersion) return _mValue_GlueVersion;
                throw new UndeferrableValueException("Value 'JobArgs.GlueVersion' is not present");
            }
        }

        /// <summary>
        /// Specifies whether job run queuing is enabled for the job runs for this job. A value of true means job run queuing is enabled for the job runs. If false or not populated, the job runs will not be considered for queueing.
        /// </summary>
        [PolicyResourceProperty("jobRunQueuingEnabled", "_mUnknown_JobRunQueuingEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_JobRunQueuingEnabled;
        private bool _mUnknown_JobRunQueuingEnabled;
        public bool? JobRunQueuingEnabled
        {
            get
            {
                if (!_mUnknown_JobRunQueuingEnabled) return _mValue_JobRunQueuingEnabled;
                throw new UndeferrableValueException("Value 'JobArgs.JobRunQueuingEnabled' is not present");
            }
        }

        /// <summary>
        /// Specifies the day of the week and hour for the maintenance window for streaming jobs.
        /// </summary>
        [PolicyResourceProperty("maintenanceWindow", "_mUnknown_MaintenanceWindow")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MaintenanceWindow;
        private bool _mUnknown_MaintenanceWindow;
        public string? MaintenanceWindow
        {
            get
            {
                if (!_mUnknown_MaintenanceWindow) return _mValue_MaintenanceWindow;
                throw new UndeferrableValueException("Value 'JobArgs.MaintenanceWindow' is not present");
            }
        }

        /// <summary>
        /// The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `number_of_workers` and `worker_type` arguments instead with `glue_version` `2.0` and above.
        /// </summary>
        [PolicyResourceProperty("maxCapacity", "_mUnknown_MaxCapacity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private double? _mValue_MaxCapacity;
        private bool _mUnknown_MaxCapacity;
        public double? MaxCapacity
        {
            get
            {
                if (!_mUnknown_MaxCapacity) return _mValue_MaxCapacity;
                throw new UndeferrableValueException("Value 'JobArgs.MaxCapacity' is not present");
            }
        }

        /// <summary>
        /// The maximum number of times to retry this job if it fails.
        /// </summary>
        [PolicyResourceProperty("maxRetries", "_mUnknown_MaxRetries")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxRetries;
        private bool _mUnknown_MaxRetries;
        public int? MaxRetries
        {
            get
            {
                if (!_mUnknown_MaxRetries) return _mValue_MaxRetries;
                throw new UndeferrableValueException("Value 'JobArgs.MaxRetries' is not present");
            }
        }

        /// <summary>
        /// The name you assign to this job. It must be unique in your account.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'JobArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Non-overridable arguments for this job, specified as name-value pairs.
        /// </summary>
        [PolicyResourceProperty("nonOverridableArguments", "_mUnknown_NonOverridableArguments")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_NonOverridableArguments;
        private bool _mUnknown_NonOverridableArguments;
        public Dictionary<string, string>? NonOverridableArguments
        {
            get
            {
                if (!_mUnknown_NonOverridableArguments) return _mValue_NonOverridableArguments;
                throw new UndeferrableValueException("Value 'JobArgs.NonOverridableArguments' is not present");
            }
        }

        /// <summary>
        /// Notification property of the job. Defined below.
        /// </summary>
        [PolicyResourceProperty("notificationProperty", "_mUnknown_NotificationProperty")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.JobNotificationPropertyArgs? _mValue_NotificationProperty;
        private bool _mUnknown_NotificationProperty;
        public Inputs.JobNotificationPropertyArgs? NotificationProperty
        {
            get
            {
                if (!_mUnknown_NotificationProperty) return _mValue_NotificationProperty;
                throw new UndeferrableValueException("Value 'JobArgs.NotificationProperty' is not present");
            }
        }

        /// <summary>
        /// The number of workers of a defined workerType that are allocated when a job runs.
        /// </summary>
        [PolicyResourceProperty("numberOfWorkers", "_mUnknown_NumberOfWorkers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_NumberOfWorkers;
        private bool _mUnknown_NumberOfWorkers;
        public int? NumberOfWorkers
        {
            get
            {
                if (!_mUnknown_NumberOfWorkers) return _mValue_NumberOfWorkers;
                throw new UndeferrableValueException("Value 'JobArgs.NumberOfWorkers' is not present");
            }
        }

        /// <summary>
        /// The ARN of the IAM role associated with this job.
        /// </summary>
        [PolicyResourceProperty("roleArn", "_mUnknown_RoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RoleArn;
        private bool _mUnknown_RoleArn;
        public string? RoleArn
        {
            get
            {
                if (!_mUnknown_RoleArn) return _mValue_RoleArn;
                throw new UndeferrableValueException("Value 'JobArgs.RoleArn' is not present");
            }
        }

        /// <summary>
        /// The name of the Security Configuration to be associated with the job.
        /// </summary>
        [PolicyResourceProperty("securityConfiguration", "_mUnknown_SecurityConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SecurityConfiguration;
        private bool _mUnknown_SecurityConfiguration;
        public string? SecurityConfiguration
        {
            get
            {
                if (!_mUnknown_SecurityConfiguration) return _mValue_SecurityConfiguration;
                throw new UndeferrableValueException("Value 'JobArgs.SecurityConfiguration' is not present");
            }
        }

        /// <summary>
        /// The details for a source control configuration for a job, allowing synchronization of job artifacts to or from a remote repository. Defined below.
        /// </summary>
        [PolicyResourceProperty("sourceControlDetails", "_mUnknown_SourceControlDetails")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.JobSourceControlDetailsArgs? _mValue_SourceControlDetails;
        private bool _mUnknown_SourceControlDetails;
        public Inputs.JobSourceControlDetailsArgs? SourceControlDetails
        {
            get
            {
                if (!_mUnknown_SourceControlDetails) return _mValue_SourceControlDetails;
                throw new UndeferrableValueException("Value 'JobArgs.SourceControlDetails' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'JobArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// The job timeout in minutes. The default is 2880 minutes (48 hours) for `glueetl` and `pythonshell` jobs, and null (unlimited) for `gluestreaming` jobs.
        /// </summary>
        [PolicyResourceProperty("timeout", "_mUnknown_Timeout")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Timeout;
        private bool _mUnknown_Timeout;
        public int? Timeout
        {
            get
            {
                if (!_mUnknown_Timeout) return _mValue_Timeout;
                throw new UndeferrableValueException("Value 'JobArgs.Timeout' is not present");
            }
        }

        /// <summary>
        /// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
        /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
        /// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
        /// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
        /// * For the G.4X worker type, each worker maps to 4 DPU (16 vCPUs, 64 GB of memory) with 256GB disk (approximately 235GB free), and provides 1 executor per worker. Recommended for memory-intensive jobs. Only available for Glue version 3.0. Available AWS Regions: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Canada (Central), Europe (Frankfurt), Europe (Ireland), and Europe (Stockholm).
        /// * For the G.8X worker type, each worker maps to 8 DPU (32 vCPUs, 128 GB of memory) with 512GB disk (approximately 487GB free), and provides 1 executor per worker. Recommended for memory-intensive jobs. Only available for Glue version 3.0. Available AWS Regions: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Canada (Central), Europe (Frankfurt), Europe (Ireland), and Europe (Stockholm).
        /// * For the G.025X worker type, each worker maps to 0.25 DPU (2 vCPU, 4GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for low volume streaming jobs. Only available for Glue version 3.0.
        /// * For the Z.2X worker type, each worker maps to 2 M-DPU (8vCPU, 64 GB of m emory, 128 GB disk), and provides up to 8 Ray workers based on the autoscaler.
        /// </summary>
        [PolicyResourceProperty("workerType", "_mUnknown_WorkerType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_WorkerType;
        private bool _mUnknown_WorkerType;
        public string? WorkerType
        {
            get
            {
                if (!_mUnknown_WorkerType) return _mValue_WorkerType;
                throw new UndeferrableValueException("Value 'JobArgs.WorkerType' is not present");
            }
        }
    }
}
