// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.RolesAnywhere
{
    [PolicyResourceType("aws:rolesanywhere/trustAnchor:TrustAnchor")]
    public sealed class TrustAnchor : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the Trust Anchor
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'TrustAnchor.Arn' is not present");
            }
        }

        /// <summary>
        /// Whether or not the Trust Anchor should be enabled.
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'TrustAnchor.Enabled' is not present");
            }
        }

        /// <summary>
        /// The name of the Trust Anchor.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'TrustAnchor.Name' is not present");
            }
        }

        [PolicyResourceProperty("notificationSettings", "_mUnknown_NotificationSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.TrustAnchorNotificationSetting>? _mValue_NotificationSettings;
        private bool _mUnknown_NotificationSettings;
        public List<Outputs.TrustAnchorNotificationSetting>? NotificationSettings
        {
            get
            {
                if (!_mUnknown_NotificationSettings) return _mValue_NotificationSettings;
                throw new UndeferrableValueException("Value 'TrustAnchor.NotificationSettings' is not present");
            }
        }

        /// <summary>
        /// The source of trust, documented below
        /// </summary>
        [PolicyResourceProperty("source", "_mUnknown_Source")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.TrustAnchorSource? _mValue_Source;
        private bool _mUnknown_Source;
        public Outputs.TrustAnchorSource? Source
        {
            get
            {
                if (!_mUnknown_Source) return _mValue_Source;
                throw new UndeferrableValueException("Value 'TrustAnchor.Source' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'TrustAnchor.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'TrustAnchor.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:rolesanywhere/trustAnchor:TrustAnchor")]
    public sealed class TrustAnchorArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Whether or not the Trust Anchor should be enabled.
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'TrustAnchorArgs.Enabled' is not present");
            }
        }

        /// <summary>
        /// The name of the Trust Anchor.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'TrustAnchorArgs.Name' is not present");
            }
        }

        [PolicyResourceProperty("notificationSettings", "_mUnknown_NotificationSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.TrustAnchorNotificationSettingArgs>? _mValue_NotificationSettings;
        private bool _mUnknown_NotificationSettings;
        public List<Inputs.TrustAnchorNotificationSettingArgs>? NotificationSettings
        {
            get
            {
                if (!_mUnknown_NotificationSettings) return _mValue_NotificationSettings;
                throw new UndeferrableValueException("Value 'TrustAnchorArgs.NotificationSettings' is not present");
            }
        }

        /// <summary>
        /// The source of trust, documented below
        /// </summary>
        [PolicyResourceProperty("source", "_mUnknown_Source")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.TrustAnchorSourceArgs? _mValue_Source;
        private bool _mUnknown_Source;
        public Inputs.TrustAnchorSourceArgs? Source
        {
            get
            {
                if (!_mUnknown_Source) return _mValue_Source;
                throw new UndeferrableValueException("Value 'TrustAnchorArgs.Source' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'TrustAnchorArgs.Tags' is not present");
            }
        }
    }
}
