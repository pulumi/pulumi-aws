// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.DataSync
{
    [PolicyResourceType("aws:datasync/nfsLocation:NfsLocation")]
    public sealed class NfsLocation : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the DataSync Location.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Configuration block containing mount options used by DataSync to access the NFS Server.
        /// </summary>
        [Input("mountOptions")]
        public NfsLocationMountOptions? MountOptions;

        /// <summary>
        /// Configuration block containing information for connecting to the NFS File System.
        /// </summary>
        [Input("onPremConfig")]
        public NfsLocationOnPremConfig? OnPremConfig;

        /// <summary>
        /// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
        /// </summary>
        [Input("serverHostname")]
        public string? ServerHostname;

        /// <summary>
        /// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
        /// </summary>
        [Input("subdirectory")]
        public string? Subdirectory;

        /// <summary>
        /// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        [Input("uri")]
        public string? Uri;
    }
}
