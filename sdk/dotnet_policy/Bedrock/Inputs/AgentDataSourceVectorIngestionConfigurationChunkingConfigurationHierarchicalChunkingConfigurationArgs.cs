// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Bedrock.Inputs
{
    public sealed class AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationArgs
    {
        /// <summary>
        /// Maximum number of tokens to include in a chunk. Must contain two `level_configurations`. See `level_configurations` for details.
        /// </summary>
        [PolicyResourceProperty("levelConfigurations", "_mUnknown_LevelConfigurations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs>? _mValue_LevelConfigurations;
        private bool _mUnknown_LevelConfigurations;
        public List<Inputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationLevelConfigurationArgs>? LevelConfigurations
        {
            get
            {
                if (!_mUnknown_LevelConfigurations) return _mValue_LevelConfigurations;
                throw new UndeferrableValueException("Value 'AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationArgs.LevelConfigurations' is not present");
            }
        }

        /// <summary>
        /// The number of tokens to repeat across chunks in the same layer.
        /// </summary>
        [PolicyResourceProperty("overlapTokens", "_mUnknown_OverlapTokens")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_OverlapTokens;
        private bool _mUnknown_OverlapTokens;
        public int? OverlapTokens
        {
            get
            {
                if (!_mUnknown_OverlapTokens) return _mValue_OverlapTokens;
                throw new UndeferrableValueException("Value 'AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationArgs.OverlapTokens' is not present");
            }
        }
    }
}
