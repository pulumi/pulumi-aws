// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Rum
{
    [PolicyResourceType("aws:rum/appMonitor:AppMonitor")]
    public sealed class AppMonitor : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// configuration data for the app monitor. See app_monitor_configuration below.
        /// </summary>
        [PolicyResourceProperty("appMonitorConfiguration", "_mUnknown_AppMonitorConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.AppMonitorAppMonitorConfiguration? _mValue_AppMonitorConfiguration;
        private bool _mUnknown_AppMonitorConfiguration;
        public Outputs.AppMonitorAppMonitorConfiguration? AppMonitorConfiguration
        {
            get
            {
                if (!_mUnknown_AppMonitorConfiguration) return _mValue_AppMonitorConfiguration;
                throw new UndeferrableValueException("Value 'AppMonitor.AppMonitorConfiguration' is not present");
            }
        }

        /// <summary>
        /// The unique ID of the app monitor. Useful for JS templates.
        /// </summary>
        [PolicyResourceProperty("appMonitorId", "_mUnknown_AppMonitorId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AppMonitorId;
        private bool _mUnknown_AppMonitorId;
        public string? AppMonitorId
        {
            get
            {
                if (!_mUnknown_AppMonitorId) return _mValue_AppMonitorId;
                throw new UndeferrableValueException("Value 'AppMonitor.AppMonitorId' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) specifying the app monitor.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'AppMonitor.Arn' is not present");
            }
        }

        /// <summary>
        /// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See custom_events below.
        /// </summary>
        [PolicyResourceProperty("customEvents", "_mUnknown_CustomEvents")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.AppMonitorCustomEvents? _mValue_CustomEvents;
        private bool _mUnknown_CustomEvents;
        public Outputs.AppMonitorCustomEvents? CustomEvents
        {
            get
            {
                if (!_mUnknown_CustomEvents) return _mValue_CustomEvents;
                throw new UndeferrableValueException("Value 'AppMonitor.CustomEvents' is not present");
            }
        }

        /// <summary>
        /// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
        /// </summary>
        [PolicyResourceProperty("cwLogEnabled", "_mUnknown_CwLogEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_CwLogEnabled;
        private bool _mUnknown_CwLogEnabled;
        public bool? CwLogEnabled
        {
            get
            {
                if (!_mUnknown_CwLogEnabled) return _mValue_CwLogEnabled;
                throw new UndeferrableValueException("Value 'AppMonitor.CwLogEnabled' is not present");
            }
        }

        /// <summary>
        /// The name of the log group where the copies are stored.
        /// </summary>
        [PolicyResourceProperty("cwLogGroup", "_mUnknown_CwLogGroup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CwLogGroup;
        private bool _mUnknown_CwLogGroup;
        public string? CwLogGroup
        {
            get
            {
                if (!_mUnknown_CwLogGroup) return _mValue_CwLogGroup;
                throw new UndeferrableValueException("Value 'AppMonitor.CwLogGroup' is not present");
            }
        }

        /// <summary>
        /// The top-level internet domain name for which your application has administrative authority.
        /// </summary>
        [PolicyResourceProperty("domain", "_mUnknown_Domain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Domain;
        private bool _mUnknown_Domain;
        public string? Domain
        {
            get
            {
                if (!_mUnknown_Domain) return _mValue_Domain;
                throw new UndeferrableValueException("Value 'AppMonitor.Domain' is not present");
            }
        }

        /// <summary>
        /// The name of the log stream.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'AppMonitor.Name' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'AppMonitor.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'AppMonitor.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:rum/appMonitor:AppMonitor")]
    public sealed class AppMonitorArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// configuration data for the app monitor. See app_monitor_configuration below.
        /// </summary>
        [PolicyResourceProperty("appMonitorConfiguration", "_mUnknown_AppMonitorConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.AppMonitorAppMonitorConfigurationArgs? _mValue_AppMonitorConfiguration;
        private bool _mUnknown_AppMonitorConfiguration;
        public Inputs.AppMonitorAppMonitorConfigurationArgs? AppMonitorConfiguration
        {
            get
            {
                if (!_mUnknown_AppMonitorConfiguration) return _mValue_AppMonitorConfiguration;
                throw new UndeferrableValueException("Value 'AppMonitorArgs.AppMonitorConfiguration' is not present");
            }
        }

        /// <summary>
        /// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED`. See custom_events below.
        /// </summary>
        [PolicyResourceProperty("customEvents", "_mUnknown_CustomEvents")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.AppMonitorCustomEventsArgs? _mValue_CustomEvents;
        private bool _mUnknown_CustomEvents;
        public Inputs.AppMonitorCustomEventsArgs? CustomEvents
        {
            get
            {
                if (!_mUnknown_CustomEvents) return _mValue_CustomEvents;
                throw new UndeferrableValueException("Value 'AppMonitorArgs.CustomEvents' is not present");
            }
        }

        /// <summary>
        /// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is `false`.
        /// </summary>
        [PolicyResourceProperty("cwLogEnabled", "_mUnknown_CwLogEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_CwLogEnabled;
        private bool _mUnknown_CwLogEnabled;
        public bool? CwLogEnabled
        {
            get
            {
                if (!_mUnknown_CwLogEnabled) return _mValue_CwLogEnabled;
                throw new UndeferrableValueException("Value 'AppMonitorArgs.CwLogEnabled' is not present");
            }
        }

        /// <summary>
        /// The top-level internet domain name for which your application has administrative authority.
        /// </summary>
        [PolicyResourceProperty("domain", "_mUnknown_Domain")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Domain;
        private bool _mUnknown_Domain;
        public string? Domain
        {
            get
            {
                if (!_mUnknown_Domain) return _mValue_Domain;
                throw new UndeferrableValueException("Value 'AppMonitorArgs.Domain' is not present");
            }
        }

        /// <summary>
        /// The name of the log stream.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'AppMonitorArgs.Name' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'AppMonitorArgs.Tags' is not present");
            }
        }
    }
}
