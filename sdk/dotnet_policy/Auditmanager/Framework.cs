// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Auditmanager
{
    [PolicyResourceType("aws:auditmanager/framework:Framework")]
    public sealed class Framework : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the framework.
        /// * `control_sets[*].id` - Unique identifier for the framework control set.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
        /// </summary>
        [Input("complianceType")]
        public string? ComplianceType;

        /// <summary>
        /// Configuration block(s) for the control sets that are associated with the framework. See `control_sets` Block below for details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("controlSets")]
        public List<FrameworkControlSet>? ControlSets;

        /// <summary>
        /// Description of the framework.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// Framework type, such as a custom framework or a standard framework.
        /// </summary>
        [Input("frameworkType")]
        public string? FrameworkType;

        /// <summary>
        /// Name of the framework.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// A map of tags to assign to the framework. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
