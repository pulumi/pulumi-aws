// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Fsx
{
    [PolicyResourceType("aws:fsx/windowsFileSystem:WindowsFileSystem")]
    public sealed class WindowsFileSystem : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `self_managed_active_directory`.
        /// </summary>
        [PolicyResourceProperty("activeDirectoryId", "_mUnknown_ActiveDirectoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ActiveDirectoryId;
        private bool _mUnknown_ActiveDirectoryId;
        public string? ActiveDirectoryId
        {
            get
            {
                if (!_mUnknown_ActiveDirectoryId) return _mValue_ActiveDirectoryId;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.ActiveDirectoryId' is not present");
            }
        }

        /// <summary>
        /// An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html)
        /// </summary>
        [PolicyResourceProperty("aliases", "_mUnknown_Aliases")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Aliases;
        private bool _mUnknown_Aliases;
        public List<string>? Aliases
        {
            get
            {
                if (!_mUnknown_Aliases) return _mValue_Aliases;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.Aliases' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Name of the file system.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.Arn' is not present");
            }
        }

        /// <summary>
        /// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See `audit_log_configuration` Block for details.
        /// </summary>
        [PolicyResourceProperty("auditLogConfiguration", "_mUnknown_AuditLogConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.WindowsFileSystemAuditLogConfiguration? _mValue_AuditLogConfiguration;
        private bool _mUnknown_AuditLogConfiguration;
        public Outputs.WindowsFileSystemAuditLogConfiguration? AuditLogConfiguration
        {
            get
            {
                if (!_mUnknown_AuditLogConfiguration) return _mValue_AuditLogConfiguration;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.AuditLogConfiguration' is not present");
            }
        }

        /// <summary>
        /// The number of days to retain automatic backups. Minimum of `0` and maximum of `90`. Defaults to `7`. Set to `0` to disable.
        /// </summary>
        [PolicyResourceProperty("automaticBackupRetentionDays", "_mUnknown_AutomaticBackupRetentionDays")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_AutomaticBackupRetentionDays;
        private bool _mUnknown_AutomaticBackupRetentionDays;
        public int? AutomaticBackupRetentionDays
        {
            get
            {
                if (!_mUnknown_AutomaticBackupRetentionDays) return _mValue_AutomaticBackupRetentionDays;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.AutomaticBackupRetentionDays' is not present");
            }
        }

        /// <summary>
        /// The ID of the source backup to create the filesystem from.
        /// </summary>
        [PolicyResourceProperty("backupId", "_mUnknown_BackupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BackupId;
        private bool _mUnknown_BackupId;
        public string? BackupId
        {
            get
            {
                if (!_mUnknown_BackupId) return _mValue_BackupId;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.BackupId' is not present");
            }
        }

        /// <summary>
        /// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("copyTagsToBackups", "_mUnknown_CopyTagsToBackups")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_CopyTagsToBackups;
        private bool _mUnknown_CopyTagsToBackups;
        public bool? CopyTagsToBackups
        {
            get
            {
                if (!_mUnknown_CopyTagsToBackups) return _mValue_CopyTagsToBackups;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.CopyTagsToBackups' is not present");
            }
        }

        /// <summary>
        /// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
        /// </summary>
        [PolicyResourceProperty("dailyAutomaticBackupStartTime", "_mUnknown_DailyAutomaticBackupStartTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DailyAutomaticBackupStartTime;
        private bool _mUnknown_DailyAutomaticBackupStartTime;
        public string? DailyAutomaticBackupStartTime
        {
            get
            {
                if (!_mUnknown_DailyAutomaticBackupStartTime) return _mValue_DailyAutomaticBackupStartTime;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.DailyAutomaticBackupStartTime' is not present");
            }
        }

        /// <summary>
        /// Specifies the file system deployment type, valid values are `MULTI_AZ_1`, `SINGLE_AZ_1` and `SINGLE_AZ_2`. Default value is `SINGLE_AZ_1`.
        /// </summary>
        [PolicyResourceProperty("deploymentType", "_mUnknown_DeploymentType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DeploymentType;
        private bool _mUnknown_DeploymentType;
        public string? DeploymentType
        {
            get
            {
                if (!_mUnknown_DeploymentType) return _mValue_DeploymentType;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.DeploymentType' is not present");
            }
        }

        /// <summary>
        /// The SSD IOPS configuration for the Amazon FSx for Windows File Server file system. See `disk_iops_configuration` Block for details.
        /// </summary>
        [PolicyResourceProperty("diskIopsConfiguration", "_mUnknown_DiskIopsConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.WindowsFileSystemDiskIopsConfiguration? _mValue_DiskIopsConfiguration;
        private bool _mUnknown_DiskIopsConfiguration;
        public Outputs.WindowsFileSystemDiskIopsConfiguration? DiskIopsConfiguration
        {
            get
            {
                if (!_mUnknown_DiskIopsConfiguration) return _mValue_DiskIopsConfiguration;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.DiskIopsConfiguration' is not present");
            }
        }

        /// <summary>
        /// DNS name for the file system, e.g., `fs-12345678.corp.example.com` (domain name matching the Active Directory domain name)
        /// </summary>
        [PolicyResourceProperty("dnsName", "_mUnknown_DnsName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DnsName;
        private bool _mUnknown_DnsName;
        public string? DnsName
        {
            get
            {
                if (!_mUnknown_DnsName) return _mValue_DnsName;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.DnsName' is not present");
            }
        }

        /// <summary>
        /// A map of tags to apply to the file system's final backup.
        /// </summary>
        [PolicyResourceProperty("finalBackupTags", "_mUnknown_FinalBackupTags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_FinalBackupTags;
        private bool _mUnknown_FinalBackupTags;
        public Dictionary<string, string>? FinalBackupTags
        {
            get
            {
                if (!_mUnknown_FinalBackupTags) return _mValue_FinalBackupTags;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.FinalBackupTags' is not present");
            }
        }

        /// <summary>
        /// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// Set of Elastic Network Interface identifiers from which the file system is accessible.
        /// </summary>
        [PolicyResourceProperty("networkInterfaceIds", "_mUnknown_NetworkInterfaceIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_NetworkInterfaceIds;
        private bool _mUnknown_NetworkInterfaceIds;
        public List<string>? NetworkInterfaceIds
        {
            get
            {
                if (!_mUnknown_NetworkInterfaceIds) return _mValue_NetworkInterfaceIds;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.NetworkInterfaceIds' is not present");
            }
        }

        /// <summary>
        /// AWS account identifier that created the file system.
        /// </summary>
        [PolicyResourceProperty("ownerId", "_mUnknown_OwnerId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_OwnerId;
        private bool _mUnknown_OwnerId;
        public string? OwnerId
        {
            get
            {
                if (!_mUnknown_OwnerId) return _mValue_OwnerId;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.OwnerId' is not present");
            }
        }

        /// <summary>
        /// The IP address of the primary, or preferred, file server.
        /// </summary>
        [PolicyResourceProperty("preferredFileServerIp", "_mUnknown_PreferredFileServerIp")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PreferredFileServerIp;
        private bool _mUnknown_PreferredFileServerIp;
        public string? PreferredFileServerIp
        {
            get
            {
                if (!_mUnknown_PreferredFileServerIp) return _mValue_PreferredFileServerIp;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.PreferredFileServerIp' is not present");
            }
        }

        /// <summary>
        /// Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is `MULTI_AZ_1`.
        /// </summary>
        [PolicyResourceProperty("preferredSubnetId", "_mUnknown_PreferredSubnetId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PreferredSubnetId;
        private bool _mUnknown_PreferredSubnetId;
        public string? PreferredSubnetId
        {
            get
            {
                if (!_mUnknown_PreferredSubnetId) return _mValue_PreferredSubnetId;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.PreferredSubnetId' is not present");
            }
        }

        /// <summary>
        /// For `MULTI_AZ_1` deployment types, use this endpoint when performing administrative tasks on the file system using Amazon FSx Remote PowerShell. For `SINGLE_AZ_1` deployment types, this is the DNS name of the file system.
        /// </summary>
        [PolicyResourceProperty("remoteAdministrationEndpoint", "_mUnknown_RemoteAdministrationEndpoint")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RemoteAdministrationEndpoint;
        private bool _mUnknown_RemoteAdministrationEndpoint;
        public string? RemoteAdministrationEndpoint
        {
            get
            {
                if (!_mUnknown_RemoteAdministrationEndpoint) return _mValue_RemoteAdministrationEndpoint;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.RemoteAdministrationEndpoint' is not present");
            }
        }

        /// <summary>
        /// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
        /// </summary>
        [PolicyResourceProperty("securityGroupIds", "_mUnknown_SecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecurityGroupIds;
        private bool _mUnknown_SecurityGroupIds;
        public List<string>? SecurityGroupIds
        {
            get
            {
                if (!_mUnknown_SecurityGroupIds) return _mValue_SecurityGroupIds;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.SecurityGroupIds' is not present");
            }
        }

        /// <summary>
        /// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `active_directory_id`. See `self_managed_active_directory` Block for details.
        /// </summary>
        [PolicyResourceProperty("selfManagedActiveDirectory", "_mUnknown_SelfManagedActiveDirectory")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.WindowsFileSystemSelfManagedActiveDirectory? _mValue_SelfManagedActiveDirectory;
        private bool _mUnknown_SelfManagedActiveDirectory;
        public Outputs.WindowsFileSystemSelfManagedActiveDirectory? SelfManagedActiveDirectory
        {
            get
            {
                if (!_mUnknown_SelfManagedActiveDirectory) return _mValue_SelfManagedActiveDirectory;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.SelfManagedActiveDirectory' is not present");
            }
        }

        /// <summary>
        /// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("skipFinalBackup", "_mUnknown_SkipFinalBackup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SkipFinalBackup;
        private bool _mUnknown_SkipFinalBackup;
        public bool? SkipFinalBackup
        {
            get
            {
                if (!_mUnknown_SkipFinalBackup) return _mValue_SkipFinalBackup;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.SkipFinalBackup' is not present");
            }
        }

        /// <summary>
        /// Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to `HDD` the minimum value is 2000. Required when not creating filesystem for a backup.
        /// </summary>
        [PolicyResourceProperty("storageCapacity", "_mUnknown_StorageCapacity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_StorageCapacity;
        private bool _mUnknown_StorageCapacity;
        public int? StorageCapacity
        {
            get
            {
                if (!_mUnknown_StorageCapacity) return _mValue_StorageCapacity;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.StorageCapacity' is not present");
            }
        }

        /// <summary>
        /// Specifies the storage type, Valid values are `SSD` and `HDD`. `HDD` is supported on `SINGLE_AZ_2` and `MULTI_AZ_1` Windows file system deployment types. Default value is `SSD`.
        /// </summary>
        [PolicyResourceProperty("storageType", "_mUnknown_StorageType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StorageType;
        private bool _mUnknown_StorageType;
        public string? StorageType
        {
            get
            {
                if (!_mUnknown_StorageType) return _mValue_StorageType;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.StorageType' is not present");
            }
        }

        /// <summary>
        /// A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set `deployment_type` to `MULTI_AZ_1`.
        /// </summary>
        [PolicyResourceProperty("subnetIds", "_mUnknown_SubnetIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SubnetIds;
        private bool _mUnknown_SubnetIds;
        public List<string>? SubnetIds
        {
            get
            {
                if (!_mUnknown_SubnetIds) return _mValue_SubnetIds;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.SubnetIds' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the file system. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Throughput (megabytes per second) of the file system. For valid values, refer to the [AWS documentation](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/performance.html).
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("throughputCapacity", "_mUnknown_ThroughputCapacity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ThroughputCapacity;
        private bool _mUnknown_ThroughputCapacity;
        public int? ThroughputCapacity
        {
            get
            {
                if (!_mUnknown_ThroughputCapacity) return _mValue_ThroughputCapacity;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.ThroughputCapacity' is not present");
            }
        }

        /// <summary>
        /// Identifier of the Virtual Private Cloud for the file system.
        /// </summary>
        [PolicyResourceProperty("vpcId", "_mUnknown_VpcId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VpcId;
        private bool _mUnknown_VpcId;
        public string? VpcId
        {
            get
            {
                if (!_mUnknown_VpcId) return _mValue_VpcId;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.VpcId' is not present");
            }
        }

        /// <summary>
        /// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
        /// </summary>
        [PolicyResourceProperty("weeklyMaintenanceStartTime", "_mUnknown_WeeklyMaintenanceStartTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_WeeklyMaintenanceStartTime;
        private bool _mUnknown_WeeklyMaintenanceStartTime;
        public string? WeeklyMaintenanceStartTime
        {
            get
            {
                if (!_mUnknown_WeeklyMaintenanceStartTime) return _mValue_WeeklyMaintenanceStartTime;
                throw new UndeferrableValueException("Value 'WindowsFileSystem.WeeklyMaintenanceStartTime' is not present");
            }
        }
    }

    [PolicyResourceType("aws:fsx/windowsFileSystem:WindowsFileSystem")]
    public sealed class WindowsFileSystemArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `self_managed_active_directory`.
        /// </summary>
        [PolicyResourceProperty("activeDirectoryId", "_mUnknown_ActiveDirectoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ActiveDirectoryId;
        private bool _mUnknown_ActiveDirectoryId;
        public string? ActiveDirectoryId
        {
            get
            {
                if (!_mUnknown_ActiveDirectoryId) return _mValue_ActiveDirectoryId;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.ActiveDirectoryId' is not present");
            }
        }

        /// <summary>
        /// An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html)
        /// </summary>
        [PolicyResourceProperty("aliases", "_mUnknown_Aliases")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Aliases;
        private bool _mUnknown_Aliases;
        public List<string>? Aliases
        {
            get
            {
                if (!_mUnknown_Aliases) return _mValue_Aliases;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.Aliases' is not present");
            }
        }

        /// <summary>
        /// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See `audit_log_configuration` Block for details.
        /// </summary>
        [PolicyResourceProperty("auditLogConfiguration", "_mUnknown_AuditLogConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.WindowsFileSystemAuditLogConfigurationArgs? _mValue_AuditLogConfiguration;
        private bool _mUnknown_AuditLogConfiguration;
        public Inputs.WindowsFileSystemAuditLogConfigurationArgs? AuditLogConfiguration
        {
            get
            {
                if (!_mUnknown_AuditLogConfiguration) return _mValue_AuditLogConfiguration;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.AuditLogConfiguration' is not present");
            }
        }

        /// <summary>
        /// The number of days to retain automatic backups. Minimum of `0` and maximum of `90`. Defaults to `7`. Set to `0` to disable.
        /// </summary>
        [PolicyResourceProperty("automaticBackupRetentionDays", "_mUnknown_AutomaticBackupRetentionDays")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_AutomaticBackupRetentionDays;
        private bool _mUnknown_AutomaticBackupRetentionDays;
        public int? AutomaticBackupRetentionDays
        {
            get
            {
                if (!_mUnknown_AutomaticBackupRetentionDays) return _mValue_AutomaticBackupRetentionDays;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.AutomaticBackupRetentionDays' is not present");
            }
        }

        /// <summary>
        /// The ID of the source backup to create the filesystem from.
        /// </summary>
        [PolicyResourceProperty("backupId", "_mUnknown_BackupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BackupId;
        private bool _mUnknown_BackupId;
        public string? BackupId
        {
            get
            {
                if (!_mUnknown_BackupId) return _mValue_BackupId;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.BackupId' is not present");
            }
        }

        /// <summary>
        /// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("copyTagsToBackups", "_mUnknown_CopyTagsToBackups")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_CopyTagsToBackups;
        private bool _mUnknown_CopyTagsToBackups;
        public bool? CopyTagsToBackups
        {
            get
            {
                if (!_mUnknown_CopyTagsToBackups) return _mValue_CopyTagsToBackups;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.CopyTagsToBackups' is not present");
            }
        }

        /// <summary>
        /// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
        /// </summary>
        [PolicyResourceProperty("dailyAutomaticBackupStartTime", "_mUnknown_DailyAutomaticBackupStartTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DailyAutomaticBackupStartTime;
        private bool _mUnknown_DailyAutomaticBackupStartTime;
        public string? DailyAutomaticBackupStartTime
        {
            get
            {
                if (!_mUnknown_DailyAutomaticBackupStartTime) return _mValue_DailyAutomaticBackupStartTime;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.DailyAutomaticBackupStartTime' is not present");
            }
        }

        /// <summary>
        /// Specifies the file system deployment type, valid values are `MULTI_AZ_1`, `SINGLE_AZ_1` and `SINGLE_AZ_2`. Default value is `SINGLE_AZ_1`.
        /// </summary>
        [PolicyResourceProperty("deploymentType", "_mUnknown_DeploymentType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DeploymentType;
        private bool _mUnknown_DeploymentType;
        public string? DeploymentType
        {
            get
            {
                if (!_mUnknown_DeploymentType) return _mValue_DeploymentType;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.DeploymentType' is not present");
            }
        }

        /// <summary>
        /// The SSD IOPS configuration for the Amazon FSx for Windows File Server file system. See `disk_iops_configuration` Block for details.
        /// </summary>
        [PolicyResourceProperty("diskIopsConfiguration", "_mUnknown_DiskIopsConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.WindowsFileSystemDiskIopsConfigurationArgs? _mValue_DiskIopsConfiguration;
        private bool _mUnknown_DiskIopsConfiguration;
        public Inputs.WindowsFileSystemDiskIopsConfigurationArgs? DiskIopsConfiguration
        {
            get
            {
                if (!_mUnknown_DiskIopsConfiguration) return _mValue_DiskIopsConfiguration;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.DiskIopsConfiguration' is not present");
            }
        }

        /// <summary>
        /// A map of tags to apply to the file system's final backup.
        /// </summary>
        [PolicyResourceProperty("finalBackupTags", "_mUnknown_FinalBackupTags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_FinalBackupTags;
        private bool _mUnknown_FinalBackupTags;
        public Dictionary<string, string>? FinalBackupTags
        {
            get
            {
                if (!_mUnknown_FinalBackupTags) return _mValue_FinalBackupTags;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.FinalBackupTags' is not present");
            }
        }

        /// <summary>
        /// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is `MULTI_AZ_1`.
        /// </summary>
        [PolicyResourceProperty("preferredSubnetId", "_mUnknown_PreferredSubnetId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PreferredSubnetId;
        private bool _mUnknown_PreferredSubnetId;
        public string? PreferredSubnetId
        {
            get
            {
                if (!_mUnknown_PreferredSubnetId) return _mValue_PreferredSubnetId;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.PreferredSubnetId' is not present");
            }
        }

        /// <summary>
        /// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
        /// </summary>
        [PolicyResourceProperty("securityGroupIds", "_mUnknown_SecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SecurityGroupIds;
        private bool _mUnknown_SecurityGroupIds;
        public List<string>? SecurityGroupIds
        {
            get
            {
                if (!_mUnknown_SecurityGroupIds) return _mValue_SecurityGroupIds;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.SecurityGroupIds' is not present");
            }
        }

        /// <summary>
        /// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `active_directory_id`. See `self_managed_active_directory` Block for details.
        /// </summary>
        [PolicyResourceProperty("selfManagedActiveDirectory", "_mUnknown_SelfManagedActiveDirectory")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.WindowsFileSystemSelfManagedActiveDirectoryArgs? _mValue_SelfManagedActiveDirectory;
        private bool _mUnknown_SelfManagedActiveDirectory;
        public Inputs.WindowsFileSystemSelfManagedActiveDirectoryArgs? SelfManagedActiveDirectory
        {
            get
            {
                if (!_mUnknown_SelfManagedActiveDirectory) return _mValue_SelfManagedActiveDirectory;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.SelfManagedActiveDirectory' is not present");
            }
        }

        /// <summary>
        /// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("skipFinalBackup", "_mUnknown_SkipFinalBackup")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SkipFinalBackup;
        private bool _mUnknown_SkipFinalBackup;
        public bool? SkipFinalBackup
        {
            get
            {
                if (!_mUnknown_SkipFinalBackup) return _mValue_SkipFinalBackup;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.SkipFinalBackup' is not present");
            }
        }

        /// <summary>
        /// Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to `HDD` the minimum value is 2000. Required when not creating filesystem for a backup.
        /// </summary>
        [PolicyResourceProperty("storageCapacity", "_mUnknown_StorageCapacity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_StorageCapacity;
        private bool _mUnknown_StorageCapacity;
        public int? StorageCapacity
        {
            get
            {
                if (!_mUnknown_StorageCapacity) return _mValue_StorageCapacity;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.StorageCapacity' is not present");
            }
        }

        /// <summary>
        /// Specifies the storage type, Valid values are `SSD` and `HDD`. `HDD` is supported on `SINGLE_AZ_2` and `MULTI_AZ_1` Windows file system deployment types. Default value is `SSD`.
        /// </summary>
        [PolicyResourceProperty("storageType", "_mUnknown_StorageType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StorageType;
        private bool _mUnknown_StorageType;
        public string? StorageType
        {
            get
            {
                if (!_mUnknown_StorageType) return _mValue_StorageType;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.StorageType' is not present");
            }
        }

        /// <summary>
        /// A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set `deployment_type` to `MULTI_AZ_1`.
        /// </summary>
        [PolicyResourceProperty("subnetIds", "_mUnknown_SubnetIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SubnetIds;
        private bool _mUnknown_SubnetIds;
        public List<string>? SubnetIds
        {
            get
            {
                if (!_mUnknown_SubnetIds) return _mValue_SubnetIds;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.SubnetIds' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the file system. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Throughput (megabytes per second) of the file system. For valid values, refer to the [AWS documentation](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/performance.html).
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("throughputCapacity", "_mUnknown_ThroughputCapacity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_ThroughputCapacity;
        private bool _mUnknown_ThroughputCapacity;
        public int? ThroughputCapacity
        {
            get
            {
                if (!_mUnknown_ThroughputCapacity) return _mValue_ThroughputCapacity;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.ThroughputCapacity' is not present");
            }
        }

        /// <summary>
        /// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
        /// </summary>
        [PolicyResourceProperty("weeklyMaintenanceStartTime", "_mUnknown_WeeklyMaintenanceStartTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_WeeklyMaintenanceStartTime;
        private bool _mUnknown_WeeklyMaintenanceStartTime;
        public string? WeeklyMaintenanceStartTime
        {
            get
            {
                if (!_mUnknown_WeeklyMaintenanceStartTime) return _mValue_WeeklyMaintenanceStartTime;
                throw new UndeferrableValueException("Value 'WindowsFileSystemArgs.WeeklyMaintenanceStartTime' is not present");
            }
        }
    }
}
