// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Fsx.Outputs
{
    public sealed class OntapVolumeSnaplockConfiguration
    {
        /// <summary>
        /// Enables or disables the audit log volume for an FSx for ONTAP SnapLock volume. The default value is `false`.
        /// </summary>
        [PolicyResourceProperty("auditLogVolume", "_mUnknown_AuditLogVolume")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AuditLogVolume;
        private bool _mUnknown_AuditLogVolume;
        public bool? AuditLogVolume
        {
            get
            {
                if (!_mUnknown_AuditLogVolume) return _mValue_AuditLogVolume;
                throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfiguration.AuditLogVolume' is not present");
            }
        }

        /// <summary>
        /// The configuration object for setting the autocommit period of files in an FSx for ONTAP SnapLock volume. See `autocommit_period` Block for details.
        /// </summary>
        [PolicyResourceProperty("autocommitPeriod", "_mUnknown_AutocommitPeriod")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.OntapVolumeSnaplockConfigurationAutocommitPeriod? _mValue_AutocommitPeriod;
        private bool _mUnknown_AutocommitPeriod;
        public Outputs.OntapVolumeSnaplockConfigurationAutocommitPeriod? AutocommitPeriod
        {
            get
            {
                if (!_mUnknown_AutocommitPeriod) return _mValue_AutocommitPeriod;
                throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfiguration.AutocommitPeriod' is not present");
            }
        }

        /// <summary>
        /// Enables, disables, or permanently disables privileged delete on an FSx for ONTAP SnapLock Enterprise volume. Valid values: `DISABLED`, `ENABLED`, `PERMANENTLY_DISABLED`. The default value is `DISABLED`.
        /// </summary>
        [PolicyResourceProperty("privilegedDelete", "_mUnknown_PrivilegedDelete")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrivilegedDelete;
        private bool _mUnknown_PrivilegedDelete;
        public string? PrivilegedDelete
        {
            get
            {
                if (!_mUnknown_PrivilegedDelete) return _mValue_PrivilegedDelete;
                throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfiguration.PrivilegedDelete' is not present");
            }
        }

        /// <summary>
        /// The retention period of an FSx for ONTAP SnapLock volume. See `retention_period` Block for details.
        /// </summary>
        [PolicyResourceProperty("retentionPeriod", "_mUnknown_RetentionPeriod")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.OntapVolumeSnaplockConfigurationRetentionPeriod? _mValue_RetentionPeriod;
        private bool _mUnknown_RetentionPeriod;
        public Outputs.OntapVolumeSnaplockConfigurationRetentionPeriod? RetentionPeriod
        {
            get
            {
                if (!_mUnknown_RetentionPeriod) return _mValue_RetentionPeriod;
                throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfiguration.RetentionPeriod' is not present");
            }
        }

        /// <summary>
        /// Specifies the retention mode of an FSx for ONTAP SnapLock volume. After it is set, it can't be changed. Valid values: `COMPLIANCE`, `ENTERPRISE`.
        /// </summary>
        [PolicyResourceProperty("snaplockType", "_mUnknown_SnaplockType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnaplockType;
        private bool _mUnknown_SnaplockType;
        public string? SnaplockType
        {
            get
            {
                if (!_mUnknown_SnaplockType) return _mValue_SnaplockType;
                throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfiguration.SnaplockType' is not present");
            }
        }

        /// <summary>
        /// Enables or disables volume-append mode on an FSx for ONTAP SnapLock volume. The default value is `false`.
        /// </summary>
        [PolicyResourceProperty("volumeAppendModeEnabled", "_mUnknown_VolumeAppendModeEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_VolumeAppendModeEnabled;
        private bool _mUnknown_VolumeAppendModeEnabled;
        public bool? VolumeAppendModeEnabled
        {
            get
            {
                if (!_mUnknown_VolumeAppendModeEnabled) return _mValue_VolumeAppendModeEnabled;
                throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfiguration.VolumeAppendModeEnabled' is not present");
            }
        }
    }
}
