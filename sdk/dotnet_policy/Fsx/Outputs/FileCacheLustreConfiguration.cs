// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Fsx.Outputs
{
    public sealed class FileCacheLustreConfiguration
    {
        /// <summary>
        /// Specifies the cache deployment type. The only supported value is `CACHE_1`.
        /// </summary>
        [PolicyResourceProperty("deploymentType", "_mUnknown_DeploymentType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DeploymentType;
        private bool _mUnknown_DeploymentType;
        public string? DeploymentType
        {
            get
            {
                if (!_mUnknown_DeploymentType) return _mValue_DeploymentType;
                throw new UndeferrableValueException("Value 'FileCacheLustreConfiguration.DeploymentType' is not present");
            }
        }

        [PolicyResourceProperty("logConfigurations", "_mUnknown_LogConfigurations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.FileCacheLustreConfigurationLogConfiguration>? _mValue_LogConfigurations;
        private bool _mUnknown_LogConfigurations;
        public List<Outputs.FileCacheLustreConfigurationLogConfiguration>? LogConfigurations
        {
            get
            {
                if (!_mUnknown_LogConfigurations) return _mValue_LogConfigurations;
                throw new UndeferrableValueException("Value 'FileCacheLustreConfiguration.LogConfigurations' is not present");
            }
        }

        /// <summary>
        /// The configuration for a Lustre MDT (Metadata Target) storage volume. See the `metadata_configuration` block.
        /// </summary>
        [PolicyResourceProperty("metadataConfigurations", "_mUnknown_MetadataConfigurations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.FileCacheLustreConfigurationMetadataConfiguration>? _mValue_MetadataConfigurations;
        private bool _mUnknown_MetadataConfigurations;
        public List<Outputs.FileCacheLustreConfigurationMetadataConfiguration>? MetadataConfigurations
        {
            get
            {
                if (!_mUnknown_MetadataConfigurations) return _mValue_MetadataConfigurations;
                throw new UndeferrableValueException("Value 'FileCacheLustreConfiguration.MetadataConfigurations' is not present");
            }
        }

        [PolicyResourceProperty("mountName", "_mUnknown_MountName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MountName;
        private bool _mUnknown_MountName;
        public string? MountName
        {
            get
            {
                if (!_mUnknown_MountName) return _mValue_MountName;
                throw new UndeferrableValueException("Value 'FileCacheLustreConfiguration.MountName' is not present");
            }
        }

        /// <summary>
        /// Provisions the amount of read and write throughput for each 1 tebibyte (TiB) of cache storage capacity, in MB/s/TiB. The only supported value is `1000`.
        /// </summary>
        [PolicyResourceProperty("perUnitStorageThroughput", "_mUnknown_PerUnitStorageThroughput")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_PerUnitStorageThroughput;
        private bool _mUnknown_PerUnitStorageThroughput;
        public int? PerUnitStorageThroughput
        {
            get
            {
                if (!_mUnknown_PerUnitStorageThroughput) return _mValue_PerUnitStorageThroughput;
                throw new UndeferrableValueException("Value 'FileCacheLustreConfiguration.PerUnitStorageThroughput' is not present");
            }
        }

        /// <summary>
        /// A recurring weekly time, in the format `D:HH:MM`. `D` is the day of the week, for which `1` represents Monday and `7` represents Sunday. `HH` is the zero-padded hour of the day (0-23), and `MM` is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday. See the [ISO week date](https://en.wikipedia.org/wiki/ISO_week_date) for more information.
        /// </summary>
        [PolicyResourceProperty("weeklyMaintenanceStartTime", "_mUnknown_WeeklyMaintenanceStartTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_WeeklyMaintenanceStartTime;
        private bool _mUnknown_WeeklyMaintenanceStartTime;
        public string? WeeklyMaintenanceStartTime
        {
            get
            {
                if (!_mUnknown_WeeklyMaintenanceStartTime) return _mValue_WeeklyMaintenanceStartTime;
                throw new UndeferrableValueException("Value 'FileCacheLustreConfiguration.WeeklyMaintenanceStartTime' is not present");
            }
        }
    }
}
