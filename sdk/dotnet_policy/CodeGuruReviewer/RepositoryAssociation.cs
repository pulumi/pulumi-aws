// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CodeGuruReviewer
{
    [PolicyResourceType("aws:codegurureviewer/repositoryAssociation:RepositoryAssociation")]
    public sealed class RepositoryAssociation : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) identifying the repository association.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.Arn' is not present");
            }
        }

        /// <summary>
        /// The ID of the repository association.
        /// </summary>
        [PolicyResourceProperty("associationId", "_mUnknown_AssociationId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AssociationId;
        private bool _mUnknown_AssociationId;
        public string? AssociationId
        {
            get
            {
                if (!_mUnknown_AssociationId) return _mValue_AssociationId;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.AssociationId' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
        /// </summary>
        [PolicyResourceProperty("connectionArn", "_mUnknown_ConnectionArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConnectionArn;
        private bool _mUnknown_ConnectionArn;
        public string? ConnectionArn
        {
            get
            {
                if (!_mUnknown_ConnectionArn) return _mValue_ConnectionArn;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.ConnectionArn' is not present");
            }
        }

        /// <summary>
        /// An object describing the KMS key to asssociate. Block is documented below.
        /// </summary>
        [PolicyResourceProperty("kmsKeyDetails", "_mUnknown_KmsKeyDetails")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RepositoryAssociationKmsKeyDetails? _mValue_KmsKeyDetails;
        private bool _mUnknown_KmsKeyDetails;
        public Outputs.RepositoryAssociationKmsKeyDetails? KmsKeyDetails
        {
            get
            {
                if (!_mUnknown_KmsKeyDetails) return _mValue_KmsKeyDetails;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.KmsKeyDetails' is not present");
            }
        }

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.Name' is not present");
            }
        }

        /// <summary>
        /// The owner of the repository.
        /// </summary>
        [PolicyResourceProperty("owner", "_mUnknown_Owner")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Owner;
        private bool _mUnknown_Owner;
        public string? Owner
        {
            get
            {
                if (!_mUnknown_Owner) return _mValue_Owner;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.Owner' is not present");
            }
        }

        /// <summary>
        /// The provider type of the repository association.
        /// </summary>
        [PolicyResourceProperty("providerType", "_mUnknown_ProviderType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ProviderType;
        private bool _mUnknown_ProviderType;
        public string? ProviderType
        {
            get
            {
                if (!_mUnknown_ProviderType) return _mValue_ProviderType;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.ProviderType' is not present");
            }
        }

        /// <summary>
        /// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `github_enterprise_server`, or `s3_bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `github_enterprise_server`) the connection must be in `Available` status prior to creating this resource.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("repository", "_mUnknown_Repository")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.RepositoryAssociationRepository? _mValue_Repository;
        private bool _mUnknown_Repository;
        public Outputs.RepositoryAssociationRepository? Repository
        {
            get
            {
                if (!_mUnknown_Repository) return _mValue_Repository;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.Repository' is not present");
            }
        }

        [PolicyResourceProperty("s3RepositoryDetails", "_mUnknown_S3RepositoryDetails")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.RepositoryAssociationS3RepositoryDetail>? _mValue_S3RepositoryDetails;
        private bool _mUnknown_S3RepositoryDetails;
        public List<Outputs.RepositoryAssociationS3RepositoryDetail>? S3RepositoryDetails
        {
            get
            {
                if (!_mUnknown_S3RepositoryDetails) return _mValue_S3RepositoryDetails;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.S3RepositoryDetails' is not present");
            }
        }

        /// <summary>
        /// The state of the repository association.
        /// </summary>
        [PolicyResourceProperty("state", "_mUnknown_State")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_State;
        private bool _mUnknown_State;
        public string? State
        {
            get
            {
                if (!_mUnknown_State) return _mValue_State;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.State' is not present");
            }
        }

        /// <summary>
        /// A description of why the repository association is in the current state.
        /// </summary>
        [PolicyResourceProperty("stateReason", "_mUnknown_StateReason")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StateReason;
        private bool _mUnknown_StateReason;
        public string? StateReason
        {
            get
            {
                if (!_mUnknown_StateReason) return _mValue_StateReason;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.StateReason' is not present");
            }
        }

        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.Tags' is not present");
            }
        }

        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'RepositoryAssociation.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:codegurureviewer/repositoryAssociation:RepositoryAssociation")]
    public sealed class RepositoryAssociationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// An object describing the KMS key to asssociate. Block is documented below.
        /// </summary>
        [PolicyResourceProperty("kmsKeyDetails", "_mUnknown_KmsKeyDetails")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.RepositoryAssociationKmsKeyDetailsArgs? _mValue_KmsKeyDetails;
        private bool _mUnknown_KmsKeyDetails;
        public Inputs.RepositoryAssociationKmsKeyDetailsArgs? KmsKeyDetails
        {
            get
            {
                if (!_mUnknown_KmsKeyDetails) return _mValue_KmsKeyDetails;
                throw new UndeferrableValueException("Value 'RepositoryAssociationArgs.KmsKeyDetails' is not present");
            }
        }

        /// <summary>
        /// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `github_enterprise_server`, or `s3_bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `github_enterprise_server`) the connection must be in `Available` status prior to creating this resource.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("repository", "_mUnknown_Repository")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.RepositoryAssociationRepositoryArgs? _mValue_Repository;
        private bool _mUnknown_Repository;
        public Inputs.RepositoryAssociationRepositoryArgs? Repository
        {
            get
            {
                if (!_mUnknown_Repository) return _mValue_Repository;
                throw new UndeferrableValueException("Value 'RepositoryAssociationArgs.Repository' is not present");
            }
        }

        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'RepositoryAssociationArgs.Tags' is not present");
            }
        }
    }
}
