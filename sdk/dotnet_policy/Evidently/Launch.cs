// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Evidently
{
    [PolicyResourceType("aws:evidently/launch:Launch")]
    public sealed class Launch : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The ARN of the launch.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The date and time that the launch is created.
        /// </summary>
        [Input("createdTime")]
        public string? CreatedTime;

        /// <summary>
        /// Specifies the description of the launch.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// A block that contains information about the start and end times of the launch. Detailed below
        /// </summary>
        [Input("executions")]
        public List<LaunchExecution>? Executions;

        /// <summary>
        /// One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
        /// </summary>
        [Input("groups")]
        public List<LaunchGroup>? Groups;

        /// <summary>
        /// The date and time that the launch was most recently updated.
        /// </summary>
        [Input("lastUpdatedTime")]
        public string? LastUpdatedTime;

        /// <summary>
        /// One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
        /// </summary>
        [Input("metricMonitors")]
        public List<LaunchMetricMonitor>? MetricMonitors;

        /// <summary>
        /// The name for the new launch. Minimum length of `1`. Maximum length of `127`.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// The name or ARN of the project that is to contain the new launch.
        /// </summary>
        [Input("project")]
        public string? Project;

        /// <summary>
        /// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
        /// </summary>
        [Input("randomizationSalt")]
        public string? RandomizationSalt;

        /// <summary>
        /// A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
        /// </summary>
        [Input("scheduledSplitsConfig")]
        public LaunchScheduledSplitsConfig? ScheduledSplitsConfig;

        /// <summary>
        /// The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
        /// </summary>
        [Input("status")]
        public string? Status;

        /// <summary>
        /// If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
        /// </summary>
        [Input("statusReason")]
        public string? StatusReason;

        /// <summary>
        /// Tags to apply to the launch. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// The type of launch.
        /// </summary>
        [Input("type")]
        public string? Type;
    }
}
