// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.VpcLattice.Outputs
{
    public sealed class ListenerRuleMatchHttpMatch
    {
        /// <summary>
        /// The header matches. Matches incoming requests with rule based on request header value before applying rule action.
        /// </summary>
        [PolicyResourceProperty("headerMatches", "_mUnknown_HeaderMatches")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.ListenerRuleMatchHttpMatchHeaderMatch>? _mValue_HeaderMatches;
        private bool _mUnknown_HeaderMatches;
        public List<Outputs.ListenerRuleMatchHttpMatchHeaderMatch>? HeaderMatches
        {
            get
            {
                if (!_mUnknown_HeaderMatches) return _mValue_HeaderMatches;
                throw new UndeferrableValueException("Value 'ListenerRuleMatchHttpMatch.HeaderMatches' is not present");
            }
        }

        /// <summary>
        /// The HTTP method type.
        /// </summary>
        [PolicyResourceProperty("method", "_mUnknown_Method")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Method;
        private bool _mUnknown_Method;
        public string? Method
        {
            get
            {
                if (!_mUnknown_Method) return _mValue_Method;
                throw new UndeferrableValueException("Value 'ListenerRuleMatchHttpMatch.Method' is not present");
            }
        }

        /// <summary>
        /// The path match.
        /// </summary>
        [PolicyResourceProperty("pathMatch", "_mUnknown_PathMatch")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ListenerRuleMatchHttpMatchPathMatch? _mValue_PathMatch;
        private bool _mUnknown_PathMatch;
        public Outputs.ListenerRuleMatchHttpMatchPathMatch? PathMatch
        {
            get
            {
                if (!_mUnknown_PathMatch) return _mValue_PathMatch;
                throw new UndeferrableValueException("Value 'ListenerRuleMatchHttpMatch.PathMatch' is not present");
            }
        }
    }
}
