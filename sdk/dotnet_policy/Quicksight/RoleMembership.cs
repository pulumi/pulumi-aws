// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Quicksight
{
    [PolicyResourceType("aws:quicksight/roleMembership:RoleMembership")]
    public sealed class RoleMembership : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// AWS account ID. Defaults to the account of the caller identity if not configured.
        /// </summary>
        [PolicyResourceProperty("awsAccountId", "_mUnknown_AwsAccountId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AwsAccountId;
        private bool _mUnknown_AwsAccountId;
        public string? AwsAccountId
        {
            get
            {
                if (!_mUnknown_AwsAccountId) return _mValue_AwsAccountId;
                throw new UndeferrableValueException("Value 'RoleMembership.AwsAccountId' is not present");
            }
        }

        /// <summary>
        /// Name of the group to be added to the role.
        /// </summary>
        [PolicyResourceProperty("memberName", "_mUnknown_MemberName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MemberName;
        private bool _mUnknown_MemberName;
        public string? MemberName
        {
            get
            {
                if (!_mUnknown_MemberName) return _mValue_MemberName;
                throw new UndeferrableValueException("Value 'RoleMembership.MemberName' is not present");
            }
        }

        /// <summary>
        /// Name of the namespace. Defaults to `default`.
        /// </summary>
        [PolicyResourceProperty("namespace", "_mUnknown_Namespace")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Namespace;
        private bool _mUnknown_Namespace;
        public string? Namespace
        {
            get
            {
                if (!_mUnknown_Namespace) return _mValue_Namespace;
                throw new UndeferrableValueException("Value 'RoleMembership.Namespace' is not present");
            }
        }

        /// <summary>
        /// Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("role", "_mUnknown_Role")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Role;
        private bool _mUnknown_Role;
        public string? Role
        {
            get
            {
                if (!_mUnknown_Role) return _mValue_Role;
                throw new UndeferrableValueException("Value 'RoleMembership.Role' is not present");
            }
        }
    }

    [PolicyResourceType("aws:quicksight/roleMembership:RoleMembership")]
    public sealed class RoleMembershipArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// AWS account ID. Defaults to the account of the caller identity if not configured.
        /// </summary>
        [PolicyResourceProperty("awsAccountId", "_mUnknown_AwsAccountId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AwsAccountId;
        private bool _mUnknown_AwsAccountId;
        public string? AwsAccountId
        {
            get
            {
                if (!_mUnknown_AwsAccountId) return _mValue_AwsAccountId;
                throw new UndeferrableValueException("Value 'RoleMembershipArgs.AwsAccountId' is not present");
            }
        }

        /// <summary>
        /// Name of the group to be added to the role.
        /// </summary>
        [PolicyResourceProperty("memberName", "_mUnknown_MemberName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MemberName;
        private bool _mUnknown_MemberName;
        public string? MemberName
        {
            get
            {
                if (!_mUnknown_MemberName) return _mValue_MemberName;
                throw new UndeferrableValueException("Value 'RoleMembershipArgs.MemberName' is not present");
            }
        }

        /// <summary>
        /// Name of the namespace. Defaults to `default`.
        /// </summary>
        [PolicyResourceProperty("namespace", "_mUnknown_Namespace")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Namespace;
        private bool _mUnknown_Namespace;
        public string? Namespace
        {
            get
            {
                if (!_mUnknown_Namespace) return _mValue_Namespace;
                throw new UndeferrableValueException("Value 'RoleMembershipArgs.Namespace' is not present");
            }
        }

        /// <summary>
        /// Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("role", "_mUnknown_Role")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Role;
        private bool _mUnknown_Role;
        public string? Role
        {
            get
            {
                if (!_mUnknown_Role) return _mValue_Role;
                throw new UndeferrableValueException("Value 'RoleMembershipArgs.Role' is not present");
            }
        }
    }
}
