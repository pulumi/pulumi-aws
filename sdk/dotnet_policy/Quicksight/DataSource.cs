// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Quicksight
{
    [PolicyResourceType("aws:quicksight/dataSource:DataSource")]
    public sealed class DataSource : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the data source
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'DataSource.Arn' is not present");
            }
        }

        /// <summary>
        /// The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
        /// </summary>
        [PolicyResourceProperty("awsAccountId", "_mUnknown_AwsAccountId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AwsAccountId;
        private bool _mUnknown_AwsAccountId;
        public string? AwsAccountId
        {
            get
            {
                if (!_mUnknown_AwsAccountId) return _mValue_AwsAccountId;
                throw new UndeferrableValueException("Value 'DataSource.AwsAccountId' is not present");
            }
        }

        /// <summary>
        /// The credentials Amazon QuickSight uses to connect to your underlying source. See Credentials below for more details.
        /// </summary>
        [PolicyResourceProperty("credentials", "_mUnknown_Credentials")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DataSourceCredentials? _mValue_Credentials;
        private bool _mUnknown_Credentials;
        public Outputs.DataSourceCredentials? Credentials
        {
            get
            {
                if (!_mUnknown_Credentials) return _mValue_Credentials;
                throw new UndeferrableValueException("Value 'DataSource.Credentials' is not present");
            }
        }

        /// <summary>
        /// An identifier for the data source.
        /// </summary>
        [PolicyResourceProperty("dataSourceId", "_mUnknown_DataSourceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DataSourceId;
        private bool _mUnknown_DataSourceId;
        public string? DataSourceId
        {
            get
            {
                if (!_mUnknown_DataSourceId) return _mValue_DataSourceId;
                throw new UndeferrableValueException("Value 'DataSource.DataSourceId' is not present");
            }
        }

        /// <summary>
        /// A name for the data source, maximum of 128 characters.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'DataSource.Name' is not present");
            }
        }

        /// <summary>
        /// The parameters used to connect to this data source (exactly one).
        /// </summary>
        [PolicyResourceProperty("parameters", "_mUnknown_Parameters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DataSourceParameters? _mValue_Parameters;
        private bool _mUnknown_Parameters;
        public Outputs.DataSourceParameters? Parameters
        {
            get
            {
                if (!_mUnknown_Parameters) return _mValue_Parameters;
                throw new UndeferrableValueException("Value 'DataSource.Parameters' is not present");
            }
        }

        /// <summary>
        /// A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
        /// </summary>
        [PolicyResourceProperty("permissions", "_mUnknown_Permissions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.DataSourcePermission>? _mValue_Permissions;
        private bool _mUnknown_Permissions;
        public List<Outputs.DataSourcePermission>? Permissions
        {
            get
            {
                if (!_mUnknown_Permissions) return _mValue_Permissions;
                throw new UndeferrableValueException("Value 'DataSource.Permissions' is not present");
            }
        }

        /// <summary>
        /// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
        /// </summary>
        [PolicyResourceProperty("sslProperties", "_mUnknown_SslProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DataSourceSslProperties? _mValue_SslProperties;
        private bool _mUnknown_SslProperties;
        public Outputs.DataSourceSslProperties? SslProperties
        {
            get
            {
                if (!_mUnknown_SslProperties) return _mValue_SslProperties;
                throw new UndeferrableValueException("Value 'DataSource.SslProperties' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'DataSource.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'DataSource.TagsAll' is not present");
            }
        }

        /// <summary>
        /// The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'DataSource.Type' is not present");
            }
        }

        /// <summary>
        /// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
        /// </summary>
        [PolicyResourceProperty("vpcConnectionProperties", "_mUnknown_VpcConnectionProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DataSourceVpcConnectionProperties? _mValue_VpcConnectionProperties;
        private bool _mUnknown_VpcConnectionProperties;
        public Outputs.DataSourceVpcConnectionProperties? VpcConnectionProperties
        {
            get
            {
                if (!_mUnknown_VpcConnectionProperties) return _mValue_VpcConnectionProperties;
                throw new UndeferrableValueException("Value 'DataSource.VpcConnectionProperties' is not present");
            }
        }
    }

    [PolicyResourceType("aws:quicksight/dataSource:DataSource")]
    public sealed class DataSourceArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
        /// </summary>
        [PolicyResourceProperty("awsAccountId", "_mUnknown_AwsAccountId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AwsAccountId;
        private bool _mUnknown_AwsAccountId;
        public string? AwsAccountId
        {
            get
            {
                if (!_mUnknown_AwsAccountId) return _mValue_AwsAccountId;
                throw new UndeferrableValueException("Value 'DataSourceArgs.AwsAccountId' is not present");
            }
        }

        /// <summary>
        /// The credentials Amazon QuickSight uses to connect to your underlying source. See Credentials below for more details.
        /// </summary>
        [PolicyResourceProperty("credentials", "_mUnknown_Credentials")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DataSourceCredentialsArgs? _mValue_Credentials;
        private bool _mUnknown_Credentials;
        public Inputs.DataSourceCredentialsArgs? Credentials
        {
            get
            {
                if (!_mUnknown_Credentials) return _mValue_Credentials;
                throw new UndeferrableValueException("Value 'DataSourceArgs.Credentials' is not present");
            }
        }

        /// <summary>
        /// An identifier for the data source.
        /// </summary>
        [PolicyResourceProperty("dataSourceId", "_mUnknown_DataSourceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DataSourceId;
        private bool _mUnknown_DataSourceId;
        public string? DataSourceId
        {
            get
            {
                if (!_mUnknown_DataSourceId) return _mValue_DataSourceId;
                throw new UndeferrableValueException("Value 'DataSourceArgs.DataSourceId' is not present");
            }
        }

        /// <summary>
        /// A name for the data source, maximum of 128 characters.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'DataSourceArgs.Name' is not present");
            }
        }

        /// <summary>
        /// The parameters used to connect to this data source (exactly one).
        /// </summary>
        [PolicyResourceProperty("parameters", "_mUnknown_Parameters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DataSourceParametersArgs? _mValue_Parameters;
        private bool _mUnknown_Parameters;
        public Inputs.DataSourceParametersArgs? Parameters
        {
            get
            {
                if (!_mUnknown_Parameters) return _mValue_Parameters;
                throw new UndeferrableValueException("Value 'DataSourceArgs.Parameters' is not present");
            }
        }

        /// <summary>
        /// A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
        /// </summary>
        [PolicyResourceProperty("permissions", "_mUnknown_Permissions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.DataSourcePermissionArgs>? _mValue_Permissions;
        private bool _mUnknown_Permissions;
        public List<Inputs.DataSourcePermissionArgs>? Permissions
        {
            get
            {
                if (!_mUnknown_Permissions) return _mValue_Permissions;
                throw new UndeferrableValueException("Value 'DataSourceArgs.Permissions' is not present");
            }
        }

        /// <summary>
        /// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
        /// </summary>
        [PolicyResourceProperty("sslProperties", "_mUnknown_SslProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DataSourceSslPropertiesArgs? _mValue_SslProperties;
        private bool _mUnknown_SslProperties;
        public Inputs.DataSourceSslPropertiesArgs? SslProperties
        {
            get
            {
                if (!_mUnknown_SslProperties) return _mValue_SslProperties;
                throw new UndeferrableValueException("Value 'DataSourceArgs.SslProperties' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'DataSourceArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'DataSourceArgs.Type' is not present");
            }
        }

        /// <summary>
        /// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
        /// </summary>
        [PolicyResourceProperty("vpcConnectionProperties", "_mUnknown_VpcConnectionProperties")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.DataSourceVpcConnectionPropertiesArgs? _mValue_VpcConnectionProperties;
        private bool _mUnknown_VpcConnectionProperties;
        public Inputs.DataSourceVpcConnectionPropertiesArgs? VpcConnectionProperties
        {
            get
            {
                if (!_mUnknown_VpcConnectionProperties) return _mValue_VpcConnectionProperties;
                throw new UndeferrableValueException("Value 'DataSourceArgs.VpcConnectionProperties' is not present");
            }
        }
    }
}
