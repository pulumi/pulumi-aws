// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Quicksight.Outputs
{
    public sealed class DataSetLogicalTableMapSource
    {
        /// <summary>
        /// ARN of the parent data set.
        /// </summary>
        [PolicyResourceProperty("dataSetArn", "_mUnknown_DataSetArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DataSetArn;
        private bool _mUnknown_DataSetArn;
        public string? DataSetArn
        {
            get
            {
                if (!_mUnknown_DataSetArn) return _mValue_DataSetArn;
                throw new UndeferrableValueException("Value 'DataSetLogicalTableMapSource.DataSetArn' is not present");
            }
        }

        /// <summary>
        /// Specifies the result of a join of two logical tables. See join_instruction.
        /// </summary>
        [PolicyResourceProperty("joinInstruction", "_mUnknown_JoinInstruction")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.DataSetLogicalTableMapSourceJoinInstruction? _mValue_JoinInstruction;
        private bool _mUnknown_JoinInstruction;
        public Outputs.DataSetLogicalTableMapSourceJoinInstruction? JoinInstruction
        {
            get
            {
                if (!_mUnknown_JoinInstruction) return _mValue_JoinInstruction;
                throw new UndeferrableValueException("Value 'DataSetLogicalTableMapSource.JoinInstruction' is not present");
            }
        }

        /// <summary>
        /// Physical table ID.
        /// </summary>
        [PolicyResourceProperty("physicalTableId", "_mUnknown_PhysicalTableId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PhysicalTableId;
        private bool _mUnknown_PhysicalTableId;
        public string? PhysicalTableId
        {
            get
            {
                if (!_mUnknown_PhysicalTableId) return _mValue_PhysicalTableId;
                throw new UndeferrableValueException("Value 'DataSetLogicalTableMapSource.PhysicalTableId' is not present");
            }
        }
    }
}
