// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Quicksight
{
    [PolicyResourceType("aws:quicksight/namespace:Namespace")]
    public sealed class Namespace : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// ARN of the Namespace.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Namespace.Arn' is not present");
            }
        }

        /// <summary>
        /// AWS account ID.
        /// </summary>
        [PolicyResourceProperty("awsAccountId", "_mUnknown_AwsAccountId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AwsAccountId;
        private bool _mUnknown_AwsAccountId;
        public string? AwsAccountId
        {
            get
            {
                if (!_mUnknown_AwsAccountId) return _mValue_AwsAccountId;
                throw new UndeferrableValueException("Value 'Namespace.AwsAccountId' is not present");
            }
        }

        /// <summary>
        /// Namespace AWS Region.
        /// </summary>
        [PolicyResourceProperty("capacityRegion", "_mUnknown_CapacityRegion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CapacityRegion;
        private bool _mUnknown_CapacityRegion;
        public string? CapacityRegion
        {
            get
            {
                if (!_mUnknown_CapacityRegion) return _mValue_CapacityRegion;
                throw new UndeferrableValueException("Value 'Namespace.CapacityRegion' is not present");
            }
        }

        /// <summary>
        /// Creation status of the namespace.
        /// </summary>
        [PolicyResourceProperty("creationStatus", "_mUnknown_CreationStatus")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CreationStatus;
        private bool _mUnknown_CreationStatus;
        public string? CreationStatus
        {
            get
            {
                if (!_mUnknown_CreationStatus) return _mValue_CreationStatus;
                throw new UndeferrableValueException("Value 'Namespace.CreationStatus' is not present");
            }
        }

        /// <summary>
        /// User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
        /// </summary>
        [PolicyResourceProperty("identityStore", "_mUnknown_IdentityStore")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IdentityStore;
        private bool _mUnknown_IdentityStore;
        public string? IdentityStore
        {
            get
            {
                if (!_mUnknown_IdentityStore) return _mValue_IdentityStore;
                throw new UndeferrableValueException("Value 'Namespace.IdentityStore' is not present");
            }
        }

        /// <summary>
        /// Name of the namespace.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("namespace", "_mUnknown_NameSpace")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NameSpace;
        private bool _mUnknown_NameSpace;
        public string? NameSpace
        {
            get
            {
                if (!_mUnknown_NameSpace) return _mValue_NameSpace;
                throw new UndeferrableValueException("Value 'Namespace.NameSpace' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Namespace.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Namespace.TagsAll' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.NamespaceTimeouts? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Outputs.NamespaceTimeouts? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'Namespace.Timeouts' is not present");
            }
        }
    }

    [PolicyResourceType("aws:quicksight/namespace:Namespace")]
    public sealed class NamespaceArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// AWS account ID.
        /// </summary>
        [PolicyResourceProperty("awsAccountId", "_mUnknown_AwsAccountId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AwsAccountId;
        private bool _mUnknown_AwsAccountId;
        public string? AwsAccountId
        {
            get
            {
                if (!_mUnknown_AwsAccountId) return _mValue_AwsAccountId;
                throw new UndeferrableValueException("Value 'NamespaceArgs.AwsAccountId' is not present");
            }
        }

        /// <summary>
        /// User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
        /// </summary>
        [PolicyResourceProperty("identityStore", "_mUnknown_IdentityStore")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IdentityStore;
        private bool _mUnknown_IdentityStore;
        public string? IdentityStore
        {
            get
            {
                if (!_mUnknown_IdentityStore) return _mValue_IdentityStore;
                throw new UndeferrableValueException("Value 'NamespaceArgs.IdentityStore' is not present");
            }
        }

        /// <summary>
        /// Name of the namespace.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("namespace", "_mUnknown_NameSpace")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NameSpace;
        private bool _mUnknown_NameSpace;
        public string? NameSpace
        {
            get
            {
                if (!_mUnknown_NameSpace) return _mValue_NameSpace;
                throw new UndeferrableValueException("Value 'NamespaceArgs.NameSpace' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'NamespaceArgs.Tags' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.NamespaceTimeoutsArgs? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Inputs.NamespaceTimeoutsArgs? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'NamespaceArgs.Timeouts' is not present");
            }
        }
    }
}
