// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Quicksight
{
    [PolicyResourceType("aws:quicksight/dataSet:DataSet")]
    public sealed class DataSet : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the data set.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// AWS account ID.
        /// </summary>
        [Input("awsAccountId")]
        public string? AwsAccountId;

        /// <summary>
        /// Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
        /// </summary>
        [Input("columnGroups")]
        public List<DataSetColumnGroup>? ColumnGroups;

        /// <summary>
        /// A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
        /// </summary>
        [Input("columnLevelPermissionRules")]
        public List<DataSetColumnLevelPermissionRule>? ColumnLevelPermissionRules;

        /// <summary>
        /// Identifier for the data set.
        /// </summary>
        [Input("dataSetId")]
        public string? DataSetId;

        /// <summary>
        /// The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
        /// </summary>
        [Input("dataSetUsageConfiguration")]
        public DataSetDataSetUsageConfiguration? DataSetUsageConfiguration;

        /// <summary>
        /// The folder that contains fields and nested subfolders for your dataset. See field_folders.
        /// </summary>
        [Input("fieldFolders")]
        public List<DataSetFieldFolder>? FieldFolders;

        /// <summary>
        /// Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
        /// </summary>
        [Input("importMode")]
        public string? ImportMode;

        /// <summary>
        /// Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
        /// </summary>
        [Input("logicalTableMaps")]
        public List<DataSetLogicalTableMap>? LogicalTableMaps;

        /// <summary>
        /// Display name for the dataset.
        /// </summary>
        [Input("name")]
        public string? Name;

        [Input("outputColumns")]
        public List<DataSetOutputColumn>? OutputColumns;

        /// <summary>
        /// A set of resource permissions on the data source. Maximum of 64 items. See permissions.
        /// </summary>
        [Input("permissions")]
        public List<DataSetPermission>? Permissions;

        /// <summary>
        /// Declares the physical tables that are available in the underlying data sources. See physical_table_map.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("physicalTableMaps")]
        public List<DataSetPhysicalTableMap>? PhysicalTableMaps;

        /// <summary>
        /// The refresh properties for the data set. **NOTE**: Only valid when `import_mode` is set to `SPICE`. See refresh_properties.
        /// </summary>
        [Input("refreshProperties")]
        public DataSetRefreshProperties? RefreshProperties;

        /// <summary>
        /// The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
        /// </summary>
        [Input("rowLevelPermissionDataSet")]
        public DataSetRowLevelPermissionDataSet? RowLevelPermissionDataSet;

        /// <summary>
        /// The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
        /// </summary>
        [Input("rowLevelPermissionTagConfiguration")]
        public DataSetRowLevelPermissionTagConfiguration? RowLevelPermissionTagConfiguration;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
