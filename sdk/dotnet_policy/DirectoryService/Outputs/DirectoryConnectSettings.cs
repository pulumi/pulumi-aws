// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.DirectoryService.Outputs
{
    public sealed class DirectoryConnectSettings
    {
        [PolicyResourceProperty("availabilityZones", "_mUnknown_AvailabilityZones")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_AvailabilityZones;
        private bool _mUnknown_AvailabilityZones;
        public List<string>? AvailabilityZones
        {
            get
            {
                if (!_mUnknown_AvailabilityZones) return _mValue_AvailabilityZones;
                throw new UndeferrableValueException("Value 'DirectoryConnectSettings.AvailabilityZones' is not present");
            }
        }

        /// <summary>
        /// The IP addresses of the AD Connector servers.
        /// </summary>
        [PolicyResourceProperty("connectIps", "_mUnknown_ConnectIps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_ConnectIps;
        private bool _mUnknown_ConnectIps;
        public List<string>? ConnectIps
        {
            get
            {
                if (!_mUnknown_ConnectIps) return _mValue_ConnectIps;
                throw new UndeferrableValueException("Value 'DirectoryConnectSettings.ConnectIps' is not present");
            }
        }

        /// <summary>
        /// The DNS IP addresses of the domain to connect to.
        /// </summary>
        [PolicyResourceProperty("customerDnsIps", "_mUnknown_CustomerDnsIps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_CustomerDnsIps;
        private bool _mUnknown_CustomerDnsIps;
        public List<string>? CustomerDnsIps
        {
            get
            {
                if (!_mUnknown_CustomerDnsIps) return _mValue_CustomerDnsIps;
                throw new UndeferrableValueException("Value 'DirectoryConnectSettings.CustomerDnsIps' is not present");
            }
        }

        /// <summary>
        /// The username corresponding to the password provided.
        /// </summary>
        [PolicyResourceProperty("customerUsername", "_mUnknown_CustomerUsername")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CustomerUsername;
        private bool _mUnknown_CustomerUsername;
        public string? CustomerUsername
        {
            get
            {
                if (!_mUnknown_CustomerUsername) return _mValue_CustomerUsername;
                throw new UndeferrableValueException("Value 'DirectoryConnectSettings.CustomerUsername' is not present");
            }
        }

        /// <summary>
        /// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
        /// </summary>
        [PolicyResourceProperty("subnetIds", "_mUnknown_SubnetIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SubnetIds;
        private bool _mUnknown_SubnetIds;
        public List<string>? SubnetIds
        {
            get
            {
                if (!_mUnknown_SubnetIds) return _mValue_SubnetIds;
                throw new UndeferrableValueException("Value 'DirectoryConnectSettings.SubnetIds' is not present");
            }
        }

        /// <summary>
        /// The identifier of the VPC that the directory is in.
        /// </summary>
        [PolicyResourceProperty("vpcId", "_mUnknown_VpcId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VpcId;
        private bool _mUnknown_VpcId;
        public string? VpcId
        {
            get
            {
                if (!_mUnknown_VpcId) return _mValue_VpcId;
                throw new UndeferrableValueException("Value 'DirectoryConnectSettings.VpcId' is not present");
            }
        }
    }
}
