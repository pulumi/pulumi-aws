// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.DirectoryService
{
    [PolicyResourceType("aws:directoryservice/serviceRegion:ServiceRegion")]
    public sealed class ServiceRegion : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
        /// </summary>
        [PolicyResourceProperty("desiredNumberOfDomainControllers", "_mUnknown_DesiredNumberOfDomainControllers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_DesiredNumberOfDomainControllers;
        private bool _mUnknown_DesiredNumberOfDomainControllers;
        public int? DesiredNumberOfDomainControllers
        {
            get
            {
                if (!_mUnknown_DesiredNumberOfDomainControllers) return _mValue_DesiredNumberOfDomainControllers;
                throw new UndeferrableValueException("Value 'ServiceRegion.DesiredNumberOfDomainControllers' is not present");
            }
        }

        /// <summary>
        /// The identifier of the directory to which you want to add Region replication.
        /// </summary>
        [PolicyResourceProperty("directoryId", "_mUnknown_DirectoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DirectoryId;
        private bool _mUnknown_DirectoryId;
        public string? DirectoryId
        {
            get
            {
                if (!_mUnknown_DirectoryId) return _mValue_DirectoryId;
                throw new UndeferrableValueException("Value 'ServiceRegion.DirectoryId' is not present");
            }
        }

        /// <summary>
        /// The name of the Region where you want to add domain controllers for replication.
        /// </summary>
        [PolicyResourceProperty("regionName", "_mUnknown_RegionName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RegionName;
        private bool _mUnknown_RegionName;
        public string? RegionName
        {
            get
            {
                if (!_mUnknown_RegionName) return _mValue_RegionName;
                throw new UndeferrableValueException("Value 'ServiceRegion.RegionName' is not present");
            }
        }

        /// <summary>
        /// Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ServiceRegion.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'ServiceRegion.TagsAll' is not present");
            }
        }

        /// <summary>
        /// VPC information in the replicated Region. Detailed below.
        /// </summary>
        [PolicyResourceProperty("vpcSettings", "_mUnknown_VpcSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ServiceRegionVpcSettings? _mValue_VpcSettings;
        private bool _mUnknown_VpcSettings;
        public Outputs.ServiceRegionVpcSettings? VpcSettings
        {
            get
            {
                if (!_mUnknown_VpcSettings) return _mValue_VpcSettings;
                throw new UndeferrableValueException("Value 'ServiceRegion.VpcSettings' is not present");
            }
        }
    }

    [PolicyResourceType("aws:directoryservice/serviceRegion:ServiceRegion")]
    public sealed class ServiceRegionArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The number of domain controllers desired in the replicated directory. Minimum value of `2`.
        /// </summary>
        [PolicyResourceProperty("desiredNumberOfDomainControllers", "_mUnknown_DesiredNumberOfDomainControllers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_DesiredNumberOfDomainControllers;
        private bool _mUnknown_DesiredNumberOfDomainControllers;
        public int? DesiredNumberOfDomainControllers
        {
            get
            {
                if (!_mUnknown_DesiredNumberOfDomainControllers) return _mValue_DesiredNumberOfDomainControllers;
                throw new UndeferrableValueException("Value 'ServiceRegionArgs.DesiredNumberOfDomainControllers' is not present");
            }
        }

        /// <summary>
        /// The identifier of the directory to which you want to add Region replication.
        /// </summary>
        [PolicyResourceProperty("directoryId", "_mUnknown_DirectoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DirectoryId;
        private bool _mUnknown_DirectoryId;
        public string? DirectoryId
        {
            get
            {
                if (!_mUnknown_DirectoryId) return _mValue_DirectoryId;
                throw new UndeferrableValueException("Value 'ServiceRegionArgs.DirectoryId' is not present");
            }
        }

        /// <summary>
        /// The name of the Region where you want to add domain controllers for replication.
        /// </summary>
        [PolicyResourceProperty("regionName", "_mUnknown_RegionName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RegionName;
        private bool _mUnknown_RegionName;
        public string? RegionName
        {
            get
            {
                if (!_mUnknown_RegionName) return _mValue_RegionName;
                throw new UndeferrableValueException("Value 'ServiceRegionArgs.RegionName' is not present");
            }
        }

        /// <summary>
        /// Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ServiceRegionArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// VPC information in the replicated Region. Detailed below.
        /// </summary>
        [PolicyResourceProperty("vpcSettings", "_mUnknown_VpcSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.ServiceRegionVpcSettingsArgs? _mValue_VpcSettings;
        private bool _mUnknown_VpcSettings;
        public Inputs.ServiceRegionVpcSettingsArgs? VpcSettings
        {
            get
            {
                if (!_mUnknown_VpcSettings) return _mValue_VpcSettings;
                throw new UndeferrableValueException("Value 'ServiceRegionArgs.VpcSettings' is not present");
            }
        }
    }
}
