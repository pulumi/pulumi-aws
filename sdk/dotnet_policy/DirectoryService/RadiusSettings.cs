// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.DirectoryService
{
    [PolicyResourceType("aws:directoryservice/radiusSettings:RadiusSettings")]
    public sealed class RadiusSettings : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
        /// </summary>
        [PolicyResourceProperty("authenticationProtocol", "_mUnknown_AuthenticationProtocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AuthenticationProtocol;
        private bool _mUnknown_AuthenticationProtocol;
        public string? AuthenticationProtocol
        {
            get
            {
                if (!_mUnknown_AuthenticationProtocol) return _mValue_AuthenticationProtocol;
                throw new UndeferrableValueException("Value 'RadiusSettings.AuthenticationProtocol' is not present");
            }
        }

        /// <summary>
        /// The identifier of the directory for which you want to manager RADIUS settings.
        /// </summary>
        [PolicyResourceProperty("directoryId", "_mUnknown_DirectoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DirectoryId;
        private bool _mUnknown_DirectoryId;
        public string? DirectoryId
        {
            get
            {
                if (!_mUnknown_DirectoryId) return _mValue_DirectoryId;
                throw new UndeferrableValueException("Value 'RadiusSettings.DirectoryId' is not present");
            }
        }

        /// <summary>
        /// Display label.
        /// </summary>
        [PolicyResourceProperty("displayLabel", "_mUnknown_DisplayLabel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DisplayLabel;
        private bool _mUnknown_DisplayLabel;
        public string? DisplayLabel
        {
            get
            {
                if (!_mUnknown_DisplayLabel) return _mValue_DisplayLabel;
                throw new UndeferrableValueException("Value 'RadiusSettings.DisplayLabel' is not present");
            }
        }

        /// <summary>
        /// The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
        /// </summary>
        [PolicyResourceProperty("radiusPort", "_mUnknown_RadiusPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RadiusPort;
        private bool _mUnknown_RadiusPort;
        public int? RadiusPort
        {
            get
            {
                if (!_mUnknown_RadiusPort) return _mValue_RadiusPort;
                throw new UndeferrableValueException("Value 'RadiusSettings.RadiusPort' is not present");
            }
        }

        /// <summary>
        /// The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
        /// </summary>
        [PolicyResourceProperty("radiusRetries", "_mUnknown_RadiusRetries")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RadiusRetries;
        private bool _mUnknown_RadiusRetries;
        public int? RadiusRetries
        {
            get
            {
                if (!_mUnknown_RadiusRetries) return _mValue_RadiusRetries;
                throw new UndeferrableValueException("Value 'RadiusSettings.RadiusRetries' is not present");
            }
        }

        /// <summary>
        /// An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
        /// </summary>
        [PolicyResourceProperty("radiusServers", "_mUnknown_RadiusServers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_RadiusServers;
        private bool _mUnknown_RadiusServers;
        public List<string>? RadiusServers
        {
            get
            {
                if (!_mUnknown_RadiusServers) return _mValue_RadiusServers;
                throw new UndeferrableValueException("Value 'RadiusSettings.RadiusServers' is not present");
            }
        }

        /// <summary>
        /// The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
        /// </summary>
        [PolicyResourceProperty("radiusTimeout", "_mUnknown_RadiusTimeout")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RadiusTimeout;
        private bool _mUnknown_RadiusTimeout;
        public int? RadiusTimeout
        {
            get
            {
                if (!_mUnknown_RadiusTimeout) return _mValue_RadiusTimeout;
                throw new UndeferrableValueException("Value 'RadiusSettings.RadiusTimeout' is not present");
            }
        }

        /// <summary>
        /// Required for enabling RADIUS on the directory.
        /// </summary>
        [PolicyResourceProperty("sharedSecret", "_mUnknown_SharedSecret")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SharedSecret;
        private bool _mUnknown_SharedSecret;
        public string? SharedSecret
        {
            get
            {
                if (!_mUnknown_SharedSecret) return _mValue_SharedSecret;
                throw new UndeferrableValueException("Value 'RadiusSettings.SharedSecret' is not present");
            }
        }

        /// <summary>
        /// Not currently used.
        /// </summary>
        [PolicyResourceProperty("useSameUsername", "_mUnknown_UseSameUsername")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UseSameUsername;
        private bool _mUnknown_UseSameUsername;
        public bool? UseSameUsername
        {
            get
            {
                if (!_mUnknown_UseSameUsername) return _mValue_UseSameUsername;
                throw new UndeferrableValueException("Value 'RadiusSettings.UseSameUsername' is not present");
            }
        }
    }

    [PolicyResourceType("aws:directoryservice/radiusSettings:RadiusSettings")]
    public sealed class RadiusSettingsArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
        /// </summary>
        [PolicyResourceProperty("authenticationProtocol", "_mUnknown_AuthenticationProtocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AuthenticationProtocol;
        private bool _mUnknown_AuthenticationProtocol;
        public string? AuthenticationProtocol
        {
            get
            {
                if (!_mUnknown_AuthenticationProtocol) return _mValue_AuthenticationProtocol;
                throw new UndeferrableValueException("Value 'RadiusSettingsArgs.AuthenticationProtocol' is not present");
            }
        }

        /// <summary>
        /// The identifier of the directory for which you want to manager RADIUS settings.
        /// </summary>
        [PolicyResourceProperty("directoryId", "_mUnknown_DirectoryId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DirectoryId;
        private bool _mUnknown_DirectoryId;
        public string? DirectoryId
        {
            get
            {
                if (!_mUnknown_DirectoryId) return _mValue_DirectoryId;
                throw new UndeferrableValueException("Value 'RadiusSettingsArgs.DirectoryId' is not present");
            }
        }

        /// <summary>
        /// Display label.
        /// </summary>
        [PolicyResourceProperty("displayLabel", "_mUnknown_DisplayLabel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DisplayLabel;
        private bool _mUnknown_DisplayLabel;
        public string? DisplayLabel
        {
            get
            {
                if (!_mUnknown_DisplayLabel) return _mValue_DisplayLabel;
                throw new UndeferrableValueException("Value 'RadiusSettingsArgs.DisplayLabel' is not present");
            }
        }

        /// <summary>
        /// The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
        /// </summary>
        [PolicyResourceProperty("radiusPort", "_mUnknown_RadiusPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RadiusPort;
        private bool _mUnknown_RadiusPort;
        public int? RadiusPort
        {
            get
            {
                if (!_mUnknown_RadiusPort) return _mValue_RadiusPort;
                throw new UndeferrableValueException("Value 'RadiusSettingsArgs.RadiusPort' is not present");
            }
        }

        /// <summary>
        /// The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
        /// </summary>
        [PolicyResourceProperty("radiusRetries", "_mUnknown_RadiusRetries")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RadiusRetries;
        private bool _mUnknown_RadiusRetries;
        public int? RadiusRetries
        {
            get
            {
                if (!_mUnknown_RadiusRetries) return _mValue_RadiusRetries;
                throw new UndeferrableValueException("Value 'RadiusSettingsArgs.RadiusRetries' is not present");
            }
        }

        /// <summary>
        /// An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
        /// </summary>
        [PolicyResourceProperty("radiusServers", "_mUnknown_RadiusServers")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_RadiusServers;
        private bool _mUnknown_RadiusServers;
        public List<string>? RadiusServers
        {
            get
            {
                if (!_mUnknown_RadiusServers) return _mValue_RadiusServers;
                throw new UndeferrableValueException("Value 'RadiusSettingsArgs.RadiusServers' is not present");
            }
        }

        /// <summary>
        /// The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
        /// </summary>
        [PolicyResourceProperty("radiusTimeout", "_mUnknown_RadiusTimeout")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RadiusTimeout;
        private bool _mUnknown_RadiusTimeout;
        public int? RadiusTimeout
        {
            get
            {
                if (!_mUnknown_RadiusTimeout) return _mValue_RadiusTimeout;
                throw new UndeferrableValueException("Value 'RadiusSettingsArgs.RadiusTimeout' is not present");
            }
        }

        /// <summary>
        /// Required for enabling RADIUS on the directory.
        /// </summary>
        [PolicyResourceProperty("sharedSecret", "_mUnknown_SharedSecret")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SharedSecret;
        private bool _mUnknown_SharedSecret;
        public string? SharedSecret
        {
            get
            {
                if (!_mUnknown_SharedSecret) return _mValue_SharedSecret;
                throw new UndeferrableValueException("Value 'RadiusSettingsArgs.SharedSecret' is not present");
            }
        }

        /// <summary>
        /// Not currently used.
        /// </summary>
        [PolicyResourceProperty("useSameUsername", "_mUnknown_UseSameUsername")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UseSameUsername;
        private bool _mUnknown_UseSameUsername;
        public bool? UseSameUsername
        {
            get
            {
                if (!_mUnknown_UseSameUsername) return _mValue_UseSameUsername;
                throw new UndeferrableValueException("Value 'RadiusSettingsArgs.UseSameUsername' is not present");
            }
        }
    }
}
