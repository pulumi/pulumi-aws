// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Rds
{
    [PolicyResourceType("aws:rds/integration:Integration")]
    public sealed class Integration : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Set of non-secret key–value pairs that contains additional contextual information about the data.
        /// For more information, see the [User Guide](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context).
        /// You can only include this parameter if you specify the `kms_key_id` parameter.
        /// </summary>
        [PolicyResourceProperty("additionalEncryptionContext", "_mUnknown_AdditionalEncryptionContext")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_AdditionalEncryptionContext;
        private bool _mUnknown_AdditionalEncryptionContext;
        public Dictionary<string, string>? AdditionalEncryptionContext
        {
            get
            {
                if (!_mUnknown_AdditionalEncryptionContext) return _mValue_AdditionalEncryptionContext;
                throw new UndeferrableValueException("Value 'Integration.AdditionalEncryptionContext' is not present");
            }
        }

        /// <summary>
        /// ARN of the Integration.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Integration.Arn' is not present");
            }
        }

        /// <summary>
        /// Data filters for the integration.
        /// These filters determine which tables from the source database are sent to the target Amazon Redshift data warehouse.
        /// The value should match the syntax from the AWS CLI which includes an `include:` or `exclude:` prefix before a filter expression.
        /// Multiple expressions are separated by a comma.
        /// See the [Amazon RDS data filtering guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/zero-etl.filtering.html) for additional details.
        /// </summary>
        [PolicyResourceProperty("dataFilter", "_mUnknown_DataFilter")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DataFilter;
        private bool _mUnknown_DataFilter;
        public string? DataFilter
        {
            get
            {
                if (!_mUnknown_DataFilter) return _mValue_DataFilter;
                throw new UndeferrableValueException("Value 'Integration.DataFilter' is not present");
            }
        }

        /// <summary>
        /// Name of the integration.
        /// </summary>
        [PolicyResourceProperty("integrationName", "_mUnknown_IntegrationName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IntegrationName;
        private bool _mUnknown_IntegrationName;
        public string? IntegrationName
        {
            get
            {
                if (!_mUnknown_IntegrationName) return _mValue_IntegrationName;
                throw new UndeferrableValueException("Value 'Integration.IntegrationName' is not present");
            }
        }

        /// <summary>
        /// KMS key identifier for the key to use to encrypt the integration.
        /// If you don't specify an encryption key, RDS uses a default AWS owned key.
        /// If you use the default AWS owned key, you should ignore `kms_key_id` parameter by using `lifecycle` parameter to avoid unintended change after the first creation.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'Integration.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// ARN of the database to use as the source for replication.
        /// </summary>
        [PolicyResourceProperty("sourceArn", "_mUnknown_SourceArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceArn;
        private bool _mUnknown_SourceArn;
        public string? SourceArn
        {
            get
            {
                if (!_mUnknown_SourceArn) return _mValue_SourceArn;
                throw new UndeferrableValueException("Value 'Integration.SourceArn' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Integration.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Integration.TagsAll' is not present");
            }
        }

        /// <summary>
        /// ARN of the Redshift data warehouse to use as the target for replication.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("targetArn", "_mUnknown_TargetArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TargetArn;
        private bool _mUnknown_TargetArn;
        public string? TargetArn
        {
            get
            {
                if (!_mUnknown_TargetArn) return _mValue_TargetArn;
                throw new UndeferrableValueException("Value 'Integration.TargetArn' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.IntegrationTimeouts? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Outputs.IntegrationTimeouts? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'Integration.Timeouts' is not present");
            }
        }
    }

    [PolicyResourceType("aws:rds/integration:Integration")]
    public sealed class IntegrationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Set of non-secret key–value pairs that contains additional contextual information about the data.
        /// For more information, see the [User Guide](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context).
        /// You can only include this parameter if you specify the `kms_key_id` parameter.
        /// </summary>
        [PolicyResourceProperty("additionalEncryptionContext", "_mUnknown_AdditionalEncryptionContext")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_AdditionalEncryptionContext;
        private bool _mUnknown_AdditionalEncryptionContext;
        public Dictionary<string, string>? AdditionalEncryptionContext
        {
            get
            {
                if (!_mUnknown_AdditionalEncryptionContext) return _mValue_AdditionalEncryptionContext;
                throw new UndeferrableValueException("Value 'IntegrationArgs.AdditionalEncryptionContext' is not present");
            }
        }

        /// <summary>
        /// Data filters for the integration.
        /// These filters determine which tables from the source database are sent to the target Amazon Redshift data warehouse.
        /// The value should match the syntax from the AWS CLI which includes an `include:` or `exclude:` prefix before a filter expression.
        /// Multiple expressions are separated by a comma.
        /// See the [Amazon RDS data filtering guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/zero-etl.filtering.html) for additional details.
        /// </summary>
        [PolicyResourceProperty("dataFilter", "_mUnknown_DataFilter")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DataFilter;
        private bool _mUnknown_DataFilter;
        public string? DataFilter
        {
            get
            {
                if (!_mUnknown_DataFilter) return _mValue_DataFilter;
                throw new UndeferrableValueException("Value 'IntegrationArgs.DataFilter' is not present");
            }
        }

        /// <summary>
        /// Name of the integration.
        /// </summary>
        [PolicyResourceProperty("integrationName", "_mUnknown_IntegrationName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IntegrationName;
        private bool _mUnknown_IntegrationName;
        public string? IntegrationName
        {
            get
            {
                if (!_mUnknown_IntegrationName) return _mValue_IntegrationName;
                throw new UndeferrableValueException("Value 'IntegrationArgs.IntegrationName' is not present");
            }
        }

        /// <summary>
        /// KMS key identifier for the key to use to encrypt the integration.
        /// If you don't specify an encryption key, RDS uses a default AWS owned key.
        /// If you use the default AWS owned key, you should ignore `kms_key_id` parameter by using `lifecycle` parameter to avoid unintended change after the first creation.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'IntegrationArgs.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// ARN of the database to use as the source for replication.
        /// </summary>
        [PolicyResourceProperty("sourceArn", "_mUnknown_SourceArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceArn;
        private bool _mUnknown_SourceArn;
        public string? SourceArn
        {
            get
            {
                if (!_mUnknown_SourceArn) return _mValue_SourceArn;
                throw new UndeferrableValueException("Value 'IntegrationArgs.SourceArn' is not present");
            }
        }

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'IntegrationArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// ARN of the Redshift data warehouse to use as the target for replication.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("targetArn", "_mUnknown_TargetArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TargetArn;
        private bool _mUnknown_TargetArn;
        public string? TargetArn
        {
            get
            {
                if (!_mUnknown_TargetArn) return _mValue_TargetArn;
                throw new UndeferrableValueException("Value 'IntegrationArgs.TargetArn' is not present");
            }
        }

        [PolicyResourceProperty("timeouts", "_mUnknown_Timeouts")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.IntegrationTimeoutsArgs? _mValue_Timeouts;
        private bool _mUnknown_Timeouts;
        public Inputs.IntegrationTimeoutsArgs? Timeouts
        {
            get
            {
                if (!_mUnknown_Timeouts) return _mValue_Timeouts;
                throw new UndeferrableValueException("Value 'IntegrationArgs.Timeouts' is not present");
            }
        }
    }
}
