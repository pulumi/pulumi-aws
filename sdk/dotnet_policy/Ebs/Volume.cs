// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ebs
{
    [PolicyResourceType("aws:ebs/volume:Volume")]
    public sealed class Volume : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Volume ARN (e.g., arn:aws:ec2:us-east-1:123456789012:volume/vol-59fcb34e).
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Volume.Arn' is not present");
            }
        }

        /// <summary>
        /// Availability zone where the EBS volume will exist.
        /// </summary>
        [PolicyResourceProperty("availabilityZone", "_mUnknown_AvailabilityZone")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZone;
        private bool _mUnknown_AvailabilityZone;
        public string? AvailabilityZone
        {
            get
            {
                if (!_mUnknown_AvailabilityZone) return _mValue_AvailabilityZone;
                throw new UndeferrableValueException("Value 'Volume.AvailabilityZone' is not present");
            }
        }

        /// <summary>
        /// Timestamp when volume creation was initiated.
        /// </summary>
        [PolicyResourceProperty("createTime", "_mUnknown_CreateTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CreateTime;
        private bool _mUnknown_CreateTime;
        public string? CreateTime
        {
            get
            {
                if (!_mUnknown_CreateTime) return _mValue_CreateTime;
                throw new UndeferrableValueException("Value 'Volume.CreateTime' is not present");
            }
        }

        /// <summary>
        /// If true, the disk will be encrypted.
        /// </summary>
        [PolicyResourceProperty("encrypted", "_mUnknown_Encrypted")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Encrypted;
        private bool _mUnknown_Encrypted;
        public bool? Encrypted
        {
            get
            {
                if (!_mUnknown_Encrypted) return _mValue_Encrypted;
                throw new UndeferrableValueException("Value 'Volume.Encrypted' is not present");
            }
        }

        /// <summary>
        /// If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
        /// </summary>
        [PolicyResourceProperty("finalSnapshot", "_mUnknown_FinalSnapshot")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_FinalSnapshot;
        private bool _mUnknown_FinalSnapshot;
        public bool? FinalSnapshot
        {
            get
            {
                if (!_mUnknown_FinalSnapshot) return _mValue_FinalSnapshot;
                throw new UndeferrableValueException("Value 'Volume.FinalSnapshot' is not present");
            }
        }

        /// <summary>
        /// Amount of IOPS to provision for the disk. Only valid for `type` of `io1`, `io2` or `gp3`.
        /// </summary>
        [PolicyResourceProperty("iops", "_mUnknown_Iops")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Iops;
        private bool _mUnknown_Iops;
        public int? Iops
        {
            get
            {
                if (!_mUnknown_Iops) return _mValue_Iops;
                throw new UndeferrableValueException("Value 'Volume.Iops' is not present");
            }
        }

        /// <summary>
        /// ARN for the KMS encryption key. When specifying `kms_key_id`, `encrypted` needs to be set to true. Note: The provider must be running with credentials which have the `GenerateDataKeyWithoutPlaintext` permission on the specified KMS key as required by the [EBS KMS CMK volume provisioning process](https://docs.aws.amazon.com/kms/latest/developerguide/services-ebs.html#ebs-cmk) to prevent a volume from being created and almost immediately deleted.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'Volume.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on `io1` and `io2` volumes.
        /// </summary>
        [PolicyResourceProperty("multiAttachEnabled", "_mUnknown_MultiAttachEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_MultiAttachEnabled;
        private bool _mUnknown_MultiAttachEnabled;
        public bool? MultiAttachEnabled
        {
            get
            {
                if (!_mUnknown_MultiAttachEnabled) return _mValue_MultiAttachEnabled;
                throw new UndeferrableValueException("Value 'Volume.MultiAttachEnabled' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of the Outpost.
        /// </summary>
        [PolicyResourceProperty("outpostArn", "_mUnknown_OutpostArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_OutpostArn;
        private bool _mUnknown_OutpostArn;
        public string? OutpostArn
        {
            get
            {
                if (!_mUnknown_OutpostArn) return _mValue_OutpostArn;
                throw new UndeferrableValueException("Value 'Volume.OutpostArn' is not present");
            }
        }

        /// <summary>
        /// Size of the drive in GiBs.
        /// </summary>
        [PolicyResourceProperty("size", "_mUnknown_Size")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Size;
        private bool _mUnknown_Size;
        public int? Size
        {
            get
            {
                if (!_mUnknown_Size) return _mValue_Size;
                throw new UndeferrableValueException("Value 'Volume.Size' is not present");
            }
        }

        /// <summary>
        /// A snapshot to base the EBS volume off of.
        /// </summary>
        [PolicyResourceProperty("snapshotId", "_mUnknown_SnapshotId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnapshotId;
        private bool _mUnknown_SnapshotId;
        public string? SnapshotId
        {
            get
            {
                if (!_mUnknown_SnapshotId) return _mValue_SnapshotId;
                throw new UndeferrableValueException("Value 'Volume.SnapshotId' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Volume.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Volume.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Throughput that the volume supports, in MiB/s. Only valid for `type` of `gp3`.
        /// </summary>
        [PolicyResourceProperty("throughput", "_mUnknown_Throughput")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Throughput;
        private bool _mUnknown_Throughput;
        public int? Throughput
        {
            get
            {
                if (!_mUnknown_Throughput) return _mValue_Throughput;
                throw new UndeferrableValueException("Value 'Volume.Throughput' is not present");
            }
        }

        /// <summary>
        /// Type of EBS volume. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `gp2`).
        /// 
        /// &gt; **NOTE:** When changing the `size`, `iops` or `type` of an instance, there are [considerations](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/considerations.html) to be aware of.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'Volume.Type' is not present");
            }
        }
    }

    [PolicyResourceType("aws:ebs/volume:Volume")]
    public sealed class VolumeArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Availability zone where the EBS volume will exist.
        /// </summary>
        [PolicyResourceProperty("availabilityZone", "_mUnknown_AvailabilityZone")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZone;
        private bool _mUnknown_AvailabilityZone;
        public string? AvailabilityZone
        {
            get
            {
                if (!_mUnknown_AvailabilityZone) return _mValue_AvailabilityZone;
                throw new UndeferrableValueException("Value 'VolumeArgs.AvailabilityZone' is not present");
            }
        }

        /// <summary>
        /// If true, the disk will be encrypted.
        /// </summary>
        [PolicyResourceProperty("encrypted", "_mUnknown_Encrypted")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Encrypted;
        private bool _mUnknown_Encrypted;
        public bool? Encrypted
        {
            get
            {
                if (!_mUnknown_Encrypted) return _mValue_Encrypted;
                throw new UndeferrableValueException("Value 'VolumeArgs.Encrypted' is not present");
            }
        }

        /// <summary>
        /// If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
        /// </summary>
        [PolicyResourceProperty("finalSnapshot", "_mUnknown_FinalSnapshot")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_FinalSnapshot;
        private bool _mUnknown_FinalSnapshot;
        public bool? FinalSnapshot
        {
            get
            {
                if (!_mUnknown_FinalSnapshot) return _mValue_FinalSnapshot;
                throw new UndeferrableValueException("Value 'VolumeArgs.FinalSnapshot' is not present");
            }
        }

        /// <summary>
        /// Amount of IOPS to provision for the disk. Only valid for `type` of `io1`, `io2` or `gp3`.
        /// </summary>
        [PolicyResourceProperty("iops", "_mUnknown_Iops")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Iops;
        private bool _mUnknown_Iops;
        public int? Iops
        {
            get
            {
                if (!_mUnknown_Iops) return _mValue_Iops;
                throw new UndeferrableValueException("Value 'VolumeArgs.Iops' is not present");
            }
        }

        /// <summary>
        /// ARN for the KMS encryption key. When specifying `kms_key_id`, `encrypted` needs to be set to true. Note: The provider must be running with credentials which have the `GenerateDataKeyWithoutPlaintext` permission on the specified KMS key as required by the [EBS KMS CMK volume provisioning process](https://docs.aws.amazon.com/kms/latest/developerguide/services-ebs.html#ebs-cmk) to prevent a volume from being created and almost immediately deleted.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'VolumeArgs.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on `io1` and `io2` volumes.
        /// </summary>
        [PolicyResourceProperty("multiAttachEnabled", "_mUnknown_MultiAttachEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_MultiAttachEnabled;
        private bool _mUnknown_MultiAttachEnabled;
        public bool? MultiAttachEnabled
        {
            get
            {
                if (!_mUnknown_MultiAttachEnabled) return _mValue_MultiAttachEnabled;
                throw new UndeferrableValueException("Value 'VolumeArgs.MultiAttachEnabled' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of the Outpost.
        /// </summary>
        [PolicyResourceProperty("outpostArn", "_mUnknown_OutpostArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_OutpostArn;
        private bool _mUnknown_OutpostArn;
        public string? OutpostArn
        {
            get
            {
                if (!_mUnknown_OutpostArn) return _mValue_OutpostArn;
                throw new UndeferrableValueException("Value 'VolumeArgs.OutpostArn' is not present");
            }
        }

        /// <summary>
        /// Size of the drive in GiBs.
        /// </summary>
        [PolicyResourceProperty("size", "_mUnknown_Size")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Size;
        private bool _mUnknown_Size;
        public int? Size
        {
            get
            {
                if (!_mUnknown_Size) return _mValue_Size;
                throw new UndeferrableValueException("Value 'VolumeArgs.Size' is not present");
            }
        }

        /// <summary>
        /// A snapshot to base the EBS volume off of.
        /// </summary>
        [PolicyResourceProperty("snapshotId", "_mUnknown_SnapshotId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnapshotId;
        private bool _mUnknown_SnapshotId;
        public string? SnapshotId
        {
            get
            {
                if (!_mUnknown_SnapshotId) return _mValue_SnapshotId;
                throw new UndeferrableValueException("Value 'VolumeArgs.SnapshotId' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'VolumeArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Throughput that the volume supports, in MiB/s. Only valid for `type` of `gp3`.
        /// </summary>
        [PolicyResourceProperty("throughput", "_mUnknown_Throughput")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Throughput;
        private bool _mUnknown_Throughput;
        public int? Throughput
        {
            get
            {
                if (!_mUnknown_Throughput) return _mValue_Throughput;
                throw new UndeferrableValueException("Value 'VolumeArgs.Throughput' is not present");
            }
        }

        /// <summary>
        /// Type of EBS volume. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `gp2`).
        /// 
        /// &gt; **NOTE:** When changing the `size`, `iops` or `type` of an instance, there are [considerations](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/considerations.html) to be aware of.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'VolumeArgs.Type' is not present");
            }
        }
    }
}
