// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Waf.Inputs
{
    public sealed class WebAclRuleArgs
    {
        /// <summary>
        /// The action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Not used if `type` is `GROUP`.
        /// </summary>
        [PolicyResourceProperty("action", "_mUnknown_Action")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.WebAclRuleActionArgs? _mValue_Action;
        private bool _mUnknown_Action;
        public Inputs.WebAclRuleActionArgs? Action
        {
            get
            {
                if (!_mUnknown_Action) return _mValue_Action;
                throw new UndeferrableValueException("Value 'WebAclRuleArgs.Action' is not present");
            }
        }

        /// <summary>
        /// Override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Only used if `type` is `GROUP`.
        /// </summary>
        [PolicyResourceProperty("overrideAction", "_mUnknown_OverrideAction")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.WebAclRuleOverrideActionArgs? _mValue_OverrideAction;
        private bool _mUnknown_OverrideAction;
        public Inputs.WebAclRuleOverrideActionArgs? OverrideAction
        {
            get
            {
                if (!_mUnknown_OverrideAction) return _mValue_OverrideAction;
                throw new UndeferrableValueException("Value 'WebAclRuleArgs.OverrideAction' is not present");
            }
        }

        /// <summary>
        /// Specifies the order in which the rules in a WebACL are evaluated.
        /// Rules with a lower value are evaluated before rules with a higher value.
        /// </summary>
        [PolicyResourceProperty("priority", "_mUnknown_Priority")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Priority;
        private bool _mUnknown_Priority;
        public int? Priority
        {
            get
            {
                if (!_mUnknown_Priority) return _mValue_Priority;
                throw new UndeferrableValueException("Value 'WebAclRuleArgs.Priority' is not present");
            }
        }

        /// <summary>
        /// ID of the associated WAF (Global) rule (e.g., `aws.waf.Rule`). WAF (Regional) rules cannot be used.
        /// </summary>
        [PolicyResourceProperty("ruleId", "_mUnknown_RuleId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RuleId;
        private bool _mUnknown_RuleId;
        public string? RuleId
        {
            get
            {
                if (!_mUnknown_RuleId) return _mValue_RuleId;
                throw new UndeferrableValueException("Value 'WebAclRuleArgs.RuleId' is not present");
            }
        }

        /// <summary>
        /// The rule type, either `REGULAR`, as defined by [Rule](http://docs.aws.amazon.com/waf/latest/APIReference/API_Rule.html), `RATE_BASED`, as defined by [RateBasedRule](http://docs.aws.amazon.com/waf/latest/APIReference/API_RateBasedRule.html), or `GROUP`, as defined by [RuleGroup](https://docs.aws.amazon.com/waf/latest/APIReference/API_RuleGroup.html). The default is REGULAR. If you add a RATE_BASED rule, you need to set `type` as `RATE_BASED`. If you add a GROUP rule, you need to set `type` as `GROUP`.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'WebAclRuleArgs.Type' is not present");
            }
        }
    }
}
