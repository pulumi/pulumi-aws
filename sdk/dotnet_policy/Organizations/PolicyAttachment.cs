// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Organizations
{
    [PolicyResourceType("aws:organizations/policyAttachment:PolicyAttachment")]
    public sealed class PolicyAttachment : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The unique identifier (ID) of the policy that you want to attach to the target.
        /// </summary>
        [PolicyResourceProperty("policyId", "_mUnknown_PolicyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyId;
        private bool _mUnknown_PolicyId;
        public string? PolicyId
        {
            get
            {
                if (!_mUnknown_PolicyId) return _mValue_PolicyId;
                throw new UndeferrableValueException("Value 'PolicyAttachment.PolicyId' is not present");
            }
        }

        /// <summary>
        /// If set to `true`, destroy will **not** detach the policy and instead just remove the resource from state. This can be useful in situations where the attachment must be preserved to meet the AWS minimum requirement of 1 attached policy.
        /// </summary>
        [PolicyResourceProperty("skipDestroy", "_mUnknown_SkipDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SkipDestroy;
        private bool _mUnknown_SkipDestroy;
        public bool? SkipDestroy
        {
            get
            {
                if (!_mUnknown_SkipDestroy) return _mValue_SkipDestroy;
                throw new UndeferrableValueException("Value 'PolicyAttachment.SkipDestroy' is not present");
            }
        }

        /// <summary>
        /// The unique identifier (ID) of the root, organizational unit, or account number that you want to attach the policy to.
        /// </summary>
        [PolicyResourceProperty("targetId", "_mUnknown_TargetId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TargetId;
        private bool _mUnknown_TargetId;
        public string? TargetId
        {
            get
            {
                if (!_mUnknown_TargetId) return _mValue_TargetId;
                throw new UndeferrableValueException("Value 'PolicyAttachment.TargetId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:organizations/policyAttachment:PolicyAttachment")]
    public sealed class PolicyAttachmentArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The unique identifier (ID) of the policy that you want to attach to the target.
        /// </summary>
        [PolicyResourceProperty("policyId", "_mUnknown_PolicyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyId;
        private bool _mUnknown_PolicyId;
        public string? PolicyId
        {
            get
            {
                if (!_mUnknown_PolicyId) return _mValue_PolicyId;
                throw new UndeferrableValueException("Value 'PolicyAttachmentArgs.PolicyId' is not present");
            }
        }

        /// <summary>
        /// If set to `true`, destroy will **not** detach the policy and instead just remove the resource from state. This can be useful in situations where the attachment must be preserved to meet the AWS minimum requirement of 1 attached policy.
        /// </summary>
        [PolicyResourceProperty("skipDestroy", "_mUnknown_SkipDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SkipDestroy;
        private bool _mUnknown_SkipDestroy;
        public bool? SkipDestroy
        {
            get
            {
                if (!_mUnknown_SkipDestroy) return _mValue_SkipDestroy;
                throw new UndeferrableValueException("Value 'PolicyAttachmentArgs.SkipDestroy' is not present");
            }
        }

        /// <summary>
        /// The unique identifier (ID) of the root, organizational unit, or account number that you want to attach the policy to.
        /// </summary>
        [PolicyResourceProperty("targetId", "_mUnknown_TargetId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TargetId;
        private bool _mUnknown_TargetId;
        public string? TargetId
        {
            get
            {
                if (!_mUnknown_TargetId) return _mValue_TargetId;
                throw new UndeferrableValueException("Value 'PolicyAttachmentArgs.TargetId' is not present");
            }
        }
    }
}
