// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.AppStream
{
    [PolicyResourceType("aws:appstream/fleet:Fleet")]
    public sealed class Fleet : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// ARN of the appstream fleet.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Fleet.Arn' is not present");
            }
        }

        /// <summary>
        /// Configuration block for the desired capacity of the fleet. See below.
        /// </summary>
        [PolicyResourceProperty("computeCapacity", "_mUnknown_ComputeCapacity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.FleetComputeCapacity? _mValue_ComputeCapacity;
        private bool _mUnknown_ComputeCapacity;
        public Outputs.FleetComputeCapacity? ComputeCapacity
        {
            get
            {
                if (!_mUnknown_ComputeCapacity) return _mValue_ComputeCapacity;
                throw new UndeferrableValueException("Value 'Fleet.ComputeCapacity' is not present");
            }
        }

        /// <summary>
        /// Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
        /// </summary>
        [PolicyResourceProperty("createdTime", "_mUnknown_CreatedTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CreatedTime;
        private bool _mUnknown_CreatedTime;
        public string? CreatedTime
        {
            get
            {
                if (!_mUnknown_CreatedTime) return _mValue_CreatedTime;
                throw new UndeferrableValueException("Value 'Fleet.CreatedTime' is not present");
            }
        }

        /// <summary>
        /// Description to display.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'Fleet.Description' is not present");
            }
        }

        /// <summary>
        /// Amount of time that a streaming session remains active after users disconnect.
        /// </summary>
        [PolicyResourceProperty("disconnectTimeoutInSeconds", "_mUnknown_DisconnectTimeoutInSeconds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_DisconnectTimeoutInSeconds;
        private bool _mUnknown_DisconnectTimeoutInSeconds;
        public int? DisconnectTimeoutInSeconds
        {
            get
            {
                if (!_mUnknown_DisconnectTimeoutInSeconds) return _mValue_DisconnectTimeoutInSeconds;
                throw new UndeferrableValueException("Value 'Fleet.DisconnectTimeoutInSeconds' is not present");
            }
        }

        /// <summary>
        /// Human-readable friendly name for the AppStream fleet.
        /// </summary>
        [PolicyResourceProperty("displayName", "_mUnknown_DisplayName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DisplayName;
        private bool _mUnknown_DisplayName;
        public string? DisplayName
        {
            get
            {
                if (!_mUnknown_DisplayName) return _mValue_DisplayName;
                throw new UndeferrableValueException("Value 'Fleet.DisplayName' is not present");
            }
        }

        /// <summary>
        /// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
        /// </summary>
        [PolicyResourceProperty("domainJoinInfo", "_mUnknown_DomainJoinInfo")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.FleetDomainJoinInfo? _mValue_DomainJoinInfo;
        private bool _mUnknown_DomainJoinInfo;
        public Outputs.FleetDomainJoinInfo? DomainJoinInfo
        {
            get
            {
                if (!_mUnknown_DomainJoinInfo) return _mValue_DomainJoinInfo;
                throw new UndeferrableValueException("Value 'Fleet.DomainJoinInfo' is not present");
            }
        }

        /// <summary>
        /// Enables or disables default internet access for the fleet.
        /// </summary>
        [PolicyResourceProperty("enableDefaultInternetAccess", "_mUnknown_EnableDefaultInternetAccess")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableDefaultInternetAccess;
        private bool _mUnknown_EnableDefaultInternetAccess;
        public bool? EnableDefaultInternetAccess
        {
            get
            {
                if (!_mUnknown_EnableDefaultInternetAccess) return _mValue_EnableDefaultInternetAccess;
                throw new UndeferrableValueException("Value 'Fleet.EnableDefaultInternetAccess' is not present");
            }
        }

        /// <summary>
        /// Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
        /// </summary>
        [PolicyResourceProperty("fleetType", "_mUnknown_FleetType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FleetType;
        private bool _mUnknown_FleetType;
        public string? FleetType
        {
            get
            {
                if (!_mUnknown_FleetType) return _mValue_FleetType;
                throw new UndeferrableValueException("Value 'Fleet.FleetType' is not present");
            }
        }

        /// <summary>
        /// ARN of the IAM role to apply to the fleet.
        /// </summary>
        [PolicyResourceProperty("iamRoleArn", "_mUnknown_IamRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IamRoleArn;
        private bool _mUnknown_IamRoleArn;
        public string? IamRoleArn
        {
            get
            {
                if (!_mUnknown_IamRoleArn) return _mValue_IamRoleArn;
                throw new UndeferrableValueException("Value 'Fleet.IamRoleArn' is not present");
            }
        }

        /// <summary>
        /// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnect_timeout_in_seconds` time interval begins. Defaults to `0`. Valid value is between `60` and `3600 `seconds.
        /// </summary>
        [PolicyResourceProperty("idleDisconnectTimeoutInSeconds", "_mUnknown_IdleDisconnectTimeoutInSeconds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_IdleDisconnectTimeoutInSeconds;
        private bool _mUnknown_IdleDisconnectTimeoutInSeconds;
        public int? IdleDisconnectTimeoutInSeconds
        {
            get
            {
                if (!_mUnknown_IdleDisconnectTimeoutInSeconds) return _mValue_IdleDisconnectTimeoutInSeconds;
                throw new UndeferrableValueException("Value 'Fleet.IdleDisconnectTimeoutInSeconds' is not present");
            }
        }

        /// <summary>
        /// ARN of the public, private, or shared image to use.
        /// </summary>
        [PolicyResourceProperty("imageArn", "_mUnknown_ImageArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ImageArn;
        private bool _mUnknown_ImageArn;
        public string? ImageArn
        {
            get
            {
                if (!_mUnknown_ImageArn) return _mValue_ImageArn;
                throw new UndeferrableValueException("Value 'Fleet.ImageArn' is not present");
            }
        }

        /// <summary>
        /// Name of the image used to create the fleet.
        /// </summary>
        [PolicyResourceProperty("imageName", "_mUnknown_ImageName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ImageName;
        private bool _mUnknown_ImageName;
        public string? ImageName
        {
            get
            {
                if (!_mUnknown_ImageName) return _mValue_ImageName;
                throw new UndeferrableValueException("Value 'Fleet.ImageName' is not present");
            }
        }

        /// <summary>
        /// Instance type to use when launching fleet instances.
        /// </summary>
        [PolicyResourceProperty("instanceType", "_mUnknown_InstanceType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceType;
        private bool _mUnknown_InstanceType;
        public string? InstanceType
        {
            get
            {
                if (!_mUnknown_InstanceType) return _mValue_InstanceType;
                throw new UndeferrableValueException("Value 'Fleet.InstanceType' is not present");
            }
        }

        /// <summary>
        /// The maximum number of user sessions on an instance. This only applies to multi-session fleets.
        /// </summary>
        [PolicyResourceProperty("maxSessionsPerInstance", "_mUnknown_MaxSessionsPerInstance")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxSessionsPerInstance;
        private bool _mUnknown_MaxSessionsPerInstance;
        public int? MaxSessionsPerInstance
        {
            get
            {
                if (!_mUnknown_MaxSessionsPerInstance) return _mValue_MaxSessionsPerInstance;
                throw new UndeferrableValueException("Value 'Fleet.MaxSessionsPerInstance' is not present");
            }
        }

        /// <summary>
        /// Maximum amount of time that a streaming session can remain active, in seconds.
        /// </summary>
        [PolicyResourceProperty("maxUserDurationInSeconds", "_mUnknown_MaxUserDurationInSeconds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxUserDurationInSeconds;
        private bool _mUnknown_MaxUserDurationInSeconds;
        public int? MaxUserDurationInSeconds
        {
            get
            {
                if (!_mUnknown_MaxUserDurationInSeconds) return _mValue_MaxUserDurationInSeconds;
                throw new UndeferrableValueException("Value 'Fleet.MaxUserDurationInSeconds' is not present");
            }
        }

        /// <summary>
        /// Unique name for the fleet.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Fleet.Name' is not present");
            }
        }

        /// <summary>
        /// State of the fleet. Can be `STARTING`, `RUNNING`, `STOPPING` or `STOPPED`
        /// </summary>
        [PolicyResourceProperty("state", "_mUnknown_State")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_State;
        private bool _mUnknown_State;
        public string? State
        {
            get
            {
                if (!_mUnknown_State) return _mValue_State;
                throw new UndeferrableValueException("Value 'Fleet.State' is not present");
            }
        }

        /// <summary>
        /// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
        /// </summary>
        [PolicyResourceProperty("streamView", "_mUnknown_StreamView")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StreamView;
        private bool _mUnknown_StreamView;
        public string? StreamView
        {
            get
            {
                if (!_mUnknown_StreamView) return _mValue_StreamView;
                throw new UndeferrableValueException("Value 'Fleet.StreamView' is not present");
            }
        }

        /// <summary>
        /// Map of tags to attach to AppStream instances.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Fleet.Tags' is not present");
            }
        }

        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Fleet.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Configuration block for the VPC configuration for the image builder. See below.
        /// </summary>
        [PolicyResourceProperty("vpcConfig", "_mUnknown_VpcConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.FleetVpcConfig? _mValue_VpcConfig;
        private bool _mUnknown_VpcConfig;
        public Outputs.FleetVpcConfig? VpcConfig
        {
            get
            {
                if (!_mUnknown_VpcConfig) return _mValue_VpcConfig;
                throw new UndeferrableValueException("Value 'Fleet.VpcConfig' is not present");
            }
        }
    }

    [PolicyResourceType("aws:appstream/fleet:Fleet")]
    public sealed class FleetArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Configuration block for the desired capacity of the fleet. See below.
        /// </summary>
        [PolicyResourceProperty("computeCapacity", "_mUnknown_ComputeCapacity")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.FleetComputeCapacityArgs? _mValue_ComputeCapacity;
        private bool _mUnknown_ComputeCapacity;
        public Inputs.FleetComputeCapacityArgs? ComputeCapacity
        {
            get
            {
                if (!_mUnknown_ComputeCapacity) return _mValue_ComputeCapacity;
                throw new UndeferrableValueException("Value 'FleetArgs.ComputeCapacity' is not present");
            }
        }

        /// <summary>
        /// Description to display.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'FleetArgs.Description' is not present");
            }
        }

        /// <summary>
        /// Amount of time that a streaming session remains active after users disconnect.
        /// </summary>
        [PolicyResourceProperty("disconnectTimeoutInSeconds", "_mUnknown_DisconnectTimeoutInSeconds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_DisconnectTimeoutInSeconds;
        private bool _mUnknown_DisconnectTimeoutInSeconds;
        public int? DisconnectTimeoutInSeconds
        {
            get
            {
                if (!_mUnknown_DisconnectTimeoutInSeconds) return _mValue_DisconnectTimeoutInSeconds;
                throw new UndeferrableValueException("Value 'FleetArgs.DisconnectTimeoutInSeconds' is not present");
            }
        }

        /// <summary>
        /// Human-readable friendly name for the AppStream fleet.
        /// </summary>
        [PolicyResourceProperty("displayName", "_mUnknown_DisplayName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DisplayName;
        private bool _mUnknown_DisplayName;
        public string? DisplayName
        {
            get
            {
                if (!_mUnknown_DisplayName) return _mValue_DisplayName;
                throw new UndeferrableValueException("Value 'FleetArgs.DisplayName' is not present");
            }
        }

        /// <summary>
        /// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
        /// </summary>
        [PolicyResourceProperty("domainJoinInfo", "_mUnknown_DomainJoinInfo")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.FleetDomainJoinInfoArgs? _mValue_DomainJoinInfo;
        private bool _mUnknown_DomainJoinInfo;
        public Inputs.FleetDomainJoinInfoArgs? DomainJoinInfo
        {
            get
            {
                if (!_mUnknown_DomainJoinInfo) return _mValue_DomainJoinInfo;
                throw new UndeferrableValueException("Value 'FleetArgs.DomainJoinInfo' is not present");
            }
        }

        /// <summary>
        /// Enables or disables default internet access for the fleet.
        /// </summary>
        [PolicyResourceProperty("enableDefaultInternetAccess", "_mUnknown_EnableDefaultInternetAccess")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableDefaultInternetAccess;
        private bool _mUnknown_EnableDefaultInternetAccess;
        public bool? EnableDefaultInternetAccess
        {
            get
            {
                if (!_mUnknown_EnableDefaultInternetAccess) return _mValue_EnableDefaultInternetAccess;
                throw new UndeferrableValueException("Value 'FleetArgs.EnableDefaultInternetAccess' is not present");
            }
        }

        /// <summary>
        /// Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
        /// </summary>
        [PolicyResourceProperty("fleetType", "_mUnknown_FleetType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FleetType;
        private bool _mUnknown_FleetType;
        public string? FleetType
        {
            get
            {
                if (!_mUnknown_FleetType) return _mValue_FleetType;
                throw new UndeferrableValueException("Value 'FleetArgs.FleetType' is not present");
            }
        }

        /// <summary>
        /// ARN of the IAM role to apply to the fleet.
        /// </summary>
        [PolicyResourceProperty("iamRoleArn", "_mUnknown_IamRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IamRoleArn;
        private bool _mUnknown_IamRoleArn;
        public string? IamRoleArn
        {
            get
            {
                if (!_mUnknown_IamRoleArn) return _mValue_IamRoleArn;
                throw new UndeferrableValueException("Value 'FleetArgs.IamRoleArn' is not present");
            }
        }

        /// <summary>
        /// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnect_timeout_in_seconds` time interval begins. Defaults to `0`. Valid value is between `60` and `3600 `seconds.
        /// </summary>
        [PolicyResourceProperty("idleDisconnectTimeoutInSeconds", "_mUnknown_IdleDisconnectTimeoutInSeconds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_IdleDisconnectTimeoutInSeconds;
        private bool _mUnknown_IdleDisconnectTimeoutInSeconds;
        public int? IdleDisconnectTimeoutInSeconds
        {
            get
            {
                if (!_mUnknown_IdleDisconnectTimeoutInSeconds) return _mValue_IdleDisconnectTimeoutInSeconds;
                throw new UndeferrableValueException("Value 'FleetArgs.IdleDisconnectTimeoutInSeconds' is not present");
            }
        }

        /// <summary>
        /// ARN of the public, private, or shared image to use.
        /// </summary>
        [PolicyResourceProperty("imageArn", "_mUnknown_ImageArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ImageArn;
        private bool _mUnknown_ImageArn;
        public string? ImageArn
        {
            get
            {
                if (!_mUnknown_ImageArn) return _mValue_ImageArn;
                throw new UndeferrableValueException("Value 'FleetArgs.ImageArn' is not present");
            }
        }

        /// <summary>
        /// Name of the image used to create the fleet.
        /// </summary>
        [PolicyResourceProperty("imageName", "_mUnknown_ImageName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ImageName;
        private bool _mUnknown_ImageName;
        public string? ImageName
        {
            get
            {
                if (!_mUnknown_ImageName) return _mValue_ImageName;
                throw new UndeferrableValueException("Value 'FleetArgs.ImageName' is not present");
            }
        }

        /// <summary>
        /// Instance type to use when launching fleet instances.
        /// </summary>
        [PolicyResourceProperty("instanceType", "_mUnknown_InstanceType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceType;
        private bool _mUnknown_InstanceType;
        public string? InstanceType
        {
            get
            {
                if (!_mUnknown_InstanceType) return _mValue_InstanceType;
                throw new UndeferrableValueException("Value 'FleetArgs.InstanceType' is not present");
            }
        }

        /// <summary>
        /// The maximum number of user sessions on an instance. This only applies to multi-session fleets.
        /// </summary>
        [PolicyResourceProperty("maxSessionsPerInstance", "_mUnknown_MaxSessionsPerInstance")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxSessionsPerInstance;
        private bool _mUnknown_MaxSessionsPerInstance;
        public int? MaxSessionsPerInstance
        {
            get
            {
                if (!_mUnknown_MaxSessionsPerInstance) return _mValue_MaxSessionsPerInstance;
                throw new UndeferrableValueException("Value 'FleetArgs.MaxSessionsPerInstance' is not present");
            }
        }

        /// <summary>
        /// Maximum amount of time that a streaming session can remain active, in seconds.
        /// </summary>
        [PolicyResourceProperty("maxUserDurationInSeconds", "_mUnknown_MaxUserDurationInSeconds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxUserDurationInSeconds;
        private bool _mUnknown_MaxUserDurationInSeconds;
        public int? MaxUserDurationInSeconds
        {
            get
            {
                if (!_mUnknown_MaxUserDurationInSeconds) return _mValue_MaxUserDurationInSeconds;
                throw new UndeferrableValueException("Value 'FleetArgs.MaxUserDurationInSeconds' is not present");
            }
        }

        /// <summary>
        /// Unique name for the fleet.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'FleetArgs.Name' is not present");
            }
        }

        /// <summary>
        /// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
        /// </summary>
        [PolicyResourceProperty("streamView", "_mUnknown_StreamView")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StreamView;
        private bool _mUnknown_StreamView;
        public string? StreamView
        {
            get
            {
                if (!_mUnknown_StreamView) return _mValue_StreamView;
                throw new UndeferrableValueException("Value 'FleetArgs.StreamView' is not present");
            }
        }

        /// <summary>
        /// Map of tags to attach to AppStream instances.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'FleetArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Configuration block for the VPC configuration for the image builder. See below.
        /// </summary>
        [PolicyResourceProperty("vpcConfig", "_mUnknown_VpcConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.FleetVpcConfigArgs? _mValue_VpcConfig;
        private bool _mUnknown_VpcConfig;
        public Inputs.FleetVpcConfigArgs? VpcConfig
        {
            get
            {
                if (!_mUnknown_VpcConfig) return _mValue_VpcConfig;
                throw new UndeferrableValueException("Value 'FleetArgs.VpcConfig' is not present");
            }
        }
    }
}
