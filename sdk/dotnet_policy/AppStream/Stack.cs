// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.AppStream
{
    [PolicyResourceType("aws:appstream/stack:Stack")]
    public sealed class Stack : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
        /// See `access_endpoints` below.
        /// </summary>
        [PolicyResourceProperty("accessEndpoints", "_mUnknown_AccessEndpoints")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.StackAccessEndpoint>? _mValue_AccessEndpoints;
        private bool _mUnknown_AccessEndpoints;
        public List<Outputs.StackAccessEndpoint>? AccessEndpoints
        {
            get
            {
                if (!_mUnknown_AccessEndpoints) return _mValue_AccessEndpoints;
                throw new UndeferrableValueException("Value 'Stack.AccessEndpoints' is not present");
            }
        }

        /// <summary>
        /// Settings for application settings persistence.
        /// See `application_settings` below.
        /// </summary>
        [PolicyResourceProperty("applicationSettings", "_mUnknown_ApplicationSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.StackApplicationSettings? _mValue_ApplicationSettings;
        private bool _mUnknown_ApplicationSettings;
        public Outputs.StackApplicationSettings? ApplicationSettings
        {
            get
            {
                if (!_mUnknown_ApplicationSettings) return _mValue_ApplicationSettings;
                throw new UndeferrableValueException("Value 'Stack.ApplicationSettings' is not present");
            }
        }

        /// <summary>
        /// ARN of the appstream stack.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Stack.Arn' is not present");
            }
        }

        /// <summary>
        /// Date and time, in UTC and extended RFC 3339 format, when the stack was created.
        /// </summary>
        [PolicyResourceProperty("createdTime", "_mUnknown_CreatedTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CreatedTime;
        private bool _mUnknown_CreatedTime;
        public string? CreatedTime
        {
            get
            {
                if (!_mUnknown_CreatedTime) return _mValue_CreatedTime;
                throw new UndeferrableValueException("Value 'Stack.CreatedTime' is not present");
            }
        }

        /// <summary>
        /// Description for the AppStream stack.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'Stack.Description' is not present");
            }
        }

        /// <summary>
        /// Stack name to display.
        /// </summary>
        [PolicyResourceProperty("displayName", "_mUnknown_DisplayName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DisplayName;
        private bool _mUnknown_DisplayName;
        public string? DisplayName
        {
            get
            {
                if (!_mUnknown_DisplayName) return _mValue_DisplayName;
                throw new UndeferrableValueException("Value 'Stack.DisplayName' is not present");
            }
        }

        /// <summary>
        /// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
        /// </summary>
        [PolicyResourceProperty("embedHostDomains", "_mUnknown_EmbedHostDomains")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_EmbedHostDomains;
        private bool _mUnknown_EmbedHostDomains;
        public List<string>? EmbedHostDomains
        {
            get
            {
                if (!_mUnknown_EmbedHostDomains) return _mValue_EmbedHostDomains;
                throw new UndeferrableValueException("Value 'Stack.EmbedHostDomains' is not present");
            }
        }

        /// <summary>
        /// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
        /// </summary>
        [PolicyResourceProperty("feedbackUrl", "_mUnknown_FeedbackUrl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FeedbackUrl;
        private bool _mUnknown_FeedbackUrl;
        public string? FeedbackUrl
        {
            get
            {
                if (!_mUnknown_FeedbackUrl) return _mValue_FeedbackUrl;
                throw new UndeferrableValueException("Value 'Stack.FeedbackUrl' is not present");
            }
        }

        /// <summary>
        /// Unique name for the AppStream stack.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Stack.Name' is not present");
            }
        }

        /// <summary>
        /// URL that users are redirected to after their streaming session ends.
        /// </summary>
        [PolicyResourceProperty("redirectUrl", "_mUnknown_RedirectUrl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RedirectUrl;
        private bool _mUnknown_RedirectUrl;
        public string? RedirectUrl
        {
            get
            {
                if (!_mUnknown_RedirectUrl) return _mValue_RedirectUrl;
                throw new UndeferrableValueException("Value 'Stack.RedirectUrl' is not present");
            }
        }

        /// <summary>
        /// Configuration block for the storage connectors to enable.
        /// See `storage_connectors` below.
        /// </summary>
        [PolicyResourceProperty("storageConnectors", "_mUnknown_StorageConnectors")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.StackStorageConnector>? _mValue_StorageConnectors;
        private bool _mUnknown_StorageConnectors;
        public List<Outputs.StackStorageConnector>? StorageConnectors
        {
            get
            {
                if (!_mUnknown_StorageConnectors) return _mValue_StorageConnectors;
                throw new UndeferrableValueException("Value 'Stack.StorageConnectors' is not present");
            }
        }

        /// <summary>
        /// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
        /// See `streaming_experience_settings` below.
        /// </summary>
        [PolicyResourceProperty("streamingExperienceSettings", "_mUnknown_StreamingExperienceSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.StackStreamingExperienceSettings? _mValue_StreamingExperienceSettings;
        private bool _mUnknown_StreamingExperienceSettings;
        public Outputs.StackStreamingExperienceSettings? StreamingExperienceSettings
        {
            get
            {
                if (!_mUnknown_StreamingExperienceSettings) return _mValue_StreamingExperienceSettings;
                throw new UndeferrableValueException("Value 'Stack.StreamingExperienceSettings' is not present");
            }
        }

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Stack.Tags' is not present");
            }
        }

        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Stack.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS. If provided, the configuration should include a block for each configurable action.
        /// See `user_settings` below.
        /// </summary>
        [PolicyResourceProperty("userSettings", "_mUnknown_UserSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.StackUserSetting>? _mValue_UserSettings;
        private bool _mUnknown_UserSettings;
        public List<Outputs.StackUserSetting>? UserSettings
        {
            get
            {
                if (!_mUnknown_UserSettings) return _mValue_UserSettings;
                throw new UndeferrableValueException("Value 'Stack.UserSettings' is not present");
            }
        }
    }

    [PolicyResourceType("aws:appstream/stack:Stack")]
    public sealed class StackArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
        /// See `access_endpoints` below.
        /// </summary>
        [PolicyResourceProperty("accessEndpoints", "_mUnknown_AccessEndpoints")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.StackAccessEndpointArgs>? _mValue_AccessEndpoints;
        private bool _mUnknown_AccessEndpoints;
        public List<Inputs.StackAccessEndpointArgs>? AccessEndpoints
        {
            get
            {
                if (!_mUnknown_AccessEndpoints) return _mValue_AccessEndpoints;
                throw new UndeferrableValueException("Value 'StackArgs.AccessEndpoints' is not present");
            }
        }

        /// <summary>
        /// Settings for application settings persistence.
        /// See `application_settings` below.
        /// </summary>
        [PolicyResourceProperty("applicationSettings", "_mUnknown_ApplicationSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.StackApplicationSettingsArgs? _mValue_ApplicationSettings;
        private bool _mUnknown_ApplicationSettings;
        public Inputs.StackApplicationSettingsArgs? ApplicationSettings
        {
            get
            {
                if (!_mUnknown_ApplicationSettings) return _mValue_ApplicationSettings;
                throw new UndeferrableValueException("Value 'StackArgs.ApplicationSettings' is not present");
            }
        }

        /// <summary>
        /// Description for the AppStream stack.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'StackArgs.Description' is not present");
            }
        }

        /// <summary>
        /// Stack name to display.
        /// </summary>
        [PolicyResourceProperty("displayName", "_mUnknown_DisplayName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DisplayName;
        private bool _mUnknown_DisplayName;
        public string? DisplayName
        {
            get
            {
                if (!_mUnknown_DisplayName) return _mValue_DisplayName;
                throw new UndeferrableValueException("Value 'StackArgs.DisplayName' is not present");
            }
        }

        /// <summary>
        /// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
        /// </summary>
        [PolicyResourceProperty("embedHostDomains", "_mUnknown_EmbedHostDomains")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_EmbedHostDomains;
        private bool _mUnknown_EmbedHostDomains;
        public List<string>? EmbedHostDomains
        {
            get
            {
                if (!_mUnknown_EmbedHostDomains) return _mValue_EmbedHostDomains;
                throw new UndeferrableValueException("Value 'StackArgs.EmbedHostDomains' is not present");
            }
        }

        /// <summary>
        /// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
        /// </summary>
        [PolicyResourceProperty("feedbackUrl", "_mUnknown_FeedbackUrl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_FeedbackUrl;
        private bool _mUnknown_FeedbackUrl;
        public string? FeedbackUrl
        {
            get
            {
                if (!_mUnknown_FeedbackUrl) return _mValue_FeedbackUrl;
                throw new UndeferrableValueException("Value 'StackArgs.FeedbackUrl' is not present");
            }
        }

        /// <summary>
        /// Unique name for the AppStream stack.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'StackArgs.Name' is not present");
            }
        }

        /// <summary>
        /// URL that users are redirected to after their streaming session ends.
        /// </summary>
        [PolicyResourceProperty("redirectUrl", "_mUnknown_RedirectUrl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RedirectUrl;
        private bool _mUnknown_RedirectUrl;
        public string? RedirectUrl
        {
            get
            {
                if (!_mUnknown_RedirectUrl) return _mValue_RedirectUrl;
                throw new UndeferrableValueException("Value 'StackArgs.RedirectUrl' is not present");
            }
        }

        /// <summary>
        /// Configuration block for the storage connectors to enable.
        /// See `storage_connectors` below.
        /// </summary>
        [PolicyResourceProperty("storageConnectors", "_mUnknown_StorageConnectors")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.StackStorageConnectorArgs>? _mValue_StorageConnectors;
        private bool _mUnknown_StorageConnectors;
        public List<Inputs.StackStorageConnectorArgs>? StorageConnectors
        {
            get
            {
                if (!_mUnknown_StorageConnectors) return _mValue_StorageConnectors;
                throw new UndeferrableValueException("Value 'StackArgs.StorageConnectors' is not present");
            }
        }

        /// <summary>
        /// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
        /// See `streaming_experience_settings` below.
        /// </summary>
        [PolicyResourceProperty("streamingExperienceSettings", "_mUnknown_StreamingExperienceSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.StackStreamingExperienceSettingsArgs? _mValue_StreamingExperienceSettings;
        private bool _mUnknown_StreamingExperienceSettings;
        public Inputs.StackStreamingExperienceSettingsArgs? StreamingExperienceSettings
        {
            get
            {
                if (!_mUnknown_StreamingExperienceSettings) return _mValue_StreamingExperienceSettings;
                throw new UndeferrableValueException("Value 'StackArgs.StreamingExperienceSettings' is not present");
            }
        }

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'StackArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS. If provided, the configuration should include a block for each configurable action.
        /// See `user_settings` below.
        /// </summary>
        [PolicyResourceProperty("userSettings", "_mUnknown_UserSettings")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.StackUserSettingArgs>? _mValue_UserSettings;
        private bool _mUnknown_UserSettings;
        public List<Inputs.StackUserSettingArgs>? UserSettings
        {
            get
            {
                if (!_mUnknown_UserSettings) return _mValue_UserSettings;
                throw new UndeferrableValueException("Value 'StackArgs.UserSettings' is not present");
            }
        }
    }
}
