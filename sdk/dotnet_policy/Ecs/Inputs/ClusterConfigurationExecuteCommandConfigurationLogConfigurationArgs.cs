// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ecs.Inputs
{
    public sealed class ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs
    {
        /// <summary>
        /// Whether to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
        /// </summary>
        [PolicyResourceProperty("cloudWatchEncryptionEnabled", "_mUnknown_CloudWatchEncryptionEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_CloudWatchEncryptionEnabled;
        private bool _mUnknown_CloudWatchEncryptionEnabled;
        public bool? CloudWatchEncryptionEnabled
        {
            get
            {
                if (!_mUnknown_CloudWatchEncryptionEnabled) return _mValue_CloudWatchEncryptionEnabled;
                throw new UndeferrableValueException("Value 'ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs.CloudWatchEncryptionEnabled' is not present");
            }
        }

        /// <summary>
        /// The name of the CloudWatch log group to send logs to.
        /// </summary>
        [PolicyResourceProperty("cloudWatchLogGroupName", "_mUnknown_CloudWatchLogGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CloudWatchLogGroupName;
        private bool _mUnknown_CloudWatchLogGroupName;
        public string? CloudWatchLogGroupName
        {
            get
            {
                if (!_mUnknown_CloudWatchLogGroupName) return _mValue_CloudWatchLogGroupName;
                throw new UndeferrableValueException("Value 'ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs.CloudWatchLogGroupName' is not present");
            }
        }

        /// <summary>
        /// Whether to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
        /// </summary>
        [PolicyResourceProperty("s3BucketEncryptionEnabled", "_mUnknown_S3BucketEncryptionEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_S3BucketEncryptionEnabled;
        private bool _mUnknown_S3BucketEncryptionEnabled;
        public bool? S3BucketEncryptionEnabled
        {
            get
            {
                if (!_mUnknown_S3BucketEncryptionEnabled) return _mValue_S3BucketEncryptionEnabled;
                throw new UndeferrableValueException("Value 'ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs.S3BucketEncryptionEnabled' is not present");
            }
        }

        /// <summary>
        /// Name of the S3 bucket to send logs to.
        /// </summary>
        [PolicyResourceProperty("s3BucketName", "_mUnknown_S3BucketName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_S3BucketName;
        private bool _mUnknown_S3BucketName;
        public string? S3BucketName
        {
            get
            {
                if (!_mUnknown_S3BucketName) return _mValue_S3BucketName;
                throw new UndeferrableValueException("Value 'ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs.S3BucketName' is not present");
            }
        }

        /// <summary>
        /// Optional folder in the S3 bucket to place logs in.
        /// </summary>
        [PolicyResourceProperty("s3KeyPrefix", "_mUnknown_S3KeyPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_S3KeyPrefix;
        private bool _mUnknown_S3KeyPrefix;
        public string? S3KeyPrefix
        {
            get
            {
                if (!_mUnknown_S3KeyPrefix) return _mValue_S3KeyPrefix;
                throw new UndeferrableValueException("Value 'ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs.S3KeyPrefix' is not present");
            }
        }
    }
}
