// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ecs.Inputs
{
    public sealed class TaskDefinitionVolumeArgs
    {
        /// <summary>
        /// Whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
        /// </summary>
        [PolicyResourceProperty("configureAtLaunch", "_mUnknown_ConfigureAtLaunch")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ConfigureAtLaunch;
        private bool _mUnknown_ConfigureAtLaunch;
        public bool? ConfigureAtLaunch
        {
            get
            {
                if (!_mUnknown_ConfigureAtLaunch) return _mValue_ConfigureAtLaunch;
                throw new UndeferrableValueException("Value 'TaskDefinitionVolumeArgs.ConfigureAtLaunch' is not present");
            }
        }

        /// <summary>
        /// Configuration block to configure a docker volume. Detailed below.
        /// </summary>
        [PolicyResourceProperty("dockerVolumeConfiguration", "_mUnknown_DockerVolumeConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.TaskDefinitionVolumeDockerVolumeConfigurationArgs? _mValue_DockerVolumeConfiguration;
        private bool _mUnknown_DockerVolumeConfiguration;
        public Inputs.TaskDefinitionVolumeDockerVolumeConfigurationArgs? DockerVolumeConfiguration
        {
            get
            {
                if (!_mUnknown_DockerVolumeConfiguration) return _mValue_DockerVolumeConfiguration;
                throw new UndeferrableValueException("Value 'TaskDefinitionVolumeArgs.DockerVolumeConfiguration' is not present");
            }
        }

        /// <summary>
        /// Configuration block for an EFS volume. Detailed below.
        /// </summary>
        [PolicyResourceProperty("efsVolumeConfiguration", "_mUnknown_EfsVolumeConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.TaskDefinitionVolumeEfsVolumeConfigurationArgs? _mValue_EfsVolumeConfiguration;
        private bool _mUnknown_EfsVolumeConfiguration;
        public Inputs.TaskDefinitionVolumeEfsVolumeConfigurationArgs? EfsVolumeConfiguration
        {
            get
            {
                if (!_mUnknown_EfsVolumeConfiguration) return _mValue_EfsVolumeConfiguration;
                throw new UndeferrableValueException("Value 'TaskDefinitionVolumeArgs.EfsVolumeConfiguration' is not present");
            }
        }

        /// <summary>
        /// Configuration block for an FSX Windows File Server volume. Detailed below.
        /// </summary>
        [PolicyResourceProperty("fsxWindowsFileServerVolumeConfiguration", "_mUnknown_FsxWindowsFileServerVolumeConfiguration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs? _mValue_FsxWindowsFileServerVolumeConfiguration;
        private bool _mUnknown_FsxWindowsFileServerVolumeConfiguration;
        public Inputs.TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs? FsxWindowsFileServerVolumeConfiguration
        {
            get
            {
                if (!_mUnknown_FsxWindowsFileServerVolumeConfiguration) return _mValue_FsxWindowsFileServerVolumeConfiguration;
                throw new UndeferrableValueException("Value 'TaskDefinitionVolumeArgs.FsxWindowsFileServerVolumeConfiguration' is not present");
            }
        }

        /// <summary>
        /// Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
        /// </summary>
        [PolicyResourceProperty("hostPath", "_mUnknown_HostPath")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HostPath;
        private bool _mUnknown_HostPath;
        public string? HostPath
        {
            get
            {
                if (!_mUnknown_HostPath) return _mValue_HostPath;
                throw new UndeferrableValueException("Value 'TaskDefinitionVolumeArgs.HostPath' is not present");
            }
        }

        /// <summary>
        /// Name of the volume. This name is referenced in the `sourceVolume`
        /// parameter of container definition in the `mountPoints` section.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'TaskDefinitionVolumeArgs.Name' is not present");
            }
        }
    }
}
