// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Ecs
{
    [PolicyResourceType("aws:ecs/taskDefinition:TaskDefinition")]
    public sealed class TaskDefinition : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Full ARN of the Task Definition (including both `family` and `revision`).
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// ARN of the Task Definition with the trailing `revision` removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the [AWS documentation](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_StartTask.html#ECS-StartTask-request-taskDefinition) for details.
        /// </summary>
        [Input("arnWithoutRevision")]
        public string? ArnWithoutRevision;

        /// <summary>
        /// A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
        /// </summary>
        [Input("containerDefinitions")]
        public string? ContainerDefinitions;

        /// <summary>
        /// Number of cpu units used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
        /// </summary>
        [Input("cpu")]
        public string? Cpu;

        /// <summary>
        /// Enables fault injection and allows for fault injection requests to be accepted from the task's containers. Default is `false`.
        /// 
        /// **Note:** Fault injection only works with tasks using the `awsvpc` or `host` network modes. Fault injection isn't available on Windows.
        /// </summary>
        [Input("enableFaultInjection")]
        public bool? EnableFaultInjection;

        /// <summary>
        /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
        /// </summary>
        [Input("ephemeralStorage")]
        public TaskDefinitionEphemeralStorage? EphemeralStorage;

        /// <summary>
        /// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
        /// </summary>
        [Input("executionRoleArn")]
        public string? ExecutionRoleArn;

        /// <summary>
        /// A unique name for your task definition.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("family")]
        public string? Family;

        /// <summary>
        /// Configuration block(s) with Inference Accelerators settings. Detailed below.
        /// </summary>
        [Input("inferenceAccelerators")]
        public List<TaskDefinitionInferenceAccelerator>? InferenceAccelerators;

        /// <summary>
        /// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
        /// </summary>
        [Input("ipcMode")]
        public string? IpcMode;

        /// <summary>
        /// Amount (in MiB) of memory used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
        /// </summary>
        [Input("memory")]
        public string? Memory;

        /// <summary>
        /// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
        /// </summary>
        [Input("networkMode")]
        public string? NetworkMode;

        /// <summary>
        /// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
        /// </summary>
        [Input("pidMode")]
        public string? PidMode;

        /// <summary>
        /// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
        /// </summary>
        [Input("placementConstraints")]
        public List<TaskDefinitionPlacementConstraint>? PlacementConstraints;

        /// <summary>
        /// Configuration block for the App Mesh proxy. Detailed below.
        /// </summary>
        [Input("proxyConfiguration")]
        public TaskDefinitionProxyConfiguration? ProxyConfiguration;

        /// <summary>
        /// Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
        /// </summary>
        [Input("requiresCompatibilities")]
        public List<string>? RequiresCompatibilities;

        /// <summary>
        /// Revision of the task in a particular family.
        /// </summary>
        [Input("revision")]
        public int? Revision;

        /// <summary>
        /// Configuration block for runtime_platform that containers in your task may use.
        /// </summary>
        [Input("runtimePlatform")]
        public TaskDefinitionRuntimePlatform? RuntimePlatform;

        /// <summary>
        /// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
        /// </summary>
        [Input("skipDestroy")]
        public bool? SkipDestroy;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
        /// </summary>
        [Input("taskRoleArn")]
        public string? TaskRoleArn;

        /// <summary>
        /// Whether should track latest `ACTIVE` task definition on AWS or the one created with the resource stored in state. Default is `false`. Useful in the event the task definition is modified outside of this resource.
        /// </summary>
        [Input("trackLatest")]
        public bool? TrackLatest;

        /// <summary>
        /// Configuration block for volumes that containers in your task may use. Detailed below.
        /// </summary>
        [Input("volumes")]
        public List<TaskDefinitionVolume>? Volumes;
    }
}
