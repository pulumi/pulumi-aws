// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.AppConfig
{
    [PolicyResourceType("aws:appconfig/environment:Environment")]
    public sealed class Environment : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// AppConfig application ID. Must be between 4 and 7 characters in length.
        /// </summary>
        [Input("applicationId")]
        public string? ApplicationId;

        /// <summary>
        /// ARN of the AppConfig Environment.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Description of the environment. Can be at most 1024 characters.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// AppConfig environment ID.
        /// </summary>
        [Input("environmentId")]
        public string? EnvironmentId;

        /// <summary>
        /// Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See Monitor below for more details.
        /// </summary>
        [Input("monitors")]
        public List<EnvironmentMonitor>? Monitors;

        /// <summary>
        /// Name for the environment. Must be between 1 and 64 characters in length.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// State of the environment. Possible values are `READY_FOR_DEPLOYMENT`, `DEPLOYING`, `ROLLING_BACK`
        /// or `ROLLED_BACK`.
        /// </summary>
        [Input("state")]
        public string? State;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
