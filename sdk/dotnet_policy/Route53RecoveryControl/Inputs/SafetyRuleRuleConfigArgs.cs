// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Route53RecoveryControl.Inputs
{
    public sealed class SafetyRuleRuleConfigArgs
    {
        /// <summary>
        /// Logical negation of the rule.
        /// </summary>
        [PolicyResourceProperty("inverted", "_mUnknown_Inverted")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Inverted;
        private bool _mUnknown_Inverted;
        public bool? Inverted
        {
            get
            {
                if (!_mUnknown_Inverted) return _mValue_Inverted;
                throw new UndeferrableValueException("Value 'SafetyRuleRuleConfigArgs.Inverted' is not present");
            }
        }

        /// <summary>
        /// Number of controls that must be set when you specify an `ATLEAST` type rule.
        /// </summary>
        [PolicyResourceProperty("threshold", "_mUnknown_Threshold")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Threshold;
        private bool _mUnknown_Threshold;
        public int? Threshold
        {
            get
            {
                if (!_mUnknown_Threshold) return _mValue_Threshold;
                throw new UndeferrableValueException("Value 'SafetyRuleRuleConfigArgs.Threshold' is not present");
            }
        }

        /// <summary>
        /// Rule type. Valid values are `ATLEAST`, `AND`, and `OR`.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'SafetyRuleRuleConfigArgs.Type' is not present");
            }
        }
    }
}
