// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudTrail.Inputs
{
    public sealed class TrailAdvancedEventSelectorFieldSelectorArgs
    {
        /// <summary>
        /// A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
        /// </summary>
        [PolicyResourceProperty("endsWiths", "_mUnknown_EndsWiths")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_EndsWiths;
        private bool _mUnknown_EndsWiths;
        public List<string>? EndsWiths
        {
            get
            {
                if (!_mUnknown_EndsWiths) return _mValue_EndsWiths;
                throw new UndeferrableValueException("Value 'TrailAdvancedEventSelectorFieldSelectorArgs.EndsWiths' is not present");
            }
        }

        /// <summary>
        /// A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
        /// </summary>
        [PolicyResourceProperty("equals", "_mUnknown_Equals")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Equals;
        private bool _mUnknown_Equals;
        public List<string>? Equals
        {
            get
            {
                if (!_mUnknown_Equals) return _mValue_Equals;
                throw new UndeferrableValueException("Value 'TrailAdvancedEventSelectorFieldSelectorArgs.Equals' is not present");
            }
        }

        /// <summary>
        /// Field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
        /// </summary>
        [PolicyResourceProperty("field", "_mUnknown_Field")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Field;
        private bool _mUnknown_Field;
        public string? Field
        {
            get
            {
                if (!_mUnknown_Field) return _mValue_Field;
                throw new UndeferrableValueException("Value 'TrailAdvancedEventSelectorFieldSelectorArgs.Field' is not present");
            }
        }

        /// <summary>
        /// A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
        /// </summary>
        [PolicyResourceProperty("notEndsWiths", "_mUnknown_NotEndsWiths")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_NotEndsWiths;
        private bool _mUnknown_NotEndsWiths;
        public List<string>? NotEndsWiths
        {
            get
            {
                if (!_mUnknown_NotEndsWiths) return _mValue_NotEndsWiths;
                throw new UndeferrableValueException("Value 'TrailAdvancedEventSelectorFieldSelectorArgs.NotEndsWiths' is not present");
            }
        }

        /// <summary>
        /// A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
        /// </summary>
        [PolicyResourceProperty("notEquals", "_mUnknown_NotEquals")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_NotEquals;
        private bool _mUnknown_NotEquals;
        public List<string>? NotEquals
        {
            get
            {
                if (!_mUnknown_NotEquals) return _mValue_NotEquals;
                throw new UndeferrableValueException("Value 'TrailAdvancedEventSelectorFieldSelectorArgs.NotEquals' is not present");
            }
        }

        /// <summary>
        /// A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
        /// </summary>
        [PolicyResourceProperty("notStartsWiths", "_mUnknown_NotStartsWiths")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_NotStartsWiths;
        private bool _mUnknown_NotStartsWiths;
        public List<string>? NotStartsWiths
        {
            get
            {
                if (!_mUnknown_NotStartsWiths) return _mValue_NotStartsWiths;
                throw new UndeferrableValueException("Value 'TrailAdvancedEventSelectorFieldSelectorArgs.NotStartsWiths' is not present");
            }
        }

        /// <summary>
        /// A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
        /// </summary>
        [PolicyResourceProperty("startsWiths", "_mUnknown_StartsWiths")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_StartsWiths;
        private bool _mUnknown_StartsWiths;
        public List<string>? StartsWiths
        {
            get
            {
                if (!_mUnknown_StartsWiths) return _mValue_StartsWiths;
                throw new UndeferrableValueException("Value 'TrailAdvancedEventSelectorFieldSelectorArgs.StartsWiths' is not present");
            }
        }
    }
}
