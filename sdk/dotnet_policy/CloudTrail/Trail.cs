// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudTrail
{
    [PolicyResourceType("aws:cloudtrail/trail:Trail")]
    public sealed class Trail : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `event_selector`.
        /// </summary>
        [PolicyResourceProperty("advancedEventSelectors", "_mUnknown_AdvancedEventSelectors")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.TrailAdvancedEventSelector>? _mValue_AdvancedEventSelectors;
        private bool _mUnknown_AdvancedEventSelectors;
        public List<Outputs.TrailAdvancedEventSelector>? AdvancedEventSelectors
        {
            get
            {
                if (!_mUnknown_AdvancedEventSelectors) return _mValue_AdvancedEventSelectors;
                throw new UndeferrableValueException("Value 'Trail.AdvancedEventSelectors' is not present");
            }
        }

        /// <summary>
        /// ARN of the trail.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'Trail.Arn' is not present");
            }
        }

        /// <summary>
        /// Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
        /// </summary>
        [PolicyResourceProperty("cloudWatchLogsGroupArn", "_mUnknown_CloudWatchLogsGroupArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CloudWatchLogsGroupArn;
        private bool _mUnknown_CloudWatchLogsGroupArn;
        public string? CloudWatchLogsGroupArn
        {
            get
            {
                if (!_mUnknown_CloudWatchLogsGroupArn) return _mValue_CloudWatchLogsGroupArn;
                throw new UndeferrableValueException("Value 'Trail.CloudWatchLogsGroupArn' is not present");
            }
        }

        /// <summary>
        /// Role for the CloudWatch Logs endpoint to assume to write to a userâ€™s log group.
        /// </summary>
        [PolicyResourceProperty("cloudWatchLogsRoleArn", "_mUnknown_CloudWatchLogsRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CloudWatchLogsRoleArn;
        private bool _mUnknown_CloudWatchLogsRoleArn;
        public string? CloudWatchLogsRoleArn
        {
            get
            {
                if (!_mUnknown_CloudWatchLogsRoleArn) return _mValue_CloudWatchLogsRoleArn;
                throw new UndeferrableValueException("Value 'Trail.CloudWatchLogsRoleArn' is not present");
            }
        }

        /// <summary>
        /// Whether log file integrity validation is enabled. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("enableLogFileValidation", "_mUnknown_EnableLogFileValidation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableLogFileValidation;
        private bool _mUnknown_EnableLogFileValidation;
        public bool? EnableLogFileValidation
        {
            get
            {
                if (!_mUnknown_EnableLogFileValidation) return _mValue_EnableLogFileValidation;
                throw new UndeferrableValueException("Value 'Trail.EnableLogFileValidation' is not present");
            }
        }

        /// <summary>
        /// Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
        /// </summary>
        [PolicyResourceProperty("enableLogging", "_mUnknown_EnableLogging")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableLogging;
        private bool _mUnknown_EnableLogging;
        public bool? EnableLogging
        {
            get
            {
                if (!_mUnknown_EnableLogging) return _mValue_EnableLogging;
                throw new UndeferrableValueException("Value 'Trail.EnableLogging' is not present");
            }
        }

        /// <summary>
        /// Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advanced_event_selector`.
        /// </summary>
        [PolicyResourceProperty("eventSelectors", "_mUnknown_EventSelectors")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.TrailEventSelector>? _mValue_EventSelectors;
        private bool _mUnknown_EventSelectors;
        public List<Outputs.TrailEventSelector>? EventSelectors
        {
            get
            {
                if (!_mUnknown_EventSelectors) return _mValue_EventSelectors;
                throw new UndeferrableValueException("Value 'Trail.EventSelectors' is not present");
            }
        }

        /// <summary>
        /// Region in which the trail was created.
        /// </summary>
        [PolicyResourceProperty("homeRegion", "_mUnknown_HomeRegion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HomeRegion;
        private bool _mUnknown_HomeRegion;
        public string? HomeRegion
        {
            get
            {
                if (!_mUnknown_HomeRegion) return _mValue_HomeRegion;
                throw new UndeferrableValueException("Value 'Trail.HomeRegion' is not present");
            }
        }

        /// <summary>
        /// Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
        /// </summary>
        [PolicyResourceProperty("includeGlobalServiceEvents", "_mUnknown_IncludeGlobalServiceEvents")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_IncludeGlobalServiceEvents;
        private bool _mUnknown_IncludeGlobalServiceEvents;
        public bool? IncludeGlobalServiceEvents
        {
            get
            {
                if (!_mUnknown_IncludeGlobalServiceEvents) return _mValue_IncludeGlobalServiceEvents;
                throw new UndeferrableValueException("Value 'Trail.IncludeGlobalServiceEvents' is not present");
            }
        }

        /// <summary>
        /// Configuration block for identifying unusual operational activity. See details below.
        /// </summary>
        [PolicyResourceProperty("insightSelectors", "_mUnknown_InsightSelectors")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.TrailInsightSelector>? _mValue_InsightSelectors;
        private bool _mUnknown_InsightSelectors;
        public List<Outputs.TrailInsightSelector>? InsightSelectors
        {
            get
            {
                if (!_mUnknown_InsightSelectors) return _mValue_InsightSelectors;
                throw new UndeferrableValueException("Value 'Trail.InsightSelectors' is not present");
            }
        }

        /// <summary>
        /// Whether the trail is created in the current region or in all regions. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("isMultiRegionTrail", "_mUnknown_IsMultiRegionTrail")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_IsMultiRegionTrail;
        private bool _mUnknown_IsMultiRegionTrail;
        public bool? IsMultiRegionTrail
        {
            get
            {
                if (!_mUnknown_IsMultiRegionTrail) return _mValue_IsMultiRegionTrail;
                throw new UndeferrableValueException("Value 'Trail.IsMultiRegionTrail' is not present");
            }
        }

        /// <summary>
        /// Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("isOrganizationTrail", "_mUnknown_IsOrganizationTrail")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_IsOrganizationTrail;
        private bool _mUnknown_IsOrganizationTrail;
        public bool? IsOrganizationTrail
        {
            get
            {
                if (!_mUnknown_IsOrganizationTrail) return _mValue_IsOrganizationTrail;
                throw new UndeferrableValueException("Value 'Trail.IsOrganizationTrail' is not present");
            }
        }

        /// <summary>
        /// KMS key ARN to use to encrypt the logs delivered by CloudTrail.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'Trail.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// Name of the trail.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'Trail.Name' is not present");
            }
        }

        /// <summary>
        /// Name of the S3 bucket designated for publishing log files.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("s3BucketName", "_mUnknown_S3BucketName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_S3BucketName;
        private bool _mUnknown_S3BucketName;
        public string? S3BucketName
        {
            get
            {
                if (!_mUnknown_S3BucketName) return _mValue_S3BucketName;
                throw new UndeferrableValueException("Value 'Trail.S3BucketName' is not present");
            }
        }

        /// <summary>
        /// S3 key prefix that follows the name of the bucket you have designated for log file delivery.
        /// </summary>
        [PolicyResourceProperty("s3KeyPrefix", "_mUnknown_S3KeyPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_S3KeyPrefix;
        private bool _mUnknown_S3KeyPrefix;
        public string? S3KeyPrefix
        {
            get
            {
                if (!_mUnknown_S3KeyPrefix) return _mValue_S3KeyPrefix;
                throw new UndeferrableValueException("Value 'Trail.S3KeyPrefix' is not present");
            }
        }

        /// <summary>
        /// ARN of the Amazon SNS topic that CloudTrail uses to send notifications when log files are delivered.
        /// </summary>
        [PolicyResourceProperty("snsTopicArn", "_mUnknown_SnsTopicArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnsTopicArn;
        private bool _mUnknown_SnsTopicArn;
        public string? SnsTopicArn
        {
            get
            {
                if (!_mUnknown_SnsTopicArn) return _mValue_SnsTopicArn;
                throw new UndeferrableValueException("Value 'Trail.SnsTopicArn' is not present");
            }
        }

        /// <summary>
        /// Name of the Amazon SNS topic defined for notification of log file delivery. Specify the SNS topic ARN if it resides in another region.
        /// </summary>
        [PolicyResourceProperty("snsTopicName", "_mUnknown_SnsTopicName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnsTopicName;
        private bool _mUnknown_SnsTopicName;
        public string? SnsTopicName
        {
            get
            {
                if (!_mUnknown_SnsTopicName) return _mValue_SnsTopicName;
                throw new UndeferrableValueException("Value 'Trail.SnsTopicName' is not present");
            }
        }

        /// <summary>
        /// Map of tags to assign to the trail. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'Trail.Tags' is not present");
            }
        }

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'Trail.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:cloudtrail/trail:Trail")]
    public sealed class TrailArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `event_selector`.
        /// </summary>
        [PolicyResourceProperty("advancedEventSelectors", "_mUnknown_AdvancedEventSelectors")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.TrailAdvancedEventSelectorArgs>? _mValue_AdvancedEventSelectors;
        private bool _mUnknown_AdvancedEventSelectors;
        public List<Inputs.TrailAdvancedEventSelectorArgs>? AdvancedEventSelectors
        {
            get
            {
                if (!_mUnknown_AdvancedEventSelectors) return _mValue_AdvancedEventSelectors;
                throw new UndeferrableValueException("Value 'TrailArgs.AdvancedEventSelectors' is not present");
            }
        }

        /// <summary>
        /// Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
        /// </summary>
        [PolicyResourceProperty("cloudWatchLogsGroupArn", "_mUnknown_CloudWatchLogsGroupArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CloudWatchLogsGroupArn;
        private bool _mUnknown_CloudWatchLogsGroupArn;
        public string? CloudWatchLogsGroupArn
        {
            get
            {
                if (!_mUnknown_CloudWatchLogsGroupArn) return _mValue_CloudWatchLogsGroupArn;
                throw new UndeferrableValueException("Value 'TrailArgs.CloudWatchLogsGroupArn' is not present");
            }
        }

        /// <summary>
        /// Role for the CloudWatch Logs endpoint to assume to write to a userâ€™s log group.
        /// </summary>
        [PolicyResourceProperty("cloudWatchLogsRoleArn", "_mUnknown_CloudWatchLogsRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CloudWatchLogsRoleArn;
        private bool _mUnknown_CloudWatchLogsRoleArn;
        public string? CloudWatchLogsRoleArn
        {
            get
            {
                if (!_mUnknown_CloudWatchLogsRoleArn) return _mValue_CloudWatchLogsRoleArn;
                throw new UndeferrableValueException("Value 'TrailArgs.CloudWatchLogsRoleArn' is not present");
            }
        }

        /// <summary>
        /// Whether log file integrity validation is enabled. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("enableLogFileValidation", "_mUnknown_EnableLogFileValidation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableLogFileValidation;
        private bool _mUnknown_EnableLogFileValidation;
        public bool? EnableLogFileValidation
        {
            get
            {
                if (!_mUnknown_EnableLogFileValidation) return _mValue_EnableLogFileValidation;
                throw new UndeferrableValueException("Value 'TrailArgs.EnableLogFileValidation' is not present");
            }
        }

        /// <summary>
        /// Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
        /// </summary>
        [PolicyResourceProperty("enableLogging", "_mUnknown_EnableLogging")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableLogging;
        private bool _mUnknown_EnableLogging;
        public bool? EnableLogging
        {
            get
            {
                if (!_mUnknown_EnableLogging) return _mValue_EnableLogging;
                throw new UndeferrableValueException("Value 'TrailArgs.EnableLogging' is not present");
            }
        }

        /// <summary>
        /// Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advanced_event_selector`.
        /// </summary>
        [PolicyResourceProperty("eventSelectors", "_mUnknown_EventSelectors")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.TrailEventSelectorArgs>? _mValue_EventSelectors;
        private bool _mUnknown_EventSelectors;
        public List<Inputs.TrailEventSelectorArgs>? EventSelectors
        {
            get
            {
                if (!_mUnknown_EventSelectors) return _mValue_EventSelectors;
                throw new UndeferrableValueException("Value 'TrailArgs.EventSelectors' is not present");
            }
        }

        /// <summary>
        /// Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
        /// </summary>
        [PolicyResourceProperty("includeGlobalServiceEvents", "_mUnknown_IncludeGlobalServiceEvents")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_IncludeGlobalServiceEvents;
        private bool _mUnknown_IncludeGlobalServiceEvents;
        public bool? IncludeGlobalServiceEvents
        {
            get
            {
                if (!_mUnknown_IncludeGlobalServiceEvents) return _mValue_IncludeGlobalServiceEvents;
                throw new UndeferrableValueException("Value 'TrailArgs.IncludeGlobalServiceEvents' is not present");
            }
        }

        /// <summary>
        /// Configuration block for identifying unusual operational activity. See details below.
        /// </summary>
        [PolicyResourceProperty("insightSelectors", "_mUnknown_InsightSelectors")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.TrailInsightSelectorArgs>? _mValue_InsightSelectors;
        private bool _mUnknown_InsightSelectors;
        public List<Inputs.TrailInsightSelectorArgs>? InsightSelectors
        {
            get
            {
                if (!_mUnknown_InsightSelectors) return _mValue_InsightSelectors;
                throw new UndeferrableValueException("Value 'TrailArgs.InsightSelectors' is not present");
            }
        }

        /// <summary>
        /// Whether the trail is created in the current region or in all regions. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("isMultiRegionTrail", "_mUnknown_IsMultiRegionTrail")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_IsMultiRegionTrail;
        private bool _mUnknown_IsMultiRegionTrail;
        public bool? IsMultiRegionTrail
        {
            get
            {
                if (!_mUnknown_IsMultiRegionTrail) return _mValue_IsMultiRegionTrail;
                throw new UndeferrableValueException("Value 'TrailArgs.IsMultiRegionTrail' is not present");
            }
        }

        /// <summary>
        /// Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
        /// </summary>
        [PolicyResourceProperty("isOrganizationTrail", "_mUnknown_IsOrganizationTrail")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_IsOrganizationTrail;
        private bool _mUnknown_IsOrganizationTrail;
        public bool? IsOrganizationTrail
        {
            get
            {
                if (!_mUnknown_IsOrganizationTrail) return _mValue_IsOrganizationTrail;
                throw new UndeferrableValueException("Value 'TrailArgs.IsOrganizationTrail' is not present");
            }
        }

        /// <summary>
        /// KMS key ARN to use to encrypt the logs delivered by CloudTrail.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'TrailArgs.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// Name of the trail.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'TrailArgs.Name' is not present");
            }
        }

        /// <summary>
        /// Name of the S3 bucket designated for publishing log files.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("s3BucketName", "_mUnknown_S3BucketName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_S3BucketName;
        private bool _mUnknown_S3BucketName;
        public string? S3BucketName
        {
            get
            {
                if (!_mUnknown_S3BucketName) return _mValue_S3BucketName;
                throw new UndeferrableValueException("Value 'TrailArgs.S3BucketName' is not present");
            }
        }

        /// <summary>
        /// S3 key prefix that follows the name of the bucket you have designated for log file delivery.
        /// </summary>
        [PolicyResourceProperty("s3KeyPrefix", "_mUnknown_S3KeyPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_S3KeyPrefix;
        private bool _mUnknown_S3KeyPrefix;
        public string? S3KeyPrefix
        {
            get
            {
                if (!_mUnknown_S3KeyPrefix) return _mValue_S3KeyPrefix;
                throw new UndeferrableValueException("Value 'TrailArgs.S3KeyPrefix' is not present");
            }
        }

        /// <summary>
        /// Name of the Amazon SNS topic defined for notification of log file delivery. Specify the SNS topic ARN if it resides in another region.
        /// </summary>
        [PolicyResourceProperty("snsTopicName", "_mUnknown_SnsTopicName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnsTopicName;
        private bool _mUnknown_SnsTopicName;
        public string? SnsTopicName
        {
            get
            {
                if (!_mUnknown_SnsTopicName) return _mValue_SnsTopicName;
                throw new UndeferrableValueException("Value 'TrailArgs.SnsTopicName' is not present");
            }
        }

        /// <summary>
        /// Map of tags to assign to the trail. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'TrailArgs.Tags' is not present");
            }
        }
    }
}
