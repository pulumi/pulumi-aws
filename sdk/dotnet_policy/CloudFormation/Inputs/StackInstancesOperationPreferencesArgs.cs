// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudFormation.Inputs
{
    public sealed class StackInstancesOperationPreferencesArgs
    {
        /// <summary>
        /// How the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
        /// </summary>
        [PolicyResourceProperty("concurrencyMode", "_mUnknown_ConcurrencyMode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConcurrencyMode;
        private bool _mUnknown_ConcurrencyMode;
        public string? ConcurrencyMode
        {
            get
            {
                if (!_mUnknown_ConcurrencyMode) return _mValue_ConcurrencyMode;
                throw new UndeferrableValueException("Value 'StackInstancesOperationPreferencesArgs.ConcurrencyMode' is not present");
            }
        }

        /// <summary>
        /// Number of accounts, per region, for which this operation can fail before CloudFormation stops the operation in that region.
        /// </summary>
        [PolicyResourceProperty("failureToleranceCount", "_mUnknown_FailureToleranceCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_FailureToleranceCount;
        private bool _mUnknown_FailureToleranceCount;
        public int? FailureToleranceCount
        {
            get
            {
                if (!_mUnknown_FailureToleranceCount) return _mValue_FailureToleranceCount;
                throw new UndeferrableValueException("Value 'StackInstancesOperationPreferencesArgs.FailureToleranceCount' is not present");
            }
        }

        /// <summary>
        /// Percentage of accounts, per region, for which this stack operation can fail before CloudFormation stops the operation in that region.
        /// </summary>
        [PolicyResourceProperty("failureTolerancePercentage", "_mUnknown_FailureTolerancePercentage")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_FailureTolerancePercentage;
        private bool _mUnknown_FailureTolerancePercentage;
        public int? FailureTolerancePercentage
        {
            get
            {
                if (!_mUnknown_FailureTolerancePercentage) return _mValue_FailureTolerancePercentage;
                throw new UndeferrableValueException("Value 'StackInstancesOperationPreferencesArgs.FailureTolerancePercentage' is not present");
            }
        }

        /// <summary>
        /// Maximum number of accounts in which to perform this operation at one time.
        /// </summary>
        [PolicyResourceProperty("maxConcurrentCount", "_mUnknown_MaxConcurrentCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxConcurrentCount;
        private bool _mUnknown_MaxConcurrentCount;
        public int? MaxConcurrentCount
        {
            get
            {
                if (!_mUnknown_MaxConcurrentCount) return _mValue_MaxConcurrentCount;
                throw new UndeferrableValueException("Value 'StackInstancesOperationPreferencesArgs.MaxConcurrentCount' is not present");
            }
        }

        /// <summary>
        /// Maximum percentage of accounts in which to perform this operation at one time.
        /// </summary>
        [PolicyResourceProperty("maxConcurrentPercentage", "_mUnknown_MaxConcurrentPercentage")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxConcurrentPercentage;
        private bool _mUnknown_MaxConcurrentPercentage;
        public int? MaxConcurrentPercentage
        {
            get
            {
                if (!_mUnknown_MaxConcurrentPercentage) return _mValue_MaxConcurrentPercentage;
                throw new UndeferrableValueException("Value 'StackInstancesOperationPreferencesArgs.MaxConcurrentPercentage' is not present");
            }
        }

        /// <summary>
        /// Concurrency type of deploying stack sets operations in regions, could be in parallel or one region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
        /// </summary>
        [PolicyResourceProperty("regionConcurrencyType", "_mUnknown_RegionConcurrencyType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RegionConcurrencyType;
        private bool _mUnknown_RegionConcurrencyType;
        public string? RegionConcurrencyType
        {
            get
            {
                if (!_mUnknown_RegionConcurrencyType) return _mValue_RegionConcurrencyType;
                throw new UndeferrableValueException("Value 'StackInstancesOperationPreferencesArgs.RegionConcurrencyType' is not present");
            }
        }

        /// <summary>
        /// Order of the regions where you want to perform the stack operation.
        /// </summary>
        [PolicyResourceProperty("regionOrders", "_mUnknown_RegionOrders")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_RegionOrders;
        private bool _mUnknown_RegionOrders;
        public List<string>? RegionOrders
        {
            get
            {
                if (!_mUnknown_RegionOrders) return _mValue_RegionOrders;
                throw new UndeferrableValueException("Value 'StackInstancesOperationPreferencesArgs.RegionOrders' is not present");
            }
        }
    }
}
