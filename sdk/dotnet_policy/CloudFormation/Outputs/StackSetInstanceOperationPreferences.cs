// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CloudFormation.Outputs
{
    public sealed class StackSetInstanceOperationPreferences
    {
        /// <summary>
        /// Specifies how the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
        /// </summary>
        [Input("concurrencyMode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<string> _mConcurrencyMode;

        public string? ConcurrencyMode => _mConcurrencyMode.GetValue("concurrencyMode");

        /// <summary>
        /// Number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
        /// </summary>
        [Input("failureToleranceCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<int> _mFailureToleranceCount;

        public int? FailureToleranceCount => _mFailureToleranceCount.GetValue("failureToleranceCount");

        /// <summary>
        /// Percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
        /// </summary>
        [Input("failureTolerancePercentage")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<int> _mFailureTolerancePercentage;

        public int? FailureTolerancePercentage => _mFailureTolerancePercentage.GetValue("failureTolerancePercentage");

        /// <summary>
        /// Maximum number of accounts in which to perform this operation at one time.
        /// </summary>
        [Input("maxConcurrentCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<int> _mMaxConcurrentCount;

        public int? MaxConcurrentCount => _mMaxConcurrentCount.GetValue("maxConcurrentCount");

        /// <summary>
        /// Maximum percentage of accounts in which to perform this operation at one time.
        /// </summary>
        [Input("maxConcurrentPercentage")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<int> _mMaxConcurrentPercentage;

        public int? MaxConcurrentPercentage => _mMaxConcurrentPercentage.GetValue("maxConcurrentPercentage");

        /// <summary>
        /// Concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
        /// </summary>
        [Input("regionConcurrencyType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<string> _mRegionConcurrencyType;

        public string? RegionConcurrencyType => _mRegionConcurrencyType.GetValue("regionConcurrencyType");

        /// <summary>
        /// Order of the Regions in where you want to perform the stack operation.
        /// </summary>
        [Input("regionOrders")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private global::Pulumi.Core.UndeferrableValue<List<string>> _mRegionOrders;

        public List<string>? RegionOrders => _mRegionOrders.GetValue("regionOrders");
    }
}
