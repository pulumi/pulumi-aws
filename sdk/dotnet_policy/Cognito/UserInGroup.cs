// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Cognito
{
    [PolicyResourceType("aws:cognito/userInGroup:UserInGroup")]
    public sealed class UserInGroup : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The name of the group to which the user is to be added.
        /// </summary>
        [PolicyResourceProperty("groupName", "_mUnknown_GroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GroupName;
        private bool _mUnknown_GroupName;
        public string? GroupName
        {
            get
            {
                if (!_mUnknown_GroupName) return _mValue_GroupName;
                throw new UndeferrableValueException("Value 'UserInGroup.GroupName' is not present");
            }
        }

        /// <summary>
        /// The user pool ID of the user and group.
        /// </summary>
        [PolicyResourceProperty("userPoolId", "_mUnknown_UserPoolId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserPoolId;
        private bool _mUnknown_UserPoolId;
        public string? UserPoolId
        {
            get
            {
                if (!_mUnknown_UserPoolId) return _mValue_UserPoolId;
                throw new UndeferrableValueException("Value 'UserInGroup.UserPoolId' is not present");
            }
        }

        /// <summary>
        /// The username of the user to be added to the group.
        /// </summary>
        [PolicyResourceProperty("username", "_mUnknown_Username")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Username;
        private bool _mUnknown_Username;
        public string? Username
        {
            get
            {
                if (!_mUnknown_Username) return _mValue_Username;
                throw new UndeferrableValueException("Value 'UserInGroup.Username' is not present");
            }
        }
    }

    [PolicyResourceType("aws:cognito/userInGroup:UserInGroup")]
    public sealed class UserInGroupArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The name of the group to which the user is to be added.
        /// </summary>
        [PolicyResourceProperty("groupName", "_mUnknown_GroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_GroupName;
        private bool _mUnknown_GroupName;
        public string? GroupName
        {
            get
            {
                if (!_mUnknown_GroupName) return _mValue_GroupName;
                throw new UndeferrableValueException("Value 'UserInGroupArgs.GroupName' is not present");
            }
        }

        /// <summary>
        /// The user pool ID of the user and group.
        /// </summary>
        [PolicyResourceProperty("userPoolId", "_mUnknown_UserPoolId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_UserPoolId;
        private bool _mUnknown_UserPoolId;
        public string? UserPoolId
        {
            get
            {
                if (!_mUnknown_UserPoolId) return _mValue_UserPoolId;
                throw new UndeferrableValueException("Value 'UserInGroupArgs.UserPoolId' is not present");
            }
        }

        /// <summary>
        /// The username of the user to be added to the group.
        /// </summary>
        [PolicyResourceProperty("username", "_mUnknown_Username")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Username;
        private bool _mUnknown_Username;
        public string? Username
        {
            get
            {
                if (!_mUnknown_Username) return _mValue_Username;
                throw new UndeferrableValueException("Value 'UserInGroupArgs.Username' is not present");
            }
        }
    }
}
