// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Emr.Outputs
{
    public sealed class ClusterKerberosAttributes
    {
        /// <summary>
        /// Active Directory password for `ad_domain_join_user`. This provider cannot perform drift detection of this configuration.
        /// </summary>
        [PolicyResourceProperty("adDomainJoinPassword", "_mUnknown_AdDomainJoinPassword")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AdDomainJoinPassword;
        private bool _mUnknown_AdDomainJoinPassword;
        public string? AdDomainJoinPassword
        {
            get
            {
                if (!_mUnknown_AdDomainJoinPassword) return _mValue_AdDomainJoinPassword;
                throw new UndeferrableValueException("Value 'ClusterKerberosAttributes.AdDomainJoinPassword' is not present");
            }
        }

        /// <summary>
        /// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
        /// </summary>
        [PolicyResourceProperty("adDomainJoinUser", "_mUnknown_AdDomainJoinUser")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AdDomainJoinUser;
        private bool _mUnknown_AdDomainJoinUser;
        public string? AdDomainJoinUser
        {
            get
            {
                if (!_mUnknown_AdDomainJoinUser) return _mValue_AdDomainJoinUser;
                throw new UndeferrableValueException("Value 'ClusterKerberosAttributes.AdDomainJoinUser' is not present");
            }
        }

        /// <summary>
        /// Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
        /// </summary>
        [PolicyResourceProperty("crossRealmTrustPrincipalPassword", "_mUnknown_CrossRealmTrustPrincipalPassword")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CrossRealmTrustPrincipalPassword;
        private bool _mUnknown_CrossRealmTrustPrincipalPassword;
        public string? CrossRealmTrustPrincipalPassword
        {
            get
            {
                if (!_mUnknown_CrossRealmTrustPrincipalPassword) return _mValue_CrossRealmTrustPrincipalPassword;
                throw new UndeferrableValueException("Value 'ClusterKerberosAttributes.CrossRealmTrustPrincipalPassword' is not present");
            }
        }

        /// <summary>
        /// Password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
        /// </summary>
        [PolicyResourceProperty("kdcAdminPassword", "_mUnknown_KdcAdminPassword")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KdcAdminPassword;
        private bool _mUnknown_KdcAdminPassword;
        public string? KdcAdminPassword
        {
            get
            {
                if (!_mUnknown_KdcAdminPassword) return _mValue_KdcAdminPassword;
                throw new UndeferrableValueException("Value 'ClusterKerberosAttributes.KdcAdminPassword' is not present");
            }
        }

        /// <summary>
        /// Name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
        /// </summary>
        [PolicyResourceProperty("realm", "_mUnknown_Realm")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Realm;
        private bool _mUnknown_Realm;
        public string? Realm
        {
            get
            {
                if (!_mUnknown_Realm) return _mValue_Realm;
                throw new UndeferrableValueException("Value 'ClusterKerberosAttributes.Realm' is not present");
            }
        }
    }
}
