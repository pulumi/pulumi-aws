// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Fms.Inputs
{
    public sealed class PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs
    {
        /// <summary>
        /// A string value containing the IPv4 network range to allow or deny, in CIDR notation.
        /// </summary>
        [PolicyResourceProperty("cidrBlock", "_mUnknown_CidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CidrBlock;
        private bool _mUnknown_CidrBlock;
        public string? CidrBlock
        {
            get
            {
                if (!_mUnknown_CidrBlock) return _mValue_CidrBlock;
                throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.CidrBlock' is not present");
            }
        }

        /// <summary>
        /// A boolean value, if true Firewall Manager creates egress rule. If false Firewall Manager creates ingress rule.
        /// </summary>
        [PolicyResourceProperty("egress", "_mUnknown_Egress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Egress;
        private bool _mUnknown_Egress;
        public bool? Egress
        {
            get
            {
                if (!_mUnknown_Egress) return _mValue_Egress;
                throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.Egress' is not present");
            }
        }

        /// <summary>
        /// A configuration block for ICMP protocol: The ICMP type and code. See the `icmp_type_code` block.
        /// </summary>
        [PolicyResourceProperty("icmpTypeCodes", "_mUnknown_IcmpTypeCodes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCodeArgs>? _mValue_IcmpTypeCodes;
        private bool _mUnknown_IcmpTypeCodes;
        public List<Inputs.PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCodeArgs>? IcmpTypeCodes
        {
            get
            {
                if (!_mUnknown_IcmpTypeCodes) return _mValue_IcmpTypeCodes;
                throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.IcmpTypeCodes' is not present");
            }
        }

        /// <summary>
        /// A string value containing the IPv6 network range to allow or deny, in CIDR notation.
        /// </summary>
        [PolicyResourceProperty("ipv6CidrBlock", "_mUnknown_Ipv6CidrBlock")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Ipv6CidrBlock;
        private bool _mUnknown_Ipv6CidrBlock;
        public string? Ipv6CidrBlock
        {
            get
            {
                if (!_mUnknown_Ipv6CidrBlock) return _mValue_Ipv6CidrBlock;
                throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.Ipv6CidrBlock' is not present");
            }
        }

        /// <summary>
        /// A configuration block for PortRange. See the `port_range` block.
        /// </summary>
        [PolicyResourceProperty("portRanges", "_mUnknown_PortRanges")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRangeArgs>? _mValue_PortRanges;
        private bool _mUnknown_PortRanges;
        public List<Inputs.PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRangeArgs>? PortRanges
        {
            get
            {
                if (!_mUnknown_PortRanges) return _mValue_PortRanges;
                throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.PortRanges' is not present");
            }
        }

        /// <summary>
        /// The protocol number. A value of "-1" means all protocols.
        /// </summary>
        [PolicyResourceProperty("protocol", "_mUnknown_Protocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Protocol;
        private bool _mUnknown_Protocol;
        public string? Protocol
        {
            get
            {
                if (!_mUnknown_Protocol) return _mValue_Protocol;
                throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.Protocol' is not present");
            }
        }

        /// <summary>
        /// A string value that indicates whether to allow or deny the traffic that matches the rule. Valid values: `allow`, `deny`.
        /// </summary>
        [PolicyResourceProperty("ruleAction", "_mUnknown_RuleAction")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_RuleAction;
        private bool _mUnknown_RuleAction;
        public string? RuleAction
        {
            get
            {
                if (!_mUnknown_RuleAction) return _mValue_RuleAction;
                throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.RuleAction' is not present");
            }
        }
    }
}
