// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Route53
{
    [PolicyResourceType("aws:route53/record:Record")]
    public sealed class Record : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// An alias block. Conflicts with `ttl` &amp; `records`.
        /// Documented below.
        /// </summary>
        [Input("aliases")]
        public List<RecordAlias>? Aliases;

        /// <summary>
        /// Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.
        /// 
        /// Exactly one of `records` or `alias` must be specified: this determines whether it's an alias record.
        /// </summary>
        [Input("allowOverwrite")]
        public bool? AllowOverwrite;

        /// <summary>
        /// A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.
        /// </summary>
        [Input("cidrRoutingPolicy")]
        public RecordCidrRoutingPolicy? CidrRoutingPolicy;

        /// <summary>
        /// A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.
        /// </summary>
        [Input("failoverRoutingPolicies")]
        public List<RecordFailoverRoutingPolicy>? FailoverRoutingPolicies;

        /// <summary>
        /// [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) built using the zone domain and `name`.
        /// </summary>
        [Input("fqdn")]
        public string? Fqdn;

        /// <summary>
        /// A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.
        /// </summary>
        [Input("geolocationRoutingPolicies")]
        public List<RecordGeolocationRoutingPolicy>? GeolocationRoutingPolicies;

        /// <summary>
        /// A block indicating a routing policy based on the geoproximity of the requestor. Conflicts with any other routing policy. Documented below.
        /// </summary>
        [Input("geoproximityRoutingPolicy")]
        public RecordGeoproximityRoutingPolicy? GeoproximityRoutingPolicy;

        /// <summary>
        /// The health check the record should be associated with.
        /// </summary>
        [Input("healthCheckId")]
        public string? HealthCheckId;

        /// <summary>
        /// A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.
        /// </summary>
        [Input("latencyRoutingPolicies")]
        public List<RecordLatencyRoutingPolicy>? LatencyRoutingPolicies;

        /// <summary>
        /// Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.
        /// </summary>
        [Input("multivalueAnswerRoutingPolicy")]
        public bool? MultivalueAnswerRoutingPolicy;

        /// <summary>
        /// The name of the record.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g., `"first255characters\"\"morecharacters"`).
        /// </summary>
        [Input("records")]
        public List<string>? Records;

        /// <summary>
        /// Unique identifier to differentiate records with routing policies from one another. Required if using `cidr_routing_policy`, `failover_routing_policy`, `geolocation_routing_policy`,`geoproximity_routing_policy`, `latency_routing_policy`, `multivalue_answer_routing_policy`, or `weighted_routing_policy`.
        /// </summary>
        [Input("setIdentifier")]
        public string? SetIdentifier;

        /// <summary>
        /// The TTL of the record.
        /// </summary>
        [Input("ttl")]
        public int? Ttl;

        /// <summary>
        /// The record type. Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV` and `TXT`.
        /// </summary>
        [Input("type")]
        public string? Type;

        /// <summary>
        /// A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.
        /// </summary>
        [Input("weightedRoutingPolicies")]
        public List<RecordWeightedRoutingPolicy>? WeightedRoutingPolicies;

        /// <summary>
        /// The ID of the hosted zone to contain this record.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId;
    }
}
