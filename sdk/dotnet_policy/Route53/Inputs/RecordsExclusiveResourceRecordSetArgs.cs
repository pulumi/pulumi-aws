// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Route53.Inputs
{
    public sealed class RecordsExclusiveResourceRecordSetArgs
    {
        /// <summary>
        /// Alias target block.
        /// See `alias_target` below.
        /// </summary>
        [PolicyResourceProperty("aliasTarget", "_mUnknown_AliasTarget")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.RecordsExclusiveResourceRecordSetAliasTargetArgs? _mValue_AliasTarget;
        private bool _mUnknown_AliasTarget;
        public Inputs.RecordsExclusiveResourceRecordSetAliasTargetArgs? AliasTarget
        {
            get
            {
                if (!_mUnknown_AliasTarget) return _mValue_AliasTarget;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.AliasTarget' is not present");
            }
        }

        [PolicyResourceProperty("cidrRoutingConfig", "_mUnknown_CidrRoutingConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs? _mValue_CidrRoutingConfig;
        private bool _mUnknown_CidrRoutingConfig;
        public Inputs.RecordsExclusiveResourceRecordSetCidrRoutingConfigArgs? CidrRoutingConfig
        {
            get
            {
                if (!_mUnknown_CidrRoutingConfig) return _mValue_CidrRoutingConfig;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.CidrRoutingConfig' is not present");
            }
        }

        /// <summary>
        /// Type of failover resource record.
        /// Valid values are `PRIMARY` and `SECONDARY`.
        /// See the [AWS documentation on DNS failover](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html) for additional details.
        /// </summary>
        [PolicyResourceProperty("failover", "_mUnknown_Failover")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Failover;
        private bool _mUnknown_Failover;
        public string? Failover
        {
            get
            {
                if (!_mUnknown_Failover) return _mValue_Failover;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.Failover' is not present");
            }
        }

        /// <summary>
        /// Geolocation block to control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
        /// See `geolocation` below.
        /// </summary>
        [PolicyResourceProperty("geolocation", "_mUnknown_Geolocation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.RecordsExclusiveResourceRecordSetGeolocationArgs? _mValue_Geolocation;
        private bool _mUnknown_Geolocation;
        public Inputs.RecordsExclusiveResourceRecordSetGeolocationArgs? Geolocation
        {
            get
            {
                if (!_mUnknown_Geolocation) return _mValue_Geolocation;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.Geolocation' is not present");
            }
        }

        /// <summary>
        /// Geoproximity location block.
        /// See `geoproximity_location` below.
        /// </summary>
        [PolicyResourceProperty("geoproximityLocation", "_mUnknown_GeoproximityLocation")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Inputs.RecordsExclusiveResourceRecordSetGeoproximityLocationArgs? _mValue_GeoproximityLocation;
        private bool _mUnknown_GeoproximityLocation;
        public Inputs.RecordsExclusiveResourceRecordSetGeoproximityLocationArgs? GeoproximityLocation
        {
            get
            {
                if (!_mUnknown_GeoproximityLocation) return _mValue_GeoproximityLocation;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.GeoproximityLocation' is not present");
            }
        }

        /// <summary>
        /// Health check the record should be associated with.
        /// </summary>
        [PolicyResourceProperty("healthCheckId", "_mUnknown_HealthCheckId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_HealthCheckId;
        private bool _mUnknown_HealthCheckId;
        public string? HealthCheckId
        {
            get
            {
                if (!_mUnknown_HealthCheckId) return _mValue_HealthCheckId;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.HealthCheckId' is not present");
            }
        }

        [PolicyResourceProperty("multiValueAnswer", "_mUnknown_MultiValueAnswer")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_MultiValueAnswer;
        private bool _mUnknown_MultiValueAnswer;
        public bool? MultiValueAnswer
        {
            get
            {
                if (!_mUnknown_MultiValueAnswer) return _mValue_MultiValueAnswer;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.MultiValueAnswer' is not present");
            }
        }

        /// <summary>
        /// Name of the record.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.Name' is not present");
            }
        }

        /// <summary>
        /// AWS region of the resource this record set refers to.
        /// Must be a valid AWS region name.
        /// See the [AWS documentation](http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency) on latency based routing for additional details.
        /// </summary>
        [PolicyResourceProperty("region", "_mUnknown_Region")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Region;
        private bool _mUnknown_Region;
        public string? Region
        {
            get
            {
                if (!_mUnknown_Region) return _mValue_Region;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.Region' is not present");
            }
        }

        /// <summary>
        /// Information about the resource records to act upon.
        /// See `resource_records` below.
        /// </summary>
        [PolicyResourceProperty("resourceRecords", "_mUnknown_ResourceRecords")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.RecordsExclusiveResourceRecordSetResourceRecordArgs>? _mValue_ResourceRecords;
        private bool _mUnknown_ResourceRecords;
        public List<Inputs.RecordsExclusiveResourceRecordSetResourceRecordArgs>? ResourceRecords
        {
            get
            {
                if (!_mUnknown_ResourceRecords) return _mValue_ResourceRecords;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.ResourceRecords' is not present");
            }
        }

        /// <summary>
        /// An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
        /// Required if using `cidr_routing_config`, `failover`, `geolocation`,`geoproximity_location`, `multivalue_answer`, `region`, or `weight`.
        /// </summary>
        [PolicyResourceProperty("setIdentifier", "_mUnknown_SetIdentifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SetIdentifier;
        private bool _mUnknown_SetIdentifier;
        public string? SetIdentifier
        {
            get
            {
                if (!_mUnknown_SetIdentifier) return _mValue_SetIdentifier;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.SetIdentifier' is not present");
            }
        }

        [PolicyResourceProperty("trafficPolicyInstanceId", "_mUnknown_TrafficPolicyInstanceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TrafficPolicyInstanceId;
        private bool _mUnknown_TrafficPolicyInstanceId;
        public string? TrafficPolicyInstanceId
        {
            get
            {
                if (!_mUnknown_TrafficPolicyInstanceId) return _mValue_TrafficPolicyInstanceId;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.TrafficPolicyInstanceId' is not present");
            }
        }

        /// <summary>
        /// Resource record cache time to live (TTL), in seconds.
        /// </summary>
        [PolicyResourceProperty("ttl", "_mUnknown_Ttl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Ttl;
        private bool _mUnknown_Ttl;
        public int? Ttl
        {
            get
            {
                if (!_mUnknown_Ttl) return _mValue_Ttl;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.Ttl' is not present");
            }
        }

        /// <summary>
        /// Record type.
        /// Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV`, `TXT`, `TLSA`, `SSHFP`, `SVCB`, and `HTTPS`.
        /// 
        /// The following arguments are optional:
        /// 
        /// &gt; Exactly one of `resource_records` or `alias_target` must be specified.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.Type' is not present");
            }
        }

        /// <summary>
        /// Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set.
        /// </summary>
        [PolicyResourceProperty("weight", "_mUnknown_Weight")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Weight;
        private bool _mUnknown_Weight;
        public int? Weight
        {
            get
            {
                if (!_mUnknown_Weight) return _mValue_Weight;
                throw new UndeferrableValueException("Value 'RecordsExclusiveResourceRecordSetArgs.Weight' is not present");
            }
        }
    }
}
