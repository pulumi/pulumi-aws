// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Dlm.Outputs
{
    public sealed class LifecyclePolicyPolicyDetails
    {
        /// <summary>
        /// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `action` configuration block.
        /// </summary>
        [PolicyResourceProperty("action", "_mUnknown_Action")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.LifecyclePolicyPolicyDetailsAction? _mValue_Action;
        private bool _mUnknown_Action;
        public Outputs.LifecyclePolicyPolicyDetailsAction? Action
        {
            get
            {
                if (!_mUnknown_Action) return _mValue_Action;
                throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.Action' is not present");
            }
        }

        /// <summary>
        /// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `event_source` configuration block.
        /// </summary>
        [PolicyResourceProperty("eventSource", "_mUnknown_EventSource")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.LifecyclePolicyPolicyDetailsEventSource? _mValue_EventSource;
        private bool _mUnknown_EventSource;
        public Outputs.LifecyclePolicyPolicyDetailsEventSource? EventSource
        {
            get
            {
                if (!_mUnknown_EventSource) return _mValue_EventSource;
                throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.EventSource' is not present");
            }
        }

        [PolicyResourceProperty("parameters", "_mUnknown_Parameters")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.LifecyclePolicyPolicyDetailsParameters? _mValue_Parameters;
        private bool _mUnknown_Parameters;
        public Outputs.LifecyclePolicyPolicyDetailsParameters? Parameters
        {
            get
            {
                if (!_mUnknown_Parameters) return _mValue_Parameters;
                throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.Parameters' is not present");
            }
        }

        /// <summary>
        /// The valid target resource types and actions a policy can manage. Specify `EBS_SNAPSHOT_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify `IMAGE_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify `EVENT_BASED_POLICY` to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is `EBS_SNAPSHOT_MANAGEMENT`.
        /// </summary>
        [PolicyResourceProperty("policyType", "_mUnknown_PolicyType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PolicyType;
        private bool _mUnknown_PolicyType;
        public string? PolicyType
        {
            get
            {
                if (!_mUnknown_PolicyType) return _mValue_PolicyType;
                throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.PolicyType' is not present");
            }
        }

        /// <summary>
        /// The location of the resources to backup. If the source resources are located in an AWS Region, specify `CLOUD`. If the source resources are located on an Outpost in your account, specify `OUTPOST`. If you specify `OUTPOST`, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are `CLOUD` and `OUTPOST`.
        /// </summary>
        [PolicyResourceProperty("resourceLocations", "_mUnknown_ResourceLocations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ResourceLocations;
        private bool _mUnknown_ResourceLocations;
        public string? ResourceLocations
        {
            get
            {
                if (!_mUnknown_ResourceLocations) return _mValue_ResourceLocations;
                throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.ResourceLocations' is not present");
            }
        }

        /// <summary>
        /// A list of resource types that should be targeted by the lifecycle policy. Valid values are `VOLUME` and `INSTANCE`.
        /// </summary>
        [PolicyResourceProperty("resourceTypes", "_mUnknown_ResourceTypes")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_ResourceTypes;
        private bool _mUnknown_ResourceTypes;
        public List<string>? ResourceTypes
        {
            get
            {
                if (!_mUnknown_ResourceTypes) return _mValue_ResourceTypes;
                throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.ResourceTypes' is not present");
            }
        }

        /// <summary>
        /// See the `schedule` configuration block.
        /// </summary>
        [PolicyResourceProperty("schedules", "_mUnknown_Schedules")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.LifecyclePolicyPolicyDetailsSchedule>? _mValue_Schedules;
        private bool _mUnknown_Schedules;
        public List<Outputs.LifecyclePolicyPolicyDetailsSchedule>? Schedules
        {
            get
            {
                if (!_mUnknown_Schedules) return _mValue_Schedules;
                throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.Schedules' is not present");
            }
        }

        /// <summary>
        /// A map of tag keys and their values. Any resources that match the `resource_types` and are tagged with _any_ of these tags will be targeted.
        /// 
        /// &gt; Note: You cannot have overlapping lifecycle policies that share the same `target_tags`. Pulumi is unable to detect this at plan time but it will fail during apply.
        /// </summary>
        [PolicyResourceProperty("targetTags", "_mUnknown_TargetTags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TargetTags;
        private bool _mUnknown_TargetTags;
        public Dictionary<string, string>? TargetTags
        {
            get
            {
                if (!_mUnknown_TargetTags) return _mValue_TargetTags;
                throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.TargetTags' is not present");
            }
        }
    }
}
