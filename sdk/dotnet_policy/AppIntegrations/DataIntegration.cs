// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.AppIntegrations
{
    [PolicyResourceType("aws:appintegrations/dataIntegration:DataIntegration")]
    public sealed class DataIntegration : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the Data Integration.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Specifies the description of the Data Integration.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// Specifies the KMS key Amazon Resource Name (ARN) for the Data Integration.
        /// </summary>
        [Input("kmsKey")]
        public string? KmsKey;

        /// <summary>
        /// Specifies the name of the Data Integration.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// A block that defines the name of the data and how often it should be pulled from the source. The Schedule Config block is documented below.
        /// </summary>
        [Input("scheduleConfig")]
        public DataIntegrationScheduleConfig? ScheduleConfig;

        /// <summary>
        /// Specifies the URI of the data source. Create an AppFlow Connector Profile and reference the name of the profile in the URL. An example of this value for Salesforce is `Salesforce://AppFlow/example` where `example` is the name of the AppFlow Connector Profile.
        /// </summary>
        [Input("sourceUri")]
        public string? SourceUri;

        /// <summary>
        /// Tags to apply to the Data Integration. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
