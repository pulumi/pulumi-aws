// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Elb
{
    [PolicyResourceType("aws:elb/loadBalancer:LoadBalancer")]
    public sealed class LoadBalancer : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// An Access Logs block. Access Logs documented below.
        /// </summary>
        [Input("accessLogs")]
        public LoadBalancerAccessLogs? AccessLogs;

        /// <summary>
        /// The ARN of the ELB
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The AZ's to serve traffic in.
        /// </summary>
        [Input("availabilityZones")]
        public List<string>? AvailabilityZones;

        /// <summary>
        /// Boolean to enable connection draining. Default: `false`
        /// </summary>
        [Input("connectionDraining")]
        public bool? ConnectionDraining;

        /// <summary>
        /// The time in seconds to allow for connections to drain. Default: `300`
        /// </summary>
        [Input("connectionDrainingTimeout")]
        public int? ConnectionDrainingTimeout;

        /// <summary>
        /// Enable cross-zone load balancing. Default: `true`
        /// </summary>
        [Input("crossZoneLoadBalancing")]
        public bool? CrossZoneLoadBalancing;

        /// <summary>
        /// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
        /// </summary>
        [Input("desyncMitigationMode")]
        public string? DesyncMitigationMode;

        /// <summary>
        /// The DNS name of the ELB
        /// </summary>
        [Input("dnsName")]
        public string? DnsName;

        /// <summary>
        /// A health_check block. Health Check documented below.
        /// </summary>
        [Input("healthCheck")]
        public LoadBalancerHealthCheck? HealthCheck;

        /// <summary>
        /// The time in seconds that the connection is allowed to be idle. Default: `60`
        /// </summary>
        [Input("idleTimeout")]
        public int? IdleTimeout;

        /// <summary>
        /// A list of instance ids to place in the ELB pool.
        /// </summary>
        [Input("instances")]
        public List<string>? Instances;

        /// <summary>
        /// If true, ELB will be an internal ELB.
        /// </summary>
        [Input("internal")]
        public bool? Internal;

        /// <summary>
        /// A list of listener blocks. Listeners documented below.
        /// </summary>
        [Input("listeners")]
        public List<LoadBalancerListener>? Listeners;

        /// <summary>
        /// The name of the ELB. By default generated by this provider.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Creates a unique name beginning with the specified
        /// prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix;

        /// <summary>
        /// A list of security group IDs to assign to the ELB.
        /// Only valid if creating an ELB within a VPC
        /// </summary>
        [Input("securityGroups")]
        public List<string>? SecurityGroups;

        /// <summary>
        /// The name of the security group that you can use as
        /// part of your inbound rules for your load balancer's back-end application
        /// instances. Use this for Classic or Default VPC only.
        /// </summary>
        [Input("sourceSecurityGroup")]
        public string? SourceSecurityGroup;

        /// <summary>
        /// The ID of the security group that you can use as
        /// part of your inbound rules for your load balancer's back-end application
        /// instances. Only available on ELBs launched in a VPC.
        /// </summary>
        [Input("sourceSecurityGroupId")]
        public string? SourceSecurityGroupId;

        /// <summary>
        /// A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
        /// </summary>
        [Input("subnets")]
        public List<string>? Subnets;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// 
        /// Exactly one of `availability_zones` or `subnets` must be specified: this
        /// determines if the ELB exists in a VPC or in EC2-classic.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId;
    }
}
