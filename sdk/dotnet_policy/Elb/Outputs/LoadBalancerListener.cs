// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Elb.Outputs
{
    public sealed class LoadBalancerListener
    {
        /// <summary>
        /// The port on the instance to route to
        /// </summary>
        [PolicyResourceProperty("instancePort", "_mUnknown_InstancePort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_InstancePort;
        private bool _mUnknown_InstancePort;
        public int? InstancePort
        {
            get
            {
                if (!_mUnknown_InstancePort) return _mValue_InstancePort;
                throw new UndeferrableValueException("Value 'LoadBalancerListener.InstancePort' is not present");
            }
        }

        /// <summary>
        /// The protocol to use to the instance. Valid
        /// values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
        /// </summary>
        [PolicyResourceProperty("instanceProtocol", "_mUnknown_InstanceProtocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceProtocol;
        private bool _mUnknown_InstanceProtocol;
        public string? InstanceProtocol
        {
            get
            {
                if (!_mUnknown_InstanceProtocol) return _mValue_InstanceProtocol;
                throw new UndeferrableValueException("Value 'LoadBalancerListener.InstanceProtocol' is not present");
            }
        }

        /// <summary>
        /// The port to listen on for the load balancer
        /// </summary>
        [PolicyResourceProperty("lbPort", "_mUnknown_LbPort")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_LbPort;
        private bool _mUnknown_LbPort;
        public int? LbPort
        {
            get
            {
                if (!_mUnknown_LbPort) return _mValue_LbPort;
                throw new UndeferrableValueException("Value 'LoadBalancerListener.LbPort' is not present");
            }
        }

        /// <summary>
        /// The protocol to listen on. Valid values are `HTTP`,
        /// `HTTPS`, `TCP`, or `SSL`
        /// </summary>
        [PolicyResourceProperty("lbProtocol", "_mUnknown_LbProtocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LbProtocol;
        private bool _mUnknown_LbProtocol;
        public string? LbProtocol
        {
            get
            {
                if (!_mUnknown_LbProtocol) return _mValue_LbProtocol;
                throw new UndeferrableValueException("Value 'LoadBalancerListener.LbProtocol' is not present");
            }
        }

        /// <summary>
        /// The ARN of an SSL certificate you have
        /// uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lb_protocol` is either HTTPS or SSL**
        /// </summary>
        [PolicyResourceProperty("sslCertificateId", "_mUnknown_SslCertificateId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SslCertificateId;
        private bool _mUnknown_SslCertificateId;
        public string? SslCertificateId
        {
            get
            {
                if (!_mUnknown_SslCertificateId) return _mValue_SslCertificateId;
                throw new UndeferrableValueException("Value 'LoadBalancerListener.SslCertificateId' is not present");
            }
        }
    }
}
