// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.CodeBuild.Outputs
{
    public sealed class ProjectSource
    {
        /// <summary>
        /// Information about the strategy CodeBuild should use when authenticating with the source code host.
        /// Detailed below.
        /// </summary>
        [PolicyResourceProperty("auth", "_mUnknown_Auth")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ProjectSourceAuth? _mValue_Auth;
        private bool _mUnknown_Auth;
        public Outputs.ProjectSourceAuth? Auth
        {
            get
            {
                if (!_mUnknown_Auth) return _mValue_Auth;
                throw new UndeferrableValueException("Value 'ProjectSource.Auth' is not present");
            }
        }

        /// <summary>
        /// Configuration block that contains information that defines how the build project
        /// reports the build status to the source provider. This option is only used when the source provider is GitHub, GitHub
        /// Enterprise, GitLab, GitLab Self Managed, or Bitbucket. `build_status_config` blocks are documented below.
        /// </summary>
        [PolicyResourceProperty("buildStatusConfig", "_mUnknown_BuildStatusConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ProjectSourceBuildStatusConfig? _mValue_BuildStatusConfig;
        private bool _mUnknown_BuildStatusConfig;
        public Outputs.ProjectSourceBuildStatusConfig? BuildStatusConfig
        {
            get
            {
                if (!_mUnknown_BuildStatusConfig) return _mValue_BuildStatusConfig;
                throw new UndeferrableValueException("Value 'ProjectSource.BuildStatusConfig' is not present");
            }
        }

        /// <summary>
        /// Build specification to use for this build project's related builds. This must be set when
        /// `type` is `NO_SOURCE`. Also, if a non-default buildspec file name or file path aside from the root is used, it must be
        /// specified.
        /// </summary>
        [PolicyResourceProperty("buildspec", "_mUnknown_Buildspec")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Buildspec;
        private bool _mUnknown_Buildspec;
        public string? Buildspec
        {
            get
            {
                if (!_mUnknown_Buildspec) return _mValue_Buildspec;
                throw new UndeferrableValueException("Value 'ProjectSource.Buildspec' is not present");
            }
        }

        /// <summary>
        /// Truncate git history to this many commits. Use `0` for a `Full` checkout which you need
        /// to run commands like `git branch --show-current`.
        /// See [AWS CodePipeline User Guide: Tutorial: Use full clone with a GitHub pipeline source](https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-github-gitclone.html)
        /// for details.
        /// </summary>
        [PolicyResourceProperty("gitCloneDepth", "_mUnknown_GitCloneDepth")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_GitCloneDepth;
        private bool _mUnknown_GitCloneDepth;
        public int? GitCloneDepth
        {
            get
            {
                if (!_mUnknown_GitCloneDepth) return _mValue_GitCloneDepth;
                throw new UndeferrableValueException("Value 'ProjectSource.GitCloneDepth' is not present");
            }
        }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [PolicyResourceProperty("gitSubmodulesConfig", "_mUnknown_GitSubmodulesConfig")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.ProjectSourceGitSubmodulesConfig? _mValue_GitSubmodulesConfig;
        private bool _mUnknown_GitSubmodulesConfig;
        public Outputs.ProjectSourceGitSubmodulesConfig? GitSubmodulesConfig
        {
            get
            {
                if (!_mUnknown_GitSubmodulesConfig) return _mValue_GitSubmodulesConfig;
                throw new UndeferrableValueException("Value 'ProjectSource.GitSubmodulesConfig' is not present");
            }
        }

        /// <summary>
        /// Ignore SSL warnings when connecting to source control.
        /// </summary>
        [PolicyResourceProperty("insecureSsl", "_mUnknown_InsecureSsl")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_InsecureSsl;
        private bool _mUnknown_InsecureSsl;
        public bool? InsecureSsl
        {
            get
            {
                if (!_mUnknown_InsecureSsl) return _mValue_InsecureSsl;
                throw new UndeferrableValueException("Value 'ProjectSource.InsecureSsl' is not present");
            }
        }

        /// <summary>
        /// Location of the source code from git or s3.
        /// </summary>
        [PolicyResourceProperty("location", "_mUnknown_Location")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Location;
        private bool _mUnknown_Location;
        public string? Location
        {
            get
            {
                if (!_mUnknown_Location) return _mValue_Location;
                throw new UndeferrableValueException("Value 'ProjectSource.Location' is not present");
            }
        }

        /// <summary>
        /// Whether to report the status of a build's start and finish to your source provider.
        /// This option is valid only when your source provider is GitHub, GitHub Enterprise, GitLab, GitLab Self Managed, or
        /// Bitbucket.
        /// </summary>
        [PolicyResourceProperty("reportBuildStatus", "_mUnknown_ReportBuildStatus")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ReportBuildStatus;
        private bool _mUnknown_ReportBuildStatus;
        public bool? ReportBuildStatus
        {
            get
            {
                if (!_mUnknown_ReportBuildStatus) return _mValue_ReportBuildStatus;
                throw new UndeferrableValueException("Value 'ProjectSource.ReportBuildStatus' is not present");
            }
        }

        /// <summary>
        /// Type of repository that contains the source code to be built. Valid values: `BITBUCKET`,
        /// `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `GITLAB`, `GITLAB_SELF_MANAGED`, `NO_SOURCE`, `S3`.
        /// </summary>
        [PolicyResourceProperty("type", "_mUnknown_Type")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Type;
        private bool _mUnknown_Type;
        public string? Type
        {
            get
            {
                if (!_mUnknown_Type) return _mValue_Type;
                throw new UndeferrableValueException("Value 'ProjectSource.Type' is not present");
            }
        }
    }
}
