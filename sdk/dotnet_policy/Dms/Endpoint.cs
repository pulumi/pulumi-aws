// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Dms
{
    [PolicyResourceType("aws:dms/endpoint:Endpoint")]
    public sealed class Endpoint : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// ARN for the certificate.
        /// </summary>
        [Input("certificateArn")]
        public string? CertificateArn;

        /// <summary>
        /// Name of the endpoint database.
        /// </summary>
        [Input("databaseName")]
        public string? DatabaseName;

        /// <summary>
        /// Configuration block for OpenSearch settings. See below.
        /// </summary>
        [Input("elasticsearchSettings")]
        public EndpointElasticsearchSettings? ElasticsearchSettings;

        /// <summary>
        /// ARN for the endpoint.
        /// </summary>
        [Input("endpointArn")]
        public string? EndpointArn;

        /// <summary>
        /// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
        /// </summary>
        [Input("endpointId")]
        public string? EndpointId;

        /// <summary>
        /// Type of endpoint. Valid values are `source`, `target`.
        /// </summary>
        [Input("endpointType")]
        public string? EndpointType;

        /// <summary>
        /// Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `aurora-serverless`, `aurora-postgresql-serverless`,`azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`,`redshift-serverless`, `s3`, `sqlserver`, `neptune` ,`sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
        /// </summary>
        [Input("engineName")]
        public string? EngineName;

        /// <summary>
        /// Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
        /// </summary>
        [Input("extraConnectionAttributes")]
        public string? ExtraConnectionAttributes;

        /// <summary>
        /// Configuration block for Kafka settings. See below.
        /// </summary>
        [Input("kafkaSettings")]
        public EndpointKafkaSettings? KafkaSettings;

        /// <summary>
        /// Configuration block for Kinesis settings. See below.
        /// </summary>
        [Input("kinesisSettings")]
        public EndpointKinesisSettings? KinesisSettings;

        /// <summary>
        /// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kms_key_arn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter `s3_settings.server_side_encryption_kms_key_id`. When `engine_name` is `redshift`, `kms_key_arn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("kmsKeyArn")]
        public string? KmsKeyArn;

        /// <summary>
        /// Configuration block for MongoDB settings. See below.
        /// </summary>
        [Input("mongodbSettings")]
        public EndpointMongodbSettings? MongodbSettings;

        /// <summary>
        /// Password to be used to login to the endpoint database.
        /// </summary>
        [Input("password")]
        public string? Password;

        [Input("pauseReplicationTasks")]
        public bool? PauseReplicationTasks;

        /// <summary>
        /// Port used by the endpoint database.
        /// </summary>
        [Input("port")]
        public int? Port;

        /// <summary>
        /// Configuration block for Postgres settings. See below.
        /// </summary>
        [Input("postgresSettings")]
        public EndpointPostgresSettings? PostgresSettings;

        [Input("redisSettings")]
        public EndpointRedisSettings? RedisSettings;

        /// <summary>
        /// Configuration block for Redshift settings. See below.
        /// </summary>
        [Input("redshiftSettings")]
        public EndpointRedshiftSettings? RedshiftSettings;

        /// <summary>
        /// (**Deprecated**, use the `aws.dms.S3Endpoint` resource instead) Configuration block for S3 settings. See below.
        /// </summary>
        [Input("s3Settings")]
        public EndpointS3Settings? S3Settings;

        /// <summary>
        /// ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by `secrets_manager_arn`. The role must allow the `iam:PassRole` action.
        /// 
        /// &gt; **Note:** You can specify one of two sets of values for these permissions. You can specify the values for this setting and `secrets_manager_arn`. Or you can specify clear-text values for `username`, `password` , `server_name`, and `port`. You can't specify both.
        /// </summary>
        [Input("secretsManagerAccessRoleArn")]
        public string? SecretsManagerAccessRoleArn;

        /// <summary>
        /// Full ARN, partial ARN, or friendly name of the Secrets Manager secret that contains the endpoint connection details. Supported only when `engine_name` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
        /// </summary>
        [Input("secretsManagerArn")]
        public string? SecretsManagerArn;

        /// <summary>
        /// Host name of the server.
        /// </summary>
        [Input("serverName")]
        public string? ServerName;

        /// <summary>
        /// ARN used by the service access IAM role for dynamodb endpoints.
        /// </summary>
        [Input("serviceAccessRole")]
        public string? ServiceAccessRole;

        /// <summary>
        /// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
        /// </summary>
        [Input("sslMode")]
        public string? SslMode;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// User name to be used to login to the endpoint database.
        /// </summary>
        [Input("username")]
        public string? Username;
    }
}
