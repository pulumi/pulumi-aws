// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Dms
{
    [PolicyResourceType("aws:dms/EndpointRedisSettings:EndpointRedisSettings")]
    public sealed class EndpointRedisSettings
    {
        /// <summary>
        /// The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.
        /// </summary>
        [Input("authPassword")]
        public string? AuthPassword;

        /// <summary>
        /// The type of authentication to perform when connecting to a Redis target. Options include `none`, `auth-token`, and `auth-role`. The `auth-token` option requires an `auth_password` value to be provided. The `auth-role` option requires `auth_user_name` and `auth_password` values to be provided.
        /// </summary>
        [Input("authType")]
        public string? AuthType;

        /// <summary>
        /// The username provided with the `auth-role` option of the AuthType setting for a Redis target endpoint.
        /// </summary>
        [Input("authUserName")]
        public string? AuthUserName;

        /// <summary>
        /// Transmission Control Protocol (TCP) port for the endpoint.
        /// </summary>
        [Input("port")]
        public int? Port;

        /// <summary>
        /// Fully qualified domain name of the endpoint.
        /// </summary>
        [Input("serverName")]
        public string? ServerName;

        /// <summary>
        /// The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.
        /// </summary>
        [Input("sslCaCertificateArn")]
        public string? SslCaCertificateArn;

        /// <summary>
        /// The plaintext option doesn't provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include `plaintext`, `ssl-encryption`. The default is `ssl-encryption`.
        /// </summary>
        [Input("sslSecurityProtocol")]
        public string? SslSecurityProtocol;
    }
}
