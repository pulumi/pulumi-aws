// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Dms.Outputs
{
    public sealed class EndpointS3Settings
    {
        /// <summary>
        /// Whether to add column name information to the .csv output file. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("addColumnName", "_mUnknown_AddColumnName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AddColumnName;
        private bool _mUnknown_AddColumnName;
        public bool? AddColumnName
        {
            get
            {
                if (!_mUnknown_AddColumnName) return _mValue_AddColumnName;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.AddColumnName' is not present");
            }
        }

        /// <summary>
        /// S3 object prefix.
        /// </summary>
        [PolicyResourceProperty("bucketFolder", "_mUnknown_BucketFolder")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BucketFolder;
        private bool _mUnknown_BucketFolder;
        public string? BucketFolder
        {
            get
            {
                if (!_mUnknown_BucketFolder) return _mValue_BucketFolder;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.BucketFolder' is not present");
            }
        }

        /// <summary>
        /// S3 bucket name.
        /// </summary>
        [PolicyResourceProperty("bucketName", "_mUnknown_BucketName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BucketName;
        private bool _mUnknown_BucketName;
        public string? BucketName
        {
            get
            {
                if (!_mUnknown_BucketName) return _mValue_BucketName;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.BucketName' is not present");
            }
        }

        /// <summary>
        /// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `none`, `private`, `public-read`, `public-read-write`, `authenticated-read`, `aws-exec-read`, `bucket-owner-read`, and `bucket-owner-full-control`. Default is `none`.
        /// </summary>
        [PolicyResourceProperty("cannedAclForObjects", "_mUnknown_CannedAclForObjects")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CannedAclForObjects;
        private bool _mUnknown_CannedAclForObjects;
        public string? CannedAclForObjects
        {
            get
            {
                if (!_mUnknown_CannedAclForObjects) return _mValue_CannedAclForObjects;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.CannedAclForObjects' is not present");
            }
        }

        /// <summary>
        /// Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("cdcInsertsAndUpdates", "_mUnknown_CdcInsertsAndUpdates")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_CdcInsertsAndUpdates;
        private bool _mUnknown_CdcInsertsAndUpdates;
        public bool? CdcInsertsAndUpdates
        {
            get
            {
                if (!_mUnknown_CdcInsertsAndUpdates) return _mValue_CdcInsertsAndUpdates;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.CdcInsertsAndUpdates' is not present");
            }
        }

        /// <summary>
        /// Whether to write insert operations to .csv or .parquet output files. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("cdcInsertsOnly", "_mUnknown_CdcInsertsOnly")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_CdcInsertsOnly;
        private bool _mUnknown_CdcInsertsOnly;
        public bool? CdcInsertsOnly
        {
            get
            {
                if (!_mUnknown_CdcInsertsOnly) return _mValue_CdcInsertsOnly;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.CdcInsertsOnly' is not present");
            }
        }

        /// <summary>
        /// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. Default is `60`.
        /// </summary>
        [PolicyResourceProperty("cdcMaxBatchInterval", "_mUnknown_CdcMaxBatchInterval")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_CdcMaxBatchInterval;
        private bool _mUnknown_CdcMaxBatchInterval;
        public int? CdcMaxBatchInterval
        {
            get
            {
                if (!_mUnknown_CdcMaxBatchInterval) return _mValue_CdcMaxBatchInterval;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.CdcMaxBatchInterval' is not present");
            }
        }

        /// <summary>
        /// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. Default is `32000`. **NOTE:** Previously, this setting was measured in megabytes but now represents kilobytes. Update configurations accordingly.
        /// </summary>
        [PolicyResourceProperty("cdcMinFileSize", "_mUnknown_CdcMinFileSize")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_CdcMinFileSize;
        private bool _mUnknown_CdcMinFileSize;
        public int? CdcMinFileSize
        {
            get
            {
                if (!_mUnknown_CdcMinFileSize) return _mValue_CdcMinFileSize;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.CdcMinFileSize' is not present");
            }
        }

        /// <summary>
        /// Folder path of CDC files. For an S3 source, this setting is required if a task captures change data; otherwise, it's optional. If `cdc_path` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
        /// </summary>
        [PolicyResourceProperty("cdcPath", "_mUnknown_CdcPath")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CdcPath;
        private bool _mUnknown_CdcPath;
        public string? CdcPath
        {
            get
            {
                if (!_mUnknown_CdcPath) return _mValue_CdcPath;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.CdcPath' is not present");
            }
        }

        /// <summary>
        /// Set to compress target files. Default is `NONE`. Valid values are `GZIP` and `NONE`.
        /// </summary>
        [PolicyResourceProperty("compressionType", "_mUnknown_CompressionType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CompressionType;
        private bool _mUnknown_CompressionType;
        public string? CompressionType
        {
            get
            {
                if (!_mUnknown_CompressionType) return _mValue_CompressionType;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.CompressionType' is not present");
            }
        }

        /// <summary>
        /// Delimiter used to separate columns in the source files. Default is `,`.
        /// </summary>
        [PolicyResourceProperty("csvDelimiter", "_mUnknown_CsvDelimiter")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CsvDelimiter;
        private bool _mUnknown_CsvDelimiter;
        public string? CsvDelimiter
        {
            get
            {
                if (!_mUnknown_CsvDelimiter) return _mValue_CsvDelimiter;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.CsvDelimiter' is not present");
            }
        }

        /// <summary>
        /// String to use for all columns not included in the supplemental log.
        /// </summary>
        [PolicyResourceProperty("csvNoSupValue", "_mUnknown_CsvNoSupValue")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CsvNoSupValue;
        private bool _mUnknown_CsvNoSupValue;
        public string? CsvNoSupValue
        {
            get
            {
                if (!_mUnknown_CsvNoSupValue) return _mValue_CsvNoSupValue;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.CsvNoSupValue' is not present");
            }
        }

        /// <summary>
        /// String to as null when writing to the target.
        /// </summary>
        [PolicyResourceProperty("csvNullValue", "_mUnknown_CsvNullValue")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CsvNullValue;
        private bool _mUnknown_CsvNullValue;
        public string? CsvNullValue
        {
            get
            {
                if (!_mUnknown_CsvNullValue) return _mValue_CsvNullValue;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.CsvNullValue' is not present");
            }
        }

        /// <summary>
        /// Delimiter used to separate rows in the source files. Default is `\n`.
        /// </summary>
        [PolicyResourceProperty("csvRowDelimiter", "_mUnknown_CsvRowDelimiter")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CsvRowDelimiter;
        private bool _mUnknown_CsvRowDelimiter;
        public string? CsvRowDelimiter
        {
            get
            {
                if (!_mUnknown_CsvRowDelimiter) return _mValue_CsvRowDelimiter;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.CsvRowDelimiter' is not present");
            }
        }

        /// <summary>
        /// Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`. Default is `csv`.
        /// </summary>
        [PolicyResourceProperty("dataFormat", "_mUnknown_DataFormat")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DataFormat;
        private bool _mUnknown_DataFormat;
        public string? DataFormat
        {
            get
            {
                if (!_mUnknown_DataFormat) return _mValue_DataFormat;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.DataFormat' is not present");
            }
        }

        /// <summary>
        /// Size of one data page in bytes. Default is `1048576` (1 MiB).
        /// </summary>
        [PolicyResourceProperty("dataPageSize", "_mUnknown_DataPageSize")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_DataPageSize;
        private bool _mUnknown_DataPageSize;
        public int? DataPageSize
        {
            get
            {
                if (!_mUnknown_DataPageSize) return _mValue_DataPageSize;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.DataPageSize' is not present");
            }
        }

        /// <summary>
        /// Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. Default is `SLASH`.
        /// </summary>
        [PolicyResourceProperty("datePartitionDelimiter", "_mUnknown_DatePartitionDelimiter")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DatePartitionDelimiter;
        private bool _mUnknown_DatePartitionDelimiter;
        public string? DatePartitionDelimiter
        {
            get
            {
                if (!_mUnknown_DatePartitionDelimiter) return _mValue_DatePartitionDelimiter;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.DatePartitionDelimiter' is not present");
            }
        }

        /// <summary>
        /// Partition S3 bucket folders based on transaction commit dates. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("datePartitionEnabled", "_mUnknown_DatePartitionEnabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_DatePartitionEnabled;
        private bool _mUnknown_DatePartitionEnabled;
        public bool? DatePartitionEnabled
        {
            get
            {
                if (!_mUnknown_DatePartitionEnabled) return _mValue_DatePartitionEnabled;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.DatePartitionEnabled' is not present");
            }
        }

        /// <summary>
        /// Date format to use during folder partitioning. Use this parameter when `date_partition_enabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. Default is `YYYYMMDD`.
        /// </summary>
        [PolicyResourceProperty("datePartitionSequence", "_mUnknown_DatePartitionSequence")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DatePartitionSequence;
        private bool _mUnknown_DatePartitionSequence;
        public string? DatePartitionSequence
        {
            get
            {
                if (!_mUnknown_DatePartitionSequence) return _mValue_DatePartitionSequence;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.DatePartitionSequence' is not present");
            }
        }

        /// <summary>
        /// Maximum size in bytes of an encoded dictionary page of a column. Default is `1048576` (1 MiB).
        /// </summary>
        [PolicyResourceProperty("dictPageSizeLimit", "_mUnknown_DictPageSizeLimit")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_DictPageSizeLimit;
        private bool _mUnknown_DictPageSizeLimit;
        public int? DictPageSizeLimit
        {
            get
            {
                if (!_mUnknown_DictPageSizeLimit) return _mValue_DictPageSizeLimit;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.DictPageSizeLimit' is not present");
            }
        }

        /// <summary>
        /// Whether to enable statistics for Parquet pages and row groups. Default is `true`.
        /// </summary>
        [PolicyResourceProperty("enableStatistics", "_mUnknown_EnableStatistics")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_EnableStatistics;
        private bool _mUnknown_EnableStatistics;
        public bool? EnableStatistics
        {
            get
            {
                if (!_mUnknown_EnableStatistics) return _mValue_EnableStatistics;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.EnableStatistics' is not present");
            }
        }

        /// <summary>
        /// Type of encoding to use. Value values are `rle_dictionary`, `plain`, and `plain_dictionary`. Default is `rle_dictionary`.
        /// </summary>
        [PolicyResourceProperty("encodingType", "_mUnknown_EncodingType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EncodingType;
        private bool _mUnknown_EncodingType;
        public string? EncodingType
        {
            get
            {
                if (!_mUnknown_EncodingType) return _mValue_EncodingType;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.EncodingType' is not present");
            }
        }

        /// <summary>
        /// Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are `SSE_S3` and `SSE_KMS`. Default is `SSE_S3`.
        /// </summary>
        [PolicyResourceProperty("encryptionMode", "_mUnknown_EncryptionMode")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EncryptionMode;
        private bool _mUnknown_EncryptionMode;
        public string? EncryptionMode
        {
            get
            {
                if (!_mUnknown_EncryptionMode) return _mValue_EncryptionMode;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.EncryptionMode' is not present");
            }
        }

        /// <summary>
        /// JSON document that describes how AWS DMS should interpret the data.
        /// </summary>
        [PolicyResourceProperty("externalTableDefinition", "_mUnknown_ExternalTableDefinition")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ExternalTableDefinition;
        private bool _mUnknown_ExternalTableDefinition;
        public string? ExternalTableDefinition
        {
            get
            {
                if (!_mUnknown_ExternalTableDefinition) return _mValue_ExternalTableDefinition;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.ExternalTableDefinition' is not present");
            }
        }

        /// <summary>
        /// Whether to integrate AWS Glue Data Catalog with an Amazon S3 target. See [Using AWS Glue Data Catalog with an Amazon S3 target for AWS DMS](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.GlueCatalog) for more information. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("glueCatalogGeneration", "_mUnknown_GlueCatalogGeneration")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_GlueCatalogGeneration;
        private bool _mUnknown_GlueCatalogGeneration;
        public bool? GlueCatalogGeneration
        {
            get
            {
                if (!_mUnknown_GlueCatalogGeneration) return _mValue_GlueCatalogGeneration;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.GlueCatalogGeneration' is not present");
            }
        }

        /// <summary>
        /// When this value is set to `1`, DMS ignores the first row header in a .csv file. Default is `0`.
        /// </summary>
        [PolicyResourceProperty("ignoreHeaderRows", "_mUnknown_IgnoreHeaderRows")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_IgnoreHeaderRows;
        private bool _mUnknown_IgnoreHeaderRows;
        public int? IgnoreHeaderRows
        {
            get
            {
                if (!_mUnknown_IgnoreHeaderRows) return _mValue_IgnoreHeaderRows;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.IgnoreHeaderRows' is not present");
            }
        }

        /// <summary>
        /// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("includeOpForFullLoad", "_mUnknown_IncludeOpForFullLoad")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_IncludeOpForFullLoad;
        private bool _mUnknown_IncludeOpForFullLoad;
        public bool? IncludeOpForFullLoad
        {
            get
            {
                if (!_mUnknown_IncludeOpForFullLoad) return _mValue_IncludeOpForFullLoad;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.IncludeOpForFullLoad' is not present");
            }
        }

        /// <summary>
        /// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. Default is `1048576` (1 GB).
        /// </summary>
        [PolicyResourceProperty("maxFileSize", "_mUnknown_MaxFileSize")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_MaxFileSize;
        private bool _mUnknown_MaxFileSize;
        public int? MaxFileSize
        {
            get
            {
                if (!_mUnknown_MaxFileSize) return _mValue_MaxFileSize;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.MaxFileSize' is not present");
            }
        }

        /// <summary>
        /// Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("parquetTimestampInMillisecond", "_mUnknown_ParquetTimestampInMillisecond")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ParquetTimestampInMillisecond;
        private bool _mUnknown_ParquetTimestampInMillisecond;
        public bool? ParquetTimestampInMillisecond
        {
            get
            {
                if (!_mUnknown_ParquetTimestampInMillisecond) return _mValue_ParquetTimestampInMillisecond;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.ParquetTimestampInMillisecond' is not present");
            }
        }

        /// <summary>
        /// Version of the .parquet file format. Default is `parquet-1-0`. Valid values are `parquet-1-0` and `parquet-2-0`.
        /// </summary>
        [PolicyResourceProperty("parquetVersion", "_mUnknown_ParquetVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ParquetVersion;
        private bool _mUnknown_ParquetVersion;
        public string? ParquetVersion
        {
            get
            {
                if (!_mUnknown_ParquetVersion) return _mValue_ParquetVersion;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.ParquetVersion' is not present");
            }
        }

        /// <summary>
        /// Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdc_path`. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("preserveTransactions", "_mUnknown_PreserveTransactions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_PreserveTransactions;
        private bool _mUnknown_PreserveTransactions;
        public bool? PreserveTransactions
        {
            get
            {
                if (!_mUnknown_PreserveTransactions) return _mValue_PreserveTransactions;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.PreserveTransactions' is not present");
            }
        }

        /// <summary>
        /// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
        /// </summary>
        [PolicyResourceProperty("rfc4180", "_mUnknown_Rfc4180")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Rfc4180;
        private bool _mUnknown_Rfc4180;
        public bool? Rfc4180
        {
            get
            {
                if (!_mUnknown_Rfc4180) return _mValue_Rfc4180;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.Rfc4180' is not present");
            }
        }

        /// <summary>
        /// Number of rows in a row group. Default is `10000`.
        /// </summary>
        [PolicyResourceProperty("rowGroupLength", "_mUnknown_RowGroupLength")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_RowGroupLength;
        private bool _mUnknown_RowGroupLength;
        public int? RowGroupLength
        {
            get
            {
                if (!_mUnknown_RowGroupLength) return _mValue_RowGroupLength;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.RowGroupLength' is not present");
            }
        }

        /// <summary>
        /// ARN or Id of KMS Key to use when `encryption_mode` is `SSE_KMS`.
        /// </summary>
        [PolicyResourceProperty("serverSideEncryptionKmsKeyId", "_mUnknown_ServerSideEncryptionKmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServerSideEncryptionKmsKeyId;
        private bool _mUnknown_ServerSideEncryptionKmsKeyId;
        public string? ServerSideEncryptionKmsKeyId
        {
            get
            {
                if (!_mUnknown_ServerSideEncryptionKmsKeyId) return _mValue_ServerSideEncryptionKmsKeyId;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.ServerSideEncryptionKmsKeyId' is not present");
            }
        }

        /// <summary>
        /// ARN of the IAM Role with permissions to read from or write to the S3 Bucket.
        /// </summary>
        [PolicyResourceProperty("serviceAccessRoleArn", "_mUnknown_ServiceAccessRoleArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ServiceAccessRoleArn;
        private bool _mUnknown_ServiceAccessRoleArn;
        public string? ServiceAccessRoleArn
        {
            get
            {
                if (!_mUnknown_ServiceAccessRoleArn) return _mValue_ServiceAccessRoleArn;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.ServiceAccessRoleArn' is not present");
            }
        }

        /// <summary>
        /// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
        /// </summary>
        [PolicyResourceProperty("timestampColumnName", "_mUnknown_TimestampColumnName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TimestampColumnName;
        private bool _mUnknown_TimestampColumnName;
        public string? TimestampColumnName
        {
            get
            {
                if (!_mUnknown_TimestampColumnName) return _mValue_TimestampColumnName;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.TimestampColumnName' is not present");
            }
        }

        /// <summary>
        /// Whether to use `csv_no_sup_value` for columns not included in the supplemental log.
        /// </summary>
        [PolicyResourceProperty("useCsvNoSupValue", "_mUnknown_UseCsvNoSupValue")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UseCsvNoSupValue;
        private bool _mUnknown_UseCsvNoSupValue;
        public bool? UseCsvNoSupValue
        {
            get
            {
                if (!_mUnknown_UseCsvNoSupValue) return _mValue_UseCsvNoSupValue;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.UseCsvNoSupValue' is not present");
            }
        }

        /// <summary>
        /// When set to true, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to true, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time. When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("useTaskStartTimeForFullLoadTimestamp", "_mUnknown_UseTaskStartTimeForFullLoadTimestamp")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_UseTaskStartTimeForFullLoadTimestamp;
        private bool _mUnknown_UseTaskStartTimeForFullLoadTimestamp;
        public bool? UseTaskStartTimeForFullLoadTimestamp
        {
            get
            {
                if (!_mUnknown_UseTaskStartTimeForFullLoadTimestamp) return _mValue_UseTaskStartTimeForFullLoadTimestamp;
                throw new UndeferrableValueException("Value 'EndpointS3Settings.UseTaskStartTimeForFullLoadTimestamp' is not present");
            }
        }
    }
}
