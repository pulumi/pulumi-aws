// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Dms
{
    [PolicyResourceType("aws:dms/replicationInstance:ReplicationInstance")]
    public sealed class ReplicationInstance : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The amount of storage (in gigabytes) to be initially allocated for the replication instance.
        /// </summary>
        [PolicyResourceProperty("allocatedStorage", "_mUnknown_AllocatedStorage")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_AllocatedStorage;
        private bool _mUnknown_AllocatedStorage;
        public int? AllocatedStorage
        {
            get
            {
                if (!_mUnknown_AllocatedStorage) return _mValue_AllocatedStorage;
                throw new UndeferrableValueException("Value 'ReplicationInstance.AllocatedStorage' is not present");
            }
        }

        /// <summary>
        /// Indicates that major version upgrades are allowed.
        /// </summary>
        [PolicyResourceProperty("allowMajorVersionUpgrade", "_mUnknown_AllowMajorVersionUpgrade")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AllowMajorVersionUpgrade;
        private bool _mUnknown_AllowMajorVersionUpgrade;
        public bool? AllowMajorVersionUpgrade
        {
            get
            {
                if (!_mUnknown_AllowMajorVersionUpgrade) return _mValue_AllowMajorVersionUpgrade;
                throw new UndeferrableValueException("Value 'ReplicationInstance.AllowMajorVersionUpgrade' is not present");
            }
        }

        /// <summary>
        /// Indicates whether the changes should be applied immediately or during the next maintenance window. Only used when updating an existing resource.
        /// </summary>
        [PolicyResourceProperty("applyImmediately", "_mUnknown_ApplyImmediately")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ApplyImmediately;
        private bool _mUnknown_ApplyImmediately;
        public bool? ApplyImmediately
        {
            get
            {
                if (!_mUnknown_ApplyImmediately) return _mValue_ApplyImmediately;
                throw new UndeferrableValueException("Value 'ReplicationInstance.ApplyImmediately' is not present");
            }
        }

        /// <summary>
        /// Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window.
        /// </summary>
        [PolicyResourceProperty("autoMinorVersionUpgrade", "_mUnknown_AutoMinorVersionUpgrade")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutoMinorVersionUpgrade;
        private bool _mUnknown_AutoMinorVersionUpgrade;
        public bool? AutoMinorVersionUpgrade
        {
            get
            {
                if (!_mUnknown_AutoMinorVersionUpgrade) return _mValue_AutoMinorVersionUpgrade;
                throw new UndeferrableValueException("Value 'ReplicationInstance.AutoMinorVersionUpgrade' is not present");
            }
        }

        /// <summary>
        /// The EC2 Availability Zone that the replication instance will be created in.
        /// </summary>
        [PolicyResourceProperty("availabilityZone", "_mUnknown_AvailabilityZone")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZone;
        private bool _mUnknown_AvailabilityZone;
        public string? AvailabilityZone
        {
            get
            {
                if (!_mUnknown_AvailabilityZone) return _mValue_AvailabilityZone;
                throw new UndeferrableValueException("Value 'ReplicationInstance.AvailabilityZone' is not present");
            }
        }

        /// <summary>
        /// The engine version number of the replication instance.
        /// </summary>
        [PolicyResourceProperty("engineVersion", "_mUnknown_EngineVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EngineVersion;
        private bool _mUnknown_EngineVersion;
        public string? EngineVersion
        {
            get
            {
                if (!_mUnknown_EngineVersion) return _mValue_EngineVersion;
                throw new UndeferrableValueException("Value 'ReplicationInstance.EngineVersion' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kms_key_arn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        /// </summary>
        [PolicyResourceProperty("kmsKeyArn", "_mUnknown_KmsKeyArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyArn;
        private bool _mUnknown_KmsKeyArn;
        public string? KmsKeyArn
        {
            get
            {
                if (!_mUnknown_KmsKeyArn) return _mValue_KmsKeyArn;
                throw new UndeferrableValueException("Value 'ReplicationInstance.KmsKeyArn' is not present");
            }
        }

        /// <summary>
        /// Specifies if the replication instance is a multi-az deployment. You cannot set the `availability_zone` parameter if the `multi_az` parameter is set to `true`.
        /// </summary>
        [PolicyResourceProperty("multiAz", "_mUnknown_MultiAz")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_MultiAz;
        private bool _mUnknown_MultiAz;
        public bool? MultiAz
        {
            get
            {
                if (!_mUnknown_MultiAz) return _mValue_MultiAz;
                throw new UndeferrableValueException("Value 'ReplicationInstance.MultiAz' is not present");
            }
        }

        /// <summary>
        /// The type of IP address protocol used by a replication instance. Valid values: `IPV4`, `DUAL`.
        /// </summary>
        [PolicyResourceProperty("networkType", "_mUnknown_NetworkType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NetworkType;
        private bool _mUnknown_NetworkType;
        public string? NetworkType
        {
            get
            {
                if (!_mUnknown_NetworkType) return _mValue_NetworkType;
                throw new UndeferrableValueException("Value 'ReplicationInstance.NetworkType' is not present");
            }
        }

        /// <summary>
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        /// 
        /// - Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week.
        /// - Format: `ddd:hh24:mi-ddd:hh24:mi`
        /// - Valid Days: `mon, tue, wed, thu, fri, sat, sun`
        /// - Constraints: Minimum 30-minute window.
        /// </summary>
        [PolicyResourceProperty("preferredMaintenanceWindow", "_mUnknown_PreferredMaintenanceWindow")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PreferredMaintenanceWindow;
        private bool _mUnknown_PreferredMaintenanceWindow;
        public string? PreferredMaintenanceWindow
        {
            get
            {
                if (!_mUnknown_PreferredMaintenanceWindow) return _mValue_PreferredMaintenanceWindow;
                throw new UndeferrableValueException("Value 'ReplicationInstance.PreferredMaintenanceWindow' is not present");
            }
        }

        /// <summary>
        /// Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address.
        /// </summary>
        [PolicyResourceProperty("publiclyAccessible", "_mUnknown_PubliclyAccessible")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_PubliclyAccessible;
        private bool _mUnknown_PubliclyAccessible;
        public bool? PubliclyAccessible
        {
            get
            {
                if (!_mUnknown_PubliclyAccessible) return _mValue_PubliclyAccessible;
                throw new UndeferrableValueException("Value 'ReplicationInstance.PubliclyAccessible' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the replication instance.
        /// </summary>
        [PolicyResourceProperty("replicationInstanceArn", "_mUnknown_ReplicationInstanceArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ReplicationInstanceArn;
        private bool _mUnknown_ReplicationInstanceArn;
        public string? ReplicationInstanceArn
        {
            get
            {
                if (!_mUnknown_ReplicationInstanceArn) return _mValue_ReplicationInstanceArn;
                throw new UndeferrableValueException("Value 'ReplicationInstance.ReplicationInstanceArn' is not present");
            }
        }

        /// <summary>
        /// The compute and memory capacity of the replication instance as specified by the replication instance class. See [AWS DMS User Guide](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.Types.html) for available instance sizes and advice on which one to choose.
        /// </summary>
        [PolicyResourceProperty("replicationInstanceClass", "_mUnknown_ReplicationInstanceClass")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ReplicationInstanceClass;
        private bool _mUnknown_ReplicationInstanceClass;
        public string? ReplicationInstanceClass
        {
            get
            {
                if (!_mUnknown_ReplicationInstanceClass) return _mValue_ReplicationInstanceClass;
                throw new UndeferrableValueException("Value 'ReplicationInstance.ReplicationInstanceClass' is not present");
            }
        }

        /// <summary>
        /// The replication instance identifier. This parameter is stored as a lowercase string.
        /// 
        /// - Must contain from 1 to 63 alphanumeric characters or hyphens.
        /// - First character must be a letter.
        /// - Cannot end with a hyphen
        /// - Cannot contain two consecutive hyphens.
        /// </summary>
        [PolicyResourceProperty("replicationInstanceId", "_mUnknown_ReplicationInstanceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ReplicationInstanceId;
        private bool _mUnknown_ReplicationInstanceId;
        public string? ReplicationInstanceId
        {
            get
            {
                if (!_mUnknown_ReplicationInstanceId) return _mValue_ReplicationInstanceId;
                throw new UndeferrableValueException("Value 'ReplicationInstance.ReplicationInstanceId' is not present");
            }
        }

        /// <summary>
        /// A list of the private IP addresses of the replication instance.
        /// </summary>
        [PolicyResourceProperty("replicationInstancePrivateIps", "_mUnknown_ReplicationInstancePrivateIps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_ReplicationInstancePrivateIps;
        private bool _mUnknown_ReplicationInstancePrivateIps;
        public List<string>? ReplicationInstancePrivateIps
        {
            get
            {
                if (!_mUnknown_ReplicationInstancePrivateIps) return _mValue_ReplicationInstancePrivateIps;
                throw new UndeferrableValueException("Value 'ReplicationInstance.ReplicationInstancePrivateIps' is not present");
            }
        }

        /// <summary>
        /// A list of the public IP addresses of the replication instance.
        /// </summary>
        [PolicyResourceProperty("replicationInstancePublicIps", "_mUnknown_ReplicationInstancePublicIps")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_ReplicationInstancePublicIps;
        private bool _mUnknown_ReplicationInstancePublicIps;
        public List<string>? ReplicationInstancePublicIps
        {
            get
            {
                if (!_mUnknown_ReplicationInstancePublicIps) return _mValue_ReplicationInstancePublicIps;
                throw new UndeferrableValueException("Value 'ReplicationInstance.ReplicationInstancePublicIps' is not present");
            }
        }

        /// <summary>
        /// A subnet group to associate with the replication instance.
        /// </summary>
        [PolicyResourceProperty("replicationSubnetGroupId", "_mUnknown_ReplicationSubnetGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ReplicationSubnetGroupId;
        private bool _mUnknown_ReplicationSubnetGroupId;
        public string? ReplicationSubnetGroupId
        {
            get
            {
                if (!_mUnknown_ReplicationSubnetGroupId) return _mValue_ReplicationSubnetGroupId;
                throw new UndeferrableValueException("Value 'ReplicationInstance.ReplicationSubnetGroupId' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ReplicationInstance.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'ReplicationInstance.TagsAll' is not present");
            }
        }

        /// <summary>
        /// A list of VPC security group IDs to be used with the replication instance. The VPC security groups must work with the VPC containing the replication instance.
        /// </summary>
        [PolicyResourceProperty("vpcSecurityGroupIds", "_mUnknown_VpcSecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_VpcSecurityGroupIds;
        private bool _mUnknown_VpcSecurityGroupIds;
        public List<string>? VpcSecurityGroupIds
        {
            get
            {
                if (!_mUnknown_VpcSecurityGroupIds) return _mValue_VpcSecurityGroupIds;
                throw new UndeferrableValueException("Value 'ReplicationInstance.VpcSecurityGroupIds' is not present");
            }
        }
    }

    [PolicyResourceType("aws:dms/replicationInstance:ReplicationInstance")]
    public sealed class ReplicationInstanceArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The amount of storage (in gigabytes) to be initially allocated for the replication instance.
        /// </summary>
        [PolicyResourceProperty("allocatedStorage", "_mUnknown_AllocatedStorage")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_AllocatedStorage;
        private bool _mUnknown_AllocatedStorage;
        public int? AllocatedStorage
        {
            get
            {
                if (!_mUnknown_AllocatedStorage) return _mValue_AllocatedStorage;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.AllocatedStorage' is not present");
            }
        }

        /// <summary>
        /// Indicates that major version upgrades are allowed.
        /// </summary>
        [PolicyResourceProperty("allowMajorVersionUpgrade", "_mUnknown_AllowMajorVersionUpgrade")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AllowMajorVersionUpgrade;
        private bool _mUnknown_AllowMajorVersionUpgrade;
        public bool? AllowMajorVersionUpgrade
        {
            get
            {
                if (!_mUnknown_AllowMajorVersionUpgrade) return _mValue_AllowMajorVersionUpgrade;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.AllowMajorVersionUpgrade' is not present");
            }
        }

        /// <summary>
        /// Indicates whether the changes should be applied immediately or during the next maintenance window. Only used when updating an existing resource.
        /// </summary>
        [PolicyResourceProperty("applyImmediately", "_mUnknown_ApplyImmediately")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ApplyImmediately;
        private bool _mUnknown_ApplyImmediately;
        public bool? ApplyImmediately
        {
            get
            {
                if (!_mUnknown_ApplyImmediately) return _mValue_ApplyImmediately;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.ApplyImmediately' is not present");
            }
        }

        /// <summary>
        /// Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window.
        /// </summary>
        [PolicyResourceProperty("autoMinorVersionUpgrade", "_mUnknown_AutoMinorVersionUpgrade")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutoMinorVersionUpgrade;
        private bool _mUnknown_AutoMinorVersionUpgrade;
        public bool? AutoMinorVersionUpgrade
        {
            get
            {
                if (!_mUnknown_AutoMinorVersionUpgrade) return _mValue_AutoMinorVersionUpgrade;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.AutoMinorVersionUpgrade' is not present");
            }
        }

        /// <summary>
        /// The EC2 Availability Zone that the replication instance will be created in.
        /// </summary>
        [PolicyResourceProperty("availabilityZone", "_mUnknown_AvailabilityZone")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZone;
        private bool _mUnknown_AvailabilityZone;
        public string? AvailabilityZone
        {
            get
            {
                if (!_mUnknown_AvailabilityZone) return _mValue_AvailabilityZone;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.AvailabilityZone' is not present");
            }
        }

        /// <summary>
        /// The engine version number of the replication instance.
        /// </summary>
        [PolicyResourceProperty("engineVersion", "_mUnknown_EngineVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EngineVersion;
        private bool _mUnknown_EngineVersion;
        public string? EngineVersion
        {
            get
            {
                if (!_mUnknown_EngineVersion) return _mValue_EngineVersion;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.EngineVersion' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kms_key_arn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        /// </summary>
        [PolicyResourceProperty("kmsKeyArn", "_mUnknown_KmsKeyArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyArn;
        private bool _mUnknown_KmsKeyArn;
        public string? KmsKeyArn
        {
            get
            {
                if (!_mUnknown_KmsKeyArn) return _mValue_KmsKeyArn;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.KmsKeyArn' is not present");
            }
        }

        /// <summary>
        /// Specifies if the replication instance is a multi-az deployment. You cannot set the `availability_zone` parameter if the `multi_az` parameter is set to `true`.
        /// </summary>
        [PolicyResourceProperty("multiAz", "_mUnknown_MultiAz")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_MultiAz;
        private bool _mUnknown_MultiAz;
        public bool? MultiAz
        {
            get
            {
                if (!_mUnknown_MultiAz) return _mValue_MultiAz;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.MultiAz' is not present");
            }
        }

        /// <summary>
        /// The type of IP address protocol used by a replication instance. Valid values: `IPV4`, `DUAL`.
        /// </summary>
        [PolicyResourceProperty("networkType", "_mUnknown_NetworkType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NetworkType;
        private bool _mUnknown_NetworkType;
        public string? NetworkType
        {
            get
            {
                if (!_mUnknown_NetworkType) return _mValue_NetworkType;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.NetworkType' is not present");
            }
        }

        /// <summary>
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        /// 
        /// - Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week.
        /// - Format: `ddd:hh24:mi-ddd:hh24:mi`
        /// - Valid Days: `mon, tue, wed, thu, fri, sat, sun`
        /// - Constraints: Minimum 30-minute window.
        /// </summary>
        [PolicyResourceProperty("preferredMaintenanceWindow", "_mUnknown_PreferredMaintenanceWindow")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PreferredMaintenanceWindow;
        private bool _mUnknown_PreferredMaintenanceWindow;
        public string? PreferredMaintenanceWindow
        {
            get
            {
                if (!_mUnknown_PreferredMaintenanceWindow) return _mValue_PreferredMaintenanceWindow;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.PreferredMaintenanceWindow' is not present");
            }
        }

        /// <summary>
        /// Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address.
        /// </summary>
        [PolicyResourceProperty("publiclyAccessible", "_mUnknown_PubliclyAccessible")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_PubliclyAccessible;
        private bool _mUnknown_PubliclyAccessible;
        public bool? PubliclyAccessible
        {
            get
            {
                if (!_mUnknown_PubliclyAccessible) return _mValue_PubliclyAccessible;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.PubliclyAccessible' is not present");
            }
        }

        /// <summary>
        /// The compute and memory capacity of the replication instance as specified by the replication instance class. See [AWS DMS User Guide](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.Types.html) for available instance sizes and advice on which one to choose.
        /// </summary>
        [PolicyResourceProperty("replicationInstanceClass", "_mUnknown_ReplicationInstanceClass")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ReplicationInstanceClass;
        private bool _mUnknown_ReplicationInstanceClass;
        public string? ReplicationInstanceClass
        {
            get
            {
                if (!_mUnknown_ReplicationInstanceClass) return _mValue_ReplicationInstanceClass;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.ReplicationInstanceClass' is not present");
            }
        }

        /// <summary>
        /// The replication instance identifier. This parameter is stored as a lowercase string.
        /// 
        /// - Must contain from 1 to 63 alphanumeric characters or hyphens.
        /// - First character must be a letter.
        /// - Cannot end with a hyphen
        /// - Cannot contain two consecutive hyphens.
        /// </summary>
        [PolicyResourceProperty("replicationInstanceId", "_mUnknown_ReplicationInstanceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ReplicationInstanceId;
        private bool _mUnknown_ReplicationInstanceId;
        public string? ReplicationInstanceId
        {
            get
            {
                if (!_mUnknown_ReplicationInstanceId) return _mValue_ReplicationInstanceId;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.ReplicationInstanceId' is not present");
            }
        }

        /// <summary>
        /// A subnet group to associate with the replication instance.
        /// </summary>
        [PolicyResourceProperty("replicationSubnetGroupId", "_mUnknown_ReplicationSubnetGroupId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ReplicationSubnetGroupId;
        private bool _mUnknown_ReplicationSubnetGroupId;
        public string? ReplicationSubnetGroupId
        {
            get
            {
                if (!_mUnknown_ReplicationSubnetGroupId) return _mValue_ReplicationSubnetGroupId;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.ReplicationSubnetGroupId' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.Tags' is not present");
            }
        }

        /// <summary>
        /// A list of VPC security group IDs to be used with the replication instance. The VPC security groups must work with the VPC containing the replication instance.
        /// </summary>
        [PolicyResourceProperty("vpcSecurityGroupIds", "_mUnknown_VpcSecurityGroupIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_VpcSecurityGroupIds;
        private bool _mUnknown_VpcSecurityGroupIds;
        public List<string>? VpcSecurityGroupIds
        {
            get
            {
                if (!_mUnknown_VpcSecurityGroupIds) return _mValue_VpcSecurityGroupIds;
                throw new UndeferrableValueException("Value 'ReplicationInstanceArgs.VpcSecurityGroupIds' is not present");
            }
        }
    }
}
