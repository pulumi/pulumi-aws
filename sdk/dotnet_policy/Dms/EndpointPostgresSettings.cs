// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Dms
{
    [PolicyResourceType("aws:dms/EndpointPostgresSettings:EndpointPostgresSettings")]
    public sealed class EndpointPostgresSettings
    {
        /// <summary>
        /// For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.
        /// </summary>
        [Input("afterConnectScript")]
        public string? AfterConnectScript;

        /// <summary>
        /// The Babelfish for Aurora PostgreSQL database name for the endpoint.
        /// </summary>
        [Input("babelfishDatabaseName")]
        public string? BabelfishDatabaseName;

        /// <summary>
        /// To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.
        /// </summary>
        [Input("captureDdls")]
        public bool? CaptureDdls;

        /// <summary>
        /// Specifies the default behavior of the replication's handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.
        /// </summary>
        [Input("databaseMode")]
        public string? DatabaseMode;

        /// <summary>
        /// Sets the schema in which the operational DDL database artifacts are created. Default is `public`.
        /// </summary>
        [Input("ddlArtifactsSchema")]
        public string? DdlArtifactsSchema;

        /// <summary>
        /// Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is `60`.
        /// </summary>
        [Input("executeTimeout")]
        public int? ExecuteTimeout;

        /// <summary>
        /// When set to `true`, this value causes a task to fail if the actual size of a LOB column is greater than the specified `LobMaxSize`. Default is `false`.
        /// </summary>
        [Input("failTasksOnLobTruncation")]
        public bool? FailTasksOnLobTruncation;

        /// <summary>
        /// The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.
        /// </summary>
        [Input("heartbeatEnable")]
        public bool? HeartbeatEnable;

        /// <summary>
        /// Sets the WAL heartbeat frequency (in minutes). Default value is `5`.
        /// </summary>
        [Input("heartbeatFrequency")]
        public int? HeartbeatFrequency;

        /// <summary>
        /// Sets the schema in which the heartbeat artifacts are created. Default value is `public`.
        /// </summary>
        [Input("heartbeatSchema")]
        public string? HeartbeatSchema;

        /// <summary>
        /// You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is `false`.
        /// </summary>
        [Input("mapBooleanAsBoolean")]
        public bool? MapBooleanAsBoolean;

        /// <summary>
        /// Optional When true, DMS migrates JSONB values as CLOB.
        /// </summary>
        [Input("mapJsonbAsClob")]
        public bool? MapJsonbAsClob;

        /// <summary>
        /// Optional When true, DMS migrates LONG values as VARCHAR.
        /// </summary>
        [Input("mapLongVarcharAs")]
        public string? MapLongVarcharAs;

        /// <summary>
        /// Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is `32,768 KB`.
        /// </summary>
        [Input("maxFileSize")]
        public int? MaxFileSize;

        /// <summary>
        /// Specifies the plugin to use to create a replication slot. Valid values: `pglogical`, `test_decoding`.
        /// </summary>
        [Input("pluginName")]
        public string? PluginName;

        /// <summary>
        /// Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.
        /// </summary>
        [Input("slotName")]
        public string? SlotName;
    }
}
