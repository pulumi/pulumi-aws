// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.NetworkManager.Inputs
{
    public sealed class GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs
    {
        /// <summary>
        /// List of strings containing Autonomous System Numbers (ASNs) to assign to Core Network Edges. By default, the core network automatically assigns an ASN for each Core Network Edge but you can optionally define the ASN in the edge-locations for each Region. The ASN uses an array of integer ranges only from `64512` to `65534` and `4200000000` to `4294967294` expressed as a string like `"64512-65534"`. No other ASN ranges can be used.
        /// </summary>
        [PolicyResourceProperty("asnRanges", "_mUnknown_AsnRanges")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_AsnRanges;
        private bool _mUnknown_AsnRanges;
        public List<string>? AsnRanges
        {
            get
            {
                if (!_mUnknown_AsnRanges) return _mValue_AsnRanges;
                throw new UndeferrableValueException("Value 'GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs.AsnRanges' is not present");
            }
        }

        /// <summary>
        /// A block value of AWS Region locations where you're creating Core Network Edges. Detailed below.
        /// </summary>
        [PolicyResourceProperty("edgeLocations", "_mUnknown_EdgeLocations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Inputs.GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArgs>? _mValue_EdgeLocations;
        private bool _mUnknown_EdgeLocations;
        public List<Inputs.GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArgs>? EdgeLocations
        {
            get
            {
                if (!_mUnknown_EdgeLocations) return _mValue_EdgeLocations;
                throw new UndeferrableValueException("Value 'GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs.EdgeLocations' is not present");
            }
        }

        /// <summary>
        /// The Classless Inter-Domain Routing (CIDR) block range used to create tunnels for AWS Transit Gateway Connect. The format is standard AWS CIDR range (for example, `10.0.1.0/24`). You can optionally define the inside CIDR in the Core Network Edges section per Region. The minimum is a `/24` for IPv4 or `/64` for IPv6. You can provide multiple `/24` subnets or a larger CIDR range. If you define a larger CIDR range, new Core Network Edges will be automatically assigned `/24` and `/64` subnets from the larger CIDR. an Inside CIDR block is required for attaching Connect attachments to a Core Network Edge.
        /// </summary>
        [PolicyResourceProperty("insideCidrBlocks", "_mUnknown_InsideCidrBlocks")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_InsideCidrBlocks;
        private bool _mUnknown_InsideCidrBlocks;
        public List<string>? InsideCidrBlocks
        {
            get
            {
                if (!_mUnknown_InsideCidrBlocks) return _mValue_InsideCidrBlocks;
                throw new UndeferrableValueException("Value 'GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs.InsideCidrBlocks' is not present");
            }
        }

        /// <summary>
        /// Indicates whether the core network forwards traffic over multiple equal-cost routes using VPN. The value can be either `true` or `false`. The default is `true`.
        /// </summary>
        [PolicyResourceProperty("vpnEcmpSupport", "_mUnknown_VpnEcmpSupport")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_VpnEcmpSupport;
        private bool _mUnknown_VpnEcmpSupport;
        public bool? VpnEcmpSupport
        {
            get
            {
                if (!_mUnknown_VpnEcmpSupport) return _mValue_VpnEcmpSupport;
                throw new UndeferrableValueException("Value 'GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs.VpnEcmpSupport' is not present");
            }
        }
    }
}
