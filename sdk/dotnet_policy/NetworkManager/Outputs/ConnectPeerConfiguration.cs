// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.NetworkManager.Outputs
{
    public sealed class ConnectPeerConfiguration
    {
        [PolicyResourceProperty("bgpConfigurations", "_mUnknown_BgpConfigurations")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<Outputs.ConnectPeerConfigurationBgpConfiguration>? _mValue_BgpConfigurations;
        private bool _mUnknown_BgpConfigurations;
        public List<Outputs.ConnectPeerConfigurationBgpConfiguration>? BgpConfigurations
        {
            get
            {
                if (!_mUnknown_BgpConfigurations) return _mValue_BgpConfigurations;
                throw new UndeferrableValueException("Value 'ConnectPeerConfiguration.BgpConfigurations' is not present");
            }
        }

        /// <summary>
        /// A Connect peer core network address.
        /// </summary>
        [PolicyResourceProperty("coreNetworkAddress", "_mUnknown_CoreNetworkAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CoreNetworkAddress;
        private bool _mUnknown_CoreNetworkAddress;
        public string? CoreNetworkAddress
        {
            get
            {
                if (!_mUnknown_CoreNetworkAddress) return _mValue_CoreNetworkAddress;
                throw new UndeferrableValueException("Value 'ConnectPeerConfiguration.CoreNetworkAddress' is not present");
            }
        }

        /// <summary>
        /// The inside IP addresses used for BGP peering. Required when the Connect attachment protocol is `GRE`. See `aws.networkmanager.ConnectAttachment` for details.
        /// </summary>
        [PolicyResourceProperty("insideCidrBlocks", "_mUnknown_InsideCidrBlocks")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_InsideCidrBlocks;
        private bool _mUnknown_InsideCidrBlocks;
        public List<string>? InsideCidrBlocks
        {
            get
            {
                if (!_mUnknown_InsideCidrBlocks) return _mValue_InsideCidrBlocks;
                throw new UndeferrableValueException("Value 'ConnectPeerConfiguration.InsideCidrBlocks' is not present");
            }
        }

        /// <summary>
        /// The Connect peer address.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("peerAddress", "_mUnknown_PeerAddress")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PeerAddress;
        private bool _mUnknown_PeerAddress;
        public string? PeerAddress
        {
            get
            {
                if (!_mUnknown_PeerAddress) return _mValue_PeerAddress;
                throw new UndeferrableValueException("Value 'ConnectPeerConfiguration.PeerAddress' is not present");
            }
        }

        [PolicyResourceProperty("protocol", "_mUnknown_Protocol")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Protocol;
        private bool _mUnknown_Protocol;
        public string? Protocol
        {
            get
            {
                if (!_mUnknown_Protocol) return _mValue_Protocol;
                throw new UndeferrableValueException("Value 'ConnectPeerConfiguration.Protocol' is not present");
            }
        }
    }
}
