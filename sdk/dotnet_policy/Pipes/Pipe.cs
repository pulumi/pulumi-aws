// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Pipes
{
    [PolicyResourceType("aws:pipes/pipe:Pipe")]
    public sealed class Pipe : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// ARN of this pipe.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// A description of the pipe. At most 512 characters.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
        /// </summary>
        [Input("desiredState")]
        public string? DesiredState;

        /// <summary>
        /// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
        /// </summary>
        [Input("enrichment")]
        public string? Enrichment;

        /// <summary>
        /// Parameters to configure enrichment for your pipe. Detailed below.
        /// </summary>
        [Input("enrichmentParameters")]
        public PipeEnrichmentParameters? EnrichmentParameters;

        /// <summary>
        /// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt pipe data. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN. If not set, EventBridge uses an AWS owned key to encrypt pipe data.
        /// </summary>
        [Input("kmsKeyIdentifier")]
        public string? KmsKeyIdentifier;

        /// <summary>
        /// Logging configuration settings for the pipe. Detailed below.
        /// </summary>
        [Input("logConfiguration")]
        public PipeLogConfiguration? LogConfiguration;

        /// <summary>
        /// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix;

        /// <summary>
        /// ARN of the role that allows the pipe to send data to the target.
        /// </summary>
        [Input("roleArn")]
        public string? RoleArn;

        /// <summary>
        /// Source resource of the pipe. This field typically requires an ARN (Amazon Resource Name). However, when using a self-managed Kafka cluster, you should use a different format. Instead of an ARN, use 'smk://' followed by the bootstrap server's address.
        /// </summary>
        [Input("source")]
        public string? Source;

        /// <summary>
        /// Parameters to configure a source for the pipe. Detailed below.
        /// </summary>
        [Input("sourceParameters")]
        public PipeSourceParameters? SourceParameters;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        /// <summary>
        /// Target resource of the pipe (typically an ARN).
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("target")]
        public string? Target;

        /// <summary>
        /// Parameters to configure a target for your pipe. Detailed below.
        /// </summary>
        [Input("targetParameters")]
        public PipeTargetParameters? TargetParameters;
    }
}
