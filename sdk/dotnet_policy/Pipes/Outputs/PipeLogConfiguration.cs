// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Pipes.Outputs
{
    public sealed class PipeLogConfiguration
    {
        /// <summary>
        /// Amazon CloudWatch Logs logging configuration settings for the pipe. Detailed below.
        /// </summary>
        [PolicyResourceProperty("cloudwatchLogsLogDestination", "_mUnknown_CloudwatchLogsLogDestination")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.PipeLogConfigurationCloudwatchLogsLogDestination? _mValue_CloudwatchLogsLogDestination;
        private bool _mUnknown_CloudwatchLogsLogDestination;
        public Outputs.PipeLogConfigurationCloudwatchLogsLogDestination? CloudwatchLogsLogDestination
        {
            get
            {
                if (!_mUnknown_CloudwatchLogsLogDestination) return _mValue_CloudwatchLogsLogDestination;
                throw new UndeferrableValueException("Value 'PipeLogConfiguration.CloudwatchLogsLogDestination' is not present");
            }
        }

        /// <summary>
        /// Amazon Kinesis Data Firehose logging configuration settings for the pipe. Detailed below.
        /// </summary>
        [PolicyResourceProperty("firehoseLogDestination", "_mUnknown_FirehoseLogDestination")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.PipeLogConfigurationFirehoseLogDestination? _mValue_FirehoseLogDestination;
        private bool _mUnknown_FirehoseLogDestination;
        public Outputs.PipeLogConfigurationFirehoseLogDestination? FirehoseLogDestination
        {
            get
            {
                if (!_mUnknown_FirehoseLogDestination) return _mValue_FirehoseLogDestination;
                throw new UndeferrableValueException("Value 'PipeLogConfiguration.FirehoseLogDestination' is not present");
            }
        }

        /// <summary>
        /// String list that specifies whether the execution data (specifically, the `payload`, `awsRequest`, and `awsResponse` fields) is included in the log messages for this pipe. This applies to all log destinations for the pipe. Valid values `ALL`.
        /// </summary>
        [PolicyResourceProperty("includeExecutionDatas", "_mUnknown_IncludeExecutionDatas")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_IncludeExecutionDatas;
        private bool _mUnknown_IncludeExecutionDatas;
        public List<string>? IncludeExecutionDatas
        {
            get
            {
                if (!_mUnknown_IncludeExecutionDatas) return _mValue_IncludeExecutionDatas;
                throw new UndeferrableValueException("Value 'PipeLogConfiguration.IncludeExecutionDatas' is not present");
            }
        }

        /// <summary>
        /// The level of logging detail to include. Valid values `OFF`, `ERROR`, `INFO` and `TRACE`.
        /// </summary>
        [PolicyResourceProperty("level", "_mUnknown_Level")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Level;
        private bool _mUnknown_Level;
        public string? Level
        {
            get
            {
                if (!_mUnknown_Level) return _mValue_Level;
                throw new UndeferrableValueException("Value 'PipeLogConfiguration.Level' is not present");
            }
        }

        /// <summary>
        /// Amazon S3 logging configuration settings for the pipe. Detailed below.
        /// </summary>
        [PolicyResourceProperty("s3LogDestination", "_mUnknown_S3LogDestination")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Outputs.PipeLogConfigurationS3LogDestination? _mValue_S3LogDestination;
        private bool _mUnknown_S3LogDestination;
        public Outputs.PipeLogConfigurationS3LogDestination? S3LogDestination
        {
            get
            {
                if (!_mUnknown_S3LogDestination) return _mValue_S3LogDestination;
                throw new UndeferrableValueException("Value 'PipeLogConfiguration.S3LogDestination' is not present");
            }
        }
    }
}
