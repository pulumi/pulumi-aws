// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Pinpoint
{
    [PolicyResourceType("aws:pinpoint/apnsChannel:ApnsChannel")]
    public sealed class ApnsChannel : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The application ID.
        /// </summary>
        [PolicyResourceProperty("applicationId", "_mUnknown_ApplicationId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ApplicationId;
        private bool _mUnknown_ApplicationId;
        public string? ApplicationId
        {
            get
            {
                if (!_mUnknown_ApplicationId) return _mValue_ApplicationId;
                throw new UndeferrableValueException("Value 'ApnsChannel.ApplicationId' is not present");
            }
        }

        /// <summary>
        /// The ID assigned to your iOS app. To find this value, choose Certificates, IDs &amp; Profiles, choose App IDs in the Identifiers section, and choose your app.
        /// </summary>
        [PolicyResourceProperty("bundleId", "_mUnknown_BundleId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BundleId;
        private bool _mUnknown_BundleId;
        public string? BundleId
        {
            get
            {
                if (!_mUnknown_BundleId) return _mValue_BundleId;
                throw new UndeferrableValueException("Value 'ApnsChannel.BundleId' is not present");
            }
        }

        /// <summary>
        /// The pem encoded TLS Certificate from Apple.
        /// </summary>
        [PolicyResourceProperty("certificate", "_mUnknown_Certificate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Certificate;
        private bool _mUnknown_Certificate;
        public string? Certificate
        {
            get
            {
                if (!_mUnknown_Certificate) return _mValue_Certificate;
                throw new UndeferrableValueException("Value 'ApnsChannel.Certificate' is not present");
            }
        }

        /// <summary>
        /// The default authentication method used for APNs.
        /// __NOTE__: Amazon Pinpoint uses this default for every APNs push notification that you send using the console.
        /// You can override the default when you send a message programmatically using the Amazon Pinpoint API, the AWS CLI, or an AWS SDK.
        /// If your default authentication type fails, Amazon Pinpoint doesn't attempt to use the other authentication type.
        /// 
        /// One of the following sets of credentials is also required.
        /// 
        /// If you choose to use __Certificate credentials__ you will have to provide:
        /// </summary>
        [PolicyResourceProperty("defaultAuthenticationMethod", "_mUnknown_DefaultAuthenticationMethod")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultAuthenticationMethod;
        private bool _mUnknown_DefaultAuthenticationMethod;
        public string? DefaultAuthenticationMethod
        {
            get
            {
                if (!_mUnknown_DefaultAuthenticationMethod) return _mValue_DefaultAuthenticationMethod;
                throw new UndeferrableValueException("Value 'ApnsChannel.DefaultAuthenticationMethod' is not present");
            }
        }

        /// <summary>
        /// Whether the channel is enabled or disabled. Defaults to `true`.
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'ApnsChannel.Enabled' is not present");
            }
        }

        /// <summary>
        /// The Certificate Private Key file (ie. `.key` file).
        /// 
        /// If you choose to use __Key credentials__ you will have to provide:
        /// </summary>
        [PolicyResourceProperty("privateKey", "_mUnknown_PrivateKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrivateKey;
        private bool _mUnknown_PrivateKey;
        public string? PrivateKey
        {
            get
            {
                if (!_mUnknown_PrivateKey) return _mValue_PrivateKey;
                throw new UndeferrableValueException("Value 'ApnsChannel.PrivateKey' is not present");
            }
        }

        /// <summary>
        /// The ID assigned to your Apple developer account team. This value is provided on the Membership page.
        /// </summary>
        [PolicyResourceProperty("teamId", "_mUnknown_TeamId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TeamId;
        private bool _mUnknown_TeamId;
        public string? TeamId
        {
            get
            {
                if (!_mUnknown_TeamId) return _mValue_TeamId;
                throw new UndeferrableValueException("Value 'ApnsChannel.TeamId' is not present");
            }
        }

        /// <summary>
        /// The `.p8` file that you download from your Apple developer account when you create an authentication key.
        /// </summary>
        [PolicyResourceProperty("tokenKey", "_mUnknown_TokenKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TokenKey;
        private bool _mUnknown_TokenKey;
        public string? TokenKey
        {
            get
            {
                if (!_mUnknown_TokenKey) return _mValue_TokenKey;
                throw new UndeferrableValueException("Value 'ApnsChannel.TokenKey' is not present");
            }
        }

        /// <summary>
        /// The ID assigned to your signing key. To find this value, choose Certificates, IDs &amp; Profiles, and choose your key in the Keys section.
        /// </summary>
        [PolicyResourceProperty("tokenKeyId", "_mUnknown_TokenKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TokenKeyId;
        private bool _mUnknown_TokenKeyId;
        public string? TokenKeyId
        {
            get
            {
                if (!_mUnknown_TokenKeyId) return _mValue_TokenKeyId;
                throw new UndeferrableValueException("Value 'ApnsChannel.TokenKeyId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:pinpoint/apnsChannel:ApnsChannel")]
    public sealed class ApnsChannelArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The application ID.
        /// </summary>
        [PolicyResourceProperty("applicationId", "_mUnknown_ApplicationId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ApplicationId;
        private bool _mUnknown_ApplicationId;
        public string? ApplicationId
        {
            get
            {
                if (!_mUnknown_ApplicationId) return _mValue_ApplicationId;
                throw new UndeferrableValueException("Value 'ApnsChannelArgs.ApplicationId' is not present");
            }
        }

        /// <summary>
        /// The ID assigned to your iOS app. To find this value, choose Certificates, IDs &amp; Profiles, choose App IDs in the Identifiers section, and choose your app.
        /// </summary>
        [PolicyResourceProperty("bundleId", "_mUnknown_BundleId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_BundleId;
        private bool _mUnknown_BundleId;
        public string? BundleId
        {
            get
            {
                if (!_mUnknown_BundleId) return _mValue_BundleId;
                throw new UndeferrableValueException("Value 'ApnsChannelArgs.BundleId' is not present");
            }
        }

        /// <summary>
        /// The pem encoded TLS Certificate from Apple.
        /// </summary>
        [PolicyResourceProperty("certificate", "_mUnknown_Certificate")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Certificate;
        private bool _mUnknown_Certificate;
        public string? Certificate
        {
            get
            {
                if (!_mUnknown_Certificate) return _mValue_Certificate;
                throw new UndeferrableValueException("Value 'ApnsChannelArgs.Certificate' is not present");
            }
        }

        /// <summary>
        /// The default authentication method used for APNs.
        /// __NOTE__: Amazon Pinpoint uses this default for every APNs push notification that you send using the console.
        /// You can override the default when you send a message programmatically using the Amazon Pinpoint API, the AWS CLI, or an AWS SDK.
        /// If your default authentication type fails, Amazon Pinpoint doesn't attempt to use the other authentication type.
        /// 
        /// One of the following sets of credentials is also required.
        /// 
        /// If you choose to use __Certificate credentials__ you will have to provide:
        /// </summary>
        [PolicyResourceProperty("defaultAuthenticationMethod", "_mUnknown_DefaultAuthenticationMethod")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DefaultAuthenticationMethod;
        private bool _mUnknown_DefaultAuthenticationMethod;
        public string? DefaultAuthenticationMethod
        {
            get
            {
                if (!_mUnknown_DefaultAuthenticationMethod) return _mValue_DefaultAuthenticationMethod;
                throw new UndeferrableValueException("Value 'ApnsChannelArgs.DefaultAuthenticationMethod' is not present");
            }
        }

        /// <summary>
        /// Whether the channel is enabled or disabled. Defaults to `true`.
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'ApnsChannelArgs.Enabled' is not present");
            }
        }

        /// <summary>
        /// The Certificate Private Key file (ie. `.key` file).
        /// 
        /// If you choose to use __Key credentials__ you will have to provide:
        /// </summary>
        [PolicyResourceProperty("privateKey", "_mUnknown_PrivateKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PrivateKey;
        private bool _mUnknown_PrivateKey;
        public string? PrivateKey
        {
            get
            {
                if (!_mUnknown_PrivateKey) return _mValue_PrivateKey;
                throw new UndeferrableValueException("Value 'ApnsChannelArgs.PrivateKey' is not present");
            }
        }

        /// <summary>
        /// The ID assigned to your Apple developer account team. This value is provided on the Membership page.
        /// </summary>
        [PolicyResourceProperty("teamId", "_mUnknown_TeamId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TeamId;
        private bool _mUnknown_TeamId;
        public string? TeamId
        {
            get
            {
                if (!_mUnknown_TeamId) return _mValue_TeamId;
                throw new UndeferrableValueException("Value 'ApnsChannelArgs.TeamId' is not present");
            }
        }

        /// <summary>
        /// The `.p8` file that you download from your Apple developer account when you create an authentication key.
        /// </summary>
        [PolicyResourceProperty("tokenKey", "_mUnknown_TokenKey")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TokenKey;
        private bool _mUnknown_TokenKey;
        public string? TokenKey
        {
            get
            {
                if (!_mUnknown_TokenKey) return _mValue_TokenKey;
                throw new UndeferrableValueException("Value 'ApnsChannelArgs.TokenKey' is not present");
            }
        }

        /// <summary>
        /// The ID assigned to your signing key. To find this value, choose Certificates, IDs &amp; Profiles, and choose your key in the Keys section.
        /// </summary>
        [PolicyResourceProperty("tokenKeyId", "_mUnknown_TokenKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_TokenKeyId;
        private bool _mUnknown_TokenKeyId;
        public string? TokenKeyId
        {
            get
            {
                if (!_mUnknown_TokenKeyId) return _mValue_TokenKeyId;
                throw new UndeferrableValueException("Value 'ApnsChannelArgs.TokenKeyId' is not present");
            }
        }
    }
}
