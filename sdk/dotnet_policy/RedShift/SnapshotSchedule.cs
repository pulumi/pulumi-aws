// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.RedShift
{
    [PolicyResourceType("aws:redshift/snapshotSchedule:SnapshotSchedule")]
    public sealed class SnapshotSchedule : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the Redshift Snapshot Schedule.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'SnapshotSchedule.Arn' is not present");
            }
        }

        /// <summary>
        /// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example `cron(30 12 *)` or `rate(12 hours)`.
        /// </summary>
        [PolicyResourceProperty("definitions", "_mUnknown_Definitions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Definitions;
        private bool _mUnknown_Definitions;
        public List<string>? Definitions
        {
            get
            {
                if (!_mUnknown_Definitions) return _mValue_Definitions;
                throw new UndeferrableValueException("Value 'SnapshotSchedule.Definitions' is not present");
            }
        }

        /// <summary>
        /// The description of the snapshot schedule.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'SnapshotSchedule.Description' is not present");
            }
        }

        /// <summary>
        /// Whether to destroy all associated clusters with this snapshot schedule on deletion. Must be enabled and applied before attempting deletion.
        /// </summary>
        [PolicyResourceProperty("forceDestroy", "_mUnknown_ForceDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ForceDestroy;
        private bool _mUnknown_ForceDestroy;
        public bool? ForceDestroy
        {
            get
            {
                if (!_mUnknown_ForceDestroy) return _mValue_ForceDestroy;
                throw new UndeferrableValueException("Value 'SnapshotSchedule.ForceDestroy' is not present");
            }
        }

        /// <summary>
        /// The snapshot schedule identifier. If omitted, this provider will assign a random, unique identifier.
        /// </summary>
        [PolicyResourceProperty("identifier", "_mUnknown_Identifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Identifier;
        private bool _mUnknown_Identifier;
        public string? Identifier
        {
            get
            {
                if (!_mUnknown_Identifier) return _mValue_Identifier;
                throw new UndeferrableValueException("Value 'SnapshotSchedule.Identifier' is not present");
            }
        }

        /// <summary>
        /// Creates a unique
        /// identifier beginning with the specified prefix. Conflicts with `identifier`.
        /// </summary>
        [PolicyResourceProperty("identifierPrefix", "_mUnknown_IdentifierPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IdentifierPrefix;
        private bool _mUnknown_IdentifierPrefix;
        public string? IdentifierPrefix
        {
            get
            {
                if (!_mUnknown_IdentifierPrefix) return _mValue_IdentifierPrefix;
                throw new UndeferrableValueException("Value 'SnapshotSchedule.IdentifierPrefix' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'SnapshotSchedule.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'SnapshotSchedule.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:redshift/snapshotSchedule:SnapshotSchedule")]
    public sealed class SnapshotScheduleArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example `cron(30 12 *)` or `rate(12 hours)`.
        /// </summary>
        [PolicyResourceProperty("definitions", "_mUnknown_Definitions")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_Definitions;
        private bool _mUnknown_Definitions;
        public List<string>? Definitions
        {
            get
            {
                if (!_mUnknown_Definitions) return _mValue_Definitions;
                throw new UndeferrableValueException("Value 'SnapshotScheduleArgs.Definitions' is not present");
            }
        }

        /// <summary>
        /// The description of the snapshot schedule.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'SnapshotScheduleArgs.Description' is not present");
            }
        }

        /// <summary>
        /// Whether to destroy all associated clusters with this snapshot schedule on deletion. Must be enabled and applied before attempting deletion.
        /// </summary>
        [PolicyResourceProperty("forceDestroy", "_mUnknown_ForceDestroy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ForceDestroy;
        private bool _mUnknown_ForceDestroy;
        public bool? ForceDestroy
        {
            get
            {
                if (!_mUnknown_ForceDestroy) return _mValue_ForceDestroy;
                throw new UndeferrableValueException("Value 'SnapshotScheduleArgs.ForceDestroy' is not present");
            }
        }

        /// <summary>
        /// The snapshot schedule identifier. If omitted, this provider will assign a random, unique identifier.
        /// </summary>
        [PolicyResourceProperty("identifier", "_mUnknown_Identifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Identifier;
        private bool _mUnknown_Identifier;
        public string? Identifier
        {
            get
            {
                if (!_mUnknown_Identifier) return _mValue_Identifier;
                throw new UndeferrableValueException("Value 'SnapshotScheduleArgs.Identifier' is not present");
            }
        }

        /// <summary>
        /// Creates a unique
        /// identifier beginning with the specified prefix. Conflicts with `identifier`.
        /// </summary>
        [PolicyResourceProperty("identifierPrefix", "_mUnknown_IdentifierPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IdentifierPrefix;
        private bool _mUnknown_IdentifierPrefix;
        public string? IdentifierPrefix
        {
            get
            {
                if (!_mUnknown_IdentifierPrefix) return _mValue_IdentifierPrefix;
                throw new UndeferrableValueException("Value 'SnapshotScheduleArgs.IdentifierPrefix' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'SnapshotScheduleArgs.Tags' is not present");
            }
        }
    }
}
