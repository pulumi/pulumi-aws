// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.RedShift
{
    [PolicyResourceType("aws:redshift/eventSubscription:EventSubscription")]
    public sealed class EventSubscription : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the Redshift event notification subscription
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// The AWS customer account associated with the Redshift event notification subscription
        /// </summary>
        [Input("customerAwsId")]
        public string? CustomerAwsId;

        /// <summary>
        /// A boolean flag to enable/disable the subscription. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public bool? Enabled;

        /// <summary>
        /// A list of event categories for a SourceType that you want to subscribe to. See https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html or run `aws redshift describe-event-categories`.
        /// </summary>
        [Input("eventCategories")]
        public List<string>? EventCategories;

        /// <summary>
        /// The name of the Redshift event subscription.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// The event severity to be published by the notification subscription. Valid options are `INFO` or `ERROR`. Default value of `INFO`.
        /// </summary>
        [Input("severity")]
        public string? Severity;

        /// <summary>
        /// The ARN of the SNS topic to send events to.
        /// </summary>
        [Input("snsTopicArn")]
        public string? SnsTopicArn;

        /// <summary>
        /// A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a `source_type` must also be specified.
        /// </summary>
        [Input("sourceIds")]
        public List<string>? SourceIds;

        /// <summary>
        /// The type of source that will be generating the events. Valid options are `cluster`, `cluster-parameter-group`, `cluster-security-group`, `cluster-snapshot`, or `scheduled-action`. If not set, all sources will be subscribed to.
        /// </summary>
        [Input("sourceType")]
        public string? SourceType;

        [Input("status")]
        public string? Status;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
