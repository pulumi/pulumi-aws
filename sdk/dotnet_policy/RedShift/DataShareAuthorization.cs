// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.RedShift
{
    [PolicyResourceType("aws:redshift/dataShareAuthorization:DataShareAuthorization")]
    public sealed class DataShareAuthorization : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Whether to allow write operations for a datashare.
        /// </summary>
        [PolicyResourceProperty("allowWrites", "_mUnknown_AllowWrites")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AllowWrites;
        private bool _mUnknown_AllowWrites;
        public bool? AllowWrites
        {
            get
            {
                if (!_mUnknown_AllowWrites) return _mValue_AllowWrites;
                throw new UndeferrableValueException("Value 'DataShareAuthorization.AllowWrites' is not present");
            }
        }

        /// <summary>
        /// Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
        /// </summary>
        [PolicyResourceProperty("consumerIdentifier", "_mUnknown_ConsumerIdentifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConsumerIdentifier;
        private bool _mUnknown_ConsumerIdentifier;
        public string? ConsumerIdentifier
        {
            get
            {
                if (!_mUnknown_ConsumerIdentifier) return _mValue_ConsumerIdentifier;
                throw new UndeferrableValueException("Value 'DataShareAuthorization.ConsumerIdentifier' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("dataShareArn", "_mUnknown_DataShareArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DataShareArn;
        private bool _mUnknown_DataShareArn;
        public string? DataShareArn
        {
            get
            {
                if (!_mUnknown_DataShareArn) return _mValue_DataShareArn;
                throw new UndeferrableValueException("Value 'DataShareAuthorization.DataShareArn' is not present");
            }
        }

        /// <summary>
        /// Identifier of a datashare to show its managing entity.
        /// </summary>
        [PolicyResourceProperty("managedBy", "_mUnknown_ManagedBy")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ManagedBy;
        private bool _mUnknown_ManagedBy;
        public string? ManagedBy
        {
            get
            {
                if (!_mUnknown_ManagedBy) return _mValue_ManagedBy;
                throw new UndeferrableValueException("Value 'DataShareAuthorization.ManagedBy' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of the producer.
        /// </summary>
        [PolicyResourceProperty("producerArn", "_mUnknown_ProducerArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ProducerArn;
        private bool _mUnknown_ProducerArn;
        public string? ProducerArn
        {
            get
            {
                if (!_mUnknown_ProducerArn) return _mValue_ProducerArn;
                throw new UndeferrableValueException("Value 'DataShareAuthorization.ProducerArn' is not present");
            }
        }
    }

    [PolicyResourceType("aws:redshift/dataShareAuthorization:DataShareAuthorization")]
    public sealed class DataShareAuthorizationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Whether to allow write operations for a datashare.
        /// </summary>
        [PolicyResourceProperty("allowWrites", "_mUnknown_AllowWrites")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AllowWrites;
        private bool _mUnknown_AllowWrites;
        public bool? AllowWrites
        {
            get
            {
                if (!_mUnknown_AllowWrites) return _mValue_AllowWrites;
                throw new UndeferrableValueException("Value 'DataShareAuthorizationArgs.AllowWrites' is not present");
            }
        }

        /// <summary>
        /// Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
        /// </summary>
        [PolicyResourceProperty("consumerIdentifier", "_mUnknown_ConsumerIdentifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ConsumerIdentifier;
        private bool _mUnknown_ConsumerIdentifier;
        public string? ConsumerIdentifier
        {
            get
            {
                if (!_mUnknown_ConsumerIdentifier) return _mValue_ConsumerIdentifier;
                throw new UndeferrableValueException("Value 'DataShareAuthorizationArgs.ConsumerIdentifier' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [PolicyResourceProperty("dataShareArn", "_mUnknown_DataShareArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DataShareArn;
        private bool _mUnknown_DataShareArn;
        public string? DataShareArn
        {
            get
            {
                if (!_mUnknown_DataShareArn) return _mValue_DataShareArn;
                throw new UndeferrableValueException("Value 'DataShareAuthorizationArgs.DataShareArn' is not present");
            }
        }
    }
}
