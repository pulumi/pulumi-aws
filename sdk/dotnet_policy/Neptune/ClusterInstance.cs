// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Neptune
{
    [PolicyResourceType("aws:neptune/clusterInstance:ClusterInstance")]
    public sealed class ClusterInstance : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The hostname of the instance. See also `endpoint` and `port`.
        /// </summary>
        [PolicyResourceProperty("address", "_mUnknown_Address")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Address;
        private bool _mUnknown_Address;
        public string? Address
        {
            get
            {
                if (!_mUnknown_Address) return _mValue_Address;
                throw new UndeferrableValueException("Value 'ClusterInstance.Address' is not present");
            }
        }

        /// <summary>
        /// Specifies whether any instance modifications
        /// are applied immediately, or during the next maintenance window. Default is`false`.
        /// </summary>
        [PolicyResourceProperty("applyImmediately", "_mUnknown_ApplyImmediately")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ApplyImmediately;
        private bool _mUnknown_ApplyImmediately;
        public bool? ApplyImmediately
        {
            get
            {
                if (!_mUnknown_ApplyImmediately) return _mValue_ApplyImmediately;
                throw new UndeferrableValueException("Value 'ClusterInstance.ApplyImmediately' is not present");
            }
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of neptune instance
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'ClusterInstance.Arn' is not present");
            }
        }

        /// <summary>
        /// Indicates that minor engine upgrades will be applied automatically to the instance during the maintenance window. Default is `true`.
        /// </summary>
        [PolicyResourceProperty("autoMinorVersionUpgrade", "_mUnknown_AutoMinorVersionUpgrade")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutoMinorVersionUpgrade;
        private bool _mUnknown_AutoMinorVersionUpgrade;
        public bool? AutoMinorVersionUpgrade
        {
            get
            {
                if (!_mUnknown_AutoMinorVersionUpgrade) return _mValue_AutoMinorVersionUpgrade;
                throw new UndeferrableValueException("Value 'ClusterInstance.AutoMinorVersionUpgrade' is not present");
            }
        }

        /// <summary>
        /// The EC2 Availability Zone that the neptune instance is created in.
        /// </summary>
        [PolicyResourceProperty("availabilityZone", "_mUnknown_AvailabilityZone")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZone;
        private bool _mUnknown_AvailabilityZone;
        public string? AvailabilityZone
        {
            get
            {
                if (!_mUnknown_AvailabilityZone) return _mValue_AvailabilityZone;
                throw new UndeferrableValueException("Value 'ClusterInstance.AvailabilityZone' is not present");
            }
        }

        /// <summary>
        /// The identifier of the `aws.neptune.Cluster` in which to launch this instance.
        /// </summary>
        [PolicyResourceProperty("clusterIdentifier", "_mUnknown_ClusterIdentifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ClusterIdentifier;
        private bool _mUnknown_ClusterIdentifier;
        public string? ClusterIdentifier
        {
            get
            {
                if (!_mUnknown_ClusterIdentifier) return _mValue_ClusterIdentifier;
                throw new UndeferrableValueException("Value 'ClusterInstance.ClusterIdentifier' is not present");
            }
        }

        /// <summary>
        /// The region-unique, immutable identifier for the neptune instance.
        /// </summary>
        [PolicyResourceProperty("dbiResourceId", "_mUnknown_DbiResourceId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DbiResourceId;
        private bool _mUnknown_DbiResourceId;
        public string? DbiResourceId
        {
            get
            {
                if (!_mUnknown_DbiResourceId) return _mValue_DbiResourceId;
                throw new UndeferrableValueException("Value 'ClusterInstance.DbiResourceId' is not present");
            }
        }

        /// <summary>
        /// The connection endpoint in `address:port` format.
        /// </summary>
        [PolicyResourceProperty("endpoint", "_mUnknown_Endpoint")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Endpoint;
        private bool _mUnknown_Endpoint;
        public string? Endpoint
        {
            get
            {
                if (!_mUnknown_Endpoint) return _mValue_Endpoint;
                throw new UndeferrableValueException("Value 'ClusterInstance.Endpoint' is not present");
            }
        }

        /// <summary>
        /// The name of the database engine to be used for the neptune instance. Defaults to `neptune`. Valid Values: `neptune`.
        /// </summary>
        [PolicyResourceProperty("engine", "_mUnknown_Engine")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Engine;
        private bool _mUnknown_Engine;
        public string? Engine
        {
            get
            {
                if (!_mUnknown_Engine) return _mValue_Engine;
                throw new UndeferrableValueException("Value 'ClusterInstance.Engine' is not present");
            }
        }

        /// <summary>
        /// The neptune engine version. Currently configuring this argumnet has no effect.
        /// </summary>
        [PolicyResourceProperty("engineVersion", "_mUnknown_EngineVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EngineVersion;
        private bool _mUnknown_EngineVersion;
        public string? EngineVersion
        {
            get
            {
                if (!_mUnknown_EngineVersion) return _mValue_EngineVersion;
                throw new UndeferrableValueException("Value 'ClusterInstance.EngineVersion' is not present");
            }
        }

        /// <summary>
        /// The identifier for the neptune instance, if omitted, this provider will assign a random, unique identifier.
        /// </summary>
        [PolicyResourceProperty("identifier", "_mUnknown_Identifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Identifier;
        private bool _mUnknown_Identifier;
        public string? Identifier
        {
            get
            {
                if (!_mUnknown_Identifier) return _mValue_Identifier;
                throw new UndeferrableValueException("Value 'ClusterInstance.Identifier' is not present");
            }
        }

        /// <summary>
        /// Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
        /// </summary>
        [PolicyResourceProperty("identifierPrefix", "_mUnknown_IdentifierPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IdentifierPrefix;
        private bool _mUnknown_IdentifierPrefix;
        public string? IdentifierPrefix
        {
            get
            {
                if (!_mUnknown_IdentifierPrefix) return _mValue_IdentifierPrefix;
                throw new UndeferrableValueException("Value 'ClusterInstance.IdentifierPrefix' is not present");
            }
        }

        /// <summary>
        /// The instance class to use.
        /// </summary>
        [PolicyResourceProperty("instanceClass", "_mUnknown_InstanceClass")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceClass;
        private bool _mUnknown_InstanceClass;
        public string? InstanceClass
        {
            get
            {
                if (!_mUnknown_InstanceClass) return _mValue_InstanceClass;
                throw new UndeferrableValueException("Value 'ClusterInstance.InstanceClass' is not present");
            }
        }

        /// <summary>
        /// The ARN for the KMS encryption key if one is set to the neptune cluster.
        /// </summary>
        [PolicyResourceProperty("kmsKeyArn", "_mUnknown_KmsKeyArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyArn;
        private bool _mUnknown_KmsKeyArn;
        public string? KmsKeyArn
        {
            get
            {
                if (!_mUnknown_KmsKeyArn) return _mValue_KmsKeyArn;
                throw new UndeferrableValueException("Value 'ClusterInstance.KmsKeyArn' is not present");
            }
        }

        /// <summary>
        /// The name of the neptune parameter group to associate with this instance.
        /// </summary>
        [PolicyResourceProperty("neptuneParameterGroupName", "_mUnknown_NeptuneParameterGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NeptuneParameterGroupName;
        private bool _mUnknown_NeptuneParameterGroupName;
        public string? NeptuneParameterGroupName
        {
            get
            {
                if (!_mUnknown_NeptuneParameterGroupName) return _mValue_NeptuneParameterGroupName;
                throw new UndeferrableValueException("Value 'ClusterInstance.NeptuneParameterGroupName' is not present");
            }
        }

        /// <summary>
        /// A subnet group to associate with this neptune instance. **NOTE:** This must match the `neptune_subnet_group_name` of the attached `aws.neptune.Cluster`.
        /// </summary>
        [PolicyResourceProperty("neptuneSubnetGroupName", "_mUnknown_NeptuneSubnetGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NeptuneSubnetGroupName;
        private bool _mUnknown_NeptuneSubnetGroupName;
        public string? NeptuneSubnetGroupName
        {
            get
            {
                if (!_mUnknown_NeptuneSubnetGroupName) return _mValue_NeptuneSubnetGroupName;
                throw new UndeferrableValueException("Value 'ClusterInstance.NeptuneSubnetGroupName' is not present");
            }
        }

        /// <summary>
        /// The port on which the DB accepts connections. Defaults to `8182`.
        /// </summary>
        [PolicyResourceProperty("port", "_mUnknown_Port")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Port;
        private bool _mUnknown_Port;
        public int? Port
        {
            get
            {
                if (!_mUnknown_Port) return _mValue_Port;
                throw new UndeferrableValueException("Value 'ClusterInstance.Port' is not present");
            }
        }

        /// <summary>
        /// The daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00"
        /// </summary>
        [PolicyResourceProperty("preferredBackupWindow", "_mUnknown_PreferredBackupWindow")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PreferredBackupWindow;
        private bool _mUnknown_PreferredBackupWindow;
        public string? PreferredBackupWindow
        {
            get
            {
                if (!_mUnknown_PreferredBackupWindow) return _mValue_PreferredBackupWindow;
                throw new UndeferrableValueException("Value 'ClusterInstance.PreferredBackupWindow' is not present");
            }
        }

        /// <summary>
        /// The window to perform maintenance in.
        /// Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
        /// </summary>
        [PolicyResourceProperty("preferredMaintenanceWindow", "_mUnknown_PreferredMaintenanceWindow")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PreferredMaintenanceWindow;
        private bool _mUnknown_PreferredMaintenanceWindow;
        public string? PreferredMaintenanceWindow
        {
            get
            {
                if (!_mUnknown_PreferredMaintenanceWindow) return _mValue_PreferredMaintenanceWindow;
                throw new UndeferrableValueException("Value 'ClusterInstance.PreferredMaintenanceWindow' is not present");
            }
        }

        /// <summary>
        /// Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer.
        /// </summary>
        [PolicyResourceProperty("promotionTier", "_mUnknown_PromotionTier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_PromotionTier;
        private bool _mUnknown_PromotionTier;
        public int? PromotionTier
        {
            get
            {
                if (!_mUnknown_PromotionTier) return _mValue_PromotionTier;
                throw new UndeferrableValueException("Value 'ClusterInstance.PromotionTier' is not present");
            }
        }

        /// <summary>
        /// Bool to control if instance is publicly accessible. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("publiclyAccessible", "_mUnknown_PubliclyAccessible")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_PubliclyAccessible;
        private bool _mUnknown_PubliclyAccessible;
        public bool? PubliclyAccessible
        {
            get
            {
                if (!_mUnknown_PubliclyAccessible) return _mValue_PubliclyAccessible;
                throw new UndeferrableValueException("Value 'ClusterInstance.PubliclyAccessible' is not present");
            }
        }

        /// <summary>
        /// Determines whether a final DB snapshot is created before the DB instance is deleted.
        /// </summary>
        [PolicyResourceProperty("skipFinalSnapshot", "_mUnknown_SkipFinalSnapshot")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SkipFinalSnapshot;
        private bool _mUnknown_SkipFinalSnapshot;
        public bool? SkipFinalSnapshot
        {
            get
            {
                if (!_mUnknown_SkipFinalSnapshot) return _mValue_SkipFinalSnapshot;
                throw new UndeferrableValueException("Value 'ClusterInstance.SkipFinalSnapshot' is not present");
            }
        }

        /// <summary>
        /// Specifies whether the neptune cluster is encrypted.
        /// </summary>
        [PolicyResourceProperty("storageEncrypted", "_mUnknown_StorageEncrypted")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_StorageEncrypted;
        private bool _mUnknown_StorageEncrypted;
        public bool? StorageEncrypted
        {
            get
            {
                if (!_mUnknown_StorageEncrypted) return _mValue_StorageEncrypted;
                throw new UndeferrableValueException("Value 'ClusterInstance.StorageEncrypted' is not present");
            }
        }

        /// <summary>
        /// Storage type associated with the cluster `standard/iopt1`.
        /// </summary>
        [PolicyResourceProperty("storageType", "_mUnknown_StorageType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_StorageType;
        private bool _mUnknown_StorageType;
        public string? StorageType
        {
            get
            {
                if (!_mUnknown_StorageType) return _mValue_StorageType;
                throw new UndeferrableValueException("Value 'ClusterInstance.StorageType' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ClusterInstance.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'ClusterInstance.TagsAll' is not present");
            }
        }

        /// <summary>
        /// Boolean indicating if this instance is writable. `False` indicates this instance is a read replica.
        /// </summary>
        [PolicyResourceProperty("writer", "_mUnknown_Writer")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Writer;
        private bool _mUnknown_Writer;
        public bool? Writer
        {
            get
            {
                if (!_mUnknown_Writer) return _mValue_Writer;
                throw new UndeferrableValueException("Value 'ClusterInstance.Writer' is not present");
            }
        }
    }

    [PolicyResourceType("aws:neptune/clusterInstance:ClusterInstance")]
    public sealed class ClusterInstanceArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Specifies whether any instance modifications
        /// are applied immediately, or during the next maintenance window. Default is`false`.
        /// </summary>
        [PolicyResourceProperty("applyImmediately", "_mUnknown_ApplyImmediately")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_ApplyImmediately;
        private bool _mUnknown_ApplyImmediately;
        public bool? ApplyImmediately
        {
            get
            {
                if (!_mUnknown_ApplyImmediately) return _mValue_ApplyImmediately;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.ApplyImmediately' is not present");
            }
        }

        /// <summary>
        /// Indicates that minor engine upgrades will be applied automatically to the instance during the maintenance window. Default is `true`.
        /// </summary>
        [PolicyResourceProperty("autoMinorVersionUpgrade", "_mUnknown_AutoMinorVersionUpgrade")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_AutoMinorVersionUpgrade;
        private bool _mUnknown_AutoMinorVersionUpgrade;
        public bool? AutoMinorVersionUpgrade
        {
            get
            {
                if (!_mUnknown_AutoMinorVersionUpgrade) return _mValue_AutoMinorVersionUpgrade;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.AutoMinorVersionUpgrade' is not present");
            }
        }

        /// <summary>
        /// The EC2 Availability Zone that the neptune instance is created in.
        /// </summary>
        [PolicyResourceProperty("availabilityZone", "_mUnknown_AvailabilityZone")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_AvailabilityZone;
        private bool _mUnknown_AvailabilityZone;
        public string? AvailabilityZone
        {
            get
            {
                if (!_mUnknown_AvailabilityZone) return _mValue_AvailabilityZone;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.AvailabilityZone' is not present");
            }
        }

        /// <summary>
        /// The identifier of the `aws.neptune.Cluster` in which to launch this instance.
        /// </summary>
        [PolicyResourceProperty("clusterIdentifier", "_mUnknown_ClusterIdentifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_ClusterIdentifier;
        private bool _mUnknown_ClusterIdentifier;
        public string? ClusterIdentifier
        {
            get
            {
                if (!_mUnknown_ClusterIdentifier) return _mValue_ClusterIdentifier;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.ClusterIdentifier' is not present");
            }
        }

        /// <summary>
        /// The name of the database engine to be used for the neptune instance. Defaults to `neptune`. Valid Values: `neptune`.
        /// </summary>
        [PolicyResourceProperty("engine", "_mUnknown_Engine")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Engine;
        private bool _mUnknown_Engine;
        public string? Engine
        {
            get
            {
                if (!_mUnknown_Engine) return _mValue_Engine;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.Engine' is not present");
            }
        }

        /// <summary>
        /// The neptune engine version. Currently configuring this argumnet has no effect.
        /// </summary>
        [PolicyResourceProperty("engineVersion", "_mUnknown_EngineVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EngineVersion;
        private bool _mUnknown_EngineVersion;
        public string? EngineVersion
        {
            get
            {
                if (!_mUnknown_EngineVersion) return _mValue_EngineVersion;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.EngineVersion' is not present");
            }
        }

        /// <summary>
        /// The identifier for the neptune instance, if omitted, this provider will assign a random, unique identifier.
        /// </summary>
        [PolicyResourceProperty("identifier", "_mUnknown_Identifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Identifier;
        private bool _mUnknown_Identifier;
        public string? Identifier
        {
            get
            {
                if (!_mUnknown_Identifier) return _mValue_Identifier;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.Identifier' is not present");
            }
        }

        /// <summary>
        /// Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
        /// </summary>
        [PolicyResourceProperty("identifierPrefix", "_mUnknown_IdentifierPrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_IdentifierPrefix;
        private bool _mUnknown_IdentifierPrefix;
        public string? IdentifierPrefix
        {
            get
            {
                if (!_mUnknown_IdentifierPrefix) return _mValue_IdentifierPrefix;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.IdentifierPrefix' is not present");
            }
        }

        /// <summary>
        /// The instance class to use.
        /// </summary>
        [PolicyResourceProperty("instanceClass", "_mUnknown_InstanceClass")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_InstanceClass;
        private bool _mUnknown_InstanceClass;
        public string? InstanceClass
        {
            get
            {
                if (!_mUnknown_InstanceClass) return _mValue_InstanceClass;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.InstanceClass' is not present");
            }
        }

        /// <summary>
        /// The name of the neptune parameter group to associate with this instance.
        /// </summary>
        [PolicyResourceProperty("neptuneParameterGroupName", "_mUnknown_NeptuneParameterGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NeptuneParameterGroupName;
        private bool _mUnknown_NeptuneParameterGroupName;
        public string? NeptuneParameterGroupName
        {
            get
            {
                if (!_mUnknown_NeptuneParameterGroupName) return _mValue_NeptuneParameterGroupName;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.NeptuneParameterGroupName' is not present");
            }
        }

        /// <summary>
        /// A subnet group to associate with this neptune instance. **NOTE:** This must match the `neptune_subnet_group_name` of the attached `aws.neptune.Cluster`.
        /// </summary>
        [PolicyResourceProperty("neptuneSubnetGroupName", "_mUnknown_NeptuneSubnetGroupName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NeptuneSubnetGroupName;
        private bool _mUnknown_NeptuneSubnetGroupName;
        public string? NeptuneSubnetGroupName
        {
            get
            {
                if (!_mUnknown_NeptuneSubnetGroupName) return _mValue_NeptuneSubnetGroupName;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.NeptuneSubnetGroupName' is not present");
            }
        }

        /// <summary>
        /// The port on which the DB accepts connections. Defaults to `8182`.
        /// </summary>
        [PolicyResourceProperty("port", "_mUnknown_Port")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Port;
        private bool _mUnknown_Port;
        public int? Port
        {
            get
            {
                if (!_mUnknown_Port) return _mValue_Port;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.Port' is not present");
            }
        }

        /// <summary>
        /// The daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00"
        /// </summary>
        [PolicyResourceProperty("preferredBackupWindow", "_mUnknown_PreferredBackupWindow")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PreferredBackupWindow;
        private bool _mUnknown_PreferredBackupWindow;
        public string? PreferredBackupWindow
        {
            get
            {
                if (!_mUnknown_PreferredBackupWindow) return _mValue_PreferredBackupWindow;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.PreferredBackupWindow' is not present");
            }
        }

        /// <summary>
        /// The window to perform maintenance in.
        /// Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
        /// </summary>
        [PolicyResourceProperty("preferredMaintenanceWindow", "_mUnknown_PreferredMaintenanceWindow")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_PreferredMaintenanceWindow;
        private bool _mUnknown_PreferredMaintenanceWindow;
        public string? PreferredMaintenanceWindow
        {
            get
            {
                if (!_mUnknown_PreferredMaintenanceWindow) return _mValue_PreferredMaintenanceWindow;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.PreferredMaintenanceWindow' is not present");
            }
        }

        /// <summary>
        /// Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer.
        /// </summary>
        [PolicyResourceProperty("promotionTier", "_mUnknown_PromotionTier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_PromotionTier;
        private bool _mUnknown_PromotionTier;
        public int? PromotionTier
        {
            get
            {
                if (!_mUnknown_PromotionTier) return _mValue_PromotionTier;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.PromotionTier' is not present");
            }
        }

        /// <summary>
        /// Bool to control if instance is publicly accessible. Default is `false`.
        /// </summary>
        [PolicyResourceProperty("publiclyAccessible", "_mUnknown_PubliclyAccessible")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_PubliclyAccessible;
        private bool _mUnknown_PubliclyAccessible;
        public bool? PubliclyAccessible
        {
            get
            {
                if (!_mUnknown_PubliclyAccessible) return _mValue_PubliclyAccessible;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.PubliclyAccessible' is not present");
            }
        }

        /// <summary>
        /// Determines whether a final DB snapshot is created before the DB instance is deleted.
        /// </summary>
        [PolicyResourceProperty("skipFinalSnapshot", "_mUnknown_SkipFinalSnapshot")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_SkipFinalSnapshot;
        private bool _mUnknown_SkipFinalSnapshot;
        public bool? SkipFinalSnapshot
        {
            get
            {
                if (!_mUnknown_SkipFinalSnapshot) return _mValue_SkipFinalSnapshot;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.SkipFinalSnapshot' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'ClusterInstanceArgs.Tags' is not present");
            }
        }
    }
}
