// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Neptune
{
    [PolicyResourceType("aws:neptune/eventSubscription:EventSubscription")]
    public sealed class EventSubscription : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name of the Neptune event notification subscription.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'EventSubscription.Arn' is not present");
            }
        }

        /// <summary>
        /// The AWS customer account associated with the Neptune event notification subscription.
        /// </summary>
        [PolicyResourceProperty("customerAwsId", "_mUnknown_CustomerAwsId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CustomerAwsId;
        private bool _mUnknown_CustomerAwsId;
        public string? CustomerAwsId
        {
            get
            {
                if (!_mUnknown_CustomerAwsId) return _mValue_CustomerAwsId;
                throw new UndeferrableValueException("Value 'EventSubscription.CustomerAwsId' is not present");
            }
        }

        /// <summary>
        /// A boolean flag to enable/disable the subscription. Defaults to true.
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'EventSubscription.Enabled' is not present");
            }
        }

        /// <summary>
        /// A list of event categories for a `source_type` that you want to subscribe to. Run `aws neptune describe-event-categories` to find all the event categories.
        /// </summary>
        [PolicyResourceProperty("eventCategories", "_mUnknown_EventCategories")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_EventCategories;
        private bool _mUnknown_EventCategories;
        public List<string>? EventCategories
        {
            get
            {
                if (!_mUnknown_EventCategories) return _mValue_EventCategories;
                throw new UndeferrableValueException("Value 'EventSubscription.EventCategories' is not present");
            }
        }

        /// <summary>
        /// The name of the Neptune event subscription. By default generated by this provider.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'EventSubscription.Name' is not present");
            }
        }

        /// <summary>
        /// The name of the Neptune event subscription. Conflicts with `name`.
        /// </summary>
        [PolicyResourceProperty("namePrefix", "_mUnknown_NamePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamePrefix;
        private bool _mUnknown_NamePrefix;
        public string? NamePrefix
        {
            get
            {
                if (!_mUnknown_NamePrefix) return _mValue_NamePrefix;
                throw new UndeferrableValueException("Value 'EventSubscription.NamePrefix' is not present");
            }
        }

        /// <summary>
        /// The ARN of the SNS topic to send events to.
        /// </summary>
        [PolicyResourceProperty("snsTopicArn", "_mUnknown_SnsTopicArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnsTopicArn;
        private bool _mUnknown_SnsTopicArn;
        public string? SnsTopicArn
        {
            get
            {
                if (!_mUnknown_SnsTopicArn) return _mValue_SnsTopicArn;
                throw new UndeferrableValueException("Value 'EventSubscription.SnsTopicArn' is not present");
            }
        }

        /// <summary>
        /// A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a `source_type` must also be specified.
        /// </summary>
        [PolicyResourceProperty("sourceIds", "_mUnknown_SourceIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SourceIds;
        private bool _mUnknown_SourceIds;
        public List<string>? SourceIds
        {
            get
            {
                if (!_mUnknown_SourceIds) return _mValue_SourceIds;
                throw new UndeferrableValueException("Value 'EventSubscription.SourceIds' is not present");
            }
        }

        /// <summary>
        /// The type of source that will be generating the events. Valid options are `db-instance`, `db-security-group`, `db-parameter-group`, `db-snapshot`, `db-cluster` or `db-cluster-snapshot`. If not set, all sources will be subscribed to.
        /// </summary>
        [PolicyResourceProperty("sourceType", "_mUnknown_SourceType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceType;
        private bool _mUnknown_SourceType;
        public string? SourceType
        {
            get
            {
                if (!_mUnknown_SourceType) return _mValue_SourceType;
                throw new UndeferrableValueException("Value 'EventSubscription.SourceType' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'EventSubscription.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'EventSubscription.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:neptune/eventSubscription:EventSubscription")]
    public sealed class EventSubscriptionArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// A boolean flag to enable/disable the subscription. Defaults to true.
        /// </summary>
        [PolicyResourceProperty("enabled", "_mUnknown_Enabled")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_Enabled;
        private bool _mUnknown_Enabled;
        public bool? Enabled
        {
            get
            {
                if (!_mUnknown_Enabled) return _mValue_Enabled;
                throw new UndeferrableValueException("Value 'EventSubscriptionArgs.Enabled' is not present");
            }
        }

        /// <summary>
        /// A list of event categories for a `source_type` that you want to subscribe to. Run `aws neptune describe-event-categories` to find all the event categories.
        /// </summary>
        [PolicyResourceProperty("eventCategories", "_mUnknown_EventCategories")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_EventCategories;
        private bool _mUnknown_EventCategories;
        public List<string>? EventCategories
        {
            get
            {
                if (!_mUnknown_EventCategories) return _mValue_EventCategories;
                throw new UndeferrableValueException("Value 'EventSubscriptionArgs.EventCategories' is not present");
            }
        }

        /// <summary>
        /// The name of the Neptune event subscription. By default generated by this provider.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'EventSubscriptionArgs.Name' is not present");
            }
        }

        /// <summary>
        /// The name of the Neptune event subscription. Conflicts with `name`.
        /// </summary>
        [PolicyResourceProperty("namePrefix", "_mUnknown_NamePrefix")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_NamePrefix;
        private bool _mUnknown_NamePrefix;
        public string? NamePrefix
        {
            get
            {
                if (!_mUnknown_NamePrefix) return _mValue_NamePrefix;
                throw new UndeferrableValueException("Value 'EventSubscriptionArgs.NamePrefix' is not present");
            }
        }

        /// <summary>
        /// The ARN of the SNS topic to send events to.
        /// </summary>
        [PolicyResourceProperty("snsTopicArn", "_mUnknown_SnsTopicArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnsTopicArn;
        private bool _mUnknown_SnsTopicArn;
        public string? SnsTopicArn
        {
            get
            {
                if (!_mUnknown_SnsTopicArn) return _mValue_SnsTopicArn;
                throw new UndeferrableValueException("Value 'EventSubscriptionArgs.SnsTopicArn' is not present");
            }
        }

        /// <summary>
        /// A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a `source_type` must also be specified.
        /// </summary>
        [PolicyResourceProperty("sourceIds", "_mUnknown_SourceIds")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_SourceIds;
        private bool _mUnknown_SourceIds;
        public List<string>? SourceIds
        {
            get
            {
                if (!_mUnknown_SourceIds) return _mValue_SourceIds;
                throw new UndeferrableValueException("Value 'EventSubscriptionArgs.SourceIds' is not present");
            }
        }

        /// <summary>
        /// The type of source that will be generating the events. Valid options are `db-instance`, `db-security-group`, `db-parameter-group`, `db-snapshot`, `db-cluster` or `db-cluster-snapshot`. If not set, all sources will be subscribed to.
        /// </summary>
        [PolicyResourceProperty("sourceType", "_mUnknown_SourceType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceType;
        private bool _mUnknown_SourceType;
        public string? SourceType
        {
            get
            {
                if (!_mUnknown_SourceType) return _mValue_SourceType;
                throw new UndeferrableValueException("Value 'EventSubscriptionArgs.SourceType' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'EventSubscriptionArgs.Tags' is not present");
            }
        }
    }
}
