// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Neptune
{
    [PolicyResourceType("aws:neptune/clusterSnapshot:ClusterSnapshot")]
    public sealed class ClusterSnapshot : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// Specifies the allocated storage size in gigabytes (GB).
        /// </summary>
        [PolicyResourceProperty("allocatedStorage", "_mUnknown_AllocatedStorage")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_AllocatedStorage;
        private bool _mUnknown_AllocatedStorage;
        public int? AllocatedStorage
        {
            get
            {
                if (!_mUnknown_AllocatedStorage) return _mValue_AllocatedStorage;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.AllocatedStorage' is not present");
            }
        }

        /// <summary>
        /// List of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.
        /// </summary>
        [PolicyResourceProperty("availabilityZones", "_mUnknown_AvailabilityZones")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_AvailabilityZones;
        private bool _mUnknown_AvailabilityZones;
        public List<string>? AvailabilityZones
        {
            get
            {
                if (!_mUnknown_AvailabilityZones) return _mValue_AvailabilityZones;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.AvailabilityZones' is not present");
            }
        }

        /// <summary>
        /// The DB Cluster Identifier from which to take the snapshot.
        /// </summary>
        [PolicyResourceProperty("dbClusterIdentifier", "_mUnknown_DbClusterIdentifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DbClusterIdentifier;
        private bool _mUnknown_DbClusterIdentifier;
        public string? DbClusterIdentifier
        {
            get
            {
                if (!_mUnknown_DbClusterIdentifier) return _mValue_DbClusterIdentifier;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.DbClusterIdentifier' is not present");
            }
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) for the DB Cluster Snapshot.
        /// </summary>
        [PolicyResourceProperty("dbClusterSnapshotArn", "_mUnknown_DbClusterSnapshotArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DbClusterSnapshotArn;
        private bool _mUnknown_DbClusterSnapshotArn;
        public string? DbClusterSnapshotArn
        {
            get
            {
                if (!_mUnknown_DbClusterSnapshotArn) return _mValue_DbClusterSnapshotArn;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.DbClusterSnapshotArn' is not present");
            }
        }

        /// <summary>
        /// The Identifier for the snapshot.
        /// </summary>
        [PolicyResourceProperty("dbClusterSnapshotIdentifier", "_mUnknown_DbClusterSnapshotIdentifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DbClusterSnapshotIdentifier;
        private bool _mUnknown_DbClusterSnapshotIdentifier;
        public string? DbClusterSnapshotIdentifier
        {
            get
            {
                if (!_mUnknown_DbClusterSnapshotIdentifier) return _mValue_DbClusterSnapshotIdentifier;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.DbClusterSnapshotIdentifier' is not present");
            }
        }

        /// <summary>
        /// Specifies the name of the database engine.
        /// </summary>
        [PolicyResourceProperty("engine", "_mUnknown_Engine")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Engine;
        private bool _mUnknown_Engine;
        public string? Engine
        {
            get
            {
                if (!_mUnknown_Engine) return _mValue_Engine;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.Engine' is not present");
            }
        }

        /// <summary>
        /// Version of the database engine for this DB cluster snapshot.
        /// </summary>
        [PolicyResourceProperty("engineVersion", "_mUnknown_EngineVersion")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_EngineVersion;
        private bool _mUnknown_EngineVersion;
        public string? EngineVersion
        {
            get
            {
                if (!_mUnknown_EngineVersion) return _mValue_EngineVersion;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.EngineVersion' is not present");
            }
        }

        /// <summary>
        /// If storage_encrypted is true, the AWS KMS key identifier for the encrypted DB cluster snapshot.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// License model information for the restored DB cluster.
        /// </summary>
        [PolicyResourceProperty("licenseModel", "_mUnknown_LicenseModel")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LicenseModel;
        private bool _mUnknown_LicenseModel;
        public string? LicenseModel
        {
            get
            {
                if (!_mUnknown_LicenseModel) return _mValue_LicenseModel;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.LicenseModel' is not present");
            }
        }

        /// <summary>
        /// Port that the DB cluster was listening on at the time of the snapshot.
        /// </summary>
        [PolicyResourceProperty("port", "_mUnknown_Port")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_Port;
        private bool _mUnknown_Port;
        public int? Port
        {
            get
            {
                if (!_mUnknown_Port) return _mValue_Port;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.Port' is not present");
            }
        }

        [PolicyResourceProperty("snapshotType", "_mUnknown_SnapshotType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SnapshotType;
        private bool _mUnknown_SnapshotType;
        public string? SnapshotType
        {
            get
            {
                if (!_mUnknown_SnapshotType) return _mValue_SnapshotType;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.SnapshotType' is not present");
            }
        }

        [PolicyResourceProperty("sourceDbClusterSnapshotArn", "_mUnknown_SourceDbClusterSnapshotArn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_SourceDbClusterSnapshotArn;
        private bool _mUnknown_SourceDbClusterSnapshotArn;
        public string? SourceDbClusterSnapshotArn
        {
            get
            {
                if (!_mUnknown_SourceDbClusterSnapshotArn) return _mValue_SourceDbClusterSnapshotArn;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.SourceDbClusterSnapshotArn' is not present");
            }
        }

        /// <summary>
        /// The status of this DB Cluster Snapshot.
        /// </summary>
        [PolicyResourceProperty("status", "_mUnknown_Status")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Status;
        private bool _mUnknown_Status;
        public string? Status
        {
            get
            {
                if (!_mUnknown_Status) return _mValue_Status;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.Status' is not present");
            }
        }

        /// <summary>
        /// Specifies whether the DB cluster snapshot is encrypted.
        /// </summary>
        [PolicyResourceProperty("storageEncrypted", "_mUnknown_StorageEncrypted")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_StorageEncrypted;
        private bool _mUnknown_StorageEncrypted;
        public bool? StorageEncrypted
        {
            get
            {
                if (!_mUnknown_StorageEncrypted) return _mValue_StorageEncrypted;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.StorageEncrypted' is not present");
            }
        }

        /// <summary>
        /// The VPC ID associated with the DB cluster snapshot.
        /// </summary>
        [PolicyResourceProperty("vpcId", "_mUnknown_VpcId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_VpcId;
        private bool _mUnknown_VpcId;
        public string? VpcId
        {
            get
            {
                if (!_mUnknown_VpcId) return _mValue_VpcId;
                throw new UndeferrableValueException("Value 'ClusterSnapshot.VpcId' is not present");
            }
        }
    }

    [PolicyResourceType("aws:neptune/clusterSnapshot:ClusterSnapshot")]
    public sealed class ClusterSnapshotArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The DB Cluster Identifier from which to take the snapshot.
        /// </summary>
        [PolicyResourceProperty("dbClusterIdentifier", "_mUnknown_DbClusterIdentifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DbClusterIdentifier;
        private bool _mUnknown_DbClusterIdentifier;
        public string? DbClusterIdentifier
        {
            get
            {
                if (!_mUnknown_DbClusterIdentifier) return _mValue_DbClusterIdentifier;
                throw new UndeferrableValueException("Value 'ClusterSnapshotArgs.DbClusterIdentifier' is not present");
            }
        }

        /// <summary>
        /// The Identifier for the snapshot.
        /// </summary>
        [PolicyResourceProperty("dbClusterSnapshotIdentifier", "_mUnknown_DbClusterSnapshotIdentifier")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DbClusterSnapshotIdentifier;
        private bool _mUnknown_DbClusterSnapshotIdentifier;
        public string? DbClusterSnapshotIdentifier
        {
            get
            {
                if (!_mUnknown_DbClusterSnapshotIdentifier) return _mValue_DbClusterSnapshotIdentifier;
                throw new UndeferrableValueException("Value 'ClusterSnapshotArgs.DbClusterSnapshotIdentifier' is not present");
            }
        }
    }
}
