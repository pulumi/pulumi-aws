// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.LicenseManager
{
    [PolicyResourceType("aws:licensemanager/licenseConfiguration:LicenseConfiguration")]
    public sealed class LicenseConfiguration : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The license configuration ARN.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Description of the license configuration.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// Number of licenses managed by the license configuration.
        /// </summary>
        [Input("licenseCount")]
        public int? LicenseCount;

        /// <summary>
        /// Sets the number of available licenses as a hard limit.
        /// </summary>
        [Input("licenseCountHardLimit")]
        public bool? LicenseCountHardLimit;

        /// <summary>
        /// Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
        /// </summary>
        [Input("licenseCountingType")]
        public string? LicenseCountingType;

        /// <summary>
        /// Array of configured License Manager rules.
        /// </summary>
        [Input("licenseRules")]
        public List<string>? LicenseRules;

        /// <summary>
        /// Name of the license configuration.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Account ID of the owner of the license configuration.
        /// </summary>
        [Input("ownerAccountId")]
        public string? OwnerAccountId;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;
    }
}
