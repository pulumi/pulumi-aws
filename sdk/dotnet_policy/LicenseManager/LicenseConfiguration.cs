// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.LicenseManager
{
    [PolicyResourceType("aws:licensemanager/licenseConfiguration:LicenseConfiguration")]
    public sealed class LicenseConfiguration : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The license configuration ARN.
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'LicenseConfiguration.Arn' is not present");
            }
        }

        /// <summary>
        /// Description of the license configuration.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'LicenseConfiguration.Description' is not present");
            }
        }

        /// <summary>
        /// Number of licenses managed by the license configuration.
        /// </summary>
        [PolicyResourceProperty("licenseCount", "_mUnknown_LicenseCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_LicenseCount;
        private bool _mUnknown_LicenseCount;
        public int? LicenseCount
        {
            get
            {
                if (!_mUnknown_LicenseCount) return _mValue_LicenseCount;
                throw new UndeferrableValueException("Value 'LicenseConfiguration.LicenseCount' is not present");
            }
        }

        /// <summary>
        /// Sets the number of available licenses as a hard limit.
        /// </summary>
        [PolicyResourceProperty("licenseCountHardLimit", "_mUnknown_LicenseCountHardLimit")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_LicenseCountHardLimit;
        private bool _mUnknown_LicenseCountHardLimit;
        public bool? LicenseCountHardLimit
        {
            get
            {
                if (!_mUnknown_LicenseCountHardLimit) return _mValue_LicenseCountHardLimit;
                throw new UndeferrableValueException("Value 'LicenseConfiguration.LicenseCountHardLimit' is not present");
            }
        }

        /// <summary>
        /// Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
        /// </summary>
        [PolicyResourceProperty("licenseCountingType", "_mUnknown_LicenseCountingType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LicenseCountingType;
        private bool _mUnknown_LicenseCountingType;
        public string? LicenseCountingType
        {
            get
            {
                if (!_mUnknown_LicenseCountingType) return _mValue_LicenseCountingType;
                throw new UndeferrableValueException("Value 'LicenseConfiguration.LicenseCountingType' is not present");
            }
        }

        /// <summary>
        /// Array of configured License Manager rules.
        /// </summary>
        [PolicyResourceProperty("licenseRules", "_mUnknown_LicenseRules")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_LicenseRules;
        private bool _mUnknown_LicenseRules;
        public List<string>? LicenseRules
        {
            get
            {
                if (!_mUnknown_LicenseRules) return _mValue_LicenseRules;
                throw new UndeferrableValueException("Value 'LicenseConfiguration.LicenseRules' is not present");
            }
        }

        /// <summary>
        /// Name of the license configuration.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'LicenseConfiguration.Name' is not present");
            }
        }

        /// <summary>
        /// Account ID of the owner of the license configuration.
        /// </summary>
        [PolicyResourceProperty("ownerAccountId", "_mUnknown_OwnerAccountId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_OwnerAccountId;
        private bool _mUnknown_OwnerAccountId;
        public string? OwnerAccountId
        {
            get
            {
                if (!_mUnknown_OwnerAccountId) return _mValue_OwnerAccountId;
                throw new UndeferrableValueException("Value 'LicenseConfiguration.OwnerAccountId' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'LicenseConfiguration.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'LicenseConfiguration.TagsAll' is not present");
            }
        }
    }

    [PolicyResourceType("aws:licensemanager/licenseConfiguration:LicenseConfiguration")]
    public sealed class LicenseConfigurationArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// Description of the license configuration.
        /// </summary>
        [PolicyResourceProperty("description", "_mUnknown_Description")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Description;
        private bool _mUnknown_Description;
        public string? Description
        {
            get
            {
                if (!_mUnknown_Description) return _mValue_Description;
                throw new UndeferrableValueException("Value 'LicenseConfigurationArgs.Description' is not present");
            }
        }

        /// <summary>
        /// Number of licenses managed by the license configuration.
        /// </summary>
        [PolicyResourceProperty("licenseCount", "_mUnknown_LicenseCount")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_LicenseCount;
        private bool _mUnknown_LicenseCount;
        public int? LicenseCount
        {
            get
            {
                if (!_mUnknown_LicenseCount) return _mValue_LicenseCount;
                throw new UndeferrableValueException("Value 'LicenseConfigurationArgs.LicenseCount' is not present");
            }
        }

        /// <summary>
        /// Sets the number of available licenses as a hard limit.
        /// </summary>
        [PolicyResourceProperty("licenseCountHardLimit", "_mUnknown_LicenseCountHardLimit")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private bool? _mValue_LicenseCountHardLimit;
        private bool _mUnknown_LicenseCountHardLimit;
        public bool? LicenseCountHardLimit
        {
            get
            {
                if (!_mUnknown_LicenseCountHardLimit) return _mValue_LicenseCountHardLimit;
                throw new UndeferrableValueException("Value 'LicenseConfigurationArgs.LicenseCountHardLimit' is not present");
            }
        }

        /// <summary>
        /// Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
        /// </summary>
        [PolicyResourceProperty("licenseCountingType", "_mUnknown_LicenseCountingType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_LicenseCountingType;
        private bool _mUnknown_LicenseCountingType;
        public string? LicenseCountingType
        {
            get
            {
                if (!_mUnknown_LicenseCountingType) return _mValue_LicenseCountingType;
                throw new UndeferrableValueException("Value 'LicenseConfigurationArgs.LicenseCountingType' is not present");
            }
        }

        /// <summary>
        /// Array of configured License Manager rules.
        /// </summary>
        [PolicyResourceProperty("licenseRules", "_mUnknown_LicenseRules")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private List<string>? _mValue_LicenseRules;
        private bool _mUnknown_LicenseRules;
        public List<string>? LicenseRules
        {
            get
            {
                if (!_mUnknown_LicenseRules) return _mValue_LicenseRules;
                throw new UndeferrableValueException("Value 'LicenseConfigurationArgs.LicenseRules' is not present");
            }
        }

        /// <summary>
        /// Name of the license configuration.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'LicenseConfigurationArgs.Name' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'LicenseConfigurationArgs.Tags' is not present");
            }
        }
    }
}
