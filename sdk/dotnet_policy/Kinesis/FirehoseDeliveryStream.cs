// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Kinesis
{
    [PolicyResourceType("aws:kinesis/firehoseDeliveryStream:FirehoseDeliveryStream")]
    public sealed class FirehoseDeliveryStream : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) specifying the Stream
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// This is the destination to where the data is delivered. The only options are `s3` (Deprecated, use `extended_s3` instead), `extended_s3`, `redshift`, `elasticsearch`, `splunk`, `http_endpoint`, `opensearch`, `opensearchserverless` and `snowflake`.
        /// </summary>
        [Input("destination")]
        public string? Destination;

        [Input("destinationId")]
        public string? DestinationId;

        /// <summary>
        /// Configuration options when `destination` is `elasticsearch`. See `elasticsearch_configuration` block below for details.
        /// </summary>
        [Input("elasticsearchConfiguration")]
        public FirehoseDeliveryStreamElasticsearchConfiguration? ElasticsearchConfiguration;

        /// <summary>
        /// Enhanced configuration options for the s3 destination. See `extended_s3_configuration` block below for details.
        /// </summary>
        [Input("extendedS3Configuration")]
        public FirehoseDeliveryStreamExtendedS3Configuration? ExtendedS3Configuration;

        /// <summary>
        /// Configuration options when `destination` is `http_endpoint`. Requires the user to also specify an `s3_configuration` block.  See `http_endpoint_configuration` block below for details.
        /// </summary>
        [Input("httpEndpointConfiguration")]
        public FirehoseDeliveryStreamHttpEndpointConfiguration? HttpEndpointConfiguration;

        /// <summary>
        /// Configuration options when `destination` is `iceberg`. See `iceberg_configuration` block below for details.
        /// </summary>
        [Input("icebergConfiguration")]
        public FirehoseDeliveryStreamIcebergConfiguration? IcebergConfiguration;

        /// <summary>
        /// The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream. See `kinesis_source_configuration` block below for details.
        /// </summary>
        [Input("kinesisSourceConfiguration")]
        public FirehoseDeliveryStreamKinesisSourceConfiguration? KinesisSourceConfiguration;

        /// <summary>
        /// The configuration for the Amazon MSK cluster to be used as the source for a delivery stream. See `msk_source_configuration` block below for details.
        /// </summary>
        [Input("mskSourceConfiguration")]
        public FirehoseDeliveryStreamMskSourceConfiguration? MskSourceConfiguration;

        /// <summary>
        /// A name to identify the stream. This is unique to the AWS account and region the Stream is created in. When using for WAF logging, name must be prefixed with `aws-waf-logs-`. See [AWS Documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-policies.html#waf-policies-logging-config) for more details.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// Configuration options when `destination` is `opensearch`. See `opensearch_configuration` block below for details.
        /// </summary>
        [Input("opensearchConfiguration")]
        public FirehoseDeliveryStreamOpensearchConfiguration? OpensearchConfiguration;

        /// <summary>
        /// Configuration options when `destination` is `opensearchserverless`. See `opensearchserverless_configuration` block below for details.
        /// </summary>
        [Input("opensearchserverlessConfiguration")]
        public FirehoseDeliveryStreamOpensearchserverlessConfiguration? OpensearchserverlessConfiguration;

        /// <summary>
        /// Configuration options when `destination` is `redshift`. Requires the user to also specify an `s3_configuration` block. See `redshift_configuration` block below for details.
        /// </summary>
        [Input("redshiftConfiguration")]
        public FirehoseDeliveryStreamRedshiftConfiguration? RedshiftConfiguration;

        /// <summary>
        /// Encrypt at rest options. See `server_side_encryption` block below for details.
        /// 
        /// **NOTE:** Server-side encryption should not be enabled when a kinesis stream is configured as the source of the firehose delivery stream.
        /// </summary>
        [Input("serverSideEncryption")]
        public FirehoseDeliveryStreamServerSideEncryption? ServerSideEncryption;

        /// <summary>
        /// Configuration options when `destination` is `snowflake`. See `snowflake_configuration` block below for details.
        /// </summary>
        [Input("snowflakeConfiguration")]
        public FirehoseDeliveryStreamSnowflakeConfiguration? SnowflakeConfiguration;

        /// <summary>
        /// Configuration options when `destination` is `splunk`. See `splunk_configuration` block below for details.
        /// </summary>
        [Input("splunkConfiguration")]
        public FirehoseDeliveryStreamSplunkConfiguration? SplunkConfiguration;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Input("tags")]
        public Dictionary<string, string>? Tags;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Input("tagsAll")]
        public Dictionary<string, string>? TagsAll;

        [Input("versionId")]
        public string? VersionId;
    }
}
