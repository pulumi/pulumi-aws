// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Kinesis
{
    [PolicyResourceType("aws:kinesis/videoStream:VideoStream")]
    public sealed class VideoStream : global::Pulumi.PolicyResourceOutput
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) specifying the Stream (same as `id`)
        /// </summary>
        [PolicyResourceProperty("arn", "_mUnknown_Arn")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Arn;
        private bool _mUnknown_Arn;
        public string? Arn
        {
            get
            {
                if (!_mUnknown_Arn) return _mValue_Arn;
                throw new UndeferrableValueException("Value 'VideoStream.Arn' is not present");
            }
        }

        /// <summary>
        /// A time stamp that indicates when the stream was created.
        /// </summary>
        [PolicyResourceProperty("creationTime", "_mUnknown_CreationTime")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_CreationTime;
        private bool _mUnknown_CreationTime;
        public string? CreationTime
        {
            get
            {
                if (!_mUnknown_CreationTime) return _mValue_CreationTime;
                throw new UndeferrableValueException("Value 'VideoStream.CreationTime' is not present");
            }
        }

        /// <summary>
        /// The number of hours that you want to retain the data in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. The default value is `0`, indicating that the stream does not persist data.
        /// </summary>
        [PolicyResourceProperty("dataRetentionInHours", "_mUnknown_DataRetentionInHours")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_DataRetentionInHours;
        private bool _mUnknown_DataRetentionInHours;
        public int? DataRetentionInHours
        {
            get
            {
                if (!_mUnknown_DataRetentionInHours) return _mValue_DataRetentionInHours;
                throw new UndeferrableValueException("Value 'VideoStream.DataRetentionInHours' is not present");
            }
        }

        /// <summary>
        /// The name of the device that is writing to the stream. **In the current implementation, Kinesis Video Streams does not use this name.**
        /// </summary>
        [PolicyResourceProperty("deviceName", "_mUnknown_DeviceName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DeviceName;
        private bool _mUnknown_DeviceName;
        public string? DeviceName
        {
            get
            {
                if (!_mUnknown_DeviceName) return _mValue_DeviceName;
                throw new UndeferrableValueException("Value 'VideoStream.DeviceName' is not present");
            }
        }

        /// <summary>
        /// The ID of the AWS Key Management Service (AWS KMS) key that you want Kinesis Video Streams to use to encrypt stream data. If no key ID is specified, the default, Kinesis Video-managed key (`aws/kinesisvideo`) is used.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'VideoStream.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// The media type of the stream. Consumers of the stream can use this information when processing the stream. For more information about media types, see [Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml). If you choose to specify the MediaType, see [Naming Requirements](https://tools.ietf.org/html/rfc6838#section-4.2) for guidelines.
        /// </summary>
        [PolicyResourceProperty("mediaType", "_mUnknown_MediaType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MediaType;
        private bool _mUnknown_MediaType;
        public string? MediaType
        {
            get
            {
                if (!_mUnknown_MediaType) return _mValue_MediaType;
                throw new UndeferrableValueException("Value 'VideoStream.MediaType' is not present");
            }
        }

        /// <summary>
        /// A name to identify the stream. This is unique to the
        /// AWS account and region the Stream is created in.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'VideoStream.Name' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'VideoStream.Tags' is not present");
            }
        }

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [PolicyResourceProperty("tagsAll", "_mUnknown_TagsAll")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_TagsAll;
        private bool _mUnknown_TagsAll;
        public Dictionary<string, string>? TagsAll
        {
            get
            {
                if (!_mUnknown_TagsAll) return _mValue_TagsAll;
                throw new UndeferrableValueException("Value 'VideoStream.TagsAll' is not present");
            }
        }

        /// <summary>
        /// The version of the stream.
        /// </summary>
        [PolicyResourceProperty("version", "_mUnknown_Version")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Version;
        private bool _mUnknown_Version;
        public string? Version
        {
            get
            {
                if (!_mUnknown_Version) return _mValue_Version;
                throw new UndeferrableValueException("Value 'VideoStream.Version' is not present");
            }
        }
    }

    [PolicyResourceType("aws:kinesis/videoStream:VideoStream")]
    public sealed class VideoStreamArgs : global::Pulumi.PolicyResourceInput
    {
        /// <summary>
        /// The number of hours that you want to retain the data in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. The default value is `0`, indicating that the stream does not persist data.
        /// </summary>
        [PolicyResourceProperty("dataRetentionInHours", "_mUnknown_DataRetentionInHours")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private int? _mValue_DataRetentionInHours;
        private bool _mUnknown_DataRetentionInHours;
        public int? DataRetentionInHours
        {
            get
            {
                if (!_mUnknown_DataRetentionInHours) return _mValue_DataRetentionInHours;
                throw new UndeferrableValueException("Value 'VideoStreamArgs.DataRetentionInHours' is not present");
            }
        }

        /// <summary>
        /// The name of the device that is writing to the stream. **In the current implementation, Kinesis Video Streams does not use this name.**
        /// </summary>
        [PolicyResourceProperty("deviceName", "_mUnknown_DeviceName")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_DeviceName;
        private bool _mUnknown_DeviceName;
        public string? DeviceName
        {
            get
            {
                if (!_mUnknown_DeviceName) return _mValue_DeviceName;
                throw new UndeferrableValueException("Value 'VideoStreamArgs.DeviceName' is not present");
            }
        }

        /// <summary>
        /// The ID of the AWS Key Management Service (AWS KMS) key that you want Kinesis Video Streams to use to encrypt stream data. If no key ID is specified, the default, Kinesis Video-managed key (`aws/kinesisvideo`) is used.
        /// </summary>
        [PolicyResourceProperty("kmsKeyId", "_mUnknown_KmsKeyId")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_KmsKeyId;
        private bool _mUnknown_KmsKeyId;
        public string? KmsKeyId
        {
            get
            {
                if (!_mUnknown_KmsKeyId) return _mValue_KmsKeyId;
                throw new UndeferrableValueException("Value 'VideoStreamArgs.KmsKeyId' is not present");
            }
        }

        /// <summary>
        /// The media type of the stream. Consumers of the stream can use this information when processing the stream. For more information about media types, see [Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml). If you choose to specify the MediaType, see [Naming Requirements](https://tools.ietf.org/html/rfc6838#section-4.2) for guidelines.
        /// </summary>
        [PolicyResourceProperty("mediaType", "_mUnknown_MediaType")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_MediaType;
        private bool _mUnknown_MediaType;
        public string? MediaType
        {
            get
            {
                if (!_mUnknown_MediaType) return _mValue_MediaType;
                throw new UndeferrableValueException("Value 'VideoStreamArgs.MediaType' is not present");
            }
        }

        /// <summary>
        /// A name to identify the stream. This is unique to the
        /// AWS account and region the Stream is created in.
        /// </summary>
        [PolicyResourceProperty("name", "_mUnknown_Name")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private string? _mValue_Name;
        private bool _mUnknown_Name;
        public string? Name
        {
            get
            {
                if (!_mUnknown_Name) return _mValue_Name;
                throw new UndeferrableValueException("Value 'VideoStreamArgs.Name' is not present");
            }
        }

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [PolicyResourceProperty("tags", "_mUnknown_Tags")]
        #pragma warning disable CS0649 // Field is assigned through deserializer
        private Dictionary<string, string>? _mValue_Tags;
        private bool _mUnknown_Tags;
        public Dictionary<string, string>? Tags
        {
            get
            {
                if (!_mUnknown_Tags) return _mValue_Tags;
                throw new UndeferrableValueException("Value 'VideoStreamArgs.Tags' is not present");
            }
        }
    }
}
