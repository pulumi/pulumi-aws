// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumi.PolicyPacks.Aws.Lex
{
    [PolicyResourceType("aws:lex/intent:Intent")]
    public sealed class Intent : global::Pulumi.PolicyResource
    {
        /// <summary>
        /// The ARN of the Lex intent.
        /// </summary>
        [Input("arn")]
        public string? Arn;

        /// <summary>
        /// Checksum identifying the version of the intent that was created. The checksum is not
        /// included as an argument because the resource will add it automatically when updating the intent.
        /// </summary>
        [Input("checksum")]
        public string? Checksum;

        /// <summary>
        /// The statement that you want Amazon Lex to convey to the user
        /// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
        /// you provide a Lambda function in the `fulfillment_activity`. If you return the intent to the client
        /// application, you can't specify this element. The `follow_up_prompt` and `conclusion_statement` are
        /// mutually exclusive. You can specify only one. Attributes are documented under statement.
        /// </summary>
        [Input("conclusionStatement")]
        public IntentConclusionStatement? ConclusionStatement;

        /// <summary>
        /// Prompts the user to confirm the intent. This question should
        /// have a yes or no answer. You you must provide both the `rejection_statement` and `confirmation_prompt`,
        /// or neither. Attributes are documented under prompt.
        /// </summary>
        [Input("confirmationPrompt")]
        public IntentConfirmationPrompt? ConfirmationPrompt;

        /// <summary>
        /// Determines if a new slot type version is created when the initial
        /// resource is created and on each update. Defaults to `false`.
        /// </summary>
        [Input("createVersion")]
        public bool? CreateVersion;

        /// <summary>
        /// The date when the intent version was created.
        /// </summary>
        [Input("createdDate")]
        public string? CreatedDate;

        /// <summary>
        /// A description of the intent. Must be less than or equal to 200 characters in length.
        /// </summary>
        [Input("description")]
        public string? Description;

        /// <summary>
        /// Specifies a Lambda function to invoke for each user input. You can
        /// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
        /// </summary>
        [Input("dialogCodeHook")]
        public IntentDialogCodeHook? DialogCodeHook;

        /// <summary>
        /// Amazon Lex uses this prompt to solicit additional activity after
        /// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
        /// user to order a drink. The `follow_up_prompt` field and the `conclusion_statement` field are mutually
        /// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
        /// </summary>
        [Input("followUpPrompt")]
        public IntentFollowUpPrompt? FollowUpPrompt;

        /// <summary>
        /// Describes how the intent is fulfilled. For example, after a
        /// user provides all of the information for a pizza order, `fulfillment_activity` defines how the bot
        /// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
        /// </summary>
        [Input("fulfillmentActivity")]
        public IntentFulfillmentActivity? FulfillmentActivity;

        /// <summary>
        /// The date when the $LATEST version of this intent was updated.
        /// </summary>
        [Input("lastUpdatedDate")]
        public string? LastUpdatedDate;

        /// <summary>
        /// The name of the intent, not case sensitive. Must be less than or equal to 100 characters in length.
        /// </summary>
        [Input("name")]
        public string? Name;

        /// <summary>
        /// A unique identifier for the built-in intent to base this
        /// intent on. To find the signature for an intent, see
        /// [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
        /// in the Alexa Skills Kit.
        /// </summary>
        [Input("parentIntentSignature")]
        public string? ParentIntentSignature;

        /// <summary>
        /// When the user answers "no" to the question defined in
        /// `confirmation_prompt`, Amazon Lex responds with this statement to acknowledge that the intent was
        /// canceled. You must provide both the `rejection_statement` and the `confirmation_prompt`, or neither.
        /// Attributes are documented under statement.
        /// </summary>
        [Input("rejectionStatement")]
        public IntentRejectionStatement? RejectionStatement;

        /// <summary>
        /// An array of utterances (strings) that a user might say to signal
        /// the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas".
        /// In each utterance, a slot name is enclosed in curly braces. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
        /// </summary>
        [Input("sampleUtterances")]
        public List<string>? SampleUtterances;

        /// <summary>
        /// An list of intent slots. At runtime, Amazon Lex elicits required slot values
        /// from the user using prompts defined in the slots. Attributes are documented under slot.
        /// </summary>
        [Input("slots")]
        public List<IntentSlot>? Slots;

        /// <summary>
        /// The version of the bot.
        /// </summary>
        [Input("version")]
        public string? Version;
    }
}
