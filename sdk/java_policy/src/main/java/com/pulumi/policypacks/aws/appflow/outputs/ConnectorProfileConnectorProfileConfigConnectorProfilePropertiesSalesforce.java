// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appflow.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


public final class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce {

    @PolicyResourceProperty(name="instanceUrl", flag="unknown_instanceUrl")
    private @Nullable String value_instanceUrl;
    private boolean unknown_instanceUrl;
    public @Nullable String instanceUrl() {
        if (!unknown_instanceUrl) return value_instanceUrl;
        throw new UndeferrableValueException("Value 'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce.instanceUrl' is not present");
    }

    /**
     * Indicates whether the connector profile applies to a sandbox or production environment.
     * 
     */
    @PolicyResourceProperty(name="isSandboxEnvironment", flag="unknown_isSandboxEnvironment")
    private @Nullable Boolean value_isSandboxEnvironment;
    private boolean unknown_isSandboxEnvironment;
    public @Nullable Boolean isSandboxEnvironment() {
        if (!unknown_isSandboxEnvironment) return value_isSandboxEnvironment;
        throw new UndeferrableValueException("Value 'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce.isSandboxEnvironment' is not present");
    }

    /**
     * Indicates whether Amazon AppFlow uses the private network to send metadata and authorization calls to Salesforce. Amazon AppFlow sends private calls through AWS PrivateLink. These calls travel through AWS infrastructure without being exposed to the public internet.
     * 
     */
    @PolicyResourceProperty(name="usePrivatelinkForMetadataAndAuthorization", flag="unknown_usePrivatelinkForMetadataAndAuthorization")
    private @Nullable Boolean value_usePrivatelinkForMetadataAndAuthorization;
    private boolean unknown_usePrivatelinkForMetadataAndAuthorization;
    public @Nullable Boolean usePrivatelinkForMetadataAndAuthorization() {
        if (!unknown_usePrivatelinkForMetadataAndAuthorization) return value_usePrivatelinkForMetadataAndAuthorization;
        throw new UndeferrableValueException("Value 'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforce.usePrivatelinkForMetadataAndAuthorization' is not present");
    }

}
