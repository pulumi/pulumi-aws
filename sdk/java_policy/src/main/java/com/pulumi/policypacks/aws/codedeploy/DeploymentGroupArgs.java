// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codedeploy;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.codedeploy.inputs.DeploymentGroupAlarmConfigurationArgs;
import com.pulumi.policypacks.aws.codedeploy.inputs.DeploymentGroupAutoRollbackConfigurationArgs;
import com.pulumi.policypacks.aws.codedeploy.inputs.DeploymentGroupBlueGreenDeploymentConfigArgs;
import com.pulumi.policypacks.aws.codedeploy.inputs.DeploymentGroupDeploymentStyleArgs;
import com.pulumi.policypacks.aws.codedeploy.inputs.DeploymentGroupEc2TagFilterArgs;
import com.pulumi.policypacks.aws.codedeploy.inputs.DeploymentGroupEc2TagSetArgs;
import com.pulumi.policypacks.aws.codedeploy.inputs.DeploymentGroupEcsServiceArgs;
import com.pulumi.policypacks.aws.codedeploy.inputs.DeploymentGroupLoadBalancerInfoArgs;
import com.pulumi.policypacks.aws.codedeploy.inputs.DeploymentGroupOnPremisesInstanceTagFilterArgs;
import com.pulumi.policypacks.aws.codedeploy.inputs.DeploymentGroupTriggerConfigurationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:codedeploy/deploymentGroup:DeploymentGroup")
public final class DeploymentGroupArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Configuration block of alarms associated with the deployment group (documented below).
     * 
     */
    private UndeferrableValue<DeploymentGroupAlarmConfigurationArgs> alarmConfiguration;

    public DeploymentGroupAlarmConfigurationArgs alarmConfiguration() {
        if (alarmConfiguration == null) return null;
        return alarmConfiguration.getValue("DeploymentGroupArgs.alarmConfiguration");
    }

    /**
     * The name of the application.
     * 
     */
    private UndeferrableValue<String> appName;

    public String appName() {
        if (appName == null) return null;
        return appName.getValue("DeploymentGroupArgs.appName");
    }

    /**
     * Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
     * 
     */
    private UndeferrableValue<DeploymentGroupAutoRollbackConfigurationArgs> autoRollbackConfiguration;

    public DeploymentGroupAutoRollbackConfigurationArgs autoRollbackConfiguration() {
        if (autoRollbackConfiguration == null) return null;
        return autoRollbackConfiguration.getValue("DeploymentGroupArgs.autoRollbackConfiguration");
    }

    /**
     * Autoscaling groups associated with the deployment group.
     * 
     */
    private UndeferrableValue<List<String>> autoscalingGroups;

    public List<String> autoscalingGroups() {
        if (autoscalingGroups == null) return null;
        return autoscalingGroups.getValue("DeploymentGroupArgs.autoscalingGroups");
    }

    /**
     * Configuration block of the blue/green deployment options for a deployment group (documented below).
     * 
     */
    private UndeferrableValue<DeploymentGroupBlueGreenDeploymentConfigArgs> blueGreenDeploymentConfig;

    public DeploymentGroupBlueGreenDeploymentConfigArgs blueGreenDeploymentConfig() {
        if (blueGreenDeploymentConfig == null) return null;
        return blueGreenDeploymentConfig.getValue("DeploymentGroupArgs.blueGreenDeploymentConfig");
    }

    /**
     * The name of the group&#39;s deployment config. The default is &#34;CodeDeployDefault.OneAtATime&#34;.
     * 
     */
    private UndeferrableValue<String> deploymentConfigName;

    public String deploymentConfigName() {
        if (deploymentConfigName == null) return null;
        return deploymentConfigName.getValue("DeploymentGroupArgs.deploymentConfigName");
    }

    /**
     * The name of the deployment group.
     * 
     */
    private UndeferrableValue<String> deploymentGroupName;

    public String deploymentGroupName() {
        if (deploymentGroupName == null) return null;
        return deploymentGroupName.getValue("DeploymentGroupArgs.deploymentGroupName");
    }

    /**
     * Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
     * 
     */
    private UndeferrableValue<DeploymentGroupDeploymentStyleArgs> deploymentStyle;

    public DeploymentGroupDeploymentStyleArgs deploymentStyle() {
        if (deploymentStyle == null) return null;
        return deploymentStyle.getValue("DeploymentGroupArgs.deploymentStyle");
    }

    /**
     * Tag filters associated with the deployment group. See the AWS docs for details.
     * 
     */
    private UndeferrableValue<List<DeploymentGroupEc2TagFilterArgs>> ec2TagFilters;

    public List<DeploymentGroupEc2TagFilterArgs> ec2TagFilters() {
        if (ec2TagFilters == null) return null;
        return ec2TagFilters.getValue("DeploymentGroupArgs.ec2TagFilters");
    }

    /**
     * Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
     * 
     */
    private UndeferrableValue<List<DeploymentGroupEc2TagSetArgs>> ec2TagSets;

    public List<DeploymentGroupEc2TagSetArgs> ec2TagSets() {
        if (ec2TagSets == null) return null;
        return ec2TagSets.getValue("DeploymentGroupArgs.ec2TagSets");
    }

    /**
     * Configuration block(s) of the ECS services for a deployment group (documented below).
     * 
     */
    private UndeferrableValue<DeploymentGroupEcsServiceArgs> ecsService;

    public DeploymentGroupEcsServiceArgs ecsService() {
        if (ecsService == null) return null;
        return ecsService.getValue("DeploymentGroupArgs.ecsService");
    }

    /**
     * Single configuration block of the load balancer to use in a blue/green deployment (documented below).
     * 
     */
    private UndeferrableValue<DeploymentGroupLoadBalancerInfoArgs> loadBalancerInfo;

    public DeploymentGroupLoadBalancerInfoArgs loadBalancerInfo() {
        if (loadBalancerInfo == null) return null;
        return loadBalancerInfo.getValue("DeploymentGroupArgs.loadBalancerInfo");
    }

    /**
     * On premise tag filters associated with the group. See the AWS docs for details.
     * 
     */
    private UndeferrableValue<List<DeploymentGroupOnPremisesInstanceTagFilterArgs>> onPremisesInstanceTagFilters;

    public List<DeploymentGroupOnPremisesInstanceTagFilterArgs> onPremisesInstanceTagFilters() {
        if (onPremisesInstanceTagFilters == null) return null;
        return onPremisesInstanceTagFilters.getValue("DeploymentGroupArgs.onPremisesInstanceTagFilters");
    }

    /**
     * Configuration block of Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. Valid values are `UPDATE` and `IGNORE`. Defaults to `UPDATE`.
     * 
     */
    private UndeferrableValue<String> outdatedInstancesStrategy;

    public String outdatedInstancesStrategy() {
        if (outdatedInstancesStrategy == null) return null;
        return outdatedInstancesStrategy.getValue("DeploymentGroupArgs.outdatedInstancesStrategy");
    }

    /**
     * The service role ARN that allows deployments.
     * 
     */
    private UndeferrableValue<String> serviceRoleArn;

    public String serviceRoleArn() {
        if (serviceRoleArn == null) return null;
        return serviceRoleArn.getValue("DeploymentGroupArgs.serviceRoleArn");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DeploymentGroupArgs.tags");
    }

    /**
     * Indicates whether the deployment group was configured to have CodeDeploy install a termination hook into an Auto Scaling group.
     * 
     */
    private UndeferrableValue<Boolean> terminationHookEnabled;

    public Boolean terminationHookEnabled() {
        if (terminationHookEnabled == null) return null;
        return terminationHookEnabled.getValue("DeploymentGroupArgs.terminationHookEnabled");
    }

    /**
     * Configuration block(s) of the triggers for the deployment group (documented below).
     * 
     */
    private UndeferrableValue<List<DeploymentGroupTriggerConfigurationArgs>> triggerConfigurations;

    public List<DeploymentGroupTriggerConfigurationArgs> triggerConfigurations() {
        if (triggerConfigurations == null) return null;
        return triggerConfigurations.getValue("DeploymentGroupArgs.triggerConfigurations");
    }

}
