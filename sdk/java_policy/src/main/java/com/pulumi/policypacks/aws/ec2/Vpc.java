// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/vpc:Vpc")
public final class Vpc extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of VPC
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Vpc.arn' is not present");
    }

    /**
     * Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`. Conflicts with `ipv6_ipam_pool_id`
     * 
     */
    @PolicyResourceProperty(name="assignGeneratedIpv6CidrBlock", flag="unknown_assignGeneratedIpv6CidrBlock")
    private @Nullable Boolean value_assignGeneratedIpv6CidrBlock;
    private boolean unknown_assignGeneratedIpv6CidrBlock;
    public @Nullable Boolean assignGeneratedIpv6CidrBlock() {
        if (!unknown_assignGeneratedIpv6CidrBlock) return value_assignGeneratedIpv6CidrBlock;
        throw new UndeferrableValueException("Value 'Vpc.assignGeneratedIpv6CidrBlock' is not present");
    }

    /**
     * The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4_netmask_length`.
     * 
     */
    @PolicyResourceProperty(name="cidrBlock", flag="unknown_cidrBlock")
    private String value_cidrBlock;
    private boolean unknown_cidrBlock;
    public String cidrBlock() {
        if (!unknown_cidrBlock) return value_cidrBlock;
        throw new UndeferrableValueException("Value 'Vpc.cidrBlock' is not present");
    }

    /**
     * The ID of the network ACL created by default on VPC creation
     * 
     */
    @PolicyResourceProperty(name="defaultNetworkAclId", flag="unknown_defaultNetworkAclId")
    private String value_defaultNetworkAclId;
    private boolean unknown_defaultNetworkAclId;
    public String defaultNetworkAclId() {
        if (!unknown_defaultNetworkAclId) return value_defaultNetworkAclId;
        throw new UndeferrableValueException("Value 'Vpc.defaultNetworkAclId' is not present");
    }

    /**
     * The ID of the route table created by default on VPC creation
     * 
     */
    @PolicyResourceProperty(name="defaultRouteTableId", flag="unknown_defaultRouteTableId")
    private String value_defaultRouteTableId;
    private boolean unknown_defaultRouteTableId;
    public String defaultRouteTableId() {
        if (!unknown_defaultRouteTableId) return value_defaultRouteTableId;
        throw new UndeferrableValueException("Value 'Vpc.defaultRouteTableId' is not present");
    }

    /**
     * The ID of the security group created by default on VPC creation
     * 
     */
    @PolicyResourceProperty(name="defaultSecurityGroupId", flag="unknown_defaultSecurityGroupId")
    private String value_defaultSecurityGroupId;
    private boolean unknown_defaultSecurityGroupId;
    public String defaultSecurityGroupId() {
        if (!unknown_defaultSecurityGroupId) return value_defaultSecurityGroupId;
        throw new UndeferrableValueException("Value 'Vpc.defaultSecurityGroupId' is not present");
    }

    /**
     * DHCP options id of the desired VPC.
     * 
     */
    @PolicyResourceProperty(name="dhcpOptionsId", flag="unknown_dhcpOptionsId")
    private String value_dhcpOptionsId;
    private boolean unknown_dhcpOptionsId;
    public String dhcpOptionsId() {
        if (!unknown_dhcpOptionsId) return value_dhcpOptionsId;
        throw new UndeferrableValueException("Value 'Vpc.dhcpOptionsId' is not present");
    }

    /**
     * A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
     * 
     */
    @PolicyResourceProperty(name="enableDnsHostnames", flag="unknown_enableDnsHostnames")
    private Boolean value_enableDnsHostnames;
    private boolean unknown_enableDnsHostnames;
    public Boolean enableDnsHostnames() {
        if (!unknown_enableDnsHostnames) return value_enableDnsHostnames;
        throw new UndeferrableValueException("Value 'Vpc.enableDnsHostnames' is not present");
    }

    /**
     * A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
     * 
     */
    @PolicyResourceProperty(name="enableDnsSupport", flag="unknown_enableDnsSupport")
    private @Nullable Boolean value_enableDnsSupport;
    private boolean unknown_enableDnsSupport;
    public @Nullable Boolean enableDnsSupport() {
        if (!unknown_enableDnsSupport) return value_enableDnsSupport;
        throw new UndeferrableValueException("Value 'Vpc.enableDnsSupport' is not present");
    }

    /**
     * Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
     * 
     */
    @PolicyResourceProperty(name="enableNetworkAddressUsageMetrics", flag="unknown_enableNetworkAddressUsageMetrics")
    private Boolean value_enableNetworkAddressUsageMetrics;
    private boolean unknown_enableNetworkAddressUsageMetrics;
    public Boolean enableNetworkAddressUsageMetrics() {
        if (!unknown_enableNetworkAddressUsageMetrics) return value_enableNetworkAddressUsageMetrics;
        throw new UndeferrableValueException("Value 'Vpc.enableNetworkAddressUsageMetrics' is not present");
    }

    /**
     * A tenancy option for instances launched into the VPC. Default is `default`, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is `dedicated`, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
     * 
     */
    @PolicyResourceProperty(name="instanceTenancy", flag="unknown_instanceTenancy")
    private @Nullable String value_instanceTenancy;
    private boolean unknown_instanceTenancy;
    public @Nullable String instanceTenancy() {
        if (!unknown_instanceTenancy) return value_instanceTenancy;
        throw new UndeferrableValueException("Value 'Vpc.instanceTenancy' is not present");
    }

    /**
     * The ID of an IPv4 IPAM pool you want to use for allocating this VPC&#39;s CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
     * 
     */
    @PolicyResourceProperty(name="ipv4IpamPoolId", flag="unknown_ipv4IpamPoolId")
    private @Nullable String value_ipv4IpamPoolId;
    private boolean unknown_ipv4IpamPoolId;
    public @Nullable String ipv4IpamPoolId() {
        if (!unknown_ipv4IpamPoolId) return value_ipv4IpamPoolId;
        throw new UndeferrableValueException("Value 'Vpc.ipv4IpamPoolId' is not present");
    }

    /**
     * The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a `ipv4_ipam_pool_id`.
     * 
     */
    @PolicyResourceProperty(name="ipv4NetmaskLength", flag="unknown_ipv4NetmaskLength")
    private @Nullable Integer value_ipv4NetmaskLength;
    private boolean unknown_ipv4NetmaskLength;
    public @Nullable Integer ipv4NetmaskLength() {
        if (!unknown_ipv4NetmaskLength) return value_ipv4NetmaskLength;
        throw new UndeferrableValueException("Value 'Vpc.ipv4NetmaskLength' is not present");
    }

    /**
     * The association ID for the IPv6 CIDR block.
     * 
     */
    @PolicyResourceProperty(name="ipv6AssociationId", flag="unknown_ipv6AssociationId")
    private String value_ipv6AssociationId;
    private boolean unknown_ipv6AssociationId;
    public String ipv6AssociationId() {
        if (!unknown_ipv6AssociationId) return value_ipv6AssociationId;
        throw new UndeferrableValueException("Value 'Vpc.ipv6AssociationId' is not present");
    }

    /**
     * IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6_netmask_length`.
     * 
     */
    @PolicyResourceProperty(name="ipv6CidrBlock", flag="unknown_ipv6CidrBlock")
    private String value_ipv6CidrBlock;
    private boolean unknown_ipv6CidrBlock;
    public String ipv6CidrBlock() {
        if (!unknown_ipv6CidrBlock) return value_ipv6CidrBlock;
        throw new UndeferrableValueException("Value 'Vpc.ipv6CidrBlock' is not present");
    }

    /**
     * By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
     * 
     */
    @PolicyResourceProperty(name="ipv6CidrBlockNetworkBorderGroup", flag="unknown_ipv6CidrBlockNetworkBorderGroup")
    private String value_ipv6CidrBlockNetworkBorderGroup;
    private boolean unknown_ipv6CidrBlockNetworkBorderGroup;
    public String ipv6CidrBlockNetworkBorderGroup() {
        if (!unknown_ipv6CidrBlockNetworkBorderGroup) return value_ipv6CidrBlockNetworkBorderGroup;
        throw new UndeferrableValueException("Value 'Vpc.ipv6CidrBlockNetworkBorderGroup' is not present");
    }

    /**
     * IPAM Pool ID for a IPv6 pool. Conflicts with `assign_generated_ipv6_cidr_block`.
     * 
     */
    @PolicyResourceProperty(name="ipv6IpamPoolId", flag="unknown_ipv6IpamPoolId")
    private @Nullable String value_ipv6IpamPoolId;
    private boolean unknown_ipv6IpamPoolId;
    public @Nullable String ipv6IpamPoolId() {
        if (!unknown_ipv6IpamPoolId) return value_ipv6IpamPoolId;
        throw new UndeferrableValueException("Value 'Vpc.ipv6IpamPoolId' is not present");
    }

    /**
     * Netmask length to request from IPAM Pool. Conflicts with `ipv6_cidr_block`. This can be omitted if IPAM pool as a `allocation_default_netmask_length` set. Valid values are from `44` to `60` in increments of 4.
     * 
     */
    @PolicyResourceProperty(name="ipv6NetmaskLength", flag="unknown_ipv6NetmaskLength")
    private @Nullable Integer value_ipv6NetmaskLength;
    private boolean unknown_ipv6NetmaskLength;
    public @Nullable Integer ipv6NetmaskLength() {
        if (!unknown_ipv6NetmaskLength) return value_ipv6NetmaskLength;
        throw new UndeferrableValueException("Value 'Vpc.ipv6NetmaskLength' is not present");
    }

    /**
     * The ID of the main route table associated with
     * this VPC. Note that you can change a VPC&#39;s main route table by using an
     * `aws.ec2.MainRouteTableAssociation`.
     * 
     */
    @PolicyResourceProperty(name="mainRouteTableId", flag="unknown_mainRouteTableId")
    private String value_mainRouteTableId;
    private boolean unknown_mainRouteTableId;
    public String mainRouteTableId() {
        if (!unknown_mainRouteTableId) return value_mainRouteTableId;
        throw new UndeferrableValueException("Value 'Vpc.mainRouteTableId' is not present");
    }

    /**
     * The ID of the AWS account that owns the VPC.
     * 
     */
    @PolicyResourceProperty(name="ownerId", flag="unknown_ownerId")
    private String value_ownerId;
    private boolean unknown_ownerId;
    public String ownerId() {
        if (!unknown_ownerId) return value_ownerId;
        throw new UndeferrableValueException("Value 'Vpc.ownerId' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Vpc.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Vpc.tagsAll' is not present");
    }

}
