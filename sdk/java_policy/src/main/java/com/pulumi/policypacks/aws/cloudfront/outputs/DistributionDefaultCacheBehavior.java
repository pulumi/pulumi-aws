// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudfront.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionDefaultCacheBehaviorForwardedValues;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionDefaultCacheBehaviorFunctionAssociation;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionDefaultCacheBehaviorGrpcConfig;
import com.pulumi.policypacks.aws.cloudfront.outputs.DistributionDefaultCacheBehaviorLambdaFunctionAssociation;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class DistributionDefaultCacheBehavior {

    /**
     * Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.
     * 
     */
    private UndeferrableValue<List<String>> allowedMethods;

    public List<String> allowedMethods() {
        if (allowedMethods == null) return null;
        return allowedMethods.getValue("DistributionDefaultCacheBehavior.allowedMethods");
    }

    /**
     * Unique identifier of the cache policy that is attached to the cache behavior. If configuring the `default_cache_behavior` either `cache_policy_id` or `forwarded_values` must be set.
     * 
     */
    private @Nullable UndeferrableValue<String> cachePolicyId;

    public @Nullable String cachePolicyId() {
        if (cachePolicyId == null) return null;
        return cachePolicyId.getValue("DistributionDefaultCacheBehavior.cachePolicyId");
    }

    /**
     * Controls whether CloudFront caches the response to requests using the specified HTTP methods.
     * 
     */
    private UndeferrableValue<List<String>> cachedMethods;

    public List<String> cachedMethods() {
        if (cachedMethods == null) return null;
        return cachedMethods.getValue("DistributionDefaultCacheBehavior.cachedMethods");
    }

    /**
     * Whether you want CloudFront to automatically compress content for web requests that include `Accept-Encoding: gzip` in the request header (default: `false`).
     * 
     */
    private @Nullable UndeferrableValue<Boolean> compress;

    public @Nullable Boolean compress() {
        if (compress == null) return null;
        return compress.getValue("DistributionDefaultCacheBehavior.compress");
    }

    /**
     * Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an `Cache-Control max-age` or `Expires` header. The TTL defined in Cache Policy overrides this configuration.
     * 
     */
    private @Nullable UndeferrableValue<Integer> defaultTtl;

    public @Nullable Integer defaultTtl() {
        if (defaultTtl == null) return null;
        return defaultTtl.getValue("DistributionDefaultCacheBehavior.defaultTtl");
    }

    /**
     * Field level encryption configuration ID.
     * 
     */
    private @Nullable UndeferrableValue<String> fieldLevelEncryptionId;

    public @Nullable String fieldLevelEncryptionId() {
        if (fieldLevelEncryptionId == null) return null;
        return fieldLevelEncryptionId.getValue("DistributionDefaultCacheBehavior.fieldLevelEncryptionId");
    }

    /**
     * The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).
     * 
     */
    private @Nullable UndeferrableValue<DistributionDefaultCacheBehaviorForwardedValues> forwardedValues;

    public @Nullable DistributionDefaultCacheBehaviorForwardedValues forwardedValues() {
        if (forwardedValues == null) return null;
        return forwardedValues.getValue("DistributionDefaultCacheBehavior.forwardedValues");
    }

    /**
     * A config block that triggers a cloudfront function with specific actions (maximum 2).
     * 
     */
    private @Nullable UndeferrableValue<List<DistributionDefaultCacheBehaviorFunctionAssociation>> functionAssociations;

    public @Nullable List<DistributionDefaultCacheBehaviorFunctionAssociation> functionAssociations() {
        if (functionAssociations == null) return null;
        return functionAssociations.getValue("DistributionDefaultCacheBehavior.functionAssociations");
    }

    /**
     * A config block that sets the grpc config.
     * 
     */
    private @Nullable UndeferrableValue<DistributionDefaultCacheBehaviorGrpcConfig> grpcConfig;

    public @Nullable DistributionDefaultCacheBehaviorGrpcConfig grpcConfig() {
        if (grpcConfig == null) return null;
        return grpcConfig.getValue("DistributionDefaultCacheBehavior.grpcConfig");
    }

    /**
     * A config block that triggers a lambda function with specific actions (maximum 4).
     * 
     */
    private @Nullable UndeferrableValue<List<DistributionDefaultCacheBehaviorLambdaFunctionAssociation>> lambdaFunctionAssociations;

    public @Nullable List<DistributionDefaultCacheBehaviorLambdaFunctionAssociation> lambdaFunctionAssociations() {
        if (lambdaFunctionAssociations == null) return null;
        return lambdaFunctionAssociations.getValue("DistributionDefaultCacheBehavior.lambdaFunctionAssociations");
    }

    /**
     * Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of `Cache-Control max-age`, `Cache-Control s-maxage`, and `Expires` headers. The TTL defined in Cache Policy overrides this configuration.
     * 
     */
    private @Nullable UndeferrableValue<Integer> maxTtl;

    public @Nullable Integer maxTtl() {
        if (maxTtl == null) return null;
        return maxTtl.getValue("DistributionDefaultCacheBehavior.maxTtl");
    }

    /**
     * Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds. The TTL defined in Cache Policy overrides this configuration.
     * 
     */
    private @Nullable UndeferrableValue<Integer> minTtl;

    public @Nullable Integer minTtl() {
        if (minTtl == null) return null;
        return minTtl.getValue("DistributionDefaultCacheBehavior.minTtl");
    }

    /**
     * Unique identifier of the origin request policy that is attached to the behavior.
     * 
     */
    private @Nullable UndeferrableValue<String> originRequestPolicyId;

    public @Nullable String originRequestPolicyId() {
        if (originRequestPolicyId == null) return null;
        return originRequestPolicyId.getValue("DistributionDefaultCacheBehavior.originRequestPolicyId");
    }

    /**
     * ARN of the real-time log configuration that is attached to this cache behavior.
     * 
     */
    private @Nullable UndeferrableValue<String> realtimeLogConfigArn;

    public @Nullable String realtimeLogConfigArn() {
        if (realtimeLogConfigArn == null) return null;
        return realtimeLogConfigArn.getValue("DistributionDefaultCacheBehavior.realtimeLogConfigArn");
    }

    /**
     * Identifier for a response headers policy.
     * 
     */
    private @Nullable UndeferrableValue<String> responseHeadersPolicyId;

    public @Nullable String responseHeadersPolicyId() {
        if (responseHeadersPolicyId == null) return null;
        return responseHeadersPolicyId.getValue("DistributionDefaultCacheBehavior.responseHeadersPolicyId");
    }

    /**
     * Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> smoothStreaming;

    public @Nullable Boolean smoothStreaming() {
        if (smoothStreaming == null) return null;
        return smoothStreaming.getValue("DistributionDefaultCacheBehavior.smoothStreaming");
    }

    /**
     * Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
     * 
     */
    private UndeferrableValue<String> targetOriginId;

    public String targetOriginId() {
        if (targetOriginId == null) return null;
        return targetOriginId.getValue("DistributionDefaultCacheBehavior.targetOriginId");
    }

    /**
     * List of nested attributes for active trusted key groups, if the distribution is set up to serve private content with signed URLs.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> trustedKeyGroups;

    public @Nullable List<String> trustedKeyGroups() {
        if (trustedKeyGroups == null) return null;
        return trustedKeyGroups.getValue("DistributionDefaultCacheBehavior.trustedKeyGroups");
    }

    /**
     * List of nested attributes for active trusted signers, if the distribution is set up to serve private content with signed URLs.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> trustedSigners;

    public @Nullable List<String> trustedSigners() {
        if (trustedSigners == null) return null;
        return trustedSigners.getValue("DistributionDefaultCacheBehavior.trustedSigners");
    }

    /**
     * Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of `allow-all`, `https-only`, or `redirect-to-https`.
     * 
     */
    private UndeferrableValue<String> viewerProtocolPolicy;

    public String viewerProtocolPolicy() {
        if (viewerProtocolPolicy == null) return null;
        return viewerProtocolPolicy.getValue("DistributionDefaultCacheBehavior.viewerProtocolPolicy");
    }

}
