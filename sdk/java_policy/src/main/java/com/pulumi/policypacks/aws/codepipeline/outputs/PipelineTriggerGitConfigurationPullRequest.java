// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codepipeline.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.codepipeline.outputs.PipelineTriggerGitConfigurationPullRequestBranches;
import com.pulumi.policypacks.aws.codepipeline.outputs.PipelineTriggerGitConfigurationPullRequestFilePaths;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class PipelineTriggerGitConfigurationPullRequest {

    /**
     * The field that specifies to filter on branches for the pull request trigger configuration. A `branches` block is documented below.
     * 
     */
    @PolicyResourceProperty(name="branches", flag="unknown_branches")
    private @Nullable PipelineTriggerGitConfigurationPullRequestBranches value_branches;
    private boolean unknown_branches;
    public @Nullable PipelineTriggerGitConfigurationPullRequestBranches branches() {
        if (!unknown_branches) return value_branches;
        throw new UndeferrableValueException("Value 'PipelineTriggerGitConfigurationPullRequest.branches' is not present");
    }

    /**
     * A list that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration. Possible values are `OPEN`, ` UPDATED  ` and `CLOSED`.
     * 
     */
    @PolicyResourceProperty(name="events", flag="unknown_events")
    private @Nullable List<String> value_events;
    private boolean unknown_events;
    public @Nullable List<String> events() {
        if (!unknown_events) return value_events;
        throw new UndeferrableValueException("Value 'PipelineTriggerGitConfigurationPullRequest.events' is not present");
    }

    /**
     * The field that specifies to filter on file paths for the pull request trigger configuration. A `file_paths` block is documented below.
     * 
     */
    @PolicyResourceProperty(name="filePaths", flag="unknown_filePaths")
    private @Nullable PipelineTriggerGitConfigurationPullRequestFilePaths value_filePaths;
    private boolean unknown_filePaths;
    public @Nullable PipelineTriggerGitConfigurationPullRequestFilePaths filePaths() {
        if (!unknown_filePaths) return value_filePaths;
        throw new UndeferrableValueException("Value 'PipelineTriggerGitConfigurationPullRequest.filePaths' is not present");
    }

}
