// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.connect;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.connect.inputs.RoutingProfileMediaConcurrencyArgs;
import com.pulumi.policypacks.aws.connect.inputs.RoutingProfileQueueConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:connect/routingProfile:RoutingProfile")
public final class RoutingProfileArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies the default outbound queue for the Routing Profile.
     * 
     */
    @PolicyResourceProperty(name="defaultOutboundQueueId", flag="unknown_defaultOutboundQueueId")
    private String value_defaultOutboundQueueId;
    private boolean unknown_defaultOutboundQueueId;
    public String defaultOutboundQueueId() {
        if (!unknown_defaultOutboundQueueId) return value_defaultOutboundQueueId;
        throw new UndeferrableValueException("Value 'RoutingProfileArgs.defaultOutboundQueueId' is not present");
    }

    /**
     * Specifies the description of the Routing Profile.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'RoutingProfileArgs.description' is not present");
    }

    /**
     * Specifies the identifier of the hosting Amazon Connect Instance.
     * 
     */
    @PolicyResourceProperty(name="instanceId", flag="unknown_instanceId")
    private String value_instanceId;
    private boolean unknown_instanceId;
    public String instanceId() {
        if (!unknown_instanceId) return value_instanceId;
        throw new UndeferrableValueException("Value 'RoutingProfileArgs.instanceId' is not present");
    }

    /**
     * One or more `media_concurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `media_concurrencies` block is documented below.
     * 
     */
    @PolicyResourceProperty(name="mediaConcurrencies", flag="unknown_mediaConcurrencies")
    private List<RoutingProfileMediaConcurrencyArgs> value_mediaConcurrencies;
    private boolean unknown_mediaConcurrencies;
    public List<RoutingProfileMediaConcurrencyArgs> mediaConcurrencies() {
        if (!unknown_mediaConcurrencies) return value_mediaConcurrencies;
        throw new UndeferrableValueException("Value 'RoutingProfileArgs.mediaConcurrencies' is not present");
    }

    /**
     * Specifies the name of the Routing Profile.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'RoutingProfileArgs.name' is not present");
    }

    /**
     * One or more `queue_configs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queue_configs` block is documented below.
     * 
     */
    @PolicyResourceProperty(name="queueConfigs", flag="unknown_queueConfigs")
    private List<RoutingProfileQueueConfigArgs> value_queueConfigs;
    private boolean unknown_queueConfigs;
    public List<RoutingProfileQueueConfigArgs> queueConfigs() {
        if (!unknown_queueConfigs) return value_queueConfigs;
        throw new UndeferrableValueException("Value 'RoutingProfileArgs.queueConfigs' is not present");
    }

    /**
     * Tags to apply to the Routing Profile. If configured with a provider
     * `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'RoutingProfileArgs.tags' is not present");
    }

}
