// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.alb;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.alb.inputs.TargetGroupHealthCheckArgs;
import com.pulumi.policypacks.aws.alb.inputs.TargetGroupStickinessArgs;
import com.pulumi.policypacks.aws.alb.inputs.TargetGroupTargetFailoverArgs;
import com.pulumi.policypacks.aws.alb.inputs.TargetGroupTargetGroupHealthArgs;
import com.pulumi.policypacks.aws.alb.inputs.TargetGroupTargetHealthStateArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:alb/targetGroup:TargetGroup")
public final class TargetGroupArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Whether to terminate connections at the end of the deregistration timeout on Network Load Balancers. See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#deregistration-delay) for more information. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="connectionTermination", flag="unknown_connectionTermination")
    private Boolean value_connectionTermination;
    private boolean unknown_connectionTermination;
    public Boolean connectionTermination() {
        if (!unknown_connectionTermination) return value_connectionTermination;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.connectionTermination' is not present");
    }

    /**
     * Amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds.
     * 
     */
    @PolicyResourceProperty(name="deregistrationDelay", flag="unknown_deregistrationDelay")
    private Integer value_deregistrationDelay;
    private boolean unknown_deregistrationDelay;
    public Integer deregistrationDelay() {
        if (!unknown_deregistrationDelay) return value_deregistrationDelay;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.deregistrationDelay' is not present");
    }

    /**
     * Health Check configuration block. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="healthCheck", flag="unknown_healthCheck")
    private TargetGroupHealthCheckArgs value_healthCheck;
    private boolean unknown_healthCheck;
    public TargetGroupHealthCheckArgs healthCheck() {
        if (!unknown_healthCheck) return value_healthCheck;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.healthCheck' is not present");
    }

    /**
     * The type of IP addresses used by the target group, only supported when target type is set to `ip`. Possible values are `ipv4` or `ipv6`.
     * 
     */
    @PolicyResourceProperty(name="ipAddressType", flag="unknown_ipAddressType")
    private String value_ipAddressType;
    private boolean unknown_ipAddressType;
    public String ipAddressType() {
        if (!unknown_ipAddressType) return value_ipAddressType;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.ipAddressType' is not present");
    }

    /**
     * Whether the request and response headers exchanged between the load balancer and the Lambda function include arrays of values or strings. Only applies when `target_type` is `lambda`. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="lambdaMultiValueHeadersEnabled", flag="unknown_lambdaMultiValueHeadersEnabled")
    private Boolean value_lambdaMultiValueHeadersEnabled;
    private boolean unknown_lambdaMultiValueHeadersEnabled;
    public Boolean lambdaMultiValueHeadersEnabled() {
        if (!unknown_lambdaMultiValueHeadersEnabled) return value_lambdaMultiValueHeadersEnabled;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.lambdaMultiValueHeadersEnabled' is not present");
    }

    /**
     * Determines how the load balancer selects targets when routing requests. Only applicable for Application Load Balancer Target Groups. The value is `round_robin`, `least_outstanding_requests`, or `weighted_random`. The default is `round_robin`.
     * 
     */
    @PolicyResourceProperty(name="loadBalancingAlgorithmType", flag="unknown_loadBalancingAlgorithmType")
    private String value_loadBalancingAlgorithmType;
    private boolean unknown_loadBalancingAlgorithmType;
    public String loadBalancingAlgorithmType() {
        if (!unknown_loadBalancingAlgorithmType) return value_loadBalancingAlgorithmType;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.loadBalancingAlgorithmType' is not present");
    }

    /**
     * Determines whether to enable target anomaly mitigation.  Target anomaly mitigation is only supported by the `weighted_random` load balancing algorithm type.  See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#automatic-target-weights) for more information.  The value is `&#34;on&#34;` or `&#34;off&#34;`. The default is `&#34;off&#34;`.
     * 
     */
    @PolicyResourceProperty(name="loadBalancingAnomalyMitigation", flag="unknown_loadBalancingAnomalyMitigation")
    private String value_loadBalancingAnomalyMitigation;
    private boolean unknown_loadBalancingAnomalyMitigation;
    public String loadBalancingAnomalyMitigation() {
        if (!unknown_loadBalancingAnomalyMitigation) return value_loadBalancingAnomalyMitigation;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.loadBalancingAnomalyMitigation' is not present");
    }

    /**
     * Indicates whether cross zone load balancing is enabled. The value is `&#34;true&#34;`, `&#34;false&#34;` or `&#34;use_load_balancer_configuration&#34;`. The default is `&#34;use_load_balancer_configuration&#34;`.
     * 
     */
    @PolicyResourceProperty(name="loadBalancingCrossZoneEnabled", flag="unknown_loadBalancingCrossZoneEnabled")
    private String value_loadBalancingCrossZoneEnabled;
    private boolean unknown_loadBalancingCrossZoneEnabled;
    public String loadBalancingCrossZoneEnabled() {
        if (!unknown_loadBalancingCrossZoneEnabled) return value_loadBalancingCrossZoneEnabled;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.loadBalancingCrossZoneEnabled' is not present");
    }

    /**
     * Name of the target group. If omitted, this provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.name' is not present");
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
     * 
     */
    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.namePrefix' is not present");
    }

    /**
     * Port on which targets receive traffic, unless overridden when registering a specific target. Required when `target_type` is `instance`, `ip` or `alb`. Does not apply when `target_type` is `lambda`.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.port' is not present");
    }

    /**
     * Whether client IP preservation is enabled. See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#client-ip-preservation) for more information.
     * 
     */
    @PolicyResourceProperty(name="preserveClientIp", flag="unknown_preserveClientIp")
    private String value_preserveClientIp;
    private boolean unknown_preserveClientIp;
    public String preserveClientIp() {
        if (!unknown_preserveClientIp) return value_preserveClientIp;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.preserveClientIp' is not present");
    }

    /**
     * Protocol to use for routing traffic to the targets.
     * Should be one of `GENEVE`, `HTTP`, `HTTPS`, `TCP`, `TCP_UDP`, `TLS`, or `UDP`.
     * Required when `target_type` is `instance`, `ip`, or `alb`.
     * Does not apply when `target_type` is `lambda`.
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.protocol' is not present");
    }

    /**
     * Only applicable when `protocol` is `HTTP` or `HTTPS`. The protocol version. Specify `GRPC` to send requests to targets using gRPC. Specify `HTTP2` to send requests to targets using HTTP/2. The default is `HTTP1`, which sends requests to targets using HTTP/1.1
     * 
     */
    @PolicyResourceProperty(name="protocolVersion", flag="unknown_protocolVersion")
    private String value_protocolVersion;
    private boolean unknown_protocolVersion;
    public String protocolVersion() {
        if (!unknown_protocolVersion) return value_protocolVersion;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.protocolVersion' is not present");
    }

    /**
     * Whether to enable support for proxy protocol v2 on Network Load Balancers. See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#proxy-protocol) for more information. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="proxyProtocolV2", flag="unknown_proxyProtocolV2")
    private Boolean value_proxyProtocolV2;
    private boolean unknown_proxyProtocolV2;
    public Boolean proxyProtocolV2() {
        if (!unknown_proxyProtocolV2) return value_proxyProtocolV2;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.proxyProtocolV2' is not present");
    }

    /**
     * Amount time for targets to warm up before the load balancer sends them a full share of requests. The range is 30-900 seconds or 0 to disable. The default value is 0 seconds.
     * 
     */
    @PolicyResourceProperty(name="slowStart", flag="unknown_slowStart")
    private Integer value_slowStart;
    private boolean unknown_slowStart;
    public Integer slowStart() {
        if (!unknown_slowStart) return value_slowStart;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.slowStart' is not present");
    }

    /**
     * Stickiness configuration block. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="stickiness", flag="unknown_stickiness")
    private TargetGroupStickinessArgs value_stickiness;
    private boolean unknown_stickiness;
    public TargetGroupStickinessArgs stickiness() {
        if (!unknown_stickiness) return value_stickiness;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.stickiness' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.tags' is not present");
    }

    /**
     * Target failover block. Only applicable for Gateway Load Balancer target groups. See target_failover for more information.
     * 
     */
    @PolicyResourceProperty(name="targetFailovers", flag="unknown_targetFailovers")
    private List<TargetGroupTargetFailoverArgs> value_targetFailovers;
    private boolean unknown_targetFailovers;
    public List<TargetGroupTargetFailoverArgs> targetFailovers() {
        if (!unknown_targetFailovers) return value_targetFailovers;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.targetFailovers' is not present");
    }

    /**
     * Target health requirements block. See target_group_health for more information.
     * 
     */
    @PolicyResourceProperty(name="targetGroupHealth", flag="unknown_targetGroupHealth")
    private TargetGroupTargetGroupHealthArgs value_targetGroupHealth;
    private boolean unknown_targetGroupHealth;
    public TargetGroupTargetGroupHealthArgs targetGroupHealth() {
        if (!unknown_targetGroupHealth) return value_targetGroupHealth;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.targetGroupHealth' is not present");
    }

    /**
     * Target health state block. Only applicable for Network Load Balancer target groups when `protocol` is `TCP` or `TLS`. See target_health_state for more information.
     * 
     */
    @PolicyResourceProperty(name="targetHealthStates", flag="unknown_targetHealthStates")
    private List<TargetGroupTargetHealthStateArgs> value_targetHealthStates;
    private boolean unknown_targetHealthStates;
    public List<TargetGroupTargetHealthStateArgs> targetHealthStates() {
        if (!unknown_targetHealthStates) return value_targetHealthStates;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.targetHealthStates' is not present");
    }

    /**
     * Type of target that you must specify when registering targets with this target group.
     * See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_CreateTargetGroup.html) for supported values.
     * The default is `instance`.
     * 
     * Note that you can&#39;t specify targets for a target group using both instance IDs and IP addresses.
     * 
     * If the target type is `ip`, specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can&#39;t specify publicly routable IP addresses.
     * 
     * Network Load Balancers do not support the `lambda` target type.
     * 
     * Application Load Balancers do not support the `alb` target type.
     * 
     */
    @PolicyResourceProperty(name="targetType", flag="unknown_targetType")
    private String value_targetType;
    private boolean unknown_targetType;
    public String targetType() {
        if (!unknown_targetType) return value_targetType;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.targetType' is not present");
    }

    /**
     * Identifier of the VPC in which to create the target group. Required when `target_type` is `instance`, `ip` or `alb`. Does not apply when `target_type` is `lambda`.
     * 
     */
    @PolicyResourceProperty(name="vpcId", flag="unknown_vpcId")
    private String value_vpcId;
    private boolean unknown_vpcId;
    public String vpcId() {
        if (!unknown_vpcId) return value_vpcId;
        throw new UndeferrableValueException("Value 'TargetGroupArgs.vpcId' is not present");
    }

}
