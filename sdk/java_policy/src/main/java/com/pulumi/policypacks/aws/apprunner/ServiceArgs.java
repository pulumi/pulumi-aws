// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apprunner;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.apprunner.inputs.ServiceEncryptionConfigurationArgs;
import com.pulumi.policypacks.aws.apprunner.inputs.ServiceHealthCheckConfigurationArgs;
import com.pulumi.policypacks.aws.apprunner.inputs.ServiceInstanceConfigurationArgs;
import com.pulumi.policypacks.aws.apprunner.inputs.ServiceNetworkConfigurationArgs;
import com.pulumi.policypacks.aws.apprunner.inputs.ServiceObservabilityConfigurationArgs;
import com.pulumi.policypacks.aws.apprunner.inputs.ServiceSourceConfigurationArgs;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apprunner/service:Service")
public final class ServiceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.
     * 
     */
    private UndeferrableValue<String> autoScalingConfigurationArn;

    public String autoScalingConfigurationArn() {
        if (autoScalingConfigurationArn == null) return null;
        return autoScalingConfigurationArn.getValue("ServiceArgs.autoScalingConfigurationArn");
    }

    /**
     * An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.
     * 
     */
    private UndeferrableValue<ServiceEncryptionConfigurationArgs> encryptionConfiguration;

    public ServiceEncryptionConfigurationArgs encryptionConfiguration() {
        if (encryptionConfiguration == null) return null;
        return encryptionConfiguration.getValue("ServiceArgs.encryptionConfiguration");
    }

    /**
     * Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.
     * 
     */
    private UndeferrableValue<ServiceHealthCheckConfigurationArgs> healthCheckConfiguration;

    public ServiceHealthCheckConfigurationArgs healthCheckConfiguration() {
        if (healthCheckConfiguration == null) return null;
        return healthCheckConfiguration.getValue("ServiceArgs.healthCheckConfiguration");
    }

    /**
     * The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.
     * 
     */
    private UndeferrableValue<ServiceInstanceConfigurationArgs> instanceConfiguration;

    public ServiceInstanceConfigurationArgs instanceConfiguration() {
        if (instanceConfiguration == null) return null;
        return instanceConfiguration.getValue("ServiceArgs.instanceConfiguration");
    }

    /**
     * Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.
     * 
     */
    private UndeferrableValue<ServiceNetworkConfigurationArgs> networkConfiguration;

    public ServiceNetworkConfigurationArgs networkConfiguration() {
        if (networkConfiguration == null) return null;
        return networkConfiguration.getValue("ServiceArgs.networkConfiguration");
    }

    /**
     * The observability configuration of your service. See Observability Configuration below for more details.
     * 
     */
    private UndeferrableValue<ServiceObservabilityConfigurationArgs> observabilityConfiguration;

    public ServiceObservabilityConfigurationArgs observabilityConfiguration() {
        if (observabilityConfiguration == null) return null;
        return observabilityConfiguration.getValue("ServiceArgs.observabilityConfiguration");
    }

    /**
     * Name of the service.
     * 
     */
    private UndeferrableValue<String> serviceName;

    public String serviceName() {
        if (serviceName == null) return null;
        return serviceName.getValue("ServiceArgs.serviceName");
    }

    /**
     * The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<ServiceSourceConfigurationArgs> sourceConfiguration;

    public ServiceSourceConfigurationArgs sourceConfiguration() {
        if (sourceConfiguration == null) return null;
        return sourceConfiguration.getValue("ServiceArgs.sourceConfiguration");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ServiceArgs.tags");
    }

}
