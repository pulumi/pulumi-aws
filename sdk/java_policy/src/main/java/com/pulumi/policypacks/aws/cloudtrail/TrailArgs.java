// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudtrail;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudtrail.inputs.TrailAdvancedEventSelectorArgs;
import com.pulumi.policypacks.aws.cloudtrail.inputs.TrailEventSelectorArgs;
import com.pulumi.policypacks.aws.cloudtrail.inputs.TrailInsightSelectorArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudtrail/trail:Trail")
public final class TrailArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `event_selector`.
     * 
     */
    private UndeferrableValue<List<TrailAdvancedEventSelectorArgs>> advancedEventSelectors;

    public List<TrailAdvancedEventSelectorArgs> advancedEventSelectors() {
        if (advancedEventSelectors == null) return null;
        return advancedEventSelectors.getValue("TrailArgs.advancedEventSelectors");
    }

    /**
     * Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
     * 
     */
    private UndeferrableValue<String> cloudWatchLogsGroupArn;

    public String cloudWatchLogsGroupArn() {
        if (cloudWatchLogsGroupArn == null) return null;
        return cloudWatchLogsGroupArn.getValue("TrailArgs.cloudWatchLogsGroupArn");
    }

    /**
     * Role for the CloudWatch Logs endpoint to assume to write to a userâ€™s log group.
     * 
     */
    private UndeferrableValue<String> cloudWatchLogsRoleArn;

    public String cloudWatchLogsRoleArn() {
        if (cloudWatchLogsRoleArn == null) return null;
        return cloudWatchLogsRoleArn.getValue("TrailArgs.cloudWatchLogsRoleArn");
    }

    /**
     * Whether log file integrity validation is enabled. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> enableLogFileValidation;

    public Boolean enableLogFileValidation() {
        if (enableLogFileValidation == null) return null;
        return enableLogFileValidation.getValue("TrailArgs.enableLogFileValidation");
    }

    /**
     * Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
     * 
     */
    private UndeferrableValue<Boolean> enableLogging;

    public Boolean enableLogging() {
        if (enableLogging == null) return null;
        return enableLogging.getValue("TrailArgs.enableLogging");
    }

    /**
     * Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advanced_event_selector`.
     * 
     */
    private UndeferrableValue<List<TrailEventSelectorArgs>> eventSelectors;

    public List<TrailEventSelectorArgs> eventSelectors() {
        if (eventSelectors == null) return null;
        return eventSelectors.getValue("TrailArgs.eventSelectors");
    }

    /**
     * Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> includeGlobalServiceEvents;

    public Boolean includeGlobalServiceEvents() {
        if (includeGlobalServiceEvents == null) return null;
        return includeGlobalServiceEvents.getValue("TrailArgs.includeGlobalServiceEvents");
    }

    /**
     * Configuration block for identifying unusual operational activity. See details below.
     * 
     */
    private UndeferrableValue<List<TrailInsightSelectorArgs>> insightSelectors;

    public List<TrailInsightSelectorArgs> insightSelectors() {
        if (insightSelectors == null) return null;
        return insightSelectors.getValue("TrailArgs.insightSelectors");
    }

    /**
     * Whether the trail is created in the current region or in all regions. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> isMultiRegionTrail;

    public Boolean isMultiRegionTrail() {
        if (isMultiRegionTrail == null) return null;
        return isMultiRegionTrail.getValue("TrailArgs.isMultiRegionTrail");
    }

    /**
     * Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> isOrganizationTrail;

    public Boolean isOrganizationTrail() {
        if (isOrganizationTrail == null) return null;
        return isOrganizationTrail.getValue("TrailArgs.isOrganizationTrail");
    }

    /**
     * KMS key ARN to use to encrypt the logs delivered by CloudTrail.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("TrailArgs.kmsKeyId");
    }

    /**
     * Name of the trail.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("TrailArgs.name");
    }

    /**
     * Name of the S3 bucket designated for publishing log files.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> s3BucketName;

    public String s3BucketName() {
        if (s3BucketName == null) return null;
        return s3BucketName.getValue("TrailArgs.s3BucketName");
    }

    /**
     * S3 key prefix that follows the name of the bucket you have designated for log file delivery.
     * 
     */
    private UndeferrableValue<String> s3KeyPrefix;

    public String s3KeyPrefix() {
        if (s3KeyPrefix == null) return null;
        return s3KeyPrefix.getValue("TrailArgs.s3KeyPrefix");
    }

    /**
     * Name of the Amazon SNS topic defined for notification of log file delivery. Specify the SNS topic ARN if it resides in another region.
     * 
     */
    private UndeferrableValue<String> snsTopicName;

    public String snsTopicName() {
        if (snsTopicName == null) return null;
        return snsTopicName.getValue("TrailArgs.snsTopicName");
    }

    /**
     * Map of tags to assign to the trail. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("TrailArgs.tags");
    }

}
