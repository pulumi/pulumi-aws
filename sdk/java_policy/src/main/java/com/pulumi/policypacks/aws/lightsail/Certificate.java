// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lightsail.outputs.CertificateDomainValidationOption;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lightsail/certificate:Certificate")
public final class Certificate extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the lightsail certificate.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Certificate.arn' is not present");
    }

    /**
     * The timestamp when the instance was created.
     * 
     */
    @PolicyResourceProperty(name="createdAt", flag="unknown_createdAt")
    private String value_createdAt;
    private boolean unknown_createdAt;
    public String createdAt() {
        if (!unknown_createdAt) return value_createdAt;
        throw new UndeferrableValueException("Value 'Certificate.createdAt' is not present");
    }

    /**
     * A domain name for which the certificate should be issued.
     * 
     */
    @PolicyResourceProperty(name="domainName", flag="unknown_domainName")
    private String value_domainName;
    private boolean unknown_domainName;
    public String domainName() {
        if (!unknown_domainName) return value_domainName;
        throw new UndeferrableValueException("Value 'Certificate.domainName' is not present");
    }

    /**
     * Set of domain validation objects which can be used to complete certificate validation. Can have more than one element, e.g., if SANs are defined.
     * 
     */
    @PolicyResourceProperty(name="domainValidationOptions", flag="unknown_domainValidationOptions")
    private List<CertificateDomainValidationOption> value_domainValidationOptions;
    private boolean unknown_domainValidationOptions;
    public List<CertificateDomainValidationOption> domainValidationOptions() {
        if (!unknown_domainValidationOptions) return value_domainValidationOptions;
        throw new UndeferrableValueException("Value 'Certificate.domainValidationOptions' is not present");
    }

    /**
     * The name of the Lightsail load balancer.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Certificate.name' is not present");
    }

    /**
     * Set of domains that should be SANs in the issued certificate. `domain_name` attribute is automatically added as a Subject Alternative Name.
     * 
     */
    @PolicyResourceProperty(name="subjectAlternativeNames", flag="unknown_subjectAlternativeNames")
    private List<String> value_subjectAlternativeNames;
    private boolean unknown_subjectAlternativeNames;
    public List<String> subjectAlternativeNames() {
        if (!unknown_subjectAlternativeNames) return value_subjectAlternativeNames;
        throw new UndeferrableValueException("Value 'Certificate.subjectAlternativeNames' is not present");
    }

    /**
     * A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Certificate.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Certificate.tagsAll' is not present");
    }

}
