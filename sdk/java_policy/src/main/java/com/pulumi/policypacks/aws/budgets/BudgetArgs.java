// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.budgets;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.budgets.inputs.BudgetAutoAdjustDataArgs;
import com.pulumi.policypacks.aws.budgets.inputs.BudgetCostFilterArgs;
import com.pulumi.policypacks.aws.budgets.inputs.BudgetCostTypesArgs;
import com.pulumi.policypacks.aws.budgets.inputs.BudgetNotificationArgs;
import com.pulumi.policypacks.aws.budgets.inputs.BudgetPlannedLimitArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:budgets/budget:Budget")
public final class BudgetArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The ID of the target account for budget. Will use current user&#39;s account_id by default if omitted.
     * 
     */
    private UndeferrableValue<String> accountId;

    public String accountId() {
        if (accountId == null) return null;
        return accountId.getValue("BudgetArgs.accountId");
    }

    /**
     * Object containing AutoAdjustData which determines the budget amount for an auto-adjusting budget.
     * 
     */
    private UndeferrableValue<BudgetAutoAdjustDataArgs> autoAdjustData;

    public BudgetAutoAdjustDataArgs autoAdjustData() {
        if (autoAdjustData == null) return null;
        return autoAdjustData.getValue("BudgetArgs.autoAdjustData");
    }

    /**
     * Whether this budget tracks monetary cost or usage.
     * 
     */
    private UndeferrableValue<String> budgetType;

    public String budgetType() {
        if (budgetType == null) return null;
        return budgetType.getValue("BudgetArgs.budgetType");
    }

    /**
     * A list of CostFilter name/values pair to apply to budget.
     * 
     */
    private UndeferrableValue<List<BudgetCostFilterArgs>> costFilters;

    public List<BudgetCostFilterArgs> costFilters() {
        if (costFilters == null) return null;
        return costFilters.getValue("BudgetArgs.costFilters");
    }

    /**
     * Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
     * 
     */
    private UndeferrableValue<BudgetCostTypesArgs> costTypes;

    public BudgetCostTypesArgs costTypes() {
        if (costTypes == null) return null;
        return costTypes.getValue("BudgetArgs.costTypes");
    }

    /**
     * The amount of cost or usage being measured for a budget.
     * 
     */
    private UndeferrableValue<String> limitAmount;

    public String limitAmount() {
        if (limitAmount == null) return null;
        return limitAmount.getValue("BudgetArgs.limitAmount");
    }

    /**
     * The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
     * 
     */
    private UndeferrableValue<String> limitUnit;

    public String limitUnit() {
        if (limitUnit == null) return null;
        return limitUnit.getValue("BudgetArgs.limitUnit");
    }

    /**
     * The name of a budget. Unique within accounts.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("BudgetArgs.name");
    }

    /**
     * The prefix of the name of a budget. Unique within accounts.
     * 
     */
    private UndeferrableValue<String> namePrefix;

    public String namePrefix() {
        if (namePrefix == null) return null;
        return namePrefix.getValue("BudgetArgs.namePrefix");
    }

    /**
     * Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
     * 
     */
    private UndeferrableValue<List<BudgetNotificationArgs>> notifications;

    public List<BudgetNotificationArgs> notifications() {
        if (notifications == null) return null;
        return notifications.getValue("BudgetArgs.notifications");
    }

    /**
     * Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
     * 
     */
    private UndeferrableValue<List<BudgetPlannedLimitArgs>> plannedLimits;

    public List<BudgetPlannedLimitArgs> plannedLimits() {
        if (plannedLimits == null) return null;
        return plannedLimits.getValue("BudgetArgs.plannedLimits");
    }

    /**
     * Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("BudgetArgs.tags");
    }

    /**
     * The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
     * 
     */
    private UndeferrableValue<String> timePeriodEnd;

    public String timePeriodEnd() {
        if (timePeriodEnd == null) return null;
        return timePeriodEnd.getValue("BudgetArgs.timePeriodEnd");
    }

    /**
     * The start of the time period covered by the budget. If you don&#39;t specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
     * 
     */
    private UndeferrableValue<String> timePeriodStart;

    public String timePeriodStart() {
        if (timePeriodStart == null) return null;
        return timePeriodStart.getValue("BudgetArgs.timePeriodStart");
    }

    /**
     * The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> timeUnit;

    public String timeUnit() {
        if (timeUnit == null) return null;
        return timeUnit.getValue("BudgetArgs.timeUnit");
    }

}
