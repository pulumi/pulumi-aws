// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codeartifact;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:codeartifact/domainPermissions:DomainPermissions")
public final class DomainPermissionsArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The name of the domain on which to set the resource policy.
     * 
     */
    @PolicyResourceProperty(name="domain", flag="unknown_domain")
    private String value_domain;
    private boolean unknown_domain;
    public String domain() {
        if (!unknown_domain) return value_domain;
        throw new UndeferrableValueException("Value 'DomainPermissionsArgs.domain' is not present");
    }

    /**
     * The account number of the AWS account that owns the domain.
     * 
     */
    @PolicyResourceProperty(name="domainOwner", flag="unknown_domainOwner")
    private String value_domainOwner;
    private boolean unknown_domainOwner;
    public String domainOwner() {
        if (!unknown_domainOwner) return value_domainOwner;
        throw new UndeferrableValueException("Value 'DomainPermissionsArgs.domainOwner' is not present");
    }

    /**
     * A JSON policy string to be set as the access control resource policy on the provided domain.
     * 
     */
    @PolicyResourceProperty(name="policyDocument", flag="unknown_policyDocument")
    private String value_policyDocument;
    private boolean unknown_policyDocument;
    public String policyDocument() {
        if (!unknown_policyDocument) return value_policyDocument;
        throw new UndeferrableValueException("Value 'DomainPermissionsArgs.policyDocument' is not present");
    }

    /**
     * The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain&#39;s resource policy.
     * 
     */
    @PolicyResourceProperty(name="policyRevision", flag="unknown_policyRevision")
    private String value_policyRevision;
    private boolean unknown_policyRevision;
    public String policyRevision() {
        if (!unknown_policyRevision) return value_policyRevision;
        throw new UndeferrableValueException("Value 'DomainPermissionsArgs.policyRevision' is not present");
    }

}
