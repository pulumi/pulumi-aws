// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigateway.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class MethodSettingsSettings {

    /**
     * Whether the cached responses are encrypted.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> cacheDataEncrypted;

    public @Nullable Boolean cacheDataEncrypted() {
        if (cacheDataEncrypted == null) return null;
        return cacheDataEncrypted.getValue("MethodSettingsSettings.cacheDataEncrypted");
    }

    /**
     * Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
     * 
     */
    private @Nullable UndeferrableValue<Integer> cacheTtlInSeconds;

    public @Nullable Integer cacheTtlInSeconds() {
        if (cacheTtlInSeconds == null) return null;
        return cacheTtlInSeconds.getValue("MethodSettingsSettings.cacheTtlInSeconds");
    }

    /**
     * Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> cachingEnabled;

    public @Nullable Boolean cachingEnabled() {
        if (cachingEnabled == null) return null;
        return cachingEnabled.getValue("MethodSettingsSettings.cachingEnabled");
    }

    /**
     * Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> dataTraceEnabled;

    public @Nullable Boolean dataTraceEnabled() {
        if (dataTraceEnabled == null) return null;
        return dataTraceEnabled.getValue("MethodSettingsSettings.dataTraceEnabled");
    }

    /**
     * Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
     * 
     */
    private @Nullable UndeferrableValue<String> loggingLevel;

    public @Nullable String loggingLevel() {
        if (loggingLevel == null) return null;
        return loggingLevel.getValue("MethodSettingsSettings.loggingLevel");
    }

    /**
     * Whether Amazon CloudWatch metrics are enabled for this method.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> metricsEnabled;

    public @Nullable Boolean metricsEnabled() {
        if (metricsEnabled == null) return null;
        return metricsEnabled.getValue("MethodSettingsSettings.metricsEnabled");
    }

    /**
     * Whether authorization is required for a cache invalidation request.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> requireAuthorizationForCacheControl;

    public @Nullable Boolean requireAuthorizationForCacheControl() {
        if (requireAuthorizationForCacheControl == null) return null;
        return requireAuthorizationForCacheControl.getValue("MethodSettingsSettings.requireAuthorizationForCacheControl");
    }

    /**
     * Throttling burst limit. Default: `-1` (throttling disabled).
     * 
     */
    private @Nullable UndeferrableValue<Integer> throttlingBurstLimit;

    public @Nullable Integer throttlingBurstLimit() {
        if (throttlingBurstLimit == null) return null;
        return throttlingBurstLimit.getValue("MethodSettingsSettings.throttlingBurstLimit");
    }

    /**
     * Throttling rate limit. Default: `-1` (throttling disabled).
     * 
     */
    private @Nullable UndeferrableValue<Double> throttlingRateLimit;

    public @Nullable Double throttlingRateLimit() {
        if (throttlingRateLimit == null) return null;
        return throttlingRateLimit.getValue("MethodSettingsSettings.throttlingRateLimit");
    }

    /**
     * How to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
     * 
     */
    private @Nullable UndeferrableValue<String> unauthorizedCacheControlHeaderStrategy;

    public @Nullable String unauthorizedCacheControlHeaderStrategy() {
        if (unauthorizedCacheControlHeaderStrategy == null) return null;
        return unauthorizedCacheControlHeaderStrategy.getValue("MethodSettingsSettings.unauthorizedCacheControlHeaderStrategy");
    }

}
