// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.opsworks;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:opsworks/permission:Permission")
public final class PermissionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Whether the user is allowed to use SSH to communicate with the instance
     * 
     */
    @PolicyResourceProperty(name="allowSsh", flag="unknown_allowSsh")
    private Boolean value_allowSsh;
    private boolean unknown_allowSsh;
    public Boolean allowSsh() {
        if (!unknown_allowSsh) return value_allowSsh;
        throw new UndeferrableValueException("Value 'PermissionArgs.allowSsh' is not present");
    }

    /**
     * Whether the user is allowed to use sudo to elevate privileges
     * 
     */
    @PolicyResourceProperty(name="allowSudo", flag="unknown_allowSudo")
    private Boolean value_allowSudo;
    private boolean unknown_allowSudo;
    public Boolean allowSudo() {
        if (!unknown_allowSudo) return value_allowSudo;
        throw new UndeferrableValueException("Value 'PermissionArgs.allowSudo' is not present");
    }

    /**
     * The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iam_only`
     * 
     */
    @PolicyResourceProperty(name="level", flag="unknown_level")
    private String value_level;
    private boolean unknown_level;
    public String level() {
        if (!unknown_level) return value_level;
        throw new UndeferrableValueException("Value 'PermissionArgs.level' is not present");
    }

    /**
     * The stack to set the permissions for
     * 
     */
    @PolicyResourceProperty(name="stackId", flag="unknown_stackId")
    private String value_stackId;
    private boolean unknown_stackId;
    public String stackId() {
        if (!unknown_stackId) return value_stackId;
        throw new UndeferrableValueException("Value 'PermissionArgs.stackId' is not present");
    }

    /**
     * The user&#39;s IAM ARN to set permissions for
     * 
     */
    @PolicyResourceProperty(name="userArn", flag="unknown_userArn")
    private String value_userArn;
    private boolean unknown_userArn;
    public String userArn() {
        if (!unknown_userArn) return value_userArn;
        throw new UndeferrableValueException("Value 'PermissionArgs.userArn' is not present");
    }

}
