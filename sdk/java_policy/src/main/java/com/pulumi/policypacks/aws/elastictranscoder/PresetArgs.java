// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elastictranscoder;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elastictranscoder.inputs.PresetAudioArgs;
import com.pulumi.policypacks.aws.elastictranscoder.inputs.PresetAudioCodecOptionsArgs;
import com.pulumi.policypacks.aws.elastictranscoder.inputs.PresetThumbnailsArgs;
import com.pulumi.policypacks.aws.elastictranscoder.inputs.PresetVideoArgs;
import com.pulumi.policypacks.aws.elastictranscoder.inputs.PresetVideoWatermarkArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elastictranscoder/preset:Preset")
public final class PresetArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Audio parameters object (documented below).
     * 
     */
    private UndeferrableValue<PresetAudioArgs> audio;

    public PresetAudioArgs audio() {
        if (audio == null) return null;
        return audio.getValue("PresetArgs.audio");
    }

    /**
     * Codec options for the audio parameters (documented below)
     * 
     */
    private UndeferrableValue<PresetAudioCodecOptionsArgs> audioCodecOptions;

    public PresetAudioCodecOptionsArgs audioCodecOptions() {
        if (audioCodecOptions == null) return null;
        return audioCodecOptions.getValue("PresetArgs.audioCodecOptions");
    }

    /**
     * The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
     * 
     */
    private UndeferrableValue<String> container;

    public String container() {
        if (container == null) return null;
        return container.getValue("PresetArgs.container");
    }

    /**
     * A description of the preset (maximum 255 characters)
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("PresetArgs.description");
    }

    /**
     * The name of the preset. (maximum 40 characters)
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("PresetArgs.name");
    }

    /**
     * Thumbnail parameters object (documented below)
     * 
     */
    private UndeferrableValue<PresetThumbnailsArgs> thumbnails;

    public PresetThumbnailsArgs thumbnails() {
        if (thumbnails == null) return null;
        return thumbnails.getValue("PresetArgs.thumbnails");
    }

    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("PresetArgs.type");
    }

    /**
     * Video parameters object (documented below)
     * 
     */
    private UndeferrableValue<PresetVideoArgs> video;

    public PresetVideoArgs video() {
        if (video == null) return null;
        return video.getValue("PresetArgs.video");
    }

    /**
     * Codec options for the video parameters
     * 
     */
    private UndeferrableValue<Map<String,String>> videoCodecOptions;

    public Map<String,String> videoCodecOptions() {
        if (videoCodecOptions == null) return null;
        return videoCodecOptions.getValue("PresetArgs.videoCodecOptions");
    }

    /**
     * Watermark parameters for the video parameters (documented below)
     * 
     */
    private UndeferrableValue<List<PresetVideoWatermarkArgs>> videoWatermarks;

    public List<PresetVideoWatermarkArgs> videoWatermarks() {
        if (videoWatermarks == null) return null;
        return videoWatermarks.getValue("PresetArgs.videoWatermarks");
    }

}
