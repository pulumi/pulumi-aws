// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.route53;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.route53.outputs.ResolverEndpointIpAddress;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:route53/resolverEndpoint:ResolverEndpoint")
public final class ResolverEndpoint extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Route 53 Resolver endpoint.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ResolverEndpoint.arn' is not present");
    }

    /**
     * Direction of DNS queries to or from the Route 53 Resolver endpoint.
     * Valid values are `INBOUND` (resolver forwards DNS queries to the DNS service for a VPC from your network or another VPC)
     * or `OUTBOUND` (resolver forwards DNS queries from the DNS service for a VPC to your network or another VPC).
     * 
     */
    @PolicyResourceProperty(name="direction", flag="unknown_direction")
    private String value_direction;
    private boolean unknown_direction;
    public String direction() {
        if (!unknown_direction) return value_direction;
        throw new UndeferrableValueException("Value 'ResolverEndpoint.direction' is not present");
    }

    /**
     * ID of the VPC that you want to create the resolver endpoint in.
     * 
     */
    @PolicyResourceProperty(name="hostVpcId", flag="unknown_hostVpcId")
    private String value_hostVpcId;
    private boolean unknown_hostVpcId;
    public String hostVpcId() {
        if (!unknown_hostVpcId) return value_hostVpcId;
        throw new UndeferrableValueException("Value 'ResolverEndpoint.hostVpcId' is not present");
    }

    /**
     * Subnets and IP addresses in your VPC that you want DNS queries to pass through on the way from your VPCs
     * to your network (for outbound endpoints) or on the way from your network to your VPCs (for inbound endpoints). Described below.
     * 
     */
    @PolicyResourceProperty(name="ipAddresses", flag="unknown_ipAddresses")
    private List<ResolverEndpointIpAddress> value_ipAddresses;
    private boolean unknown_ipAddresses;
    public List<ResolverEndpointIpAddress> ipAddresses() {
        if (!unknown_ipAddresses) return value_ipAddresses;
        throw new UndeferrableValueException("Value 'ResolverEndpoint.ipAddresses' is not present");
    }

    /**
     * Friendly name of the Route 53 Resolver endpoint.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'ResolverEndpoint.name' is not present");
    }

    /**
     * Protocols you want to use for the Route 53 Resolver endpoint.
     * Valid values are `DoH`, `Do53`, or `DoH-FIPS`.
     * 
     */
    @PolicyResourceProperty(name="protocols", flag="unknown_protocols")
    private List<String> value_protocols;
    private boolean unknown_protocols;
    public List<String> protocols() {
        if (!unknown_protocols) return value_protocols;
        throw new UndeferrableValueException("Value 'ResolverEndpoint.protocols' is not present");
    }

    /**
     * Endpoint IP type. This endpoint type is applied to all IP addresses.
     * Valid values are `IPV6`,`IPV4` or `DUALSTACK` (both IPv4 and IPv6).
     * 
     */
    @PolicyResourceProperty(name="resolverEndpointType", flag="unknown_resolverEndpointType")
    private String value_resolverEndpointType;
    private boolean unknown_resolverEndpointType;
    public String resolverEndpointType() {
        if (!unknown_resolverEndpointType) return value_resolverEndpointType;
        throw new UndeferrableValueException("Value 'ResolverEndpoint.resolverEndpointType' is not present");
    }

    /**
     * ID of one or more security groups that you want to use to control access to this VPC.
     * 
     */
    @PolicyResourceProperty(name="securityGroupIds", flag="unknown_securityGroupIds")
    private List<String> value_securityGroupIds;
    private boolean unknown_securityGroupIds;
    public List<String> securityGroupIds() {
        if (!unknown_securityGroupIds) return value_securityGroupIds;
        throw new UndeferrableValueException("Value 'ResolverEndpoint.securityGroupIds' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ResolverEndpoint.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ResolverEndpoint.tagsAll' is not present");
    }

}
