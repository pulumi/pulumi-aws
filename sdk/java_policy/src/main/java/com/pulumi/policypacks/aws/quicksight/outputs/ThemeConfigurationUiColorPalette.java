// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.String;
import javax.annotation.Nullable;


public final class ThemeConfigurationUiColorPalette {

    /**
     * Color (hexadecimal) that applies to selected states and buttons.
     * 
     */
    private @Nullable UndeferrableValue<String> accent;

    public @Nullable String accent() {
        if (accent == null) return null;
        return accent.getValue("ThemeConfigurationUiColorPalette.accent");
    }

    /**
     * Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
     * 
     */
    private @Nullable UndeferrableValue<String> accentForeground;

    public @Nullable String accentForeground() {
        if (accentForeground == null) return null;
        return accentForeground.getValue("ThemeConfigurationUiColorPalette.accentForeground");
    }

    /**
     * Color (hexadecimal) that applies to error messages.
     * 
     */
    private @Nullable UndeferrableValue<String> danger;

    public @Nullable String danger() {
        if (danger == null) return null;
        return danger.getValue("ThemeConfigurationUiColorPalette.danger");
    }

    /**
     * Color (hexadecimal) that applies to any text or other elements that appear over the error color.
     * 
     */
    private @Nullable UndeferrableValue<String> dangerForeground;

    public @Nullable String dangerForeground() {
        if (dangerForeground == null) return null;
        return dangerForeground.getValue("ThemeConfigurationUiColorPalette.dangerForeground");
    }

    /**
     * Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
     * 
     */
    private @Nullable UndeferrableValue<String> dimension;

    public @Nullable String dimension() {
        if (dimension == null) return null;
        return dimension.getValue("ThemeConfigurationUiColorPalette.dimension");
    }

    /**
     * Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
     * 
     */
    private @Nullable UndeferrableValue<String> dimensionForeground;

    public @Nullable String dimensionForeground() {
        if (dimensionForeground == null) return null;
        return dimensionForeground.getValue("ThemeConfigurationUiColorPalette.dimensionForeground");
    }

    /**
     * Color (hexadecimal) that applies to the names of fields that are identified as measures.
     * 
     */
    private @Nullable UndeferrableValue<String> measure;

    public @Nullable String measure() {
        if (measure == null) return null;
        return measure.getValue("ThemeConfigurationUiColorPalette.measure");
    }

    /**
     * Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
     * 
     */
    private @Nullable UndeferrableValue<String> measureForeground;

    public @Nullable String measureForeground() {
        if (measureForeground == null) return null;
        return measureForeground.getValue("ThemeConfigurationUiColorPalette.measureForeground");
    }

    /**
     * Color (hexadecimal) that applies to visuals and other high emphasis UI.
     * 
     */
    private @Nullable UndeferrableValue<String> primaryBackground;

    public @Nullable String primaryBackground() {
        if (primaryBackground == null) return null;
        return primaryBackground.getValue("ThemeConfigurationUiColorPalette.primaryBackground");
    }

    /**
     * Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
     * 
     */
    private @Nullable UndeferrableValue<String> primaryForeground;

    public @Nullable String primaryForeground() {
        if (primaryForeground == null) return null;
        return primaryForeground.getValue("ThemeConfigurationUiColorPalette.primaryForeground");
    }

    /**
     * Color (hexadecimal) that applies to the sheet background and sheet controls.
     * 
     */
    private @Nullable UndeferrableValue<String> secondaryBackground;

    public @Nullable String secondaryBackground() {
        if (secondaryBackground == null) return null;
        return secondaryBackground.getValue("ThemeConfigurationUiColorPalette.secondaryBackground");
    }

    /**
     * Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
     * 
     */
    private @Nullable UndeferrableValue<String> secondaryForeground;

    public @Nullable String secondaryForeground() {
        if (secondaryForeground == null) return null;
        return secondaryForeground.getValue("ThemeConfigurationUiColorPalette.secondaryForeground");
    }

    /**
     * Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
     * 
     */
    private @Nullable UndeferrableValue<String> success;

    public @Nullable String success() {
        if (success == null) return null;
        return success.getValue("ThemeConfigurationUiColorPalette.success");
    }

    /**
     * Color (hexadecimal) that applies to any text or other elements that appear over the success color.
     * 
     */
    private @Nullable UndeferrableValue<String> successForeground;

    public @Nullable String successForeground() {
        if (successForeground == null) return null;
        return successForeground.getValue("ThemeConfigurationUiColorPalette.successForeground");
    }

    /**
     * Color (hexadecimal) that applies to warning and informational messages.
     * 
     */
    private @Nullable UndeferrableValue<String> warning;

    public @Nullable String warning() {
        if (warning == null) return null;
        return warning.getValue("ThemeConfigurationUiColorPalette.warning");
    }

    /**
     * Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
     * 
     */
    private @Nullable UndeferrableValue<String> warningForeground;

    public @Nullable String warningForeground() {
        if (warningForeground == null) return null;
        return warningForeground.getValue("ThemeConfigurationUiColorPalette.warningForeground");
    }

}
