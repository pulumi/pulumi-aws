// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lb;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lb.inputs.TargetGroupHealthCheckArgs;
import com.pulumi.policypacks.aws.lb.inputs.TargetGroupStickinessArgs;
import com.pulumi.policypacks.aws.lb.inputs.TargetGroupTargetFailoverArgs;
import com.pulumi.policypacks.aws.lb.inputs.TargetGroupTargetGroupHealthArgs;
import com.pulumi.policypacks.aws.lb.inputs.TargetGroupTargetHealthStateArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lb/targetGroup:TargetGroup")
public final class TargetGroupArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Whether to terminate connections at the end of the deregistration timeout on Network Load Balancers. See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#deregistration-delay) for more information. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> connectionTermination;

    public Boolean connectionTermination() {
        if (connectionTermination == null) return null;
        return connectionTermination.getValue("TargetGroupArgs.connectionTermination");
    }

    /**
     * Amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds.
     * 
     */
    private UndeferrableValue<Integer> deregistrationDelay;

    public Integer deregistrationDelay() {
        if (deregistrationDelay == null) return null;
        return deregistrationDelay.getValue("TargetGroupArgs.deregistrationDelay");
    }

    /**
     * Health Check configuration block. Detailed below.
     * 
     */
    private UndeferrableValue<TargetGroupHealthCheckArgs> healthCheck;

    public TargetGroupHealthCheckArgs healthCheck() {
        if (healthCheck == null) return null;
        return healthCheck.getValue("TargetGroupArgs.healthCheck");
    }

    /**
     * The type of IP addresses used by the target group, only supported when target type is set to `ip`. Possible values are `ipv4` or `ipv6`.
     * 
     */
    private UndeferrableValue<String> ipAddressType;

    public String ipAddressType() {
        if (ipAddressType == null) return null;
        return ipAddressType.getValue("TargetGroupArgs.ipAddressType");
    }

    /**
     * Whether the request and response headers exchanged between the load balancer and the Lambda function include arrays of values or strings. Only applies when `target_type` is `lambda`. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> lambdaMultiValueHeadersEnabled;

    public Boolean lambdaMultiValueHeadersEnabled() {
        if (lambdaMultiValueHeadersEnabled == null) return null;
        return lambdaMultiValueHeadersEnabled.getValue("TargetGroupArgs.lambdaMultiValueHeadersEnabled");
    }

    /**
     * Determines how the load balancer selects targets when routing requests. Only applicable for Application Load Balancer Target Groups. The value is `round_robin`, `least_outstanding_requests`, or `weighted_random`. The default is `round_robin`.
     * 
     */
    private UndeferrableValue<String> loadBalancingAlgorithmType;

    public String loadBalancingAlgorithmType() {
        if (loadBalancingAlgorithmType == null) return null;
        return loadBalancingAlgorithmType.getValue("TargetGroupArgs.loadBalancingAlgorithmType");
    }

    /**
     * Determines whether to enable target anomaly mitigation.  Target anomaly mitigation is only supported by the `weighted_random` load balancing algorithm type.  See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#automatic-target-weights) for more information.  The value is `&#34;on&#34;` or `&#34;off&#34;`. The default is `&#34;off&#34;`.
     * 
     */
    private UndeferrableValue<String> loadBalancingAnomalyMitigation;

    public String loadBalancingAnomalyMitigation() {
        if (loadBalancingAnomalyMitigation == null) return null;
        return loadBalancingAnomalyMitigation.getValue("TargetGroupArgs.loadBalancingAnomalyMitigation");
    }

    /**
     * Indicates whether cross zone load balancing is enabled. The value is `&#34;true&#34;`, `&#34;false&#34;` or `&#34;use_load_balancer_configuration&#34;`. The default is `&#34;use_load_balancer_configuration&#34;`.
     * 
     */
    private UndeferrableValue<String> loadBalancingCrossZoneEnabled;

    public String loadBalancingCrossZoneEnabled() {
        if (loadBalancingCrossZoneEnabled == null) return null;
        return loadBalancingCrossZoneEnabled.getValue("TargetGroupArgs.loadBalancingCrossZoneEnabled");
    }

    /**
     * Name of the target group. If omitted, this provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("TargetGroupArgs.name");
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
     * 
     */
    private UndeferrableValue<String> namePrefix;

    public String namePrefix() {
        if (namePrefix == null) return null;
        return namePrefix.getValue("TargetGroupArgs.namePrefix");
    }

    /**
     * Port on which targets receive traffic, unless overridden when registering a specific target. Required when `target_type` is `instance`, `ip` or `alb`. Does not apply when `target_type` is `lambda`.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("TargetGroupArgs.port");
    }

    /**
     * Whether client IP preservation is enabled. See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#client-ip-preservation) for more information.
     * 
     */
    private UndeferrableValue<String> preserveClientIp;

    public String preserveClientIp() {
        if (preserveClientIp == null) return null;
        return preserveClientIp.getValue("TargetGroupArgs.preserveClientIp");
    }

    /**
     * Protocol to use for routing traffic to the targets.
     * Should be one of `GENEVE`, `HTTP`, `HTTPS`, `TCP`, `TCP_UDP`, `TLS`, or `UDP`.
     * Required when `target_type` is `instance`, `ip`, or `alb`.
     * Does not apply when `target_type` is `lambda`.
     * 
     */
    private UndeferrableValue<String> protocol;

    public String protocol() {
        if (protocol == null) return null;
        return protocol.getValue("TargetGroupArgs.protocol");
    }

    /**
     * Only applicable when `protocol` is `HTTP` or `HTTPS`. The protocol version. Specify `GRPC` to send requests to targets using gRPC. Specify `HTTP2` to send requests to targets using HTTP/2. The default is `HTTP1`, which sends requests to targets using HTTP/1.1
     * 
     */
    private UndeferrableValue<String> protocolVersion;

    public String protocolVersion() {
        if (protocolVersion == null) return null;
        return protocolVersion.getValue("TargetGroupArgs.protocolVersion");
    }

    /**
     * Whether to enable support for proxy protocol v2 on Network Load Balancers. See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#proxy-protocol) for more information. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> proxyProtocolV2;

    public Boolean proxyProtocolV2() {
        if (proxyProtocolV2 == null) return null;
        return proxyProtocolV2.getValue("TargetGroupArgs.proxyProtocolV2");
    }

    /**
     * Amount time for targets to warm up before the load balancer sends them a full share of requests. The range is 30-900 seconds or 0 to disable. The default value is 0 seconds.
     * 
     */
    private UndeferrableValue<Integer> slowStart;

    public Integer slowStart() {
        if (slowStart == null) return null;
        return slowStart.getValue("TargetGroupArgs.slowStart");
    }

    /**
     * Stickiness configuration block. Detailed below.
     * 
     */
    private UndeferrableValue<TargetGroupStickinessArgs> stickiness;

    public TargetGroupStickinessArgs stickiness() {
        if (stickiness == null) return null;
        return stickiness.getValue("TargetGroupArgs.stickiness");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("TargetGroupArgs.tags");
    }

    /**
     * Target failover block. Only applicable for Gateway Load Balancer target groups. See target_failover for more information.
     * 
     */
    private UndeferrableValue<List<TargetGroupTargetFailoverArgs>> targetFailovers;

    public List<TargetGroupTargetFailoverArgs> targetFailovers() {
        if (targetFailovers == null) return null;
        return targetFailovers.getValue("TargetGroupArgs.targetFailovers");
    }

    /**
     * Target health requirements block. See target_group_health for more information.
     * 
     */
    private UndeferrableValue<TargetGroupTargetGroupHealthArgs> targetGroupHealth;

    public TargetGroupTargetGroupHealthArgs targetGroupHealth() {
        if (targetGroupHealth == null) return null;
        return targetGroupHealth.getValue("TargetGroupArgs.targetGroupHealth");
    }

    /**
     * Target health state block. Only applicable for Network Load Balancer target groups when `protocol` is `TCP` or `TLS`. See target_health_state for more information.
     * 
     */
    private UndeferrableValue<List<TargetGroupTargetHealthStateArgs>> targetHealthStates;

    public List<TargetGroupTargetHealthStateArgs> targetHealthStates() {
        if (targetHealthStates == null) return null;
        return targetHealthStates.getValue("TargetGroupArgs.targetHealthStates");
    }

    /**
     * Type of target that you must specify when registering targets with this target group.
     * See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_CreateTargetGroup.html) for supported values.
     * The default is `instance`.
     * 
     * Note that you can&#39;t specify targets for a target group using both instance IDs and IP addresses.
     * 
     * If the target type is `ip`, specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can&#39;t specify publicly routable IP addresses.
     * 
     * Network Load Balancers do not support the `lambda` target type.
     * 
     * Application Load Balancers do not support the `alb` target type.
     * 
     */
    private UndeferrableValue<String> targetType;

    public String targetType() {
        if (targetType == null) return null;
        return targetType.getValue("TargetGroupArgs.targetType");
    }

    /**
     * Identifier of the VPC in which to create the target group. Required when `target_type` is `instance`, `ip` or `alb`. Does not apply when `target_type` is `lambda`.
     * 
     */
    private UndeferrableValue<String> vpcId;

    public String vpcId() {
        if (vpcId == null) return null;
        return vpcId.getValue("TargetGroupArgs.vpcId");
    }

}
