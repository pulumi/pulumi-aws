// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lakeformation;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lakeformation.inputs.DataLakeSettingsCreateDatabaseDefaultPermissionArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.DataLakeSettingsCreateTableDefaultPermissionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lakeformation/dataLakeSettings:DataLakeSettings")
public final class DataLakeSettingsArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Set of ARNs of AWS Lake Formation principals (IAM users or roles).
     * 
     */
    @PolicyResourceProperty(name="admins", flag="unknown_admins")
    private List<String> value_admins;
    private boolean unknown_admins;
    public List<String> admins() {
        if (!unknown_admins) return value_admins;
        throw new UndeferrableValueException("Value 'DataLakeSettingsArgs.admins' is not present");
    }

    /**
     * Whether to allow Amazon EMR clusters to access data managed by Lake Formation.
     * 
     */
    @PolicyResourceProperty(name="allowExternalDataFiltering", flag="unknown_allowExternalDataFiltering")
    private Boolean value_allowExternalDataFiltering;
    private boolean unknown_allowExternalDataFiltering;
    public Boolean allowExternalDataFiltering() {
        if (!unknown_allowExternalDataFiltering) return value_allowExternalDataFiltering;
        throw new UndeferrableValueException("Value 'DataLakeSettingsArgs.allowExternalDataFiltering' is not present");
    }

    /**
     * Whether to allow a third-party query engine to get data access credentials without session tags when a caller has full data access permissions.
     * 
     */
    @PolicyResourceProperty(name="allowFullTableExternalDataAccess", flag="unknown_allowFullTableExternalDataAccess")
    private Boolean value_allowFullTableExternalDataAccess;
    private boolean unknown_allowFullTableExternalDataAccess;
    public Boolean allowFullTableExternalDataAccess() {
        if (!unknown_allowFullTableExternalDataAccess) return value_allowFullTableExternalDataAccess;
        throw new UndeferrableValueException("Value 'DataLakeSettingsArgs.allowFullTableExternalDataAccess' is not present");
    }

    /**
     * Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user&#39;s role while assuming it.
     * 
     */
    @PolicyResourceProperty(name="authorizedSessionTagValueLists", flag="unknown_authorizedSessionTagValueLists")
    private List<String> value_authorizedSessionTagValueLists;
    private boolean unknown_authorizedSessionTagValueLists;
    public List<String> authorizedSessionTagValueLists() {
        if (!unknown_authorizedSessionTagValueLists) return value_authorizedSessionTagValueLists;
        throw new UndeferrableValueException("Value 'DataLakeSettingsArgs.authorizedSessionTagValueLists' is not present");
    }

    /**
     * Identifier for the Data Catalog. By default, the account ID.
     * 
     */
    @PolicyResourceProperty(name="catalogId", flag="unknown_catalogId")
    private String value_catalogId;
    private boolean unknown_catalogId;
    public String catalogId() {
        if (!unknown_catalogId) return value_catalogId;
        throw new UndeferrableValueException("Value 'DataLakeSettingsArgs.catalogId' is not present");
    }

    /**
     * Up to three configuration blocks of principal permissions for default create database permissions. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="createDatabaseDefaultPermissions", flag="unknown_createDatabaseDefaultPermissions")
    private List<DataLakeSettingsCreateDatabaseDefaultPermissionArgs> value_createDatabaseDefaultPermissions;
    private boolean unknown_createDatabaseDefaultPermissions;
    public List<DataLakeSettingsCreateDatabaseDefaultPermissionArgs> createDatabaseDefaultPermissions() {
        if (!unknown_createDatabaseDefaultPermissions) return value_createDatabaseDefaultPermissions;
        throw new UndeferrableValueException("Value 'DataLakeSettingsArgs.createDatabaseDefaultPermissions' is not present");
    }

    /**
     * Up to three configuration blocks of principal permissions for default create table permissions. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="createTableDefaultPermissions", flag="unknown_createTableDefaultPermissions")
    private List<DataLakeSettingsCreateTableDefaultPermissionArgs> value_createTableDefaultPermissions;
    private boolean unknown_createTableDefaultPermissions;
    public List<DataLakeSettingsCreateTableDefaultPermissionArgs> createTableDefaultPermissions() {
        if (!unknown_createTableDefaultPermissions) return value_createTableDefaultPermissions;
        throw new UndeferrableValueException("Value 'DataLakeSettingsArgs.createTableDefaultPermissions' is not present");
    }

    /**
     * A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.
     * 
     */
    @PolicyResourceProperty(name="externalDataFilteringAllowLists", flag="unknown_externalDataFilteringAllowLists")
    private List<String> value_externalDataFilteringAllowLists;
    private boolean unknown_externalDataFilteringAllowLists;
    public List<String> externalDataFilteringAllowLists() {
        if (!unknown_externalDataFilteringAllowLists) return value_externalDataFilteringAllowLists;
        throw new UndeferrableValueException("Value 'DataLakeSettingsArgs.externalDataFilteringAllowLists' is not present");
    }

    /**
     * Key-value map of additional configuration. Valid values for the `CROSS_ACCOUNT_VERSION` key are `&#34;1&#34;`, `&#34;2&#34;`, `&#34;3&#34;`, or `&#34;4&#34;`. `SET_CONTEXT` is also returned with a value of `TRUE`. In a fresh account, prior to configuring, `CROSS_ACCOUNT_VERSION` is `&#34;1&#34;`. Destroying this resource sets the `CROSS_ACCOUNT_VERSION` to `&#34;1&#34;`.
     * 
     */
    @PolicyResourceProperty(name="parameters", flag="unknown_parameters")
    private Map<String,String> value_parameters;
    private boolean unknown_parameters;
    public Map<String,String> parameters() {
        if (!unknown_parameters) return value_parameters;
        throw new UndeferrableValueException("Value 'DataLakeSettingsArgs.parameters' is not present");
    }

    /**
     * Set of ARNs of AWS Lake Formation principals (IAM users or roles) with only view access to the resources.
     * 
     */
    @PolicyResourceProperty(name="readOnlyAdmins", flag="unknown_readOnlyAdmins")
    private List<String> value_readOnlyAdmins;
    private boolean unknown_readOnlyAdmins;
    public List<String> readOnlyAdmins() {
        if (!unknown_readOnlyAdmins) return value_readOnlyAdmins;
        throw new UndeferrableValueException("Value 'DataLakeSettingsArgs.readOnlyAdmins' is not present");
    }

    /**
     * List of the resource-owning account IDs that the caller&#39;s account can use to share their user access details (user ARNs).
     * 
     * &gt; **NOTE:** Although optional, not including `admins`, `create_database_default_permissions`, `create_table_default_permissions`, `parameters`, and/or `trusted_resource_owners` results in the setting being cleared.
     * 
     */
    @PolicyResourceProperty(name="trustedResourceOwners", flag="unknown_trustedResourceOwners")
    private List<String> value_trustedResourceOwners;
    private boolean unknown_trustedResourceOwners;
    public List<String> trustedResourceOwners() {
        if (!unknown_trustedResourceOwners) return value_trustedResourceOwners;
        throw new UndeferrableValueException("Value 'DataLakeSettingsArgs.trustedResourceOwners' is not present");
    }

}
