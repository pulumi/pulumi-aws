// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.networkmonitor;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:networkmonitor/probe:Probe")
public final class ProbeArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The destination IP address. This must be either IPV4 or IPV6.
     * 
     */
    @PolicyResourceProperty(name="destination", flag="unknown_destination")
    private String value_destination;
    private boolean unknown_destination;
    public String destination() {
        if (!unknown_destination) return value_destination;
        throw new UndeferrableValueException("Value 'ProbeArgs.destination' is not present");
    }

    /**
     * The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
     * 
     */
    @PolicyResourceProperty(name="destinationPort", flag="unknown_destinationPort")
    private Integer value_destinationPort;
    private boolean unknown_destinationPort;
    public Integer destinationPort() {
        if (!unknown_destinationPort) return value_destinationPort;
        throw new UndeferrableValueException("Value 'ProbeArgs.destinationPort' is not present");
    }

    /**
     * The name of the monitor.
     * 
     */
    @PolicyResourceProperty(name="monitorName", flag="unknown_monitorName")
    private String value_monitorName;
    private boolean unknown_monitorName;
    public String monitorName() {
        if (!unknown_monitorName) return value_monitorName;
        throw new UndeferrableValueException("Value 'ProbeArgs.monitorName' is not present");
    }

    /**
     * The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="packetSize", flag="unknown_packetSize")
    private Integer value_packetSize;
    private boolean unknown_packetSize;
    public Integer packetSize() {
        if (!unknown_packetSize) return value_packetSize;
        throw new UndeferrableValueException("Value 'ProbeArgs.packetSize' is not present");
    }

    /**
     * The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'ProbeArgs.protocol' is not present");
    }

    /**
     * The ARN of the subnet.
     * 
     */
    @PolicyResourceProperty(name="sourceArn", flag="unknown_sourceArn")
    private String value_sourceArn;
    private boolean unknown_sourceArn;
    public String sourceArn() {
        if (!unknown_sourceArn) return value_sourceArn;
        throw new UndeferrableValueException("Value 'ProbeArgs.sourceArn' is not present");
    }

    /**
     * Key-value tags for the monitor. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ProbeArgs.tags' is not present");
    }

}
