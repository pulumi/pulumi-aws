// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ssm;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ssm.inputs.MaintenanceWindowTaskTargetArgs;
import com.pulumi.policypacks.aws.ssm.inputs.MaintenanceWindowTaskTaskInvocationParametersArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ssm/maintenanceWindowTask:MaintenanceWindowTask")
public final class MaintenanceWindowTaskArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are `CONTINUE_TASK` and `CANCEL_TASK`.
     * 
     */
    private UndeferrableValue<String> cutoffBehavior;

    public String cutoffBehavior() {
        if (cutoffBehavior == null) return null;
        return cutoffBehavior.getValue("MaintenanceWindowTaskArgs.cutoffBehavior");
    }

    /**
     * The description of the maintenance window task.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("MaintenanceWindowTaskArgs.description");
    }

    /**
     * The maximum number of targets this task can be run for in parallel.
     * 
     */
    private UndeferrableValue<String> maxConcurrency;

    public String maxConcurrency() {
        if (maxConcurrency == null) return null;
        return maxConcurrency.getValue("MaintenanceWindowTaskArgs.maxConcurrency");
    }

    /**
     * The maximum number of errors allowed before this task stops being scheduled.
     * 
     */
    private UndeferrableValue<String> maxErrors;

    public String maxErrors() {
        if (maxErrors == null) return null;
        return maxErrors.getValue("MaintenanceWindowTaskArgs.maxErrors");
    }

    /**
     * The name of the maintenance window task.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("MaintenanceWindowTaskArgs.name");
    }

    /**
     * The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
     * 
     */
    private UndeferrableValue<Integer> priority;

    public Integer priority() {
        if (priority == null) return null;
        return priority.getValue("MaintenanceWindowTaskArgs.priority");
    }

    /**
     * The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account&#39;s service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
     * 
     */
    private UndeferrableValue<String> serviceRoleArn;

    public String serviceRoleArn() {
        if (serviceRoleArn == null) return null;
        return serviceRoleArn.getValue("MaintenanceWindowTaskArgs.serviceRoleArn");
    }

    /**
     * The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
     * 
     */
    private UndeferrableValue<List<MaintenanceWindowTaskTargetArgs>> targets;

    public List<MaintenanceWindowTaskTargetArgs> targets() {
        if (targets == null) return null;
        return targets.getValue("MaintenanceWindowTaskArgs.targets");
    }

    /**
     * The ARN of the task to execute.
     * 
     */
    private UndeferrableValue<String> taskArn;

    public String taskArn() {
        if (taskArn == null) return null;
        return taskArn.getValue("MaintenanceWindowTaskArgs.taskArn");
    }

    /**
     * Configuration block with parameters for task execution.
     * 
     */
    private UndeferrableValue<MaintenanceWindowTaskTaskInvocationParametersArgs> taskInvocationParameters;

    public MaintenanceWindowTaskTaskInvocationParametersArgs taskInvocationParameters() {
        if (taskInvocationParameters == null) return null;
        return taskInvocationParameters.getValue("MaintenanceWindowTaskArgs.taskInvocationParameters");
    }

    /**
     * The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
     * 
     */
    private UndeferrableValue<String> taskType;

    public String taskType() {
        if (taskType == null) return null;
        return taskType.getValue("MaintenanceWindowTaskArgs.taskType");
    }

    /**
     * The Id of the maintenance window to register the task with.
     * 
     */
    private UndeferrableValue<String> windowId;

    public String windowId() {
        if (windowId == null) return null;
        return windowId.getValue("MaintenanceWindowTaskArgs.windowId");
    }

}
