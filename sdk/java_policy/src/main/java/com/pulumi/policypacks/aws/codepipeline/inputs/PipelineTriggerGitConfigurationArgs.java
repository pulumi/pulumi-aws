// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codepipeline.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.codepipeline.inputs.PipelineTriggerGitConfigurationPullRequestArgs;
import com.pulumi.policypacks.aws.codepipeline.inputs.PipelineTriggerGitConfigurationPushArgs;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class PipelineTriggerGitConfigurationArgs {

    /**
     * The field where the repository event that will start the pipeline is specified as pull requests. A `pull_request` block is documented below.
     * 
     */
    @PolicyResourceProperty(name="pullRequests", flag="unknown_pullRequests")
    private List<PipelineTriggerGitConfigurationPullRequestArgs> value_pullRequests;
    private boolean unknown_pullRequests;
    public List<PipelineTriggerGitConfigurationPullRequestArgs> pullRequests() {
        if (!unknown_pullRequests) return value_pullRequests;
        throw new UndeferrableValueException("Value 'PipelineTriggerGitConfigurationArgs.pullRequests' is not present");
    }

    /**
     * The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A `push` block is documented below.
     * 
     */
    @PolicyResourceProperty(name="pushes", flag="unknown_pushes")
    private List<PipelineTriggerGitConfigurationPushArgs> value_pushes;
    private boolean unknown_pushes;
    public List<PipelineTriggerGitConfigurationPushArgs> pushes() {
        if (!unknown_pushes) return value_pushes;
        throw new UndeferrableValueException("Value 'PipelineTriggerGitConfigurationArgs.pushes' is not present");
    }

    /**
     * The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.
     * 
     */
    @PolicyResourceProperty(name="sourceActionName", flag="unknown_sourceActionName")
    private String value_sourceActionName;
    private boolean unknown_sourceActionName;
    public String sourceActionName() {
        if (!unknown_sourceActionName) return value_sourceActionName;
        throw new UndeferrableValueException("Value 'PipelineTriggerGitConfigurationArgs.sourceActionName' is not present");
    }

}
