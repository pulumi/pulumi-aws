// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesis;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.kinesis.inputs.StreamStreamModeDetailsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:kinesis/stream:Stream")
public final class StreamArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The Amazon Resource Name (ARN) specifying the Stream (same as `id`)
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'StreamArgs.arn' is not present");
    }

    /**
     * The encryption type to use. The only acceptable values are `NONE` or `KMS`. The default value is `NONE`.
     * 
     */
    @PolicyResourceProperty(name="encryptionType", flag="unknown_encryptionType")
    private String value_encryptionType;
    private boolean unknown_encryptionType;
    public String encryptionType() {
        if (!unknown_encryptionType) return value_encryptionType;
        throw new UndeferrableValueException("Value 'StreamArgs.encryptionType' is not present");
    }

    /**
     * A boolean that indicates all registered consumers should be deregistered from the stream so that the stream can be destroyed without error. The default value is `false`.
     * 
     */
    @PolicyResourceProperty(name="enforceConsumerDeletion", flag="unknown_enforceConsumerDeletion")
    private Boolean value_enforceConsumerDeletion;
    private boolean unknown_enforceConsumerDeletion;
    public Boolean enforceConsumerDeletion() {
        if (!unknown_enforceConsumerDeletion) return value_enforceConsumerDeletion;
        throw new UndeferrableValueException("Value 'StreamArgs.enforceConsumerDeletion' is not present");
    }

    /**
     * The GUID for the customer-managed KMS key to use for encryption. You can also use a Kinesis-owned master key by specifying the alias `alias/aws/kinesis`.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'StreamArgs.kmsKeyId' is not present");
    }

    /**
     * A name to identify the stream. This is unique to the AWS account and region the Stream is created in.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'StreamArgs.name' is not present");
    }

    /**
     * Length of time data records are accessible after they are added to the stream. The maximum value of a stream&#39;s retention period is 8760 hours. Minimum value is 24. Default is 24.
     * 
     */
    @PolicyResourceProperty(name="retentionPeriod", flag="unknown_retentionPeriod")
    private Integer value_retentionPeriod;
    private boolean unknown_retentionPeriod;
    public Integer retentionPeriod() {
        if (!unknown_retentionPeriod) return value_retentionPeriod;
        throw new UndeferrableValueException("Value 'StreamArgs.retentionPeriod' is not present");
    }

    /**
     * The number of shards that the stream will use. If the `stream_mode` is `PROVISIONED`, this field is required.
     * Amazon has guidelines for specifying the Stream size that should be referenced when creating a Kinesis stream. See [Amazon Kinesis Streams](https://docs.aws.amazon.com/kinesis/latest/dev/amazon-kinesis-streams.html) for more.
     * 
     */
    @PolicyResourceProperty(name="shardCount", flag="unknown_shardCount")
    private Integer value_shardCount;
    private boolean unknown_shardCount;
    public Integer shardCount() {
        if (!unknown_shardCount) return value_shardCount;
        throw new UndeferrableValueException("Value 'StreamArgs.shardCount' is not present");
    }

    /**
     * A list of shard-level CloudWatch metrics which can be enabled for the stream. See [Monitoring with CloudWatch](https://docs.aws.amazon.com/streams/latest/dev/monitoring-with-cloudwatch.html) for more. Note that the value ALL should not be used; instead you should provide an explicit list of metrics you wish to enable.
     * 
     */
    @PolicyResourceProperty(name="shardLevelMetrics", flag="unknown_shardLevelMetrics")
    private List<String> value_shardLevelMetrics;
    private boolean unknown_shardLevelMetrics;
    public List<String> shardLevelMetrics() {
        if (!unknown_shardLevelMetrics) return value_shardLevelMetrics;
        throw new UndeferrableValueException("Value 'StreamArgs.shardLevelMetrics' is not present");
    }

    /**
     * Indicates the [capacity mode](https://docs.aws.amazon.com/streams/latest/dev/how-do-i-size-a-stream.html) of the data stream. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="streamModeDetails", flag="unknown_streamModeDetails")
    private StreamStreamModeDetailsArgs value_streamModeDetails;
    private boolean unknown_streamModeDetails;
    public StreamStreamModeDetailsArgs streamModeDetails() {
        if (!unknown_streamModeDetails) return value_streamModeDetails;
        throw new UndeferrableValueException("Value 'StreamArgs.streamModeDetails' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'StreamArgs.tags' is not present");
    }

}
