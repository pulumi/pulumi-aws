// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.route53;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.route53.outputs.RecordAlias;
import com.pulumi.policypacks.aws.route53.outputs.RecordCidrRoutingPolicy;
import com.pulumi.policypacks.aws.route53.outputs.RecordFailoverRoutingPolicy;
import com.pulumi.policypacks.aws.route53.outputs.RecordGeolocationRoutingPolicy;
import com.pulumi.policypacks.aws.route53.outputs.RecordGeoproximityRoutingPolicy;
import com.pulumi.policypacks.aws.route53.outputs.RecordLatencyRoutingPolicy;
import com.pulumi.policypacks.aws.route53.outputs.RecordWeightedRoutingPolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:route53/record:Record")
public final class Record extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * An alias block. Conflicts with `ttl` &amp; `records`.
     * Documented below.
     * 
     */
    @PolicyResourceProperty(name="aliases", flag="unknown_aliases")
    private @Nullable List<RecordAlias> value_aliases;
    private boolean unknown_aliases;
    public @Nullable List<RecordAlias> aliases() {
        if (!unknown_aliases) return value_aliases;
        throw new UndeferrableValueException("Value 'Record.aliases' is not present");
    }

    /**
     * Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.
     * 
     * Exactly one of `records` or `alias` must be specified: this determines whether it&#39;s an alias record.
     * 
     */
    @PolicyResourceProperty(name="allowOverwrite", flag="unknown_allowOverwrite")
    private Boolean value_allowOverwrite;
    private boolean unknown_allowOverwrite;
    public Boolean allowOverwrite() {
        if (!unknown_allowOverwrite) return value_allowOverwrite;
        throw new UndeferrableValueException("Value 'Record.allowOverwrite' is not present");
    }

    /**
     * A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.
     * 
     */
    @PolicyResourceProperty(name="cidrRoutingPolicy", flag="unknown_cidrRoutingPolicy")
    private @Nullable RecordCidrRoutingPolicy value_cidrRoutingPolicy;
    private boolean unknown_cidrRoutingPolicy;
    public @Nullable RecordCidrRoutingPolicy cidrRoutingPolicy() {
        if (!unknown_cidrRoutingPolicy) return value_cidrRoutingPolicy;
        throw new UndeferrableValueException("Value 'Record.cidrRoutingPolicy' is not present");
    }

    /**
     * A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.
     * 
     */
    @PolicyResourceProperty(name="failoverRoutingPolicies", flag="unknown_failoverRoutingPolicies")
    private @Nullable List<RecordFailoverRoutingPolicy> value_failoverRoutingPolicies;
    private boolean unknown_failoverRoutingPolicies;
    public @Nullable List<RecordFailoverRoutingPolicy> failoverRoutingPolicies() {
        if (!unknown_failoverRoutingPolicies) return value_failoverRoutingPolicies;
        throw new UndeferrableValueException("Value 'Record.failoverRoutingPolicies' is not present");
    }

    /**
     * [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) built using the zone domain and `name`.
     * 
     */
    @PolicyResourceProperty(name="fqdn", flag="unknown_fqdn")
    private String value_fqdn;
    private boolean unknown_fqdn;
    public String fqdn() {
        if (!unknown_fqdn) return value_fqdn;
        throw new UndeferrableValueException("Value 'Record.fqdn' is not present");
    }

    /**
     * A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.
     * 
     */
    @PolicyResourceProperty(name="geolocationRoutingPolicies", flag="unknown_geolocationRoutingPolicies")
    private @Nullable List<RecordGeolocationRoutingPolicy> value_geolocationRoutingPolicies;
    private boolean unknown_geolocationRoutingPolicies;
    public @Nullable List<RecordGeolocationRoutingPolicy> geolocationRoutingPolicies() {
        if (!unknown_geolocationRoutingPolicies) return value_geolocationRoutingPolicies;
        throw new UndeferrableValueException("Value 'Record.geolocationRoutingPolicies' is not present");
    }

    /**
     * A block indicating a routing policy based on the geoproximity of the requestor. Conflicts with any other routing policy. Documented below.
     * 
     */
    @PolicyResourceProperty(name="geoproximityRoutingPolicy", flag="unknown_geoproximityRoutingPolicy")
    private @Nullable RecordGeoproximityRoutingPolicy value_geoproximityRoutingPolicy;
    private boolean unknown_geoproximityRoutingPolicy;
    public @Nullable RecordGeoproximityRoutingPolicy geoproximityRoutingPolicy() {
        if (!unknown_geoproximityRoutingPolicy) return value_geoproximityRoutingPolicy;
        throw new UndeferrableValueException("Value 'Record.geoproximityRoutingPolicy' is not present");
    }

    /**
     * The health check the record should be associated with.
     * 
     */
    @PolicyResourceProperty(name="healthCheckId", flag="unknown_healthCheckId")
    private @Nullable String value_healthCheckId;
    private boolean unknown_healthCheckId;
    public @Nullable String healthCheckId() {
        if (!unknown_healthCheckId) return value_healthCheckId;
        throw new UndeferrableValueException("Value 'Record.healthCheckId' is not present");
    }

    /**
     * A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.
     * 
     */
    @PolicyResourceProperty(name="latencyRoutingPolicies", flag="unknown_latencyRoutingPolicies")
    private @Nullable List<RecordLatencyRoutingPolicy> value_latencyRoutingPolicies;
    private boolean unknown_latencyRoutingPolicies;
    public @Nullable List<RecordLatencyRoutingPolicy> latencyRoutingPolicies() {
        if (!unknown_latencyRoutingPolicies) return value_latencyRoutingPolicies;
        throw new UndeferrableValueException("Value 'Record.latencyRoutingPolicies' is not present");
    }

    /**
     * Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.
     * 
     */
    @PolicyResourceProperty(name="multivalueAnswerRoutingPolicy", flag="unknown_multivalueAnswerRoutingPolicy")
    private @Nullable Boolean value_multivalueAnswerRoutingPolicy;
    private boolean unknown_multivalueAnswerRoutingPolicy;
    public @Nullable Boolean multivalueAnswerRoutingPolicy() {
        if (!unknown_multivalueAnswerRoutingPolicy) return value_multivalueAnswerRoutingPolicy;
        throw new UndeferrableValueException("Value 'Record.multivalueAnswerRoutingPolicy' is not present");
    }

    /**
     * The name of the record.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Record.name' is not present");
    }

    /**
     * A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\&#34;\&#34;` inside the provider configuration string (e.g., `&#34;first255characters\&#34;\&#34;morecharacters&#34;`).
     * 
     */
    @PolicyResourceProperty(name="records", flag="unknown_records")
    private @Nullable List<String> value_records;
    private boolean unknown_records;
    public @Nullable List<String> records() {
        if (!unknown_records) return value_records;
        throw new UndeferrableValueException("Value 'Record.records' is not present");
    }

    /**
     * Unique identifier to differentiate records with routing policies from one another. Required if using `cidr_routing_policy`, `failover_routing_policy`, `geolocation_routing_policy`,`geoproximity_routing_policy`, `latency_routing_policy`, `multivalue_answer_routing_policy`, or `weighted_routing_policy`.
     * 
     */
    @PolicyResourceProperty(name="setIdentifier", flag="unknown_setIdentifier")
    private @Nullable String value_setIdentifier;
    private boolean unknown_setIdentifier;
    public @Nullable String setIdentifier() {
        if (!unknown_setIdentifier) return value_setIdentifier;
        throw new UndeferrableValueException("Value 'Record.setIdentifier' is not present");
    }

    /**
     * The TTL of the record.
     * 
     */
    @PolicyResourceProperty(name="ttl", flag="unknown_ttl")
    private @Nullable Integer value_ttl;
    private boolean unknown_ttl;
    public @Nullable Integer ttl() {
        if (!unknown_ttl) return value_ttl;
        throw new UndeferrableValueException("Value 'Record.ttl' is not present");
    }

    /**
     * The record type. Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV` and `TXT`.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'Record.type' is not present");
    }

    /**
     * A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.
     * 
     */
    @PolicyResourceProperty(name="weightedRoutingPolicies", flag="unknown_weightedRoutingPolicies")
    private @Nullable List<RecordWeightedRoutingPolicy> value_weightedRoutingPolicies;
    private boolean unknown_weightedRoutingPolicies;
    public @Nullable List<RecordWeightedRoutingPolicy> weightedRoutingPolicies() {
        if (!unknown_weightedRoutingPolicies) return value_weightedRoutingPolicies;
        throw new UndeferrableValueException("Value 'Record.weightedRoutingPolicies' is not present");
    }

    /**
     * The ID of the hosted zone to contain this record.
     * 
     */
    @PolicyResourceProperty(name="zoneId", flag="unknown_zoneId")
    private String value_zoneId;
    private boolean unknown_zoneId;
    public String zoneId() {
        if (!unknown_zoneId) return value_zoneId;
        throw new UndeferrableValueException("Value 'Record.zoneId' is not present");
    }

}
