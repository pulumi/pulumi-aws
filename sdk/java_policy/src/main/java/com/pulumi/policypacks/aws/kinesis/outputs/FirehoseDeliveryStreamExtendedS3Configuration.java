// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesis.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamExtendedS3Configuration {

    /**
     * The ARN of the S3 bucket
     * 
     */
    @PolicyResourceProperty(name="bucketArn", flag="unknown_bucketArn")
    private String value_bucketArn;
    private boolean unknown_bucketArn;
    public String bucketArn() {
        if (!unknown_bucketArn) return value_bucketArn;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.bucketArn' is not present");
    }

    @PolicyResourceProperty(name="bufferingInterval", flag="unknown_bufferingInterval")
    private @Nullable Integer value_bufferingInterval;
    private boolean unknown_bufferingInterval;
    public @Nullable Integer bufferingInterval() {
        if (!unknown_bufferingInterval) return value_bufferingInterval;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.bufferingInterval' is not present");
    }

    @PolicyResourceProperty(name="bufferingSize", flag="unknown_bufferingSize")
    private @Nullable Integer value_bufferingSize;
    private boolean unknown_bufferingSize;
    public @Nullable Integer bufferingSize() {
        if (!unknown_bufferingSize) return value_bufferingSize;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.bufferingSize' is not present");
    }

    @PolicyResourceProperty(name="cloudwatchLoggingOptions", flag="unknown_cloudwatchLoggingOptions")
    private @Nullable FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions value_cloudwatchLoggingOptions;
    private boolean unknown_cloudwatchLoggingOptions;
    public @Nullable FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions() {
        if (!unknown_cloudwatchLoggingOptions) return value_cloudwatchLoggingOptions;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.cloudwatchLoggingOptions' is not present");
    }

    /**
     * The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, &amp; `HADOOP_SNAPPY`.
     * 
     */
    @PolicyResourceProperty(name="compressionFormat", flag="unknown_compressionFormat")
    private @Nullable String value_compressionFormat;
    private boolean unknown_compressionFormat;
    public @Nullable String compressionFormat() {
        if (!unknown_compressionFormat) return value_compressionFormat;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.compressionFormat' is not present");
    }

    /**
     * The time zone you prefer. Valid values are `UTC` or a non-3-letter IANA time zones (for example, `America/Los_Angeles`). Default value is `UTC`.
     * 
     */
    @PolicyResourceProperty(name="customTimeZone", flag="unknown_customTimeZone")
    private @Nullable String value_customTimeZone;
    private boolean unknown_customTimeZone;
    public @Nullable String customTimeZone() {
        if (!unknown_customTimeZone) return value_customTimeZone;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.customTimeZone' is not present");
    }

    /**
     * Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. See `data_format_conversion_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="dataFormatConversionConfiguration", flag="unknown_dataFormatConversionConfiguration")
    private @Nullable FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration value_dataFormatConversionConfiguration;
    private boolean unknown_dataFormatConversionConfiguration;
    public @Nullable FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration dataFormatConversionConfiguration() {
        if (!unknown_dataFormatConversionConfiguration) return value_dataFormatConversionConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.dataFormatConversionConfiguration' is not present");
    }

    /**
     * The configuration for dynamic partitioning. Required when using [dynamic partitioning](https://docs.aws.amazon.com/firehose/latest/dev/dynamic-partitioning.html). See `dynamic_partitioning_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="dynamicPartitioningConfiguration", flag="unknown_dynamicPartitioningConfiguration")
    private @Nullable FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration value_dynamicPartitioningConfiguration;
    private boolean unknown_dynamicPartitioningConfiguration;
    public @Nullable FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration dynamicPartitioningConfiguration() {
        if (!unknown_dynamicPartitioningConfiguration) return value_dynamicPartitioningConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.dynamicPartitioningConfiguration' is not present");
    }

    /**
     * Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
     * 
     */
    @PolicyResourceProperty(name="errorOutputPrefix", flag="unknown_errorOutputPrefix")
    private @Nullable String value_errorOutputPrefix;
    private boolean unknown_errorOutputPrefix;
    public @Nullable String errorOutputPrefix() {
        if (!unknown_errorOutputPrefix) return value_errorOutputPrefix;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.errorOutputPrefix' is not present");
    }

    /**
     * The file extension to override the default file extension (for example, `.json`).
     * 
     */
    @PolicyResourceProperty(name="fileExtension", flag="unknown_fileExtension")
    private @Nullable String value_fileExtension;
    private boolean unknown_fileExtension;
    public @Nullable String fileExtension() {
        if (!unknown_fileExtension) return value_fileExtension;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.fileExtension' is not present");
    }

    /**
     * Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
     * be used.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyArn", flag="unknown_kmsKeyArn")
    private @Nullable String value_kmsKeyArn;
    private boolean unknown_kmsKeyArn;
    public @Nullable String kmsKeyArn() {
        if (!unknown_kmsKeyArn) return value_kmsKeyArn;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.kmsKeyArn' is not present");
    }

    /**
     * The &#34;YYYY/MM/DD/HH&#34; time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
     * 
     */
    @PolicyResourceProperty(name="prefix", flag="unknown_prefix")
    private @Nullable String value_prefix;
    private boolean unknown_prefix;
    public @Nullable String prefix() {
        if (!unknown_prefix) return value_prefix;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.prefix' is not present");
    }

    /**
     * The data processing configuration.  See `processing_configuration` block below for details.
     * 
     */
    @PolicyResourceProperty(name="processingConfiguration", flag="unknown_processingConfiguration")
    private @Nullable FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration value_processingConfiguration;
    private boolean unknown_processingConfiguration;
    public @Nullable FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration processingConfiguration() {
        if (!unknown_processingConfiguration) return value_processingConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.processingConfiguration' is not present");
    }

    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.roleArn' is not present");
    }

    /**
     * The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
     * 
     */
    @PolicyResourceProperty(name="s3BackupConfiguration", flag="unknown_s3BackupConfiguration")
    private @Nullable FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration value_s3BackupConfiguration;
    private boolean unknown_s3BackupConfiguration;
    public @Nullable FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration s3BackupConfiguration() {
        if (!unknown_s3BackupConfiguration) return value_s3BackupConfiguration;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.s3BackupConfiguration' is not present");
    }

    /**
     * The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
     * 
     */
    @PolicyResourceProperty(name="s3BackupMode", flag="unknown_s3BackupMode")
    private @Nullable String value_s3BackupMode;
    private boolean unknown_s3BackupMode;
    public @Nullable String s3BackupMode() {
        if (!unknown_s3BackupMode) return value_s3BackupMode;
        throw new UndeferrableValueException("Value 'FirehoseDeliveryStreamExtendedS3Configuration.s3BackupMode' is not present");
    }

}
