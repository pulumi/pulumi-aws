// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.organizations;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;


@PolicyResourceType(type="aws:organizations/delegatedAdministrator:DelegatedAdministrator")
public final class DelegatedAdministrator extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The account ID number of the member account in the organization to register as a delegated administrator.
     * 
     */
    @PolicyResourceProperty(name="accountId", flag="unknown_accountId")
    private String value_accountId;
    private boolean unknown_accountId;
    public String accountId() {
        if (!unknown_accountId) return value_accountId;
        throw new UndeferrableValueException("Value 'DelegatedAdministrator.accountId' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the delegated administrator&#39;s account.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'DelegatedAdministrator.arn' is not present");
    }

    /**
     * The date when the account was made a delegated administrator.
     * 
     */
    @PolicyResourceProperty(name="delegationEnabledDate", flag="unknown_delegationEnabledDate")
    private String value_delegationEnabledDate;
    private boolean unknown_delegationEnabledDate;
    public String delegationEnabledDate() {
        if (!unknown_delegationEnabledDate) return value_delegationEnabledDate;
        throw new UndeferrableValueException("Value 'DelegatedAdministrator.delegationEnabledDate' is not present");
    }

    /**
     * The email address that is associated with the delegated administrator&#39;s AWS account.
     * 
     */
    @PolicyResourceProperty(name="email", flag="unknown_email")
    private String value_email;
    private boolean unknown_email;
    public String email() {
        if (!unknown_email) return value_email;
        throw new UndeferrableValueException("Value 'DelegatedAdministrator.email' is not present");
    }

    /**
     * The method by which the delegated administrator&#39;s account joined the organization.
     * 
     */
    @PolicyResourceProperty(name="joinedMethod", flag="unknown_joinedMethod")
    private String value_joinedMethod;
    private boolean unknown_joinedMethod;
    public String joinedMethod() {
        if (!unknown_joinedMethod) return value_joinedMethod;
        throw new UndeferrableValueException("Value 'DelegatedAdministrator.joinedMethod' is not present");
    }

    /**
     * The date when the delegated administrator&#39;s account became a part of the organization.
     * 
     */
    @PolicyResourceProperty(name="joinedTimestamp", flag="unknown_joinedTimestamp")
    private String value_joinedTimestamp;
    private boolean unknown_joinedTimestamp;
    public String joinedTimestamp() {
        if (!unknown_joinedTimestamp) return value_joinedTimestamp;
        throw new UndeferrableValueException("Value 'DelegatedAdministrator.joinedTimestamp' is not present");
    }

    /**
     * The friendly name of the delegated administrator&#39;s account.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'DelegatedAdministrator.name' is not present");
    }

    /**
     * The service principal of the AWS service for which you want to make the member account a delegated administrator.
     * 
     */
    @PolicyResourceProperty(name="servicePrincipal", flag="unknown_servicePrincipal")
    private String value_servicePrincipal;
    private boolean unknown_servicePrincipal;
    public String servicePrincipal() {
        if (!unknown_servicePrincipal) return value_servicePrincipal;
        throw new UndeferrableValueException("Value 'DelegatedAdministrator.servicePrincipal' is not present");
    }

    /**
     * The status of the delegated administrator&#39;s account in the organization.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'DelegatedAdministrator.status' is not present");
    }

}
