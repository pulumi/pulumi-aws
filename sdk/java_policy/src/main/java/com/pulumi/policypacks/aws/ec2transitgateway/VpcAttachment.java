// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2transitgateway;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2transitgateway/vpcAttachment:VpcAttachment")
public final class VpcAttachment extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Whether Appliance Mode support is enabled. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. Valid values: `disable`, `enable`. Default value: `disable`.
     * 
     */
    @PolicyResourceProperty(name="applianceModeSupport", flag="unknown_applianceModeSupport")
    private @Nullable String value_applianceModeSupport;
    private boolean unknown_applianceModeSupport;
    public @Nullable String applianceModeSupport() {
        if (!unknown_applianceModeSupport) return value_applianceModeSupport;
        throw new UndeferrableValueException("Value 'VpcAttachment.applianceModeSupport' is not present");
    }

    /**
     * ARN of the attachment.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'VpcAttachment.arn' is not present");
    }

    /**
     * Whether DNS support is enabled. Valid values: `disable`, `enable`. Default value: `enable`.
     * 
     */
    @PolicyResourceProperty(name="dnsSupport", flag="unknown_dnsSupport")
    private @Nullable String value_dnsSupport;
    private boolean unknown_dnsSupport;
    public @Nullable String dnsSupport() {
        if (!unknown_dnsSupport) return value_dnsSupport;
        throw new UndeferrableValueException("Value 'VpcAttachment.dnsSupport' is not present");
    }

    /**
     * Whether IPv6 support is enabled. Valid values: `disable`, `enable`. Default value: `disable`.
     * 
     */
    @PolicyResourceProperty(name="ipv6Support", flag="unknown_ipv6Support")
    private @Nullable String value_ipv6Support;
    private boolean unknown_ipv6Support;
    public @Nullable String ipv6Support() {
        if (!unknown_ipv6Support) return value_ipv6Support;
        throw new UndeferrableValueException("Value 'VpcAttachment.ipv6Support' is not present");
    }

    /**
     * Whether Security Group Referencing Support is enabled. Valid values: `disable`, `enable`.
     * 
     */
    @PolicyResourceProperty(name="securityGroupReferencingSupport", flag="unknown_securityGroupReferencingSupport")
    private String value_securityGroupReferencingSupport;
    private boolean unknown_securityGroupReferencingSupport;
    public String securityGroupReferencingSupport() {
        if (!unknown_securityGroupReferencingSupport) return value_securityGroupReferencingSupport;
        throw new UndeferrableValueException("Value 'VpcAttachment.securityGroupReferencingSupport' is not present");
    }

    /**
     * Identifiers of EC2 Subnets.
     * 
     */
    @PolicyResourceProperty(name="subnetIds", flag="unknown_subnetIds")
    private List<String> value_subnetIds;
    private boolean unknown_subnetIds;
    public List<String> subnetIds() {
        if (!unknown_subnetIds) return value_subnetIds;
        throw new UndeferrableValueException("Value 'VpcAttachment.subnetIds' is not present");
    }

    /**
     * Key-value tags for the EC2 Transit Gateway VPC Attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'VpcAttachment.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'VpcAttachment.tagsAll' is not present");
    }

    /**
     * Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. This cannot be configured or perform drift detection with Resource Access Manager shared EC2 Transit Gateways. Default value: `true`.
     * 
     */
    @PolicyResourceProperty(name="transitGatewayDefaultRouteTableAssociation", flag="unknown_transitGatewayDefaultRouteTableAssociation")
    private Boolean value_transitGatewayDefaultRouteTableAssociation;
    private boolean unknown_transitGatewayDefaultRouteTableAssociation;
    public Boolean transitGatewayDefaultRouteTableAssociation() {
        if (!unknown_transitGatewayDefaultRouteTableAssociation) return value_transitGatewayDefaultRouteTableAssociation;
        throw new UndeferrableValueException("Value 'VpcAttachment.transitGatewayDefaultRouteTableAssociation' is not present");
    }

    /**
     * Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. This cannot be configured or perform drift detection with Resource Access Manager shared EC2 Transit Gateways. Default value: `true`.
     * 
     */
    @PolicyResourceProperty(name="transitGatewayDefaultRouteTablePropagation", flag="unknown_transitGatewayDefaultRouteTablePropagation")
    private Boolean value_transitGatewayDefaultRouteTablePropagation;
    private boolean unknown_transitGatewayDefaultRouteTablePropagation;
    public Boolean transitGatewayDefaultRouteTablePropagation() {
        if (!unknown_transitGatewayDefaultRouteTablePropagation) return value_transitGatewayDefaultRouteTablePropagation;
        throw new UndeferrableValueException("Value 'VpcAttachment.transitGatewayDefaultRouteTablePropagation' is not present");
    }

    /**
     * Identifier of EC2 Transit Gateway.
     * 
     */
    @PolicyResourceProperty(name="transitGatewayId", flag="unknown_transitGatewayId")
    private String value_transitGatewayId;
    private boolean unknown_transitGatewayId;
    public String transitGatewayId() {
        if (!unknown_transitGatewayId) return value_transitGatewayId;
        throw new UndeferrableValueException("Value 'VpcAttachment.transitGatewayId' is not present");
    }

    /**
     * Identifier of EC2 VPC.
     * 
     */
    @PolicyResourceProperty(name="vpcId", flag="unknown_vpcId")
    private String value_vpcId;
    private boolean unknown_vpcId;
    public String vpcId() {
        if (!unknown_vpcId) return value_vpcId;
        throw new UndeferrableValueException("Value 'VpcAttachment.vpcId' is not present");
    }

    /**
     * Identifier of the AWS account that owns the EC2 VPC.
     * 
     */
    @PolicyResourceProperty(name="vpcOwnerId", flag="unknown_vpcOwnerId")
    private String value_vpcOwnerId;
    private boolean unknown_vpcOwnerId;
    public String vpcOwnerId() {
        if (!unknown_vpcOwnerId) return value_vpcOwnerId;
        throw new UndeferrableValueException("Value 'VpcAttachment.vpcOwnerId' is not present");
    }

}
