// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.directoryservice;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:directoryservice/radiusSettings:RadiusSettings")
public final class RadiusSettingsArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
     * 
     */
    @PolicyResourceProperty(name="authenticationProtocol", flag="unknown_authenticationProtocol")
    private String value_authenticationProtocol;
    private boolean unknown_authenticationProtocol;
    public String authenticationProtocol() {
        if (!unknown_authenticationProtocol) return value_authenticationProtocol;
        throw new UndeferrableValueException("Value 'RadiusSettingsArgs.authenticationProtocol' is not present");
    }

    /**
     * The identifier of the directory for which you want to manager RADIUS settings.
     * 
     */
    @PolicyResourceProperty(name="directoryId", flag="unknown_directoryId")
    private String value_directoryId;
    private boolean unknown_directoryId;
    public String directoryId() {
        if (!unknown_directoryId) return value_directoryId;
        throw new UndeferrableValueException("Value 'RadiusSettingsArgs.directoryId' is not present");
    }

    /**
     * Display label.
     * 
     */
    @PolicyResourceProperty(name="displayLabel", flag="unknown_displayLabel")
    private String value_displayLabel;
    private boolean unknown_displayLabel;
    public String displayLabel() {
        if (!unknown_displayLabel) return value_displayLabel;
        throw new UndeferrableValueException("Value 'RadiusSettingsArgs.displayLabel' is not present");
    }

    /**
     * The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
     * 
     */
    @PolicyResourceProperty(name="radiusPort", flag="unknown_radiusPort")
    private Integer value_radiusPort;
    private boolean unknown_radiusPort;
    public Integer radiusPort() {
        if (!unknown_radiusPort) return value_radiusPort;
        throw new UndeferrableValueException("Value 'RadiusSettingsArgs.radiusPort' is not present");
    }

    /**
     * The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
     * 
     */
    @PolicyResourceProperty(name="radiusRetries", flag="unknown_radiusRetries")
    private Integer value_radiusRetries;
    private boolean unknown_radiusRetries;
    public Integer radiusRetries() {
        if (!unknown_radiusRetries) return value_radiusRetries;
        throw new UndeferrableValueException("Value 'RadiusSettingsArgs.radiusRetries' is not present");
    }

    /**
     * An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
     * 
     */
    @PolicyResourceProperty(name="radiusServers", flag="unknown_radiusServers")
    private List<String> value_radiusServers;
    private boolean unknown_radiusServers;
    public List<String> radiusServers() {
        if (!unknown_radiusServers) return value_radiusServers;
        throw new UndeferrableValueException("Value 'RadiusSettingsArgs.radiusServers' is not present");
    }

    /**
     * The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
     * 
     */
    @PolicyResourceProperty(name="radiusTimeout", flag="unknown_radiusTimeout")
    private Integer value_radiusTimeout;
    private boolean unknown_radiusTimeout;
    public Integer radiusTimeout() {
        if (!unknown_radiusTimeout) return value_radiusTimeout;
        throw new UndeferrableValueException("Value 'RadiusSettingsArgs.radiusTimeout' is not present");
    }

    /**
     * Required for enabling RADIUS on the directory.
     * 
     */
    @PolicyResourceProperty(name="sharedSecret", flag="unknown_sharedSecret")
    private String value_sharedSecret;
    private boolean unknown_sharedSecret;
    public String sharedSecret() {
        if (!unknown_sharedSecret) return value_sharedSecret;
        throw new UndeferrableValueException("Value 'RadiusSettingsArgs.sharedSecret' is not present");
    }

    /**
     * Not currently used.
     * 
     */
    @PolicyResourceProperty(name="useSameUsername", flag="unknown_useSameUsername")
    private Boolean value_useSameUsername;
    private boolean unknown_useSameUsername;
    public Boolean useSameUsername() {
        if (!unknown_useSameUsername) return value_useSameUsername;
        throw new UndeferrableValueException("Value 'RadiusSettingsArgs.useSameUsername' is not present");
    }

}
