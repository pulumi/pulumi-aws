// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.networkfirewall.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.String;


public final class RuleGroupRuleGroupRulesSourceStatefulRuleHeader {

    /**
     * The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify `ANY`.
     * 
     */
    @PolicyResourceProperty(name="destination", flag="unknown_destination")
    private String value_destination;
    private boolean unknown_destination;
    public String destination() {
        if (!unknown_destination) return value_destination;
        throw new UndeferrableValueException("Value 'RuleGroupRuleGroupRulesSourceStatefulRuleHeader.destination' is not present");
    }

    /**
     * The destination port to inspect for. To match with any address, specify `ANY`.
     * 
     */
    @PolicyResourceProperty(name="destinationPort", flag="unknown_destinationPort")
    private String value_destinationPort;
    private boolean unknown_destinationPort;
    public String destinationPort() {
        if (!unknown_destinationPort) return value_destinationPort;
        throw new UndeferrableValueException("Value 'RuleGroupRuleGroupRulesSourceStatefulRuleHeader.destinationPort' is not present");
    }

    /**
     * The direction of traffic flow to inspect. Valid values: `ANY` or `FORWARD`.
     * 
     */
    @PolicyResourceProperty(name="direction", flag="unknown_direction")
    private String value_direction;
    private boolean unknown_direction;
    public String direction() {
        if (!unknown_direction) return value_direction;
        throw new UndeferrableValueException("Value 'RuleGroupRuleGroupRulesSourceStatefulRuleHeader.direction' is not present");
    }

    /**
     * The protocol to inspect. Valid values: `IP`, `TCP`, `UDP`, `ICMP`, `HTTP`, `FTP`, `TLS`, `SMB`, `DNS`, `DCERPC`, `SSH`, `SMTP`, `IMAP`, `MSN`, `KRB5`, `IKEV2`, `TFTP`, `NTP`, `DHCP`.
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'RuleGroupRuleGroupRulesSourceStatefulRuleHeader.protocol' is not present");
    }

    /**
     * The source IP address or address range for, in CIDR notation. To match with any address, specify `ANY`.
     * 
     */
    @PolicyResourceProperty(name="source", flag="unknown_source")
    private String value_source;
    private boolean unknown_source;
    public String source() {
        if (!unknown_source) return value_source;
        throw new UndeferrableValueException("Value 'RuleGroupRuleGroupRulesSourceStatefulRuleHeader.source' is not present");
    }

    /**
     * The source port to inspect for. To match with any address, specify `ANY`.
     * 
     */
    @PolicyResourceProperty(name="sourcePort", flag="unknown_sourcePort")
    private String value_sourcePort;
    private boolean unknown_sourcePort;
    public String sourcePort() {
        if (!unknown_sourcePort) return value_sourcePort;
        throw new UndeferrableValueException("Value 'RuleGroupRuleGroupRulesSourceStatefulRuleHeader.sourcePort' is not present");
    }

}
