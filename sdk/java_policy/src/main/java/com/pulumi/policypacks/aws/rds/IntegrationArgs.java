// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rds;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.rds.inputs.IntegrationTimeoutsArgs;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rds/integration:Integration")
public final class IntegrationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Set of non-secret keyâ€“value pairs that contains additional contextual information about the data.
     * For more information, see the [User Guide](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context).
     * You can only include this parameter if you specify the `kms_key_id` parameter.
     * 
     */
    @PolicyResourceProperty(name="additionalEncryptionContext", flag="unknown_additionalEncryptionContext")
    private Map<String,String> value_additionalEncryptionContext;
    private boolean unknown_additionalEncryptionContext;
    public Map<String,String> additionalEncryptionContext() {
        if (!unknown_additionalEncryptionContext) return value_additionalEncryptionContext;
        throw new UndeferrableValueException("Value 'IntegrationArgs.additionalEncryptionContext' is not present");
    }

    /**
     * Data filters for the integration.
     * These filters determine which tables from the source database are sent to the target Amazon Redshift data warehouse.
     * The value should match the syntax from the AWS CLI which includes an `include:` or `exclude:` prefix before a filter expression.
     * Multiple expressions are separated by a comma.
     * See the [Amazon RDS data filtering guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/zero-etl.filtering.html) for additional details.
     * 
     */
    @PolicyResourceProperty(name="dataFilter", flag="unknown_dataFilter")
    private String value_dataFilter;
    private boolean unknown_dataFilter;
    public String dataFilter() {
        if (!unknown_dataFilter) return value_dataFilter;
        throw new UndeferrableValueException("Value 'IntegrationArgs.dataFilter' is not present");
    }

    /**
     * Name of the integration.
     * 
     */
    @PolicyResourceProperty(name="integrationName", flag="unknown_integrationName")
    private String value_integrationName;
    private boolean unknown_integrationName;
    public String integrationName() {
        if (!unknown_integrationName) return value_integrationName;
        throw new UndeferrableValueException("Value 'IntegrationArgs.integrationName' is not present");
    }

    /**
     * KMS key identifier for the key to use to encrypt the integration.
     * If you don&#39;t specify an encryption key, RDS uses a default AWS owned key.
     * If you use the default AWS owned key, you should ignore `kms_key_id` parameter by using `lifecycle` parameter to avoid unintended change after the first creation.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'IntegrationArgs.kmsKeyId' is not present");
    }

    /**
     * ARN of the database to use as the source for replication.
     * 
     */
    @PolicyResourceProperty(name="sourceArn", flag="unknown_sourceArn")
    private String value_sourceArn;
    private boolean unknown_sourceArn;
    public String sourceArn() {
        if (!unknown_sourceArn) return value_sourceArn;
        throw new UndeferrableValueException("Value 'IntegrationArgs.sourceArn' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'IntegrationArgs.tags' is not present");
    }

    /**
     * ARN of the Redshift data warehouse to use as the target for replication.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="targetArn", flag="unknown_targetArn")
    private String value_targetArn;
    private boolean unknown_targetArn;
    public String targetArn() {
        if (!unknown_targetArn) return value_targetArn;
        throw new UndeferrableValueException("Value 'IntegrationArgs.targetArn' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private IntegrationTimeoutsArgs value_timeouts;
    private boolean unknown_timeouts;
    public IntegrationTimeoutsArgs timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'IntegrationArgs.timeouts' is not present");
    }

}
