// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codecommit;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:codecommit/repository:Repository")
public final class Repository extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the repository
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Repository.arn' is not present");
    }

    /**
     * The URL to use for cloning the repository over HTTPS.
     * 
     */
    @PolicyResourceProperty(name="cloneUrlHttp", flag="unknown_cloneUrlHttp")
    private String value_cloneUrlHttp;
    private boolean unknown_cloneUrlHttp;
    public String cloneUrlHttp() {
        if (!unknown_cloneUrlHttp) return value_cloneUrlHttp;
        throw new UndeferrableValueException("Value 'Repository.cloneUrlHttp' is not present");
    }

    /**
     * The URL to use for cloning the repository over SSH.
     * 
     */
    @PolicyResourceProperty(name="cloneUrlSsh", flag="unknown_cloneUrlSsh")
    private String value_cloneUrlSsh;
    private boolean unknown_cloneUrlSsh;
    public String cloneUrlSsh() {
        if (!unknown_cloneUrlSsh) return value_cloneUrlSsh;
        throw new UndeferrableValueException("Value 'Repository.cloneUrlSsh' is not present");
    }

    /**
     * The default branch of the repository. The branch specified here needs to exist.
     * 
     */
    @PolicyResourceProperty(name="defaultBranch", flag="unknown_defaultBranch")
    private @Nullable String value_defaultBranch;
    private boolean unknown_defaultBranch;
    public @Nullable String defaultBranch() {
        if (!unknown_defaultBranch) return value_defaultBranch;
        throw new UndeferrableValueException("Value 'Repository.defaultBranch' is not present");
    }

    /**
     * The description of the repository. This needs to be less than 1000 characters
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Repository.description' is not present");
    }

    /**
     * The ARN of the encryption key. If no key is specified, the default `aws/codecommit` Amazon Web Services managed key is used.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'Repository.kmsKeyId' is not present");
    }

    /**
     * The ID of the repository
     * 
     */
    @PolicyResourceProperty(name="repositoryId", flag="unknown_repositoryId")
    private String value_repositoryId;
    private boolean unknown_repositoryId;
    public String repositoryId() {
        if (!unknown_repositoryId) return value_repositoryId;
        throw new UndeferrableValueException("Value 'Repository.repositoryId' is not present");
    }

    /**
     * The name for the repository. This needs to be less than 100 characters.
     * 
     */
    @PolicyResourceProperty(name="repositoryName", flag="unknown_repositoryName")
    private String value_repositoryName;
    private boolean unknown_repositoryName;
    public String repositoryName() {
        if (!unknown_repositoryName) return value_repositoryName;
        throw new UndeferrableValueException("Value 'Repository.repositoryName' is not present");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Repository.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Repository.tagsAll' is not present");
    }

}
