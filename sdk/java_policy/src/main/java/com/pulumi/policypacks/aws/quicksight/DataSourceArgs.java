// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceCredentialsArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourcePermissionArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceSslPropertiesArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceVpcConnectionPropertiesArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:quicksight/dataSource:DataSource")
public final class DataSourceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
     * 
     */
    private UndeferrableValue<String> awsAccountId;

    public String awsAccountId() {
        if (awsAccountId == null) return null;
        return awsAccountId.getValue("DataSourceArgs.awsAccountId");
    }

    /**
     * The credentials Amazon QuickSight uses to connect to your underlying source. See Credentials below for more details.
     * 
     */
    private UndeferrableValue<DataSourceCredentialsArgs> credentials;

    public DataSourceCredentialsArgs credentials() {
        if (credentials == null) return null;
        return credentials.getValue("DataSourceArgs.credentials");
    }

    /**
     * An identifier for the data source.
     * 
     */
    private UndeferrableValue<String> dataSourceId;

    public String dataSourceId() {
        if (dataSourceId == null) return null;
        return dataSourceId.getValue("DataSourceArgs.dataSourceId");
    }

    /**
     * A name for the data source, maximum of 128 characters.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("DataSourceArgs.name");
    }

    /**
     * The parameters used to connect to this data source (exactly one).
     * 
     */
    private UndeferrableValue<DataSourceParametersArgs> parameters;

    public DataSourceParametersArgs parameters() {
        if (parameters == null) return null;
        return parameters.getValue("DataSourceArgs.parameters");
    }

    /**
     * A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
     * 
     */
    private UndeferrableValue<List<DataSourcePermissionArgs>> permissions;

    public List<DataSourcePermissionArgs> permissions() {
        if (permissions == null) return null;
        return permissions.getValue("DataSourceArgs.permissions");
    }

    /**
     * Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
     * 
     */
    private UndeferrableValue<DataSourceSslPropertiesArgs> sslProperties;

    public DataSourceSslPropertiesArgs sslProperties() {
        if (sslProperties == null) return null;
        return sslProperties.getValue("DataSourceArgs.sslProperties");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DataSourceArgs.tags");
    }

    /**
     * The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("DataSourceArgs.type");
    }

    /**
     * Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
     * 
     */
    private UndeferrableValue<DataSourceVpcConnectionPropertiesArgs> vpcConnectionProperties;

    public DataSourceVpcConnectionPropertiesArgs vpcConnectionProperties() {
        if (vpcConnectionProperties == null) return null;
        return vpcConnectionProperties.getValue("DataSourceArgs.vpcConnectionProperties");
    }

}
