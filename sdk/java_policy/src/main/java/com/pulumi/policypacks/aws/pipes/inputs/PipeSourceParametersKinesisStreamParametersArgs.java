// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.pipes.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.pipes.inputs.PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class PipeSourceParametersKinesisStreamParametersArgs {

    /**
     * The maximum number of records to include in each batch. Maximum value of 10000.
     * 
     */
    private UndeferrableValue<Integer> batchSize;

    public Integer batchSize() {
        if (batchSize == null) return null;
        return batchSize.getValue("PipeSourceParametersKinesisStreamParametersArgs.batchSize");
    }

    /**
     * Define the target queue to send dead-letter queue events to. Detailed below.
     * 
     */
    private UndeferrableValue<PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs> deadLetterConfig;

    public PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs deadLetterConfig() {
        if (deadLetterConfig == null) return null;
        return deadLetterConfig.getValue("PipeSourceParametersKinesisStreamParametersArgs.deadLetterConfig");
    }

    /**
     * The maximum length of a time to wait for events. Maximum value of 300.
     * 
     */
    private UndeferrableValue<Integer> maximumBatchingWindowInSeconds;

    public Integer maximumBatchingWindowInSeconds() {
        if (maximumBatchingWindowInSeconds == null) return null;
        return maximumBatchingWindowInSeconds.getValue("PipeSourceParametersKinesisStreamParametersArgs.maximumBatchingWindowInSeconds");
    }

    /**
     * Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
     * 
     */
    private UndeferrableValue<Integer> maximumRecordAgeInSeconds;

    public Integer maximumRecordAgeInSeconds() {
        if (maximumRecordAgeInSeconds == null) return null;
        return maximumRecordAgeInSeconds.getValue("PipeSourceParametersKinesisStreamParametersArgs.maximumRecordAgeInSeconds");
    }

    /**
     * Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
     * 
     */
    private UndeferrableValue<Integer> maximumRetryAttempts;

    public Integer maximumRetryAttempts() {
        if (maximumRetryAttempts == null) return null;
        return maximumRetryAttempts.getValue("PipeSourceParametersKinesisStreamParametersArgs.maximumRetryAttempts");
    }

    /**
     * Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
     * 
     */
    private UndeferrableValue<String> onPartialBatchItemFailure;

    public String onPartialBatchItemFailure() {
        if (onPartialBatchItemFailure == null) return null;
        return onPartialBatchItemFailure.getValue("PipeSourceParametersKinesisStreamParametersArgs.onPartialBatchItemFailure");
    }

    /**
     * The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
     * 
     */
    private UndeferrableValue<Integer> parallelizationFactor;

    public Integer parallelizationFactor() {
        if (parallelizationFactor == null) return null;
        return parallelizationFactor.getValue("PipeSourceParametersKinesisStreamParametersArgs.parallelizationFactor");
    }

    /**
     * The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
     * 
     */
    private UndeferrableValue<String> startingPosition;

    public String startingPosition() {
        if (startingPosition == null) return null;
        return startingPosition.getValue("PipeSourceParametersKinesisStreamParametersArgs.startingPosition");
    }

    /**
     * With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
     * 
     */
    private UndeferrableValue<String> startingPositionTimestamp;

    public String startingPositionTimestamp() {
        if (startingPositionTimestamp == null) return null;
        return startingPositionTimestamp.getValue("PipeSourceParametersKinesisStreamParametersArgs.startingPositionTimestamp");
    }

}
