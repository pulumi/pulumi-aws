// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.iam;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.iam.inputs.RoleInlinePolicyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:iam/role:Role")
public final class RoleArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Policy that grants an entity permission to assume the role.
     * 
     * &gt; **NOTE:** The `assume_role_policy` is very similar to but slightly different than a standard IAM policy and cannot use an `aws.iam.Policy` resource.  However, it _can_ use an `aws.iam.getPolicyDocument` data source. See the example above of how this works.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="assumeRolePolicy", flag="unknown_assumeRolePolicy")
    private String value_assumeRolePolicy;
    private boolean unknown_assumeRolePolicy;
    public String assumeRolePolicy() {
        if (!unknown_assumeRolePolicy) return value_assumeRolePolicy;
        throw new UndeferrableValueException("Value 'RoleArgs.assumeRolePolicy' is not present");
    }

    /**
     * Description of the role.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'RoleArgs.description' is not present");
    }

    /**
     * Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="forceDetachPolicies", flag="unknown_forceDetachPolicies")
    private Boolean value_forceDetachPolicies;
    private boolean unknown_forceDetachPolicies;
    public Boolean forceDetachPolicies() {
        if (!unknown_forceDetachPolicies) return value_forceDetachPolicies;
        throw new UndeferrableValueException("Value 'RoleArgs.forceDetachPolicies' is not present");
    }

    /**
     * Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, Pulumi will not manage any inline policies in this resource. Configuring one empty block (i.e., `inline_policy {}`) will cause Pulumi to remove _all_ inline policies added out of band on `apply`.
     * 
     */
    @PolicyResourceProperty(name="inlinePolicies", flag="unknown_inlinePolicies")
    private List<RoleInlinePolicyArgs> value_inlinePolicies;
    private boolean unknown_inlinePolicies;
    public List<RoleInlinePolicyArgs> inlinePolicies() {
        if (!unknown_inlinePolicies) return value_inlinePolicies;
        throw new UndeferrableValueException("Value 'RoleArgs.inlinePolicies' is not present");
    }

    /**
     * Set of exclusive IAM managed policy ARNs to attach to the IAM role. If this attribute is not configured, Pulumi will ignore policy attachments to this resource. When configured, Pulumi will align the role&#39;s managed policy attachments with this set by attaching or detaching managed policies. Configuring an empty set (i.e., `managed_policy_arns = []`) will cause Pulumi to remove _all_ managed policy attachments.
     * 
     */
    @PolicyResourceProperty(name="managedPolicyArns", flag="unknown_managedPolicyArns")
    private List<String> value_managedPolicyArns;
    private boolean unknown_managedPolicyArns;
    public List<String> managedPolicyArns() {
        if (!unknown_managedPolicyArns) return value_managedPolicyArns;
        throw new UndeferrableValueException("Value 'RoleArgs.managedPolicyArns' is not present");
    }

    /**
     * Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
     * 
     */
    @PolicyResourceProperty(name="maxSessionDuration", flag="unknown_maxSessionDuration")
    private Integer value_maxSessionDuration;
    private boolean unknown_maxSessionDuration;
    public Integer maxSessionDuration() {
        if (!unknown_maxSessionDuration) return value_maxSessionDuration;
        throw new UndeferrableValueException("Value 'RoleArgs.maxSessionDuration' is not present");
    }

    /**
     * Friendly name of the role. If omitted, the provider will assign a random, unique name. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'RoleArgs.name' is not present");
    }

    /**
     * Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'RoleArgs.namePrefix' is not present");
    }

    /**
     * Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
     * 
     */
    @PolicyResourceProperty(name="path", flag="unknown_path")
    private String value_path;
    private boolean unknown_path;
    public String path() {
        if (!unknown_path) return value_path;
        throw new UndeferrableValueException("Value 'RoleArgs.path' is not present");
    }

    /**
     * ARN of the policy that is used to set the permissions boundary for the role.
     * 
     */
    @PolicyResourceProperty(name="permissionsBoundary", flag="unknown_permissionsBoundary")
    private String value_permissionsBoundary;
    private boolean unknown_permissionsBoundary;
    public String permissionsBoundary() {
        if (!unknown_permissionsBoundary) return value_permissionsBoundary;
        throw new UndeferrableValueException("Value 'RoleArgs.permissionsBoundary' is not present");
    }

    /**
     * Key-value mapping of tags for the IAM role. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'RoleArgs.tags' is not present");
    }

}
