// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appconfig;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:appconfig/deploymentStrategy:DeploymentStrategy")
public final class DeploymentStrategyArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Total amount of time for a deployment to last. Minimum value of 0, maximum value of 1440.
     * 
     */
    private UndeferrableValue<Integer> deploymentDurationInMinutes;

    public Integer deploymentDurationInMinutes() {
        if (deploymentDurationInMinutes == null) return null;
        return deploymentDurationInMinutes.getValue("DeploymentStrategyArgs.deploymentDurationInMinutes");
    }

    /**
     * Description of the deployment strategy. Can be at most 1024 characters.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("DeploymentStrategyArgs.description");
    }

    /**
     * Amount of time AWS AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic roll back. Minimum value of 0, maximum value of 1440.
     * 
     */
    private UndeferrableValue<Integer> finalBakeTimeInMinutes;

    public Integer finalBakeTimeInMinutes() {
        if (finalBakeTimeInMinutes == null) return null;
        return finalBakeTimeInMinutes.getValue("DeploymentStrategyArgs.finalBakeTimeInMinutes");
    }

    /**
     * Percentage of targets to receive a deployed configuration during each interval. Minimum value of 1.0, maximum value of 100.0.
     * 
     */
    private UndeferrableValue<Double> growthFactor;

    public Double growthFactor() {
        if (growthFactor == null) return null;
        return growthFactor.getValue("DeploymentStrategyArgs.growthFactor");
    }

    /**
     * Algorithm used to define how percentage grows over time. Valid value: `LINEAR` and `EXPONENTIAL`. Defaults to `LINEAR`.
     * 
     */
    private UndeferrableValue<String> growthType;

    public String growthType() {
        if (growthType == null) return null;
        return growthType.getValue("DeploymentStrategyArgs.growthType");
    }

    /**
     * Name for the deployment strategy. Must be between 1 and 64 characters in length.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("DeploymentStrategyArgs.name");
    }

    /**
     * Where to save the deployment strategy. Valid values: `NONE` and `SSM_DOCUMENT`.
     * 
     */
    private UndeferrableValue<String> replicateTo;

    public String replicateTo() {
        if (replicateTo == null) return null;
        return replicateTo.getValue("DeploymentStrategyArgs.replicateTo");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DeploymentStrategyArgs.tags");
    }

}
