// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.outputs.VpcEndpointServicePrivateDnsNameConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/vpcEndpointService:VpcEndpointService")
public final class VpcEndpointService extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Whether or not VPC endpoint connection requests to the service must be accepted by the service owner - `true` or `false`.
     * 
     */
    @PolicyResourceProperty(name="acceptanceRequired", flag="unknown_acceptanceRequired")
    private Boolean value_acceptanceRequired;
    private boolean unknown_acceptanceRequired;
    public Boolean acceptanceRequired() {
        if (!unknown_acceptanceRequired) return value_acceptanceRequired;
        throw new UndeferrableValueException("Value 'VpcEndpointService.acceptanceRequired' is not present");
    }

    /**
     * The ARNs of one or more principals allowed to discover the endpoint service.
     * 
     */
    @PolicyResourceProperty(name="allowedPrincipals", flag="unknown_allowedPrincipals")
    private List<String> value_allowedPrincipals;
    private boolean unknown_allowedPrincipals;
    public List<String> allowedPrincipals() {
        if (!unknown_allowedPrincipals) return value_allowedPrincipals;
        throw new UndeferrableValueException("Value 'VpcEndpointService.allowedPrincipals' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the VPC endpoint service.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'VpcEndpointService.arn' is not present");
    }

    /**
     * A set of Availability Zones in which the service is available.
     * 
     */
    @PolicyResourceProperty(name="availabilityZones", flag="unknown_availabilityZones")
    private List<String> value_availabilityZones;
    private boolean unknown_availabilityZones;
    public List<String> availabilityZones() {
        if (!unknown_availabilityZones) return value_availabilityZones;
        throw new UndeferrableValueException("Value 'VpcEndpointService.availabilityZones' is not present");
    }

    /**
     * A set of DNS names for the service.
     * 
     */
    @PolicyResourceProperty(name="baseEndpointDnsNames", flag="unknown_baseEndpointDnsNames")
    private List<String> value_baseEndpointDnsNames;
    private boolean unknown_baseEndpointDnsNames;
    public List<String> baseEndpointDnsNames() {
        if (!unknown_baseEndpointDnsNames) return value_baseEndpointDnsNames;
        throw new UndeferrableValueException("Value 'VpcEndpointService.baseEndpointDnsNames' is not present");
    }

    /**
     * Amazon Resource Names (ARNs) of one or more Gateway Load Balancers for the endpoint service.
     * 
     */
    @PolicyResourceProperty(name="gatewayLoadBalancerArns", flag="unknown_gatewayLoadBalancerArns")
    private @Nullable List<String> value_gatewayLoadBalancerArns;
    private boolean unknown_gatewayLoadBalancerArns;
    public @Nullable List<String> gatewayLoadBalancerArns() {
        if (!unknown_gatewayLoadBalancerArns) return value_gatewayLoadBalancerArns;
        throw new UndeferrableValueException("Value 'VpcEndpointService.gatewayLoadBalancerArns' is not present");
    }

    /**
     * Whether or not the service manages its VPC endpoints - `true` or `false`.
     * 
     */
    @PolicyResourceProperty(name="managesVpcEndpoints", flag="unknown_managesVpcEndpoints")
    private Boolean value_managesVpcEndpoints;
    private boolean unknown_managesVpcEndpoints;
    public Boolean managesVpcEndpoints() {
        if (!unknown_managesVpcEndpoints) return value_managesVpcEndpoints;
        throw new UndeferrableValueException("Value 'VpcEndpointService.managesVpcEndpoints' is not present");
    }

    /**
     * Amazon Resource Names (ARNs) of one or more Network Load Balancers for the endpoint service.
     * 
     */
    @PolicyResourceProperty(name="networkLoadBalancerArns", flag="unknown_networkLoadBalancerArns")
    private @Nullable List<String> value_networkLoadBalancerArns;
    private boolean unknown_networkLoadBalancerArns;
    public @Nullable List<String> networkLoadBalancerArns() {
        if (!unknown_networkLoadBalancerArns) return value_networkLoadBalancerArns;
        throw new UndeferrableValueException("Value 'VpcEndpointService.networkLoadBalancerArns' is not present");
    }

    /**
     * The private DNS name for the service.
     * 
     */
    @PolicyResourceProperty(name="privateDnsName", flag="unknown_privateDnsName")
    private String value_privateDnsName;
    private boolean unknown_privateDnsName;
    public String privateDnsName() {
        if (!unknown_privateDnsName) return value_privateDnsName;
        throw new UndeferrableValueException("Value 'VpcEndpointService.privateDnsName' is not present");
    }

    /**
     * List of objects containing information about the endpoint service private DNS name configuration.
     * 
     */
    @PolicyResourceProperty(name="privateDnsNameConfigurations", flag="unknown_privateDnsNameConfigurations")
    private List<VpcEndpointServicePrivateDnsNameConfiguration> value_privateDnsNameConfigurations;
    private boolean unknown_privateDnsNameConfigurations;
    public List<VpcEndpointServicePrivateDnsNameConfiguration> privateDnsNameConfigurations() {
        if (!unknown_privateDnsNameConfigurations) return value_privateDnsNameConfigurations;
        throw new UndeferrableValueException("Value 'VpcEndpointService.privateDnsNameConfigurations' is not present");
    }

    /**
     * The service name.
     * 
     */
    @PolicyResourceProperty(name="serviceName", flag="unknown_serviceName")
    private String value_serviceName;
    private boolean unknown_serviceName;
    public String serviceName() {
        if (!unknown_serviceName) return value_serviceName;
        throw new UndeferrableValueException("Value 'VpcEndpointService.serviceName' is not present");
    }

    /**
     * The service type, `Gateway` or `Interface`.
     * 
     */
    @PolicyResourceProperty(name="serviceType", flag="unknown_serviceType")
    private String value_serviceType;
    private boolean unknown_serviceType;
    public String serviceType() {
        if (!unknown_serviceType) return value_serviceType;
        throw new UndeferrableValueException("Value 'VpcEndpointService.serviceType' is not present");
    }

    /**
     * Verification state of the VPC endpoint service. Consumers of the endpoint service can use the private name only when the state is `verified`.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private String value_state;
    private boolean unknown_state;
    public String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'VpcEndpointService.state' is not present");
    }

    /**
     * The supported IP address types. The possible values are `ipv4` and `ipv6`.
     * 
     */
    @PolicyResourceProperty(name="supportedIpAddressTypes", flag="unknown_supportedIpAddressTypes")
    private List<String> value_supportedIpAddressTypes;
    private boolean unknown_supportedIpAddressTypes;
    public List<String> supportedIpAddressTypes() {
        if (!unknown_supportedIpAddressTypes) return value_supportedIpAddressTypes;
        throw new UndeferrableValueException("Value 'VpcEndpointService.supportedIpAddressTypes' is not present");
    }

    /**
     * The set of regions from which service consumers can access the service.
     * 
     */
    @PolicyResourceProperty(name="supportedRegions", flag="unknown_supportedRegions")
    private List<String> value_supportedRegions;
    private boolean unknown_supportedRegions;
    public List<String> supportedRegions() {
        if (!unknown_supportedRegions) return value_supportedRegions;
        throw new UndeferrableValueException("Value 'VpcEndpointService.supportedRegions' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'VpcEndpointService.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'VpcEndpointService.tagsAll' is not present");
    }

}
