// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.route53domains.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.route53domains.inputs.DomainRegistrantContactExtraParamArgs;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class DomainRegistrantContactArgs {

    /**
     * First line of the contact&#39;s address.
     * 
     */
    private UndeferrableValue<String> addressLine1;

    public String addressLine1() {
        if (addressLine1 == null) return null;
        return addressLine1.getValue("DomainRegistrantContactArgs.addressLine1");
    }

    /**
     * Second line of contact&#39;s address, if any.
     * 
     */
    private UndeferrableValue<String> addressLine2;

    public String addressLine2() {
        if (addressLine2 == null) return null;
        return addressLine2.getValue("DomainRegistrantContactArgs.addressLine2");
    }

    /**
     * The city of the contact&#39;s address.
     * 
     */
    private UndeferrableValue<String> city;

    public String city() {
        if (city == null) return null;
        return city.getValue("DomainRegistrantContactArgs.city");
    }

    /**
     * Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
     * 
     */
    private UndeferrableValue<String> contactType;

    public String contactType() {
        if (contactType == null) return null;
        return contactType.getValue("DomainRegistrantContactArgs.contactType");
    }

    /**
     * Code for the country of the contact&#39;s address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
     * 
     */
    private UndeferrableValue<String> countryCode;

    public String countryCode() {
        if (countryCode == null) return null;
        return countryCode.getValue("DomainRegistrantContactArgs.countryCode");
    }

    /**
     * Email address of the contact.
     * 
     */
    private UndeferrableValue<String> email;

    public String email() {
        if (email == null) return null;
        return email.getValue("DomainRegistrantContactArgs.email");
    }

    /**
     * A list of name-value pairs for parameters required by certain top-level domains.
     * 
     */
    private UndeferrableValue<List<DomainRegistrantContactExtraParamArgs>> extraParams;

    public List<DomainRegistrantContactExtraParamArgs> extraParams() {
        if (extraParams == null) return null;
        return extraParams.getValue("DomainRegistrantContactArgs.extraParams");
    }

    /**
     * Fax number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
     * 
     */
    private UndeferrableValue<String> fax;

    public String fax() {
        if (fax == null) return null;
        return fax.getValue("DomainRegistrantContactArgs.fax");
    }

    /**
     * First name of contact.
     * 
     */
    private UndeferrableValue<String> firstName;

    public String firstName() {
        if (firstName == null) return null;
        return firstName.getValue("DomainRegistrantContactArgs.firstName");
    }

    /**
     * Last name of contact.
     * 
     */
    private UndeferrableValue<String> lastName;

    public String lastName() {
        if (lastName == null) return null;
        return lastName.getValue("DomainRegistrantContactArgs.lastName");
    }

    /**
     * Name of the organization for contact types other than `PERSON`.
     * 
     */
    private UndeferrableValue<String> organizationName;

    public String organizationName() {
        if (organizationName == null) return null;
        return organizationName.getValue("DomainRegistrantContactArgs.organizationName");
    }

    /**
     * The phone number of the contact. Phone number must be specified in the format &#34;+[country dialing code].[number including any area code]&#34;.
     * 
     */
    private UndeferrableValue<String> phoneNumber;

    public String phoneNumber() {
        if (phoneNumber == null) return null;
        return phoneNumber.getValue("DomainRegistrantContactArgs.phoneNumber");
    }

    /**
     * The state or province of the contact&#39;s city.
     * 
     */
    private UndeferrableValue<String> state;

    public String state() {
        if (state == null) return null;
        return state.getValue("DomainRegistrantContactArgs.state");
    }

    /**
     * The zip or postal code of the contact&#39;s address.
     * 
     */
    private UndeferrableValue<String> zipCode;

    public String zipCode() {
        if (zipCode == null) return null;
        return zipCode.getValue("DomainRegistrantContactArgs.zipCode");
    }

}
