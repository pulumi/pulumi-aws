// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.mq.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class BrokerLdapServerMetadata {

    /**
     * List of a fully qualified domain name of the LDAP server and an optional failover server.
     * 
     */
    @PolicyResourceProperty(name="hosts", flag="unknown_hosts")
    private @Nullable List<String> value_hosts;
    private boolean unknown_hosts;
    public @Nullable List<String> hosts() {
        if (!unknown_hosts) return value_hosts;
        throw new UndeferrableValueException("Value 'BrokerLdapServerMetadata.hosts' is not present");
    }

    /**
     * Fully qualified name of the directory to search for a userâ€™s groups.
     * 
     */
    @PolicyResourceProperty(name="roleBase", flag="unknown_roleBase")
    private @Nullable String value_roleBase;
    private boolean unknown_roleBase;
    public @Nullable String roleBase() {
        if (!unknown_roleBase) return value_roleBase;
        throw new UndeferrableValueException("Value 'BrokerLdapServerMetadata.roleBase' is not present");
    }

    /**
     * Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
     * 
     */
    @PolicyResourceProperty(name="roleName", flag="unknown_roleName")
    private @Nullable String value_roleName;
    private boolean unknown_roleName;
    public @Nullable String roleName() {
        if (!unknown_roleName) return value_roleName;
        throw new UndeferrableValueException("Value 'BrokerLdapServerMetadata.roleName' is not present");
    }

    /**
     * Search criteria for groups.
     * 
     */
    @PolicyResourceProperty(name="roleSearchMatching", flag="unknown_roleSearchMatching")
    private @Nullable String value_roleSearchMatching;
    private boolean unknown_roleSearchMatching;
    public @Nullable String roleSearchMatching() {
        if (!unknown_roleSearchMatching) return value_roleSearchMatching;
        throw new UndeferrableValueException("Value 'BrokerLdapServerMetadata.roleSearchMatching' is not present");
    }

    /**
     * Whether the directory search scope is the entire sub-tree.
     * 
     */
    @PolicyResourceProperty(name="roleSearchSubtree", flag="unknown_roleSearchSubtree")
    private @Nullable Boolean value_roleSearchSubtree;
    private boolean unknown_roleSearchSubtree;
    public @Nullable Boolean roleSearchSubtree() {
        if (!unknown_roleSearchSubtree) return value_roleSearchSubtree;
        throw new UndeferrableValueException("Value 'BrokerLdapServerMetadata.roleSearchSubtree' is not present");
    }

    /**
     * Service account password.
     * 
     */
    @PolicyResourceProperty(name="serviceAccountPassword", flag="unknown_serviceAccountPassword")
    private @Nullable String value_serviceAccountPassword;
    private boolean unknown_serviceAccountPassword;
    public @Nullable String serviceAccountPassword() {
        if (!unknown_serviceAccountPassword) return value_serviceAccountPassword;
        throw new UndeferrableValueException("Value 'BrokerLdapServerMetadata.serviceAccountPassword' is not present");
    }

    /**
     * Service account username.
     * 
     */
    @PolicyResourceProperty(name="serviceAccountUsername", flag="unknown_serviceAccountUsername")
    private @Nullable String value_serviceAccountUsername;
    private boolean unknown_serviceAccountUsername;
    public @Nullable String serviceAccountUsername() {
        if (!unknown_serviceAccountUsername) return value_serviceAccountUsername;
        throw new UndeferrableValueException("Value 'BrokerLdapServerMetadata.serviceAccountUsername' is not present");
    }

    /**
     * Fully qualified name of the directory where you want to search for users.
     * 
     */
    @PolicyResourceProperty(name="userBase", flag="unknown_userBase")
    private @Nullable String value_userBase;
    private boolean unknown_userBase;
    public @Nullable String userBase() {
        if (!unknown_userBase) return value_userBase;
        throw new UndeferrableValueException("Value 'BrokerLdapServerMetadata.userBase' is not present");
    }

    /**
     * Specifies the name of the LDAP attribute for the user group membership.
     * 
     */
    @PolicyResourceProperty(name="userRoleName", flag="unknown_userRoleName")
    private @Nullable String value_userRoleName;
    private boolean unknown_userRoleName;
    public @Nullable String userRoleName() {
        if (!unknown_userRoleName) return value_userRoleName;
        throw new UndeferrableValueException("Value 'BrokerLdapServerMetadata.userRoleName' is not present");
    }

    /**
     * Search criteria for users.
     * 
     */
    @PolicyResourceProperty(name="userSearchMatching", flag="unknown_userSearchMatching")
    private @Nullable String value_userSearchMatching;
    private boolean unknown_userSearchMatching;
    public @Nullable String userSearchMatching() {
        if (!unknown_userSearchMatching) return value_userSearchMatching;
        throw new UndeferrableValueException("Value 'BrokerLdapServerMetadata.userSearchMatching' is not present");
    }

    /**
     * Whether the directory search scope is the entire sub-tree.
     * 
     */
    @PolicyResourceProperty(name="userSearchSubtree", flag="unknown_userSearchSubtree")
    private @Nullable Boolean value_userSearchSubtree;
    private boolean unknown_userSearchSubtree;
    public @Nullable Boolean userSearchSubtree() {
        if (!unknown_userSearchSubtree) return value_userSearchSubtree;
        throw new UndeferrableValueException("Value 'BrokerLdapServerMetadata.userSearchSubtree' is not present");
    }

}
