// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.inputs.TemplatePermissionArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.TemplateSourceEntityArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:quicksight/template:Template")
public final class TemplateArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * AWS account ID.
     * 
     */
    private UndeferrableValue<String> awsAccountId;

    public String awsAccountId() {
        if (awsAccountId == null) return null;
        return awsAccountId.getValue("TemplateArgs.awsAccountId");
    }

    /**
     * Display name for the template.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("TemplateArgs.name");
    }

    /**
     * A set of resource permissions on the template. Maximum of 64 items. See permissions.
     * 
     */
    private UndeferrableValue<List<TemplatePermissionArgs>> permissions;

    public List<TemplatePermissionArgs> permissions() {
        if (permissions == null) return null;
        return permissions.getValue("TemplateArgs.permissions");
    }

    /**
     * The entity that you are using as a source when you create the template (analysis or template). Only one of `definition` or `source_entity` should be configured. See source_entity.
     * 
     */
    private UndeferrableValue<TemplateSourceEntityArgs> sourceEntity;

    public TemplateSourceEntityArgs sourceEntity() {
        if (sourceEntity == null) return null;
        return sourceEntity.getValue("TemplateArgs.sourceEntity");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("TemplateArgs.tags");
    }

    /**
     * Identifier for the template.
     * 
     */
    private UndeferrableValue<String> templateId;

    public String templateId() {
        if (templateId == null) return null;
        return templateId.getValue("TemplateArgs.templateId");
    }

    /**
     * A description of the current template version being created/updated.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> versionDescription;

    public String versionDescription() {
        if (versionDescription == null) return null;
        return versionDescription.getValue("TemplateArgs.versionDescription");
    }

}
