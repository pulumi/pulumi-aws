// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Double;
import java.lang.Integer;
import javax.annotation.Nullable;


public final class ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings {

    /**
     * A value used in calculating the threshold below which MediaLive considers a pixel to be &#39;black&#39;. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (10230.1=102.3), which means a pixel value of 102 or less is &#39;black&#39;. If you set this field to .1 in an 8-bit color depth: (2550.1=25.5), which means a pixel value of 25 or less is &#39;black&#39;. The range is 0.0 to 1.0, with any number of decimal places.
     * 
     */
    @PolicyResourceProperty(name="blackDetectThreshold", flag="unknown_blackDetectThreshold")
    private @Nullable Double value_blackDetectThreshold;
    private boolean unknown_blackDetectThreshold;
    public @Nullable Double blackDetectThreshold() {
        if (!unknown_blackDetectThreshold) return value_blackDetectThreshold;
        throw new UndeferrableValueException("Value 'ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings.blackDetectThreshold' is not present");
    }

    /**
     * The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
     * 
     */
    @PolicyResourceProperty(name="videoBlackThresholdMsec", flag="unknown_videoBlackThresholdMsec")
    private @Nullable Integer value_videoBlackThresholdMsec;
    private boolean unknown_videoBlackThresholdMsec;
    public @Nullable Integer videoBlackThresholdMsec() {
        if (!unknown_videoBlackThresholdMsec) return value_videoBlackThresholdMsec;
        throw new UndeferrableValueException("Value 'ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings.videoBlackThresholdMsec' is not present");
    }

}
