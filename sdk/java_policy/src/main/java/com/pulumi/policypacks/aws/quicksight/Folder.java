// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.outputs.FolderPermission;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:quicksight/folder:Folder")
public final class Folder extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the folder.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Folder.arn' is not present");
    }

    /**
     * AWS account ID.
     * 
     */
    @PolicyResourceProperty(name="awsAccountId", flag="unknown_awsAccountId")
    private String value_awsAccountId;
    private boolean unknown_awsAccountId;
    public String awsAccountId() {
        if (!unknown_awsAccountId) return value_awsAccountId;
        throw new UndeferrableValueException("Value 'Folder.awsAccountId' is not present");
    }

    /**
     * The time that the folder was created.
     * 
     */
    @PolicyResourceProperty(name="createdTime", flag="unknown_createdTime")
    private String value_createdTime;
    private boolean unknown_createdTime;
    public String createdTime() {
        if (!unknown_createdTime) return value_createdTime;
        throw new UndeferrableValueException("Value 'Folder.createdTime' is not present");
    }

    /**
     * Identifier for the folder.
     * 
     */
    @PolicyResourceProperty(name="folderId", flag="unknown_folderId")
    private String value_folderId;
    private boolean unknown_folderId;
    public String folderId() {
        if (!unknown_folderId) return value_folderId;
        throw new UndeferrableValueException("Value 'Folder.folderId' is not present");
    }

    /**
     * An array of ancestor ARN strings for the folder. Empty for root-level folders.
     * 
     */
    @PolicyResourceProperty(name="folderPaths", flag="unknown_folderPaths")
    private List<String> value_folderPaths;
    private boolean unknown_folderPaths;
    public List<String> folderPaths() {
        if (!unknown_folderPaths) return value_folderPaths;
        throw new UndeferrableValueException("Value 'Folder.folderPaths' is not present");
    }

    /**
     * The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
     * 
     */
    @PolicyResourceProperty(name="folderType", flag="unknown_folderType")
    private @Nullable String value_folderType;
    private boolean unknown_folderType;
    public @Nullable String folderType() {
        if (!unknown_folderType) return value_folderType;
        throw new UndeferrableValueException("Value 'Folder.folderType' is not present");
    }

    /**
     * The time that the folder was last updated.
     * 
     */
    @PolicyResourceProperty(name="lastUpdatedTime", flag="unknown_lastUpdatedTime")
    private String value_lastUpdatedTime;
    private boolean unknown_lastUpdatedTime;
    public String lastUpdatedTime() {
        if (!unknown_lastUpdatedTime) return value_lastUpdatedTime;
        throw new UndeferrableValueException("Value 'Folder.lastUpdatedTime' is not present");
    }

    /**
     * Display name for the folder.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Folder.name' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
     * 
     */
    @PolicyResourceProperty(name="parentFolderArn", flag="unknown_parentFolderArn")
    private @Nullable String value_parentFolderArn;
    private boolean unknown_parentFolderArn;
    public @Nullable String parentFolderArn() {
        if (!unknown_parentFolderArn) return value_parentFolderArn;
        throw new UndeferrableValueException("Value 'Folder.parentFolderArn' is not present");
    }

    /**
     * A set of resource permissions on the folder. Maximum of 64 items. See permissions.
     * 
     */
    @PolicyResourceProperty(name="permissions", flag="unknown_permissions")
    private @Nullable List<FolderPermission> value_permissions;
    private boolean unknown_permissions;
    public @Nullable List<FolderPermission> permissions() {
        if (!unknown_permissions) return value_permissions;
        throw new UndeferrableValueException("Value 'Folder.permissions' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Folder.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Folder.tagsAll' is not present");
    }

}
