// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.batch.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.batch.inputs.ComputeEnvironmentComputeResourcesEc2ConfigurationArgs;
import com.pulumi.policypacks.aws.batch.inputs.ComputeEnvironmentComputeResourcesLaunchTemplateArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class ComputeEnvironmentComputeResourcesArgs {

    /**
     * The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. For valid values, refer to the [AWS documentation](https://docs.aws.amazon.com/batch/latest/APIReference/API_ComputeResource.html#Batch-Type-ComputeResource-allocationStrategy). Defaults to `BEST_FIT`. This parameter isn&#39;t applicable to jobs running on Fargate resources, and shouldn&#39;t be specified.
     * 
     */
    @PolicyResourceProperty(name="allocationStrategy", flag="unknown_allocationStrategy")
    private String value_allocationStrategy;
    private boolean unknown_allocationStrategy;
    public String allocationStrategy() {
        if (!unknown_allocationStrategy) return value_allocationStrategy;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.allocationStrategy' is not present");
    }

    /**
     * Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn&#39;t applicable to jobs running on Fargate resources, and shouldn&#39;t be specified.
     * 
     */
    @PolicyResourceProperty(name="bidPercentage", flag="unknown_bidPercentage")
    private Integer value_bidPercentage;
    private boolean unknown_bidPercentage;
    public Integer bidPercentage() {
        if (!unknown_bidPercentage) return value_bidPercentage;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.bidPercentage' is not present");
    }

    /**
     * The desired number of EC2 vCPUS in the compute environment. This parameter isn&#39;t applicable to jobs running on Fargate resources, and shouldn&#39;t be specified.
     * 
     */
    @PolicyResourceProperty(name="desiredVcpus", flag="unknown_desiredVcpus")
    private Integer value_desiredVcpus;
    private boolean unknown_desiredVcpus;
    public Integer desiredVcpus() {
        if (!unknown_desiredVcpus) return value_desiredVcpus;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.desiredVcpus' is not present");
    }

    /**
     * Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn&#39;t specified, the default is ECS_AL2. This parameter isn&#39;t applicable to jobs that are running on Fargate resources, and shouldn&#39;t be specified.
     * 
     */
    @PolicyResourceProperty(name="ec2Configurations", flag="unknown_ec2Configurations")
    private List<ComputeEnvironmentComputeResourcesEc2ConfigurationArgs> value_ec2Configurations;
    private boolean unknown_ec2Configurations;
    public List<ComputeEnvironmentComputeResourcesEc2ConfigurationArgs> ec2Configurations() {
        if (!unknown_ec2Configurations) return value_ec2Configurations;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.ec2Configurations' is not present");
    }

    /**
     * The EC2 key pair that is used for instances launched in the compute environment. This parameter isn&#39;t applicable to jobs running on Fargate resources, and shouldn&#39;t be specified.
     * 
     */
    @PolicyResourceProperty(name="ec2KeyPair", flag="unknown_ec2KeyPair")
    private String value_ec2KeyPair;
    private boolean unknown_ec2KeyPair;
    public String ec2KeyPair() {
        if (!unknown_ec2KeyPair) return value_ec2KeyPair;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.ec2KeyPair' is not present");
    }

    /**
     * The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn&#39;t applicable to jobs running on Fargate resources, and shouldn&#39;t be specified. (Deprecated, use `ec2_configuration` `image_id_override` instead)
     * 
     */
    @PolicyResourceProperty(name="imageId", flag="unknown_imageId")
    private String value_imageId;
    private boolean unknown_imageId;
    public String imageId() {
        if (!unknown_imageId) return value_imageId;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.imageId' is not present");
    }

    /**
     * The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn&#39;t applicable to jobs running on Fargate resources, and shouldn&#39;t be specified.
     * 
     */
    @PolicyResourceProperty(name="instanceRole", flag="unknown_instanceRole")
    private String value_instanceRole;
    private boolean unknown_instanceRole;
    public String instanceRole() {
        if (!unknown_instanceRole) return value_instanceRole;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.instanceRole' is not present");
    }

    /**
     * A list of instance types that may be launched. This parameter isn&#39;t applicable to jobs running on Fargate resources, and shouldn&#39;t be specified.
     * 
     */
    @PolicyResourceProperty(name="instanceTypes", flag="unknown_instanceTypes")
    private List<String> value_instanceTypes;
    private boolean unknown_instanceTypes;
    public List<String> instanceTypes() {
        if (!unknown_instanceTypes) return value_instanceTypes;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.instanceTypes' is not present");
    }

    /**
     * The launch template to use for your compute resources. See details below. This parameter isn&#39;t applicable to jobs running on Fargate resources, and shouldn&#39;t be specified.
     * 
     */
    @PolicyResourceProperty(name="launchTemplate", flag="unknown_launchTemplate")
    private ComputeEnvironmentComputeResourcesLaunchTemplateArgs value_launchTemplate;
    private boolean unknown_launchTemplate;
    public ComputeEnvironmentComputeResourcesLaunchTemplateArgs launchTemplate() {
        if (!unknown_launchTemplate) return value_launchTemplate;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.launchTemplate' is not present");
    }

    /**
     * The maximum number of EC2 vCPUs that an environment can reach.
     * 
     */
    @PolicyResourceProperty(name="maxVcpus", flag="unknown_maxVcpus")
    private Integer value_maxVcpus;
    private boolean unknown_maxVcpus;
    public Integer maxVcpus() {
        if (!unknown_maxVcpus) return value_maxVcpus;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.maxVcpus' is not present");
    }

    /**
     * The minimum number of EC2 vCPUs that an environment should maintain. For `EC2` or `SPOT` compute environments, if the parameter is not explicitly defined, a `0` default value will be set. This parameter isn&#39;t applicable to jobs running on Fargate resources, and shouldn&#39;t be specified.
     * 
     */
    @PolicyResourceProperty(name="minVcpus", flag="unknown_minVcpus")
    private Integer value_minVcpus;
    private boolean unknown_minVcpus;
    public Integer minVcpus() {
        if (!unknown_minVcpus) return value_minVcpus;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.minVcpus' is not present");
    }

    /**
     * The Amazon EC2 placement group to associate with your compute resources.
     * 
     */
    @PolicyResourceProperty(name="placementGroup", flag="unknown_placementGroup")
    private String value_placementGroup;
    private boolean unknown_placementGroup;
    public String placementGroup() {
        if (!unknown_placementGroup) return value_placementGroup;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.placementGroup' is not present");
    }

    /**
     * A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
     * 
     */
    @PolicyResourceProperty(name="securityGroupIds", flag="unknown_securityGroupIds")
    private List<String> value_securityGroupIds;
    private boolean unknown_securityGroupIds;
    public List<String> securityGroupIds() {
        if (!unknown_securityGroupIds) return value_securityGroupIds;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.securityGroupIds' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn&#39;t applicable to jobs running on Fargate resources, and shouldn&#39;t be specified.
     * 
     */
    @PolicyResourceProperty(name="spotIamFleetRole", flag="unknown_spotIamFleetRole")
    private String value_spotIamFleetRole;
    private boolean unknown_spotIamFleetRole;
    public String spotIamFleetRole() {
        if (!unknown_spotIamFleetRole) return value_spotIamFleetRole;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.spotIamFleetRole' is not present");
    }

    /**
     * A list of VPC subnets into which the compute resources are launched.
     * 
     */
    @PolicyResourceProperty(name="subnets", flag="unknown_subnets")
    private List<String> value_subnets;
    private boolean unknown_subnets;
    public List<String> subnets() {
        if (!unknown_subnets) return value_subnets;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.subnets' is not present");
    }

    /**
     * Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn&#39;t applicable to jobs running on Fargate resources, and shouldn&#39;t be specified.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.tags' is not present");
    }

    /**
     * The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'ComputeEnvironmentComputeResourcesArgs.type' is not present");
    }

}
