// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismArgs;
import com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationArgs;
import com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaArgs;
import com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationArgs;
import com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputArgs;
import com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputArgs;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs {

    private UndeferrableValue<List<String>> inAppStreamNames;

    public List<String> inAppStreamNames() {
        if (inAppStreamNames == null) return null;
        return inAppStreamNames.getValue("ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs.inAppStreamNames");
    }

    private UndeferrableValue<String> inputId;

    public String inputId() {
        if (inputId == null) return null;
        return inputId.getValue("ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs.inputId");
    }

    /**
     * Describes the number of in-application streams to create.
     * 
     */
    private UndeferrableValue<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismArgs> inputParallelism;

    public ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismArgs inputParallelism() {
        if (inputParallelism == null) return null;
        return inputParallelism.getValue("ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs.inputParallelism");
    }

    /**
     * The input processing configuration for the input.
     * An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes.
     * 
     */
    private UndeferrableValue<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationArgs> inputProcessingConfiguration;

    public ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationArgs inputProcessingConfiguration() {
        if (inputProcessingConfiguration == null) return null;
        return inputProcessingConfiguration.getValue("ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs.inputProcessingConfiguration");
    }

    /**
     * Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
     * 
     */
    private UndeferrableValue<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaArgs> inputSchema;

    public ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaArgs inputSchema() {
        if (inputSchema == null) return null;
        return inputSchema.getValue("ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs.inputSchema");
    }

    /**
     * The point at which the application starts processing records from the streaming source.
     * 
     */
    private UndeferrableValue<List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationArgs>> inputStartingPositionConfigurations;

    public List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationArgs> inputStartingPositionConfigurations() {
        if (inputStartingPositionConfigurations == null) return null;
        return inputStartingPositionConfigurations.getValue("ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs.inputStartingPositionConfigurations");
    }

    /**
     * If the streaming source is a Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
     * 
     */
    private UndeferrableValue<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputArgs> kinesisFirehoseInput;

    public ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputArgs kinesisFirehoseInput() {
        if (kinesisFirehoseInput == null) return null;
        return kinesisFirehoseInput.getValue("ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs.kinesisFirehoseInput");
    }

    /**
     * If the streaming source is a Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
     * 
     */
    private UndeferrableValue<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputArgs> kinesisStreamsInput;

    public ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputArgs kinesisStreamsInput() {
        if (kinesisStreamsInput == null) return null;
        return kinesisStreamsInput.getValue("ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs.kinesisStreamsInput");
    }

    /**
     * The name prefix to use when creating an in-application stream.
     * 
     */
    private UndeferrableValue<String> namePrefix;

    public String namePrefix() {
        if (namePrefix == null) return null;
        return namePrefix.getValue("ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs.namePrefix");
    }

}
