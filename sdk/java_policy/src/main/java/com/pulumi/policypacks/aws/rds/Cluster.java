// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rds;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.rds.outputs.ClusterMasterUserSecret;
import com.pulumi.policypacks.aws.rds.outputs.ClusterRestoreToPointInTime;
import com.pulumi.policypacks.aws.rds.outputs.ClusterS3Import;
import com.pulumi.policypacks.aws.rds.outputs.ClusterScalingConfiguration;
import com.pulumi.policypacks.aws.rds.outputs.ClusterServerlessv2ScalingConfiguration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rds/cluster:Cluster")
public final class Cluster extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster.
     * 
     */
    @PolicyResourceProperty(name="allocatedStorage", flag="unknown_allocatedStorage")
    private Integer value_allocatedStorage;
    private boolean unknown_allocatedStorage;
    public Integer allocatedStorage() {
        if (!unknown_allocatedStorage) return value_allocatedStorage;
        throw new UndeferrableValueException("Value 'Cluster.allocatedStorage' is not present");
    }

    /**
     * Enable to allow major engine version upgrades when changing engine versions. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="allowMajorVersionUpgrade", flag="unknown_allowMajorVersionUpgrade")
    private @Nullable Boolean value_allowMajorVersionUpgrade;
    private boolean unknown_allowMajorVersionUpgrade;
    public @Nullable Boolean allowMajorVersionUpgrade() {
        if (!unknown_allowMajorVersionUpgrade) return value_allowMajorVersionUpgrade;
        throw new UndeferrableValueException("Value 'Cluster.allowMajorVersionUpgrade' is not present");
    }

    /**
     * Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`. See [Amazon RDS Documentation for more information.](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html)
     * 
     */
    @PolicyResourceProperty(name="applyImmediately", flag="unknown_applyImmediately")
    private Boolean value_applyImmediately;
    private boolean unknown_applyImmediately;
    public Boolean applyImmediately() {
        if (!unknown_applyImmediately) return value_applyImmediately;
        throw new UndeferrableValueException("Value 'Cluster.applyImmediately' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of cluster
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Cluster.arn' is not present");
    }

    /**
     * List of EC2 Availability Zones for the DB cluster storage where DB cluster instances can be created.
     * RDS automatically assigns 3 AZs if less than 3 AZs are configured, which will show as a difference requiring resource recreation next pulumi up.
     * We recommend specifying 3 AZs or using the `lifecycle` configuration block `ignore_changes` argument if necessary.
     * A maximum of 3 AZs can be configured.
     * 
     */
    @PolicyResourceProperty(name="availabilityZones", flag="unknown_availabilityZones")
    private List<String> value_availabilityZones;
    private boolean unknown_availabilityZones;
    public List<String> availabilityZones() {
        if (!unknown_availabilityZones) return value_availabilityZones;
        throw new UndeferrableValueException("Value 'Cluster.availabilityZones' is not present");
    }

    /**
     * Target backtrack window, in seconds. Only available for `aurora` and `aurora-mysql` engines currently. To disable backtracking, set this value to `0`. Defaults to `0`. Must be between `0` and `259200` (72 hours)
     * 
     */
    @PolicyResourceProperty(name="backtrackWindow", flag="unknown_backtrackWindow")
    private @Nullable Integer value_backtrackWindow;
    private boolean unknown_backtrackWindow;
    public @Nullable Integer backtrackWindow() {
        if (!unknown_backtrackWindow) return value_backtrackWindow;
        throw new UndeferrableValueException("Value 'Cluster.backtrackWindow' is not present");
    }

    /**
     * Days to retain backups for. Default `1`
     * 
     */
    @PolicyResourceProperty(name="backupRetentionPeriod", flag="unknown_backupRetentionPeriod")
    private Integer value_backupRetentionPeriod;
    private boolean unknown_backupRetentionPeriod;
    public Integer backupRetentionPeriod() {
        if (!unknown_backupRetentionPeriod) return value_backupRetentionPeriod;
        throw new UndeferrableValueException("Value 'Cluster.backupRetentionPeriod' is not present");
    }

    /**
     * The CA certificate identifier to use for the DB cluster&#39;s server certificate.
     * 
     */
    @PolicyResourceProperty(name="caCertificateIdentifier", flag="unknown_caCertificateIdentifier")
    private String value_caCertificateIdentifier;
    private boolean unknown_caCertificateIdentifier;
    public String caCertificateIdentifier() {
        if (!unknown_caCertificateIdentifier) return value_caCertificateIdentifier;
        throw new UndeferrableValueException("Value 'Cluster.caCertificateIdentifier' is not present");
    }

    /**
     * Expiration date of the DB instanceâ€™s server certificate
     * 
     */
    @PolicyResourceProperty(name="caCertificateValidTill", flag="unknown_caCertificateValidTill")
    private String value_caCertificateValidTill;
    private boolean unknown_caCertificateValidTill;
    public String caCertificateValidTill() {
        if (!unknown_caCertificateValidTill) return value_caCertificateValidTill;
        throw new UndeferrableValueException("Value 'Cluster.caCertificateValidTill' is not present");
    }

    /**
     * The cluster identifier. If omitted, this provider will assign a random, unique identifier.
     * 
     */
    @PolicyResourceProperty(name="clusterIdentifier", flag="unknown_clusterIdentifier")
    private String value_clusterIdentifier;
    private boolean unknown_clusterIdentifier;
    public String clusterIdentifier() {
        if (!unknown_clusterIdentifier) return value_clusterIdentifier;
        throw new UndeferrableValueException("Value 'Cluster.clusterIdentifier' is not present");
    }

    /**
     * Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `cluster_identifier`.
     * 
     */
    @PolicyResourceProperty(name="clusterIdentifierPrefix", flag="unknown_clusterIdentifierPrefix")
    private String value_clusterIdentifierPrefix;
    private boolean unknown_clusterIdentifierPrefix;
    public String clusterIdentifierPrefix() {
        if (!unknown_clusterIdentifierPrefix) return value_clusterIdentifierPrefix;
        throw new UndeferrableValueException("Value 'Cluster.clusterIdentifierPrefix' is not present");
    }

    /**
     * List of RDS Instances that are a part of this cluster
     * 
     */
    @PolicyResourceProperty(name="clusterMembers", flag="unknown_clusterMembers")
    private List<String> value_clusterMembers;
    private boolean unknown_clusterMembers;
    public List<String> clusterMembers() {
        if (!unknown_clusterMembers) return value_clusterMembers;
        throw new UndeferrableValueException("Value 'Cluster.clusterMembers' is not present");
    }

    /**
     * RDS Cluster Resource ID
     * 
     */
    @PolicyResourceProperty(name="clusterResourceId", flag="unknown_clusterResourceId")
    private String value_clusterResourceId;
    private boolean unknown_clusterResourceId;
    public String clusterResourceId() {
        if (!unknown_clusterResourceId) return value_clusterResourceId;
        throw new UndeferrableValueException("Value 'Cluster.clusterResourceId' is not present");
    }

    /**
     * Specifies the scalability mode of the Aurora DB cluster. When set to `limitless`, the cluster operates as an Aurora Limitless Database. When set to `standard` (the default), the cluster uses normal DB instance creation. Valid values: `limitless`, `standard`.
     * 
     */
    @PolicyResourceProperty(name="clusterScalabilityType", flag="unknown_clusterScalabilityType")
    private String value_clusterScalabilityType;
    private boolean unknown_clusterScalabilityType;
    public String clusterScalabilityType() {
        if (!unknown_clusterScalabilityType) return value_clusterScalabilityType;
        throw new UndeferrableValueException("Value 'Cluster.clusterScalabilityType' is not present");
    }

    /**
     * Copy all Cluster `tags` to snapshots. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="copyTagsToSnapshot", flag="unknown_copyTagsToSnapshot")
    private @Nullable Boolean value_copyTagsToSnapshot;
    private boolean unknown_copyTagsToSnapshot;
    public @Nullable Boolean copyTagsToSnapshot() {
        if (!unknown_copyTagsToSnapshot) return value_copyTagsToSnapshot;
        throw new UndeferrableValueException("Value 'Cluster.copyTagsToSnapshot' is not present");
    }

    /**
     * The mode of Database Insights to enable for the DB cluster. Valid values: `standard`, `advanced`.
     * 
     */
    @PolicyResourceProperty(name="databaseInsightsMode", flag="unknown_databaseInsightsMode")
    private String value_databaseInsightsMode;
    private boolean unknown_databaseInsightsMode;
    public String databaseInsightsMode() {
        if (!unknown_databaseInsightsMode) return value_databaseInsightsMode;
        throw new UndeferrableValueException("Value 'Cluster.databaseInsightsMode' is not present");
    }

    /**
     * Name for an automatically created database on cluster creation. There are different naming restrictions per database engine: [RDS Naming Constraints](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints)
     * 
     */
    @PolicyResourceProperty(name="databaseName", flag="unknown_databaseName")
    private String value_databaseName;
    private boolean unknown_databaseName;
    public String databaseName() {
        if (!unknown_databaseName) return value_databaseName;
        throw new UndeferrableValueException("Value 'Cluster.databaseName' is not present");
    }

    /**
     * The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example `db.m6g.xlarge`. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes and availability for your engine, see [DB instance class](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide.
     * 
     */
    @PolicyResourceProperty(name="dbClusterInstanceClass", flag="unknown_dbClusterInstanceClass")
    private @Nullable String value_dbClusterInstanceClass;
    private boolean unknown_dbClusterInstanceClass;
    public @Nullable String dbClusterInstanceClass() {
        if (!unknown_dbClusterInstanceClass) return value_dbClusterInstanceClass;
        throw new UndeferrableValueException("Value 'Cluster.dbClusterInstanceClass' is not present");
    }

    /**
     * A cluster parameter group to associate with the cluster.
     * 
     */
    @PolicyResourceProperty(name="dbClusterParameterGroupName", flag="unknown_dbClusterParameterGroupName")
    private String value_dbClusterParameterGroupName;
    private boolean unknown_dbClusterParameterGroupName;
    public String dbClusterParameterGroupName() {
        if (!unknown_dbClusterParameterGroupName) return value_dbClusterParameterGroupName;
        throw new UndeferrableValueException("Value 'Cluster.dbClusterParameterGroupName' is not present");
    }

    /**
     * Instance parameter group to associate with all instances of the DB cluster. The `db_instance_parameter_group_name` parameter is only valid in combination with the `allow_major_version_upgrade` parameter.
     * 
     */
    @PolicyResourceProperty(name="dbInstanceParameterGroupName", flag="unknown_dbInstanceParameterGroupName")
    private @Nullable String value_dbInstanceParameterGroupName;
    private boolean unknown_dbInstanceParameterGroupName;
    public @Nullable String dbInstanceParameterGroupName() {
        if (!unknown_dbInstanceParameterGroupName) return value_dbInstanceParameterGroupName;
        throw new UndeferrableValueException("Value 'Cluster.dbInstanceParameterGroupName' is not present");
    }

    /**
     * DB subnet group to associate with this DB cluster.
     * **NOTE:** This must match the `db_subnet_group_name` specified on every `aws.rds.ClusterInstance` in the cluster.
     * 
     */
    @PolicyResourceProperty(name="dbSubnetGroupName", flag="unknown_dbSubnetGroupName")
    private String value_dbSubnetGroupName;
    private boolean unknown_dbSubnetGroupName;
    public String dbSubnetGroupName() {
        if (!unknown_dbSubnetGroupName) return value_dbSubnetGroupName;
        throw new UndeferrableValueException("Value 'Cluster.dbSubnetGroupName' is not present");
    }

    /**
     * For use with RDS Custom.
     * 
     */
    @PolicyResourceProperty(name="dbSystemId", flag="unknown_dbSystemId")
    private String value_dbSystemId;
    private boolean unknown_dbSystemId;
    public String dbSystemId() {
        if (!unknown_dbSystemId) return value_dbSystemId;
        throw new UndeferrableValueException("Value 'Cluster.dbSystemId' is not present");
    }

    /**
     * Specifies whether to remove automated backups immediately after the DB cluster is deleted. Default is `true`.
     * 
     */
    @PolicyResourceProperty(name="deleteAutomatedBackups", flag="unknown_deleteAutomatedBackups")
    private @Nullable Boolean value_deleteAutomatedBackups;
    private boolean unknown_deleteAutomatedBackups;
    public @Nullable Boolean deleteAutomatedBackups() {
        if (!unknown_deleteAutomatedBackups) return value_deleteAutomatedBackups;
        throw new UndeferrableValueException("Value 'Cluster.deleteAutomatedBackups' is not present");
    }

    /**
     * If the DB cluster should have deletion protection enabled.
     * The database can&#39;t be deleted when this value is set to `true`.
     * The default is `false`.
     * 
     */
    @PolicyResourceProperty(name="deletionProtection", flag="unknown_deletionProtection")
    private @Nullable Boolean value_deletionProtection;
    private boolean unknown_deletionProtection;
    public @Nullable Boolean deletionProtection() {
        if (!unknown_deletionProtection) return value_deletionProtection;
        throw new UndeferrableValueException("Value 'Cluster.deletionProtection' is not present");
    }

    /**
     * The ID of the Directory Service Active Directory domain to create the cluster in.
     * 
     */
    @PolicyResourceProperty(name="domain", flag="unknown_domain")
    private @Nullable String value_domain;
    private boolean unknown_domain;
    public @Nullable String domain() {
        if (!unknown_domain) return value_domain;
        throw new UndeferrableValueException("Value 'Cluster.domain' is not present");
    }

    /**
     * The name of the IAM role to be used when making API calls to the Directory Service.
     * 
     */
    @PolicyResourceProperty(name="domainIamRoleName", flag="unknown_domainIamRoleName")
    private @Nullable String value_domainIamRoleName;
    private boolean unknown_domainIamRoleName;
    public @Nullable String domainIamRoleName() {
        if (!unknown_domainIamRoleName) return value_domainIamRoleName;
        throw new UndeferrableValueException("Value 'Cluster.domainIamRoleName' is not present");
    }

    /**
     * Whether cluster should forward writes to an associated global cluster. Applied to secondary clusters to enable them to forward writes to an `aws.rds.GlobalCluster`&#39;s primary cluster. See the [User Guide for Aurora](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-write-forwarding.html) for more information.
     * 
     */
    @PolicyResourceProperty(name="enableGlobalWriteForwarding", flag="unknown_enableGlobalWriteForwarding")
    private @Nullable Boolean value_enableGlobalWriteForwarding;
    private boolean unknown_enableGlobalWriteForwarding;
    public @Nullable Boolean enableGlobalWriteForwarding() {
        if (!unknown_enableGlobalWriteForwarding) return value_enableGlobalWriteForwarding;
        throw new UndeferrableValueException("Value 'Cluster.enableGlobalWriteForwarding' is not present");
    }

    /**
     * Enable HTTP endpoint (data API). Only valid for some combinations of `engine_mode`, `engine` and `engine_version` and only available in some regions. See the [Region and version availability](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html#data-api.regions) section of the documentation. This option also does not work with any of these options specified: `snapshot_identifier`, `replication_source_identifier`, `s3_import`.
     * 
     */
    @PolicyResourceProperty(name="enableHttpEndpoint", flag="unknown_enableHttpEndpoint")
    private @Nullable Boolean value_enableHttpEndpoint;
    private boolean unknown_enableHttpEndpoint;
    public @Nullable Boolean enableHttpEndpoint() {
        if (!unknown_enableHttpEndpoint) return value_enableHttpEndpoint;
        throw new UndeferrableValueException("Value 'Cluster.enableHttpEndpoint' is not present");
    }

    /**
     * Whether read replicas can forward write operations to the writer DB instance in the DB cluster. By default, write operations aren&#39;t allowed on reader DB instances.. See the [User Guide for Aurora](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-write-forwarding.html) for more information. **NOTE:** Local write forwarding requires Aurora MySQL version 3.04 or higher.
     * 
     */
    @PolicyResourceProperty(name="enableLocalWriteForwarding", flag="unknown_enableLocalWriteForwarding")
    private @Nullable Boolean value_enableLocalWriteForwarding;
    private boolean unknown_enableLocalWriteForwarding;
    public @Nullable Boolean enableLocalWriteForwarding() {
        if (!unknown_enableLocalWriteForwarding) return value_enableLocalWriteForwarding;
        throw new UndeferrableValueException("Value 'Cluster.enableLocalWriteForwarding' is not present");
    }

    /**
     * Set of log types to export to cloudwatch. If omitted, no logs will be exported. The following log types are supported: `audit`, `error`, `general`, `slowquery`, `iam-db-auth-error`, `postgresql` (PostgreSQL).
     * 
     */
    @PolicyResourceProperty(name="enabledCloudwatchLogsExports", flag="unknown_enabledCloudwatchLogsExports")
    private @Nullable List<String> value_enabledCloudwatchLogsExports;
    private boolean unknown_enabledCloudwatchLogsExports;
    public @Nullable List<String> enabledCloudwatchLogsExports() {
        if (!unknown_enabledCloudwatchLogsExports) return value_enabledCloudwatchLogsExports;
        throw new UndeferrableValueException("Value 'Cluster.enabledCloudwatchLogsExports' is not present");
    }

    /**
     * DNS address of the RDS instance
     * 
     */
    @PolicyResourceProperty(name="endpoint", flag="unknown_endpoint")
    private String value_endpoint;
    private boolean unknown_endpoint;
    public String endpoint() {
        if (!unknown_endpoint) return value_endpoint;
        throw new UndeferrableValueException("Value 'Cluster.endpoint' is not present");
    }

    /**
     * Name of the database engine to be used for this DB cluster. Valid Values: `aurora-mysql`, `aurora-postgresql`, `mysql`, `postgres`. (Note that `mysql` and `postgres` are Multi-AZ RDS clusters).
     * 
     */
    @PolicyResourceProperty(name="engine", flag="unknown_engine")
    private String value_engine;
    private boolean unknown_engine;
    public String engine() {
        if (!unknown_engine) return value_engine;
        throw new UndeferrableValueException("Value 'Cluster.engine' is not present");
    }

    /**
     * The life cycle type for this DB instance. This setting is valid for cluster types Aurora DB clusters and Multi-AZ DB clusters. Valid values are `open-source-rds-extended-support`, `open-source-rds-extended-support-disabled`. Default value is `open-source-rds-extended-support`. [Using Amazon RDS Extended Support]: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html
     * 
     */
    @PolicyResourceProperty(name="engineLifecycleSupport", flag="unknown_engineLifecycleSupport")
    private String value_engineLifecycleSupport;
    private boolean unknown_engineLifecycleSupport;
    public String engineLifecycleSupport() {
        if (!unknown_engineLifecycleSupport) return value_engineLifecycleSupport;
        throw new UndeferrableValueException("Value 'Cluster.engineLifecycleSupport' is not present");
    }

    /**
     * Database engine mode. Valid values: `global` (only valid for Aurora MySQL 1.21 and earlier), `parallelquery`, `provisioned`, `serverless`. Defaults to: `provisioned`. Specify an empty value (`&#34;&#34;`) for no engine mode. See the [RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html) for limitations when using `serverless`.
     * 
     */
    @PolicyResourceProperty(name="engineMode", flag="unknown_engineMode")
    private @Nullable String value_engineMode;
    private boolean unknown_engineMode;
    public @Nullable String engineMode() {
        if (!unknown_engineMode) return value_engineMode;
        throw new UndeferrableValueException("Value 'Cluster.engineMode' is not present");
    }

    /**
     * Database engine version. Updating this argument results in an outage. See the [Aurora MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html) and [Aurora Postgres](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.html) documentation for your configured engine to determine this value, or by running `aws rds describe-db-engine-versions`. For example with Aurora MySQL 2, a potential value for this argument is `5.7.mysql_aurora.2.03.2`. The value can contain a partial version where supported by the API. The actual engine version used is returned in the attribute `engine_version_actual`, , see Attribute Reference below.
     * 
     */
    @PolicyResourceProperty(name="engineVersion", flag="unknown_engineVersion")
    private String value_engineVersion;
    private boolean unknown_engineVersion;
    public String engineVersion() {
        if (!unknown_engineVersion) return value_engineVersion;
        throw new UndeferrableValueException("Value 'Cluster.engineVersion' is not present");
    }

    /**
     * Running version of the database.
     * 
     */
    @PolicyResourceProperty(name="engineVersionActual", flag="unknown_engineVersionActual")
    private String value_engineVersionActual;
    private boolean unknown_engineVersionActual;
    public String engineVersionActual() {
        if (!unknown_engineVersionActual) return value_engineVersionActual;
        throw new UndeferrableValueException("Value 'Cluster.engineVersionActual' is not present");
    }

    /**
     * Name of your final DB snapshot when this DB cluster is deleted. If omitted, no final snapshot will be made.
     * 
     */
    @PolicyResourceProperty(name="finalSnapshotIdentifier", flag="unknown_finalSnapshotIdentifier")
    private @Nullable String value_finalSnapshotIdentifier;
    private boolean unknown_finalSnapshotIdentifier;
    public @Nullable String finalSnapshotIdentifier() {
        if (!unknown_finalSnapshotIdentifier) return value_finalSnapshotIdentifier;
        throw new UndeferrableValueException("Value 'Cluster.finalSnapshotIdentifier' is not present");
    }

    /**
     * Global cluster identifier specified on `aws.rds.GlobalCluster`.
     * 
     */
    @PolicyResourceProperty(name="globalClusterIdentifier", flag="unknown_globalClusterIdentifier")
    private @Nullable String value_globalClusterIdentifier;
    private boolean unknown_globalClusterIdentifier;
    public @Nullable String globalClusterIdentifier() {
        if (!unknown_globalClusterIdentifier) return value_globalClusterIdentifier;
        throw new UndeferrableValueException("Value 'Cluster.globalClusterIdentifier' is not present");
    }

    /**
     * Route53 Hosted Zone ID of the endpoint
     * 
     */
    @PolicyResourceProperty(name="hostedZoneId", flag="unknown_hostedZoneId")
    private String value_hostedZoneId;
    private boolean unknown_hostedZoneId;
    public String hostedZoneId() {
        if (!unknown_hostedZoneId) return value_hostedZoneId;
        throw new UndeferrableValueException("Value 'Cluster.hostedZoneId' is not present");
    }

    /**
     * Specifies whether or not mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled. Please see [AWS Documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html) for availability and limitations.
     * 
     */
    @PolicyResourceProperty(name="iamDatabaseAuthenticationEnabled", flag="unknown_iamDatabaseAuthenticationEnabled")
    private @Nullable Boolean value_iamDatabaseAuthenticationEnabled;
    private boolean unknown_iamDatabaseAuthenticationEnabled;
    public @Nullable Boolean iamDatabaseAuthenticationEnabled() {
        if (!unknown_iamDatabaseAuthenticationEnabled) return value_iamDatabaseAuthenticationEnabled;
        throw new UndeferrableValueException("Value 'Cluster.iamDatabaseAuthenticationEnabled' is not present");
    }

    /**
     * List of ARNs for the IAM roles to associate to the RDS Cluster.
     * 
     */
    @PolicyResourceProperty(name="iamRoles", flag="unknown_iamRoles")
    private List<String> value_iamRoles;
    private boolean unknown_iamRoles;
    public List<String> iamRoles() {
        if (!unknown_iamRoles) return value_iamRoles;
        throw new UndeferrableValueException("Value 'Cluster.iamRoles' is not present");
    }

    /**
     * Amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster. For information about valid Iops values, see [Amazon RDS Provisioned IOPS storage to improve performance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS) in the Amazon RDS User Guide. (This setting is required to create a Multi-AZ DB cluster). Must be a multiple between .5 and 50 of the storage amount for the DB cluster.
     * 
     */
    @PolicyResourceProperty(name="iops", flag="unknown_iops")
    private @Nullable Integer value_iops;
    private boolean unknown_iops;
    public @Nullable Integer iops() {
        if (!unknown_iops) return value_iops;
        throw new UndeferrableValueException("Value 'Cluster.iops' is not present");
    }

    /**
     * ARN for the KMS encryption key. When specifying `kms_key_id`, `storage_encrypted` needs to be set to true.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'Cluster.kmsKeyId' is not present");
    }

    /**
     * Set to true to allow RDS to manage the master user password in Secrets Manager. Cannot be set if `master_password` is provided.
     * 
     */
    @PolicyResourceProperty(name="manageMasterUserPassword", flag="unknown_manageMasterUserPassword")
    private @Nullable Boolean value_manageMasterUserPassword;
    private boolean unknown_manageMasterUserPassword;
    public @Nullable Boolean manageMasterUserPassword() {
        if (!unknown_manageMasterUserPassword) return value_manageMasterUserPassword;
        throw new UndeferrableValueException("Value 'Cluster.manageMasterUserPassword' is not present");
    }

    /**
     * Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. Please refer to the [RDS Naming Constraints](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints). Cannot be set if `manage_master_user_password` is set to `true`.
     * 
     */
    @PolicyResourceProperty(name="masterPassword", flag="unknown_masterPassword")
    private @Nullable String value_masterPassword;
    private boolean unknown_masterPassword;
    public @Nullable String masterPassword() {
        if (!unknown_masterPassword) return value_masterPassword;
        throw new UndeferrableValueException("Value 'Cluster.masterPassword' is not present");
    }

    /**
     * Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If not specified, the default KMS key for your Amazon Web Services account is used.
     * 
     */
    @PolicyResourceProperty(name="masterUserSecretKmsKeyId", flag="unknown_masterUserSecretKmsKeyId")
    private String value_masterUserSecretKmsKeyId;
    private boolean unknown_masterUserSecretKmsKeyId;
    public String masterUserSecretKmsKeyId() {
        if (!unknown_masterUserSecretKmsKeyId) return value_masterUserSecretKmsKeyId;
        throw new UndeferrableValueException("Value 'Cluster.masterUserSecretKmsKeyId' is not present");
    }

    /**
     * Block that specifies the master user secret. Only available when `manage_master_user_password` is set to true. Documented below.
     * 
     */
    @PolicyResourceProperty(name="masterUserSecrets", flag="unknown_masterUserSecrets")
    private List<ClusterMasterUserSecret> value_masterUserSecrets;
    private boolean unknown_masterUserSecrets;
    public List<ClusterMasterUserSecret> masterUserSecrets() {
        if (!unknown_masterUserSecrets) return value_masterUserSecrets;
        throw new UndeferrableValueException("Value 'Cluster.masterUserSecrets' is not present");
    }

    /**
     * Username for the master DB user. Please refer to the [RDS Naming Constraints](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints). This argument does not support in-place updates and cannot be changed during a restore from snapshot.
     * 
     */
    @PolicyResourceProperty(name="masterUsername", flag="unknown_masterUsername")
    private String value_masterUsername;
    private boolean unknown_masterUsername;
    public String masterUsername() {
        if (!unknown_masterUsername) return value_masterUsername;
        throw new UndeferrableValueException("Value 'Cluster.masterUsername' is not present");
    }

    /**
     * Interval, in seconds, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster. To turn off collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid Values: 0, 1, 5, 10, 15, 30, 60.
     * 
     */
    @PolicyResourceProperty(name="monitoringInterval", flag="unknown_monitoringInterval")
    private Integer value_monitoringInterval;
    private boolean unknown_monitoringInterval;
    public Integer monitoringInterval() {
        if (!unknown_monitoringInterval) return value_monitoringInterval;
        throw new UndeferrableValueException("Value 'Cluster.monitoringInterval' is not present");
    }

    /**
     * ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. You can find more information on the [AWS Documentation](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole.html) what IAM permissions are needed to allow Enhanced Monitoring for RDS Clusters.
     * 
     */
    @PolicyResourceProperty(name="monitoringRoleArn", flag="unknown_monitoringRoleArn")
    private String value_monitoringRoleArn;
    private boolean unknown_monitoringRoleArn;
    public String monitoringRoleArn() {
        if (!unknown_monitoringRoleArn) return value_monitoringRoleArn;
        throw new UndeferrableValueException("Value 'Cluster.monitoringRoleArn' is not present");
    }

    /**
     * Network type of the cluster. Valid values: `IPV4`, `DUAL`.
     * 
     */
    @PolicyResourceProperty(name="networkType", flag="unknown_networkType")
    private String value_networkType;
    private boolean unknown_networkType;
    public String networkType() {
        if (!unknown_networkType) return value_networkType;
        throw new UndeferrableValueException("Value 'Cluster.networkType' is not present");
    }

    /**
     * Enables Performance Insights.
     * 
     */
    @PolicyResourceProperty(name="performanceInsightsEnabled", flag="unknown_performanceInsightsEnabled")
    private @Nullable Boolean value_performanceInsightsEnabled;
    private boolean unknown_performanceInsightsEnabled;
    public @Nullable Boolean performanceInsightsEnabled() {
        if (!unknown_performanceInsightsEnabled) return value_performanceInsightsEnabled;
        throw new UndeferrableValueException("Value 'Cluster.performanceInsightsEnabled' is not present");
    }

    /**
     * Specifies the KMS Key ID to encrypt Performance Insights data. If not specified, the default RDS KMS key will be used (`aws/rds`).
     * 
     */
    @PolicyResourceProperty(name="performanceInsightsKmsKeyId", flag="unknown_performanceInsightsKmsKeyId")
    private String value_performanceInsightsKmsKeyId;
    private boolean unknown_performanceInsightsKmsKeyId;
    public String performanceInsightsKmsKeyId() {
        if (!unknown_performanceInsightsKmsKeyId) return value_performanceInsightsKmsKeyId;
        throw new UndeferrableValueException("Value 'Cluster.performanceInsightsKmsKeyId' is not present");
    }

    /**
     * Specifies the amount of time to retain performance insights data for. Defaults to 7 days if Performance Insights are enabled. Valid values are `7`, `month * 31` (where month is a number of months from 1-23), and `731`. See [here](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.Overview.cost.html) for more information on retention periods.
     * 
     */
    @PolicyResourceProperty(name="performanceInsightsRetentionPeriod", flag="unknown_performanceInsightsRetentionPeriod")
    private Integer value_performanceInsightsRetentionPeriod;
    private boolean unknown_performanceInsightsRetentionPeriod;
    public Integer performanceInsightsRetentionPeriod() {
        if (!unknown_performanceInsightsRetentionPeriod) return value_performanceInsightsRetentionPeriod;
        throw new UndeferrableValueException("Value 'Cluster.performanceInsightsRetentionPeriod' is not present");
    }

    /**
     * Port on which the DB accepts connections.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'Cluster.port' is not present");
    }

    /**
     * Daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per region, e.g. `04:00-09:00`.
     * 
     */
    @PolicyResourceProperty(name="preferredBackupWindow", flag="unknown_preferredBackupWindow")
    private String value_preferredBackupWindow;
    private boolean unknown_preferredBackupWindow;
    public String preferredBackupWindow() {
        if (!unknown_preferredBackupWindow) return value_preferredBackupWindow;
        throw new UndeferrableValueException("Value 'Cluster.preferredBackupWindow' is not present");
    }

    /**
     * Weekly time range during which system maintenance can occur, in (UTC) e.g., `wed:04:00-wed:04:30`
     * 
     */
    @PolicyResourceProperty(name="preferredMaintenanceWindow", flag="unknown_preferredMaintenanceWindow")
    private String value_preferredMaintenanceWindow;
    private boolean unknown_preferredMaintenanceWindow;
    public String preferredMaintenanceWindow() {
        if (!unknown_preferredMaintenanceWindow) return value_preferredMaintenanceWindow;
        throw new UndeferrableValueException("Value 'Cluster.preferredMaintenanceWindow' is not present");
    }

    /**
     * Read-only endpoint for the Aurora cluster, automatically
     * load-balanced across replicas
     * 
     */
    @PolicyResourceProperty(name="readerEndpoint", flag="unknown_readerEndpoint")
    private String value_readerEndpoint;
    private boolean unknown_readerEndpoint;
    public String readerEndpoint() {
        if (!unknown_readerEndpoint) return value_readerEndpoint;
        throw new UndeferrableValueException("Value 'Cluster.readerEndpoint' is not present");
    }

    /**
     * ARN of a source DB cluster or DB instance if this DB cluster is to be created as a Read Replica. **Note:** Removing this attribute after creation will promote the read replica to a standalone cluster. If DB Cluster is part of a Global Cluster, use the `ignoreChanges` resource option to prevent Pulumi from showing differences for this argument instead of configuring this value.
     * 
     */
    @PolicyResourceProperty(name="replicationSourceIdentifier", flag="unknown_replicationSourceIdentifier")
    private @Nullable String value_replicationSourceIdentifier;
    private boolean unknown_replicationSourceIdentifier;
    public @Nullable String replicationSourceIdentifier() {
        if (!unknown_replicationSourceIdentifier) return value_replicationSourceIdentifier;
        throw new UndeferrableValueException("Value 'Cluster.replicationSourceIdentifier' is not present");
    }

    /**
     * Nested attribute for [point in time restore](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-pitr.html). More details below.
     * 
     */
    @PolicyResourceProperty(name="restoreToPointInTime", flag="unknown_restoreToPointInTime")
    private @Nullable ClusterRestoreToPointInTime value_restoreToPointInTime;
    private boolean unknown_restoreToPointInTime;
    public @Nullable ClusterRestoreToPointInTime restoreToPointInTime() {
        if (!unknown_restoreToPointInTime) return value_restoreToPointInTime;
        throw new UndeferrableValueException("Value 'Cluster.restoreToPointInTime' is not present");
    }

    @PolicyResourceProperty(name="s3Import", flag="unknown_s3Import")
    private @Nullable ClusterS3Import value_s3Import;
    private boolean unknown_s3Import;
    public @Nullable ClusterS3Import s3Import() {
        if (!unknown_s3Import) return value_s3Import;
        throw new UndeferrableValueException("Value 'Cluster.s3Import' is not present");
    }

    /**
     * Nested attribute with scaling properties. Only valid when `engine_mode` is set to `serverless`. More details below.
     * 
     */
    @PolicyResourceProperty(name="scalingConfiguration", flag="unknown_scalingConfiguration")
    private @Nullable ClusterScalingConfiguration value_scalingConfiguration;
    private boolean unknown_scalingConfiguration;
    public @Nullable ClusterScalingConfiguration scalingConfiguration() {
        if (!unknown_scalingConfiguration) return value_scalingConfiguration;
        throw new UndeferrableValueException("Value 'Cluster.scalingConfiguration' is not present");
    }

    /**
     * Nested attribute with scaling properties for ServerlessV2. Only valid when `engine_mode` is set to `provisioned`. More details below.
     * 
     */
    @PolicyResourceProperty(name="serverlessv2ScalingConfiguration", flag="unknown_serverlessv2ScalingConfiguration")
    private @Nullable ClusterServerlessv2ScalingConfiguration value_serverlessv2ScalingConfiguration;
    private boolean unknown_serverlessv2ScalingConfiguration;
    public @Nullable ClusterServerlessv2ScalingConfiguration serverlessv2ScalingConfiguration() {
        if (!unknown_serverlessv2ScalingConfiguration) return value_serverlessv2ScalingConfiguration;
        throw new UndeferrableValueException("Value 'Cluster.serverlessv2ScalingConfiguration' is not present");
    }

    /**
     * Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `final_snapshot_identifier`. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="skipFinalSnapshot", flag="unknown_skipFinalSnapshot")
    private @Nullable Boolean value_skipFinalSnapshot;
    private boolean unknown_skipFinalSnapshot;
    public @Nullable Boolean skipFinalSnapshot() {
        if (!unknown_skipFinalSnapshot) return value_skipFinalSnapshot;
        throw new UndeferrableValueException("Value 'Cluster.skipFinalSnapshot' is not present");
    }

    /**
     * Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Conflicts with `global_cluster_identifier`. Clusters cannot be restored from snapshot **and** joined to an existing global cluster in a single operation. See the [AWS documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-getting-started.html#aurora-global-database.use-snapshot) or the Global Cluster Restored From Snapshot example for instructions on building a global cluster starting with a snapshot.
     * 
     */
    @PolicyResourceProperty(name="snapshotIdentifier", flag="unknown_snapshotIdentifier")
    private @Nullable String value_snapshotIdentifier;
    private boolean unknown_snapshotIdentifier;
    public @Nullable String snapshotIdentifier() {
        if (!unknown_snapshotIdentifier) return value_snapshotIdentifier;
        throw new UndeferrableValueException("Value 'Cluster.snapshotIdentifier' is not present");
    }

    /**
     * The source region for an encrypted replica DB cluster.
     * 
     */
    @PolicyResourceProperty(name="sourceRegion", flag="unknown_sourceRegion")
    private @Nullable String value_sourceRegion;
    private boolean unknown_sourceRegion;
    public @Nullable String sourceRegion() {
        if (!unknown_sourceRegion) return value_sourceRegion;
        throw new UndeferrableValueException("Value 'Cluster.sourceRegion' is not present");
    }

    /**
     * Specifies whether the DB cluster is encrypted. The default is `false` for `provisioned` `engine_mode` and `true` for `serverless` `engine_mode`. When restoring an unencrypted `snapshot_identifier`, the `kms_key_id` argument must be provided to encrypt the restored cluster. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @PolicyResourceProperty(name="storageEncrypted", flag="unknown_storageEncrypted")
    private Boolean value_storageEncrypted;
    private boolean unknown_storageEncrypted;
    public Boolean storageEncrypted() {
        if (!unknown_storageEncrypted) return value_storageEncrypted;
        throw new UndeferrableValueException("Value 'Cluster.storageEncrypted' is not present");
    }

    /**
     * (Forces new for Multi-AZ DB clusters) Specifies the storage type to be associated with the DB cluster. For Aurora DB clusters, `storage_type` modifications can be done in-place. For Multi-AZ DB Clusters, the `iops` argument must also be set. Valid values are: `&#34;&#34;`, `aurora-iopt1` (Aurora DB Clusters); `io1`, `io2` (Multi-AZ DB Clusters). Default: `&#34;&#34;` (Aurora DB Clusters); `io1` (Multi-AZ DB Clusters).
     * 
     */
    @PolicyResourceProperty(name="storageType", flag="unknown_storageType")
    private String value_storageType;
    private boolean unknown_storageType;
    public String storageType() {
        if (!unknown_storageType) return value_storageType;
        throw new UndeferrableValueException("Value 'Cluster.storageType' is not present");
    }

    /**
     * A map of tags to assign to the DB cluster. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Cluster.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Cluster.tagsAll' is not present");
    }

    /**
     * List of VPC security groups to associate with the Cluster
     * 
     */
    @PolicyResourceProperty(name="vpcSecurityGroupIds", flag="unknown_vpcSecurityGroupIds")
    private List<String> value_vpcSecurityGroupIds;
    private boolean unknown_vpcSecurityGroupIds;
    public List<String> vpcSecurityGroupIds() {
        if (!unknown_vpcSecurityGroupIds) return value_vpcSecurityGroupIds;
        throw new UndeferrableValueException("Value 'Cluster.vpcSecurityGroupIds' is not present");
    }

}
