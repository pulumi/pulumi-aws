// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rds;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.rds.outputs.ReservedInstanceRecurringCharge;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rds/reservedInstance:ReservedInstance")
public final class ReservedInstance extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN for the reserved DB instance.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ReservedInstance.arn' is not present");
    }

    /**
     * Currency code for the reserved DB instance.
     * 
     */
    @PolicyResourceProperty(name="currencyCode", flag="unknown_currencyCode")
    private String value_currencyCode;
    private boolean unknown_currencyCode;
    public String currencyCode() {
        if (!unknown_currencyCode) return value_currencyCode;
        throw new UndeferrableValueException("Value 'ReservedInstance.currencyCode' is not present");
    }

    /**
     * DB instance class for the reserved DB instance.
     * 
     */
    @PolicyResourceProperty(name="dbInstanceClass", flag="unknown_dbInstanceClass")
    private String value_dbInstanceClass;
    private boolean unknown_dbInstanceClass;
    public String dbInstanceClass() {
        if (!unknown_dbInstanceClass) return value_dbInstanceClass;
        throw new UndeferrableValueException("Value 'ReservedInstance.dbInstanceClass' is not present");
    }

    /**
     * Duration of the reservation in seconds.
     * 
     */
    @PolicyResourceProperty(name="duration", flag="unknown_duration")
    private Integer value_duration;
    private boolean unknown_duration;
    public Integer duration() {
        if (!unknown_duration) return value_duration;
        throw new UndeferrableValueException("Value 'ReservedInstance.duration' is not present");
    }

    /**
     * Fixed price charged for this reserved DB instance.
     * 
     */
    @PolicyResourceProperty(name="fixedPrice", flag="unknown_fixedPrice")
    private Double value_fixedPrice;
    private boolean unknown_fixedPrice;
    public Double fixedPrice() {
        if (!unknown_fixedPrice) return value_fixedPrice;
        throw new UndeferrableValueException("Value 'ReservedInstance.fixedPrice' is not present");
    }

    /**
     * Number of instances to reserve. Default value is `1`.
     * 
     */
    @PolicyResourceProperty(name="instanceCount", flag="unknown_instanceCount")
    private @Nullable Integer value_instanceCount;
    private boolean unknown_instanceCount;
    public @Nullable Integer instanceCount() {
        if (!unknown_instanceCount) return value_instanceCount;
        throw new UndeferrableValueException("Value 'ReservedInstance.instanceCount' is not present");
    }

    /**
     * Unique identifier for the lease associated with the reserved DB instance. Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.
     * 
     */
    @PolicyResourceProperty(name="leaseId", flag="unknown_leaseId")
    private String value_leaseId;
    private boolean unknown_leaseId;
    public String leaseId() {
        if (!unknown_leaseId) return value_leaseId;
        throw new UndeferrableValueException("Value 'ReservedInstance.leaseId' is not present");
    }

    /**
     * Whether the reservation applies to Multi-AZ deployments.
     * 
     */
    @PolicyResourceProperty(name="multiAz", flag="unknown_multiAz")
    private Boolean value_multiAz;
    private boolean unknown_multiAz;
    public Boolean multiAz() {
        if (!unknown_multiAz) return value_multiAz;
        throw new UndeferrableValueException("Value 'ReservedInstance.multiAz' is not present");
    }

    /**
     * ID of the Reserved DB instance offering to purchase. To determine an `offering_id`, see the `aws.rds.getReservedInstanceOffering` data source.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="offeringId", flag="unknown_offeringId")
    private String value_offeringId;
    private boolean unknown_offeringId;
    public String offeringId() {
        if (!unknown_offeringId) return value_offeringId;
        throw new UndeferrableValueException("Value 'ReservedInstance.offeringId' is not present");
    }

    /**
     * Offering type of this reserved DB instance.
     * 
     */
    @PolicyResourceProperty(name="offeringType", flag="unknown_offeringType")
    private String value_offeringType;
    private boolean unknown_offeringType;
    public String offeringType() {
        if (!unknown_offeringType) return value_offeringType;
        throw new UndeferrableValueException("Value 'ReservedInstance.offeringType' is not present");
    }

    /**
     * Description of the reserved DB instance.
     * 
     */
    @PolicyResourceProperty(name="productDescription", flag="unknown_productDescription")
    private String value_productDescription;
    private boolean unknown_productDescription;
    public String productDescription() {
        if (!unknown_productDescription) return value_productDescription;
        throw new UndeferrableValueException("Value 'ReservedInstance.productDescription' is not present");
    }

    /**
     * Recurring price charged to run this reserved DB instance.
     * 
     */
    @PolicyResourceProperty(name="recurringCharges", flag="unknown_recurringCharges")
    private List<ReservedInstanceRecurringCharge> value_recurringCharges;
    private boolean unknown_recurringCharges;
    public List<ReservedInstanceRecurringCharge> recurringCharges() {
        if (!unknown_recurringCharges) return value_recurringCharges;
        throw new UndeferrableValueException("Value 'ReservedInstance.recurringCharges' is not present");
    }

    /**
     * Customer-specified identifier to track this reservation.
     * 
     */
    @PolicyResourceProperty(name="reservationId", flag="unknown_reservationId")
    private @Nullable String value_reservationId;
    private boolean unknown_reservationId;
    public @Nullable String reservationId() {
        if (!unknown_reservationId) return value_reservationId;
        throw new UndeferrableValueException("Value 'ReservedInstance.reservationId' is not present");
    }

    /**
     * Time the reservation started.
     * 
     */
    @PolicyResourceProperty(name="startTime", flag="unknown_startTime")
    private String value_startTime;
    private boolean unknown_startTime;
    public String startTime() {
        if (!unknown_startTime) return value_startTime;
        throw new UndeferrableValueException("Value 'ReservedInstance.startTime' is not present");
    }

    /**
     * State of the reserved DB instance.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private String value_state;
    private boolean unknown_state;
    public String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'ReservedInstance.state' is not present");
    }

    /**
     * Map of tags to assign to the DB reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ReservedInstance.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ReservedInstance.tagsAll' is not present");
    }

    /**
     * Hourly price charged for this reserved DB instance.
     * 
     */
    @PolicyResourceProperty(name="usagePrice", flag="unknown_usagePrice")
    private Double value_usagePrice;
    private boolean unknown_usagePrice;
    public Double usagePrice() {
        if (!unknown_usagePrice) return value_usagePrice;
        throw new UndeferrableValueException("Value 'ReservedInstance.usagePrice' is not present");
    }

}
