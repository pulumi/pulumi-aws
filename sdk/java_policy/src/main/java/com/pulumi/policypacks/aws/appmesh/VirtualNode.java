// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appmesh;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.appmesh.outputs.VirtualNodeSpec;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:appmesh/virtualNode:VirtualNode")
public final class VirtualNode extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the virtual node.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'VirtualNode.arn' is not present");
    }

    /**
     * Creation date of the virtual node.
     * 
     */
    @PolicyResourceProperty(name="createdDate", flag="unknown_createdDate")
    private String value_createdDate;
    private boolean unknown_createdDate;
    public String createdDate() {
        if (!unknown_createdDate) return value_createdDate;
        throw new UndeferrableValueException("Value 'VirtualNode.createdDate' is not present");
    }

    /**
     * Last update date of the virtual node.
     * 
     */
    @PolicyResourceProperty(name="lastUpdatedDate", flag="unknown_lastUpdatedDate")
    private String value_lastUpdatedDate;
    private boolean unknown_lastUpdatedDate;
    public String lastUpdatedDate() {
        if (!unknown_lastUpdatedDate) return value_lastUpdatedDate;
        throw new UndeferrableValueException("Value 'VirtualNode.lastUpdatedDate' is not present");
    }

    /**
     * Name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
     * 
     */
    @PolicyResourceProperty(name="meshName", flag="unknown_meshName")
    private String value_meshName;
    private boolean unknown_meshName;
    public String meshName() {
        if (!unknown_meshName) return value_meshName;
        throw new UndeferrableValueException("Value 'VirtualNode.meshName' is not present");
    }

    /**
     * AWS account ID of the service mesh&#39;s owner. Defaults to the account ID the AWS provider is currently connected to.
     * 
     */
    @PolicyResourceProperty(name="meshOwner", flag="unknown_meshOwner")
    private String value_meshOwner;
    private boolean unknown_meshOwner;
    public String meshOwner() {
        if (!unknown_meshOwner) return value_meshOwner;
        throw new UndeferrableValueException("Value 'VirtualNode.meshOwner' is not present");
    }

    /**
     * Name to use for the virtual node. Must be between 1 and 255 characters in length.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'VirtualNode.name' is not present");
    }

    /**
     * Resource owner&#39;s AWS account ID.
     * 
     */
    @PolicyResourceProperty(name="resourceOwner", flag="unknown_resourceOwner")
    private String value_resourceOwner;
    private boolean unknown_resourceOwner;
    public String resourceOwner() {
        if (!unknown_resourceOwner) return value_resourceOwner;
        throw new UndeferrableValueException("Value 'VirtualNode.resourceOwner' is not present");
    }

    /**
     * Virtual node specification to apply.
     * 
     */
    @PolicyResourceProperty(name="spec", flag="unknown_spec")
    private VirtualNodeSpec value_spec;
    private boolean unknown_spec;
    public VirtualNodeSpec spec() {
        if (!unknown_spec) return value_spec;
        throw new UndeferrableValueException("Value 'VirtualNode.spec' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'VirtualNode.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'VirtualNode.tagsAll' is not present");
    }

}
