// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.inputs.TrafficMirrorFilterRuleDestinationPortRangeArgs;
import com.pulumi.policypacks.aws.ec2.inputs.TrafficMirrorFilterRuleSourcePortRangeArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule")
public final class TrafficMirrorFilterRuleArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Description of the traffic mirror filter rule.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("TrafficMirrorFilterRuleArgs.description");
    }

    /**
     * Destination CIDR block to assign to the Traffic Mirror rule.
     * 
     */
    private UndeferrableValue<String> destinationCidrBlock;

    public String destinationCidrBlock() {
        if (destinationCidrBlock == null) return null;
        return destinationCidrBlock.getValue("TrafficMirrorFilterRuleArgs.destinationCidrBlock");
    }

    /**
     * Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
     * 
     */
    private UndeferrableValue<TrafficMirrorFilterRuleDestinationPortRangeArgs> destinationPortRange;

    public TrafficMirrorFilterRuleDestinationPortRangeArgs destinationPortRange() {
        if (destinationPortRange == null) return null;
        return destinationPortRange.getValue("TrafficMirrorFilterRuleArgs.destinationPortRange");
    }

    /**
     * Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
     * 
     */
    private UndeferrableValue<Integer> protocol;

    public Integer protocol() {
        if (protocol == null) return null;
        return protocol.getValue("TrafficMirrorFilterRuleArgs.protocol");
    }

    /**
     * Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
     * 
     */
    private UndeferrableValue<String> ruleAction;

    public String ruleAction() {
        if (ruleAction == null) return null;
        return ruleAction.getValue("TrafficMirrorFilterRuleArgs.ruleAction");
    }

    /**
     * Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
     * 
     */
    private UndeferrableValue<Integer> ruleNumber;

    public Integer ruleNumber() {
        if (ruleNumber == null) return null;
        return ruleNumber.getValue("TrafficMirrorFilterRuleArgs.ruleNumber");
    }

    /**
     * Source CIDR block to assign to the Traffic Mirror rule.
     * 
     */
    private UndeferrableValue<String> sourceCidrBlock;

    public String sourceCidrBlock() {
        if (sourceCidrBlock == null) return null;
        return sourceCidrBlock.getValue("TrafficMirrorFilterRuleArgs.sourceCidrBlock");
    }

    /**
     * Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
     * 
     */
    private UndeferrableValue<TrafficMirrorFilterRuleSourcePortRangeArgs> sourcePortRange;

    public TrafficMirrorFilterRuleSourcePortRangeArgs sourcePortRange() {
        if (sourcePortRange == null) return null;
        return sourcePortRange.getValue("TrafficMirrorFilterRuleArgs.sourcePortRange");
    }

    /**
     * Direction of traffic to be captured. Valid values are `ingress` and `egress`
     * 
     * Traffic mirror port range support following attributes:
     * 
     */
    private UndeferrableValue<String> trafficDirection;

    public String trafficDirection() {
        if (trafficDirection == null) return null;
        return trafficDirection.getValue("TrafficMirrorFilterRuleArgs.trafficDirection");
    }

    /**
     * ID of the traffic mirror filter to which this rule should be added
     * 
     */
    private UndeferrableValue<String> trafficMirrorFilterId;

    public String trafficMirrorFilterId() {
        if (trafficMirrorFilterId == null) return null;
        return trafficMirrorFilterId.getValue("TrafficMirrorFilterRuleArgs.trafficMirrorFilterId");
    }

}
