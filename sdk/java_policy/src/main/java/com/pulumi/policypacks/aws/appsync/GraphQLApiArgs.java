// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appsync;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.appsync.inputs.GraphQLApiAdditionalAuthenticationProviderArgs;
import com.pulumi.policypacks.aws.appsync.inputs.GraphQLApiEnhancedMetricsConfigArgs;
import com.pulumi.policypacks.aws.appsync.inputs.GraphQLApiLambdaAuthorizerConfigArgs;
import com.pulumi.policypacks.aws.appsync.inputs.GraphQLApiLogConfigArgs;
import com.pulumi.policypacks.aws.appsync.inputs.GraphQLApiOpenidConnectConfigArgs;
import com.pulumi.policypacks.aws.appsync.inputs.GraphQLApiUserPoolConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:appsync/graphQLApi:GraphQLApi")
public final class GraphQLApiArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * One or more additional authentication providers for the GraphQL API. See `additional_authentication_provider` Block for details.
     * 
     */
    private UndeferrableValue<List<GraphQLApiAdditionalAuthenticationProviderArgs>> additionalAuthenticationProviders;

    public List<GraphQLApiAdditionalAuthenticationProviderArgs> additionalAuthenticationProviders() {
        if (additionalAuthenticationProviders == null) return null;
        return additionalAuthenticationProviders.getValue("GraphQLApiArgs.additionalAuthenticationProviders");
    }

    /**
     * API type. Valid values are `GRAPHQL` or `MERGED`. A `MERGED` type requires `merged_api_execution_role_arn` to be set.
     * 
     */
    private UndeferrableValue<String> apiType;

    public String apiType() {
        if (apiType == null) return null;
        return apiType.getValue("GraphQLApiArgs.apiType");
    }

    /**
     * Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
     * 
     */
    private UndeferrableValue<String> authenticationType;

    public String authenticationType() {
        if (authenticationType == null) return null;
        return authenticationType.getValue("GraphQLApiArgs.authenticationType");
    }

    /**
     * Enables and controls the enhanced metrics feature. See `enhanced_metrics_config` Block for details.
     * 
     */
    private UndeferrableValue<GraphQLApiEnhancedMetricsConfigArgs> enhancedMetricsConfig;

    public GraphQLApiEnhancedMetricsConfigArgs enhancedMetricsConfig() {
        if (enhancedMetricsConfig == null) return null;
        return enhancedMetricsConfig.getValue("GraphQLApiArgs.enhancedMetricsConfig");
    }

    /**
     * Sets the value of the GraphQL API to enable (`ENABLED`) or disable (`DISABLED`) introspection. If no value is provided, the introspection configuration will be set to ENABLED by default. This field will produce an error if the operation attempts to use the introspection feature while this field is disabled. For more information about introspection, see [GraphQL introspection](https://graphql.org/learn/introspection/).
     * 
     */
    private UndeferrableValue<String> introspectionConfig;

    public String introspectionConfig() {
        if (introspectionConfig == null) return null;
        return introspectionConfig.getValue("GraphQLApiArgs.introspectionConfig");
    }

    /**
     * Nested argument containing Lambda authorizer configuration. See `lambda_authorizer_config` Block for details.
     * 
     */
    private UndeferrableValue<GraphQLApiLambdaAuthorizerConfigArgs> lambdaAuthorizerConfig;

    public GraphQLApiLambdaAuthorizerConfigArgs lambdaAuthorizerConfig() {
        if (lambdaAuthorizerConfig == null) return null;
        return lambdaAuthorizerConfig.getValue("GraphQLApiArgs.lambdaAuthorizerConfig");
    }

    /**
     * Nested argument containing logging configuration. See `log_config` Block for details.
     * 
     */
    private UndeferrableValue<GraphQLApiLogConfigArgs> logConfig;

    public GraphQLApiLogConfigArgs logConfig() {
        if (logConfig == null) return null;
        return logConfig.getValue("GraphQLApiArgs.logConfig");
    }

    /**
     * ARN of the execution role when `api_type` is set to `MERGED`.
     * 
     */
    private UndeferrableValue<String> mergedApiExecutionRoleArn;

    public String mergedApiExecutionRoleArn() {
        if (mergedApiExecutionRoleArn == null) return null;
        return mergedApiExecutionRoleArn.getValue("GraphQLApiArgs.mergedApiExecutionRoleArn");
    }

    /**
     * User-supplied name for the GraphQL API.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("GraphQLApiArgs.name");
    }

    /**
     * Nested argument containing OpenID Connect configuration. See `openid_connect_config` Block for details.
     * 
     */
    private UndeferrableValue<GraphQLApiOpenidConnectConfigArgs> openidConnectConfig;

    public GraphQLApiOpenidConnectConfigArgs openidConnectConfig() {
        if (openidConnectConfig == null) return null;
        return openidConnectConfig.getValue("GraphQLApiArgs.openidConnectConfig");
    }

    /**
     * The maximum depth a query can have in a single request. Depth refers to the amount of nested levels allowed in the body of query. The default value is `0` (or unspecified), which indicates there&#39;s no depth limit. If you set a limit, it can be between `1` and `75` nested levels. This field will produce a limit error if the operation falls out of bounds.
     * 
     * Note that fields can still be set to nullable or non-nullable. If a non-nullable field produces an error, the error will be thrown upwards to the first nullable field available.
     * 
     */
    private UndeferrableValue<Integer> queryDepthLimit;

    public Integer queryDepthLimit() {
        if (queryDepthLimit == null) return null;
        return queryDepthLimit.getValue("GraphQLApiArgs.queryDepthLimit");
    }

    /**
     * The maximum number of resolvers that can be invoked in a single request. The default value is `0` (or unspecified), which will set the limit to `10000`. When specified, the limit value can be between `1` and `10000`. This field will produce a limit error if the operation falls out of bounds.
     * 
     */
    private UndeferrableValue<Integer> resolverCountLimit;

    public Integer resolverCountLimit() {
        if (resolverCountLimit == null) return null;
        return resolverCountLimit.getValue("GraphQLApiArgs.resolverCountLimit");
    }

    /**
     * Schema definition, in GraphQL schema language format. This provider cannot perform drift detection of this configuration.
     * 
     */
    private UndeferrableValue<String> schema;

    public String schema() {
        if (schema == null) return null;
        return schema.getValue("GraphQLApiArgs.schema");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("GraphQLApiArgs.tags");
    }

    /**
     * Amazon Cognito User Pool configuration. See `user_pool_config` Block for details.
     * 
     */
    private UndeferrableValue<GraphQLApiUserPoolConfigArgs> userPoolConfig;

    public GraphQLApiUserPoolConfigArgs userPoolConfig() {
        if (userPoolConfig == null) return null;
        return userPoolConfig.getValue("GraphQLApiArgs.userPoolConfig");
    }

    /**
     * Sets the value of the GraphQL API to public (`GLOBAL`) or private (`PRIVATE`). If no value is provided, the visibility will be set to `GLOBAL` by default. This value cannot be changed once the API has been created.
     * 
     */
    private UndeferrableValue<String> visibility;

    public String visibility() {
        if (visibility == null) return null;
        return visibility.getValue("GraphQLApiArgs.visibility");
    }

    /**
     * Whether tracing with X-ray is enabled. Defaults to false.
     * 
     */
    private UndeferrableValue<Boolean> xrayEnabled;

    public Boolean xrayEnabled() {
        if (xrayEnabled == null) return null;
        return xrayEnabled.getValue("GraphQLApiArgs.xrayEnabled");
    }

}
