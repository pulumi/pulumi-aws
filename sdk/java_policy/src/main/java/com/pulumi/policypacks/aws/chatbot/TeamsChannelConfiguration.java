// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.chatbot;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.chatbot.outputs.TeamsChannelConfigurationTimeouts;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration")
public final class TeamsChannelConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ID of the Microsoft Teams channel.
     * 
     */
    @PolicyResourceProperty(name="channelId", flag="unknown_channelId")
    private String value_channelId;
    private boolean unknown_channelId;
    public String channelId() {
        if (!unknown_channelId) return value_channelId;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.channelId' is not present");
    }

    /**
     * Name of the Microsoft Teams channel.
     * 
     */
    @PolicyResourceProperty(name="channelName", flag="unknown_channelName")
    private String value_channelName;
    private boolean unknown_channelName;
    public String channelName() {
        if (!unknown_channelName) return value_channelName;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.channelName' is not present");
    }

    /**
     * ARN of the Microsoft Teams channel configuration.
     * 
     */
    @PolicyResourceProperty(name="chatConfigurationArn", flag="unknown_chatConfigurationArn")
    private String value_chatConfigurationArn;
    private boolean unknown_chatConfigurationArn;
    public String chatConfigurationArn() {
        if (!unknown_chatConfigurationArn) return value_chatConfigurationArn;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.chatConfigurationArn' is not present");
    }

    /**
     * Name of the Microsoft Teams channel configuration.
     * 
     */
    @PolicyResourceProperty(name="configurationName", flag="unknown_configurationName")
    private String value_configurationName;
    private boolean unknown_configurationName;
    public String configurationName() {
        if (!unknown_configurationName) return value_configurationName;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.configurationName' is not present");
    }

    /**
     * List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
     * 
     */
    @PolicyResourceProperty(name="guardrailPolicyArns", flag="unknown_guardrailPolicyArns")
    private List<String> value_guardrailPolicyArns;
    private boolean unknown_guardrailPolicyArns;
    public List<String> guardrailPolicyArns() {
        if (!unknown_guardrailPolicyArns) return value_guardrailPolicyArns;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.guardrailPolicyArns' is not present");
    }

    /**
     * ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
     * 
     */
    @PolicyResourceProperty(name="iamRoleArn", flag="unknown_iamRoleArn")
    private String value_iamRoleArn;
    private boolean unknown_iamRoleArn;
    public String iamRoleArn() {
        if (!unknown_iamRoleArn) return value_iamRoleArn;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.iamRoleArn' is not present");
    }

    /**
     * Logging levels include `ERROR`, `INFO`, or `NONE`.
     * 
     */
    @PolicyResourceProperty(name="loggingLevel", flag="unknown_loggingLevel")
    private String value_loggingLevel;
    private boolean unknown_loggingLevel;
    public String loggingLevel() {
        if (!unknown_loggingLevel) return value_loggingLevel;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.loggingLevel' is not present");
    }

    /**
     * ARNs of the SNS topics that deliver notifications to AWS Chatbot.
     * 
     */
    @PolicyResourceProperty(name="snsTopicArns", flag="unknown_snsTopicArns")
    private List<String> value_snsTopicArns;
    private boolean unknown_snsTopicArns;
    public List<String> snsTopicArns() {
        if (!unknown_snsTopicArns) return value_snsTopicArns;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.snsTopicArns' is not present");
    }

    /**
     * Map of tags assigned to the resource.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.tagsAll' is not present");
    }

    /**
     * ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
     * 
     */
    @PolicyResourceProperty(name="teamId", flag="unknown_teamId")
    private String value_teamId;
    private boolean unknown_teamId;
    public String teamId() {
        if (!unknown_teamId) return value_teamId;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.teamId' is not present");
    }

    /**
     * Name of the Microsoft Teams team.
     * 
     */
    @PolicyResourceProperty(name="teamName", flag="unknown_teamName")
    private String value_teamName;
    private boolean unknown_teamName;
    public String teamName() {
        if (!unknown_teamName) return value_teamName;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.teamName' is not present");
    }

    /**
     * ID of the Microsoft Teams tenant.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="tenantId", flag="unknown_tenantId")
    private String value_tenantId;
    private boolean unknown_tenantId;
    public String tenantId() {
        if (!unknown_tenantId) return value_tenantId;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.tenantId' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable TeamsChannelConfigurationTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable TeamsChannelConfigurationTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.timeouts' is not present");
    }

    /**
     * Enables use of a user role requirement in your chat configuration.
     * 
     */
    @PolicyResourceProperty(name="userAuthorizationRequired", flag="unknown_userAuthorizationRequired")
    private Boolean value_userAuthorizationRequired;
    private boolean unknown_userAuthorizationRequired;
    public Boolean userAuthorizationRequired() {
        if (!unknown_userAuthorizationRequired) return value_userAuthorizationRequired;
        throw new UndeferrableValueException("Value 'TeamsChannelConfiguration.userAuthorizationRequired' is not present");
    }

}
