// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appmesh.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class VirtualGatewaySpecListenerHealthCheckArgs {

    /**
     * Number of consecutive successful health checks that must occur before declaring listener healthy.
     * 
     */
    @PolicyResourceProperty(name="healthyThreshold", flag="unknown_healthyThreshold")
    private Integer value_healthyThreshold;
    private boolean unknown_healthyThreshold;
    public Integer healthyThreshold() {
        if (!unknown_healthyThreshold) return value_healthyThreshold;
        throw new UndeferrableValueException("Value 'VirtualGatewaySpecListenerHealthCheckArgs.healthyThreshold' is not present");
    }

    /**
     * Time period in milliseconds between each health check execution.
     * 
     */
    @PolicyResourceProperty(name="intervalMillis", flag="unknown_intervalMillis")
    private Integer value_intervalMillis;
    private boolean unknown_intervalMillis;
    public Integer intervalMillis() {
        if (!unknown_intervalMillis) return value_intervalMillis;
        throw new UndeferrableValueException("Value 'VirtualGatewaySpecListenerHealthCheckArgs.intervalMillis' is not present");
    }

    /**
     * Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
     * 
     */
    @PolicyResourceProperty(name="path", flag="unknown_path")
    private String value_path;
    private boolean unknown_path;
    public String path() {
        if (!unknown_path) return value_path;
        throw new UndeferrableValueException("Value 'VirtualGatewaySpecListenerHealthCheckArgs.path' is not present");
    }

    /**
     * Destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'VirtualGatewaySpecListenerHealthCheckArgs.port' is not present");
    }

    /**
     * Protocol for the health check request. Valid values are `http`, `http2`, and `grpc`.
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'VirtualGatewaySpecListenerHealthCheckArgs.protocol' is not present");
    }

    /**
     * Amount of time to wait when receiving a response from the health check, in milliseconds.
     * 
     */
    @PolicyResourceProperty(name="timeoutMillis", flag="unknown_timeoutMillis")
    private Integer value_timeoutMillis;
    private boolean unknown_timeoutMillis;
    public Integer timeoutMillis() {
        if (!unknown_timeoutMillis) return value_timeoutMillis;
        throw new UndeferrableValueException("Value 'VirtualGatewaySpecListenerHealthCheckArgs.timeoutMillis' is not present");
    }

    /**
     * Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
     * 
     */
    @PolicyResourceProperty(name="unhealthyThreshold", flag="unknown_unhealthyThreshold")
    private Integer value_unhealthyThreshold;
    private boolean unknown_unhealthyThreshold;
    public Integer unhealthyThreshold() {
        if (!unknown_unhealthyThreshold) return value_unhealthyThreshold;
        throw new UndeferrableValueException("Value 'VirtualGatewaySpecListenerHealthCheckArgs.unhealthyThreshold' is not present");
    }

}
