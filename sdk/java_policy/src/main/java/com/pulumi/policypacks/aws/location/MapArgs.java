// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.location;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.location.inputs.MapConfigurationArgs;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:location/map:Map")
public final class MapArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Configuration block with the map style selected from an available data provider. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="configuration", flag="unknown_configuration")
    private MapConfigurationArgs value_configuration;
    private boolean unknown_configuration;
    public MapConfigurationArgs configuration() {
        if (!unknown_configuration) return value_configuration;
        throw new UndeferrableValueException("Value 'MapArgs.configuration' is not present");
    }

    /**
     * An optional description for the map resource.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'MapArgs.description' is not present");
    }

    /**
     * The name for the map resource.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="mapName", flag="unknown_mapName")
    private String value_mapName;
    private boolean unknown_mapName;
    public String mapName() {
        if (!unknown_mapName) return value_mapName;
        throw new UndeferrableValueException("Value 'MapArgs.mapName' is not present");
    }

    /**
     * Key-value tags for the map. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'MapArgs.tags' is not present");
    }

}
