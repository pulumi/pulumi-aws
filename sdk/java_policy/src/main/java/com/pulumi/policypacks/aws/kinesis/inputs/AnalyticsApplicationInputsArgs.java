// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesis.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.kinesis.inputs.AnalyticsApplicationInputsKinesisFirehoseArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.AnalyticsApplicationInputsKinesisStreamArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.AnalyticsApplicationInputsParallelismArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.AnalyticsApplicationInputsProcessingConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.AnalyticsApplicationInputsSchemaArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.AnalyticsApplicationInputsStartingPositionConfigurationArgs;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class AnalyticsApplicationInputsArgs {

    /**
     * The ARN of the Kinesis Analytics Application.
     * 
     */
    private UndeferrableValue<String> id;

    public String id() {
        if (id == null) return null;
        return id.getValue("AnalyticsApplicationInputsArgs.id");
    }

    /**
     * The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesis_stream`.
     * See Kinesis Firehose below for more details.
     * 
     */
    private UndeferrableValue<AnalyticsApplicationInputsKinesisFirehoseArgs> kinesisFirehose;

    public AnalyticsApplicationInputsKinesisFirehoseArgs kinesisFirehose() {
        if (kinesisFirehose == null) return null;
        return kinesisFirehose.getValue("AnalyticsApplicationInputsArgs.kinesisFirehose");
    }

    /**
     * The Kinesis Stream configuration for the streaming source. Conflicts with `kinesis_firehose`.
     * See Kinesis Stream below for more details.
     * 
     */
    private UndeferrableValue<AnalyticsApplicationInputsKinesisStreamArgs> kinesisStream;

    public AnalyticsApplicationInputsKinesisStreamArgs kinesisStream() {
        if (kinesisStream == null) return null;
        return kinesisStream.getValue("AnalyticsApplicationInputsArgs.kinesisStream");
    }

    /**
     * The Name Prefix to use when creating an in-application stream.
     * 
     */
    private UndeferrableValue<String> namePrefix;

    public String namePrefix() {
        if (namePrefix == null) return null;
        return namePrefix.getValue("AnalyticsApplicationInputsArgs.namePrefix");
    }

    /**
     * The number of Parallel in-application streams to create.
     * See Parallelism below for more details.
     * 
     */
    private UndeferrableValue<AnalyticsApplicationInputsParallelismArgs> parallelism;

    public AnalyticsApplicationInputsParallelismArgs parallelism() {
        if (parallelism == null) return null;
        return parallelism.getValue("AnalyticsApplicationInputsArgs.parallelism");
    }

    /**
     * The Processing Configuration to transform records as they are received from the stream.
     * See Processing Configuration below for more details.
     * 
     */
    private UndeferrableValue<AnalyticsApplicationInputsProcessingConfigurationArgs> processingConfiguration;

    public AnalyticsApplicationInputsProcessingConfigurationArgs processingConfiguration() {
        if (processingConfiguration == null) return null;
        return processingConfiguration.getValue("AnalyticsApplicationInputsArgs.processingConfiguration");
    }

    /**
     * The Schema format of the data in the streaming source. See Source Schema below for more details.
     * 
     */
    private UndeferrableValue<AnalyticsApplicationInputsSchemaArgs> schema;

    public AnalyticsApplicationInputsSchemaArgs schema() {
        if (schema == null) return null;
        return schema.getValue("AnalyticsApplicationInputsArgs.schema");
    }

    /**
     * The point at which the application starts processing records from the streaming source.
     * See Starting Position Configuration below for more details.
     * 
     */
    private UndeferrableValue<List<AnalyticsApplicationInputsStartingPositionConfigurationArgs>> startingPositionConfigurations;

    public List<AnalyticsApplicationInputsStartingPositionConfigurationArgs> startingPositionConfigurations() {
        if (startingPositionConfigurations == null) return null;
        return startingPositionConfigurations.getValue("AnalyticsApplicationInputsArgs.startingPositionConfigurations");
    }

    private UndeferrableValue<List<String>> streamNames;

    public List<String> streamNames() {
        if (streamNames == null) return null;
        return streamNames.getValue("AnalyticsApplicationInputsArgs.streamNames");
    }

}
