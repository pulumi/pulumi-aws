// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3control;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.s3control.outputs.StorageLensConfigurationStorageLensConfiguration;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:s3control/storageLensConfiguration:StorageLensConfiguration")
public final class StorageLensConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The AWS account ID for the S3 Storage Lens configuration. Defaults to automatically determined account ID of the AWS provider.
     * 
     */
    private UndeferrableValue<String> accountId;

    public String accountId() {
        if (accountId == null) return null;
        return accountId.getValue("StorageLensConfiguration.accountId");
    }

    /**
     * Amazon Resource Name (ARN) of the S3 Storage Lens configuration.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("StorageLensConfiguration.arn");
    }

    /**
     * The ID of the S3 Storage Lens configuration.
     * 
     */
    private UndeferrableValue<String> configId;

    public String configId() {
        if (configId == null) return null;
        return configId.getValue("StorageLensConfiguration.configId");
    }

    /**
     * The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
     * 
     */
    private UndeferrableValue<StorageLensConfigurationStorageLensConfiguration> storageLensConfiguration;

    public StorageLensConfigurationStorageLensConfiguration storageLensConfiguration() {
        if (storageLensConfiguration == null) return null;
        return storageLensConfiguration.getValue("StorageLensConfiguration.storageLensConfiguration");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("StorageLensConfiguration.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("StorageLensConfiguration.tagsAll");
    }

}
