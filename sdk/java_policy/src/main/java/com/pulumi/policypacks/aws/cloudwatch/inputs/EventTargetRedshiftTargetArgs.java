// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


public final class EventTargetRedshiftTargetArgs {

    /**
     * The name of the database.
     * 
     */
    @PolicyResourceProperty(name="database", flag="unknown_database")
    private String value_database;
    private boolean unknown_database;
    public String database() {
        if (!unknown_database) return value_database;
        throw new UndeferrableValueException("Value 'EventTargetRedshiftTargetArgs.database' is not present");
    }

    /**
     * The database user name.
     * 
     */
    @PolicyResourceProperty(name="dbUser", flag="unknown_dbUser")
    private String value_dbUser;
    private boolean unknown_dbUser;
    public String dbUser() {
        if (!unknown_dbUser) return value_dbUser;
        throw new UndeferrableValueException("Value 'EventTargetRedshiftTargetArgs.dbUser' is not present");
    }

    /**
     * The name or ARN of the secret that enables access to the database.
     * 
     */
    @PolicyResourceProperty(name="secretsManagerArn", flag="unknown_secretsManagerArn")
    private String value_secretsManagerArn;
    private boolean unknown_secretsManagerArn;
    public String secretsManagerArn() {
        if (!unknown_secretsManagerArn) return value_secretsManagerArn;
        throw new UndeferrableValueException("Value 'EventTargetRedshiftTargetArgs.secretsManagerArn' is not present");
    }

    /**
     * The SQL statement text to run.
     * 
     */
    @PolicyResourceProperty(name="sql", flag="unknown_sql")
    private String value_sql;
    private boolean unknown_sql;
    public String sql() {
        if (!unknown_sql) return value_sql;
        throw new UndeferrableValueException("Value 'EventTargetRedshiftTargetArgs.sql' is not present");
    }

    /**
     * The name of the SQL statement.
     * 
     */
    @PolicyResourceProperty(name="statementName", flag="unknown_statementName")
    private String value_statementName;
    private boolean unknown_statementName;
    public String statementName() {
        if (!unknown_statementName) return value_statementName;
        throw new UndeferrableValueException("Value 'EventTargetRedshiftTargetArgs.statementName' is not present");
    }

    /**
     * Indicates whether to send an event back to EventBridge after the SQL statement runs.
     * 
     */
    @PolicyResourceProperty(name="withEvent", flag="unknown_withEvent")
    private Boolean value_withEvent;
    private boolean unknown_withEvent;
    public Boolean withEvent() {
        if (!unknown_withEvent) return value_withEvent;
        throw new UndeferrableValueException("Value 'EventTargetRedshiftTargetArgs.withEvent' is not present");
    }

}
