// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudwatch.inputs.MetricAlarmMetricQueryArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudwatch/metricAlarm:MetricAlarm")
public final class MetricAlarmArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Indicates whether or not actions should be executed during any changes to the alarm&#39;s state. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> actionsEnabled;

    public Boolean actionsEnabled() {
        if (actionsEnabled == null) return null;
        return actionsEnabled.getValue("MetricAlarmArgs.actionsEnabled");
    }

    /**
     * The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     */
    private UndeferrableValue<List<String>> alarmActions;

    public List<String> alarmActions() {
        if (alarmActions == null) return null;
        return alarmActions.getValue("MetricAlarmArgs.alarmActions");
    }

    /**
     * The description for the alarm.
     * 
     */
    private UndeferrableValue<String> alarmDescription;

    public String alarmDescription() {
        if (alarmDescription == null) return null;
        return alarmDescription.getValue("MetricAlarmArgs.alarmDescription");
    }

    /**
     * The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`. Additionally, the values  `LessThanLowerOrGreaterThanUpperThreshold`, `LessThanLowerThreshold`, and `GreaterThanUpperThreshold` are used only for alarms based on anomaly detection models.
     * 
     */
    private UndeferrableValue<String> comparisonOperator;

    public String comparisonOperator() {
        if (comparisonOperator == null) return null;
        return comparisonOperator.getValue("MetricAlarmArgs.comparisonOperator");
    }

    /**
     * The number of datapoints that must be breaching to trigger the alarm.
     * 
     */
    private UndeferrableValue<Integer> datapointsToAlarm;

    public Integer datapointsToAlarm() {
        if (datapointsToAlarm == null) return null;
        return datapointsToAlarm.getValue("MetricAlarmArgs.datapointsToAlarm");
    }

    /**
     * The dimensions for the alarm&#39;s associated metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     * 
     */
    private UndeferrableValue<Map<String,String>> dimensions;

    public Map<String,String> dimensions() {
        if (dimensions == null) return null;
        return dimensions.getValue("MetricAlarmArgs.dimensions");
    }

    /**
     * Used only for alarms based on percentiles.
     * If you specify `ignore`, the alarm state will not change during periods with too few data points to be statistically significant.
     * If you specify `evaluate` or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available.
     * The following values are supported: `ignore`, and `evaluate`.
     * 
     */
    private UndeferrableValue<String> evaluateLowSampleCountPercentiles;

    public String evaluateLowSampleCountPercentiles() {
        if (evaluateLowSampleCountPercentiles == null) return null;
        return evaluateLowSampleCountPercentiles.getValue("MetricAlarmArgs.evaluateLowSampleCountPercentiles");
    }

    /**
     * The number of periods over which data is compared to the specified threshold.
     * 
     */
    private UndeferrableValue<Integer> evaluationPeriods;

    public Integer evaluationPeriods() {
        if (evaluationPeriods == null) return null;
        return evaluationPeriods.getValue("MetricAlarmArgs.evaluationPeriods");
    }

    /**
     * The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
     * 
     */
    private UndeferrableValue<String> extendedStatistic;

    public String extendedStatistic() {
        if (extendedStatistic == null) return null;
        return extendedStatistic.getValue("MetricAlarmArgs.extendedStatistic");
    }

    /**
     * The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     */
    private UndeferrableValue<List<String>> insufficientDataActions;

    public List<String> insufficientDataActions() {
        if (insufficientDataActions == null) return null;
        return insufficientDataActions.getValue("MetricAlarmArgs.insufficientDataActions");
    }

    /**
     * The name for the alarm&#39;s associated metric.
     * See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     * 
     */
    private UndeferrableValue<String> metricName;

    public String metricName() {
        if (metricName == null) return null;
        return metricName.getValue("MetricAlarmArgs.metricName");
    }

    /**
     * Enables you to create an alarm based on a metric math expression. You may specify at most 20.
     * 
     */
    private UndeferrableValue<List<MetricAlarmMetricQueryArgs>> metricQueries;

    public List<MetricAlarmMetricQueryArgs> metricQueries() {
        if (metricQueries == null) return null;
        return metricQueries.getValue("MetricAlarmArgs.metricQueries");
    }

    /**
     * The descriptive name for the alarm. This name must be unique within the user&#39;s AWS account
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("MetricAlarmArgs.name");
    }

    /**
     * The namespace for the alarm&#39;s associated metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
     * See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     * 
     */
    private UndeferrableValue<String> namespace;

    public String namespace() {
        if (namespace == null) return null;
        return namespace.getValue("MetricAlarmArgs.namespace");
    }

    /**
     * The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     */
    private UndeferrableValue<List<String>> okActions;

    public List<String> okActions() {
        if (okActions == null) return null;
        return okActions.getValue("MetricAlarmArgs.okActions");
    }

    /**
     * The period in seconds over which the specified `statistic` is applied.
     * Valid values are `10`, `30`, or any multiple of `60`.
     * 
     */
    private UndeferrableValue<Integer> period;

    public Integer period() {
        if (period == null) return null;
        return period.getValue("MetricAlarmArgs.period");
    }

    /**
     * The statistic to apply to the alarm&#39;s associated metric.
     * Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
     * 
     */
    private UndeferrableValue<String> statistic;

    public String statistic() {
        if (statistic == null) return null;
        return statistic.getValue("MetricAlarmArgs.statistic");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * &gt; **NOTE:**  If you specify at least one `metric_query`, you may not specify a `metric_name`, `namespace`, `period` or `statistic`. If you do not specify a `metric_query`, you must specify each of these (although you may use `extended_statistic` instead of `statistic`).
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("MetricAlarmArgs.tags");
    }

    /**
     * The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
     * 
     */
    private UndeferrableValue<Double> threshold;

    public Double threshold() {
        if (threshold == null) return null;
        return threshold.getValue("MetricAlarmArgs.threshold");
    }

    /**
     * If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
     * 
     */
    private UndeferrableValue<String> thresholdMetricId;

    public String thresholdMetricId() {
        if (thresholdMetricId == null) return null;
        return thresholdMetricId.getValue("MetricAlarmArgs.thresholdMetricId");
    }

    /**
     * Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
     * 
     */
    private UndeferrableValue<String> treatMissingData;

    public String treatMissingData() {
        if (treatMissingData == null) return null;
        return treatMissingData.getValue("MetricAlarmArgs.treatMissingData");
    }

    /**
     * The unit for the alarm&#39;s associated metric.
     * 
     */
    private UndeferrableValue<String> unit;

    public String unit() {
        if (unit == null) return null;
        return unit.getValue("MetricAlarmArgs.unit");
    }

}
