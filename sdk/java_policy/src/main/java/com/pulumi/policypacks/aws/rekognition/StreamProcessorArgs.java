// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rekognition;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.rekognition.inputs.StreamProcessorDataSharingPreferenceArgs;
import com.pulumi.policypacks.aws.rekognition.inputs.StreamProcessorInputArgs;
import com.pulumi.policypacks.aws.rekognition.inputs.StreamProcessorNotificationChannelArgs;
import com.pulumi.policypacks.aws.rekognition.inputs.StreamProcessorOutputArgs;
import com.pulumi.policypacks.aws.rekognition.inputs.StreamProcessorRegionsOfInterestArgs;
import com.pulumi.policypacks.aws.rekognition.inputs.StreamProcessorSettingsArgs;
import com.pulumi.policypacks.aws.rekognition.inputs.StreamProcessorTimeoutsArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rekognition/streamProcessor:StreamProcessor")
public final class StreamProcessorArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * See `data_sharing_preference`.
     * 
     */
    private UndeferrableValue<StreamProcessorDataSharingPreferenceArgs> dataSharingPreference;

    public StreamProcessorDataSharingPreferenceArgs dataSharingPreference() {
        if (dataSharingPreference == null) return null;
        return dataSharingPreference.getValue("StreamProcessorArgs.dataSharingPreference");
    }

    /**
     * Input video stream. See `input`.
     * 
     */
    private UndeferrableValue<StreamProcessorInputArgs> input;

    public StreamProcessorInputArgs input() {
        if (input == null) return null;
        return input.getValue("StreamProcessorArgs.input");
    }

    /**
     * Optional parameter for label detection stream processors.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("StreamProcessorArgs.kmsKeyId");
    }

    /**
     * The name of the Stream Processor.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("StreamProcessorArgs.name");
    }

    /**
     * The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See `notification_channel`.
     * 
     */
    private UndeferrableValue<StreamProcessorNotificationChannelArgs> notificationChannel;

    public StreamProcessorNotificationChannelArgs notificationChannel() {
        if (notificationChannel == null) return null;
        return notificationChannel.getValue("StreamProcessorArgs.notificationChannel");
    }

    /**
     * Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See `output`.
     * 
     */
    private UndeferrableValue<StreamProcessorOutputArgs> output;

    public StreamProcessorOutputArgs output() {
        if (output == null) return null;
        return output.getValue("StreamProcessorArgs.output");
    }

    /**
     * Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regions_of_interest`.
     * 
     */
    private UndeferrableValue<List<StreamProcessorRegionsOfInterestArgs>> regionsOfInterests;

    public List<StreamProcessorRegionsOfInterestArgs> regionsOfInterests() {
        if (regionsOfInterests == null) return null;
        return regionsOfInterests.getValue("StreamProcessorArgs.regionsOfInterests");
    }

    /**
     * The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("StreamProcessorArgs.roleArn");
    }

    /**
     * Input parameters used in a streaming video analyzed by a stream processor. See `settings`.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<StreamProcessorSettingsArgs> settings;

    public StreamProcessorSettingsArgs settings() {
        if (settings == null) return null;
        return settings.getValue("StreamProcessorArgs.settings");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("StreamProcessorArgs.tags");
    }

    private UndeferrableValue<StreamProcessorTimeoutsArgs> timeouts;

    public StreamProcessorTimeoutsArgs timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("StreamProcessorArgs.timeouts");
    }

}
