// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudfront;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudfront.inputs.CachePolicyParametersInCacheKeyAndForwardedToOriginArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudfront/cachePolicy:CachePolicy")
public final class CachePolicyArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Description for the cache policy.
     * 
     */
    private UndeferrableValue<String> comment;

    public String comment() {
        if (comment == null) return null;
        return comment.getValue("CachePolicyArgs.comment");
    }

    /**
     * Amount of time, in seconds, that objects are allowed to remain in the CloudFront cache before CloudFront sends a new request to the origin server to check if the object has been updated.
     * 
     */
    private UndeferrableValue<Integer> defaultTtl;

    public Integer defaultTtl() {
        if (defaultTtl == null) return null;
        return defaultTtl.getValue("CachePolicyArgs.defaultTtl");
    }

    /**
     * Maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
     * 
     */
    private UndeferrableValue<Integer> maxTtl;

    public Integer maxTtl() {
        if (maxTtl == null) return null;
        return maxTtl.getValue("CachePolicyArgs.maxTtl");
    }

    /**
     * Minimum amount of time, in seconds, that objects should remain in the CloudFront cache before a new request is sent to the origin to check for updates.
     * 
     */
    private UndeferrableValue<Integer> minTtl;

    public Integer minTtl() {
        if (minTtl == null) return null;
        return minTtl.getValue("CachePolicyArgs.minTtl");
    }

    /**
     * Unique name used to identify the cache policy.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("CachePolicyArgs.name");
    }

    /**
     * Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
     * 
     */
    private UndeferrableValue<CachePolicyParametersInCacheKeyAndForwardedToOriginArgs> parametersInCacheKeyAndForwardedToOrigin;

    public CachePolicyParametersInCacheKeyAndForwardedToOriginArgs parametersInCacheKeyAndForwardedToOrigin() {
        if (parametersInCacheKeyAndForwardedToOrigin == null) return null;
        return parametersInCacheKeyAndForwardedToOrigin.getValue("CachePolicyArgs.parametersInCacheKeyAndForwardedToOrigin");
    }

}
