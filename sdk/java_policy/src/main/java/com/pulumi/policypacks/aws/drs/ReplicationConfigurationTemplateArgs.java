// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.drs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.drs.inputs.ReplicationConfigurationTemplatePitPolicyArgs;
import com.pulumi.policypacks.aws.drs.inputs.ReplicationConfigurationTemplateTimeoutsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:drs/replicationConfigurationTemplate:ReplicationConfigurationTemplate")
public final class ReplicationConfigurationTemplateArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.
     * 
     */
    @PolicyResourceProperty(name="associateDefaultSecurityGroup", flag="unknown_associateDefaultSecurityGroup")
    private Boolean value_associateDefaultSecurityGroup;
    private boolean unknown_associateDefaultSecurityGroup;
    public Boolean associateDefaultSecurityGroup() {
        if (!unknown_associateDefaultSecurityGroup) return value_associateDefaultSecurityGroup;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.associateDefaultSecurityGroup' is not present");
    }

    /**
     * Whether to allow the AWS replication agent to automatically replicate newly added disks.
     * 
     */
    @PolicyResourceProperty(name="autoReplicateNewDisks", flag="unknown_autoReplicateNewDisks")
    private Boolean value_autoReplicateNewDisks;
    private boolean unknown_autoReplicateNewDisks;
    public Boolean autoReplicateNewDisks() {
        if (!unknown_autoReplicateNewDisks) return value_autoReplicateNewDisks;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.autoReplicateNewDisks' is not present");
    }

    /**
     * Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
     * 
     */
    @PolicyResourceProperty(name="bandwidthThrottling", flag="unknown_bandwidthThrottling")
    private Integer value_bandwidthThrottling;
    private boolean unknown_bandwidthThrottling;
    public Integer bandwidthThrottling() {
        if (!unknown_bandwidthThrottling) return value_bandwidthThrottling;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.bandwidthThrottling' is not present");
    }

    /**
     * Whether to create a Public IP for the Recovery Instance by default.
     * 
     */
    @PolicyResourceProperty(name="createPublicIp", flag="unknown_createPublicIp")
    private Boolean value_createPublicIp;
    private boolean unknown_createPublicIp;
    public Boolean createPublicIp() {
        if (!unknown_createPublicIp) return value_createPublicIp;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.createPublicIp' is not present");
    }

    /**
     * Data plane routing mechanism that will be used for replication. Valid values are `PUBLIC_IP` and `PRIVATE_IP`.
     * 
     */
    @PolicyResourceProperty(name="dataPlaneRouting", flag="unknown_dataPlaneRouting")
    private String value_dataPlaneRouting;
    private boolean unknown_dataPlaneRouting;
    public String dataPlaneRouting() {
        if (!unknown_dataPlaneRouting) return value_dataPlaneRouting;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.dataPlaneRouting' is not present");
    }

    /**
     * Staging Disk EBS volume type to be used during replication. Valid values are `GP2`, `GP3`, `ST1`, or `AUTO`.
     * 
     */
    @PolicyResourceProperty(name="defaultLargeStagingDiskType", flag="unknown_defaultLargeStagingDiskType")
    private String value_defaultLargeStagingDiskType;
    private boolean unknown_defaultLargeStagingDiskType;
    public String defaultLargeStagingDiskType() {
        if (!unknown_defaultLargeStagingDiskType) return value_defaultLargeStagingDiskType;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.defaultLargeStagingDiskType' is not present");
    }

    /**
     * Type of EBS encryption to be used during replication. Valid values are `DEFAULT` and `CUSTOM`.
     * 
     */
    @PolicyResourceProperty(name="ebsEncryption", flag="unknown_ebsEncryption")
    private String value_ebsEncryption;
    private boolean unknown_ebsEncryption;
    public String ebsEncryption() {
        if (!unknown_ebsEncryption) return value_ebsEncryption;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.ebsEncryption' is not present");
    }

    /**
     * ARN of the EBS encryption key to be used during replication.
     * 
     */
    @PolicyResourceProperty(name="ebsEncryptionKeyArn", flag="unknown_ebsEncryptionKeyArn")
    private String value_ebsEncryptionKeyArn;
    private boolean unknown_ebsEncryptionKeyArn;
    public String ebsEncryptionKeyArn() {
        if (!unknown_ebsEncryptionKeyArn) return value_ebsEncryptionKeyArn;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.ebsEncryptionKeyArn' is not present");
    }

    /**
     * Configuration block for Point in time (PIT) policy to manage snapshots taken during replication. See below.
     * 
     */
    @PolicyResourceProperty(name="pitPolicies", flag="unknown_pitPolicies")
    private List<ReplicationConfigurationTemplatePitPolicyArgs> value_pitPolicies;
    private boolean unknown_pitPolicies;
    public List<ReplicationConfigurationTemplatePitPolicyArgs> pitPolicies() {
        if (!unknown_pitPolicies) return value_pitPolicies;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.pitPolicies' is not present");
    }

    /**
     * Instance type to be used for the replication server.
     * 
     */
    @PolicyResourceProperty(name="replicationServerInstanceType", flag="unknown_replicationServerInstanceType")
    private String value_replicationServerInstanceType;
    private boolean unknown_replicationServerInstanceType;
    public String replicationServerInstanceType() {
        if (!unknown_replicationServerInstanceType) return value_replicationServerInstanceType;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.replicationServerInstanceType' is not present");
    }

    /**
     * Security group IDs that will be used by the replication server.
     * 
     */
    @PolicyResourceProperty(name="replicationServersSecurityGroupsIds", flag="unknown_replicationServersSecurityGroupsIds")
    private List<String> value_replicationServersSecurityGroupsIds;
    private boolean unknown_replicationServersSecurityGroupsIds;
    public List<String> replicationServersSecurityGroupsIds() {
        if (!unknown_replicationServersSecurityGroupsIds) return value_replicationServersSecurityGroupsIds;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.replicationServersSecurityGroupsIds' is not present");
    }

    /**
     * Subnet to be used by the replication staging area.
     * 
     */
    @PolicyResourceProperty(name="stagingAreaSubnetId", flag="unknown_stagingAreaSubnetId")
    private String value_stagingAreaSubnetId;
    private boolean unknown_stagingAreaSubnetId;
    public String stagingAreaSubnetId() {
        if (!unknown_stagingAreaSubnetId) return value_stagingAreaSubnetId;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.stagingAreaSubnetId' is not present");
    }

    /**
     * Set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
     * 
     */
    @PolicyResourceProperty(name="stagingAreaTags", flag="unknown_stagingAreaTags")
    private Map<String,String> value_stagingAreaTags;
    private boolean unknown_stagingAreaTags;
    public Map<String,String> stagingAreaTags() {
        if (!unknown_stagingAreaTags) return value_stagingAreaTags;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.stagingAreaTags' is not present");
    }

    /**
     * Set of tags to be associated with the Replication Configuration Template resource.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.tags' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private ReplicationConfigurationTemplateTimeoutsArgs value_timeouts;
    private boolean unknown_timeouts;
    public ReplicationConfigurationTemplateTimeoutsArgs timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.timeouts' is not present");
    }

    /**
     * Whether to use a dedicated Replication Server in the replication staging area.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="useDedicatedReplicationServer", flag="unknown_useDedicatedReplicationServer")
    private Boolean value_useDedicatedReplicationServer;
    private boolean unknown_useDedicatedReplicationServer;
    public Boolean useDedicatedReplicationServer() {
        if (!unknown_useDedicatedReplicationServer) return value_useDedicatedReplicationServer;
        throw new UndeferrableValueException("Value 'ReplicationConfigurationTemplateArgs.useDedicatedReplicationServer' is not present");
    }

}
