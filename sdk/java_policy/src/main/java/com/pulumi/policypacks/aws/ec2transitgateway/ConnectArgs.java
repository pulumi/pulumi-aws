// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2transitgateway;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2transitgateway/connect:Connect")
public final class ConnectArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The tunnel protocol. Valid values: `gre`. Default is `gre`.
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'ConnectArgs.protocol' is not present");
    }

    /**
     * Key-value tags for the EC2 Transit Gateway Connect. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ConnectArgs.tags' is not present");
    }

    /**
     * Boolean whether the Connect should be associated with the EC2 Transit Gateway association default route table. This cannot be configured or perform drift detection with Resource Access Manager shared EC2 Transit Gateways. Default value: `true`.
     * 
     */
    @PolicyResourceProperty(name="transitGatewayDefaultRouteTableAssociation", flag="unknown_transitGatewayDefaultRouteTableAssociation")
    private Boolean value_transitGatewayDefaultRouteTableAssociation;
    private boolean unknown_transitGatewayDefaultRouteTableAssociation;
    public Boolean transitGatewayDefaultRouteTableAssociation() {
        if (!unknown_transitGatewayDefaultRouteTableAssociation) return value_transitGatewayDefaultRouteTableAssociation;
        throw new UndeferrableValueException("Value 'ConnectArgs.transitGatewayDefaultRouteTableAssociation' is not present");
    }

    /**
     * Boolean whether the Connect should propagate routes with the EC2 Transit Gateway propagation default route table. This cannot be configured or perform drift detection with Resource Access Manager shared EC2 Transit Gateways. Default value: `true`.
     * 
     */
    @PolicyResourceProperty(name="transitGatewayDefaultRouteTablePropagation", flag="unknown_transitGatewayDefaultRouteTablePropagation")
    private Boolean value_transitGatewayDefaultRouteTablePropagation;
    private boolean unknown_transitGatewayDefaultRouteTablePropagation;
    public Boolean transitGatewayDefaultRouteTablePropagation() {
        if (!unknown_transitGatewayDefaultRouteTablePropagation) return value_transitGatewayDefaultRouteTablePropagation;
        throw new UndeferrableValueException("Value 'ConnectArgs.transitGatewayDefaultRouteTablePropagation' is not present");
    }

    /**
     * Identifier of EC2 Transit Gateway.
     * 
     */
    @PolicyResourceProperty(name="transitGatewayId", flag="unknown_transitGatewayId")
    private String value_transitGatewayId;
    private boolean unknown_transitGatewayId;
    public String transitGatewayId() {
        if (!unknown_transitGatewayId) return value_transitGatewayId;
        throw new UndeferrableValueException("Value 'ConnectArgs.transitGatewayId' is not present");
    }

    /**
     * The underlaying VPC attachment
     * 
     */
    @PolicyResourceProperty(name="transportAttachmentId", flag="unknown_transportAttachmentId")
    private String value_transportAttachmentId;
    private boolean unknown_transportAttachmentId;
    public String transportAttachmentId() {
        if (!unknown_transportAttachmentId) return value_transportAttachmentId;
        throw new UndeferrableValueException("Value 'ConnectArgs.transportAttachmentId' is not present");
    }

}
