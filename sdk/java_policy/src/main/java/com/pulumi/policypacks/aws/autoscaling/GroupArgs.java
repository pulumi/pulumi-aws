// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.autoscaling.enums.MetricsGranularity;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupAvailabilityZoneDistributionArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupInitialLifecycleHookArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupInstanceMaintenancePolicyArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupInstanceRefreshArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupLaunchTemplateArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupMixedInstancesPolicyArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupTagArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupTrafficSourceArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupWarmPoolArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:autoscaling/group:Group")
public final class GroupArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The instance capacity distribution across Availability Zones. See Availability Zone Distribution below for more details.
     * 
     */
    private UndeferrableValue<GroupAvailabilityZoneDistributionArgs> availabilityZoneDistribution;

    public GroupAvailabilityZoneDistributionArgs availabilityZoneDistribution() {
        if (availabilityZoneDistribution == null) return null;
        return availabilityZoneDistribution.getValue("GroupArgs.availabilityZoneDistribution");
    }

    /**
     * A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpc_zone_identifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpc_zone_identifier`.
     * 
     */
    private UndeferrableValue<List<String>> availabilityZones;

    public List<String> availabilityZones() {
        if (availabilityZones == null) return null;
        return availabilityZones.getValue("GroupArgs.availabilityZones");
    }

    /**
     * Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
     * 
     */
    private UndeferrableValue<Boolean> capacityRebalance;

    public Boolean capacityRebalance() {
        if (capacityRebalance == null) return null;
        return capacityRebalance.getValue("GroupArgs.capacityRebalance");
    }

    /**
     * Reserved.
     * 
     */
    private UndeferrableValue<String> context;

    public String context() {
        if (context == null) return null;
        return context.getValue("GroupArgs.context");
    }

    /**
     * Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
     * 
     */
    private UndeferrableValue<Integer> defaultCooldown;

    public Integer defaultCooldown() {
        if (defaultCooldown == null) return null;
        return defaultCooldown.getValue("GroupArgs.defaultCooldown");
    }

    /**
     * Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
     * 
     */
    private UndeferrableValue<Integer> defaultInstanceWarmup;

    public Integer defaultInstanceWarmup() {
        if (defaultInstanceWarmup == null) return null;
        return defaultInstanceWarmup.getValue("GroupArgs.defaultInstanceWarmup");
    }

    /**
     * Number of Amazon EC2 instances that
     * should be running in the group. (See also Waiting for
     * Capacity below.)
     * 
     */
    private UndeferrableValue<Integer> desiredCapacity;

    public Integer desiredCapacity() {
        if (desiredCapacity == null) return null;
        return desiredCapacity.getValue("GroupArgs.desiredCapacity");
    }

    /**
     * The unit of measurement for the value specified for `desired_capacity`. Supported for attribute-based instance type selection only. Valid values: `&#34;units&#34;`, `&#34;vcpu&#34;`, `&#34;memory-mib&#34;`.
     * 
     */
    private UndeferrableValue<String> desiredCapacityType;

    public String desiredCapacityType() {
        if (desiredCapacityType == null) return null;
        return desiredCapacityType.getValue("GroupArgs.desiredCapacityType");
    }

    /**
     * List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
     * 
     */
    private UndeferrableValue<List<String>> enabledMetrics;

    public List<String> enabledMetrics() {
        if (enabledMetrics == null) return null;
        return enabledMetrics.getValue("GroupArgs.enabledMetrics");
    }

    /**
     * Allows deleting the Auto Scaling Group without waiting
     * for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
     * even if it&#39;s in the process of scaling a resource. Normally, this provider
     * drains all the instances before deleting the group. This bypasses that
     * behavior and potentially leaves resources dangling.
     * 
     */
    private UndeferrableValue<Boolean> forceDelete;

    public Boolean forceDelete() {
        if (forceDelete == null) return null;
        return forceDelete.getValue("GroupArgs.forceDelete");
    }

    /**
     * Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
     * 
     */
    private UndeferrableValue<Boolean> forceDeleteWarmPool;

    public Boolean forceDeleteWarmPool() {
        if (forceDeleteWarmPool == null) return null;
        return forceDeleteWarmPool.getValue("GroupArgs.forceDeleteWarmPool");
    }

    /**
     * Time (in seconds) after instance comes into service before checking health.
     * 
     */
    private UndeferrableValue<Integer> healthCheckGracePeriod;

    public Integer healthCheckGracePeriod() {
        if (healthCheckGracePeriod == null) return null;
        return healthCheckGracePeriod.getValue("GroupArgs.healthCheckGracePeriod");
    }

    /**
     * &#34;EC2&#34; or &#34;ELB&#34;. Controls how health checking is done.
     * 
     */
    private UndeferrableValue<String> healthCheckType;

    public String healthCheckType() {
        if (healthCheckType == null) return null;
        return healthCheckType.getValue("GroupArgs.healthCheckType");
    }

    /**
     * Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
     * 
     */
    private UndeferrableValue<Boolean> ignoreFailedScalingActivities;

    public Boolean ignoreFailedScalingActivities() {
        if (ignoreFailedScalingActivities == null) return null;
        return ignoreFailedScalingActivities.getValue("GroupArgs.ignoreFailedScalingActivities");
    }

    /**
     * One or more
     * [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
     * to attach to the Auto Scaling Group **before** instances are launched. The
     * syntax is exactly the same as the separate
     * `aws.autoscaling.LifecycleHook`
     * resource, without the `autoscaling_group_name` attribute. Please note that this will only work when creating
     * a new Auto Scaling Group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.
     * 
     */
    private UndeferrableValue<List<GroupInitialLifecycleHookArgs>> initialLifecycleHooks;

    public List<GroupInitialLifecycleHookArgs> initialLifecycleHooks() {
        if (initialLifecycleHooks == null) return null;
        return initialLifecycleHooks.getValue("GroupArgs.initialLifecycleHooks");
    }

    /**
     * If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
     * 
     */
    private UndeferrableValue<GroupInstanceMaintenancePolicyArgs> instanceMaintenancePolicy;

    public GroupInstanceMaintenancePolicyArgs instanceMaintenancePolicy() {
        if (instanceMaintenancePolicy == null) return null;
        return instanceMaintenancePolicy.getValue("GroupArgs.instanceMaintenancePolicy");
    }

    /**
     * If this block is configured, start an
     * [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
     * when this Auto Scaling Group is updated. Defined below.
     * 
     */
    private UndeferrableValue<GroupInstanceRefreshArgs> instanceRefresh;

    public GroupInstanceRefreshArgs instanceRefresh() {
        if (instanceRefresh == null) return null;
        return instanceRefresh.getValue("GroupArgs.instanceRefresh");
    }

    /**
     * Name of the launch configuration to use.
     * 
     */
    private UndeferrableValue<String> launchConfiguration;

    public String launchConfiguration() {
        if (launchConfiguration == null) return null;
        return launchConfiguration.getValue("GroupArgs.launchConfiguration");
    }

    /**
     * Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
     * 
     */
    private UndeferrableValue<GroupLaunchTemplateArgs> launchTemplate;

    public GroupLaunchTemplateArgs launchTemplate() {
        if (launchTemplate == null) return null;
        return launchTemplate.getValue("GroupArgs.launchTemplate");
    }

    /**
     * List of elastic load balancer names to add to the autoscaling
     * group names. Only valid for classic load balancers. For ALBs, use `target_group_arns` instead. To remove all load balancer attachments an empty list should be specified.
     * 
     */
    private UndeferrableValue<List<String>> loadBalancers;

    public List<String> loadBalancers() {
        if (loadBalancers == null) return null;
        return loadBalancers.getValue("GroupArgs.loadBalancers");
    }

    /**
     * Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
     * 
     */
    private UndeferrableValue<Integer> maxInstanceLifetime;

    public Integer maxInstanceLifetime() {
        if (maxInstanceLifetime == null) return null;
        return maxInstanceLifetime.getValue("GroupArgs.maxInstanceLifetime");
    }

    /**
     * Maximum size of the Auto Scaling Group.
     * 
     */
    private UndeferrableValue<Integer> maxSize;

    public Integer maxSize() {
        if (maxSize == null) return null;
        return maxSize.getValue("GroupArgs.maxSize");
    }

    /**
     * Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
     * 
     */
    private UndeferrableValue<String> metricsGranularity;

    public String metricsGranularity() {
        if (metricsGranularity == null) return null;
        return metricsGranularity.getValue("GroupArgs.metricsGranularity");
    }

    /**
     * Setting this causes Pulumi to wait for
     * this number of instances from this Auto Scaling Group to show up healthy in the
     * ELB only on creation. Updates will not wait on ELB instance number changes.
     * (See also Waiting for Capacity below.)
     * 
     */
    private UndeferrableValue<Integer> minElbCapacity;

    public Integer minElbCapacity() {
        if (minElbCapacity == null) return null;
        return minElbCapacity.getValue("GroupArgs.minElbCapacity");
    }

    /**
     * Minimum size of the Auto Scaling Group.
     * (See also Waiting for Capacity below.)
     * 
     */
    private UndeferrableValue<Integer> minSize;

    public Integer minSize() {
        if (minSize == null) return null;
        return minSize.getValue("GroupArgs.minSize");
    }

    /**
     * Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
     * 
     */
    private UndeferrableValue<GroupMixedInstancesPolicyArgs> mixedInstancesPolicy;

    public GroupMixedInstancesPolicyArgs mixedInstancesPolicy() {
        if (mixedInstancesPolicy == null) return null;
        return mixedInstancesPolicy.getValue("GroupArgs.mixedInstancesPolicy");
    }

    /**
     * Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `name_prefix`.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("GroupArgs.name");
    }

    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     * 
     */
    private UndeferrableValue<String> namePrefix;

    public String namePrefix() {
        if (namePrefix == null) return null;
        return namePrefix.getValue("GroupArgs.namePrefix");
    }

    /**
     * Name of the placement group into which you&#39;ll launch your instances, if any.
     * 
     */
    private UndeferrableValue<String> placementGroup;

    public String placementGroup() {
        if (placementGroup == null) return null;
        return placementGroup.getValue("GroupArgs.placementGroup");
    }

    /**
     * Whether newly launched instances
     * are automatically protected from termination by Amazon EC2 Auto Scaling when
     * scaling in. For more information about preventing instances from terminating
     * on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
     * in the Amazon EC2 Auto Scaling User Guide.
     * 
     */
    private UndeferrableValue<Boolean> protectFromScaleIn;

    public Boolean protectFromScaleIn() {
        if (protectFromScaleIn == null) return null;
        return protectFromScaleIn.getValue("GroupArgs.protectFromScaleIn");
    }

    /**
     * ARN of the service-linked role that the ASG will use to call other AWS services
     * 
     */
    private UndeferrableValue<String> serviceLinkedRoleArn;

    public String serviceLinkedRoleArn() {
        if (serviceLinkedRoleArn == null) return null;
        return serviceLinkedRoleArn.getValue("GroupArgs.serviceLinkedRoleArn");
    }

    /**
     * List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
     * Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
     * 
     */
    private UndeferrableValue<List<String>> suspendedProcesses;

    public List<String> suspendedProcesses() {
        if (suspendedProcesses == null) return null;
        return suspendedProcesses.getValue("GroupArgs.suspendedProcesses");
    }

    /**
     * Configuration block(s) containing resource tags. See Tag below for more details.
     * 
     */
    private UndeferrableValue<List<GroupTagArgs>> tags;

    public List<GroupTagArgs> tags() {
        if (tags == null) return null;
        return tags.getValue("GroupArgs.tags");
    }

    /**
     * Set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
     * 
     */
    private UndeferrableValue<List<String>> targetGroupArns;

    public List<String> targetGroupArns() {
        if (targetGroupArns == null) return null;
        return targetGroupArns.getValue("GroupArgs.targetGroupArns");
    }

    /**
     * List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
     * 
     */
    private UndeferrableValue<List<String>> terminationPolicies;

    public List<String> terminationPolicies() {
        if (terminationPolicies == null) return null;
        return terminationPolicies.getValue("GroupArgs.terminationPolicies");
    }

    /**
     * Attaches one or more traffic sources to the specified Auto Scaling group.
     * 
     */
    private UndeferrableValue<List<GroupTrafficSourceArgs>> trafficSources;

    public List<GroupTrafficSourceArgs> trafficSources() {
        if (trafficSources == null) return null;
        return trafficSources.getValue("GroupArgs.trafficSources");
    }

    /**
     * List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availability_zones`.
     * 
     */
    private UndeferrableValue<List<String>> vpcZoneIdentifiers;

    public List<String> vpcZoneIdentifiers() {
        if (vpcZoneIdentifiers == null) return null;
        return vpcZoneIdentifiers.getValue("GroupArgs.vpcZoneIdentifiers");
    }

    /**
     * Maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
     * wait for ASG instances to be healthy before timing out. (See also Waiting
     * for Capacity below.) Setting this to &#34;0&#34; causes
     * the provider to skip all Capacity Waiting behavior.
     * 
     */
    private UndeferrableValue<String> waitForCapacityTimeout;

    public String waitForCapacityTimeout() {
        if (waitForCapacityTimeout == null) return null;
        return waitForCapacityTimeout.getValue("GroupArgs.waitForCapacityTimeout");
    }

    /**
     * Setting this will cause Pulumi to wait
     * for exactly this number of healthy instances from this Auto Scaling Group in
     * all attached load balancers on both create and update operations. (Takes
     * precedence over `min_elb_capacity` behavior.)
     * (See also Waiting for Capacity below.)
     * 
     */
    private UndeferrableValue<Integer> waitForElbCapacity;

    public Integer waitForElbCapacity() {
        if (waitForElbCapacity == null) return null;
        return waitForElbCapacity.getValue("GroupArgs.waitForElbCapacity");
    }

    /**
     * If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
     * to the specified Auto Scaling group. Defined below
     * 
     */
    private UndeferrableValue<GroupWarmPoolArgs> warmPool;

    public GroupWarmPoolArgs warmPool() {
        if (warmPool == null) return null;
        return warmPool.getValue("GroupArgs.warmPool");
    }

}
