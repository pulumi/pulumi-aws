// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.autoscaling.enums.MetricsGranularity;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupAvailabilityZoneDistributionArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupInitialLifecycleHookArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupInstanceMaintenancePolicyArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupInstanceRefreshArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupLaunchTemplateArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupMixedInstancesPolicyArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupTagArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupTrafficSourceArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.GroupWarmPoolArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:autoscaling/group:Group")
public final class GroupArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The instance capacity distribution across Availability Zones. See Availability Zone Distribution below for more details.
     * 
     */
    @PolicyResourceProperty(name="availabilityZoneDistribution", flag="unknown_availabilityZoneDistribution")
    private GroupAvailabilityZoneDistributionArgs value_availabilityZoneDistribution;
    private boolean unknown_availabilityZoneDistribution;
    public GroupAvailabilityZoneDistributionArgs availabilityZoneDistribution() {
        if (!unknown_availabilityZoneDistribution) return value_availabilityZoneDistribution;
        throw new UndeferrableValueException("Value 'GroupArgs.availabilityZoneDistribution' is not present");
    }

    /**
     * A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpc_zone_identifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpc_zone_identifier`.
     * 
     */
    @PolicyResourceProperty(name="availabilityZones", flag="unknown_availabilityZones")
    private List<String> value_availabilityZones;
    private boolean unknown_availabilityZones;
    public List<String> availabilityZones() {
        if (!unknown_availabilityZones) return value_availabilityZones;
        throw new UndeferrableValueException("Value 'GroupArgs.availabilityZones' is not present");
    }

    /**
     * Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
     * 
     */
    @PolicyResourceProperty(name="capacityRebalance", flag="unknown_capacityRebalance")
    private Boolean value_capacityRebalance;
    private boolean unknown_capacityRebalance;
    public Boolean capacityRebalance() {
        if (!unknown_capacityRebalance) return value_capacityRebalance;
        throw new UndeferrableValueException("Value 'GroupArgs.capacityRebalance' is not present");
    }

    /**
     * Reserved.
     * 
     */
    @PolicyResourceProperty(name="context", flag="unknown_context")
    private String value_context;
    private boolean unknown_context;
    public String context() {
        if (!unknown_context) return value_context;
        throw new UndeferrableValueException("Value 'GroupArgs.context' is not present");
    }

    /**
     * Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
     * 
     */
    @PolicyResourceProperty(name="defaultCooldown", flag="unknown_defaultCooldown")
    private Integer value_defaultCooldown;
    private boolean unknown_defaultCooldown;
    public Integer defaultCooldown() {
        if (!unknown_defaultCooldown) return value_defaultCooldown;
        throw new UndeferrableValueException("Value 'GroupArgs.defaultCooldown' is not present");
    }

    /**
     * Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
     * 
     */
    @PolicyResourceProperty(name="defaultInstanceWarmup", flag="unknown_defaultInstanceWarmup")
    private Integer value_defaultInstanceWarmup;
    private boolean unknown_defaultInstanceWarmup;
    public Integer defaultInstanceWarmup() {
        if (!unknown_defaultInstanceWarmup) return value_defaultInstanceWarmup;
        throw new UndeferrableValueException("Value 'GroupArgs.defaultInstanceWarmup' is not present");
    }

    /**
     * Number of Amazon EC2 instances that
     * should be running in the group. (See also Waiting for
     * Capacity below.)
     * 
     */
    @PolicyResourceProperty(name="desiredCapacity", flag="unknown_desiredCapacity")
    private Integer value_desiredCapacity;
    private boolean unknown_desiredCapacity;
    public Integer desiredCapacity() {
        if (!unknown_desiredCapacity) return value_desiredCapacity;
        throw new UndeferrableValueException("Value 'GroupArgs.desiredCapacity' is not present");
    }

    /**
     * The unit of measurement for the value specified for `desired_capacity`. Supported for attribute-based instance type selection only. Valid values: `&#34;units&#34;`, `&#34;vcpu&#34;`, `&#34;memory-mib&#34;`.
     * 
     */
    @PolicyResourceProperty(name="desiredCapacityType", flag="unknown_desiredCapacityType")
    private String value_desiredCapacityType;
    private boolean unknown_desiredCapacityType;
    public String desiredCapacityType() {
        if (!unknown_desiredCapacityType) return value_desiredCapacityType;
        throw new UndeferrableValueException("Value 'GroupArgs.desiredCapacityType' is not present");
    }

    /**
     * List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
     * 
     */
    @PolicyResourceProperty(name="enabledMetrics", flag="unknown_enabledMetrics")
    private List<String> value_enabledMetrics;
    private boolean unknown_enabledMetrics;
    public List<String> enabledMetrics() {
        if (!unknown_enabledMetrics) return value_enabledMetrics;
        throw new UndeferrableValueException("Value 'GroupArgs.enabledMetrics' is not present");
    }

    /**
     * Allows deleting the Auto Scaling Group without waiting
     * for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
     * even if it&#39;s in the process of scaling a resource. Normally, this provider
     * drains all the instances before deleting the group. This bypasses that
     * behavior and potentially leaves resources dangling.
     * 
     */
    @PolicyResourceProperty(name="forceDelete", flag="unknown_forceDelete")
    private Boolean value_forceDelete;
    private boolean unknown_forceDelete;
    public Boolean forceDelete() {
        if (!unknown_forceDelete) return value_forceDelete;
        throw new UndeferrableValueException("Value 'GroupArgs.forceDelete' is not present");
    }

    /**
     * Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
     * 
     */
    @PolicyResourceProperty(name="forceDeleteWarmPool", flag="unknown_forceDeleteWarmPool")
    private Boolean value_forceDeleteWarmPool;
    private boolean unknown_forceDeleteWarmPool;
    public Boolean forceDeleteWarmPool() {
        if (!unknown_forceDeleteWarmPool) return value_forceDeleteWarmPool;
        throw new UndeferrableValueException("Value 'GroupArgs.forceDeleteWarmPool' is not present");
    }

    /**
     * Time (in seconds) after instance comes into service before checking health.
     * 
     */
    @PolicyResourceProperty(name="healthCheckGracePeriod", flag="unknown_healthCheckGracePeriod")
    private Integer value_healthCheckGracePeriod;
    private boolean unknown_healthCheckGracePeriod;
    public Integer healthCheckGracePeriod() {
        if (!unknown_healthCheckGracePeriod) return value_healthCheckGracePeriod;
        throw new UndeferrableValueException("Value 'GroupArgs.healthCheckGracePeriod' is not present");
    }

    /**
     * &#34;EC2&#34; or &#34;ELB&#34;. Controls how health checking is done.
     * 
     */
    @PolicyResourceProperty(name="healthCheckType", flag="unknown_healthCheckType")
    private String value_healthCheckType;
    private boolean unknown_healthCheckType;
    public String healthCheckType() {
        if (!unknown_healthCheckType) return value_healthCheckType;
        throw new UndeferrableValueException("Value 'GroupArgs.healthCheckType' is not present");
    }

    /**
     * Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
     * 
     */
    @PolicyResourceProperty(name="ignoreFailedScalingActivities", flag="unknown_ignoreFailedScalingActivities")
    private Boolean value_ignoreFailedScalingActivities;
    private boolean unknown_ignoreFailedScalingActivities;
    public Boolean ignoreFailedScalingActivities() {
        if (!unknown_ignoreFailedScalingActivities) return value_ignoreFailedScalingActivities;
        throw new UndeferrableValueException("Value 'GroupArgs.ignoreFailedScalingActivities' is not present");
    }

    /**
     * One or more
     * [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
     * to attach to the Auto Scaling Group **before** instances are launched. The
     * syntax is exactly the same as the separate
     * `aws.autoscaling.LifecycleHook`
     * resource, without the `autoscaling_group_name` attribute. Please note that this will only work when creating
     * a new Auto Scaling Group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.
     * 
     */
    @PolicyResourceProperty(name="initialLifecycleHooks", flag="unknown_initialLifecycleHooks")
    private List<GroupInitialLifecycleHookArgs> value_initialLifecycleHooks;
    private boolean unknown_initialLifecycleHooks;
    public List<GroupInitialLifecycleHookArgs> initialLifecycleHooks() {
        if (!unknown_initialLifecycleHooks) return value_initialLifecycleHooks;
        throw new UndeferrableValueException("Value 'GroupArgs.initialLifecycleHooks' is not present");
    }

    /**
     * If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
     * 
     */
    @PolicyResourceProperty(name="instanceMaintenancePolicy", flag="unknown_instanceMaintenancePolicy")
    private GroupInstanceMaintenancePolicyArgs value_instanceMaintenancePolicy;
    private boolean unknown_instanceMaintenancePolicy;
    public GroupInstanceMaintenancePolicyArgs instanceMaintenancePolicy() {
        if (!unknown_instanceMaintenancePolicy) return value_instanceMaintenancePolicy;
        throw new UndeferrableValueException("Value 'GroupArgs.instanceMaintenancePolicy' is not present");
    }

    /**
     * If this block is configured, start an
     * [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
     * when this Auto Scaling Group is updated. Defined below.
     * 
     */
    @PolicyResourceProperty(name="instanceRefresh", flag="unknown_instanceRefresh")
    private GroupInstanceRefreshArgs value_instanceRefresh;
    private boolean unknown_instanceRefresh;
    public GroupInstanceRefreshArgs instanceRefresh() {
        if (!unknown_instanceRefresh) return value_instanceRefresh;
        throw new UndeferrableValueException("Value 'GroupArgs.instanceRefresh' is not present");
    }

    /**
     * Name of the launch configuration to use.
     * 
     */
    @PolicyResourceProperty(name="launchConfiguration", flag="unknown_launchConfiguration")
    private String value_launchConfiguration;
    private boolean unknown_launchConfiguration;
    public String launchConfiguration() {
        if (!unknown_launchConfiguration) return value_launchConfiguration;
        throw new UndeferrableValueException("Value 'GroupArgs.launchConfiguration' is not present");
    }

    /**
     * Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
     * 
     */
    @PolicyResourceProperty(name="launchTemplate", flag="unknown_launchTemplate")
    private GroupLaunchTemplateArgs value_launchTemplate;
    private boolean unknown_launchTemplate;
    public GroupLaunchTemplateArgs launchTemplate() {
        if (!unknown_launchTemplate) return value_launchTemplate;
        throw new UndeferrableValueException("Value 'GroupArgs.launchTemplate' is not present");
    }

    /**
     * List of elastic load balancer names to add to the autoscaling
     * group names. Only valid for classic load balancers. For ALBs, use `target_group_arns` instead. To remove all load balancer attachments an empty list should be specified.
     * 
     */
    @PolicyResourceProperty(name="loadBalancers", flag="unknown_loadBalancers")
    private List<String> value_loadBalancers;
    private boolean unknown_loadBalancers;
    public List<String> loadBalancers() {
        if (!unknown_loadBalancers) return value_loadBalancers;
        throw new UndeferrableValueException("Value 'GroupArgs.loadBalancers' is not present");
    }

    /**
     * Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
     * 
     */
    @PolicyResourceProperty(name="maxInstanceLifetime", flag="unknown_maxInstanceLifetime")
    private Integer value_maxInstanceLifetime;
    private boolean unknown_maxInstanceLifetime;
    public Integer maxInstanceLifetime() {
        if (!unknown_maxInstanceLifetime) return value_maxInstanceLifetime;
        throw new UndeferrableValueException("Value 'GroupArgs.maxInstanceLifetime' is not present");
    }

    /**
     * Maximum size of the Auto Scaling Group.
     * 
     */
    @PolicyResourceProperty(name="maxSize", flag="unknown_maxSize")
    private Integer value_maxSize;
    private boolean unknown_maxSize;
    public Integer maxSize() {
        if (!unknown_maxSize) return value_maxSize;
        throw new UndeferrableValueException("Value 'GroupArgs.maxSize' is not present");
    }

    /**
     * Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
     * 
     */
    @PolicyResourceProperty(name="metricsGranularity", flag="unknown_metricsGranularity")
    private String value_metricsGranularity;
    private boolean unknown_metricsGranularity;
    public String metricsGranularity() {
        if (!unknown_metricsGranularity) return value_metricsGranularity;
        throw new UndeferrableValueException("Value 'GroupArgs.metricsGranularity' is not present");
    }

    /**
     * Setting this causes Pulumi to wait for
     * this number of instances from this Auto Scaling Group to show up healthy in the
     * ELB only on creation. Updates will not wait on ELB instance number changes.
     * (See also Waiting for Capacity below.)
     * 
     */
    @PolicyResourceProperty(name="minElbCapacity", flag="unknown_minElbCapacity")
    private Integer value_minElbCapacity;
    private boolean unknown_minElbCapacity;
    public Integer minElbCapacity() {
        if (!unknown_minElbCapacity) return value_minElbCapacity;
        throw new UndeferrableValueException("Value 'GroupArgs.minElbCapacity' is not present");
    }

    /**
     * Minimum size of the Auto Scaling Group.
     * (See also Waiting for Capacity below.)
     * 
     */
    @PolicyResourceProperty(name="minSize", flag="unknown_minSize")
    private Integer value_minSize;
    private boolean unknown_minSize;
    public Integer minSize() {
        if (!unknown_minSize) return value_minSize;
        throw new UndeferrableValueException("Value 'GroupArgs.minSize' is not present");
    }

    /**
     * Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
     * 
     */
    @PolicyResourceProperty(name="mixedInstancesPolicy", flag="unknown_mixedInstancesPolicy")
    private GroupMixedInstancesPolicyArgs value_mixedInstancesPolicy;
    private boolean unknown_mixedInstancesPolicy;
    public GroupMixedInstancesPolicyArgs mixedInstancesPolicy() {
        if (!unknown_mixedInstancesPolicy) return value_mixedInstancesPolicy;
        throw new UndeferrableValueException("Value 'GroupArgs.mixedInstancesPolicy' is not present");
    }

    /**
     * Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `name_prefix`.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'GroupArgs.name' is not present");
    }

    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     * 
     */
    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'GroupArgs.namePrefix' is not present");
    }

    /**
     * Name of the placement group into which you&#39;ll launch your instances, if any.
     * 
     */
    @PolicyResourceProperty(name="placementGroup", flag="unknown_placementGroup")
    private String value_placementGroup;
    private boolean unknown_placementGroup;
    public String placementGroup() {
        if (!unknown_placementGroup) return value_placementGroup;
        throw new UndeferrableValueException("Value 'GroupArgs.placementGroup' is not present");
    }

    /**
     * Whether newly launched instances
     * are automatically protected from termination by Amazon EC2 Auto Scaling when
     * scaling in. For more information about preventing instances from terminating
     * on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
     * in the Amazon EC2 Auto Scaling User Guide.
     * 
     */
    @PolicyResourceProperty(name="protectFromScaleIn", flag="unknown_protectFromScaleIn")
    private Boolean value_protectFromScaleIn;
    private boolean unknown_protectFromScaleIn;
    public Boolean protectFromScaleIn() {
        if (!unknown_protectFromScaleIn) return value_protectFromScaleIn;
        throw new UndeferrableValueException("Value 'GroupArgs.protectFromScaleIn' is not present");
    }

    /**
     * ARN of the service-linked role that the ASG will use to call other AWS services
     * 
     */
    @PolicyResourceProperty(name="serviceLinkedRoleArn", flag="unknown_serviceLinkedRoleArn")
    private String value_serviceLinkedRoleArn;
    private boolean unknown_serviceLinkedRoleArn;
    public String serviceLinkedRoleArn() {
        if (!unknown_serviceLinkedRoleArn) return value_serviceLinkedRoleArn;
        throw new UndeferrableValueException("Value 'GroupArgs.serviceLinkedRoleArn' is not present");
    }

    /**
     * List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
     * Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
     * 
     */
    @PolicyResourceProperty(name="suspendedProcesses", flag="unknown_suspendedProcesses")
    private List<String> value_suspendedProcesses;
    private boolean unknown_suspendedProcesses;
    public List<String> suspendedProcesses() {
        if (!unknown_suspendedProcesses) return value_suspendedProcesses;
        throw new UndeferrableValueException("Value 'GroupArgs.suspendedProcesses' is not present");
    }

    /**
     * Configuration block(s) containing resource tags. See Tag below for more details.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private List<GroupTagArgs> value_tags;
    private boolean unknown_tags;
    public List<GroupTagArgs> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'GroupArgs.tags' is not present");
    }

    /**
     * Set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
     * 
     */
    @PolicyResourceProperty(name="targetGroupArns", flag="unknown_targetGroupArns")
    private List<String> value_targetGroupArns;
    private boolean unknown_targetGroupArns;
    public List<String> targetGroupArns() {
        if (!unknown_targetGroupArns) return value_targetGroupArns;
        throw new UndeferrableValueException("Value 'GroupArgs.targetGroupArns' is not present");
    }

    /**
     * List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
     * 
     */
    @PolicyResourceProperty(name="terminationPolicies", flag="unknown_terminationPolicies")
    private List<String> value_terminationPolicies;
    private boolean unknown_terminationPolicies;
    public List<String> terminationPolicies() {
        if (!unknown_terminationPolicies) return value_terminationPolicies;
        throw new UndeferrableValueException("Value 'GroupArgs.terminationPolicies' is not present");
    }

    /**
     * Attaches one or more traffic sources to the specified Auto Scaling group.
     * 
     */
    @PolicyResourceProperty(name="trafficSources", flag="unknown_trafficSources")
    private List<GroupTrafficSourceArgs> value_trafficSources;
    private boolean unknown_trafficSources;
    public List<GroupTrafficSourceArgs> trafficSources() {
        if (!unknown_trafficSources) return value_trafficSources;
        throw new UndeferrableValueException("Value 'GroupArgs.trafficSources' is not present");
    }

    /**
     * List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availability_zones`.
     * 
     */
    @PolicyResourceProperty(name="vpcZoneIdentifiers", flag="unknown_vpcZoneIdentifiers")
    private List<String> value_vpcZoneIdentifiers;
    private boolean unknown_vpcZoneIdentifiers;
    public List<String> vpcZoneIdentifiers() {
        if (!unknown_vpcZoneIdentifiers) return value_vpcZoneIdentifiers;
        throw new UndeferrableValueException("Value 'GroupArgs.vpcZoneIdentifiers' is not present");
    }

    /**
     * Maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
     * wait for ASG instances to be healthy before timing out. (See also Waiting
     * for Capacity below.) Setting this to &#34;0&#34; causes
     * the provider to skip all Capacity Waiting behavior.
     * 
     */
    @PolicyResourceProperty(name="waitForCapacityTimeout", flag="unknown_waitForCapacityTimeout")
    private String value_waitForCapacityTimeout;
    private boolean unknown_waitForCapacityTimeout;
    public String waitForCapacityTimeout() {
        if (!unknown_waitForCapacityTimeout) return value_waitForCapacityTimeout;
        throw new UndeferrableValueException("Value 'GroupArgs.waitForCapacityTimeout' is not present");
    }

    /**
     * Setting this will cause Pulumi to wait
     * for exactly this number of healthy instances from this Auto Scaling Group in
     * all attached load balancers on both create and update operations. (Takes
     * precedence over `min_elb_capacity` behavior.)
     * (See also Waiting for Capacity below.)
     * 
     */
    @PolicyResourceProperty(name="waitForElbCapacity", flag="unknown_waitForElbCapacity")
    private Integer value_waitForElbCapacity;
    private boolean unknown_waitForElbCapacity;
    public Integer waitForElbCapacity() {
        if (!unknown_waitForElbCapacity) return value_waitForElbCapacity;
        throw new UndeferrableValueException("Value 'GroupArgs.waitForElbCapacity' is not present");
    }

    /**
     * If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
     * to the specified Auto Scaling group. Defined below
     * 
     */
    @PolicyResourceProperty(name="warmPool", flag="unknown_warmPool")
    private GroupWarmPoolArgs value_warmPool;
    private boolean unknown_warmPool;
    public GroupWarmPoolArgs warmPool() {
        if (!unknown_warmPool) return value_warmPool;
        throw new UndeferrableValueException("Value 'GroupArgs.warmPool' is not present");
    }

}
