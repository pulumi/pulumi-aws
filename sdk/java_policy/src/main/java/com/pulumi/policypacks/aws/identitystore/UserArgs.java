// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.identitystore;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.identitystore.inputs.UserAddressesArgs;
import com.pulumi.policypacks.aws.identitystore.inputs.UserEmailsArgs;
import com.pulumi.policypacks.aws.identitystore.inputs.UserNameArgs;
import com.pulumi.policypacks.aws.identitystore.inputs.UserPhoneNumbersArgs;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:identitystore/user:User")
public final class UserArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Details about the user&#39;s address. At most 1 address is allowed. Detailed below.
     * 
     */
    private UndeferrableValue<UserAddressesArgs> addresses;

    public UserAddressesArgs addresses() {
        if (addresses == null) return null;
        return addresses.getValue("UserArgs.addresses");
    }

    /**
     * The name that is typically displayed when the user is referenced.
     * 
     */
    private UndeferrableValue<String> displayName;

    public String displayName() {
        if (displayName == null) return null;
        return displayName.getValue("UserArgs.displayName");
    }

    /**
     * Details about the user&#39;s email. At most 1 email is allowed. Detailed below.
     * 
     */
    private UndeferrableValue<UserEmailsArgs> emails;

    public UserEmailsArgs emails() {
        if (emails == null) return null;
        return emails.getValue("UserArgs.emails");
    }

    /**
     * The globally unique identifier for the identity store that this user is in.
     * 
     */
    private UndeferrableValue<String> identityStoreId;

    public String identityStoreId() {
        if (identityStoreId == null) return null;
        return identityStoreId.getValue("UserArgs.identityStoreId");
    }

    /**
     * The user&#39;s geographical region or location.
     * 
     */
    private UndeferrableValue<String> locale;

    public String locale() {
        if (locale == null) return null;
        return locale.getValue("UserArgs.locale");
    }

    /**
     * Details about the user&#39;s full name. Detailed below.
     * 
     */
    private UndeferrableValue<UserNameArgs> name;

    public UserNameArgs name() {
        if (name == null) return null;
        return name.getValue("UserArgs.name");
    }

    /**
     * An alternate name for the user.
     * 
     */
    private UndeferrableValue<String> nickname;

    public String nickname() {
        if (nickname == null) return null;
        return nickname.getValue("UserArgs.nickname");
    }

    /**
     * Details about the user&#39;s phone number. At most 1 phone number is allowed. Detailed below.
     * 
     */
    private UndeferrableValue<UserPhoneNumbersArgs> phoneNumbers;

    public UserPhoneNumbersArgs phoneNumbers() {
        if (phoneNumbers == null) return null;
        return phoneNumbers.getValue("UserArgs.phoneNumbers");
    }

    /**
     * The preferred language of the user.
     * 
     */
    private UndeferrableValue<String> preferredLanguage;

    public String preferredLanguage() {
        if (preferredLanguage == null) return null;
        return preferredLanguage.getValue("UserArgs.preferredLanguage");
    }

    /**
     * An URL that may be associated with the user.
     * 
     */
    private UndeferrableValue<String> profileUrl;

    public String profileUrl() {
        if (profileUrl == null) return null;
        return profileUrl.getValue("UserArgs.profileUrl");
    }

    /**
     * The user&#39;s time zone.
     * 
     */
    private UndeferrableValue<String> timezone;

    public String timezone() {
        if (timezone == null) return null;
        return timezone.getValue("UserArgs.timezone");
    }

    /**
     * The user&#39;s title.
     * 
     */
    private UndeferrableValue<String> title;

    public String title() {
        if (title == null) return null;
        return title.getValue("UserArgs.title");
    }

    /**
     * A unique string used to identify the user. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store. The limit is 128 characters.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> userName;

    public String userName() {
        if (userName == null) return null;
        return userName.getValue("UserArgs.userName");
    }

    /**
     * The user type.
     * 
     */
    private UndeferrableValue<String> userType;

    public String userType() {
        if (userType == null) return null;
        return userType.getValue("UserArgs.userType");
    }

}
