// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.neptune;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;


@PolicyResourceType(type="aws:neptune/clusterSnapshot:ClusterSnapshot")
public final class ClusterSnapshot extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Specifies the allocated storage size in gigabytes (GB).
     * 
     */
    private UndeferrableValue<Integer> allocatedStorage;

    public Integer allocatedStorage() {
        if (allocatedStorage == null) return null;
        return allocatedStorage.getValue("ClusterSnapshot.allocatedStorage");
    }

    /**
     * List of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.
     * 
     */
    private UndeferrableValue<List<String>> availabilityZones;

    public List<String> availabilityZones() {
        if (availabilityZones == null) return null;
        return availabilityZones.getValue("ClusterSnapshot.availabilityZones");
    }

    /**
     * The DB Cluster Identifier from which to take the snapshot.
     * 
     */
    private UndeferrableValue<String> dbClusterIdentifier;

    public String dbClusterIdentifier() {
        if (dbClusterIdentifier == null) return null;
        return dbClusterIdentifier.getValue("ClusterSnapshot.dbClusterIdentifier");
    }

    /**
     * The Amazon Resource Name (ARN) for the DB Cluster Snapshot.
     * 
     */
    private UndeferrableValue<String> dbClusterSnapshotArn;

    public String dbClusterSnapshotArn() {
        if (dbClusterSnapshotArn == null) return null;
        return dbClusterSnapshotArn.getValue("ClusterSnapshot.dbClusterSnapshotArn");
    }

    /**
     * The Identifier for the snapshot.
     * 
     */
    private UndeferrableValue<String> dbClusterSnapshotIdentifier;

    public String dbClusterSnapshotIdentifier() {
        if (dbClusterSnapshotIdentifier == null) return null;
        return dbClusterSnapshotIdentifier.getValue("ClusterSnapshot.dbClusterSnapshotIdentifier");
    }

    /**
     * Specifies the name of the database engine.
     * 
     */
    private UndeferrableValue<String> engine;

    public String engine() {
        if (engine == null) return null;
        return engine.getValue("ClusterSnapshot.engine");
    }

    /**
     * Version of the database engine for this DB cluster snapshot.
     * 
     */
    private UndeferrableValue<String> engineVersion;

    public String engineVersion() {
        if (engineVersion == null) return null;
        return engineVersion.getValue("ClusterSnapshot.engineVersion");
    }

    /**
     * If storage_encrypted is true, the AWS KMS key identifier for the encrypted DB cluster snapshot.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("ClusterSnapshot.kmsKeyId");
    }

    /**
     * License model information for the restored DB cluster.
     * 
     */
    private UndeferrableValue<String> licenseModel;

    public String licenseModel() {
        if (licenseModel == null) return null;
        return licenseModel.getValue("ClusterSnapshot.licenseModel");
    }

    /**
     * Port that the DB cluster was listening on at the time of the snapshot.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("ClusterSnapshot.port");
    }

    private UndeferrableValue<String> snapshotType;

    public String snapshotType() {
        if (snapshotType == null) return null;
        return snapshotType.getValue("ClusterSnapshot.snapshotType");
    }

    private UndeferrableValue<String> sourceDbClusterSnapshotArn;

    public String sourceDbClusterSnapshotArn() {
        if (sourceDbClusterSnapshotArn == null) return null;
        return sourceDbClusterSnapshotArn.getValue("ClusterSnapshot.sourceDbClusterSnapshotArn");
    }

    /**
     * The status of this DB Cluster Snapshot.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("ClusterSnapshot.status");
    }

    /**
     * Specifies whether the DB cluster snapshot is encrypted.
     * 
     */
    private UndeferrableValue<Boolean> storageEncrypted;

    public Boolean storageEncrypted() {
        if (storageEncrypted == null) return null;
        return storageEncrypted.getValue("ClusterSnapshot.storageEncrypted");
    }

    /**
     * The VPC ID associated with the DB cluster snapshot.
     * 
     */
    private UndeferrableValue<String> vpcId;

    public String vpcId() {
        if (vpcId == null) return null;
        return vpcId.getValue("ClusterSnapshot.vpcId");
    }

}
