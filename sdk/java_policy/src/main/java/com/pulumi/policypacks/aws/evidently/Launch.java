// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.evidently;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.evidently.outputs.LaunchExecution;
import com.pulumi.policypacks.aws.evidently.outputs.LaunchGroup;
import com.pulumi.policypacks.aws.evidently.outputs.LaunchMetricMonitor;
import com.pulumi.policypacks.aws.evidently.outputs.LaunchScheduledSplitsConfig;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:evidently/launch:Launch")
public final class Launch extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the launch.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Launch.arn' is not present");
    }

    /**
     * The date and time that the launch is created.
     * 
     */
    @PolicyResourceProperty(name="createdTime", flag="unknown_createdTime")
    private String value_createdTime;
    private boolean unknown_createdTime;
    public String createdTime() {
        if (!unknown_createdTime) return value_createdTime;
        throw new UndeferrableValueException("Value 'Launch.createdTime' is not present");
    }

    /**
     * Specifies the description of the launch.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Launch.description' is not present");
    }

    /**
     * A block that contains information about the start and end times of the launch. Detailed below
     * 
     */
    @PolicyResourceProperty(name="executions", flag="unknown_executions")
    private List<LaunchExecution> value_executions;
    private boolean unknown_executions;
    public List<LaunchExecution> executions() {
        if (!unknown_executions) return value_executions;
        throw new UndeferrableValueException("Value 'Launch.executions' is not present");
    }

    /**
     * One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="groups", flag="unknown_groups")
    private List<LaunchGroup> value_groups;
    private boolean unknown_groups;
    public List<LaunchGroup> groups() {
        if (!unknown_groups) return value_groups;
        throw new UndeferrableValueException("Value 'Launch.groups' is not present");
    }

    /**
     * The date and time that the launch was most recently updated.
     * 
     */
    @PolicyResourceProperty(name="lastUpdatedTime", flag="unknown_lastUpdatedTime")
    private String value_lastUpdatedTime;
    private boolean unknown_lastUpdatedTime;
    public String lastUpdatedTime() {
        if (!unknown_lastUpdatedTime) return value_lastUpdatedTime;
        throw new UndeferrableValueException("Value 'Launch.lastUpdatedTime' is not present");
    }

    /**
     * One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="metricMonitors", flag="unknown_metricMonitors")
    private @Nullable List<LaunchMetricMonitor> value_metricMonitors;
    private boolean unknown_metricMonitors;
    public @Nullable List<LaunchMetricMonitor> metricMonitors() {
        if (!unknown_metricMonitors) return value_metricMonitors;
        throw new UndeferrableValueException("Value 'Launch.metricMonitors' is not present");
    }

    /**
     * The name for the new launch. Minimum length of `1`. Maximum length of `127`.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Launch.name' is not present");
    }

    /**
     * The name or ARN of the project that is to contain the new launch.
     * 
     */
    @PolicyResourceProperty(name="project", flag="unknown_project")
    private String value_project;
    private boolean unknown_project;
    public String project() {
        if (!unknown_project) return value_project;
        throw new UndeferrableValueException("Value 'Launch.project' is not present");
    }

    /**
     * When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
     * 
     */
    @PolicyResourceProperty(name="randomizationSalt", flag="unknown_randomizationSalt")
    private @Nullable String value_randomizationSalt;
    private boolean unknown_randomizationSalt;
    public @Nullable String randomizationSalt() {
        if (!unknown_randomizationSalt) return value_randomizationSalt;
        throw new UndeferrableValueException("Value 'Launch.randomizationSalt' is not present");
    }

    /**
     * A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="scheduledSplitsConfig", flag="unknown_scheduledSplitsConfig")
    private @Nullable LaunchScheduledSplitsConfig value_scheduledSplitsConfig;
    private boolean unknown_scheduledSplitsConfig;
    public @Nullable LaunchScheduledSplitsConfig scheduledSplitsConfig() {
        if (!unknown_scheduledSplitsConfig) return value_scheduledSplitsConfig;
        throw new UndeferrableValueException("Value 'Launch.scheduledSplitsConfig' is not present");
    }

    /**
     * The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'Launch.status' is not present");
    }

    /**
     * If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
     * 
     */
    @PolicyResourceProperty(name="statusReason", flag="unknown_statusReason")
    private String value_statusReason;
    private boolean unknown_statusReason;
    public String statusReason() {
        if (!unknown_statusReason) return value_statusReason;
        throw new UndeferrableValueException("Value 'Launch.statusReason' is not present");
    }

    /**
     * Tags to apply to the launch. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Launch.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Launch.tagsAll' is not present");
    }

    /**
     * The type of launch.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'Launch.type' is not present");
    }

}
