// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.evidently;

import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.evidently.LaunchExecution;
import com.pulumi.policypacks.aws.evidently.LaunchGroup;
import com.pulumi.policypacks.aws.evidently.LaunchMetricMonitor;
import com.pulumi.policypacks.aws.evidently.LaunchScheduledSplitsConfig;
import java.lang.String;
import java.util.List;
import java.util.Map;


@PolicyResourceType(type="aws:evidently/launch:Launch")
public final class Launch extends com.pulumi.resources.PolicyResource {

    /**
     * The ARN of the launch.
     * 
     */
    public String arn;



    /**
     * The date and time that the launch is created.
     * 
     */
    public String createdTime;



    /**
     * Specifies the description of the launch.
     * 
     */
    public String description;



    /**
     * A block that contains information about the start and end times of the launch. Detailed below
     * 
     */
    public List<LaunchExecution> executions;



    /**
     * One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
     * 
     */
    public List<LaunchGroup> groups;



    /**
     * The date and time that the launch was most recently updated.
     * 
     */
    public String lastUpdatedTime;



    /**
     * One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
     * 
     */
    public List<LaunchMetricMonitor> metricMonitors;



    /**
     * The name for the new launch. Minimum length of `1`. Maximum length of `127`.
     * 
     */
    public String name;



    /**
     * The name or ARN of the project that is to contain the new launch.
     * 
     */
    public String project;



    /**
     * When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
     * 
     */
    public String randomizationSalt;



    /**
     * A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
     * 
     */
    public LaunchScheduledSplitsConfig scheduledSplitsConfig;



    /**
     * The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
     * 
     */
    public String status;



    /**
     * If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
     * 
     */
    public String statusReason;



    /**
     * Tags to apply to the launch. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Map<String,String> tags;



    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Map<String,String> tagsAll;



    /**
     * The type of launch.
     * 
     */
    public String type;



}
