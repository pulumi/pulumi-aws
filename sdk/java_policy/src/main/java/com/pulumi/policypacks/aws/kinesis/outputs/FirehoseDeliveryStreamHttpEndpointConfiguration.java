// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesis.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration;
import com.pulumi.policypacks.aws.kinesis.outputs.FirehoseDeliveryStreamHttpEndpointConfigurationSecretsManagerConfiguration;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamHttpEndpointConfiguration {

    /**
     * The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
     * 
     */
    private @Nullable UndeferrableValue<String> accessKey;

    public @Nullable String accessKey() {
        if (accessKey == null) return null;
        return accessKey.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.accessKey");
    }

    /**
     * Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
     * 
     */
    private @Nullable UndeferrableValue<Integer> bufferingInterval;

    public @Nullable Integer bufferingInterval() {
        if (bufferingInterval == null) return null;
        return bufferingInterval.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.bufferingInterval");
    }

    /**
     * Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
     * 
     */
    private @Nullable UndeferrableValue<Integer> bufferingSize;

    public @Nullable Integer bufferingSize() {
        if (bufferingSize == null) return null;
        return bufferingSize.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.bufferingSize");
    }

    /**
     * The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
     * 
     */
    private @Nullable UndeferrableValue<FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions> cloudwatchLoggingOptions;

    public @Nullable FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions() {
        if (cloudwatchLoggingOptions == null) return null;
        return cloudwatchLoggingOptions.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.cloudwatchLoggingOptions");
    }

    /**
     * The HTTP endpoint name.
     * 
     */
    private @Nullable UndeferrableValue<String> name;

    public @Nullable String name() {
        if (name == null) return null;
        return name.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.name");
    }

    /**
     * The data processing configuration.  See `processing_configuration` block below for details.
     * 
     */
    private @Nullable UndeferrableValue<FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration> processingConfiguration;

    public @Nullable FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration processingConfiguration() {
        if (processingConfiguration == null) return null;
        return processingConfiguration.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.processingConfiguration");
    }

    /**
     * The request configuration.  See `request_configuration` block below for details.
     * 
     */
    private @Nullable UndeferrableValue<FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration> requestConfiguration;

    public @Nullable FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration requestConfiguration() {
        if (requestConfiguration == null) return null;
        return requestConfiguration.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.requestConfiguration");
    }

    /**
     * Total amount of seconds Firehose spends on retries. This duration starts after the initial attempt fails, It does not include the time periods during which Firehose waits for acknowledgment from the specified destination after each attempt. Valid values between `0` and `7200`. Default is `300`.
     * 
     */
    private @Nullable UndeferrableValue<Integer> retryDuration;

    public @Nullable Integer retryDuration() {
        if (retryDuration == null) return null;
        return retryDuration.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.retryDuration");
    }

    /**
     * Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs. The pattern needs to be `arn:.*`.
     * 
     */
    private @Nullable UndeferrableValue<String> roleArn;

    public @Nullable String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.roleArn");
    }

    /**
     * Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDataOnly` and `AllData`.  Default value is `FailedDataOnly`.
     * 
     */
    private @Nullable UndeferrableValue<String> s3BackupMode;

    public @Nullable String s3BackupMode() {
        if (s3BackupMode == null) return null;
        return s3BackupMode.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.s3BackupMode");
    }

    /**
     * The S3 Configuration. See `s3_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration> s3Configuration;

    public FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration s3Configuration() {
        if (s3Configuration == null) return null;
        return s3Configuration.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.s3Configuration");
    }

    /**
     * The Secret Manager Configuration. See `secrets_manager_configuration` block below for details.
     * 
     */
    private @Nullable UndeferrableValue<FirehoseDeliveryStreamHttpEndpointConfigurationSecretsManagerConfiguration> secretsManagerConfiguration;

    public @Nullable FirehoseDeliveryStreamHttpEndpointConfigurationSecretsManagerConfiguration secretsManagerConfiguration() {
        if (secretsManagerConfiguration == null) return null;
        return secretsManagerConfiguration.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.secretsManagerConfiguration");
    }

    /**
     * The HTTP endpoint URL to which Kinesis Firehose sends your data.
     * 
     */
    private UndeferrableValue<String> url;

    public String url() {
        if (url == null) return null;
        return url.getValue("FirehoseDeliveryStreamHttpEndpointConfiguration.url");
    }

}
