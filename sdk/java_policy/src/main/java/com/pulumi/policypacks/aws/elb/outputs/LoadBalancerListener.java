// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elb.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class LoadBalancerListener {

    /**
     * The port on the instance to route to
     * 
     */
    @PolicyResourceProperty(name="instancePort", flag="unknown_instancePort")
    private Integer value_instancePort;
    private boolean unknown_instancePort;
    public Integer instancePort() {
        if (!unknown_instancePort) return value_instancePort;
        throw new UndeferrableValueException("Value 'LoadBalancerListener.instancePort' is not present");
    }

    /**
     * The protocol to use to the instance. Valid
     * values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
     * 
     */
    @PolicyResourceProperty(name="instanceProtocol", flag="unknown_instanceProtocol")
    private String value_instanceProtocol;
    private boolean unknown_instanceProtocol;
    public String instanceProtocol() {
        if (!unknown_instanceProtocol) return value_instanceProtocol;
        throw new UndeferrableValueException("Value 'LoadBalancerListener.instanceProtocol' is not present");
    }

    /**
     * The port to listen on for the load balancer
     * 
     */
    @PolicyResourceProperty(name="lbPort", flag="unknown_lbPort")
    private Integer value_lbPort;
    private boolean unknown_lbPort;
    public Integer lbPort() {
        if (!unknown_lbPort) return value_lbPort;
        throw new UndeferrableValueException("Value 'LoadBalancerListener.lbPort' is not present");
    }

    /**
     * The protocol to listen on. Valid values are `HTTP`,
     * `HTTPS`, `TCP`, or `SSL`
     * 
     */
    @PolicyResourceProperty(name="lbProtocol", flag="unknown_lbProtocol")
    private String value_lbProtocol;
    private boolean unknown_lbProtocol;
    public String lbProtocol() {
        if (!unknown_lbProtocol) return value_lbProtocol;
        throw new UndeferrableValueException("Value 'LoadBalancerListener.lbProtocol' is not present");
    }

    /**
     * The ARN of an SSL certificate you have
     * uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lb_protocol` is either HTTPS or SSL**
     * 
     */
    @PolicyResourceProperty(name="sslCertificateId", flag="unknown_sslCertificateId")
    private @Nullable String value_sslCertificateId;
    private boolean unknown_sslCertificateId;
    public @Nullable String sslCertificateId() {
        if (!unknown_sslCertificateId) return value_sslCertificateId;
        throw new UndeferrableValueException("Value 'LoadBalancerListener.sslCertificateId' is not present");
    }

}
