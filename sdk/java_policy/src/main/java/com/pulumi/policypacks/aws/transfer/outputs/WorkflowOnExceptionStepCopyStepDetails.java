// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.transfer.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.transfer.outputs.WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation;
import java.lang.String;
import javax.annotation.Nullable;


public final class WorkflowOnExceptionStepCopyStepDetails {

    /**
     * Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
     * 
     */
    private @Nullable UndeferrableValue<WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation> destinationFileLocation;

    public @Nullable WorkflowOnExceptionStepCopyStepDetailsDestinationFileLocation destinationFileLocation() {
        if (destinationFileLocation == null) return null;
        return destinationFileLocation.getValue("WorkflowOnExceptionStepCopyStepDetails.destinationFileLocation");
    }

    /**
     * The name of the step, used as an identifier.
     * 
     */
    private @Nullable UndeferrableValue<String> name;

    public @Nullable String name() {
        if (name == null) return null;
        return name.getValue("WorkflowOnExceptionStepCopyStepDetails.name");
    }

    /**
     * A flag that indicates whether or not to overwrite an existing file of the same name. The default is `FALSE`. Valid values are `TRUE` and `FALSE`.
     * 
     */
    private @Nullable UndeferrableValue<String> overwriteExisting;

    public @Nullable String overwriteExisting() {
        if (overwriteExisting == null) return null;
        return overwriteExisting.getValue("WorkflowOnExceptionStepCopyStepDetails.overwriteExisting");
    }

    /**
     * Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
     * 
     */
    private @Nullable UndeferrableValue<String> sourceFileLocation;

    public @Nullable String sourceFileLocation() {
        if (sourceFileLocation == null) return null;
        return sourceFileLocation.getValue("WorkflowOnExceptionStepCopyStepDetails.sourceFileLocation");
    }

}
