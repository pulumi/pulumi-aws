// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.autoscaling.outputs.GroupInstanceRefreshPreferencesAlarmSpecification;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class GroupInstanceRefreshPreferences {

    /**
     * Alarm Specification for Instance Refresh.
     * 
     */
    private @Nullable UndeferrableValue<GroupInstanceRefreshPreferencesAlarmSpecification> alarmSpecification;

    public @Nullable GroupInstanceRefreshPreferencesAlarmSpecification alarmSpecification() {
        if (alarmSpecification == null) return null;
        return alarmSpecification.getValue("GroupInstanceRefreshPreferences.alarmSpecification");
    }

    /**
     * Automatically rollback if instance refresh fails. Defaults to `false`. This option may only be set to `true` when specifying a `launch_template` or `mixed_instances_policy`.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> autoRollback;

    public @Nullable Boolean autoRollback() {
        if (autoRollback == null) return null;
        return autoRollback.getValue("GroupInstanceRefreshPreferences.autoRollback");
    }

    /**
     * Number of seconds to wait after a checkpoint. Defaults to `3600`.
     * 
     */
    private @Nullable UndeferrableValue<String> checkpointDelay;

    public @Nullable String checkpointDelay() {
        if (checkpointDelay == null) return null;
        return checkpointDelay.getValue("GroupInstanceRefreshPreferences.checkpointDelay");
    }

    /**
     * List of percentages for each checkpoint. Values must be unique and in ascending order. To replace all instances, the final number must be `100`.
     * 
     */
    private @Nullable UndeferrableValue<List<Integer>> checkpointPercentages;

    public @Nullable List<Integer> checkpointPercentages() {
        if (checkpointPercentages == null) return null;
        return checkpointPercentages.getValue("GroupInstanceRefreshPreferences.checkpointPercentages");
    }

    /**
     * Number of seconds until a newly launched instance is configured and ready to use. Default behavior is to use the Auto Scaling Group&#39;s health check grace period.
     * 
     */
    private @Nullable UndeferrableValue<String> instanceWarmup;

    public @Nullable String instanceWarmup() {
        if (instanceWarmup == null) return null;
        return instanceWarmup.getValue("GroupInstanceRefreshPreferences.instanceWarmup");
    }

    /**
     * Amount of capacity in the Auto Scaling group that can be in service and healthy, or pending, to support your workload when an instance refresh is in place, as a percentage of the desired capacity of the Auto Scaling group. Values must be between `100` and `200`, defaults to `100`.
     * 
     */
    private @Nullable UndeferrableValue<Integer> maxHealthyPercentage;

    public @Nullable Integer maxHealthyPercentage() {
        if (maxHealthyPercentage == null) return null;
        return maxHealthyPercentage.getValue("GroupInstanceRefreshPreferences.maxHealthyPercentage");
    }

    /**
     * Amount of capacity in the Auto Scaling group that must remain healthy during an instance refresh to allow the operation to continue, as a percentage of the desired capacity of the Auto Scaling group. Defaults to `90`.
     * 
     */
    private @Nullable UndeferrableValue<Integer> minHealthyPercentage;

    public @Nullable Integer minHealthyPercentage() {
        if (minHealthyPercentage == null) return null;
        return minHealthyPercentage.getValue("GroupInstanceRefreshPreferences.minHealthyPercentage");
    }

    /**
     * Behavior when encountering instances protected from scale in are found. Available behaviors are `Refresh`, `Ignore`, and `Wait`. Default is `Ignore`.
     * 
     */
    private @Nullable UndeferrableValue<String> scaleInProtectedInstances;

    public @Nullable String scaleInProtectedInstances() {
        if (scaleInProtectedInstances == null) return null;
        return scaleInProtectedInstances.getValue("GroupInstanceRefreshPreferences.scaleInProtectedInstances");
    }

    /**
     * Replace instances that already have your desired configuration. Defaults to `false`.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> skipMatching;

    public @Nullable Boolean skipMatching() {
        if (skipMatching == null) return null;
        return skipMatching.getValue("GroupInstanceRefreshPreferences.skipMatching");
    }

    /**
     * Behavior when encountering instances in the `Standby` state in are found. Available behaviors are `Terminate`, `Ignore`, and `Wait`. Default is `Ignore`.
     * 
     */
    private @Nullable UndeferrableValue<String> standbyInstances;

    public @Nullable String standbyInstances() {
        if (standbyInstances == null) return null;
        return standbyInstances.getValue("GroupInstanceRefreshPreferences.standbyInstances");
    }

}
