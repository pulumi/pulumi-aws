// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lambda;

import com.pulumi.asset.Archive;
import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lambda/layerVersion:LayerVersion")
public final class LayerVersionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Path to the function&#39;s deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
     * 
     */
    private UndeferrableValue<Archive> code;

    public Archive code() {
        if (code == null) return null;
        return code.getValue("LayerVersionArgs.code");
    }

    /**
     * List of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleArchitectures) this layer is compatible with. Currently `x86_64` and `arm64` can be specified.
     * 
     */
    private UndeferrableValue<List<String>> compatibleArchitectures;

    public List<String> compatibleArchitectures() {
        if (compatibleArchitectures == null) return null;
        return compatibleArchitectures.getValue("LayerVersionArgs.compatibleArchitectures");
    }

    /**
     * List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleRuntimes) this layer is compatible with. Up to 15 runtimes can be specified.
     * 
     */
    private UndeferrableValue<List<String>> compatibleRuntimes;

    public List<String> compatibleRuntimes() {
        if (compatibleRuntimes == null) return null;
        return compatibleRuntimes.getValue("LayerVersionArgs.compatibleRuntimes");
    }

    /**
     * Description of what your Lambda Layer does.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("LayerVersionArgs.description");
    }

    /**
     * Unique name for your Lambda Layer
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> layerName;

    public String layerName() {
        if (layerName == null) return null;
        return layerName.getValue("LayerVersionArgs.layerName");
    }

    /**
     * License info for your Lambda Layer. See [License Info](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-LicenseInfo).
     * 
     */
    private UndeferrableValue<String> licenseInfo;

    public String licenseInfo() {
        if (licenseInfo == null) return null;
        return licenseInfo.getValue("LayerVersionArgs.licenseInfo");
    }

    /**
     * S3 bucket location containing the function&#39;s deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
     * 
     */
    private UndeferrableValue<String> s3Bucket;

    public String s3Bucket() {
        if (s3Bucket == null) return null;
        return s3Bucket.getValue("LayerVersionArgs.s3Bucket");
    }

    /**
     * S3 key of an object containing the function&#39;s deployment package. Conflicts with `filename`.
     * 
     */
    private UndeferrableValue<String> s3Key;

    public String s3Key() {
        if (s3Key == null) return null;
        return s3Key.getValue("LayerVersionArgs.s3Key");
    }

    /**
     * Object version containing the function&#39;s deployment package. Conflicts with `filename`.
     * 
     */
    private UndeferrableValue<String> s3ObjectVersion;

    public String s3ObjectVersion() {
        if (s3ObjectVersion == null) return null;
        return s3ObjectVersion.getValue("LayerVersionArgs.s3ObjectVersion");
    }

    /**
     * Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatible_architectures`, `compatible_runtimes`, `description`, `filename`, `layer_name`, `license_info`, `s3_bucket`, `s3_key`, `s3_object_version`, or `source_code_hash` forces deletion of the existing layer version and creation of a new layer version.
     * 
     */
    private UndeferrableValue<Boolean> skipDestroy;

    public Boolean skipDestroy() {
        if (skipDestroy == null) return null;
        return skipDestroy.getValue("LayerVersionArgs.skipDestroy");
    }

    /**
     * Virtual attribute used to trigger replacement when source code changes. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3_key`.
     * 
     */
    private UndeferrableValue<String> sourceCodeHash;

    public String sourceCodeHash() {
        if (sourceCodeHash == null) return null;
        return sourceCodeHash.getValue("LayerVersionArgs.sourceCodeHash");
    }

}
