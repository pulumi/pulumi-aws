// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.medialive.outputs.InputDestination;
import com.pulumi.policypacks.aws.medialive.outputs.InputInputDevice;
import com.pulumi.policypacks.aws.medialive.outputs.InputMediaConnectFlow;
import com.pulumi.policypacks.aws.medialive.outputs.InputSource;
import com.pulumi.policypacks.aws.medialive.outputs.InputVpc;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:medialive/input:Input")
public final class Input extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Input.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Input.arn' is not present");
    }

    /**
     * Channels attached to Input.
     * 
     */
    @PolicyResourceProperty(name="attachedChannels", flag="unknown_attachedChannels")
    private List<String> value_attachedChannels;
    private boolean unknown_attachedChannels;
    public List<String> attachedChannels() {
        if (!unknown_attachedChannels) return value_attachedChannels;
        throw new UndeferrableValueException("Value 'Input.attachedChannels' is not present");
    }

    /**
     * Destination settings for PUSH type inputs. See Destinations for more details.
     * 
     */
    @PolicyResourceProperty(name="destinations", flag="unknown_destinations")
    private @Nullable List<InputDestination> value_destinations;
    private boolean unknown_destinations;
    public @Nullable List<InputDestination> destinations() {
        if (!unknown_destinations) return value_destinations;
        throw new UndeferrableValueException("Value 'Input.destinations' is not present");
    }

    /**
     * The input class.
     * 
     */
    @PolicyResourceProperty(name="inputClass", flag="unknown_inputClass")
    private String value_inputClass;
    private boolean unknown_inputClass;
    public String inputClass() {
        if (!unknown_inputClass) return value_inputClass;
        throw new UndeferrableValueException("Value 'Input.inputClass' is not present");
    }

    /**
     * Settings for the devices. See Input Devices for more details.
     * 
     */
    @PolicyResourceProperty(name="inputDevices", flag="unknown_inputDevices")
    private List<InputInputDevice> value_inputDevices;
    private boolean unknown_inputDevices;
    public List<InputInputDevice> inputDevices() {
        if (!unknown_inputDevices) return value_inputDevices;
        throw new UndeferrableValueException("Value 'Input.inputDevices' is not present");
    }

    /**
     * A list of IDs for all Inputs which are partners of this one.
     * 
     */
    @PolicyResourceProperty(name="inputPartnerIds", flag="unknown_inputPartnerIds")
    private List<String> value_inputPartnerIds;
    private boolean unknown_inputPartnerIds;
    public List<String> inputPartnerIds() {
        if (!unknown_inputPartnerIds) return value_inputPartnerIds;
        throw new UndeferrableValueException("Value 'Input.inputPartnerIds' is not present");
    }

    /**
     * List of input security groups.
     * 
     */
    @PolicyResourceProperty(name="inputSecurityGroups", flag="unknown_inputSecurityGroups")
    private @Nullable List<String> value_inputSecurityGroups;
    private boolean unknown_inputSecurityGroups;
    public @Nullable List<String> inputSecurityGroups() {
        if (!unknown_inputSecurityGroups) return value_inputSecurityGroups;
        throw new UndeferrableValueException("Value 'Input.inputSecurityGroups' is not present");
    }

    /**
     * Source type of the input.
     * 
     */
    @PolicyResourceProperty(name="inputSourceType", flag="unknown_inputSourceType")
    private String value_inputSourceType;
    private boolean unknown_inputSourceType;
    public String inputSourceType() {
        if (!unknown_inputSourceType) return value_inputSourceType;
        throw new UndeferrableValueException("Value 'Input.inputSourceType' is not present");
    }

    /**
     * A list of the MediaConnect Flows. See Media Connect Flows for more details.
     * 
     */
    @PolicyResourceProperty(name="mediaConnectFlows", flag="unknown_mediaConnectFlows")
    private List<InputMediaConnectFlow> value_mediaConnectFlows;
    private boolean unknown_mediaConnectFlows;
    public List<InputMediaConnectFlow> mediaConnectFlows() {
        if (!unknown_mediaConnectFlows) return value_mediaConnectFlows;
        throw new UndeferrableValueException("Value 'Input.mediaConnectFlows' is not present");
    }

    /**
     * Name of the input.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Input.name' is not present");
    }

    /**
     * The ARN of the role this input assumes during and after creation.
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'Input.roleArn' is not present");
    }

    /**
     * The source URLs for a PULL-type input. See Sources for more details.
     * 
     */
    @PolicyResourceProperty(name="sources", flag="unknown_sources")
    private List<InputSource> value_sources;
    private boolean unknown_sources;
    public List<InputSource> sources() {
        if (!unknown_sources) return value_sources;
        throw new UndeferrableValueException("Value 'Input.sources' is not present");
    }

    /**
     * A map of tags to assign to the Input. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Input.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Input.tagsAll' is not present");
    }

    /**
     * The different types of inputs that AWS Elemental MediaLive supports.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'Input.type' is not present");
    }

    /**
     * Settings for a private VPC Input. See VPC for more details.
     * 
     */
    @PolicyResourceProperty(name="vpc", flag="unknown_vpc")
    private @Nullable InputVpc value_vpc;
    private boolean unknown_vpc;
    public @Nullable InputVpc vpc() {
        if (!unknown_vpc) return value_vpc;
        throw new UndeferrableValueException("Value 'Input.vpc' is not present");
    }

}
