// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/placementGroup:PlacementGroup")
public final class PlacementGroup extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of the placement group.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("PlacementGroup.arn");
    }

    /**
     * The name of the placement group.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("PlacementGroup.name");
    }

    /**
     * The number of partitions to create in the
     * placement group.  Can only be specified when the `strategy` is set to
     * `partition`.  Valid values are 1 - 7 (default is `2`).
     * 
     */
    private UndeferrableValue<Integer> partitionCount;

    public Integer partitionCount() {
        if (partitionCount == null) return null;
        return partitionCount.getValue("PlacementGroup.partitionCount");
    }

    /**
     * The ID of the placement group.
     * 
     */
    private UndeferrableValue<String> placementGroupId;

    public String placementGroupId() {
        if (placementGroupId == null) return null;
        return placementGroupId.getValue("PlacementGroup.placementGroupId");
    }

    /**
     * Determines how placement groups spread instances. Can only be used
     * when the `strategy` is set to `spread`. Can be `host` or `rack`. `host` can only be used for Outpost placement groups. Defaults to `rack`.
     * 
     */
    private UndeferrableValue<String> spreadLevel;

    public String spreadLevel() {
        if (spreadLevel == null) return null;
        return spreadLevel.getValue("PlacementGroup.spreadLevel");
    }

    /**
     * The placement strategy. Can be `cluster`, `partition` or `spread`.
     * 
     */
    private UndeferrableValue<String> strategy;

    public String strategy() {
        if (strategy == null) return null;
        return strategy.getValue("PlacementGroup.strategy");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("PlacementGroup.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("PlacementGroup.tagsAll");
    }

}
