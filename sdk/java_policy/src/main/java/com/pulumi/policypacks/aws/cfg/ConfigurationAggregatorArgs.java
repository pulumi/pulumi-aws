// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cfg;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cfg.inputs.ConfigurationAggregatorAccountAggregationSourceArgs;
import com.pulumi.policypacks.aws.cfg.inputs.ConfigurationAggregatorOrganizationAggregationSourceArgs;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cfg/configurationAggregator:ConfigurationAggregator")
public final class ConfigurationAggregatorArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The account(s) to aggregate config data from as documented below.
     * 
     */
    private UndeferrableValue<ConfigurationAggregatorAccountAggregationSourceArgs> accountAggregationSource;

    public ConfigurationAggregatorAccountAggregationSourceArgs accountAggregationSource() {
        if (accountAggregationSource == null) return null;
        return accountAggregationSource.getValue("ConfigurationAggregatorArgs.accountAggregationSource");
    }

    /**
     * The name of the configuration aggregator.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ConfigurationAggregatorArgs.name");
    }

    /**
     * The organization to aggregate config data from as documented below.
     * 
     */
    private UndeferrableValue<ConfigurationAggregatorOrganizationAggregationSourceArgs> organizationAggregationSource;

    public ConfigurationAggregatorOrganizationAggregationSourceArgs organizationAggregationSource() {
        if (organizationAggregationSource == null) return null;
        return organizationAggregationSource.getValue("ConfigurationAggregatorArgs.organizationAggregationSource");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * Either `account_aggregation_source` or `organization_aggregation_source` must be specified.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ConfigurationAggregatorArgs.tags");
    }

}
