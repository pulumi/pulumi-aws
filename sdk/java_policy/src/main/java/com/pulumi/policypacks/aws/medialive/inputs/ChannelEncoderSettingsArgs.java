// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAudioDescriptionArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsAvailBlankingArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsCaptionDescriptionArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsGlobalConfigurationArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsMotionGraphicsConfigurationArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsNielsenConfigurationArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsOutputGroupArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsTimecodeConfigArgs;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsVideoDescriptionArgs;
import java.util.List;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsArgs {

    /**
     * Audio descriptions for the channel. See Audio Descriptions for more details.
     * 
     */
    private UndeferrableValue<List<ChannelEncoderSettingsAudioDescriptionArgs>> audioDescriptions;

    public List<ChannelEncoderSettingsAudioDescriptionArgs> audioDescriptions() {
        if (audioDescriptions == null) return null;
        return audioDescriptions.getValue("ChannelEncoderSettingsArgs.audioDescriptions");
    }

    /**
     * Settings for ad avail blanking. See Avail Blanking for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsAvailBlankingArgs> availBlanking;

    public ChannelEncoderSettingsAvailBlankingArgs availBlanking() {
        if (availBlanking == null) return null;
        return availBlanking.getValue("ChannelEncoderSettingsArgs.availBlanking");
    }

    /**
     * Caption Descriptions. See Caption Descriptions for more details.
     * 
     */
    private UndeferrableValue<List<ChannelEncoderSettingsCaptionDescriptionArgs>> captionDescriptions;

    public List<ChannelEncoderSettingsCaptionDescriptionArgs> captionDescriptions() {
        if (captionDescriptions == null) return null;
        return captionDescriptions.getValue("ChannelEncoderSettingsArgs.captionDescriptions");
    }

    /**
     * Configuration settings that apply to the event as a whole. See Global Configuration for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsGlobalConfigurationArgs> globalConfiguration;

    public ChannelEncoderSettingsGlobalConfigurationArgs globalConfiguration() {
        if (globalConfiguration == null) return null;
        return globalConfiguration.getValue("ChannelEncoderSettingsArgs.globalConfiguration");
    }

    /**
     * Settings for motion graphics. See Motion Graphics Configuration for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsMotionGraphicsConfigurationArgs> motionGraphicsConfiguration;

    public ChannelEncoderSettingsMotionGraphicsConfigurationArgs motionGraphicsConfiguration() {
        if (motionGraphicsConfiguration == null) return null;
        return motionGraphicsConfiguration.getValue("ChannelEncoderSettingsArgs.motionGraphicsConfiguration");
    }

    /**
     * Nielsen configuration settings. See Nielsen Configuration for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsNielsenConfigurationArgs> nielsenConfiguration;

    public ChannelEncoderSettingsNielsenConfigurationArgs nielsenConfiguration() {
        if (nielsenConfiguration == null) return null;
        return nielsenConfiguration.getValue("ChannelEncoderSettingsArgs.nielsenConfiguration");
    }

    /**
     * Output groups for the channel. See Output Groups for more details.
     * 
     */
    private UndeferrableValue<List<ChannelEncoderSettingsOutputGroupArgs>> outputGroups;

    public List<ChannelEncoderSettingsOutputGroupArgs> outputGroups() {
        if (outputGroups == null) return null;
        return outputGroups.getValue("ChannelEncoderSettingsArgs.outputGroups");
    }

    /**
     * Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
     * 
     */
    private UndeferrableValue<ChannelEncoderSettingsTimecodeConfigArgs> timecodeConfig;

    public ChannelEncoderSettingsTimecodeConfigArgs timecodeConfig() {
        if (timecodeConfig == null) return null;
        return timecodeConfig.getValue("ChannelEncoderSettingsArgs.timecodeConfig");
    }

    /**
     * Video Descriptions. See Video Descriptions for more details.
     * 
     */
    private UndeferrableValue<List<ChannelEncoderSettingsVideoDescriptionArgs>> videoDescriptions;

    public List<ChannelEncoderSettingsVideoDescriptionArgs> videoDescriptions() {
        if (videoDescriptions == null) return null;
        return videoDescriptions.getValue("ChannelEncoderSettingsArgs.videoDescriptions");
    }

}
