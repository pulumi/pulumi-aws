// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.networkmanager;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.networkmanager.inputs.ConnectPeerBgpOptionsArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:networkmanager/connectPeer:ConnectPeer")
public final class ConnectPeerArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The Connect peer BGP options.
     * 
     */
    @PolicyResourceProperty(name="bgpOptions", flag="unknown_bgpOptions")
    private ConnectPeerBgpOptionsArgs value_bgpOptions;
    private boolean unknown_bgpOptions;
    public ConnectPeerBgpOptionsArgs bgpOptions() {
        if (!unknown_bgpOptions) return value_bgpOptions;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.bgpOptions' is not present");
    }

    /**
     * The ID of the connection attachment.
     * 
     */
    @PolicyResourceProperty(name="connectAttachmentId", flag="unknown_connectAttachmentId")
    private String value_connectAttachmentId;
    private boolean unknown_connectAttachmentId;
    public String connectAttachmentId() {
        if (!unknown_connectAttachmentId) return value_connectAttachmentId;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.connectAttachmentId' is not present");
    }

    /**
     * A Connect peer core network address.
     * 
     */
    @PolicyResourceProperty(name="coreNetworkAddress", flag="unknown_coreNetworkAddress")
    private String value_coreNetworkAddress;
    private boolean unknown_coreNetworkAddress;
    public String coreNetworkAddress() {
        if (!unknown_coreNetworkAddress) return value_coreNetworkAddress;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.coreNetworkAddress' is not present");
    }

    /**
     * The inside IP addresses used for BGP peering. Required when the Connect attachment protocol is `GRE`. See `aws.networkmanager.ConnectAttachment` for details.
     * 
     */
    @PolicyResourceProperty(name="insideCidrBlocks", flag="unknown_insideCidrBlocks")
    private List<String> value_insideCidrBlocks;
    private boolean unknown_insideCidrBlocks;
    public List<String> insideCidrBlocks() {
        if (!unknown_insideCidrBlocks) return value_insideCidrBlocks;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.insideCidrBlocks' is not present");
    }

    /**
     * The Connect peer address.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="peerAddress", flag="unknown_peerAddress")
    private String value_peerAddress;
    private boolean unknown_peerAddress;
    public String peerAddress() {
        if (!unknown_peerAddress) return value_peerAddress;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.peerAddress' is not present");
    }

    /**
     * The subnet ARN for the Connect peer. Required when the Connect attachment protocol is `NO_ENCAP`. See `aws.networkmanager.ConnectAttachment` for details.
     * 
     */
    @PolicyResourceProperty(name="subnetArn", flag="unknown_subnetArn")
    private String value_subnetArn;
    private boolean unknown_subnetArn;
    public String subnetArn() {
        if (!unknown_subnetArn) return value_subnetArn;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.subnetArn' is not present");
    }

    /**
     * Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.tags' is not present");
    }

}
