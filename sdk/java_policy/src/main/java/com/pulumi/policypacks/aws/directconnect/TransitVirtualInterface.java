// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.directconnect;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:directconnect/transitVirtualInterface:TransitVirtualInterface")
public final class TransitVirtualInterface extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The address family for the BGP peer. ` ipv4  ` or `ipv6`.
     * 
     */
    @PolicyResourceProperty(name="addressFamily", flag="unknown_addressFamily")
    private String value_addressFamily;
    private boolean unknown_addressFamily;
    public String addressFamily() {
        if (!unknown_addressFamily) return value_addressFamily;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.addressFamily' is not present");
    }

    /**
     * The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
     * 
     */
    @PolicyResourceProperty(name="amazonAddress", flag="unknown_amazonAddress")
    private String value_amazonAddress;
    private boolean unknown_amazonAddress;
    public String amazonAddress() {
        if (!unknown_amazonAddress) return value_amazonAddress;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.amazonAddress' is not present");
    }

    @PolicyResourceProperty(name="amazonSideAsn", flag="unknown_amazonSideAsn")
    private String value_amazonSideAsn;
    private boolean unknown_amazonSideAsn;
    public String amazonSideAsn() {
        if (!unknown_amazonSideAsn) return value_amazonSideAsn;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.amazonSideAsn' is not present");
    }

    /**
     * The ARN of the virtual interface.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.arn' is not present");
    }

    /**
     * The Direct Connect endpoint on which the virtual interface terminates.
     * 
     */
    @PolicyResourceProperty(name="awsDevice", flag="unknown_awsDevice")
    private String value_awsDevice;
    private boolean unknown_awsDevice;
    public String awsDevice() {
        if (!unknown_awsDevice) return value_awsDevice;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.awsDevice' is not present");
    }

    /**
     * The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
     * 
     */
    @PolicyResourceProperty(name="bgpAsn", flag="unknown_bgpAsn")
    private Integer value_bgpAsn;
    private boolean unknown_bgpAsn;
    public Integer bgpAsn() {
        if (!unknown_bgpAsn) return value_bgpAsn;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.bgpAsn' is not present");
    }

    /**
     * The authentication key for BGP configuration.
     * 
     */
    @PolicyResourceProperty(name="bgpAuthKey", flag="unknown_bgpAuthKey")
    private String value_bgpAuthKey;
    private boolean unknown_bgpAuthKey;
    public String bgpAuthKey() {
        if (!unknown_bgpAuthKey) return value_bgpAuthKey;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.bgpAuthKey' is not present");
    }

    /**
     * The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
     * 
     */
    @PolicyResourceProperty(name="connectionId", flag="unknown_connectionId")
    private String value_connectionId;
    private boolean unknown_connectionId;
    public String connectionId() {
        if (!unknown_connectionId) return value_connectionId;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.connectionId' is not present");
    }

    /**
     * The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
     * 
     */
    @PolicyResourceProperty(name="customerAddress", flag="unknown_customerAddress")
    private String value_customerAddress;
    private boolean unknown_customerAddress;
    public String customerAddress() {
        if (!unknown_customerAddress) return value_customerAddress;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.customerAddress' is not present");
    }

    /**
     * The ID of the Direct Connect gateway to which to connect the virtual interface.
     * 
     */
    @PolicyResourceProperty(name="dxGatewayId", flag="unknown_dxGatewayId")
    private String value_dxGatewayId;
    private boolean unknown_dxGatewayId;
    public String dxGatewayId() {
        if (!unknown_dxGatewayId) return value_dxGatewayId;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.dxGatewayId' is not present");
    }

    /**
     * Indicates whether jumbo frames (8500 MTU) are supported.
     * 
     */
    @PolicyResourceProperty(name="jumboFrameCapable", flag="unknown_jumboFrameCapable")
    private Boolean value_jumboFrameCapable;
    private boolean unknown_jumboFrameCapable;
    public Boolean jumboFrameCapable() {
        if (!unknown_jumboFrameCapable) return value_jumboFrameCapable;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.jumboFrameCapable' is not present");
    }

    /**
     * The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
     * The MTU of a virtual transit interface can be either `1500` or `8500` (jumbo frames). Default is `1500`.
     * 
     */
    @PolicyResourceProperty(name="mtu", flag="unknown_mtu")
    private @Nullable Integer value_mtu;
    private boolean unknown_mtu;
    public @Nullable Integer mtu() {
        if (!unknown_mtu) return value_mtu;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.mtu' is not present");
    }

    /**
     * The name for the virtual interface.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.name' is not present");
    }

    /**
     * Indicates whether to enable or disable SiteLink.
     * 
     */
    @PolicyResourceProperty(name="sitelinkEnabled", flag="unknown_sitelinkEnabled")
    private @Nullable Boolean value_sitelinkEnabled;
    private boolean unknown_sitelinkEnabled;
    public @Nullable Boolean sitelinkEnabled() {
        if (!unknown_sitelinkEnabled) return value_sitelinkEnabled;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.sitelinkEnabled' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.tagsAll' is not present");
    }

    /**
     * The VLAN ID.
     * 
     */
    @PolicyResourceProperty(name="vlan", flag="unknown_vlan")
    private Integer value_vlan;
    private boolean unknown_vlan;
    public Integer vlan() {
        if (!unknown_vlan) return value_vlan;
        throw new UndeferrableValueException("Value 'TransitVirtualInterface.vlan' is not present");
    }

}
