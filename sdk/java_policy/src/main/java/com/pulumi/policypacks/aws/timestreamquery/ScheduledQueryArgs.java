// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.timestreamquery;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryErrorReportConfigurationArgs;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryLastRunSummaryArgs;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryNotificationConfigurationArgs;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryRecentlyFailedRunArgs;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryScheduleConfigurationArgs;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryTargetConfigurationArgs;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryTimeoutsArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:timestreamquery/scheduledQuery:ScheduledQuery")
public final class ScheduledQueryArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Configuration block for error reporting configuration. See below.
     * 
     */
    private UndeferrableValue<ScheduledQueryErrorReportConfigurationArgs> errorReportConfiguration;

    public ScheduledQueryErrorReportConfigurationArgs errorReportConfiguration() {
        if (errorReportConfiguration == null) return null;
        return errorReportConfiguration.getValue("ScheduledQueryArgs.errorReportConfiguration");
    }

    /**
     * ARN for the IAM role that Timestream will assume when running the scheduled query.
     * 
     */
    private UndeferrableValue<String> executionRoleArn;

    public String executionRoleArn() {
        if (executionRoleArn == null) return null;
        return executionRoleArn.getValue("ScheduledQueryArgs.executionRoleArn");
    }

    /**
     * Amazon KMS key used to encrypt the scheduled query resource, at-rest. If not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with &#34;alias/&#34;. If `error_report_configuration` uses `SSE_KMS` as the encryption type, the same `kms_key_id` is used to encrypt the error report at rest.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("ScheduledQueryArgs.kmsKeyId");
    }

    /**
     * Runtime summary for the last scheduled query run.
     * 
     */
    private UndeferrableValue<List<ScheduledQueryLastRunSummaryArgs>> lastRunSummaries;

    public List<ScheduledQueryLastRunSummaryArgs> lastRunSummaries() {
        if (lastRunSummaries == null) return null;
        return lastRunSummaries.getValue("ScheduledQueryArgs.lastRunSummaries");
    }

    /**
     * Name of the scheduled query.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ScheduledQueryArgs.name");
    }

    /**
     * Configuration block for notification configuration for a scheduled query. A notification is sent by Timestream when a scheduled query is created, its state is updated, or when it is deleted. See below.
     * 
     */
    private UndeferrableValue<ScheduledQueryNotificationConfigurationArgs> notificationConfiguration;

    public ScheduledQueryNotificationConfigurationArgs notificationConfiguration() {
        if (notificationConfiguration == null) return null;
        return notificationConfiguration.getValue("ScheduledQueryArgs.notificationConfiguration");
    }

    /**
     * Query string to run. Parameter names can be specified in the query string using the `{@literal @}` character followed by an identifier. The named parameter `{@literal @}scheduled_runtime` is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the `schedule_configuration` parameter, will be the value of `{@literal @}scheduled_runtime` paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the `{@literal @}scheduled_runtime` parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
     * 
     */
    private UndeferrableValue<String> queryString;

    public String queryString() {
        if (queryString == null) return null;
        return queryString.getValue("ScheduledQueryArgs.queryString");
    }

    /**
     * Runtime summary for the last five failed scheduled query runs.
     * 
     */
    private UndeferrableValue<List<ScheduledQueryRecentlyFailedRunArgs>> recentlyFailedRuns;

    public List<ScheduledQueryRecentlyFailedRunArgs> recentlyFailedRuns() {
        if (recentlyFailedRuns == null) return null;
        return recentlyFailedRuns.getValue("ScheduledQueryArgs.recentlyFailedRuns");
    }

    /**
     * Configuration block for schedule configuration for the query. See below.
     * 
     */
    private UndeferrableValue<ScheduledQueryScheduleConfigurationArgs> scheduleConfiguration;

    public ScheduledQueryScheduleConfigurationArgs scheduleConfiguration() {
        if (scheduleConfiguration == null) return null;
        return scheduleConfiguration.getValue("ScheduledQueryArgs.scheduleConfiguration");
    }

    /**
     * Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ScheduledQueryArgs.tags");
    }

    /**
     * Configuration block for writing the result of a query. See below.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<ScheduledQueryTargetConfigurationArgs> targetConfiguration;

    public ScheduledQueryTargetConfigurationArgs targetConfiguration() {
        if (targetConfiguration == null) return null;
        return targetConfiguration.getValue("ScheduledQueryArgs.targetConfiguration");
    }

    private UndeferrableValue<ScheduledQueryTimeoutsArgs> timeouts;

    public ScheduledQueryTimeoutsArgs timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("ScheduledQueryArgs.timeouts");
    }

}
