// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lex;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lex.inputs.IntentConclusionStatementArgs;
import com.pulumi.policypacks.aws.lex.inputs.IntentConfirmationPromptArgs;
import com.pulumi.policypacks.aws.lex.inputs.IntentDialogCodeHookArgs;
import com.pulumi.policypacks.aws.lex.inputs.IntentFollowUpPromptArgs;
import com.pulumi.policypacks.aws.lex.inputs.IntentFulfillmentActivityArgs;
import com.pulumi.policypacks.aws.lex.inputs.IntentRejectionStatementArgs;
import com.pulumi.policypacks.aws.lex.inputs.IntentSlotArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lex/intent:Intent")
public final class IntentArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The statement that you want Amazon Lex to convey to the user
     * after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
     * you provide a Lambda function in the `fulfillment_activity`. If you return the intent to the client
     * application, you can&#39;t specify this element. The `follow_up_prompt` and `conclusion_statement` are
     * mutually exclusive. You can specify only one. Attributes are documented under statement.
     * 
     */
    @PolicyResourceProperty(name="conclusionStatement", flag="unknown_conclusionStatement")
    private IntentConclusionStatementArgs value_conclusionStatement;
    private boolean unknown_conclusionStatement;
    public IntentConclusionStatementArgs conclusionStatement() {
        if (!unknown_conclusionStatement) return value_conclusionStatement;
        throw new UndeferrableValueException("Value 'IntentArgs.conclusionStatement' is not present");
    }

    /**
     * Prompts the user to confirm the intent. This question should
     * have a yes or no answer. You you must provide both the `rejection_statement` and `confirmation_prompt`,
     * or neither. Attributes are documented under prompt.
     * 
     */
    @PolicyResourceProperty(name="confirmationPrompt", flag="unknown_confirmationPrompt")
    private IntentConfirmationPromptArgs value_confirmationPrompt;
    private boolean unknown_confirmationPrompt;
    public IntentConfirmationPromptArgs confirmationPrompt() {
        if (!unknown_confirmationPrompt) return value_confirmationPrompt;
        throw new UndeferrableValueException("Value 'IntentArgs.confirmationPrompt' is not present");
    }

    /**
     * Determines if a new slot type version is created when the initial
     * resource is created and on each update. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="createVersion", flag="unknown_createVersion")
    private Boolean value_createVersion;
    private boolean unknown_createVersion;
    public Boolean createVersion() {
        if (!unknown_createVersion) return value_createVersion;
        throw new UndeferrableValueException("Value 'IntentArgs.createVersion' is not present");
    }

    /**
     * A description of the intent. Must be less than or equal to 200 characters in length.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'IntentArgs.description' is not present");
    }

    /**
     * Specifies a Lambda function to invoke for each user input. You can
     * invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
     * 
     */
    @PolicyResourceProperty(name="dialogCodeHook", flag="unknown_dialogCodeHook")
    private IntentDialogCodeHookArgs value_dialogCodeHook;
    private boolean unknown_dialogCodeHook;
    public IntentDialogCodeHookArgs dialogCodeHook() {
        if (!unknown_dialogCodeHook) return value_dialogCodeHook;
        throw new UndeferrableValueException("Value 'IntentArgs.dialogCodeHook' is not present");
    }

    /**
     * Amazon Lex uses this prompt to solicit additional activity after
     * fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
     * user to order a drink. The `follow_up_prompt` field and the `conclusion_statement` field are mutually
     * exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
     * 
     */
    @PolicyResourceProperty(name="followUpPrompt", flag="unknown_followUpPrompt")
    private IntentFollowUpPromptArgs value_followUpPrompt;
    private boolean unknown_followUpPrompt;
    public IntentFollowUpPromptArgs followUpPrompt() {
        if (!unknown_followUpPrompt) return value_followUpPrompt;
        throw new UndeferrableValueException("Value 'IntentArgs.followUpPrompt' is not present");
    }

    /**
     * Describes how the intent is fulfilled. For example, after a
     * user provides all of the information for a pizza order, `fulfillment_activity` defines how the bot
     * places an order with a local pizza store. Attributes are documented under fulfillment_activity.
     * 
     */
    @PolicyResourceProperty(name="fulfillmentActivity", flag="unknown_fulfillmentActivity")
    private IntentFulfillmentActivityArgs value_fulfillmentActivity;
    private boolean unknown_fulfillmentActivity;
    public IntentFulfillmentActivityArgs fulfillmentActivity() {
        if (!unknown_fulfillmentActivity) return value_fulfillmentActivity;
        throw new UndeferrableValueException("Value 'IntentArgs.fulfillmentActivity' is not present");
    }

    /**
     * The name of the intent, not case sensitive. Must be less than or equal to 100 characters in length.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'IntentArgs.name' is not present");
    }

    /**
     * A unique identifier for the built-in intent to base this
     * intent on. To find the signature for an intent, see
     * [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
     * in the Alexa Skills Kit.
     * 
     */
    @PolicyResourceProperty(name="parentIntentSignature", flag="unknown_parentIntentSignature")
    private String value_parentIntentSignature;
    private boolean unknown_parentIntentSignature;
    public String parentIntentSignature() {
        if (!unknown_parentIntentSignature) return value_parentIntentSignature;
        throw new UndeferrableValueException("Value 'IntentArgs.parentIntentSignature' is not present");
    }

    /**
     * When the user answers &#34;no&#34; to the question defined in
     * `confirmation_prompt`, Amazon Lex responds with this statement to acknowledge that the intent was
     * canceled. You must provide both the `rejection_statement` and the `confirmation_prompt`, or neither.
     * Attributes are documented under statement.
     * 
     */
    @PolicyResourceProperty(name="rejectionStatement", flag="unknown_rejectionStatement")
    private IntentRejectionStatementArgs value_rejectionStatement;
    private boolean unknown_rejectionStatement;
    public IntentRejectionStatementArgs rejectionStatement() {
        if (!unknown_rejectionStatement) return value_rejectionStatement;
        throw new UndeferrableValueException("Value 'IntentArgs.rejectionStatement' is not present");
    }

    /**
     * An array of utterances (strings) that a user might say to signal
     * the intent. For example, &#34;I want {PizzaSize} pizza&#34;, &#34;Order {Quantity} {PizzaSize} pizzas&#34;.
     * In each utterance, a slot name is enclosed in curly braces. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
     * 
     */
    @PolicyResourceProperty(name="sampleUtterances", flag="unknown_sampleUtterances")
    private List<String> value_sampleUtterances;
    private boolean unknown_sampleUtterances;
    public List<String> sampleUtterances() {
        if (!unknown_sampleUtterances) return value_sampleUtterances;
        throw new UndeferrableValueException("Value 'IntentArgs.sampleUtterances' is not present");
    }

    /**
     * An list of intent slots. At runtime, Amazon Lex elicits required slot values
     * from the user using prompts defined in the slots. Attributes are documented under slot.
     * 
     */
    @PolicyResourceProperty(name="slots", flag="unknown_slots")
    private List<IntentSlotArgs> value_slots;
    private boolean unknown_slots;
    public List<IntentSlotArgs> slots() {
        if (!unknown_slots) return value_slots;
        throw new UndeferrableValueException("Value 'IntentArgs.slots' is not present");
    }

}
