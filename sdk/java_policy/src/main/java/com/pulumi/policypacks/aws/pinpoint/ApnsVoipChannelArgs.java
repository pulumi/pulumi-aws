// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.pinpoint;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:pinpoint/apnsVoipChannel:ApnsVoipChannel")
public final class ApnsVoipChannelArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The application ID.
     * 
     */
    private UndeferrableValue<String> applicationId;

    public String applicationId() {
        if (applicationId == null) return null;
        return applicationId.getValue("ApnsVoipChannelArgs.applicationId");
    }

    /**
     * The ID assigned to your iOS app. To find this value, choose Certificates, IDs &amp; Profiles, choose App IDs in the Identifiers section, and choose your app.
     * 
     */
    private UndeferrableValue<String> bundleId;

    public String bundleId() {
        if (bundleId == null) return null;
        return bundleId.getValue("ApnsVoipChannelArgs.bundleId");
    }

    /**
     * The pem encoded TLS Certificate from Apple.
     * 
     */
    private UndeferrableValue<String> certificate;

    public String certificate() {
        if (certificate == null) return null;
        return certificate.getValue("ApnsVoipChannelArgs.certificate");
    }

    /**
     * The default authentication method used for APNs.
     * __NOTE__: Amazon Pinpoint uses this default for every APNs push notification that you send using the console.
     * You can override the default when you send a message programmatically using the Amazon Pinpoint API, the AWS CLI, or an AWS SDK.
     * If your default authentication type fails, Amazon Pinpoint doesn&#39;t attempt to use the other authentication type.
     * 
     * One of the following sets of credentials is also required.
     * 
     * If you choose to use __Certificate credentials__ you will have to provide:
     * 
     */
    private UndeferrableValue<String> defaultAuthenticationMethod;

    public String defaultAuthenticationMethod() {
        if (defaultAuthenticationMethod == null) return null;
        return defaultAuthenticationMethod.getValue("ApnsVoipChannelArgs.defaultAuthenticationMethod");
    }

    /**
     * Whether the channel is enabled or disabled. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> enabled;

    public Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("ApnsVoipChannelArgs.enabled");
    }

    /**
     * The Certificate Private Key file (ie. `.key` file).
     * 
     * If you choose to use __Key credentials__ you will have to provide:
     * 
     */
    private UndeferrableValue<String> privateKey;

    public String privateKey() {
        if (privateKey == null) return null;
        return privateKey.getValue("ApnsVoipChannelArgs.privateKey");
    }

    /**
     * The ID assigned to your Apple developer account team. This value is provided on the Membership page.
     * 
     */
    private UndeferrableValue<String> teamId;

    public String teamId() {
        if (teamId == null) return null;
        return teamId.getValue("ApnsVoipChannelArgs.teamId");
    }

    /**
     * The `.p8` file that you download from your Apple developer account when you create an authentication key.
     * 
     */
    private UndeferrableValue<String> tokenKey;

    public String tokenKey() {
        if (tokenKey == null) return null;
        return tokenKey.getValue("ApnsVoipChannelArgs.tokenKey");
    }

    /**
     * The ID assigned to your signing key. To find this value, choose Certificates, IDs &amp; Profiles, and choose your key in the Keys section.
     * 
     */
    private UndeferrableValue<String> tokenKeyId;

    public String tokenKeyId() {
        if (tokenKeyId == null) return null;
        return tokenKeyId.getValue("ApnsVoipChannelArgs.tokenKeyId");
    }

}
