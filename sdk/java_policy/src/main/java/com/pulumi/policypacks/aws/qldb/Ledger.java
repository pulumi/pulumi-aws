// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.qldb;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:qldb/ledger:Ledger")
public final class Ledger extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the QLDB Ledger
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Ledger.arn' is not present");
    }

    /**
     * The deletion protection for the QLDB Ledger instance. By default it is `true`. To delete this resource via the provider, this value must be configured to `false` and applied first before attempting deletion.
     * 
     */
    @PolicyResourceProperty(name="deletionProtection", flag="unknown_deletionProtection")
    private @Nullable Boolean value_deletionProtection;
    private boolean unknown_deletionProtection;
    public @Nullable Boolean deletionProtection() {
        if (!unknown_deletionProtection) return value_deletionProtection;
        throw new UndeferrableValueException("Value 'Ledger.deletionProtection' is not present");
    }

    /**
     * The key in AWS Key Management Service (AWS KMS) to use for encryption of data at rest in the ledger. For more information, see the [AWS documentation](https://docs.aws.amazon.com/qldb/latest/developerguide/encryption-at-rest.html). Valid values are `&#34;AWS_OWNED_KMS_KEY&#34;` to use an AWS KMS key that is owned and managed by AWS on your behalf, or the ARN of a valid symmetric customer managed KMS key.
     * 
     */
    @PolicyResourceProperty(name="kmsKey", flag="unknown_kmsKey")
    private String value_kmsKey;
    private boolean unknown_kmsKey;
    public String kmsKey() {
        if (!unknown_kmsKey) return value_kmsKey;
        throw new UndeferrableValueException("Value 'Ledger.kmsKey' is not present");
    }

    /**
     * The friendly name for the QLDB Ledger instance. By default generated by the provider.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Ledger.name' is not present");
    }

    /**
     * The permissions mode for the QLDB ledger instance. Specify either `ALLOW_ALL` or `STANDARD`.
     * 
     */
    @PolicyResourceProperty(name="permissionsMode", flag="unknown_permissionsMode")
    private String value_permissionsMode;
    private boolean unknown_permissionsMode;
    public String permissionsMode() {
        if (!unknown_permissionsMode) return value_permissionsMode;
        throw new UndeferrableValueException("Value 'Ledger.permissionsMode' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Ledger.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Ledger.tagsAll' is not present");
    }

}
