// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codegurureviewer;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.codegurureviewer.outputs.RepositoryAssociationKmsKeyDetails;
import com.pulumi.policypacks.aws.codegurureviewer.outputs.RepositoryAssociationRepository;
import com.pulumi.policypacks.aws.codegurureviewer.outputs.RepositoryAssociationS3RepositoryDetail;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:codegurureviewer/repositoryAssociation:RepositoryAssociation")
public final class RepositoryAssociation extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) identifying the repository association.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.arn' is not present");
    }

    /**
     * The ID of the repository association.
     * 
     */
    @PolicyResourceProperty(name="associationId", flag="unknown_associationId")
    private String value_associationId;
    private boolean unknown_associationId;
    public String associationId() {
        if (!unknown_associationId) return value_associationId;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.associationId' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
     * 
     */
    @PolicyResourceProperty(name="connectionArn", flag="unknown_connectionArn")
    private String value_connectionArn;
    private boolean unknown_connectionArn;
    public String connectionArn() {
        if (!unknown_connectionArn) return value_connectionArn;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.connectionArn' is not present");
    }

    /**
     * An object describing the KMS key to asssociate. Block is documented below.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyDetails", flag="unknown_kmsKeyDetails")
    private @Nullable RepositoryAssociationKmsKeyDetails value_kmsKeyDetails;
    private boolean unknown_kmsKeyDetails;
    public @Nullable RepositoryAssociationKmsKeyDetails kmsKeyDetails() {
        if (!unknown_kmsKeyDetails) return value_kmsKeyDetails;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.kmsKeyDetails' is not present");
    }

    /**
     * The name of the repository.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.name' is not present");
    }

    /**
     * The owner of the repository.
     * 
     */
    @PolicyResourceProperty(name="owner", flag="unknown_owner")
    private String value_owner;
    private boolean unknown_owner;
    public String owner() {
        if (!unknown_owner) return value_owner;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.owner' is not present");
    }

    /**
     * The provider type of the repository association.
     * 
     */
    @PolicyResourceProperty(name="providerType", flag="unknown_providerType")
    private String value_providerType;
    private boolean unknown_providerType;
    public String providerType() {
        if (!unknown_providerType) return value_providerType;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.providerType' is not present");
    }

    /**
     * An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `github_enterprise_server`, or `s3_bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `github_enterprise_server`) the connection must be in `Available` status prior to creating this resource.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="repository", flag="unknown_repository")
    private RepositoryAssociationRepository value_repository;
    private boolean unknown_repository;
    public RepositoryAssociationRepository repository() {
        if (!unknown_repository) return value_repository;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.repository' is not present");
    }

    @PolicyResourceProperty(name="s3RepositoryDetails", flag="unknown_s3RepositoryDetails")
    private List<RepositoryAssociationS3RepositoryDetail> value_s3RepositoryDetails;
    private boolean unknown_s3RepositoryDetails;
    public List<RepositoryAssociationS3RepositoryDetail> s3RepositoryDetails() {
        if (!unknown_s3RepositoryDetails) return value_s3RepositoryDetails;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.s3RepositoryDetails' is not present");
    }

    /**
     * The state of the repository association.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private String value_state;
    private boolean unknown_state;
    public String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.state' is not present");
    }

    /**
     * A description of why the repository association is in the current state.
     * 
     */
    @PolicyResourceProperty(name="stateReason", flag="unknown_stateReason")
    private String value_stateReason;
    private boolean unknown_stateReason;
    public String stateReason() {
        if (!unknown_stateReason) return value_stateReason;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.stateReason' is not present");
    }

    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'RepositoryAssociation.tagsAll' is not present");
    }

}
