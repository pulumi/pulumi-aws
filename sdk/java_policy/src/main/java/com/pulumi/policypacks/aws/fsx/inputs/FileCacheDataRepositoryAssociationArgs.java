// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.fsx.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.fsx.inputs.FileCacheDataRepositoryAssociationNfArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class FileCacheDataRepositoryAssociationArgs {

    @PolicyResourceProperty(name="associationId", flag="unknown_associationId")
    private String value_associationId;
    private boolean unknown_associationId;
    public String associationId() {
        if (!unknown_associationId) return value_associationId;
        throw new UndeferrableValueException("Value 'FileCacheDataRepositoryAssociationArgs.associationId' is not present");
    }

    /**
     * The path to the S3 or NFS data repository that links to the cache.
     * 
     */
    @PolicyResourceProperty(name="dataRepositoryPath", flag="unknown_dataRepositoryPath")
    private String value_dataRepositoryPath;
    private boolean unknown_dataRepositoryPath;
    public String dataRepositoryPath() {
        if (!unknown_dataRepositoryPath) return value_dataRepositoryPath;
        throw new UndeferrableValueException("Value 'FileCacheDataRepositoryAssociationArgs.dataRepositoryPath' is not present");
    }

    /**
     * A list of NFS Exports that will be linked with this data repository association. The Export paths are in the format /exportpath1. To use this parameter, you must configure DataRepositoryPath as the domain name of the NFS file system. The NFS file system domain name in effect is the root of the subdirectories. Note that DataRepositorySubdirectories is not supported for S3 data repositories. Max of 500.
     * 
     */
    @PolicyResourceProperty(name="dataRepositorySubdirectories", flag="unknown_dataRepositorySubdirectories")
    private List<String> value_dataRepositorySubdirectories;
    private boolean unknown_dataRepositorySubdirectories;
    public List<String> dataRepositorySubdirectories() {
        if (!unknown_dataRepositorySubdirectories) return value_dataRepositorySubdirectories;
        throw new UndeferrableValueException("Value 'FileCacheDataRepositoryAssociationArgs.dataRepositorySubdirectories' is not present");
    }

    /**
     * The system-generated, unique ID of the cache.
     * 
     */
    @PolicyResourceProperty(name="fileCacheId", flag="unknown_fileCacheId")
    private String value_fileCacheId;
    private boolean unknown_fileCacheId;
    public String fileCacheId() {
        if (!unknown_fileCacheId) return value_fileCacheId;
        throw new UndeferrableValueException("Value 'FileCacheDataRepositoryAssociationArgs.fileCacheId' is not present");
    }

    /**
     * A path on the cache that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with DataRepositoryPath. The leading forward slash in the name is required. Two data repository associations cannot have overlapping cache paths. For example, if a data repository is associated with cache path /ns1/, then you cannot link another data repository with cache path /ns1/ns2. This path specifies where in your cache files will be exported from. This cache directory can be linked to only one data repository, and no data repository other can be linked to the directory. Note: The cache path can only be set to root (/) on an NFS DRA when DataRepositorySubdirectories is specified. If you specify root (/) as the cache path, you can create only one DRA on the cache. The cache path cannot be set to root (/) for an S3 DRA.
     * 
     */
    @PolicyResourceProperty(name="fileCachePath", flag="unknown_fileCachePath")
    private String value_fileCachePath;
    private boolean unknown_fileCachePath;
    public String fileCachePath() {
        if (!unknown_fileCachePath) return value_fileCachePath;
        throw new UndeferrableValueException("Value 'FileCacheDataRepositoryAssociationArgs.fileCachePath' is not present");
    }

    @PolicyResourceProperty(name="fileSystemId", flag="unknown_fileSystemId")
    private String value_fileSystemId;
    private boolean unknown_fileSystemId;
    public String fileSystemId() {
        if (!unknown_fileSystemId) return value_fileSystemId;
        throw new UndeferrableValueException("Value 'FileCacheDataRepositoryAssociationArgs.fileSystemId' is not present");
    }

    @PolicyResourceProperty(name="fileSystemPath", flag="unknown_fileSystemPath")
    private String value_fileSystemPath;
    private boolean unknown_fileSystemPath;
    public String fileSystemPath() {
        if (!unknown_fileSystemPath) return value_fileSystemPath;
        throw new UndeferrableValueException("Value 'FileCacheDataRepositoryAssociationArgs.fileSystemPath' is not present");
    }

    @PolicyResourceProperty(name="importedFileChunkSize", flag="unknown_importedFileChunkSize")
    private Integer value_importedFileChunkSize;
    private boolean unknown_importedFileChunkSize;
    public Integer importedFileChunkSize() {
        if (!unknown_importedFileChunkSize) return value_importedFileChunkSize;
        throw new UndeferrableValueException("Value 'FileCacheDataRepositoryAssociationArgs.importedFileChunkSize' is not present");
    }

    /**
     * (Optional) See the `nfs` configuration block.
     * 
     */
    @PolicyResourceProperty(name="nfs", flag="unknown_nfs")
    private List<FileCacheDataRepositoryAssociationNfArgs> value_nfs;
    private boolean unknown_nfs;
    public List<FileCacheDataRepositoryAssociationNfArgs> nfs() {
        if (!unknown_nfs) return value_nfs;
        throw new UndeferrableValueException("Value 'FileCacheDataRepositoryAssociationArgs.nfs' is not present");
    }

    @PolicyResourceProperty(name="resourceArn", flag="unknown_resourceArn")
    private String value_resourceArn;
    private boolean unknown_resourceArn;
    public String resourceArn() {
        if (!unknown_resourceArn) return value_resourceArn;
        throw new UndeferrableValueException("Value 'FileCacheDataRepositoryAssociationArgs.resourceArn' is not present");
    }

    /**
     * A map of tags to assign to the file cache. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'FileCacheDataRepositoryAssociationArgs.tags' is not present");
    }

}
