// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.redshift;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:redshift/dataShareConsumerAssociation:DataShareConsumerAssociation")
public final class DataShareConsumerAssociation extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Whether to allow write operations for a datashare.
     * 
     */
    @PolicyResourceProperty(name="allowWrites", flag="unknown_allowWrites")
    private @Nullable Boolean value_allowWrites;
    private boolean unknown_allowWrites;
    public @Nullable Boolean allowWrites() {
        if (!unknown_allowWrites) return value_allowWrites;
        throw new UndeferrableValueException("Value 'DataShareConsumerAssociation.allowWrites' is not present");
    }

    /**
     * Whether the datashare is associated with the entire account. Conflicts with `consumer_arn` and `consumer_region`.
     * 
     */
    @PolicyResourceProperty(name="associateEntireAccount", flag="unknown_associateEntireAccount")
    private @Nullable Boolean value_associateEntireAccount;
    private boolean unknown_associateEntireAccount;
    public @Nullable Boolean associateEntireAccount() {
        if (!unknown_associateEntireAccount) return value_associateEntireAccount;
        throw new UndeferrableValueException("Value 'DataShareConsumerAssociation.associateEntireAccount' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the consumer that is associated with the datashare. Conflicts with `associate_entire_account` and `consumer_region`.
     * 
     */
    @PolicyResourceProperty(name="consumerArn", flag="unknown_consumerArn")
    private @Nullable String value_consumerArn;
    private boolean unknown_consumerArn;
    public @Nullable String consumerArn() {
        if (!unknown_consumerArn) return value_consumerArn;
        throw new UndeferrableValueException("Value 'DataShareConsumerAssociation.consumerArn' is not present");
    }

    /**
     * From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified AWS Region. Conflicts with `associate_entire_account` and `consumer_arn`.
     * 
     */
    @PolicyResourceProperty(name="consumerRegion", flag="unknown_consumerRegion")
    private @Nullable String value_consumerRegion;
    private boolean unknown_consumerRegion;
    public @Nullable String consumerRegion() {
        if (!unknown_consumerRegion) return value_consumerRegion;
        throw new UndeferrableValueException("Value 'DataShareConsumerAssociation.consumerRegion' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="dataShareArn", flag="unknown_dataShareArn")
    private String value_dataShareArn;
    private boolean unknown_dataShareArn;
    public String dataShareArn() {
        if (!unknown_dataShareArn) return value_dataShareArn;
        throw new UndeferrableValueException("Value 'DataShareConsumerAssociation.dataShareArn' is not present");
    }

    /**
     * Identifier of a datashare to show its managing entity.
     * 
     */
    @PolicyResourceProperty(name="managedBy", flag="unknown_managedBy")
    private String value_managedBy;
    private boolean unknown_managedBy;
    public String managedBy() {
        if (!unknown_managedBy) return value_managedBy;
        throw new UndeferrableValueException("Value 'DataShareConsumerAssociation.managedBy' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the producer.
     * 
     */
    @PolicyResourceProperty(name="producerArn", flag="unknown_producerArn")
    private String value_producerArn;
    private boolean unknown_producerArn;
    public String producerArn() {
        if (!unknown_producerArn) return value_producerArn;
        throw new UndeferrableValueException("Value 'DataShareConsumerAssociation.producerArn' is not present");
    }

}
