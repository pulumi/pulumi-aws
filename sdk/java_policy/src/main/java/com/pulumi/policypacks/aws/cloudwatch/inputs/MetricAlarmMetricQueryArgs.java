// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.cloudwatch.inputs.MetricAlarmMetricQueryMetricArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class MetricAlarmMetricQueryArgs {

    /**
     * The ID of the account where the metrics are located, if this is a cross-account alarm.
     * 
     */
    private UndeferrableValue<String> accountId;

    public String accountId() {
        if (accountId == null) return null;
        return accountId.getValue("MetricAlarmMetricQueryArgs.accountId");
    }

    /**
     * The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
     * 
     */
    private UndeferrableValue<String> expression;

    public String expression() {
        if (expression == null) return null;
        return expression.getValue("MetricAlarmMetricQueryArgs.expression");
    }

    /**
     * A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
     * 
     */
    private UndeferrableValue<String> id;

    public String id() {
        if (id == null) return null;
        return id.getValue("MetricAlarmMetricQueryArgs.id");
    }

    /**
     * A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
     * 
     */
    private UndeferrableValue<String> label;

    public String label() {
        if (label == null) return null;
        return label.getValue("MetricAlarmMetricQueryArgs.label");
    }

    /**
     * The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
     * 
     */
    private UndeferrableValue<MetricAlarmMetricQueryMetricArgs> metric;

    public MetricAlarmMetricQueryMetricArgs metric() {
        if (metric == null) return null;
        return metric.getValue("MetricAlarmMetricQueryArgs.metric");
    }

    /**
     * Granularity in seconds of returned data points.
     * For metrics with regular resolution, valid values are any multiple of `60`.
     * For high-resolution metrics, valid values are `1`, `5`, `10`, `30`, or any multiple of `60`.
     * 
     */
    private UndeferrableValue<Integer> period;

    public Integer period() {
        if (period == null) return null;
        return period.getValue("MetricAlarmMetricQueryArgs.period");
    }

    /**
     * Specify exactly one `metric_query` to be `true` to use that `metric_query` result as the alarm.
     * 
     * &gt; **NOTE:**  You must specify either `metric` or `expression`. Not both.
     * 
     */
    private UndeferrableValue<Boolean> returnData;

    public Boolean returnData() {
        if (returnData == null) return null;
        return returnData.getValue("MetricAlarmMetricQueryArgs.returnData");
    }

}
