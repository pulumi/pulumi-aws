// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.amplify;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.amplify.inputs.DomainAssociationCertificateSettingsArgs;
import com.pulumi.policypacks.aws.amplify.inputs.DomainAssociationSubDomainArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:amplify/domainAssociation:DomainAssociation")
public final class DomainAssociationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Unique ID for an Amplify app.
     * 
     */
    private UndeferrableValue<String> appId;

    public String appId() {
        if (appId == null) return null;
        return appId.getValue("DomainAssociationArgs.appId");
    }

    /**
     * The type of SSL/TLS certificate to use for your custom domain. If you don&#39;t specify a certificate type, Amplify uses the default certificate that it provisions and manages for you.
     * 
     */
    private UndeferrableValue<DomainAssociationCertificateSettingsArgs> certificateSettings;

    public DomainAssociationCertificateSettingsArgs certificateSettings() {
        if (certificateSettings == null) return null;
        return certificateSettings.getValue("DomainAssociationArgs.certificateSettings");
    }

    /**
     * Domain name for the domain association.
     * 
     */
    private UndeferrableValue<String> domainName;

    public String domainName() {
        if (domainName == null) return null;
        return domainName.getValue("DomainAssociationArgs.domainName");
    }

    /**
     * Enables the automated creation of subdomains for branches.
     * 
     */
    private UndeferrableValue<Boolean> enableAutoSubDomain;

    public Boolean enableAutoSubDomain() {
        if (enableAutoSubDomain == null) return null;
        return enableAutoSubDomain.getValue("DomainAssociationArgs.enableAutoSubDomain");
    }

    /**
     * Setting for the subdomain. Documented below.
     * 
     */
    private UndeferrableValue<List<DomainAssociationSubDomainArgs>> subDomains;

    public List<DomainAssociationSubDomainArgs> subDomains() {
        if (subDomains == null) return null;
        return subDomains.getValue("DomainAssociationArgs.subDomains");
    }

    /**
     * If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
     * 
     */
    private UndeferrableValue<Boolean> waitForVerification;

    public Boolean waitForVerification() {
        if (waitForVerification == null) return null;
        return waitForVerification.getValue("DomainAssociationArgs.waitForVerification");
    }

}
