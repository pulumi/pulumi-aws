// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.efs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.List;


@PolicyResourceType(type="aws:efs/mountTarget:MountTarget")
public final class MountTarget extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The unique and consistent identifier of the Availability Zone (AZ) that the mount target resides in.
     * 
     */
    @PolicyResourceProperty(name="availabilityZoneId", flag="unknown_availabilityZoneId")
    private String value_availabilityZoneId;
    private boolean unknown_availabilityZoneId;
    public String availabilityZoneId() {
        if (!unknown_availabilityZoneId) return value_availabilityZoneId;
        throw new UndeferrableValueException("Value 'MountTarget.availabilityZoneId' is not present");
    }

    /**
     * The name of the Availability Zone (AZ) that the mount target resides in.
     * 
     */
    @PolicyResourceProperty(name="availabilityZoneName", flag="unknown_availabilityZoneName")
    private String value_availabilityZoneName;
    private boolean unknown_availabilityZoneName;
    public String availabilityZoneName() {
        if (!unknown_availabilityZoneName) return value_availabilityZoneName;
        throw new UndeferrableValueException("Value 'MountTarget.availabilityZoneName' is not present");
    }

    /**
     * The DNS name for the EFS file system.
     * 
     */
    @PolicyResourceProperty(name="dnsName", flag="unknown_dnsName")
    private String value_dnsName;
    private boolean unknown_dnsName;
    public String dnsName() {
        if (!unknown_dnsName) return value_dnsName;
        throw new UndeferrableValueException("Value 'MountTarget.dnsName' is not present");
    }

    /**
     * Amazon Resource Name of the file system.
     * 
     */
    @PolicyResourceProperty(name="fileSystemArn", flag="unknown_fileSystemArn")
    private String value_fileSystemArn;
    private boolean unknown_fileSystemArn;
    public String fileSystemArn() {
        if (!unknown_fileSystemArn) return value_fileSystemArn;
        throw new UndeferrableValueException("Value 'MountTarget.fileSystemArn' is not present");
    }

    /**
     * The ID of the file system for which the mount target is intended.
     * 
     */
    @PolicyResourceProperty(name="fileSystemId", flag="unknown_fileSystemId")
    private String value_fileSystemId;
    private boolean unknown_fileSystemId;
    public String fileSystemId() {
        if (!unknown_fileSystemId) return value_fileSystemId;
        throw new UndeferrableValueException("Value 'MountTarget.fileSystemId' is not present");
    }

    /**
     * The address (within the address range of the specified subnet) at
     * which the file system may be mounted via the mount target.
     * 
     */
    @PolicyResourceProperty(name="ipAddress", flag="unknown_ipAddress")
    private String value_ipAddress;
    private boolean unknown_ipAddress;
    public String ipAddress() {
        if (!unknown_ipAddress) return value_ipAddress;
        throw new UndeferrableValueException("Value 'MountTarget.ipAddress' is not present");
    }

    /**
     * The DNS name for the given subnet/AZ per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
     * 
     */
    @PolicyResourceProperty(name="mountTargetDnsName", flag="unknown_mountTargetDnsName")
    private String value_mountTargetDnsName;
    private boolean unknown_mountTargetDnsName;
    public String mountTargetDnsName() {
        if (!unknown_mountTargetDnsName) return value_mountTargetDnsName;
        throw new UndeferrableValueException("Value 'MountTarget.mountTargetDnsName' is not present");
    }

    /**
     * The ID of the network interface that Amazon EFS created when it created the mount target.
     * 
     */
    @PolicyResourceProperty(name="networkInterfaceId", flag="unknown_networkInterfaceId")
    private String value_networkInterfaceId;
    private boolean unknown_networkInterfaceId;
    public String networkInterfaceId() {
        if (!unknown_networkInterfaceId) return value_networkInterfaceId;
        throw new UndeferrableValueException("Value 'MountTarget.networkInterfaceId' is not present");
    }

    /**
     * AWS account ID that owns the resource.
     * 
     */
    @PolicyResourceProperty(name="ownerId", flag="unknown_ownerId")
    private String value_ownerId;
    private boolean unknown_ownerId;
    public String ownerId() {
        if (!unknown_ownerId) return value_ownerId;
        throw new UndeferrableValueException("Value 'MountTarget.ownerId' is not present");
    }

    /**
     * A list of up to 5 VPC security group IDs (that must
     * be for the same VPC as subnet specified) in effect for the mount target.
     * 
     */
    @PolicyResourceProperty(name="securityGroups", flag="unknown_securityGroups")
    private List<String> value_securityGroups;
    private boolean unknown_securityGroups;
    public List<String> securityGroups() {
        if (!unknown_securityGroups) return value_securityGroups;
        throw new UndeferrableValueException("Value 'MountTarget.securityGroups' is not present");
    }

    /**
     * The ID of the subnet to add the mount target in.
     * 
     */
    @PolicyResourceProperty(name="subnetId", flag="unknown_subnetId")
    private String value_subnetId;
    private boolean unknown_subnetId;
    public String subnetId() {
        if (!unknown_subnetId) return value_subnetId;
        throw new UndeferrableValueException("Value 'MountTarget.subnetId' is not present");
    }

}
