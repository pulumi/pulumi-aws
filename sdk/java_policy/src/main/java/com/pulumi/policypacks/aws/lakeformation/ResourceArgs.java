// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lakeformation;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lakeformation/resource:Resource")
public final class ResourceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Amazon Resource Name (ARN) of the resource.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ResourceArgs.arn' is not present");
    }

    /**
     * Flag to enable AWS LakeFormation hybrid access permission mode.
     * 
     * &gt; **NOTE:** AWS does not support registering an S3 location with an IAM role and subsequently updating the S3 location registration to a service-linked role.
     * 
     */
    @PolicyResourceProperty(name="hybridAccessEnabled", flag="unknown_hybridAccessEnabled")
    private Boolean value_hybridAccessEnabled;
    private boolean unknown_hybridAccessEnabled;
    public Boolean hybridAccessEnabled() {
        if (!unknown_hybridAccessEnabled) return value_hybridAccessEnabled;
        throw new UndeferrableValueException("Value 'ResourceArgs.hybridAccessEnabled' is not present");
    }

    /**
     * Role that has read/write access to the resource.
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'ResourceArgs.roleArn' is not present");
    }

    /**
     * Designates an AWS Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog.
     * 
     */
    @PolicyResourceProperty(name="useServiceLinkedRole", flag="unknown_useServiceLinkedRole")
    private Boolean value_useServiceLinkedRole;
    private boolean unknown_useServiceLinkedRole;
    public Boolean useServiceLinkedRole() {
        if (!unknown_useServiceLinkedRole) return value_useServiceLinkedRole;
        throw new UndeferrableValueException("Value 'ResourceArgs.useServiceLinkedRole' is not present");
    }

    @PolicyResourceProperty(name="withFederation", flag="unknown_withFederation")
    private Boolean value_withFederation;
    private boolean unknown_withFederation;
    public Boolean withFederation() {
        if (!unknown_withFederation) return value_withFederation;
        throw new UndeferrableValueException("Value 'ResourceArgs.withFederation' is not present");
    }

}
