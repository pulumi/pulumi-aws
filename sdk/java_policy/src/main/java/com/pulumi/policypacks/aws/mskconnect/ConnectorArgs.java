// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.mskconnect;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.mskconnect.inputs.ConnectorCapacityArgs;
import com.pulumi.policypacks.aws.mskconnect.inputs.ConnectorKafkaClusterArgs;
import com.pulumi.policypacks.aws.mskconnect.inputs.ConnectorKafkaClusterClientAuthenticationArgs;
import com.pulumi.policypacks.aws.mskconnect.inputs.ConnectorKafkaClusterEncryptionInTransitArgs;
import com.pulumi.policypacks.aws.mskconnect.inputs.ConnectorLogDeliveryArgs;
import com.pulumi.policypacks.aws.mskconnect.inputs.ConnectorPluginArgs;
import com.pulumi.policypacks.aws.mskconnect.inputs.ConnectorWorkerConfigurationArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:mskconnect/connector:Connector")
public final class ConnectorArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Information about the capacity allocated to the connector. See `capacity` Block for details.
     * 
     */
    private UndeferrableValue<ConnectorCapacityArgs> capacity;

    public ConnectorCapacityArgs capacity() {
        if (capacity == null) return null;
        return capacity.getValue("ConnectorArgs.capacity");
    }

    /**
     * A map of keys to values that represent the configuration for the connector.
     * 
     */
    private UndeferrableValue<Map<String,String>> connectorConfiguration;

    public Map<String,String> connectorConfiguration() {
        if (connectorConfiguration == null) return null;
        return connectorConfiguration.getValue("ConnectorArgs.connectorConfiguration");
    }

    /**
     * A summary description of the connector.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("ConnectorArgs.description");
    }

    /**
     * Specifies which Apache Kafka cluster to connect to. See `kafka_cluster` Block for details.
     * 
     */
    private UndeferrableValue<ConnectorKafkaClusterArgs> kafkaCluster;

    public ConnectorKafkaClusterArgs kafkaCluster() {
        if (kafkaCluster == null) return null;
        return kafkaCluster.getValue("ConnectorArgs.kafkaCluster");
    }

    /**
     * Details of the client authentication used by the Apache Kafka cluster. See `kafka_cluster_client_authentication` Block for details.
     * 
     */
    private UndeferrableValue<ConnectorKafkaClusterClientAuthenticationArgs> kafkaClusterClientAuthentication;

    public ConnectorKafkaClusterClientAuthenticationArgs kafkaClusterClientAuthentication() {
        if (kafkaClusterClientAuthentication == null) return null;
        return kafkaClusterClientAuthentication.getValue("ConnectorArgs.kafkaClusterClientAuthentication");
    }

    /**
     * Details of encryption in transit to the Apache Kafka cluster. See `kafka_cluster_encryption_in_transit` Block for details.
     * 
     */
    private UndeferrableValue<ConnectorKafkaClusterEncryptionInTransitArgs> kafkaClusterEncryptionInTransit;

    public ConnectorKafkaClusterEncryptionInTransitArgs kafkaClusterEncryptionInTransit() {
        if (kafkaClusterEncryptionInTransit == null) return null;
        return kafkaClusterEncryptionInTransit.getValue("ConnectorArgs.kafkaClusterEncryptionInTransit");
    }

    /**
     * The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster&#39;s version and the plugins.
     * 
     */
    private UndeferrableValue<String> kafkaconnectVersion;

    public String kafkaconnectVersion() {
        if (kafkaconnectVersion == null) return null;
        return kafkaconnectVersion.getValue("ConnectorArgs.kafkaconnectVersion");
    }

    /**
     * Details about log delivery. See `log_delivery` Block for details.
     * 
     */
    private UndeferrableValue<ConnectorLogDeliveryArgs> logDelivery;

    public ConnectorLogDeliveryArgs logDelivery() {
        if (logDelivery == null) return null;
        return logDelivery.getValue("ConnectorArgs.logDelivery");
    }

    /**
     * The name of the connector.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ConnectorArgs.name");
    }

    /**
     * Specifies which plugins to use for the connector. See `plugin` Block for details.
     * 
     */
    private UndeferrableValue<List<ConnectorPluginArgs>> plugins;

    public List<ConnectorPluginArgs> plugins() {
        if (plugins == null) return null;
        return plugins.getValue("ConnectorArgs.plugins");
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> serviceExecutionRoleArn;

    public String serviceExecutionRoleArn() {
        if (serviceExecutionRoleArn == null) return null;
        return serviceExecutionRoleArn.getValue("ConnectorArgs.serviceExecutionRoleArn");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ConnectorArgs.tags");
    }

    /**
     * Specifies which worker configuration to use with the connector. See `worker_configuration` Block for details.
     * 
     */
    private UndeferrableValue<ConnectorWorkerConfigurationArgs> workerConfiguration;

    public ConnectorWorkerConfigurationArgs workerConfiguration() {
        if (workerConfiguration == null) return null;
        return workerConfiguration.getValue("ConnectorArgs.workerConfiguration");
    }

}
