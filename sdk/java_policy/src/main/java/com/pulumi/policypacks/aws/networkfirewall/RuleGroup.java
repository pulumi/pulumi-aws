// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.networkfirewall;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.networkfirewall.outputs.RuleGroupEncryptionConfiguration;
import com.pulumi.policypacks.aws.networkfirewall.outputs.RuleGroupRuleGroup;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:networkfirewall/ruleGroup:RuleGroup")
public final class RuleGroup extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) that identifies the rule group.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'RuleGroup.arn' is not present");
    }

    /**
     * The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
     * 
     */
    @PolicyResourceProperty(name="capacity", flag="unknown_capacity")
    private Integer value_capacity;
    private boolean unknown_capacity;
    public Integer capacity() {
        if (!unknown_capacity) return value_capacity;
        throw new UndeferrableValueException("Value 'RuleGroup.capacity' is not present");
    }

    /**
     * A friendly description of the rule group.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'RuleGroup.description' is not present");
    }

    /**
     * KMS encryption configuration settings. See Encryption Configuration below for details.
     * 
     */
    @PolicyResourceProperty(name="encryptionConfiguration", flag="unknown_encryptionConfiguration")
    private @Nullable RuleGroupEncryptionConfiguration value_encryptionConfiguration;
    private boolean unknown_encryptionConfiguration;
    public @Nullable RuleGroupEncryptionConfiguration encryptionConfiguration() {
        if (!unknown_encryptionConfiguration) return value_encryptionConfiguration;
        throw new UndeferrableValueException("Value 'RuleGroup.encryptionConfiguration' is not present");
    }

    /**
     * A friendly name of the rule group.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'RuleGroup.name' is not present");
    }

    /**
     * A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
     * 
     */
    @PolicyResourceProperty(name="ruleGroup", flag="unknown_ruleGroup")
    private RuleGroupRuleGroup value_ruleGroup;
    private boolean unknown_ruleGroup;
    public RuleGroupRuleGroup ruleGroup() {
        if (!unknown_ruleGroup) return value_ruleGroup;
        throw new UndeferrableValueException("Value 'RuleGroup.ruleGroup' is not present");
    }

    /**
     * The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `rule_group` is specified.
     * 
     */
    @PolicyResourceProperty(name="rules", flag="unknown_rules")
    private @Nullable String value_rules;
    private boolean unknown_rules;
    public @Nullable String rules() {
        if (!unknown_rules) return value_rules;
        throw new UndeferrableValueException("Value 'RuleGroup.rules' is not present");
    }

    /**
     * A map of key:value pairs to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'RuleGroup.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'RuleGroup.tagsAll' is not present");
    }

    /**
     * Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'RuleGroup.type' is not present");
    }

    /**
     * A string token used when updating the rule group.
     * 
     */
    @PolicyResourceProperty(name="updateToken", flag="unknown_updateToken")
    private String value_updateToken;
    private boolean unknown_updateToken;
    public String updateToken() {
        if (!unknown_updateToken) return value_updateToken;
        throw new UndeferrableValueException("Value 'RuleGroup.updateToken' is not present");
    }

}
