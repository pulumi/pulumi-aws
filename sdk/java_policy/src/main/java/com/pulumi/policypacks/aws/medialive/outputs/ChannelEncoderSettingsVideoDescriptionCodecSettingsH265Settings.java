// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings {

    /**
     * Enables or disables adaptive quantization.
     * 
     */
    @PolicyResourceProperty(name="adaptiveQuantization", flag="unknown_adaptiveQuantization")
    private @Nullable String value_adaptiveQuantization;
    private boolean unknown_adaptiveQuantization;
    public @Nullable String adaptiveQuantization() {
        if (!unknown_adaptiveQuantization) return value_adaptiveQuantization;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.adaptiveQuantization' is not present");
    }

    /**
     * Indicates that AFD values will be written into the output stream.
     * 
     */
    @PolicyResourceProperty(name="afdSignaling", flag="unknown_afdSignaling")
    private @Nullable String value_afdSignaling;
    private boolean unknown_afdSignaling;
    public @Nullable String afdSignaling() {
        if (!unknown_afdSignaling) return value_afdSignaling;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.afdSignaling' is not present");
    }

    /**
     * Whether or not EML should insert an Alternative Transfer Function SEI message.
     * 
     */
    @PolicyResourceProperty(name="alternativeTransferFunction", flag="unknown_alternativeTransferFunction")
    private @Nullable String value_alternativeTransferFunction;
    private boolean unknown_alternativeTransferFunction;
    public @Nullable String alternativeTransferFunction() {
        if (!unknown_alternativeTransferFunction) return value_alternativeTransferFunction;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.alternativeTransferFunction' is not present");
    }

    /**
     * Average bitrate in bits/second.
     * 
     */
    @PolicyResourceProperty(name="bitrate", flag="unknown_bitrate")
    private Integer value_bitrate;
    private boolean unknown_bitrate;
    public Integer bitrate() {
        if (!unknown_bitrate) return value_bitrate;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.bitrate' is not present");
    }

    /**
     * Size of buffer in bits.
     * 
     */
    @PolicyResourceProperty(name="bufSize", flag="unknown_bufSize")
    private @Nullable Integer value_bufSize;
    private boolean unknown_bufSize;
    public @Nullable Integer bufSize() {
        if (!unknown_bufSize) return value_bufSize;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.bufSize' is not present");
    }

    /**
     * Includes color space metadata in the output.
     * 
     */
    @PolicyResourceProperty(name="colorMetadata", flag="unknown_colorMetadata")
    private @Nullable String value_colorMetadata;
    private boolean unknown_colorMetadata;
    public @Nullable String colorMetadata() {
        if (!unknown_colorMetadata) return value_colorMetadata;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.colorMetadata' is not present");
    }

    /**
     * Define the color metadata for the output. H265 Color Space Settings for more details.
     * 
     */
    @PolicyResourceProperty(name="colorSpaceSettings", flag="unknown_colorSpaceSettings")
    private @Nullable ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings value_colorSpaceSettings;
    private boolean unknown_colorSpaceSettings;
    public @Nullable ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings colorSpaceSettings() {
        if (!unknown_colorSpaceSettings) return value_colorSpaceSettings;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.colorSpaceSettings' is not present");
    }

    /**
     * Filters to apply to an encode. See H265 Filter Settings for more details.
     * 
     */
    @PolicyResourceProperty(name="filterSettings", flag="unknown_filterSettings")
    private @Nullable ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings value_filterSettings;
    private boolean unknown_filterSettings;
    public @Nullable ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings filterSettings() {
        if (!unknown_filterSettings) return value_filterSettings;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.filterSettings' is not present");
    }

    /**
     * Four bit AFD value to write on all frames of video in the output stream.
     * 
     */
    @PolicyResourceProperty(name="fixedAfd", flag="unknown_fixedAfd")
    private @Nullable String value_fixedAfd;
    private boolean unknown_fixedAfd;
    public @Nullable String fixedAfd() {
        if (!unknown_fixedAfd) return value_fixedAfd;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.fixedAfd' is not present");
    }

    @PolicyResourceProperty(name="flickerAq", flag="unknown_flickerAq")
    private @Nullable String value_flickerAq;
    private boolean unknown_flickerAq;
    public @Nullable String flickerAq() {
        if (!unknown_flickerAq) return value_flickerAq;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.flickerAq' is not present");
    }

    /**
     * Framerate denominator.
     * 
     */
    @PolicyResourceProperty(name="framerateDenominator", flag="unknown_framerateDenominator")
    private Integer value_framerateDenominator;
    private boolean unknown_framerateDenominator;
    public Integer framerateDenominator() {
        if (!unknown_framerateDenominator) return value_framerateDenominator;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.framerateDenominator' is not present");
    }

    /**
     * Framerate numerator.
     * 
     */
    @PolicyResourceProperty(name="framerateNumerator", flag="unknown_framerateNumerator")
    private Integer value_framerateNumerator;
    private boolean unknown_framerateNumerator;
    public Integer framerateNumerator() {
        if (!unknown_framerateNumerator) return value_framerateNumerator;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.framerateNumerator' is not present");
    }

    /**
     * Frequency of closed GOPs.
     * 
     */
    @PolicyResourceProperty(name="gopClosedCadence", flag="unknown_gopClosedCadence")
    private @Nullable Integer value_gopClosedCadence;
    private boolean unknown_gopClosedCadence;
    public @Nullable Integer gopClosedCadence() {
        if (!unknown_gopClosedCadence) return value_gopClosedCadence;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.gopClosedCadence' is not present");
    }

    /**
     * GOP size in units of either frames of seconds per `gop_size_units`.
     * 
     */
    @PolicyResourceProperty(name="gopSize", flag="unknown_gopSize")
    private @Nullable Double value_gopSize;
    private boolean unknown_gopSize;
    public @Nullable Double gopSize() {
        if (!unknown_gopSize) return value_gopSize;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.gopSize' is not present");
    }

    /**
     * Indicates if the `gop_size` is specified in frames or seconds.
     * 
     */
    @PolicyResourceProperty(name="gopSizeUnits", flag="unknown_gopSizeUnits")
    private @Nullable String value_gopSizeUnits;
    private boolean unknown_gopSizeUnits;
    public @Nullable String gopSizeUnits() {
        if (!unknown_gopSizeUnits) return value_gopSizeUnits;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.gopSizeUnits' is not present");
    }

    /**
     * H265 level.
     * 
     */
    @PolicyResourceProperty(name="level", flag="unknown_level")
    private @Nullable String value_level;
    private boolean unknown_level;
    public @Nullable String level() {
        if (!unknown_level) return value_level;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.level' is not present");
    }

    /**
     * Amount of lookahead.
     * 
     */
    @PolicyResourceProperty(name="lookAheadRateControl", flag="unknown_lookAheadRateControl")
    private @Nullable String value_lookAheadRateControl;
    private boolean unknown_lookAheadRateControl;
    public @Nullable String lookAheadRateControl() {
        if (!unknown_lookAheadRateControl) return value_lookAheadRateControl;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.lookAheadRateControl' is not present");
    }

    /**
     * Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
     * 
     */
    @PolicyResourceProperty(name="maxBitrate", flag="unknown_maxBitrate")
    private @Nullable Integer value_maxBitrate;
    private boolean unknown_maxBitrate;
    public @Nullable Integer maxBitrate() {
        if (!unknown_maxBitrate) return value_maxBitrate;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.maxBitrate' is not present");
    }

    /**
     * Min interval.
     * 
     */
    @PolicyResourceProperty(name="minIInterval", flag="unknown_minIInterval")
    private @Nullable Integer value_minIInterval;
    private boolean unknown_minIInterval;
    public @Nullable Integer minIInterval() {
        if (!unknown_minIInterval) return value_minIInterval;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.minIInterval' is not present");
    }

    /**
     * Set the minimum QP.
     * 
     */
    @PolicyResourceProperty(name="minQp", flag="unknown_minQp")
    private @Nullable Integer value_minQp;
    private boolean unknown_minQp;
    public @Nullable Integer minQp() {
        if (!unknown_minQp) return value_minQp;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.minQp' is not present");
    }

    /**
     * Enables or disables motion vector over picture boundaries.
     * 
     */
    @PolicyResourceProperty(name="mvOverPictureBoundaries", flag="unknown_mvOverPictureBoundaries")
    private @Nullable String value_mvOverPictureBoundaries;
    private boolean unknown_mvOverPictureBoundaries;
    public @Nullable String mvOverPictureBoundaries() {
        if (!unknown_mvOverPictureBoundaries) return value_mvOverPictureBoundaries;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.mvOverPictureBoundaries' is not present");
    }

    /**
     * Enables or disables the motion vector temporal predictor.
     * 
     */
    @PolicyResourceProperty(name="mvTemporalPredictor", flag="unknown_mvTemporalPredictor")
    private @Nullable String value_mvTemporalPredictor;
    private boolean unknown_mvTemporalPredictor;
    public @Nullable String mvTemporalPredictor() {
        if (!unknown_mvTemporalPredictor) return value_mvTemporalPredictor;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.mvTemporalPredictor' is not present");
    }

    /**
     * Pixel Aspect Ratio denominator.
     * 
     */
    @PolicyResourceProperty(name="parDenominator", flag="unknown_parDenominator")
    private @Nullable Integer value_parDenominator;
    private boolean unknown_parDenominator;
    public @Nullable Integer parDenominator() {
        if (!unknown_parDenominator) return value_parDenominator;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.parDenominator' is not present");
    }

    /**
     * Pixel Aspect Ratio numerator.
     * 
     */
    @PolicyResourceProperty(name="parNumerator", flag="unknown_parNumerator")
    private @Nullable Integer value_parNumerator;
    private boolean unknown_parNumerator;
    public @Nullable Integer parNumerator() {
        if (!unknown_parNumerator) return value_parNumerator;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.parNumerator' is not present");
    }

    /**
     * H265 profile.
     * 
     */
    @PolicyResourceProperty(name="profile", flag="unknown_profile")
    private @Nullable String value_profile;
    private boolean unknown_profile;
    public @Nullable String profile() {
        if (!unknown_profile) return value_profile;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.profile' is not present");
    }

    /**
     * Controls the target quality for the video encode.
     * 
     */
    @PolicyResourceProperty(name="qvbrQualityLevel", flag="unknown_qvbrQualityLevel")
    private @Nullable Integer value_qvbrQualityLevel;
    private boolean unknown_qvbrQualityLevel;
    public @Nullable Integer qvbrQualityLevel() {
        if (!unknown_qvbrQualityLevel) return value_qvbrQualityLevel;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.qvbrQualityLevel' is not present");
    }

    /**
     * Rate control mode.
     * 
     */
    @PolicyResourceProperty(name="rateControlMode", flag="unknown_rateControlMode")
    private @Nullable String value_rateControlMode;
    private boolean unknown_rateControlMode;
    public @Nullable String rateControlMode() {
        if (!unknown_rateControlMode) return value_rateControlMode;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.rateControlMode' is not present");
    }

    /**
     * Sets the scan type of the output.
     * 
     */
    @PolicyResourceProperty(name="scanType", flag="unknown_scanType")
    private @Nullable String value_scanType;
    private boolean unknown_scanType;
    public @Nullable String scanType() {
        if (!unknown_scanType) return value_scanType;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.scanType' is not present");
    }

    /**
     * Scene change detection.
     * 
     */
    @PolicyResourceProperty(name="sceneChangeDetect", flag="unknown_sceneChangeDetect")
    private @Nullable String value_sceneChangeDetect;
    private boolean unknown_sceneChangeDetect;
    public @Nullable String sceneChangeDetect() {
        if (!unknown_sceneChangeDetect) return value_sceneChangeDetect;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.sceneChangeDetect' is not present");
    }

    /**
     * Number of slices per picture.
     * 
     */
    @PolicyResourceProperty(name="slices", flag="unknown_slices")
    private @Nullable Integer value_slices;
    private boolean unknown_slices;
    public @Nullable Integer slices() {
        if (!unknown_slices) return value_slices;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.slices' is not present");
    }

    /**
     * Set the H265 tier in the output.
     * 
     */
    @PolicyResourceProperty(name="tier", flag="unknown_tier")
    private @Nullable String value_tier;
    private boolean unknown_tier;
    public @Nullable String tier() {
        if (!unknown_tier) return value_tier;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.tier' is not present");
    }

    /**
     * Sets the height of tiles.
     * 
     */
    @PolicyResourceProperty(name="tileHeight", flag="unknown_tileHeight")
    private @Nullable Integer value_tileHeight;
    private boolean unknown_tileHeight;
    public @Nullable Integer tileHeight() {
        if (!unknown_tileHeight) return value_tileHeight;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.tileHeight' is not present");
    }

    /**
     * Enables or disables padding of tiles.
     * 
     */
    @PolicyResourceProperty(name="tilePadding", flag="unknown_tilePadding")
    private @Nullable String value_tilePadding;
    private boolean unknown_tilePadding;
    public @Nullable String tilePadding() {
        if (!unknown_tilePadding) return value_tilePadding;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.tilePadding' is not present");
    }

    /**
     * Sets the width of tiles.
     * 
     */
    @PolicyResourceProperty(name="tileWidth", flag="unknown_tileWidth")
    private @Nullable Integer value_tileWidth;
    private boolean unknown_tileWidth;
    public @Nullable Integer tileWidth() {
        if (!unknown_tileWidth) return value_tileWidth;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.tileWidth' is not present");
    }

    /**
     * Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
     * 
     */
    @PolicyResourceProperty(name="timecodeBurninSettings", flag="unknown_timecodeBurninSettings")
    private @Nullable ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings value_timecodeBurninSettings;
    private boolean unknown_timecodeBurninSettings;
    public @Nullable ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings timecodeBurninSettings() {
        if (!unknown_timecodeBurninSettings) return value_timecodeBurninSettings;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.timecodeBurninSettings' is not present");
    }

    /**
     * Determines how timecodes should be inserted into the video elementary stream.
     * 
     */
    @PolicyResourceProperty(name="timecodeInsertion", flag="unknown_timecodeInsertion")
    private @Nullable String value_timecodeInsertion;
    private boolean unknown_timecodeInsertion;
    public @Nullable String timecodeInsertion() {
        if (!unknown_timecodeInsertion) return value_timecodeInsertion;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.timecodeInsertion' is not present");
    }

    /**
     * Sets the size of the treeblock.
     * 
     */
    @PolicyResourceProperty(name="treeblockSize", flag="unknown_treeblockSize")
    private @Nullable String value_treeblockSize;
    private boolean unknown_treeblockSize;
    public @Nullable String treeblockSize() {
        if (!unknown_treeblockSize) return value_treeblockSize;
        throw new UndeferrableValueException("Value 'ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings.treeblockSize' is not present");
    }

}
