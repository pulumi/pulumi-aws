// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.batch.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.batch.inputs.JobDefinitionEksPropertiesPodPropertiesInitContainerEnvArgs;
import com.pulumi.policypacks.aws.batch.inputs.JobDefinitionEksPropertiesPodPropertiesInitContainerResourcesArgs;
import com.pulumi.policypacks.aws.batch.inputs.JobDefinitionEksPropertiesPodPropertiesInitContainerSecurityContextArgs;
import com.pulumi.policypacks.aws.batch.inputs.JobDefinitionEksPropertiesPodPropertiesInitContainerVolumeMountArgs;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class JobDefinitionEksPropertiesPodPropertiesInitContainerArgs {

    /**
     * Array of arguments to the entrypoint. If this isn&#39;t specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container&#39;s environment.
     * 
     */
    private UndeferrableValue<List<String>> args;

    public List<String> args() {
        if (args == null) return null;
        return args.getValue("JobDefinitionEksPropertiesPodPropertiesInitContainerArgs.args");
    }

    /**
     * Entrypoint for the container. This isn&#39;t run within a shell. If this isn&#39;t specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container&#39;s environment.
     * 
     */
    private UndeferrableValue<List<String>> commands;

    public List<String> commands() {
        if (commands == null) return null;
        return commands.getValue("JobDefinitionEksPropertiesPodPropertiesInitContainerArgs.commands");
    }

    /**
     * Environment variables to pass to a container. See EKS Environment below.
     * 
     */
    private UndeferrableValue<List<JobDefinitionEksPropertiesPodPropertiesInitContainerEnvArgs>> envs;

    public List<JobDefinitionEksPropertiesPodPropertiesInitContainerEnvArgs> envs() {
        if (envs == null) return null;
        return envs.getValue("JobDefinitionEksPropertiesPodPropertiesInitContainerArgs.envs");
    }

    /**
     * Docker image used to start the container.
     * 
     */
    private UndeferrableValue<String> image;

    public String image() {
        if (image == null) return null;
        return image.getValue("JobDefinitionEksPropertiesPodPropertiesInitContainerArgs.image");
    }

    /**
     * Image pull policy for the container. Supported values are `Always`, `IfNotPresent`, and `Never`.
     * 
     */
    private UndeferrableValue<String> imagePullPolicy;

    public String imagePullPolicy() {
        if (imagePullPolicy == null) return null;
        return imagePullPolicy.getValue("JobDefinitionEksPropertiesPodPropertiesInitContainerArgs.imagePullPolicy");
    }

    /**
     * Name of the job definition.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("JobDefinitionEksPropertiesPodPropertiesInitContainerArgs.name");
    }

    /**
     * Type and amount of resources to assign to a container. The supported resources include `memory`, `cpu`, and `nvidia.com/gpu`.
     * 
     */
    private UndeferrableValue<JobDefinitionEksPropertiesPodPropertiesInitContainerResourcesArgs> resources;

    public JobDefinitionEksPropertiesPodPropertiesInitContainerResourcesArgs resources() {
        if (resources == null) return null;
        return resources.getValue("JobDefinitionEksPropertiesPodPropertiesInitContainerArgs.resources");
    }

    /**
     * Security context for a job.
     * 
     */
    private UndeferrableValue<JobDefinitionEksPropertiesPodPropertiesInitContainerSecurityContextArgs> securityContext;

    public JobDefinitionEksPropertiesPodPropertiesInitContainerSecurityContextArgs securityContext() {
        if (securityContext == null) return null;
        return securityContext.getValue("JobDefinitionEksPropertiesPodPropertiesInitContainerArgs.securityContext");
    }

    /**
     * Volume mounts for the container.
     * 
     */
    private UndeferrableValue<List<JobDefinitionEksPropertiesPodPropertiesInitContainerVolumeMountArgs>> volumeMounts;

    public List<JobDefinitionEksPropertiesPodPropertiesInitContainerVolumeMountArgs> volumeMounts() {
        if (volumeMounts == null) return null;
        return volumeMounts.getValue("JobDefinitionEksPropertiesPodPropertiesInitContainerArgs.volumeMounts");
    }

}
