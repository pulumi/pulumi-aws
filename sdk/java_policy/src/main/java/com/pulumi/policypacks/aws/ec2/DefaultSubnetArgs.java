// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/defaultSubnet:DefaultSubnet")
public final class DefaultSubnetArgs extends com.pulumi.resources.PolicyResourceInput {

    private UndeferrableValue<Boolean> assignIpv6AddressOnCreation;

    public Boolean assignIpv6AddressOnCreation() {
        if (assignIpv6AddressOnCreation == null) return null;
        return assignIpv6AddressOnCreation.getValue("DefaultSubnetArgs.assignIpv6AddressOnCreation");
    }

    /**
     * is required
     * * The `availability_zone_id`, `cidr_block` and `vpc_id` arguments become computed attributes
     * * The default value for `map_public_ip_on_launch` is `true`
     * 
     * This resource supports the following additional arguments:
     * 
     */
    private UndeferrableValue<String> availabilityZone;

    public String availabilityZone() {
        if (availabilityZone == null) return null;
        return availabilityZone.getValue("DefaultSubnetArgs.availabilityZone");
    }

    private UndeferrableValue<String> customerOwnedIpv4Pool;

    public String customerOwnedIpv4Pool() {
        if (customerOwnedIpv4Pool == null) return null;
        return customerOwnedIpv4Pool.getValue("DefaultSubnetArgs.customerOwnedIpv4Pool");
    }

    private UndeferrableValue<Boolean> enableDns64;

    public Boolean enableDns64() {
        if (enableDns64 == null) return null;
        return enableDns64.getValue("DefaultSubnetArgs.enableDns64");
    }

    private UndeferrableValue<Boolean> enableResourceNameDnsARecordOnLaunch;

    public Boolean enableResourceNameDnsARecordOnLaunch() {
        if (enableResourceNameDnsARecordOnLaunch == null) return null;
        return enableResourceNameDnsARecordOnLaunch.getValue("DefaultSubnetArgs.enableResourceNameDnsARecordOnLaunch");
    }

    private UndeferrableValue<Boolean> enableResourceNameDnsAaaaRecordOnLaunch;

    public Boolean enableResourceNameDnsAaaaRecordOnLaunch() {
        if (enableResourceNameDnsAaaaRecordOnLaunch == null) return null;
        return enableResourceNameDnsAaaaRecordOnLaunch.getValue("DefaultSubnetArgs.enableResourceNameDnsAaaaRecordOnLaunch");
    }

    /**
     * Whether destroying the resource deletes the default subnet. Default: `false`
     * 
     */
    private UndeferrableValue<Boolean> forceDestroy;

    public Boolean forceDestroy() {
        if (forceDestroy == null) return null;
        return forceDestroy.getValue("DefaultSubnetArgs.forceDestroy");
    }

    private UndeferrableValue<String> ipv6CidrBlock;

    public String ipv6CidrBlock() {
        if (ipv6CidrBlock == null) return null;
        return ipv6CidrBlock.getValue("DefaultSubnetArgs.ipv6CidrBlock");
    }

    private UndeferrableValue<Boolean> ipv6Native;

    public Boolean ipv6Native() {
        if (ipv6Native == null) return null;
        return ipv6Native.getValue("DefaultSubnetArgs.ipv6Native");
    }

    private UndeferrableValue<Boolean> mapCustomerOwnedIpOnLaunch;

    public Boolean mapCustomerOwnedIpOnLaunch() {
        if (mapCustomerOwnedIpOnLaunch == null) return null;
        return mapCustomerOwnedIpOnLaunch.getValue("DefaultSubnetArgs.mapCustomerOwnedIpOnLaunch");
    }

    private UndeferrableValue<Boolean> mapPublicIpOnLaunch;

    public Boolean mapPublicIpOnLaunch() {
        if (mapPublicIpOnLaunch == null) return null;
        return mapPublicIpOnLaunch.getValue("DefaultSubnetArgs.mapPublicIpOnLaunch");
    }

    private UndeferrableValue<String> privateDnsHostnameTypeOnLaunch;

    public String privateDnsHostnameTypeOnLaunch() {
        if (privateDnsHostnameTypeOnLaunch == null) return null;
        return privateDnsHostnameTypeOnLaunch.getValue("DefaultSubnetArgs.privateDnsHostnameTypeOnLaunch");
    }

    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DefaultSubnetArgs.tags");
    }

}
