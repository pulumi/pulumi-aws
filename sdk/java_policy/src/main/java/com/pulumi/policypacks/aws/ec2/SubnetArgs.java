// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/subnet:Subnet")
public final class SubnetArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specify true to indicate
     * that network interfaces created in the specified subnet should be
     * assigned an IPv6 address. Default is `false`
     * 
     */
    private UndeferrableValue<Boolean> assignIpv6AddressOnCreation;

    public Boolean assignIpv6AddressOnCreation() {
        if (assignIpv6AddressOnCreation == null) return null;
        return assignIpv6AddressOnCreation.getValue("SubnetArgs.assignIpv6AddressOnCreation");
    }

    /**
     * AZ for the subnet.
     * 
     */
    private UndeferrableValue<String> availabilityZone;

    public String availabilityZone() {
        if (availabilityZone == null) return null;
        return availabilityZone.getValue("SubnetArgs.availabilityZone");
    }

    /**
     * AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use `availability_zone` instead.
     * 
     */
    private UndeferrableValue<String> availabilityZoneId;

    public String availabilityZoneId() {
        if (availabilityZoneId == null) return null;
        return availabilityZoneId.getValue("SubnetArgs.availabilityZoneId");
    }

    /**
     * The IPv4 CIDR block for the subnet.
     * 
     */
    private UndeferrableValue<String> cidrBlock;

    public String cidrBlock() {
        if (cidrBlock == null) return null;
        return cidrBlock.getValue("SubnetArgs.cidrBlock");
    }

    /**
     * The customer owned IPv4 address pool. Typically used with the `map_customer_owned_ip_on_launch` argument. The `outpost_arn` argument must be specified when configured.
     * 
     */
    private UndeferrableValue<String> customerOwnedIpv4Pool;

    public String customerOwnedIpv4Pool() {
        if (customerOwnedIpv4Pool == null) return null;
        return customerOwnedIpv4Pool.getValue("SubnetArgs.customerOwnedIpv4Pool");
    }

    /**
     * Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `false`.
     * 
     */
    private UndeferrableValue<Boolean> enableDns64;

    public Boolean enableDns64() {
        if (enableDns64 == null) return null;
        return enableDns64.getValue("SubnetArgs.enableDns64");
    }

    /**
     * Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
     * 
     */
    private UndeferrableValue<Integer> enableLniAtDeviceIndex;

    public Integer enableLniAtDeviceIndex() {
        if (enableLniAtDeviceIndex == null) return null;
        return enableLniAtDeviceIndex.getValue("SubnetArgs.enableLniAtDeviceIndex");
    }

    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`.
     * 
     */
    private UndeferrableValue<Boolean> enableResourceNameDnsARecordOnLaunch;

    public Boolean enableResourceNameDnsARecordOnLaunch() {
        if (enableResourceNameDnsARecordOnLaunch == null) return null;
        return enableResourceNameDnsARecordOnLaunch.getValue("SubnetArgs.enableResourceNameDnsARecordOnLaunch");
    }

    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `false`.
     * 
     */
    private UndeferrableValue<Boolean> enableResourceNameDnsAaaaRecordOnLaunch;

    public Boolean enableResourceNameDnsAaaaRecordOnLaunch() {
        if (enableResourceNameDnsAaaaRecordOnLaunch == null) return null;
        return enableResourceNameDnsAaaaRecordOnLaunch.getValue("SubnetArgs.enableResourceNameDnsAaaaRecordOnLaunch");
    }

    /**
     * The IPv6 network range for the subnet,
     * in CIDR notation. The subnet size must use a /64 prefix length.
     * 
     */
    private UndeferrableValue<String> ipv6CidrBlock;

    public String ipv6CidrBlock() {
        if (ipv6CidrBlock == null) return null;
        return ipv6CidrBlock.getValue("SubnetArgs.ipv6CidrBlock");
    }

    /**
     * Indicates whether to create an IPv6-only subnet. Default: `false`.
     * 
     */
    private UndeferrableValue<Boolean> ipv6Native;

    public Boolean ipv6Native() {
        if (ipv6Native == null) return null;
        return ipv6Native.getValue("SubnetArgs.ipv6Native");
    }

    /**
     * Specify `true` to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The `customer_owned_ipv4_pool` and `outpost_arn` arguments must be specified when set to `true`. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> mapCustomerOwnedIpOnLaunch;

    public Boolean mapCustomerOwnedIpOnLaunch() {
        if (mapCustomerOwnedIpOnLaunch == null) return null;
        return mapCustomerOwnedIpOnLaunch.getValue("SubnetArgs.mapCustomerOwnedIpOnLaunch");
    }

    /**
     * Specify true to indicate
     * that instances launched into the subnet should be assigned
     * a public IP address. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> mapPublicIpOnLaunch;

    public Boolean mapPublicIpOnLaunch() {
        if (mapPublicIpOnLaunch == null) return null;
        return mapPublicIpOnLaunch.getValue("SubnetArgs.mapPublicIpOnLaunch");
    }

    /**
     * The Amazon Resource Name (ARN) of the Outpost.
     * 
     */
    private UndeferrableValue<String> outpostArn;

    public String outpostArn() {
        if (outpostArn == null) return null;
        return outpostArn.getValue("SubnetArgs.outpostArn");
    }

    /**
     * The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`.
     * 
     */
    private UndeferrableValue<String> privateDnsHostnameTypeOnLaunch;

    public String privateDnsHostnameTypeOnLaunch() {
        if (privateDnsHostnameTypeOnLaunch == null) return null;
        return privateDnsHostnameTypeOnLaunch.getValue("SubnetArgs.privateDnsHostnameTypeOnLaunch");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("SubnetArgs.tags");
    }

    /**
     * The VPC ID.
     * 
     */
    private UndeferrableValue<String> vpcId;

    public String vpcId() {
        if (vpcId == null) return null;
        return vpcId.getValue("SubnetArgs.vpcId");
    }

}
