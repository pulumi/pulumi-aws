// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.iam;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;


@PolicyResourceType(type="aws:iam/sshKey:SshKey")
public final class SshKey extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
     * 
     */
    private UndeferrableValue<String> encoding;

    public String encoding() {
        if (encoding == null) return null;
        return encoding.getValue("SshKey.encoding");
    }

    /**
     * The MD5 message digest of the SSH public key.
     * 
     */
    private UndeferrableValue<String> fingerprint;

    public String fingerprint() {
        if (fingerprint == null) return null;
        return fingerprint.getValue("SshKey.fingerprint");
    }

    /**
     * The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
     * 
     */
    private UndeferrableValue<String> publicKey;

    public String publicKey() {
        if (publicKey == null) return null;
        return publicKey.getValue("SshKey.publicKey");
    }

    /**
     * The unique identifier for the SSH public key.
     * 
     */
    private UndeferrableValue<String> sshPublicKeyId;

    public String sshPublicKeyId() {
        if (sshPublicKeyId == null) return null;
        return sshPublicKeyId.getValue("SshKey.sshPublicKeyId");
    }

    /**
     * The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("SshKey.status");
    }

    /**
     * The name of the IAM user to associate the SSH public key with.
     * 
     */
    private UndeferrableValue<String> username;

    public String username() {
        if (username == null) return null;
        return username.getValue("SshKey.username");
    }

}
