// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.redshiftdata;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.redshiftdata.inputs.StatementParameterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:redshiftdata/statement:Statement")
public final class StatementArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials.
     * 
     */
    @PolicyResourceProperty(name="clusterIdentifier", flag="unknown_clusterIdentifier")
    private String value_clusterIdentifier;
    private boolean unknown_clusterIdentifier;
    public String clusterIdentifier() {
        if (!unknown_clusterIdentifier) return value_clusterIdentifier;
        throw new UndeferrableValueException("Value 'StatementArgs.clusterIdentifier' is not present");
    }

    /**
     * The name of the database.
     * 
     */
    @PolicyResourceProperty(name="database", flag="unknown_database")
    private String value_database;
    private boolean unknown_database;
    public String database() {
        if (!unknown_database) return value_database;
        throw new UndeferrableValueException("Value 'StatementArgs.database' is not present");
    }

    /**
     * The database user name.
     * 
     */
    @PolicyResourceProperty(name="dbUser", flag="unknown_dbUser")
    private String value_dbUser;
    private boolean unknown_dbUser;
    public String dbUser() {
        if (!unknown_dbUser) return value_dbUser;
        throw new UndeferrableValueException("Value 'StatementArgs.dbUser' is not present");
    }

    @PolicyResourceProperty(name="parameters", flag="unknown_parameters")
    private List<StatementParameterArgs> value_parameters;
    private boolean unknown_parameters;
    public List<StatementParameterArgs> parameters() {
        if (!unknown_parameters) return value_parameters;
        throw new UndeferrableValueException("Value 'StatementArgs.parameters' is not present");
    }

    /**
     * The name or ARN of the secret that enables access to the database.
     * 
     */
    @PolicyResourceProperty(name="secretArn", flag="unknown_secretArn")
    private String value_secretArn;
    private boolean unknown_secretArn;
    public String secretArn() {
        if (!unknown_secretArn) return value_secretArn;
        throw new UndeferrableValueException("Value 'StatementArgs.secretArn' is not present");
    }

    /**
     * The SQL statement text to run.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="sql", flag="unknown_sql")
    private String value_sql;
    private boolean unknown_sql;
    public String sql() {
        if (!unknown_sql) return value_sql;
        throw new UndeferrableValueException("Value 'StatementArgs.sql' is not present");
    }

    /**
     * The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
     * 
     */
    @PolicyResourceProperty(name="statementName", flag="unknown_statementName")
    private String value_statementName;
    private boolean unknown_statementName;
    public String statementName() {
        if (!unknown_statementName) return value_statementName;
        throw new UndeferrableValueException("Value 'StatementArgs.statementName' is not present");
    }

    /**
     * A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs.
     * 
     */
    @PolicyResourceProperty(name="withEvent", flag="unknown_withEvent")
    private Boolean value_withEvent;
    private boolean unknown_withEvent;
    public Boolean withEvent() {
        if (!unknown_withEvent) return value_withEvent;
        throw new UndeferrableValueException("Value 'StatementArgs.withEvent' is not present");
    }

    /**
     * The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.
     * 
     */
    @PolicyResourceProperty(name="workgroupName", flag="unknown_workgroupName")
    private String value_workgroupName;
    private boolean unknown_workgroupName;
    public String workgroupName() {
        if (!unknown_workgroupName) return value_workgroupName;
        throw new UndeferrableValueException("Value 'StatementArgs.workgroupName' is not present");
    }

}
