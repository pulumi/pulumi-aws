// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ebs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ebs/snapshotCopy:SnapshotCopy")
public final class SnapshotCopy extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of the EBS Snapshot.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'SnapshotCopy.arn' is not present");
    }

    /**
     * Specifies a completion duration to initiate a time-based snapshot copy. Time-based snapshot copy operations complete within the specified duration.  Value must be between 15 and 2880 minutes, in 15 minute increments only.
     * 
     */
    @PolicyResourceProperty(name="completionDurationMinutes", flag="unknown_completionDurationMinutes")
    private @Nullable Integer value_completionDurationMinutes;
    private boolean unknown_completionDurationMinutes;
    public @Nullable Integer completionDurationMinutes() {
        if (!unknown_completionDurationMinutes) return value_completionDurationMinutes;
        throw new UndeferrableValueException("Value 'SnapshotCopy.completionDurationMinutes' is not present");
    }

    /**
     * The data encryption key identifier for the snapshot.
     * 
     */
    @PolicyResourceProperty(name="dataEncryptionKeyId", flag="unknown_dataEncryptionKeyId")
    private String value_dataEncryptionKeyId;
    private boolean unknown_dataEncryptionKeyId;
    public String dataEncryptionKeyId() {
        if (!unknown_dataEncryptionKeyId) return value_dataEncryptionKeyId;
        throw new UndeferrableValueException("Value 'SnapshotCopy.dataEncryptionKeyId' is not present");
    }

    /**
     * A description of what the snapshot is.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'SnapshotCopy.description' is not present");
    }

    /**
     * Whether the snapshot is encrypted.
     * 
     */
    @PolicyResourceProperty(name="encrypted", flag="unknown_encrypted")
    private @Nullable Boolean value_encrypted;
    private boolean unknown_encrypted;
    public @Nullable Boolean encrypted() {
        if (!unknown_encrypted) return value_encrypted;
        throw new UndeferrableValueException("Value 'SnapshotCopy.encrypted' is not present");
    }

    /**
     * The ARN for the KMS encryption key.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private @Nullable String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public @Nullable String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'SnapshotCopy.kmsKeyId' is not present");
    }

    @PolicyResourceProperty(name="outpostArn", flag="unknown_outpostArn")
    private String value_outpostArn;
    private boolean unknown_outpostArn;
    public String outpostArn() {
        if (!unknown_outpostArn) return value_outpostArn;
        throw new UndeferrableValueException("Value 'SnapshotCopy.outpostArn' is not present");
    }

    /**
     * Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
     * 
     */
    @PolicyResourceProperty(name="ownerAlias", flag="unknown_ownerAlias")
    private String value_ownerAlias;
    private boolean unknown_ownerAlias;
    public String ownerAlias() {
        if (!unknown_ownerAlias) return value_ownerAlias;
        throw new UndeferrableValueException("Value 'SnapshotCopy.ownerAlias' is not present");
    }

    /**
     * The AWS account ID of the snapshot owner.
     * 
     */
    @PolicyResourceProperty(name="ownerId", flag="unknown_ownerId")
    private String value_ownerId;
    private boolean unknown_ownerId;
    public String ownerId() {
        if (!unknown_ownerId) return value_ownerId;
        throw new UndeferrableValueException("Value 'SnapshotCopy.ownerId' is not present");
    }

    /**
     * Indicates whether to permanently restore an archived snapshot.
     * 
     */
    @PolicyResourceProperty(name="permanentRestore", flag="unknown_permanentRestore")
    private @Nullable Boolean value_permanentRestore;
    private boolean unknown_permanentRestore;
    public @Nullable Boolean permanentRestore() {
        if (!unknown_permanentRestore) return value_permanentRestore;
        throw new UndeferrableValueException("Value 'SnapshotCopy.permanentRestore' is not present");
    }

    /**
     * The region of the source snapshot.
     * 
     */
    @PolicyResourceProperty(name="sourceRegion", flag="unknown_sourceRegion")
    private String value_sourceRegion;
    private boolean unknown_sourceRegion;
    public String sourceRegion() {
        if (!unknown_sourceRegion) return value_sourceRegion;
        throw new UndeferrableValueException("Value 'SnapshotCopy.sourceRegion' is not present");
    }

    /**
     * The ARN for the snapshot to be copied.
     * 
     */
    @PolicyResourceProperty(name="sourceSnapshotId", flag="unknown_sourceSnapshotId")
    private String value_sourceSnapshotId;
    private boolean unknown_sourceSnapshotId;
    public String sourceSnapshotId() {
        if (!unknown_sourceSnapshotId) return value_sourceSnapshotId;
        throw new UndeferrableValueException("Value 'SnapshotCopy.sourceSnapshotId' is not present");
    }

    /**
     * The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
     * 
     */
    @PolicyResourceProperty(name="storageTier", flag="unknown_storageTier")
    private String value_storageTier;
    private boolean unknown_storageTier;
    public String storageTier() {
        if (!unknown_storageTier) return value_storageTier;
        throw new UndeferrableValueException("Value 'SnapshotCopy.storageTier' is not present");
    }

    /**
     * A map of tags for the snapshot.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'SnapshotCopy.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'SnapshotCopy.tagsAll' is not present");
    }

    /**
     * Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
     * 
     */
    @PolicyResourceProperty(name="temporaryRestoreDays", flag="unknown_temporaryRestoreDays")
    private @Nullable Integer value_temporaryRestoreDays;
    private boolean unknown_temporaryRestoreDays;
    public @Nullable Integer temporaryRestoreDays() {
        if (!unknown_temporaryRestoreDays) return value_temporaryRestoreDays;
        throw new UndeferrableValueException("Value 'SnapshotCopy.temporaryRestoreDays' is not present");
    }

    @PolicyResourceProperty(name="volumeId", flag="unknown_volumeId")
    private String value_volumeId;
    private boolean unknown_volumeId;
    public String volumeId() {
        if (!unknown_volumeId) return value_volumeId;
        throw new UndeferrableValueException("Value 'SnapshotCopy.volumeId' is not present");
    }

    /**
     * The size of the drive in GiBs.
     * 
     */
    @PolicyResourceProperty(name="volumeSize", flag="unknown_volumeSize")
    private Integer value_volumeSize;
    private boolean unknown_volumeSize;
    public Integer volumeSize() {
        if (!unknown_volumeSize) return value_volumeSize;
        throw new UndeferrableValueException("Value 'SnapshotCopy.volumeSize' is not present");
    }

}
