// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ivs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ivs.outputs.RecordingConfigurationDestinationConfiguration;
import com.pulumi.policypacks.aws.ivs.outputs.RecordingConfigurationThumbnailConfiguration;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ivs/recordingConfiguration:RecordingConfiguration")
public final class RecordingConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Recording Configuration.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("RecordingConfiguration.arn");
    }

    /**
     * Object containing destination configuration for where recorded video will be stored.
     * 
     */
    private UndeferrableValue<RecordingConfigurationDestinationConfiguration> destinationConfiguration;

    public RecordingConfigurationDestinationConfiguration destinationConfiguration() {
        if (destinationConfiguration == null) return null;
        return destinationConfiguration.getValue("RecordingConfiguration.destinationConfiguration");
    }

    /**
     * Recording Configuration name.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("RecordingConfiguration.name");
    }

    /**
     * If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
     * 
     */
    private UndeferrableValue<Integer> recordingReconnectWindowSeconds;

    public Integer recordingReconnectWindowSeconds() {
        if (recordingReconnectWindowSeconds == null) return null;
        return recordingReconnectWindowSeconds.getValue("RecordingConfiguration.recordingReconnectWindowSeconds");
    }

    /**
     * The current state of the Recording Configuration.
     * 
     */
    private UndeferrableValue<String> state;

    public String state() {
        if (state == null) return null;
        return state.getValue("RecordingConfiguration.state");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("RecordingConfiguration.tags");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("RecordingConfiguration.tagsAll");
    }

    /**
     * Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
     * 
     */
    private UndeferrableValue<RecordingConfigurationThumbnailConfiguration> thumbnailConfiguration;

    public RecordingConfigurationThumbnailConfiguration thumbnailConfiguration() {
        if (thumbnailConfiguration == null) return null;
        return thumbnailConfiguration.getValue("RecordingConfiguration.thumbnailConfiguration");
    }

}
