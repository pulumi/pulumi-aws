// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ecs.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


public final class ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs {

    /**
     * Whether to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
     * 
     */
    @PolicyResourceProperty(name="cloudWatchEncryptionEnabled", flag="unknown_cloudWatchEncryptionEnabled")
    private Boolean value_cloudWatchEncryptionEnabled;
    private boolean unknown_cloudWatchEncryptionEnabled;
    public Boolean cloudWatchEncryptionEnabled() {
        if (!unknown_cloudWatchEncryptionEnabled) return value_cloudWatchEncryptionEnabled;
        throw new UndeferrableValueException("Value 'ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs.cloudWatchEncryptionEnabled' is not present");
    }

    /**
     * The name of the CloudWatch log group to send logs to.
     * 
     */
    @PolicyResourceProperty(name="cloudWatchLogGroupName", flag="unknown_cloudWatchLogGroupName")
    private String value_cloudWatchLogGroupName;
    private boolean unknown_cloudWatchLogGroupName;
    public String cloudWatchLogGroupName() {
        if (!unknown_cloudWatchLogGroupName) return value_cloudWatchLogGroupName;
        throw new UndeferrableValueException("Value 'ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs.cloudWatchLogGroupName' is not present");
    }

    /**
     * Whether to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
     * 
     */
    @PolicyResourceProperty(name="s3BucketEncryptionEnabled", flag="unknown_s3BucketEncryptionEnabled")
    private Boolean value_s3BucketEncryptionEnabled;
    private boolean unknown_s3BucketEncryptionEnabled;
    public Boolean s3BucketEncryptionEnabled() {
        if (!unknown_s3BucketEncryptionEnabled) return value_s3BucketEncryptionEnabled;
        throw new UndeferrableValueException("Value 'ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs.s3BucketEncryptionEnabled' is not present");
    }

    /**
     * Name of the S3 bucket to send logs to.
     * 
     */
    @PolicyResourceProperty(name="s3BucketName", flag="unknown_s3BucketName")
    private String value_s3BucketName;
    private boolean unknown_s3BucketName;
    public String s3BucketName() {
        if (!unknown_s3BucketName) return value_s3BucketName;
        throw new UndeferrableValueException("Value 'ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs.s3BucketName' is not present");
    }

    /**
     * Optional folder in the S3 bucket to place logs in.
     * 
     */
    @PolicyResourceProperty(name="s3KeyPrefix", flag="unknown_s3KeyPrefix")
    private String value_s3KeyPrefix;
    private boolean unknown_s3KeyPrefix;
    public String s3KeyPrefix() {
        if (!unknown_s3KeyPrefix) return value_s3KeyPrefix;
        throw new UndeferrableValueException("Value 'ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs.s3KeyPrefix' is not present");
    }

}
