// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.bedrock;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.bedrock.outputs.AgentDataSourceDataSourceConfiguration;
import com.pulumi.policypacks.aws.bedrock.outputs.AgentDataSourceServerSideEncryptionConfiguration;
import com.pulumi.policypacks.aws.bedrock.outputs.AgentDataSourceTimeouts;
import com.pulumi.policypacks.aws.bedrock.outputs.AgentDataSourceVectorIngestionConfiguration;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:bedrock/agentDataSource:AgentDataSource")
public final class AgentDataSource extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Data deletion policy for a data source. Valid values: `RETAIN`, `DELETE`.
     * 
     */
    @PolicyResourceProperty(name="dataDeletionPolicy", flag="unknown_dataDeletionPolicy")
    private String value_dataDeletionPolicy;
    private boolean unknown_dataDeletionPolicy;
    public String dataDeletionPolicy() {
        if (!unknown_dataDeletionPolicy) return value_dataDeletionPolicy;
        throw new UndeferrableValueException("Value 'AgentDataSource.dataDeletionPolicy' is not present");
    }

    /**
     * Details about how the data source is stored. See `data_source_configuration` block for details.
     * 
     */
    @PolicyResourceProperty(name="dataSourceConfiguration", flag="unknown_dataSourceConfiguration")
    private @Nullable AgentDataSourceDataSourceConfiguration value_dataSourceConfiguration;
    private boolean unknown_dataSourceConfiguration;
    public @Nullable AgentDataSourceDataSourceConfiguration dataSourceConfiguration() {
        if (!unknown_dataSourceConfiguration) return value_dataSourceConfiguration;
        throw new UndeferrableValueException("Value 'AgentDataSource.dataSourceConfiguration' is not present");
    }

    /**
     * Unique identifier of the data source.
     * 
     */
    @PolicyResourceProperty(name="dataSourceId", flag="unknown_dataSourceId")
    private String value_dataSourceId;
    private boolean unknown_dataSourceId;
    public String dataSourceId() {
        if (!unknown_dataSourceId) return value_dataSourceId;
        throw new UndeferrableValueException("Value 'AgentDataSource.dataSourceId' is not present");
    }

    /**
     * Description of the data source.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'AgentDataSource.description' is not present");
    }

    /**
     * Unique identifier of the knowledge base to which the data source belongs.
     * 
     */
    @PolicyResourceProperty(name="knowledgeBaseId", flag="unknown_knowledgeBaseId")
    private String value_knowledgeBaseId;
    private boolean unknown_knowledgeBaseId;
    public String knowledgeBaseId() {
        if (!unknown_knowledgeBaseId) return value_knowledgeBaseId;
        throw new UndeferrableValueException("Value 'AgentDataSource.knowledgeBaseId' is not present");
    }

    /**
     * Name of the data source.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'AgentDataSource.name' is not present");
    }

    /**
     * Details about the configuration of the server-side encryption. See `server_side_encryption_configuration` block for details.
     * 
     */
    @PolicyResourceProperty(name="serverSideEncryptionConfiguration", flag="unknown_serverSideEncryptionConfiguration")
    private @Nullable AgentDataSourceServerSideEncryptionConfiguration value_serverSideEncryptionConfiguration;
    private boolean unknown_serverSideEncryptionConfiguration;
    public @Nullable AgentDataSourceServerSideEncryptionConfiguration serverSideEncryptionConfiguration() {
        if (!unknown_serverSideEncryptionConfiguration) return value_serverSideEncryptionConfiguration;
        throw new UndeferrableValueException("Value 'AgentDataSource.serverSideEncryptionConfiguration' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable AgentDataSourceTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable AgentDataSourceTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'AgentDataSource.timeouts' is not present");
    }

    /**
     * Details about the configuration of the server-side encryption. See `vector_ingestion_configuration` block for details.
     * 
     */
    @PolicyResourceProperty(name="vectorIngestionConfiguration", flag="unknown_vectorIngestionConfiguration")
    private @Nullable AgentDataSourceVectorIngestionConfiguration value_vectorIngestionConfiguration;
    private boolean unknown_vectorIngestionConfiguration;
    public @Nullable AgentDataSourceVectorIngestionConfiguration vectorIngestionConfiguration() {
        if (!unknown_vectorIngestionConfiguration) return value_vectorIngestionConfiguration;
        throw new UndeferrableValueException("Value 'AgentDataSource.vectorIngestionConfiguration' is not present");
    }

}
