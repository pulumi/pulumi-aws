// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codedeploy;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.codedeploy.outputs.DeploymentGroupAlarmConfiguration;
import com.pulumi.policypacks.aws.codedeploy.outputs.DeploymentGroupAutoRollbackConfiguration;
import com.pulumi.policypacks.aws.codedeploy.outputs.DeploymentGroupBlueGreenDeploymentConfig;
import com.pulumi.policypacks.aws.codedeploy.outputs.DeploymentGroupDeploymentStyle;
import com.pulumi.policypacks.aws.codedeploy.outputs.DeploymentGroupEc2TagFilter;
import com.pulumi.policypacks.aws.codedeploy.outputs.DeploymentGroupEc2TagSet;
import com.pulumi.policypacks.aws.codedeploy.outputs.DeploymentGroupEcsService;
import com.pulumi.policypacks.aws.codedeploy.outputs.DeploymentGroupLoadBalancerInfo;
import com.pulumi.policypacks.aws.codedeploy.outputs.DeploymentGroupOnPremisesInstanceTagFilter;
import com.pulumi.policypacks.aws.codedeploy.outputs.DeploymentGroupTriggerConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:codedeploy/deploymentGroup:DeploymentGroup")
public final class DeploymentGroup extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Configuration block of alarms associated with the deployment group (documented below).
     * 
     */
    @PolicyResourceProperty(name="alarmConfiguration", flag="unknown_alarmConfiguration")
    private @Nullable DeploymentGroupAlarmConfiguration value_alarmConfiguration;
    private boolean unknown_alarmConfiguration;
    public @Nullable DeploymentGroupAlarmConfiguration alarmConfiguration() {
        if (!unknown_alarmConfiguration) return value_alarmConfiguration;
        throw new UndeferrableValueException("Value 'DeploymentGroup.alarmConfiguration' is not present");
    }

    /**
     * The name of the application.
     * 
     */
    @PolicyResourceProperty(name="appName", flag="unknown_appName")
    private String value_appName;
    private boolean unknown_appName;
    public String appName() {
        if (!unknown_appName) return value_appName;
        throw new UndeferrableValueException("Value 'DeploymentGroup.appName' is not present");
    }

    /**
     * The ARN of the CodeDeploy deployment group.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'DeploymentGroup.arn' is not present");
    }

    /**
     * Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
     * 
     */
    @PolicyResourceProperty(name="autoRollbackConfiguration", flag="unknown_autoRollbackConfiguration")
    private @Nullable DeploymentGroupAutoRollbackConfiguration value_autoRollbackConfiguration;
    private boolean unknown_autoRollbackConfiguration;
    public @Nullable DeploymentGroupAutoRollbackConfiguration autoRollbackConfiguration() {
        if (!unknown_autoRollbackConfiguration) return value_autoRollbackConfiguration;
        throw new UndeferrableValueException("Value 'DeploymentGroup.autoRollbackConfiguration' is not present");
    }

    /**
     * Autoscaling groups associated with the deployment group.
     * 
     */
    @PolicyResourceProperty(name="autoscalingGroups", flag="unknown_autoscalingGroups")
    private @Nullable List<String> value_autoscalingGroups;
    private boolean unknown_autoscalingGroups;
    public @Nullable List<String> autoscalingGroups() {
        if (!unknown_autoscalingGroups) return value_autoscalingGroups;
        throw new UndeferrableValueException("Value 'DeploymentGroup.autoscalingGroups' is not present");
    }

    /**
     * Configuration block of the blue/green deployment options for a deployment group (documented below).
     * 
     */
    @PolicyResourceProperty(name="blueGreenDeploymentConfig", flag="unknown_blueGreenDeploymentConfig")
    private DeploymentGroupBlueGreenDeploymentConfig value_blueGreenDeploymentConfig;
    private boolean unknown_blueGreenDeploymentConfig;
    public DeploymentGroupBlueGreenDeploymentConfig blueGreenDeploymentConfig() {
        if (!unknown_blueGreenDeploymentConfig) return value_blueGreenDeploymentConfig;
        throw new UndeferrableValueException("Value 'DeploymentGroup.blueGreenDeploymentConfig' is not present");
    }

    /**
     * The destination platform type for the deployment.
     * 
     */
    @PolicyResourceProperty(name="computePlatform", flag="unknown_computePlatform")
    private String value_computePlatform;
    private boolean unknown_computePlatform;
    public String computePlatform() {
        if (!unknown_computePlatform) return value_computePlatform;
        throw new UndeferrableValueException("Value 'DeploymentGroup.computePlatform' is not present");
    }

    /**
     * The name of the group&#39;s deployment config. The default is &#34;CodeDeployDefault.OneAtATime&#34;.
     * 
     */
    @PolicyResourceProperty(name="deploymentConfigName", flag="unknown_deploymentConfigName")
    private @Nullable String value_deploymentConfigName;
    private boolean unknown_deploymentConfigName;
    public @Nullable String deploymentConfigName() {
        if (!unknown_deploymentConfigName) return value_deploymentConfigName;
        throw new UndeferrableValueException("Value 'DeploymentGroup.deploymentConfigName' is not present");
    }

    /**
     * The ID of the CodeDeploy deployment group.
     * 
     */
    @PolicyResourceProperty(name="deploymentGroupId", flag="unknown_deploymentGroupId")
    private String value_deploymentGroupId;
    private boolean unknown_deploymentGroupId;
    public String deploymentGroupId() {
        if (!unknown_deploymentGroupId) return value_deploymentGroupId;
        throw new UndeferrableValueException("Value 'DeploymentGroup.deploymentGroupId' is not present");
    }

    /**
     * The name of the deployment group.
     * 
     */
    @PolicyResourceProperty(name="deploymentGroupName", flag="unknown_deploymentGroupName")
    private String value_deploymentGroupName;
    private boolean unknown_deploymentGroupName;
    public String deploymentGroupName() {
        if (!unknown_deploymentGroupName) return value_deploymentGroupName;
        throw new UndeferrableValueException("Value 'DeploymentGroup.deploymentGroupName' is not present");
    }

    /**
     * Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
     * 
     */
    @PolicyResourceProperty(name="deploymentStyle", flag="unknown_deploymentStyle")
    private @Nullable DeploymentGroupDeploymentStyle value_deploymentStyle;
    private boolean unknown_deploymentStyle;
    public @Nullable DeploymentGroupDeploymentStyle deploymentStyle() {
        if (!unknown_deploymentStyle) return value_deploymentStyle;
        throw new UndeferrableValueException("Value 'DeploymentGroup.deploymentStyle' is not present");
    }

    /**
     * Tag filters associated with the deployment group. See the AWS docs for details.
     * 
     */
    @PolicyResourceProperty(name="ec2TagFilters", flag="unknown_ec2TagFilters")
    private @Nullable List<DeploymentGroupEc2TagFilter> value_ec2TagFilters;
    private boolean unknown_ec2TagFilters;
    public @Nullable List<DeploymentGroupEc2TagFilter> ec2TagFilters() {
        if (!unknown_ec2TagFilters) return value_ec2TagFilters;
        throw new UndeferrableValueException("Value 'DeploymentGroup.ec2TagFilters' is not present");
    }

    /**
     * Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
     * 
     */
    @PolicyResourceProperty(name="ec2TagSets", flag="unknown_ec2TagSets")
    private @Nullable List<DeploymentGroupEc2TagSet> value_ec2TagSets;
    private boolean unknown_ec2TagSets;
    public @Nullable List<DeploymentGroupEc2TagSet> ec2TagSets() {
        if (!unknown_ec2TagSets) return value_ec2TagSets;
        throw new UndeferrableValueException("Value 'DeploymentGroup.ec2TagSets' is not present");
    }

    /**
     * Configuration block(s) of the ECS services for a deployment group (documented below).
     * 
     */
    @PolicyResourceProperty(name="ecsService", flag="unknown_ecsService")
    private @Nullable DeploymentGroupEcsService value_ecsService;
    private boolean unknown_ecsService;
    public @Nullable DeploymentGroupEcsService ecsService() {
        if (!unknown_ecsService) return value_ecsService;
        throw new UndeferrableValueException("Value 'DeploymentGroup.ecsService' is not present");
    }

    /**
     * Single configuration block of the load balancer to use in a blue/green deployment (documented below).
     * 
     */
    @PolicyResourceProperty(name="loadBalancerInfo", flag="unknown_loadBalancerInfo")
    private @Nullable DeploymentGroupLoadBalancerInfo value_loadBalancerInfo;
    private boolean unknown_loadBalancerInfo;
    public @Nullable DeploymentGroupLoadBalancerInfo loadBalancerInfo() {
        if (!unknown_loadBalancerInfo) return value_loadBalancerInfo;
        throw new UndeferrableValueException("Value 'DeploymentGroup.loadBalancerInfo' is not present");
    }

    /**
     * On premise tag filters associated with the group. See the AWS docs for details.
     * 
     */
    @PolicyResourceProperty(name="onPremisesInstanceTagFilters", flag="unknown_onPremisesInstanceTagFilters")
    private @Nullable List<DeploymentGroupOnPremisesInstanceTagFilter> value_onPremisesInstanceTagFilters;
    private boolean unknown_onPremisesInstanceTagFilters;
    public @Nullable List<DeploymentGroupOnPremisesInstanceTagFilter> onPremisesInstanceTagFilters() {
        if (!unknown_onPremisesInstanceTagFilters) return value_onPremisesInstanceTagFilters;
        throw new UndeferrableValueException("Value 'DeploymentGroup.onPremisesInstanceTagFilters' is not present");
    }

    /**
     * Configuration block of Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. Valid values are `UPDATE` and `IGNORE`. Defaults to `UPDATE`.
     * 
     */
    @PolicyResourceProperty(name="outdatedInstancesStrategy", flag="unknown_outdatedInstancesStrategy")
    private @Nullable String value_outdatedInstancesStrategy;
    private boolean unknown_outdatedInstancesStrategy;
    public @Nullable String outdatedInstancesStrategy() {
        if (!unknown_outdatedInstancesStrategy) return value_outdatedInstancesStrategy;
        throw new UndeferrableValueException("Value 'DeploymentGroup.outdatedInstancesStrategy' is not present");
    }

    /**
     * The service role ARN that allows deployments.
     * 
     */
    @PolicyResourceProperty(name="serviceRoleArn", flag="unknown_serviceRoleArn")
    private String value_serviceRoleArn;
    private boolean unknown_serviceRoleArn;
    public String serviceRoleArn() {
        if (!unknown_serviceRoleArn) return value_serviceRoleArn;
        throw new UndeferrableValueException("Value 'DeploymentGroup.serviceRoleArn' is not present");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'DeploymentGroup.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'DeploymentGroup.tagsAll' is not present");
    }

    /**
     * Indicates whether the deployment group was configured to have CodeDeploy install a termination hook into an Auto Scaling group.
     * 
     */
    @PolicyResourceProperty(name="terminationHookEnabled", flag="unknown_terminationHookEnabled")
    private @Nullable Boolean value_terminationHookEnabled;
    private boolean unknown_terminationHookEnabled;
    public @Nullable Boolean terminationHookEnabled() {
        if (!unknown_terminationHookEnabled) return value_terminationHookEnabled;
        throw new UndeferrableValueException("Value 'DeploymentGroup.terminationHookEnabled' is not present");
    }

    /**
     * Configuration block(s) of the triggers for the deployment group (documented below).
     * 
     */
    @PolicyResourceProperty(name="triggerConfigurations", flag="unknown_triggerConfigurations")
    private @Nullable List<DeploymentGroupTriggerConfiguration> value_triggerConfigurations;
    private boolean unknown_triggerConfigurations;
    public @Nullable List<DeploymentGroupTriggerConfiguration> triggerConfigurations() {
        if (!unknown_triggerConfigurations) return value_triggerConfigurations;
        throw new UndeferrableValueException("Value 'DeploymentGroup.triggerConfigurations' is not present");
    }

}
