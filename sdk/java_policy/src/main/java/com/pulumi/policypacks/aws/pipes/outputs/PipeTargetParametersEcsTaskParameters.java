// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.pipes.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersCapacityProviderStrategy;
import com.pulumi.policypacks.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersNetworkConfiguration;
import com.pulumi.policypacks.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersOverrides;
import com.pulumi.policypacks.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersPlacementConstraint;
import com.pulumi.policypacks.aws.pipes.outputs.PipeTargetParametersEcsTaskParametersPlacementStrategy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class PipeTargetParametersEcsTaskParameters {

    /**
     * List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
     * 
     */
    private @Nullable UndeferrableValue<List<PipeTargetParametersEcsTaskParametersCapacityProviderStrategy>> capacityProviderStrategies;

    public @Nullable List<PipeTargetParametersEcsTaskParametersCapacityProviderStrategy> capacityProviderStrategies() {
        if (capacityProviderStrategies == null) return null;
        return capacityProviderStrategies.getValue("PipeTargetParametersEcsTaskParameters.capacityProviderStrategies");
    }

    /**
     * Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> enableEcsManagedTags;

    public @Nullable Boolean enableEcsManagedTags() {
        if (enableEcsManagedTags == null) return null;
        return enableEcsManagedTags.getValue("PipeTargetParametersEcsTaskParameters.enableEcsManagedTags");
    }

    /**
     * Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> enableExecuteCommand;

    public @Nullable Boolean enableExecuteCommand() {
        if (enableExecuteCommand == null) return null;
        return enableExecuteCommand.getValue("PipeTargetParametersEcsTaskParameters.enableExecuteCommand");
    }

    /**
     * Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
     * 
     */
    private @Nullable UndeferrableValue<String> group;

    public @Nullable String group() {
        if (group == null) return null;
        return group.getValue("PipeTargetParametersEcsTaskParameters.group");
    }

    /**
     * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
     * 
     */
    private @Nullable UndeferrableValue<String> launchType;

    public @Nullable String launchType() {
        if (launchType == null) return null;
        return launchType.getValue("PipeTargetParametersEcsTaskParameters.launchType");
    }

    /**
     * Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
     * 
     */
    private @Nullable UndeferrableValue<PipeTargetParametersEcsTaskParametersNetworkConfiguration> networkConfiguration;

    public @Nullable PipeTargetParametersEcsTaskParametersNetworkConfiguration networkConfiguration() {
        if (networkConfiguration == null) return null;
        return networkConfiguration.getValue("PipeTargetParametersEcsTaskParameters.networkConfiguration");
    }

    /**
     * The overrides that are associated with a task. Detailed below.
     * 
     */
    private @Nullable UndeferrableValue<PipeTargetParametersEcsTaskParametersOverrides> overrides;

    public @Nullable PipeTargetParametersEcsTaskParametersOverrides overrides() {
        if (overrides == null) return null;
        return overrides.getValue("PipeTargetParametersEcsTaskParameters.overrides");
    }

    /**
     * An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
     * 
     */
    private @Nullable UndeferrableValue<List<PipeTargetParametersEcsTaskParametersPlacementConstraint>> placementConstraints;

    public @Nullable List<PipeTargetParametersEcsTaskParametersPlacementConstraint> placementConstraints() {
        if (placementConstraints == null) return null;
        return placementConstraints.getValue("PipeTargetParametersEcsTaskParameters.placementConstraints");
    }

    /**
     * The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
     * 
     */
    private @Nullable UndeferrableValue<List<PipeTargetParametersEcsTaskParametersPlacementStrategy>> placementStrategies;

    public @Nullable List<PipeTargetParametersEcsTaskParametersPlacementStrategy> placementStrategies() {
        if (placementStrategies == null) return null;
        return placementStrategies.getValue("PipeTargetParametersEcsTaskParameters.placementStrategies");
    }

    /**
     * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
     * 
     */
    private @Nullable UndeferrableValue<String> platformVersion;

    public @Nullable String platformVersion() {
        if (platformVersion == null) return null;
        return platformVersion.getValue("PipeTargetParametersEcsTaskParameters.platformVersion");
    }

    /**
     * Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
     * 
     */
    private @Nullable UndeferrableValue<String> propagateTags;

    public @Nullable String propagateTags() {
        if (propagateTags == null) return null;
        return propagateTags.getValue("PipeTargetParametersEcsTaskParameters.propagateTags");
    }

    /**
     * The reference ID to use for the task. Maximum length of 1,024.
     * 
     */
    private @Nullable UndeferrableValue<String> referenceId;

    public @Nullable String referenceId() {
        if (referenceId == null) return null;
        return referenceId.getValue("PipeTargetParametersEcsTaskParameters.referenceId");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("PipeTargetParametersEcsTaskParameters.tags");
    }

    /**
     * The number of tasks to create based on TaskDefinition. The default is 1.
     * 
     */
    private @Nullable UndeferrableValue<Integer> taskCount;

    public @Nullable Integer taskCount() {
        if (taskCount == null) return null;
        return taskCount.getValue("PipeTargetParametersEcsTaskParameters.taskCount");
    }

    /**
     * The ARN of the task definition to use if the event target is an Amazon ECS task.
     * 
     */
    private UndeferrableValue<String> taskDefinitionArn;

    public String taskDefinitionArn() {
        if (taskDefinitionArn == null) return null;
        return taskDefinitionArn.getValue("PipeTargetParametersEcsTaskParameters.taskDefinitionArn");
    }

}
