// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticsearch.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.elasticsearch.inputs.DomainClusterConfigColdStorageOptionsArgs;
import com.pulumi.policypacks.aws.elasticsearch.inputs.DomainClusterConfigZoneAwarenessConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class DomainClusterConfigArgs {

    /**
     * Configuration block containing cold storage configuration. Detailed below.
     * 
     */
    private UndeferrableValue<DomainClusterConfigColdStorageOptionsArgs> coldStorageOptions;

    public DomainClusterConfigColdStorageOptionsArgs coldStorageOptions() {
        if (coldStorageOptions == null) return null;
        return coldStorageOptions.getValue("DomainClusterConfigArgs.coldStorageOptions");
    }

    /**
     * Number of dedicated main nodes in the cluster.
     * 
     */
    private UndeferrableValue<Integer> dedicatedMasterCount;

    public Integer dedicatedMasterCount() {
        if (dedicatedMasterCount == null) return null;
        return dedicatedMasterCount.getValue("DomainClusterConfigArgs.dedicatedMasterCount");
    }

    /**
     * Whether dedicated main nodes are enabled for the cluster.
     * 
     */
    private UndeferrableValue<Boolean> dedicatedMasterEnabled;

    public Boolean dedicatedMasterEnabled() {
        if (dedicatedMasterEnabled == null) return null;
        return dedicatedMasterEnabled.getValue("DomainClusterConfigArgs.dedicatedMasterEnabled");
    }

    /**
     * Instance type of the dedicated main nodes in the cluster.
     * 
     */
    private UndeferrableValue<String> dedicatedMasterType;

    public String dedicatedMasterType() {
        if (dedicatedMasterType == null) return null;
        return dedicatedMasterType.getValue("DomainClusterConfigArgs.dedicatedMasterType");
    }

    /**
     * Number of instances in the cluster.
     * 
     */
    private UndeferrableValue<Integer> instanceCount;

    public Integer instanceCount() {
        if (instanceCount == null) return null;
        return instanceCount.getValue("DomainClusterConfigArgs.instanceCount");
    }

    /**
     * Instance type of data nodes in the cluster.
     * 
     */
    private UndeferrableValue<String> instanceType;

    public String instanceType() {
        if (instanceType == null) return null;
        return instanceType.getValue("DomainClusterConfigArgs.instanceType");
    }

    /**
     * Number of warm nodes in the cluster. Valid values are between `2` and `150`. `warm_count` can be only and must be set when `warm_enabled` is set to `true`.
     * 
     */
    private UndeferrableValue<Integer> warmCount;

    public Integer warmCount() {
        if (warmCount == null) return null;
        return warmCount.getValue("DomainClusterConfigArgs.warmCount");
    }

    /**
     * Whether to enable warm storage.
     * 
     */
    private UndeferrableValue<Boolean> warmEnabled;

    public Boolean warmEnabled() {
        if (warmEnabled == null) return null;
        return warmEnabled.getValue("DomainClusterConfigArgs.warmEnabled");
    }

    /**
     * Instance type for the Elasticsearch cluster&#39;s warm nodes. Valid values are `ultrawarm1.medium.elasticsearch`, `ultrawarm1.large.elasticsearch` and `ultrawarm1.xlarge.elasticsearch`. `warm_type` can be only and must be set when `warm_enabled` is set to `true`.
     * 
     */
    private UndeferrableValue<String> warmType;

    public String warmType() {
        if (warmType == null) return null;
        return warmType.getValue("DomainClusterConfigArgs.warmType");
    }

    /**
     * Configuration block containing zone awareness settings. Detailed below.
     * 
     */
    private UndeferrableValue<DomainClusterConfigZoneAwarenessConfigArgs> zoneAwarenessConfig;

    public DomainClusterConfigZoneAwarenessConfigArgs zoneAwarenessConfig() {
        if (zoneAwarenessConfig == null) return null;
        return zoneAwarenessConfig.getValue("DomainClusterConfigArgs.zoneAwarenessConfig");
    }

    /**
     * Whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availability_zone_count` within the `zone_awareness_config` must be set to `3`.
     * 
     */
    private UndeferrableValue<Boolean> zoneAwarenessEnabled;

    public Boolean zoneAwarenessEnabled() {
        if (zoneAwarenessEnabled == null) return null;
        return zoneAwarenessEnabled.getValue("DomainClusterConfigArgs.zoneAwarenessEnabled");
    }

}
