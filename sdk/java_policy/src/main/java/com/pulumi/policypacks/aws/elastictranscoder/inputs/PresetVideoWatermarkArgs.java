// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elastictranscoder.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.String;
import javax.annotation.Nullable;


public final class PresetVideoWatermarkArgs {

    /**
     * The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
     * 
     */
    @PolicyResourceProperty(name="horizontalAlign", flag="unknown_horizontalAlign")
    private String value_horizontalAlign;
    private boolean unknown_horizontalAlign;
    public String horizontalAlign() {
        if (!unknown_horizontalAlign) return value_horizontalAlign;
        throw new UndeferrableValueException("Value 'PresetVideoWatermarkArgs.horizontalAlign' is not present");
    }

    /**
     * The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
     * 
     */
    @PolicyResourceProperty(name="horizontalOffset", flag="unknown_horizontalOffset")
    private String value_horizontalOffset;
    private boolean unknown_horizontalOffset;
    public String horizontalOffset() {
        if (!unknown_horizontalOffset) return value_horizontalOffset;
        throw new UndeferrableValueException("Value 'PresetVideoWatermarkArgs.horizontalOffset' is not present");
    }

    /**
     * A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
     * 
     */
    @PolicyResourceProperty(name="id", flag="unknown_id")
    private String value_id;
    private boolean unknown_id;
    public String id() {
        if (!unknown_id) return value_id;
        throw new UndeferrableValueException("Value 'PresetVideoWatermarkArgs.id' is not present");
    }

    /**
     * The maximum height of the watermark.
     * 
     */
    @PolicyResourceProperty(name="maxHeight", flag="unknown_maxHeight")
    private String value_maxHeight;
    private boolean unknown_maxHeight;
    public String maxHeight() {
        if (!unknown_maxHeight) return value_maxHeight;
        throw new UndeferrableValueException("Value 'PresetVideoWatermarkArgs.maxHeight' is not present");
    }

    /**
     * The maximum width of the watermark.
     * 
     */
    @PolicyResourceProperty(name="maxWidth", flag="unknown_maxWidth")
    private String value_maxWidth;
    private boolean unknown_maxWidth;
    public String maxWidth() {
        if (!unknown_maxWidth) return value_maxWidth;
        throw new UndeferrableValueException("Value 'PresetVideoWatermarkArgs.maxWidth' is not present");
    }

    /**
     * A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
     * 
     */
    @PolicyResourceProperty(name="opacity", flag="unknown_opacity")
    private String value_opacity;
    private boolean unknown_opacity;
    public String opacity() {
        if (!unknown_opacity) return value_opacity;
        throw new UndeferrableValueException("Value 'PresetVideoWatermarkArgs.opacity' is not present");
    }

    /**
     * A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
     * 
     */
    @PolicyResourceProperty(name="sizingPolicy", flag="unknown_sizingPolicy")
    private String value_sizingPolicy;
    private boolean unknown_sizingPolicy;
    public String sizingPolicy() {
        if (!unknown_sizingPolicy) return value_sizingPolicy;
        throw new UndeferrableValueException("Value 'PresetVideoWatermarkArgs.sizingPolicy' is not present");
    }

    /**
     * A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
     * 
     */
    @PolicyResourceProperty(name="target", flag="unknown_target")
    private String value_target;
    private boolean unknown_target;
    public String target() {
        if (!unknown_target) return value_target;
        throw new UndeferrableValueException("Value 'PresetVideoWatermarkArgs.target' is not present");
    }

    /**
     * The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
     * 
     */
    @PolicyResourceProperty(name="verticalAlign", flag="unknown_verticalAlign")
    private String value_verticalAlign;
    private boolean unknown_verticalAlign;
    public String verticalAlign() {
        if (!unknown_verticalAlign) return value_verticalAlign;
        throw new UndeferrableValueException("Value 'PresetVideoWatermarkArgs.verticalAlign' is not present");
    }

    /**
     * The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
     * 
     */
    @PolicyResourceProperty(name="verticalOffset", flag="unknown_verticalOffset")
    private String value_verticalOffset;
    private boolean unknown_verticalOffset;
    public String verticalOffset() {
        if (!unknown_verticalOffset) return value_verticalOffset;
        throw new UndeferrableValueException("Value 'PresetVideoWatermarkArgs.verticalOffset' is not present");
    }

}
