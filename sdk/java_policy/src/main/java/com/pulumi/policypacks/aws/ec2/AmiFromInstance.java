// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.outputs.AmiFromInstanceEbsBlockDevice;
import com.pulumi.policypacks.aws.ec2.outputs.AmiFromInstanceEphemeralBlockDevice;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/amiFromInstance:AmiFromInstance")
public final class AmiFromInstance extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Machine architecture for created instances. Defaults to `x86_64`.
     * 
     */
    @PolicyResourceProperty(name="architecture", flag="unknown_architecture")
    private String value_architecture;
    private boolean unknown_architecture;
    public String architecture() {
        if (!unknown_architecture) return value_architecture;
        throw new UndeferrableValueException("Value 'AmiFromInstance.architecture' is not present");
    }

    /**
     * ARN of the AMI.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'AmiFromInstance.arn' is not present");
    }

    /**
     * Boot mode of the AMI. For more information, see [Boot modes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html) in the Amazon Elastic Compute Cloud User Guide.
     * 
     */
    @PolicyResourceProperty(name="bootMode", flag="unknown_bootMode")
    private String value_bootMode;
    private boolean unknown_bootMode;
    public String bootMode() {
        if (!unknown_bootMode) return value_bootMode;
        throw new UndeferrableValueException("Value 'AmiFromInstance.bootMode' is not present");
    }

    /**
     * Date and time to deprecate the AMI. If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
     * 
     */
    @PolicyResourceProperty(name="deprecationTime", flag="unknown_deprecationTime")
    private @Nullable String value_deprecationTime;
    private boolean unknown_deprecationTime;
    public @Nullable String deprecationTime() {
        if (!unknown_deprecationTime) return value_deprecationTime;
        throw new UndeferrableValueException("Value 'AmiFromInstance.deprecationTime' is not present");
    }

    /**
     * Longer, human-readable description for the AMI.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'AmiFromInstance.description' is not present");
    }

    /**
     * Nested block describing an EBS block device that should be
     * attached to created instances. The structure of this block is described below.
     * 
     */
    @PolicyResourceProperty(name="ebsBlockDevices", flag="unknown_ebsBlockDevices")
    private List<AmiFromInstanceEbsBlockDevice> value_ebsBlockDevices;
    private boolean unknown_ebsBlockDevices;
    public List<AmiFromInstanceEbsBlockDevice> ebsBlockDevices() {
        if (!unknown_ebsBlockDevices) return value_ebsBlockDevices;
        throw new UndeferrableValueException("Value 'AmiFromInstance.ebsBlockDevices' is not present");
    }

    /**
     * Whether enhanced networking with ENA is enabled. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="enaSupport", flag="unknown_enaSupport")
    private Boolean value_enaSupport;
    private boolean unknown_enaSupport;
    public Boolean enaSupport() {
        if (!unknown_enaSupport) return value_enaSupport;
        throw new UndeferrableValueException("Value 'AmiFromInstance.enaSupport' is not present");
    }

    /**
     * Nested block describing an ephemeral block device that
     * should be attached to created instances. The structure of this block is described below.
     * 
     */
    @PolicyResourceProperty(name="ephemeralBlockDevices", flag="unknown_ephemeralBlockDevices")
    private List<AmiFromInstanceEphemeralBlockDevice> value_ephemeralBlockDevices;
    private boolean unknown_ephemeralBlockDevices;
    public List<AmiFromInstanceEphemeralBlockDevice> ephemeralBlockDevices() {
        if (!unknown_ephemeralBlockDevices) return value_ephemeralBlockDevices;
        throw new UndeferrableValueException("Value 'AmiFromInstance.ephemeralBlockDevices' is not present");
    }

    @PolicyResourceProperty(name="hypervisor", flag="unknown_hypervisor")
    private String value_hypervisor;
    private boolean unknown_hypervisor;
    public String hypervisor() {
        if (!unknown_hypervisor) return value_hypervisor;
        throw new UndeferrableValueException("Value 'AmiFromInstance.hypervisor' is not present");
    }

    /**
     * Path to an S3 object containing an image manifest, e.g., created
     * by the `ec2-upload-bundle` command in the EC2 command line tools.
     * 
     */
    @PolicyResourceProperty(name="imageLocation", flag="unknown_imageLocation")
    private String value_imageLocation;
    private boolean unknown_imageLocation;
    public String imageLocation() {
        if (!unknown_imageLocation) return value_imageLocation;
        throw new UndeferrableValueException("Value 'AmiFromInstance.imageLocation' is not present");
    }

    @PolicyResourceProperty(name="imageOwnerAlias", flag="unknown_imageOwnerAlias")
    private String value_imageOwnerAlias;
    private boolean unknown_imageOwnerAlias;
    public String imageOwnerAlias() {
        if (!unknown_imageOwnerAlias) return value_imageOwnerAlias;
        throw new UndeferrableValueException("Value 'AmiFromInstance.imageOwnerAlias' is not present");
    }

    @PolicyResourceProperty(name="imageType", flag="unknown_imageType")
    private String value_imageType;
    private boolean unknown_imageType;
    public String imageType() {
        if (!unknown_imageType) return value_imageType;
        throw new UndeferrableValueException("Value 'AmiFromInstance.imageType' is not present");
    }

    /**
     * If EC2 instances started from this image should require the use of the Instance Metadata Service V2 (IMDSv2), set this argument to `v2.0`. For more information, see [Configure instance metadata options for new instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration).
     * 
     */
    @PolicyResourceProperty(name="imdsSupport", flag="unknown_imdsSupport")
    private String value_imdsSupport;
    private boolean unknown_imdsSupport;
    public String imdsSupport() {
        if (!unknown_imdsSupport) return value_imdsSupport;
        throw new UndeferrableValueException("Value 'AmiFromInstance.imdsSupport' is not present");
    }

    /**
     * ID of the kernel image (AKI) that will be used as the paravirtual
     * kernel in created instances.
     * 
     */
    @PolicyResourceProperty(name="kernelId", flag="unknown_kernelId")
    private String value_kernelId;
    private boolean unknown_kernelId;
    public String kernelId() {
        if (!unknown_kernelId) return value_kernelId;
        throw new UndeferrableValueException("Value 'AmiFromInstance.kernelId' is not present");
    }

    /**
     * Date and time, in ISO 8601 date-time format , when the AMI was last used to launch an EC2 instance. When the AMI is used to launch an instance, there is a 24-hour delay before that usage is reported. For more information, see the following [AWS document](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-last-launched-time.html).
     * 
     */
    @PolicyResourceProperty(name="lastLaunchedTime", flag="unknown_lastLaunchedTime")
    private String value_lastLaunchedTime;
    private boolean unknown_lastLaunchedTime;
    public String lastLaunchedTime() {
        if (!unknown_lastLaunchedTime) return value_lastLaunchedTime;
        throw new UndeferrableValueException("Value 'AmiFromInstance.lastLaunchedTime' is not present");
    }

    @PolicyResourceProperty(name="manageEbsSnapshots", flag="unknown_manageEbsSnapshots")
    private Boolean value_manageEbsSnapshots;
    private boolean unknown_manageEbsSnapshots;
    public Boolean manageEbsSnapshots() {
        if (!unknown_manageEbsSnapshots) return value_manageEbsSnapshots;
        throw new UndeferrableValueException("Value 'AmiFromInstance.manageEbsSnapshots' is not present");
    }

    /**
     * Region-unique name for the AMI.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'AmiFromInstance.name' is not present");
    }

    @PolicyResourceProperty(name="ownerId", flag="unknown_ownerId")
    private String value_ownerId;
    private boolean unknown_ownerId;
    public String ownerId() {
        if (!unknown_ownerId) return value_ownerId;
        throw new UndeferrableValueException("Value 'AmiFromInstance.ownerId' is not present");
    }

    @PolicyResourceProperty(name="platform", flag="unknown_platform")
    private String value_platform;
    private boolean unknown_platform;
    public String platform() {
        if (!unknown_platform) return value_platform;
        throw new UndeferrableValueException("Value 'AmiFromInstance.platform' is not present");
    }

    @PolicyResourceProperty(name="platformDetails", flag="unknown_platformDetails")
    private String value_platformDetails;
    private boolean unknown_platformDetails;
    public String platformDetails() {
        if (!unknown_platformDetails) return value_platformDetails;
        throw new UndeferrableValueException("Value 'AmiFromInstance.platformDetails' is not present");
    }

    @PolicyResourceProperty(name="public", flag="unknown_public_")
    private Boolean value_public_;
    private boolean unknown_public_;
    public Boolean public_() {
        if (!unknown_public_) return value_public_;
        throw new UndeferrableValueException("Value 'AmiFromInstance.public_' is not present");
    }

    /**
     * ID of an initrd image (ARI) that will be used when booting the
     * created instances.
     * 
     */
    @PolicyResourceProperty(name="ramdiskId", flag="unknown_ramdiskId")
    private String value_ramdiskId;
    private boolean unknown_ramdiskId;
    public String ramdiskId() {
        if (!unknown_ramdiskId) return value_ramdiskId;
        throw new UndeferrableValueException("Value 'AmiFromInstance.ramdiskId' is not present");
    }

    /**
     * Name of the root device (for example, `/dev/sda1`, or `/dev/xvda`).
     * 
     */
    @PolicyResourceProperty(name="rootDeviceName", flag="unknown_rootDeviceName")
    private String value_rootDeviceName;
    private boolean unknown_rootDeviceName;
    public String rootDeviceName() {
        if (!unknown_rootDeviceName) return value_rootDeviceName;
        throw new UndeferrableValueException("Value 'AmiFromInstance.rootDeviceName' is not present");
    }

    @PolicyResourceProperty(name="rootSnapshotId", flag="unknown_rootSnapshotId")
    private String value_rootSnapshotId;
    private boolean unknown_rootSnapshotId;
    public String rootSnapshotId() {
        if (!unknown_rootSnapshotId) return value_rootSnapshotId;
        throw new UndeferrableValueException("Value 'AmiFromInstance.rootSnapshotId' is not present");
    }

    /**
     * Boolean that overrides the behavior of stopping
     * the instance before snapshotting. This is risky since it may cause a snapshot of an
     * inconsistent filesystem state, but can be used to avoid downtime if the user otherwise
     * guarantees that no filesystem writes will be underway at the time of snapshot.
     * 
     */
    @PolicyResourceProperty(name="snapshotWithoutReboot", flag="unknown_snapshotWithoutReboot")
    private @Nullable Boolean value_snapshotWithoutReboot;
    private boolean unknown_snapshotWithoutReboot;
    public @Nullable Boolean snapshotWithoutReboot() {
        if (!unknown_snapshotWithoutReboot) return value_snapshotWithoutReboot;
        throw new UndeferrableValueException("Value 'AmiFromInstance.snapshotWithoutReboot' is not present");
    }

    /**
     * ID of the instance to use as the basis of the AMI.
     * 
     */
    @PolicyResourceProperty(name="sourceInstanceId", flag="unknown_sourceInstanceId")
    private String value_sourceInstanceId;
    private boolean unknown_sourceInstanceId;
    public String sourceInstanceId() {
        if (!unknown_sourceInstanceId) return value_sourceInstanceId;
        throw new UndeferrableValueException("Value 'AmiFromInstance.sourceInstanceId' is not present");
    }

    /**
     * When set to &#34;simple&#34; (the default), enables enhanced networking
     * for created instances. No other value is supported at this time.
     * 
     */
    @PolicyResourceProperty(name="sriovNetSupport", flag="unknown_sriovNetSupport")
    private String value_sriovNetSupport;
    private boolean unknown_sriovNetSupport;
    public String sriovNetSupport() {
        if (!unknown_sriovNetSupport) return value_sriovNetSupport;
        throw new UndeferrableValueException("Value 'AmiFromInstance.sriovNetSupport' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'AmiFromInstance.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'AmiFromInstance.tagsAll' is not present");
    }

    /**
     * If the image is configured for NitroTPM support, the value is `v2.0`. For more information, see [NitroTPM](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html) in the Amazon Elastic Compute Cloud User Guide.
     * 
     */
    @PolicyResourceProperty(name="tpmSupport", flag="unknown_tpmSupport")
    private String value_tpmSupport;
    private boolean unknown_tpmSupport;
    public String tpmSupport() {
        if (!unknown_tpmSupport) return value_tpmSupport;
        throw new UndeferrableValueException("Value 'AmiFromInstance.tpmSupport' is not present");
    }

    /**
     * Base64 representation of the non-volatile UEFI variable store.
     * 
     */
    @PolicyResourceProperty(name="uefiData", flag="unknown_uefiData")
    private String value_uefiData;
    private boolean unknown_uefiData;
    public String uefiData() {
        if (!unknown_uefiData) return value_uefiData;
        throw new UndeferrableValueException("Value 'AmiFromInstance.uefiData' is not present");
    }

    @PolicyResourceProperty(name="usageOperation", flag="unknown_usageOperation")
    private String value_usageOperation;
    private boolean unknown_usageOperation;
    public String usageOperation() {
        if (!unknown_usageOperation) return value_usageOperation;
        throw new UndeferrableValueException("Value 'AmiFromInstance.usageOperation' is not present");
    }

    /**
     * Keyword to choose what virtualization mode created instances
     * will use. Can be either &#34;paravirtual&#34; (the default) or &#34;hvm&#34;. The choice of virtualization type
     * changes the set of further arguments that are required, as described below.
     * 
     */
    @PolicyResourceProperty(name="virtualizationType", flag="unknown_virtualizationType")
    private String value_virtualizationType;
    private boolean unknown_virtualizationType;
    public String virtualizationType() {
        if (!unknown_virtualizationType) return value_virtualizationType;
        throw new UndeferrableValueException("Value 'AmiFromInstance.virtualizationType' is not present");
    }

}
