// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs {

    /**
     * Average bitrate in bits/second.
     * 
     */
    private UndeferrableValue<Double> bitrate;

    public Double bitrate() {
        if (bitrate == null) return null;
        return bitrate.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs.bitrate");
    }

    /**
     * Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
     * 
     */
    private UndeferrableValue<String> bitstreamMode;

    public String bitstreamMode() {
        if (bitstreamMode == null) return null;
        return bitstreamMode.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs.bitstreamMode");
    }

    /**
     * Dolby Digital coding mode.
     * 
     */
    private UndeferrableValue<String> codingMode;

    public String codingMode() {
        if (codingMode == null) return null;
        return codingMode.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs.codingMode");
    }

    /**
     * Sets the dialnorm of the output.
     * 
     */
    private UndeferrableValue<Integer> dialnorm;

    public Integer dialnorm() {
        if (dialnorm == null) return null;
        return dialnorm.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs.dialnorm");
    }

    /**
     * If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
     * 
     */
    private UndeferrableValue<String> drcProfile;

    public String drcProfile() {
        if (drcProfile == null) return null;
        return drcProfile.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs.drcProfile");
    }

    /**
     * When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
     * 
     */
    private UndeferrableValue<String> lfeFilter;

    public String lfeFilter() {
        if (lfeFilter == null) return null;
        return lfeFilter.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs.lfeFilter");
    }

    /**
     * Metadata control.
     * 
     */
    private UndeferrableValue<String> metadataControl;

    public String metadataControl() {
        if (metadataControl == null) return null;
        return metadataControl.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3SettingsArgs.metadataControl");
    }

}
