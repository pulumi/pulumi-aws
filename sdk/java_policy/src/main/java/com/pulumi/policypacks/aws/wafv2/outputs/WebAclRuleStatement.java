// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.wafv2.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementAndStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementByteMatchStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementGeoMatchStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementIpSetReferenceStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementLabelMatchStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementManagedRuleGroupStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementNotStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementOrStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementRateBasedStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementRegexMatchStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementRegexPatternSetReferenceStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementRuleGroupReferenceStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementSizeConstraintStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementSqliMatchStatement;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementXssMatchStatement;
import javax.annotation.Nullable;


public final class WebAclRuleStatement {

    /**
     * Logical rule statement used to combine other rule statements with AND logic. See `and_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementAndStatement> andStatement;

    public @Nullable WebAclRuleStatementAndStatement andStatement() {
        if (andStatement == null) return null;
        return andStatement.getValue("WebAclRuleStatement.andStatement");
    }

    /**
     * Rule statement that defines a string match search for AWS WAF to apply to web requests. See `byte_match_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementByteMatchStatement> byteMatchStatement;

    public @Nullable WebAclRuleStatementByteMatchStatement byteMatchStatement() {
        if (byteMatchStatement == null) return null;
        return byteMatchStatement.getValue("WebAclRuleStatement.byteMatchStatement");
    }

    /**
     * Rule statement used to identify web requests based on country of origin. See `geo_match_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementGeoMatchStatement> geoMatchStatement;

    public @Nullable WebAclRuleStatementGeoMatchStatement geoMatchStatement() {
        if (geoMatchStatement == null) return null;
        return geoMatchStatement.getValue("WebAclRuleStatement.geoMatchStatement");
    }

    /**
     * Rule statement used to detect web requests coming from particular IP addresses or address ranges. See `ip_set_reference_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementIpSetReferenceStatement> ipSetReferenceStatement;

    public @Nullable WebAclRuleStatementIpSetReferenceStatement ipSetReferenceStatement() {
        if (ipSetReferenceStatement == null) return null;
        return ipSetReferenceStatement.getValue("WebAclRuleStatement.ipSetReferenceStatement");
    }

    /**
     * Rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. See `label_match_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementLabelMatchStatement> labelMatchStatement;

    public @Nullable WebAclRuleStatementLabelMatchStatement labelMatchStatement() {
        if (labelMatchStatement == null) return null;
        return labelMatchStatement.getValue("WebAclRuleStatement.labelMatchStatement");
    }

    /**
     * Rule statement used to run the rules that are defined in a managed rule group.  This statement can not be nested. See `managed_rule_group_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementManagedRuleGroupStatement> managedRuleGroupStatement;

    public @Nullable WebAclRuleStatementManagedRuleGroupStatement managedRuleGroupStatement() {
        if (managedRuleGroupStatement == null) return null;
        return managedRuleGroupStatement.getValue("WebAclRuleStatement.managedRuleGroupStatement");
    }

    /**
     * Logical rule statement used to negate the results of another rule statement. See `not_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementNotStatement> notStatement;

    public @Nullable WebAclRuleStatementNotStatement notStatement() {
        if (notStatement == null) return null;
        return notStatement.getValue("WebAclRuleStatement.notStatement");
    }

    /**
     * Logical rule statement used to combine other rule statements with OR logic. See `or_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementOrStatement> orStatement;

    public @Nullable WebAclRuleStatementOrStatement orStatement() {
        if (orStatement == null) return null;
        return orStatement.getValue("WebAclRuleStatement.orStatement");
    }

    /**
     * Rate-based rule tracks the rate of requests for each originating `IP address`, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any `5-minute` time span. This statement can not be nested. See `rate_based_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementRateBasedStatement> rateBasedStatement;

    public @Nullable WebAclRuleStatementRateBasedStatement rateBasedStatement() {
        if (rateBasedStatement == null) return null;
        return rateBasedStatement.getValue("WebAclRuleStatement.rateBasedStatement");
    }

    /**
     * Rule statement used to search web request components for a match against a single regular expression. See `regex_match_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementRegexMatchStatement> regexMatchStatement;

    public @Nullable WebAclRuleStatementRegexMatchStatement regexMatchStatement() {
        if (regexMatchStatement == null) return null;
        return regexMatchStatement.getValue("WebAclRuleStatement.regexMatchStatement");
    }

    /**
     * Rule statement used to search web request components for matches with regular expressions. See `regex_pattern_set_reference_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementRegexPatternSetReferenceStatement> regexPatternSetReferenceStatement;

    public @Nullable WebAclRuleStatementRegexPatternSetReferenceStatement regexPatternSetReferenceStatement() {
        if (regexPatternSetReferenceStatement == null) return null;
        return regexPatternSetReferenceStatement.getValue("WebAclRuleStatement.regexPatternSetReferenceStatement");
    }

    /**
     * Rule statement used to run the rules that are defined in an WAFv2 Rule Group. See `rule_group_reference_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementRuleGroupReferenceStatement> ruleGroupReferenceStatement;

    public @Nullable WebAclRuleStatementRuleGroupReferenceStatement ruleGroupReferenceStatement() {
        if (ruleGroupReferenceStatement == null) return null;
        return ruleGroupReferenceStatement.getValue("WebAclRuleStatement.ruleGroupReferenceStatement");
    }

    /**
     * Rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (&gt;) or less than (&lt;). See `size_constraint_statement` below for more details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementSizeConstraintStatement> sizeConstraintStatement;

    public @Nullable WebAclRuleStatementSizeConstraintStatement sizeConstraintStatement() {
        if (sizeConstraintStatement == null) return null;
        return sizeConstraintStatement.getValue("WebAclRuleStatement.sizeConstraintStatement");
    }

    /**
     * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See `sqli_match_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementSqliMatchStatement> sqliMatchStatement;

    public @Nullable WebAclRuleStatementSqliMatchStatement sqliMatchStatement() {
        if (sqliMatchStatement == null) return null;
        return sqliMatchStatement.getValue("WebAclRuleStatement.sqliMatchStatement");
    }

    /**
     * Rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See `xss_match_statement` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementXssMatchStatement> xssMatchStatement;

    public @Nullable WebAclRuleStatementXssMatchStatement xssMatchStatement() {
        if (xssMatchStatement == null) return null;
        return xssMatchStatement.getValue("WebAclRuleStatement.xssMatchStatement");
    }

}
