// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.timestreamquery.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMixedMeasureMappingArgs;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsArgs;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class ScheduledQueryTargetConfigurationTimestreamConfigurationArgs {

    /**
     * Name of Timestream database to which the query result will be written.
     * 
     */
    private UndeferrableValue<String> databaseName;

    public String databaseName() {
        if (databaseName == null) return null;
        return databaseName.getValue("ScheduledQueryTargetConfigurationTimestreamConfigurationArgs.databaseName");
    }

    /**
     * Configuration block for mapping of column(s) from the query result to the dimension in the destination table. See below.
     * 
     */
    private UndeferrableValue<List<ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs>> dimensionMappings;

    public List<ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs> dimensionMappings() {
        if (dimensionMappings == null) return null;
        return dimensionMappings.getValue("ScheduledQueryTargetConfigurationTimestreamConfigurationArgs.dimensionMappings");
    }

    /**
     * Name of the measure column.
     * 
     */
    private UndeferrableValue<String> measureNameColumn;

    public String measureNameColumn() {
        if (measureNameColumn == null) return null;
        return measureNameColumn.getValue("ScheduledQueryTargetConfigurationTimestreamConfigurationArgs.measureNameColumn");
    }

    /**
     * Configuration block for how to map measures to multi-measure records. See below.
     * 
     */
    private UndeferrableValue<List<ScheduledQueryTargetConfigurationTimestreamConfigurationMixedMeasureMappingArgs>> mixedMeasureMappings;

    public List<ScheduledQueryTargetConfigurationTimestreamConfigurationMixedMeasureMappingArgs> mixedMeasureMappings() {
        if (mixedMeasureMappings == null) return null;
        return mixedMeasureMappings.getValue("ScheduledQueryTargetConfigurationTimestreamConfigurationArgs.mixedMeasureMappings");
    }

    /**
     * Configuration block for multi-measure mappings. Only one of `mixed_measure_mappings` or `multi_measure_mappings` can be provided. `multi_measure_mappings` can be used to ingest data as multi measures in the derived table. See below.
     * 
     */
    private UndeferrableValue<ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsArgs> multiMeasureMappings;

    public ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsArgs multiMeasureMappings() {
        if (multiMeasureMappings == null) return null;
        return multiMeasureMappings.getValue("ScheduledQueryTargetConfigurationTimestreamConfigurationArgs.multiMeasureMappings");
    }

    /**
     * Name of Timestream table that the query result will be written to. The table should be within the same database that is provided in Timestream configuration.
     * 
     */
    private UndeferrableValue<String> tableName;

    public String tableName() {
        if (tableName == null) return null;
        return tableName.getValue("ScheduledQueryTargetConfigurationTimestreamConfigurationArgs.tableName");
    }

    /**
     * Column from query result that should be used as the time column in destination table. Column type for this should be TIMESTAMP.
     * 
     */
    private UndeferrableValue<String> timeColumn;

    public String timeColumn() {
        if (timeColumn == null) return null;
        return timeColumn.getValue("ScheduledQueryTargetConfigurationTimestreamConfigurationArgs.timeColumn");
    }

}
