// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.emrserverless;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.emrserverless.inputs.ApplicationAutoStartConfigurationArgs;
import com.pulumi.policypacks.aws.emrserverless.inputs.ApplicationAutoStopConfigurationArgs;
import com.pulumi.policypacks.aws.emrserverless.inputs.ApplicationImageConfigurationArgs;
import com.pulumi.policypacks.aws.emrserverless.inputs.ApplicationInitialCapacityArgs;
import com.pulumi.policypacks.aws.emrserverless.inputs.ApplicationInteractiveConfigurationArgs;
import com.pulumi.policypacks.aws.emrserverless.inputs.ApplicationMaximumCapacityArgs;
import com.pulumi.policypacks.aws.emrserverless.inputs.ApplicationNetworkConfigurationArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:emrserverless/application:Application")
public final class ApplicationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The CPU architecture of an application. Valid values are `ARM64` or `X86_64`. Default value is `X86_64`.
     * 
     */
    private UndeferrableValue<String> architecture;

    public String architecture() {
        if (architecture == null) return null;
        return architecture.getValue("ApplicationArgs.architecture");
    }

    /**
     * The configuration for an application to automatically start on job submission.
     * 
     */
    private UndeferrableValue<ApplicationAutoStartConfigurationArgs> autoStartConfiguration;

    public ApplicationAutoStartConfigurationArgs autoStartConfiguration() {
        if (autoStartConfiguration == null) return null;
        return autoStartConfiguration.getValue("ApplicationArgs.autoStartConfiguration");
    }

    /**
     * The configuration for an application to automatically stop after a certain amount of time being idle.
     * 
     */
    private UndeferrableValue<ApplicationAutoStopConfigurationArgs> autoStopConfiguration;

    public ApplicationAutoStopConfigurationArgs autoStopConfiguration() {
        if (autoStopConfiguration == null) return null;
        return autoStopConfiguration.getValue("ApplicationArgs.autoStopConfiguration");
    }

    /**
     * The image configuration applied to all worker types.
     * 
     */
    private UndeferrableValue<ApplicationImageConfigurationArgs> imageConfiguration;

    public ApplicationImageConfigurationArgs imageConfiguration() {
        if (imageConfiguration == null) return null;
        return imageConfiguration.getValue("ApplicationArgs.imageConfiguration");
    }

    /**
     * The capacity to initialize when the application is created.
     * 
     */
    private UndeferrableValue<List<ApplicationInitialCapacityArgs>> initialCapacities;

    public List<ApplicationInitialCapacityArgs> initialCapacities() {
        if (initialCapacities == null) return null;
        return initialCapacities.getValue("ApplicationArgs.initialCapacities");
    }

    /**
     * Enables the interactive use cases to use when running an application.
     * 
     */
    private UndeferrableValue<ApplicationInteractiveConfigurationArgs> interactiveConfiguration;

    public ApplicationInteractiveConfigurationArgs interactiveConfiguration() {
        if (interactiveConfiguration == null) return null;
        return interactiveConfiguration.getValue("ApplicationArgs.interactiveConfiguration");
    }

    /**
     * The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
     * 
     */
    private UndeferrableValue<ApplicationMaximumCapacityArgs> maximumCapacity;

    public ApplicationMaximumCapacityArgs maximumCapacity() {
        if (maximumCapacity == null) return null;
        return maximumCapacity.getValue("ApplicationArgs.maximumCapacity");
    }

    /**
     * The name of the application.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ApplicationArgs.name");
    }

    /**
     * The network configuration for customer VPC connectivity.
     * 
     */
    private UndeferrableValue<ApplicationNetworkConfigurationArgs> networkConfiguration;

    public ApplicationNetworkConfigurationArgs networkConfiguration() {
        if (networkConfiguration == null) return null;
        return networkConfiguration.getValue("ApplicationArgs.networkConfiguration");
    }

    /**
     * The EMR release version associated with the application.
     * 
     */
    private UndeferrableValue<String> releaseLabel;

    public String releaseLabel() {
        if (releaseLabel == null) return null;
        return releaseLabel.getValue("ApplicationArgs.releaseLabel");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ApplicationArgs.tags");
    }

    /**
     * The type of application you want to start, such as `spark` or `hive`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("ApplicationArgs.type");
    }

}
