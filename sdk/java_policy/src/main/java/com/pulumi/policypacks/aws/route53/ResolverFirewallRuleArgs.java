// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.route53;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:route53/resolverFirewallRule:ResolverFirewallRule")
public final class ResolverFirewallRuleArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule&#39;s domain list. Valid values: `ALLOW`, `BLOCK`, `ALERT`.
     * 
     */
    private UndeferrableValue<String> action;

    public String action() {
        if (action == null) return null;
        return action.getValue("ResolverFirewallRuleArgs.action");
    }

    /**
     * The DNS record&#39;s type. This determines the format of the record value that you provided in BlockOverrideDomain. Value values: `CNAME`.
     * 
     */
    private UndeferrableValue<String> blockOverrideDnsType;

    public String blockOverrideDnsType() {
        if (blockOverrideDnsType == null) return null;
        return blockOverrideDnsType.getValue("ResolverFirewallRuleArgs.blockOverrideDnsType");
    }

    /**
     * The custom DNS record to send back in response to the query.
     * 
     */
    private UndeferrableValue<String> blockOverrideDomain;

    public String blockOverrideDomain() {
        if (blockOverrideDomain == null) return null;
        return blockOverrideDomain.getValue("ResolverFirewallRuleArgs.blockOverrideDomain");
    }

    /**
     * The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Minimum value of 0. Maximum value of 604800.
     * 
     */
    private UndeferrableValue<Integer> blockOverrideTtl;

    public Integer blockOverrideTtl() {
        if (blockOverrideTtl == null) return null;
        return blockOverrideTtl.getValue("ResolverFirewallRuleArgs.blockOverrideTtl");
    }

    /**
     * The way that you want DNS Firewall to block the request. Valid values: `NODATA`, `NXDOMAIN`, `OVERRIDE`.
     * 
     */
    private UndeferrableValue<String> blockResponse;

    public String blockResponse() {
        if (blockResponse == null) return null;
        return blockResponse.getValue("ResolverFirewallRuleArgs.blockResponse");
    }

    /**
     * The ID of the domain list that you want to use in the rule.
     * 
     */
    private UndeferrableValue<String> firewallDomainListId;

    public String firewallDomainListId() {
        if (firewallDomainListId == null) return null;
        return firewallDomainListId.getValue("ResolverFirewallRuleArgs.firewallDomainListId");
    }

    /**
     * Evaluate DNS redirection in the DNS redirection chain, such as CNAME, DNAME, ot ALIAS. Valid values are `INSPECT_REDIRECTION_DOMAIN` and `TRUST_REDIRECTION_DOMAIN`. Default value is `INSPECT_REDIRECTION_DOMAIN`.
     * 
     */
    private UndeferrableValue<String> firewallDomainRedirectionAction;

    public String firewallDomainRedirectionAction() {
        if (firewallDomainRedirectionAction == null) return null;
        return firewallDomainRedirectionAction.getValue("ResolverFirewallRuleArgs.firewallDomainRedirectionAction");
    }

    /**
     * The unique identifier of the firewall rule group where you want to create the rule.
     * 
     */
    private UndeferrableValue<String> firewallRuleGroupId;

    public String firewallRuleGroupId() {
        if (firewallRuleGroupId == null) return null;
        return firewallRuleGroupId.getValue("ResolverFirewallRuleArgs.firewallRuleGroupId");
    }

    /**
     * A name that lets you identify the rule, to manage and use it.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ResolverFirewallRuleArgs.name");
    }

    /**
     * The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.
     * 
     */
    private UndeferrableValue<Integer> priority;

    public Integer priority() {
        if (priority == null) return null;
        return priority.getValue("ResolverFirewallRuleArgs.priority");
    }

    /**
     * The query type you want the rule to evaluate. Additional details can be found [here](https://en.wikipedia.org/wiki/List_of_DNS_record_types)
     * 
     */
    private UndeferrableValue<String> qType;

    public String qType() {
        if (qType == null) return null;
        return qType.getValue("ResolverFirewallRuleArgs.qType");
    }

}
