// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.inputs.NamespaceTimeoutsArgs;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:quicksight/namespace:Namespace")
public final class NamespaceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * AWS account ID.
     * 
     */
    private UndeferrableValue<String> awsAccountId;

    public String awsAccountId() {
        if (awsAccountId == null) return null;
        return awsAccountId.getValue("NamespaceArgs.awsAccountId");
    }

    /**
     * User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
     * 
     */
    private UndeferrableValue<String> identityStore;

    public String identityStore() {
        if (identityStore == null) return null;
        return identityStore.getValue("NamespaceArgs.identityStore");
    }

    /**
     * Name of the namespace.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> namespace;

    public String namespace() {
        if (namespace == null) return null;
        return namespace.getValue("NamespaceArgs.namespace");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("NamespaceArgs.tags");
    }

    private UndeferrableValue<NamespaceTimeoutsArgs> timeouts;

    public NamespaceTimeoutsArgs timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("NamespaceArgs.timeouts");
    }

}
