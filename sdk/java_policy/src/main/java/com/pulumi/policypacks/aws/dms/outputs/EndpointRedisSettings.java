// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dms.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class EndpointRedisSettings {

    /**
     * The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.
     * 
     */
    private @Nullable UndeferrableValue<String> authPassword;

    public @Nullable String authPassword() {
        if (authPassword == null) return null;
        return authPassword.getValue("EndpointRedisSettings.authPassword");
    }

    /**
     * The type of authentication to perform when connecting to a Redis target. Options include `none`, `auth-token`, and `auth-role`. The `auth-token` option requires an `auth_password` value to be provided. The `auth-role` option requires `auth_user_name` and `auth_password` values to be provided.
     * 
     */
    private UndeferrableValue<String> authType;

    public String authType() {
        if (authType == null) return null;
        return authType.getValue("EndpointRedisSettings.authType");
    }

    /**
     * The username provided with the `auth-role` option of the AuthType setting for a Redis target endpoint.
     * 
     */
    private @Nullable UndeferrableValue<String> authUserName;

    public @Nullable String authUserName() {
        if (authUserName == null) return null;
        return authUserName.getValue("EndpointRedisSettings.authUserName");
    }

    /**
     * Transmission Control Protocol (TCP) port for the endpoint.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("EndpointRedisSettings.port");
    }

    /**
     * Fully qualified domain name of the endpoint.
     * 
     */
    private UndeferrableValue<String> serverName;

    public String serverName() {
        if (serverName == null) return null;
        return serverName.getValue("EndpointRedisSettings.serverName");
    }

    /**
     * The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.
     * 
     */
    private @Nullable UndeferrableValue<String> sslCaCertificateArn;

    public @Nullable String sslCaCertificateArn() {
        if (sslCaCertificateArn == null) return null;
        return sslCaCertificateArn.getValue("EndpointRedisSettings.sslCaCertificateArn");
    }

    /**
     * The plaintext option doesn&#39;t provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include `plaintext`, `ssl-encryption`. The default is `ssl-encryption`.
     * 
     */
    private @Nullable UndeferrableValue<String> sslSecurityProtocol;

    public @Nullable String sslSecurityProtocol() {
        if (sslSecurityProtocol == null) return null;
        return sslSecurityProtocol.getValue("EndpointRedisSettings.sslSecurityProtocol");
    }

}
