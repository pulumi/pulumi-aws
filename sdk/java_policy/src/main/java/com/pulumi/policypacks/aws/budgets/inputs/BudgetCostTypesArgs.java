// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.budgets.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import javax.annotation.Nullable;


public final class BudgetCostTypesArgs {

    /**
     * A boolean value whether to include credits in the cost budget. Defaults to `true`
     * 
     */
    private UndeferrableValue<Boolean> includeCredit;

    public Boolean includeCredit() {
        if (includeCredit == null) return null;
        return includeCredit.getValue("BudgetCostTypesArgs.includeCredit");
    }

    /**
     * Whether a budget includes discounts. Defaults to `true`
     * 
     */
    private UndeferrableValue<Boolean> includeDiscount;

    public Boolean includeDiscount() {
        if (includeDiscount == null) return null;
        return includeDiscount.getValue("BudgetCostTypesArgs.includeDiscount");
    }

    /**
     * A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
     * 
     */
    private UndeferrableValue<Boolean> includeOtherSubscription;

    public Boolean includeOtherSubscription() {
        if (includeOtherSubscription == null) return null;
        return includeOtherSubscription.getValue("BudgetCostTypesArgs.includeOtherSubscription");
    }

    /**
     * A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
     * 
     */
    private UndeferrableValue<Boolean> includeRecurring;

    public Boolean includeRecurring() {
        if (includeRecurring == null) return null;
        return includeRecurring.getValue("BudgetCostTypesArgs.includeRecurring");
    }

    /**
     * A boolean value whether to include refunds in the cost budget. Defaults to `true`
     * 
     */
    private UndeferrableValue<Boolean> includeRefund;

    public Boolean includeRefund() {
        if (includeRefund == null) return null;
        return includeRefund.getValue("BudgetCostTypesArgs.includeRefund");
    }

    /**
     * A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
     * 
     */
    private UndeferrableValue<Boolean> includeSubscription;

    public Boolean includeSubscription() {
        if (includeSubscription == null) return null;
        return includeSubscription.getValue("BudgetCostTypesArgs.includeSubscription");
    }

    /**
     * A boolean value whether to include support costs in the cost budget. Defaults to `true`
     * 
     */
    private UndeferrableValue<Boolean> includeSupport;

    public Boolean includeSupport() {
        if (includeSupport == null) return null;
        return includeSupport.getValue("BudgetCostTypesArgs.includeSupport");
    }

    /**
     * A boolean value whether to include tax in the cost budget. Defaults to `true`
     * 
     */
    private UndeferrableValue<Boolean> includeTax;

    public Boolean includeTax() {
        if (includeTax == null) return null;
        return includeTax.getValue("BudgetCostTypesArgs.includeTax");
    }

    /**
     * A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
     * 
     */
    private UndeferrableValue<Boolean> includeUpfront;

    public Boolean includeUpfront() {
        if (includeUpfront == null) return null;
        return includeUpfront.getValue("BudgetCostTypesArgs.includeUpfront");
    }

    /**
     * Whether a budget uses the amortized rate. Defaults to `false`
     * 
     */
    private UndeferrableValue<Boolean> useAmortized;

    public Boolean useAmortized() {
        if (useAmortized == null) return null;
        return useAmortized.getValue("BudgetCostTypesArgs.useAmortized");
    }

    /**
     * A boolean value whether to use blended costs in the cost budget. Defaults to `false`
     * 
     */
    private UndeferrableValue<Boolean> useBlended;

    public Boolean useBlended() {
        if (useBlended == null) return null;
        return useBlended.getValue("BudgetCostTypesArgs.useBlended");
    }

}
