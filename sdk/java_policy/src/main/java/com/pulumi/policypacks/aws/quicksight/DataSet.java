// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.DataSetColumnGroup;
import com.pulumi.policypacks.aws.quicksight.DataSetColumnLevelPermissionRule;
import com.pulumi.policypacks.aws.quicksight.DataSetDataSetUsageConfiguration;
import com.pulumi.policypacks.aws.quicksight.DataSetFieldFolder;
import com.pulumi.policypacks.aws.quicksight.DataSetLogicalTableMap;
import com.pulumi.policypacks.aws.quicksight.DataSetOutputColumn;
import com.pulumi.policypacks.aws.quicksight.DataSetPermission;
import com.pulumi.policypacks.aws.quicksight.DataSetPhysicalTableMap;
import com.pulumi.policypacks.aws.quicksight.DataSetRefreshProperties;
import com.pulumi.policypacks.aws.quicksight.DataSetRowLevelPermissionDataSet;
import com.pulumi.policypacks.aws.quicksight.DataSetRowLevelPermissionTagConfiguration;
import java.lang.String;
import java.util.List;
import java.util.Map;


@PolicyResourceType(type="aws:quicksight/dataSet:DataSet")
public final class DataSet extends com.pulumi.resources.PolicyResource {

    /**
     * Amazon Resource Name (ARN) of the data set.
     * 
     */
    public String arn;



    /**
     * AWS account ID.
     * 
     */
    public String awsAccountId;



    /**
     * Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
     * 
     */
    public List<DataSetColumnGroup> columnGroups;



    /**
     * A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
     * 
     */
    public List<DataSetColumnLevelPermissionRule> columnLevelPermissionRules;



    /**
     * Identifier for the data set.
     * 
     */
    public String dataSetId;



    /**
     * The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
     * 
     */
    public DataSetDataSetUsageConfiguration dataSetUsageConfiguration;



    /**
     * The folder that contains fields and nested subfolders for your dataset. See field_folders.
     * 
     */
    public List<DataSetFieldFolder> fieldFolders;



    /**
     * Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
     * 
     */
    public String importMode;



    /**
     * Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
     * 
     */
    public List<DataSetLogicalTableMap> logicalTableMaps;



    /**
     * Display name for the dataset.
     * 
     */
    public String name;



    public List<DataSetOutputColumn> outputColumns;



    /**
     * A set of resource permissions on the data source. Maximum of 64 items. See permissions.
     * 
     */
    public List<DataSetPermission> permissions;



    /**
     * Declares the physical tables that are available in the underlying data sources. See physical_table_map.
     * 
     * The following arguments are optional:
     * 
     */
    public List<DataSetPhysicalTableMap> physicalTableMaps;



    /**
     * The refresh properties for the data set. **NOTE**: Only valid when `import_mode` is set to `SPICE`. See refresh_properties.
     * 
     */
    public DataSetRefreshProperties refreshProperties;



    /**
     * The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
     * 
     */
    public DataSetRowLevelPermissionDataSet rowLevelPermissionDataSet;



    /**
     * The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
     * 
     */
    public DataSetRowLevelPermissionTagConfiguration rowLevelPermissionTagConfiguration;



    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Map<String,String> tags;



    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Map<String,String> tagsAll;



}
