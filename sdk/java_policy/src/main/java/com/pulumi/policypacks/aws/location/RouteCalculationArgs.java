// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.location;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:location/routeCalculation:RouteCalculation")
public final class RouteCalculationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The name of the route calculator resource.
     * 
     */
    @PolicyResourceProperty(name="calculatorName", flag="unknown_calculatorName")
    private String value_calculatorName;
    private boolean unknown_calculatorName;
    public String calculatorName() {
        if (!unknown_calculatorName) return value_calculatorName;
        throw new UndeferrableValueException("Value 'RouteCalculationArgs.calculatorName' is not present");
    }

    /**
     * Specifies the data provider of traffic and road network data.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="dataSource", flag="unknown_dataSource")
    private String value_dataSource;
    private boolean unknown_dataSource;
    public String dataSource() {
        if (!unknown_dataSource) return value_dataSource;
        throw new UndeferrableValueException("Value 'RouteCalculationArgs.dataSource' is not present");
    }

    /**
     * The optional description for the route calculator resource.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'RouteCalculationArgs.description' is not present");
    }

    /**
     * Key-value tags for the route calculator. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'RouteCalculationArgs.tags' is not present");
    }

}
