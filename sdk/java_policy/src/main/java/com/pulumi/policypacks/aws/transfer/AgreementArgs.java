// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.transfer;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:transfer/agreement:Agreement")
public final class AgreementArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
     * 
     */
    @PolicyResourceProperty(name="accessRole", flag="unknown_accessRole")
    private String value_accessRole;
    private boolean unknown_accessRole;
    public String accessRole() {
        if (!unknown_accessRole) return value_accessRole;
        throw new UndeferrableValueException("Value 'AgreementArgs.accessRole' is not present");
    }

    /**
     * The landing directory for the files transferred by using the AS2 protocol.
     * 
     */
    @PolicyResourceProperty(name="baseDirectory", flag="unknown_baseDirectory")
    private String value_baseDirectory;
    private boolean unknown_baseDirectory;
    public String baseDirectory() {
        if (!unknown_baseDirectory) return value_baseDirectory;
        throw new UndeferrableValueException("Value 'AgreementArgs.baseDirectory' is not present");
    }

    /**
     * The Optional description of the transdfer.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'AgreementArgs.description' is not present");
    }

    /**
     * The unique identifier for the AS2 local profile.
     * 
     */
    @PolicyResourceProperty(name="localProfileId", flag="unknown_localProfileId")
    private String value_localProfileId;
    private boolean unknown_localProfileId;
    public String localProfileId() {
        if (!unknown_localProfileId) return value_localProfileId;
        throw new UndeferrableValueException("Value 'AgreementArgs.localProfileId' is not present");
    }

    /**
     * The unique identifier for the AS2 partner profile.
     * 
     */
    @PolicyResourceProperty(name="partnerProfileId", flag="unknown_partnerProfileId")
    private String value_partnerProfileId;
    private boolean unknown_partnerProfileId;
    public String partnerProfileId() {
        if (!unknown_partnerProfileId) return value_partnerProfileId;
        throw new UndeferrableValueException("Value 'AgreementArgs.partnerProfileId' is not present");
    }

    /**
     * The unique server identifier for the server instance. This is the specific server the agreement uses.
     * 
     */
    @PolicyResourceProperty(name="serverId", flag="unknown_serverId")
    private String value_serverId;
    private boolean unknown_serverId;
    public String serverId() {
        if (!unknown_serverId) return value_serverId;
        throw new UndeferrableValueException("Value 'AgreementArgs.serverId' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'AgreementArgs.tags' is not present");
    }

}
