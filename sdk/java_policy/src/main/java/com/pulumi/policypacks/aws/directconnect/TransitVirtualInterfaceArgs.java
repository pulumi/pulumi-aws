// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.directconnect;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:directconnect/transitVirtualInterface:TransitVirtualInterface")
public final class TransitVirtualInterfaceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The address family for the BGP peer. ` ipv4  ` or `ipv6`.
     * 
     */
    private UndeferrableValue<String> addressFamily;

    public String addressFamily() {
        if (addressFamily == null) return null;
        return addressFamily.getValue("TransitVirtualInterfaceArgs.addressFamily");
    }

    /**
     * The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
     * 
     */
    private UndeferrableValue<String> amazonAddress;

    public String amazonAddress() {
        if (amazonAddress == null) return null;
        return amazonAddress.getValue("TransitVirtualInterfaceArgs.amazonAddress");
    }

    /**
     * The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
     * 
     */
    private UndeferrableValue<Integer> bgpAsn;

    public Integer bgpAsn() {
        if (bgpAsn == null) return null;
        return bgpAsn.getValue("TransitVirtualInterfaceArgs.bgpAsn");
    }

    /**
     * The authentication key for BGP configuration.
     * 
     */
    private UndeferrableValue<String> bgpAuthKey;

    public String bgpAuthKey() {
        if (bgpAuthKey == null) return null;
        return bgpAuthKey.getValue("TransitVirtualInterfaceArgs.bgpAuthKey");
    }

    /**
     * The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
     * 
     */
    private UndeferrableValue<String> connectionId;

    public String connectionId() {
        if (connectionId == null) return null;
        return connectionId.getValue("TransitVirtualInterfaceArgs.connectionId");
    }

    /**
     * The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
     * 
     */
    private UndeferrableValue<String> customerAddress;

    public String customerAddress() {
        if (customerAddress == null) return null;
        return customerAddress.getValue("TransitVirtualInterfaceArgs.customerAddress");
    }

    /**
     * The ID of the Direct Connect gateway to which to connect the virtual interface.
     * 
     */
    private UndeferrableValue<String> dxGatewayId;

    public String dxGatewayId() {
        if (dxGatewayId == null) return null;
        return dxGatewayId.getValue("TransitVirtualInterfaceArgs.dxGatewayId");
    }

    /**
     * The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
     * The MTU of a virtual transit interface can be either `1500` or `8500` (jumbo frames). Default is `1500`.
     * 
     */
    private UndeferrableValue<Integer> mtu;

    public Integer mtu() {
        if (mtu == null) return null;
        return mtu.getValue("TransitVirtualInterfaceArgs.mtu");
    }

    /**
     * The name for the virtual interface.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("TransitVirtualInterfaceArgs.name");
    }

    /**
     * Indicates whether to enable or disable SiteLink.
     * 
     */
    private UndeferrableValue<Boolean> sitelinkEnabled;

    public Boolean sitelinkEnabled() {
        if (sitelinkEnabled == null) return null;
        return sitelinkEnabled.getValue("TransitVirtualInterfaceArgs.sitelinkEnabled");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("TransitVirtualInterfaceArgs.tags");
    }

    /**
     * The VLAN ID.
     * 
     */
    private UndeferrableValue<Integer> vlan;

    public Integer vlan() {
        if (vlan == null) return null;
        return vlan.getValue("TransitVirtualInterfaceArgs.vlan");
    }

}
