// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.storagegateway;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.storagegateway.inputs.SmbFileShareCacheAttributesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:storagegateway/smbFileShare:SmbFileShare")
public final class SmbFileShareArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The files and folders on this share will only be visible to users with read access. Default value is `false`.
     * 
     */
    @PolicyResourceProperty(name="accessBasedEnumeration", flag="unknown_accessBasedEnumeration")
    private Boolean value_accessBasedEnumeration;
    private boolean unknown_accessBasedEnumeration;
    public Boolean accessBasedEnumeration() {
        if (!unknown_accessBasedEnumeration) return value_accessBasedEnumeration;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.accessBasedEnumeration' is not present");
    }

    /**
     * A list of users in the Active Directory that have admin access to the file share. Only valid if `authentication` is set to `ActiveDirectory`.
     * 
     */
    @PolicyResourceProperty(name="adminUserLists", flag="unknown_adminUserLists")
    private List<String> value_adminUserLists;
    private boolean unknown_adminUserLists;
    public List<String> adminUserLists() {
        if (!unknown_adminUserLists) return value_adminUserLists;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.adminUserLists' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the CloudWatch Log Group used for the audit logs.
     * 
     */
    @PolicyResourceProperty(name="auditDestinationArn", flag="unknown_auditDestinationArn")
    private String value_auditDestinationArn;
    private boolean unknown_auditDestinationArn;
    public String auditDestinationArn() {
        if (!unknown_auditDestinationArn) return value_auditDestinationArn;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.auditDestinationArn' is not present");
    }

    /**
     * The authentication method that users use to access the file share. Defaults to `ActiveDirectory`. Valid values: `ActiveDirectory`, `GuestAccess`.
     * 
     */
    @PolicyResourceProperty(name="authentication", flag="unknown_authentication")
    private String value_authentication;
    private boolean unknown_authentication;
    public String authentication() {
        if (!unknown_authentication) return value_authentication;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.authentication' is not present");
    }

    /**
     * The region of the S3 buck used by the file share. Required when specifying a `vpc_endpoint_dns_name`.
     * 
     */
    @PolicyResourceProperty(name="bucketRegion", flag="unknown_bucketRegion")
    private String value_bucketRegion;
    private boolean unknown_bucketRegion;
    public String bucketRegion() {
        if (!unknown_bucketRegion) return value_bucketRegion;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.bucketRegion' is not present");
    }

    /**
     * Refresh cache information. see `cache_attributes` Block for more details.
     * 
     * **Note:** If you have previously included a `cache_attributes` block in your configuration, removing it will not reset the refresh cache value and the previous value will remain. You must explicitly set a new value to change it.
     * 
     */
    @PolicyResourceProperty(name="cacheAttributes", flag="unknown_cacheAttributes")
    private SmbFileShareCacheAttributesArgs value_cacheAttributes;
    private boolean unknown_cacheAttributes;
    public SmbFileShareCacheAttributesArgs cacheAttributes() {
        if (!unknown_cacheAttributes) return value_cacheAttributes;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.cacheAttributes' is not present");
    }

    /**
     * The case of an object name in an Amazon S3 bucket. For `ClientSpecified`, the client determines the case sensitivity. For `CaseSensitive`, the gateway determines the case sensitivity. The default value is `ClientSpecified`.
     * 
     */
    @PolicyResourceProperty(name="caseSensitivity", flag="unknown_caseSensitivity")
    private String value_caseSensitivity;
    private boolean unknown_caseSensitivity;
    public String caseSensitivity() {
        if (!unknown_caseSensitivity) return value_caseSensitivity;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.caseSensitivity' is not present");
    }

    /**
     * The default [storage class](https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_CreateNFSFileShare.html#StorageGateway-CreateNFSFileShare-request-DefaultStorageClass) for objects put into an Amazon S3 bucket by the file gateway. Defaults to `S3_STANDARD`.
     * 
     */
    @PolicyResourceProperty(name="defaultStorageClass", flag="unknown_defaultStorageClass")
    private String value_defaultStorageClass;
    private boolean unknown_defaultStorageClass;
    public String defaultStorageClass() {
        if (!unknown_defaultStorageClass) return value_defaultStorageClass;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.defaultStorageClass' is not present");
    }

    /**
     * The name of the file share. Must be set if an S3 prefix name is set in `location_arn`.
     * 
     */
    @PolicyResourceProperty(name="fileShareName", flag="unknown_fileShareName")
    private String value_fileShareName;
    private boolean unknown_fileShareName;
    public String fileShareName() {
        if (!unknown_fileShareName) return value_fileShareName;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.fileShareName' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the file gateway.
     * 
     */
    @PolicyResourceProperty(name="gatewayArn", flag="unknown_gatewayArn")
    private String value_gatewayArn;
    private boolean unknown_gatewayArn;
    public String gatewayArn() {
        if (!unknown_gatewayArn) return value_gatewayArn;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.gatewayArn' is not present");
    }

    /**
     * Boolean value that enables guessing of the MIME type for uploaded objects based on file extensions. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="guessMimeTypeEnabled", flag="unknown_guessMimeTypeEnabled")
    private Boolean value_guessMimeTypeEnabled;
    private boolean unknown_guessMimeTypeEnabled;
    public Boolean guessMimeTypeEnabled() {
        if (!unknown_guessMimeTypeEnabled) return value_guessMimeTypeEnabled;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.guessMimeTypeEnabled' is not present");
    }

    /**
     * A list of users in the Active Directory that are not allowed to access the file share. Only valid if `authentication` is set to `ActiveDirectory`.
     * 
     */
    @PolicyResourceProperty(name="invalidUserLists", flag="unknown_invalidUserLists")
    private List<String> value_invalidUserLists;
    private boolean unknown_invalidUserLists;
    public List<String> invalidUserLists() {
        if (!unknown_invalidUserLists) return value_invalidUserLists;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.invalidUserLists' is not present");
    }

    /**
     * Boolean value if `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="kmsEncrypted", flag="unknown_kmsEncrypted")
    private Boolean value_kmsEncrypted;
    private boolean unknown_kmsEncrypted;
    public Boolean kmsEncrypted() {
        if (!unknown_kmsEncrypted) return value_kmsEncrypted;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.kmsEncrypted' is not present");
    }

    /**
     * Amazon Resource Name (ARN) for KMS key used for Amazon S3 server side encryption. This value can only be set when `kms_encrypted` is true.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyArn", flag="unknown_kmsKeyArn")
    private String value_kmsKeyArn;
    private boolean unknown_kmsKeyArn;
    public String kmsKeyArn() {
        if (!unknown_kmsKeyArn) return value_kmsKeyArn;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.kmsKeyArn' is not present");
    }

    /**
     * The ARN of the backed storage used for storing file data.
     * 
     */
    @PolicyResourceProperty(name="locationArn", flag="unknown_locationArn")
    private String value_locationArn;
    private boolean unknown_locationArn;
    public String locationArn() {
        if (!unknown_locationArn) return value_locationArn;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.locationArn' is not present");
    }

    /**
     * The notification policy of the file share. For more information see the [AWS Documentation](https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_CreateNFSFileShare.html#StorageGateway-CreateNFSFileShare-request-NotificationPolicy). Default value is `{}`.
     * 
     */
    @PolicyResourceProperty(name="notificationPolicy", flag="unknown_notificationPolicy")
    private String value_notificationPolicy;
    private boolean unknown_notificationPolicy;
    public String notificationPolicy() {
        if (!unknown_notificationPolicy) return value_notificationPolicy;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.notificationPolicy' is not present");
    }

    /**
     * Access Control List permission for S3 objects. Defaults to `private`.
     * 
     */
    @PolicyResourceProperty(name="objectAcl", flag="unknown_objectAcl")
    private String value_objectAcl;
    private boolean unknown_objectAcl;
    public String objectAcl() {
        if (!unknown_objectAcl) return value_objectAcl;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.objectAcl' is not present");
    }

    /**
     * Boolean to indicate Opportunistic lock (oplock) status. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="oplocksEnabled", flag="unknown_oplocksEnabled")
    private Boolean value_oplocksEnabled;
    private boolean unknown_oplocksEnabled;
    public Boolean oplocksEnabled() {
        if (!unknown_oplocksEnabled) return value_oplocksEnabled;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.oplocksEnabled' is not present");
    }

    /**
     * Boolean to indicate write status of file share. File share does not accept writes if `true`. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="readOnly", flag="unknown_readOnly")
    private Boolean value_readOnly;
    private boolean unknown_readOnly;
    public Boolean readOnly() {
        if (!unknown_readOnly) return value_readOnly;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.readOnly' is not present");
    }

    /**
     * Boolean who pays the cost of the request and the data download from the Amazon S3 bucket. Set this value to `true` if you want the requester to pay instead of the bucket owner. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="requesterPays", flag="unknown_requesterPays")
    private Boolean value_requesterPays;
    private boolean unknown_requesterPays;
    public Boolean requesterPays() {
        if (!unknown_requesterPays) return value_requesterPays;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.requesterPays' is not present");
    }

    /**
     * The ARN of the AWS Identity and Access Management (IAM) role that a file gateway assumes when it accesses the underlying storage.
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.roleArn' is not present");
    }

    /**
     * Set this value to `true` to enable ACL (access control list) on the SMB fileshare. Set it to `false` to map file and directory permissions to the POSIX permissions. This setting applies only to `ActiveDirectory` authentication type.
     * 
     */
    @PolicyResourceProperty(name="smbAclEnabled", flag="unknown_smbAclEnabled")
    private Boolean value_smbAclEnabled;
    private boolean unknown_smbAclEnabled;
    public Boolean smbAclEnabled() {
        if (!unknown_smbAclEnabled) return value_smbAclEnabled;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.smbAclEnabled' is not present");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.tags' is not present");
    }

    /**
     * A list of users in the Active Directory that are allowed to access the file share. If you need to specify an Active directory group, add &#39;{@literal @}&#39; before the name of the group. It will be set on Allowed group in AWS console. Only valid if `authentication` is set to `ActiveDirectory`.
     * 
     */
    @PolicyResourceProperty(name="validUserLists", flag="unknown_validUserLists")
    private List<String> value_validUserLists;
    private boolean unknown_validUserLists;
    public List<String> validUserLists() {
        if (!unknown_validUserLists) return value_validUserLists;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.validUserLists' is not present");
    }

    /**
     * The DNS name of the VPC endpoint for S3 private link.
     * 
     */
    @PolicyResourceProperty(name="vpcEndpointDnsName", flag="unknown_vpcEndpointDnsName")
    private String value_vpcEndpointDnsName;
    private boolean unknown_vpcEndpointDnsName;
    public String vpcEndpointDnsName() {
        if (!unknown_vpcEndpointDnsName) return value_vpcEndpointDnsName;
        throw new UndeferrableValueException("Value 'SmbFileShareArgs.vpcEndpointDnsName' is not present");
    }

}
