// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudtrail;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudtrail.outputs.TrailAdvancedEventSelector;
import com.pulumi.policypacks.aws.cloudtrail.outputs.TrailEventSelector;
import com.pulumi.policypacks.aws.cloudtrail.outputs.TrailInsightSelector;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudtrail/trail:Trail")
public final class Trail extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `event_selector`.
     * 
     */
    @PolicyResourceProperty(name="advancedEventSelectors", flag="unknown_advancedEventSelectors")
    private @Nullable List<TrailAdvancedEventSelector> value_advancedEventSelectors;
    private boolean unknown_advancedEventSelectors;
    public @Nullable List<TrailAdvancedEventSelector> advancedEventSelectors() {
        if (!unknown_advancedEventSelectors) return value_advancedEventSelectors;
        throw new UndeferrableValueException("Value 'Trail.advancedEventSelectors' is not present");
    }

    /**
     * ARN of the trail.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Trail.arn' is not present");
    }

    /**
     * Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
     * 
     */
    @PolicyResourceProperty(name="cloudWatchLogsGroupArn", flag="unknown_cloudWatchLogsGroupArn")
    private @Nullable String value_cloudWatchLogsGroupArn;
    private boolean unknown_cloudWatchLogsGroupArn;
    public @Nullable String cloudWatchLogsGroupArn() {
        if (!unknown_cloudWatchLogsGroupArn) return value_cloudWatchLogsGroupArn;
        throw new UndeferrableValueException("Value 'Trail.cloudWatchLogsGroupArn' is not present");
    }

    /**
     * Role for the CloudWatch Logs endpoint to assume to write to a userâ€™s log group.
     * 
     */
    @PolicyResourceProperty(name="cloudWatchLogsRoleArn", flag="unknown_cloudWatchLogsRoleArn")
    private @Nullable String value_cloudWatchLogsRoleArn;
    private boolean unknown_cloudWatchLogsRoleArn;
    public @Nullable String cloudWatchLogsRoleArn() {
        if (!unknown_cloudWatchLogsRoleArn) return value_cloudWatchLogsRoleArn;
        throw new UndeferrableValueException("Value 'Trail.cloudWatchLogsRoleArn' is not present");
    }

    /**
     * Whether log file integrity validation is enabled. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="enableLogFileValidation", flag="unknown_enableLogFileValidation")
    private @Nullable Boolean value_enableLogFileValidation;
    private boolean unknown_enableLogFileValidation;
    public @Nullable Boolean enableLogFileValidation() {
        if (!unknown_enableLogFileValidation) return value_enableLogFileValidation;
        throw new UndeferrableValueException("Value 'Trail.enableLogFileValidation' is not present");
    }

    /**
     * Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
     * 
     */
    @PolicyResourceProperty(name="enableLogging", flag="unknown_enableLogging")
    private @Nullable Boolean value_enableLogging;
    private boolean unknown_enableLogging;
    public @Nullable Boolean enableLogging() {
        if (!unknown_enableLogging) return value_enableLogging;
        throw new UndeferrableValueException("Value 'Trail.enableLogging' is not present");
    }

    /**
     * Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advanced_event_selector`.
     * 
     */
    @PolicyResourceProperty(name="eventSelectors", flag="unknown_eventSelectors")
    private @Nullable List<TrailEventSelector> value_eventSelectors;
    private boolean unknown_eventSelectors;
    public @Nullable List<TrailEventSelector> eventSelectors() {
        if (!unknown_eventSelectors) return value_eventSelectors;
        throw new UndeferrableValueException("Value 'Trail.eventSelectors' is not present");
    }

    /**
     * Region in which the trail was created.
     * 
     */
    @PolicyResourceProperty(name="homeRegion", flag="unknown_homeRegion")
    private String value_homeRegion;
    private boolean unknown_homeRegion;
    public String homeRegion() {
        if (!unknown_homeRegion) return value_homeRegion;
        throw new UndeferrableValueException("Value 'Trail.homeRegion' is not present");
    }

    /**
     * Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="includeGlobalServiceEvents", flag="unknown_includeGlobalServiceEvents")
    private @Nullable Boolean value_includeGlobalServiceEvents;
    private boolean unknown_includeGlobalServiceEvents;
    public @Nullable Boolean includeGlobalServiceEvents() {
        if (!unknown_includeGlobalServiceEvents) return value_includeGlobalServiceEvents;
        throw new UndeferrableValueException("Value 'Trail.includeGlobalServiceEvents' is not present");
    }

    /**
     * Configuration block for identifying unusual operational activity. See details below.
     * 
     */
    @PolicyResourceProperty(name="insightSelectors", flag="unknown_insightSelectors")
    private @Nullable List<TrailInsightSelector> value_insightSelectors;
    private boolean unknown_insightSelectors;
    public @Nullable List<TrailInsightSelector> insightSelectors() {
        if (!unknown_insightSelectors) return value_insightSelectors;
        throw new UndeferrableValueException("Value 'Trail.insightSelectors' is not present");
    }

    /**
     * Whether the trail is created in the current region or in all regions. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="isMultiRegionTrail", flag="unknown_isMultiRegionTrail")
    private @Nullable Boolean value_isMultiRegionTrail;
    private boolean unknown_isMultiRegionTrail;
    public @Nullable Boolean isMultiRegionTrail() {
        if (!unknown_isMultiRegionTrail) return value_isMultiRegionTrail;
        throw new UndeferrableValueException("Value 'Trail.isMultiRegionTrail' is not present");
    }

    /**
     * Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="isOrganizationTrail", flag="unknown_isOrganizationTrail")
    private @Nullable Boolean value_isOrganizationTrail;
    private boolean unknown_isOrganizationTrail;
    public @Nullable Boolean isOrganizationTrail() {
        if (!unknown_isOrganizationTrail) return value_isOrganizationTrail;
        throw new UndeferrableValueException("Value 'Trail.isOrganizationTrail' is not present");
    }

    /**
     * KMS key ARN to use to encrypt the logs delivered by CloudTrail.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private @Nullable String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public @Nullable String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'Trail.kmsKeyId' is not present");
    }

    /**
     * Name of the trail.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Trail.name' is not present");
    }

    /**
     * Name of the S3 bucket designated for publishing log files.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="s3BucketName", flag="unknown_s3BucketName")
    private String value_s3BucketName;
    private boolean unknown_s3BucketName;
    public String s3BucketName() {
        if (!unknown_s3BucketName) return value_s3BucketName;
        throw new UndeferrableValueException("Value 'Trail.s3BucketName' is not present");
    }

    /**
     * S3 key prefix that follows the name of the bucket you have designated for log file delivery.
     * 
     */
    @PolicyResourceProperty(name="s3KeyPrefix", flag="unknown_s3KeyPrefix")
    private @Nullable String value_s3KeyPrefix;
    private boolean unknown_s3KeyPrefix;
    public @Nullable String s3KeyPrefix() {
        if (!unknown_s3KeyPrefix) return value_s3KeyPrefix;
        throw new UndeferrableValueException("Value 'Trail.s3KeyPrefix' is not present");
    }

    /**
     * ARN of the Amazon SNS topic that CloudTrail uses to send notifications when log files are delivered.
     * 
     */
    @PolicyResourceProperty(name="snsTopicArn", flag="unknown_snsTopicArn")
    private String value_snsTopicArn;
    private boolean unknown_snsTopicArn;
    public String snsTopicArn() {
        if (!unknown_snsTopicArn) return value_snsTopicArn;
        throw new UndeferrableValueException("Value 'Trail.snsTopicArn' is not present");
    }

    /**
     * Name of the Amazon SNS topic defined for notification of log file delivery. Specify the SNS topic ARN if it resides in another region.
     * 
     */
    @PolicyResourceProperty(name="snsTopicName", flag="unknown_snsTopicName")
    private @Nullable String value_snsTopicName;
    private boolean unknown_snsTopicName;
    public @Nullable String snsTopicName() {
        if (!unknown_snsTopicName) return value_snsTopicName;
        throw new UndeferrableValueException("Value 'Trail.snsTopicName' is not present");
    }

    /**
     * Map of tags to assign to the trail. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Trail.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Trail.tagsAll' is not present");
    }

}
