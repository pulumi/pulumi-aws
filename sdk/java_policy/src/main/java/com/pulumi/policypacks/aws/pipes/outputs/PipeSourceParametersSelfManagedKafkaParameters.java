// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.pipes.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.pipes.outputs.PipeSourceParametersSelfManagedKafkaParametersCredentials;
import com.pulumi.policypacks.aws.pipes.outputs.PipeSourceParametersSelfManagedKafkaParametersVpc;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class PipeSourceParametersSelfManagedKafkaParameters {

    /**
     * An array of server URLs. Maximum number of 2 items, each of maximum length 300.
     * 
     */
    @PolicyResourceProperty(name="additionalBootstrapServers", flag="unknown_additionalBootstrapServers")
    private @Nullable List<String> value_additionalBootstrapServers;
    private boolean unknown_additionalBootstrapServers;
    public @Nullable List<String> additionalBootstrapServers() {
        if (!unknown_additionalBootstrapServers) return value_additionalBootstrapServers;
        throw new UndeferrableValueException("Value 'PipeSourceParametersSelfManagedKafkaParameters.additionalBootstrapServers' is not present");
    }

    /**
     * The maximum number of records to include in each batch. Maximum value of 10000.
     * 
     */
    @PolicyResourceProperty(name="batchSize", flag="unknown_batchSize")
    private @Nullable Integer value_batchSize;
    private boolean unknown_batchSize;
    public @Nullable Integer batchSize() {
        if (!unknown_batchSize) return value_batchSize;
        throw new UndeferrableValueException("Value 'PipeSourceParametersSelfManagedKafkaParameters.batchSize' is not present");
    }

    /**
     * The name of the destination queue to consume. Maximum value of 200.
     * 
     */
    @PolicyResourceProperty(name="consumerGroupId", flag="unknown_consumerGroupId")
    private @Nullable String value_consumerGroupId;
    private boolean unknown_consumerGroupId;
    public @Nullable String consumerGroupId() {
        if (!unknown_consumerGroupId) return value_consumerGroupId;
        throw new UndeferrableValueException("Value 'PipeSourceParametersSelfManagedKafkaParameters.consumerGroupId' is not present");
    }

    /**
     * The credentials needed to access the resource. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="credentials", flag="unknown_credentials")
    private @Nullable PipeSourceParametersSelfManagedKafkaParametersCredentials value_credentials;
    private boolean unknown_credentials;
    public @Nullable PipeSourceParametersSelfManagedKafkaParametersCredentials credentials() {
        if (!unknown_credentials) return value_credentials;
        throw new UndeferrableValueException("Value 'PipeSourceParametersSelfManagedKafkaParameters.credentials' is not present");
    }

    /**
     * The maximum length of a time to wait for events. Maximum value of 300.
     * 
     */
    @PolicyResourceProperty(name="maximumBatchingWindowInSeconds", flag="unknown_maximumBatchingWindowInSeconds")
    private @Nullable Integer value_maximumBatchingWindowInSeconds;
    private boolean unknown_maximumBatchingWindowInSeconds;
    public @Nullable Integer maximumBatchingWindowInSeconds() {
        if (!unknown_maximumBatchingWindowInSeconds) return value_maximumBatchingWindowInSeconds;
        throw new UndeferrableValueException("Value 'PipeSourceParametersSelfManagedKafkaParameters.maximumBatchingWindowInSeconds' is not present");
    }

    /**
     * The ARN of the Secrets Manager secret used for certification.
     * 
     */
    @PolicyResourceProperty(name="serverRootCaCertificate", flag="unknown_serverRootCaCertificate")
    private @Nullable String value_serverRootCaCertificate;
    private boolean unknown_serverRootCaCertificate;
    public @Nullable String serverRootCaCertificate() {
        if (!unknown_serverRootCaCertificate) return value_serverRootCaCertificate;
        throw new UndeferrableValueException("Value 'PipeSourceParametersSelfManagedKafkaParameters.serverRootCaCertificate' is not present");
    }

    /**
     * The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
     * 
     */
    @PolicyResourceProperty(name="startingPosition", flag="unknown_startingPosition")
    private @Nullable String value_startingPosition;
    private boolean unknown_startingPosition;
    public @Nullable String startingPosition() {
        if (!unknown_startingPosition) return value_startingPosition;
        throw new UndeferrableValueException("Value 'PipeSourceParametersSelfManagedKafkaParameters.startingPosition' is not present");
    }

    /**
     * The name of the topic that the pipe will read from. Maximum length of 249.
     * 
     */
    @PolicyResourceProperty(name="topicName", flag="unknown_topicName")
    private String value_topicName;
    private boolean unknown_topicName;
    public String topicName() {
        if (!unknown_topicName) return value_topicName;
        throw new UndeferrableValueException("Value 'PipeSourceParametersSelfManagedKafkaParameters.topicName' is not present");
    }

    /**
     * This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="vpc", flag="unknown_vpc")
    private @Nullable PipeSourceParametersSelfManagedKafkaParametersVpc value_vpc;
    private boolean unknown_vpc;
    public @Nullable PipeSourceParametersSelfManagedKafkaParametersVpc vpc() {
        if (!unknown_vpc) return value_vpc;
        throw new UndeferrableValueException("Value 'PipeSourceParametersSelfManagedKafkaParameters.vpc' is not present");
    }

}
