// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.iot;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:iot/authorizer:Authorizer")
public final class AuthorizerArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The ARN of the authorizer&#39;s Lambda function.
     * 
     */
    private UndeferrableValue<String> authorizerFunctionArn;

    public String authorizerFunctionArn() {
        if (authorizerFunctionArn == null) return null;
        return authorizerFunctionArn.getValue("AuthorizerArgs.authorizerFunctionArn");
    }

    /**
     * Specifies whether the HTTP caching is enabled or not. Default: `false`.
     * 
     */
    private UndeferrableValue<Boolean> enableCachingForHttp;

    public Boolean enableCachingForHttp() {
        if (enableCachingForHttp == null) return null;
        return enableCachingForHttp.getValue("AuthorizerArgs.enableCachingForHttp");
    }

    /**
     * The name of the authorizer.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("AuthorizerArgs.name");
    }

    /**
     * Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
     * 
     */
    private UndeferrableValue<Boolean> signingDisabled;

    public Boolean signingDisabled() {
        if (signingDisabled == null) return null;
        return signingDisabled.getValue("AuthorizerArgs.signingDisabled");
    }

    /**
     * The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("AuthorizerArgs.status");
    }

    /**
     * Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("AuthorizerArgs.tags");
    }

    /**
     * The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
     * 
     */
    private UndeferrableValue<String> tokenKeyName;

    public String tokenKeyName() {
        if (tokenKeyName == null) return null;
        return tokenKeyName.getValue("AuthorizerArgs.tokenKeyName");
    }

    /**
     * The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
     * 
     */
    private UndeferrableValue<Map<String,String>> tokenSigningPublicKeys;

    public Map<String,String> tokenSigningPublicKeys() {
        if (tokenSigningPublicKeys == null) return null;
        return tokenSigningPublicKeys.getValue("AuthorizerArgs.tokenSigningPublicKeys");
    }

}
