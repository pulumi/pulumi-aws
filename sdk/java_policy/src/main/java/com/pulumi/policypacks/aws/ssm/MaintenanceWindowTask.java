// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ssm;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ssm.outputs.MaintenanceWindowTaskTarget;
import com.pulumi.policypacks.aws.ssm.outputs.MaintenanceWindowTaskTaskInvocationParameters;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ssm/maintenanceWindowTask:MaintenanceWindowTask")
public final class MaintenanceWindowTask extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the maintenance window task.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.arn' is not present");
    }

    /**
     * Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are `CONTINUE_TASK` and `CANCEL_TASK`.
     * 
     */
    @PolicyResourceProperty(name="cutoffBehavior", flag="unknown_cutoffBehavior")
    private @Nullable String value_cutoffBehavior;
    private boolean unknown_cutoffBehavior;
    public @Nullable String cutoffBehavior() {
        if (!unknown_cutoffBehavior) return value_cutoffBehavior;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.cutoffBehavior' is not present");
    }

    /**
     * The description of the maintenance window task.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.description' is not present");
    }

    /**
     * The maximum number of targets this task can be run for in parallel.
     * 
     */
    @PolicyResourceProperty(name="maxConcurrency", flag="unknown_maxConcurrency")
    private String value_maxConcurrency;
    private boolean unknown_maxConcurrency;
    public String maxConcurrency() {
        if (!unknown_maxConcurrency) return value_maxConcurrency;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.maxConcurrency' is not present");
    }

    /**
     * The maximum number of errors allowed before this task stops being scheduled.
     * 
     */
    @PolicyResourceProperty(name="maxErrors", flag="unknown_maxErrors")
    private String value_maxErrors;
    private boolean unknown_maxErrors;
    public String maxErrors() {
        if (!unknown_maxErrors) return value_maxErrors;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.maxErrors' is not present");
    }

    /**
     * The name of the maintenance window task.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.name' is not present");
    }

    /**
     * The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
     * 
     */
    @PolicyResourceProperty(name="priority", flag="unknown_priority")
    private @Nullable Integer value_priority;
    private boolean unknown_priority;
    public @Nullable Integer priority() {
        if (!unknown_priority) return value_priority;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.priority' is not present");
    }

    /**
     * The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account&#39;s service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
     * 
     */
    @PolicyResourceProperty(name="serviceRoleArn", flag="unknown_serviceRoleArn")
    private String value_serviceRoleArn;
    private boolean unknown_serviceRoleArn;
    public String serviceRoleArn() {
        if (!unknown_serviceRoleArn) return value_serviceRoleArn;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.serviceRoleArn' is not present");
    }

    /**
     * The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
     * 
     */
    @PolicyResourceProperty(name="targets", flag="unknown_targets")
    private @Nullable List<MaintenanceWindowTaskTarget> value_targets;
    private boolean unknown_targets;
    public @Nullable List<MaintenanceWindowTaskTarget> targets() {
        if (!unknown_targets) return value_targets;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.targets' is not present");
    }

    /**
     * The ARN of the task to execute.
     * 
     */
    @PolicyResourceProperty(name="taskArn", flag="unknown_taskArn")
    private String value_taskArn;
    private boolean unknown_taskArn;
    public String taskArn() {
        if (!unknown_taskArn) return value_taskArn;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.taskArn' is not present");
    }

    /**
     * Configuration block with parameters for task execution.
     * 
     */
    @PolicyResourceProperty(name="taskInvocationParameters", flag="unknown_taskInvocationParameters")
    private @Nullable MaintenanceWindowTaskTaskInvocationParameters value_taskInvocationParameters;
    private boolean unknown_taskInvocationParameters;
    public @Nullable MaintenanceWindowTaskTaskInvocationParameters taskInvocationParameters() {
        if (!unknown_taskInvocationParameters) return value_taskInvocationParameters;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.taskInvocationParameters' is not present");
    }

    /**
     * The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
     * 
     */
    @PolicyResourceProperty(name="taskType", flag="unknown_taskType")
    private String value_taskType;
    private boolean unknown_taskType;
    public String taskType() {
        if (!unknown_taskType) return value_taskType;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.taskType' is not present");
    }

    /**
     * The Id of the maintenance window to register the task with.
     * 
     */
    @PolicyResourceProperty(name="windowId", flag="unknown_windowId")
    private String value_windowId;
    private boolean unknown_windowId;
    public String windowId() {
        if (!unknown_windowId) return value_windowId;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.windowId' is not present");
    }

    /**
     * The ID of the maintenance window task.
     * 
     */
    @PolicyResourceProperty(name="windowTaskId", flag="unknown_windowTaskId")
    private String value_windowTaskId;
    private boolean unknown_windowTaskId;
    public String windowTaskId() {
        if (!unknown_windowTaskId) return value_windowTaskId;
        throw new UndeferrableValueException("Value 'MaintenanceWindowTask.windowTaskId' is not present");
    }

}
