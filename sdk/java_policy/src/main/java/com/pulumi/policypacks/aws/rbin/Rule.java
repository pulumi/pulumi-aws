// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rbin;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.rbin.outputs.RuleLockConfiguration;
import com.pulumi.policypacks.aws.rbin.outputs.RuleResourceTag;
import com.pulumi.policypacks.aws.rbin.outputs.RuleRetentionPeriod;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rbin/rule:Rule")
public final class Rule extends com.pulumi.resources.PolicyResourceOutput {

    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Rule.arn' is not present");
    }

    /**
     * The retention rule description.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Rule.description' is not present");
    }

    /**
     * Information about the retention rule lock configuration. See `lock_configuration` below.
     * 
     */
    @PolicyResourceProperty(name="lockConfiguration", flag="unknown_lockConfiguration")
    private @Nullable RuleLockConfiguration value_lockConfiguration;
    private boolean unknown_lockConfiguration;
    public @Nullable RuleLockConfiguration lockConfiguration() {
        if (!unknown_lockConfiguration) return value_lockConfiguration;
        throw new UndeferrableValueException("Value 'Rule.lockConfiguration' is not present");
    }

    /**
     * (Timestamp) The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.
     * 
     */
    @PolicyResourceProperty(name="lockEndTime", flag="unknown_lockEndTime")
    private String value_lockEndTime;
    private boolean unknown_lockEndTime;
    public String lockEndTime() {
        if (!unknown_lockEndTime) return value_lockEndTime;
        throw new UndeferrableValueException("Value 'Rule.lockEndTime' is not present");
    }

    /**
     * (Optional) The lock state of the retention rules to list. Only retention rules with the specified lock state are returned. Valid values are `locked`, `pending_unlock`, `unlocked`.
     * 
     */
    @PolicyResourceProperty(name="lockState", flag="unknown_lockState")
    private String value_lockState;
    private boolean unknown_lockState;
    public String lockState() {
        if (!unknown_lockState) return value_lockState;
        throw new UndeferrableValueException("Value 'Rule.lockState' is not present");
    }

    /**
     * Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resource_tags` below.
     * 
     */
    @PolicyResourceProperty(name="resourceTags", flag="unknown_resourceTags")
    private List<RuleResourceTag> value_resourceTags;
    private boolean unknown_resourceTags;
    public List<RuleResourceTag> resourceTags() {
        if (!unknown_resourceTags) return value_resourceTags;
        throw new UndeferrableValueException("Value 'Rule.resourceTags' is not present");
    }

    /**
     * The resource type to be retained by the retention rule. Valid values are `EBS_SNAPSHOT` and `EC2_IMAGE`.
     * 
     */
    @PolicyResourceProperty(name="resourceType", flag="unknown_resourceType")
    private String value_resourceType;
    private boolean unknown_resourceType;
    public String resourceType() {
        if (!unknown_resourceType) return value_resourceType;
        throw new UndeferrableValueException("Value 'Rule.resourceType' is not present");
    }

    /**
     * Information about the retention period for which the retention rule is to retain resources. See `retention_period` below.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="retentionPeriod", flag="unknown_retentionPeriod")
    private RuleRetentionPeriod value_retentionPeriod;
    private boolean unknown_retentionPeriod;
    public RuleRetentionPeriod retentionPeriod() {
        if (!unknown_retentionPeriod) return value_retentionPeriod;
        throw new UndeferrableValueException("Value 'Rule.retentionPeriod' is not present");
    }

    /**
     * (String) The state of the retention rule. Only retention rules that are in the `available` state retain resources. Valid values include `pending` and `available`.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'Rule.status' is not present");
    }

    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Rule.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Rule.tagsAll' is not present");
    }

}
