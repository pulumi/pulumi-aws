// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.verifiedaccess;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.verifiedaccess.inputs.EndpointCidrOptionsArgs;
import com.pulumi.policypacks.aws.verifiedaccess.inputs.EndpointLoadBalancerOptionsArgs;
import com.pulumi.policypacks.aws.verifiedaccess.inputs.EndpointNetworkInterfaceOptionsArgs;
import com.pulumi.policypacks.aws.verifiedaccess.inputs.EndpointRdsOptionsArgs;
import com.pulumi.policypacks.aws.verifiedaccess.inputs.EndpointSseSpecificationArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:verifiedaccess/endpoint:Endpoint")
public final class EndpointArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The DNS name for users to reach your application. This parameter is required if the endpoint type is `load-balancer` or `network-interface`.
     * 
     */
    private UndeferrableValue<String> applicationDomain;

    public String applicationDomain() {
        if (applicationDomain == null) return null;
        return applicationDomain.getValue("EndpointArgs.applicationDomain");
    }

    /**
     * The type of attachment. Currently, only `vpc` is supported.
     * 
     */
    private UndeferrableValue<String> attachmentType;

    public String attachmentType() {
        if (attachmentType == null) return null;
        return attachmentType.getValue("EndpointArgs.attachmentType");
    }

    /**
     * The CIDR block details. This parameter is required if the endpoint type is `cidr`.
     * 
     */
    private UndeferrableValue<EndpointCidrOptionsArgs> cidrOptions;

    public EndpointCidrOptionsArgs cidrOptions() {
        if (cidrOptions == null) return null;
        return cidrOptions.getValue("EndpointArgs.cidrOptions");
    }

    /**
     * A description for the Verified Access endpoint.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("EndpointArgs.description");
    }

    /**
     * The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application. This parameter is required if the endpoint type is `load-balancer` or `network-interface`.
     * 
     */
    private UndeferrableValue<String> domainCertificateArn;

    public String domainCertificateArn() {
        if (domainCertificateArn == null) return null;
        return domainCertificateArn.getValue("EndpointArgs.domainCertificateArn");
    }

    /**
     * A custom identifier that is prepended to the DNS name that is generated for the endpoint.
     * 
     */
    private UndeferrableValue<String> endpointDomainPrefix;

    public String endpointDomainPrefix() {
        if (endpointDomainPrefix == null) return null;
        return endpointDomainPrefix.getValue("EndpointArgs.endpointDomainPrefix");
    }

    /**
     * The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
     * 
     */
    private UndeferrableValue<String> endpointType;

    public String endpointType() {
        if (endpointType == null) return null;
        return endpointType.getValue("EndpointArgs.endpointType");
    }

    /**
     * The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
     * 
     */
    private UndeferrableValue<EndpointLoadBalancerOptionsArgs> loadBalancerOptions;

    public EndpointLoadBalancerOptionsArgs loadBalancerOptions() {
        if (loadBalancerOptions == null) return null;
        return loadBalancerOptions.getValue("EndpointArgs.loadBalancerOptions");
    }

    /**
     * The network interface details. This parameter is required if the endpoint type is `network-interface`.
     * 
     */
    private UndeferrableValue<EndpointNetworkInterfaceOptionsArgs> networkInterfaceOptions;

    public EndpointNetworkInterfaceOptionsArgs networkInterfaceOptions() {
        if (networkInterfaceOptions == null) return null;
        return networkInterfaceOptions.getValue("EndpointArgs.networkInterfaceOptions");
    }

    /**
     * The policy document that is associated with this resource.
     * 
     */
    private UndeferrableValue<String> policyDocument;

    public String policyDocument() {
        if (policyDocument == null) return null;
        return policyDocument.getValue("EndpointArgs.policyDocument");
    }

    private UndeferrableValue<EndpointRdsOptionsArgs> rdsOptions;

    public EndpointRdsOptionsArgs rdsOptions() {
        if (rdsOptions == null) return null;
        return rdsOptions.getValue("EndpointArgs.rdsOptions");
    }

    /**
     * List of the the security groups IDs to associate with the Verified Access endpoint.
     * 
     */
    private UndeferrableValue<List<String>> securityGroupIds;

    public List<String> securityGroupIds() {
        if (securityGroupIds == null) return null;
        return securityGroupIds.getValue("EndpointArgs.securityGroupIds");
    }

    /**
     * The options in use for server side encryption.
     * 
     */
    private UndeferrableValue<EndpointSseSpecificationArgs> sseSpecification;

    public EndpointSseSpecificationArgs sseSpecification() {
        if (sseSpecification == null) return null;
        return sseSpecification.getValue("EndpointArgs.sseSpecification");
    }

    /**
     * Key-value tags for the Verified Access Endpoint. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("EndpointArgs.tags");
    }

    /**
     * The ID of the Verified Access group to associate the endpoint with.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> verifiedAccessGroupId;

    public String verifiedAccessGroupId() {
        if (verifiedAccessGroupId == null) return null;
        return verifiedAccessGroupId.getValue("EndpointArgs.verifiedAccessGroupId");
    }

}
