// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class AmiFromInstanceEbsBlockDeviceArgs {

    /**
     * Boolean controlling whether the EBS volumes created to
     * support each created instance will be deleted once that instance is terminated.
     * 
     */
    private UndeferrableValue<Boolean> deleteOnTermination;

    public Boolean deleteOnTermination() {
        if (deleteOnTermination == null) return null;
        return deleteOnTermination.getValue("AmiFromInstanceEbsBlockDeviceArgs.deleteOnTermination");
    }

    /**
     * Path at which the device is exposed to created instances.
     * 
     */
    private UndeferrableValue<String> deviceName;

    public String deviceName() {
        if (deviceName == null) return null;
        return deviceName.getValue("AmiFromInstanceEbsBlockDeviceArgs.deviceName");
    }

    /**
     * Boolean controlling whether the created EBS volumes will be encrypted. Can&#39;t be used with `snapshot_id`.
     * 
     */
    private UndeferrableValue<Boolean> encrypted;

    public Boolean encrypted() {
        if (encrypted == null) return null;
        return encrypted.getValue("AmiFromInstanceEbsBlockDeviceArgs.encrypted");
    }

    /**
     * Number of I/O operations per second the
     * created volumes will support.
     * 
     */
    private UndeferrableValue<Integer> iops;

    public Integer iops() {
        if (iops == null) return null;
        return iops.getValue("AmiFromInstanceEbsBlockDeviceArgs.iops");
    }

    /**
     * ARN of the Outpost on which the snapshot is stored.
     * 
     * &gt; **Note:** You can specify `encrypted` or `snapshot_id` but not both.
     * 
     */
    private UndeferrableValue<String> outpostArn;

    public String outpostArn() {
        if (outpostArn == null) return null;
        return outpostArn.getValue("AmiFromInstanceEbsBlockDeviceArgs.outpostArn");
    }

    /**
     * ID of an EBS snapshot that will be used to initialize the created
     * EBS volumes. If set, the `volume_size` attribute must be at least as large as the referenced
     * snapshot.
     * 
     */
    private UndeferrableValue<String> snapshotId;

    public String snapshotId() {
        if (snapshotId == null) return null;
        return snapshotId.getValue("AmiFromInstanceEbsBlockDeviceArgs.snapshotId");
    }

    /**
     * Throughput that the EBS volume supports, in MiB/s. Only valid for `volume_type` of `gp3`.
     * 
     */
    private UndeferrableValue<Integer> throughput;

    public Integer throughput() {
        if (throughput == null) return null;
        return throughput.getValue("AmiFromInstanceEbsBlockDeviceArgs.throughput");
    }

    /**
     * Size of created volumes in GiB.
     * If `snapshot_id` is set and `volume_size` is omitted then the volume will have the same size
     * as the selected snapshot.
     * 
     */
    private UndeferrableValue<Integer> volumeSize;

    public Integer volumeSize() {
        if (volumeSize == null) return null;
        return volumeSize.getValue("AmiFromInstanceEbsBlockDeviceArgs.volumeSize");
    }

    /**
     * Type of EBS volume to create. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `standard`).
     * 
     */
    private UndeferrableValue<String> volumeType;

    public String volumeType() {
        if (volumeType == null) return null;
        return volumeType.getValue("AmiFromInstanceEbsBlockDeviceArgs.volumeType");
    }

}
