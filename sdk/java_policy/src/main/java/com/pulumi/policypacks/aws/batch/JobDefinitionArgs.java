// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.batch;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.batch.inputs.JobDefinitionEksPropertiesArgs;
import com.pulumi.policypacks.aws.batch.inputs.JobDefinitionRetryStrategyArgs;
import com.pulumi.policypacks.aws.batch.inputs.JobDefinitionTimeoutArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:batch/jobDefinition:JobDefinition")
public final class JobDefinitionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html) provided as a single valid JSON document. This parameter is only valid if the `type` parameter is `container`.
     * 
     */
    private UndeferrableValue<String> containerProperties;

    public String containerProperties() {
        if (containerProperties == null) return null;
        return containerProperties.getValue("JobDefinitionArgs.containerProperties");
    }

    /**
     * When updating a job definition a new revision is created. This parameter determines if the previous version is `deregistered` (`INACTIVE`) or left  `ACTIVE`. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> deregisterOnNewRevision;

    public Boolean deregisterOnNewRevision() {
        if (deregisterOnNewRevision == null) return null;
        return deregisterOnNewRevision.getValue("JobDefinitionArgs.deregisterOnNewRevision");
    }

    /**
     * Valid [ECS properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html) provided as a single valid JSON document. This parameter is only valid if the `type` parameter is `container`.
     * 
     */
    private UndeferrableValue<String> ecsProperties;

    public String ecsProperties() {
        if (ecsProperties == null) return null;
        return ecsProperties.getValue("JobDefinitionArgs.ecsProperties");
    }

    /**
     * Valid eks properties. This parameter is only valid if the `type` parameter is `container`.
     * 
     */
    private UndeferrableValue<JobDefinitionEksPropertiesArgs> eksProperties;

    public JobDefinitionEksPropertiesArgs eksProperties() {
        if (eksProperties == null) return null;
        return eksProperties.getValue("JobDefinitionArgs.eksProperties");
    }

    /**
     * Name of the job definition.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("JobDefinitionArgs.name");
    }

    /**
     * Valid [node properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html) provided as a single valid JSON document. This parameter is required if the `type` parameter is `multinode`.
     * 
     */
    private UndeferrableValue<String> nodeProperties;

    public String nodeProperties() {
        if (nodeProperties == null) return null;
        return nodeProperties.getValue("JobDefinitionArgs.nodeProperties");
    }

    /**
     * Parameter substitution placeholders to set in the job definition.
     * 
     */
    private UndeferrableValue<Map<String,String>> parameters;

    public Map<String,String> parameters() {
        if (parameters == null) return null;
        return parameters.getValue("JobDefinitionArgs.parameters");
    }

    /**
     * Platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
     * 
     */
    private UndeferrableValue<List<String>> platformCapabilities;

    public List<String> platformCapabilities() {
        if (platformCapabilities == null) return null;
        return platformCapabilities.getValue("JobDefinitionArgs.platformCapabilities");
    }

    /**
     * Whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> propagateTags;

    public Boolean propagateTags() {
        if (propagateTags == null) return null;
        return propagateTags.getValue("JobDefinitionArgs.propagateTags");
    }

    /**
     * Retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of `retry_strategy` is `1`.  Defined below.
     * 
     */
    private UndeferrableValue<JobDefinitionRetryStrategyArgs> retryStrategy;

    public JobDefinitionRetryStrategyArgs retryStrategy() {
        if (retryStrategy == null) return null;
        return retryStrategy.getValue("JobDefinitionArgs.retryStrategy");
    }

    /**
     * Scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. Allowed values `0` through `9999`.
     * 
     */
    private UndeferrableValue<Integer> schedulingPriority;

    public Integer schedulingPriority() {
        if (schedulingPriority == null) return null;
        return schedulingPriority.getValue("JobDefinitionArgs.schedulingPriority");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("JobDefinitionArgs.tags");
    }

    /**
     * Timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.
     * 
     */
    private UndeferrableValue<JobDefinitionTimeoutArgs> timeout;

    public JobDefinitionTimeoutArgs timeout() {
        if (timeout == null) return null;
        return timeout.getValue("JobDefinitionArgs.timeout");
    }

    /**
     * Type of job definition. Must be `container` or `multinode`.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("JobDefinitionArgs.type");
    }

}
