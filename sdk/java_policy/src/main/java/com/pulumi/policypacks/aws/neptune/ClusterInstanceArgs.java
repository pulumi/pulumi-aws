// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.neptune;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:neptune/clusterInstance:ClusterInstance")
public final class ClusterInstanceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies whether any instance modifications
     * are applied immediately, or during the next maintenance window. Default is`false`.
     * 
     */
    private UndeferrableValue<Boolean> applyImmediately;

    public Boolean applyImmediately() {
        if (applyImmediately == null) return null;
        return applyImmediately.getValue("ClusterInstanceArgs.applyImmediately");
    }

    /**
     * Indicates that minor engine upgrades will be applied automatically to the instance during the maintenance window. Default is `true`.
     * 
     */
    private UndeferrableValue<Boolean> autoMinorVersionUpgrade;

    public Boolean autoMinorVersionUpgrade() {
        if (autoMinorVersionUpgrade == null) return null;
        return autoMinorVersionUpgrade.getValue("ClusterInstanceArgs.autoMinorVersionUpgrade");
    }

    /**
     * The EC2 Availability Zone that the neptune instance is created in.
     * 
     */
    private UndeferrableValue<String> availabilityZone;

    public String availabilityZone() {
        if (availabilityZone == null) return null;
        return availabilityZone.getValue("ClusterInstanceArgs.availabilityZone");
    }

    /**
     * The identifier of the `aws.neptune.Cluster` in which to launch this instance.
     * 
     */
    private UndeferrableValue<String> clusterIdentifier;

    public String clusterIdentifier() {
        if (clusterIdentifier == null) return null;
        return clusterIdentifier.getValue("ClusterInstanceArgs.clusterIdentifier");
    }

    /**
     * The name of the database engine to be used for the neptune instance. Defaults to `neptune`. Valid Values: `neptune`.
     * 
     */
    private UndeferrableValue<String> engine;

    public String engine() {
        if (engine == null) return null;
        return engine.getValue("ClusterInstanceArgs.engine");
    }

    /**
     * The neptune engine version. Currently configuring this argumnet has no effect.
     * 
     */
    private UndeferrableValue<String> engineVersion;

    public String engineVersion() {
        if (engineVersion == null) return null;
        return engineVersion.getValue("ClusterInstanceArgs.engineVersion");
    }

    /**
     * The identifier for the neptune instance, if omitted, this provider will assign a random, unique identifier.
     * 
     */
    private UndeferrableValue<String> identifier;

    public String identifier() {
        if (identifier == null) return null;
        return identifier.getValue("ClusterInstanceArgs.identifier");
    }

    /**
     * Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
     * 
     */
    private UndeferrableValue<String> identifierPrefix;

    public String identifierPrefix() {
        if (identifierPrefix == null) return null;
        return identifierPrefix.getValue("ClusterInstanceArgs.identifierPrefix");
    }

    /**
     * The instance class to use.
     * 
     */
    private UndeferrableValue<String> instanceClass;

    public String instanceClass() {
        if (instanceClass == null) return null;
        return instanceClass.getValue("ClusterInstanceArgs.instanceClass");
    }

    /**
     * The name of the neptune parameter group to associate with this instance.
     * 
     */
    private UndeferrableValue<String> neptuneParameterGroupName;

    public String neptuneParameterGroupName() {
        if (neptuneParameterGroupName == null) return null;
        return neptuneParameterGroupName.getValue("ClusterInstanceArgs.neptuneParameterGroupName");
    }

    /**
     * A subnet group to associate with this neptune instance. **NOTE:** This must match the `neptune_subnet_group_name` of the attached `aws.neptune.Cluster`.
     * 
     */
    private UndeferrableValue<String> neptuneSubnetGroupName;

    public String neptuneSubnetGroupName() {
        if (neptuneSubnetGroupName == null) return null;
        return neptuneSubnetGroupName.getValue("ClusterInstanceArgs.neptuneSubnetGroupName");
    }

    /**
     * The port on which the DB accepts connections. Defaults to `8182`.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("ClusterInstanceArgs.port");
    }

    /**
     * The daily time range during which automated backups are created if automated backups are enabled. Eg: &#34;04:00-09:00&#34;
     * 
     */
    private UndeferrableValue<String> preferredBackupWindow;

    public String preferredBackupWindow() {
        if (preferredBackupWindow == null) return null;
        return preferredBackupWindow.getValue("ClusterInstanceArgs.preferredBackupWindow");
    }

    /**
     * The window to perform maintenance in.
     * Syntax: &#34;ddd:hh24:mi-ddd:hh24:mi&#34;. Eg: &#34;Mon:00:00-Mon:03:00&#34;.
     * 
     */
    private UndeferrableValue<String> preferredMaintenanceWindow;

    public String preferredMaintenanceWindow() {
        if (preferredMaintenanceWindow == null) return null;
        return preferredMaintenanceWindow.getValue("ClusterInstanceArgs.preferredMaintenanceWindow");
    }

    /**
     * Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer.
     * 
     */
    private UndeferrableValue<Integer> promotionTier;

    public Integer promotionTier() {
        if (promotionTier == null) return null;
        return promotionTier.getValue("ClusterInstanceArgs.promotionTier");
    }

    /**
     * Bool to control if instance is publicly accessible. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> publiclyAccessible;

    public Boolean publiclyAccessible() {
        if (publiclyAccessible == null) return null;
        return publiclyAccessible.getValue("ClusterInstanceArgs.publiclyAccessible");
    }

    /**
     * Determines whether a final DB snapshot is created before the DB instance is deleted.
     * 
     */
    private UndeferrableValue<Boolean> skipFinalSnapshot;

    public Boolean skipFinalSnapshot() {
        if (skipFinalSnapshot == null) return null;
        return skipFinalSnapshot.getValue("ClusterInstanceArgs.skipFinalSnapshot");
    }

    /**
     * A map of tags to assign to the instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ClusterInstanceArgs.tags");
    }

}
