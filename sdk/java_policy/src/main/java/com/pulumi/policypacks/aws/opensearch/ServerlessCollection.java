// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.opensearch;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.opensearch.outputs.ServerlessCollectionTimeouts;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:opensearch/serverlessCollection:ServerlessCollection")
public final class ServerlessCollection extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of the collection.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ServerlessCollection.arn' is not present");
    }

    /**
     * Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
     * 
     */
    @PolicyResourceProperty(name="collectionEndpoint", flag="unknown_collectionEndpoint")
    private String value_collectionEndpoint;
    private boolean unknown_collectionEndpoint;
    public String collectionEndpoint() {
        if (!unknown_collectionEndpoint) return value_collectionEndpoint;
        throw new UndeferrableValueException("Value 'ServerlessCollection.collectionEndpoint' is not present");
    }

    /**
     * Collection-specific endpoint used to access OpenSearch Dashboards.
     * 
     */
    @PolicyResourceProperty(name="dashboardEndpoint", flag="unknown_dashboardEndpoint")
    private String value_dashboardEndpoint;
    private boolean unknown_dashboardEndpoint;
    public String dashboardEndpoint() {
        if (!unknown_dashboardEndpoint) return value_dashboardEndpoint;
        throw new UndeferrableValueException("Value 'ServerlessCollection.dashboardEndpoint' is not present");
    }

    /**
     * Description of the collection.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'ServerlessCollection.description' is not present");
    }

    /**
     * The ARN of the Amazon Web Services KMS key used to encrypt the collection.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyArn", flag="unknown_kmsKeyArn")
    private String value_kmsKeyArn;
    private boolean unknown_kmsKeyArn;
    public String kmsKeyArn() {
        if (!unknown_kmsKeyArn) return value_kmsKeyArn;
        throw new UndeferrableValueException("Value 'ServerlessCollection.kmsKeyArn' is not present");
    }

    /**
     * Name of the collection.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'ServerlessCollection.name' is not present");
    }

    /**
     * Indicates whether standby replicas should be used for a collection. One of `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
     * 
     */
    @PolicyResourceProperty(name="standbyReplicas", flag="unknown_standbyReplicas")
    private String value_standbyReplicas;
    private boolean unknown_standbyReplicas;
    public String standbyReplicas() {
        if (!unknown_standbyReplicas) return value_standbyReplicas;
        throw new UndeferrableValueException("Value 'ServerlessCollection.standbyReplicas' is not present");
    }

    /**
     * A map of tags to assign to the collection. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ServerlessCollection.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ServerlessCollection.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable ServerlessCollectionTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable ServerlessCollectionTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'ServerlessCollection.timeouts' is not present");
    }

    /**
     * Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'ServerlessCollection.type' is not present");
    }

}
