// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.verifiedpermissions.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.verifiedpermissions.inputs.IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs;
import com.pulumi.policypacks.aws.verifiedpermissions.inputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs;
import java.lang.String;
import javax.annotation.Nullable;


public final class IdentitySourceConfigurationOpenIdConnectConfigurationArgs {

    /**
     * A descriptive string that you want to prefix to user entities from your OIDC identity provider.
     * 
     */
    @PolicyResourceProperty(name="entityIdPrefix", flag="unknown_entityIdPrefix")
    private String value_entityIdPrefix;
    private boolean unknown_entityIdPrefix;
    public String entityIdPrefix() {
        if (!unknown_entityIdPrefix) return value_entityIdPrefix;
        throw new UndeferrableValueException("Value 'IdentitySourceConfigurationOpenIdConnectConfigurationArgs.entityIdPrefix' is not present");
    }

    /**
     * The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
     * 
     */
    @PolicyResourceProperty(name="groupConfiguration", flag="unknown_groupConfiguration")
    private IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs value_groupConfiguration;
    private boolean unknown_groupConfiguration;
    public IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs groupConfiguration() {
        if (!unknown_groupConfiguration) return value_groupConfiguration;
        throw new UndeferrableValueException("Value 'IdentitySourceConfigurationOpenIdConnectConfigurationArgs.groupConfiguration' is not present");
    }

    /**
     * The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
     * 
     */
    @PolicyResourceProperty(name="issuer", flag="unknown_issuer")
    private String value_issuer;
    private boolean unknown_issuer;
    public String issuer() {
        if (!unknown_issuer) return value_issuer;
        throw new UndeferrableValueException("Value 'IdentitySourceConfigurationOpenIdConnectConfigurationArgs.issuer' is not present");
    }

    /**
     * The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
     * 
     */
    @PolicyResourceProperty(name="tokenSelection", flag="unknown_tokenSelection")
    private IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs value_tokenSelection;
    private boolean unknown_tokenSelection;
    public IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs tokenSelection() {
        if (!unknown_tokenSelection) return value_tokenSelection;
        throw new UndeferrableValueException("Value 'IdentitySourceConfigurationOpenIdConnectConfigurationArgs.tokenSelection' is not present");
    }

}
