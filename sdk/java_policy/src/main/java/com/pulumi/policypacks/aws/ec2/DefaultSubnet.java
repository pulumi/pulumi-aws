// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/defaultSubnet:DefaultSubnet")
public final class DefaultSubnet extends com.pulumi.resources.PolicyResourceOutput {

    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'DefaultSubnet.arn' is not present");
    }

    @PolicyResourceProperty(name="assignIpv6AddressOnCreation", flag="unknown_assignIpv6AddressOnCreation")
    private @Nullable Boolean value_assignIpv6AddressOnCreation;
    private boolean unknown_assignIpv6AddressOnCreation;
    public @Nullable Boolean assignIpv6AddressOnCreation() {
        if (!unknown_assignIpv6AddressOnCreation) return value_assignIpv6AddressOnCreation;
        throw new UndeferrableValueException("Value 'DefaultSubnet.assignIpv6AddressOnCreation' is not present");
    }

    /**
     * is required
     * * The `availability_zone_id`, `cidr_block` and `vpc_id` arguments become computed attributes
     * * The default value for `map_public_ip_on_launch` is `true`
     * 
     * This resource supports the following additional arguments:
     * 
     */
    @PolicyResourceProperty(name="availabilityZone", flag="unknown_availabilityZone")
    private String value_availabilityZone;
    private boolean unknown_availabilityZone;
    public String availabilityZone() {
        if (!unknown_availabilityZone) return value_availabilityZone;
        throw new UndeferrableValueException("Value 'DefaultSubnet.availabilityZone' is not present");
    }

    /**
     * The AZ ID of the subnet
     * 
     */
    @PolicyResourceProperty(name="availabilityZoneId", flag="unknown_availabilityZoneId")
    private String value_availabilityZoneId;
    private boolean unknown_availabilityZoneId;
    public String availabilityZoneId() {
        if (!unknown_availabilityZoneId) return value_availabilityZoneId;
        throw new UndeferrableValueException("Value 'DefaultSubnet.availabilityZoneId' is not present");
    }

    /**
     * The IPv4 CIDR block assigned to the subnet
     * 
     */
    @PolicyResourceProperty(name="cidrBlock", flag="unknown_cidrBlock")
    private String value_cidrBlock;
    private boolean unknown_cidrBlock;
    public String cidrBlock() {
        if (!unknown_cidrBlock) return value_cidrBlock;
        throw new UndeferrableValueException("Value 'DefaultSubnet.cidrBlock' is not present");
    }

    @PolicyResourceProperty(name="customerOwnedIpv4Pool", flag="unknown_customerOwnedIpv4Pool")
    private @Nullable String value_customerOwnedIpv4Pool;
    private boolean unknown_customerOwnedIpv4Pool;
    public @Nullable String customerOwnedIpv4Pool() {
        if (!unknown_customerOwnedIpv4Pool) return value_customerOwnedIpv4Pool;
        throw new UndeferrableValueException("Value 'DefaultSubnet.customerOwnedIpv4Pool' is not present");
    }

    @PolicyResourceProperty(name="enableDns64", flag="unknown_enableDns64")
    private @Nullable Boolean value_enableDns64;
    private boolean unknown_enableDns64;
    public @Nullable Boolean enableDns64() {
        if (!unknown_enableDns64) return value_enableDns64;
        throw new UndeferrableValueException("Value 'DefaultSubnet.enableDns64' is not present");
    }

    @PolicyResourceProperty(name="enableLniAtDeviceIndex", flag="unknown_enableLniAtDeviceIndex")
    private Integer value_enableLniAtDeviceIndex;
    private boolean unknown_enableLniAtDeviceIndex;
    public Integer enableLniAtDeviceIndex() {
        if (!unknown_enableLniAtDeviceIndex) return value_enableLniAtDeviceIndex;
        throw new UndeferrableValueException("Value 'DefaultSubnet.enableLniAtDeviceIndex' is not present");
    }

    @PolicyResourceProperty(name="enableResourceNameDnsARecordOnLaunch", flag="unknown_enableResourceNameDnsARecordOnLaunch")
    private @Nullable Boolean value_enableResourceNameDnsARecordOnLaunch;
    private boolean unknown_enableResourceNameDnsARecordOnLaunch;
    public @Nullable Boolean enableResourceNameDnsARecordOnLaunch() {
        if (!unknown_enableResourceNameDnsARecordOnLaunch) return value_enableResourceNameDnsARecordOnLaunch;
        throw new UndeferrableValueException("Value 'DefaultSubnet.enableResourceNameDnsARecordOnLaunch' is not present");
    }

    @PolicyResourceProperty(name="enableResourceNameDnsAaaaRecordOnLaunch", flag="unknown_enableResourceNameDnsAaaaRecordOnLaunch")
    private @Nullable Boolean value_enableResourceNameDnsAaaaRecordOnLaunch;
    private boolean unknown_enableResourceNameDnsAaaaRecordOnLaunch;
    public @Nullable Boolean enableResourceNameDnsAaaaRecordOnLaunch() {
        if (!unknown_enableResourceNameDnsAaaaRecordOnLaunch) return value_enableResourceNameDnsAaaaRecordOnLaunch;
        throw new UndeferrableValueException("Value 'DefaultSubnet.enableResourceNameDnsAaaaRecordOnLaunch' is not present");
    }

    @PolicyResourceProperty(name="existingDefaultSubnet", flag="unknown_existingDefaultSubnet")
    private Boolean value_existingDefaultSubnet;
    private boolean unknown_existingDefaultSubnet;
    public Boolean existingDefaultSubnet() {
        if (!unknown_existingDefaultSubnet) return value_existingDefaultSubnet;
        throw new UndeferrableValueException("Value 'DefaultSubnet.existingDefaultSubnet' is not present");
    }

    /**
     * Whether destroying the resource deletes the default subnet. Default: `false`
     * 
     */
    @PolicyResourceProperty(name="forceDestroy", flag="unknown_forceDestroy")
    private @Nullable Boolean value_forceDestroy;
    private boolean unknown_forceDestroy;
    public @Nullable Boolean forceDestroy() {
        if (!unknown_forceDestroy) return value_forceDestroy;
        throw new UndeferrableValueException("Value 'DefaultSubnet.forceDestroy' is not present");
    }

    @PolicyResourceProperty(name="ipv6CidrBlock", flag="unknown_ipv6CidrBlock")
    private String value_ipv6CidrBlock;
    private boolean unknown_ipv6CidrBlock;
    public String ipv6CidrBlock() {
        if (!unknown_ipv6CidrBlock) return value_ipv6CidrBlock;
        throw new UndeferrableValueException("Value 'DefaultSubnet.ipv6CidrBlock' is not present");
    }

    @PolicyResourceProperty(name="ipv6CidrBlockAssociationId", flag="unknown_ipv6CidrBlockAssociationId")
    private String value_ipv6CidrBlockAssociationId;
    private boolean unknown_ipv6CidrBlockAssociationId;
    public String ipv6CidrBlockAssociationId() {
        if (!unknown_ipv6CidrBlockAssociationId) return value_ipv6CidrBlockAssociationId;
        throw new UndeferrableValueException("Value 'DefaultSubnet.ipv6CidrBlockAssociationId' is not present");
    }

    @PolicyResourceProperty(name="ipv6Native", flag="unknown_ipv6Native")
    private @Nullable Boolean value_ipv6Native;
    private boolean unknown_ipv6Native;
    public @Nullable Boolean ipv6Native() {
        if (!unknown_ipv6Native) return value_ipv6Native;
        throw new UndeferrableValueException("Value 'DefaultSubnet.ipv6Native' is not present");
    }

    @PolicyResourceProperty(name="mapCustomerOwnedIpOnLaunch", flag="unknown_mapCustomerOwnedIpOnLaunch")
    private @Nullable Boolean value_mapCustomerOwnedIpOnLaunch;
    private boolean unknown_mapCustomerOwnedIpOnLaunch;
    public @Nullable Boolean mapCustomerOwnedIpOnLaunch() {
        if (!unknown_mapCustomerOwnedIpOnLaunch) return value_mapCustomerOwnedIpOnLaunch;
        throw new UndeferrableValueException("Value 'DefaultSubnet.mapCustomerOwnedIpOnLaunch' is not present");
    }

    @PolicyResourceProperty(name="mapPublicIpOnLaunch", flag="unknown_mapPublicIpOnLaunch")
    private @Nullable Boolean value_mapPublicIpOnLaunch;
    private boolean unknown_mapPublicIpOnLaunch;
    public @Nullable Boolean mapPublicIpOnLaunch() {
        if (!unknown_mapPublicIpOnLaunch) return value_mapPublicIpOnLaunch;
        throw new UndeferrableValueException("Value 'DefaultSubnet.mapPublicIpOnLaunch' is not present");
    }

    @PolicyResourceProperty(name="outpostArn", flag="unknown_outpostArn")
    private String value_outpostArn;
    private boolean unknown_outpostArn;
    public String outpostArn() {
        if (!unknown_outpostArn) return value_outpostArn;
        throw new UndeferrableValueException("Value 'DefaultSubnet.outpostArn' is not present");
    }

    @PolicyResourceProperty(name="ownerId", flag="unknown_ownerId")
    private String value_ownerId;
    private boolean unknown_ownerId;
    public String ownerId() {
        if (!unknown_ownerId) return value_ownerId;
        throw new UndeferrableValueException("Value 'DefaultSubnet.ownerId' is not present");
    }

    @PolicyResourceProperty(name="privateDnsHostnameTypeOnLaunch", flag="unknown_privateDnsHostnameTypeOnLaunch")
    private String value_privateDnsHostnameTypeOnLaunch;
    private boolean unknown_privateDnsHostnameTypeOnLaunch;
    public String privateDnsHostnameTypeOnLaunch() {
        if (!unknown_privateDnsHostnameTypeOnLaunch) return value_privateDnsHostnameTypeOnLaunch;
        throw new UndeferrableValueException("Value 'DefaultSubnet.privateDnsHostnameTypeOnLaunch' is not present");
    }

    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'DefaultSubnet.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'DefaultSubnet.tagsAll' is not present");
    }

    /**
     * The ID of the VPC the subnet is in
     * 
     */
    @PolicyResourceProperty(name="vpcId", flag="unknown_vpcId")
    private String value_vpcId;
    private boolean unknown_vpcId;
    public String vpcId() {
        if (!unknown_vpcId) return value_vpcId;
        throw new UndeferrableValueException("Value 'DefaultSubnet.vpcId' is not present");
    }

}
