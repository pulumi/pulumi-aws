// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.timestreamquery.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryLastRunSummaryQueryInsightsResponseQuerySpatialCoverageArgs;
import com.pulumi.policypacks.aws.timestreamquery.inputs.ScheduledQueryLastRunSummaryQueryInsightsResponseQueryTemporalRangeArgs;
import java.lang.Integer;
import java.util.List;
import javax.annotation.Nullable;


public final class ScheduledQueryLastRunSummaryQueryInsightsResponseArgs {

    /**
     * Size of query result set in bytes. You can use this data to validate if the result set has changed as part of the query tuning exercise.
     * 
     */
    private UndeferrableValue<Integer> outputBytes;

    public Integer outputBytes() {
        if (outputBytes == null) return null;
        return outputBytes.getValue("ScheduledQueryLastRunSummaryQueryInsightsResponseArgs.outputBytes");
    }

    /**
     * Total number of rows returned as part of the query result set. You can use this data to validate if the number of rows in the result set have changed as part of the query tuning exercise.
     * 
     */
    private UndeferrableValue<Integer> outputRows;

    public Integer outputRows() {
        if (outputRows == null) return null;
        return outputRows.getValue("ScheduledQueryLastRunSummaryQueryInsightsResponseArgs.outputRows");
    }

    /**
     * Insights into the spatial coverage of the query, including the table with sub-optimal (max) spatial pruning. This information can help you identify areas for improvement in your partitioning strategy to enhance spatial pruning.
     * 
     */
    private UndeferrableValue<List<ScheduledQueryLastRunSummaryQueryInsightsResponseQuerySpatialCoverageArgs>> querySpatialCoverages;

    public List<ScheduledQueryLastRunSummaryQueryInsightsResponseQuerySpatialCoverageArgs> querySpatialCoverages() {
        if (querySpatialCoverages == null) return null;
        return querySpatialCoverages.getValue("ScheduledQueryLastRunSummaryQueryInsightsResponseArgs.querySpatialCoverages");
    }

    /**
     * Number of tables in the query.
     * 
     */
    private UndeferrableValue<Integer> queryTableCount;

    public Integer queryTableCount() {
        if (queryTableCount == null) return null;
        return queryTableCount.getValue("ScheduledQueryLastRunSummaryQueryInsightsResponseArgs.queryTableCount");
    }

    /**
     * Insights into the temporal range of the query, including the table with the largest (max) time range. Following are some of the potential options for optimizing time-based pruning: add missing time-predicates, remove functions around the time predicates, add time predicates to all the sub-queries.
     * 
     */
    private UndeferrableValue<List<ScheduledQueryLastRunSummaryQueryInsightsResponseQueryTemporalRangeArgs>> queryTemporalRanges;

    public List<ScheduledQueryLastRunSummaryQueryInsightsResponseQueryTemporalRangeArgs> queryTemporalRanges() {
        if (queryTemporalRanges == null) return null;
        return queryTemporalRanges.getValue("ScheduledQueryLastRunSummaryQueryInsightsResponseArgs.queryTemporalRanges");
    }

}
