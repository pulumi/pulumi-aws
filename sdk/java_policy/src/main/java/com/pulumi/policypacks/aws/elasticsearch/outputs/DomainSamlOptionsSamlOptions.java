// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticsearch.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.elasticsearch.outputs.DomainSamlOptionsSamlOptionsIdp;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class DomainSamlOptionsSamlOptions {

    /**
     * Whether SAML authentication is enabled.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private @Nullable Boolean value_enabled;
    private boolean unknown_enabled;
    public @Nullable Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'DomainSamlOptionsSamlOptions.enabled' is not present");
    }

    /**
     * Information from your identity provider.
     * 
     */
    @PolicyResourceProperty(name="idp", flag="unknown_idp")
    private @Nullable DomainSamlOptionsSamlOptionsIdp value_idp;
    private boolean unknown_idp;
    public @Nullable DomainSamlOptionsSamlOptionsIdp idp() {
        if (!unknown_idp) return value_idp;
        throw new UndeferrableValueException("Value 'DomainSamlOptionsSamlOptions.idp' is not present");
    }

    /**
     * This backend role from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
     * 
     */
    @PolicyResourceProperty(name="masterBackendRole", flag="unknown_masterBackendRole")
    private @Nullable String value_masterBackendRole;
    private boolean unknown_masterBackendRole;
    public @Nullable String masterBackendRole() {
        if (!unknown_masterBackendRole) return value_masterBackendRole;
        throw new UndeferrableValueException("Value 'DomainSamlOptionsSamlOptions.masterBackendRole' is not present");
    }

    /**
     * This username from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
     * 
     */
    @PolicyResourceProperty(name="masterUserName", flag="unknown_masterUserName")
    private @Nullable String value_masterUserName;
    private boolean unknown_masterUserName;
    public @Nullable String masterUserName() {
        if (!unknown_masterUserName) return value_masterUserName;
        throw new UndeferrableValueException("Value 'DomainSamlOptionsSamlOptions.masterUserName' is not present");
    }

    /**
     * Element of the SAML assertion to use for backend roles. Default is roles.
     * 
     */
    @PolicyResourceProperty(name="rolesKey", flag="unknown_rolesKey")
    private @Nullable String value_rolesKey;
    private boolean unknown_rolesKey;
    public @Nullable String rolesKey() {
        if (!unknown_rolesKey) return value_rolesKey;
        throw new UndeferrableValueException("Value 'DomainSamlOptionsSamlOptions.rolesKey' is not present");
    }

    /**
     * Duration of a session in minutes after a user logs in. Default is 60. Maximum value is 1,440.
     * 
     */
    @PolicyResourceProperty(name="sessionTimeoutMinutes", flag="unknown_sessionTimeoutMinutes")
    private @Nullable Integer value_sessionTimeoutMinutes;
    private boolean unknown_sessionTimeoutMinutes;
    public @Nullable Integer sessionTimeoutMinutes() {
        if (!unknown_sessionTimeoutMinutes) return value_sessionTimeoutMinutes;
        throw new UndeferrableValueException("Value 'DomainSamlOptionsSamlOptions.sessionTimeoutMinutes' is not present");
    }

    /**
     * Custom SAML attribute to use for user names. Default is an empty string - `&#34;&#34;`. This will cause Elasticsearch to use the `NameID` element of the `Subject`, which is the default location for name identifiers in the SAML specification.
     * 
     */
    @PolicyResourceProperty(name="subjectKey", flag="unknown_subjectKey")
    private @Nullable String value_subjectKey;
    private boolean unknown_subjectKey;
    public @Nullable String subjectKey() {
        if (!unknown_subjectKey) return value_subjectKey;
        throw new UndeferrableValueException("Value 'DomainSamlOptionsSamlOptions.subjectKey' is not present");
    }

}
