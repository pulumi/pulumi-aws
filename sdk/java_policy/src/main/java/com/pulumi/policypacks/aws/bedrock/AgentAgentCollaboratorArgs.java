// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.bedrock;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.bedrock.inputs.AgentAgentCollaboratorAgentDescriptorArgs;
import com.pulumi.policypacks.aws.bedrock.inputs.AgentAgentCollaboratorTimeoutsArgs;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:bedrock/agentAgentCollaborator:AgentAgentCollaborator")
public final class AgentAgentCollaboratorArgs extends com.pulumi.resources.PolicyResourceInput {

    @PolicyResourceProperty(name="agentDescriptor", flag="unknown_agentDescriptor")
    private AgentAgentCollaboratorAgentDescriptorArgs value_agentDescriptor;
    private boolean unknown_agentDescriptor;
    public AgentAgentCollaboratorAgentDescriptorArgs agentDescriptor() {
        if (!unknown_agentDescriptor) return value_agentDescriptor;
        throw new UndeferrableValueException("Value 'AgentAgentCollaboratorArgs.agentDescriptor' is not present");
    }

    /**
     * ID if the agent to associate the collaborator.
     * 
     */
    @PolicyResourceProperty(name="agentId", flag="unknown_agentId")
    private String value_agentId;
    private boolean unknown_agentId;
    public String agentId() {
        if (!unknown_agentId) return value_agentId;
        throw new UndeferrableValueException("Value 'AgentAgentCollaboratorArgs.agentId' is not present");
    }

    @PolicyResourceProperty(name="agentVersion", flag="unknown_agentVersion")
    private String value_agentVersion;
    private boolean unknown_agentVersion;
    public String agentVersion() {
        if (!unknown_agentVersion) return value_agentVersion;
        throw new UndeferrableValueException("Value 'AgentAgentCollaboratorArgs.agentVersion' is not present");
    }

    /**
     * Instruction to give the collaborator.
     * 
     */
    @PolicyResourceProperty(name="collaborationInstruction", flag="unknown_collaborationInstruction")
    private String value_collaborationInstruction;
    private boolean unknown_collaborationInstruction;
    public String collaborationInstruction() {
        if (!unknown_collaborationInstruction) return value_collaborationInstruction;
        throw new UndeferrableValueException("Value 'AgentAgentCollaboratorArgs.collaborationInstruction' is not present");
    }

    @PolicyResourceProperty(name="collaboratorName", flag="unknown_collaboratorName")
    private String value_collaboratorName;
    private boolean unknown_collaboratorName;
    public String collaboratorName() {
        if (!unknown_collaboratorName) return value_collaboratorName;
        throw new UndeferrableValueException("Value 'AgentAgentCollaboratorArgs.collaboratorName' is not present");
    }

    /**
     * Whether to prepare the agent after creation or modification. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="prepareAgent", flag="unknown_prepareAgent")
    private Boolean value_prepareAgent;
    private boolean unknown_prepareAgent;
    public Boolean prepareAgent() {
        if (!unknown_prepareAgent) return value_prepareAgent;
        throw new UndeferrableValueException("Value 'AgentAgentCollaboratorArgs.prepareAgent' is not present");
    }

    /**
     * Configure relaying the history to the collaborator.
     * 
     */
    @PolicyResourceProperty(name="relayConversationHistory", flag="unknown_relayConversationHistory")
    private String value_relayConversationHistory;
    private boolean unknown_relayConversationHistory;
    public String relayConversationHistory() {
        if (!unknown_relayConversationHistory) return value_relayConversationHistory;
        throw new UndeferrableValueException("Value 'AgentAgentCollaboratorArgs.relayConversationHistory' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private AgentAgentCollaboratorTimeoutsArgs value_timeouts;
    private boolean unknown_timeouts;
    public AgentAgentCollaboratorTimeoutsArgs timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'AgentAgentCollaboratorArgs.timeouts' is not present");
    }

}
