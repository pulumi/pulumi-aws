// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.pinpoint;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:pinpoint/apnsChannel:ApnsChannel")
public final class ApnsChannel extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The application ID.
     * 
     */
    @PolicyResourceProperty(name="applicationId", flag="unknown_applicationId")
    private String value_applicationId;
    private boolean unknown_applicationId;
    public String applicationId() {
        if (!unknown_applicationId) return value_applicationId;
        throw new UndeferrableValueException("Value 'ApnsChannel.applicationId' is not present");
    }

    /**
     * The ID assigned to your iOS app. To find this value, choose Certificates, IDs &amp; Profiles, choose App IDs in the Identifiers section, and choose your app.
     * 
     */
    @PolicyResourceProperty(name="bundleId", flag="unknown_bundleId")
    private @Nullable String value_bundleId;
    private boolean unknown_bundleId;
    public @Nullable String bundleId() {
        if (!unknown_bundleId) return value_bundleId;
        throw new UndeferrableValueException("Value 'ApnsChannel.bundleId' is not present");
    }

    /**
     * The pem encoded TLS Certificate from Apple.
     * 
     */
    @PolicyResourceProperty(name="certificate", flag="unknown_certificate")
    private @Nullable String value_certificate;
    private boolean unknown_certificate;
    public @Nullable String certificate() {
        if (!unknown_certificate) return value_certificate;
        throw new UndeferrableValueException("Value 'ApnsChannel.certificate' is not present");
    }

    /**
     * The default authentication method used for APNs.
     * __NOTE__: Amazon Pinpoint uses this default for every APNs push notification that you send using the console.
     * You can override the default when you send a message programmatically using the Amazon Pinpoint API, the AWS CLI, or an AWS SDK.
     * If your default authentication type fails, Amazon Pinpoint doesn&#39;t attempt to use the other authentication type.
     * 
     * One of the following sets of credentials is also required.
     * 
     * If you choose to use __Certificate credentials__ you will have to provide:
     * 
     */
    @PolicyResourceProperty(name="defaultAuthenticationMethod", flag="unknown_defaultAuthenticationMethod")
    private @Nullable String value_defaultAuthenticationMethod;
    private boolean unknown_defaultAuthenticationMethod;
    public @Nullable String defaultAuthenticationMethod() {
        if (!unknown_defaultAuthenticationMethod) return value_defaultAuthenticationMethod;
        throw new UndeferrableValueException("Value 'ApnsChannel.defaultAuthenticationMethod' is not present");
    }

    /**
     * Whether the channel is enabled or disabled. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private @Nullable Boolean value_enabled;
    private boolean unknown_enabled;
    public @Nullable Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'ApnsChannel.enabled' is not present");
    }

    /**
     * The Certificate Private Key file (ie. `.key` file).
     * 
     * If you choose to use __Key credentials__ you will have to provide:
     * 
     */
    @PolicyResourceProperty(name="privateKey", flag="unknown_privateKey")
    private @Nullable String value_privateKey;
    private boolean unknown_privateKey;
    public @Nullable String privateKey() {
        if (!unknown_privateKey) return value_privateKey;
        throw new UndeferrableValueException("Value 'ApnsChannel.privateKey' is not present");
    }

    /**
     * The ID assigned to your Apple developer account team. This value is provided on the Membership page.
     * 
     */
    @PolicyResourceProperty(name="teamId", flag="unknown_teamId")
    private @Nullable String value_teamId;
    private boolean unknown_teamId;
    public @Nullable String teamId() {
        if (!unknown_teamId) return value_teamId;
        throw new UndeferrableValueException("Value 'ApnsChannel.teamId' is not present");
    }

    /**
     * The `.p8` file that you download from your Apple developer account when you create an authentication key.
     * 
     */
    @PolicyResourceProperty(name="tokenKey", flag="unknown_tokenKey")
    private @Nullable String value_tokenKey;
    private boolean unknown_tokenKey;
    public @Nullable String tokenKey() {
        if (!unknown_tokenKey) return value_tokenKey;
        throw new UndeferrableValueException("Value 'ApnsChannel.tokenKey' is not present");
    }

    /**
     * The ID assigned to your signing key. To find this value, choose Certificates, IDs &amp; Profiles, and choose your key in the Keys section.
     * 
     */
    @PolicyResourceProperty(name="tokenKeyId", flag="unknown_tokenKeyId")
    private @Nullable String value_tokenKeyId;
    private boolean unknown_tokenKeyId;
    public @Nullable String tokenKeyId() {
        if (!unknown_tokenKeyId) return value_tokenKeyId;
        throw new UndeferrableValueException("Value 'ApnsChannel.tokenKeyId' is not present");
    }

}
