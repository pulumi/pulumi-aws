// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.fsx;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.fsx.inputs.OpenZfsFileSystemDiskIopsConfigurationArgs;
import com.pulumi.policypacks.aws.fsx.inputs.OpenZfsFileSystemRootVolumeConfigurationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:fsx/openZfsFileSystem:OpenZfsFileSystem")
public final class OpenZfsFileSystemArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days.
     * 
     */
    @PolicyResourceProperty(name="automaticBackupRetentionDays", flag="unknown_automaticBackupRetentionDays")
    private Integer value_automaticBackupRetentionDays;
    private boolean unknown_automaticBackupRetentionDays;
    public Integer automaticBackupRetentionDays() {
        if (!unknown_automaticBackupRetentionDays) return value_automaticBackupRetentionDays;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.automaticBackupRetentionDays' is not present");
    }

    /**
     * The ID of the source backup to create the filesystem from.
     * 
     */
    @PolicyResourceProperty(name="backupId", flag="unknown_backupId")
    private String value_backupId;
    private boolean unknown_backupId;
    public String backupId() {
        if (!unknown_backupId) return value_backupId;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.backupId' is not present");
    }

    /**
     * A boolean flag indicating whether tags for the file system should be copied to backups. The default value is false.
     * 
     */
    @PolicyResourceProperty(name="copyTagsToBackups", flag="unknown_copyTagsToBackups")
    private Boolean value_copyTagsToBackups;
    private boolean unknown_copyTagsToBackups;
    public Boolean copyTagsToBackups() {
        if (!unknown_copyTagsToBackups) return value_copyTagsToBackups;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.copyTagsToBackups' is not present");
    }

    /**
     * A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
     * 
     */
    @PolicyResourceProperty(name="copyTagsToVolumes", flag="unknown_copyTagsToVolumes")
    private Boolean value_copyTagsToVolumes;
    private boolean unknown_copyTagsToVolumes;
    public Boolean copyTagsToVolumes() {
        if (!unknown_copyTagsToVolumes) return value_copyTagsToVolumes;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.copyTagsToVolumes' is not present");
    }

    /**
     * A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily. Requires `automatic_backup_retention_days` to be set.
     * 
     */
    @PolicyResourceProperty(name="dailyAutomaticBackupStartTime", flag="unknown_dailyAutomaticBackupStartTime")
    private String value_dailyAutomaticBackupStartTime;
    private boolean unknown_dailyAutomaticBackupStartTime;
    public String dailyAutomaticBackupStartTime() {
        if (!unknown_dailyAutomaticBackupStartTime) return value_dailyAutomaticBackupStartTime;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.dailyAutomaticBackupStartTime' is not present");
    }

    /**
     * List of delete options, which at present supports only one value that specifies whether to delete all child volumes and snapshots when the file system is deleted. Valid values: `DELETE_CHILD_VOLUMES_AND_SNAPSHOTS`.
     * 
     */
    @PolicyResourceProperty(name="deleteOptions", flag="unknown_deleteOptions")
    private List<String> value_deleteOptions;
    private boolean unknown_deleteOptions;
    public List<String> deleteOptions() {
        if (!unknown_deleteOptions) return value_deleteOptions;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.deleteOptions' is not present");
    }

    /**
     * Filesystem deployment type. See the [AWS API documentation](https://docs.aws.amazon.com/fsx/latest/APIReference/API_CreateFileSystemOpenZFSConfiguration.html#FSx-Type-CreateFileSystemOpenZFSConfiguration-DeploymentType) for a list of valid values.
     * 
     */
    @PolicyResourceProperty(name="deploymentType", flag="unknown_deploymentType")
    private String value_deploymentType;
    private boolean unknown_deploymentType;
    public String deploymentType() {
        if (!unknown_deploymentType) return value_deploymentType;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.deploymentType' is not present");
    }

    /**
     * The SSD IOPS configuration for the Amazon FSx for OpenZFS file system. See `disk_iops_configuration` Block for details.
     * 
     */
    @PolicyResourceProperty(name="diskIopsConfiguration", flag="unknown_diskIopsConfiguration")
    private OpenZfsFileSystemDiskIopsConfigurationArgs value_diskIopsConfiguration;
    private boolean unknown_diskIopsConfiguration;
    public OpenZfsFileSystemDiskIopsConfigurationArgs diskIopsConfiguration() {
        if (!unknown_diskIopsConfiguration) return value_diskIopsConfiguration;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.diskIopsConfiguration' is not present");
    }

    /**
     * (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created.
     * 
     */
    @PolicyResourceProperty(name="endpointIpAddressRange", flag="unknown_endpointIpAddressRange")
    private String value_endpointIpAddressRange;
    private boolean unknown_endpointIpAddressRange;
    public String endpointIpAddressRange() {
        if (!unknown_endpointIpAddressRange) return value_endpointIpAddressRange;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.endpointIpAddressRange' is not present");
    }

    /**
     * A map of tags to apply to the file system&#39;s final backup.
     * 
     */
    @PolicyResourceProperty(name="finalBackupTags", flag="unknown_finalBackupTags")
    private Map<String,String> value_finalBackupTags;
    private boolean unknown_finalBackupTags;
    public Map<String,String> finalBackupTags() {
        if (!unknown_finalBackupTags) return value_finalBackupTags;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.finalBackupTags' is not present");
    }

    /**
     * ARN for the KMS Key to encrypt the file system at rest, Defaults to an AWS managed KMS Key.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.kmsKeyId' is not present");
    }

    /**
     * (Multi-AZ only) Required when `deployment_type` is set to `MULTI_AZ_1`. This specifies the subnet in which you want the preferred file server to be located.
     * 
     */
    @PolicyResourceProperty(name="preferredSubnetId", flag="unknown_preferredSubnetId")
    private String value_preferredSubnetId;
    private boolean unknown_preferredSubnetId;
    public String preferredSubnetId() {
        if (!unknown_preferredSubnetId) return value_preferredSubnetId;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.preferredSubnetId' is not present");
    }

    /**
     * The configuration for the root volume of the file system. All other volumes are children or the root volume. See `root_volume_configuration` Block for details.
     * 
     */
    @PolicyResourceProperty(name="rootVolumeConfiguration", flag="unknown_rootVolumeConfiguration")
    private OpenZfsFileSystemRootVolumeConfigurationArgs value_rootVolumeConfiguration;
    private boolean unknown_rootVolumeConfiguration;
    public OpenZfsFileSystemRootVolumeConfigurationArgs rootVolumeConfiguration() {
        if (!unknown_rootVolumeConfiguration) return value_rootVolumeConfiguration;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.rootVolumeConfiguration' is not present");
    }

    /**
     * (Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC&#39;s default route table.
     * 
     */
    @PolicyResourceProperty(name="routeTableIds", flag="unknown_routeTableIds")
    private List<String> value_routeTableIds;
    private boolean unknown_routeTableIds;
    public List<String> routeTableIds() {
        if (!unknown_routeTableIds) return value_routeTableIds;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.routeTableIds' is not present");
    }

    /**
     * A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
     * 
     */
    @PolicyResourceProperty(name="securityGroupIds", flag="unknown_securityGroupIds")
    private List<String> value_securityGroupIds;
    private boolean unknown_securityGroupIds;
    public List<String> securityGroupIds() {
        if (!unknown_securityGroupIds) return value_securityGroupIds;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.securityGroupIds' is not present");
    }

    /**
     * When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="skipFinalBackup", flag="unknown_skipFinalBackup")
    private Boolean value_skipFinalBackup;
    private boolean unknown_skipFinalBackup;
    public Boolean skipFinalBackup() {
        if (!unknown_skipFinalBackup) return value_skipFinalBackup;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.skipFinalBackup' is not present");
    }

    /**
     * The storage capacity (GiB) of the file system. Valid values between `64` and `524288`.
     * 
     */
    @PolicyResourceProperty(name="storageCapacity", flag="unknown_storageCapacity")
    private Integer value_storageCapacity;
    private boolean unknown_storageCapacity;
    public Integer storageCapacity() {
        if (!unknown_storageCapacity) return value_storageCapacity;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.storageCapacity' is not present");
    }

    /**
     * The filesystem storage type. Only `SSD` is supported.
     * 
     */
    @PolicyResourceProperty(name="storageType", flag="unknown_storageType")
    private String value_storageType;
    private boolean unknown_storageType;
    public String storageType() {
        if (!unknown_storageType) return value_storageType;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.storageType' is not present");
    }

    /**
     * A list of IDs for the subnets that the file system will be accessible from.
     * 
     */
    @PolicyResourceProperty(name="subnetIds", flag="unknown_subnetIds")
    private List<String> value_subnetIds;
    private boolean unknown_subnetIds;
    public List<String> subnetIds() {
        if (!unknown_subnetIds) return value_subnetIds;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.subnetIds' is not present");
    }

    /**
     * A map of tags to assign to the file system. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.tags' is not present");
    }

    /**
     * Throughput (MB/s) of the file system. Valid values depend on `deployment_type`. Must be one of `64`, `128`, `256`, `512`, `1024`, `2048`, `3072`, `4096` for `SINGLE_AZ_1`. Must be one of `160`, `320`, `640`, `1280`, `2560`, `3840`, `5120`, `7680`, `10240` for `SINGLE_AZ_2`.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="throughputCapacity", flag="unknown_throughputCapacity")
    private Integer value_throughputCapacity;
    private boolean unknown_throughputCapacity;
    public Integer throughputCapacity() {
        if (!unknown_throughputCapacity) return value_throughputCapacity;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.throughputCapacity' is not present");
    }

    /**
     * The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
     * 
     */
    @PolicyResourceProperty(name="weeklyMaintenanceStartTime", flag="unknown_weeklyMaintenanceStartTime")
    private String value_weeklyMaintenanceStartTime;
    private boolean unknown_weeklyMaintenanceStartTime;
    public String weeklyMaintenanceStartTime() {
        if (!unknown_weeklyMaintenanceStartTime) return value_weeklyMaintenanceStartTime;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemArgs.weeklyMaintenanceStartTime' is not present");
    }

}
