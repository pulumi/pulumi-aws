// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.fsx;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.fsx.inputs.OpenZfsFileSystemDiskIopsConfigurationArgs;
import com.pulumi.policypacks.aws.fsx.inputs.OpenZfsFileSystemRootVolumeConfigurationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:fsx/openZfsFileSystem:OpenZfsFileSystem")
public final class OpenZfsFileSystemArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days.
     * 
     */
    private UndeferrableValue<Integer> automaticBackupRetentionDays;

    public Integer automaticBackupRetentionDays() {
        if (automaticBackupRetentionDays == null) return null;
        return automaticBackupRetentionDays.getValue("OpenZfsFileSystemArgs.automaticBackupRetentionDays");
    }

    /**
     * The ID of the source backup to create the filesystem from.
     * 
     */
    private UndeferrableValue<String> backupId;

    public String backupId() {
        if (backupId == null) return null;
        return backupId.getValue("OpenZfsFileSystemArgs.backupId");
    }

    /**
     * A boolean flag indicating whether tags for the file system should be copied to backups. The default value is false.
     * 
     */
    private UndeferrableValue<Boolean> copyTagsToBackups;

    public Boolean copyTagsToBackups() {
        if (copyTagsToBackups == null) return null;
        return copyTagsToBackups.getValue("OpenZfsFileSystemArgs.copyTagsToBackups");
    }

    /**
     * A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
     * 
     */
    private UndeferrableValue<Boolean> copyTagsToVolumes;

    public Boolean copyTagsToVolumes() {
        if (copyTagsToVolumes == null) return null;
        return copyTagsToVolumes.getValue("OpenZfsFileSystemArgs.copyTagsToVolumes");
    }

    /**
     * A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily. Requires `automatic_backup_retention_days` to be set.
     * 
     */
    private UndeferrableValue<String> dailyAutomaticBackupStartTime;

    public String dailyAutomaticBackupStartTime() {
        if (dailyAutomaticBackupStartTime == null) return null;
        return dailyAutomaticBackupStartTime.getValue("OpenZfsFileSystemArgs.dailyAutomaticBackupStartTime");
    }

    /**
     * List of delete options, which at present supports only one value that specifies whether to delete all child volumes and snapshots when the file system is deleted. Valid values: `DELETE_CHILD_VOLUMES_AND_SNAPSHOTS`.
     * 
     */
    private UndeferrableValue<List<String>> deleteOptions;

    public List<String> deleteOptions() {
        if (deleteOptions == null) return null;
        return deleteOptions.getValue("OpenZfsFileSystemArgs.deleteOptions");
    }

    /**
     * Filesystem deployment type. See the [AWS API documentation](https://docs.aws.amazon.com/fsx/latest/APIReference/API_CreateFileSystemOpenZFSConfiguration.html#FSx-Type-CreateFileSystemOpenZFSConfiguration-DeploymentType) for a list of valid values.
     * 
     */
    private UndeferrableValue<String> deploymentType;

    public String deploymentType() {
        if (deploymentType == null) return null;
        return deploymentType.getValue("OpenZfsFileSystemArgs.deploymentType");
    }

    /**
     * The SSD IOPS configuration for the Amazon FSx for OpenZFS file system. See `disk_iops_configuration` Block for details.
     * 
     */
    private UndeferrableValue<OpenZfsFileSystemDiskIopsConfigurationArgs> diskIopsConfiguration;

    public OpenZfsFileSystemDiskIopsConfigurationArgs diskIopsConfiguration() {
        if (diskIopsConfiguration == null) return null;
        return diskIopsConfiguration.getValue("OpenZfsFileSystemArgs.diskIopsConfiguration");
    }

    /**
     * (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created.
     * 
     */
    private UndeferrableValue<String> endpointIpAddressRange;

    public String endpointIpAddressRange() {
        if (endpointIpAddressRange == null) return null;
        return endpointIpAddressRange.getValue("OpenZfsFileSystemArgs.endpointIpAddressRange");
    }

    /**
     * A map of tags to apply to the file system&#39;s final backup.
     * 
     */
    private UndeferrableValue<Map<String,String>> finalBackupTags;

    public Map<String,String> finalBackupTags() {
        if (finalBackupTags == null) return null;
        return finalBackupTags.getValue("OpenZfsFileSystemArgs.finalBackupTags");
    }

    /**
     * ARN for the KMS Key to encrypt the file system at rest, Defaults to an AWS managed KMS Key.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("OpenZfsFileSystemArgs.kmsKeyId");
    }

    /**
     * (Multi-AZ only) Required when `deployment_type` is set to `MULTI_AZ_1`. This specifies the subnet in which you want the preferred file server to be located.
     * 
     */
    private UndeferrableValue<String> preferredSubnetId;

    public String preferredSubnetId() {
        if (preferredSubnetId == null) return null;
        return preferredSubnetId.getValue("OpenZfsFileSystemArgs.preferredSubnetId");
    }

    /**
     * The configuration for the root volume of the file system. All other volumes are children or the root volume. See `root_volume_configuration` Block for details.
     * 
     */
    private UndeferrableValue<OpenZfsFileSystemRootVolumeConfigurationArgs> rootVolumeConfiguration;

    public OpenZfsFileSystemRootVolumeConfigurationArgs rootVolumeConfiguration() {
        if (rootVolumeConfiguration == null) return null;
        return rootVolumeConfiguration.getValue("OpenZfsFileSystemArgs.rootVolumeConfiguration");
    }

    /**
     * (Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC&#39;s default route table.
     * 
     */
    private UndeferrableValue<List<String>> routeTableIds;

    public List<String> routeTableIds() {
        if (routeTableIds == null) return null;
        return routeTableIds.getValue("OpenZfsFileSystemArgs.routeTableIds");
    }

    /**
     * A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
     * 
     */
    private UndeferrableValue<List<String>> securityGroupIds;

    public List<String> securityGroupIds() {
        if (securityGroupIds == null) return null;
        return securityGroupIds.getValue("OpenZfsFileSystemArgs.securityGroupIds");
    }

    /**
     * When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> skipFinalBackup;

    public Boolean skipFinalBackup() {
        if (skipFinalBackup == null) return null;
        return skipFinalBackup.getValue("OpenZfsFileSystemArgs.skipFinalBackup");
    }

    /**
     * The storage capacity (GiB) of the file system. Valid values between `64` and `524288`.
     * 
     */
    private UndeferrableValue<Integer> storageCapacity;

    public Integer storageCapacity() {
        if (storageCapacity == null) return null;
        return storageCapacity.getValue("OpenZfsFileSystemArgs.storageCapacity");
    }

    /**
     * The filesystem storage type. Only `SSD` is supported.
     * 
     */
    private UndeferrableValue<String> storageType;

    public String storageType() {
        if (storageType == null) return null;
        return storageType.getValue("OpenZfsFileSystemArgs.storageType");
    }

    /**
     * A list of IDs for the subnets that the file system will be accessible from.
     * 
     */
    private UndeferrableValue<List<String>> subnetIds;

    public List<String> subnetIds() {
        if (subnetIds == null) return null;
        return subnetIds.getValue("OpenZfsFileSystemArgs.subnetIds");
    }

    /**
     * A map of tags to assign to the file system. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("OpenZfsFileSystemArgs.tags");
    }

    /**
     * Throughput (MB/s) of the file system. Valid values depend on `deployment_type`. Must be one of `64`, `128`, `256`, `512`, `1024`, `2048`, `3072`, `4096` for `SINGLE_AZ_1`. Must be one of `160`, `320`, `640`, `1280`, `2560`, `3840`, `5120`, `7680`, `10240` for `SINGLE_AZ_2`.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<Integer> throughputCapacity;

    public Integer throughputCapacity() {
        if (throughputCapacity == null) return null;
        return throughputCapacity.getValue("OpenZfsFileSystemArgs.throughputCapacity");
    }

    /**
     * The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
     * 
     */
    private UndeferrableValue<String> weeklyMaintenanceStartTime;

    public String weeklyMaintenanceStartTime() {
        if (weeklyMaintenanceStartTime == null) return null;
        return weeklyMaintenanceStartTime.getValue("OpenZfsFileSystemArgs.weeklyMaintenanceStartTime");
    }

}
