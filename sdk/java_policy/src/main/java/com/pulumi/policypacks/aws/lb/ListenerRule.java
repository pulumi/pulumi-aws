// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lb;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lb.outputs.ListenerRuleAction;
import com.pulumi.policypacks.aws.lb.outputs.ListenerRuleCondition;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lb/listenerRule:ListenerRule")
public final class ListenerRule extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * An Action block. Action blocks are documented below.
     * 
     */
    @PolicyResourceProperty(name="actions", flag="unknown_actions")
    private List<ListenerRuleAction> value_actions;
    private boolean unknown_actions;
    public List<ListenerRuleAction> actions() {
        if (!unknown_actions) return value_actions;
        throw new UndeferrableValueException("Value 'ListenerRule.actions' is not present");
    }

    /**
     * The ARN of the rule (matches `id`)
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ListenerRule.arn' is not present");
    }

    /**
     * A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
     * 
     */
    @PolicyResourceProperty(name="conditions", flag="unknown_conditions")
    private List<ListenerRuleCondition> value_conditions;
    private boolean unknown_conditions;
    public List<ListenerRuleCondition> conditions() {
        if (!unknown_conditions) return value_conditions;
        throw new UndeferrableValueException("Value 'ListenerRule.conditions' is not present");
    }

    /**
     * The ARN of the listener to which to attach the rule.
     * 
     */
    @PolicyResourceProperty(name="listenerArn", flag="unknown_listenerArn")
    private String value_listenerArn;
    private boolean unknown_listenerArn;
    public String listenerArn() {
        if (!unknown_listenerArn) return value_listenerArn;
        throw new UndeferrableValueException("Value 'ListenerRule.listenerArn' is not present");
    }

    /**
     * The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can&#39;t have multiple rules with the same priority.
     * 
     */
    @PolicyResourceProperty(name="priority", flag="unknown_priority")
    private Integer value_priority;
    private boolean unknown_priority;
    public Integer priority() {
        if (!unknown_priority) return value_priority;
        throw new UndeferrableValueException("Value 'ListenerRule.priority' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ListenerRule.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ListenerRule.tagsAll' is not present");
    }

}
