// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.directconnect;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:directconnect/hostedPrivateVirtualInterfaceAccepter:HostedPrivateVirtualInterfaceAccepter")
public final class HostedPrivateVirtualInterfaceAccepter extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the virtual interface.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'HostedPrivateVirtualInterfaceAccepter.arn' is not present");
    }

    /**
     * The ID of the Direct Connect gateway to which to connect the virtual interface.
     * 
     */
    @PolicyResourceProperty(name="dxGatewayId", flag="unknown_dxGatewayId")
    private @Nullable String value_dxGatewayId;
    private boolean unknown_dxGatewayId;
    public @Nullable String dxGatewayId() {
        if (!unknown_dxGatewayId) return value_dxGatewayId;
        throw new UndeferrableValueException("Value 'HostedPrivateVirtualInterfaceAccepter.dxGatewayId' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'HostedPrivateVirtualInterfaceAccepter.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'HostedPrivateVirtualInterfaceAccepter.tagsAll' is not present");
    }

    /**
     * The ID of the Direct Connect virtual interface to accept.
     * 
     */
    @PolicyResourceProperty(name="virtualInterfaceId", flag="unknown_virtualInterfaceId")
    private String value_virtualInterfaceId;
    private boolean unknown_virtualInterfaceId;
    public String virtualInterfaceId() {
        if (!unknown_virtualInterfaceId) return value_virtualInterfaceId;
        throw new UndeferrableValueException("Value 'HostedPrivateVirtualInterfaceAccepter.virtualInterfaceId' is not present");
    }

    /**
     * The ID of the virtual private gateway to which to connect the virtual interface.
     * 
     */
    @PolicyResourceProperty(name="vpnGatewayId", flag="unknown_vpnGatewayId")
    private @Nullable String value_vpnGatewayId;
    private boolean unknown_vpnGatewayId;
    public @Nullable String vpnGatewayId() {
        if (!unknown_vpnGatewayId) return value_vpnGatewayId;
        throw new UndeferrableValueException("Value 'HostedPrivateVirtualInterfaceAccepter.vpnGatewayId' is not present");
    }

}
