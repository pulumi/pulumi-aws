// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersS3ManifestFileLocationArgs;
import java.lang.String;
import javax.annotation.Nullable;


public final class DataSourceParametersS3Args {

    /**
     * An object containing the S3 location of the S3 manifest file.
     * 
     */
    @PolicyResourceProperty(name="manifestFileLocation", flag="unknown_manifestFileLocation")
    private DataSourceParametersS3ManifestFileLocationArgs value_manifestFileLocation;
    private boolean unknown_manifestFileLocation;
    public DataSourceParametersS3ManifestFileLocationArgs manifestFileLocation() {
        if (!unknown_manifestFileLocation) return value_manifestFileLocation;
        throw new UndeferrableValueException("Value 'DataSourceParametersS3Args.manifestFileLocation' is not present");
    }

    /**
     * Use the `role_arn` to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use `role_arn` to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'DataSourceParametersS3Args.roleArn' is not present");
    }

}
