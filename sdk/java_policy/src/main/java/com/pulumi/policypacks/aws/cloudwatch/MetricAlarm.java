// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudwatch.outputs.MetricAlarmMetricQuery;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudwatch/metricAlarm:MetricAlarm")
public final class MetricAlarm extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Indicates whether or not actions should be executed during any changes to the alarm&#39;s state. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="actionsEnabled", flag="unknown_actionsEnabled")
    private @Nullable Boolean value_actionsEnabled;
    private boolean unknown_actionsEnabled;
    public @Nullable Boolean actionsEnabled() {
        if (!unknown_actionsEnabled) return value_actionsEnabled;
        throw new UndeferrableValueException("Value 'MetricAlarm.actionsEnabled' is not present");
    }

    /**
     * The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     */
    @PolicyResourceProperty(name="alarmActions", flag="unknown_alarmActions")
    private @Nullable List<String> value_alarmActions;
    private boolean unknown_alarmActions;
    public @Nullable List<String> alarmActions() {
        if (!unknown_alarmActions) return value_alarmActions;
        throw new UndeferrableValueException("Value 'MetricAlarm.alarmActions' is not present");
    }

    /**
     * The description for the alarm.
     * 
     */
    @PolicyResourceProperty(name="alarmDescription", flag="unknown_alarmDescription")
    private @Nullable String value_alarmDescription;
    private boolean unknown_alarmDescription;
    public @Nullable String alarmDescription() {
        if (!unknown_alarmDescription) return value_alarmDescription;
        throw new UndeferrableValueException("Value 'MetricAlarm.alarmDescription' is not present");
    }

    /**
     * The ARN of the CloudWatch Metric Alarm.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'MetricAlarm.arn' is not present");
    }

    /**
     * The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`. Additionally, the values  `LessThanLowerOrGreaterThanUpperThreshold`, `LessThanLowerThreshold`, and `GreaterThanUpperThreshold` are used only for alarms based on anomaly detection models.
     * 
     */
    @PolicyResourceProperty(name="comparisonOperator", flag="unknown_comparisonOperator")
    private String value_comparisonOperator;
    private boolean unknown_comparisonOperator;
    public String comparisonOperator() {
        if (!unknown_comparisonOperator) return value_comparisonOperator;
        throw new UndeferrableValueException("Value 'MetricAlarm.comparisonOperator' is not present");
    }

    /**
     * The number of datapoints that must be breaching to trigger the alarm.
     * 
     */
    @PolicyResourceProperty(name="datapointsToAlarm", flag="unknown_datapointsToAlarm")
    private @Nullable Integer value_datapointsToAlarm;
    private boolean unknown_datapointsToAlarm;
    public @Nullable Integer datapointsToAlarm() {
        if (!unknown_datapointsToAlarm) return value_datapointsToAlarm;
        throw new UndeferrableValueException("Value 'MetricAlarm.datapointsToAlarm' is not present");
    }

    /**
     * The dimensions for the alarm&#39;s associated metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     * 
     */
    @PolicyResourceProperty(name="dimensions", flag="unknown_dimensions")
    private @Nullable Map<String,String> value_dimensions;
    private boolean unknown_dimensions;
    public @Nullable Map<String,String> dimensions() {
        if (!unknown_dimensions) return value_dimensions;
        throw new UndeferrableValueException("Value 'MetricAlarm.dimensions' is not present");
    }

    /**
     * Used only for alarms based on percentiles.
     * If you specify `ignore`, the alarm state will not change during periods with too few data points to be statistically significant.
     * If you specify `evaluate` or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available.
     * The following values are supported: `ignore`, and `evaluate`.
     * 
     */
    @PolicyResourceProperty(name="evaluateLowSampleCountPercentiles", flag="unknown_evaluateLowSampleCountPercentiles")
    private String value_evaluateLowSampleCountPercentiles;
    private boolean unknown_evaluateLowSampleCountPercentiles;
    public String evaluateLowSampleCountPercentiles() {
        if (!unknown_evaluateLowSampleCountPercentiles) return value_evaluateLowSampleCountPercentiles;
        throw new UndeferrableValueException("Value 'MetricAlarm.evaluateLowSampleCountPercentiles' is not present");
    }

    /**
     * The number of periods over which data is compared to the specified threshold.
     * 
     */
    @PolicyResourceProperty(name="evaluationPeriods", flag="unknown_evaluationPeriods")
    private Integer value_evaluationPeriods;
    private boolean unknown_evaluationPeriods;
    public Integer evaluationPeriods() {
        if (!unknown_evaluationPeriods) return value_evaluationPeriods;
        throw new UndeferrableValueException("Value 'MetricAlarm.evaluationPeriods' is not present");
    }

    /**
     * The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
     * 
     */
    @PolicyResourceProperty(name="extendedStatistic", flag="unknown_extendedStatistic")
    private @Nullable String value_extendedStatistic;
    private boolean unknown_extendedStatistic;
    public @Nullable String extendedStatistic() {
        if (!unknown_extendedStatistic) return value_extendedStatistic;
        throw new UndeferrableValueException("Value 'MetricAlarm.extendedStatistic' is not present");
    }

    /**
     * The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     */
    @PolicyResourceProperty(name="insufficientDataActions", flag="unknown_insufficientDataActions")
    private @Nullable List<String> value_insufficientDataActions;
    private boolean unknown_insufficientDataActions;
    public @Nullable List<String> insufficientDataActions() {
        if (!unknown_insufficientDataActions) return value_insufficientDataActions;
        throw new UndeferrableValueException("Value 'MetricAlarm.insufficientDataActions' is not present");
    }

    /**
     * The name for the alarm&#39;s associated metric.
     * See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     * 
     */
    @PolicyResourceProperty(name="metricName", flag="unknown_metricName")
    private @Nullable String value_metricName;
    private boolean unknown_metricName;
    public @Nullable String metricName() {
        if (!unknown_metricName) return value_metricName;
        throw new UndeferrableValueException("Value 'MetricAlarm.metricName' is not present");
    }

    /**
     * Enables you to create an alarm based on a metric math expression. You may specify at most 20.
     * 
     */
    @PolicyResourceProperty(name="metricQueries", flag="unknown_metricQueries")
    private @Nullable List<MetricAlarmMetricQuery> value_metricQueries;
    private boolean unknown_metricQueries;
    public @Nullable List<MetricAlarmMetricQuery> metricQueries() {
        if (!unknown_metricQueries) return value_metricQueries;
        throw new UndeferrableValueException("Value 'MetricAlarm.metricQueries' is not present");
    }

    /**
     * The descriptive name for the alarm. This name must be unique within the user&#39;s AWS account
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'MetricAlarm.name' is not present");
    }

    /**
     * The namespace for the alarm&#39;s associated metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
     * See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     * 
     */
    @PolicyResourceProperty(name="namespace", flag="unknown_namespace")
    private @Nullable String value_namespace;
    private boolean unknown_namespace;
    public @Nullable String namespace() {
        if (!unknown_namespace) return value_namespace;
        throw new UndeferrableValueException("Value 'MetricAlarm.namespace' is not present");
    }

    /**
     * The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     */
    @PolicyResourceProperty(name="okActions", flag="unknown_okActions")
    private @Nullable List<String> value_okActions;
    private boolean unknown_okActions;
    public @Nullable List<String> okActions() {
        if (!unknown_okActions) return value_okActions;
        throw new UndeferrableValueException("Value 'MetricAlarm.okActions' is not present");
    }

    /**
     * The period in seconds over which the specified `statistic` is applied.
     * Valid values are `10`, `30`, or any multiple of `60`.
     * 
     */
    @PolicyResourceProperty(name="period", flag="unknown_period")
    private @Nullable Integer value_period;
    private boolean unknown_period;
    public @Nullable Integer period() {
        if (!unknown_period) return value_period;
        throw new UndeferrableValueException("Value 'MetricAlarm.period' is not present");
    }

    /**
     * The statistic to apply to the alarm&#39;s associated metric.
     * Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
     * 
     */
    @PolicyResourceProperty(name="statistic", flag="unknown_statistic")
    private @Nullable String value_statistic;
    private boolean unknown_statistic;
    public @Nullable String statistic() {
        if (!unknown_statistic) return value_statistic;
        throw new UndeferrableValueException("Value 'MetricAlarm.statistic' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * &gt; **NOTE:**  If you specify at least one `metric_query`, you may not specify a `metric_name`, `namespace`, `period` or `statistic`. If you do not specify a `metric_query`, you must specify each of these (although you may use `extended_statistic` instead of `statistic`).
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'MetricAlarm.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'MetricAlarm.tagsAll' is not present");
    }

    /**
     * The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
     * 
     */
    @PolicyResourceProperty(name="threshold", flag="unknown_threshold")
    private @Nullable Double value_threshold;
    private boolean unknown_threshold;
    public @Nullable Double threshold() {
        if (!unknown_threshold) return value_threshold;
        throw new UndeferrableValueException("Value 'MetricAlarm.threshold' is not present");
    }

    /**
     * If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
     * 
     */
    @PolicyResourceProperty(name="thresholdMetricId", flag="unknown_thresholdMetricId")
    private @Nullable String value_thresholdMetricId;
    private boolean unknown_thresholdMetricId;
    public @Nullable String thresholdMetricId() {
        if (!unknown_thresholdMetricId) return value_thresholdMetricId;
        throw new UndeferrableValueException("Value 'MetricAlarm.thresholdMetricId' is not present");
    }

    /**
     * Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
     * 
     */
    @PolicyResourceProperty(name="treatMissingData", flag="unknown_treatMissingData")
    private @Nullable String value_treatMissingData;
    private boolean unknown_treatMissingData;
    public @Nullable String treatMissingData() {
        if (!unknown_treatMissingData) return value_treatMissingData;
        throw new UndeferrableValueException("Value 'MetricAlarm.treatMissingData' is not present");
    }

    /**
     * The unit for the alarm&#39;s associated metric.
     * 
     */
    @PolicyResourceProperty(name="unit", flag="unknown_unit")
    private @Nullable String value_unit;
    private boolean unknown_unit;
    public @Nullable String unit() {
        if (!unknown_unit) return value_unit;
        throw new UndeferrableValueException("Value 'MetricAlarm.unit' is not present");
    }

}
