// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.backup;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.backup.inputs.LogicallyAirGappedVaultTimeoutsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:backup/logicallyAirGappedVault:LogicallyAirGappedVault")
public final class LogicallyAirGappedVaultArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
     * 
     */
    private UndeferrableValue<Integer> maxRetentionDays;

    public Integer maxRetentionDays() {
        if (maxRetentionDays == null) return null;
        return maxRetentionDays.getValue("LogicallyAirGappedVaultArgs.maxRetentionDays");
    }

    /**
     * Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
     * 
     */
    private UndeferrableValue<Integer> minRetentionDays;

    public Integer minRetentionDays() {
        if (minRetentionDays == null) return null;
        return minRetentionDays.getValue("LogicallyAirGappedVaultArgs.minRetentionDays");
    }

    /**
     * Name of the Logically Air Gapped Backup Vault to create.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("LogicallyAirGappedVaultArgs.name");
    }

    /**
     * Metadata that you can assign to help organize the resources that you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("LogicallyAirGappedVaultArgs.tags");
    }

    private UndeferrableValue<LogicallyAirGappedVaultTimeoutsArgs> timeouts;

    public LogicallyAirGappedVaultTimeoutsArgs timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("LogicallyAirGappedVaultArgs.timeouts");
    }

}
