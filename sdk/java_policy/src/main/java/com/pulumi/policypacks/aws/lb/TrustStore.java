// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lb;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lb/trustStore:TrustStore")
public final class TrustStore extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Trust Store (matches `id`).
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'TrustStore.arn' is not present");
    }

    /**
     * ARN suffix for use with CloudWatch Metrics.
     * 
     */
    @PolicyResourceProperty(name="arnSuffix", flag="unknown_arnSuffix")
    private String value_arnSuffix;
    private boolean unknown_arnSuffix;
    public String arnSuffix() {
        if (!unknown_arnSuffix) return value_arnSuffix;
        throw new UndeferrableValueException("Value 'TrustStore.arnSuffix' is not present");
    }

    /**
     * S3 Bucket name holding the client certificate CA bundle.
     * 
     */
    @PolicyResourceProperty(name="caCertificatesBundleS3Bucket", flag="unknown_caCertificatesBundleS3Bucket")
    private String value_caCertificatesBundleS3Bucket;
    private boolean unknown_caCertificatesBundleS3Bucket;
    public String caCertificatesBundleS3Bucket() {
        if (!unknown_caCertificatesBundleS3Bucket) return value_caCertificatesBundleS3Bucket;
        throw new UndeferrableValueException("Value 'TrustStore.caCertificatesBundleS3Bucket' is not present");
    }

    /**
     * S3 object key holding the client certificate CA bundle.
     * 
     */
    @PolicyResourceProperty(name="caCertificatesBundleS3Key", flag="unknown_caCertificatesBundleS3Key")
    private String value_caCertificatesBundleS3Key;
    private boolean unknown_caCertificatesBundleS3Key;
    public String caCertificatesBundleS3Key() {
        if (!unknown_caCertificatesBundleS3Key) return value_caCertificatesBundleS3Key;
        throw new UndeferrableValueException("Value 'TrustStore.caCertificatesBundleS3Key' is not present");
    }

    /**
     * Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
     * 
     */
    @PolicyResourceProperty(name="caCertificatesBundleS3ObjectVersion", flag="unknown_caCertificatesBundleS3ObjectVersion")
    private @Nullable String value_caCertificatesBundleS3ObjectVersion;
    private boolean unknown_caCertificatesBundleS3ObjectVersion;
    public @Nullable String caCertificatesBundleS3ObjectVersion() {
        if (!unknown_caCertificatesBundleS3ObjectVersion) return value_caCertificatesBundleS3ObjectVersion;
        throw new UndeferrableValueException("Value 'TrustStore.caCertificatesBundleS3ObjectVersion' is not present");
    }

    /**
     * Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'TrustStore.name' is not present");
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
     * 
     */
    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'TrustStore.namePrefix' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'TrustStore.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'TrustStore.tagsAll' is not present");
    }

}
