// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cognito.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.Integer;
import javax.annotation.Nullable;


public final class UserPoolPasswordPolicyArgs {

    /**
     * Minimum length of the password policy that you have set.
     * 
     */
    @PolicyResourceProperty(name="minimumLength", flag="unknown_minimumLength")
    private Integer value_minimumLength;
    private boolean unknown_minimumLength;
    public Integer minimumLength() {
        if (!unknown_minimumLength) return value_minimumLength;
        throw new UndeferrableValueException("Value 'UserPoolPasswordPolicyArgs.minimumLength' is not present");
    }

    /**
     * Number of previous passwords that you want Amazon Cognito to restrict each user from reusing. Users can&#39;t set a password that matches any of number of previous passwords specified by this argument. A value of 0 means that password history is not enforced. Valid values are between 0 and 24.
     * 
     * **Note:** This argument requires advanced security features to be active in the user pool.
     * 
     */
    @PolicyResourceProperty(name="passwordHistorySize", flag="unknown_passwordHistorySize")
    private Integer value_passwordHistorySize;
    private boolean unknown_passwordHistorySize;
    public Integer passwordHistorySize() {
        if (!unknown_passwordHistorySize) return value_passwordHistorySize;
        throw new UndeferrableValueException("Value 'UserPoolPasswordPolicyArgs.passwordHistorySize' is not present");
    }

    /**
     * Whether you have required users to use at least one lowercase letter in their password.
     * 
     */
    @PolicyResourceProperty(name="requireLowercase", flag="unknown_requireLowercase")
    private Boolean value_requireLowercase;
    private boolean unknown_requireLowercase;
    public Boolean requireLowercase() {
        if (!unknown_requireLowercase) return value_requireLowercase;
        throw new UndeferrableValueException("Value 'UserPoolPasswordPolicyArgs.requireLowercase' is not present");
    }

    /**
     * Whether you have required users to use at least one number in their password.
     * 
     */
    @PolicyResourceProperty(name="requireNumbers", flag="unknown_requireNumbers")
    private Boolean value_requireNumbers;
    private boolean unknown_requireNumbers;
    public Boolean requireNumbers() {
        if (!unknown_requireNumbers) return value_requireNumbers;
        throw new UndeferrableValueException("Value 'UserPoolPasswordPolicyArgs.requireNumbers' is not present");
    }

    /**
     * Whether you have required users to use at least one symbol in their password.
     * 
     */
    @PolicyResourceProperty(name="requireSymbols", flag="unknown_requireSymbols")
    private Boolean value_requireSymbols;
    private boolean unknown_requireSymbols;
    public Boolean requireSymbols() {
        if (!unknown_requireSymbols) return value_requireSymbols;
        throw new UndeferrableValueException("Value 'UserPoolPasswordPolicyArgs.requireSymbols' is not present");
    }

    /**
     * Whether you have required users to use at least one uppercase letter in their password.
     * 
     */
    @PolicyResourceProperty(name="requireUppercase", flag="unknown_requireUppercase")
    private Boolean value_requireUppercase;
    private boolean unknown_requireUppercase;
    public Boolean requireUppercase() {
        if (!unknown_requireUppercase) return value_requireUppercase;
        throw new UndeferrableValueException("Value 'UserPoolPasswordPolicyArgs.requireUppercase' is not present");
    }

    /**
     * In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
     * 
     */
    @PolicyResourceProperty(name="temporaryPasswordValidityDays", flag="unknown_temporaryPasswordValidityDays")
    private Integer value_temporaryPasswordValidityDays;
    private boolean unknown_temporaryPasswordValidityDays;
    public Integer temporaryPasswordValidityDays() {
        if (!unknown_temporaryPasswordValidityDays) return value_temporaryPasswordValidityDays;
        throw new UndeferrableValueException("Value 'UserPoolPasswordPolicyArgs.temporaryPasswordValidityDays' is not present");
    }

}
