// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cognito.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.Integer;
import javax.annotation.Nullable;


public final class UserPoolPasswordPolicyArgs {

    /**
     * Minimum length of the password policy that you have set.
     * 
     */
    private UndeferrableValue<Integer> minimumLength;

    public Integer minimumLength() {
        if (minimumLength == null) return null;
        return minimumLength.getValue("UserPoolPasswordPolicyArgs.minimumLength");
    }

    /**
     * Number of previous passwords that you want Amazon Cognito to restrict each user from reusing. Users can&#39;t set a password that matches any of number of previous passwords specified by this argument. A value of 0 means that password history is not enforced. Valid values are between 0 and 24.
     * 
     * **Note:** This argument requires advanced security features to be active in the user pool.
     * 
     */
    private UndeferrableValue<Integer> passwordHistorySize;

    public Integer passwordHistorySize() {
        if (passwordHistorySize == null) return null;
        return passwordHistorySize.getValue("UserPoolPasswordPolicyArgs.passwordHistorySize");
    }

    /**
     * Whether you have required users to use at least one lowercase letter in their password.
     * 
     */
    private UndeferrableValue<Boolean> requireLowercase;

    public Boolean requireLowercase() {
        if (requireLowercase == null) return null;
        return requireLowercase.getValue("UserPoolPasswordPolicyArgs.requireLowercase");
    }

    /**
     * Whether you have required users to use at least one number in their password.
     * 
     */
    private UndeferrableValue<Boolean> requireNumbers;

    public Boolean requireNumbers() {
        if (requireNumbers == null) return null;
        return requireNumbers.getValue("UserPoolPasswordPolicyArgs.requireNumbers");
    }

    /**
     * Whether you have required users to use at least one symbol in their password.
     * 
     */
    private UndeferrableValue<Boolean> requireSymbols;

    public Boolean requireSymbols() {
        if (requireSymbols == null) return null;
        return requireSymbols.getValue("UserPoolPasswordPolicyArgs.requireSymbols");
    }

    /**
     * Whether you have required users to use at least one uppercase letter in their password.
     * 
     */
    private UndeferrableValue<Boolean> requireUppercase;

    public Boolean requireUppercase() {
        if (requireUppercase == null) return null;
        return requireUppercase.getValue("UserPoolPasswordPolicyArgs.requireUppercase");
    }

    /**
     * In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
     * 
     */
    private UndeferrableValue<Integer> temporaryPasswordValidityDays;

    public Integer temporaryPasswordValidityDays() {
        if (temporaryPasswordValidityDays == null) return null;
        return temporaryPasswordValidityDays.getValue("UserPoolPasswordPolicyArgs.temporaryPasswordValidityDays");
    }

}
