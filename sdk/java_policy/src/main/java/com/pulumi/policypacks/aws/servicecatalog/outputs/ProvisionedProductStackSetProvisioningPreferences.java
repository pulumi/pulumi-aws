// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.servicecatalog.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class ProvisionedProductStackSetProvisioningPreferences {

    /**
     * One or more AWS accounts that will have access to the provisioned product. The AWS accounts specified should be within the list of accounts in the STACKSET constraint. To get the list of accounts in the STACKSET constraint, use the `aws_servicecatalog_provisioning_parameters` data source. If no values are specified, the default value is all accounts from the STACKSET constraint.
     * 
     */
    @PolicyResourceProperty(name="accounts", flag="unknown_accounts")
    private @Nullable List<String> value_accounts;
    private boolean unknown_accounts;
    public @Nullable List<String> accounts() {
        if (!unknown_accounts) return value_accounts;
        throw new UndeferrableValueException("Value 'ProvisionedProductStackSetProvisioningPreferences.accounts' is not present");
    }

    /**
     * Number of accounts, per region, for which this operation can fail before AWS Service Catalog stops the operation in that region. If the operation is stopped in a region, AWS Service Catalog doesn&#39;t attempt the operation in any subsequent regions. You must specify either `failure_tolerance_count` or `failure_tolerance_percentage`, but not both. The default value is 0 if no value is specified.
     * 
     */
    @PolicyResourceProperty(name="failureToleranceCount", flag="unknown_failureToleranceCount")
    private @Nullable Integer value_failureToleranceCount;
    private boolean unknown_failureToleranceCount;
    public @Nullable Integer failureToleranceCount() {
        if (!unknown_failureToleranceCount) return value_failureToleranceCount;
        throw new UndeferrableValueException("Value 'ProvisionedProductStackSetProvisioningPreferences.failureToleranceCount' is not present");
    }

    /**
     * Percentage of accounts, per region, for which this stack operation can fail before AWS Service Catalog stops the operation in that region. If the operation is stopped in a region, AWS Service Catalog doesn&#39;t attempt the operation in any subsequent regions. When calculating the number of accounts based on the specified percentage, AWS Service Catalog rounds down to the next whole number. You must specify either `failure_tolerance_count` or `failure_tolerance_percentage`, but not both.
     * 
     */
    @PolicyResourceProperty(name="failureTolerancePercentage", flag="unknown_failureTolerancePercentage")
    private @Nullable Integer value_failureTolerancePercentage;
    private boolean unknown_failureTolerancePercentage;
    public @Nullable Integer failureTolerancePercentage() {
        if (!unknown_failureTolerancePercentage) return value_failureTolerancePercentage;
        throw new UndeferrableValueException("Value 'ProvisionedProductStackSetProvisioningPreferences.failureTolerancePercentage' is not present");
    }

    /**
     * Maximum number of accounts in which to perform this operation at one time. This is dependent on the value of `failure_tolerance_count`. `max_concurrency_count` is at most one more than the `failure_tolerance_count`. Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling. You must specify either `max_concurrency_count` or `max_concurrency_percentage`, but not both.
     * 
     */
    @PolicyResourceProperty(name="maxConcurrencyCount", flag="unknown_maxConcurrencyCount")
    private @Nullable Integer value_maxConcurrencyCount;
    private boolean unknown_maxConcurrencyCount;
    public @Nullable Integer maxConcurrencyCount() {
        if (!unknown_maxConcurrencyCount) return value_maxConcurrencyCount;
        throw new UndeferrableValueException("Value 'ProvisionedProductStackSetProvisioningPreferences.maxConcurrencyCount' is not present");
    }

    /**
     * Maximum percentage of accounts in which to perform this operation at one time. When calculating the number of accounts based on the specified percentage, AWS Service Catalog rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, AWS Service Catalog sets the number as 1 instead. Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling. You must specify either `max_concurrency_count` or `max_concurrency_percentage`, but not both.
     * 
     */
    @PolicyResourceProperty(name="maxConcurrencyPercentage", flag="unknown_maxConcurrencyPercentage")
    private @Nullable Integer value_maxConcurrencyPercentage;
    private boolean unknown_maxConcurrencyPercentage;
    public @Nullable Integer maxConcurrencyPercentage() {
        if (!unknown_maxConcurrencyPercentage) return value_maxConcurrencyPercentage;
        throw new UndeferrableValueException("Value 'ProvisionedProductStackSetProvisioningPreferences.maxConcurrencyPercentage' is not present");
    }

    /**
     * One or more AWS Regions where the provisioned product will be available. The specified regions should be within the list of regions from the STACKSET constraint. To get the list of regions in the STACKSET constraint, use the `aws_servicecatalog_provisioning_parameters` data source. If no values are specified, the default value is all regions from the STACKSET constraint.
     * 
     */
    @PolicyResourceProperty(name="regions", flag="unknown_regions")
    private @Nullable List<String> value_regions;
    private boolean unknown_regions;
    public @Nullable List<String> regions() {
        if (!unknown_regions) return value_regions;
        throw new UndeferrableValueException("Value 'ProvisionedProductStackSetProvisioningPreferences.regions' is not present");
    }

}
