// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.iot;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.iot.inputs.DomainConfigurationAuthorizerConfigArgs;
import com.pulumi.policypacks.aws.iot.inputs.DomainConfigurationTlsConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:iot/domainConfiguration:DomainConfiguration")
public final class DomainConfigurationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * An object that specifies the authorization service for a domain. See the `authorizer_config` Block below for details.
     * 
     */
    @PolicyResourceProperty(name="authorizerConfig", flag="unknown_authorizerConfig")
    private DomainConfigurationAuthorizerConfigArgs value_authorizerConfig;
    private boolean unknown_authorizerConfig;
    public DomainConfigurationAuthorizerConfigArgs authorizerConfig() {
        if (!unknown_authorizerConfig) return value_authorizerConfig;
        throw new UndeferrableValueException("Value 'DomainConfigurationArgs.authorizerConfig' is not present");
    }

    /**
     * Fully-qualified domain name.
     * 
     */
    @PolicyResourceProperty(name="domainName", flag="unknown_domainName")
    private String value_domainName;
    private boolean unknown_domainName;
    public String domainName() {
        if (!unknown_domainName) return value_domainName;
        throw new UndeferrableValueException("Value 'DomainConfigurationArgs.domainName' is not present");
    }

    /**
     * The name of the domain configuration. This value must be unique to a region.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'DomainConfigurationArgs.name' is not present");
    }

    /**
     * The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom `domain_name`, the cert must include it.
     * 
     */
    @PolicyResourceProperty(name="serverCertificateArns", flag="unknown_serverCertificateArns")
    private List<String> value_serverCertificateArns;
    private boolean unknown_serverCertificateArns;
    public List<String> serverCertificateArns() {
        if (!unknown_serverCertificateArns) return value_serverCertificateArns;
        throw new UndeferrableValueException("Value 'DomainConfigurationArgs.serverCertificateArns' is not present");
    }

    /**
     * The type of service delivered by the endpoint. Note: Amazon Web Services IoT Core currently supports only the `DATA` service type.
     * 
     */
    @PolicyResourceProperty(name="serviceType", flag="unknown_serviceType")
    private String value_serviceType;
    private boolean unknown_serviceType;
    public String serviceType() {
        if (!unknown_serviceType) return value_serviceType;
        throw new UndeferrableValueException("Value 'DomainConfigurationArgs.serviceType' is not present");
    }

    /**
     * The status to which the domain configuration should be set. Valid values are `ENABLED` and `DISABLED`.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'DomainConfigurationArgs.status' is not present");
    }

    /**
     * Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'DomainConfigurationArgs.tags' is not present");
    }

    /**
     * An object that specifies the TLS configuration for a domain. See the `tls_config` Block below for details.
     * 
     */
    @PolicyResourceProperty(name="tlsConfig", flag="unknown_tlsConfig")
    private DomainConfigurationTlsConfigArgs value_tlsConfig;
    private boolean unknown_tlsConfig;
    public DomainConfigurationTlsConfigArgs tlsConfig() {
        if (!unknown_tlsConfig) return value_tlsConfig;
        throw new UndeferrableValueException("Value 'DomainConfigurationArgs.tlsConfig' is not present");
    }

    /**
     * The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
     * 
     */
    @PolicyResourceProperty(name="validationCertificateArn", flag="unknown_validationCertificateArn")
    private String value_validationCertificateArn;
    private boolean unknown_validationCertificateArn;
    public String validationCertificateArn() {
        if (!unknown_validationCertificateArn) return value_validationCertificateArn;
        throw new UndeferrableValueException("Value 'DomainConfigurationArgs.validationCertificateArn' is not present");
    }

}
