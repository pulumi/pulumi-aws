// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ssm;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ssm.inputs.AssociationOutputLocationArgs;
import com.pulumi.policypacks.aws.ssm.inputs.AssociationTargetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ssm/association:Association")
public final class AssociationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * By default, when you create a new or update associations, the system runs it immediately and then according to the schedule you specified. Enable this option if you do not want an association to run immediately after you create or update it. This parameter is not supported for rate expressions. Default: `false`.
     * 
     */
    private UndeferrableValue<Boolean> applyOnlyAtCronInterval;

    public Boolean applyOnlyAtCronInterval() {
        if (applyOnlyAtCronInterval == null) return null;
        return applyOnlyAtCronInterval.getValue("AssociationArgs.applyOnlyAtCronInterval");
    }

    /**
     * The descriptive name for the association.
     * 
     */
    private UndeferrableValue<String> associationName;

    public String associationName() {
        if (associationName == null) return null;
        return associationName.getValue("AssociationArgs.associationName");
    }

    /**
     * Specify the target for the association. This target is required for associations that use an `Automation` document and target resources by using rate controls. This should be set to the SSM document `parameter` that will define how your automation will branch out.
     * 
     */
    private UndeferrableValue<String> automationTargetParameterName;

    public String automationTargetParameterName() {
        if (automationTargetParameterName == null) return null;
        return automationTargetParameterName.getValue("AssociationArgs.automationTargetParameterName");
    }

    /**
     * The compliance severity for the association. Can be one of the following: `UNSPECIFIED`, `LOW`, `MEDIUM`, `HIGH` or `CRITICAL`
     * 
     */
    private UndeferrableValue<String> complianceSeverity;

    public String complianceSeverity() {
        if (complianceSeverity == null) return null;
        return complianceSeverity.getValue("AssociationArgs.complianceSeverity");
    }

    /**
     * The document version you want to associate with the target(s). Can be a specific version or the default version.
     * 
     */
    private UndeferrableValue<String> documentVersion;

    public String documentVersion() {
        if (documentVersion == null) return null;
        return documentVersion.getValue("AssociationArgs.documentVersion");
    }

    /**
     * The instance ID to apply an SSM document to. Use `targets` with key `InstanceIds` for document schema versions 2.0 and above. Use the `targets` attribute instead.
     * 
     * @deprecated
     * instance_id is deprecated. Use targets instead.
     * 
     */
    @Deprecated /* instance_id is deprecated. Use targets instead. */
    private UndeferrableValue<String> instanceId;

    public String instanceId() {
        if (instanceId == null) return null;
        return instanceId.getValue("AssociationArgs.instanceId");
    }

    /**
     * The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
     * 
     */
    private UndeferrableValue<String> maxConcurrency;

    public String maxConcurrency() {
        if (maxConcurrency == null) return null;
        return maxConcurrency.getValue("AssociationArgs.maxConcurrency");
    }

    /**
     * The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify a number, for example 10, or a percentage of the target set, for example 10%. If you specify a threshold of 3, the stop command is sent when the fourth error is returned. If you specify a threshold of 10% for 50 associations, the stop command is sent when the sixth error is returned.
     * 
     */
    private UndeferrableValue<String> maxErrors;

    public String maxErrors() {
        if (maxErrors == null) return null;
        return maxErrors.getValue("AssociationArgs.maxErrors");
    }

    /**
     * The name of the SSM document to apply.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("AssociationArgs.name");
    }

    /**
     * An output location block. Output Location is documented below.
     * 
     */
    private UndeferrableValue<AssociationOutputLocationArgs> outputLocation;

    public AssociationOutputLocationArgs outputLocation() {
        if (outputLocation == null) return null;
        return outputLocation.getValue("AssociationArgs.outputLocation");
    }

    /**
     * A block of arbitrary string parameters to pass to the SSM document.
     * 
     */
    private UndeferrableValue<Map<String,String>> parameters;

    public Map<String,String> parameters() {
        if (parameters == null) return null;
        return parameters.getValue("AssociationArgs.parameters");
    }

    /**
     * A [cron or rate expression](https://docs.aws.amazon.com/systems-manager/latest/userguide/reference-cron-and-rate-expressions.html) that specifies when the association runs.
     * 
     */
    private UndeferrableValue<String> scheduleExpression;

    public String scheduleExpression() {
        if (scheduleExpression == null) return null;
        return scheduleExpression.getValue("AssociationArgs.scheduleExpression");
    }

    /**
     * The mode for generating association compliance. You can specify `AUTO` or `MANUAL`.
     * 
     */
    private UndeferrableValue<String> syncCompliance;

    public String syncCompliance() {
        if (syncCompliance == null) return null;
        return syncCompliance.getValue("AssociationArgs.syncCompliance");
    }

    /**
     * A map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("AssociationArgs.tags");
    }

    /**
     * A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets.
     * 
     */
    private UndeferrableValue<List<AssociationTargetArgs>> targets;

    public List<AssociationTargetArgs> targets() {
        if (targets == null) return null;
        return targets.getValue("AssociationArgs.targets");
    }

    /**
     * The number of seconds to wait for the association status to be `Success`. If `Success` status is not reached within the given time, create opration will fail.
     * 
     * Output Location (`output_location`) is an S3 bucket where you want to store the results of this association:
     * 
     */
    private UndeferrableValue<Integer> waitForSuccessTimeoutSeconds;

    public Integer waitForSuccessTimeoutSeconds() {
        if (waitForSuccessTimeoutSeconds == null) return null;
        return waitForSuccessTimeoutSeconds.getValue("AssociationArgs.waitForSuccessTimeoutSeconds");
    }

}
