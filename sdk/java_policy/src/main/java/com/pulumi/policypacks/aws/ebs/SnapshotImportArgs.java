// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ebs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ebs.inputs.SnapshotImportClientDataArgs;
import com.pulumi.policypacks.aws.ebs.inputs.SnapshotImportDiskContainerArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ebs/snapshotImport:SnapshotImport")
public final class SnapshotImportArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The client-specific data. Detailed below.
     * 
     */
    private UndeferrableValue<SnapshotImportClientDataArgs> clientData;

    public SnapshotImportClientDataArgs clientData() {
        if (clientData == null) return null;
        return clientData.getValue("SnapshotImportArgs.clientData");
    }

    /**
     * The description string for the import snapshot task.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("SnapshotImportArgs.description");
    }

    /**
     * Information about the disk container. Detailed below.
     * 
     */
    private UndeferrableValue<SnapshotImportDiskContainerArgs> diskContainer;

    public SnapshotImportDiskContainerArgs diskContainer() {
        if (diskContainer == null) return null;
        return diskContainer.getValue("SnapshotImportArgs.diskContainer");
    }

    /**
     * Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId.
     * 
     */
    private UndeferrableValue<Boolean> encrypted;

    public Boolean encrypted() {
        if (encrypted == null) return null;
        return encrypted.getValue("SnapshotImportArgs.encrypted");
    }

    /**
     * An identifier for the symmetric KMS key to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("SnapshotImportArgs.kmsKeyId");
    }

    /**
     * Indicates whether to permanently restore an archived snapshot.
     * 
     */
    private UndeferrableValue<Boolean> permanentRestore;

    public Boolean permanentRestore() {
        if (permanentRestore == null) return null;
        return permanentRestore.getValue("SnapshotImportArgs.permanentRestore");
    }

    /**
     * The name of the IAM Role the VM Import/Export service will assume. This role needs certain permissions. See https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-role. Default: `vmimport`
     * 
     */
    private UndeferrableValue<String> roleName;

    public String roleName() {
        if (roleName == null) return null;
        return roleName.getValue("SnapshotImportArgs.roleName");
    }

    /**
     * The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
     * 
     */
    private UndeferrableValue<String> storageTier;

    public String storageTier() {
        if (storageTier == null) return null;
        return storageTier.getValue("SnapshotImportArgs.storageTier");
    }

    /**
     * A map of tags to assign to the snapshot.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("SnapshotImportArgs.tags");
    }

    /**
     * Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
     * 
     */
    private UndeferrableValue<Integer> temporaryRestoreDays;

    public Integer temporaryRestoreDays() {
        if (temporaryRestoreDays == null) return null;
        return temporaryRestoreDays.getValue("SnapshotImportArgs.temporaryRestoreDays");
    }

}
