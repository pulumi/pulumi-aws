// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.costexplorer;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.costexplorer.inputs.AnomalySubscriptionSubscriberArgs;
import com.pulumi.policypacks.aws.costexplorer.inputs.AnomalySubscriptionThresholdExpressionArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:costexplorer/anomalySubscription:AnomalySubscription")
public final class AnomalySubscriptionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The unique identifier for the AWS account in which the anomaly subscription ought to be created.
     * 
     */
    @PolicyResourceProperty(name="accountId", flag="unknown_accountId")
    private String value_accountId;
    private boolean unknown_accountId;
    public String accountId() {
        if (!unknown_accountId) return value_accountId;
        throw new UndeferrableValueException("Value 'AnomalySubscriptionArgs.accountId' is not present");
    }

    /**
     * The frequency that anomaly reports are sent. Valid Values: `DAILY` | `IMMEDIATE` | `WEEKLY`.
     * 
     */
    @PolicyResourceProperty(name="frequency", flag="unknown_frequency")
    private String value_frequency;
    private boolean unknown_frequency;
    public String frequency() {
        if (!unknown_frequency) return value_frequency;
        throw new UndeferrableValueException("Value 'AnomalySubscriptionArgs.frequency' is not present");
    }

    /**
     * A list of cost anomaly monitors.
     * 
     */
    @PolicyResourceProperty(name="monitorArnLists", flag="unknown_monitorArnLists")
    private List<String> value_monitorArnLists;
    private boolean unknown_monitorArnLists;
    public List<String> monitorArnLists() {
        if (!unknown_monitorArnLists) return value_monitorArnLists;
        throw new UndeferrableValueException("Value 'AnomalySubscriptionArgs.monitorArnLists' is not present");
    }

    /**
     * The name for the subscription.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'AnomalySubscriptionArgs.name' is not present");
    }

    /**
     * A subscriber configuration. Multiple subscribers can be defined.
     * 
     */
    @PolicyResourceProperty(name="subscribers", flag="unknown_subscribers")
    private List<AnomalySubscriptionSubscriberArgs> value_subscribers;
    private boolean unknown_subscribers;
    public List<AnomalySubscriptionSubscriberArgs> subscribers() {
        if (!unknown_subscribers) return value_subscribers;
        throw new UndeferrableValueException("Value 'AnomalySubscriptionArgs.subscribers' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'AnomalySubscriptionArgs.tags' is not present");
    }

    /**
     * An Expression object used to specify the anomalies that you want to generate alerts for. See Threshold Expression.
     * 
     */
    @PolicyResourceProperty(name="thresholdExpression", flag="unknown_thresholdExpression")
    private AnomalySubscriptionThresholdExpressionArgs value_thresholdExpression;
    private boolean unknown_thresholdExpression;
    public AnomalySubscriptionThresholdExpressionArgs thresholdExpression() {
        if (!unknown_thresholdExpression) return value_thresholdExpression;
        throw new UndeferrableValueException("Value 'AnomalySubscriptionArgs.thresholdExpression' is not present");
    }

}
