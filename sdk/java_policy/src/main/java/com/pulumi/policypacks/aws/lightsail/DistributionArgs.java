// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lightsail.inputs.DistributionCacheBehaviorArgs;
import com.pulumi.policypacks.aws.lightsail.inputs.DistributionCacheBehaviorSettingsArgs;
import com.pulumi.policypacks.aws.lightsail.inputs.DistributionDefaultCacheBehaviorArgs;
import com.pulumi.policypacks.aws.lightsail.inputs.DistributionOriginArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lightsail/distribution:Distribution")
public final class DistributionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Bundle ID to use for the distribution.
     * 
     */
    private UndeferrableValue<String> bundleId;

    public String bundleId() {
        if (bundleId == null) return null;
        return bundleId.getValue("DistributionArgs.bundleId");
    }

    /**
     * An object that describes the cache behavior settings of the distribution. Detailed below
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<DistributionCacheBehaviorSettingsArgs> cacheBehaviorSettings;

    public DistributionCacheBehaviorSettingsArgs cacheBehaviorSettings() {
        if (cacheBehaviorSettings == null) return null;
        return cacheBehaviorSettings.getValue("DistributionArgs.cacheBehaviorSettings");
    }

    /**
     * A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
     * 
     */
    private UndeferrableValue<List<DistributionCacheBehaviorArgs>> cacheBehaviors;

    public List<DistributionCacheBehaviorArgs> cacheBehaviors() {
        if (cacheBehaviors == null) return null;
        return cacheBehaviors.getValue("DistributionArgs.cacheBehaviors");
    }

    /**
     * The name of the SSL/TLS certificate attached to the distribution, if any.
     * 
     */
    private UndeferrableValue<String> certificateName;

    public String certificateName() {
        if (certificateName == null) return null;
        return certificateName.getValue("DistributionArgs.certificateName");
    }

    /**
     * Object that describes the default cache behavior of the distribution. Detailed below
     * 
     */
    private UndeferrableValue<DistributionDefaultCacheBehaviorArgs> defaultCacheBehavior;

    public DistributionDefaultCacheBehaviorArgs defaultCacheBehavior() {
        if (defaultCacheBehavior == null) return null;
        return defaultCacheBehavior.getValue("DistributionArgs.defaultCacheBehavior");
    }

    /**
     * The IP address type of the distribution. Default: `dualstack`.
     * 
     */
    private UndeferrableValue<String> ipAddressType;

    public String ipAddressType() {
        if (ipAddressType == null) return null;
        return ipAddressType.getValue("DistributionArgs.ipAddressType");
    }

    /**
     * Indicates whether the distribution is enabled. Default: `true`.
     * 
     */
    private UndeferrableValue<Boolean> isEnabled;

    public Boolean isEnabled() {
        if (isEnabled == null) return null;
        return isEnabled.getValue("DistributionArgs.isEnabled");
    }

    /**
     * Name of the distribution.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("DistributionArgs.name");
    }

    /**
     * Object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. Detailed below
     * 
     */
    private UndeferrableValue<DistributionOriginArgs> origin;

    public DistributionOriginArgs origin() {
        if (origin == null) return null;
        return origin.getValue("DistributionArgs.origin");
    }

    /**
     * Map of tags for the Lightsail Distribution. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DistributionArgs.tags");
    }

}
