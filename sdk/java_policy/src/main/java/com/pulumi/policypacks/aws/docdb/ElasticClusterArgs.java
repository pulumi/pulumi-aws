// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.docdb;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.docdb.inputs.ElasticClusterTimeoutsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:docdb/elasticCluster:ElasticCluster")
public final class ElasticClusterArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Name of the Elastic DocumentDB cluster administrator
     * 
     */
    @PolicyResourceProperty(name="adminUserName", flag="unknown_adminUserName")
    private String value_adminUserName;
    private boolean unknown_adminUserName;
    public String adminUserName() {
        if (!unknown_adminUserName) return value_adminUserName;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.adminUserName' is not present");
    }

    /**
     * Password for the Elastic DocumentDB cluster administrator. Can contain any printable ASCII characters. Must be at least 8 characters
     * 
     */
    @PolicyResourceProperty(name="adminUserPassword", flag="unknown_adminUserPassword")
    private String value_adminUserPassword;
    private boolean unknown_adminUserPassword;
    public String adminUserPassword() {
        if (!unknown_adminUserPassword) return value_adminUserPassword;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.adminUserPassword' is not present");
    }

    /**
     * Authentication type for the Elastic DocumentDB cluster. Valid values are `PLAIN_TEXT` and `SECRET_ARN`
     * 
     */
    @PolicyResourceProperty(name="authType", flag="unknown_authType")
    private String value_authType;
    private boolean unknown_authType;
    public String authType() {
        if (!unknown_authType) return value_authType;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.authType' is not present");
    }

    /**
     * The number of days for which automatic snapshots are retained. It should be in between 1 and 35. If not specified, the default value of 1 is set.
     * 
     */
    @PolicyResourceProperty(name="backupRetentionPeriod", flag="unknown_backupRetentionPeriod")
    private Integer value_backupRetentionPeriod;
    private boolean unknown_backupRetentionPeriod;
    public Integer backupRetentionPeriod() {
        if (!unknown_backupRetentionPeriod) return value_backupRetentionPeriod;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.backupRetentionPeriod' is not present");
    }

    /**
     * ARN of a KMS key that is used to encrypt the Elastic DocumentDB cluster. If not specified, the default encryption key that KMS creates for your account is used.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.kmsKeyId' is not present");
    }

    /**
     * Name of the Elastic DocumentDB cluster
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.name' is not present");
    }

    /**
     * The daily time range during which automated backups are created if automated backups are enabled, as determined by the `backup_retention_period`.
     * 
     */
    @PolicyResourceProperty(name="preferredBackupWindow", flag="unknown_preferredBackupWindow")
    private String value_preferredBackupWindow;
    private boolean unknown_preferredBackupWindow;
    public String preferredBackupWindow() {
        if (!unknown_preferredBackupWindow) return value_preferredBackupWindow;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.preferredBackupWindow' is not present");
    }

    /**
     * Weekly time range during which system maintenance can occur in UTC. Format: `ddd:hh24:mi-ddd:hh24:mi`. If not specified, AWS will choose a random 30-minute window on a random day of the week.
     * 
     */
    @PolicyResourceProperty(name="preferredMaintenanceWindow", flag="unknown_preferredMaintenanceWindow")
    private String value_preferredMaintenanceWindow;
    private boolean unknown_preferredMaintenanceWindow;
    public String preferredMaintenanceWindow() {
        if (!unknown_preferredMaintenanceWindow) return value_preferredMaintenanceWindow;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.preferredMaintenanceWindow' is not present");
    }

    /**
     * Number of vCPUs assigned to each elastic cluster shard. Maximum is 64. Allowed values are 2, 4, 8, 16, 32, 64
     * 
     */
    @PolicyResourceProperty(name="shardCapacity", flag="unknown_shardCapacity")
    private Integer value_shardCapacity;
    private boolean unknown_shardCapacity;
    public Integer shardCapacity() {
        if (!unknown_shardCapacity) return value_shardCapacity;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.shardCapacity' is not present");
    }

    /**
     * Number of shards assigned to the elastic cluster. Maximum is 32
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="shardCount", flag="unknown_shardCount")
    private Integer value_shardCount;
    private boolean unknown_shardCount;
    public Integer shardCount() {
        if (!unknown_shardCount) return value_shardCount;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.shardCount' is not present");
    }

    /**
     * IDs of subnets in which the Elastic DocumentDB Cluster operates.
     * 
     */
    @PolicyResourceProperty(name="subnetIds", flag="unknown_subnetIds")
    private List<String> value_subnetIds;
    private boolean unknown_subnetIds;
    public List<String> subnetIds() {
        if (!unknown_subnetIds) return value_subnetIds;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.subnetIds' is not present");
    }

    /**
     * A map of tags to assign to the collection. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.tags' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private ElasticClusterTimeoutsArgs value_timeouts;
    private boolean unknown_timeouts;
    public ElasticClusterTimeoutsArgs timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.timeouts' is not present");
    }

    /**
     * List of VPC security groups to associate with the Elastic DocumentDB Cluster
     * 
     */
    @PolicyResourceProperty(name="vpcSecurityGroupIds", flag="unknown_vpcSecurityGroupIds")
    private List<String> value_vpcSecurityGroupIds;
    private boolean unknown_vpcSecurityGroupIds;
    public List<String> vpcSecurityGroupIds() {
        if (!unknown_vpcSecurityGroupIds) return value_vpcSecurityGroupIds;
        throw new UndeferrableValueException("Value 'ElasticClusterArgs.vpcSecurityGroupIds' is not present");
    }

}
