// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.budgets.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class BudgetNotification {

    /**
     * (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
     * 
     */
    private UndeferrableValue<String> comparisonOperator;

    public String comparisonOperator() {
        if (comparisonOperator == null) return null;
        return comparisonOperator.getValue("BudgetNotification.comparisonOperator");
    }

    /**
     * (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
     * 
     */
    private UndeferrableValue<String> notificationType;

    public String notificationType() {
        if (notificationType == null) return null;
        return notificationType.getValue("BudgetNotification.notificationType");
    }

    /**
     * (Optional) E-Mail addresses to notify. Either this or `subscriber_sns_topic_arns` is required.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> subscriberEmailAddresses;

    public @Nullable List<String> subscriberEmailAddresses() {
        if (subscriberEmailAddresses == null) return null;
        return subscriberEmailAddresses.getValue("BudgetNotification.subscriberEmailAddresses");
    }

    /**
     * (Optional) SNS topics to notify. Either this or `subscriber_email_addresses` is required.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> subscriberSnsTopicArns;

    public @Nullable List<String> subscriberSnsTopicArns() {
        if (subscriberSnsTopicArns == null) return null;
        return subscriberSnsTopicArns.getValue("BudgetNotification.subscriberSnsTopicArns");
    }

    /**
     * (Required) Threshold when the notification should be sent.
     * 
     */
    private UndeferrableValue<Double> threshold;

    public Double threshold() {
        if (threshold == null) return null;
        return threshold.getValue("BudgetNotification.threshold");
    }

    /**
     * (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
     * 
     */
    private UndeferrableValue<String> thresholdType;

    public String thresholdType() {
        if (thresholdType == null) return null;
        return thresholdType.getValue("BudgetNotification.thresholdType");
    }

}
