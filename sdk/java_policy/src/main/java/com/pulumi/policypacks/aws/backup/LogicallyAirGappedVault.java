// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.backup;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.backup.outputs.LogicallyAirGappedVaultTimeouts;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:backup/logicallyAirGappedVault:LogicallyAirGappedVault")
public final class LogicallyAirGappedVault extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the Logically Air Gapped Backup Vault.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.arn' is not present");
    }

    /**
     * Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
     * 
     */
    @PolicyResourceProperty(name="maxRetentionDays", flag="unknown_maxRetentionDays")
    private Integer value_maxRetentionDays;
    private boolean unknown_maxRetentionDays;
    public Integer maxRetentionDays() {
        if (!unknown_maxRetentionDays) return value_maxRetentionDays;
        throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.maxRetentionDays' is not present");
    }

    /**
     * Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
     * 
     */
    @PolicyResourceProperty(name="minRetentionDays", flag="unknown_minRetentionDays")
    private Integer value_minRetentionDays;
    private boolean unknown_minRetentionDays;
    public Integer minRetentionDays() {
        if (!unknown_minRetentionDays) return value_minRetentionDays;
        throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.minRetentionDays' is not present");
    }

    /**
     * Name of the Logically Air Gapped Backup Vault to create.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.name' is not present");
    }

    /**
     * Metadata that you can assign to help organize the resources that you create. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable LogicallyAirGappedVaultTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable LogicallyAirGappedVaultTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'LogicallyAirGappedVault.timeouts' is not present");
    }

}
