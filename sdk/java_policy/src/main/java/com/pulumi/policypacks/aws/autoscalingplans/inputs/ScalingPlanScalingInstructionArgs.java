// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscalingplans.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.autoscalingplans.inputs.ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs;
import com.pulumi.policypacks.aws.autoscalingplans.inputs.ScalingPlanScalingInstructionPredefinedLoadMetricSpecificationArgs;
import com.pulumi.policypacks.aws.autoscalingplans.inputs.ScalingPlanScalingInstructionTargetTrackingConfigurationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class ScalingPlanScalingInstructionArgs {

    /**
     * Customized load metric to use for predictive scaling. You must specify either `customized_load_metric_specification` or `predefined_load_metric_specification` when configuring predictive scaling.
     * More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_CustomizedLoadMetricSpecification.html).
     * 
     */
    @PolicyResourceProperty(name="customizedLoadMetricSpecification", flag="unknown_customizedLoadMetricSpecification")
    private ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs value_customizedLoadMetricSpecification;
    private boolean unknown_customizedLoadMetricSpecification;
    public ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs customizedLoadMetricSpecification() {
        if (!unknown_customizedLoadMetricSpecification) return value_customizedLoadMetricSpecification;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.customizedLoadMetricSpecification' is not present");
    }

    /**
     * Boolean controlling whether dynamic scaling by AWS Auto Scaling is disabled. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="disableDynamicScaling", flag="unknown_disableDynamicScaling")
    private Boolean value_disableDynamicScaling;
    private boolean unknown_disableDynamicScaling;
    public Boolean disableDynamicScaling() {
        if (!unknown_disableDynamicScaling) return value_disableDynamicScaling;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.disableDynamicScaling' is not present");
    }

    /**
     * Maximum capacity of the resource. The exception to this upper limit is if you specify a non-default setting for `predictive_scaling_max_capacity_behavior`.
     * 
     */
    @PolicyResourceProperty(name="maxCapacity", flag="unknown_maxCapacity")
    private Integer value_maxCapacity;
    private boolean unknown_maxCapacity;
    public Integer maxCapacity() {
        if (!unknown_maxCapacity) return value_maxCapacity;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.maxCapacity' is not present");
    }

    /**
     * Minimum capacity of the resource.
     * 
     */
    @PolicyResourceProperty(name="minCapacity", flag="unknown_minCapacity")
    private Integer value_minCapacity;
    private boolean unknown_minCapacity;
    public Integer minCapacity() {
        if (!unknown_minCapacity) return value_minCapacity;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.minCapacity' is not present");
    }

    /**
     * Predefined load metric to use for predictive scaling. You must specify either `predefined_load_metric_specification` or `customized_load_metric_specification` when configuring predictive scaling.
     * More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_PredefinedLoadMetricSpecification.html).
     * 
     */
    @PolicyResourceProperty(name="predefinedLoadMetricSpecification", flag="unknown_predefinedLoadMetricSpecification")
    private ScalingPlanScalingInstructionPredefinedLoadMetricSpecificationArgs value_predefinedLoadMetricSpecification;
    private boolean unknown_predefinedLoadMetricSpecification;
    public ScalingPlanScalingInstructionPredefinedLoadMetricSpecificationArgs predefinedLoadMetricSpecification() {
        if (!unknown_predefinedLoadMetricSpecification) return value_predefinedLoadMetricSpecification;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.predefinedLoadMetricSpecification' is not present");
    }

    /**
     * Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource.
     * Valid values: `SetForecastCapacityToMaxCapacity`, `SetMaxCapacityAboveForecastCapacity`, `SetMaxCapacityToForecastCapacity`.
     * 
     */
    @PolicyResourceProperty(name="predictiveScalingMaxCapacityBehavior", flag="unknown_predictiveScalingMaxCapacityBehavior")
    private String value_predictiveScalingMaxCapacityBehavior;
    private boolean unknown_predictiveScalingMaxCapacityBehavior;
    public String predictiveScalingMaxCapacityBehavior() {
        if (!unknown_predictiveScalingMaxCapacityBehavior) return value_predictiveScalingMaxCapacityBehavior;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.predictiveScalingMaxCapacityBehavior' is not present");
    }

    /**
     * Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity.
     * 
     */
    @PolicyResourceProperty(name="predictiveScalingMaxCapacityBuffer", flag="unknown_predictiveScalingMaxCapacityBuffer")
    private Integer value_predictiveScalingMaxCapacityBuffer;
    private boolean unknown_predictiveScalingMaxCapacityBuffer;
    public Integer predictiveScalingMaxCapacityBuffer() {
        if (!unknown_predictiveScalingMaxCapacityBuffer) return value_predictiveScalingMaxCapacityBuffer;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.predictiveScalingMaxCapacityBuffer' is not present");
    }

    /**
     * Predictive scaling mode. Valid values: `ForecastAndScale`, `ForecastOnly`.
     * 
     */
    @PolicyResourceProperty(name="predictiveScalingMode", flag="unknown_predictiveScalingMode")
    private String value_predictiveScalingMode;
    private boolean unknown_predictiveScalingMode;
    public String predictiveScalingMode() {
        if (!unknown_predictiveScalingMode) return value_predictiveScalingMode;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.predictiveScalingMode' is not present");
    }

    /**
     * ID of the resource. This string consists of the resource type and unique identifier.
     * 
     */
    @PolicyResourceProperty(name="resourceId", flag="unknown_resourceId")
    private String value_resourceId;
    private boolean unknown_resourceId;
    public String resourceId() {
        if (!unknown_resourceId) return value_resourceId;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.resourceId' is not present");
    }

    /**
     * Scalable dimension associated with the resource. Valid values: `autoscaling:autoScalingGroup:DesiredCapacity`, `dynamodb:index:ReadCapacityUnits`, `dynamodb:index:WriteCapacityUnits`, `dynamodb:table:ReadCapacityUnits`, `dynamodb:table:WriteCapacityUnits`, `ecs:service:DesiredCount`, `ec2:spot-fleet-request:TargetCapacity`, `rds:cluster:ReadReplicaCount`.
     * 
     */
    @PolicyResourceProperty(name="scalableDimension", flag="unknown_scalableDimension")
    private String value_scalableDimension;
    private boolean unknown_scalableDimension;
    public String scalableDimension() {
        if (!unknown_scalableDimension) return value_scalableDimension;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.scalableDimension' is not present");
    }

    /**
     * Controls whether a resource&#39;s externally created scaling policies are kept or replaced. Valid values: `KeepExternalPolicies`, `ReplaceExternalPolicies`. Defaults to `KeepExternalPolicies`.
     * 
     */
    @PolicyResourceProperty(name="scalingPolicyUpdateBehavior", flag="unknown_scalingPolicyUpdateBehavior")
    private String value_scalingPolicyUpdateBehavior;
    private boolean unknown_scalingPolicyUpdateBehavior;
    public String scalingPolicyUpdateBehavior() {
        if (!unknown_scalingPolicyUpdateBehavior) return value_scalingPolicyUpdateBehavior;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.scalingPolicyUpdateBehavior' is not present");
    }

    /**
     * Amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out.
     * 
     */
    @PolicyResourceProperty(name="scheduledActionBufferTime", flag="unknown_scheduledActionBufferTime")
    private Integer value_scheduledActionBufferTime;
    private boolean unknown_scheduledActionBufferTime;
    public Integer scheduledActionBufferTime() {
        if (!unknown_scheduledActionBufferTime) return value_scheduledActionBufferTime;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.scheduledActionBufferTime' is not present");
    }

    /**
     * Namespace of the AWS service. Valid values: `autoscaling`, `dynamodb`, `ecs`, `ec2`, `rds`.
     * 
     */
    @PolicyResourceProperty(name="serviceNamespace", flag="unknown_serviceNamespace")
    private String value_serviceNamespace;
    private boolean unknown_serviceNamespace;
    public String serviceNamespace() {
        if (!unknown_serviceNamespace) return value_serviceNamespace;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.serviceNamespace' is not present");
    }

    /**
     * Structure that defines new target tracking configurations. Each of these structures includes a specific scaling metric and a target value for the metric, along with various parameters to use with dynamic scaling.
     * More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_TargetTrackingConfiguration.html).
     * 
     */
    @PolicyResourceProperty(name="targetTrackingConfigurations", flag="unknown_targetTrackingConfigurations")
    private List<ScalingPlanScalingInstructionTargetTrackingConfigurationArgs> value_targetTrackingConfigurations;
    private boolean unknown_targetTrackingConfigurations;
    public List<ScalingPlanScalingInstructionTargetTrackingConfigurationArgs> targetTrackingConfigurations() {
        if (!unknown_targetTrackingConfigurations) return value_targetTrackingConfigurations;
        throw new UndeferrableValueException("Value 'ScalingPlanScalingInstructionArgs.targetTrackingConfigurations' is not present");
    }

}
