// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.m2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.m2.outputs.ApplicationDefinition;
import com.pulumi.policypacks.aws.m2.outputs.ApplicationTimeouts;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:m2/application:Application")
public final class Application extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Id of the Application.
     * 
     */
    private UndeferrableValue<String> applicationId;

    public String applicationId() {
        if (applicationId == null) return null;
        return applicationId.getValue("Application.applicationId");
    }

    /**
     * ARN of the Application.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Application.arn");
    }

    /**
     * Current version of the application deployed.
     * 
     */
    private UndeferrableValue<Integer> currentVersion;

    public Integer currentVersion() {
        if (currentVersion == null) return null;
        return currentVersion.getValue("Application.currentVersion");
    }

    /**
     * The application definition for this application. You can specify either inline JSON or an S3 bucket location.
     * 
     */
    private @Nullable UndeferrableValue<ApplicationDefinition> definition;

    public @Nullable ApplicationDefinition definition() {
        if (definition == null) return null;
        return definition.getValue("Application.definition");
    }

    /**
     * Description of the application.
     * 
     */
    private @Nullable UndeferrableValue<String> description;

    public @Nullable String description() {
        if (description == null) return null;
        return description.getValue("Application.description");
    }

    /**
     * Engine type must be `microfocus | bluage`.
     * 
     */
    private UndeferrableValue<String> engineType;

    public String engineType() {
        if (engineType == null) return null;
        return engineType.getValue("Application.engineType");
    }

    /**
     * KMS Key to use for the Application.
     * 
     */
    private @Nullable UndeferrableValue<String> kmsKeyId;

    public @Nullable String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("Application.kmsKeyId");
    }

    /**
     * Unique identifier of the application.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("Application.name");
    }

    /**
     * ARN of role for application to use to access AWS resources.
     * 
     */
    private @Nullable UndeferrableValue<String> roleArn;

    public @Nullable String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("Application.roleArn");
    }

    /**
     * Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Application.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Application.tagsAll");
    }

    private @Nullable UndeferrableValue<ApplicationTimeouts> timeouts;

    public @Nullable ApplicationTimeouts timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("Application.timeouts");
    }

}
