// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleExpiration;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleFilter;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleTransition;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class BucketLifecycleConfigurationV2Rule {

    /**
     * Configuration block that specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. See below.
     * 
     */
    @PolicyResourceProperty(name="abortIncompleteMultipartUpload", flag="unknown_abortIncompleteMultipartUpload")
    private @Nullable BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload value_abortIncompleteMultipartUpload;
    private boolean unknown_abortIncompleteMultipartUpload;
    public @Nullable BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload abortIncompleteMultipartUpload() {
        if (!unknown_abortIncompleteMultipartUpload) return value_abortIncompleteMultipartUpload;
        throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2Rule.abortIncompleteMultipartUpload' is not present");
    }

    /**
     * Configuration block that specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker. See below.
     * 
     */
    @PolicyResourceProperty(name="expiration", flag="unknown_expiration")
    private @Nullable BucketLifecycleConfigurationV2RuleExpiration value_expiration;
    private boolean unknown_expiration;
    public @Nullable BucketLifecycleConfigurationV2RuleExpiration expiration() {
        if (!unknown_expiration) return value_expiration;
        throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2Rule.expiration' is not present");
    }

    /**
     * Configuration block used to identify objects that a Lifecycle Rule applies to.
     * See below.
     * If not specified, the `rule` will default to using `prefix`.
     * One of `filter` or `prefix` should be specified.
     * 
     */
    @PolicyResourceProperty(name="filter", flag="unknown_filter")
    private @Nullable BucketLifecycleConfigurationV2RuleFilter value_filter;
    private boolean unknown_filter;
    public @Nullable BucketLifecycleConfigurationV2RuleFilter filter() {
        if (!unknown_filter) return value_filter;
        throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2Rule.filter' is not present");
    }

    /**
     * Unique identifier for the rule. The value cannot be longer than 255 characters.
     * 
     */
    @PolicyResourceProperty(name="id", flag="unknown_id")
    private String value_id;
    private boolean unknown_id;
    public String id() {
        if (!unknown_id) return value_id;
        throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2Rule.id' is not present");
    }

    /**
     * Configuration block that specifies when noncurrent object versions expire. See below.
     * 
     */
    @PolicyResourceProperty(name="noncurrentVersionExpiration", flag="unknown_noncurrentVersionExpiration")
    private @Nullable BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration value_noncurrentVersionExpiration;
    private boolean unknown_noncurrentVersionExpiration;
    public @Nullable BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration noncurrentVersionExpiration() {
        if (!unknown_noncurrentVersionExpiration) return value_noncurrentVersionExpiration;
        throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2Rule.noncurrentVersionExpiration' is not present");
    }

    /**
     * Set of configuration blocks that specify the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. See below.
     * 
     */
    @PolicyResourceProperty(name="noncurrentVersionTransitions", flag="unknown_noncurrentVersionTransitions")
    private @Nullable List<BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition> value_noncurrentVersionTransitions;
    private boolean unknown_noncurrentVersionTransitions;
    public @Nullable List<BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition> noncurrentVersionTransitions() {
        if (!unknown_noncurrentVersionTransitions) return value_noncurrentVersionTransitions;
        throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2Rule.noncurrentVersionTransitions' is not present");
    }

    /**
     * **DEPRECATED** Use `filter` instead.
     * This has been deprecated by Amazon S3.
     * Prefix identifying one or more objects to which the rule applies.
     * Defaults to an empty string (`&#34;&#34;`) if `filter` is not specified.
     * One of `prefix` or `filter` should be specified.
     * 
     * @deprecated
     * Specify a prefix using &#39;filter&#39; instead
     * 
     */
    @Deprecated /* Specify a prefix using 'filter' instead */
    @PolicyResourceProperty(name="prefix", flag="unknown_prefix")
    private @Nullable String value_prefix;
    private boolean unknown_prefix;
    public @Nullable String prefix() {
        if (!unknown_prefix) return value_prefix;
        throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2Rule.prefix' is not present");
    }

    /**
     * Whether the rule is currently being applied. Valid values: `Enabled` or `Disabled`.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2Rule.status' is not present");
    }

    /**
     * Set of configuration blocks that specify when an Amazon S3 object transitions to a specified storage class. See below.
     * 
     */
    @PolicyResourceProperty(name="transitions", flag="unknown_transitions")
    private @Nullable List<BucketLifecycleConfigurationV2RuleTransition> value_transitions;
    private boolean unknown_transitions;
    public @Nullable List<BucketLifecycleConfigurationV2RuleTransition> transitions() {
        if (!unknown_transitions) return value_transitions;
        throw new UndeferrableValueException("Value 'BucketLifecycleConfigurationV2Rule.transitions' is not present");
    }

}
