// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleExpiration;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleFilter;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition;
import com.pulumi.policypacks.aws.s3.outputs.BucketLifecycleConfigurationV2RuleTransition;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class BucketLifecycleConfigurationV2Rule {

    /**
     * Configuration block that specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. See below.
     * 
     */
    private @Nullable UndeferrableValue<BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload> abortIncompleteMultipartUpload;

    public @Nullable BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload abortIncompleteMultipartUpload() {
        if (abortIncompleteMultipartUpload == null) return null;
        return abortIncompleteMultipartUpload.getValue("BucketLifecycleConfigurationV2Rule.abortIncompleteMultipartUpload");
    }

    /**
     * Configuration block that specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker. See below.
     * 
     */
    private @Nullable UndeferrableValue<BucketLifecycleConfigurationV2RuleExpiration> expiration;

    public @Nullable BucketLifecycleConfigurationV2RuleExpiration expiration() {
        if (expiration == null) return null;
        return expiration.getValue("BucketLifecycleConfigurationV2Rule.expiration");
    }

    /**
     * Configuration block used to identify objects that a Lifecycle Rule applies to.
     * See below.
     * If not specified, the `rule` will default to using `prefix`.
     * One of `filter` or `prefix` should be specified.
     * 
     */
    private @Nullable UndeferrableValue<BucketLifecycleConfigurationV2RuleFilter> filter;

    public @Nullable BucketLifecycleConfigurationV2RuleFilter filter() {
        if (filter == null) return null;
        return filter.getValue("BucketLifecycleConfigurationV2Rule.filter");
    }

    /**
     * Unique identifier for the rule. The value cannot be longer than 255 characters.
     * 
     */
    private UndeferrableValue<String> id;

    public String id() {
        if (id == null) return null;
        return id.getValue("BucketLifecycleConfigurationV2Rule.id");
    }

    /**
     * Configuration block that specifies when noncurrent object versions expire. See below.
     * 
     */
    private @Nullable UndeferrableValue<BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration> noncurrentVersionExpiration;

    public @Nullable BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration noncurrentVersionExpiration() {
        if (noncurrentVersionExpiration == null) return null;
        return noncurrentVersionExpiration.getValue("BucketLifecycleConfigurationV2Rule.noncurrentVersionExpiration");
    }

    /**
     * Set of configuration blocks that specify the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. See below.
     * 
     */
    private @Nullable UndeferrableValue<List<BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition>> noncurrentVersionTransitions;

    public @Nullable List<BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition> noncurrentVersionTransitions() {
        if (noncurrentVersionTransitions == null) return null;
        return noncurrentVersionTransitions.getValue("BucketLifecycleConfigurationV2Rule.noncurrentVersionTransitions");
    }

    /**
     * **DEPRECATED** Use `filter` instead.
     * This has been deprecated by Amazon S3.
     * Prefix identifying one or more objects to which the rule applies.
     * Defaults to an empty string (`&#34;&#34;`) if `filter` is not specified.
     * One of `prefix` or `filter` should be specified.
     * 
     * @deprecated
     * Specify a prefix using &#39;filter&#39; instead
     * 
     */
    @Deprecated /* Specify a prefix using 'filter' instead */
    private @Nullable UndeferrableValue<String> prefix;

    public @Nullable String prefix() {
        if (prefix == null) return null;
        return prefix.getValue("BucketLifecycleConfigurationV2Rule.prefix");
    }

    /**
     * Whether the rule is currently being applied. Valid values: `Enabled` or `Disabled`.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("BucketLifecycleConfigurationV2Rule.status");
    }

    /**
     * Set of configuration blocks that specify when an Amazon S3 object transitions to a specified storage class. See below.
     * 
     */
    private @Nullable UndeferrableValue<List<BucketLifecycleConfigurationV2RuleTransition>> transitions;

    public @Nullable List<BucketLifecycleConfigurationV2RuleTransition> transitions() {
        if (transitions == null) return null;
        return transitions.getValue("BucketLifecycleConfigurationV2Rule.transitions");
    }

}
