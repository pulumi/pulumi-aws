// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cur;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cur/reportDefinition:ReportDefinition")
public final class ReportDefinition extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * A list of additional artifacts. Valid values are: `REDSHIFT`, `QUICKSIGHT`, `ATHENA`. When ATHENA exists within additional_artifacts, no other artifact type can be declared and report_versioning must be `OVERWRITE_REPORT`.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> additionalArtifacts;

    public @Nullable List<String> additionalArtifacts() {
        if (additionalArtifacts == null) return null;
        return additionalArtifacts.getValue("ReportDefinition.additionalArtifacts");
    }

    /**
     * A list of schema elements. Valid values are: `RESOURCES`, `SPLIT_COST_ALLOCATION_DATA`.
     * 
     */
    private UndeferrableValue<List<String>> additionalSchemaElements;

    public List<String> additionalSchemaElements() {
        if (additionalSchemaElements == null) return null;
        return additionalSchemaElements.getValue("ReportDefinition.additionalSchemaElements");
    }

    /**
     * The Amazon Resource Name (ARN) specifying the cur report.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("ReportDefinition.arn");
    }

    /**
     * Compression format for report. Valid values are: `GZIP`, `ZIP`, `Parquet`. If `Parquet` is used, then format must also be `Parquet`.
     * 
     */
    private UndeferrableValue<String> compression;

    public String compression() {
        if (compression == null) return null;
        return compression.getValue("ReportDefinition.compression");
    }

    /**
     * Format for report. Valid values are: `textORcsv`, `Parquet`. If `Parquet` is used, then Compression must also be `Parquet`.
     * 
     */
    private UndeferrableValue<String> format;

    public String format() {
        if (format == null) return null;
        return format.getValue("ReportDefinition.format");
    }

    /**
     * Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> refreshClosedReports;

    public @Nullable Boolean refreshClosedReports() {
        if (refreshClosedReports == null) return null;
        return refreshClosedReports.getValue("ReportDefinition.refreshClosedReports");
    }

    /**
     * Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
     * 
     */
    private UndeferrableValue<String> reportName;

    public String reportName() {
        if (reportName == null) return null;
        return reportName.getValue("ReportDefinition.reportName");
    }

    /**
     * Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: `CREATE_NEW_REPORT` and `OVERWRITE_REPORT`.
     * 
     */
    private @Nullable UndeferrableValue<String> reportVersioning;

    public @Nullable String reportVersioning() {
        if (reportVersioning == null) return null;
        return reportVersioning.getValue("ReportDefinition.reportVersioning");
    }

    /**
     * Name of the existing S3 bucket to hold generated reports.
     * 
     */
    private UndeferrableValue<String> s3Bucket;

    public String s3Bucket() {
        if (s3Bucket == null) return null;
        return s3Bucket.getValue("ReportDefinition.s3Bucket");
    }

    /**
     * Report path prefix. Limited to 256 characters.
     * 
     */
    private @Nullable UndeferrableValue<String> s3Prefix;

    public @Nullable String s3Prefix() {
        if (s3Prefix == null) return null;
        return s3Prefix.getValue("ReportDefinition.s3Prefix");
    }

    /**
     * Region of the existing S3 bucket to hold generated reports.
     * 
     */
    private UndeferrableValue<String> s3Region;

    public String s3Region() {
        if (s3Region == null) return null;
        return s3Region.getValue("ReportDefinition.s3Region");
    }

    /**
     * Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ReportDefinition.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("ReportDefinition.tagsAll");
    }

    /**
     * The frequency on which report data are measured and displayed.  Valid values are: `DAILY`, `HOURLY`, `MONTHLY`.
     * 
     */
    private UndeferrableValue<String> timeUnit;

    public String timeUnit() {
        if (timeUnit == null) return null;
        return timeUnit.getValue("ReportDefinition.timeUnit");
    }

}
