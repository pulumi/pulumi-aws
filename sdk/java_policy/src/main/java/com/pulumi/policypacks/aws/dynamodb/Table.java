// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dynamodb;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.dynamodb.outputs.TableAttribute;
import com.pulumi.policypacks.aws.dynamodb.outputs.TableGlobalSecondaryIndex;
import com.pulumi.policypacks.aws.dynamodb.outputs.TableImportTable;
import com.pulumi.policypacks.aws.dynamodb.outputs.TableLocalSecondaryIndex;
import com.pulumi.policypacks.aws.dynamodb.outputs.TableOnDemandThroughput;
import com.pulumi.policypacks.aws.dynamodb.outputs.TablePointInTimeRecovery;
import com.pulumi.policypacks.aws.dynamodb.outputs.TableReplica;
import com.pulumi.policypacks.aws.dynamodb.outputs.TableServerSideEncryption;
import com.pulumi.policypacks.aws.dynamodb.outputs.TableTtl;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:dynamodb/table:Table")
public final class Table extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the table
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Table.arn' is not present");
    }

    /**
     * Set of nested attribute definitions. Only required for `hash_key` and `range_key` attributes. See below.
     * 
     */
    @PolicyResourceProperty(name="attributes", flag="unknown_attributes")
    private List<TableAttribute> value_attributes;
    private boolean unknown_attributes;
    public List<TableAttribute> attributes() {
        if (!unknown_attributes) return value_attributes;
        throw new UndeferrableValueException("Value 'Table.attributes' is not present");
    }

    /**
     * Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
     * 
     */
    @PolicyResourceProperty(name="billingMode", flag="unknown_billingMode")
    private @Nullable String value_billingMode;
    private boolean unknown_billingMode;
    public @Nullable String billingMode() {
        if (!unknown_billingMode) return value_billingMode;
        throw new UndeferrableValueException("Value 'Table.billingMode' is not present");
    }

    /**
     * Enables deletion protection for table. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="deletionProtectionEnabled", flag="unknown_deletionProtectionEnabled")
    private @Nullable Boolean value_deletionProtectionEnabled;
    private boolean unknown_deletionProtectionEnabled;
    public @Nullable Boolean deletionProtectionEnabled() {
        if (!unknown_deletionProtectionEnabled) return value_deletionProtectionEnabled;
        throw new UndeferrableValueException("Value 'Table.deletionProtectionEnabled' is not present");
    }

    /**
     * Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc. See below.
     * 
     */
    @PolicyResourceProperty(name="globalSecondaryIndexes", flag="unknown_globalSecondaryIndexes")
    private @Nullable List<TableGlobalSecondaryIndex> value_globalSecondaryIndexes;
    private boolean unknown_globalSecondaryIndexes;
    public @Nullable List<TableGlobalSecondaryIndex> globalSecondaryIndexes() {
        if (!unknown_globalSecondaryIndexes) return value_globalSecondaryIndexes;
        throw new UndeferrableValueException("Value 'Table.globalSecondaryIndexes' is not present");
    }

    /**
     * Attribute to use as the hash (partition) key. Must also be defined as an `attribute`. See below.
     * 
     */
    @PolicyResourceProperty(name="hashKey", flag="unknown_hashKey")
    private String value_hashKey;
    private boolean unknown_hashKey;
    public String hashKey() {
        if (!unknown_hashKey) return value_hashKey;
        throw new UndeferrableValueException("Value 'Table.hashKey' is not present");
    }

    /**
     * Import Amazon S3 data into a new table. See below.
     * 
     */
    @PolicyResourceProperty(name="importTable", flag="unknown_importTable")
    private @Nullable TableImportTable value_importTable;
    private boolean unknown_importTable;
    public @Nullable TableImportTable importTable() {
        if (!unknown_importTable) return value_importTable;
        throw new UndeferrableValueException("Value 'Table.importTable' is not present");
    }

    /**
     * Describe an LSI on the table; these can only be allocated _at creation_ so you cannot change this definition after you have created the resource. See below.
     * 
     */
    @PolicyResourceProperty(name="localSecondaryIndexes", flag="unknown_localSecondaryIndexes")
    private @Nullable List<TableLocalSecondaryIndex> value_localSecondaryIndexes;
    private boolean unknown_localSecondaryIndexes;
    public @Nullable List<TableLocalSecondaryIndex> localSecondaryIndexes() {
        if (!unknown_localSecondaryIndexes) return value_localSecondaryIndexes;
        throw new UndeferrableValueException("Value 'Table.localSecondaryIndexes' is not present");
    }

    /**
     * Unique within a region name of the table.
     * 
     * Optional arguments:
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Table.name' is not present");
    }

    /**
     * Sets the maximum number of read and write units for the specified on-demand table. See below.
     * 
     */
    @PolicyResourceProperty(name="onDemandThroughput", flag="unknown_onDemandThroughput")
    private @Nullable TableOnDemandThroughput value_onDemandThroughput;
    private boolean unknown_onDemandThroughput;
    public @Nullable TableOnDemandThroughput onDemandThroughput() {
        if (!unknown_onDemandThroughput) return value_onDemandThroughput;
        throw new UndeferrableValueException("Value 'Table.onDemandThroughput' is not present");
    }

    /**
     * Enable point-in-time recovery options. See below.
     * 
     */
    @PolicyResourceProperty(name="pointInTimeRecovery", flag="unknown_pointInTimeRecovery")
    private TablePointInTimeRecovery value_pointInTimeRecovery;
    private boolean unknown_pointInTimeRecovery;
    public TablePointInTimeRecovery pointInTimeRecovery() {
        if (!unknown_pointInTimeRecovery) return value_pointInTimeRecovery;
        throw new UndeferrableValueException("Value 'Table.pointInTimeRecovery' is not present");
    }

    /**
     * Attribute to use as the range (sort) key. Must also be defined as an `attribute`, see below.
     * 
     */
    @PolicyResourceProperty(name="rangeKey", flag="unknown_rangeKey")
    private @Nullable String value_rangeKey;
    private boolean unknown_rangeKey;
    public @Nullable String rangeKey() {
        if (!unknown_rangeKey) return value_rangeKey;
        throw new UndeferrableValueException("Value 'Table.rangeKey' is not present");
    }

    /**
     * Number of read units for this table. If the `billing_mode` is `PROVISIONED`, this field is required.
     * 
     */
    @PolicyResourceProperty(name="readCapacity", flag="unknown_readCapacity")
    private Integer value_readCapacity;
    private boolean unknown_readCapacity;
    public Integer readCapacity() {
        if (!unknown_readCapacity) return value_readCapacity;
        throw new UndeferrableValueException("Value 'Table.readCapacity' is not present");
    }

    /**
     * Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. See below.
     * 
     */
    @PolicyResourceProperty(name="replicas", flag="unknown_replicas")
    private @Nullable List<TableReplica> value_replicas;
    private boolean unknown_replicas;
    public @Nullable List<TableReplica> replicas() {
        if (!unknown_replicas) return value_replicas;
        throw new UndeferrableValueException("Value 'Table.replicas' is not present");
    }

    /**
     * Time of the point-in-time recovery point to restore.
     * 
     */
    @PolicyResourceProperty(name="restoreDateTime", flag="unknown_restoreDateTime")
    private @Nullable String value_restoreDateTime;
    private boolean unknown_restoreDateTime;
    public @Nullable String restoreDateTime() {
        if (!unknown_restoreDateTime) return value_restoreDateTime;
        throw new UndeferrableValueException("Value 'Table.restoreDateTime' is not present");
    }

    /**
     * Name of the table to restore. Must match the name of an existing table.
     * 
     */
    @PolicyResourceProperty(name="restoreSourceName", flag="unknown_restoreSourceName")
    private @Nullable String value_restoreSourceName;
    private boolean unknown_restoreSourceName;
    public @Nullable String restoreSourceName() {
        if (!unknown_restoreSourceName) return value_restoreSourceName;
        throw new UndeferrableValueException("Value 'Table.restoreSourceName' is not present");
    }

    /**
     * ARN of the source table to restore. Must be supplied for cross-region restores.
     * 
     */
    @PolicyResourceProperty(name="restoreSourceTableArn", flag="unknown_restoreSourceTableArn")
    private @Nullable String value_restoreSourceTableArn;
    private boolean unknown_restoreSourceTableArn;
    public @Nullable String restoreSourceTableArn() {
        if (!unknown_restoreSourceTableArn) return value_restoreSourceTableArn;
        throw new UndeferrableValueException("Value 'Table.restoreSourceTableArn' is not present");
    }

    /**
     * If set, restores table to the most recent point-in-time recovery point.
     * 
     */
    @PolicyResourceProperty(name="restoreToLatestTime", flag="unknown_restoreToLatestTime")
    private @Nullable Boolean value_restoreToLatestTime;
    private boolean unknown_restoreToLatestTime;
    public @Nullable Boolean restoreToLatestTime() {
        if (!unknown_restoreToLatestTime) return value_restoreToLatestTime;
        throw new UndeferrableValueException("Value 'Table.restoreToLatestTime' is not present");
    }

    /**
     * Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS-owned Customer Master Key if this argument isn&#39;t specified. Must be supplied for cross-region restores. See below.
     * 
     */
    @PolicyResourceProperty(name="serverSideEncryption", flag="unknown_serverSideEncryption")
    private TableServerSideEncryption value_serverSideEncryption;
    private boolean unknown_serverSideEncryption;
    public TableServerSideEncryption serverSideEncryption() {
        if (!unknown_serverSideEncryption) return value_serverSideEncryption;
        throw new UndeferrableValueException("Value 'Table.serverSideEncryption' is not present");
    }

    /**
     * ARN of the Table Stream. Only available when `stream_enabled = true`
     * 
     */
    @PolicyResourceProperty(name="streamArn", flag="unknown_streamArn")
    private String value_streamArn;
    private boolean unknown_streamArn;
    public String streamArn() {
        if (!unknown_streamArn) return value_streamArn;
        throw new UndeferrableValueException("Value 'Table.streamArn' is not present");
    }

    /**
     * Whether Streams are enabled.
     * 
     */
    @PolicyResourceProperty(name="streamEnabled", flag="unknown_streamEnabled")
    private @Nullable Boolean value_streamEnabled;
    private boolean unknown_streamEnabled;
    public @Nullable Boolean streamEnabled() {
        if (!unknown_streamEnabled) return value_streamEnabled;
        throw new UndeferrableValueException("Value 'Table.streamEnabled' is not present");
    }

    /**
     * Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `stream_enabled = true`.
     * 
     */
    @PolicyResourceProperty(name="streamLabel", flag="unknown_streamLabel")
    private String value_streamLabel;
    private boolean unknown_streamLabel;
    public String streamLabel() {
        if (!unknown_streamLabel) return value_streamLabel;
        throw new UndeferrableValueException("Value 'Table.streamLabel' is not present");
    }

    /**
     * When an item in the table is modified, StreamViewType determines what information is written to the table&#39;s stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
     * 
     */
    @PolicyResourceProperty(name="streamViewType", flag="unknown_streamViewType")
    private String value_streamViewType;
    private boolean unknown_streamViewType;
    public String streamViewType() {
        if (!unknown_streamViewType) return value_streamViewType;
        throw new UndeferrableValueException("Value 'Table.streamViewType' is not present");
    }

    /**
     * Storage class of the table.
     * Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
     * Default value is `STANDARD`.
     * 
     */
    @PolicyResourceProperty(name="tableClass", flag="unknown_tableClass")
    private @Nullable String value_tableClass;
    private boolean unknown_tableClass;
    public @Nullable String tableClass() {
        if (!unknown_tableClass) return value_tableClass;
        throw new UndeferrableValueException("Value 'Table.tableClass' is not present");
    }

    /**
     * A map of tags to populate on the created table. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Table.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Table.tagsAll' is not present");
    }

    /**
     * Configuration block for TTL. See below.
     * 
     */
    @PolicyResourceProperty(name="ttl", flag="unknown_ttl")
    private TableTtl value_ttl;
    private boolean unknown_ttl;
    public TableTtl ttl() {
        if (!unknown_ttl) return value_ttl;
        throw new UndeferrableValueException("Value 'Table.ttl' is not present");
    }

    /**
     * Number of write units for this table. If the `billing_mode` is `PROVISIONED`, this field is required.
     * 
     */
    @PolicyResourceProperty(name="writeCapacity", flag="unknown_writeCapacity")
    private Integer value_writeCapacity;
    private boolean unknown_writeCapacity;
    public Integer writeCapacity() {
        if (!unknown_writeCapacity) return value_writeCapacity;
        throw new UndeferrableValueException("Value 'Table.writeCapacity' is not present");
    }

}
