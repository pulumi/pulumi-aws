// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.transfer;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:transfer/certificate:Certificate")
public final class CertificateArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The valid certificate file required for the transfer.
     * 
     */
    private UndeferrableValue<String> certificate;

    public String certificate() {
        if (certificate == null) return null;
        return certificate.getValue("CertificateArgs.certificate");
    }

    /**
     * The optional list of certificate that make up the chain for the certificate that is being imported.
     * 
     */
    private UndeferrableValue<String> certificateChain;

    public String certificateChain() {
        if (certificateChain == null) return null;
        return certificateChain.getValue("CertificateArgs.certificateChain");
    }

    /**
     * A short description that helps identify the certificate.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("CertificateArgs.description");
    }

    /**
     * The private key associated with the certificate being imported.
     * 
     */
    private UndeferrableValue<String> privateKey;

    public String privateKey() {
        if (privateKey == null) return null;
        return privateKey.getValue("CertificateArgs.privateKey");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("CertificateArgs.tags");
    }

    /**
     * Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
     * 
     */
    private UndeferrableValue<String> usage;

    public String usage() {
        if (usage == null) return null;
        return usage.getValue("CertificateArgs.usage");
    }

}
