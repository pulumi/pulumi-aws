// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.licensemanager;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:licensemanager/licenseConfiguration:LicenseConfiguration")
public final class LicenseConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The license configuration ARN.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'LicenseConfiguration.arn' is not present");
    }

    /**
     * Description of the license configuration.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'LicenseConfiguration.description' is not present");
    }

    /**
     * Number of licenses managed by the license configuration.
     * 
     */
    @PolicyResourceProperty(name="licenseCount", flag="unknown_licenseCount")
    private @Nullable Integer value_licenseCount;
    private boolean unknown_licenseCount;
    public @Nullable Integer licenseCount() {
        if (!unknown_licenseCount) return value_licenseCount;
        throw new UndeferrableValueException("Value 'LicenseConfiguration.licenseCount' is not present");
    }

    /**
     * Sets the number of available licenses as a hard limit.
     * 
     */
    @PolicyResourceProperty(name="licenseCountHardLimit", flag="unknown_licenseCountHardLimit")
    private @Nullable Boolean value_licenseCountHardLimit;
    private boolean unknown_licenseCountHardLimit;
    public @Nullable Boolean licenseCountHardLimit() {
        if (!unknown_licenseCountHardLimit) return value_licenseCountHardLimit;
        throw new UndeferrableValueException("Value 'LicenseConfiguration.licenseCountHardLimit' is not present");
    }

    /**
     * Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
     * 
     */
    @PolicyResourceProperty(name="licenseCountingType", flag="unknown_licenseCountingType")
    private String value_licenseCountingType;
    private boolean unknown_licenseCountingType;
    public String licenseCountingType() {
        if (!unknown_licenseCountingType) return value_licenseCountingType;
        throw new UndeferrableValueException("Value 'LicenseConfiguration.licenseCountingType' is not present");
    }

    /**
     * Array of configured License Manager rules.
     * 
     */
    @PolicyResourceProperty(name="licenseRules", flag="unknown_licenseRules")
    private @Nullable List<String> value_licenseRules;
    private boolean unknown_licenseRules;
    public @Nullable List<String> licenseRules() {
        if (!unknown_licenseRules) return value_licenseRules;
        throw new UndeferrableValueException("Value 'LicenseConfiguration.licenseRules' is not present");
    }

    /**
     * Name of the license configuration.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'LicenseConfiguration.name' is not present");
    }

    /**
     * Account ID of the owner of the license configuration.
     * 
     */
    @PolicyResourceProperty(name="ownerAccountId", flag="unknown_ownerAccountId")
    private String value_ownerAccountId;
    private boolean unknown_ownerAccountId;
    public String ownerAccountId() {
        if (!unknown_ownerAccountId) return value_ownerAccountId;
        throw new UndeferrableValueException("Value 'LicenseConfiguration.ownerAccountId' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'LicenseConfiguration.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'LicenseConfiguration.tagsAll' is not present");
    }

}
