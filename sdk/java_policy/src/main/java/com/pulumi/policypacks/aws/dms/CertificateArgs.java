// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dms;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:dms/certificate:Certificate")
public final class CertificateArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The certificate identifier.
     * 
     * - Must contain from 1 to 255 alphanumeric characters and hyphens.
     * 
     */
    @PolicyResourceProperty(name="certificateId", flag="unknown_certificateId")
    private String value_certificateId;
    private boolean unknown_certificateId;
    public String certificateId() {
        if (!unknown_certificateId) return value_certificateId;
        throw new UndeferrableValueException("Value 'CertificateArgs.certificateId' is not present");
    }

    /**
     * The contents of the .pem X.509 certificate file for the certificate. Either `certificate_pem` or `certificate_wallet` must be set.
     * 
     */
    @PolicyResourceProperty(name="certificatePem", flag="unknown_certificatePem")
    private String value_certificatePem;
    private boolean unknown_certificatePem;
    public String certificatePem() {
        if (!unknown_certificatePem) return value_certificatePem;
        throw new UndeferrableValueException("Value 'CertificateArgs.certificatePem' is not present");
    }

    /**
     * The contents of the Oracle Wallet certificate for use with SSL, provided as a base64-encoded String. Either `certificate_pem` or `certificate_wallet` must be set.
     * 
     */
    @PolicyResourceProperty(name="certificateWallet", flag="unknown_certificateWallet")
    private String value_certificateWallet;
    private boolean unknown_certificateWallet;
    public String certificateWallet() {
        if (!unknown_certificateWallet) return value_certificateWallet;
        throw new UndeferrableValueException("Value 'CertificateArgs.certificateWallet' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'CertificateArgs.tags' is not present");
    }

}
