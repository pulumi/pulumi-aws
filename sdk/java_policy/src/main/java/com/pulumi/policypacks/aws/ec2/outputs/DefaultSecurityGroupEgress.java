// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class DefaultSecurityGroupEgress {

    /**
     * List of CIDR blocks.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> cidrBlocks;

    public @Nullable List<String> cidrBlocks() {
        if (cidrBlocks == null) return null;
        return cidrBlocks.getValue("DefaultSecurityGroupEgress.cidrBlocks");
    }

    /**
     * Description of this rule.
     * 
     */
    private @Nullable UndeferrableValue<String> description;

    public @Nullable String description() {
        if (description == null) return null;
        return description.getValue("DefaultSecurityGroupEgress.description");
    }

    /**
     * Start port (or ICMP type number if protocol is `icmp`)
     * 
     */
    private UndeferrableValue<Integer> fromPort;

    public Integer fromPort() {
        if (fromPort == null) return null;
        return fromPort.getValue("DefaultSecurityGroupEgress.fromPort");
    }

    /**
     * List of IPv6 CIDR blocks.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> ipv6CidrBlocks;

    public @Nullable List<String> ipv6CidrBlocks() {
        if (ipv6CidrBlocks == null) return null;
        return ipv6CidrBlocks.getValue("DefaultSecurityGroupEgress.ipv6CidrBlocks");
    }

    /**
     * List of prefix list IDs (for allowing access to VPC endpoints)
     * 
     */
    private @Nullable UndeferrableValue<List<String>> prefixListIds;

    public @Nullable List<String> prefixListIds() {
        if (prefixListIds == null) return null;
        return prefixListIds.getValue("DefaultSecurityGroupEgress.prefixListIds");
    }

    /**
     * Protocol. If you select a protocol of &#34;-1&#34; (semantically equivalent to `all`, which is not a valid value here), you must specify a `from_port` and `to_port` equal to `0`. If not `icmp`, `tcp`, `udp`, or `-1` use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
     * 
     */
    private UndeferrableValue<String> protocol;

    public String protocol() {
        if (protocol == null) return null;
        return protocol.getValue("DefaultSecurityGroupEgress.protocol");
    }

    /**
     * List of security groups. A group name can be used relative to the default VPC. Otherwise, group ID.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> securityGroups;

    public @Nullable List<String> securityGroups() {
        if (securityGroups == null) return null;
        return securityGroups.getValue("DefaultSecurityGroupEgress.securityGroups");
    }

    /**
     * Whether the security group itself will be added as a source to this egress rule.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> self;

    public @Nullable Boolean self() {
        if (self == null) return null;
        return self.getValue("DefaultSecurityGroupEgress.self");
    }

    /**
     * End range port (or ICMP code if protocol is `icmp`).
     * 
     */
    private UndeferrableValue<Integer> toPort;

    public Integer toPort() {
        if (toPort == null) return null;
        return toPort.getValue("DefaultSecurityGroupEgress.toPort");
    }

}
