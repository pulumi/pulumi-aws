// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appmesh.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.appmesh.inputs.RouteSpecHttp2RouteMatchHeaderArgs;
import com.pulumi.policypacks.aws.appmesh.inputs.RouteSpecHttp2RouteMatchPathArgs;
import com.pulumi.policypacks.aws.appmesh.inputs.RouteSpecHttp2RouteMatchQueryParameterArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class RouteSpecHttp2RouteMatchArgs {

    /**
     * Client request headers to match on.
     * 
     */
    private UndeferrableValue<List<RouteSpecHttp2RouteMatchHeaderArgs>> headers;

    public List<RouteSpecHttp2RouteMatchHeaderArgs> headers() {
        if (headers == null) return null;
        return headers.getValue("RouteSpecHttp2RouteMatchArgs.headers");
    }

    /**
     * Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
     * 
     */
    private UndeferrableValue<String> method;

    public String method() {
        if (method == null) return null;
        return method.getValue("RouteSpecHttp2RouteMatchArgs.method");
    }

    /**
     * Client request path to match on.
     * 
     */
    private UndeferrableValue<RouteSpecHttp2RouteMatchPathArgs> path;

    public RouteSpecHttp2RouteMatchPathArgs path() {
        if (path == null) return null;
        return path.getValue("RouteSpecHttp2RouteMatchArgs.path");
    }

    /**
     * The port number to match from the request.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("RouteSpecHttp2RouteMatchArgs.port");
    }

    /**
     * Path with which to match requests.
     * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
     * 
     */
    private UndeferrableValue<String> prefix;

    public String prefix() {
        if (prefix == null) return null;
        return prefix.getValue("RouteSpecHttp2RouteMatchArgs.prefix");
    }

    /**
     * Client request query parameters to match on.
     * 
     */
    private UndeferrableValue<List<RouteSpecHttp2RouteMatchQueryParameterArgs>> queryParameters;

    public List<RouteSpecHttp2RouteMatchQueryParameterArgs> queryParameters() {
        if (queryParameters == null) return null;
        return queryParameters.getValue("RouteSpecHttp2RouteMatchArgs.queryParameters");
    }

    /**
     * Client request header scheme to match on. Valid values: `http`, `https`.
     * 
     */
    private UndeferrableValue<String> scheme;

    public String scheme() {
        if (scheme == null) return null;
        return scheme.getValue("RouteSpecHttp2RouteMatchArgs.scheme");
    }

}
