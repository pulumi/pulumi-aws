// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.lightsail.outputs.DistributionCacheBehaviorSettingsForwardedCookies;
import com.pulumi.policypacks.aws.lightsail.outputs.DistributionCacheBehaviorSettingsForwardedHeaders;
import com.pulumi.policypacks.aws.lightsail.outputs.DistributionCacheBehaviorSettingsForwardedQueryStrings;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class DistributionCacheBehaviorSettings {

    /**
     * The HTTP methods that are processed and forwarded to the distribution&#39;s origin.
     * 
     */
    private @Nullable UndeferrableValue<String> allowedHttpMethods;

    public @Nullable String allowedHttpMethods() {
        if (allowedHttpMethods == null) return null;
        return allowedHttpMethods.getValue("DistributionCacheBehaviorSettings.allowedHttpMethods");
    }

    /**
     * The HTTP method responses that are cached by your distribution.
     * 
     */
    private @Nullable UndeferrableValue<String> cachedHttpMethods;

    public @Nullable String cachedHttpMethods() {
        if (cachedHttpMethods == null) return null;
        return cachedHttpMethods.getValue("DistributionCacheBehaviorSettings.cachedHttpMethods");
    }

    /**
     * The default amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the content has been updated.
     * 
     */
    private @Nullable UndeferrableValue<Integer> defaultTtl;

    public @Nullable Integer defaultTtl() {
        if (defaultTtl == null) return null;
        return defaultTtl.getValue("DistributionCacheBehaviorSettings.defaultTtl");
    }

    /**
     * An object that describes the cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. Detailed below
     * 
     */
    private @Nullable UndeferrableValue<DistributionCacheBehaviorSettingsForwardedCookies> forwardedCookies;

    public @Nullable DistributionCacheBehaviorSettingsForwardedCookies forwardedCookies() {
        if (forwardedCookies == null) return null;
        return forwardedCookies.getValue("DistributionCacheBehaviorSettings.forwardedCookies");
    }

    /**
     * An object that describes the headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. Detailed below
     * 
     */
    private @Nullable UndeferrableValue<DistributionCacheBehaviorSettingsForwardedHeaders> forwardedHeaders;

    public @Nullable DistributionCacheBehaviorSettingsForwardedHeaders forwardedHeaders() {
        if (forwardedHeaders == null) return null;
        return forwardedHeaders.getValue("DistributionCacheBehaviorSettings.forwardedHeaders");
    }

    /**
     * An object that describes the query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. Detailed below
     * 
     */
    private @Nullable UndeferrableValue<DistributionCacheBehaviorSettingsForwardedQueryStrings> forwardedQueryStrings;

    public @Nullable DistributionCacheBehaviorSettingsForwardedQueryStrings forwardedQueryStrings() {
        if (forwardedQueryStrings == null) return null;
        return forwardedQueryStrings.getValue("DistributionCacheBehaviorSettings.forwardedQueryStrings");
    }

    /**
     * The maximum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    private @Nullable UndeferrableValue<Integer> maximumTtl;

    public @Nullable Integer maximumTtl() {
        if (maximumTtl == null) return null;
        return maximumTtl.getValue("DistributionCacheBehaviorSettings.maximumTtl");
    }

    /**
     * The minimum amount of time that objects stay in the distribution&#39;s cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     * 
     */
    private @Nullable UndeferrableValue<Integer> minimumTtl;

    public @Nullable Integer minimumTtl() {
        if (minimumTtl == null) return null;
        return minimumTtl.getValue("DistributionCacheBehaviorSettings.minimumTtl");
    }

}
