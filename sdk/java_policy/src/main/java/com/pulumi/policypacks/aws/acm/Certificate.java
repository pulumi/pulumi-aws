// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.acm;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.acm.outputs.CertificateDomainValidationOption;
import com.pulumi.policypacks.aws.acm.outputs.CertificateOptions;
import com.pulumi.policypacks.aws.acm.outputs.CertificateRenewalSummary;
import com.pulumi.policypacks.aws.acm.outputs.CertificateValidationOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:acm/certificate:Certificate")
public final class Certificate extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the certificate
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Certificate.arn");
    }

    /**
     * ARN of an ACM PCA
     * 
     */
    private @Nullable UndeferrableValue<String> certificateAuthorityArn;

    public @Nullable String certificateAuthorityArn() {
        if (certificateAuthorityArn == null) return null;
        return certificateAuthorityArn.getValue("Certificate.certificateAuthorityArn");
    }

    /**
     * Certificate&#39;s PEM-formatted public key
     * 
     */
    private @Nullable UndeferrableValue<String> certificateBody;

    public @Nullable String certificateBody() {
        if (certificateBody == null) return null;
        return certificateBody.getValue("Certificate.certificateBody");
    }

    /**
     * Certificate&#39;s PEM-formatted chain
     * * Creating a private CA issued certificate
     * 
     */
    private @Nullable UndeferrableValue<String> certificateChain;

    public @Nullable String certificateChain() {
        if (certificateChain == null) return null;
        return certificateChain.getValue("Certificate.certificateChain");
    }

    /**
     * Fully qualified domain name (FQDN) in the certificate.
     * 
     */
    private UndeferrableValue<String> domainName;

    public String domainName() {
        if (domainName == null) return null;
        return domainName.getValue("Certificate.domainName");
    }

    /**
     * Set of domain validation objects which can be used to complete certificate validation.
     * Can have more than one element, e.g., if SANs are defined.
     * Only set if `DNS`-validation was used.
     * 
     */
    private UndeferrableValue<List<CertificateDomainValidationOption>> domainValidationOptions;

    public List<CertificateDomainValidationOption> domainValidationOptions() {
        if (domainValidationOptions == null) return null;
        return domainValidationOptions.getValue("Certificate.domainValidationOptions");
    }

    /**
     * Amount of time to start automatic renewal process before expiration.
     * Has no effect if less than 60 days.
     * Represented by either
     * a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
     * or a string such as `2160h`.
     * 
     */
    private @Nullable UndeferrableValue<String> earlyRenewalDuration;

    public @Nullable String earlyRenewalDuration() {
        if (earlyRenewalDuration == null) return null;
        return earlyRenewalDuration.getValue("Certificate.earlyRenewalDuration");
    }

    /**
     * Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
     * 
     */
    private UndeferrableValue<String> keyAlgorithm;

    public String keyAlgorithm() {
        if (keyAlgorithm == null) return null;
        return keyAlgorithm.getValue("Certificate.keyAlgorithm");
    }

    /**
     * Expiration date and time of the certificate.
     * 
     */
    private UndeferrableValue<String> notAfter;

    public String notAfter() {
        if (notAfter == null) return null;
        return notAfter.getValue("Certificate.notAfter");
    }

    /**
     * Start of the validity period of the certificate.
     * 
     */
    private UndeferrableValue<String> notBefore;

    public String notBefore() {
        if (notBefore == null) return null;
        return notBefore.getValue("Certificate.notBefore");
    }

    /**
     * Configuration block used to set certificate options. Detailed below.
     * 
     */
    private UndeferrableValue<CertificateOptions> options;

    public CertificateOptions options() {
        if (options == null) return null;
        return options.getValue("Certificate.options");
    }

    /**
     * `true` if a Private certificate eligible for managed renewal is within the `early_renewal_duration` period.
     * 
     */
    private UndeferrableValue<Boolean> pendingRenewal;

    public Boolean pendingRenewal() {
        if (pendingRenewal == null) return null;
        return pendingRenewal.getValue("Certificate.pendingRenewal");
    }

    /**
     * Certificate&#39;s PEM-formatted private key
     * 
     */
    private @Nullable UndeferrableValue<String> privateKey;

    public @Nullable String privateKey() {
        if (privateKey == null) return null;
        return privateKey.getValue("Certificate.privateKey");
    }

    /**
     * Whether the certificate is eligible for managed renewal.
     * 
     */
    private UndeferrableValue<String> renewalEligibility;

    public String renewalEligibility() {
        if (renewalEligibility == null) return null;
        return renewalEligibility.getValue("Certificate.renewalEligibility");
    }

    /**
     * Contains information about the status of ACM&#39;s [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for the certificate.
     * 
     */
    private UndeferrableValue<List<CertificateRenewalSummary>> renewalSummaries;

    public List<CertificateRenewalSummary> renewalSummaries() {
        if (renewalSummaries == null) return null;
        return renewalSummaries.getValue("Certificate.renewalSummaries");
    }

    /**
     * Status of the certificate.
     * 
     */
    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("Certificate.status");
    }

    /**
     * Set of domains that should be SANs in the issued certificate.
     * To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
     * 
     */
    private UndeferrableValue<List<String>> subjectAlternativeNames;

    public List<String> subjectAlternativeNames() {
        if (subjectAlternativeNames == null) return null;
        return subjectAlternativeNames.getValue("Certificate.subjectAlternativeNames");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Certificate.tags");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Certificate.tagsAll");
    }

    /**
     * Source of the certificate.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("Certificate.type");
    }

    /**
     * List of addresses that received a validation email. Only set if `EMAIL` validation was used.
     * 
     */
    private UndeferrableValue<List<String>> validationEmails;

    public List<String> validationEmails() {
        if (validationEmails == null) return null;
        return validationEmails.getValue("Certificate.validationEmails");
    }

    /**
     * Which method to use for validation. `DNS` or `EMAIL` are valid. This parameter must not be set for certificates that were imported into ACM and then into Pulumi.
     * 
     */
    private UndeferrableValue<String> validationMethod;

    public String validationMethod() {
        if (validationMethod == null) return null;
        return validationMethod.getValue("Certificate.validationMethod");
    }

    /**
     * Configuration block used to specify information about the initial validation of each domain name. Detailed below.
     * * Importing an existing certificate
     * 
     */
    private @Nullable UndeferrableValue<List<CertificateValidationOption>> validationOptions;

    public @Nullable List<CertificateValidationOption> validationOptions() {
        if (validationOptions == null) return null;
        return validationOptions.getValue("Certificate.validationOptions");
    }

}
