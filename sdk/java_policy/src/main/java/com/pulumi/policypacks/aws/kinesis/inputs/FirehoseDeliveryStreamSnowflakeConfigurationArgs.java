// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesis.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptionsArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationS3ConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfigurationArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamSnowflakeConfigurationArgs {

    /**
     * The URL of the Snowflake account. Format: https://[account_identifier].snowflakecomputing.com.
     * 
     */
    private UndeferrableValue<String> accountUrl;

    public String accountUrl() {
        if (accountUrl == null) return null;
        return accountUrl.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.accountUrl");
    }

    /**
     * Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 0s.
     * 
     */
    private UndeferrableValue<Integer> bufferingInterval;

    public Integer bufferingInterval() {
        if (bufferingInterval == null) return null;
        return bufferingInterval.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.bufferingInterval");
    }

    /**
     * Buffer incoming data to the specified size, in MBs between 1 to 128, before delivering it to the destination.  The default value is 1MB.
     * 
     */
    private UndeferrableValue<Integer> bufferingSize;

    public Integer bufferingSize() {
        if (bufferingSize == null) return null;
        return bufferingSize.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.bufferingSize");
    }

    /**
     * The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;

    public FirehoseDeliveryStreamSnowflakeConfigurationCloudwatchLoggingOptionsArgs cloudwatchLoggingOptions() {
        if (cloudwatchLoggingOptions == null) return null;
        return cloudwatchLoggingOptions.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.cloudwatchLoggingOptions");
    }

    /**
     * The name of the content column.
     * 
     */
    private UndeferrableValue<String> contentColumnName;

    public String contentColumnName() {
        if (contentColumnName == null) return null;
        return contentColumnName.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.contentColumnName");
    }

    /**
     * The data loading option.
     * 
     */
    private UndeferrableValue<String> dataLoadingOption;

    public String dataLoadingOption() {
        if (dataLoadingOption == null) return null;
        return dataLoadingOption.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.dataLoadingOption");
    }

    /**
     * The Snowflake database name.
     * 
     */
    private UndeferrableValue<String> database;

    public String database() {
        if (database == null) return null;
        return database.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.database");
    }

    /**
     * The passphrase for the private key.
     * 
     */
    private UndeferrableValue<String> keyPassphrase;

    public String keyPassphrase() {
        if (keyPassphrase == null) return null;
        return keyPassphrase.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.keyPassphrase");
    }

    /**
     * The name of the metadata column.
     * 
     */
    private UndeferrableValue<String> metadataColumnName;

    public String metadataColumnName() {
        if (metadataColumnName == null) return null;
        return metadataColumnName.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.metadataColumnName");
    }

    /**
     * The private key for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    private UndeferrableValue<String> privateKey;

    public String privateKey() {
        if (privateKey == null) return null;
        return privateKey.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.privateKey");
    }

    /**
     * The processing configuration. See `processing_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfigurationArgs> processingConfiguration;

    public FirehoseDeliveryStreamSnowflakeConfigurationProcessingConfigurationArgs processingConfiguration() {
        if (processingConfiguration == null) return null;
        return processingConfiguration.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.processingConfiguration");
    }

    /**
     * After an initial failure to deliver to Snowflake, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 60s.  There will be no retry if the value is 0.
     * 
     */
    private UndeferrableValue<Integer> retryDuration;

    public Integer retryDuration() {
        if (retryDuration == null) return null;
        return retryDuration.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.retryDuration");
    }

    /**
     * The ARN of the IAM role.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.roleArn");
    }

    /**
     * The S3 backup mode.
     * 
     */
    private UndeferrableValue<String> s3BackupMode;

    public String s3BackupMode() {
        if (s3BackupMode == null) return null;
        return s3BackupMode.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.s3BackupMode");
    }

    /**
     * The S3 configuration. See `s3_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationS3ConfigurationArgs> s3Configuration;

    public FirehoseDeliveryStreamSnowflakeConfigurationS3ConfigurationArgs s3Configuration() {
        if (s3Configuration == null) return null;
        return s3Configuration.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.s3Configuration");
    }

    /**
     * The Snowflake schema name.
     * 
     */
    private UndeferrableValue<String> schema;

    public String schema() {
        if (schema == null) return null;
        return schema.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.schema");
    }

    /**
     * The Secrets Manager configuration. See `secrets_manager_configuration` block below for details. This value is required if `user` and `private_key` are not provided.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfigurationArgs> secretsManagerConfiguration;

    public FirehoseDeliveryStreamSnowflakeConfigurationSecretsManagerConfigurationArgs secretsManagerConfiguration() {
        if (secretsManagerConfiguration == null) return null;
        return secretsManagerConfiguration.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.secretsManagerConfiguration");
    }

    /**
     * The configuration for Snowflake role.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfigurationArgs> snowflakeRoleConfiguration;

    public FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeRoleConfigurationArgs snowflakeRoleConfiguration() {
        if (snowflakeRoleConfiguration == null) return null;
        return snowflakeRoleConfiguration.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.snowflakeRoleConfiguration");
    }

    /**
     * The VPC configuration for Snowflake.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfigurationArgs> snowflakeVpcConfiguration;

    public FirehoseDeliveryStreamSnowflakeConfigurationSnowflakeVpcConfigurationArgs snowflakeVpcConfiguration() {
        if (snowflakeVpcConfiguration == null) return null;
        return snowflakeVpcConfiguration.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.snowflakeVpcConfiguration");
    }

    /**
     * The Snowflake table name.
     * 
     */
    private UndeferrableValue<String> table;

    public String table() {
        if (table == null) return null;
        return table.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.table");
    }

    /**
     * The user for authentication. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    private UndeferrableValue<String> user;

    public String user() {
        if (user == null) return null;
        return user.getValue("FirehoseDeliveryStreamSnowflakeConfigurationArgs.user");
    }

}
