// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.route53.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ResolverRuleTargetIpArgs {

    /**
     * One IPv4 address that you want to forward DNS queries to.
     * 
     */
    @PolicyResourceProperty(name="ip", flag="unknown_ip")
    private String value_ip;
    private boolean unknown_ip;
    public String ip() {
        if (!unknown_ip) return value_ip;
        throw new UndeferrableValueException("Value 'ResolverRuleTargetIpArgs.ip' is not present");
    }

    /**
     * One IPv6 address that you want to forward DNS queries to.
     * 
     */
    @PolicyResourceProperty(name="ipv6", flag="unknown_ipv6")
    private String value_ipv6;
    private boolean unknown_ipv6;
    public String ipv6() {
        if (!unknown_ipv6) return value_ipv6;
        throw new UndeferrableValueException("Value 'ResolverRuleTargetIpArgs.ipv6' is not present");
    }

    /**
     * Port at `ip` that you want to forward DNS queries to. Default value is `53`.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'ResolverRuleTargetIpArgs.port' is not present");
    }

    /**
     * Protocol for the resolver endpoint. Valid values can be found in the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_TargetAddress.html). Default value is `Do53`.
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'ResolverRuleTargetIpArgs.protocol' is not present");
    }

}
