// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appfabric;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.appfabric.inputs.AppAuthorizationCredentialArgs;
import com.pulumi.policypacks.aws.appfabric.inputs.AppAuthorizationTenantArgs;
import com.pulumi.policypacks.aws.appfabric.inputs.AppAuthorizationTimeoutsArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:appfabric/appAuthorization:AppAuthorization")
public final class AppAuthorizationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The name of the application for valid values see https://docs.aws.amazon.com/appfabric/latest/api/API_CreateAppAuthorization.html.
     * 
     */
    private UndeferrableValue<String> app;

    public String app() {
        if (app == null) return null;
        return app.getValue("AppAuthorizationArgs.app");
    }

    /**
     * The Amazon Resource Name (ARN) of the app bundle to use for the request.
     * 
     */
    private UndeferrableValue<String> appBundleArn;

    public String appBundleArn() {
        if (appBundleArn == null) return null;
        return appBundleArn.getValue("AppAuthorizationArgs.appBundleArn");
    }

    /**
     * The authorization type for the app authorization valid values are oauth2 and apiKey.
     * 
     */
    private UndeferrableValue<String> authType;

    public String authType() {
        if (authType == null) return null;
        return authType.getValue("AppAuthorizationArgs.authType");
    }

    /**
     * Contains credentials for the application, such as an API key or OAuth2 client ID and secret.
     * Specify credentials that match the authorization type for your request. For example, if the authorization type for your request is OAuth2 (oauth2), then you should provide only the OAuth2 credentials.
     * 
     */
    private UndeferrableValue<AppAuthorizationCredentialArgs> credential;

    public AppAuthorizationCredentialArgs credential() {
        if (credential == null) return null;
        return credential.getValue("AppAuthorizationArgs.credential");
    }

    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("AppAuthorizationArgs.tags");
    }

    /**
     * Contains information about an application tenant, such as the application display name and identifier.
     * 
     */
    private UndeferrableValue<List<AppAuthorizationTenantArgs>> tenants;

    public List<AppAuthorizationTenantArgs> tenants() {
        if (tenants == null) return null;
        return tenants.getValue("AppAuthorizationArgs.tenants");
    }

    private UndeferrableValue<AppAuthorizationTimeoutsArgs> timeouts;

    public AppAuthorizationTimeoutsArgs timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("AppAuthorizationArgs.timeouts");
    }

}
