// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Double;
import java.lang.String;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs {

    /**
     * Average bitrate in bits/second.
     * 
     */
    private UndeferrableValue<Double> bitrate;

    public Double bitrate() {
        if (bitrate == null) return null;
        return bitrate.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs.bitrate");
    }

    /**
     * Dolby Digital Plus with Dolby Atmos coding mode.
     * 
     */
    private UndeferrableValue<String> codingMode;

    public String codingMode() {
        if (codingMode == null) return null;
        return codingMode.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs.codingMode");
    }

    /**
     * Sets the dialnorm for the output.
     * 
     */
    private UndeferrableValue<Double> dialnorm;

    public Double dialnorm() {
        if (dialnorm == null) return null;
        return dialnorm.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs.dialnorm");
    }

    /**
     * Sets the Dolby dynamic range compression profile.
     * 
     */
    private UndeferrableValue<String> drcLine;

    public String drcLine() {
        if (drcLine == null) return null;
        return drcLine.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs.drcLine");
    }

    /**
     * Sets the profile for heavy Dolby dynamic range compression.
     * 
     */
    private UndeferrableValue<String> drcRf;

    public String drcRf() {
        if (drcRf == null) return null;
        return drcRf.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs.drcRf");
    }

    /**
     * Height dimensional trim.
     * 
     */
    private UndeferrableValue<Double> heightTrim;

    public Double heightTrim() {
        if (heightTrim == null) return null;
        return heightTrim.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs.heightTrim");
    }

    /**
     * Surround dimensional trim.
     * 
     */
    private UndeferrableValue<Double> surroundTrim;

    public Double surroundTrim() {
        if (surroundTrim == null) return null;
        return surroundTrim.getValue("ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettingsArgs.surroundTrim");
    }

}
