// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.outputs.VpcConnectionTimeouts;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:quicksight/vpcConnection:VpcConnection")
public final class VpcConnection extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the VPC connection.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'VpcConnection.arn' is not present");
    }

    /**
     * The availability status of the VPC connection. Valid values are `AVAILABLE`, `UNAVAILABLE` or `PARTIALLY_AVAILABLE`.
     * 
     */
    @PolicyResourceProperty(name="availabilityStatus", flag="unknown_availabilityStatus")
    private String value_availabilityStatus;
    private boolean unknown_availabilityStatus;
    public String availabilityStatus() {
        if (!unknown_availabilityStatus) return value_availabilityStatus;
        throw new UndeferrableValueException("Value 'VpcConnection.availabilityStatus' is not present");
    }

    /**
     * AWS account ID.
     * 
     */
    @PolicyResourceProperty(name="awsAccountId", flag="unknown_awsAccountId")
    private String value_awsAccountId;
    private boolean unknown_awsAccountId;
    public String awsAccountId() {
        if (!unknown_awsAccountId) return value_awsAccountId;
        throw new UndeferrableValueException("Value 'VpcConnection.awsAccountId' is not present");
    }

    /**
     * A list of IP addresses of DNS resolver endpoints for the VPC connection.
     * 
     */
    @PolicyResourceProperty(name="dnsResolvers", flag="unknown_dnsResolvers")
    private @Nullable List<String> value_dnsResolvers;
    private boolean unknown_dnsResolvers;
    public @Nullable List<String> dnsResolvers() {
        if (!unknown_dnsResolvers) return value_dnsResolvers;
        throw new UndeferrableValueException("Value 'VpcConnection.dnsResolvers' is not present");
    }

    /**
     * The display name for the VPC connection.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'VpcConnection.name' is not present");
    }

    /**
     * The IAM role to associate with the VPC connection.
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'VpcConnection.roleArn' is not present");
    }

    /**
     * A list of security group IDs for the VPC connection.
     * 
     */
    @PolicyResourceProperty(name="securityGroupIds", flag="unknown_securityGroupIds")
    private List<String> value_securityGroupIds;
    private boolean unknown_securityGroupIds;
    public List<String> securityGroupIds() {
        if (!unknown_securityGroupIds) return value_securityGroupIds;
        throw new UndeferrableValueException("Value 'VpcConnection.securityGroupIds' is not present");
    }

    /**
     * A list of subnet IDs for the VPC connection.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="subnetIds", flag="unknown_subnetIds")
    private List<String> value_subnetIds;
    private boolean unknown_subnetIds;
    public List<String> subnetIds() {
        if (!unknown_subnetIds) return value_subnetIds;
        throw new UndeferrableValueException("Value 'VpcConnection.subnetIds' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'VpcConnection.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'VpcConnection.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable VpcConnectionTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable VpcConnectionTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'VpcConnection.timeouts' is not present");
    }

    /**
     * The ID of the VPC connection.
     * 
     */
    @PolicyResourceProperty(name="vpcConnectionId", flag="unknown_vpcConnectionId")
    private String value_vpcConnectionId;
    private boolean unknown_vpcConnectionId;
    public String vpcConnectionId() {
        if (!unknown_vpcConnectionId) return value_vpcConnectionId;
        throw new UndeferrableValueException("Value 'VpcConnection.vpcConnectionId' is not present");
    }

}
