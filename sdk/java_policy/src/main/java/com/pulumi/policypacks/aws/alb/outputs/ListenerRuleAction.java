// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.alb.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.alb.outputs.ListenerRuleActionAuthenticateCognito;
import com.pulumi.policypacks.aws.alb.outputs.ListenerRuleActionAuthenticateOidc;
import com.pulumi.policypacks.aws.alb.outputs.ListenerRuleActionFixedResponse;
import com.pulumi.policypacks.aws.alb.outputs.ListenerRuleActionForward;
import com.pulumi.policypacks.aws.alb.outputs.ListenerRuleActionRedirect;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ListenerRuleAction {

    /**
     * Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
     * 
     */
    private @Nullable UndeferrableValue<ListenerRuleActionAuthenticateCognito> authenticateCognito;

    public @Nullable ListenerRuleActionAuthenticateCognito authenticateCognito() {
        if (authenticateCognito == null) return null;
        return authenticateCognito.getValue("ListenerRuleAction.authenticateCognito");
    }

    /**
     * Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
     * 
     */
    private @Nullable UndeferrableValue<ListenerRuleActionAuthenticateOidc> authenticateOidc;

    public @Nullable ListenerRuleActionAuthenticateOidc authenticateOidc() {
        if (authenticateOidc == null) return null;
        return authenticateOidc.getValue("ListenerRuleAction.authenticateOidc");
    }

    /**
     * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
     * 
     */
    private @Nullable UndeferrableValue<ListenerRuleActionFixedResponse> fixedResponse;

    public @Nullable ListenerRuleActionFixedResponse fixedResponse() {
        if (fixedResponse == null) return null;
        return fixedResponse.getValue("ListenerRuleAction.fixedResponse");
    }

    /**
     * Configuration block for creating an action that distributes requests among one or more target groups.
     * Specify only if `type` is `forward`.
     * Cannot be specified with `target_group_arn`.
     * 
     */
    private @Nullable UndeferrableValue<ListenerRuleActionForward> forward;

    public @Nullable ListenerRuleActionForward forward() {
        if (forward == null) return null;
        return forward.getValue("ListenerRuleAction.forward");
    }

    /**
     * Order for the action.
     * The action with the lowest value for order is performed first.
     * Valid values are between `1` and `50000`.
     * Defaults to the position in the list of actions.
     * 
     */
    private @Nullable UndeferrableValue<Integer> order;

    public @Nullable Integer order() {
        if (order == null) return null;
        return order.getValue("ListenerRuleAction.order");
    }

    /**
     * Information for creating a redirect action. Required if `type` is `redirect`.
     * 
     */
    private @Nullable UndeferrableValue<ListenerRuleActionRedirect> redirect;

    public @Nullable ListenerRuleActionRedirect redirect() {
        if (redirect == null) return null;
        return redirect.getValue("ListenerRuleAction.redirect");
    }

    /**
     * ARN of the Target Group to which to route traffic.
     * Specify only if `type` is `forward` and you want to route to a single target group.
     * To route to one or more target groups, use a `forward` block instead.
     * Cannot be specified with `forward`.
     * 
     */
    private @Nullable UndeferrableValue<String> targetGroupArn;

    public @Nullable String targetGroupArn() {
        if (targetGroupArn == null) return null;
        return targetGroupArn.getValue("ListenerRuleAction.targetGroupArn");
    }

    /**
     * The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("ListenerRuleAction.type");
    }

}
