// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.directoryservice;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.directoryservice.outputs.DirectoryConnectSettings;
import com.pulumi.policypacks.aws.directoryservice.outputs.DirectoryVpcSettings;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:directoryservice/directory:Directory")
public final class Directory extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The access URL for the directory, such as `http://alias.awsapps.com`.
     * 
     */
    @PolicyResourceProperty(name="accessUrl", flag="unknown_accessUrl")
    private String value_accessUrl;
    private boolean unknown_accessUrl;
    public String accessUrl() {
        if (!unknown_accessUrl) return value_accessUrl;
        throw new UndeferrableValueException("Value 'Directory.accessUrl' is not present");
    }

    /**
     * The alias for the directory (must be unique amongst all aliases in AWS). Required for `enable_sso`.
     * 
     */
    @PolicyResourceProperty(name="alias", flag="unknown_alias")
    private String value_alias;
    private boolean unknown_alias;
    public String alias() {
        if (!unknown_alias) return value_alias;
        throw new UndeferrableValueException("Value 'Directory.alias' is not present");
    }

    /**
     * Connector related information about the directory. Fields documented below.
     * 
     */
    @PolicyResourceProperty(name="connectSettings", flag="unknown_connectSettings")
    private @Nullable DirectoryConnectSettings value_connectSettings;
    private boolean unknown_connectSettings;
    public @Nullable DirectoryConnectSettings connectSettings() {
        if (!unknown_connectSettings) return value_connectSettings;
        throw new UndeferrableValueException("Value 'Directory.connectSettings' is not present");
    }

    /**
     * A textual description for the directory.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Directory.description' is not present");
    }

    /**
     * The number of domain controllers desired in the directory. Minimum value of `2`. Scaling of domain controllers is only supported for `MicrosoftAD` directories.
     * 
     */
    @PolicyResourceProperty(name="desiredNumberOfDomainControllers", flag="unknown_desiredNumberOfDomainControllers")
    private Integer value_desiredNumberOfDomainControllers;
    private boolean unknown_desiredNumberOfDomainControllers;
    public Integer desiredNumberOfDomainControllers() {
        if (!unknown_desiredNumberOfDomainControllers) return value_desiredNumberOfDomainControllers;
        throw new UndeferrableValueException("Value 'Directory.desiredNumberOfDomainControllers' is not present");
    }

    /**
     * A list of IP addresses of the DNS servers for the directory or connector.
     * 
     */
    @PolicyResourceProperty(name="dnsIpAddresses", flag="unknown_dnsIpAddresses")
    private List<String> value_dnsIpAddresses;
    private boolean unknown_dnsIpAddresses;
    public List<String> dnsIpAddresses() {
        if (!unknown_dnsIpAddresses) return value_dnsIpAddresses;
        throw new UndeferrableValueException("Value 'Directory.dnsIpAddresses' is not present");
    }

    /**
     * The MicrosoftAD edition (`Standard` or `Enterprise`). Defaults to `Enterprise`.
     * 
     */
    @PolicyResourceProperty(name="edition", flag="unknown_edition")
    private String value_edition;
    private boolean unknown_edition;
    public String edition() {
        if (!unknown_edition) return value_edition;
        throw new UndeferrableValueException("Value 'Directory.edition' is not present");
    }

    /**
     * Whether to enable single-sign on for the directory. Requires `alias`. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="enableSso", flag="unknown_enableSso")
    private @Nullable Boolean value_enableSso;
    private boolean unknown_enableSso;
    public @Nullable Boolean enableSso() {
        if (!unknown_enableSso) return value_enableSso;
        throw new UndeferrableValueException("Value 'Directory.enableSso' is not present");
    }

    /**
     * The fully qualified name for the directory, such as `corp.example.com`
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Directory.name' is not present");
    }

    /**
     * The password for the directory administrator or connector user.
     * 
     */
    @PolicyResourceProperty(name="password", flag="unknown_password")
    private String value_password;
    private boolean unknown_password;
    public String password() {
        if (!unknown_password) return value_password;
        throw new UndeferrableValueException("Value 'Directory.password' is not present");
    }

    /**
     * The ID of the security group created by the directory.
     * 
     */
    @PolicyResourceProperty(name="securityGroupId", flag="unknown_securityGroupId")
    private String value_securityGroupId;
    private boolean unknown_securityGroupId;
    public String securityGroupId() {
        if (!unknown_securityGroupId) return value_securityGroupId;
        throw new UndeferrableValueException("Value 'Directory.securityGroupId' is not present");
    }

    /**
     * The short name of the directory, such as `CORP`.
     * 
     */
    @PolicyResourceProperty(name="shortName", flag="unknown_shortName")
    private String value_shortName;
    private boolean unknown_shortName;
    public String shortName() {
        if (!unknown_shortName) return value_shortName;
        throw new UndeferrableValueException("Value 'Directory.shortName' is not present");
    }

    /**
     * (For `SimpleAD` and `ADConnector` types) The size of the directory (`Small` or `Large` are accepted values). `Large` by default.
     * 
     */
    @PolicyResourceProperty(name="size", flag="unknown_size")
    private String value_size;
    private boolean unknown_size;
    public String size() {
        if (!unknown_size) return value_size;
        throw new UndeferrableValueException("Value 'Directory.size' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Directory.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Directory.tagsAll' is not present");
    }

    /**
     * The directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD` are accepted values). Defaults to `SimpleAD`.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private @Nullable String value_type;
    private boolean unknown_type;
    public @Nullable String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'Directory.type' is not present");
    }

    /**
     * VPC related information about the directory. Fields documented below.
     * 
     */
    @PolicyResourceProperty(name="vpcSettings", flag="unknown_vpcSettings")
    private @Nullable DirectoryVpcSettings value_vpcSettings;
    private boolean unknown_vpcSettings;
    public @Nullable DirectoryVpcSettings vpcSettings() {
        if (!unknown_vpcSettings) return value_vpcSettings;
        throw new UndeferrableValueException("Value 'Directory.vpcSettings' is not present");
    }

}
