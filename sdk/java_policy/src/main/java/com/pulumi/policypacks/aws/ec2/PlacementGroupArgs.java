// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.enums.PlacementStrategy;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/placementGroup:PlacementGroup")
public final class PlacementGroupArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The name of the placement group.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("PlacementGroupArgs.name");
    }

    /**
     * The number of partitions to create in the
     * placement group.  Can only be specified when the `strategy` is set to
     * `partition`.  Valid values are 1 - 7 (default is `2`).
     * 
     */
    private UndeferrableValue<Integer> partitionCount;

    public Integer partitionCount() {
        if (partitionCount == null) return null;
        return partitionCount.getValue("PlacementGroupArgs.partitionCount");
    }

    /**
     * Determines how placement groups spread instances. Can only be used
     * when the `strategy` is set to `spread`. Can be `host` or `rack`. `host` can only be used for Outpost placement groups. Defaults to `rack`.
     * 
     */
    private UndeferrableValue<String> spreadLevel;

    public String spreadLevel() {
        if (spreadLevel == null) return null;
        return spreadLevel.getValue("PlacementGroupArgs.spreadLevel");
    }

    /**
     * The placement strategy. Can be `cluster`, `partition` or `spread`.
     * 
     */
    private UndeferrableValue<String> strategy;

    public String strategy() {
        if (strategy == null) return null;
        return strategy.getValue("PlacementGroupArgs.strategy");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("PlacementGroupArgs.tags");
    }

}
