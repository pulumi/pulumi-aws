// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lb;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lb.inputs.ListenerDefaultActionArgs;
import com.pulumi.policypacks.aws.lb.inputs.ListenerMutualAuthenticationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lb/listener:Listener")
public final class ListenerArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if `protocol` is `TLS`. Valid values are `HTTP1Only`, `HTTP2Only`, `HTTP2Optional`, `HTTP2Preferred`, and `None`.
     * 
     */
    private UndeferrableValue<String> alpnPolicy;

    public String alpnPolicy() {
        if (alpnPolicy == null) return null;
        return alpnPolicy.getValue("ListenerArgs.alpnPolicy");
    }

    /**
     * ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the `aws.lb.ListenerCertificate` resource.
     * 
     */
    private UndeferrableValue<String> certificateArn;

    public String certificateArn() {
        if (certificateArn == null) return null;
        return certificateArn.getValue("ListenerArgs.certificateArn");
    }

    /**
     * Configuration block for default actions. See below.
     * 
     */
    private UndeferrableValue<List<ListenerDefaultActionArgs>> defaultActions;

    public List<ListenerDefaultActionArgs> defaultActions() {
        if (defaultActions == null) return null;
        return defaultActions.getValue("ListenerArgs.defaultActions");
    }

    /**
     * ARN of the load balancer.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> loadBalancerArn;

    public String loadBalancerArn() {
        if (loadBalancerArn == null) return null;
        return loadBalancerArn.getValue("ListenerArgs.loadBalancerArn");
    }

    /**
     * The mutual authentication configuration information. See below.
     * 
     */
    private UndeferrableValue<ListenerMutualAuthenticationArgs> mutualAuthentication;

    public ListenerMutualAuthenticationArgs mutualAuthentication() {
        if (mutualAuthentication == null) return null;
        return mutualAuthentication.getValue("ListenerArgs.mutualAuthentication");
    }

    /**
     * Port on which the load balancer is listening. Not valid for Gateway Load Balancers.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("ListenerArgs.port");
    }

    /**
     * Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are `HTTP` and `HTTPS`, with a default of `HTTP`. For Network Load Balancers, valid values are `TCP`, `TLS`, `UDP`, and `TCP_UDP`. Not valid to use `UDP` or `TCP_UDP` if dual-stack mode is enabled. Not valid for Gateway Load Balancers.
     * 
     */
    private UndeferrableValue<String> protocol;

    public String protocol() {
        if (protocol == null) return null;
        return protocol.getValue("ListenerArgs.protocol");
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    private UndeferrableValue<String> routingHttpRequestXAmznMtlsClientcertHeaderName;

    public String routingHttpRequestXAmznMtlsClientcertHeaderName() {
        if (routingHttpRequestXAmznMtlsClientcertHeaderName == null) return null;
        return routingHttpRequestXAmznMtlsClientcertHeaderName.getValue("ListenerArgs.routingHttpRequestXAmznMtlsClientcertHeaderName");
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Issuer` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    private UndeferrableValue<String> routingHttpRequestXAmznMtlsClientcertIssuerHeaderName;

    public String routingHttpRequestXAmznMtlsClientcertIssuerHeaderName() {
        if (routingHttpRequestXAmznMtlsClientcertIssuerHeaderName == null) return null;
        return routingHttpRequestXAmznMtlsClientcertIssuerHeaderName.getValue("ListenerArgs.routingHttpRequestXAmznMtlsClientcertIssuerHeaderName");
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Leaf` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    private UndeferrableValue<String> routingHttpRequestXAmznMtlsClientcertLeafHeaderName;

    public String routingHttpRequestXAmznMtlsClientcertLeafHeaderName() {
        if (routingHttpRequestXAmznMtlsClientcertLeafHeaderName == null) return null;
        return routingHttpRequestXAmznMtlsClientcertLeafHeaderName.getValue("ListenerArgs.routingHttpRequestXAmznMtlsClientcertLeafHeaderName");
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Serial-Number` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    private UndeferrableValue<String> routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName;

    public String routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName() {
        if (routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName == null) return null;
        return routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName.getValue("ListenerArgs.routingHttpRequestXAmznMtlsClientcertSerialNumberHeaderName");
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Subject` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    private UndeferrableValue<String> routingHttpRequestXAmznMtlsClientcertSubjectHeaderName;

    public String routingHttpRequestXAmznMtlsClientcertSubjectHeaderName() {
        if (routingHttpRequestXAmznMtlsClientcertSubjectHeaderName == null) return null;
        return routingHttpRequestXAmznMtlsClientcertSubjectHeaderName.getValue("ListenerArgs.routingHttpRequestXAmznMtlsClientcertSubjectHeaderName");
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Mtls-Clientcert-Validity` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    private UndeferrableValue<String> routingHttpRequestXAmznMtlsClientcertValidityHeaderName;

    public String routingHttpRequestXAmznMtlsClientcertValidityHeaderName() {
        if (routingHttpRequestXAmznMtlsClientcertValidityHeaderName == null) return null;
        return routingHttpRequestXAmznMtlsClientcertValidityHeaderName.getValue("ListenerArgs.routingHttpRequestXAmznMtlsClientcertValidityHeaderName");
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Tls-Cipher-Suite` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    private UndeferrableValue<String> routingHttpRequestXAmznTlsCipherSuiteHeaderName;

    public String routingHttpRequestXAmznTlsCipherSuiteHeaderName() {
        if (routingHttpRequestXAmznTlsCipherSuiteHeaderName == null) return null;
        return routingHttpRequestXAmznTlsCipherSuiteHeaderName.getValue("ListenerArgs.routingHttpRequestXAmznTlsCipherSuiteHeaderName");
    }

    /**
     * Enables you to modify the header name of the `X-Amzn-Tls-Version` HTTP request header. Can only be set if protocol is `HTTPS` for Application Load Balancers.
     * 
     */
    private UndeferrableValue<String> routingHttpRequestXAmznTlsVersionHeaderName;

    public String routingHttpRequestXAmznTlsVersionHeaderName() {
        if (routingHttpRequestXAmznTlsVersionHeaderName == null) return null;
        return routingHttpRequestXAmznTlsVersionHeaderName.getValue("ListenerArgs.routingHttpRequestXAmznTlsVersionHeaderName");
    }

    /**
     * Specifies which headers the browser can expose to the requesting client. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid value is `true`.
     * 
     */
    private UndeferrableValue<String> routingHttpResponseAccessControlAllowCredentialsHeaderValue;

    public String routingHttpResponseAccessControlAllowCredentialsHeaderValue() {
        if (routingHttpResponseAccessControlAllowCredentialsHeaderValue == null) return null;
        return routingHttpResponseAccessControlAllowCredentialsHeaderValue.getValue("ListenerArgs.routingHttpResponseAccessControlAllowCredentialsHeaderValue");
    }

    /**
     * Specifies which headers can be used during the request. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `*`, `Accept`, `Accept-Language`, `Cache-Control`, `Content-Language`, `Content-Length`, `Content-Type`, `Expires`, `Last-Modified`, `Pragma`. Dependent on your use-case other headers can be exposed and then set as a value consult the Access-Control-Allow-Headers documentation.
     * 
     */
    private UndeferrableValue<String> routingHttpResponseAccessControlAllowHeadersHeaderValue;

    public String routingHttpResponseAccessControlAllowHeadersHeaderValue() {
        if (routingHttpResponseAccessControlAllowHeadersHeaderValue == null) return null;
        return routingHttpResponseAccessControlAllowHeadersHeaderValue.getValue("ListenerArgs.routingHttpResponseAccessControlAllowHeadersHeaderValue");
    }

    /**
     * Set which HTTP methods are allowed when accessing the server from a different origin. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `GET`, `HEAD`, `POST`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE` or `PATCH`.
     * 
     */
    private UndeferrableValue<String> routingHttpResponseAccessControlAllowMethodsHeaderValue;

    public String routingHttpResponseAccessControlAllowMethodsHeaderValue() {
        if (routingHttpResponseAccessControlAllowMethodsHeaderValue == null) return null;
        return routingHttpResponseAccessControlAllowMethodsHeaderValue.getValue("ListenerArgs.routingHttpResponseAccessControlAllowMethodsHeaderValue");
    }

    /**
     * Specifies which origins are allowed to access the server. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. A valid value is a URI, eg: `https://example.com`.
     * 
     */
    private UndeferrableValue<String> routingHttpResponseAccessControlAllowOriginHeaderValue;

    public String routingHttpResponseAccessControlAllowOriginHeaderValue() {
        if (routingHttpResponseAccessControlAllowOriginHeaderValue == null) return null;
        return routingHttpResponseAccessControlAllowOriginHeaderValue.getValue("ListenerArgs.routingHttpResponseAccessControlAllowOriginHeaderValue");
    }

    /**
     * Specifies whether the browser should include credentials such as cookies or authentication when making requests. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `*`, `Cache-Control`, `Content-Language`, `Content-Length`, `Content-Type`, `Expires`, `Last-Modified`, or `Pragma`. Dependent on your use-case other headers can be exposed, consult the Access-Control-Expose-Headers documentation.
     * 
     */
    private UndeferrableValue<String> routingHttpResponseAccessControlExposeHeadersHeaderValue;

    public String routingHttpResponseAccessControlExposeHeadersHeaderValue() {
        if (routingHttpResponseAccessControlExposeHeadersHeaderValue == null) return null;
        return routingHttpResponseAccessControlExposeHeadersHeaderValue.getValue("ListenerArgs.routingHttpResponseAccessControlExposeHeadersHeaderValue");
    }

    /**
     * Specifies how long the results of a preflight request can be cached, in seconds. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are between `0` and `86400`. This value is browser specific, consult the Access-Control-Max-Age documentation.
     * 
     */
    private UndeferrableValue<String> routingHttpResponseAccessControlMaxAgeHeaderValue;

    public String routingHttpResponseAccessControlMaxAgeHeaderValue() {
        if (routingHttpResponseAccessControlMaxAgeHeaderValue == null) return null;
        return routingHttpResponseAccessControlMaxAgeHeaderValue.getValue("ListenerArgs.routingHttpResponseAccessControlMaxAgeHeaderValue");
    }

    /**
     * Specifies restrictions enforced by the browser to help minimize the risk of certain types of security threats. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Values for this are extensive, and can be impactful when set, consult Content-Security-Policy documentation.
     * 
     */
    private UndeferrableValue<String> routingHttpResponseContentSecurityPolicyHeaderValue;

    public String routingHttpResponseContentSecurityPolicyHeaderValue() {
        if (routingHttpResponseContentSecurityPolicyHeaderValue == null) return null;
        return routingHttpResponseContentSecurityPolicyHeaderValue.getValue("ListenerArgs.routingHttpResponseContentSecurityPolicyHeaderValue");
    }

    /**
     * Enables you to allow or remove the HTTP response server header. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. Valid values are `true` or `false`.
     * 
     */
    private UndeferrableValue<Boolean> routingHttpResponseServerEnabled;

    public Boolean routingHttpResponseServerEnabled() {
        if (routingHttpResponseServerEnabled == null) return null;
        return routingHttpResponseServerEnabled.getValue("ListenerArgs.routingHttpResponseServerEnabled");
    }

    /**
     * Informs browsers that the site should only be accessed using HTTPS, and that any future attempts to access it using HTTP should automatically be converted to HTTPS. Default values are `max-age=31536000; includeSubDomains; preload` consult the Strict-Transport-Security documentation for further details.
     * 
     */
    private UndeferrableValue<String> routingHttpResponseStrictTransportSecurityHeaderValue;

    public String routingHttpResponseStrictTransportSecurityHeaderValue() {
        if (routingHttpResponseStrictTransportSecurityHeaderValue == null) return null;
        return routingHttpResponseStrictTransportSecurityHeaderValue.getValue("ListenerArgs.routingHttpResponseStrictTransportSecurityHeaderValue");
    }

    /**
     * Indicates whether the MIME types advertised in the Content-Type headers should be followed and not be changed. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid value is `nosniff`.
     * 
     */
    private UndeferrableValue<String> routingHttpResponseXContentTypeOptionsHeaderValue;

    public String routingHttpResponseXContentTypeOptionsHeaderValue() {
        if (routingHttpResponseXContentTypeOptionsHeaderValue == null) return null;
        return routingHttpResponseXContentTypeOptionsHeaderValue.getValue("ListenerArgs.routingHttpResponseXContentTypeOptionsHeaderValue");
    }

    /**
     * Indicates whether the browser is allowed to render a page in a frame, iframe, embed or object. Can only be set if protocol is `HTTP` or `HTTPS` for Application Load Balancers. Not supported for Network Load Balancer, or with a Gateway Load Balancer. The only valid values are `DENY`, `SAMEORIGIN`, or `ALLOW-FROM https://example.com`.
     * 
     */
    private UndeferrableValue<String> routingHttpResponseXFrameOptionsHeaderValue;

    public String routingHttpResponseXFrameOptionsHeaderValue() {
        if (routingHttpResponseXFrameOptionsHeaderValue == null) return null;
        return routingHttpResponseXFrameOptionsHeaderValue.getValue("ListenerArgs.routingHttpResponseXFrameOptionsHeaderValue");
    }

    /**
     * Name of the SSL Policy for the listener. Required if `protocol` is `HTTPS` or `TLS`. Default is `ELBSecurityPolicy-2016-08`.
     * 
     */
    private UndeferrableValue<String> sslPolicy;

    public String sslPolicy() {
        if (sslPolicy == null) return null;
        return sslPolicy.getValue("ListenerArgs.sslPolicy");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * &gt; **Note::** When a `Name` key is specified in the map, the AWS Console maps the value to the `Name Tag` column value inside the `Listener Rules` table within a specific load balancer listener page. Otherwise, the value resolves to `Default`.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ListenerArgs.tags");
    }

    /**
     * TCP idle timeout value in seconds. Can only be set if protocol is `TCP` on Network Load Balancer, or with a Gateway Load Balancer. Not supported for Application Load Balancers. Valid values are between `60` and `6000` inclusive. Default: `350`.
     * 
     */
    private UndeferrableValue<Integer> tcpIdleTimeoutSeconds;

    public Integer tcpIdleTimeoutSeconds() {
        if (tcpIdleTimeoutSeconds == null) return null;
        return tcpIdleTimeoutSeconds.getValue("ListenerArgs.tcpIdleTimeoutSeconds");
    }

}
