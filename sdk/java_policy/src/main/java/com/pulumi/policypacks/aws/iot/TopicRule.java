// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.iot;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleCloudwatchAlarm;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleCloudwatchLog;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleCloudwatchMetric;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleDynamodb;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleDynamodbv2;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleElasticsearch;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleErrorAction;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleFirehose;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleHttp;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleIotAnalytic;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleIotEvent;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleKafka;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleKinesis;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleLambda;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleRepublish;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleS3;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleSns;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleSqs;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleStepFunction;
import com.pulumi.policypacks.aws.iot.outputs.TopicRuleTimestream;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:iot/topicRule:TopicRule")
public final class TopicRule extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the topic rule
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'TopicRule.arn' is not present");
    }

    @PolicyResourceProperty(name="cloudwatchAlarms", flag="unknown_cloudwatchAlarms")
    private @Nullable List<TopicRuleCloudwatchAlarm> value_cloudwatchAlarms;
    private boolean unknown_cloudwatchAlarms;
    public @Nullable List<TopicRuleCloudwatchAlarm> cloudwatchAlarms() {
        if (!unknown_cloudwatchAlarms) return value_cloudwatchAlarms;
        throw new UndeferrableValueException("Value 'TopicRule.cloudwatchAlarms' is not present");
    }

    @PolicyResourceProperty(name="cloudwatchLogs", flag="unknown_cloudwatchLogs")
    private @Nullable List<TopicRuleCloudwatchLog> value_cloudwatchLogs;
    private boolean unknown_cloudwatchLogs;
    public @Nullable List<TopicRuleCloudwatchLog> cloudwatchLogs() {
        if (!unknown_cloudwatchLogs) return value_cloudwatchLogs;
        throw new UndeferrableValueException("Value 'TopicRule.cloudwatchLogs' is not present");
    }

    @PolicyResourceProperty(name="cloudwatchMetrics", flag="unknown_cloudwatchMetrics")
    private @Nullable List<TopicRuleCloudwatchMetric> value_cloudwatchMetrics;
    private boolean unknown_cloudwatchMetrics;
    public @Nullable List<TopicRuleCloudwatchMetric> cloudwatchMetrics() {
        if (!unknown_cloudwatchMetrics) return value_cloudwatchMetrics;
        throw new UndeferrableValueException("Value 'TopicRule.cloudwatchMetrics' is not present");
    }

    /**
     * The description of the rule.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'TopicRule.description' is not present");
    }

    @PolicyResourceProperty(name="dynamodbs", flag="unknown_dynamodbs")
    private @Nullable List<TopicRuleDynamodb> value_dynamodbs;
    private boolean unknown_dynamodbs;
    public @Nullable List<TopicRuleDynamodb> dynamodbs() {
        if (!unknown_dynamodbs) return value_dynamodbs;
        throw new UndeferrableValueException("Value 'TopicRule.dynamodbs' is not present");
    }

    @PolicyResourceProperty(name="dynamodbv2s", flag="unknown_dynamodbv2s")
    private @Nullable List<TopicRuleDynamodbv2> value_dynamodbv2s;
    private boolean unknown_dynamodbv2s;
    public @Nullable List<TopicRuleDynamodbv2> dynamodbv2s() {
        if (!unknown_dynamodbv2s) return value_dynamodbv2s;
        throw new UndeferrableValueException("Value 'TopicRule.dynamodbv2s' is not present");
    }

    @PolicyResourceProperty(name="elasticsearch", flag="unknown_elasticsearch")
    private @Nullable List<TopicRuleElasticsearch> value_elasticsearch;
    private boolean unknown_elasticsearch;
    public @Nullable List<TopicRuleElasticsearch> elasticsearch() {
        if (!unknown_elasticsearch) return value_elasticsearch;
        throw new UndeferrableValueException("Value 'TopicRule.elasticsearch' is not present");
    }

    /**
     * Specifies whether the rule is enabled.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private Boolean value_enabled;
    private boolean unknown_enabled;
    public Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'TopicRule.enabled' is not present");
    }

    /**
     * Configuration block with error action to be associated with the rule. See the documentation for `cloudwatch_alarm`, `cloudwatch_logs`, `cloudwatch_metric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iot_analytics`, `iot_events`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `step_functions`, `timestream` configuration blocks for further configuration details.
     * 
     */
    @PolicyResourceProperty(name="errorAction", flag="unknown_errorAction")
    private @Nullable TopicRuleErrorAction value_errorAction;
    private boolean unknown_errorAction;
    public @Nullable TopicRuleErrorAction errorAction() {
        if (!unknown_errorAction) return value_errorAction;
        throw new UndeferrableValueException("Value 'TopicRule.errorAction' is not present");
    }

    @PolicyResourceProperty(name="firehoses", flag="unknown_firehoses")
    private @Nullable List<TopicRuleFirehose> value_firehoses;
    private boolean unknown_firehoses;
    public @Nullable List<TopicRuleFirehose> firehoses() {
        if (!unknown_firehoses) return value_firehoses;
        throw new UndeferrableValueException("Value 'TopicRule.firehoses' is not present");
    }

    @PolicyResourceProperty(name="https", flag="unknown_https")
    private @Nullable List<TopicRuleHttp> value_https;
    private boolean unknown_https;
    public @Nullable List<TopicRuleHttp> https() {
        if (!unknown_https) return value_https;
        throw new UndeferrableValueException("Value 'TopicRule.https' is not present");
    }

    @PolicyResourceProperty(name="iotAnalytics", flag="unknown_iotAnalytics")
    private @Nullable List<TopicRuleIotAnalytic> value_iotAnalytics;
    private boolean unknown_iotAnalytics;
    public @Nullable List<TopicRuleIotAnalytic> iotAnalytics() {
        if (!unknown_iotAnalytics) return value_iotAnalytics;
        throw new UndeferrableValueException("Value 'TopicRule.iotAnalytics' is not present");
    }

    @PolicyResourceProperty(name="iotEvents", flag="unknown_iotEvents")
    private @Nullable List<TopicRuleIotEvent> value_iotEvents;
    private boolean unknown_iotEvents;
    public @Nullable List<TopicRuleIotEvent> iotEvents() {
        if (!unknown_iotEvents) return value_iotEvents;
        throw new UndeferrableValueException("Value 'TopicRule.iotEvents' is not present");
    }

    @PolicyResourceProperty(name="kafkas", flag="unknown_kafkas")
    private @Nullable List<TopicRuleKafka> value_kafkas;
    private boolean unknown_kafkas;
    public @Nullable List<TopicRuleKafka> kafkas() {
        if (!unknown_kafkas) return value_kafkas;
        throw new UndeferrableValueException("Value 'TopicRule.kafkas' is not present");
    }

    @PolicyResourceProperty(name="kineses", flag="unknown_kineses")
    private @Nullable List<TopicRuleKinesis> value_kineses;
    private boolean unknown_kineses;
    public @Nullable List<TopicRuleKinesis> kineses() {
        if (!unknown_kineses) return value_kineses;
        throw new UndeferrableValueException("Value 'TopicRule.kineses' is not present");
    }

    @PolicyResourceProperty(name="lambdas", flag="unknown_lambdas")
    private @Nullable List<TopicRuleLambda> value_lambdas;
    private boolean unknown_lambdas;
    public @Nullable List<TopicRuleLambda> lambdas() {
        if (!unknown_lambdas) return value_lambdas;
        throw new UndeferrableValueException("Value 'TopicRule.lambdas' is not present");
    }

    /**
     * The name of the rule.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'TopicRule.name' is not present");
    }

    @PolicyResourceProperty(name="republishes", flag="unknown_republishes")
    private @Nullable List<TopicRuleRepublish> value_republishes;
    private boolean unknown_republishes;
    public @Nullable List<TopicRuleRepublish> republishes() {
        if (!unknown_republishes) return value_republishes;
        throw new UndeferrableValueException("Value 'TopicRule.republishes' is not present");
    }

    @PolicyResourceProperty(name="s3", flag="unknown_s3")
    private @Nullable List<TopicRuleS3> value_s3;
    private boolean unknown_s3;
    public @Nullable List<TopicRuleS3> s3() {
        if (!unknown_s3) return value_s3;
        throw new UndeferrableValueException("Value 'TopicRule.s3' is not present");
    }

    @PolicyResourceProperty(name="sns", flag="unknown_sns")
    private @Nullable List<TopicRuleSns> value_sns;
    private boolean unknown_sns;
    public @Nullable List<TopicRuleSns> sns() {
        if (!unknown_sns) return value_sns;
        throw new UndeferrableValueException("Value 'TopicRule.sns' is not present");
    }

    /**
     * The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
     * 
     */
    @PolicyResourceProperty(name="sql", flag="unknown_sql")
    private String value_sql;
    private boolean unknown_sql;
    public String sql() {
        if (!unknown_sql) return value_sql;
        throw new UndeferrableValueException("Value 'TopicRule.sql' is not present");
    }

    /**
     * The version of the SQL rules engine to use when evaluating the rule.
     * 
     */
    @PolicyResourceProperty(name="sqlVersion", flag="unknown_sqlVersion")
    private String value_sqlVersion;
    private boolean unknown_sqlVersion;
    public String sqlVersion() {
        if (!unknown_sqlVersion) return value_sqlVersion;
        throw new UndeferrableValueException("Value 'TopicRule.sqlVersion' is not present");
    }

    @PolicyResourceProperty(name="sqs", flag="unknown_sqs")
    private @Nullable List<TopicRuleSqs> value_sqs;
    private boolean unknown_sqs;
    public @Nullable List<TopicRuleSqs> sqs() {
        if (!unknown_sqs) return value_sqs;
        throw new UndeferrableValueException("Value 'TopicRule.sqs' is not present");
    }

    @PolicyResourceProperty(name="stepFunctions", flag="unknown_stepFunctions")
    private @Nullable List<TopicRuleStepFunction> value_stepFunctions;
    private boolean unknown_stepFunctions;
    public @Nullable List<TopicRuleStepFunction> stepFunctions() {
        if (!unknown_stepFunctions) return value_stepFunctions;
        throw new UndeferrableValueException("Value 'TopicRule.stepFunctions' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'TopicRule.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'TopicRule.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timestreams", flag="unknown_timestreams")
    private @Nullable List<TopicRuleTimestream> value_timestreams;
    private boolean unknown_timestreams;
    public @Nullable List<TopicRuleTimestream> timestreams() {
        if (!unknown_timestreams) return value_timestreams;
        throw new UndeferrableValueException("Value 'TopicRule.timestreams' is not present");
    }

}
