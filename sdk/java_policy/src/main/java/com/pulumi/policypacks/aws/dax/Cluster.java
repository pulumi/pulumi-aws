// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dax;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.dax.outputs.ClusterNode;
import com.pulumi.policypacks.aws.dax.outputs.ClusterServerSideEncryption;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:dax/cluster:Cluster")
public final class Cluster extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the DAX cluster
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Cluster.arn' is not present");
    }

    /**
     * List of Availability Zones in which the
     * nodes will be created
     * 
     */
    @PolicyResourceProperty(name="availabilityZones", flag="unknown_availabilityZones")
    private @Nullable List<String> value_availabilityZones;
    private boolean unknown_availabilityZones;
    public @Nullable List<String> availabilityZones() {
        if (!unknown_availabilityZones) return value_availabilityZones;
        throw new UndeferrableValueException("Value 'Cluster.availabilityZones' is not present");
    }

    /**
     * The DNS name of the DAX cluster without the port appended
     * 
     */
    @PolicyResourceProperty(name="clusterAddress", flag="unknown_clusterAddress")
    private String value_clusterAddress;
    private boolean unknown_clusterAddress;
    public String clusterAddress() {
        if (!unknown_clusterAddress) return value_clusterAddress;
        throw new UndeferrableValueException("Value 'Cluster.clusterAddress' is not present");
    }

    /**
     * The type of encryption the
     * cluster&#39;s endpoint should support. Valid values are: `NONE` and `TLS`.
     * Default value is `NONE`.
     * 
     */
    @PolicyResourceProperty(name="clusterEndpointEncryptionType", flag="unknown_clusterEndpointEncryptionType")
    private @Nullable String value_clusterEndpointEncryptionType;
    private boolean unknown_clusterEndpointEncryptionType;
    public @Nullable String clusterEndpointEncryptionType() {
        if (!unknown_clusterEndpointEncryptionType) return value_clusterEndpointEncryptionType;
        throw new UndeferrableValueException("Value 'Cluster.clusterEndpointEncryptionType' is not present");
    }

    /**
     * Group identifier. DAX converts this name to
     * lowercase
     * 
     */
    @PolicyResourceProperty(name="clusterName", flag="unknown_clusterName")
    private String value_clusterName;
    private boolean unknown_clusterName;
    public String clusterName() {
        if (!unknown_clusterName) return value_clusterName;
        throw new UndeferrableValueException("Value 'Cluster.clusterName' is not present");
    }

    /**
     * The configuration endpoint for this DAX cluster,
     * consisting of a DNS name and a port number
     * 
     */
    @PolicyResourceProperty(name="configurationEndpoint", flag="unknown_configurationEndpoint")
    private String value_configurationEndpoint;
    private boolean unknown_configurationEndpoint;
    public String configurationEndpoint() {
        if (!unknown_configurationEndpoint) return value_configurationEndpoint;
        throw new UndeferrableValueException("Value 'Cluster.configurationEndpoint' is not present");
    }

    /**
     * Description for the cluster
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Cluster.description' is not present");
    }

    /**
     * A valid Amazon Resource Name (ARN) that identifies
     * an IAM role. At runtime, DAX will assume this role and use the role&#39;s
     * permissions to access DynamoDB on your behalf
     * 
     */
    @PolicyResourceProperty(name="iamRoleArn", flag="unknown_iamRoleArn")
    private String value_iamRoleArn;
    private boolean unknown_iamRoleArn;
    public String iamRoleArn() {
        if (!unknown_iamRoleArn) return value_iamRoleArn;
        throw new UndeferrableValueException("Value 'Cluster.iamRoleArn' is not present");
    }

    /**
     * Specifies the weekly time range for when
     * maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
     * (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
     * `sun:05:00-sun:09:00`
     * 
     */
    @PolicyResourceProperty(name="maintenanceWindow", flag="unknown_maintenanceWindow")
    private String value_maintenanceWindow;
    private boolean unknown_maintenanceWindow;
    public String maintenanceWindow() {
        if (!unknown_maintenanceWindow) return value_maintenanceWindow;
        throw new UndeferrableValueException("Value 'Cluster.maintenanceWindow' is not present");
    }

    /**
     * The compute and memory capacity of the nodes. See
     * [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
     * 
     */
    @PolicyResourceProperty(name="nodeType", flag="unknown_nodeType")
    private String value_nodeType;
    private boolean unknown_nodeType;
    public String nodeType() {
        if (!unknown_nodeType) return value_nodeType;
        throw new UndeferrableValueException("Value 'Cluster.nodeType' is not present");
    }

    /**
     * List of node objects including `id`, `address`, `port` and
     * `availability_zone`. Referenceable e.g., as
     * `${aws_dax_cluster.test.nodes.0.address}`
     * 
     */
    @PolicyResourceProperty(name="nodes", flag="unknown_nodes")
    private List<ClusterNode> value_nodes;
    private boolean unknown_nodes;
    public List<ClusterNode> nodes() {
        if (!unknown_nodes) return value_nodes;
        throw new UndeferrableValueException("Value 'Cluster.nodes' is not present");
    }

    /**
     * An Amazon Resource Name (ARN) of an
     * SNS topic to send DAX notifications to. Example:
     * `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
     * 
     */
    @PolicyResourceProperty(name="notificationTopicArn", flag="unknown_notificationTopicArn")
    private @Nullable String value_notificationTopicArn;
    private boolean unknown_notificationTopicArn;
    public @Nullable String notificationTopicArn() {
        if (!unknown_notificationTopicArn) return value_notificationTopicArn;
        throw new UndeferrableValueException("Value 'Cluster.notificationTopicArn' is not present");
    }

    /**
     * Name of the parameter group to associate
     * with this DAX cluster
     * 
     */
    @PolicyResourceProperty(name="parameterGroupName", flag="unknown_parameterGroupName")
    private String value_parameterGroupName;
    private boolean unknown_parameterGroupName;
    public String parameterGroupName() {
        if (!unknown_parameterGroupName) return value_parameterGroupName;
        throw new UndeferrableValueException("Value 'Cluster.parameterGroupName' is not present");
    }

    /**
     * The port used by the configuration endpoint
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'Cluster.port' is not present");
    }

    /**
     * The number of nodes in the DAX cluster. A
     * replication factor of 1 will create a single-node cluster, without any read
     * replicas
     * 
     */
    @PolicyResourceProperty(name="replicationFactor", flag="unknown_replicationFactor")
    private Integer value_replicationFactor;
    private boolean unknown_replicationFactor;
    public Integer replicationFactor() {
        if (!unknown_replicationFactor) return value_replicationFactor;
        throw new UndeferrableValueException("Value 'Cluster.replicationFactor' is not present");
    }

    /**
     * One or more VPC security groups associated
     * with the cluster
     * 
     */
    @PolicyResourceProperty(name="securityGroupIds", flag="unknown_securityGroupIds")
    private List<String> value_securityGroupIds;
    private boolean unknown_securityGroupIds;
    public List<String> securityGroupIds() {
        if (!unknown_securityGroupIds) return value_securityGroupIds;
        throw new UndeferrableValueException("Value 'Cluster.securityGroupIds' is not present");
    }

    /**
     * Encrypt at rest options
     * 
     */
    @PolicyResourceProperty(name="serverSideEncryption", flag="unknown_serverSideEncryption")
    private @Nullable ClusterServerSideEncryption value_serverSideEncryption;
    private boolean unknown_serverSideEncryption;
    public @Nullable ClusterServerSideEncryption serverSideEncryption() {
        if (!unknown_serverSideEncryption) return value_serverSideEncryption;
        throw new UndeferrableValueException("Value 'Cluster.serverSideEncryption' is not present");
    }

    /**
     * Name of the subnet group to be used for the
     * cluster
     * 
     */
    @PolicyResourceProperty(name="subnetGroupName", flag="unknown_subnetGroupName")
    private String value_subnetGroupName;
    private boolean unknown_subnetGroupName;
    public String subnetGroupName() {
        if (!unknown_subnetGroupName) return value_subnetGroupName;
        throw new UndeferrableValueException("Value 'Cluster.subnetGroupName' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Cluster.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Cluster.tagsAll' is not present");
    }

}
