// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch;

import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudwatch.InternetMonitorHealthEventsConfig;
import com.pulumi.policypacks.aws.cloudwatch.InternetMonitorInternetMeasurementsLogDelivery;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;


@PolicyResourceType(type="aws:cloudwatch/internetMonitor:InternetMonitor")
public final class InternetMonitor extends com.pulumi.resources.PolicyResource {

    /**
     * ARN of the Monitor.
     * 
     */
    public String arn;



    /**
     * Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there&#39;s an internet issue that affects your application end users. See Health Events Config below.
     * 
     */
    public InternetMonitorHealthEventsConfig healthEventsConfig;



    /**
     * Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
     * 
     */
    public InternetMonitorInternetMeasurementsLogDelivery internetMeasurementsLogDelivery;



    /**
     * The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
     * 
     */
    public Integer maxCityNetworksToMonitor;



    /**
     * The name of the monitor.
     * 
     * The following arguments are optional:
     * 
     */
    public String monitorName;



    /**
     * The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
     * 
     */
    public List<String> resources;



    /**
     * The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
     * 
     */
    public String status;



    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Map<String,String> tags;



    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Map<String,String> tagsAll;



    /**
     * The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
     * 
     */
    public Integer trafficPercentageToMonitor;



}
