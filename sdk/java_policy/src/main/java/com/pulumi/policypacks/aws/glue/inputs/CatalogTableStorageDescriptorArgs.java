// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.glue.inputs.CatalogTableStorageDescriptorColumnArgs;
import com.pulumi.policypacks.aws.glue.inputs.CatalogTableStorageDescriptorSchemaReferenceArgs;
import com.pulumi.policypacks.aws.glue.inputs.CatalogTableStorageDescriptorSerDeInfoArgs;
import com.pulumi.policypacks.aws.glue.inputs.CatalogTableStorageDescriptorSkewedInfoArgs;
import com.pulumi.policypacks.aws.glue.inputs.CatalogTableStorageDescriptorSortColumnArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class CatalogTableStorageDescriptorArgs {

    /**
     * List of locations that point to the path where a Delta table is located.
     * 
     */
    @PolicyResourceProperty(name="additionalLocations", flag="unknown_additionalLocations")
    private List<String> value_additionalLocations;
    private boolean unknown_additionalLocations;
    public List<String> additionalLocations() {
        if (!unknown_additionalLocations) return value_additionalLocations;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.additionalLocations' is not present");
    }

    /**
     * List of reducer grouping columns, clustering columns, and bucketing columns in the table.
     * 
     */
    @PolicyResourceProperty(name="bucketColumns", flag="unknown_bucketColumns")
    private List<String> value_bucketColumns;
    private boolean unknown_bucketColumns;
    public List<String> bucketColumns() {
        if (!unknown_bucketColumns) return value_bucketColumns;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.bucketColumns' is not present");
    }

    /**
     * Configuration block for columns in the table. See `columns` below.
     * 
     */
    @PolicyResourceProperty(name="columns", flag="unknown_columns")
    private List<CatalogTableStorageDescriptorColumnArgs> value_columns;
    private boolean unknown_columns;
    public List<CatalogTableStorageDescriptorColumnArgs> columns() {
        if (!unknown_columns) return value_columns;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.columns' is not present");
    }

    /**
     * Whether the data in the table is compressed.
     * 
     */
    @PolicyResourceProperty(name="compressed", flag="unknown_compressed")
    private Boolean value_compressed;
    private boolean unknown_compressed;
    public Boolean compressed() {
        if (!unknown_compressed) return value_compressed;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.compressed' is not present");
    }

    /**
     * Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
     * 
     */
    @PolicyResourceProperty(name="inputFormat", flag="unknown_inputFormat")
    private String value_inputFormat;
    private boolean unknown_inputFormat;
    public String inputFormat() {
        if (!unknown_inputFormat) return value_inputFormat;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.inputFormat' is not present");
    }

    /**
     * Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
     * 
     */
    @PolicyResourceProperty(name="location", flag="unknown_location")
    private String value_location;
    private boolean unknown_location;
    public String location() {
        if (!unknown_location) return value_location;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.location' is not present");
    }

    /**
     * Must be specified if the table contains any dimension columns.
     * 
     */
    @PolicyResourceProperty(name="numberOfBuckets", flag="unknown_numberOfBuckets")
    private Integer value_numberOfBuckets;
    private boolean unknown_numberOfBuckets;
    public Integer numberOfBuckets() {
        if (!unknown_numberOfBuckets) return value_numberOfBuckets;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.numberOfBuckets' is not present");
    }

    /**
     * Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
     * 
     */
    @PolicyResourceProperty(name="outputFormat", flag="unknown_outputFormat")
    private String value_outputFormat;
    private boolean unknown_outputFormat;
    public String outputFormat() {
        if (!unknown_outputFormat) return value_outputFormat;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.outputFormat' is not present");
    }

    /**
     * User-supplied properties in key-value form.
     * 
     */
    @PolicyResourceProperty(name="parameters", flag="unknown_parameters")
    private Map<String,String> value_parameters;
    private boolean unknown_parameters;
    public Map<String,String> parameters() {
        if (!unknown_parameters) return value_parameters;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.parameters' is not present");
    }

    /**
     * Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
     * 
     */
    @PolicyResourceProperty(name="schemaReference", flag="unknown_schemaReference")
    private CatalogTableStorageDescriptorSchemaReferenceArgs value_schemaReference;
    private boolean unknown_schemaReference;
    public CatalogTableStorageDescriptorSchemaReferenceArgs schemaReference() {
        if (!unknown_schemaReference) return value_schemaReference;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.schemaReference' is not present");
    }

    /**
     * Configuration block for serialization and deserialization (&#34;SerDe&#34;) information. See `ser_de_info` below.
     * 
     */
    @PolicyResourceProperty(name="serDeInfo", flag="unknown_serDeInfo")
    private CatalogTableStorageDescriptorSerDeInfoArgs value_serDeInfo;
    private boolean unknown_serDeInfo;
    public CatalogTableStorageDescriptorSerDeInfoArgs serDeInfo() {
        if (!unknown_serDeInfo) return value_serDeInfo;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.serDeInfo' is not present");
    }

    /**
     * Configuration block with information about values that appear very frequently in a column (skewed values). See `skewed_info` below.
     * 
     */
    @PolicyResourceProperty(name="skewedInfo", flag="unknown_skewedInfo")
    private CatalogTableStorageDescriptorSkewedInfoArgs value_skewedInfo;
    private boolean unknown_skewedInfo;
    public CatalogTableStorageDescriptorSkewedInfoArgs skewedInfo() {
        if (!unknown_skewedInfo) return value_skewedInfo;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.skewedInfo' is not present");
    }

    /**
     * Configuration block for the sort order of each bucket in the table. See `sort_columns` below.
     * 
     */
    @PolicyResourceProperty(name="sortColumns", flag="unknown_sortColumns")
    private List<CatalogTableStorageDescriptorSortColumnArgs> value_sortColumns;
    private boolean unknown_sortColumns;
    public List<CatalogTableStorageDescriptorSortColumnArgs> sortColumns() {
        if (!unknown_sortColumns) return value_sortColumns;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.sortColumns' is not present");
    }

    /**
     * Whether the table data is stored in subdirectories.
     * 
     */
    @PolicyResourceProperty(name="storedAsSubDirectories", flag="unknown_storedAsSubDirectories")
    private Boolean value_storedAsSubDirectories;
    private boolean unknown_storedAsSubDirectories;
    public Boolean storedAsSubDirectories() {
        if (!unknown_storedAsSubDirectories) return value_storedAsSubDirectories;
        throw new UndeferrableValueException("Value 'CatalogTableStorageDescriptorArgs.storedAsSubDirectories' is not present");
    }

}
