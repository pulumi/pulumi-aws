// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.docdb;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:docdb/eventSubscription:EventSubscription")
public final class EventSubscription extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name of the DocumentDB event notification subscription
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'EventSubscription.arn' is not present");
    }

    /**
     * The AWS customer account associated with the DocumentDB event notification subscription
     * 
     */
    @PolicyResourceProperty(name="customerAwsId", flag="unknown_customerAwsId")
    private String value_customerAwsId;
    private boolean unknown_customerAwsId;
    public String customerAwsId() {
        if (!unknown_customerAwsId) return value_customerAwsId;
        throw new UndeferrableValueException("Value 'EventSubscription.customerAwsId' is not present");
    }

    /**
     * A boolean flag to enable/disable the subscription. Defaults to true.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private @Nullable Boolean value_enabled;
    private boolean unknown_enabled;
    public @Nullable Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'EventSubscription.enabled' is not present");
    }

    /**
     * A list of event categories for a SourceType that you want to subscribe to. See https://docs.aws.amazon.com/documentdb/latest/developerguide/API_Event.html or run `aws docdb describe-event-categories`.
     * 
     */
    @PolicyResourceProperty(name="eventCategories", flag="unknown_eventCategories")
    private @Nullable List<String> value_eventCategories;
    private boolean unknown_eventCategories;
    public @Nullable List<String> eventCategories() {
        if (!unknown_eventCategories) return value_eventCategories;
        throw new UndeferrableValueException("Value 'EventSubscription.eventCategories' is not present");
    }

    /**
     * The name of the DocumentDB event subscription. By default generated by this provider.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'EventSubscription.name' is not present");
    }

    /**
     * The name of the DocumentDB event subscription. Conflicts with `name`.
     * 
     */
    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'EventSubscription.namePrefix' is not present");
    }

    @PolicyResourceProperty(name="snsTopicArn", flag="unknown_snsTopicArn")
    private String value_snsTopicArn;
    private boolean unknown_snsTopicArn;
    public String snsTopicArn() {
        if (!unknown_snsTopicArn) return value_snsTopicArn;
        throw new UndeferrableValueException("Value 'EventSubscription.snsTopicArn' is not present");
    }

    /**
     * A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a source_type must also be specified.
     * 
     */
    @PolicyResourceProperty(name="sourceIds", flag="unknown_sourceIds")
    private @Nullable List<String> value_sourceIds;
    private boolean unknown_sourceIds;
    public @Nullable List<String> sourceIds() {
        if (!unknown_sourceIds) return value_sourceIds;
        throw new UndeferrableValueException("Value 'EventSubscription.sourceIds' is not present");
    }

    /**
     * The type of source that will be generating the events. Valid options are `db-instance`, `db-cluster`, `db-parameter-group`, `db-security-group`,`  db-cluster-snapshot `. If not set, all sources will be subscribed to.
     * 
     */
    @PolicyResourceProperty(name="sourceType", flag="unknown_sourceType")
    private @Nullable String value_sourceType;
    private boolean unknown_sourceType;
    public @Nullable String sourceType() {
        if (!unknown_sourceType) return value_sourceType;
        throw new UndeferrableValueException("Value 'EventSubscription.sourceType' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'EventSubscription.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'EventSubscription.tagsAll' is not present");
    }

}
