// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ecs.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


public final class TaskDefinitionVolumeDockerVolumeConfigurationArgs {

    /**
     * If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
     * 
     */
    private UndeferrableValue<Boolean> autoprovision;

    public Boolean autoprovision() {
        if (autoprovision == null) return null;
        return autoprovision.getValue("TaskDefinitionVolumeDockerVolumeConfigurationArgs.autoprovision");
    }

    /**
     * Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
     * 
     */
    private UndeferrableValue<String> driver;

    public String driver() {
        if (driver == null) return null;
        return driver.getValue("TaskDefinitionVolumeDockerVolumeConfigurationArgs.driver");
    }

    /**
     * Map of Docker driver specific options.
     * 
     */
    private UndeferrableValue<Map<String,String>> driverOpts;

    public Map<String,String> driverOpts() {
        if (driverOpts == null) return null;
        return driverOpts.getValue("TaskDefinitionVolumeDockerVolumeConfigurationArgs.driverOpts");
    }

    /**
     * Map of custom metadata to add to your Docker volume.
     * 
     */
    private UndeferrableValue<Map<String,String>> labels;

    public Map<String,String> labels() {
        if (labels == null) return null;
        return labels.getValue("TaskDefinitionVolumeDockerVolumeConfigurationArgs.labels");
    }

    /**
     * Scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as `shared` persist after the task stops.
     * 
     */
    private UndeferrableValue<String> scope;

    public String scope() {
        if (scope == null) return null;
        return scope.getValue("TaskDefinitionVolumeDockerVolumeConfigurationArgs.scope");
    }

}
