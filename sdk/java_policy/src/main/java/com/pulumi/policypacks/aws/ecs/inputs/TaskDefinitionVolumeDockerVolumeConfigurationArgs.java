// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ecs.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


public final class TaskDefinitionVolumeDockerVolumeConfigurationArgs {

    /**
     * If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
     * 
     */
    @PolicyResourceProperty(name="autoprovision", flag="unknown_autoprovision")
    private Boolean value_autoprovision;
    private boolean unknown_autoprovision;
    public Boolean autoprovision() {
        if (!unknown_autoprovision) return value_autoprovision;
        throw new UndeferrableValueException("Value 'TaskDefinitionVolumeDockerVolumeConfigurationArgs.autoprovision' is not present");
    }

    /**
     * Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
     * 
     */
    @PolicyResourceProperty(name="driver", flag="unknown_driver")
    private String value_driver;
    private boolean unknown_driver;
    public String driver() {
        if (!unknown_driver) return value_driver;
        throw new UndeferrableValueException("Value 'TaskDefinitionVolumeDockerVolumeConfigurationArgs.driver' is not present");
    }

    /**
     * Map of Docker driver specific options.
     * 
     */
    @PolicyResourceProperty(name="driverOpts", flag="unknown_driverOpts")
    private Map<String,String> value_driverOpts;
    private boolean unknown_driverOpts;
    public Map<String,String> driverOpts() {
        if (!unknown_driverOpts) return value_driverOpts;
        throw new UndeferrableValueException("Value 'TaskDefinitionVolumeDockerVolumeConfigurationArgs.driverOpts' is not present");
    }

    /**
     * Map of custom metadata to add to your Docker volume.
     * 
     */
    @PolicyResourceProperty(name="labels", flag="unknown_labels")
    private Map<String,String> value_labels;
    private boolean unknown_labels;
    public Map<String,String> labels() {
        if (!unknown_labels) return value_labels;
        throw new UndeferrableValueException("Value 'TaskDefinitionVolumeDockerVolumeConfigurationArgs.labels' is not present");
    }

    /**
     * Scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as `shared` persist after the task stops.
     * 
     */
    @PolicyResourceProperty(name="scope", flag="unknown_scope")
    private String value_scope;
    private boolean unknown_scope;
    public String scope() {
        if (!unknown_scope) return value_scope;
        throw new UndeferrableValueException("Value 'TaskDefinitionVolumeDockerVolumeConfigurationArgs.scope' is not present");
    }

}
