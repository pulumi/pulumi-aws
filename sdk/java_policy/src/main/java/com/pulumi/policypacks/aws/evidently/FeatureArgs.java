// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.evidently;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.evidently.inputs.FeatureVariationArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:evidently/feature:Feature")
public final class FeatureArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `default_variation`, the first variation listed in the `variations` structure is used as the default variation.
     * 
     */
    private UndeferrableValue<String> defaultVariation;

    public String defaultVariation() {
        if (defaultVariation == null) return null;
        return defaultVariation.getValue("FeatureArgs.defaultVariation");
    }

    /**
     * Specifies the description of the feature.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("FeatureArgs.description");
    }

    /**
     * Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
     * 
     */
    private UndeferrableValue<Map<String,String>> entityOverrides;

    public Map<String,String> entityOverrides() {
        if (entityOverrides == null) return null;
        return entityOverrides.getValue("FeatureArgs.entityOverrides");
    }

    /**
     * Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
     * 
     */
    private UndeferrableValue<String> evaluationStrategy;

    public String evaluationStrategy() {
        if (evaluationStrategy == null) return null;
        return evaluationStrategy.getValue("FeatureArgs.evaluationStrategy");
    }

    /**
     * The name for the new feature. Minimum length of `1`. Maximum length of `127`.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("FeatureArgs.name");
    }

    /**
     * The name or ARN of the project that is to contain the new feature.
     * 
     */
    private UndeferrableValue<String> project;

    public String project() {
        if (project == null) return null;
        return project.getValue("FeatureArgs.project");
    }

    /**
     * Tags to apply to the feature. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("FeatureArgs.tags");
    }

    /**
     * One or more blocks that contain the configuration of the feature&#39;s different variations. Detailed below
     * 
     */
    private UndeferrableValue<List<FeatureVariationArgs>> variations;

    public List<FeatureVariationArgs> variations() {
        if (variations == null) return null;
        return variations.getValue("FeatureArgs.variations");
    }

}
