// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.gamelift;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.gamelift.inputs.GameSessionQueuePlayerLatencyPolicyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:gamelift/gameSessionQueue:GameSessionQueue")
public final class GameSessionQueueArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Information to be added to all events that are related to this game session queue.
     * 
     */
    private UndeferrableValue<String> customEventData;

    public String customEventData() {
        if (customEventData == null) return null;
        return customEventData.getValue("GameSessionQueueArgs.customEventData");
    }

    /**
     * List of fleet/alias ARNs used by session queue for placing game sessions.
     * 
     */
    private UndeferrableValue<List<String>> destinations;

    public List<String> destinations() {
        if (destinations == null) return null;
        return destinations.getValue("GameSessionQueueArgs.destinations");
    }

    /**
     * Name of the session queue.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("GameSessionQueueArgs.name");
    }

    /**
     * An SNS topic ARN that is set up to receive game session placement notifications.
     * 
     */
    private UndeferrableValue<String> notificationTarget;

    public String notificationTarget() {
        if (notificationTarget == null) return null;
        return notificationTarget.getValue("GameSessionQueueArgs.notificationTarget");
    }

    /**
     * One or more policies used to choose fleet based on player latency. See below.
     * 
     */
    private UndeferrableValue<List<GameSessionQueuePlayerLatencyPolicyArgs>> playerLatencyPolicies;

    public List<GameSessionQueuePlayerLatencyPolicyArgs> playerLatencyPolicies() {
        if (playerLatencyPolicies == null) return null;
        return playerLatencyPolicies.getValue("GameSessionQueueArgs.playerLatencyPolicies");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("GameSessionQueueArgs.tags");
    }

    /**
     * Maximum time a game session request can remain in the queue.
     * 
     */
    private UndeferrableValue<Integer> timeoutInSeconds;

    public Integer timeoutInSeconds() {
        if (timeoutInSeconds == null) return null;
        return timeoutInSeconds.getValue("GameSessionQueueArgs.timeoutInSeconds");
    }

}
