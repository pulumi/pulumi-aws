// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lambda;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lambda/invocation:Invocation")
public final class Invocation extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Name of the lambda function.
     * 
     */
    @PolicyResourceProperty(name="functionName", flag="unknown_functionName")
    private String value_functionName;
    private boolean unknown_functionName;
    public String functionName() {
        if (!unknown_functionName) return value_functionName;
        throw new UndeferrableValueException("Value 'Invocation.functionName' is not present");
    }

    /**
     * JSON payload to the lambda function.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="input", flag="unknown_input")
    private String value_input;
    private boolean unknown_input;
    public String input() {
        if (!unknown_input) return value_input;
        throw new UndeferrableValueException("Value 'Invocation.input' is not present");
    }

    /**
     * Lifecycle scope of the resource to manage. Valid values are `CREATE_ONLY` and `CRUD`. Defaults to `CREATE_ONLY`. `CREATE_ONLY` will invoke the function only on creation or replacement. `CRUD` will invoke the function on each lifecycle event, and augment the input JSON payload with additional lifecycle information.
     * 
     */
    @PolicyResourceProperty(name="lifecycleScope", flag="unknown_lifecycleScope")
    private @Nullable String value_lifecycleScope;
    private boolean unknown_lifecycleScope;
    public @Nullable String lifecycleScope() {
        if (!unknown_lifecycleScope) return value_lifecycleScope;
        throw new UndeferrableValueException("Value 'Invocation.lifecycleScope' is not present");
    }

    /**
     * Qualifier (i.e., version) of the lambda function. Defaults to `$LATEST`.
     * 
     */
    @PolicyResourceProperty(name="qualifier", flag="unknown_qualifier")
    private @Nullable String value_qualifier;
    private boolean unknown_qualifier;
    public @Nullable String qualifier() {
        if (!unknown_qualifier) return value_qualifier;
        throw new UndeferrableValueException("Value 'Invocation.qualifier' is not present");
    }

    /**
     * String result of the lambda function invocation.
     * 
     */
    @PolicyResourceProperty(name="result", flag="unknown_result")
    private String value_result;
    private boolean unknown_result;
    public String result() {
        if (!unknown_result) return value_result;
        throw new UndeferrableValueException("Value 'Invocation.result' is not present");
    }

    @PolicyResourceProperty(name="terraformKey", flag="unknown_terraformKey")
    private @Nullable String value_terraformKey;
    private boolean unknown_terraformKey;
    public @Nullable String terraformKey() {
        if (!unknown_terraformKey) return value_terraformKey;
        throw new UndeferrableValueException("Value 'Invocation.terraformKey' is not present");
    }

    /**
     * Map of arbitrary keys and values that, when changed, will trigger a re-invocation.
     * 
     */
    @PolicyResourceProperty(name="triggers", flag="unknown_triggers")
    private @Nullable Map<String,String> value_triggers;
    private boolean unknown_triggers;
    public @Nullable Map<String,String> triggers() {
        if (!unknown_triggers) return value_triggers;
        throw new UndeferrableValueException("Value 'Invocation.triggers' is not present");
    }

}
