// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.inputs.AnalysisParametersArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.AnalysisPermissionArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.AnalysisSourceEntityArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:quicksight/analysis:Analysis")
public final class AnalysisArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Identifier for the analysis.
     * 
     */
    private UndeferrableValue<String> analysisId;

    public String analysisId() {
        if (analysisId == null) return null;
        return analysisId.getValue("AnalysisArgs.analysisId");
    }

    /**
     * AWS account ID.
     * 
     */
    private UndeferrableValue<String> awsAccountId;

    public String awsAccountId() {
        if (awsAccountId == null) return null;
        return awsAccountId.getValue("AnalysisArgs.awsAccountId");
    }

    /**
     * Display name for the analysis.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("AnalysisArgs.name");
    }

    /**
     * The parameters for the creation of the analysis, which you want to use to override the default settings. An analysis can have any type of parameters, and some parameters might accept multiple values. See parameters.
     * 
     */
    private UndeferrableValue<AnalysisParametersArgs> parameters;

    public AnalysisParametersArgs parameters() {
        if (parameters == null) return null;
        return parameters.getValue("AnalysisArgs.parameters");
    }

    /**
     * A set of resource permissions on the analysis. Maximum of 64 items. See permissions.
     * 
     */
    private UndeferrableValue<List<AnalysisPermissionArgs>> permissions;

    public List<AnalysisPermissionArgs> permissions() {
        if (permissions == null) return null;
        return permissions.getValue("AnalysisArgs.permissions");
    }

    /**
     * A value that specifies the number of days that Amazon QuickSight waits before it deletes the analysis. Use `0` to force deletion without recovery. Minimum value of `7`. Maximum value of `30`. Default to `30`.
     * 
     */
    private UndeferrableValue<Integer> recoveryWindowInDays;

    public Integer recoveryWindowInDays() {
        if (recoveryWindowInDays == null) return null;
        return recoveryWindowInDays.getValue("AnalysisArgs.recoveryWindowInDays");
    }

    /**
     * The entity that you are using as a source when you create the analysis (template). Only one of `definition` or `source_entity` should be configured. See source_entity.
     * 
     */
    private UndeferrableValue<AnalysisSourceEntityArgs> sourceEntity;

    public AnalysisSourceEntityArgs sourceEntity() {
        if (sourceEntity == null) return null;
        return sourceEntity.getValue("AnalysisArgs.sourceEntity");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("AnalysisArgs.tags");
    }

    /**
     * The Amazon Resource Name (ARN) of the theme that is being used for this analysis. The theme ARN must exist in the same AWS account where you create the analysis.
     * 
     */
    private UndeferrableValue<String> themeArn;

    public String themeArn() {
        if (themeArn == null) return null;
        return themeArn.getValue("AnalysisArgs.themeArn");
    }

}
