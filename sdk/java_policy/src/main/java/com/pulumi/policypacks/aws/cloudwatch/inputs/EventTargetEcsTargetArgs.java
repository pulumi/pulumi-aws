// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.cloudwatch.inputs.EventTargetEcsTargetCapacityProviderStrategyArgs;
import com.pulumi.policypacks.aws.cloudwatch.inputs.EventTargetEcsTargetNetworkConfigurationArgs;
import com.pulumi.policypacks.aws.cloudwatch.inputs.EventTargetEcsTargetOrderedPlacementStrategyArgs;
import com.pulumi.policypacks.aws.cloudwatch.inputs.EventTargetEcsTargetPlacementConstraintArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class EventTargetEcsTargetArgs {

    /**
     * The capacity provider strategy to use for the task. If a `capacity_provider_strategy` specified, the `launch_type` parameter must be omitted. If no `capacity_provider_strategy` or `launch_type` is specified, the default capacity provider strategy for the cluster is used. Can be one or more. See below.
     * 
     */
    private UndeferrableValue<List<EventTargetEcsTargetCapacityProviderStrategyArgs>> capacityProviderStrategies;

    public List<EventTargetEcsTargetCapacityProviderStrategyArgs> capacityProviderStrategies() {
        if (capacityProviderStrategies == null) return null;
        return capacityProviderStrategies.getValue("EventTargetEcsTargetArgs.capacityProviderStrategies");
    }

    /**
     * Specifies whether to enable Amazon ECS managed tags for the task.
     * 
     */
    private UndeferrableValue<Boolean> enableEcsManagedTags;

    public Boolean enableEcsManagedTags() {
        if (enableEcsManagedTags == null) return null;
        return enableEcsManagedTags.getValue("EventTargetEcsTargetArgs.enableEcsManagedTags");
    }

    /**
     * Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
     * 
     */
    private UndeferrableValue<Boolean> enableExecuteCommand;

    public Boolean enableExecuteCommand() {
        if (enableExecuteCommand == null) return null;
        return enableExecuteCommand.getValue("EventTargetEcsTargetArgs.enableExecuteCommand");
    }

    /**
     * Specifies an ECS task group for the task. The maximum length is 255 characters.
     * 
     */
    private UndeferrableValue<String> group;

    public String group() {
        if (group == null) return null;
        return group.getValue("EventTargetEcsTargetArgs.group");
    }

    /**
     * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values include: `EC2`, `EXTERNAL`, or `FARGATE`.
     * 
     */
    private UndeferrableValue<String> launchType;

    public String launchType() {
        if (launchType == null) return null;
        return launchType.getValue("EventTargetEcsTargetArgs.launchType");
    }

    /**
     * Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if `launch_type` is `FARGATE` because the awsvpc mode is required for Fargate tasks.
     * 
     */
    private UndeferrableValue<EventTargetEcsTargetNetworkConfigurationArgs> networkConfiguration;

    public EventTargetEcsTargetNetworkConfigurationArgs networkConfiguration() {
        if (networkConfiguration == null) return null;
        return networkConfiguration.getValue("EventTargetEcsTargetArgs.networkConfiguration");
    }

    /**
     * An array of placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
     * 
     */
    private UndeferrableValue<List<EventTargetEcsTargetOrderedPlacementStrategyArgs>> orderedPlacementStrategies;

    public List<EventTargetEcsTargetOrderedPlacementStrategyArgs> orderedPlacementStrategies() {
        if (orderedPlacementStrategies == null) return null;
        return orderedPlacementStrategies.getValue("EventTargetEcsTargetArgs.orderedPlacementStrategies");
    }

    /**
     * An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). See Below.
     * 
     */
    private UndeferrableValue<List<EventTargetEcsTargetPlacementConstraintArgs>> placementConstraints;

    public List<EventTargetEcsTargetPlacementConstraintArgs> placementConstraints() {
        if (placementConstraints == null) return null;
        return placementConstraints.getValue("EventTargetEcsTargetArgs.placementConstraints");
    }

    /**
     * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
     * 
     */
    private UndeferrableValue<String> platformVersion;

    public String platformVersion() {
        if (platformVersion == null) return null;
        return platformVersion.getValue("EventTargetEcsTargetArgs.platformVersion");
    }

    /**
     * Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. The only valid value is: `TASK_DEFINITION`.
     * 
     */
    private UndeferrableValue<String> propagateTags;

    public String propagateTags() {
        if (propagateTags == null) return null;
        return propagateTags.getValue("EventTargetEcsTargetArgs.propagateTags");
    }

    /**
     * A map of tags to assign to ecs resources.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("EventTargetEcsTargetArgs.tags");
    }

    /**
     * The number of tasks to create based on the TaskDefinition. Defaults to `1`.
     * 
     */
    private UndeferrableValue<Integer> taskCount;

    public Integer taskCount() {
        if (taskCount == null) return null;
        return taskCount.getValue("EventTargetEcsTargetArgs.taskCount");
    }

    /**
     * The ARN of the task definition to use if the event target is an Amazon ECS cluster.
     * 
     */
    private UndeferrableValue<String> taskDefinitionArn;

    public String taskDefinitionArn() {
        if (taskDefinitionArn == null) return null;
        return taskDefinitionArn.getValue("EventTargetEcsTargetArgs.taskDefinitionArn");
    }

}
