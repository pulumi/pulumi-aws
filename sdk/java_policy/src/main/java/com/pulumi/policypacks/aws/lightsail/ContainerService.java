// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lightsail.outputs.ContainerServicePrivateRegistryAccess;
import com.pulumi.policypacks.aws.lightsail.outputs.ContainerServicePublicDomainNames;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lightsail/containerService:ContainerService")
public final class ContainerService extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) of the container service.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ContainerService.arn' is not present");
    }

    /**
     * The Availability Zone. Follows the format us-east-2a (case-sensitive).
     * 
     */
    @PolicyResourceProperty(name="availabilityZone", flag="unknown_availabilityZone")
    private String value_availabilityZone;
    private boolean unknown_availabilityZone;
    public String availabilityZone() {
        if (!unknown_availabilityZone) return value_availabilityZone;
        throw new UndeferrableValueException("Value 'ContainerService.availabilityZone' is not present");
    }

    @PolicyResourceProperty(name="createdAt", flag="unknown_createdAt")
    private String value_createdAt;
    private boolean unknown_createdAt;
    public String createdAt() {
        if (!unknown_createdAt) return value_createdAt;
        throw new UndeferrableValueException("Value 'ContainerService.createdAt' is not present");
    }

    /**
     * A Boolean value indicating whether the container service is disabled. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="isDisabled", flag="unknown_isDisabled")
    private @Nullable Boolean value_isDisabled;
    private boolean unknown_isDisabled;
    public @Nullable Boolean isDisabled() {
        if (!unknown_isDisabled) return value_isDisabled;
        throw new UndeferrableValueException("Value 'ContainerService.isDisabled' is not present");
    }

    /**
     * The name for the container service. Names must be of length 1 to 63, and be
     * unique within each AWS Region in your Lightsail account.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'ContainerService.name' is not present");
    }

    /**
     * The power specification for the container service. The power specifies the amount of memory,
     * the number of vCPUs, and the monthly price of each node of the container service.
     * Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
     * 
     */
    @PolicyResourceProperty(name="power", flag="unknown_power")
    private String value_power;
    private boolean unknown_power;
    public String power() {
        if (!unknown_power) return value_power;
        throw new UndeferrableValueException("Value 'ContainerService.power' is not present");
    }

    /**
     * The ID of the power of the container service.
     * 
     */
    @PolicyResourceProperty(name="powerId", flag="unknown_powerId")
    private String value_powerId;
    private boolean unknown_powerId;
    public String powerId() {
        if (!unknown_powerId) return value_powerId;
        throw new UndeferrableValueException("Value 'ContainerService.powerId' is not present");
    }

    /**
     * The principal ARN of the container service. The principal ARN can be used to create a trust
     * relationship between your standard AWS account and your Lightsail container service. This allows you to give your
     * service permission to access resources in your standard AWS account.
     * 
     */
    @PolicyResourceProperty(name="principalArn", flag="unknown_principalArn")
    private String value_principalArn;
    private boolean unknown_principalArn;
    public String principalArn() {
        if (!unknown_principalArn) return value_principalArn;
        throw new UndeferrableValueException("Value 'ContainerService.principalArn' is not present");
    }

    /**
     * The private domain name of the container service. The private domain name is accessible only
     * by other resources within the default virtual private cloud (VPC) of your Lightsail account.
     * 
     */
    @PolicyResourceProperty(name="privateDomainName", flag="unknown_privateDomainName")
    private String value_privateDomainName;
    private boolean unknown_privateDomainName;
    public String privateDomainName() {
        if (!unknown_privateDomainName) return value_privateDomainName;
        throw new UndeferrableValueException("Value 'ContainerService.privateDomainName' is not present");
    }

    /**
     * An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
     * 
     */
    @PolicyResourceProperty(name="privateRegistryAccess", flag="unknown_privateRegistryAccess")
    private ContainerServicePrivateRegistryAccess value_privateRegistryAccess;
    private boolean unknown_privateRegistryAccess;
    public ContainerServicePrivateRegistryAccess privateRegistryAccess() {
        if (!unknown_privateRegistryAccess) return value_privateRegistryAccess;
        throw new UndeferrableValueException("Value 'ContainerService.privateRegistryAccess' is not present");
    }

    /**
     * The public domain names to use with the container service, such as example.com
     * and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
     * specify are used when you create a deployment with a container configured as the public endpoint of your container
     * service. If you don&#39;t specify public domain names, then you can use the default domain of the container service.
     * Defined below.
     * 
     */
    @PolicyResourceProperty(name="publicDomainNames", flag="unknown_publicDomainNames")
    private @Nullable ContainerServicePublicDomainNames value_publicDomainNames;
    private boolean unknown_publicDomainNames;
    public @Nullable ContainerServicePublicDomainNames publicDomainNames() {
        if (!unknown_publicDomainNames) return value_publicDomainNames;
        throw new UndeferrableValueException("Value 'ContainerService.publicDomainNames' is not present");
    }

    /**
     * The Lightsail resource type of the container service (i.e., ContainerService).
     * 
     */
    @PolicyResourceProperty(name="resourceType", flag="unknown_resourceType")
    private String value_resourceType;
    private boolean unknown_resourceType;
    public String resourceType() {
        if (!unknown_resourceType) return value_resourceType;
        throw new UndeferrableValueException("Value 'ContainerService.resourceType' is not present");
    }

    /**
     * The scale specification for the container service. The scale specifies the allocated compute
     * nodes of the container service.
     * 
     */
    @PolicyResourceProperty(name="scale", flag="unknown_scale")
    private Integer value_scale;
    private boolean unknown_scale;
    public Integer scale() {
        if (!unknown_scale) return value_scale;
        throw new UndeferrableValueException("Value 'ContainerService.scale' is not present");
    }

    /**
     * The current state of the container service.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private String value_state;
    private boolean unknown_state;
    public String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'ContainerService.state' is not present");
    }

    /**
     * Map of container service tags. To create a key-only tag, use an empty string as the value. To tag at launch, specify the tags in the Launch Template. If
     * configured with a provider
     * `default_tags` configuration block
     * present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ContainerService.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider
     * `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ContainerService.tagsAll' is not present");
    }

    /**
     * The publicly accessible URL of the container service. If no public endpoint is specified in the
     * currentDeployment, this URL returns a 404 response.
     * 
     */
    @PolicyResourceProperty(name="url", flag="unknown_url")
    private String value_url;
    private boolean unknown_url;
    public String url() {
        if (!unknown_url) return value_url;
        throw new UndeferrableValueException("Value 'ContainerService.url' is not present");
    }

}
