// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.sagemaker.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.sagemaker.outputs.ModelPrimaryContainerImageConfig;
import com.pulumi.policypacks.aws.sagemaker.outputs.ModelPrimaryContainerModelDataSource;
import com.pulumi.policypacks.aws.sagemaker.outputs.ModelPrimaryContainerMultiModelConfig;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


public final class ModelPrimaryContainer {

    /**
     * The DNS host name for the container.
     * 
     */
    private @Nullable UndeferrableValue<String> containerHostname;

    public @Nullable String containerHostname() {
        if (containerHostname == null) return null;
        return containerHostname.getValue("ModelPrimaryContainer.containerHostname");
    }

    /**
     * Environment variables for the Docker container.
     * A list of key value pairs.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> environment;

    public @Nullable Map<String,String> environment() {
        if (environment == null) return null;
        return environment.getValue("ModelPrimaryContainer.environment");
    }

    /**
     * The registry path where the inference code image is stored in Amazon ECR.
     * 
     */
    private @Nullable UndeferrableValue<String> image;

    public @Nullable String image() {
        if (image == null) return null;
        return image.getValue("ModelPrimaryContainer.image");
    }

    /**
     * Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
     * 
     */
    private @Nullable UndeferrableValue<ModelPrimaryContainerImageConfig> imageConfig;

    public @Nullable ModelPrimaryContainerImageConfig imageConfig() {
        if (imageConfig == null) return null;
        return imageConfig.getValue("ModelPrimaryContainer.imageConfig");
    }

    /**
     * The inference specification name in the model package version.
     * 
     */
    private @Nullable UndeferrableValue<String> inferenceSpecificationName;

    public @Nullable String inferenceSpecificationName() {
        if (inferenceSpecificationName == null) return null;
        return inferenceSpecificationName.getValue("ModelPrimaryContainer.inferenceSpecificationName");
    }

    /**
     * The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
     * 
     */
    private @Nullable UndeferrableValue<String> mode;

    public @Nullable String mode() {
        if (mode == null) return null;
        return mode.getValue("ModelPrimaryContainer.mode");
    }

    /**
     * The location of model data to deploy. Use this for uncompressed model deployment. For information about how to deploy an uncompressed model, see [Deploying uncompressed models](https://docs.aws.amazon.com/sagemaker/latest/dg/large-model-inference-uncompressed.html) in the _AWS SageMaker AI Developer Guide_.
     * 
     */
    private @Nullable UndeferrableValue<ModelPrimaryContainerModelDataSource> modelDataSource;

    public @Nullable ModelPrimaryContainerModelDataSource modelDataSource() {
        if (modelDataSource == null) return null;
        return modelDataSource.getValue("ModelPrimaryContainer.modelDataSource");
    }

    /**
     * The URL for the S3 location where model artifacts are stored.
     * 
     */
    private @Nullable UndeferrableValue<String> modelDataUrl;

    public @Nullable String modelDataUrl() {
        if (modelDataUrl == null) return null;
        return modelDataUrl.getValue("ModelPrimaryContainer.modelDataUrl");
    }

    /**
     * The Amazon Resource Name (ARN) of the model package to use to create the model.
     * 
     */
    private @Nullable UndeferrableValue<String> modelPackageName;

    public @Nullable String modelPackageName() {
        if (modelPackageName == null) return null;
        return modelPackageName.getValue("ModelPrimaryContainer.modelPackageName");
    }

    /**
     * Specifies additional configuration for multi-model endpoints. see Multi Model Config.
     * 
     */
    private @Nullable UndeferrableValue<ModelPrimaryContainerMultiModelConfig> multiModelConfig;

    public @Nullable ModelPrimaryContainerMultiModelConfig multiModelConfig() {
        if (multiModelConfig == null) return null;
        return multiModelConfig.getValue("ModelPrimaryContainer.multiModelConfig");
    }

}
