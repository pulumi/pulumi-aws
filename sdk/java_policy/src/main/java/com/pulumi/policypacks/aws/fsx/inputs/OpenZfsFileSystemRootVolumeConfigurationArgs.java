// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.fsx.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.fsx.inputs.OpenZfsFileSystemRootVolumeConfigurationNfsExportsArgs;
import com.pulumi.policypacks.aws.fsx.inputs.OpenZfsFileSystemRootVolumeConfigurationUserAndGroupQuotaArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class OpenZfsFileSystemRootVolumeConfigurationArgs {

    /**
     * A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
     * 
     */
    @PolicyResourceProperty(name="copyTagsToSnapshots", flag="unknown_copyTagsToSnapshots")
    private Boolean value_copyTagsToSnapshots;
    private boolean unknown_copyTagsToSnapshots;
    public Boolean copyTagsToSnapshots() {
        if (!unknown_copyTagsToSnapshots) return value_copyTagsToSnapshots;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemRootVolumeConfigurationArgs.copyTagsToSnapshots' is not present");
    }

    /**
     * Method used to compress the data on the volume. Valid values are `LZ4`, `NONE` or `ZSTD`. Child volumes that don&#39;t specify compression option will inherit from parent volume. This option on file system applies to the root volume.
     * 
     */
    @PolicyResourceProperty(name="dataCompressionType", flag="unknown_dataCompressionType")
    private String value_dataCompressionType;
    private boolean unknown_dataCompressionType;
    public String dataCompressionType() {
        if (!unknown_dataCompressionType) return value_dataCompressionType;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemRootVolumeConfigurationArgs.dataCompressionType' is not present");
    }

    /**
     * NFS export configuration for the root volume. Exactly 1 item. See `nfs_exports` Block for details.
     * 
     */
    @PolicyResourceProperty(name="nfsExports", flag="unknown_nfsExports")
    private OpenZfsFileSystemRootVolumeConfigurationNfsExportsArgs value_nfsExports;
    private boolean unknown_nfsExports;
    public OpenZfsFileSystemRootVolumeConfigurationNfsExportsArgs nfsExports() {
        if (!unknown_nfsExports) return value_nfsExports;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemRootVolumeConfigurationArgs.nfsExports' is not present");
    }

    /**
     * specifies whether the volume is read-only. Default is false.
     * 
     */
    @PolicyResourceProperty(name="readOnly", flag="unknown_readOnly")
    private Boolean value_readOnly;
    private boolean unknown_readOnly;
    public Boolean readOnly() {
        if (!unknown_readOnly) return value_readOnly;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemRootVolumeConfigurationArgs.readOnly' is not present");
    }

    /**
     * Specifies the record size of an OpenZFS root volume, in kibibytes (KiB). Valid values are `4`, `8`, `16`, `32`, `64`, `128`, `256`, `512`, or `1024` KiB. The default is `128` KiB.
     * 
     */
    @PolicyResourceProperty(name="recordSizeKib", flag="unknown_recordSizeKib")
    private Integer value_recordSizeKib;
    private boolean unknown_recordSizeKib;
    public Integer recordSizeKib() {
        if (!unknown_recordSizeKib) return value_recordSizeKib;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemRootVolumeConfigurationArgs.recordSizeKib' is not present");
    }

    /**
     * Specify how much storage users or groups can use on the volume. Maximum of 100 items. See `user_and_group_quotas` Block for details.
     * 
     */
    @PolicyResourceProperty(name="userAndGroupQuotas", flag="unknown_userAndGroupQuotas")
    private List<OpenZfsFileSystemRootVolumeConfigurationUserAndGroupQuotaArgs> value_userAndGroupQuotas;
    private boolean unknown_userAndGroupQuotas;
    public List<OpenZfsFileSystemRootVolumeConfigurationUserAndGroupQuotaArgs> userAndGroupQuotas() {
        if (!unknown_userAndGroupQuotas) return value_userAndGroupQuotas;
        throw new UndeferrableValueException("Value 'OpenZfsFileSystemRootVolumeConfigurationArgs.userAndGroupQuotas' is not present");
    }

}
