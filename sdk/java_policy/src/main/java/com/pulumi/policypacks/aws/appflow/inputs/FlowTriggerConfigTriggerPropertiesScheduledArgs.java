// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appflow.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class FlowTriggerConfigTriggerPropertiesScheduledArgs {

    /**
     * Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
     * 
     */
    @PolicyResourceProperty(name="dataPullMode", flag="unknown_dataPullMode")
    private String value_dataPullMode;
    private boolean unknown_dataPullMode;
    public String dataPullMode() {
        if (!unknown_dataPullMode) return value_dataPullMode;
        throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.dataPullMode' is not present");
    }

    /**
     * Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
     * 
     */
    @PolicyResourceProperty(name="firstExecutionFrom", flag="unknown_firstExecutionFrom")
    private String value_firstExecutionFrom;
    private boolean unknown_firstExecutionFrom;
    public String firstExecutionFrom() {
        if (!unknown_firstExecutionFrom) return value_firstExecutionFrom;
        throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.firstExecutionFrom' is not present");
    }

    /**
     * Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
     * 
     */
    @PolicyResourceProperty(name="scheduleEndTime", flag="unknown_scheduleEndTime")
    private String value_scheduleEndTime;
    private boolean unknown_scheduleEndTime;
    public String scheduleEndTime() {
        if (!unknown_scheduleEndTime) return value_scheduleEndTime;
        throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.scheduleEndTime' is not present");
    }

    /**
     * Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
     * 
     */
    @PolicyResourceProperty(name="scheduleExpression", flag="unknown_scheduleExpression")
    private String value_scheduleExpression;
    private boolean unknown_scheduleExpression;
    public String scheduleExpression() {
        if (!unknown_scheduleExpression) return value_scheduleExpression;
        throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.scheduleExpression' is not present");
    }

    /**
     * Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
     * 
     */
    @PolicyResourceProperty(name="scheduleOffset", flag="unknown_scheduleOffset")
    private Integer value_scheduleOffset;
    private boolean unknown_scheduleOffset;
    public Integer scheduleOffset() {
        if (!unknown_scheduleOffset) return value_scheduleOffset;
        throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.scheduleOffset' is not present");
    }

    /**
     * Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
     * 
     */
    @PolicyResourceProperty(name="scheduleStartTime", flag="unknown_scheduleStartTime")
    private String value_scheduleStartTime;
    private boolean unknown_scheduleStartTime;
    public String scheduleStartTime() {
        if (!unknown_scheduleStartTime) return value_scheduleStartTime;
        throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.scheduleStartTime' is not present");
    }

    /**
     * Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    @PolicyResourceProperty(name="timezone", flag="unknown_timezone")
    private String value_timezone;
    private boolean unknown_timezone;
    public String timezone() {
        if (!unknown_timezone) return value_timezone;
        throw new UndeferrableValueException("Value 'FlowTriggerConfigTriggerPropertiesScheduledArgs.timezone' is not present");
    }

}
