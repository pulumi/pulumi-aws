// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rum.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class AppMonitorAppMonitorConfigurationArgs {

    /**
     * If you set this to `true`, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
     * 
     */
    private UndeferrableValue<Boolean> allowCookies;

    public Boolean allowCookies() {
        if (allowCookies == null) return null;
        return allowCookies.getValue("AppMonitorAppMonitorConfigurationArgs.allowCookies");
    }

    /**
     * If you set this to `true`, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
     * 
     */
    private UndeferrableValue<Boolean> enableXray;

    public Boolean enableXray() {
        if (enableXray == null) return null;
        return enableXray.getValue("AppMonitorAppMonitorConfigurationArgs.enableXray");
    }

    /**
     * A list of URLs in your website or application to exclude from RUM data collection.
     * 
     */
    private UndeferrableValue<List<String>> excludedPages;

    public List<String> excludedPages() {
        if (excludedPages == null) return null;
        return excludedPages.getValue("AppMonitorAppMonitorConfigurationArgs.excludedPages");
    }

    /**
     * A list of pages in the CloudWatch RUM console that are to be displayed with a &#34;favorite&#34; icon.
     * 
     */
    private UndeferrableValue<List<String>> favoritePages;

    public List<String> favoritePages() {
        if (favoritePages == null) return null;
        return favoritePages.getValue("AppMonitorAppMonitorConfigurationArgs.favoritePages");
    }

    /**
     * The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
     * 
     */
    private UndeferrableValue<String> guestRoleArn;

    public String guestRoleArn() {
        if (guestRoleArn == null) return null;
        return guestRoleArn.getValue("AppMonitorAppMonitorConfigurationArgs.guestRoleArn");
    }

    /**
     * The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
     * 
     */
    private UndeferrableValue<String> identityPoolId;

    public String identityPoolId() {
        if (identityPoolId == null) return null;
        return identityPoolId.getValue("AppMonitorAppMonitorConfigurationArgs.identityPoolId");
    }

    /**
     * If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
     * 
     */
    private UndeferrableValue<List<String>> includedPages;

    public List<String> includedPages() {
        if (includedPages == null) return null;
        return includedPages.getValue("AppMonitorAppMonitorConfigurationArgs.includedPages");
    }

    /**
     * Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is `0.1`.
     * 
     */
    private UndeferrableValue<Double> sessionSampleRate;

    public Double sessionSampleRate() {
        if (sessionSampleRate == null) return null;
        return sessionSampleRate.getValue("AppMonitorAppMonitorConfigurationArgs.sessionSampleRate");
    }

    /**
     * An array that lists the types of telemetry data that this app monitor is to collect. Valid values are `errors`, `performance`, and `http`.
     * 
     */
    private UndeferrableValue<List<String>> telemetries;

    public List<String> telemetries() {
        if (telemetries == null) return null;
        return telemetries.getValue("AppMonitorAppMonitorConfigurationArgs.telemetries");
    }

}
