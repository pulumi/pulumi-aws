// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.wafv2.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementAndStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementByteMatchStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementGeoMatchStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementIpSetReferenceStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementLabelMatchStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementNotStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementOrStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementRateBasedStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementRegexMatchStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementSizeConstraintStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementSqliMatchStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.RuleGroupRuleStatementXssMatchStatementArgs;
import javax.annotation.Nullable;


public final class RuleGroupRuleStatementArgs {

    /**
     * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementAndStatementArgs> andStatement;

    public RuleGroupRuleStatementAndStatementArgs andStatement() {
        if (andStatement == null) return null;
        return andStatement.getValue("RuleGroupRuleStatementArgs.andStatement");
    }

    /**
     * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementByteMatchStatementArgs> byteMatchStatement;

    public RuleGroupRuleStatementByteMatchStatementArgs byteMatchStatement() {
        if (byteMatchStatement == null) return null;
        return byteMatchStatement.getValue("RuleGroupRuleStatementArgs.byteMatchStatement");
    }

    /**
     * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementGeoMatchStatementArgs> geoMatchStatement;

    public RuleGroupRuleStatementGeoMatchStatementArgs geoMatchStatement() {
        if (geoMatchStatement == null) return null;
        return geoMatchStatement.getValue("RuleGroupRuleStatementArgs.geoMatchStatement");
    }

    /**
     * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementIpSetReferenceStatementArgs> ipSetReferenceStatement;

    public RuleGroupRuleStatementIpSetReferenceStatementArgs ipSetReferenceStatement() {
        if (ipSetReferenceStatement == null) return null;
        return ipSetReferenceStatement.getValue("RuleGroupRuleStatementArgs.ipSetReferenceStatement");
    }

    /**
     * A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. See Label Match Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementLabelMatchStatementArgs> labelMatchStatement;

    public RuleGroupRuleStatementLabelMatchStatementArgs labelMatchStatement() {
        if (labelMatchStatement == null) return null;
        return labelMatchStatement.getValue("RuleGroupRuleStatementArgs.labelMatchStatement");
    }

    /**
     * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementNotStatementArgs> notStatement;

    public RuleGroupRuleStatementNotStatementArgs notStatement() {
        if (notStatement == null) return null;
        return notStatement.getValue("RuleGroupRuleStatementArgs.notStatement");
    }

    /**
     * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementOrStatementArgs> orStatement;

    public RuleGroupRuleStatementOrStatementArgs orStatement() {
        if (orStatement == null) return null;
        return orStatement.getValue("RuleGroupRuleStatementArgs.orStatement");
    }

    /**
     * A rate-based rule tracks the rate of requests for each originating `IP address`, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any `5-minute` time span. This statement can not be nested. See Rate Based Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementRateBasedStatementArgs> rateBasedStatement;

    public RuleGroupRuleStatementRateBasedStatementArgs rateBasedStatement() {
        if (rateBasedStatement == null) return null;
        return rateBasedStatement.getValue("RuleGroupRuleStatementArgs.rateBasedStatement");
    }

    /**
     * A rule statement used to search web request components for a match against a single regular expression. See Regex Match Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementRegexMatchStatementArgs> regexMatchStatement;

    public RuleGroupRuleStatementRegexMatchStatementArgs regexMatchStatement() {
        if (regexMatchStatement == null) return null;
        return regexMatchStatement.getValue("RuleGroupRuleStatementArgs.regexMatchStatement");
    }

    /**
     * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementRegexPatternSetReferenceStatementArgs> regexPatternSetReferenceStatement;

    public RuleGroupRuleStatementRegexPatternSetReferenceStatementArgs regexPatternSetReferenceStatement() {
        if (regexPatternSetReferenceStatement == null) return null;
        return regexPatternSetReferenceStatement.getValue("RuleGroupRuleStatementArgs.regexPatternSetReferenceStatement");
    }

    /**
     * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (&gt;) or less than (&lt;). See Size Constraint Statement below for more details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementSizeConstraintStatementArgs> sizeConstraintStatement;

    public RuleGroupRuleStatementSizeConstraintStatementArgs sizeConstraintStatement() {
        if (sizeConstraintStatement == null) return null;
        return sizeConstraintStatement.getValue("RuleGroupRuleStatementArgs.sizeConstraintStatement");
    }

    /**
     * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementSqliMatchStatementArgs> sqliMatchStatement;

    public RuleGroupRuleStatementSqliMatchStatementArgs sqliMatchStatement() {
        if (sqliMatchStatement == null) return null;
        return sqliMatchStatement.getValue("RuleGroupRuleStatementArgs.sqliMatchStatement");
    }

    /**
     * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
     * 
     */
    private UndeferrableValue<RuleGroupRuleStatementXssMatchStatementArgs> xssMatchStatement;

    public RuleGroupRuleStatementXssMatchStatementArgs xssMatchStatement() {
        if (xssMatchStatement == null) return null;
        return xssMatchStatement.getValue("RuleGroupRuleStatementArgs.xssMatchStatement");
    }

}
