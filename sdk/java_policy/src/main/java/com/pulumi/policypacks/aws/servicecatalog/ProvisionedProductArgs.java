// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.servicecatalog;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.servicecatalog.inputs.ProvisionedProductProvisioningParameterArgs;
import com.pulumi.policypacks.aws.servicecatalog.inputs.ProvisionedProductStackSetProvisioningPreferencesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:servicecatalog/provisionedProduct:ProvisionedProduct")
public final class ProvisionedProductArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
     * 
     */
    private UndeferrableValue<String> acceptLanguage;

    public String acceptLanguage() {
        if (acceptLanguage == null) return null;
        return acceptLanguage.getValue("ProvisionedProductArgs.acceptLanguage");
    }

    /**
     * _Only applies to deleting._ If set to `true`, AWS Service Catalog stops managing the specified provisioned product even if it cannot delete the underlying resources. The default value is `false`.
     * 
     */
    private UndeferrableValue<Boolean> ignoreErrors;

    public Boolean ignoreErrors() {
        if (ignoreErrors == null) return null;
        return ignoreErrors.getValue("ProvisionedProductArgs.ignoreErrors");
    }

    /**
     * User-friendly name of the provisioned product.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ProvisionedProductArgs.name");
    }

    /**
     * Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
     * 
     */
    private UndeferrableValue<List<String>> notificationArns;

    public List<String> notificationArns() {
        if (notificationArns == null) return null;
        return notificationArns.getValue("ProvisionedProductArgs.notificationArns");
    }

    /**
     * Path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use `aws.servicecatalog.getLaunchPaths`. When required, you must provide `path_id` or `path_name`, but not both.
     * 
     */
    private UndeferrableValue<String> pathId;

    public String pathId() {
        if (pathId == null) return null;
        return pathId.getValue("ProvisionedProductArgs.pathId");
    }

    /**
     * Name of the path. You must provide `path_id` or `path_name`, but not both.
     * 
     */
    private UndeferrableValue<String> pathName;

    public String pathName() {
        if (pathName == null) return null;
        return pathName.getValue("ProvisionedProductArgs.pathName");
    }

    /**
     * Product identifier. For example, `prod-abcdzk7xy33qa`. You must provide `product_id` or `product_name`, but not both.
     * 
     */
    private UndeferrableValue<String> productId;

    public String productId() {
        if (productId == null) return null;
        return productId.getValue("ProvisionedProductArgs.productId");
    }

    /**
     * Name of the product. You must provide `product_id` or `product_name`, but not both.
     * 
     */
    private UndeferrableValue<String> productName;

    public String productName() {
        if (productName == null) return null;
        return productName.getValue("ProvisionedProductArgs.productName");
    }

    /**
     * Identifier of the provisioning artifact. For example, `pa-4abcdjnxjj6ne`. You must provide the `provisioning_artifact_id` or `provisioning_artifact_name`, but not both.
     * 
     */
    private UndeferrableValue<String> provisioningArtifactId;

    public String provisioningArtifactId() {
        if (provisioningArtifactId == null) return null;
        return provisioningArtifactId.getValue("ProvisionedProductArgs.provisioningArtifactId");
    }

    /**
     * Name of the provisioning artifact. You must provide the `provisioning_artifact_id` or `provisioning_artifact_name`, but not both.
     * 
     */
    private UndeferrableValue<String> provisioningArtifactName;

    public String provisioningArtifactName() {
        if (provisioningArtifactName == null) return null;
        return provisioningArtifactName.getValue("ProvisionedProductArgs.provisioningArtifactName");
    }

    /**
     * Configuration block with parameters specified by the administrator that are required for provisioning the product. See `provisioning_parameters` Block for details.
     * 
     */
    private UndeferrableValue<List<ProvisionedProductProvisioningParameterArgs>> provisioningParameters;

    public List<ProvisionedProductProvisioningParameterArgs> provisioningParameters() {
        if (provisioningParameters == null) return null;
        return provisioningParameters.getValue("ProvisionedProductArgs.provisioningParameters");
    }

    /**
     * _Only applies to deleting._ Whether to delete the Service Catalog provisioned product but leave the CloudFormation stack, stack set, or the underlying resources of the deleted provisioned product. The default value is `false`.
     * 
     */
    private UndeferrableValue<Boolean> retainPhysicalResources;

    public Boolean retainPhysicalResources() {
        if (retainPhysicalResources == null) return null;
        return retainPhysicalResources.getValue("ProvisionedProductArgs.retainPhysicalResources");
    }

    /**
     * Configuration block with information about the provisioning preferences for a stack set. See `stack_set_provisioning_preferences` Block for details.
     * 
     */
    private UndeferrableValue<ProvisionedProductStackSetProvisioningPreferencesArgs> stackSetProvisioningPreferences;

    public ProvisionedProductStackSetProvisioningPreferencesArgs stackSetProvisioningPreferences() {
        if (stackSetProvisioningPreferences == null) return null;
        return stackSetProvisioningPreferences.getValue("ProvisionedProductArgs.stackSetProvisioningPreferences");
    }

    /**
     * Tags to apply to the provisioned product. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ProvisionedProductArgs.tags");
    }

}
