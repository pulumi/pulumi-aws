// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.iot;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:iot/certificate:Certificate")
public final class Certificate extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Boolean flag to indicate if the certificate should be active
     * 
     */
    @PolicyResourceProperty(name="active", flag="unknown_active")
    private Boolean value_active;
    private boolean unknown_active;
    public Boolean active() {
        if (!unknown_active) return value_active;
        throw new UndeferrableValueException("Value 'Certificate.active' is not present");
    }

    /**
     * The ARN of the created certificate.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Certificate.arn' is not present");
    }

    /**
     * The certificate ID of the CA certificate used to sign the certificate.
     * 
     */
    @PolicyResourceProperty(name="caCertificateId", flag="unknown_caCertificateId")
    private String value_caCertificateId;
    private boolean unknown_caCertificateId;
    public String caCertificateId() {
        if (!unknown_caCertificateId) return value_caCertificateId;
        throw new UndeferrableValueException("Value 'Certificate.caCertificateId' is not present");
    }

    /**
     * The CA certificate for the certificate to be registered. If this is set, the CA needs to be registered with AWS IoT beforehand.
     * 
     */
    @PolicyResourceProperty(name="caPem", flag="unknown_caPem")
    private @Nullable String value_caPem;
    private boolean unknown_caPem;
    public @Nullable String caPem() {
        if (!unknown_caPem) return value_caPem;
        throw new UndeferrableValueException("Value 'Certificate.caPem' is not present");
    }

    /**
     * The certificate to be registered. If `ca_pem` is unspecified, review
     * [RegisterCertificateWithoutCA](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificateWithoutCA.html).
     * If `ca_pem` is specified, review
     * [RegisterCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificate.html)
     * for more information on registering a certificate.
     * 
     */
    @PolicyResourceProperty(name="certificatePem", flag="unknown_certificatePem")
    private String value_certificatePem;
    private boolean unknown_certificatePem;
    public String certificatePem() {
        if (!unknown_certificatePem) return value_certificatePem;
        throw new UndeferrableValueException("Value 'Certificate.certificatePem' is not present");
    }

    /**
     * The certificate signing request. Review
     * [CreateCertificateFromCsr](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
     * for more information on generating a certificate from a certificate signing request (CSR).
     * If none is specified both the certificate and keys will be generated, review [CreateKeysAndCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateKeysAndCertificate.html)
     * for more information on generating keys and a certificate.
     * 
     */
    @PolicyResourceProperty(name="csr", flag="unknown_csr")
    private @Nullable String value_csr;
    private boolean unknown_csr;
    public @Nullable String csr() {
        if (!unknown_csr) return value_csr;
        throw new UndeferrableValueException("Value 'Certificate.csr' is not present");
    }

    /**
     * When neither CSR nor certificate is provided, the private key.
     * 
     */
    @PolicyResourceProperty(name="privateKey", flag="unknown_privateKey")
    private String value_privateKey;
    private boolean unknown_privateKey;
    public String privateKey() {
        if (!unknown_privateKey) return value_privateKey;
        throw new UndeferrableValueException("Value 'Certificate.privateKey' is not present");
    }

    /**
     * When neither CSR nor certificate is provided, the public key.
     * 
     */
    @PolicyResourceProperty(name="publicKey", flag="unknown_publicKey")
    private String value_publicKey;
    private boolean unknown_publicKey;
    public String publicKey() {
        if (!unknown_publicKey) return value_publicKey;
        throw new UndeferrableValueException("Value 'Certificate.publicKey' is not present");
    }

}
