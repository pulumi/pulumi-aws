// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cognito;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cognito.outputs.RiskConfigurationAccountTakeoverRiskConfiguration;
import com.pulumi.policypacks.aws.cognito.outputs.RiskConfigurationCompromisedCredentialsRiskConfiguration;
import com.pulumi.policypacks.aws.cognito.outputs.RiskConfigurationRiskExceptionConfiguration;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cognito/riskConfiguration:RiskConfiguration")
public final class RiskConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The account takeover risk configuration. See details below.
     * 
     */
    @PolicyResourceProperty(name="accountTakeoverRiskConfiguration", flag="unknown_accountTakeoverRiskConfiguration")
    private @Nullable RiskConfigurationAccountTakeoverRiskConfiguration value_accountTakeoverRiskConfiguration;
    private boolean unknown_accountTakeoverRiskConfiguration;
    public @Nullable RiskConfigurationAccountTakeoverRiskConfiguration accountTakeoverRiskConfiguration() {
        if (!unknown_accountTakeoverRiskConfiguration) return value_accountTakeoverRiskConfiguration;
        throw new UndeferrableValueException("Value 'RiskConfiguration.accountTakeoverRiskConfiguration' is not present");
    }

    /**
     * The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.
     * 
     */
    @PolicyResourceProperty(name="clientId", flag="unknown_clientId")
    private @Nullable String value_clientId;
    private boolean unknown_clientId;
    public @Nullable String clientId() {
        if (!unknown_clientId) return value_clientId;
        throw new UndeferrableValueException("Value 'RiskConfiguration.clientId' is not present");
    }

    /**
     * The compromised credentials risk configuration. See details below.
     * 
     */
    @PolicyResourceProperty(name="compromisedCredentialsRiskConfiguration", flag="unknown_compromisedCredentialsRiskConfiguration")
    private @Nullable RiskConfigurationCompromisedCredentialsRiskConfiguration value_compromisedCredentialsRiskConfiguration;
    private boolean unknown_compromisedCredentialsRiskConfiguration;
    public @Nullable RiskConfigurationCompromisedCredentialsRiskConfiguration compromisedCredentialsRiskConfiguration() {
        if (!unknown_compromisedCredentialsRiskConfiguration) return value_compromisedCredentialsRiskConfiguration;
        throw new UndeferrableValueException("Value 'RiskConfiguration.compromisedCredentialsRiskConfiguration' is not present");
    }

    /**
     * The configuration to override the risk decision. See details below.
     * 
     */
    @PolicyResourceProperty(name="riskExceptionConfiguration", flag="unknown_riskExceptionConfiguration")
    private @Nullable RiskConfigurationRiskExceptionConfiguration value_riskExceptionConfiguration;
    private boolean unknown_riskExceptionConfiguration;
    public @Nullable RiskConfigurationRiskExceptionConfiguration riskExceptionConfiguration() {
        if (!unknown_riskExceptionConfiguration) return value_riskExceptionConfiguration;
        throw new UndeferrableValueException("Value 'RiskConfiguration.riskExceptionConfiguration' is not present");
    }

    /**
     * The user pool ID.
     * 
     */
    @PolicyResourceProperty(name="userPoolId", flag="unknown_userPoolId")
    private String value_userPoolId;
    private boolean unknown_userPoolId;
    public String userPoolId() {
        if (!unknown_userPoolId) return value_userPoolId;
        throw new UndeferrableValueException("Value 'RiskConfiguration.userPoolId' is not present");
    }

}
