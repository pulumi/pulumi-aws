// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.imagebuilder;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.imagebuilder.outputs.InfrastructureConfigurationInstanceMetadataOptions;
import com.pulumi.policypacks.aws.imagebuilder.outputs.InfrastructureConfigurationLogging;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration")
public final class InfrastructureConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of the configuration.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.arn' is not present");
    }

    /**
     * Date when the configuration was created.
     * 
     */
    @PolicyResourceProperty(name="dateCreated", flag="unknown_dateCreated")
    private String value_dateCreated;
    private boolean unknown_dateCreated;
    public String dateCreated() {
        if (!unknown_dateCreated) return value_dateCreated;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.dateCreated' is not present");
    }

    /**
     * Date when the configuration was updated.
     * 
     */
    @PolicyResourceProperty(name="dateUpdated", flag="unknown_dateUpdated")
    private String value_dateUpdated;
    private boolean unknown_dateUpdated;
    public String dateUpdated() {
        if (!unknown_dateUpdated) return value_dateUpdated;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.dateUpdated' is not present");
    }

    /**
     * Description for the configuration.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.description' is not present");
    }

    /**
     * Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="instanceMetadataOptions", flag="unknown_instanceMetadataOptions")
    private @Nullable InfrastructureConfigurationInstanceMetadataOptions value_instanceMetadataOptions;
    private boolean unknown_instanceMetadataOptions;
    public @Nullable InfrastructureConfigurationInstanceMetadataOptions instanceMetadataOptions() {
        if (!unknown_instanceMetadataOptions) return value_instanceMetadataOptions;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.instanceMetadataOptions' is not present");
    }

    /**
     * Name of IAM Instance Profile.
     * 
     */
    @PolicyResourceProperty(name="instanceProfileName", flag="unknown_instanceProfileName")
    private String value_instanceProfileName;
    private boolean unknown_instanceProfileName;
    public String instanceProfileName() {
        if (!unknown_instanceProfileName) return value_instanceProfileName;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.instanceProfileName' is not present");
    }

    /**
     * Set of EC2 Instance Types.
     * 
     */
    @PolicyResourceProperty(name="instanceTypes", flag="unknown_instanceTypes")
    private @Nullable List<String> value_instanceTypes;
    private boolean unknown_instanceTypes;
    public @Nullable List<String> instanceTypes() {
        if (!unknown_instanceTypes) return value_instanceTypes;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.instanceTypes' is not present");
    }

    /**
     * Name of EC2 Key Pair.
     * 
     */
    @PolicyResourceProperty(name="keyPair", flag="unknown_keyPair")
    private @Nullable String value_keyPair;
    private boolean unknown_keyPair;
    public @Nullable String keyPair() {
        if (!unknown_keyPair) return value_keyPair;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.keyPair' is not present");
    }

    /**
     * Configuration block with logging settings. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="logging", flag="unknown_logging")
    private @Nullable InfrastructureConfigurationLogging value_logging;
    private boolean unknown_logging;
    public @Nullable InfrastructureConfigurationLogging logging() {
        if (!unknown_logging) return value_logging;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.logging' is not present");
    }

    /**
     * Name for the configuration.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.name' is not present");
    }

    /**
     * Key-value map of resource tags to assign to infrastructure created by the configuration.
     * 
     */
    @PolicyResourceProperty(name="resourceTags", flag="unknown_resourceTags")
    private @Nullable Map<String,String> value_resourceTags;
    private boolean unknown_resourceTags;
    public @Nullable Map<String,String> resourceTags() {
        if (!unknown_resourceTags) return value_resourceTags;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.resourceTags' is not present");
    }

    /**
     * Set of EC2 Security Group identifiers.
     * 
     */
    @PolicyResourceProperty(name="securityGroupIds", flag="unknown_securityGroupIds")
    private @Nullable List<String> value_securityGroupIds;
    private boolean unknown_securityGroupIds;
    public @Nullable List<String> securityGroupIds() {
        if (!unknown_securityGroupIds) return value_securityGroupIds;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.securityGroupIds' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of SNS Topic.
     * 
     */
    @PolicyResourceProperty(name="snsTopicArn", flag="unknown_snsTopicArn")
    private @Nullable String value_snsTopicArn;
    private boolean unknown_snsTopicArn;
    public @Nullable String snsTopicArn() {
        if (!unknown_snsTopicArn) return value_snsTopicArn;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.snsTopicArn' is not present");
    }

    /**
     * EC2 Subnet identifier. Also requires `security_group_ids` argument.
     * 
     */
    @PolicyResourceProperty(name="subnetId", flag="unknown_subnetId")
    private @Nullable String value_subnetId;
    private boolean unknown_subnetId;
    public @Nullable String subnetId() {
        if (!unknown_subnetId) return value_subnetId;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.subnetId' is not present");
    }

    /**
     * Key-value map of resource tags to assign to the configuration. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.tagsAll' is not present");
    }

    /**
     * Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="terminateInstanceOnFailure", flag="unknown_terminateInstanceOnFailure")
    private @Nullable Boolean value_terminateInstanceOnFailure;
    private boolean unknown_terminateInstanceOnFailure;
    public @Nullable Boolean terminateInstanceOnFailure() {
        if (!unknown_terminateInstanceOnFailure) return value_terminateInstanceOnFailure;
        throw new UndeferrableValueException("Value 'InfrastructureConfiguration.terminateInstanceOnFailure' is not present");
    }

}
