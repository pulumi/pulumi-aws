// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:autoscaling/lifecycleHook:LifecycleHook")
public final class LifecycleHookArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Name of the Auto Scaling group to which you want to assign the lifecycle hook
     * 
     */
    @PolicyResourceProperty(name="autoscalingGroupName", flag="unknown_autoscalingGroupName")
    private String value_autoscalingGroupName;
    private boolean unknown_autoscalingGroupName;
    public String autoscalingGroupName() {
        if (!unknown_autoscalingGroupName) return value_autoscalingGroupName;
        throw new UndeferrableValueException("Value 'LifecycleHookArgs.autoscalingGroupName' is not present");
    }

    /**
     * Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON.
     * 
     */
    @PolicyResourceProperty(name="defaultResult", flag="unknown_defaultResult")
    private String value_defaultResult;
    private boolean unknown_defaultResult;
    public String defaultResult() {
        if (!unknown_defaultResult) return value_defaultResult;
        throw new UndeferrableValueException("Value 'LifecycleHookArgs.defaultResult' is not present");
    }

    /**
     * Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter
     * 
     */
    @PolicyResourceProperty(name="heartbeatTimeout", flag="unknown_heartbeatTimeout")
    private Integer value_heartbeatTimeout;
    private boolean unknown_heartbeatTimeout;
    public Integer heartbeatTimeout() {
        if (!unknown_heartbeatTimeout) return value_heartbeatTimeout;
        throw new UndeferrableValueException("Value 'LifecycleHookArgs.heartbeatTimeout' is not present");
    }

    /**
     * Instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see [describe-lifecycle-hook-types](https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples)
     * 
     */
    @PolicyResourceProperty(name="lifecycleTransition", flag="unknown_lifecycleTransition")
    private String value_lifecycleTransition;
    private boolean unknown_lifecycleTransition;
    public String lifecycleTransition() {
        if (!unknown_lifecycleTransition) return value_lifecycleTransition;
        throw new UndeferrableValueException("Value 'LifecycleHookArgs.lifecycleTransition' is not present");
    }

    /**
     * Name of the lifecycle hook.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'LifecycleHookArgs.name' is not present");
    }

    /**
     * Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
     * 
     */
    @PolicyResourceProperty(name="notificationMetadata", flag="unknown_notificationMetadata")
    private String value_notificationMetadata;
    private boolean unknown_notificationMetadata;
    public String notificationMetadata() {
        if (!unknown_notificationMetadata) return value_notificationMetadata;
        throw new UndeferrableValueException("Value 'LifecycleHookArgs.notificationMetadata' is not present");
    }

    /**
     * ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic.
     * 
     */
    @PolicyResourceProperty(name="notificationTargetArn", flag="unknown_notificationTargetArn")
    private String value_notificationTargetArn;
    private boolean unknown_notificationTargetArn;
    public String notificationTargetArn() {
        if (!unknown_notificationTargetArn) return value_notificationTargetArn;
        throw new UndeferrableValueException("Value 'LifecycleHookArgs.notificationTargetArn' is not present");
    }

    /**
     * ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'LifecycleHookArgs.roleArn' is not present");
    }

}
