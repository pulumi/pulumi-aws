// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2transitgateway;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2transitgateway/connectPeer:ConnectPeer")
public final class ConnectPeerArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The BGP ASN number assigned customer device. If not provided, it will use the same BGP ASN as is associated with Transit Gateway.
     * 
     */
    @PolicyResourceProperty(name="bgpAsn", flag="unknown_bgpAsn")
    private String value_bgpAsn;
    private boolean unknown_bgpAsn;
    public String bgpAsn() {
        if (!unknown_bgpAsn) return value_bgpAsn;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.bgpAsn' is not present");
    }

    /**
     * The CIDR block that will be used for addressing within the tunnel. It must contain exactly one IPv4 CIDR block and up to one IPv6 CIDR block. The IPv4 CIDR block must be /29 size and must be within 169.254.0.0/16 range, with exception of: 169.254.0.0/29, 169.254.1.0/29, 169.254.2.0/29, 169.254.3.0/29, 169.254.4.0/29, 169.254.5.0/29, 169.254.169.248/29. The IPv6 CIDR block must be /125 size and must be within fd00::/8. The first IP from each CIDR block is assigned for customer gateway, the second and third is for Transit Gateway (An example: from range 169.254.100.0/29, .1 is assigned to customer gateway and .2 and .3 are assigned to Transit Gateway)
     * 
     */
    @PolicyResourceProperty(name="insideCidrBlocks", flag="unknown_insideCidrBlocks")
    private List<String> value_insideCidrBlocks;
    private boolean unknown_insideCidrBlocks;
    public List<String> insideCidrBlocks() {
        if (!unknown_insideCidrBlocks) return value_insideCidrBlocks;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.insideCidrBlocks' is not present");
    }

    /**
     * The IP addressed assigned to customer device, which will be used as tunnel endpoint. It can be IPv4 or IPv6 address, but must be the same address family as `transit_gateway_address`
     * 
     */
    @PolicyResourceProperty(name="peerAddress", flag="unknown_peerAddress")
    private String value_peerAddress;
    private boolean unknown_peerAddress;
    public String peerAddress() {
        if (!unknown_peerAddress) return value_peerAddress;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.peerAddress' is not present");
    }

    /**
     * Key-value tags for the EC2 Transit Gateway Connect Peer. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.tags' is not present");
    }

    /**
     * The IP address assigned to Transit Gateway, which will be used as tunnel endpoint. This address must be from associated Transit Gateway CIDR block. The address must be from the same address family as `peer_address`. If not set explicitly, it will be selected from associated Transit Gateway CIDR blocks
     * 
     */
    @PolicyResourceProperty(name="transitGatewayAddress", flag="unknown_transitGatewayAddress")
    private String value_transitGatewayAddress;
    private boolean unknown_transitGatewayAddress;
    public String transitGatewayAddress() {
        if (!unknown_transitGatewayAddress) return value_transitGatewayAddress;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.transitGatewayAddress' is not present");
    }

    /**
     * The Transit Gateway Connect
     * 
     */
    @PolicyResourceProperty(name="transitGatewayAttachmentId", flag="unknown_transitGatewayAttachmentId")
    private String value_transitGatewayAttachmentId;
    private boolean unknown_transitGatewayAttachmentId;
    public String transitGatewayAttachmentId() {
        if (!unknown_transitGatewayAttachmentId) return value_transitGatewayAttachmentId;
        throw new UndeferrableValueException("Value 'ConnectPeerArgs.transitGatewayAttachmentId' is not present");
    }

}
