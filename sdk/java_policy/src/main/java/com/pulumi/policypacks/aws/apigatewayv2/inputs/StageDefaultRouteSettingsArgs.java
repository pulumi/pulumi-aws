// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigatewayv2.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class StageDefaultRouteSettingsArgs {

    /**
     * Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
     * Defaults to `false`. Supported only for WebSocket APIs.
     * 
     */
    @PolicyResourceProperty(name="dataTraceEnabled", flag="unknown_dataTraceEnabled")
    private Boolean value_dataTraceEnabled;
    private boolean unknown_dataTraceEnabled;
    public Boolean dataTraceEnabled() {
        if (!unknown_dataTraceEnabled) return value_dataTraceEnabled;
        throw new UndeferrableValueException("Value 'StageDefaultRouteSettingsArgs.dataTraceEnabled' is not present");
    }

    /**
     * Whether detailed metrics are enabled for the default route. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="detailedMetricsEnabled", flag="unknown_detailedMetricsEnabled")
    private Boolean value_detailedMetricsEnabled;
    private boolean unknown_detailedMetricsEnabled;
    public Boolean detailedMetricsEnabled() {
        if (!unknown_detailedMetricsEnabled) return value_detailedMetricsEnabled;
        throw new UndeferrableValueException("Value 'StageDefaultRouteSettingsArgs.detailedMetricsEnabled' is not present");
    }

    /**
     * Logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
     * Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.
     * 
     */
    @PolicyResourceProperty(name="loggingLevel", flag="unknown_loggingLevel")
    private String value_loggingLevel;
    private boolean unknown_loggingLevel;
    public String loggingLevel() {
        if (!unknown_loggingLevel) return value_loggingLevel;
        throw new UndeferrableValueException("Value 'StageDefaultRouteSettingsArgs.loggingLevel' is not present");
    }

    /**
     * Throttling burst limit for the default route.
     * 
     */
    @PolicyResourceProperty(name="throttlingBurstLimit", flag="unknown_throttlingBurstLimit")
    private Integer value_throttlingBurstLimit;
    private boolean unknown_throttlingBurstLimit;
    public Integer throttlingBurstLimit() {
        if (!unknown_throttlingBurstLimit) return value_throttlingBurstLimit;
        throw new UndeferrableValueException("Value 'StageDefaultRouteSettingsArgs.throttlingBurstLimit' is not present");
    }

    /**
     * Throttling rate limit for the default route.
     * 
     */
    @PolicyResourceProperty(name="throttlingRateLimit", flag="unknown_throttlingRateLimit")
    private Double value_throttlingRateLimit;
    private boolean unknown_throttlingRateLimit;
    public Double throttlingRateLimit() {
        if (!unknown_throttlingRateLimit) return value_throttlingRateLimit;
        throw new UndeferrableValueException("Value 'StageDefaultRouteSettingsArgs.throttlingRateLimit' is not present");
    }

}
