// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apprunner.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


public final class ServiceSourceConfigurationImageRepositoryImageConfiguration {

    /**
     * Port that your application listens to in the container. Defaults to `&#34;8080&#34;`.
     * 
     */
    private @Nullable UndeferrableValue<String> port;

    public @Nullable String port() {
        if (port == null) return null;
        return port.getValue("ServiceSourceConfigurationImageRepositoryImageConfiguration.port");
    }

    /**
     * Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> runtimeEnvironmentSecrets;

    public @Nullable Map<String,String> runtimeEnvironmentSecrets() {
        if (runtimeEnvironmentSecrets == null) return null;
        return runtimeEnvironmentSecrets.getValue("ServiceSourceConfigurationImageRepositoryImageConfiguration.runtimeEnvironmentSecrets");
    }

    /**
     * Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren&#39;t valid.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> runtimeEnvironmentVariables;

    public @Nullable Map<String,String> runtimeEnvironmentVariables() {
        if (runtimeEnvironmentVariables == null) return null;
        return runtimeEnvironmentVariables.getValue("ServiceSourceConfigurationImageRepositoryImageConfiguration.runtimeEnvironmentVariables");
    }

    /**
     * Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker imageâ€™s default start command.
     * 
     */
    private @Nullable UndeferrableValue<String> startCommand;

    public @Nullable String startCommand() {
        if (startCommand == null) return null;
        return startCommand.getValue("ServiceSourceConfigurationImageRepositoryImageConfiguration.startCommand");
    }

}
