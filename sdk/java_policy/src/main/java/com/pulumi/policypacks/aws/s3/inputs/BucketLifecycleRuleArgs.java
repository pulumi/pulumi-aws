// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.s3.inputs.BucketLifecycleRuleExpirationArgs;
import com.pulumi.policypacks.aws.s3.inputs.BucketLifecycleRuleNoncurrentVersionExpirationArgs;
import com.pulumi.policypacks.aws.s3.inputs.BucketLifecycleRuleNoncurrentVersionTransitionArgs;
import com.pulumi.policypacks.aws.s3.inputs.BucketLifecycleRuleTransitionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class BucketLifecycleRuleArgs {

    /**
     * Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     * 
     */
    private UndeferrableValue<Integer> abortIncompleteMultipartUploadDays;

    public Integer abortIncompleteMultipartUploadDays() {
        if (abortIncompleteMultipartUploadDays == null) return null;
        return abortIncompleteMultipartUploadDays.getValue("BucketLifecycleRuleArgs.abortIncompleteMultipartUploadDays");
    }

    /**
     * Specifies lifecycle rule status.
     * 
     */
    private UndeferrableValue<Boolean> enabled;

    public Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("BucketLifecycleRuleArgs.enabled");
    }

    /**
     * Specifies a period in the object&#39;s expire (documented below).
     * 
     */
    private UndeferrableValue<BucketLifecycleRuleExpirationArgs> expiration;

    public BucketLifecycleRuleExpirationArgs expiration() {
        if (expiration == null) return null;
        return expiration.getValue("BucketLifecycleRuleArgs.expiration");
    }

    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    private UndeferrableValue<String> id;

    public String id() {
        if (id == null) return null;
        return id.getValue("BucketLifecycleRuleArgs.id");
    }

    /**
     * Specifies when noncurrent object versions expire (documented below).
     * 
     */
    private UndeferrableValue<BucketLifecycleRuleNoncurrentVersionExpirationArgs> noncurrentVersionExpiration;

    public BucketLifecycleRuleNoncurrentVersionExpirationArgs noncurrentVersionExpiration() {
        if (noncurrentVersionExpiration == null) return null;
        return noncurrentVersionExpiration.getValue("BucketLifecycleRuleArgs.noncurrentVersionExpiration");
    }

    /**
     * Specifies when noncurrent object versions transitions (documented below).
     * 
     * At least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition`, `noncurrent_version_expiration`, `noncurrent_version_transition` must be specified.
     * 
     */
    private UndeferrableValue<List<BucketLifecycleRuleNoncurrentVersionTransitionArgs>> noncurrentVersionTransitions;

    public List<BucketLifecycleRuleNoncurrentVersionTransitionArgs> noncurrentVersionTransitions() {
        if (noncurrentVersionTransitions == null) return null;
        return noncurrentVersionTransitions.getValue("BucketLifecycleRuleArgs.noncurrentVersionTransitions");
    }

    /**
     * Object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    private UndeferrableValue<String> prefix;

    public String prefix() {
        if (prefix == null) return null;
        return prefix.getValue("BucketLifecycleRuleArgs.prefix");
    }

    /**
     * Specifies object tags key and value.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("BucketLifecycleRuleArgs.tags");
    }

    /**
     * Specifies a period in the object&#39;s transitions (documented below).
     * 
     */
    private UndeferrableValue<List<BucketLifecycleRuleTransitionArgs>> transitions;

    public List<BucketLifecycleRuleTransitionArgs> transitions() {
        if (transitions == null) return null;
        return transitions.getValue("BucketLifecycleRuleArgs.transitions");
    }

}
