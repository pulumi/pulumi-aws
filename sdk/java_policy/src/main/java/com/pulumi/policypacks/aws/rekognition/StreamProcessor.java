// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rekognition;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.rekognition.outputs.StreamProcessorDataSharingPreference;
import com.pulumi.policypacks.aws.rekognition.outputs.StreamProcessorInput;
import com.pulumi.policypacks.aws.rekognition.outputs.StreamProcessorNotificationChannel;
import com.pulumi.policypacks.aws.rekognition.outputs.StreamProcessorOutput;
import com.pulumi.policypacks.aws.rekognition.outputs.StreamProcessorRegionsOfInterest;
import com.pulumi.policypacks.aws.rekognition.outputs.StreamProcessorSettings;
import com.pulumi.policypacks.aws.rekognition.outputs.StreamProcessorTimeouts;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rekognition/streamProcessor:StreamProcessor")
public final class StreamProcessor extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Stream Processor.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'StreamProcessor.arn' is not present");
    }

    /**
     * See `data_sharing_preference`.
     * 
     */
    @PolicyResourceProperty(name="dataSharingPreference", flag="unknown_dataSharingPreference")
    private @Nullable StreamProcessorDataSharingPreference value_dataSharingPreference;
    private boolean unknown_dataSharingPreference;
    public @Nullable StreamProcessorDataSharingPreference dataSharingPreference() {
        if (!unknown_dataSharingPreference) return value_dataSharingPreference;
        throw new UndeferrableValueException("Value 'StreamProcessor.dataSharingPreference' is not present");
    }

    /**
     * Input video stream. See `input`.
     * 
     */
    @PolicyResourceProperty(name="input", flag="unknown_input")
    private @Nullable StreamProcessorInput value_input;
    private boolean unknown_input;
    public @Nullable StreamProcessorInput input() {
        if (!unknown_input) return value_input;
        throw new UndeferrableValueException("Value 'StreamProcessor.input' is not present");
    }

    /**
     * Optional parameter for label detection stream processors.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private @Nullable String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public @Nullable String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'StreamProcessor.kmsKeyId' is not present");
    }

    /**
     * The name of the Stream Processor.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'StreamProcessor.name' is not present");
    }

    /**
     * The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See `notification_channel`.
     * 
     */
    @PolicyResourceProperty(name="notificationChannel", flag="unknown_notificationChannel")
    private @Nullable StreamProcessorNotificationChannel value_notificationChannel;
    private boolean unknown_notificationChannel;
    public @Nullable StreamProcessorNotificationChannel notificationChannel() {
        if (!unknown_notificationChannel) return value_notificationChannel;
        throw new UndeferrableValueException("Value 'StreamProcessor.notificationChannel' is not present");
    }

    /**
     * Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See `output`.
     * 
     */
    @PolicyResourceProperty(name="output", flag="unknown_output")
    private @Nullable StreamProcessorOutput value_output;
    private boolean unknown_output;
    public @Nullable StreamProcessorOutput output() {
        if (!unknown_output) return value_output;
        throw new UndeferrableValueException("Value 'StreamProcessor.output' is not present");
    }

    /**
     * Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regions_of_interest`.
     * 
     */
    @PolicyResourceProperty(name="regionsOfInterests", flag="unknown_regionsOfInterests")
    private @Nullable List<StreamProcessorRegionsOfInterest> value_regionsOfInterests;
    private boolean unknown_regionsOfInterests;
    public @Nullable List<StreamProcessorRegionsOfInterest> regionsOfInterests() {
        if (!unknown_regionsOfInterests) return value_regionsOfInterests;
        throw new UndeferrableValueException("Value 'StreamProcessor.regionsOfInterests' is not present");
    }

    /**
     * The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'StreamProcessor.roleArn' is not present");
    }

    /**
     * Input parameters used in a streaming video analyzed by a stream processor. See `settings`.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="settings", flag="unknown_settings")
    private @Nullable StreamProcessorSettings value_settings;
    private boolean unknown_settings;
    public @Nullable StreamProcessorSettings settings() {
        if (!unknown_settings) return value_settings;
        throw new UndeferrableValueException("Value 'StreamProcessor.settings' is not present");
    }

    /**
     * (**Deprecated**) ARN of the Stream Processor.
     * Use `arn` instead.
     * 
     * @deprecated
     * Use &#39;arn&#39; instead. This attribute will be removed in a future version of the provider.
     * 
     */
    @Deprecated /* Use 'arn' instead. This attribute will be removed in a future version of the provider. */
    @PolicyResourceProperty(name="streamProcessorArn", flag="unknown_streamProcessorArn")
    private String value_streamProcessorArn;
    private boolean unknown_streamProcessorArn;
    public String streamProcessorArn() {
        if (!unknown_streamProcessorArn) return value_streamProcessorArn;
        throw new UndeferrableValueException("Value 'StreamProcessor.streamProcessorArn' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'StreamProcessor.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'StreamProcessor.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable StreamProcessorTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable StreamProcessorTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'StreamProcessor.timeouts' is not present");
    }

}
