// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codestarconnections;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:codestarconnections/connection:Connection")
public final class Connection extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The codestar connection ARN.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Connection.arn' is not present");
    }

    /**
     * The codestar connection status. Possible values are `PENDING`, `AVAILABLE` and `ERROR`.
     * 
     */
    @PolicyResourceProperty(name="connectionStatus", flag="unknown_connectionStatus")
    private String value_connectionStatus;
    private boolean unknown_connectionStatus;
    public String connectionStatus() {
        if (!unknown_connectionStatus) return value_connectionStatus;
        throw new UndeferrableValueException("Value 'Connection.connectionStatus' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the host associated with the connection. Conflicts with `provider_type`
     * 
     */
    @PolicyResourceProperty(name="hostArn", flag="unknown_hostArn")
    private @Nullable String value_hostArn;
    private boolean unknown_hostArn;
    public @Nullable String hostArn() {
        if (!unknown_hostArn) return value_hostArn;
        throw new UndeferrableValueException("Value 'Connection.hostArn' is not present");
    }

    /**
     * The name of the connection to be created. The name must be unique in the calling AWS account. Changing `name` will create a new resource.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Connection.name' is not present");
    }

    /**
     * The name of the external provider where your third-party code repository is configured. Valid values are `Bitbucket`, `GitHub`, `GitHubEnterpriseServer`, `GitLab` or `GitLabSelfManaged`. Changing `provider_type` will create a new resource. Conflicts with `host_arn`
     * 
     */
    @PolicyResourceProperty(name="providerType", flag="unknown_providerType")
    private String value_providerType;
    private boolean unknown_providerType;
    public String providerType() {
        if (!unknown_providerType) return value_providerType;
        throw new UndeferrableValueException("Value 'Connection.providerType' is not present");
    }

    /**
     * Map of key-value resource tags to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Connection.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Connection.tagsAll' is not present");
    }

}
