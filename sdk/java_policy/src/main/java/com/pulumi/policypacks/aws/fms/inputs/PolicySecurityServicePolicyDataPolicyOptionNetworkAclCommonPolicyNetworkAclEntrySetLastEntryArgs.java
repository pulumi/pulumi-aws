// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.fms.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.fms.inputs.PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCodeArgs;
import com.pulumi.policypacks.aws.fms.inputs.PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRangeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs {

    /**
     * A string value containing the IPv4 network range to allow or deny, in CIDR notation.
     * 
     */
    @PolicyResourceProperty(name="cidrBlock", flag="unknown_cidrBlock")
    private String value_cidrBlock;
    private boolean unknown_cidrBlock;
    public String cidrBlock() {
        if (!unknown_cidrBlock) return value_cidrBlock;
        throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.cidrBlock' is not present");
    }

    /**
     * A boolean value, if true Firewall Manager creates egress rule. If false Firewall Manager creates ingress rule.
     * 
     */
    @PolicyResourceProperty(name="egress", flag="unknown_egress")
    private Boolean value_egress;
    private boolean unknown_egress;
    public Boolean egress() {
        if (!unknown_egress) return value_egress;
        throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.egress' is not present");
    }

    /**
     * A configuration block for ICMP protocol: The ICMP type and code. See the `icmp_type_code` block.
     * 
     */
    @PolicyResourceProperty(name="icmpTypeCodes", flag="unknown_icmpTypeCodes")
    private List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCodeArgs> value_icmpTypeCodes;
    private boolean unknown_icmpTypeCodes;
    public List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCodeArgs> icmpTypeCodes() {
        if (!unknown_icmpTypeCodes) return value_icmpTypeCodes;
        throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.icmpTypeCodes' is not present");
    }

    /**
     * A string value containing the IPv6 network range to allow or deny, in CIDR notation.
     * 
     */
    @PolicyResourceProperty(name="ipv6CidrBlock", flag="unknown_ipv6CidrBlock")
    private String value_ipv6CidrBlock;
    private boolean unknown_ipv6CidrBlock;
    public String ipv6CidrBlock() {
        if (!unknown_ipv6CidrBlock) return value_ipv6CidrBlock;
        throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.ipv6CidrBlock' is not present");
    }

    /**
     * A configuration block for PortRange. See the `port_range` block.
     * 
     */
    @PolicyResourceProperty(name="portRanges", flag="unknown_portRanges")
    private List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRangeArgs> value_portRanges;
    private boolean unknown_portRanges;
    public List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRangeArgs> portRanges() {
        if (!unknown_portRanges) return value_portRanges;
        throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.portRanges' is not present");
    }

    /**
     * The protocol number. A value of &#34;-1&#34; means all protocols.
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.protocol' is not present");
    }

    /**
     * A string value that indicates whether to allow or deny the traffic that matches the rule. Valid values: `allow`, `deny`.
     * 
     */
    @PolicyResourceProperty(name="ruleAction", flag="unknown_ruleAction")
    private String value_ruleAction;
    private boolean unknown_ruleAction;
    public String ruleAction() {
        if (!unknown_ruleAction) return value_ruleAction;
        throw new UndeferrableValueException("Value 'PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.ruleAction' is not present");
    }

}
