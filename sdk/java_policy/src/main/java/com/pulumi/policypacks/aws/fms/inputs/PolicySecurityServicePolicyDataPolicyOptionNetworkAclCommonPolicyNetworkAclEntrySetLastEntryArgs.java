// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.fms.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.fms.inputs.PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCodeArgs;
import com.pulumi.policypacks.aws.fms.inputs.PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRangeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs {

    /**
     * A string value containing the IPv4 network range to allow or deny, in CIDR notation.
     * 
     */
    private UndeferrableValue<String> cidrBlock;

    public String cidrBlock() {
        if (cidrBlock == null) return null;
        return cidrBlock.getValue("PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.cidrBlock");
    }

    /**
     * A boolean value, if true Firewall Manager creates egress rule. If false Firewall Manager creates ingress rule.
     * 
     */
    private UndeferrableValue<Boolean> egress;

    public Boolean egress() {
        if (egress == null) return null;
        return egress.getValue("PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.egress");
    }

    /**
     * A configuration block for ICMP protocol: The ICMP type and code. See the `icmp_type_code` block.
     * 
     */
    private UndeferrableValue<List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCodeArgs>> icmpTypeCodes;

    public List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryIcmpTypeCodeArgs> icmpTypeCodes() {
        if (icmpTypeCodes == null) return null;
        return icmpTypeCodes.getValue("PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.icmpTypeCodes");
    }

    /**
     * A string value containing the IPv6 network range to allow or deny, in CIDR notation.
     * 
     */
    private UndeferrableValue<String> ipv6CidrBlock;

    public String ipv6CidrBlock() {
        if (ipv6CidrBlock == null) return null;
        return ipv6CidrBlock.getValue("PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.ipv6CidrBlock");
    }

    /**
     * A configuration block for PortRange. See the `port_range` block.
     * 
     */
    private UndeferrableValue<List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRangeArgs>> portRanges;

    public List<PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryPortRangeArgs> portRanges() {
        if (portRanges == null) return null;
        return portRanges.getValue("PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.portRanges");
    }

    /**
     * The protocol number. A value of &#34;-1&#34; means all protocols.
     * 
     */
    private UndeferrableValue<String> protocol;

    public String protocol() {
        if (protocol == null) return null;
        return protocol.getValue("PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.protocol");
    }

    /**
     * A string value that indicates whether to allow or deny the traffic that matches the rule. Valid values: `allow`, `deny`.
     * 
     */
    private UndeferrableValue<String> ruleAction;

    public String ruleAction() {
        if (ruleAction == null) return null;
        return ruleAction.getValue("PolicySecurityServicePolicyDataPolicyOptionNetworkAclCommonPolicyNetworkAclEntrySetLastEntryArgs.ruleAction");
    }

}
