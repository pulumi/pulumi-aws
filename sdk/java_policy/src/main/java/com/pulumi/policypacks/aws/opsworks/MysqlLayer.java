// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.opsworks;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.opsworks.outputs.MysqlLayerCloudwatchConfiguration;
import com.pulumi.policypacks.aws.opsworks.outputs.MysqlLayerEbsVolume;
import com.pulumi.policypacks.aws.opsworks.outputs.MysqlLayerLoadBasedAutoScaling;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:opsworks/mysqlLayer:MysqlLayer")
public final class MysqlLayer extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name(ARN) of the layer.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'MysqlLayer.arn' is not present");
    }

    /**
     * Whether to automatically assign an elastic IP address to the layer&#39;s instances.
     * 
     */
    @PolicyResourceProperty(name="autoAssignElasticIps", flag="unknown_autoAssignElasticIps")
    private @Nullable Boolean value_autoAssignElasticIps;
    private boolean unknown_autoAssignElasticIps;
    public @Nullable Boolean autoAssignElasticIps() {
        if (!unknown_autoAssignElasticIps) return value_autoAssignElasticIps;
        throw new UndeferrableValueException("Value 'MysqlLayer.autoAssignElasticIps' is not present");
    }

    /**
     * For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer&#39;s instances.
     * 
     */
    @PolicyResourceProperty(name="autoAssignPublicIps", flag="unknown_autoAssignPublicIps")
    private @Nullable Boolean value_autoAssignPublicIps;
    private boolean unknown_autoAssignPublicIps;
    public @Nullable Boolean autoAssignPublicIps() {
        if (!unknown_autoAssignPublicIps) return value_autoAssignPublicIps;
        throw new UndeferrableValueException("Value 'MysqlLayer.autoAssignPublicIps' is not present");
    }

    /**
     * Whether to enable auto-healing for the layer.
     * 
     */
    @PolicyResourceProperty(name="autoHealing", flag="unknown_autoHealing")
    private @Nullable Boolean value_autoHealing;
    private boolean unknown_autoHealing;
    public @Nullable Boolean autoHealing() {
        if (!unknown_autoHealing) return value_autoHealing;
        throw new UndeferrableValueException("Value 'MysqlLayer.autoHealing' is not present");
    }

    @PolicyResourceProperty(name="cloudwatchConfiguration", flag="unknown_cloudwatchConfiguration")
    private @Nullable MysqlLayerCloudwatchConfiguration value_cloudwatchConfiguration;
    private boolean unknown_cloudwatchConfiguration;
    public @Nullable MysqlLayerCloudwatchConfiguration cloudwatchConfiguration() {
        if (!unknown_cloudwatchConfiguration) return value_cloudwatchConfiguration;
        throw new UndeferrableValueException("Value 'MysqlLayer.cloudwatchConfiguration' is not present");
    }

    @PolicyResourceProperty(name="customConfigureRecipes", flag="unknown_customConfigureRecipes")
    private @Nullable List<String> value_customConfigureRecipes;
    private boolean unknown_customConfigureRecipes;
    public @Nullable List<String> customConfigureRecipes() {
        if (!unknown_customConfigureRecipes) return value_customConfigureRecipes;
        throw new UndeferrableValueException("Value 'MysqlLayer.customConfigureRecipes' is not present");
    }

    @PolicyResourceProperty(name="customDeployRecipes", flag="unknown_customDeployRecipes")
    private @Nullable List<String> value_customDeployRecipes;
    private boolean unknown_customDeployRecipes;
    public @Nullable List<String> customDeployRecipes() {
        if (!unknown_customDeployRecipes) return value_customDeployRecipes;
        throw new UndeferrableValueException("Value 'MysqlLayer.customDeployRecipes' is not present");
    }

    /**
     * The ARN of an IAM profile that will be used for the layer&#39;s instances.
     * 
     */
    @PolicyResourceProperty(name="customInstanceProfileArn", flag="unknown_customInstanceProfileArn")
    private @Nullable String value_customInstanceProfileArn;
    private boolean unknown_customInstanceProfileArn;
    public @Nullable String customInstanceProfileArn() {
        if (!unknown_customInstanceProfileArn) return value_customInstanceProfileArn;
        throw new UndeferrableValueException("Value 'MysqlLayer.customInstanceProfileArn' is not present");
    }

    /**
     * Custom JSON attributes to apply to the layer.
     * 
     */
    @PolicyResourceProperty(name="customJson", flag="unknown_customJson")
    private @Nullable String value_customJson;
    private boolean unknown_customJson;
    public @Nullable String customJson() {
        if (!unknown_customJson) return value_customJson;
        throw new UndeferrableValueException("Value 'MysqlLayer.customJson' is not present");
    }

    /**
     * Ids for a set of security groups to apply to the layer&#39;s instances.
     * 
     */
    @PolicyResourceProperty(name="customSecurityGroupIds", flag="unknown_customSecurityGroupIds")
    private @Nullable List<String> value_customSecurityGroupIds;
    private boolean unknown_customSecurityGroupIds;
    public @Nullable List<String> customSecurityGroupIds() {
        if (!unknown_customSecurityGroupIds) return value_customSecurityGroupIds;
        throw new UndeferrableValueException("Value 'MysqlLayer.customSecurityGroupIds' is not present");
    }

    @PolicyResourceProperty(name="customSetupRecipes", flag="unknown_customSetupRecipes")
    private @Nullable List<String> value_customSetupRecipes;
    private boolean unknown_customSetupRecipes;
    public @Nullable List<String> customSetupRecipes() {
        if (!unknown_customSetupRecipes) return value_customSetupRecipes;
        throw new UndeferrableValueException("Value 'MysqlLayer.customSetupRecipes' is not present");
    }

    @PolicyResourceProperty(name="customShutdownRecipes", flag="unknown_customShutdownRecipes")
    private @Nullable List<String> value_customShutdownRecipes;
    private boolean unknown_customShutdownRecipes;
    public @Nullable List<String> customShutdownRecipes() {
        if (!unknown_customShutdownRecipes) return value_customShutdownRecipes;
        throw new UndeferrableValueException("Value 'MysqlLayer.customShutdownRecipes' is not present");
    }

    @PolicyResourceProperty(name="customUndeployRecipes", flag="unknown_customUndeployRecipes")
    private @Nullable List<String> value_customUndeployRecipes;
    private boolean unknown_customUndeployRecipes;
    public @Nullable List<String> customUndeployRecipes() {
        if (!unknown_customUndeployRecipes) return value_customUndeployRecipes;
        throw new UndeferrableValueException("Value 'MysqlLayer.customUndeployRecipes' is not present");
    }

    /**
     * Whether to enable Elastic Load Balancing connection draining.
     * 
     */
    @PolicyResourceProperty(name="drainElbOnShutdown", flag="unknown_drainElbOnShutdown")
    private @Nullable Boolean value_drainElbOnShutdown;
    private boolean unknown_drainElbOnShutdown;
    public @Nullable Boolean drainElbOnShutdown() {
        if (!unknown_drainElbOnShutdown) return value_drainElbOnShutdown;
        throw new UndeferrableValueException("Value 'MysqlLayer.drainElbOnShutdown' is not present");
    }

    /**
     * `ebs_volume` blocks, as described below, will each create an EBS volume and connect it to the layer&#39;s instances.
     * 
     */
    @PolicyResourceProperty(name="ebsVolumes", flag="unknown_ebsVolumes")
    private List<MysqlLayerEbsVolume> value_ebsVolumes;
    private boolean unknown_ebsVolumes;
    public List<MysqlLayerEbsVolume> ebsVolumes() {
        if (!unknown_ebsVolumes) return value_ebsVolumes;
        throw new UndeferrableValueException("Value 'MysqlLayer.ebsVolumes' is not present");
    }

    /**
     * Name of an Elastic Load Balancer to attach to this layer
     * 
     */
    @PolicyResourceProperty(name="elasticLoadBalancer", flag="unknown_elasticLoadBalancer")
    private @Nullable String value_elasticLoadBalancer;
    private boolean unknown_elasticLoadBalancer;
    public @Nullable String elasticLoadBalancer() {
        if (!unknown_elasticLoadBalancer) return value_elasticLoadBalancer;
        throw new UndeferrableValueException("Value 'MysqlLayer.elasticLoadBalancer' is not present");
    }

    /**
     * Whether to install OS and package updates on each instance when it boots.
     * 
     */
    @PolicyResourceProperty(name="installUpdatesOnBoot", flag="unknown_installUpdatesOnBoot")
    private @Nullable Boolean value_installUpdatesOnBoot;
    private boolean unknown_installUpdatesOnBoot;
    public @Nullable Boolean installUpdatesOnBoot() {
        if (!unknown_installUpdatesOnBoot) return value_installUpdatesOnBoot;
        throw new UndeferrableValueException("Value 'MysqlLayer.installUpdatesOnBoot' is not present");
    }

    /**
     * The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
     * 
     */
    @PolicyResourceProperty(name="instanceShutdownTimeout", flag="unknown_instanceShutdownTimeout")
    private @Nullable Integer value_instanceShutdownTimeout;
    private boolean unknown_instanceShutdownTimeout;
    public @Nullable Integer instanceShutdownTimeout() {
        if (!unknown_instanceShutdownTimeout) return value_instanceShutdownTimeout;
        throw new UndeferrableValueException("Value 'MysqlLayer.instanceShutdownTimeout' is not present");
    }

    @PolicyResourceProperty(name="loadBasedAutoScaling", flag="unknown_loadBasedAutoScaling")
    private MysqlLayerLoadBasedAutoScaling value_loadBasedAutoScaling;
    private boolean unknown_loadBasedAutoScaling;
    public MysqlLayerLoadBasedAutoScaling loadBasedAutoScaling() {
        if (!unknown_loadBasedAutoScaling) return value_loadBasedAutoScaling;
        throw new UndeferrableValueException("Value 'MysqlLayer.loadBasedAutoScaling' is not present");
    }

    /**
     * A human-readable name for the layer.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'MysqlLayer.name' is not present");
    }

    /**
     * Root password to use for MySQL.
     * 
     */
    @PolicyResourceProperty(name="rootPassword", flag="unknown_rootPassword")
    private @Nullable String value_rootPassword;
    private boolean unknown_rootPassword;
    public @Nullable String rootPassword() {
        if (!unknown_rootPassword) return value_rootPassword;
        throw new UndeferrableValueException("Value 'MysqlLayer.rootPassword' is not present");
    }

    /**
     * Whether to set the root user password to all instances in the stack so they can access the instances in this layer.
     * 
     */
    @PolicyResourceProperty(name="rootPasswordOnAllInstances", flag="unknown_rootPasswordOnAllInstances")
    private @Nullable Boolean value_rootPasswordOnAllInstances;
    private boolean unknown_rootPasswordOnAllInstances;
    public @Nullable Boolean rootPasswordOnAllInstances() {
        if (!unknown_rootPasswordOnAllInstances) return value_rootPasswordOnAllInstances;
        throw new UndeferrableValueException("Value 'MysqlLayer.rootPasswordOnAllInstances' is not present");
    }

    /**
     * ID of the stack the layer will belong to.
     * 
     */
    @PolicyResourceProperty(name="stackId", flag="unknown_stackId")
    private String value_stackId;
    private boolean unknown_stackId;
    public String stackId() {
        if (!unknown_stackId) return value_stackId;
        throw new UndeferrableValueException("Value 'MysqlLayer.stackId' is not present");
    }

    /**
     * Names of a set of system packages to install on the layer&#39;s instances.
     * 
     */
    @PolicyResourceProperty(name="systemPackages", flag="unknown_systemPackages")
    private @Nullable List<String> value_systemPackages;
    private boolean unknown_systemPackages;
    public @Nullable List<String> systemPackages() {
        if (!unknown_systemPackages) return value_systemPackages;
        throw new UndeferrableValueException("Value 'MysqlLayer.systemPackages' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * The following extra optional arguments, all lists of Chef recipe names, allow
     * custom Chef recipes to be applied to layer instances at the five different
     * lifecycle events, if custom cookbooks are enabled on the layer&#39;s stack:
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'MysqlLayer.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'MysqlLayer.tagsAll' is not present");
    }

    /**
     * Whether to use EBS-optimized instances.
     * 
     */
    @PolicyResourceProperty(name="useEbsOptimizedInstances", flag="unknown_useEbsOptimizedInstances")
    private @Nullable Boolean value_useEbsOptimizedInstances;
    private boolean unknown_useEbsOptimizedInstances;
    public @Nullable Boolean useEbsOptimizedInstances() {
        if (!unknown_useEbsOptimizedInstances) return value_useEbsOptimizedInstances;
        throw new UndeferrableValueException("Value 'MysqlLayer.useEbsOptimizedInstances' is not present");
    }

}
