// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.opensearch.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.opensearch.outputs.DomainClusterConfigColdStorageOptions;
import com.pulumi.policypacks.aws.opensearch.outputs.DomainClusterConfigNodeOption;
import com.pulumi.policypacks.aws.opensearch.outputs.DomainClusterConfigZoneAwarenessConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class DomainClusterConfig {

    /**
     * Configuration block containing cold storage configuration. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="coldStorageOptions", flag="unknown_coldStorageOptions")
    private @Nullable DomainClusterConfigColdStorageOptions value_coldStorageOptions;
    private boolean unknown_coldStorageOptions;
    public @Nullable DomainClusterConfigColdStorageOptions coldStorageOptions() {
        if (!unknown_coldStorageOptions) return value_coldStorageOptions;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.coldStorageOptions' is not present");
    }

    /**
     * Number of dedicated main nodes in the cluster.
     * 
     */
    @PolicyResourceProperty(name="dedicatedMasterCount", flag="unknown_dedicatedMasterCount")
    private @Nullable Integer value_dedicatedMasterCount;
    private boolean unknown_dedicatedMasterCount;
    public @Nullable Integer dedicatedMasterCount() {
        if (!unknown_dedicatedMasterCount) return value_dedicatedMasterCount;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.dedicatedMasterCount' is not present");
    }

    /**
     * Whether dedicated main nodes are enabled for the cluster.
     * 
     */
    @PolicyResourceProperty(name="dedicatedMasterEnabled", flag="unknown_dedicatedMasterEnabled")
    private @Nullable Boolean value_dedicatedMasterEnabled;
    private boolean unknown_dedicatedMasterEnabled;
    public @Nullable Boolean dedicatedMasterEnabled() {
        if (!unknown_dedicatedMasterEnabled) return value_dedicatedMasterEnabled;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.dedicatedMasterEnabled' is not present");
    }

    /**
     * Instance type of the dedicated main nodes in the cluster.
     * 
     */
    @PolicyResourceProperty(name="dedicatedMasterType", flag="unknown_dedicatedMasterType")
    private @Nullable String value_dedicatedMasterType;
    private boolean unknown_dedicatedMasterType;
    public @Nullable String dedicatedMasterType() {
        if (!unknown_dedicatedMasterType) return value_dedicatedMasterType;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.dedicatedMasterType' is not present");
    }

    /**
     * Number of instances in the cluster.
     * 
     */
    @PolicyResourceProperty(name="instanceCount", flag="unknown_instanceCount")
    private @Nullable Integer value_instanceCount;
    private boolean unknown_instanceCount;
    public @Nullable Integer instanceCount() {
        if (!unknown_instanceCount) return value_instanceCount;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.instanceCount' is not present");
    }

    /**
     * Instance type of data nodes in the cluster.
     * 
     */
    @PolicyResourceProperty(name="instanceType", flag="unknown_instanceType")
    private @Nullable String value_instanceType;
    private boolean unknown_instanceType;
    public @Nullable String instanceType() {
        if (!unknown_instanceType) return value_instanceType;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.instanceType' is not present");
    }

    /**
     * Whether a multi-AZ domain is turned on with a standby AZ. For more information, see [Configuring a multi-AZ domain in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html).
     * 
     */
    @PolicyResourceProperty(name="multiAzWithStandbyEnabled", flag="unknown_multiAzWithStandbyEnabled")
    private @Nullable Boolean value_multiAzWithStandbyEnabled;
    private boolean unknown_multiAzWithStandbyEnabled;
    public @Nullable Boolean multiAzWithStandbyEnabled() {
        if (!unknown_multiAzWithStandbyEnabled) return value_multiAzWithStandbyEnabled;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.multiAzWithStandbyEnabled' is not present");
    }

    /**
     * List of node options for the domain.
     * 
     */
    @PolicyResourceProperty(name="nodeOptions", flag="unknown_nodeOptions")
    private @Nullable List<DomainClusterConfigNodeOption> value_nodeOptions;
    private boolean unknown_nodeOptions;
    public @Nullable List<DomainClusterConfigNodeOption> nodeOptions() {
        if (!unknown_nodeOptions) return value_nodeOptions;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.nodeOptions' is not present");
    }

    /**
     * Number of warm nodes in the cluster. Valid values are between `2` and `150`. `warm_count` can be only and must be set when `warm_enabled` is set to `true`.
     * 
     */
    @PolicyResourceProperty(name="warmCount", flag="unknown_warmCount")
    private @Nullable Integer value_warmCount;
    private boolean unknown_warmCount;
    public @Nullable Integer warmCount() {
        if (!unknown_warmCount) return value_warmCount;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.warmCount' is not present");
    }

    /**
     * Whether to enable warm storage.
     * 
     */
    @PolicyResourceProperty(name="warmEnabled", flag="unknown_warmEnabled")
    private @Nullable Boolean value_warmEnabled;
    private boolean unknown_warmEnabled;
    public @Nullable Boolean warmEnabled() {
        if (!unknown_warmEnabled) return value_warmEnabled;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.warmEnabled' is not present");
    }

    /**
     * Instance type for the OpenSearch cluster&#39;s warm nodes. Valid values are `ultrawarm1.medium.search`, `ultrawarm1.large.search` and `ultrawarm1.xlarge.search`. `warm_type` can be only and must be set when `warm_enabled` is set to `true`.
     * 
     */
    @PolicyResourceProperty(name="warmType", flag="unknown_warmType")
    private @Nullable String value_warmType;
    private boolean unknown_warmType;
    public @Nullable String warmType() {
        if (!unknown_warmType) return value_warmType;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.warmType' is not present");
    }

    /**
     * Configuration block containing zone awareness settings. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="zoneAwarenessConfig", flag="unknown_zoneAwarenessConfig")
    private @Nullable DomainClusterConfigZoneAwarenessConfig value_zoneAwarenessConfig;
    private boolean unknown_zoneAwarenessConfig;
    public @Nullable DomainClusterConfigZoneAwarenessConfig zoneAwarenessConfig() {
        if (!unknown_zoneAwarenessConfig) return value_zoneAwarenessConfig;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.zoneAwarenessConfig' is not present");
    }

    /**
     * Whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availability_zone_count` within the `zone_awareness_config` must be set to `3`.
     * 
     */
    @PolicyResourceProperty(name="zoneAwarenessEnabled", flag="unknown_zoneAwarenessEnabled")
    private @Nullable Boolean value_zoneAwarenessEnabled;
    private boolean unknown_zoneAwarenessEnabled;
    public @Nullable Boolean zoneAwarenessEnabled() {
        if (!unknown_zoneAwarenessEnabled) return value_zoneAwarenessEnabled;
        throw new UndeferrableValueException("Value 'DomainClusterConfig.zoneAwarenessEnabled' is not present");
    }

}
