// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition {

    /**
     * Number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
     * 
     */
    private @Nullable UndeferrableValue<Integer> newerNoncurrentVersions;

    public @Nullable Integer newerNoncurrentVersions() {
        if (newerNoncurrentVersions == null) return null;
        return newerNoncurrentVersions.getValue("BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition.newerNoncurrentVersions");
    }

    /**
     * Number of days an object is noncurrent before Amazon S3 can perform the associated action.
     * 
     */
    private UndeferrableValue<Integer> noncurrentDays;

    public Integer noncurrentDays() {
        if (noncurrentDays == null) return null;
        return noncurrentDays.getValue("BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition.noncurrentDays");
    }

    /**
     * Class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
     * 
     */
    private UndeferrableValue<String> storageClass;

    public String storageClass() {
        if (storageClass == null) return null;
        return storageClass.getValue("BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition.storageClass");
    }

}
