// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudwatch.inputs.LogDeliveryS3DeliveryConfigurationArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudwatch/logDelivery:LogDelivery")
public final class LogDeliveryArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The ARN of the delivery destination to use for this delivery.
     * 
     */
    private UndeferrableValue<String> deliveryDestinationArn;

    public String deliveryDestinationArn() {
        if (deliveryDestinationArn == null) return null;
        return deliveryDestinationArn.getValue("LogDeliveryArgs.deliveryDestinationArn");
    }

    /**
     * The name of the delivery source to use for this delivery.
     * 
     */
    private UndeferrableValue<String> deliverySourceName;

    public String deliverySourceName() {
        if (deliverySourceName == null) return null;
        return deliverySourceName.getValue("LogDeliveryArgs.deliverySourceName");
    }

    /**
     * The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
     * 
     */
    private UndeferrableValue<String> fieldDelimiter;

    public String fieldDelimiter() {
        if (fieldDelimiter == null) return null;
        return fieldDelimiter.getValue("LogDeliveryArgs.fieldDelimiter");
    }

    /**
     * The list of record fields to be delivered to the destination, in order.
     * 
     */
    private UndeferrableValue<List<String>> recordFields;

    public List<String> recordFields() {
        if (recordFields == null) return null;
        return recordFields.getValue("LogDeliveryArgs.recordFields");
    }

    /**
     * Parameters that are valid only when the delivery&#39;s delivery destination is an S3 bucket.
     * 
     */
    private UndeferrableValue<List<LogDeliveryS3DeliveryConfigurationArgs>> s3DeliveryConfigurations;

    public List<LogDeliveryS3DeliveryConfigurationArgs> s3DeliveryConfigurations() {
        if (s3DeliveryConfigurations == null) return null;
        return s3DeliveryConfigurations.getValue("LogDeliveryArgs.s3DeliveryConfigurations");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("LogDeliveryArgs.tags");
    }

}
