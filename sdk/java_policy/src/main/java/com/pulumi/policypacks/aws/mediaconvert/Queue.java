// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.mediaconvert;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.mediaconvert.outputs.QueueReservationPlanSettings;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:mediaconvert/queue:Queue")
public final class Queue extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Arn of the queue
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Queue.arn' is not present");
    }

    /**
     * The maximum number of jobs your queue can process concurrently. For on-demand queues, the value you enter is constrained by your service quotas for Maximum concurrent jobs, per on-demand queue and Maximum concurrent jobs, per account. For reserved queues, specify the number of jobs you can process concurrently in your reservation plan instead.
     * 
     */
    @PolicyResourceProperty(name="concurrentJobs", flag="unknown_concurrentJobs")
    private Integer value_concurrentJobs;
    private boolean unknown_concurrentJobs;
    public Integer concurrentJobs() {
        if (!unknown_concurrentJobs) return value_concurrentJobs;
        throw new UndeferrableValueException("Value 'Queue.concurrentJobs' is not present");
    }

    /**
     * A description of the queue
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Queue.description' is not present");
    }

    /**
     * A unique identifier describing the queue
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Queue.name' is not present");
    }

    /**
     * Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are `ON_DEMAND` or `RESERVED`. Default to `ON_DEMAND`.
     * 
     */
    @PolicyResourceProperty(name="pricingPlan", flag="unknown_pricingPlan")
    private @Nullable String value_pricingPlan;
    private boolean unknown_pricingPlan;
    public @Nullable String pricingPlan() {
        if (!unknown_pricingPlan) return value_pricingPlan;
        throw new UndeferrableValueException("Value 'Queue.pricingPlan' is not present");
    }

    /**
     * A detail pricing plan of the  reserved queue. See below.
     * 
     */
    @PolicyResourceProperty(name="reservationPlanSettings", flag="unknown_reservationPlanSettings")
    private QueueReservationPlanSettings value_reservationPlanSettings;
    private boolean unknown_reservationPlanSettings;
    public QueueReservationPlanSettings reservationPlanSettings() {
        if (!unknown_reservationPlanSettings) return value_reservationPlanSettings;
        throw new UndeferrableValueException("Value 'Queue.reservationPlanSettings' is not present");
    }

    /**
     * A status of the queue. Valid values are `ACTIVE` or `RESERVED`. Default to `PAUSED`.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private @Nullable String value_status;
    private boolean unknown_status;
    public @Nullable String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'Queue.status' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Queue.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Queue.tagsAll' is not present");
    }

}
