// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.imagebuilder;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.imagebuilder.inputs.ContainerRecipeComponentArgs;
import com.pulumi.policypacks.aws.imagebuilder.inputs.ContainerRecipeInstanceConfigurationArgs;
import com.pulumi.policypacks.aws.imagebuilder.inputs.ContainerRecipeTargetRepositoryArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:imagebuilder/containerRecipe:ContainerRecipe")
public final class ContainerRecipeArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Ordered configuration block(s) with components for the container recipe. Detailed below.
     * 
     */
    private UndeferrableValue<List<ContainerRecipeComponentArgs>> components;

    public List<ContainerRecipeComponentArgs> components() {
        if (components == null) return null;
        return components.getValue("ContainerRecipeArgs.components");
    }

    /**
     * The type of the container to create. Valid values: `DOCKER`.
     * 
     */
    private UndeferrableValue<String> containerType;

    public String containerType() {
        if (containerType == null) return null;
        return containerType.getValue("ContainerRecipeArgs.containerType");
    }

    /**
     * The description of the container recipe.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("ContainerRecipeArgs.description");
    }

    /**
     * The Dockerfile template used to build the image as an inline data blob.
     * 
     */
    private UndeferrableValue<String> dockerfileTemplateData;

    public String dockerfileTemplateData() {
        if (dockerfileTemplateData == null) return null;
        return dockerfileTemplateData.getValue("ContainerRecipeArgs.dockerfileTemplateData");
    }

    /**
     * The Amazon S3 URI for the Dockerfile that will be used to build the container image.
     * 
     */
    private UndeferrableValue<String> dockerfileTemplateUri;

    public String dockerfileTemplateUri() {
        if (dockerfileTemplateUri == null) return null;
        return dockerfileTemplateUri.getValue("ContainerRecipeArgs.dockerfileTemplateUri");
    }

    /**
     * Configuration block used to configure an instance for building and testing container images. Detailed below.
     * 
     */
    private UndeferrableValue<ContainerRecipeInstanceConfigurationArgs> instanceConfiguration;

    public ContainerRecipeInstanceConfigurationArgs instanceConfiguration() {
        if (instanceConfiguration == null) return null;
        return instanceConfiguration.getValue("ContainerRecipeArgs.instanceConfiguration");
    }

    /**
     * The KMS key used to encrypt the container image.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("ContainerRecipeArgs.kmsKeyId");
    }

    /**
     * The name of the container recipe.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ContainerRecipeArgs.name");
    }

    /**
     * The base image for the container recipe.
     * 
     */
    private UndeferrableValue<String> parentImage;

    public String parentImage() {
        if (parentImage == null) return null;
        return parentImage.getValue("ContainerRecipeArgs.parentImage");
    }

    /**
     * Specifies the operating system platform when you use a custom base image.
     * 
     */
    private UndeferrableValue<String> platformOverride;

    public String platformOverride() {
        if (platformOverride == null) return null;
        return platformOverride.getValue("ContainerRecipeArgs.platformOverride");
    }

    /**
     * Key-value map of resource tags for the container recipe. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ContainerRecipeArgs.tags");
    }

    /**
     * The destination repository for the container image. Detailed below.
     * 
     */
    private UndeferrableValue<ContainerRecipeTargetRepositoryArgs> targetRepository;

    public ContainerRecipeTargetRepositoryArgs targetRepository() {
        if (targetRepository == null) return null;
        return targetRepository.getValue("ContainerRecipeArgs.targetRepository");
    }

    /**
     * Version of the container recipe.
     * 
     * The following attributes are optional:
     * 
     */
    private UndeferrableValue<String> version;

    public String version() {
        if (version == null) return null;
        return version.getValue("ContainerRecipeArgs.version");
    }

    /**
     * The working directory to be used during build and test workflows.
     * 
     */
    private UndeferrableValue<String> workingDirectory;

    public String workingDirectory() {
        if (workingDirectory == null) return null;
        return workingDirectory.getValue("ContainerRecipeArgs.workingDirectory");
    }

}
