// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.autoscaling.inputs.PolicyPredictiveScalingConfigurationArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.PolicyStepAdjustmentArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:autoscaling/policy:Policy")
public final class PolicyArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     * 
     */
    private UndeferrableValue<String> adjustmentType;

    public String adjustmentType() {
        if (adjustmentType == null) return null;
        return adjustmentType.getValue("PolicyArgs.adjustmentType");
    }

    /**
     * Name of the autoscaling group.
     * 
     */
    private UndeferrableValue<String> autoscalingGroupName;

    public String autoscalingGroupName() {
        if (autoscalingGroupName == null) return null;
        return autoscalingGroupName.getValue("PolicyArgs.autoscalingGroupName");
    }

    /**
     * Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     * 
     */
    private UndeferrableValue<Integer> cooldown;

    public Integer cooldown() {
        if (cooldown == null) return null;
        return cooldown.getValue("PolicyArgs.cooldown");
    }

    /**
     * Whether the scaling policy is enabled or disabled. Default: `true`.
     * 
     * The following argument is only available to &#34;SimpleScaling&#34; and &#34;StepScaling&#34; type policies:
     * 
     */
    private UndeferrableValue<Boolean> enabled;

    public Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("PolicyArgs.enabled");
    }

    /**
     * Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group&#39;s specified cooldown period.
     * 
     */
    private UndeferrableValue<Integer> estimatedInstanceWarmup;

    public Integer estimatedInstanceWarmup() {
        if (estimatedInstanceWarmup == null) return null;
        return estimatedInstanceWarmup.getValue("PolicyArgs.estimatedInstanceWarmup");
    }

    /**
     * Aggregation type for the policy&#39;s metrics. Valid values are &#34;Minimum&#34;, &#34;Maximum&#34;, and &#34;Average&#34;. Without a value, AWS will treat the aggregation type as &#34;Average&#34;.
     * 
     */
    private UndeferrableValue<String> metricAggregationType;

    public String metricAggregationType() {
        if (metricAggregationType == null) return null;
        return metricAggregationType.getValue("PolicyArgs.metricAggregationType");
    }

    /**
     * Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.
     * 
     * The following arguments are only available to &#34;SimpleScaling&#34; type policies:
     * 
     */
    private UndeferrableValue<Integer> minAdjustmentMagnitude;

    public Integer minAdjustmentMagnitude() {
        if (minAdjustmentMagnitude == null) return null;
        return minAdjustmentMagnitude.getValue("PolicyArgs.minAdjustmentMagnitude");
    }

    /**
     * Name of the policy.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("PolicyArgs.name");
    }

    /**
     * Policy type, either &#34;SimpleScaling&#34;, &#34;StepScaling&#34;, &#34;TargetTrackingScaling&#34;, or &#34;PredictiveScaling&#34;. If this value isn&#39;t provided, AWS will default to &#34;SimpleScaling.&#34;
     * 
     */
    private UndeferrableValue<String> policyType;

    public String policyType() {
        if (policyType == null) return null;
        return policyType.getValue("PolicyArgs.policyType");
    }

    /**
     * Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
     * 
     */
    private UndeferrableValue<PolicyPredictiveScalingConfigurationArgs> predictiveScalingConfiguration;

    public PolicyPredictiveScalingConfigurationArgs predictiveScalingConfiguration() {
        if (predictiveScalingConfiguration == null) return null;
        return predictiveScalingConfiguration.getValue("PolicyArgs.predictiveScalingConfiguration");
    }

    /**
     * Number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     * 
     */
    private UndeferrableValue<Integer> scalingAdjustment;

    public Integer scalingAdjustment() {
        if (scalingAdjustment == null) return null;
        return scalingAdjustment.getValue("PolicyArgs.scalingAdjustment");
    }

    /**
     * Set of adjustments that manage
     * group scaling. These have the following structure:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.autoscaling.Policy;
     * import com.pulumi.aws.autoscaling.PolicyArgs;
     * import com.pulumi.aws.autoscaling.inputs.PolicyStepAdjustmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Policy("example", PolicyArgs.builder()
     *             .stepAdjustments(            
     *                 PolicyStepAdjustmentArgs.builder()
     *                     .scalingAdjustment(-1)
     *                     .metricIntervalLowerBound("1")
     *                     .metricIntervalUpperBound("2")
     *                     .build(),
     *                 PolicyStepAdjustmentArgs.builder()
     *                     .scalingAdjustment(1)
     *                     .metricIntervalLowerBound("2")
     *                     .metricIntervalUpperBound("3")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The following fields are available in step adjustments:
     * 
     */
    private UndeferrableValue<List<PolicyStepAdjustmentArgs>> stepAdjustments;

    public List<PolicyStepAdjustmentArgs> stepAdjustments() {
        if (stepAdjustments == null) return null;
        return stepAdjustments.getValue("PolicyArgs.stepAdjustments");
    }

    /**
     * Target tracking policy. These have the following structure:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.autoscaling.Policy;
     * import com.pulumi.aws.autoscaling.PolicyArgs;
     * import com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationArgs;
     * import com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Policy("example", PolicyArgs.builder()
     *             .targetTrackingConfiguration(PolicyTargetTrackingConfigurationArgs.builder()
     *                 .predefinedMetricSpecification(PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs.builder()
     *                     .predefinedMetricType("ASGAverageCPUUtilization")
     *                     .build())
     *                 .targetValue(40.0)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The following fields are available in target tracking configuration:
     * 
     */
    private UndeferrableValue<PolicyTargetTrackingConfigurationArgs> targetTrackingConfiguration;

    public PolicyTargetTrackingConfigurationArgs targetTrackingConfiguration() {
        if (targetTrackingConfiguration == null) return null;
        return targetTrackingConfiguration.getValue("PolicyArgs.targetTrackingConfiguration");
    }

}
