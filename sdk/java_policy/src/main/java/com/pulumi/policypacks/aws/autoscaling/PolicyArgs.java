// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.autoscaling.inputs.PolicyPredictiveScalingConfigurationArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.PolicyStepAdjustmentArgs;
import com.pulumi.policypacks.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:autoscaling/policy:Policy")
public final class PolicyArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     * 
     */
    @PolicyResourceProperty(name="adjustmentType", flag="unknown_adjustmentType")
    private String value_adjustmentType;
    private boolean unknown_adjustmentType;
    public String adjustmentType() {
        if (!unknown_adjustmentType) return value_adjustmentType;
        throw new UndeferrableValueException("Value 'PolicyArgs.adjustmentType' is not present");
    }

    /**
     * Name of the autoscaling group.
     * 
     */
    @PolicyResourceProperty(name="autoscalingGroupName", flag="unknown_autoscalingGroupName")
    private String value_autoscalingGroupName;
    private boolean unknown_autoscalingGroupName;
    public String autoscalingGroupName() {
        if (!unknown_autoscalingGroupName) return value_autoscalingGroupName;
        throw new UndeferrableValueException("Value 'PolicyArgs.autoscalingGroupName' is not present");
    }

    /**
     * Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     * 
     */
    @PolicyResourceProperty(name="cooldown", flag="unknown_cooldown")
    private Integer value_cooldown;
    private boolean unknown_cooldown;
    public Integer cooldown() {
        if (!unknown_cooldown) return value_cooldown;
        throw new UndeferrableValueException("Value 'PolicyArgs.cooldown' is not present");
    }

    /**
     * Whether the scaling policy is enabled or disabled. Default: `true`.
     * 
     * The following argument is only available to &#34;SimpleScaling&#34; and &#34;StepScaling&#34; type policies:
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private Boolean value_enabled;
    private boolean unknown_enabled;
    public Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'PolicyArgs.enabled' is not present");
    }

    /**
     * Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group&#39;s specified cooldown period.
     * 
     */
    @PolicyResourceProperty(name="estimatedInstanceWarmup", flag="unknown_estimatedInstanceWarmup")
    private Integer value_estimatedInstanceWarmup;
    private boolean unknown_estimatedInstanceWarmup;
    public Integer estimatedInstanceWarmup() {
        if (!unknown_estimatedInstanceWarmup) return value_estimatedInstanceWarmup;
        throw new UndeferrableValueException("Value 'PolicyArgs.estimatedInstanceWarmup' is not present");
    }

    /**
     * Aggregation type for the policy&#39;s metrics. Valid values are &#34;Minimum&#34;, &#34;Maximum&#34;, and &#34;Average&#34;. Without a value, AWS will treat the aggregation type as &#34;Average&#34;.
     * 
     */
    @PolicyResourceProperty(name="metricAggregationType", flag="unknown_metricAggregationType")
    private String value_metricAggregationType;
    private boolean unknown_metricAggregationType;
    public String metricAggregationType() {
        if (!unknown_metricAggregationType) return value_metricAggregationType;
        throw new UndeferrableValueException("Value 'PolicyArgs.metricAggregationType' is not present");
    }

    /**
     * Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.
     * 
     * The following arguments are only available to &#34;SimpleScaling&#34; type policies:
     * 
     */
    @PolicyResourceProperty(name="minAdjustmentMagnitude", flag="unknown_minAdjustmentMagnitude")
    private Integer value_minAdjustmentMagnitude;
    private boolean unknown_minAdjustmentMagnitude;
    public Integer minAdjustmentMagnitude() {
        if (!unknown_minAdjustmentMagnitude) return value_minAdjustmentMagnitude;
        throw new UndeferrableValueException("Value 'PolicyArgs.minAdjustmentMagnitude' is not present");
    }

    /**
     * Name of the policy.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'PolicyArgs.name' is not present");
    }

    /**
     * Policy type, either &#34;SimpleScaling&#34;, &#34;StepScaling&#34;, &#34;TargetTrackingScaling&#34;, or &#34;PredictiveScaling&#34;. If this value isn&#39;t provided, AWS will default to &#34;SimpleScaling.&#34;
     * 
     */
    @PolicyResourceProperty(name="policyType", flag="unknown_policyType")
    private String value_policyType;
    private boolean unknown_policyType;
    public String policyType() {
        if (!unknown_policyType) return value_policyType;
        throw new UndeferrableValueException("Value 'PolicyArgs.policyType' is not present");
    }

    /**
     * Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
     * 
     */
    @PolicyResourceProperty(name="predictiveScalingConfiguration", flag="unknown_predictiveScalingConfiguration")
    private PolicyPredictiveScalingConfigurationArgs value_predictiveScalingConfiguration;
    private boolean unknown_predictiveScalingConfiguration;
    public PolicyPredictiveScalingConfigurationArgs predictiveScalingConfiguration() {
        if (!unknown_predictiveScalingConfiguration) return value_predictiveScalingConfiguration;
        throw new UndeferrableValueException("Value 'PolicyArgs.predictiveScalingConfiguration' is not present");
    }

    /**
     * Number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     * 
     */
    @PolicyResourceProperty(name="scalingAdjustment", flag="unknown_scalingAdjustment")
    private Integer value_scalingAdjustment;
    private boolean unknown_scalingAdjustment;
    public Integer scalingAdjustment() {
        if (!unknown_scalingAdjustment) return value_scalingAdjustment;
        throw new UndeferrableValueException("Value 'PolicyArgs.scalingAdjustment' is not present");
    }

    /**
     * Set of adjustments that manage
     * group scaling. These have the following structure:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.autoscaling.Policy;
     * import com.pulumi.aws.autoscaling.PolicyArgs;
     * import com.pulumi.aws.autoscaling.inputs.PolicyStepAdjustmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Policy("example", PolicyArgs.builder()
     *             .stepAdjustments(            
     *                 PolicyStepAdjustmentArgs.builder()
     *                     .scalingAdjustment(-1)
     *                     .metricIntervalLowerBound("1")
     *                     .metricIntervalUpperBound("2")
     *                     .build(),
     *                 PolicyStepAdjustmentArgs.builder()
     *                     .scalingAdjustment(1)
     *                     .metricIntervalLowerBound("2")
     *                     .metricIntervalUpperBound("3")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The following fields are available in step adjustments:
     * 
     */
    @PolicyResourceProperty(name="stepAdjustments", flag="unknown_stepAdjustments")
    private List<PolicyStepAdjustmentArgs> value_stepAdjustments;
    private boolean unknown_stepAdjustments;
    public List<PolicyStepAdjustmentArgs> stepAdjustments() {
        if (!unknown_stepAdjustments) return value_stepAdjustments;
        throw new UndeferrableValueException("Value 'PolicyArgs.stepAdjustments' is not present");
    }

    /**
     * Target tracking policy. These have the following structure:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.autoscaling.Policy;
     * import com.pulumi.aws.autoscaling.PolicyArgs;
     * import com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationArgs;
     * import com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Policy("example", PolicyArgs.builder()
     *             .targetTrackingConfiguration(PolicyTargetTrackingConfigurationArgs.builder()
     *                 .predefinedMetricSpecification(PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs.builder()
     *                     .predefinedMetricType("ASGAverageCPUUtilization")
     *                     .build())
     *                 .targetValue(40.0)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The following fields are available in target tracking configuration:
     * 
     */
    @PolicyResourceProperty(name="targetTrackingConfiguration", flag="unknown_targetTrackingConfiguration")
    private PolicyTargetTrackingConfigurationArgs value_targetTrackingConfiguration;
    private boolean unknown_targetTrackingConfiguration;
    public PolicyTargetTrackingConfigurationArgs targetTrackingConfiguration() {
        if (!unknown_targetTrackingConfiguration) return value_targetTrackingConfiguration;
        throw new UndeferrableValueException("Value 'PolicyArgs.targetTrackingConfiguration' is not present");
    }

}
