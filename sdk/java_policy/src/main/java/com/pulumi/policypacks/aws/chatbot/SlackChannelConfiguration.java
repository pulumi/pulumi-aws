// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.chatbot;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.chatbot.outputs.SlackChannelConfigurationTimeouts;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration")
public final class SlackChannelConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Slack channel configuration.
     * 
     */
    @PolicyResourceProperty(name="chatConfigurationArn", flag="unknown_chatConfigurationArn")
    private String value_chatConfigurationArn;
    private boolean unknown_chatConfigurationArn;
    public String chatConfigurationArn() {
        if (!unknown_chatConfigurationArn) return value_chatConfigurationArn;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.chatConfigurationArn' is not present");
    }

    /**
     * Name of the Slack channel configuration.
     * 
     */
    @PolicyResourceProperty(name="configurationName", flag="unknown_configurationName")
    private String value_configurationName;
    private boolean unknown_configurationName;
    public String configurationName() {
        if (!unknown_configurationName) return value_configurationName;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.configurationName' is not present");
    }

    /**
     * List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
     * 
     */
    @PolicyResourceProperty(name="guardrailPolicyArns", flag="unknown_guardrailPolicyArns")
    private List<String> value_guardrailPolicyArns;
    private boolean unknown_guardrailPolicyArns;
    public List<String> guardrailPolicyArns() {
        if (!unknown_guardrailPolicyArns) return value_guardrailPolicyArns;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.guardrailPolicyArns' is not present");
    }

    /**
     * User-defined role that AWS Chatbot assumes. This is not the service-linked role.
     * 
     */
    @PolicyResourceProperty(name="iamRoleArn", flag="unknown_iamRoleArn")
    private String value_iamRoleArn;
    private boolean unknown_iamRoleArn;
    public String iamRoleArn() {
        if (!unknown_iamRoleArn) return value_iamRoleArn;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.iamRoleArn' is not present");
    }

    /**
     * Logging levels include `ERROR`, `INFO`, or `NONE`.
     * 
     */
    @PolicyResourceProperty(name="loggingLevel", flag="unknown_loggingLevel")
    private String value_loggingLevel;
    private boolean unknown_loggingLevel;
    public String loggingLevel() {
        if (!unknown_loggingLevel) return value_loggingLevel;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.loggingLevel' is not present");
    }

    /**
     * ID of the Slack channel. For example, `C07EZ1ABC23`.
     * 
     */
    @PolicyResourceProperty(name="slackChannelId", flag="unknown_slackChannelId")
    private String value_slackChannelId;
    private boolean unknown_slackChannelId;
    public String slackChannelId() {
        if (!unknown_slackChannelId) return value_slackChannelId;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.slackChannelId' is not present");
    }

    /**
     * Name of the Slack channel.
     * 
     */
    @PolicyResourceProperty(name="slackChannelName", flag="unknown_slackChannelName")
    private String value_slackChannelName;
    private boolean unknown_slackChannelName;
    public String slackChannelName() {
        if (!unknown_slackChannelName) return value_slackChannelName;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.slackChannelName' is not present");
    }

    /**
     * ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="slackTeamId", flag="unknown_slackTeamId")
    private String value_slackTeamId;
    private boolean unknown_slackTeamId;
    public String slackTeamId() {
        if (!unknown_slackTeamId) return value_slackTeamId;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.slackTeamId' is not present");
    }

    /**
     * Name of the Slack team.
     * 
     */
    @PolicyResourceProperty(name="slackTeamName", flag="unknown_slackTeamName")
    private String value_slackTeamName;
    private boolean unknown_slackTeamName;
    public String slackTeamName() {
        if (!unknown_slackTeamName) return value_slackTeamName;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.slackTeamName' is not present");
    }

    /**
     * ARNs of the SNS topics that deliver notifications to AWS Chatbot.
     * 
     */
    @PolicyResourceProperty(name="snsTopicArns", flag="unknown_snsTopicArns")
    private List<String> value_snsTopicArns;
    private boolean unknown_snsTopicArns;
    public List<String> snsTopicArns() {
        if (!unknown_snsTopicArns) return value_snsTopicArns;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.snsTopicArns' is not present");
    }

    /**
     * Map of tags assigned to the resource.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.tagsAll' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private @Nullable SlackChannelConfigurationTimeouts value_timeouts;
    private boolean unknown_timeouts;
    public @Nullable SlackChannelConfigurationTimeouts timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.timeouts' is not present");
    }

    /**
     * Enables use of a user role requirement in your chat configuration.
     * 
     */
    @PolicyResourceProperty(name="userAuthorizationRequired", flag="unknown_userAuthorizationRequired")
    private Boolean value_userAuthorizationRequired;
    private boolean unknown_userAuthorizationRequired;
    public Boolean userAuthorizationRequired() {
        if (!unknown_userAuthorizationRequired) return value_userAuthorizationRequired;
        throw new UndeferrableValueException("Value 'SlackChannelConfiguration.userAuthorizationRequired' is not present");
    }

}
