// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appstream;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.appstream.inputs.ImageBuilderAccessEndpointArgs;
import com.pulumi.policypacks.aws.appstream.inputs.ImageBuilderDomainJoinInfoArgs;
import com.pulumi.policypacks.aws.appstream.inputs.ImageBuilderVpcConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:appstream/imageBuilder:ImageBuilder")
public final class ImageBuilderArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
     * 
     */
    private UndeferrableValue<List<ImageBuilderAccessEndpointArgs>> accessEndpoints;

    public List<ImageBuilderAccessEndpointArgs> accessEndpoints() {
        if (accessEndpoints == null) return null;
        return accessEndpoints.getValue("ImageBuilderArgs.accessEndpoints");
    }

    /**
     * Version of the AppStream 2.0 agent to use for this image builder.
     * 
     */
    private UndeferrableValue<String> appstreamAgentVersion;

    public String appstreamAgentVersion() {
        if (appstreamAgentVersion == null) return null;
        return appstreamAgentVersion.getValue("ImageBuilderArgs.appstreamAgentVersion");
    }

    /**
     * Description to display.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("ImageBuilderArgs.description");
    }

    /**
     * Human-readable friendly name for the AppStream image builder.
     * 
     */
    private UndeferrableValue<String> displayName;

    public String displayName() {
        if (displayName == null) return null;
        return displayName.getValue("ImageBuilderArgs.displayName");
    }

    /**
     * Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
     * 
     */
    private UndeferrableValue<ImageBuilderDomainJoinInfoArgs> domainJoinInfo;

    public ImageBuilderDomainJoinInfoArgs domainJoinInfo() {
        if (domainJoinInfo == null) return null;
        return domainJoinInfo.getValue("ImageBuilderArgs.domainJoinInfo");
    }

    /**
     * Enables or disables default internet access for the image builder.
     * 
     */
    private UndeferrableValue<Boolean> enableDefaultInternetAccess;

    public Boolean enableDefaultInternetAccess() {
        if (enableDefaultInternetAccess == null) return null;
        return enableDefaultInternetAccess.getValue("ImageBuilderArgs.enableDefaultInternetAccess");
    }

    /**
     * ARN of the IAM role to apply to the image builder.
     * 
     */
    private UndeferrableValue<String> iamRoleArn;

    public String iamRoleArn() {
        if (iamRoleArn == null) return null;
        return iamRoleArn.getValue("ImageBuilderArgs.iamRoleArn");
    }

    /**
     * ARN of the public, private, or shared image to use.
     * 
     */
    private UndeferrableValue<String> imageArn;

    public String imageArn() {
        if (imageArn == null) return null;
        return imageArn.getValue("ImageBuilderArgs.imageArn");
    }

    /**
     * Name of the image used to create the image builder.
     * 
     */
    private UndeferrableValue<String> imageName;

    public String imageName() {
        if (imageName == null) return null;
        return imageName.getValue("ImageBuilderArgs.imageName");
    }

    /**
     * Instance type to use when launching the image builder.
     * 
     */
    private UndeferrableValue<String> instanceType;

    public String instanceType() {
        if (instanceType == null) return null;
        return instanceType.getValue("ImageBuilderArgs.instanceType");
    }

    /**
     * Unique name for the image builder.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ImageBuilderArgs.name");
    }

    /**
     * Map of tags to assign to the instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ImageBuilderArgs.tags");
    }

    /**
     * Configuration block for the VPC configuration for the image builder. See below.
     * 
     */
    private UndeferrableValue<ImageBuilderVpcConfigArgs> vpcConfig;

    public ImageBuilderVpcConfigArgs vpcConfig() {
        if (vpcConfig == null) return null;
        return vpcConfig.getValue("ImageBuilderArgs.vpcConfig");
    }

}
