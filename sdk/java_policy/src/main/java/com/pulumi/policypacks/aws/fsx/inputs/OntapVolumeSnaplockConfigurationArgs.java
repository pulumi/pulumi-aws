// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.fsx.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.fsx.inputs.OntapVolumeSnaplockConfigurationAutocommitPeriodArgs;
import com.pulumi.policypacks.aws.fsx.inputs.OntapVolumeSnaplockConfigurationRetentionPeriodArgs;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


public final class OntapVolumeSnaplockConfigurationArgs {

    /**
     * Enables or disables the audit log volume for an FSx for ONTAP SnapLock volume. The default value is `false`.
     * 
     */
    @PolicyResourceProperty(name="auditLogVolume", flag="unknown_auditLogVolume")
    private Boolean value_auditLogVolume;
    private boolean unknown_auditLogVolume;
    public Boolean auditLogVolume() {
        if (!unknown_auditLogVolume) return value_auditLogVolume;
        throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfigurationArgs.auditLogVolume' is not present");
    }

    /**
     * The configuration object for setting the autocommit period of files in an FSx for ONTAP SnapLock volume. See `autocommit_period` Block for details.
     * 
     */
    @PolicyResourceProperty(name="autocommitPeriod", flag="unknown_autocommitPeriod")
    private OntapVolumeSnaplockConfigurationAutocommitPeriodArgs value_autocommitPeriod;
    private boolean unknown_autocommitPeriod;
    public OntapVolumeSnaplockConfigurationAutocommitPeriodArgs autocommitPeriod() {
        if (!unknown_autocommitPeriod) return value_autocommitPeriod;
        throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfigurationArgs.autocommitPeriod' is not present");
    }

    /**
     * Enables, disables, or permanently disables privileged delete on an FSx for ONTAP SnapLock Enterprise volume. Valid values: `DISABLED`, `ENABLED`, `PERMANENTLY_DISABLED`. The default value is `DISABLED`.
     * 
     */
    @PolicyResourceProperty(name="privilegedDelete", flag="unknown_privilegedDelete")
    private String value_privilegedDelete;
    private boolean unknown_privilegedDelete;
    public String privilegedDelete() {
        if (!unknown_privilegedDelete) return value_privilegedDelete;
        throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfigurationArgs.privilegedDelete' is not present");
    }

    /**
     * The retention period of an FSx for ONTAP SnapLock volume. See `retention_period` Block for details.
     * 
     */
    @PolicyResourceProperty(name="retentionPeriod", flag="unknown_retentionPeriod")
    private OntapVolumeSnaplockConfigurationRetentionPeriodArgs value_retentionPeriod;
    private boolean unknown_retentionPeriod;
    public OntapVolumeSnaplockConfigurationRetentionPeriodArgs retentionPeriod() {
        if (!unknown_retentionPeriod) return value_retentionPeriod;
        throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfigurationArgs.retentionPeriod' is not present");
    }

    /**
     * Specifies the retention mode of an FSx for ONTAP SnapLock volume. After it is set, it can&#39;t be changed. Valid values: `COMPLIANCE`, `ENTERPRISE`.
     * 
     */
    @PolicyResourceProperty(name="snaplockType", flag="unknown_snaplockType")
    private String value_snaplockType;
    private boolean unknown_snaplockType;
    public String snaplockType() {
        if (!unknown_snaplockType) return value_snaplockType;
        throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfigurationArgs.snaplockType' is not present");
    }

    /**
     * Enables or disables volume-append mode on an FSx for ONTAP SnapLock volume. The default value is `false`.
     * 
     */
    @PolicyResourceProperty(name="volumeAppendModeEnabled", flag="unknown_volumeAppendModeEnabled")
    private Boolean value_volumeAppendModeEnabled;
    private boolean unknown_volumeAppendModeEnabled;
    public Boolean volumeAppendModeEnabled() {
        if (!unknown_volumeAppendModeEnabled) return value_volumeAppendModeEnabled;
        throw new UndeferrableValueException("Value 'OntapVolumeSnaplockConfigurationArgs.volumeAppendModeEnabled' is not present");
    }

}
