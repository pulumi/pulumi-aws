// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.ec2.inputs.LaunchTemplateNetworkInterfaceConnectionTrackingSpecificationArgs;
import com.pulumi.policypacks.aws.ec2.inputs.LaunchTemplateNetworkInterfaceEnaSrdSpecificationArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class LaunchTemplateNetworkInterfaceArgs {

    /**
     * Associate a Carrier IP address with `eth0` for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. Boolean value, can be left unset.
     * 
     */
    private UndeferrableValue<String> associateCarrierIpAddress;

    public String associateCarrierIpAddress() {
        if (associateCarrierIpAddress == null) return null;
        return associateCarrierIpAddress.getValue("LaunchTemplateNetworkInterfaceArgs.associateCarrierIpAddress");
    }

    /**
     * Associate a public ip address with the network interface. Boolean value, can be left unset.
     * 
     */
    private UndeferrableValue<String> associatePublicIpAddress;

    public String associatePublicIpAddress() {
        if (associatePublicIpAddress == null) return null;
        return associatePublicIpAddress.getValue("LaunchTemplateNetworkInterfaceArgs.associatePublicIpAddress");
    }

    /**
     * The Connection Tracking Configuration for the network interface. See [Amazon EC2 security group connection tracking](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts)
     * 
     */
    private UndeferrableValue<LaunchTemplateNetworkInterfaceConnectionTrackingSpecificationArgs> connectionTrackingSpecification;

    public LaunchTemplateNetworkInterfaceConnectionTrackingSpecificationArgs connectionTrackingSpecification() {
        if (connectionTrackingSpecification == null) return null;
        return connectionTrackingSpecification.getValue("LaunchTemplateNetworkInterfaceArgs.connectionTrackingSpecification");
    }

    /**
     * Whether the network interface should be destroyed on instance termination.
     * 
     */
    private UndeferrableValue<String> deleteOnTermination;

    public String deleteOnTermination() {
        if (deleteOnTermination == null) return null;
        return deleteOnTermination.getValue("LaunchTemplateNetworkInterfaceArgs.deleteOnTermination");
    }

    /**
     * Description of the network interface.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("LaunchTemplateNetworkInterfaceArgs.description");
    }

    /**
     * The integer index of the network interface attachment.
     * 
     */
    private UndeferrableValue<Integer> deviceIndex;

    public Integer deviceIndex() {
        if (deviceIndex == null) return null;
        return deviceIndex.getValue("LaunchTemplateNetworkInterfaceArgs.deviceIndex");
    }

    /**
     * Configuration for Elastic Network Adapter (ENA) Express settings. Applies to network interfaces that use the [ena Express](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking-ena-express.html) feature. See details below.
     * 
     */
    private UndeferrableValue<LaunchTemplateNetworkInterfaceEnaSrdSpecificationArgs> enaSrdSpecification;

    public LaunchTemplateNetworkInterfaceEnaSrdSpecificationArgs enaSrdSpecification() {
        if (enaSrdSpecification == null) return null;
        return enaSrdSpecification.getValue("LaunchTemplateNetworkInterfaceArgs.enaSrdSpecification");
    }

    /**
     * The type of network interface. To create an Elastic Fabric Adapter (EFA), specify `efa`.
     * 
     */
    private UndeferrableValue<String> interfaceType;

    public String interfaceType() {
        if (interfaceType == null) return null;
        return interfaceType.getValue("LaunchTemplateNetworkInterfaceArgs.interfaceType");
    }

    /**
     * The number of secondary private IPv4 addresses to assign to a network interface. Conflicts with `ipv4_addresses`
     * 
     */
    private UndeferrableValue<Integer> ipv4AddressCount;

    public Integer ipv4AddressCount() {
        if (ipv4AddressCount == null) return null;
        return ipv4AddressCount.getValue("LaunchTemplateNetworkInterfaceArgs.ipv4AddressCount");
    }

    /**
     * One or more private IPv4 addresses to associate. Conflicts with `ipv4_address_count`
     * 
     */
    private UndeferrableValue<List<String>> ipv4Addresses;

    public List<String> ipv4Addresses() {
        if (ipv4Addresses == null) return null;
        return ipv4Addresses.getValue("LaunchTemplateNetworkInterfaceArgs.ipv4Addresses");
    }

    /**
     * The number of IPv4 prefixes to be automatically assigned to the network interface. Conflicts with `ipv4_prefixes`
     * 
     */
    private UndeferrableValue<Integer> ipv4PrefixCount;

    public Integer ipv4PrefixCount() {
        if (ipv4PrefixCount == null) return null;
        return ipv4PrefixCount.getValue("LaunchTemplateNetworkInterfaceArgs.ipv4PrefixCount");
    }

    /**
     * One or more IPv4 prefixes to be assigned to the network interface. Conflicts with `ipv4_prefix_count`
     * 
     */
    private UndeferrableValue<List<String>> ipv4Prefixes;

    public List<String> ipv4Prefixes() {
        if (ipv4Prefixes == null) return null;
        return ipv4Prefixes.getValue("LaunchTemplateNetworkInterfaceArgs.ipv4Prefixes");
    }

    /**
     * The number of IPv6 addresses to assign to a network interface. Conflicts with `ipv6_addresses`
     * 
     */
    private UndeferrableValue<Integer> ipv6AddressCount;

    public Integer ipv6AddressCount() {
        if (ipv6AddressCount == null) return null;
        return ipv6AddressCount.getValue("LaunchTemplateNetworkInterfaceArgs.ipv6AddressCount");
    }

    /**
     * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Conflicts with `ipv6_address_count`
     * 
     */
    private UndeferrableValue<List<String>> ipv6Addresses;

    public List<String> ipv6Addresses() {
        if (ipv6Addresses == null) return null;
        return ipv6Addresses.getValue("LaunchTemplateNetworkInterfaceArgs.ipv6Addresses");
    }

    /**
     * The number of IPv6 prefixes to be automatically assigned to the network interface. Conflicts with `ipv6_prefixes`
     * 
     */
    private UndeferrableValue<Integer> ipv6PrefixCount;

    public Integer ipv6PrefixCount() {
        if (ipv6PrefixCount == null) return null;
        return ipv6PrefixCount.getValue("LaunchTemplateNetworkInterfaceArgs.ipv6PrefixCount");
    }

    /**
     * One or more IPv6 prefixes to be assigned to the network interface. Conflicts with `ipv6_prefix_count`
     * 
     */
    private UndeferrableValue<List<String>> ipv6Prefixes;

    public List<String> ipv6Prefixes() {
        if (ipv6Prefixes == null) return null;
        return ipv6Prefixes.getValue("LaunchTemplateNetworkInterfaceArgs.ipv6Prefixes");
    }

    /**
     * The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
     * 
     */
    private UndeferrableValue<Integer> networkCardIndex;

    public Integer networkCardIndex() {
        if (networkCardIndex == null) return null;
        return networkCardIndex.getValue("LaunchTemplateNetworkInterfaceArgs.networkCardIndex");
    }

    /**
     * The ID of the network interface to attach.
     * 
     */
    private UndeferrableValue<String> networkInterfaceId;

    public String networkInterfaceId() {
        if (networkInterfaceId == null) return null;
        return networkInterfaceId.getValue("LaunchTemplateNetworkInterfaceArgs.networkInterfaceId");
    }

    /**
     * Whether the first IPv6 GUA will be made the primary IPv6 address.
     * 
     */
    private UndeferrableValue<String> primaryIpv6;

    public String primaryIpv6() {
        if (primaryIpv6 == null) return null;
        return primaryIpv6.getValue("LaunchTemplateNetworkInterfaceArgs.primaryIpv6");
    }

    /**
     * The primary private IPv4 address.
     * 
     */
    private UndeferrableValue<String> privateIpAddress;

    public String privateIpAddress() {
        if (privateIpAddress == null) return null;
        return privateIpAddress.getValue("LaunchTemplateNetworkInterfaceArgs.privateIpAddress");
    }

    /**
     * A list of security group IDs to associate.
     * 
     */
    private UndeferrableValue<List<String>> securityGroups;

    public List<String> securityGroups() {
        if (securityGroups == null) return null;
        return securityGroups.getValue("LaunchTemplateNetworkInterfaceArgs.securityGroups");
    }

    /**
     * The VPC Subnet ID to associate.
     * 
     */
    private UndeferrableValue<String> subnetId;

    public String subnetId() {
        if (subnetId == null) return null;
        return subnetId.getValue("LaunchTemplateNetworkInterfaceArgs.subnetId");
    }

}
