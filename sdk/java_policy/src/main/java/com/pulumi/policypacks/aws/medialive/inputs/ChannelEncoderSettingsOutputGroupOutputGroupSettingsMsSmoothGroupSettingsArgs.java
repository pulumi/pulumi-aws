// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.medialive.inputs.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs {

    private UndeferrableValue<String> acquisitionPointId;

    public String acquisitionPointId() {
        if (acquisitionPointId == null) return null;
        return acquisitionPointId.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.acquisitionPointId");
    }

    private UndeferrableValue<String> audioOnlyTimecodeControl;

    public String audioOnlyTimecodeControl() {
        if (audioOnlyTimecodeControl == null) return null;
        return audioOnlyTimecodeControl.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.audioOnlyTimecodeControl");
    }

    /**
     * Setting to allow self signed or verified RTMP certificates.
     * 
     */
    private UndeferrableValue<String> certificateMode;

    public String certificateMode() {
        if (certificateMode == null) return null;
        return certificateMode.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.certificateMode");
    }

    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     * 
     */
    private UndeferrableValue<Integer> connectionRetryInterval;

    public Integer connectionRetryInterval() {
        if (connectionRetryInterval == null) return null;
        return connectionRetryInterval.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.connectionRetryInterval");
    }

    private UndeferrableValue<ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationArgs> destination;

    public ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestinationArgs destination() {
        if (destination == null) return null;
        return destination.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.destination");
    }

    private UndeferrableValue<String> eventId;

    public String eventId() {
        if (eventId == null) return null;
        return eventId.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.eventId");
    }

    private UndeferrableValue<String> eventIdMode;

    public String eventIdMode() {
        if (eventIdMode == null) return null;
        return eventIdMode.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.eventIdMode");
    }

    private UndeferrableValue<String> eventStopBehavior;

    public String eventStopBehavior() {
        if (eventStopBehavior == null) return null;
        return eventStopBehavior.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.eventStopBehavior");
    }

    private UndeferrableValue<Integer> filecacheDuration;

    public Integer filecacheDuration() {
        if (filecacheDuration == null) return null;
        return filecacheDuration.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.filecacheDuration");
    }

    private UndeferrableValue<Integer> fragmentLength;

    public Integer fragmentLength() {
        if (fragmentLength == null) return null;
        return fragmentLength.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.fragmentLength");
    }

    private UndeferrableValue<String> inputLossAction;

    public String inputLossAction() {
        if (inputLossAction == null) return null;
        return inputLossAction.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.inputLossAction");
    }

    /**
     * Number of retry attempts.
     * 
     */
    private UndeferrableValue<Integer> numRetries;

    public Integer numRetries() {
        if (numRetries == null) return null;
        return numRetries.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.numRetries");
    }

    /**
     * Number of seconds to wait until a restart is initiated.
     * 
     */
    private UndeferrableValue<Integer> restartDelay;

    public Integer restartDelay() {
        if (restartDelay == null) return null;
        return restartDelay.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.restartDelay");
    }

    private UndeferrableValue<String> segmentationMode;

    public String segmentationMode() {
        if (segmentationMode == null) return null;
        return segmentationMode.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.segmentationMode");
    }

    private UndeferrableValue<Integer> sendDelayMs;

    public Integer sendDelayMs() {
        if (sendDelayMs == null) return null;
        return sendDelayMs.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.sendDelayMs");
    }

    private UndeferrableValue<String> sparseTrackType;

    public String sparseTrackType() {
        if (sparseTrackType == null) return null;
        return sparseTrackType.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.sparseTrackType");
    }

    private UndeferrableValue<String> streamManifestBehavior;

    public String streamManifestBehavior() {
        if (streamManifestBehavior == null) return null;
        return streamManifestBehavior.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.streamManifestBehavior");
    }

    private UndeferrableValue<String> timestampOffset;

    public String timestampOffset() {
        if (timestampOffset == null) return null;
        return timestampOffset.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.timestampOffset");
    }

    private UndeferrableValue<String> timestampOffsetMode;

    public String timestampOffsetMode() {
        if (timestampOffsetMode == null) return null;
        return timestampOffsetMode.getValue("ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsArgs.timestampOffsetMode");
    }

}
