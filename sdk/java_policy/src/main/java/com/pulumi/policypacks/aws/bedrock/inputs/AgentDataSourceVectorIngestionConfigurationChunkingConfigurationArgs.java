// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.bedrock.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.bedrock.inputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs;
import com.pulumi.policypacks.aws.bedrock.inputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationArgs;
import com.pulumi.policypacks.aws.bedrock.inputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs;
import java.lang.String;
import javax.annotation.Nullable;


public final class AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs {

    /**
     * Option for chunking your source data, either in fixed-sized chunks or as one chunk. Valid values: `FIXED_SIZE`, `HIERARCHICAL`, `SEMANTIC`, `NONE`.
     * 
     */
    @PolicyResourceProperty(name="chunkingStrategy", flag="unknown_chunkingStrategy")
    private String value_chunkingStrategy;
    private boolean unknown_chunkingStrategy;
    public String chunkingStrategy() {
        if (!unknown_chunkingStrategy) return value_chunkingStrategy;
        throw new UndeferrableValueException("Value 'AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs.chunkingStrategy' is not present");
    }

    /**
     * Configurations for when you choose fixed-size chunking. Requires chunking_strategy as `FIXED_SIZE`. See `fixed_size_chunking_configuration` for details.
     * 
     */
    @PolicyResourceProperty(name="fixedSizeChunkingConfiguration", flag="unknown_fixedSizeChunkingConfiguration")
    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs value_fixedSizeChunkingConfiguration;
    private boolean unknown_fixedSizeChunkingConfiguration;
    public AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationArgs fixedSizeChunkingConfiguration() {
        if (!unknown_fixedSizeChunkingConfiguration) return value_fixedSizeChunkingConfiguration;
        throw new UndeferrableValueException("Value 'AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs.fixedSizeChunkingConfiguration' is not present");
    }

    /**
     * Configurations for when you choose hierarchical chunking. Requires chunking_strategy as `HIERARCHICAL`. See `hierarchical_chunking_configuration` for details.
     * 
     */
    @PolicyResourceProperty(name="hierarchicalChunkingConfiguration", flag="unknown_hierarchicalChunkingConfiguration")
    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationArgs value_hierarchicalChunkingConfiguration;
    private boolean unknown_hierarchicalChunkingConfiguration;
    public AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationArgs hierarchicalChunkingConfiguration() {
        if (!unknown_hierarchicalChunkingConfiguration) return value_hierarchicalChunkingConfiguration;
        throw new UndeferrableValueException("Value 'AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs.hierarchicalChunkingConfiguration' is not present");
    }

    /**
     * Configurations for when you choose semantic chunking. Requires chunking_strategy as `SEMANTIC`. See `semantic_chunking_configuration` for details.
     * 
     */
    @PolicyResourceProperty(name="semanticChunkingConfiguration", flag="unknown_semanticChunkingConfiguration")
    private AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs value_semanticChunkingConfiguration;
    private boolean unknown_semanticChunkingConfiguration;
    public AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationArgs semanticChunkingConfiguration() {
        if (!unknown_semanticChunkingConfiguration) return value_semanticChunkingConfiguration;
        throw new UndeferrableValueException("Value 'AgentDataSourceVectorIngestionConfigurationChunkingConfigurationArgs.semanticChunkingConfiguration' is not present");
    }

}
