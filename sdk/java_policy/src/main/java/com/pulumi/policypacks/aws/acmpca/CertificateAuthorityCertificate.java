// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.acmpca;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:acmpca/certificateAuthorityCertificate:CertificateAuthorityCertificate")
public final class CertificateAuthorityCertificate extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * PEM-encoded certificate for the Certificate Authority.
     * 
     */
    @PolicyResourceProperty(name="certificate", flag="unknown_certificate")
    private String value_certificate;
    private boolean unknown_certificate;
    public String certificate() {
        if (!unknown_certificate) return value_certificate;
        throw new UndeferrableValueException("Value 'CertificateAuthorityCertificate.certificate' is not present");
    }

    /**
     * ARN of the Certificate Authority.
     * 
     */
    @PolicyResourceProperty(name="certificateAuthorityArn", flag="unknown_certificateAuthorityArn")
    private String value_certificateAuthorityArn;
    private boolean unknown_certificateAuthorityArn;
    public String certificateAuthorityArn() {
        if (!unknown_certificateAuthorityArn) return value_certificateAuthorityArn;
        throw new UndeferrableValueException("Value 'CertificateAuthorityCertificate.certificateAuthorityArn' is not present");
    }

    /**
     * PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.
     * 
     */
    @PolicyResourceProperty(name="certificateChain", flag="unknown_certificateChain")
    private @Nullable String value_certificateChain;
    private boolean unknown_certificateChain;
    public @Nullable String certificateChain() {
        if (!unknown_certificateChain) return value_certificateChain;
        throw new UndeferrableValueException("Value 'CertificateAuthorityCertificate.certificateChain' is not present");
    }

}
