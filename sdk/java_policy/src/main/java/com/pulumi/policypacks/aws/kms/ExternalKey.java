// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kms;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:kms/externalKey:ExternalKey")
public final class ExternalKey extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) of the key.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ExternalKey.arn' is not present");
    }

    /**
     * Specifies whether to disable the policy lockout check performed when creating or updating the key&#39;s policy. Setting this value to `true` increases the risk that the key becomes unmanageable. For more information, refer to the scenario in the [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam) section in the AWS Key Management Service Developer Guide. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="bypassPolicyLockoutSafetyCheck", flag="unknown_bypassPolicyLockoutSafetyCheck")
    private @Nullable Boolean value_bypassPolicyLockoutSafetyCheck;
    private boolean unknown_bypassPolicyLockoutSafetyCheck;
    public @Nullable Boolean bypassPolicyLockoutSafetyCheck() {
        if (!unknown_bypassPolicyLockoutSafetyCheck) return value_bypassPolicyLockoutSafetyCheck;
        throw new UndeferrableValueException("Value 'ExternalKey.bypassPolicyLockoutSafetyCheck' is not present");
    }

    /**
     * Duration in days after which the key is deleted after destruction of the resource. Must be between `7` and `30` days. Defaults to `30`.
     * 
     */
    @PolicyResourceProperty(name="deletionWindowInDays", flag="unknown_deletionWindowInDays")
    private @Nullable Integer value_deletionWindowInDays;
    private boolean unknown_deletionWindowInDays;
    public @Nullable Integer deletionWindowInDays() {
        if (!unknown_deletionWindowInDays) return value_deletionWindowInDays;
        throw new UndeferrableValueException("Value 'ExternalKey.deletionWindowInDays' is not present");
    }

    /**
     * Description of the key.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'ExternalKey.description' is not present");
    }

    /**
     * Specifies whether the key is enabled. Keys pending import can only be `false`. Imported keys default to `true` unless expired.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private Boolean value_enabled;
    private boolean unknown_enabled;
    public Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'ExternalKey.enabled' is not present");
    }

    /**
     * Whether the key material expires. Empty when pending key material import, otherwise `KEY_MATERIAL_EXPIRES` or `KEY_MATERIAL_DOES_NOT_EXPIRE`.
     * 
     */
    @PolicyResourceProperty(name="expirationModel", flag="unknown_expirationModel")
    private String value_expirationModel;
    private boolean unknown_expirationModel;
    public String expirationModel() {
        if (!unknown_expirationModel) return value_expirationModel;
        throw new UndeferrableValueException("Value 'ExternalKey.expirationModel' is not present");
    }

    /**
     * Base64 encoded 256-bit symmetric encryption key material to import. The CMK is permanently associated with this key material. The same key material can be reimported, but you cannot import different key material.
     * 
     */
    @PolicyResourceProperty(name="keyMaterialBase64", flag="unknown_keyMaterialBase64")
    private @Nullable String value_keyMaterialBase64;
    private boolean unknown_keyMaterialBase64;
    public @Nullable String keyMaterialBase64() {
        if (!unknown_keyMaterialBase64) return value_keyMaterialBase64;
        throw new UndeferrableValueException("Value 'ExternalKey.keyMaterialBase64' is not present");
    }

    /**
     * The state of the CMK.
     * 
     */
    @PolicyResourceProperty(name="keyState", flag="unknown_keyState")
    private String value_keyState;
    private boolean unknown_keyState;
    public String keyState() {
        if (!unknown_keyState) return value_keyState;
        throw new UndeferrableValueException("Value 'ExternalKey.keyState' is not present");
    }

    /**
     * The cryptographic operations for which you can use the CMK.
     * 
     */
    @PolicyResourceProperty(name="keyUsage", flag="unknown_keyUsage")
    private String value_keyUsage;
    private boolean unknown_keyUsage;
    public String keyUsage() {
        if (!unknown_keyUsage) return value_keyUsage;
        throw new UndeferrableValueException("Value 'ExternalKey.keyUsage' is not present");
    }

    /**
     * Indicates whether the KMS key is a multi-Region (`true`) or regional (`false`) key. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="multiRegion", flag="unknown_multiRegion")
    private Boolean value_multiRegion;
    private boolean unknown_multiRegion;
    public Boolean multiRegion() {
        if (!unknown_multiRegion) return value_multiRegion;
        throw new UndeferrableValueException("Value 'ExternalKey.multiRegion' is not present");
    }

    /**
     * A key policy JSON document. If you do not provide a key policy, AWS KMS attaches a default key policy to the CMK.
     * 
     */
    @PolicyResourceProperty(name="policy", flag="unknown_policy")
    private String value_policy;
    private boolean unknown_policy;
    public String policy() {
        if (!unknown_policy) return value_policy;
        throw new UndeferrableValueException("Value 'ExternalKey.policy' is not present");
    }

    /**
     * A key-value map of tags to assign to the key. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ExternalKey.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ExternalKey.tagsAll' is not present");
    }

    /**
     * Time at which the imported key material expires. When the key material expires, AWS KMS deletes the key material and the CMK becomes unusable. If not specified, key material does not expire. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
     * 
     */
    @PolicyResourceProperty(name="validTo", flag="unknown_validTo")
    private @Nullable String value_validTo;
    private boolean unknown_validTo;
    public @Nullable String validTo() {
        if (!unknown_validTo) return value_validTo;
        throw new UndeferrableValueException("Value 'ExternalKey.validTo' is not present");
    }

}
