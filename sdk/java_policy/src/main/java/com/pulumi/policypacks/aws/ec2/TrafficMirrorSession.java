// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/trafficMirrorSession:TrafficMirrorSession")
public final class TrafficMirrorSession extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the traffic mirror session.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'TrafficMirrorSession.arn' is not present");
    }

    /**
     * A description of the traffic mirror session.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'TrafficMirrorSession.description' is not present");
    }

    /**
     * ID of the source network interface. Not all network interfaces are eligible as mirror sources. On EC2 instances only nitro based instances support mirroring.
     * 
     */
    @PolicyResourceProperty(name="networkInterfaceId", flag="unknown_networkInterfaceId")
    private String value_networkInterfaceId;
    private boolean unknown_networkInterfaceId;
    public String networkInterfaceId() {
        if (!unknown_networkInterfaceId) return value_networkInterfaceId;
        throw new UndeferrableValueException("Value 'TrafficMirrorSession.networkInterfaceId' is not present");
    }

    /**
     * The AWS account ID of the session owner.
     * 
     */
    @PolicyResourceProperty(name="ownerId", flag="unknown_ownerId")
    private String value_ownerId;
    private boolean unknown_ownerId;
    public String ownerId() {
        if (!unknown_ownerId) return value_ownerId;
        throw new UndeferrableValueException("Value 'TrafficMirrorSession.ownerId' is not present");
    }

    /**
     * The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror.
     * 
     */
    @PolicyResourceProperty(name="packetLength", flag="unknown_packetLength")
    private Integer value_packetLength;
    private boolean unknown_packetLength;
    public Integer packetLength() {
        if (!unknown_packetLength) return value_packetLength;
        throw new UndeferrableValueException("Value 'TrafficMirrorSession.packetLength' is not present");
    }

    /**
     * The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
     * 
     */
    @PolicyResourceProperty(name="sessionNumber", flag="unknown_sessionNumber")
    private Integer value_sessionNumber;
    private boolean unknown_sessionNumber;
    public Integer sessionNumber() {
        if (!unknown_sessionNumber) return value_sessionNumber;
        throw new UndeferrableValueException("Value 'TrafficMirrorSession.sessionNumber' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'TrafficMirrorSession.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'TrafficMirrorSession.tagsAll' is not present");
    }

    /**
     * ID of the traffic mirror filter to be used
     * 
     */
    @PolicyResourceProperty(name="trafficMirrorFilterId", flag="unknown_trafficMirrorFilterId")
    private String value_trafficMirrorFilterId;
    private boolean unknown_trafficMirrorFilterId;
    public String trafficMirrorFilterId() {
        if (!unknown_trafficMirrorFilterId) return value_trafficMirrorFilterId;
        throw new UndeferrableValueException("Value 'TrafficMirrorSession.trafficMirrorFilterId' is not present");
    }

    /**
     * ID of the traffic mirror target to be used
     * 
     */
    @PolicyResourceProperty(name="trafficMirrorTargetId", flag="unknown_trafficMirrorTargetId")
    private String value_trafficMirrorTargetId;
    private boolean unknown_trafficMirrorTargetId;
    public String trafficMirrorTargetId() {
        if (!unknown_trafficMirrorTargetId) return value_trafficMirrorTargetId;
        throw new UndeferrableValueException("Value 'TrafficMirrorSession.trafficMirrorTargetId' is not present");
    }

    /**
     * The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
     * 
     */
    @PolicyResourceProperty(name="virtualNetworkId", flag="unknown_virtualNetworkId")
    private Integer value_virtualNetworkId;
    private boolean unknown_virtualNetworkId;
    public Integer virtualNetworkId() {
        if (!unknown_virtualNetworkId) return value_virtualNetworkId;
        throw new UndeferrableValueException("Value 'TrafficMirrorSession.virtualNetworkId' is not present");
    }

}
