// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.inputs.ProviderAssumeRoleArgs;
import com.pulumi.policypacks.aws.inputs.ProviderAssumeRoleWithWebIdentityArgs;
import com.pulumi.policypacks.aws.inputs.ProviderDefaultTagsArgs;
import com.pulumi.policypacks.aws.inputs.ProviderEndpointArgs;
import com.pulumi.policypacks.aws.inputs.ProviderIgnoreTagsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="pulumi:providers:aws")
public final class ProviderArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The access key for API operations. You can retrieve this from the &#39;Security &amp; Credentials&#39; section of the AWS console.
     * 
     */
    @PolicyResourceProperty(name="accessKey", flag="unknown_accessKey")
    private String value_accessKey;
    private boolean unknown_accessKey;
    public String accessKey() {
        if (!unknown_accessKey) return value_accessKey;
        throw new UndeferrableValueException("Value 'ProviderArgs.accessKey' is not present");
    }

    @PolicyResourceProperty(name="allowedAccountIds", flag="unknown_allowedAccountIds")
    private List<String> value_allowedAccountIds;
    private boolean unknown_allowedAccountIds;
    public List<String> allowedAccountIds() {
        if (!unknown_allowedAccountIds) return value_allowedAccountIds;
        throw new UndeferrableValueException("Value 'ProviderArgs.allowedAccountIds' is not present");
    }

    @PolicyResourceProperty(name="assumeRole", flag="unknown_assumeRole")
    private ProviderAssumeRoleArgs value_assumeRole;
    private boolean unknown_assumeRole;
    public ProviderAssumeRoleArgs assumeRole() {
        if (!unknown_assumeRole) return value_assumeRole;
        throw new UndeferrableValueException("Value 'ProviderArgs.assumeRole' is not present");
    }

    @PolicyResourceProperty(name="assumeRoleWithWebIdentity", flag="unknown_assumeRoleWithWebIdentity")
    private ProviderAssumeRoleWithWebIdentityArgs value_assumeRoleWithWebIdentity;
    private boolean unknown_assumeRoleWithWebIdentity;
    public ProviderAssumeRoleWithWebIdentityArgs assumeRoleWithWebIdentity() {
        if (!unknown_assumeRoleWithWebIdentity) return value_assumeRoleWithWebIdentity;
        throw new UndeferrableValueException("Value 'ProviderArgs.assumeRoleWithWebIdentity' is not present");
    }

    /**
     * File containing custom root and intermediate certificates. Can also be configured using the `AWS_CA_BUNDLE` environment
     * variable. (Setting `ca_bundle` in the shared config file is not supported.)
     * 
     */
    @PolicyResourceProperty(name="customCaBundle", flag="unknown_customCaBundle")
    private String value_customCaBundle;
    private boolean unknown_customCaBundle;
    public String customCaBundle() {
        if (!unknown_customCaBundle) return value_customCaBundle;
        throw new UndeferrableValueException("Value 'ProviderArgs.customCaBundle' is not present");
    }

    /**
     * Configuration block with settings to default resource tags across all resources.
     * 
     */
    @PolicyResourceProperty(name="defaultTags", flag="unknown_defaultTags")
    private ProviderDefaultTagsArgs value_defaultTags;
    private boolean unknown_defaultTags;
    public ProviderDefaultTagsArgs defaultTags() {
        if (!unknown_defaultTags) return value_defaultTags;
        throw new UndeferrableValueException("Value 'ProviderArgs.defaultTags' is not present");
    }

    /**
     * Address of the EC2 metadata service endpoint to use. Can also be configured using the
     * `AWS_EC2_METADATA_SERVICE_ENDPOINT` environment variable.
     * 
     */
    @PolicyResourceProperty(name="ec2MetadataServiceEndpoint", flag="unknown_ec2MetadataServiceEndpoint")
    private String value_ec2MetadataServiceEndpoint;
    private boolean unknown_ec2MetadataServiceEndpoint;
    public String ec2MetadataServiceEndpoint() {
        if (!unknown_ec2MetadataServiceEndpoint) return value_ec2MetadataServiceEndpoint;
        throw new UndeferrableValueException("Value 'ProviderArgs.ec2MetadataServiceEndpoint' is not present");
    }

    /**
     * Protocol to use with EC2 metadata service endpoint.Valid values are `IPv4` and `IPv6`. Can also be configured using the
     * `AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE` environment variable.
     * 
     */
    @PolicyResourceProperty(name="ec2MetadataServiceEndpointMode", flag="unknown_ec2MetadataServiceEndpointMode")
    private String value_ec2MetadataServiceEndpointMode;
    private boolean unknown_ec2MetadataServiceEndpointMode;
    public String ec2MetadataServiceEndpointMode() {
        if (!unknown_ec2MetadataServiceEndpointMode) return value_ec2MetadataServiceEndpointMode;
        throw new UndeferrableValueException("Value 'ProviderArgs.ec2MetadataServiceEndpointMode' is not present");
    }

    @PolicyResourceProperty(name="endpoints", flag="unknown_endpoints")
    private List<ProviderEndpointArgs> value_endpoints;
    private boolean unknown_endpoints;
    public List<ProviderEndpointArgs> endpoints() {
        if (!unknown_endpoints) return value_endpoints;
        throw new UndeferrableValueException("Value 'ProviderArgs.endpoints' is not present");
    }

    @PolicyResourceProperty(name="forbiddenAccountIds", flag="unknown_forbiddenAccountIds")
    private List<String> value_forbiddenAccountIds;
    private boolean unknown_forbiddenAccountIds;
    public List<String> forbiddenAccountIds() {
        if (!unknown_forbiddenAccountIds) return value_forbiddenAccountIds;
        throw new UndeferrableValueException("Value 'ProviderArgs.forbiddenAccountIds' is not present");
    }

    /**
     * URL of a proxy to use for HTTP requests when accessing the AWS API. Can also be set using the `HTTP_PROXY` or
     * `http_proxy` environment variables.
     * 
     */
    @PolicyResourceProperty(name="httpProxy", flag="unknown_httpProxy")
    private String value_httpProxy;
    private boolean unknown_httpProxy;
    public String httpProxy() {
        if (!unknown_httpProxy) return value_httpProxy;
        throw new UndeferrableValueException("Value 'ProviderArgs.httpProxy' is not present");
    }

    /**
     * URL of a proxy to use for HTTPS requests when accessing the AWS API. Can also be set using the `HTTPS_PROXY` or
     * `https_proxy` environment variables.
     * 
     */
    @PolicyResourceProperty(name="httpsProxy", flag="unknown_httpsProxy")
    private String value_httpsProxy;
    private boolean unknown_httpsProxy;
    public String httpsProxy() {
        if (!unknown_httpsProxy) return value_httpsProxy;
        throw new UndeferrableValueException("Value 'ProviderArgs.httpsProxy' is not present");
    }

    /**
     * Configuration block with settings to ignore resource tags across all resources.
     * 
     */
    @PolicyResourceProperty(name="ignoreTags", flag="unknown_ignoreTags")
    private ProviderIgnoreTagsArgs value_ignoreTags;
    private boolean unknown_ignoreTags;
    public ProviderIgnoreTagsArgs ignoreTags() {
        if (!unknown_ignoreTags) return value_ignoreTags;
        throw new UndeferrableValueException("Value 'ProviderArgs.ignoreTags' is not present");
    }

    /**
     * Explicitly allow the provider to perform &#34;insecure&#34; SSL requests. If omitted, default value is `false`
     * 
     */
    @PolicyResourceProperty(name="insecure", flag="unknown_insecure")
    private Boolean value_insecure;
    private boolean unknown_insecure;
    public Boolean insecure() {
        if (!unknown_insecure) return value_insecure;
        throw new UndeferrableValueException("Value 'ProviderArgs.insecure' is not present");
    }

    /**
     * The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown.
     * 
     */
    @PolicyResourceProperty(name="maxRetries", flag="unknown_maxRetries")
    private Integer value_maxRetries;
    private boolean unknown_maxRetries;
    public Integer maxRetries() {
        if (!unknown_maxRetries) return value_maxRetries;
        throw new UndeferrableValueException("Value 'ProviderArgs.maxRetries' is not present");
    }

    /**
     * Comma-separated list of hosts that should not use HTTP or HTTPS proxies. Can also be set using the `NO_PROXY` or
     * `no_proxy` environment variables.
     * 
     */
    @PolicyResourceProperty(name="noProxy", flag="unknown_noProxy")
    private String value_noProxy;
    private boolean unknown_noProxy;
    public String noProxy() {
        if (!unknown_noProxy) return value_noProxy;
        throw new UndeferrableValueException("Value 'ProviderArgs.noProxy' is not present");
    }

    /**
     * The profile for API operations. If not set, the default profile created with `aws configure` will be used.
     * 
     */
    @PolicyResourceProperty(name="profile", flag="unknown_profile")
    private String value_profile;
    private boolean unknown_profile;
    public String profile() {
        if (!unknown_profile) return value_profile;
        throw new UndeferrableValueException("Value 'ProviderArgs.profile' is not present");
    }

    /**
     * The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.
     * 
     */
    @PolicyResourceProperty(name="region", flag="unknown_region")
    private String value_region;
    private boolean unknown_region;
    public String region() {
        if (!unknown_region) return value_region;
        throw new UndeferrableValueException("Value 'ProviderArgs.region' is not present");
    }

    /**
     * Specifies how retries are attempted. Valid values are `standard` and `adaptive`. Can also be configured using the
     * `AWS_RETRY_MODE` environment variable.
     * 
     */
    @PolicyResourceProperty(name="retryMode", flag="unknown_retryMode")
    private String value_retryMode;
    private boolean unknown_retryMode;
    public String retryMode() {
        if (!unknown_retryMode) return value_retryMode;
        throw new UndeferrableValueException("Value 'ProviderArgs.retryMode' is not present");
    }

    /**
     * Specifies whether S3 API calls in the `us-east-1` region use the legacy global endpoint or a regional endpoint. Valid
     * values are `legacy` or `regional`. Can also be configured using the `AWS_S3_US_EAST_1_REGIONAL_ENDPOINT` environment
     * variable or the `s3_us_east_1_regional_endpoint` shared config file parameter
     * 
     */
    @PolicyResourceProperty(name="s3UsEast1RegionalEndpoint", flag="unknown_s3UsEast1RegionalEndpoint")
    private String value_s3UsEast1RegionalEndpoint;
    private boolean unknown_s3UsEast1RegionalEndpoint;
    public String s3UsEast1RegionalEndpoint() {
        if (!unknown_s3UsEast1RegionalEndpoint) return value_s3UsEast1RegionalEndpoint;
        throw new UndeferrableValueException("Value 'ProviderArgs.s3UsEast1RegionalEndpoint' is not present");
    }

    /**
     * Set this to true to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY. By
     * default, the S3 client will use virtual hosted bucket addressing when possible (https://BUCKET.s3.amazonaws.com/KEY).
     * Specific to the Amazon S3 service.
     * 
     */
    @PolicyResourceProperty(name="s3UsePathStyle", flag="unknown_s3UsePathStyle")
    private Boolean value_s3UsePathStyle;
    private boolean unknown_s3UsePathStyle;
    public Boolean s3UsePathStyle() {
        if (!unknown_s3UsePathStyle) return value_s3UsePathStyle;
        throw new UndeferrableValueException("Value 'ProviderArgs.s3UsePathStyle' is not present");
    }

    /**
     * The secret key for API operations. You can retrieve this from the &#39;Security &amp; Credentials&#39; section of the AWS console.
     * 
     */
    @PolicyResourceProperty(name="secretKey", flag="unknown_secretKey")
    private String value_secretKey;
    private boolean unknown_secretKey;
    public String secretKey() {
        if (!unknown_secretKey) return value_secretKey;
        throw new UndeferrableValueException("Value 'ProviderArgs.secretKey' is not present");
    }

    /**
     * List of paths to shared config files. If not set, defaults to [~/.aws/config].
     * 
     */
    @PolicyResourceProperty(name="sharedConfigFiles", flag="unknown_sharedConfigFiles")
    private List<String> value_sharedConfigFiles;
    private boolean unknown_sharedConfigFiles;
    public List<String> sharedConfigFiles() {
        if (!unknown_sharedConfigFiles) return value_sharedConfigFiles;
        throw new UndeferrableValueException("Value 'ProviderArgs.sharedConfigFiles' is not present");
    }

    /**
     * List of paths to shared credentials files. If not set, defaults to [~/.aws/credentials].
     * 
     */
    @PolicyResourceProperty(name="sharedCredentialsFiles", flag="unknown_sharedCredentialsFiles")
    private List<String> value_sharedCredentialsFiles;
    private boolean unknown_sharedCredentialsFiles;
    public List<String> sharedCredentialsFiles() {
        if (!unknown_sharedCredentialsFiles) return value_sharedCredentialsFiles;
        throw new UndeferrableValueException("Value 'ProviderArgs.sharedCredentialsFiles' is not present");
    }

    /**
     * Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS
     * available/implemented.
     * 
     */
    @PolicyResourceProperty(name="skipCredentialsValidation", flag="unknown_skipCredentialsValidation")
    private Boolean value_skipCredentialsValidation;
    private boolean unknown_skipCredentialsValidation;
    public Boolean skipCredentialsValidation() {
        if (!unknown_skipCredentialsValidation) return value_skipCredentialsValidation;
        throw new UndeferrableValueException("Value 'ProviderArgs.skipCredentialsValidation' is not present");
    }

    /**
     * Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint.
     * 
     */
    @PolicyResourceProperty(name="skipMetadataApiCheck", flag="unknown_skipMetadataApiCheck")
    private Boolean value_skipMetadataApiCheck;
    private boolean unknown_skipMetadataApiCheck;
    public Boolean skipMetadataApiCheck() {
        if (!unknown_skipMetadataApiCheck) return value_skipMetadataApiCheck;
        throw new UndeferrableValueException("Value 'ProviderArgs.skipMetadataApiCheck' is not present");
    }

    /**
     * Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are
     * not public (yet).
     * 
     */
    @PolicyResourceProperty(name="skipRegionValidation", flag="unknown_skipRegionValidation")
    private Boolean value_skipRegionValidation;
    private boolean unknown_skipRegionValidation;
    public Boolean skipRegionValidation() {
        if (!unknown_skipRegionValidation) return value_skipRegionValidation;
        throw new UndeferrableValueException("Value 'ProviderArgs.skipRegionValidation' is not present");
    }

    /**
     * Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.
     * 
     */
    @PolicyResourceProperty(name="skipRequestingAccountId", flag="unknown_skipRequestingAccountId")
    private Boolean value_skipRequestingAccountId;
    private boolean unknown_skipRequestingAccountId;
    public Boolean skipRequestingAccountId() {
        if (!unknown_skipRequestingAccountId) return value_skipRequestingAccountId;
        throw new UndeferrableValueException("Value 'ProviderArgs.skipRequestingAccountId' is not present");
    }

    /**
     * The region where AWS STS operations will take place. Examples are us-east-1 and us-west-2.
     * 
     */
    @PolicyResourceProperty(name="stsRegion", flag="unknown_stsRegion")
    private String value_stsRegion;
    private boolean unknown_stsRegion;
    public String stsRegion() {
        if (!unknown_stsRegion) return value_stsRegion;
        throw new UndeferrableValueException("Value 'ProviderArgs.stsRegion' is not present");
    }

    /**
     * session token. A session token is only required if you are using temporary security credentials.
     * 
     */
    @PolicyResourceProperty(name="token", flag="unknown_token")
    private String value_token;
    private boolean unknown_token;
    public String token() {
        if (!unknown_token) return value_token;
        throw new UndeferrableValueException("Value 'ProviderArgs.token' is not present");
    }

    /**
     * The capacity of the AWS SDK&#39;s token bucket rate limiter.
     * 
     */
    @PolicyResourceProperty(name="tokenBucketRateLimiterCapacity", flag="unknown_tokenBucketRateLimiterCapacity")
    private Integer value_tokenBucketRateLimiterCapacity;
    private boolean unknown_tokenBucketRateLimiterCapacity;
    public Integer tokenBucketRateLimiterCapacity() {
        if (!unknown_tokenBucketRateLimiterCapacity) return value_tokenBucketRateLimiterCapacity;
        throw new UndeferrableValueException("Value 'ProviderArgs.tokenBucketRateLimiterCapacity' is not present");
    }

    /**
     * Resolve an endpoint with DualStack capability
     * 
     */
    @PolicyResourceProperty(name="useDualstackEndpoint", flag="unknown_useDualstackEndpoint")
    private Boolean value_useDualstackEndpoint;
    private boolean unknown_useDualstackEndpoint;
    public Boolean useDualstackEndpoint() {
        if (!unknown_useDualstackEndpoint) return value_useDualstackEndpoint;
        throw new UndeferrableValueException("Value 'ProviderArgs.useDualstackEndpoint' is not present");
    }

    /**
     * Resolve an endpoint with FIPS capability
     * 
     */
    @PolicyResourceProperty(name="useFipsEndpoint", flag="unknown_useFipsEndpoint")
    private Boolean value_useFipsEndpoint;
    private boolean unknown_useFipsEndpoint;
    public Boolean useFipsEndpoint() {
        if (!unknown_useFipsEndpoint) return value_useFipsEndpoint;
        throw new UndeferrableValueException("Value 'ProviderArgs.useFipsEndpoint' is not present");
    }

}
