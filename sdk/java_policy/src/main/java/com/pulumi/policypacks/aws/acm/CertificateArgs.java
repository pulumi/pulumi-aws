// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.acm;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.acm.inputs.CertificateOptionsArgs;
import com.pulumi.policypacks.aws.acm.inputs.CertificateValidationOptionArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:acm/certificate:Certificate")
public final class CertificateArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * ARN of an ACM PCA
     * 
     */
    private UndeferrableValue<String> certificateAuthorityArn;

    public String certificateAuthorityArn() {
        if (certificateAuthorityArn == null) return null;
        return certificateAuthorityArn.getValue("CertificateArgs.certificateAuthorityArn");
    }

    /**
     * Certificate&#39;s PEM-formatted public key
     * 
     */
    private UndeferrableValue<String> certificateBody;

    public String certificateBody() {
        if (certificateBody == null) return null;
        return certificateBody.getValue("CertificateArgs.certificateBody");
    }

    /**
     * Certificate&#39;s PEM-formatted chain
     * * Creating a private CA issued certificate
     * 
     */
    private UndeferrableValue<String> certificateChain;

    public String certificateChain() {
        if (certificateChain == null) return null;
        return certificateChain.getValue("CertificateArgs.certificateChain");
    }

    /**
     * Fully qualified domain name (FQDN) in the certificate.
     * 
     */
    private UndeferrableValue<String> domainName;

    public String domainName() {
        if (domainName == null) return null;
        return domainName.getValue("CertificateArgs.domainName");
    }

    /**
     * Amount of time to start automatic renewal process before expiration.
     * Has no effect if less than 60 days.
     * Represented by either
     * a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
     * or a string such as `2160h`.
     * 
     */
    private UndeferrableValue<String> earlyRenewalDuration;

    public String earlyRenewalDuration() {
        if (earlyRenewalDuration == null) return null;
        return earlyRenewalDuration.getValue("CertificateArgs.earlyRenewalDuration");
    }

    /**
     * Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
     * 
     */
    private UndeferrableValue<String> keyAlgorithm;

    public String keyAlgorithm() {
        if (keyAlgorithm == null) return null;
        return keyAlgorithm.getValue("CertificateArgs.keyAlgorithm");
    }

    /**
     * Configuration block used to set certificate options. Detailed below.
     * 
     */
    private UndeferrableValue<CertificateOptionsArgs> options;

    public CertificateOptionsArgs options() {
        if (options == null) return null;
        return options.getValue("CertificateArgs.options");
    }

    /**
     * Certificate&#39;s PEM-formatted private key
     * 
     */
    private UndeferrableValue<String> privateKey;

    public String privateKey() {
        if (privateKey == null) return null;
        return privateKey.getValue("CertificateArgs.privateKey");
    }

    /**
     * Set of domains that should be SANs in the issued certificate.
     * To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
     * 
     */
    private UndeferrableValue<List<String>> subjectAlternativeNames;

    public List<String> subjectAlternativeNames() {
        if (subjectAlternativeNames == null) return null;
        return subjectAlternativeNames.getValue("CertificateArgs.subjectAlternativeNames");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("CertificateArgs.tags");
    }

    /**
     * Which method to use for validation. `DNS` or `EMAIL` are valid. This parameter must not be set for certificates that were imported into ACM and then into Pulumi.
     * 
     */
    private UndeferrableValue<String> validationMethod;

    public String validationMethod() {
        if (validationMethod == null) return null;
        return validationMethod.getValue("CertificateArgs.validationMethod");
    }

    /**
     * Configuration block used to specify information about the initial validation of each domain name. Detailed below.
     * * Importing an existing certificate
     * 
     */
    private UndeferrableValue<List<CertificateValidationOptionArgs>> validationOptions;

    public List<CertificateValidationOptionArgs> validationOptions() {
        if (validationOptions == null) return null;
        return validationOptions.getValue("CertificateArgs.validationOptions");
    }

}
