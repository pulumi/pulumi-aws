// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.acm;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.acm.inputs.CertificateOptionsArgs;
import com.pulumi.policypacks.aws.acm.inputs.CertificateValidationOptionArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:acm/certificate:Certificate")
public final class CertificateArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * ARN of an ACM PCA
     * 
     */
    @PolicyResourceProperty(name="certificateAuthorityArn", flag="unknown_certificateAuthorityArn")
    private String value_certificateAuthorityArn;
    private boolean unknown_certificateAuthorityArn;
    public String certificateAuthorityArn() {
        if (!unknown_certificateAuthorityArn) return value_certificateAuthorityArn;
        throw new UndeferrableValueException("Value 'CertificateArgs.certificateAuthorityArn' is not present");
    }

    /**
     * Certificate&#39;s PEM-formatted public key
     * 
     */
    @PolicyResourceProperty(name="certificateBody", flag="unknown_certificateBody")
    private String value_certificateBody;
    private boolean unknown_certificateBody;
    public String certificateBody() {
        if (!unknown_certificateBody) return value_certificateBody;
        throw new UndeferrableValueException("Value 'CertificateArgs.certificateBody' is not present");
    }

    /**
     * Certificate&#39;s PEM-formatted chain
     * * Creating a private CA issued certificate
     * 
     */
    @PolicyResourceProperty(name="certificateChain", flag="unknown_certificateChain")
    private String value_certificateChain;
    private boolean unknown_certificateChain;
    public String certificateChain() {
        if (!unknown_certificateChain) return value_certificateChain;
        throw new UndeferrableValueException("Value 'CertificateArgs.certificateChain' is not present");
    }

    /**
     * Fully qualified domain name (FQDN) in the certificate.
     * 
     */
    @PolicyResourceProperty(name="domainName", flag="unknown_domainName")
    private String value_domainName;
    private boolean unknown_domainName;
    public String domainName() {
        if (!unknown_domainName) return value_domainName;
        throw new UndeferrableValueException("Value 'CertificateArgs.domainName' is not present");
    }

    /**
     * Amount of time to start automatic renewal process before expiration.
     * Has no effect if less than 60 days.
     * Represented by either
     * a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
     * or a string such as `2160h`.
     * 
     */
    @PolicyResourceProperty(name="earlyRenewalDuration", flag="unknown_earlyRenewalDuration")
    private String value_earlyRenewalDuration;
    private boolean unknown_earlyRenewalDuration;
    public String earlyRenewalDuration() {
        if (!unknown_earlyRenewalDuration) return value_earlyRenewalDuration;
        throw new UndeferrableValueException("Value 'CertificateArgs.earlyRenewalDuration' is not present");
    }

    /**
     * Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
     * 
     */
    @PolicyResourceProperty(name="keyAlgorithm", flag="unknown_keyAlgorithm")
    private String value_keyAlgorithm;
    private boolean unknown_keyAlgorithm;
    public String keyAlgorithm() {
        if (!unknown_keyAlgorithm) return value_keyAlgorithm;
        throw new UndeferrableValueException("Value 'CertificateArgs.keyAlgorithm' is not present");
    }

    /**
     * Configuration block used to set certificate options. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="options", flag="unknown_options")
    private CertificateOptionsArgs value_options;
    private boolean unknown_options;
    public CertificateOptionsArgs options() {
        if (!unknown_options) return value_options;
        throw new UndeferrableValueException("Value 'CertificateArgs.options' is not present");
    }

    /**
     * Certificate&#39;s PEM-formatted private key
     * 
     */
    @PolicyResourceProperty(name="privateKey", flag="unknown_privateKey")
    private String value_privateKey;
    private boolean unknown_privateKey;
    public String privateKey() {
        if (!unknown_privateKey) return value_privateKey;
        throw new UndeferrableValueException("Value 'CertificateArgs.privateKey' is not present");
    }

    /**
     * Set of domains that should be SANs in the issued certificate.
     * To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
     * 
     */
    @PolicyResourceProperty(name="subjectAlternativeNames", flag="unknown_subjectAlternativeNames")
    private List<String> value_subjectAlternativeNames;
    private boolean unknown_subjectAlternativeNames;
    public List<String> subjectAlternativeNames() {
        if (!unknown_subjectAlternativeNames) return value_subjectAlternativeNames;
        throw new UndeferrableValueException("Value 'CertificateArgs.subjectAlternativeNames' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'CertificateArgs.tags' is not present");
    }

    /**
     * Which method to use for validation. `DNS` or `EMAIL` are valid. This parameter must not be set for certificates that were imported into ACM and then into Pulumi.
     * 
     */
    @PolicyResourceProperty(name="validationMethod", flag="unknown_validationMethod")
    private String value_validationMethod;
    private boolean unknown_validationMethod;
    public String validationMethod() {
        if (!unknown_validationMethod) return value_validationMethod;
        throw new UndeferrableValueException("Value 'CertificateArgs.validationMethod' is not present");
    }

    /**
     * Configuration block used to specify information about the initial validation of each domain name. Detailed below.
     * * Importing an existing certificate
     * 
     */
    @PolicyResourceProperty(name="validationOptions", flag="unknown_validationOptions")
    private List<CertificateValidationOptionArgs> value_validationOptions;
    private boolean unknown_validationOptions;
    public List<CertificateValidationOptionArgs> validationOptions() {
        if (!unknown_validationOptions) return value_validationOptions;
        throw new UndeferrableValueException("Value 'CertificateArgs.validationOptions' is not present");
    }

}
