// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.memorydb.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class SnapshotClusterConfiguration {

    /**
     * Description for the cluster.
     * 
     */
    private @Nullable UndeferrableValue<String> description;

    public @Nullable String description() {
        if (description == null) return null;
        return description.getValue("SnapshotClusterConfiguration.description");
    }

    /**
     * The engine that will run on cluster nodes.
     * 
     */
    private @Nullable UndeferrableValue<String> engine;

    public @Nullable String engine() {
        if (engine == null) return null;
        return engine.getValue("SnapshotClusterConfiguration.engine");
    }

    /**
     * Version number of the engine used by the cluster.
     * 
     */
    private @Nullable UndeferrableValue<String> engineVersion;

    public @Nullable String engineVersion() {
        if (engineVersion == null) return null;
        return engineVersion.getValue("SnapshotClusterConfiguration.engineVersion");
    }

    /**
     * The weekly time range during which maintenance on the cluster is performed.
     * 
     */
    private @Nullable UndeferrableValue<String> maintenanceWindow;

    public @Nullable String maintenanceWindow() {
        if (maintenanceWindow == null) return null;
        return maintenanceWindow.getValue("SnapshotClusterConfiguration.maintenanceWindow");
    }

    /**
     * Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
     * 
     */
    private @Nullable UndeferrableValue<String> name;

    public @Nullable String name() {
        if (name == null) return null;
        return name.getValue("SnapshotClusterConfiguration.name");
    }

    /**
     * Compute and memory capacity of the nodes in the cluster.
     * 
     */
    private @Nullable UndeferrableValue<String> nodeType;

    public @Nullable String nodeType() {
        if (nodeType == null) return null;
        return nodeType.getValue("SnapshotClusterConfiguration.nodeType");
    }

    /**
     * Number of shards in the cluster.
     * 
     */
    private @Nullable UndeferrableValue<Integer> numShards;

    public @Nullable Integer numShards() {
        if (numShards == null) return null;
        return numShards.getValue("SnapshotClusterConfiguration.numShards");
    }

    /**
     * Name of the parameter group associated with the cluster.
     * 
     */
    private @Nullable UndeferrableValue<String> parameterGroupName;

    public @Nullable String parameterGroupName() {
        if (parameterGroupName == null) return null;
        return parameterGroupName.getValue("SnapshotClusterConfiguration.parameterGroupName");
    }

    /**
     * Port number on which the cluster accepts connections.
     * 
     */
    private @Nullable UndeferrableValue<Integer> port;

    public @Nullable Integer port() {
        if (port == null) return null;
        return port.getValue("SnapshotClusterConfiguration.port");
    }

    /**
     * Number of days for which MemoryDB retains automatic snapshots before deleting them.
     * 
     */
    private @Nullable UndeferrableValue<Integer> snapshotRetentionLimit;

    public @Nullable Integer snapshotRetentionLimit() {
        if (snapshotRetentionLimit == null) return null;
        return snapshotRetentionLimit.getValue("SnapshotClusterConfiguration.snapshotRetentionLimit");
    }

    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
     * 
     */
    private @Nullable UndeferrableValue<String> snapshotWindow;

    public @Nullable String snapshotWindow() {
        if (snapshotWindow == null) return null;
        return snapshotWindow.getValue("SnapshotClusterConfiguration.snapshotWindow");
    }

    /**
     * Name of the subnet group used by the cluster.
     * 
     */
    private @Nullable UndeferrableValue<String> subnetGroupName;

    public @Nullable String subnetGroupName() {
        if (subnetGroupName == null) return null;
        return subnetGroupName.getValue("SnapshotClusterConfiguration.subnetGroupName");
    }

    /**
     * ARN of the SNS topic to which cluster notifications are sent.
     * 
     */
    private @Nullable UndeferrableValue<String> topicArn;

    public @Nullable String topicArn() {
        if (topicArn == null) return null;
        return topicArn.getValue("SnapshotClusterConfiguration.topicArn");
    }

    /**
     * The VPC in which the cluster exists.
     * 
     */
    private @Nullable UndeferrableValue<String> vpcId;

    public @Nullable String vpcId() {
        if (vpcId == null) return null;
        return vpcId.getValue("SnapshotClusterConfiguration.vpcId");
    }

}
