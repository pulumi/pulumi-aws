// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.glue.inputs.TriggerActionArgs;
import com.pulumi.policypacks.aws.glue.inputs.TriggerEventBatchingConditionArgs;
import com.pulumi.policypacks.aws.glue.inputs.TriggerPredicateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:glue/trigger:Trigger")
public final class TriggerArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * List of actions initiated by this trigger when it fires. See Actions Below.
     * 
     */
    private UndeferrableValue<List<TriggerActionArgs>> actions;

    public List<TriggerActionArgs> actions() {
        if (actions == null) return null;
        return actions.getValue("TriggerArgs.actions");
    }

    /**
     * A description of the new trigger.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("TriggerArgs.description");
    }

    /**
     * Start the trigger. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> enabled;

    public Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("TriggerArgs.enabled");
    }

    /**
     * Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
     * 
     */
    private UndeferrableValue<List<TriggerEventBatchingConditionArgs>> eventBatchingConditions;

    public List<TriggerEventBatchingConditionArgs> eventBatchingConditions() {
        if (eventBatchingConditions == null) return null;
        return eventBatchingConditions.getValue("TriggerArgs.eventBatchingConditions");
    }

    /**
     * The name of the trigger.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("TriggerArgs.name");
    }

    /**
     * A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
     * 
     */
    private UndeferrableValue<TriggerPredicateArgs> predicate;

    public TriggerPredicateArgs predicate() {
        if (predicate == null) return null;
        return predicate.getValue("TriggerArgs.predicate");
    }

    /**
     * A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
     * 
     */
    private UndeferrableValue<String> schedule;

    public String schedule() {
        if (schedule == null) return null;
        return schedule.getValue("TriggerArgs.schedule");
    }

    /**
     * Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
     * 
     */
    private UndeferrableValue<Boolean> startOnCreation;

    public Boolean startOnCreation() {
        if (startOnCreation == null) return null;
        return startOnCreation.getValue("TriggerArgs.startOnCreation");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("TriggerArgs.tags");
    }

    /**
     * The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("TriggerArgs.type");
    }

    /**
     * A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
     * 
     */
    private UndeferrableValue<String> workflowName;

    public String workflowName() {
        if (workflowName == null) return null;
        return workflowName.getValue("TriggerArgs.workflowName");
    }

}
