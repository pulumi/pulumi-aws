// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


public final class LogMetricFilterMetricTransformation {

    /**
     * The value to emit when a filter pattern does not match a log event. Conflicts with `dimensions`.
     * 
     */
    @PolicyResourceProperty(name="defaultValue", flag="unknown_defaultValue")
    private @Nullable String value_defaultValue;
    private boolean unknown_defaultValue;
    public @Nullable String defaultValue() {
        if (!unknown_defaultValue) return value_defaultValue;
        throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.defaultValue' is not present");
    }

    /**
     * Map of fields to use as dimensions for the metric. Up to 3 dimensions are allowed. Conflicts with `default_value`.
     * 
     */
    @PolicyResourceProperty(name="dimensions", flag="unknown_dimensions")
    private @Nullable Map<String,String> value_dimensions;
    private boolean unknown_dimensions;
    public @Nullable Map<String,String> dimensions() {
        if (!unknown_dimensions) return value_dimensions;
        throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.dimensions' is not present");
    }

    /**
     * The name of the CloudWatch metric to which the monitored log information should be published (e.g., `ErrorCount`)
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.name' is not present");
    }

    /**
     * The destination namespace of the CloudWatch metric.
     * 
     */
    @PolicyResourceProperty(name="namespace", flag="unknown_namespace")
    private String value_namespace;
    private boolean unknown_namespace;
    public String namespace() {
        if (!unknown_namespace) return value_namespace;
        throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.namespace' is not present");
    }

    /**
     * The unit to assign to the metric. If you omit this, the unit is set as `None`.
     * 
     */
    @PolicyResourceProperty(name="unit", flag="unknown_unit")
    private @Nullable String value_unit;
    private boolean unknown_unit;
    public @Nullable String unit() {
        if (!unknown_unit) return value_unit;
        throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.unit' is not present");
    }

    /**
     * What to publish to the metric. For example, if you&#39;re counting the occurrences of a particular term like &#34;Error&#34;, the value will be &#34;1&#34; for each occurrence. If you&#39;re counting the bytes transferred the published value will be the value in the log event.
     * 
     */
    @PolicyResourceProperty(name="value", flag="unknown_value")
    private String value_value;
    private boolean unknown_value;
    public String value() {
        if (!unknown_value) return value_value;
        throw new UndeferrableValueException("Value 'LogMetricFilterMetricTransformation.value' is not present");
    }

}
