// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


public final class LogMetricFilterMetricTransformation {

    /**
     * The value to emit when a filter pattern does not match a log event. Conflicts with `dimensions`.
     * 
     */
    private @Nullable UndeferrableValue<String> defaultValue;

    public @Nullable String defaultValue() {
        if (defaultValue == null) return null;
        return defaultValue.getValue("LogMetricFilterMetricTransformation.defaultValue");
    }

    /**
     * Map of fields to use as dimensions for the metric. Up to 3 dimensions are allowed. Conflicts with `default_value`.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> dimensions;

    public @Nullable Map<String,String> dimensions() {
        if (dimensions == null) return null;
        return dimensions.getValue("LogMetricFilterMetricTransformation.dimensions");
    }

    /**
     * The name of the CloudWatch metric to which the monitored log information should be published (e.g., `ErrorCount`)
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("LogMetricFilterMetricTransformation.name");
    }

    /**
     * The destination namespace of the CloudWatch metric.
     * 
     */
    private UndeferrableValue<String> namespace;

    public String namespace() {
        if (namespace == null) return null;
        return namespace.getValue("LogMetricFilterMetricTransformation.namespace");
    }

    /**
     * The unit to assign to the metric. If you omit this, the unit is set as `None`.
     * 
     */
    private @Nullable UndeferrableValue<String> unit;

    public @Nullable String unit() {
        if (unit == null) return null;
        return unit.getValue("LogMetricFilterMetricTransformation.unit");
    }

    /**
     * What to publish to the metric. For example, if you&#39;re counting the occurrences of a particular term like &#34;Error&#34;, the value will be &#34;1&#34; for each occurrence. If you&#39;re counting the bytes transferred the published value will be the value in the log event.
     * 
     */
    private UndeferrableValue<String> value;

    public String value() {
        if (value == null) return null;
        return value.getValue("LogMetricFilterMetricTransformation.value");
    }

}
