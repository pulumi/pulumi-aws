// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ecr;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ecr.inputs.RepositoryEncryptionConfigurationArgs;
import com.pulumi.policypacks.aws.ecr.inputs.RepositoryImageScanningConfigurationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ecr/repository:Repository")
public final class RepositoryArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Encryption configuration for the repository. See below for schema.
     * 
     */
    private UndeferrableValue<List<RepositoryEncryptionConfigurationArgs>> encryptionConfigurations;

    public List<RepositoryEncryptionConfigurationArgs> encryptionConfigurations() {
        if (encryptionConfigurations == null) return null;
        return encryptionConfigurations.getValue("RepositoryArgs.encryptionConfigurations");
    }

    /**
     * If `true`, will delete the repository even if it contains images.
     * Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> forceDelete;

    public Boolean forceDelete() {
        if (forceDelete == null) return null;
        return forceDelete.getValue("RepositoryArgs.forceDelete");
    }

    /**
     * Configuration block that defines image scanning configuration for the repository. By default, image scanning must be manually triggered. See the [ECR User Guide](https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html) for more information about image scanning.
     * 
     */
    private UndeferrableValue<RepositoryImageScanningConfigurationArgs> imageScanningConfiguration;

    public RepositoryImageScanningConfigurationArgs imageScanningConfiguration() {
        if (imageScanningConfiguration == null) return null;
        return imageScanningConfiguration.getValue("RepositoryArgs.imageScanningConfiguration");
    }

    /**
     * The tag mutability setting for the repository. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
     * 
     */
    private UndeferrableValue<String> imageTagMutability;

    public String imageTagMutability() {
        if (imageTagMutability == null) return null;
        return imageTagMutability.getValue("RepositoryArgs.imageTagMutability");
    }

    /**
     * Name of the repository.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("RepositoryArgs.name");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("RepositoryArgs.tags");
    }

}
