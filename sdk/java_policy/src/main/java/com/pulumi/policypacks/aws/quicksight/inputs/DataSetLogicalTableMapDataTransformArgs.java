// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSetLogicalTableMapDataTransformFilterOperationArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSetLogicalTableMapDataTransformProjectOperationArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSetLogicalTableMapDataTransformRenameColumnOperationArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSetLogicalTableMapDataTransformTagColumnOperationArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSetLogicalTableMapDataTransformUntagColumnOperationArgs;
import javax.annotation.Nullable;


public final class DataSetLogicalTableMapDataTransformArgs {

    /**
     * A transform operation that casts a column to a different type. See cast_column_type_operation.
     * 
     */
    private UndeferrableValue<DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs> castColumnTypeOperation;

    public DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs castColumnTypeOperation() {
        if (castColumnTypeOperation == null) return null;
        return castColumnTypeOperation.getValue("DataSetLogicalTableMapDataTransformArgs.castColumnTypeOperation");
    }

    /**
     * An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
     * 
     */
    private UndeferrableValue<DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs> createColumnsOperation;

    public DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs createColumnsOperation() {
        if (createColumnsOperation == null) return null;
        return createColumnsOperation.getValue("DataSetLogicalTableMapDataTransformArgs.createColumnsOperation");
    }

    /**
     * An operation that filters rows based on some condition. See filter_operation.
     * 
     */
    private UndeferrableValue<DataSetLogicalTableMapDataTransformFilterOperationArgs> filterOperation;

    public DataSetLogicalTableMapDataTransformFilterOperationArgs filterOperation() {
        if (filterOperation == null) return null;
        return filterOperation.getValue("DataSetLogicalTableMapDataTransformArgs.filterOperation");
    }

    /**
     * An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
     * 
     */
    private UndeferrableValue<DataSetLogicalTableMapDataTransformProjectOperationArgs> projectOperation;

    public DataSetLogicalTableMapDataTransformProjectOperationArgs projectOperation() {
        if (projectOperation == null) return null;
        return projectOperation.getValue("DataSetLogicalTableMapDataTransformArgs.projectOperation");
    }

    /**
     * An operation that renames a column. See rename_column_operation.
     * 
     */
    private UndeferrableValue<DataSetLogicalTableMapDataTransformRenameColumnOperationArgs> renameColumnOperation;

    public DataSetLogicalTableMapDataTransformRenameColumnOperationArgs renameColumnOperation() {
        if (renameColumnOperation == null) return null;
        return renameColumnOperation.getValue("DataSetLogicalTableMapDataTransformArgs.renameColumnOperation");
    }

    /**
     * An operation that tags a column with additional information. See tag_column_operation.
     * 
     */
    private UndeferrableValue<DataSetLogicalTableMapDataTransformTagColumnOperationArgs> tagColumnOperation;

    public DataSetLogicalTableMapDataTransformTagColumnOperationArgs tagColumnOperation() {
        if (tagColumnOperation == null) return null;
        return tagColumnOperation.getValue("DataSetLogicalTableMapDataTransformArgs.tagColumnOperation");
    }

    /**
     * A transform operation that removes tags associated with a column. See untag_column_operation.
     * 
     */
    private UndeferrableValue<DataSetLogicalTableMapDataTransformUntagColumnOperationArgs> untagColumnOperation;

    public DataSetLogicalTableMapDataTransformUntagColumnOperationArgs untagColumnOperation() {
        if (untagColumnOperation == null) return null;
        return untagColumnOperation.getValue("DataSetLogicalTableMapDataTransformArgs.untagColumnOperation");
    }

}
