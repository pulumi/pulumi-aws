// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.gamelift;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.gamelift.outputs.GameServerGroupAutoScalingPolicy;
import com.pulumi.policypacks.aws.gamelift.outputs.GameServerGroupInstanceDefinition;
import com.pulumi.policypacks.aws.gamelift.outputs.GameServerGroupLaunchTemplate;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:gamelift/gameServerGroup:GameServerGroup")
public final class GameServerGroup extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the GameLift Game Server Group.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'GameServerGroup.arn' is not present");
    }

    /**
     * The ARN of the created EC2 Auto Scaling group.
     * 
     */
    @PolicyResourceProperty(name="autoScalingGroupArn", flag="unknown_autoScalingGroupArn")
    private String value_autoScalingGroupArn;
    private boolean unknown_autoScalingGroupArn;
    public String autoScalingGroupArn() {
        if (!unknown_autoScalingGroupArn) return value_autoScalingGroupArn;
        throw new UndeferrableValueException("Value 'GameServerGroup.autoScalingGroupArn' is not present");
    }

    @PolicyResourceProperty(name="autoScalingPolicy", flag="unknown_autoScalingPolicy")
    private @Nullable GameServerGroupAutoScalingPolicy value_autoScalingPolicy;
    private boolean unknown_autoScalingPolicy;
    public @Nullable GameServerGroupAutoScalingPolicy autoScalingPolicy() {
        if (!unknown_autoScalingPolicy) return value_autoScalingPolicy;
        throw new UndeferrableValueException("Value 'GameServerGroup.autoScalingPolicy' is not present");
    }

    /**
     * Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances.
     * Valid values: `SPOT_ONLY`, `SPOT_PREFERRED`, `ON_DEMAND_ONLY`. Defaults to `SPOT_PREFERRED`.
     * 
     */
    @PolicyResourceProperty(name="balancingStrategy", flag="unknown_balancingStrategy")
    private String value_balancingStrategy;
    private boolean unknown_balancingStrategy;
    public String balancingStrategy() {
        if (!unknown_balancingStrategy) return value_balancingStrategy;
        throw new UndeferrableValueException("Value 'GameServerGroup.balancingStrategy' is not present");
    }

    /**
     * Name of the game server group.
     * This value is used to generate unique ARN identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group.
     * 
     */
    @PolicyResourceProperty(name="gameServerGroupName", flag="unknown_gameServerGroupName")
    private String value_gameServerGroupName;
    private boolean unknown_gameServerGroupName;
    public String gameServerGroupName() {
        if (!unknown_gameServerGroupName) return value_gameServerGroupName;
        throw new UndeferrableValueException("Value 'GameServerGroup.gameServerGroupName' is not present");
    }

    /**
     * Indicates whether instances in the game server group are protected from early termination.
     * Unprotected instances that have active game servers running might be terminated during a scale-down event,
     * causing players to be dropped from the game.
     * Protected instances cannot be terminated while there are active game servers running except in the event
     * of a forced game server group deletion.
     * Valid values: `NO_PROTECTION`, `FULL_PROTECTION`. Defaults to `NO_PROTECTION`.
     * 
     */
    @PolicyResourceProperty(name="gameServerProtectionPolicy", flag="unknown_gameServerProtectionPolicy")
    private String value_gameServerProtectionPolicy;
    private boolean unknown_gameServerProtectionPolicy;
    public String gameServerProtectionPolicy() {
        if (!unknown_gameServerProtectionPolicy) return value_gameServerProtectionPolicy;
        throw new UndeferrableValueException("Value 'GameServerGroup.gameServerProtectionPolicy' is not present");
    }

    @PolicyResourceProperty(name="instanceDefinitions", flag="unknown_instanceDefinitions")
    private List<GameServerGroupInstanceDefinition> value_instanceDefinitions;
    private boolean unknown_instanceDefinitions;
    public List<GameServerGroupInstanceDefinition> instanceDefinitions() {
        if (!unknown_instanceDefinitions) return value_instanceDefinitions;
        throw new UndeferrableValueException("Value 'GameServerGroup.instanceDefinitions' is not present");
    }

    @PolicyResourceProperty(name="launchTemplate", flag="unknown_launchTemplate")
    private GameServerGroupLaunchTemplate value_launchTemplate;
    private boolean unknown_launchTemplate;
    public GameServerGroupLaunchTemplate launchTemplate() {
        if (!unknown_launchTemplate) return value_launchTemplate;
        throw new UndeferrableValueException("Value 'GameServerGroup.launchTemplate' is not present");
    }

    /**
     * The maximum number of instances allowed in the EC2 Auto Scaling group.
     * During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
     * 
     */
    @PolicyResourceProperty(name="maxSize", flag="unknown_maxSize")
    private Integer value_maxSize;
    private boolean unknown_maxSize;
    public Integer maxSize() {
        if (!unknown_maxSize) return value_maxSize;
        throw new UndeferrableValueException("Value 'GameServerGroup.maxSize' is not present");
    }

    /**
     * The minimum number of instances allowed in the EC2 Auto Scaling group.
     * During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum.
     * 
     */
    @PolicyResourceProperty(name="minSize", flag="unknown_minSize")
    private Integer value_minSize;
    private boolean unknown_minSize;
    public Integer minSize() {
        if (!unknown_minSize) return value_minSize;
        throw new UndeferrableValueException("Value 'GameServerGroup.minSize' is not present");
    }

    /**
     * ARN for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'GameServerGroup.roleArn' is not present");
    }

    /**
     * Key-value map of resource tags
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'GameServerGroup.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'GameServerGroup.tagsAll' is not present");
    }

    /**
     * A list of VPC subnets to use with instances in the game server group.
     * By default, all GameLift FleetIQ-supported Availability Zones are used.
     * 
     */
    @PolicyResourceProperty(name="vpcSubnets", flag="unknown_vpcSubnets")
    private @Nullable List<String> value_vpcSubnets;
    private boolean unknown_vpcSubnets;
    public @Nullable List<String> vpcSubnets() {
        if (!unknown_vpcSubnets) return value_vpcSubnets;
        throw new UndeferrableValueException("Value 'GameServerGroup.vpcSubnets' is not present");
    }

}
