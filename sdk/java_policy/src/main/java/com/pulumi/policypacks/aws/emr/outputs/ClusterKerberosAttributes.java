// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.emr.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.String;
import javax.annotation.Nullable;


public final class ClusterKerberosAttributes {

    /**
     * Active Directory password for `ad_domain_join_user`. This provider cannot perform drift detection of this configuration.
     * 
     */
    private @Nullable UndeferrableValue<String> adDomainJoinPassword;

    public @Nullable String adDomainJoinPassword() {
        if (adDomainJoinPassword == null) return null;
        return adDomainJoinPassword.getValue("ClusterKerberosAttributes.adDomainJoinPassword");
    }

    /**
     * Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
     * 
     */
    private @Nullable UndeferrableValue<String> adDomainJoinUser;

    public @Nullable String adDomainJoinUser() {
        if (adDomainJoinUser == null) return null;
        return adDomainJoinUser.getValue("ClusterKerberosAttributes.adDomainJoinUser");
    }

    /**
     * Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
     * 
     */
    private @Nullable UndeferrableValue<String> crossRealmTrustPrincipalPassword;

    public @Nullable String crossRealmTrustPrincipalPassword() {
        if (crossRealmTrustPrincipalPassword == null) return null;
        return crossRealmTrustPrincipalPassword.getValue("ClusterKerberosAttributes.crossRealmTrustPrincipalPassword");
    }

    /**
     * Password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
     * 
     */
    private UndeferrableValue<String> kdcAdminPassword;

    public String kdcAdminPassword() {
        if (kdcAdminPassword == null) return null;
        return kdcAdminPassword.getValue("ClusterKerberosAttributes.kdcAdminPassword");
    }

    /**
     * Name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
     * 
     */
    private UndeferrableValue<String> realm;

    public String realm() {
        if (realm == null) return null;
        return realm.getValue("ClusterKerberosAttributes.realm");
    }

}
