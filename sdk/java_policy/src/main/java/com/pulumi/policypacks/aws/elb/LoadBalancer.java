// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elb;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elb.outputs.LoadBalancerAccessLogs;
import com.pulumi.policypacks.aws.elb.outputs.LoadBalancerHealthCheck;
import com.pulumi.policypacks.aws.elb.outputs.LoadBalancerListener;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elb/loadBalancer:LoadBalancer")
public final class LoadBalancer extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * An Access Logs block. Access Logs documented below.
     * 
     */
    @PolicyResourceProperty(name="accessLogs", flag="unknown_accessLogs")
    private @Nullable LoadBalancerAccessLogs value_accessLogs;
    private boolean unknown_accessLogs;
    public @Nullable LoadBalancerAccessLogs accessLogs() {
        if (!unknown_accessLogs) return value_accessLogs;
        throw new UndeferrableValueException("Value 'LoadBalancer.accessLogs' is not present");
    }

    /**
     * The ARN of the ELB
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'LoadBalancer.arn' is not present");
    }

    /**
     * The AZ&#39;s to serve traffic in.
     * 
     */
    @PolicyResourceProperty(name="availabilityZones", flag="unknown_availabilityZones")
    private List<String> value_availabilityZones;
    private boolean unknown_availabilityZones;
    public List<String> availabilityZones() {
        if (!unknown_availabilityZones) return value_availabilityZones;
        throw new UndeferrableValueException("Value 'LoadBalancer.availabilityZones' is not present");
    }

    /**
     * Boolean to enable connection draining. Default: `false`
     * 
     */
    @PolicyResourceProperty(name="connectionDraining", flag="unknown_connectionDraining")
    private @Nullable Boolean value_connectionDraining;
    private boolean unknown_connectionDraining;
    public @Nullable Boolean connectionDraining() {
        if (!unknown_connectionDraining) return value_connectionDraining;
        throw new UndeferrableValueException("Value 'LoadBalancer.connectionDraining' is not present");
    }

    /**
     * The time in seconds to allow for connections to drain. Default: `300`
     * 
     */
    @PolicyResourceProperty(name="connectionDrainingTimeout", flag="unknown_connectionDrainingTimeout")
    private @Nullable Integer value_connectionDrainingTimeout;
    private boolean unknown_connectionDrainingTimeout;
    public @Nullable Integer connectionDrainingTimeout() {
        if (!unknown_connectionDrainingTimeout) return value_connectionDrainingTimeout;
        throw new UndeferrableValueException("Value 'LoadBalancer.connectionDrainingTimeout' is not present");
    }

    /**
     * Enable cross-zone load balancing. Default: `true`
     * 
     */
    @PolicyResourceProperty(name="crossZoneLoadBalancing", flag="unknown_crossZoneLoadBalancing")
    private @Nullable Boolean value_crossZoneLoadBalancing;
    private boolean unknown_crossZoneLoadBalancing;
    public @Nullable Boolean crossZoneLoadBalancing() {
        if (!unknown_crossZoneLoadBalancing) return value_crossZoneLoadBalancing;
        throw new UndeferrableValueException("Value 'LoadBalancer.crossZoneLoadBalancing' is not present");
    }

    /**
     * Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
     * 
     */
    @PolicyResourceProperty(name="desyncMitigationMode", flag="unknown_desyncMitigationMode")
    private @Nullable String value_desyncMitigationMode;
    private boolean unknown_desyncMitigationMode;
    public @Nullable String desyncMitigationMode() {
        if (!unknown_desyncMitigationMode) return value_desyncMitigationMode;
        throw new UndeferrableValueException("Value 'LoadBalancer.desyncMitigationMode' is not present");
    }

    /**
     * The DNS name of the ELB
     * 
     */
    @PolicyResourceProperty(name="dnsName", flag="unknown_dnsName")
    private String value_dnsName;
    private boolean unknown_dnsName;
    public String dnsName() {
        if (!unknown_dnsName) return value_dnsName;
        throw new UndeferrableValueException("Value 'LoadBalancer.dnsName' is not present");
    }

    /**
     * A health_check block. Health Check documented below.
     * 
     */
    @PolicyResourceProperty(name="healthCheck", flag="unknown_healthCheck")
    private LoadBalancerHealthCheck value_healthCheck;
    private boolean unknown_healthCheck;
    public LoadBalancerHealthCheck healthCheck() {
        if (!unknown_healthCheck) return value_healthCheck;
        throw new UndeferrableValueException("Value 'LoadBalancer.healthCheck' is not present");
    }

    /**
     * The time in seconds that the connection is allowed to be idle. Default: `60`
     * 
     */
    @PolicyResourceProperty(name="idleTimeout", flag="unknown_idleTimeout")
    private @Nullable Integer value_idleTimeout;
    private boolean unknown_idleTimeout;
    public @Nullable Integer idleTimeout() {
        if (!unknown_idleTimeout) return value_idleTimeout;
        throw new UndeferrableValueException("Value 'LoadBalancer.idleTimeout' is not present");
    }

    /**
     * A list of instance ids to place in the ELB pool.
     * 
     */
    @PolicyResourceProperty(name="instances", flag="unknown_instances")
    private List<String> value_instances;
    private boolean unknown_instances;
    public List<String> instances() {
        if (!unknown_instances) return value_instances;
        throw new UndeferrableValueException("Value 'LoadBalancer.instances' is not present");
    }

    /**
     * If true, ELB will be an internal ELB.
     * 
     */
    @PolicyResourceProperty(name="internal", flag="unknown_internal")
    private Boolean value_internal;
    private boolean unknown_internal;
    public Boolean internal() {
        if (!unknown_internal) return value_internal;
        throw new UndeferrableValueException("Value 'LoadBalancer.internal' is not present");
    }

    /**
     * A list of listener blocks. Listeners documented below.
     * 
     */
    @PolicyResourceProperty(name="listeners", flag="unknown_listeners")
    private List<LoadBalancerListener> value_listeners;
    private boolean unknown_listeners;
    public List<LoadBalancerListener> listeners() {
        if (!unknown_listeners) return value_listeners;
        throw new UndeferrableValueException("Value 'LoadBalancer.listeners' is not present");
    }

    /**
     * The name of the ELB. By default generated by this provider.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'LoadBalancer.name' is not present");
    }

    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     * 
     */
    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'LoadBalancer.namePrefix' is not present");
    }

    /**
     * A list of security group IDs to assign to the ELB.
     * Only valid if creating an ELB within a VPC
     * 
     */
    @PolicyResourceProperty(name="securityGroups", flag="unknown_securityGroups")
    private List<String> value_securityGroups;
    private boolean unknown_securityGroups;
    public List<String> securityGroups() {
        if (!unknown_securityGroups) return value_securityGroups;
        throw new UndeferrableValueException("Value 'LoadBalancer.securityGroups' is not present");
    }

    /**
     * The name of the security group that you can use as
     * part of your inbound rules for your load balancer&#39;s back-end application
     * instances. Use this for Classic or Default VPC only.
     * 
     */
    @PolicyResourceProperty(name="sourceSecurityGroup", flag="unknown_sourceSecurityGroup")
    private String value_sourceSecurityGroup;
    private boolean unknown_sourceSecurityGroup;
    public String sourceSecurityGroup() {
        if (!unknown_sourceSecurityGroup) return value_sourceSecurityGroup;
        throw new UndeferrableValueException("Value 'LoadBalancer.sourceSecurityGroup' is not present");
    }

    /**
     * The ID of the security group that you can use as
     * part of your inbound rules for your load balancer&#39;s back-end application
     * instances. Only available on ELBs launched in a VPC.
     * 
     */
    @PolicyResourceProperty(name="sourceSecurityGroupId", flag="unknown_sourceSecurityGroupId")
    private String value_sourceSecurityGroupId;
    private boolean unknown_sourceSecurityGroupId;
    public String sourceSecurityGroupId() {
        if (!unknown_sourceSecurityGroupId) return value_sourceSecurityGroupId;
        throw new UndeferrableValueException("Value 'LoadBalancer.sourceSecurityGroupId' is not present");
    }

    /**
     * A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
     * 
     */
    @PolicyResourceProperty(name="subnets", flag="unknown_subnets")
    private List<String> value_subnets;
    private boolean unknown_subnets;
    public List<String> subnets() {
        if (!unknown_subnets) return value_subnets;
        throw new UndeferrableValueException("Value 'LoadBalancer.subnets' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * Exactly one of `availability_zones` or `subnets` must be specified: this
     * determines if the ELB exists in a VPC or in EC2-classic.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'LoadBalancer.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'LoadBalancer.tagsAll' is not present");
    }

    /**
     * The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
     * 
     */
    @PolicyResourceProperty(name="zoneId", flag="unknown_zoneId")
    private String value_zoneId;
    private boolean unknown_zoneId;
    public String zoneId() {
        if (!unknown_zoneId) return value_zoneId;
        throw new UndeferrableValueException("Value 'LoadBalancer.zoneId' is not present");
    }

}
