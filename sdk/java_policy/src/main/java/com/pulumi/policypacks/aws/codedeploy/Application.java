// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codedeploy;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:codedeploy/application:Application")
public final class Application extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The application ID.
     * 
     */
    @PolicyResourceProperty(name="applicationId", flag="unknown_applicationId")
    private String value_applicationId;
    private boolean unknown_applicationId;
    public String applicationId() {
        if (!unknown_applicationId) return value_applicationId;
        throw new UndeferrableValueException("Value 'Application.applicationId' is not present");
    }

    /**
     * The ARN of the CodeDeploy application.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Application.arn' is not present");
    }

    /**
     * The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
     * 
     */
    @PolicyResourceProperty(name="computePlatform", flag="unknown_computePlatform")
    private @Nullable String value_computePlatform;
    private boolean unknown_computePlatform;
    public @Nullable String computePlatform() {
        if (!unknown_computePlatform) return value_computePlatform;
        throw new UndeferrableValueException("Value 'Application.computePlatform' is not present");
    }

    /**
     * The name for a connection to a GitHub account.
     * 
     */
    @PolicyResourceProperty(name="githubAccountName", flag="unknown_githubAccountName")
    private String value_githubAccountName;
    private boolean unknown_githubAccountName;
    public String githubAccountName() {
        if (!unknown_githubAccountName) return value_githubAccountName;
        throw new UndeferrableValueException("Value 'Application.githubAccountName' is not present");
    }

    /**
     * Whether the user has authenticated with GitHub for the specified application.
     * 
     */
    @PolicyResourceProperty(name="linkedToGithub", flag="unknown_linkedToGithub")
    private Boolean value_linkedToGithub;
    private boolean unknown_linkedToGithub;
    public Boolean linkedToGithub() {
        if (!unknown_linkedToGithub) return value_linkedToGithub;
        throw new UndeferrableValueException("Value 'Application.linkedToGithub' is not present");
    }

    /**
     * The name of the application.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Application.name' is not present");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Application.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Application.tagsAll' is not present");
    }

}
