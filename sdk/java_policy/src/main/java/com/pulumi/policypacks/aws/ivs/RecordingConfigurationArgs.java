// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ivs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ivs.inputs.RecordingConfigurationDestinationConfigurationArgs;
import com.pulumi.policypacks.aws.ivs.inputs.RecordingConfigurationThumbnailConfigurationArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ivs/recordingConfiguration:RecordingConfiguration")
public final class RecordingConfigurationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Object containing destination configuration for where recorded video will be stored.
     * 
     */
    @PolicyResourceProperty(name="destinationConfiguration", flag="unknown_destinationConfiguration")
    private RecordingConfigurationDestinationConfigurationArgs value_destinationConfiguration;
    private boolean unknown_destinationConfiguration;
    public RecordingConfigurationDestinationConfigurationArgs destinationConfiguration() {
        if (!unknown_destinationConfiguration) return value_destinationConfiguration;
        throw new UndeferrableValueException("Value 'RecordingConfigurationArgs.destinationConfiguration' is not present");
    }

    /**
     * Recording Configuration name.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'RecordingConfigurationArgs.name' is not present");
    }

    /**
     * If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
     * 
     */
    @PolicyResourceProperty(name="recordingReconnectWindowSeconds", flag="unknown_recordingReconnectWindowSeconds")
    private Integer value_recordingReconnectWindowSeconds;
    private boolean unknown_recordingReconnectWindowSeconds;
    public Integer recordingReconnectWindowSeconds() {
        if (!unknown_recordingReconnectWindowSeconds) return value_recordingReconnectWindowSeconds;
        throw new UndeferrableValueException("Value 'RecordingConfigurationArgs.recordingReconnectWindowSeconds' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'RecordingConfigurationArgs.tags' is not present");
    }

    /**
     * Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
     * 
     */
    @PolicyResourceProperty(name="thumbnailConfiguration", flag="unknown_thumbnailConfiguration")
    private RecordingConfigurationThumbnailConfigurationArgs value_thumbnailConfiguration;
    private boolean unknown_thumbnailConfiguration;
    public RecordingConfigurationThumbnailConfigurationArgs thumbnailConfiguration() {
        if (!unknown_thumbnailConfiguration) return value_thumbnailConfiguration;
        throw new UndeferrableValueException("Value 'RecordingConfigurationArgs.thumbnailConfiguration' is not present");
    }

}
