// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ivs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ivs.inputs.RecordingConfigurationDestinationConfigurationArgs;
import com.pulumi.policypacks.aws.ivs.inputs.RecordingConfigurationThumbnailConfigurationArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ivs/recordingConfiguration:RecordingConfiguration")
public final class RecordingConfigurationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Object containing destination configuration for where recorded video will be stored.
     * 
     */
    private UndeferrableValue<RecordingConfigurationDestinationConfigurationArgs> destinationConfiguration;

    public RecordingConfigurationDestinationConfigurationArgs destinationConfiguration() {
        if (destinationConfiguration == null) return null;
        return destinationConfiguration.getValue("RecordingConfigurationArgs.destinationConfiguration");
    }

    /**
     * Recording Configuration name.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("RecordingConfigurationArgs.name");
    }

    /**
     * If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
     * 
     */
    private UndeferrableValue<Integer> recordingReconnectWindowSeconds;

    public Integer recordingReconnectWindowSeconds() {
        if (recordingReconnectWindowSeconds == null) return null;
        return recordingReconnectWindowSeconds.getValue("RecordingConfigurationArgs.recordingReconnectWindowSeconds");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("RecordingConfigurationArgs.tags");
    }

    /**
     * Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
     * 
     */
    private UndeferrableValue<RecordingConfigurationThumbnailConfigurationArgs> thumbnailConfiguration;

    public RecordingConfigurationThumbnailConfigurationArgs thumbnailConfiguration() {
        if (thumbnailConfiguration == null) return null;
        return thumbnailConfiguration.getValue("RecordingConfigurationArgs.thumbnailConfiguration");
    }

}
