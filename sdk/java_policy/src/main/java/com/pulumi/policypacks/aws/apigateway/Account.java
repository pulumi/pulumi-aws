// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigateway;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.apigateway.outputs.AccountThrottleSetting;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apigateway/account:Account")
public final class Account extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The version of the API keys used for the account.
     * 
     */
    @PolicyResourceProperty(name="apiKeyVersion", flag="unknown_apiKeyVersion")
    private String value_apiKeyVersion;
    private boolean unknown_apiKeyVersion;
    public String apiKeyVersion() {
        if (!unknown_apiKeyVersion) return value_apiKeyVersion;
        throw new UndeferrableValueException("Value 'Account.apiKeyVersion' is not present");
    }

    /**
     * ARN of an IAM role for CloudWatch (to allow logging &amp; monitoring). See more [in AWS Docs](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-stage-settings.html#how-to-stage-settings-console). Logging &amp; monitoring can be enabled/disabled and otherwise tuned on the API Gateway Stage level.
     * 
     */
    @PolicyResourceProperty(name="cloudwatchRoleArn", flag="unknown_cloudwatchRoleArn")
    private String value_cloudwatchRoleArn;
    private boolean unknown_cloudwatchRoleArn;
    public String cloudwatchRoleArn() {
        if (!unknown_cloudwatchRoleArn) return value_cloudwatchRoleArn;
        throw new UndeferrableValueException("Value 'Account.cloudwatchRoleArn' is not present");
    }

    /**
     * A list of features supported for the account.
     * 
     */
    @PolicyResourceProperty(name="features", flag="unknown_features")
    private List<String> value_features;
    private boolean unknown_features;
    public List<String> features() {
        if (!unknown_features) return value_features;
        throw new UndeferrableValueException("Value 'Account.features' is not present");
    }

    /**
     * If `true`, destroying the resource will reset account settings to default, otherwise account settings are not modified.
     * Defaults to `false`.
     * Will be removed in a future major version of the provider.
     * 
     * @deprecated
     * The &#34;reset_on_delete&#34; attribute will be removed in a future version of the provider
     * 
     */
    @Deprecated /* The ""reset_on_delete"" attribute will be removed in a future version of the provider */
    @PolicyResourceProperty(name="resetOnDelete", flag="unknown_resetOnDelete")
    private @Nullable Boolean value_resetOnDelete;
    private boolean unknown_resetOnDelete;
    public @Nullable Boolean resetOnDelete() {
        if (!unknown_resetOnDelete) return value_resetOnDelete;
        throw new UndeferrableValueException("Value 'Account.resetOnDelete' is not present");
    }

    /**
     * Account-Level throttle settings. See exported fields below.
     * 
     */
    @PolicyResourceProperty(name="throttleSettings", flag="unknown_throttleSettings")
    private List<AccountThrottleSetting> value_throttleSettings;
    private boolean unknown_throttleSettings;
    public List<AccountThrottleSetting> throttleSettings() {
        if (!unknown_throttleSettings) return value_throttleSettings;
        throw new UndeferrableValueException("Value 'Account.throttleSettings' is not present");
    }

}
