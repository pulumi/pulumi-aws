// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/vpc:Vpc")
public final class VpcArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`. Conflicts with `ipv6_ipam_pool_id`
     * 
     */
    private UndeferrableValue<Boolean> assignGeneratedIpv6CidrBlock;

    public Boolean assignGeneratedIpv6CidrBlock() {
        if (assignGeneratedIpv6CidrBlock == null) return null;
        return assignGeneratedIpv6CidrBlock.getValue("VpcArgs.assignGeneratedIpv6CidrBlock");
    }

    /**
     * The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4_netmask_length`.
     * 
     */
    private UndeferrableValue<String> cidrBlock;

    public String cidrBlock() {
        if (cidrBlock == null) return null;
        return cidrBlock.getValue("VpcArgs.cidrBlock");
    }

    /**
     * A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
     * 
     */
    private UndeferrableValue<Boolean> enableDnsHostnames;

    public Boolean enableDnsHostnames() {
        if (enableDnsHostnames == null) return null;
        return enableDnsHostnames.getValue("VpcArgs.enableDnsHostnames");
    }

    /**
     * A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
     * 
     */
    private UndeferrableValue<Boolean> enableDnsSupport;

    public Boolean enableDnsSupport() {
        if (enableDnsSupport == null) return null;
        return enableDnsSupport.getValue("VpcArgs.enableDnsSupport");
    }

    /**
     * Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
     * 
     */
    private UndeferrableValue<Boolean> enableNetworkAddressUsageMetrics;

    public Boolean enableNetworkAddressUsageMetrics() {
        if (enableNetworkAddressUsageMetrics == null) return null;
        return enableNetworkAddressUsageMetrics.getValue("VpcArgs.enableNetworkAddressUsageMetrics");
    }

    /**
     * A tenancy option for instances launched into the VPC. Default is `default`, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is `dedicated`, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
     * 
     */
    private UndeferrableValue<String> instanceTenancy;

    public String instanceTenancy() {
        if (instanceTenancy == null) return null;
        return instanceTenancy.getValue("VpcArgs.instanceTenancy");
    }

    /**
     * The ID of an IPv4 IPAM pool you want to use for allocating this VPC&#39;s CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
     * 
     */
    private UndeferrableValue<String> ipv4IpamPoolId;

    public String ipv4IpamPoolId() {
        if (ipv4IpamPoolId == null) return null;
        return ipv4IpamPoolId.getValue("VpcArgs.ipv4IpamPoolId");
    }

    /**
     * The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a `ipv4_ipam_pool_id`.
     * 
     */
    private UndeferrableValue<Integer> ipv4NetmaskLength;

    public Integer ipv4NetmaskLength() {
        if (ipv4NetmaskLength == null) return null;
        return ipv4NetmaskLength.getValue("VpcArgs.ipv4NetmaskLength");
    }

    /**
     * IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6_netmask_length`.
     * 
     */
    private UndeferrableValue<String> ipv6CidrBlock;

    public String ipv6CidrBlock() {
        if (ipv6CidrBlock == null) return null;
        return ipv6CidrBlock.getValue("VpcArgs.ipv6CidrBlock");
    }

    /**
     * By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
     * 
     */
    private UndeferrableValue<String> ipv6CidrBlockNetworkBorderGroup;

    public String ipv6CidrBlockNetworkBorderGroup() {
        if (ipv6CidrBlockNetworkBorderGroup == null) return null;
        return ipv6CidrBlockNetworkBorderGroup.getValue("VpcArgs.ipv6CidrBlockNetworkBorderGroup");
    }

    /**
     * IPAM Pool ID for a IPv6 pool. Conflicts with `assign_generated_ipv6_cidr_block`.
     * 
     */
    private UndeferrableValue<String> ipv6IpamPoolId;

    public String ipv6IpamPoolId() {
        if (ipv6IpamPoolId == null) return null;
        return ipv6IpamPoolId.getValue("VpcArgs.ipv6IpamPoolId");
    }

    /**
     * Netmask length to request from IPAM Pool. Conflicts with `ipv6_cidr_block`. This can be omitted if IPAM pool as a `allocation_default_netmask_length` set. Valid values are from `44` to `60` in increments of 4.
     * 
     */
    private UndeferrableValue<Integer> ipv6NetmaskLength;

    public Integer ipv6NetmaskLength() {
        if (ipv6NetmaskLength == null) return null;
        return ipv6NetmaskLength.getValue("VpcArgs.ipv6NetmaskLength");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("VpcArgs.tags");
    }

}
