// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ecs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ecs.outputs.ServiceAlarms;
import com.pulumi.policypacks.aws.ecs.outputs.ServiceCapacityProviderStrategy;
import com.pulumi.policypacks.aws.ecs.outputs.ServiceDeploymentCircuitBreaker;
import com.pulumi.policypacks.aws.ecs.outputs.ServiceDeploymentController;
import com.pulumi.policypacks.aws.ecs.outputs.ServiceLoadBalancer;
import com.pulumi.policypacks.aws.ecs.outputs.ServiceNetworkConfiguration;
import com.pulumi.policypacks.aws.ecs.outputs.ServiceOrderedPlacementStrategy;
import com.pulumi.policypacks.aws.ecs.outputs.ServicePlacementConstraint;
import com.pulumi.policypacks.aws.ecs.outputs.ServiceServiceConnectConfiguration;
import com.pulumi.policypacks.aws.ecs.outputs.ServiceServiceRegistries;
import com.pulumi.policypacks.aws.ecs.outputs.ServiceVolumeConfiguration;
import com.pulumi.policypacks.aws.ecs.outputs.ServiceVpcLatticeConfiguration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ecs/service:Service")
public final class Service extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Information about the CloudWatch alarms. See below.
     * 
     */
    @PolicyResourceProperty(name="alarms", flag="unknown_alarms")
    private @Nullable ServiceAlarms value_alarms;
    private boolean unknown_alarms;
    public @Nullable ServiceAlarms alarms() {
        if (!unknown_alarms) return value_alarms;
        throw new UndeferrableValueException("Value 'Service.alarms' is not present");
    }

    /**
     * ECS automatically redistributes tasks within a service across Availability Zones (AZs) to mitigate the risk of impaired application availability due to underlying infrastructure failures and task lifecycle activities. The valid values are `ENABLED` and `DISABLED`. Defaults to `DISABLED`.
     * 
     */
    @PolicyResourceProperty(name="availabilityZoneRebalancing", flag="unknown_availabilityZoneRebalancing")
    private @Nullable String value_availabilityZoneRebalancing;
    private boolean unknown_availabilityZoneRebalancing;
    public @Nullable String availabilityZoneRebalancing() {
        if (!unknown_availabilityZoneRebalancing) return value_availabilityZoneRebalancing;
        throw new UndeferrableValueException("Value 'Service.availabilityZoneRebalancing' is not present");
    }

    /**
     * Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if `force_new_deployment = true` and not changing from 0 `capacity_provider_strategy` blocks to greater than 0, or vice versa. See below. Conflicts with `launch_type`.
     * 
     */
    @PolicyResourceProperty(name="capacityProviderStrategies", flag="unknown_capacityProviderStrategies")
    private @Nullable List<ServiceCapacityProviderStrategy> value_capacityProviderStrategies;
    private boolean unknown_capacityProviderStrategies;
    public @Nullable List<ServiceCapacityProviderStrategy> capacityProviderStrategies() {
        if (!unknown_capacityProviderStrategies) return value_capacityProviderStrategies;
        throw new UndeferrableValueException("Value 'Service.capacityProviderStrategies' is not present");
    }

    /**
     * ARN of an ECS cluster.
     * 
     */
    @PolicyResourceProperty(name="cluster", flag="unknown_cluster")
    private String value_cluster;
    private boolean unknown_cluster;
    public String cluster() {
        if (!unknown_cluster) return value_cluster;
        throw new UndeferrableValueException("Value 'Service.cluster' is not present");
    }

    /**
     * Configuration block for deployment circuit breaker. See below.
     * 
     */
    @PolicyResourceProperty(name="deploymentCircuitBreaker", flag="unknown_deploymentCircuitBreaker")
    private @Nullable ServiceDeploymentCircuitBreaker value_deploymentCircuitBreaker;
    private boolean unknown_deploymentCircuitBreaker;
    public @Nullable ServiceDeploymentCircuitBreaker deploymentCircuitBreaker() {
        if (!unknown_deploymentCircuitBreaker) return value_deploymentCircuitBreaker;
        throw new UndeferrableValueException("Value 'Service.deploymentCircuitBreaker' is not present");
    }

    /**
     * Configuration block for deployment controller configuration. See below.
     * 
     */
    @PolicyResourceProperty(name="deploymentController", flag="unknown_deploymentController")
    private @Nullable ServiceDeploymentController value_deploymentController;
    private boolean unknown_deploymentController;
    public @Nullable ServiceDeploymentController deploymentController() {
        if (!unknown_deploymentController) return value_deploymentController;
        throw new UndeferrableValueException("Value 'Service.deploymentController' is not present");
    }

    /**
     * Upper limit (as a percentage of the service&#39;s desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
     * 
     */
    @PolicyResourceProperty(name="deploymentMaximumPercent", flag="unknown_deploymentMaximumPercent")
    private @Nullable Integer value_deploymentMaximumPercent;
    private boolean unknown_deploymentMaximumPercent;
    public @Nullable Integer deploymentMaximumPercent() {
        if (!unknown_deploymentMaximumPercent) return value_deploymentMaximumPercent;
        throw new UndeferrableValueException("Value 'Service.deploymentMaximumPercent' is not present");
    }

    /**
     * Lower limit (as a percentage of the service&#39;s desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
     * 
     */
    @PolicyResourceProperty(name="deploymentMinimumHealthyPercent", flag="unknown_deploymentMinimumHealthyPercent")
    private @Nullable Integer value_deploymentMinimumHealthyPercent;
    private boolean unknown_deploymentMinimumHealthyPercent;
    public @Nullable Integer deploymentMinimumHealthyPercent() {
        if (!unknown_deploymentMinimumHealthyPercent) return value_deploymentMinimumHealthyPercent;
        throw new UndeferrableValueException("Value 'Service.deploymentMinimumHealthyPercent' is not present");
    }

    /**
     * Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
     * 
     */
    @PolicyResourceProperty(name="desiredCount", flag="unknown_desiredCount")
    private @Nullable Integer value_desiredCount;
    private boolean unknown_desiredCount;
    public @Nullable Integer desiredCount() {
        if (!unknown_desiredCount) return value_desiredCount;
        throw new UndeferrableValueException("Value 'Service.desiredCount' is not present");
    }

    /**
     * Whether to enable Amazon ECS managed tags for the tasks within the service.
     * 
     */
    @PolicyResourceProperty(name="enableEcsManagedTags", flag="unknown_enableEcsManagedTags")
    private @Nullable Boolean value_enableEcsManagedTags;
    private boolean unknown_enableEcsManagedTags;
    public @Nullable Boolean enableEcsManagedTags() {
        if (!unknown_enableEcsManagedTags) return value_enableEcsManagedTags;
        throw new UndeferrableValueException("Value 'Service.enableEcsManagedTags' is not present");
    }

    /**
     * Whether to enable Amazon ECS Exec for the tasks within the service.
     * 
     */
    @PolicyResourceProperty(name="enableExecuteCommand", flag="unknown_enableExecuteCommand")
    private @Nullable Boolean value_enableExecuteCommand;
    private boolean unknown_enableExecuteCommand;
    public @Nullable Boolean enableExecuteCommand() {
        if (!unknown_enableExecuteCommand) return value_enableExecuteCommand;
        throw new UndeferrableValueException("Value 'Service.enableExecuteCommand' is not present");
    }

    /**
     * Enable to delete a service even if it wasn&#39;t scaled down to zero tasks. It&#39;s only necessary to use this if the service uses the `REPLICA` scheduling strategy.
     * 
     */
    @PolicyResourceProperty(name="forceDelete", flag="unknown_forceDelete")
    private @Nullable Boolean value_forceDelete;
    private boolean unknown_forceDelete;
    public @Nullable Boolean forceDelete() {
        if (!unknown_forceDelete) return value_forceDelete;
        throw new UndeferrableValueException("Value 'Service.forceDelete' is not present");
    }

    /**
     * Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., `myimage:latest`), roll Fargate tasks onto a newer platform version, or immediately deploy `ordered_placement_strategy` and `placement_constraints` updates.
     * When using the forceNewDeployment property you also need to configure the triggers property.
     * 
     */
    @PolicyResourceProperty(name="forceNewDeployment", flag="unknown_forceNewDeployment")
    private @Nullable Boolean value_forceNewDeployment;
    private boolean unknown_forceNewDeployment;
    public @Nullable Boolean forceNewDeployment() {
        if (!unknown_forceNewDeployment) return value_forceNewDeployment;
        throw new UndeferrableValueException("Value 'Service.forceNewDeployment' is not present");
    }

    /**
     * Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
     * 
     */
    @PolicyResourceProperty(name="healthCheckGracePeriodSeconds", flag="unknown_healthCheckGracePeriodSeconds")
    private @Nullable Integer value_healthCheckGracePeriodSeconds;
    private boolean unknown_healthCheckGracePeriodSeconds;
    public @Nullable Integer healthCheckGracePeriodSeconds() {
        if (!unknown_healthCheckGracePeriodSeconds) return value_healthCheckGracePeriodSeconds;
        throw new UndeferrableValueException("Value 'Service.healthCheckGracePeriodSeconds' is not present");
    }

    /**
     * ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
     * 
     */
    @PolicyResourceProperty(name="iamRole", flag="unknown_iamRole")
    private String value_iamRole;
    private boolean unknown_iamRole;
    public String iamRole() {
        if (!unknown_iamRole) return value_iamRole;
        throw new UndeferrableValueException("Value 'Service.iamRole' is not present");
    }

    /**
     * Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`. Conflicts with `capacity_provider_strategy`.
     * 
     */
    @PolicyResourceProperty(name="launchType", flag="unknown_launchType")
    private String value_launchType;
    private boolean unknown_launchType;
    public String launchType() {
        if (!unknown_launchType) return value_launchType;
        throw new UndeferrableValueException("Value 'Service.launchType' is not present");
    }

    /**
     * Configuration block for load balancers. See below.
     * 
     */
    @PolicyResourceProperty(name="loadBalancers", flag="unknown_loadBalancers")
    private @Nullable List<ServiceLoadBalancer> value_loadBalancers;
    private boolean unknown_loadBalancers;
    public @Nullable List<ServiceLoadBalancer> loadBalancers() {
        if (!unknown_loadBalancers) return value_loadBalancers;
        throw new UndeferrableValueException("Value 'Service.loadBalancers' is not present");
    }

    /**
     * Name of the service (up to 255 letters, numbers, hyphens, and underscores)
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Service.name' is not present");
    }

    /**
     * Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
     * 
     */
    @PolicyResourceProperty(name="networkConfiguration", flag="unknown_networkConfiguration")
    private @Nullable ServiceNetworkConfiguration value_networkConfiguration;
    private boolean unknown_networkConfiguration;
    public @Nullable ServiceNetworkConfiguration networkConfiguration() {
        if (!unknown_networkConfiguration) return value_networkConfiguration;
        throw new UndeferrableValueException("Value 'Service.networkConfiguration' is not present");
    }

    /**
     * Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless `force_new_deployment` is enabled. The maximum number of `ordered_placement_strategy` blocks is `5`. See below.
     * 
     */
    @PolicyResourceProperty(name="orderedPlacementStrategies", flag="unknown_orderedPlacementStrategies")
    private @Nullable List<ServiceOrderedPlacementStrategy> value_orderedPlacementStrategies;
    private boolean unknown_orderedPlacementStrategies;
    public @Nullable List<ServiceOrderedPlacementStrategy> orderedPlacementStrategies() {
        if (!unknown_orderedPlacementStrategies) return value_orderedPlacementStrategies;
        throw new UndeferrableValueException("Value 'Service.orderedPlacementStrategies' is not present");
    }

    /**
     * Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless `force_new_deployment` is enabled. Maximum number of `placement_constraints` is `10`. See below.
     * 
     */
    @PolicyResourceProperty(name="placementConstraints", flag="unknown_placementConstraints")
    private @Nullable List<ServicePlacementConstraint> value_placementConstraints;
    private boolean unknown_placementConstraints;
    public @Nullable List<ServicePlacementConstraint> placementConstraints() {
        if (!unknown_placementConstraints) return value_placementConstraints;
        throw new UndeferrableValueException("Value 'Service.placementConstraints' is not present");
    }

    /**
     * Platform version on which to run your service. Only applicable for `launch_type` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
     * 
     */
    @PolicyResourceProperty(name="platformVersion", flag="unknown_platformVersion")
    private String value_platformVersion;
    private boolean unknown_platformVersion;
    public String platformVersion() {
        if (!unknown_platformVersion) return value_platformVersion;
        throw new UndeferrableValueException("Value 'Service.platformVersion' is not present");
    }

    /**
     * Whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
     * 
     */
    @PolicyResourceProperty(name="propagateTags", flag="unknown_propagateTags")
    private @Nullable String value_propagateTags;
    private boolean unknown_propagateTags;
    public @Nullable String propagateTags() {
        if (!unknown_propagateTags) return value_propagateTags;
        throw new UndeferrableValueException("Value 'Service.propagateTags' is not present");
    }

    /**
     * Scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don&#39;t support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html).
     * 
     */
    @PolicyResourceProperty(name="schedulingStrategy", flag="unknown_schedulingStrategy")
    private @Nullable String value_schedulingStrategy;
    private boolean unknown_schedulingStrategy;
    public @Nullable String schedulingStrategy() {
        if (!unknown_schedulingStrategy) return value_schedulingStrategy;
        throw new UndeferrableValueException("Value 'Service.schedulingStrategy' is not present");
    }

    /**
     * ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.
     * 
     */
    @PolicyResourceProperty(name="serviceConnectConfiguration", flag="unknown_serviceConnectConfiguration")
    private @Nullable ServiceServiceConnectConfiguration value_serviceConnectConfiguration;
    private boolean unknown_serviceConnectConfiguration;
    public @Nullable ServiceServiceConnectConfiguration serviceConnectConfiguration() {
        if (!unknown_serviceConnectConfiguration) return value_serviceConnectConfiguration;
        throw new UndeferrableValueException("Value 'Service.serviceConnectConfiguration' is not present");
    }

    /**
     * Service discovery registries for the service. The maximum number of `service_registries` blocks is `1`. See below.
     * 
     */
    @PolicyResourceProperty(name="serviceRegistries", flag="unknown_serviceRegistries")
    private @Nullable ServiceServiceRegistries value_serviceRegistries;
    private boolean unknown_serviceRegistries;
    public @Nullable ServiceServiceRegistries serviceRegistries() {
        if (!unknown_serviceRegistries) return value_serviceRegistries;
        throw new UndeferrableValueException("Value 'Service.serviceRegistries' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Service.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Service.tagsAll' is not present");
    }

    /**
     * Family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service. Required unless using the `EXTERNAL` deployment controller. If a revision is not specified, the latest `ACTIVE` revision is used.
     * 
     */
    @PolicyResourceProperty(name="taskDefinition", flag="unknown_taskDefinition")
    private @Nullable String value_taskDefinition;
    private boolean unknown_taskDefinition;
    public @Nullable String taskDefinition() {
        if (!unknown_taskDefinition) return value_taskDefinition;
        throw new UndeferrableValueException("Value 'Service.taskDefinition' is not present");
    }

    /**
     * Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with `&#34;plantimestamp()&#34;`. When using the triggers property you also need to set the forceNewDeployment property to True.
     * 
     */
    @PolicyResourceProperty(name="triggers", flag="unknown_triggers")
    private Map<String,String> value_triggers;
    private boolean unknown_triggers;
    public Map<String,String> triggers() {
        if (!unknown_triggers) return value_triggers;
        throw new UndeferrableValueException("Value 'Service.triggers' is not present");
    }

    /**
     * Configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume. See below.
     * 
     */
    @PolicyResourceProperty(name="volumeConfiguration", flag="unknown_volumeConfiguration")
    private @Nullable ServiceVolumeConfiguration value_volumeConfiguration;
    private boolean unknown_volumeConfiguration;
    public @Nullable ServiceVolumeConfiguration volumeConfiguration() {
        if (!unknown_volumeConfiguration) return value_volumeConfiguration;
        throw new UndeferrableValueException("Value 'Service.volumeConfiguration' is not present");
    }

    /**
     * The VPC Lattice configuration for your service that allows Lattice to connect, secure, and monitor your service across multiple accounts and VPCs. See below.
     * 
     */
    @PolicyResourceProperty(name="vpcLatticeConfigurations", flag="unknown_vpcLatticeConfigurations")
    private @Nullable List<ServiceVpcLatticeConfiguration> value_vpcLatticeConfigurations;
    private boolean unknown_vpcLatticeConfigurations;
    public @Nullable List<ServiceVpcLatticeConfiguration> vpcLatticeConfigurations() {
        if (!unknown_vpcLatticeConfigurations) return value_vpcLatticeConfigurations;
        throw new UndeferrableValueException("Value 'Service.vpcLatticeConfigurations' is not present");
    }

    /**
     * If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
     * 
     */
    @PolicyResourceProperty(name="waitForSteadyState", flag="unknown_waitForSteadyState")
    private @Nullable Boolean value_waitForSteadyState;
    private boolean unknown_waitForSteadyState;
    public @Nullable Boolean waitForSteadyState() {
        if (!unknown_waitForSteadyState) return value_waitForSteadyState;
        throw new UndeferrableValueException("Value 'Service.waitForSteadyState' is not present");
    }

}
