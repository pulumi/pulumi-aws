// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.signer;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:signer/signingProfilePermission:SigningProfilePermission")
public final class SigningProfilePermissionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * An AWS Signer action permitted as part of cross-account permissions. Valid values: `signer:StartSigningJob`, `signer:GetSigningProfile`, `signer:RevokeSignature`, or `signer:SignPayload`.
     * 
     */
    @PolicyResourceProperty(name="action", flag="unknown_action")
    private String value_action;
    private boolean unknown_action;
    public String action() {
        if (!unknown_action) return value_action;
        throw new UndeferrableValueException("Value 'SigningProfilePermissionArgs.action' is not present");
    }

    /**
     * The AWS principal to be granted a cross-account permission.
     * 
     */
    @PolicyResourceProperty(name="principal", flag="unknown_principal")
    private String value_principal;
    private boolean unknown_principal;
    public String principal() {
        if (!unknown_principal) return value_principal;
        throw new UndeferrableValueException("Value 'SigningProfilePermissionArgs.principal' is not present");
    }

    /**
     * Name of the signing profile to add the cross-account permissions.
     * 
     */
    @PolicyResourceProperty(name="profileName", flag="unknown_profileName")
    private String value_profileName;
    private boolean unknown_profileName;
    public String profileName() {
        if (!unknown_profileName) return value_profileName;
        throw new UndeferrableValueException("Value 'SigningProfilePermissionArgs.profileName' is not present");
    }

    /**
     * The signing profile version that a permission applies to.
     * 
     */
    @PolicyResourceProperty(name="profileVersion", flag="unknown_profileVersion")
    private String value_profileVersion;
    private boolean unknown_profileVersion;
    public String profileVersion() {
        if (!unknown_profileVersion) return value_profileVersion;
        throw new UndeferrableValueException("Value 'SigningProfilePermissionArgs.profileVersion' is not present");
    }

    /**
     * A unique statement identifier. By default generated by the provider.
     * 
     */
    @PolicyResourceProperty(name="statementId", flag="unknown_statementId")
    private String value_statementId;
    private boolean unknown_statementId;
    public String statementId() {
        if (!unknown_statementId) return value_statementId;
        throw new UndeferrableValueException("Value 'SigningProfilePermissionArgs.statementId' is not present");
    }

    /**
     * A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statement_id`.
     * 
     */
    @PolicyResourceProperty(name="statementIdPrefix", flag="unknown_statementIdPrefix")
    private String value_statementIdPrefix;
    private boolean unknown_statementIdPrefix;
    public String statementIdPrefix() {
        if (!unknown_statementIdPrefix) return value_statementIdPrefix;
        throw new UndeferrableValueException("Value 'SigningProfilePermissionArgs.statementIdPrefix' is not present");
    }

}
