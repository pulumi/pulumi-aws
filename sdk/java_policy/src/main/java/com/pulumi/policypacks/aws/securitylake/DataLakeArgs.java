// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.securitylake;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.securitylake.inputs.DataLakeConfigurationArgs;
import com.pulumi.policypacks.aws.securitylake.inputs.DataLakeTimeoutsArgs;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:securitylake/dataLake:DataLake")
public final class DataLakeArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specify the Region or Regions that will contribute data to the rollup region.
     * 
     */
    @PolicyResourceProperty(name="configuration", flag="unknown_configuration")
    private DataLakeConfigurationArgs value_configuration;
    private boolean unknown_configuration;
    public DataLakeConfigurationArgs configuration() {
        if (!unknown_configuration) return value_configuration;
        throw new UndeferrableValueException("Value 'DataLakeArgs.configuration' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
     * 
     */
    @PolicyResourceProperty(name="metaStoreManagerRoleArn", flag="unknown_metaStoreManagerRoleArn")
    private String value_metaStoreManagerRoleArn;
    private boolean unknown_metaStoreManagerRoleArn;
    public String metaStoreManagerRoleArn() {
        if (!unknown_metaStoreManagerRoleArn) return value_metaStoreManagerRoleArn;
        throw new UndeferrableValueException("Value 'DataLakeArgs.metaStoreManagerRoleArn' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'DataLakeArgs.tags' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private DataLakeTimeoutsArgs value_timeouts;
    private boolean unknown_timeouts;
    public DataLakeTimeoutsArgs timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'DataLakeArgs.timeouts' is not present");
    }

}
