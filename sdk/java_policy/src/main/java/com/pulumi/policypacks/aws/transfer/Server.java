// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.transfer;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.transfer.outputs.ServerEndpointDetails;
import com.pulumi.policypacks.aws.transfer.outputs.ServerProtocolDetails;
import com.pulumi.policypacks.aws.transfer.outputs.ServerS3StorageOptions;
import com.pulumi.policypacks.aws.transfer.outputs.ServerWorkflowDetails;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:transfer/server:Server")
public final class Server extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of Transfer Server
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Server.arn");
    }

    /**
     * The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. This is required when `protocols` is set to `FTPS`
     * 
     */
    private @Nullable UndeferrableValue<String> certificate;

    public @Nullable String certificate() {
        if (certificate == null) return null;
        return certificate.getValue("Server.certificate");
    }

    /**
     * The directory service ID of the directory service you want to connect to with an `identity_provider_type` of `AWS_DIRECTORY_SERVICE`.
     * 
     */
    private @Nullable UndeferrableValue<String> directoryId;

    public @Nullable String directoryId() {
        if (directoryId == null) return null;
        return directoryId.getValue("Server.directoryId");
    }

    /**
     * The domain of the storage system that is used for file transfers. Valid values are: `S3` and `EFS`. The default value is `S3`.
     * 
     */
    private @Nullable UndeferrableValue<String> domain;

    public @Nullable String domain() {
        if (domain == null) return null;
        return domain.getValue("Server.domain");
    }

    /**
     * The endpoint of the Transfer Server (e.g., `s-12345678.server.transfer.REGION.amazonaws.com`)
     * 
     */
    private UndeferrableValue<String> endpoint;

    public String endpoint() {
        if (endpoint == null) return null;
        return endpoint.getValue("Server.endpoint");
    }

    /**
     * The virtual private cloud (VPC) endpoint settings that you want to configure for your SFTP server. See `endpoint_details` Block below for details.
     * 
     */
    private @Nullable UndeferrableValue<ServerEndpointDetails> endpointDetails;

    public @Nullable ServerEndpointDetails endpointDetails() {
        if (endpointDetails == null) return null;
        return endpointDetails.getValue("Server.endpointDetails");
    }

    /**
     * The type of endpoint that you want your SFTP server connect to. If you connect to a `VPC` (or `VPC_ENDPOINT`), your SFTP server isn&#39;t accessible over the public internet. If you want to connect your SFTP server via public internet, set `PUBLIC`.  Defaults to `PUBLIC`.
     * 
     */
    private @Nullable UndeferrableValue<String> endpointType;

    public @Nullable String endpointType() {
        if (endpointType == null) return null;
        return endpointType.getValue("Server.endpointType");
    }

    /**
     * A boolean that indicates all users associated with the server should be deleted so that the Server can be destroyed without error. The default value is `false`. This option only applies to servers configured with a `SERVICE_MANAGED` `identity_provider_type`.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> forceDestroy;

    public @Nullable Boolean forceDestroy() {
        if (forceDestroy == null) return null;
        return forceDestroy.getValue("Server.forceDestroy");
    }

    /**
     * The ARN for a lambda function to use for the Identity provider.
     * 
     */
    private @Nullable UndeferrableValue<String> function;

    public @Nullable String function() {
        if (function == null) return null;
        return function.getValue("Server.function");
    }

    /**
     * RSA, ECDSA, or ED25519 private key (e.g., as generated by the `ssh-keygen -t rsa -b 2048 -N &#34;&#34; -m PEM -f my-new-server-key`, `ssh-keygen -t ecdsa -b 256 -N &#34;&#34; -m PEM -f my-new-server-key` or `ssh-keygen -t ed25519 -N &#34;&#34; -f my-new-server-key` commands).
     * 
     */
    private @Nullable UndeferrableValue<String> hostKey;

    public @Nullable String hostKey() {
        if (hostKey == null) return null;
        return hostKey.getValue("Server.hostKey");
    }

    /**
     * This value contains the message-digest algorithm (MD5) hash of the server&#39;s host key. This value is equivalent to the output of the `ssh-keygen -l -E md5 -f my-new-server-key` command.
     * 
     */
    private UndeferrableValue<String> hostKeyFingerprint;

    public String hostKeyFingerprint() {
        if (hostKeyFingerprint == null) return null;
        return hostKeyFingerprint.getValue("Server.hostKeyFingerprint");
    }

    /**
     * The mode of authentication enabled for this service. The default value is `SERVICE_MANAGED`, which allows you to store and access SFTP user credentials within the service. `API_GATEWAY` indicates that user authentication requires a call to an API Gateway endpoint URL provided by you to integrate an identity provider of your choice. Using `AWS_DIRECTORY_SERVICE` will allow for authentication against AWS Managed Active Directory or Microsoft Active Directory in your on-premises environment, or in AWS using AD Connectors. Use the `AWS_LAMBDA` value to directly use a Lambda function as your identity provider. If you choose this value, you must specify the ARN for the lambda function in the `function` argument.
     * 
     */
    private @Nullable UndeferrableValue<String> identityProviderType;

    public @Nullable String identityProviderType() {
        if (identityProviderType == null) return null;
        return identityProviderType.getValue("Server.identityProviderType");
    }

    /**
     * Amazon Resource Name (ARN) of the IAM role used to authenticate the user account with an `identity_provider_type` of `API_GATEWAY`.
     * 
     */
    private @Nullable UndeferrableValue<String> invocationRole;

    public @Nullable String invocationRole() {
        if (invocationRole == null) return null;
        return invocationRole.getValue("Server.invocationRole");
    }

    /**
     * Amazon Resource Name (ARN) of an IAM role that allows the service to write your SFTP usersâ€™ activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
     * 
     */
    private @Nullable UndeferrableValue<String> loggingRole;

    public @Nullable String loggingRole() {
        if (loggingRole == null) return null;
        return loggingRole.getValue("Server.loggingRole");
    }

    /**
     * Specify a string to display when users connect to a server. This string is displayed after the user authenticates. The SFTP protocol does not support post-authentication display banners.
     * 
     */
    private @Nullable UndeferrableValue<String> postAuthenticationLoginBanner;

    public @Nullable String postAuthenticationLoginBanner() {
        if (postAuthenticationLoginBanner == null) return null;
        return postAuthenticationLoginBanner.getValue("Server.postAuthenticationLoginBanner");
    }

    /**
     * Specify a string to display when users connect to a server. This string is displayed before the user authenticates.
     * 
     */
    private @Nullable UndeferrableValue<String> preAuthenticationLoginBanner;

    public @Nullable String preAuthenticationLoginBanner() {
        if (preAuthenticationLoginBanner == null) return null;
        return preAuthenticationLoginBanner.getValue("Server.preAuthenticationLoginBanner");
    }

    /**
     * The protocol settings that are configured for your server. See `protocol_details` Block below for details.
     * 
     */
    private UndeferrableValue<ServerProtocolDetails> protocolDetails;

    public ServerProtocolDetails protocolDetails() {
        if (protocolDetails == null) return null;
        return protocolDetails.getValue("Server.protocolDetails");
    }

    /**
     * Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server&#39;s endpoint. This defaults to `SFTP` . The available protocols are:
     * * `AS2`: File transfer over Applicability Statement 2
     * * `SFTP`: File transfer over SSH
     * * `FTPS`: File transfer with TLS encryption
     * * `FTP`: Unencrypted file transfer
     * 
     */
    private UndeferrableValue<List<String>> protocols;

    public List<String> protocols() {
        if (protocols == null) return null;
        return protocols.getValue("Server.protocols");
    }

    /**
     * Specifies whether or not performance for your Amazon S3 directories is optimized. This is disabled by default. See `s3_storage_options` Block below for details.
     * 
     */
    private UndeferrableValue<ServerS3StorageOptions> s3StorageOptions;

    public ServerS3StorageOptions s3StorageOptions() {
        if (s3StorageOptions == null) return null;
        return s3StorageOptions.getValue("Server.s3StorageOptions");
    }

    /**
     * Specifies the name of the security policy that is attached to the server. Default value is: `TransferSecurityPolicy-2018-11`. The available values are:
     * * `TransferSecurityPolicy-2018-11`
     * * `TransferSecurityPolicy-2020-06`
     * * `TransferSecurityPolicy-2022-03`
     * * `TransferSecurityPolicy-2023-05`
     * * `TransferSecurityPolicy-2024-01`
     * * `TransferSecurityPolicy-FIPS-2020-06`
     * * `TransferSecurityPolicy-FIPS-2023-05`
     * * `TransferSecurityPolicy-FIPS-2024-01`
     * * `TransferSecurityPolicy-FIPS-2024-05`
     * * `TransferSecurityPolicy-PQ-SSH-Experimental-2023-04`
     * * `TransferSecurityPolicy-PQ-SSH-FIPS-Experimental-2023-04`
     * * `TransferSecurityPolicy-Restricted-2018-11`
     * * `TransferSecurityPolicy-Restricted-2020-06`
     * * `TransferSecurityPolicy-Restricted-2024-06`
     * 
     * See [Security policies for AWS Transfer Family servers](https://docs.aws.amazon.com/transfer/latest/userguide/security-policies.html) for details.
     * 
     */
    private @Nullable UndeferrableValue<String> securityPolicyName;

    public @Nullable String securityPolicyName() {
        if (securityPolicyName == null) return null;
        return securityPolicyName.getValue("Server.securityPolicyName");
    }

    /**
     * For SFTP-enabled servers, and for custom identity providers only. Valid values are `PASSWORD`, `PUBLIC_KEY`, `PUBLIC_KEY_OR_PASSWORD` and `PUBLIC_KEY_AND_PASSWORD`. Default value is: `PUBLIC_KEY_OR_PASSWORD`.
     * 
     */
    private UndeferrableValue<String> sftpAuthenticationMethods;

    public String sftpAuthenticationMethods() {
        if (sftpAuthenticationMethods == null) return null;
        return sftpAuthenticationMethods.getValue("Server.sftpAuthenticationMethods");
    }

    /**
     * A set of ARNs of destinations that will receive structured logs from the transfer server such as CloudWatch Log Group ARNs. If provided this enables the transfer server to emit structured logs to the specified locations.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> structuredLogDestinations;

    public @Nullable List<String> structuredLogDestinations() {
        if (structuredLogDestinations == null) return null;
        return structuredLogDestinations.getValue("Server.structuredLogDestinations");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Server.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Server.tagsAll");
    }

    /**
     * URL of the service endpoint used to authenticate users with an `identity_provider_type` of `API_GATEWAY`.
     * 
     */
    private @Nullable UndeferrableValue<String> url;

    public @Nullable String url() {
        if (url == null) return null;
        return url.getValue("Server.url");
    }

    /**
     * Specifies the workflow details. See `workflow_details` Block below for details.
     * 
     */
    private @Nullable UndeferrableValue<ServerWorkflowDetails> workflowDetails;

    public @Nullable ServerWorkflowDetails workflowDetails() {
        if (workflowDetails == null) return null;
        return workflowDetails.getValue("Server.workflowDetails");
    }

}
