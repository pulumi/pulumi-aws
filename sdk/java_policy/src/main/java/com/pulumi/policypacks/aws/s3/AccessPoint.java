// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.s3.outputs.AccessPointPublicAccessBlockConfiguration;
import com.pulumi.policypacks.aws.s3.outputs.AccessPointVpcConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:s3/accessPoint:AccessPoint")
public final class AccessPoint extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * AWS account ID for the owner of the bucket for which you want to create an access point. Defaults to automatically determined account ID of the AWS provider.
     * 
     */
    @PolicyResourceProperty(name="accountId", flag="unknown_accountId")
    private String value_accountId;
    private boolean unknown_accountId;
    public String accountId() {
        if (!unknown_accountId) return value_accountId;
        throw new UndeferrableValueException("Value 'AccessPoint.accountId' is not present");
    }

    /**
     * Alias of the S3 Access Point.
     * 
     */
    @PolicyResourceProperty(name="alias", flag="unknown_alias")
    private String value_alias;
    private boolean unknown_alias;
    public String alias() {
        if (!unknown_alias) return value_alias;
        throw new UndeferrableValueException("Value 'AccessPoint.alias' is not present");
    }

    /**
     * ARN of the S3 Access Point.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'AccessPoint.arn' is not present");
    }

    /**
     * Name of an AWS Partition S3 General Purpose Bucket or the ARN of S3 on Outposts Bucket that you want to associate this access point with.
     * 
     */
    @PolicyResourceProperty(name="bucket", flag="unknown_bucket")
    private String value_bucket;
    private boolean unknown_bucket;
    public String bucket() {
        if (!unknown_bucket) return value_bucket;
        throw new UndeferrableValueException("Value 'AccessPoint.bucket' is not present");
    }

    /**
     * AWS account ID associated with the S3 bucket associated with this access point.
     * 
     */
    @PolicyResourceProperty(name="bucketAccountId", flag="unknown_bucketAccountId")
    private String value_bucketAccountId;
    private boolean unknown_bucketAccountId;
    public String bucketAccountId() {
        if (!unknown_bucketAccountId) return value_bucketAccountId;
        throw new UndeferrableValueException("Value 'AccessPoint.bucketAccountId' is not present");
    }

    /**
     * DNS domain name of the S3 Access Point in the format _`name`_-_`account_id`_.s3-accesspoint._region_.amazonaws.com.
     * Note: S3 access points only support secure access by HTTPS. HTTP isn&#39;t supported.
     * 
     */
    @PolicyResourceProperty(name="domainName", flag="unknown_domainName")
    private String value_domainName;
    private boolean unknown_domainName;
    public String domainName() {
        if (!unknown_domainName) return value_domainName;
        throw new UndeferrableValueException("Value 'AccessPoint.domainName' is not present");
    }

    /**
     * VPC endpoints for the S3 Access Point.
     * 
     */
    @PolicyResourceProperty(name="endpoints", flag="unknown_endpoints")
    private Map<String,String> value_endpoints;
    private boolean unknown_endpoints;
    public Map<String,String> endpoints() {
        if (!unknown_endpoints) return value_endpoints;
        throw new UndeferrableValueException("Value 'AccessPoint.endpoints' is not present");
    }

    /**
     * Indicates whether this access point currently has a policy that allows public access.
     * 
     */
    @PolicyResourceProperty(name="hasPublicAccessPolicy", flag="unknown_hasPublicAccessPolicy")
    private Boolean value_hasPublicAccessPolicy;
    private boolean unknown_hasPublicAccessPolicy;
    public Boolean hasPublicAccessPolicy() {
        if (!unknown_hasPublicAccessPolicy) return value_hasPublicAccessPolicy;
        throw new UndeferrableValueException("Value 'AccessPoint.hasPublicAccessPolicy' is not present");
    }

    /**
     * Name you want to assign to this access point. See the [AWS documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-access-points.html?icmpid=docs_amazons3_console#access-points-names) for naming conditions.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'AccessPoint.name' is not present");
    }

    /**
     * Indicates whether this access point allows access from the public Internet. Values are `VPC` (the access point doesn&#39;t allow access from the public Internet) and `Internet` (the access point allows access from the public Internet, subject to the access point and bucket access policies).
     * 
     */
    @PolicyResourceProperty(name="networkOrigin", flag="unknown_networkOrigin")
    private String value_networkOrigin;
    private boolean unknown_networkOrigin;
    public String networkOrigin() {
        if (!unknown_networkOrigin) return value_networkOrigin;
        throw new UndeferrableValueException("Value 'AccessPoint.networkOrigin' is not present");
    }

    /**
     * Valid JSON document that specifies the policy that you want to apply to this access point. Removing `policy` from your configuration or setting `policy` to null or an empty string (i.e., `policy = &#34;&#34;`) _will not_ delete the policy since it could have been set by `aws.s3control.AccessPointPolicy`. To remove the `policy`, set it to `&#34;{}&#34;` (an empty JSON document).
     * 
     */
    @PolicyResourceProperty(name="policy", flag="unknown_policy")
    private String value_policy;
    private boolean unknown_policy;
    public String policy() {
        if (!unknown_policy) return value_policy;
        throw new UndeferrableValueException("Value 'AccessPoint.policy' is not present");
    }

    /**
     * Configuration block to manage the `PublicAccessBlock` configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="publicAccessBlockConfiguration", flag="unknown_publicAccessBlockConfiguration")
    private @Nullable AccessPointPublicAccessBlockConfiguration value_publicAccessBlockConfiguration;
    private boolean unknown_publicAccessBlockConfiguration;
    public @Nullable AccessPointPublicAccessBlockConfiguration publicAccessBlockConfiguration() {
        if (!unknown_publicAccessBlockConfiguration) return value_publicAccessBlockConfiguration;
        throw new UndeferrableValueException("Value 'AccessPoint.publicAccessBlockConfiguration' is not present");
    }

    /**
     * Configuration block to restrict access to this access point to requests from the specified Virtual Private Cloud (VPC). Required for S3 on Outposts. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="vpcConfiguration", flag="unknown_vpcConfiguration")
    private @Nullable AccessPointVpcConfiguration value_vpcConfiguration;
    private boolean unknown_vpcConfiguration;
    public @Nullable AccessPointVpcConfiguration vpcConfiguration() {
        if (!unknown_vpcConfiguration) return value_vpcConfiguration;
        throw new UndeferrableValueException("Value 'AccessPoint.vpcConfiguration' is not present");
    }

}
