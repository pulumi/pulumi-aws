// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.acmpca;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.acmpca.inputs.CertificateValidityArgs;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:acmpca/certificate:Certificate")
public final class CertificateArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
     * 
     */
    @PolicyResourceProperty(name="apiPassthrough", flag="unknown_apiPassthrough")
    private String value_apiPassthrough;
    private boolean unknown_apiPassthrough;
    public String apiPassthrough() {
        if (!unknown_apiPassthrough) return value_apiPassthrough;
        throw new UndeferrableValueException("Value 'CertificateArgs.apiPassthrough' is not present");
    }

    /**
     * ARN of the certificate authority.
     * 
     */
    @PolicyResourceProperty(name="certificateAuthorityArn", flag="unknown_certificateAuthorityArn")
    private String value_certificateAuthorityArn;
    private boolean unknown_certificateAuthorityArn;
    public String certificateAuthorityArn() {
        if (!unknown_certificateAuthorityArn) return value_certificateAuthorityArn;
        throw new UndeferrableValueException("Value 'CertificateArgs.certificateAuthorityArn' is not present");
    }

    /**
     * Certificate Signing Request in PEM format.
     * 
     */
    @PolicyResourceProperty(name="certificateSigningRequest", flag="unknown_certificateSigningRequest")
    private String value_certificateSigningRequest;
    private boolean unknown_certificateSigningRequest;
    public String certificateSigningRequest() {
        if (!unknown_certificateSigningRequest) return value_certificateSigningRequest;
        throw new UndeferrableValueException("Value 'CertificateArgs.certificateSigningRequest' is not present");
    }

    /**
     * Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
     * 
     */
    @PolicyResourceProperty(name="signingAlgorithm", flag="unknown_signingAlgorithm")
    private String value_signingAlgorithm;
    private boolean unknown_signingAlgorithm;
    public String signingAlgorithm() {
        if (!unknown_signingAlgorithm) return value_signingAlgorithm;
        throw new UndeferrableValueException("Value 'CertificateArgs.signingAlgorithm' is not present");
    }

    /**
     * Template to use when issuing a certificate.
     * See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
     * 
     */
    @PolicyResourceProperty(name="templateArn", flag="unknown_templateArn")
    private String value_templateArn;
    private boolean unknown_templateArn;
    public String templateArn() {
        if (!unknown_templateArn) return value_templateArn;
        throw new UndeferrableValueException("Value 'CertificateArgs.templateArn' is not present");
    }

    /**
     * Configures end of the validity period for the certificate. See validity block below.
     * 
     */
    @PolicyResourceProperty(name="validity", flag="unknown_validity")
    private CertificateValidityArgs value_validity;
    private boolean unknown_validity;
    public CertificateValidityArgs validity() {
        if (!unknown_validity) return value_validity;
        throw new UndeferrableValueException("Value 'CertificateArgs.validity' is not present");
    }

}
