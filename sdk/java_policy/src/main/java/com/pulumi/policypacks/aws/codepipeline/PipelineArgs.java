// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codepipeline;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.codepipeline.inputs.PipelineArtifactStoreArgs;
import com.pulumi.policypacks.aws.codepipeline.inputs.PipelineStageArgs;
import com.pulumi.policypacks.aws.codepipeline.inputs.PipelineTriggerArgs;
import com.pulumi.policypacks.aws.codepipeline.inputs.PipelineVariableArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:codepipeline/pipeline:Pipeline")
public final class PipelineArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * One or more artifact_store blocks. Artifact stores are documented below.
     * 
     */
    private UndeferrableValue<List<PipelineArtifactStoreArgs>> artifactStores;

    public List<PipelineArtifactStoreArgs> artifactStores() {
        if (artifactStores == null) return null;
        return artifactStores.getValue("PipelineArgs.artifactStores");
    }

    /**
     * The method that the pipeline will use to handle multiple executions. The default mode is `SUPERSEDED`. For value values, refer to the [AWS documentation](https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_PipelineDeclaration.html#CodePipeline-Type-PipelineDeclaration-executionMode).
     * 
     * **Note:** `QUEUED` or `PARALLEL` mode can only be used with V2 pipelines.
     * 
     */
    private UndeferrableValue<String> executionMode;

    public String executionMode() {
        if (executionMode == null) return null;
        return executionMode.getValue("PipelineArgs.executionMode");
    }

    /**
     * The name of the pipeline.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("PipelineArgs.name");
    }

    /**
     * Type of the pipeline. Possible values are: `V1` and `V2`. Default value is `V1`.
     * 
     */
    private UndeferrableValue<String> pipelineType;

    public String pipelineType() {
        if (pipelineType == null) return null;
        return pipelineType.getValue("PipelineArgs.pipelineType");
    }

    /**
     * A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("PipelineArgs.roleArn");
    }

    /**
     * A stage block. Stages are documented below.
     * 
     */
    private UndeferrableValue<List<PipelineStageArgs>> stages;

    public List<PipelineStageArgs> stages() {
        if (stages == null) return null;
        return stages.getValue("PipelineArgs.stages");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("PipelineArgs.tags");
    }

    /**
     * A trigger block. Valid only when `pipeline_type` is `V2`. Triggers are documented below.
     * 
     */
    private UndeferrableValue<List<PipelineTriggerArgs>> triggers;

    public List<PipelineTriggerArgs> triggers() {
        if (triggers == null) return null;
        return triggers.getValue("PipelineArgs.triggers");
    }

    /**
     * A pipeline-level variable block. Valid only when `pipeline_type` is `V2`. Variable are documented below.
     * 
     */
    private UndeferrableValue<List<PipelineVariableArgs>> variables;

    public List<PipelineVariableArgs> variables() {
        if (variables == null) return null;
        return variables.getValue("PipelineArgs.variables");
    }

}
