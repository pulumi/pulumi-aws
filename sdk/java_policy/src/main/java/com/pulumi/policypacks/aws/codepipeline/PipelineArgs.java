// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codepipeline;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.codepipeline.inputs.PipelineArtifactStoreArgs;
import com.pulumi.policypacks.aws.codepipeline.inputs.PipelineStageArgs;
import com.pulumi.policypacks.aws.codepipeline.inputs.PipelineTriggerArgs;
import com.pulumi.policypacks.aws.codepipeline.inputs.PipelineVariableArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:codepipeline/pipeline:Pipeline")
public final class PipelineArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * One or more artifact_store blocks. Artifact stores are documented below.
     * 
     */
    @PolicyResourceProperty(name="artifactStores", flag="unknown_artifactStores")
    private List<PipelineArtifactStoreArgs> value_artifactStores;
    private boolean unknown_artifactStores;
    public List<PipelineArtifactStoreArgs> artifactStores() {
        if (!unknown_artifactStores) return value_artifactStores;
        throw new UndeferrableValueException("Value 'PipelineArgs.artifactStores' is not present");
    }

    /**
     * The method that the pipeline will use to handle multiple executions. The default mode is `SUPERSEDED`. For value values, refer to the [AWS documentation](https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_PipelineDeclaration.html#CodePipeline-Type-PipelineDeclaration-executionMode).
     * 
     * **Note:** `QUEUED` or `PARALLEL` mode can only be used with V2 pipelines.
     * 
     */
    @PolicyResourceProperty(name="executionMode", flag="unknown_executionMode")
    private String value_executionMode;
    private boolean unknown_executionMode;
    public String executionMode() {
        if (!unknown_executionMode) return value_executionMode;
        throw new UndeferrableValueException("Value 'PipelineArgs.executionMode' is not present");
    }

    /**
     * The name of the pipeline.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'PipelineArgs.name' is not present");
    }

    /**
     * Type of the pipeline. Possible values are: `V1` and `V2`. Default value is `V1`.
     * 
     */
    @PolicyResourceProperty(name="pipelineType", flag="unknown_pipelineType")
    private String value_pipelineType;
    private boolean unknown_pipelineType;
    public String pipelineType() {
        if (!unknown_pipelineType) return value_pipelineType;
        throw new UndeferrableValueException("Value 'PipelineArgs.pipelineType' is not present");
    }

    /**
     * A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'PipelineArgs.roleArn' is not present");
    }

    /**
     * A stage block. Stages are documented below.
     * 
     */
    @PolicyResourceProperty(name="stages", flag="unknown_stages")
    private List<PipelineStageArgs> value_stages;
    private boolean unknown_stages;
    public List<PipelineStageArgs> stages() {
        if (!unknown_stages) return value_stages;
        throw new UndeferrableValueException("Value 'PipelineArgs.stages' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'PipelineArgs.tags' is not present");
    }

    /**
     * A trigger block. Valid only when `pipeline_type` is `V2`. Triggers are documented below.
     * 
     */
    @PolicyResourceProperty(name="triggers", flag="unknown_triggers")
    private List<PipelineTriggerArgs> value_triggers;
    private boolean unknown_triggers;
    public List<PipelineTriggerArgs> triggers() {
        if (!unknown_triggers) return value_triggers;
        throw new UndeferrableValueException("Value 'PipelineArgs.triggers' is not present");
    }

    /**
     * A pipeline-level variable block. Valid only when `pipeline_type` is `V2`. Variable are documented below.
     * 
     */
    @PolicyResourceProperty(name="variables", flag="unknown_variables")
    private List<PipelineVariableArgs> value_variables;
    private boolean unknown_variables;
    public List<PipelineVariableArgs> variables() {
        if (!unknown_variables) return value_variables;
        throw new UndeferrableValueException("Value 'PipelineArgs.variables' is not present");
    }

}
