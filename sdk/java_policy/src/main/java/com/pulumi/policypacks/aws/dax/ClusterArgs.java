// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dax;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.dax.inputs.ClusterServerSideEncryptionArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:dax/cluster:Cluster")
public final class ClusterArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * List of Availability Zones in which the
     * nodes will be created
     * 
     */
    private UndeferrableValue<List<String>> availabilityZones;

    public List<String> availabilityZones() {
        if (availabilityZones == null) return null;
        return availabilityZones.getValue("ClusterArgs.availabilityZones");
    }

    /**
     * The type of encryption the
     * cluster&#39;s endpoint should support. Valid values are: `NONE` and `TLS`.
     * Default value is `NONE`.
     * 
     */
    private UndeferrableValue<String> clusterEndpointEncryptionType;

    public String clusterEndpointEncryptionType() {
        if (clusterEndpointEncryptionType == null) return null;
        return clusterEndpointEncryptionType.getValue("ClusterArgs.clusterEndpointEncryptionType");
    }

    /**
     * Group identifier. DAX converts this name to
     * lowercase
     * 
     */
    private UndeferrableValue<String> clusterName;

    public String clusterName() {
        if (clusterName == null) return null;
        return clusterName.getValue("ClusterArgs.clusterName");
    }

    /**
     * Description for the cluster
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("ClusterArgs.description");
    }

    /**
     * A valid Amazon Resource Name (ARN) that identifies
     * an IAM role. At runtime, DAX will assume this role and use the role&#39;s
     * permissions to access DynamoDB on your behalf
     * 
     */
    private UndeferrableValue<String> iamRoleArn;

    public String iamRoleArn() {
        if (iamRoleArn == null) return null;
        return iamRoleArn.getValue("ClusterArgs.iamRoleArn");
    }

    /**
     * Specifies the weekly time range for when
     * maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
     * (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
     * `sun:05:00-sun:09:00`
     * 
     */
    private UndeferrableValue<String> maintenanceWindow;

    public String maintenanceWindow() {
        if (maintenanceWindow == null) return null;
        return maintenanceWindow.getValue("ClusterArgs.maintenanceWindow");
    }

    /**
     * The compute and memory capacity of the nodes. See
     * [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
     * 
     */
    private UndeferrableValue<String> nodeType;

    public String nodeType() {
        if (nodeType == null) return null;
        return nodeType.getValue("ClusterArgs.nodeType");
    }

    /**
     * An Amazon Resource Name (ARN) of an
     * SNS topic to send DAX notifications to. Example:
     * `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
     * 
     */
    private UndeferrableValue<String> notificationTopicArn;

    public String notificationTopicArn() {
        if (notificationTopicArn == null) return null;
        return notificationTopicArn.getValue("ClusterArgs.notificationTopicArn");
    }

    /**
     * Name of the parameter group to associate
     * with this DAX cluster
     * 
     */
    private UndeferrableValue<String> parameterGroupName;

    public String parameterGroupName() {
        if (parameterGroupName == null) return null;
        return parameterGroupName.getValue("ClusterArgs.parameterGroupName");
    }

    /**
     * The number of nodes in the DAX cluster. A
     * replication factor of 1 will create a single-node cluster, without any read
     * replicas
     * 
     */
    private UndeferrableValue<Integer> replicationFactor;

    public Integer replicationFactor() {
        if (replicationFactor == null) return null;
        return replicationFactor.getValue("ClusterArgs.replicationFactor");
    }

    /**
     * One or more VPC security groups associated
     * with the cluster
     * 
     */
    private UndeferrableValue<List<String>> securityGroupIds;

    public List<String> securityGroupIds() {
        if (securityGroupIds == null) return null;
        return securityGroupIds.getValue("ClusterArgs.securityGroupIds");
    }

    /**
     * Encrypt at rest options
     * 
     */
    private UndeferrableValue<ClusterServerSideEncryptionArgs> serverSideEncryption;

    public ClusterServerSideEncryptionArgs serverSideEncryption() {
        if (serverSideEncryption == null) return null;
        return serverSideEncryption.getValue("ClusterArgs.serverSideEncryption");
    }

    /**
     * Name of the subnet group to be used for the
     * cluster
     * 
     */
    private UndeferrableValue<String> subnetGroupName;

    public String subnetGroupName() {
        if (subnetGroupName == null) return null;
        return subnetGroupName.getValue("ClusterArgs.subnetGroupName");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ClusterArgs.tags");
    }

}
