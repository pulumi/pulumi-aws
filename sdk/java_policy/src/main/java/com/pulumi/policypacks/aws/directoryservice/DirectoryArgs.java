// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.directoryservice;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.directoryservice.inputs.DirectoryConnectSettingsArgs;
import com.pulumi.policypacks.aws.directoryservice.inputs.DirectoryVpcSettingsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:directoryservice/directory:Directory")
public final class DirectoryArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The alias for the directory (must be unique amongst all aliases in AWS). Required for `enable_sso`.
     * 
     */
    private UndeferrableValue<String> alias;

    public String alias() {
        if (alias == null) return null;
        return alias.getValue("DirectoryArgs.alias");
    }

    /**
     * Connector related information about the directory. Fields documented below.
     * 
     */
    private UndeferrableValue<DirectoryConnectSettingsArgs> connectSettings;

    public DirectoryConnectSettingsArgs connectSettings() {
        if (connectSettings == null) return null;
        return connectSettings.getValue("DirectoryArgs.connectSettings");
    }

    /**
     * A textual description for the directory.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("DirectoryArgs.description");
    }

    /**
     * The number of domain controllers desired in the directory. Minimum value of `2`. Scaling of domain controllers is only supported for `MicrosoftAD` directories.
     * 
     */
    private UndeferrableValue<Integer> desiredNumberOfDomainControllers;

    public Integer desiredNumberOfDomainControllers() {
        if (desiredNumberOfDomainControllers == null) return null;
        return desiredNumberOfDomainControllers.getValue("DirectoryArgs.desiredNumberOfDomainControllers");
    }

    /**
     * The MicrosoftAD edition (`Standard` or `Enterprise`). Defaults to `Enterprise`.
     * 
     */
    private UndeferrableValue<String> edition;

    public String edition() {
        if (edition == null) return null;
        return edition.getValue("DirectoryArgs.edition");
    }

    /**
     * Whether to enable single-sign on for the directory. Requires `alias`. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> enableSso;

    public Boolean enableSso() {
        if (enableSso == null) return null;
        return enableSso.getValue("DirectoryArgs.enableSso");
    }

    /**
     * The fully qualified name for the directory, such as `corp.example.com`
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("DirectoryArgs.name");
    }

    /**
     * The password for the directory administrator or connector user.
     * 
     */
    private UndeferrableValue<String> password;

    public String password() {
        if (password == null) return null;
        return password.getValue("DirectoryArgs.password");
    }

    /**
     * The short name of the directory, such as `CORP`.
     * 
     */
    private UndeferrableValue<String> shortName;

    public String shortName() {
        if (shortName == null) return null;
        return shortName.getValue("DirectoryArgs.shortName");
    }

    /**
     * (For `SimpleAD` and `ADConnector` types) The size of the directory (`Small` or `Large` are accepted values). `Large` by default.
     * 
     */
    private UndeferrableValue<String> size;

    public String size() {
        if (size == null) return null;
        return size.getValue("DirectoryArgs.size");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DirectoryArgs.tags");
    }

    /**
     * The directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD` are accepted values). Defaults to `SimpleAD`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("DirectoryArgs.type");
    }

    /**
     * VPC related information about the directory. Fields documented below.
     * 
     */
    private UndeferrableValue<DirectoryVpcSettingsArgs> vpcSettings;

    public DirectoryVpcSettingsArgs vpcSettings() {
        if (vpcSettings == null) return null;
        return vpcSettings.getValue("DirectoryArgs.vpcSettings");
    }

}
