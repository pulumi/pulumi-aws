// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter")
public final class LogSubscriptionFilter extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
     * 
     */
    @PolicyResourceProperty(name="destinationArn", flag="unknown_destinationArn")
    private String value_destinationArn;
    private boolean unknown_destinationArn;
    public String destinationArn() {
        if (!unknown_destinationArn) return value_destinationArn;
        throw new UndeferrableValueException("Value 'LogSubscriptionFilter.destinationArn' is not present");
    }

    /**
     * The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are &#34;Random&#34; and &#34;ByLogStream&#34;.
     * 
     */
    @PolicyResourceProperty(name="distribution", flag="unknown_distribution")
    private @Nullable String value_distribution;
    private boolean unknown_distribution;
    public @Nullable String distribution() {
        if (!unknown_distribution) return value_distribution;
        throw new UndeferrableValueException("Value 'LogSubscriptionFilter.distribution' is not present");
    }

    /**
     * A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events. Use empty string `&#34;&#34;` to match everything. For more information, see the [Amazon CloudWatch Logs User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     * 
     */
    @PolicyResourceProperty(name="filterPattern", flag="unknown_filterPattern")
    private String value_filterPattern;
    private boolean unknown_filterPattern;
    public String filterPattern() {
        if (!unknown_filterPattern) return value_filterPattern;
        throw new UndeferrableValueException("Value 'LogSubscriptionFilter.filterPattern' is not present");
    }

    /**
     * The name of the log group to associate the subscription filter with
     * 
     */
    @PolicyResourceProperty(name="logGroup", flag="unknown_logGroup")
    private String value_logGroup;
    private boolean unknown_logGroup;
    public String logGroup() {
        if (!unknown_logGroup) return value_logGroup;
        throw new UndeferrableValueException("Value 'LogSubscriptionFilter.logGroup' is not present");
    }

    /**
     * A name for the subscription filter
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'LogSubscriptionFilter.name' is not present");
    }

    /**
     * The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `aws.lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'LogSubscriptionFilter.roleArn' is not present");
    }

}
