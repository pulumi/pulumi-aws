// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.alb.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.alb.outputs.ListenerRuleConditionHostHeader;
import com.pulumi.policypacks.aws.alb.outputs.ListenerRuleConditionHttpHeader;
import com.pulumi.policypacks.aws.alb.outputs.ListenerRuleConditionHttpRequestMethod;
import com.pulumi.policypacks.aws.alb.outputs.ListenerRuleConditionPathPattern;
import com.pulumi.policypacks.aws.alb.outputs.ListenerRuleConditionQueryString;
import com.pulumi.policypacks.aws.alb.outputs.ListenerRuleConditionSourceIp;
import java.util.List;
import javax.annotation.Nullable;


public final class ListenerRuleCondition {

    /**
     * Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
     * 
     */
    private @Nullable UndeferrableValue<ListenerRuleConditionHostHeader> hostHeader;

    public @Nullable ListenerRuleConditionHostHeader hostHeader() {
        if (hostHeader == null) return null;
        return hostHeader.getValue("ListenerRuleCondition.hostHeader");
    }

    /**
     * HTTP headers to match. HTTP Header block fields documented below.
     * 
     */
    private @Nullable UndeferrableValue<ListenerRuleConditionHttpHeader> httpHeader;

    public @Nullable ListenerRuleConditionHttpHeader httpHeader() {
        if (httpHeader == null) return null;
        return httpHeader.getValue("ListenerRuleCondition.httpHeader");
    }

    /**
     * Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
     * 
     */
    private @Nullable UndeferrableValue<ListenerRuleConditionHttpRequestMethod> httpRequestMethod;

    public @Nullable ListenerRuleConditionHttpRequestMethod httpRequestMethod() {
        if (httpRequestMethod == null) return null;
        return httpRequestMethod.getValue("ListenerRuleCondition.httpRequestMethod");
    }

    /**
     * Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `query_string` condition.
     * 
     */
    private @Nullable UndeferrableValue<ListenerRuleConditionPathPattern> pathPattern;

    public @Nullable ListenerRuleConditionPathPattern pathPattern() {
        if (pathPattern == null) return null;
        return pathPattern.getValue("ListenerRuleCondition.pathPattern");
    }

    /**
     * Query strings to match. Query String block fields documented below.
     * 
     */
    private @Nullable UndeferrableValue<List<ListenerRuleConditionQueryString>> queryStrings;

    public @Nullable List<ListenerRuleConditionQueryString> queryStrings() {
        if (queryStrings == null) return null;
        return queryStrings.getValue("ListenerRuleCondition.queryStrings");
    }

    /**
     * Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `http_header` condition instead.
     * 
     * &gt; **NOTE::** Exactly one of `host_header`, `http_header`, `http_request_method`, `path_pattern`, `query_string` or `source_ip` must be set per condition.
     * 
     */
    private @Nullable UndeferrableValue<ListenerRuleConditionSourceIp> sourceIp;

    public @Nullable ListenerRuleConditionSourceIp sourceIp() {
        if (sourceIp == null) return null;
        return sourceIp.getValue("ListenerRuleCondition.sourceIp");
    }

}
