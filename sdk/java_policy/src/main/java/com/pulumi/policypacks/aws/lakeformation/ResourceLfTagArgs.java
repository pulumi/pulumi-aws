// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lakeformation;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lakeformation.inputs.ResourceLfTagDatabaseArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.ResourceLfTagLfTagArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.ResourceLfTagTableArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.ResourceLfTagTableWithColumnsArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.ResourceLfTagTimeoutsArgs;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lakeformation/resourceLfTag:ResourceLfTag")
public final class ResourceLfTagArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
     * 
     */
    @PolicyResourceProperty(name="catalogId", flag="unknown_catalogId")
    private String value_catalogId;
    private boolean unknown_catalogId;
    public String catalogId() {
        if (!unknown_catalogId) return value_catalogId;
        throw new UndeferrableValueException("Value 'ResourceLfTagArgs.catalogId' is not present");
    }

    /**
     * Configuration block for a database resource. See Database for more details.
     * 
     */
    @PolicyResourceProperty(name="database", flag="unknown_database")
    private ResourceLfTagDatabaseArgs value_database;
    private boolean unknown_database;
    public ResourceLfTagDatabaseArgs database() {
        if (!unknown_database) return value_database;
        throw new UndeferrableValueException("Value 'ResourceLfTagArgs.database' is not present");
    }

    /**
     * Set of LF-tags to attach to the resource. See LF Tag for more details.
     * 
     * Exactly one of the following is required:
     * 
     */
    @PolicyResourceProperty(name="lfTag", flag="unknown_lfTag")
    private ResourceLfTagLfTagArgs value_lfTag;
    private boolean unknown_lfTag;
    public ResourceLfTagLfTagArgs lfTag() {
        if (!unknown_lfTag) return value_lfTag;
        throw new UndeferrableValueException("Value 'ResourceLfTagArgs.lfTag' is not present");
    }

    /**
     * Configuration block for a table resource. See Table for more details.
     * 
     */
    @PolicyResourceProperty(name="table", flag="unknown_table")
    private ResourceLfTagTableArgs value_table;
    private boolean unknown_table;
    public ResourceLfTagTableArgs table() {
        if (!unknown_table) return value_table;
        throw new UndeferrableValueException("Value 'ResourceLfTagArgs.table' is not present");
    }

    /**
     * Configuration block for a table with columns resource. See Table With Columns for more details.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="tableWithColumns", flag="unknown_tableWithColumns")
    private ResourceLfTagTableWithColumnsArgs value_tableWithColumns;
    private boolean unknown_tableWithColumns;
    public ResourceLfTagTableWithColumnsArgs tableWithColumns() {
        if (!unknown_tableWithColumns) return value_tableWithColumns;
        throw new UndeferrableValueException("Value 'ResourceLfTagArgs.tableWithColumns' is not present");
    }

    @PolicyResourceProperty(name="timeouts", flag="unknown_timeouts")
    private ResourceLfTagTimeoutsArgs value_timeouts;
    private boolean unknown_timeouts;
    public ResourceLfTagTimeoutsArgs timeouts() {
        if (!unknown_timeouts) return value_timeouts;
        throw new UndeferrableValueException("Value 'ResourceLfTagArgs.timeouts' is not present");
    }

}
