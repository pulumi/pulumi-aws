// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apprunner;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.apprunner.outputs.ServiceEncryptionConfiguration;
import com.pulumi.policypacks.aws.apprunner.outputs.ServiceHealthCheckConfiguration;
import com.pulumi.policypacks.aws.apprunner.outputs.ServiceInstanceConfiguration;
import com.pulumi.policypacks.aws.apprunner.outputs.ServiceNetworkConfiguration;
import com.pulumi.policypacks.aws.apprunner.outputs.ServiceObservabilityConfiguration;
import com.pulumi.policypacks.aws.apprunner.outputs.ServiceSourceConfiguration;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apprunner/service:Service")
public final class Service extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the App Runner service.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Service.arn' is not present");
    }

    /**
     * ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.
     * 
     */
    @PolicyResourceProperty(name="autoScalingConfigurationArn", flag="unknown_autoScalingConfigurationArn")
    private String value_autoScalingConfigurationArn;
    private boolean unknown_autoScalingConfigurationArn;
    public String autoScalingConfigurationArn() {
        if (!unknown_autoScalingConfigurationArn) return value_autoScalingConfigurationArn;
        throw new UndeferrableValueException("Value 'Service.autoScalingConfigurationArn' is not present");
    }

    /**
     * An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.
     * 
     */
    @PolicyResourceProperty(name="encryptionConfiguration", flag="unknown_encryptionConfiguration")
    private @Nullable ServiceEncryptionConfiguration value_encryptionConfiguration;
    private boolean unknown_encryptionConfiguration;
    public @Nullable ServiceEncryptionConfiguration encryptionConfiguration() {
        if (!unknown_encryptionConfiguration) return value_encryptionConfiguration;
        throw new UndeferrableValueException("Value 'Service.encryptionConfiguration' is not present");
    }

    /**
     * Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.
     * 
     */
    @PolicyResourceProperty(name="healthCheckConfiguration", flag="unknown_healthCheckConfiguration")
    private ServiceHealthCheckConfiguration value_healthCheckConfiguration;
    private boolean unknown_healthCheckConfiguration;
    public ServiceHealthCheckConfiguration healthCheckConfiguration() {
        if (!unknown_healthCheckConfiguration) return value_healthCheckConfiguration;
        throw new UndeferrableValueException("Value 'Service.healthCheckConfiguration' is not present");
    }

    /**
     * The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.
     * 
     */
    @PolicyResourceProperty(name="instanceConfiguration", flag="unknown_instanceConfiguration")
    private ServiceInstanceConfiguration value_instanceConfiguration;
    private boolean unknown_instanceConfiguration;
    public ServiceInstanceConfiguration instanceConfiguration() {
        if (!unknown_instanceConfiguration) return value_instanceConfiguration;
        throw new UndeferrableValueException("Value 'Service.instanceConfiguration' is not present");
    }

    /**
     * Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.
     * 
     */
    @PolicyResourceProperty(name="networkConfiguration", flag="unknown_networkConfiguration")
    private ServiceNetworkConfiguration value_networkConfiguration;
    private boolean unknown_networkConfiguration;
    public ServiceNetworkConfiguration networkConfiguration() {
        if (!unknown_networkConfiguration) return value_networkConfiguration;
        throw new UndeferrableValueException("Value 'Service.networkConfiguration' is not present");
    }

    /**
     * The observability configuration of your service. See Observability Configuration below for more details.
     * 
     */
    @PolicyResourceProperty(name="observabilityConfiguration", flag="unknown_observabilityConfiguration")
    private @Nullable ServiceObservabilityConfiguration value_observabilityConfiguration;
    private boolean unknown_observabilityConfiguration;
    public @Nullable ServiceObservabilityConfiguration observabilityConfiguration() {
        if (!unknown_observabilityConfiguration) return value_observabilityConfiguration;
        throw new UndeferrableValueException("Value 'Service.observabilityConfiguration' is not present");
    }

    /**
     * An alphanumeric ID that App Runner generated for this service. Unique within the AWS Region.
     * 
     */
    @PolicyResourceProperty(name="serviceId", flag="unknown_serviceId")
    private String value_serviceId;
    private boolean unknown_serviceId;
    public String serviceId() {
        if (!unknown_serviceId) return value_serviceId;
        throw new UndeferrableValueException("Value 'Service.serviceId' is not present");
    }

    /**
     * Name of the service.
     * 
     */
    @PolicyResourceProperty(name="serviceName", flag="unknown_serviceName")
    private String value_serviceName;
    private boolean unknown_serviceName;
    public String serviceName() {
        if (!unknown_serviceName) return value_serviceName;
        throw new UndeferrableValueException("Value 'Service.serviceName' is not present");
    }

    /**
     * Subdomain URL that App Runner generated for this service. You can use this URL to access your service web application.
     * 
     */
    @PolicyResourceProperty(name="serviceUrl", flag="unknown_serviceUrl")
    private String value_serviceUrl;
    private boolean unknown_serviceUrl;
    public String serviceUrl() {
        if (!unknown_serviceUrl) return value_serviceUrl;
        throw new UndeferrableValueException("Value 'Service.serviceUrl' is not present");
    }

    /**
     * The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="sourceConfiguration", flag="unknown_sourceConfiguration")
    private ServiceSourceConfiguration value_sourceConfiguration;
    private boolean unknown_sourceConfiguration;
    public ServiceSourceConfiguration sourceConfiguration() {
        if (!unknown_sourceConfiguration) return value_sourceConfiguration;
        throw new UndeferrableValueException("Value 'Service.sourceConfiguration' is not present");
    }

    /**
     * Current state of the App Runner service.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'Service.status' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Service.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Service.tagsAll' is not present");
    }

}
