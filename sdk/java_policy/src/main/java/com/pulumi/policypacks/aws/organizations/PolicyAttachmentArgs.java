// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.organizations;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:organizations/policyAttachment:PolicyAttachment")
public final class PolicyAttachmentArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The unique identifier (ID) of the policy that you want to attach to the target.
     * 
     */
    @PolicyResourceProperty(name="policyId", flag="unknown_policyId")
    private String value_policyId;
    private boolean unknown_policyId;
    public String policyId() {
        if (!unknown_policyId) return value_policyId;
        throw new UndeferrableValueException("Value 'PolicyAttachmentArgs.policyId' is not present");
    }

    /**
     * If set to `true`, destroy will **not** detach the policy and instead just remove the resource from state. This can be useful in situations where the attachment must be preserved to meet the AWS minimum requirement of 1 attached policy.
     * 
     */
    @PolicyResourceProperty(name="skipDestroy", flag="unknown_skipDestroy")
    private Boolean value_skipDestroy;
    private boolean unknown_skipDestroy;
    public Boolean skipDestroy() {
        if (!unknown_skipDestroy) return value_skipDestroy;
        throw new UndeferrableValueException("Value 'PolicyAttachmentArgs.skipDestroy' is not present");
    }

    /**
     * The unique identifier (ID) of the root, organizational unit, or account number that you want to attach the policy to.
     * 
     */
    @PolicyResourceProperty(name="targetId", flag="unknown_targetId")
    private String value_targetId;
    private boolean unknown_targetId;
    public String targetId() {
        if (!unknown_targetId) return value_targetId;
        throw new UndeferrableValueException("Value 'PolicyAttachmentArgs.targetId' is not present");
    }

}
