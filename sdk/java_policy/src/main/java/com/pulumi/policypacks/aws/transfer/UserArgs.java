// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.transfer;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.transfer.inputs.UserHomeDirectoryMappingArgs;
import com.pulumi.policypacks.aws.transfer.inputs.UserPosixProfileArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:transfer/user:User")
public final class UserArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a `/`.  The first item in the path is the name of the home bucket (accessible as `${Transfer:HomeBucket}` in the policy) and the rest is the home directory (accessible as `${Transfer:HomeDirectory}` in the policy). For example, `/example-bucket-1234/username` would set the home bucket to `example-bucket-1234` and the home directory to `username`.
     * 
     */
    private UndeferrableValue<String> homeDirectory;

    public String homeDirectory() {
        if (homeDirectory == null) return null;
        return homeDirectory.getValue("UserArgs.homeDirectory");
    }

    /**
     * Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
     * 
     */
    private UndeferrableValue<List<UserHomeDirectoryMappingArgs>> homeDirectoryMappings;

    public List<UserHomeDirectoryMappingArgs> homeDirectoryMappings() {
        if (homeDirectoryMappings == null) return null;
        return homeDirectoryMappings.getValue("UserArgs.homeDirectoryMappings");
    }

    /**
     * The type of landing directory (folder) you mapped for your users&#39; home directory. Valid values are `PATH` and `LOGICAL`.
     * 
     */
    private UndeferrableValue<String> homeDirectoryType;

    public String homeDirectoryType() {
        if (homeDirectoryType == null) return null;
        return homeDirectoryType.getValue("UserArgs.homeDirectoryType");
    }

    /**
     * An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include `${Transfer:UserName}`, `${Transfer:HomeDirectory}`, and `${Transfer:HomeBucket}`. These are evaluated on-the-fly when navigating the bucket.
     * 
     */
    private UndeferrableValue<String> policy;

    public String policy() {
        if (policy == null) return null;
        return policy.getValue("UserArgs.policy");
    }

    /**
     * Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users&#39; access to your Amazon EFS file systems. See Posix Profile below.
     * 
     */
    private UndeferrableValue<UserPosixProfileArgs> posixProfile;

    public UserPosixProfileArgs posixProfile() {
        if (posixProfile == null) return null;
        return posixProfile.getValue("UserArgs.posixProfile");
    }

    /**
     * Amazon Resource Name (ARN) of an IAM role that allows the service to control your userâ€™s access to your Amazon S3 bucket.
     * 
     */
    private UndeferrableValue<String> role;

    public String role() {
        if (role == null) return null;
        return role.getValue("UserArgs.role");
    }

    /**
     * The Server ID of the Transfer Server (e.g., `s-12345678`)
     * 
     */
    private UndeferrableValue<String> serverId;

    public String serverId() {
        if (serverId == null) return null;
        return serverId.getValue("UserArgs.serverId");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("UserArgs.tags");
    }

    /**
     * The name used for log in to your SFTP server.
     * 
     */
    private UndeferrableValue<String> userName;

    public String userName() {
        if (userName == null) return null;
        return userName.getValue("UserArgs.userName");
    }

}
