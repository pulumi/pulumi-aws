// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dms;

import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.dms.EndpointElasticsearchSettings;
import com.pulumi.policypacks.aws.dms.EndpointKafkaSettings;
import com.pulumi.policypacks.aws.dms.EndpointKinesisSettings;
import com.pulumi.policypacks.aws.dms.EndpointMongodbSettings;
import com.pulumi.policypacks.aws.dms.EndpointPostgresSettings;
import com.pulumi.policypacks.aws.dms.EndpointRedisSettings;
import com.pulumi.policypacks.aws.dms.EndpointRedshiftSettings;
import com.pulumi.policypacks.aws.dms.EndpointS3Settings;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;


@PolicyResourceType(type="aws:dms/endpoint:Endpoint")
public final class Endpoint extends com.pulumi.resources.PolicyResource {

    /**
     * ARN for the certificate.
     * 
     */
    public String certificateArn;



    /**
     * Name of the endpoint database.
     * 
     */
    public String databaseName;



    /**
     * Configuration block for OpenSearch settings. See below.
     * 
     */
    public EndpointElasticsearchSettings elasticsearchSettings;



    /**
     * ARN for the endpoint.
     * 
     */
    public String endpointArn;



    /**
     * Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
     * 
     */
    public String endpointId;



    /**
     * Type of endpoint. Valid values are `source`, `target`.
     * 
     */
    public String endpointType;



    /**
     * Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `aurora-serverless`, `aurora-postgresql-serverless`,`azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`,`redshift-serverless`, `s3`, `sqlserver`, `neptune` ,`sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
     * 
     */
    public String engineName;



    /**
     * Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
     * 
     */
    public String extraConnectionAttributes;



    /**
     * Configuration block for Kafka settings. See below.
     * 
     */
    public EndpointKafkaSettings kafkaSettings;



    /**
     * Configuration block for Kinesis settings. See below.
     * 
     */
    public EndpointKinesisSettings kinesisSettings;



    /**
     * ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kms_key_arn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter `s3_settings.server_side_encryption_kms_key_id`. When `engine_name` is `redshift`, `kms_key_arn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
     * 
     * The following arguments are optional:
     * 
     */
    public String kmsKeyArn;



    /**
     * Configuration block for MongoDB settings. See below.
     * 
     */
    public EndpointMongodbSettings mongodbSettings;



    /**
     * Password to be used to login to the endpoint database.
     * 
     */
    public String password;



    public Boolean pauseReplicationTasks;



    /**
     * Port used by the endpoint database.
     * 
     */
    public Integer port;



    /**
     * Configuration block for Postgres settings. See below.
     * 
     */
    public EndpointPostgresSettings postgresSettings;



    public EndpointRedisSettings redisSettings;



    /**
     * Configuration block for Redshift settings. See below.
     * 
     */
    public EndpointRedshiftSettings redshiftSettings;



    /**
     * (**Deprecated**, use the `aws.dms.S3Endpoint` resource instead) Configuration block for S3 settings. See below.
     * 
     */
    public EndpointS3Settings s3Settings;



    /**
     * ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by `secrets_manager_arn`. The role must allow the `iam:PassRole` action.
     * 
     * &gt; **Note:** You can specify one of two sets of values for these permissions. You can specify the values for this setting and `secrets_manager_arn`. Or you can specify clear-text values for `username`, `password` , `server_name`, and `port`. You can&#39;t specify both.
     * 
     */
    public String secretsManagerAccessRoleArn;



    /**
     * Full ARN, partial ARN, or friendly name of the Secrets Manager secret that contains the endpoint connection details. Supported only when `engine_name` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
     * 
     */
    public String secretsManagerArn;



    /**
     * Host name of the server.
     * 
     */
    public String serverName;



    /**
     * ARN used by the service access IAM role for dynamodb endpoints.
     * 
     */
    public String serviceAccessRole;



    /**
     * SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
     * 
     */
    public String sslMode;



    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Map<String,String> tags;



    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Map<String,String> tagsAll;



    /**
     * User name to be used to login to the endpoint database.
     * 
     */
    public String username;



}
