// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.ec2.inputs.FleetSpotOptionsMaintenanceStrategiesArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class FleetSpotOptionsArgs {

    /**
     * How to allocate the target capacity across the Spot pools. Valid values: `diversified`, `lowestPrice`, `capacity-optimized`, `capacity-optimized-prioritized` and `price-capacity-optimized`. Default: `lowestPrice`.
     * 
     */
    private UndeferrableValue<String> allocationStrategy;

    public String allocationStrategy() {
        if (allocationStrategy == null) return null;
        return allocationStrategy.getValue("FleetSpotOptionsArgs.allocationStrategy");
    }

    /**
     * Behavior when a Spot Instance is interrupted. Valid values: `hibernate`, `stop`, `terminate`. Default: `terminate`.
     * 
     */
    private UndeferrableValue<String> instanceInterruptionBehavior;

    public String instanceInterruptionBehavior() {
        if (instanceInterruptionBehavior == null) return null;
        return instanceInterruptionBehavior.getValue("FleetSpotOptionsArgs.instanceInterruptionBehavior");
    }

    /**
     * Number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot `allocation_strategy` is set to `lowestPrice`. Default: `1`.
     * 
     */
    private UndeferrableValue<Integer> instancePoolsToUseCount;

    public Integer instancePoolsToUseCount() {
        if (instancePoolsToUseCount == null) return null;
        return instancePoolsToUseCount.getValue("FleetSpotOptionsArgs.instancePoolsToUseCount");
    }

    /**
     * Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
     * 
     */
    private UndeferrableValue<FleetSpotOptionsMaintenanceStrategiesArgs> maintenanceStrategies;

    public FleetSpotOptionsMaintenanceStrategiesArgs maintenanceStrategies() {
        if (maintenanceStrategies == null) return null;
        return maintenanceStrategies.getValue("FleetSpotOptionsArgs.maintenanceStrategies");
    }

    /**
     * The maximum amount per hour for Spot Instances that you&#39;re willing to pay.
     * 
     */
    private UndeferrableValue<String> maxTotalPrice;

    public String maxTotalPrice() {
        if (maxTotalPrice == null) return null;
        return maxTotalPrice.getValue("FleetSpotOptionsArgs.maxTotalPrice");
    }

    /**
     * The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type `instant`.
     * 
     */
    private UndeferrableValue<Integer> minTargetCapacity;

    public Integer minTargetCapacity() {
        if (minTargetCapacity == null) return null;
        return minTargetCapacity.getValue("FleetSpotOptionsArgs.minTargetCapacity");
    }

    /**
     * Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type `instant`.
     * 
     */
    private UndeferrableValue<Boolean> singleAvailabilityZone;

    public Boolean singleAvailabilityZone() {
        if (singleAvailabilityZone == null) return null;
        return singleAvailabilityZone.getValue("FleetSpotOptionsArgs.singleAvailabilityZone");
    }

    /**
     * Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type `instant`.
     * 
     */
    private UndeferrableValue<Boolean> singleInstanceType;

    public Boolean singleInstanceType() {
        if (singleInstanceType == null) return null;
        return singleInstanceType.getValue("FleetSpotOptionsArgs.singleInstanceType");
    }

}
