// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appmesh.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class VirtualNodeSpecListenerHealthCheckArgs {

    /**
     * Number of consecutive successful health checks that must occur before declaring listener healthy.
     * 
     */
    private UndeferrableValue<Integer> healthyThreshold;

    public Integer healthyThreshold() {
        if (healthyThreshold == null) return null;
        return healthyThreshold.getValue("VirtualNodeSpecListenerHealthCheckArgs.healthyThreshold");
    }

    /**
     * Time period in milliseconds between each health check execution.
     * 
     */
    private UndeferrableValue<Integer> intervalMillis;

    public Integer intervalMillis() {
        if (intervalMillis == null) return null;
        return intervalMillis.getValue("VirtualNodeSpecListenerHealthCheckArgs.intervalMillis");
    }

    /**
     * Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
     * 
     */
    private UndeferrableValue<String> path;

    public String path() {
        if (path == null) return null;
        return path.getValue("VirtualNodeSpecListenerHealthCheckArgs.path");
    }

    /**
     * Destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("VirtualNodeSpecListenerHealthCheckArgs.port");
    }

    /**
     * Protocol for the health check request. Valid values are `http`, `http2`, `tcp` and `grpc`.
     * 
     */
    private UndeferrableValue<String> protocol;

    public String protocol() {
        if (protocol == null) return null;
        return protocol.getValue("VirtualNodeSpecListenerHealthCheckArgs.protocol");
    }

    /**
     * Amount of time to wait when receiving a response from the health check, in milliseconds.
     * 
     */
    private UndeferrableValue<Integer> timeoutMillis;

    public Integer timeoutMillis() {
        if (timeoutMillis == null) return null;
        return timeoutMillis.getValue("VirtualNodeSpecListenerHealthCheckArgs.timeoutMillis");
    }

    /**
     * Number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
     * 
     */
    private UndeferrableValue<Integer> unhealthyThreshold;

    public Integer unhealthyThreshold() {
        if (unhealthyThreshold == null) return null;
        return unhealthyThreshold.getValue("VirtualNodeSpecListenerHealthCheckArgs.unhealthyThreshold");
    }

}
