// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.route53;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:route53/healthCheck:HealthCheck")
public final class HealthCheck extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) of the Health Check.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'HealthCheck.arn' is not present");
    }

    /**
     * The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
     * 
     */
    @PolicyResourceProperty(name="childHealthThreshold", flag="unknown_childHealthThreshold")
    private @Nullable Integer value_childHealthThreshold;
    private boolean unknown_childHealthThreshold;
    public @Nullable Integer childHealthThreshold() {
        if (!unknown_childHealthThreshold) return value_childHealthThreshold;
        throw new UndeferrableValueException("Value 'HealthCheck.childHealthThreshold' is not present");
    }

    /**
     * For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
     * 
     */
    @PolicyResourceProperty(name="childHealthchecks", flag="unknown_childHealthchecks")
    private @Nullable List<String> value_childHealthchecks;
    private boolean unknown_childHealthchecks;
    public @Nullable List<String> childHealthchecks() {
        if (!unknown_childHealthchecks) return value_childHealthchecks;
        throw new UndeferrableValueException("Value 'HealthCheck.childHealthchecks' is not present");
    }

    /**
     * The name of the CloudWatch alarm.
     * 
     */
    @PolicyResourceProperty(name="cloudwatchAlarmName", flag="unknown_cloudwatchAlarmName")
    private @Nullable String value_cloudwatchAlarmName;
    private boolean unknown_cloudwatchAlarmName;
    public @Nullable String cloudwatchAlarmName() {
        if (!unknown_cloudwatchAlarmName) return value_cloudwatchAlarmName;
        throw new UndeferrableValueException("Value 'HealthCheck.cloudwatchAlarmName' is not present");
    }

    /**
     * The region that the CloudWatch alarm was created in.
     * 
     */
    @PolicyResourceProperty(name="cloudwatchAlarmRegion", flag="unknown_cloudwatchAlarmRegion")
    private @Nullable String value_cloudwatchAlarmRegion;
    private boolean unknown_cloudwatchAlarmRegion;
    public @Nullable String cloudwatchAlarmRegion() {
        if (!unknown_cloudwatchAlarmRegion) return value_cloudwatchAlarmRegion;
        throw new UndeferrableValueException("Value 'HealthCheck.cloudwatchAlarmRegion' is not present");
    }

    /**
     * A boolean value that stops Route 53 from performing health checks. When set to true, Route 53 will do the following depending on the type of health check:
     * * For health checks that check the health of endpoints, Route53 stops submitting requests to your application, server, or other resource.
     * * For calculated health checks, Route 53 stops aggregating the status of the referenced health checks.
     * * For health checks that monitor CloudWatch alarms, Route 53 stops monitoring the corresponding CloudWatch metrics.
     * 
     * &gt; **Note:** After you disable a health check, Route 53 considers the status of the health check to always be healthy. If you configured DNS failover, Route 53 continues to route traffic to the corresponding resources. If you want to stop routing traffic to a resource, change the value of `invert_healthcheck`.
     * 
     */
    @PolicyResourceProperty(name="disabled", flag="unknown_disabled")
    private @Nullable Boolean value_disabled;
    private boolean unknown_disabled;
    public @Nullable Boolean disabled() {
        if (!unknown_disabled) return value_disabled;
        throw new UndeferrableValueException("Value 'HealthCheck.disabled' is not present");
    }

    /**
     * A boolean value that indicates whether Route53 should send the `fqdn` to the endpoint when performing the health check. This defaults to AWS&#39; defaults: when the `type` is &#34;HTTPS&#34; `enable_sni` defaults to `true`, when `type` is anything else `enable_sni` defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="enableSni", flag="unknown_enableSni")
    private Boolean value_enableSni;
    private boolean unknown_enableSni;
    public Boolean enableSni() {
        if (!unknown_enableSni) return value_enableSni;
        throw new UndeferrableValueException("Value 'HealthCheck.enableSni' is not present");
    }

    /**
     * The number of consecutive health checks that an endpoint must pass or fail.
     * 
     */
    @PolicyResourceProperty(name="failureThreshold", flag="unknown_failureThreshold")
    private Integer value_failureThreshold;
    private boolean unknown_failureThreshold;
    public Integer failureThreshold() {
        if (!unknown_failureThreshold) return value_failureThreshold;
        throw new UndeferrableValueException("Value 'HealthCheck.failureThreshold' is not present");
    }

    /**
     * The fully qualified domain name of the endpoint to be checked. If a value is set for `ip_address`, the value set for `fqdn` will be passed in the `Host` header.
     * 
     */
    @PolicyResourceProperty(name="fqdn", flag="unknown_fqdn")
    private @Nullable String value_fqdn;
    private boolean unknown_fqdn;
    public @Nullable String fqdn() {
        if (!unknown_fqdn) return value_fqdn;
        throw new UndeferrableValueException("Value 'HealthCheck.fqdn' is not present");
    }

    /**
     * The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are `Healthy` , `Unhealthy` and `LastKnownStatus`.
     * 
     */
    @PolicyResourceProperty(name="insufficientDataHealthStatus", flag="unknown_insufficientDataHealthStatus")
    private @Nullable String value_insufficientDataHealthStatus;
    private boolean unknown_insufficientDataHealthStatus;
    public @Nullable String insufficientDataHealthStatus() {
        if (!unknown_insufficientDataHealthStatus) return value_insufficientDataHealthStatus;
        throw new UndeferrableValueException("Value 'HealthCheck.insufficientDataHealthStatus' is not present");
    }

    /**
     * A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
     * 
     */
    @PolicyResourceProperty(name="invertHealthcheck", flag="unknown_invertHealthcheck")
    private @Nullable Boolean value_invertHealthcheck;
    private boolean unknown_invertHealthcheck;
    public @Nullable Boolean invertHealthcheck() {
        if (!unknown_invertHealthcheck) return value_invertHealthcheck;
        throw new UndeferrableValueException("Value 'HealthCheck.invertHealthcheck' is not present");
    }

    /**
     * The IP address of the endpoint to be checked.
     * 
     */
    @PolicyResourceProperty(name="ipAddress", flag="unknown_ipAddress")
    private @Nullable String value_ipAddress;
    private boolean unknown_ipAddress;
    public @Nullable String ipAddress() {
        if (!unknown_ipAddress) return value_ipAddress;
        throw new UndeferrableValueException("Value 'HealthCheck.ipAddress' is not present");
    }

    /**
     * A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
     * 
     */
    @PolicyResourceProperty(name="measureLatency", flag="unknown_measureLatency")
    private @Nullable Boolean value_measureLatency;
    private boolean unknown_measureLatency;
    public @Nullable Boolean measureLatency() {
        if (!unknown_measureLatency) return value_measureLatency;
        throw new UndeferrableValueException("Value 'HealthCheck.measureLatency' is not present");
    }

    /**
     * The port of the endpoint to be checked.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private @Nullable Integer value_port;
    private boolean unknown_port;
    public @Nullable Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'HealthCheck.port' is not present");
    }

    /**
     * This is a reference name used in Caller Reference
     * (helpful for identifying single health_check set amongst others)
     * 
     */
    @PolicyResourceProperty(name="referenceName", flag="unknown_referenceName")
    private @Nullable String value_referenceName;
    private boolean unknown_referenceName;
    public @Nullable String referenceName() {
        if (!unknown_referenceName) return value_referenceName;
        throw new UndeferrableValueException("Value 'HealthCheck.referenceName' is not present");
    }

    /**
     * A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
     * 
     */
    @PolicyResourceProperty(name="regions", flag="unknown_regions")
    private @Nullable List<String> value_regions;
    private boolean unknown_regions;
    public @Nullable List<String> regions() {
        if (!unknown_regions) return value_regions;
        throw new UndeferrableValueException("Value 'HealthCheck.regions' is not present");
    }

    /**
     * The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
     * 
     */
    @PolicyResourceProperty(name="requestInterval", flag="unknown_requestInterval")
    private @Nullable Integer value_requestInterval;
    private boolean unknown_requestInterval;
    public @Nullable Integer requestInterval() {
        if (!unknown_requestInterval) return value_requestInterval;
        throw new UndeferrableValueException("Value 'HealthCheck.requestInterval' is not present");
    }

    /**
     * The path that you want Amazon Route 53 to request when performing health checks.
     * 
     */
    @PolicyResourceProperty(name="resourcePath", flag="unknown_resourcePath")
    private @Nullable String value_resourcePath;
    private boolean unknown_resourcePath;
    public @Nullable String resourcePath() {
        if (!unknown_resourcePath) return value_resourcePath;
        throw new UndeferrableValueException("Value 'HealthCheck.resourcePath' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) for the Route 53 Application Recovery Controller routing control. This is used when health check type is `RECOVERY_CONTROL`
     * 
     */
    @PolicyResourceProperty(name="routingControlArn", flag="unknown_routingControlArn")
    private @Nullable String value_routingControlArn;
    private boolean unknown_routingControlArn;
    public @Nullable String routingControlArn() {
        if (!unknown_routingControlArn) return value_routingControlArn;
        throw new UndeferrableValueException("Value 'HealthCheck.routingControlArn' is not present");
    }

    /**
     * String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with `HTTP_STR_MATCH` and `HTTPS_STR_MATCH`.
     * 
     */
    @PolicyResourceProperty(name="searchString", flag="unknown_searchString")
    private @Nullable String value_searchString;
    private boolean unknown_searchString;
    public @Nullable String searchString() {
        if (!unknown_searchString) return value_searchString;
        throw new UndeferrableValueException("Value 'HealthCheck.searchString' is not present");
    }

    /**
     * A map of tags to assign to the health check. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'HealthCheck.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'HealthCheck.tagsAll' is not present");
    }

    /**
     * Map of arbitrary keys and values that, when changed, will trigger an in-place update of the CloudWatch alarm arguments. Use this argument to synchronize the health check when an alarm is changed. See example above.
     * 
     */
    @PolicyResourceProperty(name="triggers", flag="unknown_triggers")
    private Map<String,String> value_triggers;
    private boolean unknown_triggers;
    public Map<String,String> triggers() {
        if (!unknown_triggers) return value_triggers;
        throw new UndeferrableValueException("Value 'HealthCheck.triggers' is not present");
    }

    /**
     * The protocol to use when performing health checks. Valid values are `HTTP`, `HTTPS`, `HTTP_STR_MATCH`, `HTTPS_STR_MATCH`, `TCP`, `CALCULATED`, `CLOUDWATCH_METRIC` and `RECOVERY_CONTROL`.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'HealthCheck.type' is not present");
    }

}
