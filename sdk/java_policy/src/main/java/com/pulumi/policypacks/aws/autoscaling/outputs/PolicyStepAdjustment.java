// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.autoscaling.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class PolicyStepAdjustment {

    /**
     * Lower bound for the
     * difference between the alarm threshold and the CloudWatch metric.
     * Without a value, AWS will treat this bound as negative infinity.
     * 
     */
    @PolicyResourceProperty(name="metricIntervalLowerBound", flag="unknown_metricIntervalLowerBound")
    private @Nullable String value_metricIntervalLowerBound;
    private boolean unknown_metricIntervalLowerBound;
    public @Nullable String metricIntervalLowerBound() {
        if (!unknown_metricIntervalLowerBound) return value_metricIntervalLowerBound;
        throw new UndeferrableValueException("Value 'PolicyStepAdjustment.metricIntervalLowerBound' is not present");
    }

    /**
     * Upper bound for the
     * difference between the alarm threshold and the CloudWatch metric.
     * Without a value, AWS will treat this bound as positive infinity. The upper bound
     * must be greater than the lower bound.
     * 
     * Notice the bounds are **relative** to the alarm threshold, meaning that the starting point is not 0%, but the alarm threshold. Check the official [docs](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-steps) for a detailed example.
     * 
     * The following arguments are only available to &#34;TargetTrackingScaling&#34; type policies:
     * 
     */
    @PolicyResourceProperty(name="metricIntervalUpperBound", flag="unknown_metricIntervalUpperBound")
    private @Nullable String value_metricIntervalUpperBound;
    private boolean unknown_metricIntervalUpperBound;
    public @Nullable String metricIntervalUpperBound() {
        if (!unknown_metricIntervalUpperBound) return value_metricIntervalUpperBound;
        throw new UndeferrableValueException("Value 'PolicyStepAdjustment.metricIntervalUpperBound' is not present");
    }

    /**
     * Number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     * 
     */
    @PolicyResourceProperty(name="scalingAdjustment", flag="unknown_scalingAdjustment")
    private Integer value_scalingAdjustment;
    private boolean unknown_scalingAdjustment;
    public Integer scalingAdjustment() {
        if (!unknown_scalingAdjustment) return value_scalingAdjustment;
        throw new UndeferrableValueException("Value 'PolicyStepAdjustment.scalingAdjustment' is not present");
    }

}
