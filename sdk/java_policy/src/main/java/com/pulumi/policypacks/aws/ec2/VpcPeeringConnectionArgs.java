// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.inputs.VpcPeeringConnectionAccepterArgs;
import com.pulumi.policypacks.aws.ec2.inputs.VpcPeeringConnectionRequesterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/vpcPeeringConnection:VpcPeeringConnection")
public final class VpcPeeringConnectionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     * 
     */
    private UndeferrableValue<VpcPeeringConnectionAccepterArgs> accepter;

    public VpcPeeringConnectionAccepterArgs accepter() {
        if (accepter == null) return null;
        return accepter.getValue("VpcPeeringConnectionArgs.accepter");
    }

    /**
     * Accept the peering (both VPCs need to be in the same AWS account and region).
     * 
     */
    private UndeferrableValue<Boolean> autoAccept;

    public Boolean autoAccept() {
        if (autoAccept == null) return null;
        return autoAccept.getValue("VpcPeeringConnectionArgs.autoAccept");
    }

    /**
     * The AWS account ID of the target peer VPC.
     * Defaults to the account ID the [AWS provider][1] is currently connected to, so must be managed if connecting cross-account.
     * 
     */
    private UndeferrableValue<String> peerOwnerId;

    public String peerOwnerId() {
        if (peerOwnerId == null) return null;
        return peerOwnerId.getValue("VpcPeeringConnectionArgs.peerOwnerId");
    }

    /**
     * The region of the accepter VPC of the VPC Peering Connection. `auto_accept` must be `false`,
     * and use the `aws.ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
     * 
     */
    private UndeferrableValue<String> peerRegion;

    public String peerRegion() {
        if (peerRegion == null) return null;
        return peerRegion.getValue("VpcPeeringConnectionArgs.peerRegion");
    }

    /**
     * The ID of the target VPC with which you are creating the VPC Peering Connection.
     * 
     */
    private UndeferrableValue<String> peerVpcId;

    public String peerVpcId() {
        if (peerVpcId == null) return null;
        return peerVpcId.getValue("VpcPeeringConnectionArgs.peerVpcId");
    }

    /**
     * A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     * 
     */
    private UndeferrableValue<VpcPeeringConnectionRequesterArgs> requester;

    public VpcPeeringConnectionRequesterArgs requester() {
        if (requester == null) return null;
        return requester.getValue("VpcPeeringConnectionArgs.requester");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("VpcPeeringConnectionArgs.tags");
    }

    /**
     * The ID of the requester VPC.
     * 
     */
    private UndeferrableValue<String> vpcId;

    public String vpcId() {
        if (vpcId == null) return null;
        return vpcId.getValue("VpcPeeringConnectionArgs.vpcId");
    }

}
