// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.inputs.VpcPeeringConnectionAccepterArgs;
import com.pulumi.policypacks.aws.ec2.inputs.VpcPeeringConnectionRequesterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/vpcPeeringConnection:VpcPeeringConnection")
public final class VpcPeeringConnectionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     * 
     */
    @PolicyResourceProperty(name="accepter", flag="unknown_accepter")
    private VpcPeeringConnectionAccepterArgs value_accepter;
    private boolean unknown_accepter;
    public VpcPeeringConnectionAccepterArgs accepter() {
        if (!unknown_accepter) return value_accepter;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionArgs.accepter' is not present");
    }

    /**
     * Accept the peering (both VPCs need to be in the same AWS account and region).
     * 
     */
    @PolicyResourceProperty(name="autoAccept", flag="unknown_autoAccept")
    private Boolean value_autoAccept;
    private boolean unknown_autoAccept;
    public Boolean autoAccept() {
        if (!unknown_autoAccept) return value_autoAccept;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionArgs.autoAccept' is not present");
    }

    /**
     * The AWS account ID of the target peer VPC.
     * Defaults to the account ID the [AWS provider][1] is currently connected to, so must be managed if connecting cross-account.
     * 
     */
    @PolicyResourceProperty(name="peerOwnerId", flag="unknown_peerOwnerId")
    private String value_peerOwnerId;
    private boolean unknown_peerOwnerId;
    public String peerOwnerId() {
        if (!unknown_peerOwnerId) return value_peerOwnerId;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionArgs.peerOwnerId' is not present");
    }

    /**
     * The region of the accepter VPC of the VPC Peering Connection. `auto_accept` must be `false`,
     * and use the `aws.ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
     * 
     */
    @PolicyResourceProperty(name="peerRegion", flag="unknown_peerRegion")
    private String value_peerRegion;
    private boolean unknown_peerRegion;
    public String peerRegion() {
        if (!unknown_peerRegion) return value_peerRegion;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionArgs.peerRegion' is not present");
    }

    /**
     * The ID of the target VPC with which you are creating the VPC Peering Connection.
     * 
     */
    @PolicyResourceProperty(name="peerVpcId", flag="unknown_peerVpcId")
    private String value_peerVpcId;
    private boolean unknown_peerVpcId;
    public String peerVpcId() {
        if (!unknown_peerVpcId) return value_peerVpcId;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionArgs.peerVpcId' is not present");
    }

    /**
     * A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     * 
     */
    @PolicyResourceProperty(name="requester", flag="unknown_requester")
    private VpcPeeringConnectionRequesterArgs value_requester;
    private boolean unknown_requester;
    public VpcPeeringConnectionRequesterArgs requester() {
        if (!unknown_requester) return value_requester;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionArgs.requester' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionArgs.tags' is not present");
    }

    /**
     * The ID of the requester VPC.
     * 
     */
    @PolicyResourceProperty(name="vpcId", flag="unknown_vpcId")
    private String value_vpcId;
    private boolean unknown_vpcId;
    public String vpcId() {
        if (!unknown_vpcId) return value_vpcId;
        throw new UndeferrableValueException("Value 'VpcPeeringConnectionArgs.vpcId' is not present");
    }

}
