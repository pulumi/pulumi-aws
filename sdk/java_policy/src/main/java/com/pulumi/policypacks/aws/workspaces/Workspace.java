// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.workspaces;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.workspaces.outputs.WorkspaceWorkspaceProperties;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:workspaces/workspace:Workspace")
public final class Workspace extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ID of the bundle for the WorkSpace.
     * 
     */
    @PolicyResourceProperty(name="bundleId", flag="unknown_bundleId")
    private String value_bundleId;
    private boolean unknown_bundleId;
    public String bundleId() {
        if (!unknown_bundleId) return value_bundleId;
        throw new UndeferrableValueException("Value 'Workspace.bundleId' is not present");
    }

    /**
     * The name of the WorkSpace, as seen by the operating system.
     * 
     */
    @PolicyResourceProperty(name="computerName", flag="unknown_computerName")
    private String value_computerName;
    private boolean unknown_computerName;
    public String computerName() {
        if (!unknown_computerName) return value_computerName;
        throw new UndeferrableValueException("Value 'Workspace.computerName' is not present");
    }

    /**
     * The ID of the directory for the WorkSpace.
     * 
     */
    @PolicyResourceProperty(name="directoryId", flag="unknown_directoryId")
    private String value_directoryId;
    private boolean unknown_directoryId;
    public String directoryId() {
        if (!unknown_directoryId) return value_directoryId;
        throw new UndeferrableValueException("Value 'Workspace.directoryId' is not present");
    }

    /**
     * The IP address of the WorkSpace.
     * 
     */
    @PolicyResourceProperty(name="ipAddress", flag="unknown_ipAddress")
    private String value_ipAddress;
    private boolean unknown_ipAddress;
    public String ipAddress() {
        if (!unknown_ipAddress) return value_ipAddress;
        throw new UndeferrableValueException("Value 'Workspace.ipAddress' is not present");
    }

    /**
     * Indicates whether the data stored on the root volume is encrypted.
     * 
     */
    @PolicyResourceProperty(name="rootVolumeEncryptionEnabled", flag="unknown_rootVolumeEncryptionEnabled")
    private @Nullable Boolean value_rootVolumeEncryptionEnabled;
    private boolean unknown_rootVolumeEncryptionEnabled;
    public @Nullable Boolean rootVolumeEncryptionEnabled() {
        if (!unknown_rootVolumeEncryptionEnabled) return value_rootVolumeEncryptionEnabled;
        throw new UndeferrableValueException("Value 'Workspace.rootVolumeEncryptionEnabled' is not present");
    }

    /**
     * The operational state of the WorkSpace.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private String value_state;
    private boolean unknown_state;
    public String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'Workspace.state' is not present");
    }

    /**
     * The tags for the WorkSpace. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Workspace.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Workspace.tagsAll' is not present");
    }

    /**
     * The user name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace.
     * 
     */
    @PolicyResourceProperty(name="userName", flag="unknown_userName")
    private String value_userName;
    private boolean unknown_userName;
    public String userName() {
        if (!unknown_userName) return value_userName;
        throw new UndeferrableValueException("Value 'Workspace.userName' is not present");
    }

    /**
     * Indicates whether the data stored on the user volume is encrypted.
     * 
     */
    @PolicyResourceProperty(name="userVolumeEncryptionEnabled", flag="unknown_userVolumeEncryptionEnabled")
    private @Nullable Boolean value_userVolumeEncryptionEnabled;
    private boolean unknown_userVolumeEncryptionEnabled;
    public @Nullable Boolean userVolumeEncryptionEnabled() {
        if (!unknown_userVolumeEncryptionEnabled) return value_userVolumeEncryptionEnabled;
        throw new UndeferrableValueException("Value 'Workspace.userVolumeEncryptionEnabled' is not present");
    }

    /**
     * The ARN of a symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.
     * 
     */
    @PolicyResourceProperty(name="volumeEncryptionKey", flag="unknown_volumeEncryptionKey")
    private @Nullable String value_volumeEncryptionKey;
    private boolean unknown_volumeEncryptionKey;
    public @Nullable String volumeEncryptionKey() {
        if (!unknown_volumeEncryptionKey) return value_volumeEncryptionKey;
        throw new UndeferrableValueException("Value 'Workspace.volumeEncryptionKey' is not present");
    }

    /**
     * The WorkSpace properties.
     * 
     */
    @PolicyResourceProperty(name="workspaceProperties", flag="unknown_workspaceProperties")
    private WorkspaceWorkspaceProperties value_workspaceProperties;
    private boolean unknown_workspaceProperties;
    public WorkspaceWorkspaceProperties workspaceProperties() {
        if (!unknown_workspaceProperties) return value_workspaceProperties;
        throw new UndeferrableValueException("Value 'Workspace.workspaceProperties' is not present");
    }

}
