// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appsync;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.appsync.inputs.ResolverCachingConfigArgs;
import com.pulumi.policypacks.aws.appsync.inputs.ResolverPipelineConfigArgs;
import com.pulumi.policypacks.aws.appsync.inputs.ResolverRuntimeArgs;
import com.pulumi.policypacks.aws.appsync.inputs.ResolverSyncConfigArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:appsync/resolver:Resolver")
public final class ResolverArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * API ID for the GraphQL API.
     * 
     */
    private UndeferrableValue<String> apiId;

    public String apiId() {
        if (apiId == null) return null;
        return apiId.getValue("ResolverArgs.apiId");
    }

    /**
     * The Caching Config. See Caching Config.
     * 
     */
    private UndeferrableValue<ResolverCachingConfigArgs> cachingConfig;

    public ResolverCachingConfigArgs cachingConfig() {
        if (cachingConfig == null) return null;
        return cachingConfig.getValue("ResolverArgs.cachingConfig");
    }

    /**
     * The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
     * 
     */
    private UndeferrableValue<String> code;

    public String code() {
        if (code == null) return null;
        return code.getValue("ResolverArgs.code");
    }

    /**
     * Data source name.
     * 
     */
    private UndeferrableValue<String> dataSource;

    public String dataSource() {
        if (dataSource == null) return null;
        return dataSource.getValue("ResolverArgs.dataSource");
    }

    /**
     * Field name from the schema defined in the GraphQL API.
     * 
     */
    private UndeferrableValue<String> field;

    public String field() {
        if (field == null) return null;
        return field.getValue("ResolverArgs.field");
    }

    /**
     * Resolver type. Valid values are `UNIT` and `PIPELINE`.
     * 
     */
    private UndeferrableValue<String> kind;

    public String kind() {
        if (kind == null) return null;
        return kind.getValue("ResolverArgs.kind");
    }

    /**
     * Maximum batching size for a resolver. Valid values are between `0` and `2000`.
     * 
     */
    private UndeferrableValue<Integer> maxBatchSize;

    public Integer maxBatchSize() {
        if (maxBatchSize == null) return null;
        return maxBatchSize.getValue("ResolverArgs.maxBatchSize");
    }

    /**
     * The caching configuration for the resolver. See Pipeline Config.
     * 
     */
    private UndeferrableValue<ResolverPipelineConfigArgs> pipelineConfig;

    public ResolverPipelineConfigArgs pipelineConfig() {
        if (pipelineConfig == null) return null;
        return pipelineConfig.getValue("ResolverArgs.pipelineConfig");
    }

    /**
     * Request mapping template for UNIT resolver or &#39;before mapping template&#39; for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    private UndeferrableValue<String> requestTemplate;

    public String requestTemplate() {
        if (requestTemplate == null) return null;
        return requestTemplate.getValue("ResolverArgs.requestTemplate");
    }

    /**
     * Response mapping template for UNIT resolver or &#39;after mapping template&#39; for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    private UndeferrableValue<String> responseTemplate;

    public String responseTemplate() {
        if (responseTemplate == null) return null;
        return responseTemplate.getValue("ResolverArgs.responseTemplate");
    }

    /**
     * Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
     * 
     */
    private UndeferrableValue<ResolverRuntimeArgs> runtime;

    public ResolverRuntimeArgs runtime() {
        if (runtime == null) return null;
        return runtime.getValue("ResolverArgs.runtime");
    }

    /**
     * Describes a Sync configuration for a resolver. See Sync Config.
     * 
     */
    private UndeferrableValue<ResolverSyncConfigArgs> syncConfig;

    public ResolverSyncConfigArgs syncConfig() {
        if (syncConfig == null) return null;
        return syncConfig.getValue("ResolverArgs.syncConfig");
    }

    /**
     * Type name from the schema defined in the GraphQL API.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("ResolverArgs.type");
    }

}
