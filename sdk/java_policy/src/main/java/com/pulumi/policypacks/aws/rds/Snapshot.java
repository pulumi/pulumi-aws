// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rds;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rds/snapshot:Snapshot")
public final class Snapshot extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Specifies the allocated storage size in gigabytes (GB).
     * 
     */
    @PolicyResourceProperty(name="allocatedStorage", flag="unknown_allocatedStorage")
    private Integer value_allocatedStorage;
    private boolean unknown_allocatedStorage;
    public Integer allocatedStorage() {
        if (!unknown_allocatedStorage) return value_allocatedStorage;
        throw new UndeferrableValueException("Value 'Snapshot.allocatedStorage' is not present");
    }

    /**
     * Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
     * 
     */
    @PolicyResourceProperty(name="availabilityZone", flag="unknown_availabilityZone")
    private String value_availabilityZone;
    private boolean unknown_availabilityZone;
    public String availabilityZone() {
        if (!unknown_availabilityZone) return value_availabilityZone;
        throw new UndeferrableValueException("Value 'Snapshot.availabilityZone' is not present");
    }

    /**
     * The DB Instance Identifier from which to take the snapshot.
     * 
     */
    @PolicyResourceProperty(name="dbInstanceIdentifier", flag="unknown_dbInstanceIdentifier")
    private String value_dbInstanceIdentifier;
    private boolean unknown_dbInstanceIdentifier;
    public String dbInstanceIdentifier() {
        if (!unknown_dbInstanceIdentifier) return value_dbInstanceIdentifier;
        throw new UndeferrableValueException("Value 'Snapshot.dbInstanceIdentifier' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) for the DB snapshot.
     * 
     */
    @PolicyResourceProperty(name="dbSnapshotArn", flag="unknown_dbSnapshotArn")
    private String value_dbSnapshotArn;
    private boolean unknown_dbSnapshotArn;
    public String dbSnapshotArn() {
        if (!unknown_dbSnapshotArn) return value_dbSnapshotArn;
        throw new UndeferrableValueException("Value 'Snapshot.dbSnapshotArn' is not present");
    }

    /**
     * The Identifier for the snapshot.
     * 
     */
    @PolicyResourceProperty(name="dbSnapshotIdentifier", flag="unknown_dbSnapshotIdentifier")
    private String value_dbSnapshotIdentifier;
    private boolean unknown_dbSnapshotIdentifier;
    public String dbSnapshotIdentifier() {
        if (!unknown_dbSnapshotIdentifier) return value_dbSnapshotIdentifier;
        throw new UndeferrableValueException("Value 'Snapshot.dbSnapshotIdentifier' is not present");
    }

    /**
     * Specifies whether the DB snapshot is encrypted.
     * 
     */
    @PolicyResourceProperty(name="encrypted", flag="unknown_encrypted")
    private Boolean value_encrypted;
    private boolean unknown_encrypted;
    public Boolean encrypted() {
        if (!unknown_encrypted) return value_encrypted;
        throw new UndeferrableValueException("Value 'Snapshot.encrypted' is not present");
    }

    /**
     * Specifies the name of the database engine.
     * 
     */
    @PolicyResourceProperty(name="engine", flag="unknown_engine")
    private String value_engine;
    private boolean unknown_engine;
    public String engine() {
        if (!unknown_engine) return value_engine;
        throw new UndeferrableValueException("Value 'Snapshot.engine' is not present");
    }

    /**
     * Specifies the version of the database engine.
     * 
     */
    @PolicyResourceProperty(name="engineVersion", flag="unknown_engineVersion")
    private String value_engineVersion;
    private boolean unknown_engineVersion;
    public String engineVersion() {
        if (!unknown_engineVersion) return value_engineVersion;
        throw new UndeferrableValueException("Value 'Snapshot.engineVersion' is not present");
    }

    /**
     * Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
     * 
     */
    @PolicyResourceProperty(name="iops", flag="unknown_iops")
    private Integer value_iops;
    private boolean unknown_iops;
    public Integer iops() {
        if (!unknown_iops) return value_iops;
        throw new UndeferrableValueException("Value 'Snapshot.iops' is not present");
    }

    /**
     * The ARN for the KMS encryption key.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'Snapshot.kmsKeyId' is not present");
    }

    /**
     * License model information for the restored DB instance.
     * 
     */
    @PolicyResourceProperty(name="licenseModel", flag="unknown_licenseModel")
    private String value_licenseModel;
    private boolean unknown_licenseModel;
    public String licenseModel() {
        if (!unknown_licenseModel) return value_licenseModel;
        throw new UndeferrableValueException("Value 'Snapshot.licenseModel' is not present");
    }

    /**
     * Provides the option group name for the DB snapshot.
     * 
     */
    @PolicyResourceProperty(name="optionGroupName", flag="unknown_optionGroupName")
    private String value_optionGroupName;
    private boolean unknown_optionGroupName;
    public String optionGroupName() {
        if (!unknown_optionGroupName) return value_optionGroupName;
        throw new UndeferrableValueException("Value 'Snapshot.optionGroupName' is not present");
    }

    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'Snapshot.port' is not present");
    }

    /**
     * List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
     * 
     */
    @PolicyResourceProperty(name="sharedAccounts", flag="unknown_sharedAccounts")
    private @Nullable List<String> value_sharedAccounts;
    private boolean unknown_sharedAccounts;
    public @Nullable List<String> sharedAccounts() {
        if (!unknown_sharedAccounts) return value_sharedAccounts;
        throw new UndeferrableValueException("Value 'Snapshot.sharedAccounts' is not present");
    }

    @PolicyResourceProperty(name="snapshotType", flag="unknown_snapshotType")
    private String value_snapshotType;
    private boolean unknown_snapshotType;
    public String snapshotType() {
        if (!unknown_snapshotType) return value_snapshotType;
        throw new UndeferrableValueException("Value 'Snapshot.snapshotType' is not present");
    }

    /**
     * The DB snapshot Arn that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
     * 
     */
    @PolicyResourceProperty(name="sourceDbSnapshotIdentifier", flag="unknown_sourceDbSnapshotIdentifier")
    private String value_sourceDbSnapshotIdentifier;
    private boolean unknown_sourceDbSnapshotIdentifier;
    public String sourceDbSnapshotIdentifier() {
        if (!unknown_sourceDbSnapshotIdentifier) return value_sourceDbSnapshotIdentifier;
        throw new UndeferrableValueException("Value 'Snapshot.sourceDbSnapshotIdentifier' is not present");
    }

    /**
     * The region that the DB snapshot was created in or copied from.
     * 
     */
    @PolicyResourceProperty(name="sourceRegion", flag="unknown_sourceRegion")
    private String value_sourceRegion;
    private boolean unknown_sourceRegion;
    public String sourceRegion() {
        if (!unknown_sourceRegion) return value_sourceRegion;
        throw new UndeferrableValueException("Value 'Snapshot.sourceRegion' is not present");
    }

    /**
     * Specifies the status of this DB snapshot.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'Snapshot.status' is not present");
    }

    /**
     * Specifies the storage type associated with DB snapshot.
     * 
     */
    @PolicyResourceProperty(name="storageType", flag="unknown_storageType")
    private String value_storageType;
    private boolean unknown_storageType;
    public String storageType() {
        if (!unknown_storageType) return value_storageType;
        throw new UndeferrableValueException("Value 'Snapshot.storageType' is not present");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Snapshot.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Snapshot.tagsAll' is not present");
    }

    /**
     * Provides the VPC ID associated with the DB snapshot.
     * 
     */
    @PolicyResourceProperty(name="vpcId", flag="unknown_vpcId")
    private String value_vpcId;
    private boolean unknown_vpcId;
    public String vpcId() {
        if (!unknown_vpcId) return value_vpcId;
        throw new UndeferrableValueException("Value 'Snapshot.vpcId' is not present");
    }

}
