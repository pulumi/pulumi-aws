// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.gamelift;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.gamelift.inputs.MatchmakingConfigurationGamePropertyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:gamelift/matchmakingConfiguration:MatchmakingConfiguration")
public final class MatchmakingConfigurationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies if the match that was created with this configuration must be accepted by matched players.
     * 
     */
    private UndeferrableValue<Boolean> acceptanceRequired;

    public Boolean acceptanceRequired() {
        if (acceptanceRequired == null) return null;
        return acceptanceRequired.getValue("MatchmakingConfigurationArgs.acceptanceRequired");
    }

    /**
     * The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
     * 
     */
    private UndeferrableValue<Integer> acceptanceTimeoutSeconds;

    public Integer acceptanceTimeoutSeconds() {
        if (acceptanceTimeoutSeconds == null) return null;
        return acceptanceTimeoutSeconds.getValue("MatchmakingConfigurationArgs.acceptanceTimeoutSeconds");
    }

    /**
     * The number of player slots in a match to keep open for future players.
     * 
     */
    private UndeferrableValue<Integer> additionalPlayerCount;

    public Integer additionalPlayerCount() {
        if (additionalPlayerCount == null) return null;
        return additionalPlayerCount.getValue("MatchmakingConfigurationArgs.additionalPlayerCount");
    }

    /**
     * The method used to backfill game sessions that are created with this matchmaking configuration.
     * 
     */
    private UndeferrableValue<String> backfillMode;

    public String backfillMode() {
        if (backfillMode == null) return null;
        return backfillMode.getValue("MatchmakingConfigurationArgs.backfillMode");
    }

    /**
     * Information to be added to all events related to this matchmaking configuration.
     * 
     */
    private UndeferrableValue<String> customEventData;

    public String customEventData() {
        if (customEventData == null) return null;
        return customEventData.getValue("MatchmakingConfigurationArgs.customEventData");
    }

    /**
     * A human-readable description of the matchmaking configuration.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("MatchmakingConfigurationArgs.description");
    }

    /**
     * Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
     * 
     */
    private UndeferrableValue<String> flexMatchMode;

    public String flexMatchMode() {
        if (flexMatchMode == null) return null;
        return flexMatchMode.getValue("MatchmakingConfigurationArgs.flexMatchMode");
    }

    /**
     * One or more custom game properties. See below.
     * 
     */
    private UndeferrableValue<List<MatchmakingConfigurationGamePropertyArgs>> gameProperties;

    public List<MatchmakingConfigurationGamePropertyArgs> gameProperties() {
        if (gameProperties == null) return null;
        return gameProperties.getValue("MatchmakingConfigurationArgs.gameProperties");
    }

    /**
     * A set of custom game session properties.
     * 
     */
    private UndeferrableValue<String> gameSessionData;

    public String gameSessionData() {
        if (gameSessionData == null) return null;
        return gameSessionData.getValue("MatchmakingConfigurationArgs.gameSessionData");
    }

    /**
     * The ARNs of the GameLift game session queue resources.
     * 
     */
    private UndeferrableValue<List<String>> gameSessionQueueArns;

    public List<String> gameSessionQueueArns() {
        if (gameSessionQueueArns == null) return null;
        return gameSessionQueueArns.getValue("MatchmakingConfigurationArgs.gameSessionQueueArns");
    }

    /**
     * Name of the matchmaking configuration
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("MatchmakingConfigurationArgs.name");
    }

    /**
     * An SNS topic ARN that is set up to receive matchmaking notifications.
     * 
     */
    private UndeferrableValue<String> notificationTarget;

    public String notificationTarget() {
        if (notificationTarget == null) return null;
        return notificationTarget.getValue("MatchmakingConfigurationArgs.notificationTarget");
    }

    /**
     * The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
     * 
     */
    private UndeferrableValue<Integer> requestTimeoutSeconds;

    public Integer requestTimeoutSeconds() {
        if (requestTimeoutSeconds == null) return null;
        return requestTimeoutSeconds.getValue("MatchmakingConfigurationArgs.requestTimeoutSeconds");
    }

    /**
     * A rule set names for the matchmaking rule set to use with this configuration.
     * 
     */
    private UndeferrableValue<String> ruleSetName;

    public String ruleSetName() {
        if (ruleSetName == null) return null;
        return ruleSetName.getValue("MatchmakingConfigurationArgs.ruleSetName");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("MatchmakingConfigurationArgs.tags");
    }

}
