// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.gamelift;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.gamelift.inputs.MatchmakingConfigurationGamePropertyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:gamelift/matchmakingConfiguration:MatchmakingConfiguration")
public final class MatchmakingConfigurationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Specifies if the match that was created with this configuration must be accepted by matched players.
     * 
     */
    @PolicyResourceProperty(name="acceptanceRequired", flag="unknown_acceptanceRequired")
    private Boolean value_acceptanceRequired;
    private boolean unknown_acceptanceRequired;
    public Boolean acceptanceRequired() {
        if (!unknown_acceptanceRequired) return value_acceptanceRequired;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.acceptanceRequired' is not present");
    }

    /**
     * The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
     * 
     */
    @PolicyResourceProperty(name="acceptanceTimeoutSeconds", flag="unknown_acceptanceTimeoutSeconds")
    private Integer value_acceptanceTimeoutSeconds;
    private boolean unknown_acceptanceTimeoutSeconds;
    public Integer acceptanceTimeoutSeconds() {
        if (!unknown_acceptanceTimeoutSeconds) return value_acceptanceTimeoutSeconds;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.acceptanceTimeoutSeconds' is not present");
    }

    /**
     * The number of player slots in a match to keep open for future players.
     * 
     */
    @PolicyResourceProperty(name="additionalPlayerCount", flag="unknown_additionalPlayerCount")
    private Integer value_additionalPlayerCount;
    private boolean unknown_additionalPlayerCount;
    public Integer additionalPlayerCount() {
        if (!unknown_additionalPlayerCount) return value_additionalPlayerCount;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.additionalPlayerCount' is not present");
    }

    /**
     * The method used to backfill game sessions that are created with this matchmaking configuration.
     * 
     */
    @PolicyResourceProperty(name="backfillMode", flag="unknown_backfillMode")
    private String value_backfillMode;
    private boolean unknown_backfillMode;
    public String backfillMode() {
        if (!unknown_backfillMode) return value_backfillMode;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.backfillMode' is not present");
    }

    /**
     * Information to be added to all events related to this matchmaking configuration.
     * 
     */
    @PolicyResourceProperty(name="customEventData", flag="unknown_customEventData")
    private String value_customEventData;
    private boolean unknown_customEventData;
    public String customEventData() {
        if (!unknown_customEventData) return value_customEventData;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.customEventData' is not present");
    }

    /**
     * A human-readable description of the matchmaking configuration.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.description' is not present");
    }

    /**
     * Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
     * 
     */
    @PolicyResourceProperty(name="flexMatchMode", flag="unknown_flexMatchMode")
    private String value_flexMatchMode;
    private boolean unknown_flexMatchMode;
    public String flexMatchMode() {
        if (!unknown_flexMatchMode) return value_flexMatchMode;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.flexMatchMode' is not present");
    }

    /**
     * One or more custom game properties. See below.
     * 
     */
    @PolicyResourceProperty(name="gameProperties", flag="unknown_gameProperties")
    private List<MatchmakingConfigurationGamePropertyArgs> value_gameProperties;
    private boolean unknown_gameProperties;
    public List<MatchmakingConfigurationGamePropertyArgs> gameProperties() {
        if (!unknown_gameProperties) return value_gameProperties;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.gameProperties' is not present");
    }

    /**
     * A set of custom game session properties.
     * 
     */
    @PolicyResourceProperty(name="gameSessionData", flag="unknown_gameSessionData")
    private String value_gameSessionData;
    private boolean unknown_gameSessionData;
    public String gameSessionData() {
        if (!unknown_gameSessionData) return value_gameSessionData;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.gameSessionData' is not present");
    }

    /**
     * The ARNs of the GameLift game session queue resources.
     * 
     */
    @PolicyResourceProperty(name="gameSessionQueueArns", flag="unknown_gameSessionQueueArns")
    private List<String> value_gameSessionQueueArns;
    private boolean unknown_gameSessionQueueArns;
    public List<String> gameSessionQueueArns() {
        if (!unknown_gameSessionQueueArns) return value_gameSessionQueueArns;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.gameSessionQueueArns' is not present");
    }

    /**
     * Name of the matchmaking configuration
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.name' is not present");
    }

    /**
     * An SNS topic ARN that is set up to receive matchmaking notifications.
     * 
     */
    @PolicyResourceProperty(name="notificationTarget", flag="unknown_notificationTarget")
    private String value_notificationTarget;
    private boolean unknown_notificationTarget;
    public String notificationTarget() {
        if (!unknown_notificationTarget) return value_notificationTarget;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.notificationTarget' is not present");
    }

    /**
     * The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
     * 
     */
    @PolicyResourceProperty(name="requestTimeoutSeconds", flag="unknown_requestTimeoutSeconds")
    private Integer value_requestTimeoutSeconds;
    private boolean unknown_requestTimeoutSeconds;
    public Integer requestTimeoutSeconds() {
        if (!unknown_requestTimeoutSeconds) return value_requestTimeoutSeconds;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.requestTimeoutSeconds' is not present");
    }

    /**
     * A rule set names for the matchmaking rule set to use with this configuration.
     * 
     */
    @PolicyResourceProperty(name="ruleSetName", flag="unknown_ruleSetName")
    private String value_ruleSetName;
    private boolean unknown_ruleSetName;
    public String ruleSetName() {
        if (!unknown_ruleSetName) return value_ruleSetName;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.ruleSetName' is not present");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'MatchmakingConfigurationArgs.tags' is not present");
    }

}
