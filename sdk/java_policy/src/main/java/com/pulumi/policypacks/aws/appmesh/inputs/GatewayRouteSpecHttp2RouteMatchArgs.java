// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appmesh.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.appmesh.inputs.GatewayRouteSpecHttp2RouteMatchHeaderArgs;
import com.pulumi.policypacks.aws.appmesh.inputs.GatewayRouteSpecHttp2RouteMatchHostnameArgs;
import com.pulumi.policypacks.aws.appmesh.inputs.GatewayRouteSpecHttp2RouteMatchPathArgs;
import com.pulumi.policypacks.aws.appmesh.inputs.GatewayRouteSpecHttp2RouteMatchQueryParameterArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class GatewayRouteSpecHttp2RouteMatchArgs {

    /**
     * Client request headers to match on.
     * 
     */
    private UndeferrableValue<List<GatewayRouteSpecHttp2RouteMatchHeaderArgs>> headers;

    public List<GatewayRouteSpecHttp2RouteMatchHeaderArgs> headers() {
        if (headers == null) return null;
        return headers.getValue("GatewayRouteSpecHttp2RouteMatchArgs.headers");
    }

    /**
     * Host name to match on.
     * 
     */
    private UndeferrableValue<GatewayRouteSpecHttp2RouteMatchHostnameArgs> hostname;

    public GatewayRouteSpecHttp2RouteMatchHostnameArgs hostname() {
        if (hostname == null) return null;
        return hostname.getValue("GatewayRouteSpecHttp2RouteMatchArgs.hostname");
    }

    /**
     * Client request path to match on.
     * 
     */
    private UndeferrableValue<GatewayRouteSpecHttp2RouteMatchPathArgs> path;

    public GatewayRouteSpecHttp2RouteMatchPathArgs path() {
        if (path == null) return null;
        return path.getValue("GatewayRouteSpecHttp2RouteMatchArgs.path");
    }

    /**
     * The port number to match from the request.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("GatewayRouteSpecHttp2RouteMatchArgs.port");
    }

    /**
     * Path to match requests with. This parameter must always start with `/`, which by itself matches all requests to the virtual service name.
     * 
     */
    private UndeferrableValue<String> prefix;

    public String prefix() {
        if (prefix == null) return null;
        return prefix.getValue("GatewayRouteSpecHttp2RouteMatchArgs.prefix");
    }

    /**
     * Client request query parameters to match on.
     * 
     */
    private UndeferrableValue<List<GatewayRouteSpecHttp2RouteMatchQueryParameterArgs>> queryParameters;

    public List<GatewayRouteSpecHttp2RouteMatchQueryParameterArgs> queryParameters() {
        if (queryParameters == null) return null;
        return queryParameters.getValue("GatewayRouteSpecHttp2RouteMatchArgs.queryParameters");
    }

}
