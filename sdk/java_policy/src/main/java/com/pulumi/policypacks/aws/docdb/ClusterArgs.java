// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.docdb;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.docdb.inputs.ClusterRestoreToPointInTimeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:docdb/cluster:Cluster")
public final class ClusterArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * A value that indicates whether major version upgrades are allowed. Constraints: You must allow major version upgrades when specifying a value for the EngineVersion parameter that is a different major version than the DB cluster&#39;s current version.
     * 
     */
    private UndeferrableValue<Boolean> allowMajorVersionUpgrade;

    public Boolean allowMajorVersionUpgrade() {
        if (allowMajorVersionUpgrade == null) return null;
        return allowMajorVersionUpgrade.getValue("ClusterArgs.allowMajorVersionUpgrade");
    }

    /**
     * Specifies whether any cluster modifications
     * are applied immediately, or during the next maintenance window. Default is
     * `false`.
     * 
     */
    private UndeferrableValue<Boolean> applyImmediately;

    public Boolean applyImmediately() {
        if (applyImmediately == null) return null;
        return applyImmediately.getValue("ClusterArgs.applyImmediately");
    }

    /**
     * A list of EC2 Availability Zones that
     * instances in the DB cluster can be created in.
     * 
     */
    private UndeferrableValue<List<String>> availabilityZones;

    public List<String> availabilityZones() {
        if (availabilityZones == null) return null;
        return availabilityZones.getValue("ClusterArgs.availabilityZones");
    }

    /**
     * The days to retain backups for. Default `1`
     * 
     */
    private UndeferrableValue<Integer> backupRetentionPeriod;

    public Integer backupRetentionPeriod() {
        if (backupRetentionPeriod == null) return null;
        return backupRetentionPeriod.getValue("ClusterArgs.backupRetentionPeriod");
    }

    /**
     * The cluster identifier. If omitted, the provider will assign a random, unique identifier.
     * 
     */
    private UndeferrableValue<String> clusterIdentifier;

    public String clusterIdentifier() {
        if (clusterIdentifier == null) return null;
        return clusterIdentifier.getValue("ClusterArgs.clusterIdentifier");
    }

    /**
     * Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `cluster_identifier`.
     * 
     */
    private UndeferrableValue<String> clusterIdentifierPrefix;

    public String clusterIdentifierPrefix() {
        if (clusterIdentifierPrefix == null) return null;
        return clusterIdentifierPrefix.getValue("ClusterArgs.clusterIdentifierPrefix");
    }

    /**
     * List of DocumentDB Instances that are a part of this cluster
     * 
     */
    private UndeferrableValue<List<String>> clusterMembers;

    public List<String> clusterMembers() {
        if (clusterMembers == null) return null;
        return clusterMembers.getValue("ClusterArgs.clusterMembers");
    }

    /**
     * A cluster parameter group to associate with the cluster.
     * 
     */
    private UndeferrableValue<String> dbClusterParameterGroupName;

    public String dbClusterParameterGroupName() {
        if (dbClusterParameterGroupName == null) return null;
        return dbClusterParameterGroupName.getValue("ClusterArgs.dbClusterParameterGroupName");
    }

    /**
     * A DB subnet group to associate with this DB instance.
     * 
     */
    private UndeferrableValue<String> dbSubnetGroupName;

    public String dbSubnetGroupName() {
        if (dbSubnetGroupName == null) return null;
        return dbSubnetGroupName.getValue("ClusterArgs.dbSubnetGroupName");
    }

    /**
     * A boolean value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> deletionProtection;

    public Boolean deletionProtection() {
        if (deletionProtection == null) return null;
        return deletionProtection.getValue("ClusterArgs.deletionProtection");
    }

    /**
     * List of log types to export to cloudwatch. If omitted, no logs will be exported.
     * The following log types are supported: `audit`, `profiler`.
     * 
     */
    private UndeferrableValue<List<String>> enabledCloudwatchLogsExports;

    public List<String> enabledCloudwatchLogsExports() {
        if (enabledCloudwatchLogsExports == null) return null;
        return enabledCloudwatchLogsExports.getValue("ClusterArgs.enabledCloudwatchLogsExports");
    }

    /**
     * The name of the database engine to be used for this DB cluster. Defaults to `docdb`. Valid values: `docdb`.
     * 
     */
    private UndeferrableValue<String> engine;

    public String engine() {
        if (engine == null) return null;
        return engine.getValue("ClusterArgs.engine");
    }

    /**
     * The database engine version. Updating this argument results in an outage.
     * 
     */
    private UndeferrableValue<String> engineVersion;

    public String engineVersion() {
        if (engineVersion == null) return null;
        return engineVersion.getValue("ClusterArgs.engineVersion");
    }

    /**
     * The name of your final DB snapshot
     * when this DB cluster is deleted. If omitted, no final snapshot will be
     * made.
     * 
     */
    private UndeferrableValue<String> finalSnapshotIdentifier;

    public String finalSnapshotIdentifier() {
        if (finalSnapshotIdentifier == null) return null;
        return finalSnapshotIdentifier.getValue("ClusterArgs.finalSnapshotIdentifier");
    }

    /**
     * The global cluster identifier specified on `aws.docdb.GlobalCluster`.
     * 
     */
    private UndeferrableValue<String> globalClusterIdentifier;

    public String globalClusterIdentifier() {
        if (globalClusterIdentifier == null) return null;
        return globalClusterIdentifier.getValue("ClusterArgs.globalClusterIdentifier");
    }

    /**
     * The ARN for the KMS encryption key. When specifying `kms_key_id`, `storage_encrypted` needs to be set to true.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("ClusterArgs.kmsKeyId");
    }

    /**
     * Password for the master DB user. Note that this may
     * show up in logs, and it will be stored in the state file. Please refer to the DocumentDB Naming Constraints. Conflicts with `master_password_wo`.
     * 
     */
    private UndeferrableValue<String> masterPassword;

    public String masterPassword() {
        if (masterPassword == null) return null;
        return masterPassword.getValue("ClusterArgs.masterPassword");
    }

    /**
     * Username for the master DB user.
     * 
     */
    private UndeferrableValue<String> masterUsername;

    public String masterUsername() {
        if (masterUsername == null) return null;
        return masterUsername.getValue("ClusterArgs.masterUsername");
    }

    /**
     * The port on which the DB accepts connections
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("ClusterArgs.port");
    }

    /**
     * The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC
     * Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
     * 
     */
    private UndeferrableValue<String> preferredBackupWindow;

    public String preferredBackupWindow() {
        if (preferredBackupWindow == null) return null;
        return preferredBackupWindow.getValue("ClusterArgs.preferredBackupWindow");
    }

    /**
     * The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
     * 
     */
    private UndeferrableValue<String> preferredMaintenanceWindow;

    public String preferredMaintenanceWindow() {
        if (preferredMaintenanceWindow == null) return null;
        return preferredMaintenanceWindow.getValue("ClusterArgs.preferredMaintenanceWindow");
    }

    /**
     * A configuration block for restoring a DB instance to an arbitrary point in time. Requires the `identifier` argument to be set with the name of the new DB instance to be created. See Restore To Point In Time below for details.
     * 
     */
    private UndeferrableValue<ClusterRestoreToPointInTimeArgs> restoreToPointInTime;

    public ClusterRestoreToPointInTimeArgs restoreToPointInTime() {
        if (restoreToPointInTime == null) return null;
        return restoreToPointInTime.getValue("ClusterArgs.restoreToPointInTime");
    }

    /**
     * Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `final_snapshot_identifier`. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> skipFinalSnapshot;

    public Boolean skipFinalSnapshot() {
        if (skipFinalSnapshot == null) return null;
        return skipFinalSnapshot.getValue("ClusterArgs.skipFinalSnapshot");
    }

    /**
     * Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot. Automated snapshots **should not** be used for this attribute, unless from a different cluster. Automated snapshots are deleted as part of cluster destruction when the resource is replaced.
     * 
     */
    private UndeferrableValue<String> snapshotIdentifier;

    public String snapshotIdentifier() {
        if (snapshotIdentifier == null) return null;
        return snapshotIdentifier.getValue("ClusterArgs.snapshotIdentifier");
    }

    /**
     * Specifies whether the DB cluster is encrypted. The default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> storageEncrypted;

    public Boolean storageEncrypted() {
        if (storageEncrypted == null) return null;
        return storageEncrypted.getValue("ClusterArgs.storageEncrypted");
    }

    /**
     * The storage type to associate with the DB cluster. Valid values: `standard`, `iopt1`.
     * 
     */
    private UndeferrableValue<String> storageType;

    public String storageType() {
        if (storageType == null) return null;
        return storageType.getValue("ClusterArgs.storageType");
    }

    /**
     * A map of tags to assign to the DB cluster. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ClusterArgs.tags");
    }

    /**
     * List of VPC security groups to associate
     * with the Cluster
     * 
     */
    private UndeferrableValue<List<String>> vpcSecurityGroupIds;

    public List<String> vpcSecurityGroupIds() {
        if (vpcSecurityGroupIds == null) return null;
        return vpcSecurityGroupIds.getValue("ClusterArgs.vpcSecurityGroupIds");
    }

}
