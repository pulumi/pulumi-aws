// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.imagebuilder;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:imagebuilder/component:Component")
public final class Component extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * (Required) Amazon Resource Name (ARN) of the component.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Component.arn' is not present");
    }

    /**
     * Change description of the component.
     * 
     */
    @PolicyResourceProperty(name="changeDescription", flag="unknown_changeDescription")
    private @Nullable String value_changeDescription;
    private boolean unknown_changeDescription;
    public @Nullable String changeDescription() {
        if (!unknown_changeDescription) return value_changeDescription;
        throw new UndeferrableValueException("Value 'Component.changeDescription' is not present");
    }

    /**
     * Inline YAML string with data of the component. Exactly one of `data` and `uri` can be specified. the provider will only perform drift detection of its value when present in a configuration.
     * 
     */
    @PolicyResourceProperty(name="data", flag="unknown_data")
    private String value_data;
    private boolean unknown_data;
    public String data() {
        if (!unknown_data) return value_data;
        throw new UndeferrableValueException("Value 'Component.data' is not present");
    }

    /**
     * Date the component was created.
     * 
     */
    @PolicyResourceProperty(name="dateCreated", flag="unknown_dateCreated")
    private String value_dateCreated;
    private boolean unknown_dateCreated;
    public String dateCreated() {
        if (!unknown_dateCreated) return value_dateCreated;
        throw new UndeferrableValueException("Value 'Component.dateCreated' is not present");
    }

    /**
     * Description of the component.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Component.description' is not present");
    }

    /**
     * Encryption status of the component.
     * 
     */
    @PolicyResourceProperty(name="encrypted", flag="unknown_encrypted")
    private Boolean value_encrypted;
    private boolean unknown_encrypted;
    public Boolean encrypted() {
        if (!unknown_encrypted) return value_encrypted;
        throw new UndeferrableValueException("Value 'Component.encrypted' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the component.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private @Nullable String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public @Nullable String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'Component.kmsKeyId' is not present");
    }

    /**
     * Name of the component.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Component.name' is not present");
    }

    /**
     * Owner of the component.
     * 
     */
    @PolicyResourceProperty(name="owner", flag="unknown_owner")
    private String value_owner;
    private boolean unknown_owner;
    public String owner() {
        if (!unknown_owner) return value_owner;
        throw new UndeferrableValueException("Value 'Component.owner' is not present");
    }

    /**
     * Platform of the component.
     * 
     */
    @PolicyResourceProperty(name="platform", flag="unknown_platform")
    private String value_platform;
    private boolean unknown_platform;
    public String platform() {
        if (!unknown_platform) return value_platform;
        throw new UndeferrableValueException("Value 'Component.platform' is not present");
    }

    /**
     * Whether to retain the old version when the resource is destroyed or replacement is necessary. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="skipDestroy", flag="unknown_skipDestroy")
    private @Nullable Boolean value_skipDestroy;
    private boolean unknown_skipDestroy;
    public @Nullable Boolean skipDestroy() {
        if (!unknown_skipDestroy) return value_skipDestroy;
        throw new UndeferrableValueException("Value 'Component.skipDestroy' is not present");
    }

    /**
     * Set of Operating Systems (OS) supported by the component.
     * 
     */
    @PolicyResourceProperty(name="supportedOsVersions", flag="unknown_supportedOsVersions")
    private @Nullable List<String> value_supportedOsVersions;
    private boolean unknown_supportedOsVersions;
    public @Nullable List<String> supportedOsVersions() {
        if (!unknown_supportedOsVersions) return value_supportedOsVersions;
        throw new UndeferrableValueException("Value 'Component.supportedOsVersions' is not present");
    }

    /**
     * Key-value map of resource tags for the component. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Component.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Component.tagsAll' is not present");
    }

    /**
     * Type of the component.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'Component.type' is not present");
    }

    /**
     * S3 URI with data of the component. Exactly one of `data` and `uri` can be specified.
     * 
     * &gt; **NOTE:** Updating `data` or `uri` requires specifying a new `version`. This causes replacement of the resource. The `skip_destroy` argument can be used to retain the old version.
     * 
     */
    @PolicyResourceProperty(name="uri", flag="unknown_uri")
    private @Nullable String value_uri;
    private boolean unknown_uri;
    public @Nullable String uri() {
        if (!unknown_uri) return value_uri;
        throw new UndeferrableValueException("Value 'Component.uri' is not present");
    }

    /**
     * Version of the component.
     * 
     * The following attributes are optional:
     * 
     */
    @PolicyResourceProperty(name="version", flag="unknown_version")
    private String value_version;
    private boolean unknown_version;
    public String version() {
        if (!unknown_version) return value_version;
        throw new UndeferrableValueException("Value 'Component.version' is not present");
    }

}
