// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.directconnect;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:directconnect/hostedPrivateVirtualInterface:HostedPrivateVirtualInterface")
public final class HostedPrivateVirtualInterface extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The address family for the BGP peer. ` ipv4  ` or `ipv6`.
     * 
     */
    private UndeferrableValue<String> addressFamily;

    public String addressFamily() {
        if (addressFamily == null) return null;
        return addressFamily.getValue("HostedPrivateVirtualInterface.addressFamily");
    }

    /**
     * The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
     * 
     */
    private UndeferrableValue<String> amazonAddress;

    public String amazonAddress() {
        if (amazonAddress == null) return null;
        return amazonAddress.getValue("HostedPrivateVirtualInterface.amazonAddress");
    }

    private UndeferrableValue<String> amazonSideAsn;

    public String amazonSideAsn() {
        if (amazonSideAsn == null) return null;
        return amazonSideAsn.getValue("HostedPrivateVirtualInterface.amazonSideAsn");
    }

    /**
     * The ARN of the virtual interface.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("HostedPrivateVirtualInterface.arn");
    }

    /**
     * The Direct Connect endpoint on which the virtual interface terminates.
     * 
     */
    private UndeferrableValue<String> awsDevice;

    public String awsDevice() {
        if (awsDevice == null) return null;
        return awsDevice.getValue("HostedPrivateVirtualInterface.awsDevice");
    }

    /**
     * The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
     * 
     */
    private UndeferrableValue<Integer> bgpAsn;

    public Integer bgpAsn() {
        if (bgpAsn == null) return null;
        return bgpAsn.getValue("HostedPrivateVirtualInterface.bgpAsn");
    }

    /**
     * The authentication key for BGP configuration.
     * 
     */
    private UndeferrableValue<String> bgpAuthKey;

    public String bgpAuthKey() {
        if (bgpAuthKey == null) return null;
        return bgpAuthKey.getValue("HostedPrivateVirtualInterface.bgpAuthKey");
    }

    /**
     * The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
     * 
     */
    private UndeferrableValue<String> connectionId;

    public String connectionId() {
        if (connectionId == null) return null;
        return connectionId.getValue("HostedPrivateVirtualInterface.connectionId");
    }

    /**
     * The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
     * 
     */
    private UndeferrableValue<String> customerAddress;

    public String customerAddress() {
        if (customerAddress == null) return null;
        return customerAddress.getValue("HostedPrivateVirtualInterface.customerAddress");
    }

    /**
     * Indicates whether jumbo frames (9001 MTU) are supported.
     * 
     */
    private UndeferrableValue<Boolean> jumboFrameCapable;

    public Boolean jumboFrameCapable() {
        if (jumboFrameCapable == null) return null;
        return jumboFrameCapable.getValue("HostedPrivateVirtualInterface.jumboFrameCapable");
    }

    /**
     * The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection. The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
     * 
     */
    private @Nullable UndeferrableValue<Integer> mtu;

    public @Nullable Integer mtu() {
        if (mtu == null) return null;
        return mtu.getValue("HostedPrivateVirtualInterface.mtu");
    }

    /**
     * The name for the virtual interface.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("HostedPrivateVirtualInterface.name");
    }

    /**
     * The AWS account that will own the new virtual interface.
     * 
     */
    private UndeferrableValue<String> ownerAccountId;

    public String ownerAccountId() {
        if (ownerAccountId == null) return null;
        return ownerAccountId.getValue("HostedPrivateVirtualInterface.ownerAccountId");
    }

    /**
     * The VLAN ID.
     * 
     */
    private UndeferrableValue<Integer> vlan;

    public Integer vlan() {
        if (vlan == null) return null;
        return vlan.getValue("HostedPrivateVirtualInterface.vlan");
    }

}
