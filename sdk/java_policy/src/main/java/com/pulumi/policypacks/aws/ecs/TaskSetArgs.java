// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ecs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ecs.inputs.TaskSetCapacityProviderStrategyArgs;
import com.pulumi.policypacks.aws.ecs.inputs.TaskSetLoadBalancerArgs;
import com.pulumi.policypacks.aws.ecs.inputs.TaskSetNetworkConfigurationArgs;
import com.pulumi.policypacks.aws.ecs.inputs.TaskSetScaleArgs;
import com.pulumi.policypacks.aws.ecs.inputs.TaskSetServiceRegistriesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ecs/taskSet:TaskSet")
public final class TaskSetArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The capacity provider strategy to use for the service. Can be one or more.  Defined below.
     * 
     */
    private UndeferrableValue<List<TaskSetCapacityProviderStrategyArgs>> capacityProviderStrategies;

    public List<TaskSetCapacityProviderStrategyArgs> capacityProviderStrategies() {
        if (capacityProviderStrategies == null) return null;
        return capacityProviderStrategies.getValue("TaskSetArgs.capacityProviderStrategies");
    }

    /**
     * The short name or ARN of the cluster that hosts the service to create the task set in.
     * 
     */
    private UndeferrableValue<String> cluster;

    public String cluster() {
        if (cluster == null) return null;
        return cluster.getValue("TaskSetArgs.cluster");
    }

    /**
     * The external ID associated with the task set.
     * 
     */
    private UndeferrableValue<String> externalId;

    public String externalId() {
        if (externalId == null) return null;
        return externalId.getValue("TaskSetArgs.externalId");
    }

    /**
     * Whether to allow deleting the task set without waiting for scaling down to 0. You can force a task set to delete even if it&#39;s in the process of scaling a resource. Normally, the provider drains all the tasks before deleting the task set. This bypasses that behavior and potentially leaves resources dangling.
     * 
     */
    private UndeferrableValue<Boolean> forceDelete;

    public Boolean forceDelete() {
        if (forceDelete == null) return null;
        return forceDelete.getValue("TaskSetArgs.forceDelete");
    }

    /**
     * The launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
     * 
     */
    private UndeferrableValue<String> launchType;

    public String launchType() {
        if (launchType == null) return null;
        return launchType.getValue("TaskSetArgs.launchType");
    }

    /**
     * Details on load balancers that are used with a task set. Detailed below.
     * 
     */
    private UndeferrableValue<List<TaskSetLoadBalancerArgs>> loadBalancers;

    public List<TaskSetLoadBalancerArgs> loadBalancers() {
        if (loadBalancers == null) return null;
        return loadBalancers.getValue("TaskSetArgs.loadBalancers");
    }

    /**
     * The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. Detailed below.
     * 
     */
    private UndeferrableValue<TaskSetNetworkConfigurationArgs> networkConfiguration;

    public TaskSetNetworkConfigurationArgs networkConfiguration() {
        if (networkConfiguration == null) return null;
        return networkConfiguration.getValue("TaskSetArgs.networkConfiguration");
    }

    /**
     * The platform version on which to run your service. Only applicable for `launch_type` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
     * 
     */
    private UndeferrableValue<String> platformVersion;

    public String platformVersion() {
        if (platformVersion == null) return null;
        return platformVersion.getValue("TaskSetArgs.platformVersion");
    }

    /**
     * A floating-point percentage of the desired number of tasks to place and keep running in the task set. Detailed below.
     * 
     */
    private UndeferrableValue<TaskSetScaleArgs> scale;

    public TaskSetScaleArgs scale() {
        if (scale == null) return null;
        return scale.getValue("TaskSetArgs.scale");
    }

    /**
     * The short name or ARN of the ECS service.
     * 
     */
    private UndeferrableValue<String> service;

    public String service() {
        if (service == null) return null;
        return service.getValue("TaskSetArgs.service");
    }

    /**
     * The service discovery registries for the service. The maximum number of `service_registries` blocks is `1`. Detailed below.
     * 
     */
    private UndeferrableValue<TaskSetServiceRegistriesArgs> serviceRegistries;

    public TaskSetServiceRegistriesArgs serviceRegistries() {
        if (serviceRegistries == null) return null;
        return serviceRegistries.getValue("TaskSetArgs.serviceRegistries");
    }

    /**
     * A map of tags to assign to the file system. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copy_tags_to_backups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("TaskSetArgs.tags");
    }

    /**
     * The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> taskDefinition;

    public String taskDefinition() {
        if (taskDefinition == null) return null;
        return taskDefinition.getValue("TaskSetArgs.taskDefinition");
    }

    /**
     * Whether the provider should wait until the task set has reached `STEADY_STATE`.
     * 
     */
    private UndeferrableValue<Boolean> waitUntilStable;

    public Boolean waitUntilStable() {
        if (waitUntilStable == null) return null;
        return waitUntilStable.getValue("TaskSetArgs.waitUntilStable");
    }

    /**
     * Wait timeout for task set to reach `STEADY_STATE`. Valid time units include `ns`, `us` (or `Âµs`), `ms`, `s`, `m`, and `h`. Default `10m`.
     * 
     */
    private UndeferrableValue<String> waitUntilStableTimeout;

    public String waitUntilStableTimeout() {
        if (waitUntilStableTimeout == null) return null;
        return waitUntilStableTimeout.getValue("TaskSetArgs.waitUntilStableTimeout");
    }

}
