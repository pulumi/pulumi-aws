// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.memorydb;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.memorydb.outputs.MultiRegionClusterTimeouts;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:memorydb/multiRegionCluster:MultiRegionCluster")
public final class MultiRegionCluster extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the multi-region cluster.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("MultiRegionCluster.arn");
    }

    /**
     * description for the multi-region cluster.
     * 
     */
    private @Nullable UndeferrableValue<String> description;

    public @Nullable String description() {
        if (description == null) return null;
        return description.getValue("MultiRegionCluster.description");
    }

    /**
     * The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
     * 
     */
    private UndeferrableValue<String> engine;

    public String engine() {
        if (engine == null) return null;
        return engine.getValue("MultiRegionCluster.engine");
    }

    /**
     * The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
     * 
     */
    private UndeferrableValue<String> engineVersion;

    public String engineVersion() {
        if (engineVersion == null) return null;
        return engineVersion.getValue("MultiRegionCluster.engineVersion");
    }

    /**
     * The name of the multi-region cluster.
     * 
     */
    private UndeferrableValue<String> multiRegionClusterName;

    public String multiRegionClusterName() {
        if (multiRegionClusterName == null) return null;
        return multiRegionClusterName.getValue("MultiRegionCluster.multiRegionClusterName");
    }

    /**
     * A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
     * 
     */
    private UndeferrableValue<String> multiRegionClusterNameSuffix;

    public String multiRegionClusterNameSuffix() {
        if (multiRegionClusterNameSuffix == null) return null;
        return multiRegionClusterNameSuffix.getValue("MultiRegionCluster.multiRegionClusterNameSuffix");
    }

    /**
     * The name of the multi-region parameter group to be associated with the cluster.
     * 
     */
    private UndeferrableValue<String> multiRegionParameterGroupName;

    public String multiRegionParameterGroupName() {
        if (multiRegionParameterGroupName == null) return null;
        return multiRegionParameterGroupName.getValue("MultiRegionCluster.multiRegionParameterGroupName");
    }

    /**
     * The node type to be used for the multi-region cluster.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> nodeType;

    public String nodeType() {
        if (nodeType == null) return null;
        return nodeType.getValue("MultiRegionCluster.nodeType");
    }

    /**
     * The number of shards for the multi-region cluster.
     * 
     */
    private UndeferrableValue<Integer> numShards;

    public Integer numShards() {
        if (numShards == null) return null;
        return numShards.getValue("MultiRegionCluster.numShards");
    }

    private UndeferrableValue<String> status;

    public String status() {
        if (status == null) return null;
        return status.getValue("MultiRegionCluster.status");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("MultiRegionCluster.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("MultiRegionCluster.tagsAll");
    }

    private @Nullable UndeferrableValue<MultiRegionClusterTimeouts> timeouts;

    public @Nullable MultiRegionClusterTimeouts timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("MultiRegionCluster.timeouts");
    }

    /**
     * A flag to enable in-transit encryption on the cluster.
     * 
     */
    private UndeferrableValue<Boolean> tlsEnabled;

    public Boolean tlsEnabled() {
        if (tlsEnabled == null) return null;
        return tlsEnabled.getValue("MultiRegionCluster.tlsEnabled");
    }

    private @Nullable UndeferrableValue<String> updateStrategy;

    public @Nullable String updateStrategy() {
        if (updateStrategy == null) return null;
        return updateStrategy.getValue("MultiRegionCluster.updateStrategy");
    }

}
