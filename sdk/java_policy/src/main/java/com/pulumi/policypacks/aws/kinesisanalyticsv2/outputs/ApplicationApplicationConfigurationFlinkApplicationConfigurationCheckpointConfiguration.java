// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesisanalyticsv2.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfiguration {

    /**
     * Describes the interval in milliseconds between checkpoint operations.
     * 
     */
    private @Nullable UndeferrableValue<Integer> checkpointInterval;

    public @Nullable Integer checkpointInterval() {
        if (checkpointInterval == null) return null;
        return checkpointInterval.getValue("ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfiguration.checkpointInterval");
    }

    /**
     * Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> checkpointingEnabled;

    public @Nullable Boolean checkpointingEnabled() {
        if (checkpointingEnabled == null) return null;
        return checkpointingEnabled.getValue("ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfiguration.checkpointingEnabled");
    }

    /**
     * Describes whether the application uses Kinesis Data Analytics&#39; default checkpointing behavior. Valid values: `CUSTOM`, `DEFAULT`. Set this attribute to `CUSTOM` in order for any specified `checkpointing_enabled`, `checkpoint_interval`, or `min_pause_between_checkpoints` attribute values to be effective. If this attribute is set to `DEFAULT`, the application will always use the following values:
     * * `checkpointing_enabled = true`
     * * `checkpoint_interval = 60000`
     * * `min_pause_between_checkpoints = 5000`
     * 
     */
    private UndeferrableValue<String> configurationType;

    public String configurationType() {
        if (configurationType == null) return null;
        return configurationType.getValue("ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfiguration.configurationType");
    }

    /**
     * Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start.
     * 
     */
    private @Nullable UndeferrableValue<Integer> minPauseBetweenCheckpoints;

    public @Nullable Integer minPauseBetweenCheckpoints() {
        if (minPauseBetweenCheckpoints == null) return null;
        return minPauseBetweenCheckpoints.getValue("ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfiguration.minPauseBetweenCheckpoints");
    }

}
