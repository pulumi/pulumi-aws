// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticbeanstalk;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticbeanstalk/applicationVersion:ApplicationVersion")
public final class ApplicationVersion extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Name of the Beanstalk Application the version is associated with.
     * 
     */
    private UndeferrableValue<String> application;

    public String application() {
        if (application == null) return null;
        return application.getValue("ApplicationVersion.application");
    }

    /**
     * ARN assigned by AWS for this Elastic Beanstalk Application.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("ApplicationVersion.arn");
    }

    /**
     * S3 bucket that contains the Application Version source bundle.
     * 
     */
    private UndeferrableValue<String> bucket;

    public String bucket() {
        if (bucket == null) return null;
        return bucket.getValue("ApplicationVersion.bucket");
    }

    /**
     * Short description of the Application Version.
     * 
     */
    private @Nullable UndeferrableValue<String> description;

    public @Nullable String description() {
        if (description == null) return null;
        return description.getValue("ApplicationVersion.description");
    }

    /**
     * On delete, force an Application Version to be deleted when it may be in use by multiple Elastic Beanstalk Environments.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> forceDelete;

    public @Nullable Boolean forceDelete() {
        if (forceDelete == null) return null;
        return forceDelete.getValue("ApplicationVersion.forceDelete");
    }

    /**
     * S3 object that is the Application Version source bundle.
     * 
     */
    private UndeferrableValue<String> key;

    public String key() {
        if (key == null) return null;
        return key.getValue("ApplicationVersion.key");
    }

    /**
     * Unique name for the this Application Version.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ApplicationVersion.name");
    }

    /**
     * Pre-processes and validates the environment manifest (env.yaml ) and configuration files (*.config files in the .ebextensions folder) in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment. You must turn processing on for application versions that you create using AWS CodeBuild or AWS CodeCommit. For application versions built from a source bundle in Amazon S3, processing is optional. It validates Elastic Beanstalk configuration files. It doesn’t validate your application’s configuration files, like proxy server or Docker configuration.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> process;

    public @Nullable Boolean process() {
        if (process == null) return null;
        return process.getValue("ApplicationVersion.process");
    }

    /**
     * Key-value map of tags for the Elastic Beanstalk Application Version. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ApplicationVersion.tags");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("ApplicationVersion.tagsAll");
    }

}
