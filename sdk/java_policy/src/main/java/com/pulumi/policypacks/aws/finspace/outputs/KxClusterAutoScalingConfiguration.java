// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.finspace.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;


public final class KxClusterAutoScalingConfiguration {

    /**
     * Metric your cluster will track in order to scale in and out. For example, CPU_UTILIZATION_PERCENTAGE is the average CPU usage across all nodes in a cluster.
     * 
     */
    private UndeferrableValue<String> autoScalingMetric;

    public String autoScalingMetric() {
        if (autoScalingMetric == null) return null;
        return autoScalingMetric.getValue("KxClusterAutoScalingConfiguration.autoScalingMetric");
    }

    /**
     * Highest number of nodes to scale. Cannot be greater than 5
     * 
     */
    private UndeferrableValue<Integer> maxNodeCount;

    public Integer maxNodeCount() {
        if (maxNodeCount == null) return null;
        return maxNodeCount.getValue("KxClusterAutoScalingConfiguration.maxNodeCount");
    }

    /**
     * Desired value of chosen `auto_scaling_metric`. When metric drops below this value, cluster will scale in. When metric goes above this value, cluster will scale out. Can be set between 0 and 100 percent.
     * 
     */
    private UndeferrableValue<Double> metricTarget;

    public Double metricTarget() {
        if (metricTarget == null) return null;
        return metricTarget.getValue("KxClusterAutoScalingConfiguration.metricTarget");
    }

    /**
     * Lowest number of nodes to scale. Must be at least 1 and less than the `max_node_count`. If nodes in cluster belong to multiple availability zones, then `min_node_count` must be at least 3.
     * 
     */
    private UndeferrableValue<Integer> minNodeCount;

    public Integer minNodeCount() {
        if (minNodeCount == null) return null;
        return minNodeCount.getValue("KxClusterAutoScalingConfiguration.minNodeCount");
    }

    /**
     * Duration in seconds that FinSpace will wait after a scale in event before initiating another scaling event.
     * 
     */
    private UndeferrableValue<Double> scaleInCooldownSeconds;

    public Double scaleInCooldownSeconds() {
        if (scaleInCooldownSeconds == null) return null;
        return scaleInCooldownSeconds.getValue("KxClusterAutoScalingConfiguration.scaleInCooldownSeconds");
    }

    /**
     * Duration in seconds that FinSpace will wait after a scale out event before initiating another scaling event.
     * 
     */
    private UndeferrableValue<Double> scaleOutCooldownSeconds;

    public Double scaleOutCooldownSeconds() {
        if (scaleOutCooldownSeconds == null) return null;
        return scaleOutCooldownSeconds.getValue("KxClusterAutoScalingConfiguration.scaleOutCooldownSeconds");
    }

}
