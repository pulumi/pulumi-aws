// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigateway;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apigateway/integrationResponse:IntegrationResponse")
public final class IntegrationResponseArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
     * 
     */
    @PolicyResourceProperty(name="contentHandling", flag="unknown_contentHandling")
    private String value_contentHandling;
    private boolean unknown_contentHandling;
    public String contentHandling() {
        if (!unknown_contentHandling) return value_contentHandling;
        throw new UndeferrableValueException("Value 'IntegrationResponseArgs.contentHandling' is not present");
    }

    /**
     * HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`).
     * 
     */
    @PolicyResourceProperty(name="httpMethod", flag="unknown_httpMethod")
    private String value_httpMethod;
    private boolean unknown_httpMethod;
    public String httpMethod() {
        if (!unknown_httpMethod) return value_httpMethod;
        throw new UndeferrableValueException("Value 'IntegrationResponseArgs.httpMethod' is not present");
    }

    /**
     * API resource ID.
     * 
     */
    @PolicyResourceProperty(name="resourceId", flag="unknown_resourceId")
    private String value_resourceId;
    private boolean unknown_resourceId;
    public String resourceId() {
        if (!unknown_resourceId) return value_resourceId;
        throw new UndeferrableValueException("Value 'IntegrationResponseArgs.resourceId' is not present");
    }

    /**
     * Map of response parameters that can be read from the backend response. For example: `response_parameters = { &#34;method.response.header.X-Some-Header&#34; = &#34;integration.response.header.X-Some-Other-Header&#34; }`.
     * 
     */
    @PolicyResourceProperty(name="responseParameters", flag="unknown_responseParameters")
    private Map<String,String> value_responseParameters;
    private boolean unknown_responseParameters;
    public Map<String,String> responseParameters() {
        if (!unknown_responseParameters) return value_responseParameters;
        throw new UndeferrableValueException("Value 'IntegrationResponseArgs.responseParameters' is not present");
    }

    /**
     * Map of templates used to transform the integration response body.
     * 
     */
    @PolicyResourceProperty(name="responseTemplates", flag="unknown_responseTemplates")
    private Map<String,String> value_responseTemplates;
    private boolean unknown_responseTemplates;
    public Map<String,String> responseTemplates() {
        if (!unknown_responseTemplates) return value_responseTemplates;
        throw new UndeferrableValueException("Value 'IntegrationResponseArgs.responseTemplates' is not present");
    }

    /**
     * ID of the associated REST API.
     * 
     */
    @PolicyResourceProperty(name="restApi", flag="unknown_restApi")
    private String value_restApi;
    private boolean unknown_restApi;
    public String restApi() {
        if (!unknown_restApi) return value_restApi;
        throw new UndeferrableValueException("Value 'IntegrationResponseArgs.restApi' is not present");
    }

    /**
     * Regular expression pattern used to choose an integration response based on the response from the backend. Omit configuring this to make the integration the default one. If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched. For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
     * 
     */
    @PolicyResourceProperty(name="selectionPattern", flag="unknown_selectionPattern")
    private String value_selectionPattern;
    private boolean unknown_selectionPattern;
    public String selectionPattern() {
        if (!unknown_selectionPattern) return value_selectionPattern;
        throw new UndeferrableValueException("Value 'IntegrationResponseArgs.selectionPattern' is not present");
    }

    /**
     * HTTP status code.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="statusCode", flag="unknown_statusCode")
    private String value_statusCode;
    private boolean unknown_statusCode;
    public String statusCode() {
        if (!unknown_statusCode) return value_statusCode;
        throw new UndeferrableValueException("Value 'IntegrationResponseArgs.statusCode' is not present");
    }

}
