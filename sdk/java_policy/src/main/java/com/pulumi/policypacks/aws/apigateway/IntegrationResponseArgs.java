// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigateway;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apigateway/integrationResponse:IntegrationResponse")
public final class IntegrationResponseArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
     * 
     */
    private UndeferrableValue<String> contentHandling;

    public String contentHandling() {
        if (contentHandling == null) return null;
        return contentHandling.getValue("IntegrationResponseArgs.contentHandling");
    }

    /**
     * HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`).
     * 
     */
    private UndeferrableValue<String> httpMethod;

    public String httpMethod() {
        if (httpMethod == null) return null;
        return httpMethod.getValue("IntegrationResponseArgs.httpMethod");
    }

    /**
     * API resource ID.
     * 
     */
    private UndeferrableValue<String> resourceId;

    public String resourceId() {
        if (resourceId == null) return null;
        return resourceId.getValue("IntegrationResponseArgs.resourceId");
    }

    /**
     * Map of response parameters that can be read from the backend response. For example: `response_parameters = { &#34;method.response.header.X-Some-Header&#34; = &#34;integration.response.header.X-Some-Other-Header&#34; }`.
     * 
     */
    private UndeferrableValue<Map<String,String>> responseParameters;

    public Map<String,String> responseParameters() {
        if (responseParameters == null) return null;
        return responseParameters.getValue("IntegrationResponseArgs.responseParameters");
    }

    /**
     * Map of templates used to transform the integration response body.
     * 
     */
    private UndeferrableValue<Map<String,String>> responseTemplates;

    public Map<String,String> responseTemplates() {
        if (responseTemplates == null) return null;
        return responseTemplates.getValue("IntegrationResponseArgs.responseTemplates");
    }

    /**
     * ID of the associated REST API.
     * 
     */
    private UndeferrableValue<String> restApi;

    public String restApi() {
        if (restApi == null) return null;
        return restApi.getValue("IntegrationResponseArgs.restApi");
    }

    /**
     * Regular expression pattern used to choose an integration response based on the response from the backend. Omit configuring this to make the integration the default one. If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched. For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
     * 
     */
    private UndeferrableValue<String> selectionPattern;

    public String selectionPattern() {
        if (selectionPattern == null) return null;
        return selectionPattern.getValue("IntegrationResponseArgs.selectionPattern");
    }

    /**
     * HTTP status code.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> statusCode;

    public String statusCode() {
        if (statusCode == null) return null;
        return statusCode.getValue("IntegrationResponseArgs.statusCode");
    }

}
