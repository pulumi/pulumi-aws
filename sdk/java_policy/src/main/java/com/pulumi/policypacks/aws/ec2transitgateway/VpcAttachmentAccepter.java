// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2transitgateway;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter")
public final class VpcAttachmentAccepter extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Whether Appliance Mode support is enabled. Valid values: `disable`, `enable`.
     * 
     */
    private UndeferrableValue<String> applianceModeSupport;

    public String applianceModeSupport() {
        if (applianceModeSupport == null) return null;
        return applianceModeSupport.getValue("VpcAttachmentAccepter.applianceModeSupport");
    }

    /**
     * Whether DNS support is enabled. Valid values: `disable`, `enable`.
     * 
     */
    private UndeferrableValue<String> dnsSupport;

    public String dnsSupport() {
        if (dnsSupport == null) return null;
        return dnsSupport.getValue("VpcAttachmentAccepter.dnsSupport");
    }

    /**
     * Whether IPv6 support is enabled. Valid values: `disable`, `enable`.
     * 
     */
    private UndeferrableValue<String> ipv6Support;

    public String ipv6Support() {
        if (ipv6Support == null) return null;
        return ipv6Support.getValue("VpcAttachmentAccepter.ipv6Support");
    }

    /**
     * Whether Security Group Referencing Support is enabled. Valid values: `disable`, `enable`.
     * 
     */
    private UndeferrableValue<String> securityGroupReferencingSupport;

    public String securityGroupReferencingSupport() {
        if (securityGroupReferencingSupport == null) return null;
        return securityGroupReferencingSupport.getValue("VpcAttachmentAccepter.securityGroupReferencingSupport");
    }

    /**
     * Identifiers of EC2 Subnets.
     * 
     */
    private UndeferrableValue<List<String>> subnetIds;

    public List<String> subnetIds() {
        if (subnetIds == null) return null;
        return subnetIds.getValue("VpcAttachmentAccepter.subnetIds");
    }

    /**
     * Key-value tags for the EC2 Transit Gateway VPC Attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("VpcAttachmentAccepter.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("VpcAttachmentAccepter.tagsAll");
    }

    /**
     * The ID of the EC2 Transit Gateway Attachment to manage.
     * 
     */
    private UndeferrableValue<String> transitGatewayAttachmentId;

    public String transitGatewayAttachmentId() {
        if (transitGatewayAttachmentId == null) return null;
        return transitGatewayAttachmentId.getValue("VpcAttachmentAccepter.transitGatewayAttachmentId");
    }

    /**
     * Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> transitGatewayDefaultRouteTableAssociation;

    public @Nullable Boolean transitGatewayDefaultRouteTableAssociation() {
        if (transitGatewayDefaultRouteTableAssociation == null) return null;
        return transitGatewayDefaultRouteTableAssociation.getValue("VpcAttachmentAccepter.transitGatewayDefaultRouteTableAssociation");
    }

    /**
     * Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> transitGatewayDefaultRouteTablePropagation;

    public @Nullable Boolean transitGatewayDefaultRouteTablePropagation() {
        if (transitGatewayDefaultRouteTablePropagation == null) return null;
        return transitGatewayDefaultRouteTablePropagation.getValue("VpcAttachmentAccepter.transitGatewayDefaultRouteTablePropagation");
    }

    /**
     * Identifier of EC2 Transit Gateway.
     * 
     */
    private UndeferrableValue<String> transitGatewayId;

    public String transitGatewayId() {
        if (transitGatewayId == null) return null;
        return transitGatewayId.getValue("VpcAttachmentAccepter.transitGatewayId");
    }

    /**
     * Identifier of EC2 VPC.
     * 
     */
    private UndeferrableValue<String> vpcId;

    public String vpcId() {
        if (vpcId == null) return null;
        return vpcId.getValue("VpcAttachmentAccepter.vpcId");
    }

    /**
     * Identifier of the AWS account that owns the EC2 VPC.
     * 
     */
    private UndeferrableValue<String> vpcOwnerId;

    public String vpcOwnerId() {
        if (vpcOwnerId == null) return null;
        return vpcOwnerId.getValue("VpcAttachmentAccepter.vpcOwnerId");
    }

}
