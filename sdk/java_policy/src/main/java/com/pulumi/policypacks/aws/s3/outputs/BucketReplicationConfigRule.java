// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.s3.outputs.BucketReplicationConfigRuleDeleteMarkerReplication;
import com.pulumi.policypacks.aws.s3.outputs.BucketReplicationConfigRuleDestination;
import com.pulumi.policypacks.aws.s3.outputs.BucketReplicationConfigRuleExistingObjectReplication;
import com.pulumi.policypacks.aws.s3.outputs.BucketReplicationConfigRuleFilter;
import com.pulumi.policypacks.aws.s3.outputs.BucketReplicationConfigRuleSourceSelectionCriteria;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class BucketReplicationConfigRule {

    /**
     * Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when `filter` is used)documented below.
     * 
     */
    @PolicyResourceProperty(name="deleteMarkerReplication", flag="unknown_deleteMarkerReplication")
    private @Nullable BucketReplicationConfigRuleDeleteMarkerReplication value_deleteMarkerReplication;
    private boolean unknown_deleteMarkerReplication;
    public @Nullable BucketReplicationConfigRuleDeleteMarkerReplication deleteMarkerReplication() {
        if (!unknown_deleteMarkerReplication) return value_deleteMarkerReplication;
        throw new UndeferrableValueException("Value 'BucketReplicationConfigRule.deleteMarkerReplication' is not present");
    }

    /**
     * Specifies the destination for the rule. See below.
     * 
     */
    @PolicyResourceProperty(name="destination", flag="unknown_destination")
    private BucketReplicationConfigRuleDestination value_destination;
    private boolean unknown_destination;
    public BucketReplicationConfigRuleDestination destination() {
        if (!unknown_destination) return value_destination;
        throw new UndeferrableValueException("Value 'BucketReplicationConfigRule.destination' is not present");
    }

    /**
     * Replicate existing objects in the source bucket according to the rule configurations. See below.
     * 
     */
    @PolicyResourceProperty(name="existingObjectReplication", flag="unknown_existingObjectReplication")
    private @Nullable BucketReplicationConfigRuleExistingObjectReplication value_existingObjectReplication;
    private boolean unknown_existingObjectReplication;
    public @Nullable BucketReplicationConfigRuleExistingObjectReplication existingObjectReplication() {
        if (!unknown_existingObjectReplication) return value_existingObjectReplication;
        throw new UndeferrableValueException("Value 'BucketReplicationConfigRule.existingObjectReplication' is not present");
    }

    /**
     * Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the `rule` will default to using `prefix`.
     * 
     */
    @PolicyResourceProperty(name="filter", flag="unknown_filter")
    private @Nullable BucketReplicationConfigRuleFilter value_filter;
    private boolean unknown_filter;
    public @Nullable BucketReplicationConfigRuleFilter filter() {
        if (!unknown_filter) return value_filter;
        throw new UndeferrableValueException("Value 'BucketReplicationConfigRule.filter' is not present");
    }

    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    @PolicyResourceProperty(name="id", flag="unknown_id")
    private @Nullable String value_id;
    private boolean unknown_id;
    public @Nullable String id() {
        if (!unknown_id) return value_id;
        throw new UndeferrableValueException("Value 'BucketReplicationConfigRule.id' is not present");
    }

    /**
     * Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string (`&#34;&#34;`) if `filter` is not specified.
     * 
     * @deprecated
     * prefix is deprecated. Use filter instead.
     * 
     */
    @Deprecated /* prefix is deprecated. Use filter instead. */
    @PolicyResourceProperty(name="prefix", flag="unknown_prefix")
    private @Nullable String value_prefix;
    private boolean unknown_prefix;
    public @Nullable String prefix() {
        if (!unknown_prefix) return value_prefix;
        throw new UndeferrableValueException("Value 'BucketReplicationConfigRule.prefix' is not present");
    }

    /**
     * Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
     * 
     */
    @PolicyResourceProperty(name="priority", flag="unknown_priority")
    private @Nullable Integer value_priority;
    private boolean unknown_priority;
    public @Nullable Integer priority() {
        if (!unknown_priority) return value_priority;
        throw new UndeferrableValueException("Value 'BucketReplicationConfigRule.priority' is not present");
    }

    /**
     * Specifies special object selection criteria. See below.
     * 
     */
    @PolicyResourceProperty(name="sourceSelectionCriteria", flag="unknown_sourceSelectionCriteria")
    private @Nullable BucketReplicationConfigRuleSourceSelectionCriteria value_sourceSelectionCriteria;
    private boolean unknown_sourceSelectionCriteria;
    public @Nullable BucketReplicationConfigRuleSourceSelectionCriteria sourceSelectionCriteria() {
        if (!unknown_sourceSelectionCriteria) return value_sourceSelectionCriteria;
        throw new UndeferrableValueException("Value 'BucketReplicationConfigRule.sourceSelectionCriteria' is not present");
    }

    /**
     * Status of the rule. Either `&#34;Enabled&#34;` or `&#34;Disabled&#34;`. The rule is ignored if status is not &#34;Enabled&#34;.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'BucketReplicationConfigRule.status' is not present");
    }

}
