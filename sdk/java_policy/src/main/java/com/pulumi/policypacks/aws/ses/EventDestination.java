// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ses;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ses.outputs.EventDestinationCloudwatchDestination;
import com.pulumi.policypacks.aws.ses.outputs.EventDestinationKinesisDestination;
import com.pulumi.policypacks.aws.ses.outputs.EventDestinationSnsDestination;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ses/eventDestination:EventDestination")
public final class EventDestination extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The SES event destination ARN.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'EventDestination.arn' is not present");
    }

    /**
     * CloudWatch destination for the events
     * 
     */
    @PolicyResourceProperty(name="cloudwatchDestinations", flag="unknown_cloudwatchDestinations")
    private @Nullable List<EventDestinationCloudwatchDestination> value_cloudwatchDestinations;
    private boolean unknown_cloudwatchDestinations;
    public @Nullable List<EventDestinationCloudwatchDestination> cloudwatchDestinations() {
        if (!unknown_cloudwatchDestinations) return value_cloudwatchDestinations;
        throw new UndeferrableValueException("Value 'EventDestination.cloudwatchDestinations' is not present");
    }

    /**
     * The name of the configuration set
     * 
     */
    @PolicyResourceProperty(name="configurationSetName", flag="unknown_configurationSetName")
    private String value_configurationSetName;
    private boolean unknown_configurationSetName;
    public String configurationSetName() {
        if (!unknown_configurationSetName) return value_configurationSetName;
        throw new UndeferrableValueException("Value 'EventDestination.configurationSetName' is not present");
    }

    /**
     * If true, the event destination will be enabled
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private @Nullable Boolean value_enabled;
    private boolean unknown_enabled;
    public @Nullable Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'EventDestination.enabled' is not present");
    }

    /**
     * Send the events to a kinesis firehose destination
     * 
     */
    @PolicyResourceProperty(name="kinesisDestination", flag="unknown_kinesisDestination")
    private @Nullable EventDestinationKinesisDestination value_kinesisDestination;
    private boolean unknown_kinesisDestination;
    public @Nullable EventDestinationKinesisDestination kinesisDestination() {
        if (!unknown_kinesisDestination) return value_kinesisDestination;
        throw new UndeferrableValueException("Value 'EventDestination.kinesisDestination' is not present");
    }

    /**
     * A list of matching types. May be any of `&#34;send&#34;`, `&#34;reject&#34;`, `&#34;bounce&#34;`, `&#34;complaint&#34;`, `&#34;delivery&#34;`, `&#34;open&#34;`, `&#34;click&#34;`, or `&#34;renderingFailure&#34;`.
     * 
     */
    @PolicyResourceProperty(name="matchingTypes", flag="unknown_matchingTypes")
    private List<String> value_matchingTypes;
    private boolean unknown_matchingTypes;
    public List<String> matchingTypes() {
        if (!unknown_matchingTypes) return value_matchingTypes;
        throw new UndeferrableValueException("Value 'EventDestination.matchingTypes' is not present");
    }

    /**
     * The name of the event destination
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'EventDestination.name' is not present");
    }

    /**
     * Send the events to an SNS Topic destination
     * 
     * &gt; **NOTE:** You can specify `&#34;cloudwatch_destination&#34;` or `&#34;kinesis_destination&#34;` but not both
     * 
     */
    @PolicyResourceProperty(name="snsDestination", flag="unknown_snsDestination")
    private @Nullable EventDestinationSnsDestination value_snsDestination;
    private boolean unknown_snsDestination;
    public @Nullable EventDestinationSnsDestination snsDestination() {
        if (!unknown_snsDestination) return value_snsDestination;
        throw new UndeferrableValueException("Value 'EventDestination.snsDestination' is not present");
    }

}
