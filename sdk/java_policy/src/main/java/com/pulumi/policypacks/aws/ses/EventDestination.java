// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ses;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ses.outputs.EventDestinationCloudwatchDestination;
import com.pulumi.policypacks.aws.ses.outputs.EventDestinationKinesisDestination;
import com.pulumi.policypacks.aws.ses.outputs.EventDestinationSnsDestination;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ses/eventDestination:EventDestination")
public final class EventDestination extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The SES event destination ARN.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("EventDestination.arn");
    }

    /**
     * CloudWatch destination for the events
     * 
     */
    private @Nullable UndeferrableValue<List<EventDestinationCloudwatchDestination>> cloudwatchDestinations;

    public @Nullable List<EventDestinationCloudwatchDestination> cloudwatchDestinations() {
        if (cloudwatchDestinations == null) return null;
        return cloudwatchDestinations.getValue("EventDestination.cloudwatchDestinations");
    }

    /**
     * The name of the configuration set
     * 
     */
    private UndeferrableValue<String> configurationSetName;

    public String configurationSetName() {
        if (configurationSetName == null) return null;
        return configurationSetName.getValue("EventDestination.configurationSetName");
    }

    /**
     * If true, the event destination will be enabled
     * 
     */
    private @Nullable UndeferrableValue<Boolean> enabled;

    public @Nullable Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("EventDestination.enabled");
    }

    /**
     * Send the events to a kinesis firehose destination
     * 
     */
    private @Nullable UndeferrableValue<EventDestinationKinesisDestination> kinesisDestination;

    public @Nullable EventDestinationKinesisDestination kinesisDestination() {
        if (kinesisDestination == null) return null;
        return kinesisDestination.getValue("EventDestination.kinesisDestination");
    }

    /**
     * A list of matching types. May be any of `&#34;send&#34;`, `&#34;reject&#34;`, `&#34;bounce&#34;`, `&#34;complaint&#34;`, `&#34;delivery&#34;`, `&#34;open&#34;`, `&#34;click&#34;`, or `&#34;renderingFailure&#34;`.
     * 
     */
    private UndeferrableValue<List<String>> matchingTypes;

    public List<String> matchingTypes() {
        if (matchingTypes == null) return null;
        return matchingTypes.getValue("EventDestination.matchingTypes");
    }

    /**
     * The name of the event destination
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("EventDestination.name");
    }

    /**
     * Send the events to an SNS Topic destination
     * 
     * &gt; **NOTE:** You can specify `&#34;cloudwatch_destination&#34;` or `&#34;kinesis_destination&#34;` but not both
     * 
     */
    private @Nullable UndeferrableValue<EventDestinationSnsDestination> snsDestination;

    public @Nullable EventDestinationSnsDestination snsDestination() {
        if (snsDestination == null) return null;
        return snsDestination.getValue("EventDestination.snsDestination");
    }

}
