// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dlm.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.dlm.outputs.LifecyclePolicyPolicyDetailsAction;
import com.pulumi.policypacks.aws.dlm.outputs.LifecyclePolicyPolicyDetailsEventSource;
import com.pulumi.policypacks.aws.dlm.outputs.LifecyclePolicyPolicyDetailsParameters;
import com.pulumi.policypacks.aws.dlm.outputs.LifecyclePolicyPolicyDetailsSchedule;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class LifecyclePolicyPolicyDetails {

    /**
     * The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `action` configuration block.
     * 
     */
    @PolicyResourceProperty(name="action", flag="unknown_action")
    private @Nullable LifecyclePolicyPolicyDetailsAction value_action;
    private boolean unknown_action;
    public @Nullable LifecyclePolicyPolicyDetailsAction action() {
        if (!unknown_action) return value_action;
        throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.action' is not present");
    }

    /**
     * The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `event_source` configuration block.
     * 
     */
    @PolicyResourceProperty(name="eventSource", flag="unknown_eventSource")
    private @Nullable LifecyclePolicyPolicyDetailsEventSource value_eventSource;
    private boolean unknown_eventSource;
    public @Nullable LifecyclePolicyPolicyDetailsEventSource eventSource() {
        if (!unknown_eventSource) return value_eventSource;
        throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.eventSource' is not present");
    }

    @PolicyResourceProperty(name="parameters", flag="unknown_parameters")
    private @Nullable LifecyclePolicyPolicyDetailsParameters value_parameters;
    private boolean unknown_parameters;
    public @Nullable LifecyclePolicyPolicyDetailsParameters parameters() {
        if (!unknown_parameters) return value_parameters;
        throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.parameters' is not present");
    }

    /**
     * The valid target resource types and actions a policy can manage. Specify `EBS_SNAPSHOT_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify `IMAGE_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify `EVENT_BASED_POLICY` to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is `EBS_SNAPSHOT_MANAGEMENT`.
     * 
     */
    @PolicyResourceProperty(name="policyType", flag="unknown_policyType")
    private @Nullable String value_policyType;
    private boolean unknown_policyType;
    public @Nullable String policyType() {
        if (!unknown_policyType) return value_policyType;
        throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.policyType' is not present");
    }

    /**
     * The location of the resources to backup. If the source resources are located in an AWS Region, specify `CLOUD`. If the source resources are located on an Outpost in your account, specify `OUTPOST`. If you specify `OUTPOST`, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are `CLOUD` and `OUTPOST`.
     * 
     */
    @PolicyResourceProperty(name="resourceLocations", flag="unknown_resourceLocations")
    private @Nullable String value_resourceLocations;
    private boolean unknown_resourceLocations;
    public @Nullable String resourceLocations() {
        if (!unknown_resourceLocations) return value_resourceLocations;
        throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.resourceLocations' is not present");
    }

    /**
     * A list of resource types that should be targeted by the lifecycle policy. Valid values are `VOLUME` and `INSTANCE`.
     * 
     */
    @PolicyResourceProperty(name="resourceTypes", flag="unknown_resourceTypes")
    private @Nullable List<String> value_resourceTypes;
    private boolean unknown_resourceTypes;
    public @Nullable List<String> resourceTypes() {
        if (!unknown_resourceTypes) return value_resourceTypes;
        throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.resourceTypes' is not present");
    }

    /**
     * See the `schedule` configuration block.
     * 
     */
    @PolicyResourceProperty(name="schedules", flag="unknown_schedules")
    private @Nullable List<LifecyclePolicyPolicyDetailsSchedule> value_schedules;
    private boolean unknown_schedules;
    public @Nullable List<LifecyclePolicyPolicyDetailsSchedule> schedules() {
        if (!unknown_schedules) return value_schedules;
        throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.schedules' is not present");
    }

    /**
     * A map of tag keys and their values. Any resources that match the `resource_types` and are tagged with _any_ of these tags will be targeted.
     * 
     * &gt; Note: You cannot have overlapping lifecycle policies that share the same `target_tags`. Pulumi is unable to detect this at plan time but it will fail during apply.
     * 
     */
    @PolicyResourceProperty(name="targetTags", flag="unknown_targetTags")
    private @Nullable Map<String,String> value_targetTags;
    private boolean unknown_targetTags;
    public @Nullable Map<String,String> targetTags() {
        if (!unknown_targetTags) return value_targetTags;
        throw new UndeferrableValueException("Value 'LifecyclePolicyPolicyDetails.targetTags' is not present");
    }

}
