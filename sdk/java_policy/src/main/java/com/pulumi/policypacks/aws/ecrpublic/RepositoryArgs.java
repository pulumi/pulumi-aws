// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ecrpublic;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ecrpublic.inputs.RepositoryCatalogDataArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ecrpublic/repository:Repository")
public final class RepositoryArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Catalog data configuration for the repository. See below for schema.
     * 
     */
    @PolicyResourceProperty(name="catalogData", flag="unknown_catalogData")
    private RepositoryCatalogDataArgs value_catalogData;
    private boolean unknown_catalogData;
    public RepositoryCatalogDataArgs catalogData() {
        if (!unknown_catalogData) return value_catalogData;
        throw new UndeferrableValueException("Value 'RepositoryArgs.catalogData' is not present");
    }

    @PolicyResourceProperty(name="forceDestroy", flag="unknown_forceDestroy")
    private Boolean value_forceDestroy;
    private boolean unknown_forceDestroy;
    public Boolean forceDestroy() {
        if (!unknown_forceDestroy) return value_forceDestroy;
        throw new UndeferrableValueException("Value 'RepositoryArgs.forceDestroy' is not present");
    }

    /**
     * Name of the repository.
     * 
     */
    @PolicyResourceProperty(name="repositoryName", flag="unknown_repositoryName")
    private String value_repositoryName;
    private boolean unknown_repositoryName;
    public String repositoryName() {
        if (!unknown_repositoryName) return value_repositoryName;
        throw new UndeferrableValueException("Value 'RepositoryArgs.repositoryName' is not present");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'RepositoryArgs.tags' is not present");
    }

}
