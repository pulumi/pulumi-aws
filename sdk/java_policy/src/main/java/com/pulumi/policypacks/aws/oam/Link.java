// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.oam;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.oam.outputs.LinkLinkConfiguration;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:oam/link:Link")
public final class Link extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the link.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Link.arn");
    }

    /**
     * Label that is assigned to this link.
     * 
     */
    private UndeferrableValue<String> label;

    public String label() {
        if (label == null) return null;
        return label.getValue("Link.label");
    }

    /**
     * Human-readable name to use to identify this source account when you are viewing data from it in the monitoring account.
     * 
     */
    private UndeferrableValue<String> labelTemplate;

    public String labelTemplate() {
        if (labelTemplate == null) return null;
        return labelTemplate.getValue("Link.labelTemplate");
    }

    /**
     * Configuration for creating filters that specify that only some metric namespaces or log groups are to be shared from the source account to the monitoring account. See `link_configuration` Block for details.
     * 
     */
    private @Nullable UndeferrableValue<LinkLinkConfiguration> linkConfiguration;

    public @Nullable LinkLinkConfiguration linkConfiguration() {
        if (linkConfiguration == null) return null;
        return linkConfiguration.getValue("Link.linkConfiguration");
    }

    /**
     * ID string that AWS generated as part of the link ARN.
     * 
     */
    private UndeferrableValue<String> linkId;

    public String linkId() {
        if (linkId == null) return null;
        return linkId.getValue("Link.linkId");
    }

    /**
     * Types of data that the source account shares with the monitoring account.
     * 
     */
    private UndeferrableValue<List<String>> resourceTypes;

    public List<String> resourceTypes() {
        if (resourceTypes == null) return null;
        return resourceTypes.getValue("Link.resourceTypes");
    }

    /**
     * ARN of the sink that is used for this link.
     * 
     */
    private UndeferrableValue<String> sinkArn;

    public String sinkArn() {
        if (sinkArn == null) return null;
        return sinkArn.getValue("Link.sinkArn");
    }

    /**
     * Identifier of the sink to use to create this link.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> sinkIdentifier;

    public String sinkIdentifier() {
        if (sinkIdentifier == null) return null;
        return sinkIdentifier.getValue("Link.sinkIdentifier");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Link.tags");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Link.tagsAll");
    }

}
