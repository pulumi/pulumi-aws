// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="pulumi:providers:aws")
public final class Provider extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The access key for API operations. You can retrieve this from the &#39;Security &amp; Credentials&#39; section of the AWS console.
     * 
     */
    private @Nullable UndeferrableValue<String> accessKey;

    public @Nullable String accessKey() {
        if (accessKey == null) return null;
        return accessKey.getValue("Provider.accessKey");
    }

    /**
     * File containing custom root and intermediate certificates. Can also be configured using the `AWS_CA_BUNDLE` environment
     * variable. (Setting `ca_bundle` in the shared config file is not supported.)
     * 
     */
    private @Nullable UndeferrableValue<String> customCaBundle;

    public @Nullable String customCaBundle() {
        if (customCaBundle == null) return null;
        return customCaBundle.getValue("Provider.customCaBundle");
    }

    /**
     * Address of the EC2 metadata service endpoint to use. Can also be configured using the
     * `AWS_EC2_METADATA_SERVICE_ENDPOINT` environment variable.
     * 
     */
    private @Nullable UndeferrableValue<String> ec2MetadataServiceEndpoint;

    public @Nullable String ec2MetadataServiceEndpoint() {
        if (ec2MetadataServiceEndpoint == null) return null;
        return ec2MetadataServiceEndpoint.getValue("Provider.ec2MetadataServiceEndpoint");
    }

    /**
     * Protocol to use with EC2 metadata service endpoint.Valid values are `IPv4` and `IPv6`. Can also be configured using the
     * `AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE` environment variable.
     * 
     */
    private @Nullable UndeferrableValue<String> ec2MetadataServiceEndpointMode;

    public @Nullable String ec2MetadataServiceEndpointMode() {
        if (ec2MetadataServiceEndpointMode == null) return null;
        return ec2MetadataServiceEndpointMode.getValue("Provider.ec2MetadataServiceEndpointMode");
    }

    /**
     * URL of a proxy to use for HTTP requests when accessing the AWS API. Can also be set using the `HTTP_PROXY` or
     * `http_proxy` environment variables.
     * 
     */
    private @Nullable UndeferrableValue<String> httpProxy;

    public @Nullable String httpProxy() {
        if (httpProxy == null) return null;
        return httpProxy.getValue("Provider.httpProxy");
    }

    /**
     * URL of a proxy to use for HTTPS requests when accessing the AWS API. Can also be set using the `HTTPS_PROXY` or
     * `https_proxy` environment variables.
     * 
     */
    private @Nullable UndeferrableValue<String> httpsProxy;

    public @Nullable String httpsProxy() {
        if (httpsProxy == null) return null;
        return httpsProxy.getValue("Provider.httpsProxy");
    }

    /**
     * Comma-separated list of hosts that should not use HTTP or HTTPS proxies. Can also be set using the `NO_PROXY` or
     * `no_proxy` environment variables.
     * 
     */
    private @Nullable UndeferrableValue<String> noProxy;

    public @Nullable String noProxy() {
        if (noProxy == null) return null;
        return noProxy.getValue("Provider.noProxy");
    }

    /**
     * The profile for API operations. If not set, the default profile created with `aws configure` will be used.
     * 
     */
    private @Nullable UndeferrableValue<String> profile;

    public @Nullable String profile() {
        if (profile == null) return null;
        return profile.getValue("Provider.profile");
    }

    /**
     * The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.
     * 
     */
    private @Nullable UndeferrableValue<String> region;

    public @Nullable String region() {
        if (region == null) return null;
        return region.getValue("Provider.region");
    }

    /**
     * Specifies how retries are attempted. Valid values are `standard` and `adaptive`. Can also be configured using the
     * `AWS_RETRY_MODE` environment variable.
     * 
     */
    private @Nullable UndeferrableValue<String> retryMode;

    public @Nullable String retryMode() {
        if (retryMode == null) return null;
        return retryMode.getValue("Provider.retryMode");
    }

    /**
     * Specifies whether S3 API calls in the `us-east-1` region use the legacy global endpoint or a regional endpoint. Valid
     * values are `legacy` or `regional`. Can also be configured using the `AWS_S3_US_EAST_1_REGIONAL_ENDPOINT` environment
     * variable or the `s3_us_east_1_regional_endpoint` shared config file parameter
     * 
     */
    private @Nullable UndeferrableValue<String> s3UsEast1RegionalEndpoint;

    public @Nullable String s3UsEast1RegionalEndpoint() {
        if (s3UsEast1RegionalEndpoint == null) return null;
        return s3UsEast1RegionalEndpoint.getValue("Provider.s3UsEast1RegionalEndpoint");
    }

    /**
     * The secret key for API operations. You can retrieve this from the &#39;Security &amp; Credentials&#39; section of the AWS console.
     * 
     */
    private @Nullable UndeferrableValue<String> secretKey;

    public @Nullable String secretKey() {
        if (secretKey == null) return null;
        return secretKey.getValue("Provider.secretKey");
    }

    /**
     * The region where AWS STS operations will take place. Examples are us-east-1 and us-west-2.
     * 
     */
    private @Nullable UndeferrableValue<String> stsRegion;

    public @Nullable String stsRegion() {
        if (stsRegion == null) return null;
        return stsRegion.getValue("Provider.stsRegion");
    }

    /**
     * session token. A session token is only required if you are using temporary security credentials.
     * 
     */
    private @Nullable UndeferrableValue<String> token;

    public @Nullable String token() {
        if (token == null) return null;
        return token.getValue("Provider.token");
    }

}
