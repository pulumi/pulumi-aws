// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="pulumi:providers:aws")
public final class Provider extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The access key for API operations. You can retrieve this from the &#39;Security &amp; Credentials&#39; section of the AWS console.
     * 
     */
    @PolicyResourceProperty(name="accessKey", flag="unknown_accessKey")
    private @Nullable String value_accessKey;
    private boolean unknown_accessKey;
    public @Nullable String accessKey() {
        if (!unknown_accessKey) return value_accessKey;
        throw new UndeferrableValueException("Value 'Provider.accessKey' is not present");
    }

    /**
     * File containing custom root and intermediate certificates. Can also be configured using the `AWS_CA_BUNDLE` environment
     * variable. (Setting `ca_bundle` in the shared config file is not supported.)
     * 
     */
    @PolicyResourceProperty(name="customCaBundle", flag="unknown_customCaBundle")
    private @Nullable String value_customCaBundle;
    private boolean unknown_customCaBundle;
    public @Nullable String customCaBundle() {
        if (!unknown_customCaBundle) return value_customCaBundle;
        throw new UndeferrableValueException("Value 'Provider.customCaBundle' is not present");
    }

    /**
     * Address of the EC2 metadata service endpoint to use. Can also be configured using the
     * `AWS_EC2_METADATA_SERVICE_ENDPOINT` environment variable.
     * 
     */
    @PolicyResourceProperty(name="ec2MetadataServiceEndpoint", flag="unknown_ec2MetadataServiceEndpoint")
    private @Nullable String value_ec2MetadataServiceEndpoint;
    private boolean unknown_ec2MetadataServiceEndpoint;
    public @Nullable String ec2MetadataServiceEndpoint() {
        if (!unknown_ec2MetadataServiceEndpoint) return value_ec2MetadataServiceEndpoint;
        throw new UndeferrableValueException("Value 'Provider.ec2MetadataServiceEndpoint' is not present");
    }

    /**
     * Protocol to use with EC2 metadata service endpoint.Valid values are `IPv4` and `IPv6`. Can also be configured using the
     * `AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE` environment variable.
     * 
     */
    @PolicyResourceProperty(name="ec2MetadataServiceEndpointMode", flag="unknown_ec2MetadataServiceEndpointMode")
    private @Nullable String value_ec2MetadataServiceEndpointMode;
    private boolean unknown_ec2MetadataServiceEndpointMode;
    public @Nullable String ec2MetadataServiceEndpointMode() {
        if (!unknown_ec2MetadataServiceEndpointMode) return value_ec2MetadataServiceEndpointMode;
        throw new UndeferrableValueException("Value 'Provider.ec2MetadataServiceEndpointMode' is not present");
    }

    /**
     * URL of a proxy to use for HTTP requests when accessing the AWS API. Can also be set using the `HTTP_PROXY` or
     * `http_proxy` environment variables.
     * 
     */
    @PolicyResourceProperty(name="httpProxy", flag="unknown_httpProxy")
    private @Nullable String value_httpProxy;
    private boolean unknown_httpProxy;
    public @Nullable String httpProxy() {
        if (!unknown_httpProxy) return value_httpProxy;
        throw new UndeferrableValueException("Value 'Provider.httpProxy' is not present");
    }

    /**
     * URL of a proxy to use for HTTPS requests when accessing the AWS API. Can also be set using the `HTTPS_PROXY` or
     * `https_proxy` environment variables.
     * 
     */
    @PolicyResourceProperty(name="httpsProxy", flag="unknown_httpsProxy")
    private @Nullable String value_httpsProxy;
    private boolean unknown_httpsProxy;
    public @Nullable String httpsProxy() {
        if (!unknown_httpsProxy) return value_httpsProxy;
        throw new UndeferrableValueException("Value 'Provider.httpsProxy' is not present");
    }

    /**
     * Comma-separated list of hosts that should not use HTTP or HTTPS proxies. Can also be set using the `NO_PROXY` or
     * `no_proxy` environment variables.
     * 
     */
    @PolicyResourceProperty(name="noProxy", flag="unknown_noProxy")
    private @Nullable String value_noProxy;
    private boolean unknown_noProxy;
    public @Nullable String noProxy() {
        if (!unknown_noProxy) return value_noProxy;
        throw new UndeferrableValueException("Value 'Provider.noProxy' is not present");
    }

    /**
     * The profile for API operations. If not set, the default profile created with `aws configure` will be used.
     * 
     */
    @PolicyResourceProperty(name="profile", flag="unknown_profile")
    private @Nullable String value_profile;
    private boolean unknown_profile;
    public @Nullable String profile() {
        if (!unknown_profile) return value_profile;
        throw new UndeferrableValueException("Value 'Provider.profile' is not present");
    }

    /**
     * The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.
     * 
     */
    @PolicyResourceProperty(name="region", flag="unknown_region")
    private @Nullable String value_region;
    private boolean unknown_region;
    public @Nullable String region() {
        if (!unknown_region) return value_region;
        throw new UndeferrableValueException("Value 'Provider.region' is not present");
    }

    /**
     * Specifies how retries are attempted. Valid values are `standard` and `adaptive`. Can also be configured using the
     * `AWS_RETRY_MODE` environment variable.
     * 
     */
    @PolicyResourceProperty(name="retryMode", flag="unknown_retryMode")
    private @Nullable String value_retryMode;
    private boolean unknown_retryMode;
    public @Nullable String retryMode() {
        if (!unknown_retryMode) return value_retryMode;
        throw new UndeferrableValueException("Value 'Provider.retryMode' is not present");
    }

    /**
     * Specifies whether S3 API calls in the `us-east-1` region use the legacy global endpoint or a regional endpoint. Valid
     * values are `legacy` or `regional`. Can also be configured using the `AWS_S3_US_EAST_1_REGIONAL_ENDPOINT` environment
     * variable or the `s3_us_east_1_regional_endpoint` shared config file parameter
     * 
     */
    @PolicyResourceProperty(name="s3UsEast1RegionalEndpoint", flag="unknown_s3UsEast1RegionalEndpoint")
    private @Nullable String value_s3UsEast1RegionalEndpoint;
    private boolean unknown_s3UsEast1RegionalEndpoint;
    public @Nullable String s3UsEast1RegionalEndpoint() {
        if (!unknown_s3UsEast1RegionalEndpoint) return value_s3UsEast1RegionalEndpoint;
        throw new UndeferrableValueException("Value 'Provider.s3UsEast1RegionalEndpoint' is not present");
    }

    /**
     * The secret key for API operations. You can retrieve this from the &#39;Security &amp; Credentials&#39; section of the AWS console.
     * 
     */
    @PolicyResourceProperty(name="secretKey", flag="unknown_secretKey")
    private @Nullable String value_secretKey;
    private boolean unknown_secretKey;
    public @Nullable String secretKey() {
        if (!unknown_secretKey) return value_secretKey;
        throw new UndeferrableValueException("Value 'Provider.secretKey' is not present");
    }

    /**
     * The region where AWS STS operations will take place. Examples are us-east-1 and us-west-2.
     * 
     */
    @PolicyResourceProperty(name="stsRegion", flag="unknown_stsRegion")
    private @Nullable String value_stsRegion;
    private boolean unknown_stsRegion;
    public @Nullable String stsRegion() {
        if (!unknown_stsRegion) return value_stsRegion;
        throw new UndeferrableValueException("Value 'Provider.stsRegion' is not present");
    }

    /**
     * session token. A session token is only required if you are using temporary security credentials.
     * 
     */
    @PolicyResourceProperty(name="token", flag="unknown_token")
    private @Nullable String value_token;
    private boolean unknown_token;
    public @Nullable String token() {
        if (!unknown_token) return value_token;
        throw new UndeferrableValueException("Value 'Provider.token' is not present");
    }

}
