// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.directoryservice;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.directoryservice.outputs.SharedDirectoryTarget;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:directoryservice/sharedDirectory:SharedDirectory")
public final class SharedDirectory extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Identifier of the Managed Microsoft AD directory that you want to share with other accounts.
     * 
     */
    @PolicyResourceProperty(name="directoryId", flag="unknown_directoryId")
    private String value_directoryId;
    private boolean unknown_directoryId;
    public String directoryId() {
        if (!unknown_directoryId) return value_directoryId;
        throw new UndeferrableValueException("Value 'SharedDirectory.directoryId' is not present");
    }

    /**
     * Method used when sharing a directory. Valid values are `ORGANIZATIONS` and `HANDSHAKE`. Default is `HANDSHAKE`.
     * 
     */
    @PolicyResourceProperty(name="method", flag="unknown_method")
    private @Nullable String value_method;
    private boolean unknown_method;
    public @Nullable String method() {
        if (!unknown_method) return value_method;
        throw new UndeferrableValueException("Value 'SharedDirectory.method' is not present");
    }

    /**
     * Message sent by the directory owner to the directory consumer to help the directory consumer administrator determine whether to approve or reject the share invitation.
     * 
     */
    @PolicyResourceProperty(name="notes", flag="unknown_notes")
    private @Nullable String value_notes;
    private boolean unknown_notes;
    public @Nullable String notes() {
        if (!unknown_notes) return value_notes;
        throw new UndeferrableValueException("Value 'SharedDirectory.notes' is not present");
    }

    /**
     * Identifier of the directory that is stored in the directory consumer account that corresponds to the shared directory in the owner account.
     * 
     */
    @PolicyResourceProperty(name="sharedDirectoryId", flag="unknown_sharedDirectoryId")
    private String value_sharedDirectoryId;
    private boolean unknown_sharedDirectoryId;
    public String sharedDirectoryId() {
        if (!unknown_sharedDirectoryId) return value_sharedDirectoryId;
        throw new UndeferrableValueException("Value 'SharedDirectory.sharedDirectoryId' is not present");
    }

    /**
     * Identifier for the directory consumer account with whom the directory is to be shared. See below.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="target", flag="unknown_target")
    private SharedDirectoryTarget value_target;
    private boolean unknown_target;
    public SharedDirectoryTarget target() {
        if (!unknown_target) return value_target;
        throw new UndeferrableValueException("Value 'SharedDirectory.target' is not present");
    }

}
