// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.wafv2.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementRateBasedStatementCustomKey;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementRateBasedStatementForwardedIpConfig;
import com.pulumi.policypacks.aws.wafv2.outputs.WebAclRuleStatementRateBasedStatementScopeDownStatement;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class WebAclRuleStatementRateBasedStatement {

    /**
     * Setting that indicates how to aggregate the request counts. Valid values include: `CONSTANT`, `CUSTOM_KEYS`, `FORWARDED_IP`, or `IP`. Default: `IP`.
     * 
     */
    private @Nullable UndeferrableValue<String> aggregateKeyType;

    public @Nullable String aggregateKeyType() {
        if (aggregateKeyType == null) return null;
        return aggregateKeyType.getValue("WebAclRuleStatementRateBasedStatement.aggregateKeyType");
    }

    /**
     * Aggregate the request counts using one or more web request components as the aggregate keys. See `custom_key` below for details.
     * 
     */
    private @Nullable UndeferrableValue<List<WebAclRuleStatementRateBasedStatementCustomKey>> customKeys;

    public @Nullable List<WebAclRuleStatementRateBasedStatementCustomKey> customKeys() {
        if (customKeys == null) return null;
        return customKeys.getValue("WebAclRuleStatementRateBasedStatement.customKeys");
    }

    /**
     * The amount of time, in seconds, that AWS WAF should include in its request counts, looking back from the current time. Valid values are `60`, `120`, `300`, and `600`. Defaults to `300` (5 minutes).
     * 
     * **NOTE:** This setting doesn&#39;t determine how often AWS WAF checks the rate, but how far back it looks each time it checks. AWS WAF checks the rate about every 10 seconds.
     * 
     */
    private @Nullable UndeferrableValue<Integer> evaluationWindowSec;

    public @Nullable Integer evaluationWindowSec() {
        if (evaluationWindowSec == null) return null;
        return evaluationWindowSec.getValue("WebAclRuleStatementRateBasedStatement.evaluationWindowSec");
    }

    /**
     * Configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that&#39;s reported by the web request origin. If `aggregate_key_type` is set to `FORWARDED_IP`, this block is required. See `forwarded_ip_config` below for details.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementRateBasedStatementForwardedIpConfig> forwardedIpConfig;

    public @Nullable WebAclRuleStatementRateBasedStatementForwardedIpConfig forwardedIpConfig() {
        if (forwardedIpConfig == null) return null;
        return forwardedIpConfig.getValue("WebAclRuleStatementRateBasedStatement.forwardedIpConfig");
    }

    /**
     * Limit on requests per 5-minute period for a single originating IP address.
     * 
     */
    private UndeferrableValue<Integer> limit;

    public Integer limit() {
        if (limit == null) return null;
        return limit.getValue("WebAclRuleStatementRateBasedStatement.limit");
    }

    /**
     * Optional nested statement that narrows the scope of the rate-based statement to matching web requests. This can be any nestable statement, and you can nest statements at any level below this scope-down statement. See `statement` above for details. If `aggregate_key_type` is set to `CONSTANT`, this block is required.
     * 
     */
    private @Nullable UndeferrableValue<WebAclRuleStatementRateBasedStatementScopeDownStatement> scopeDownStatement;

    public @Nullable WebAclRuleStatementRateBasedStatementScopeDownStatement scopeDownStatement() {
        if (scopeDownStatement == null) return null;
        return scopeDownStatement.getValue("WebAclRuleStatementRateBasedStatement.scopeDownStatement");
    }

}
