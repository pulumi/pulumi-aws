// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.amplify;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:amplify/branch:Branch")
public final class BranchArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Unique ID for an Amplify app.
     * 
     */
    private UndeferrableValue<String> appId;

    public String appId() {
        if (appId == null) return null;
        return appId.getValue("BranchArgs.appId");
    }

    /**
     * ARN for a backend environment that is part of an Amplify app.
     * 
     */
    private UndeferrableValue<String> backendEnvironmentArn;

    public String backendEnvironmentArn() {
        if (backendEnvironmentArn == null) return null;
        return backendEnvironmentArn.getValue("BranchArgs.backendEnvironmentArn");
    }

    /**
     * Basic authorization credentials for the branch.
     * 
     */
    private UndeferrableValue<String> basicAuthCredentials;

    public String basicAuthCredentials() {
        if (basicAuthCredentials == null) return null;
        return basicAuthCredentials.getValue("BranchArgs.basicAuthCredentials");
    }

    /**
     * Name for the branch.
     * 
     */
    private UndeferrableValue<String> branchName;

    public String branchName() {
        if (branchName == null) return null;
        return branchName.getValue("BranchArgs.branchName");
    }

    /**
     * Description for the branch.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("BranchArgs.description");
    }

    /**
     * Display name for a branch. This is used as the default domain prefix.
     * 
     */
    private UndeferrableValue<String> displayName;

    public String displayName() {
        if (displayName == null) return null;
        return displayName.getValue("BranchArgs.displayName");
    }

    /**
     * Enables auto building for the branch.
     * 
     */
    private UndeferrableValue<Boolean> enableAutoBuild;

    public Boolean enableAutoBuild() {
        if (enableAutoBuild == null) return null;
        return enableAutoBuild.getValue("BranchArgs.enableAutoBuild");
    }

    /**
     * Enables basic authorization for the branch.
     * 
     */
    private UndeferrableValue<Boolean> enableBasicAuth;

    public Boolean enableBasicAuth() {
        if (enableBasicAuth == null) return null;
        return enableBasicAuth.getValue("BranchArgs.enableBasicAuth");
    }

    /**
     * Enables notifications for the branch.
     * 
     */
    private UndeferrableValue<Boolean> enableNotification;

    public Boolean enableNotification() {
        if (enableNotification == null) return null;
        return enableNotification.getValue("BranchArgs.enableNotification");
    }

    /**
     * Enables performance mode for the branch.
     * 
     */
    private UndeferrableValue<Boolean> enablePerformanceMode;

    public Boolean enablePerformanceMode() {
        if (enablePerformanceMode == null) return null;
        return enablePerformanceMode.getValue("BranchArgs.enablePerformanceMode");
    }

    /**
     * Enables pull request previews for this branch.
     * 
     */
    private UndeferrableValue<Boolean> enablePullRequestPreview;

    public Boolean enablePullRequestPreview() {
        if (enablePullRequestPreview == null) return null;
        return enablePullRequestPreview.getValue("BranchArgs.enablePullRequestPreview");
    }

    /**
     * Environment variables for the branch.
     * 
     */
    private UndeferrableValue<Map<String,String>> environmentVariables;

    public Map<String,String> environmentVariables() {
        if (environmentVariables == null) return null;
        return environmentVariables.getValue("BranchArgs.environmentVariables");
    }

    /**
     * Framework for the branch.
     * 
     */
    private UndeferrableValue<String> framework;

    public String framework() {
        if (framework == null) return null;
        return framework.getValue("BranchArgs.framework");
    }

    /**
     * Amplify environment name for the pull request.
     * 
     */
    private UndeferrableValue<String> pullRequestEnvironmentName;

    public String pullRequestEnvironmentName() {
        if (pullRequestEnvironmentName == null) return null;
        return pullRequestEnvironmentName.getValue("BranchArgs.pullRequestEnvironmentName");
    }

    /**
     * Describes the current stage for the branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
     * 
     */
    private UndeferrableValue<String> stage;

    public String stage() {
        if (stage == null) return null;
        return stage.getValue("BranchArgs.stage");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("BranchArgs.tags");
    }

    /**
     * Content Time To Live (TTL) for the website in seconds.
     * 
     */
    private UndeferrableValue<String> ttl;

    public String ttl() {
        if (ttl == null) return null;
        return ttl.getValue("BranchArgs.ttl");
    }

}
