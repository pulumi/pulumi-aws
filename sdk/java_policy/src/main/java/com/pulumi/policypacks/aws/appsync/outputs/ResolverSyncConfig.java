// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.appsync.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.appsync.outputs.ResolverSyncConfigLambdaConflictHandlerConfig;
import java.lang.String;
import javax.annotation.Nullable;


public final class ResolverSyncConfig {

    /**
     * Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.
     * 
     */
    private @Nullable UndeferrableValue<String> conflictDetection;

    public @Nullable String conflictDetection() {
        if (conflictDetection == null) return null;
        return conflictDetection.getValue("ResolverSyncConfig.conflictDetection");
    }

    /**
     * Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.
     * 
     */
    private @Nullable UndeferrableValue<String> conflictHandler;

    public @Nullable String conflictHandler() {
        if (conflictHandler == null) return null;
        return conflictHandler.getValue("ResolverSyncConfig.conflictHandler");
    }

    /**
     * Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See Lambda Conflict Handler Config.
     * 
     */
    private @Nullable UndeferrableValue<ResolverSyncConfigLambdaConflictHandlerConfig> lambdaConflictHandlerConfig;

    public @Nullable ResolverSyncConfigLambdaConflictHandlerConfig lambdaConflictHandlerConfig() {
        if (lambdaConflictHandlerConfig == null) return null;
        return lambdaConflictHandlerConfig.getValue("ResolverSyncConfig.lambdaConflictHandlerConfig");
    }

}
