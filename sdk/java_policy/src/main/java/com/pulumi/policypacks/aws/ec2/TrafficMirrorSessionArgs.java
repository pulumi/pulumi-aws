// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/trafficMirrorSession:TrafficMirrorSession")
public final class TrafficMirrorSessionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * A description of the traffic mirror session.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("TrafficMirrorSessionArgs.description");
    }

    /**
     * ID of the source network interface. Not all network interfaces are eligible as mirror sources. On EC2 instances only nitro based instances support mirroring.
     * 
     */
    private UndeferrableValue<String> networkInterfaceId;

    public String networkInterfaceId() {
        if (networkInterfaceId == null) return null;
        return networkInterfaceId.getValue("TrafficMirrorSessionArgs.networkInterfaceId");
    }

    /**
     * The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror.
     * 
     */
    private UndeferrableValue<Integer> packetLength;

    public Integer packetLength() {
        if (packetLength == null) return null;
        return packetLength.getValue("TrafficMirrorSessionArgs.packetLength");
    }

    /**
     * The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
     * 
     */
    private UndeferrableValue<Integer> sessionNumber;

    public Integer sessionNumber() {
        if (sessionNumber == null) return null;
        return sessionNumber.getValue("TrafficMirrorSessionArgs.sessionNumber");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("TrafficMirrorSessionArgs.tags");
    }

    /**
     * ID of the traffic mirror filter to be used
     * 
     */
    private UndeferrableValue<String> trafficMirrorFilterId;

    public String trafficMirrorFilterId() {
        if (trafficMirrorFilterId == null) return null;
        return trafficMirrorFilterId.getValue("TrafficMirrorSessionArgs.trafficMirrorFilterId");
    }

    /**
     * ID of the traffic mirror target to be used
     * 
     */
    private UndeferrableValue<String> trafficMirrorTargetId;

    public String trafficMirrorTargetId() {
        if (trafficMirrorTargetId == null) return null;
        return trafficMirrorTargetId.getValue("TrafficMirrorSessionArgs.trafficMirrorTargetId");
    }

    /**
     * The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
     * 
     */
    private UndeferrableValue<Integer> virtualNetworkId;

    public Integer virtualNetworkId() {
        if (virtualNetworkId == null) return null;
        return virtualNetworkId.getValue("TrafficMirrorSessionArgs.virtualNetworkId");
    }

}
