// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cfg;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cfg.inputs.RuleEvaluationModeArgs;
import com.pulumi.policypacks.aws.cfg.inputs.RuleScopeArgs;
import com.pulumi.policypacks.aws.cfg.inputs.RuleSourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cfg/rule:Rule")
public final class RuleArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Description of the rule
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'RuleArgs.description' is not present");
    }

    /**
     * The modes the Config rule can be evaluated in. See Evaluation Mode for more details.
     * 
     */
    @PolicyResourceProperty(name="evaluationModes", flag="unknown_evaluationModes")
    private List<RuleEvaluationModeArgs> value_evaluationModes;
    private boolean unknown_evaluationModes;
    public List<RuleEvaluationModeArgs> evaluationModes() {
        if (!unknown_evaluationModes) return value_evaluationModes;
        throw new UndeferrableValueException("Value 'RuleArgs.evaluationModes' is not present");
    }

    /**
     * A string in JSON format that is passed to the AWS Config rule Lambda function.
     * 
     */
    @PolicyResourceProperty(name="inputParameters", flag="unknown_inputParameters")
    private String value_inputParameters;
    private boolean unknown_inputParameters;
    public String inputParameters() {
        if (!unknown_inputParameters) return value_inputParameters;
        throw new UndeferrableValueException("Value 'RuleArgs.inputParameters' is not present");
    }

    /**
     * The maximum frequency with which AWS Config runs evaluations for a rule.
     * 
     */
    @PolicyResourceProperty(name="maximumExecutionFrequency", flag="unknown_maximumExecutionFrequency")
    private String value_maximumExecutionFrequency;
    private boolean unknown_maximumExecutionFrequency;
    public String maximumExecutionFrequency() {
        if (!unknown_maximumExecutionFrequency) return value_maximumExecutionFrequency;
        throw new UndeferrableValueException("Value 'RuleArgs.maximumExecutionFrequency' is not present");
    }

    /**
     * The name of the rule
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'RuleArgs.name' is not present");
    }

    /**
     * Scope defines which resources can trigger an evaluation for the rule. See Scope Below.
     * 
     */
    @PolicyResourceProperty(name="scope", flag="unknown_scope")
    private RuleScopeArgs value_scope;
    private boolean unknown_scope;
    public RuleScopeArgs scope() {
        if (!unknown_scope) return value_scope;
        throw new UndeferrableValueException("Value 'RuleArgs.scope' is not present");
    }

    /**
     * Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Source Below.
     * 
     */
    @PolicyResourceProperty(name="source", flag="unknown_source")
    private RuleSourceArgs value_source;
    private boolean unknown_source;
    public RuleSourceArgs source() {
        if (!unknown_source) return value_source;
        throw new UndeferrableValueException("Value 'RuleArgs.source' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'RuleArgs.tags' is not present");
    }

}
