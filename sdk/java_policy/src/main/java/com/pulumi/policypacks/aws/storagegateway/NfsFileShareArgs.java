// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.storagegateway;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.storagegateway.inputs.NfsFileShareCacheAttributesArgs;
import com.pulumi.policypacks.aws.storagegateway.inputs.NfsFileShareNfsFileShareDefaultsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:storagegateway/nfsFileShare:NfsFileShare")
public final class NfsFileShareArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The Amazon Resource Name (ARN) of the storage used for audit logs.
     * 
     */
    private UndeferrableValue<String> auditDestinationArn;

    public String auditDestinationArn() {
        if (auditDestinationArn == null) return null;
        return auditDestinationArn.getValue("NfsFileShareArgs.auditDestinationArn");
    }

    /**
     * The region of the S3 bucket used by the file share. Required when specifying `vpc_endpoint_dns_name`.
     * 
     */
    private UndeferrableValue<String> bucketRegion;

    public String bucketRegion() {
        if (bucketRegion == null) return null;
        return bucketRegion.getValue("NfsFileShareArgs.bucketRegion");
    }

    /**
     * Refresh cache information. see Cache Attributes for more details.
     * 
     */
    private UndeferrableValue<NfsFileShareCacheAttributesArgs> cacheAttributes;

    public NfsFileShareCacheAttributesArgs cacheAttributes() {
        if (cacheAttributes == null) return null;
        return cacheAttributes.getValue("NfsFileShareArgs.cacheAttributes");
    }

    /**
     * The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks. Set to `[&#34;0.0.0.0/0&#34;]` to not limit access. Minimum 1 item. Maximum 100 items.
     * 
     */
    private UndeferrableValue<List<String>> clientLists;

    public List<String> clientLists() {
        if (clientLists == null) return null;
        return clientLists.getValue("NfsFileShareArgs.clientLists");
    }

    /**
     * The default [storage class](https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_CreateNFSFileShare.html#StorageGateway-CreateNFSFileShare-request-DefaultStorageClass) for objects put into an Amazon S3 bucket by the file gateway. Defaults to `S3_STANDARD`.
     * 
     */
    private UndeferrableValue<String> defaultStorageClass;

    public String defaultStorageClass() {
        if (defaultStorageClass == null) return null;
        return defaultStorageClass.getValue("NfsFileShareArgs.defaultStorageClass");
    }

    /**
     * The name of the file share. Must be set if an S3 prefix name is set in `location_arn`.
     * 
     */
    private UndeferrableValue<String> fileShareName;

    public String fileShareName() {
        if (fileShareName == null) return null;
        return fileShareName.getValue("NfsFileShareArgs.fileShareName");
    }

    /**
     * Amazon Resource Name (ARN) of the file gateway.
     * 
     */
    private UndeferrableValue<String> gatewayArn;

    public String gatewayArn() {
        if (gatewayArn == null) return null;
        return gatewayArn.getValue("NfsFileShareArgs.gatewayArn");
    }

    /**
     * Boolean value that enables guessing of the MIME type for uploaded objects based on file extensions. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> guessMimeTypeEnabled;

    public Boolean guessMimeTypeEnabled() {
        if (guessMimeTypeEnabled == null) return null;
        return guessMimeTypeEnabled.getValue("NfsFileShareArgs.guessMimeTypeEnabled");
    }

    /**
     * Boolean value if `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> kmsEncrypted;

    public Boolean kmsEncrypted() {
        if (kmsEncrypted == null) return null;
        return kmsEncrypted.getValue("NfsFileShareArgs.kmsEncrypted");
    }

    /**
     * Amazon Resource Name (ARN) for KMS key used for Amazon S3 server side encryption. This value can only be set when `kms_encrypted` is true.
     * 
     */
    private UndeferrableValue<String> kmsKeyArn;

    public String kmsKeyArn() {
        if (kmsKeyArn == null) return null;
        return kmsKeyArn.getValue("NfsFileShareArgs.kmsKeyArn");
    }

    /**
     * The ARN of the backed storage used for storing file data.
     * 
     */
    private UndeferrableValue<String> locationArn;

    public String locationArn() {
        if (locationArn == null) return null;
        return locationArn.getValue("NfsFileShareArgs.locationArn");
    }

    /**
     * Nested argument with file share default values. More information below. see NFS File Share Defaults for more details.
     * 
     */
    private UndeferrableValue<NfsFileShareNfsFileShareDefaultsArgs> nfsFileShareDefaults;

    public NfsFileShareNfsFileShareDefaultsArgs nfsFileShareDefaults() {
        if (nfsFileShareDefaults == null) return null;
        return nfsFileShareDefaults.getValue("NfsFileShareArgs.nfsFileShareDefaults");
    }

    /**
     * The notification policy of the file share. For more information see the [AWS Documentation](https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_CreateNFSFileShare.html#StorageGateway-CreateNFSFileShare-request-NotificationPolicy). Default value is `{}`.
     * 
     */
    private UndeferrableValue<String> notificationPolicy;

    public String notificationPolicy() {
        if (notificationPolicy == null) return null;
        return notificationPolicy.getValue("NfsFileShareArgs.notificationPolicy");
    }

    /**
     * Access Control List permission for S3 objects. Defaults to `private`.
     * 
     */
    private UndeferrableValue<String> objectAcl;

    public String objectAcl() {
        if (objectAcl == null) return null;
        return objectAcl.getValue("NfsFileShareArgs.objectAcl");
    }

    /**
     * Boolean to indicate write status of file share. File share does not accept writes if `true`. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> readOnly;

    public Boolean readOnly() {
        if (readOnly == null) return null;
        return readOnly.getValue("NfsFileShareArgs.readOnly");
    }

    /**
     * Boolean who pays the cost of the request and the data download from the Amazon S3 bucket. Set this value to `true` if you want the requester to pay instead of the bucket owner. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> requesterPays;

    public Boolean requesterPays() {
        if (requesterPays == null) return null;
        return requesterPays.getValue("NfsFileShareArgs.requesterPays");
    }

    /**
     * The ARN of the AWS Identity and Access Management (IAM) role that a file gateway assumes when it accesses the underlying storage.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("NfsFileShareArgs.roleArn");
    }

    /**
     * Maps a user to anonymous user. Defaults to `RootSquash`. Valid values: `RootSquash` (only root is mapped to anonymous user), `NoSquash` (no one is mapped to anonymous user), `AllSquash` (everyone is mapped to anonymous user)
     * 
     */
    private UndeferrableValue<String> squash;

    public String squash() {
        if (squash == null) return null;
        return squash.getValue("NfsFileShareArgs.squash");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("NfsFileShareArgs.tags");
    }

    /**
     * The DNS name of the VPC endpoint for S3 PrivateLink.
     * 
     */
    private UndeferrableValue<String> vpcEndpointDnsName;

    public String vpcEndpointDnsName() {
        if (vpcEndpointDnsName == null) return null;
        return vpcEndpointDnsName.getValue("NfsFileShareArgs.vpcEndpointDnsName");
    }

}
