// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lb.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.lb.inputs.ListenerRuleActionAuthenticateCognitoArgs;
import com.pulumi.policypacks.aws.lb.inputs.ListenerRuleActionAuthenticateOidcArgs;
import com.pulumi.policypacks.aws.lb.inputs.ListenerRuleActionFixedResponseArgs;
import com.pulumi.policypacks.aws.lb.inputs.ListenerRuleActionForwardArgs;
import com.pulumi.policypacks.aws.lb.inputs.ListenerRuleActionRedirectArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ListenerRuleActionArgs {

    /**
     * Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
     * 
     */
    @PolicyResourceProperty(name="authenticateCognito", flag="unknown_authenticateCognito")
    private ListenerRuleActionAuthenticateCognitoArgs value_authenticateCognito;
    private boolean unknown_authenticateCognito;
    public ListenerRuleActionAuthenticateCognitoArgs authenticateCognito() {
        if (!unknown_authenticateCognito) return value_authenticateCognito;
        throw new UndeferrableValueException("Value 'ListenerRuleActionArgs.authenticateCognito' is not present");
    }

    /**
     * Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
     * 
     */
    @PolicyResourceProperty(name="authenticateOidc", flag="unknown_authenticateOidc")
    private ListenerRuleActionAuthenticateOidcArgs value_authenticateOidc;
    private boolean unknown_authenticateOidc;
    public ListenerRuleActionAuthenticateOidcArgs authenticateOidc() {
        if (!unknown_authenticateOidc) return value_authenticateOidc;
        throw new UndeferrableValueException("Value 'ListenerRuleActionArgs.authenticateOidc' is not present");
    }

    /**
     * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
     * 
     */
    @PolicyResourceProperty(name="fixedResponse", flag="unknown_fixedResponse")
    private ListenerRuleActionFixedResponseArgs value_fixedResponse;
    private boolean unknown_fixedResponse;
    public ListenerRuleActionFixedResponseArgs fixedResponse() {
        if (!unknown_fixedResponse) return value_fixedResponse;
        throw new UndeferrableValueException("Value 'ListenerRuleActionArgs.fixedResponse' is not present");
    }

    /**
     * Configuration block for creating an action that distributes requests among one or more target groups.
     * Specify only if `type` is `forward`.
     * Cannot be specified with `target_group_arn`.
     * 
     */
    @PolicyResourceProperty(name="forward", flag="unknown_forward")
    private ListenerRuleActionForwardArgs value_forward;
    private boolean unknown_forward;
    public ListenerRuleActionForwardArgs forward() {
        if (!unknown_forward) return value_forward;
        throw new UndeferrableValueException("Value 'ListenerRuleActionArgs.forward' is not present");
    }

    /**
     * Order for the action.
     * The action with the lowest value for order is performed first.
     * Valid values are between `1` and `50000`.
     * Defaults to the position in the list of actions.
     * 
     */
    @PolicyResourceProperty(name="order", flag="unknown_order")
    private Integer value_order;
    private boolean unknown_order;
    public Integer order() {
        if (!unknown_order) return value_order;
        throw new UndeferrableValueException("Value 'ListenerRuleActionArgs.order' is not present");
    }

    /**
     * Information for creating a redirect action. Required if `type` is `redirect`.
     * 
     */
    @PolicyResourceProperty(name="redirect", flag="unknown_redirect")
    private ListenerRuleActionRedirectArgs value_redirect;
    private boolean unknown_redirect;
    public ListenerRuleActionRedirectArgs redirect() {
        if (!unknown_redirect) return value_redirect;
        throw new UndeferrableValueException("Value 'ListenerRuleActionArgs.redirect' is not present");
    }

    /**
     * ARN of the Target Group to which to route traffic.
     * Specify only if `type` is `forward` and you want to route to a single target group.
     * To route to one or more target groups, use a `forward` block instead.
     * Cannot be specified with `forward`.
     * 
     */
    @PolicyResourceProperty(name="targetGroupArn", flag="unknown_targetGroupArn")
    private String value_targetGroupArn;
    private boolean unknown_targetGroupArn;
    public String targetGroupArn() {
        if (!unknown_targetGroupArn) return value_targetGroupArn;
        throw new UndeferrableValueException("Value 'ListenerRuleActionArgs.targetGroupArn' is not present");
    }

    /**
     * The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'ListenerRuleActionArgs.type' is not present");
    }

}
