// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dms.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class EndpointKafkaSettingsArgs {

    /**
     * Kafka broker location. Specify in the form broker-hostname-or-ip:port.
     * 
     */
    private UndeferrableValue<String> broker;

    public String broker() {
        if (broker == null) return null;
        return broker.getValue("EndpointKafkaSettingsArgs.broker");
    }

    /**
     * Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> includeControlDetails;

    public Boolean includeControlDetails() {
        if (includeControlDetails == null) return null;
        return includeControlDetails.getValue("EndpointKafkaSettingsArgs.includeControlDetails");
    }

    /**
     * Include NULL and empty columns for records migrated to the endpoint. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> includeNullAndEmpty;

    public Boolean includeNullAndEmpty() {
        if (includeNullAndEmpty == null) return null;
        return includeNullAndEmpty.getValue("EndpointKafkaSettingsArgs.includeNullAndEmpty");
    }

    /**
     * Shows the partition value within the Kafka message output unless the partition type is `schema-table-type`. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> includePartitionValue;

    public Boolean includePartitionValue() {
        if (includePartitionValue == null) return null;
        return includePartitionValue.getValue("EndpointKafkaSettingsArgs.includePartitionValue");
    }

    /**
     * Includes any data definition language (DDL) operations that change the table in the control data, such as `rename-table`, `drop-table`, `add-column`, `drop-column`, and `rename-column`. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> includeTableAlterOperations;

    public Boolean includeTableAlterOperations() {
        if (includeTableAlterOperations == null) return null;
        return includeTableAlterOperations.getValue("EndpointKafkaSettingsArgs.includeTableAlterOperations");
    }

    /**
     * Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for `transaction_id`, previous `transaction_id`, and `transaction_record_id` (the record offset within a transaction). Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> includeTransactionDetails;

    public Boolean includeTransactionDetails() {
        if (includeTransactionDetails == null) return null;
        return includeTransactionDetails.getValue("EndpointKafkaSettingsArgs.includeTransactionDetails");
    }

    /**
     * Output format for the records created on the endpoint. Message format is `JSON` (default) or `JSON_UNFORMATTED` (a single line with no tab).
     * 
     */
    private UndeferrableValue<String> messageFormat;

    public String messageFormat() {
        if (messageFormat == null) return null;
        return messageFormat.getValue("EndpointKafkaSettingsArgs.messageFormat");
    }

    /**
     * Maximum size in bytes for records created on the endpoint Default is `1,000,000`.
     * 
     */
    private UndeferrableValue<Integer> messageMaxBytes;

    public Integer messageMaxBytes() {
        if (messageMaxBytes == null) return null;
        return messageMaxBytes.getValue("EndpointKafkaSettingsArgs.messageMaxBytes");
    }

    /**
     * Set this optional parameter to true to avoid adding a &#39;0x&#39; prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a &#39;0x&#39; prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the `no_hex_prefix` endpoint setting to enable migration of RAW data type columns without adding the `&#39;0x&#39;` prefix.
     * 
     */
    private UndeferrableValue<Boolean> noHexPrefix;

    public Boolean noHexPrefix() {
        if (noHexPrefix == null) return null;
        return noHexPrefix.getValue("EndpointKafkaSettingsArgs.noHexPrefix");
    }

    /**
     * Prefixes schema and table names to partition values, when the partition type is `primary-key-type`. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> partitionIncludeSchemaTable;

    public Boolean partitionIncludeSchemaTable() {
        if (partitionIncludeSchemaTable == null) return null;
        return partitionIncludeSchemaTable.getValue("EndpointKafkaSettingsArgs.partitionIncludeSchemaTable");
    }

    /**
     * For SASL/SSL authentication, AWS DMS supports the `scram-sha-512` mechanism by default. AWS DMS versions 3.5.0 and later also support the PLAIN mechanism. To use the PLAIN mechanism, set this parameter to `plain`.
     * 
     */
    private UndeferrableValue<String> saslMechanism;

    public String saslMechanism() {
        if (saslMechanism == null) return null;
        return saslMechanism.getValue("EndpointKafkaSettingsArgs.saslMechanism");
    }

    /**
     * Secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
     * 
     */
    private UndeferrableValue<String> saslPassword;

    public String saslPassword() {
        if (saslPassword == null) return null;
        return saslPassword.getValue("EndpointKafkaSettingsArgs.saslPassword");
    }

    /**
     * Secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
     * 
     */
    private UndeferrableValue<String> saslUsername;

    public String saslUsername() {
        if (saslUsername == null) return null;
        return saslUsername.getValue("EndpointKafkaSettingsArgs.saslUsername");
    }

    /**
     * Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include `ssl-encryption`, `ssl-authentication`, and `sasl-ssl`. `sasl-ssl` requires `sasl_username` and `sasl_password`.
     * 
     */
    private UndeferrableValue<String> securityProtocol;

    public String securityProtocol() {
        if (securityProtocol == null) return null;
        return securityProtocol.getValue("EndpointKafkaSettingsArgs.securityProtocol");
    }

    /**
     * ARN for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.
     * 
     */
    private UndeferrableValue<String> sslCaCertificateArn;

    public String sslCaCertificateArn() {
        if (sslCaCertificateArn == null) return null;
        return sslCaCertificateArn.getValue("EndpointKafkaSettingsArgs.sslCaCertificateArn");
    }

    /**
     * ARN of the client certificate used to securely connect to a Kafka target endpoint.
     * 
     */
    private UndeferrableValue<String> sslClientCertificateArn;

    public String sslClientCertificateArn() {
        if (sslClientCertificateArn == null) return null;
        return sslClientCertificateArn.getValue("EndpointKafkaSettingsArgs.sslClientCertificateArn");
    }

    /**
     * ARN for the client private key used to securely connect to a Kafka target endpoint.
     * 
     */
    private UndeferrableValue<String> sslClientKeyArn;

    public String sslClientKeyArn() {
        if (sslClientKeyArn == null) return null;
        return sslClientKeyArn.getValue("EndpointKafkaSettingsArgs.sslClientKeyArn");
    }

    /**
     * Password for the client private key used to securely connect to a Kafka target endpoint.
     * 
     */
    private UndeferrableValue<String> sslClientKeyPassword;

    public String sslClientKeyPassword() {
        if (sslClientKeyPassword == null) return null;
        return sslClientKeyPassword.getValue("EndpointKafkaSettingsArgs.sslClientKeyPassword");
    }

    /**
     * Kafka topic for migration. Default is `kafka-default-topic`.
     * 
     */
    private UndeferrableValue<String> topic;

    public String topic() {
        if (topic == null) return null;
        return topic.getValue("EndpointKafkaSettingsArgs.topic");
    }

}
