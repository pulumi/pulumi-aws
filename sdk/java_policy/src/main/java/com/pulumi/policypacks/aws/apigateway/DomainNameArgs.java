// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigateway;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.apigateway.inputs.DomainNameEndpointConfigurationArgs;
import com.pulumi.policypacks.aws.apigateway.inputs.DomainNameMutualTlsAuthenticationArgs;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apigateway/domainName:DomainName")
public final class DomainNameArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificate_name`, `certificate_body`, `certificate_chain`, `certificate_private_key`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    private UndeferrableValue<String> certificateArn;

    public String certificateArn() {
        if (certificateArn == null) return null;
        return certificateArn.getValue("DomainNameArgs.certificateArn");
    }

    /**
     * Certificate issued for the domain name being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    private UndeferrableValue<String> certificateBody;

    public String certificateBody() {
        if (certificateBody == null) return null;
        return certificateBody.getValue("DomainNameArgs.certificateBody");
    }

    /**
     * Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    private UndeferrableValue<String> certificateChain;

    public String certificateChain() {
        if (certificateChain == null) return null;
        return certificateChain.getValue("DomainNameArgs.certificateChain");
    }

    /**
     * Unique name to use when registering this certificate as an IAM server certificate. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`. Required if `certificate_arn` is not set.
     * 
     */
    private UndeferrableValue<String> certificateName;

    public String certificateName() {
        if (certificateName == null) return null;
        return certificateName.getValue("DomainNameArgs.certificateName");
    }

    /**
     * Private key associated with the domain certificate given in `certificate_body`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    private UndeferrableValue<String> certificatePrivateKey;

    public String certificatePrivateKey() {
        if (certificatePrivateKey == null) return null;
        return certificatePrivateKey.getValue("DomainNameArgs.certificatePrivateKey");
    }

    /**
     * Fully-qualified domain name to register.
     * 
     */
    private UndeferrableValue<String> domainName;

    public String domainName() {
        if (domainName == null) return null;
        return domainName.getValue("DomainNameArgs.domainName");
    }

    /**
     * Configuration block defining API endpoint information including type. See below.
     * 
     */
    private UndeferrableValue<DomainNameEndpointConfigurationArgs> endpointConfiguration;

    public DomainNameEndpointConfigurationArgs endpointConfiguration() {
        if (endpointConfiguration == null) return null;
        return endpointConfiguration.getValue("DomainNameArgs.endpointConfiguration");
    }

    /**
     * Mutual TLS authentication configuration for the domain name. See below.
     * 
     */
    private UndeferrableValue<DomainNameMutualTlsAuthenticationArgs> mutualTlsAuthentication;

    public DomainNameMutualTlsAuthenticationArgs mutualTlsAuthentication() {
        if (mutualTlsAuthentication == null) return null;
        return mutualTlsAuthentication.getValue("DomainNameArgs.mutualTlsAuthentication");
    }

    /**
     * ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificate_arn` is issued via an ACM Private CA or `mutual_tls_authentication` is configured with an ACM-imported certificate.)
     * 
     */
    private UndeferrableValue<String> ownershipVerificationCertificateArn;

    public String ownershipVerificationCertificateArn() {
        if (ownershipVerificationCertificateArn == null) return null;
        return ownershipVerificationCertificateArn.getValue("DomainNameArgs.ownershipVerificationCertificateArn");
    }

    /**
     * A stringified JSON policy document that applies to the execute-api service for this DomainName regardless of the caller and Method configuration. Supported only for private custom domain names.
     * 
     */
    private UndeferrableValue<String> policy;

    public String policy() {
        if (policy == null) return null;
        return policy.getValue("DomainNameArgs.policy");
    }

    /**
     * ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and `certificate_private_key`.
     * 
     * When uploading a certificate, the following arguments are supported:
     * 
     */
    private UndeferrableValue<String> regionalCertificateArn;

    public String regionalCertificateArn() {
        if (regionalCertificateArn == null) return null;
        return regionalCertificateArn.getValue("DomainNameArgs.regionalCertificateArn");
    }

    /**
     * User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and `certificate_private_key`.
     * 
     */
    private UndeferrableValue<String> regionalCertificateName;

    public String regionalCertificateName() {
        if (regionalCertificateName == null) return null;
        return regionalCertificateName.getValue("DomainNameArgs.regionalCertificateName");
    }

    /**
     * Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
     * 
     */
    private UndeferrableValue<String> securityPolicy;

    public String securityPolicy() {
        if (securityPolicy == null) return null;
        return securityPolicy.getValue("DomainNameArgs.securityPolicy");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * When referencing an AWS-managed certificate, the following arguments are supported:
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DomainNameArgs.tags");
    }

}
