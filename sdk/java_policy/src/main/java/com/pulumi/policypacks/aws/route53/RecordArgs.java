// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.route53;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.route53.enums.RecordType;
import com.pulumi.policypacks.aws.route53.inputs.RecordAliasArgs;
import com.pulumi.policypacks.aws.route53.inputs.RecordCidrRoutingPolicyArgs;
import com.pulumi.policypacks.aws.route53.inputs.RecordFailoverRoutingPolicyArgs;
import com.pulumi.policypacks.aws.route53.inputs.RecordGeolocationRoutingPolicyArgs;
import com.pulumi.policypacks.aws.route53.inputs.RecordGeoproximityRoutingPolicyArgs;
import com.pulumi.policypacks.aws.route53.inputs.RecordLatencyRoutingPolicyArgs;
import com.pulumi.policypacks.aws.route53.inputs.RecordWeightedRoutingPolicyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:route53/record:Record")
public final class RecordArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * An alias block. Conflicts with `ttl` &amp; `records`.
     * Documented below.
     * 
     */
    private UndeferrableValue<List<RecordAliasArgs>> aliases;

    public List<RecordAliasArgs> aliases() {
        if (aliases == null) return null;
        return aliases.getValue("RecordArgs.aliases");
    }

    /**
     * Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.
     * 
     * Exactly one of `records` or `alias` must be specified: this determines whether it&#39;s an alias record.
     * 
     */
    private UndeferrableValue<Boolean> allowOverwrite;

    public Boolean allowOverwrite() {
        if (allowOverwrite == null) return null;
        return allowOverwrite.getValue("RecordArgs.allowOverwrite");
    }

    /**
     * A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.
     * 
     */
    private UndeferrableValue<RecordCidrRoutingPolicyArgs> cidrRoutingPolicy;

    public RecordCidrRoutingPolicyArgs cidrRoutingPolicy() {
        if (cidrRoutingPolicy == null) return null;
        return cidrRoutingPolicy.getValue("RecordArgs.cidrRoutingPolicy");
    }

    /**
     * A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.
     * 
     */
    private UndeferrableValue<List<RecordFailoverRoutingPolicyArgs>> failoverRoutingPolicies;

    public List<RecordFailoverRoutingPolicyArgs> failoverRoutingPolicies() {
        if (failoverRoutingPolicies == null) return null;
        return failoverRoutingPolicies.getValue("RecordArgs.failoverRoutingPolicies");
    }

    /**
     * A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.
     * 
     */
    private UndeferrableValue<List<RecordGeolocationRoutingPolicyArgs>> geolocationRoutingPolicies;

    public List<RecordGeolocationRoutingPolicyArgs> geolocationRoutingPolicies() {
        if (geolocationRoutingPolicies == null) return null;
        return geolocationRoutingPolicies.getValue("RecordArgs.geolocationRoutingPolicies");
    }

    /**
     * A block indicating a routing policy based on the geoproximity of the requestor. Conflicts with any other routing policy. Documented below.
     * 
     */
    private UndeferrableValue<RecordGeoproximityRoutingPolicyArgs> geoproximityRoutingPolicy;

    public RecordGeoproximityRoutingPolicyArgs geoproximityRoutingPolicy() {
        if (geoproximityRoutingPolicy == null) return null;
        return geoproximityRoutingPolicy.getValue("RecordArgs.geoproximityRoutingPolicy");
    }

    /**
     * The health check the record should be associated with.
     * 
     */
    private UndeferrableValue<String> healthCheckId;

    public String healthCheckId() {
        if (healthCheckId == null) return null;
        return healthCheckId.getValue("RecordArgs.healthCheckId");
    }

    /**
     * A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.
     * 
     */
    private UndeferrableValue<List<RecordLatencyRoutingPolicyArgs>> latencyRoutingPolicies;

    public List<RecordLatencyRoutingPolicyArgs> latencyRoutingPolicies() {
        if (latencyRoutingPolicies == null) return null;
        return latencyRoutingPolicies.getValue("RecordArgs.latencyRoutingPolicies");
    }

    /**
     * Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.
     * 
     */
    private UndeferrableValue<Boolean> multivalueAnswerRoutingPolicy;

    public Boolean multivalueAnswerRoutingPolicy() {
        if (multivalueAnswerRoutingPolicy == null) return null;
        return multivalueAnswerRoutingPolicy.getValue("RecordArgs.multivalueAnswerRoutingPolicy");
    }

    /**
     * The name of the record.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("RecordArgs.name");
    }

    /**
     * A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\&#34;\&#34;` inside the provider configuration string (e.g., `&#34;first255characters\&#34;\&#34;morecharacters&#34;`).
     * 
     */
    private UndeferrableValue<List<String>> records;

    public List<String> records() {
        if (records == null) return null;
        return records.getValue("RecordArgs.records");
    }

    /**
     * Unique identifier to differentiate records with routing policies from one another. Required if using `cidr_routing_policy`, `failover_routing_policy`, `geolocation_routing_policy`,`geoproximity_routing_policy`, `latency_routing_policy`, `multivalue_answer_routing_policy`, or `weighted_routing_policy`.
     * 
     */
    private UndeferrableValue<String> setIdentifier;

    public String setIdentifier() {
        if (setIdentifier == null) return null;
        return setIdentifier.getValue("RecordArgs.setIdentifier");
    }

    /**
     * The TTL of the record.
     * 
     */
    private UndeferrableValue<Integer> ttl;

    public Integer ttl() {
        if (ttl == null) return null;
        return ttl.getValue("RecordArgs.ttl");
    }

    /**
     * The record type. Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV` and `TXT`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("RecordArgs.type");
    }

    /**
     * A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.
     * 
     */
    private UndeferrableValue<List<RecordWeightedRoutingPolicyArgs>> weightedRoutingPolicies;

    public List<RecordWeightedRoutingPolicyArgs> weightedRoutingPolicies() {
        if (weightedRoutingPolicies == null) return null;
        return weightedRoutingPolicies.getValue("RecordArgs.weightedRoutingPolicies");
    }

    /**
     * The ID of the hosted zone to contain this record.
     * 
     */
    private UndeferrableValue<String> zoneId;

    public String zoneId() {
        if (zoneId == null) return null;
        return zoneId.getValue("RecordArgs.zoneId");
    }

}
