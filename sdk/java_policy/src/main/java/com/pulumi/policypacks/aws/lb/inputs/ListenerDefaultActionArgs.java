// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lb.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.lb.inputs.ListenerDefaultActionAuthenticateCognitoArgs;
import com.pulumi.policypacks.aws.lb.inputs.ListenerDefaultActionAuthenticateOidcArgs;
import com.pulumi.policypacks.aws.lb.inputs.ListenerDefaultActionFixedResponseArgs;
import com.pulumi.policypacks.aws.lb.inputs.ListenerDefaultActionForwardArgs;
import com.pulumi.policypacks.aws.lb.inputs.ListenerDefaultActionRedirectArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class ListenerDefaultActionArgs {

    /**
     * Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. See below.
     * 
     */
    private UndeferrableValue<ListenerDefaultActionAuthenticateCognitoArgs> authenticateCognito;

    public ListenerDefaultActionAuthenticateCognitoArgs authenticateCognito() {
        if (authenticateCognito == null) return null;
        return authenticateCognito.getValue("ListenerDefaultActionArgs.authenticateCognito");
    }

    /**
     * Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. See below.
     * 
     */
    private UndeferrableValue<ListenerDefaultActionAuthenticateOidcArgs> authenticateOidc;

    public ListenerDefaultActionAuthenticateOidcArgs authenticateOidc() {
        if (authenticateOidc == null) return null;
        return authenticateOidc.getValue("ListenerDefaultActionArgs.authenticateOidc");
    }

    /**
     * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
     * 
     */
    private UndeferrableValue<ListenerDefaultActionFixedResponseArgs> fixedResponse;

    public ListenerDefaultActionFixedResponseArgs fixedResponse() {
        if (fixedResponse == null) return null;
        return fixedResponse.getValue("ListenerDefaultActionArgs.fixedResponse");
    }

    /**
     * Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. See below.
     * 
     */
    private UndeferrableValue<ListenerDefaultActionForwardArgs> forward;

    public ListenerDefaultActionForwardArgs forward() {
        if (forward == null) return null;
        return forward.getValue("ListenerDefaultActionArgs.forward");
    }

    /**
     * Order for the action. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`. Defaults to the position in the list of actions.
     * 
     */
    private UndeferrableValue<Integer> order;

    public Integer order() {
        if (order == null) return null;
        return order.getValue("ListenerDefaultActionArgs.order");
    }

    /**
     * Configuration block for creating a redirect action. Required if `type` is `redirect`. See below.
     * 
     */
    private UndeferrableValue<ListenerDefaultActionRedirectArgs> redirect;

    public ListenerDefaultActionRedirectArgs redirect() {
        if (redirect == null) return null;
        return redirect.getValue("ListenerDefaultActionArgs.redirect");
    }

    /**
     * ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead. Can be specified with `forward` but ARNs must match.
     * 
     */
    private UndeferrableValue<String> targetGroupArn;

    public String targetGroupArn() {
        if (targetGroupArn == null) return null;
        return targetGroupArn.getValue("ListenerDefaultActionArgs.targetGroupArn");
    }

    /**
     * Type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("ListenerDefaultActionArgs.type");
    }

}
