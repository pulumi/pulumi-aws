// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dynamodb.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


public final class TableReplicaArgs {

    /**
     * ARN of the table
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'TableReplicaArgs.arn' is not present");
    }

    /**
     * ARN of the CMK that should be used for the AWS KMS encryption.
     * This argument should only be used if the key is different from the default KMS-managed DynamoDB key, `alias/aws/dynamodb`.
     * **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
     * **Note:** Changing this value will recreate the replica.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyArn", flag="unknown_kmsKeyArn")
    private String value_kmsKeyArn;
    private boolean unknown_kmsKeyArn;
    public String kmsKeyArn() {
        if (!unknown_kmsKeyArn) return value_kmsKeyArn;
        throw new UndeferrableValueException("Value 'TableReplicaArgs.kmsKeyArn' is not present");
    }

    /**
     * Whether to enable Point In Time Recovery for the replica. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="pointInTimeRecovery", flag="unknown_pointInTimeRecovery")
    private Boolean value_pointInTimeRecovery;
    private boolean unknown_pointInTimeRecovery;
    public Boolean pointInTimeRecovery() {
        if (!unknown_pointInTimeRecovery) return value_pointInTimeRecovery;
        throw new UndeferrableValueException("Value 'TableReplicaArgs.pointInTimeRecovery' is not present");
    }

    /**
     * Whether to propagate the global table&#39;s tags to a replica.
     * Default is `false`.
     * Changes to tags only move in one direction: from global (source) to replica.
     * Tag drift on a replica will not trigger an update.
     * Tag changes on the global table are propagated to replicas.
     * Changing from `true` to `false` on a subsequent `apply` leaves replica tags as-is and no longer manages them.
     * 
     */
    @PolicyResourceProperty(name="propagateTags", flag="unknown_propagateTags")
    private Boolean value_propagateTags;
    private boolean unknown_propagateTags;
    public Boolean propagateTags() {
        if (!unknown_propagateTags) return value_propagateTags;
        throw new UndeferrableValueException("Value 'TableReplicaArgs.propagateTags' is not present");
    }

    /**
     * Region name of the replica.
     * 
     */
    @PolicyResourceProperty(name="regionName", flag="unknown_regionName")
    private String value_regionName;
    private boolean unknown_regionName;
    public String regionName() {
        if (!unknown_regionName) return value_regionName;
        throw new UndeferrableValueException("Value 'TableReplicaArgs.regionName' is not present");
    }

    /**
     * ARN of the Table Stream. Only available when `stream_enabled = true`
     * 
     */
    @PolicyResourceProperty(name="streamArn", flag="unknown_streamArn")
    private String value_streamArn;
    private boolean unknown_streamArn;
    public String streamArn() {
        if (!unknown_streamArn) return value_streamArn;
        throw new UndeferrableValueException("Value 'TableReplicaArgs.streamArn' is not present");
    }

    /**
     * Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `stream_enabled = true`.
     * 
     */
    @PolicyResourceProperty(name="streamLabel", flag="unknown_streamLabel")
    private String value_streamLabel;
    private boolean unknown_streamLabel;
    public String streamLabel() {
        if (!unknown_streamLabel) return value_streamLabel;
        throw new UndeferrableValueException("Value 'TableReplicaArgs.streamLabel' is not present");
    }

}
