// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cognito;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cognito.inputs.ManagedUserPoolClientAnalyticsConfigurationArgs;
import com.pulumi.policypacks.aws.cognito.inputs.ManagedUserPoolClientTokenValidityUnitsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cognito/managedUserPoolClient:ManagedUserPoolClient")
public final class ManagedUserPoolClientArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Time limit, between 5 minutes and 1 day, after which the access token is no longer valid and cannot be used. By default, the unit is hours. The unit can be overridden by a value in `token_validity_units.access_token`.
     * 
     */
    @PolicyResourceProperty(name="accessTokenValidity", flag="unknown_accessTokenValidity")
    private Integer value_accessTokenValidity;
    private boolean unknown_accessTokenValidity;
    public Integer accessTokenValidity() {
        if (!unknown_accessTokenValidity) return value_accessTokenValidity;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.accessTokenValidity' is not present");
    }

    /**
     * List of allowed OAuth flows, including `code`, `implicit`, and `client_credentials`. `allowed_oauth_flows_user_pool_client` must be set to `true` before you can configure this option.
     * 
     */
    @PolicyResourceProperty(name="allowedOauthFlows", flag="unknown_allowedOauthFlows")
    private List<String> value_allowedOauthFlows;
    private boolean unknown_allowedOauthFlows;
    public List<String> allowedOauthFlows() {
        if (!unknown_allowedOauthFlows) return value_allowedOauthFlows;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.allowedOauthFlows' is not present");
    }

    /**
     * Whether the client is allowed to use OAuth 2.0 features. `allowed_oauth_flows_user_pool_client` must be set to `true` before you can configure the following arguments: `callback_urls`, `logout_urls`, `allowed_oauth_scopes` and `allowed_oauth_flows`.
     * 
     */
    @PolicyResourceProperty(name="allowedOauthFlowsUserPoolClient", flag="unknown_allowedOauthFlowsUserPoolClient")
    private Boolean value_allowedOauthFlowsUserPoolClient;
    private boolean unknown_allowedOauthFlowsUserPoolClient;
    public Boolean allowedOauthFlowsUserPoolClient() {
        if (!unknown_allowedOauthFlowsUserPoolClient) return value_allowedOauthFlowsUserPoolClient;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.allowedOauthFlowsUserPoolClient' is not present");
    }

    /**
     * List of allowed OAuth scopes, including `phone`, `email`, `openid`, `profile`, and `aws.cognito.signin.user.admin`. `allowed_oauth_flows_user_pool_client` must be set to `true` before you can configure this option.
     * 
     */
    @PolicyResourceProperty(name="allowedOauthScopes", flag="unknown_allowedOauthScopes")
    private List<String> value_allowedOauthScopes;
    private boolean unknown_allowedOauthScopes;
    public List<String> allowedOauthScopes() {
        if (!unknown_allowedOauthScopes) return value_allowedOauthScopes;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.allowedOauthScopes' is not present");
    }

    /**
     * Configuration block for Amazon Pinpoint analytics that collects metrics for this user pool. See details below.
     * 
     */
    @PolicyResourceProperty(name="analyticsConfiguration", flag="unknown_analyticsConfiguration")
    private ManagedUserPoolClientAnalyticsConfigurationArgs value_analyticsConfiguration;
    private boolean unknown_analyticsConfiguration;
    public ManagedUserPoolClientAnalyticsConfigurationArgs analyticsConfiguration() {
        if (!unknown_analyticsConfiguration) return value_analyticsConfiguration;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.analyticsConfiguration' is not present");
    }

    /**
     * Duration, in minutes, of the session token created by Amazon Cognito for each API request in an authentication flow. The session token must be responded to by the native user of the user pool before it expires. Valid values for `auth_session_validity` are between `3` and `15`, with a default value of `3`.
     * 
     */
    @PolicyResourceProperty(name="authSessionValidity", flag="unknown_authSessionValidity")
    private Integer value_authSessionValidity;
    private boolean unknown_authSessionValidity;
    public Integer authSessionValidity() {
        if (!unknown_authSessionValidity) return value_authSessionValidity;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.authSessionValidity' is not present");
    }

    /**
     * List of allowed callback URLs for the identity providers. `allowed_oauth_flows_user_pool_client` must be set to `true` before you can configure this option.
     * 
     */
    @PolicyResourceProperty(name="callbackUrls", flag="unknown_callbackUrls")
    private List<String> value_callbackUrls;
    private boolean unknown_callbackUrls;
    public List<String> callbackUrls() {
        if (!unknown_callbackUrls) return value_callbackUrls;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.callbackUrls' is not present");
    }

    /**
     * Default redirect URI and must be included in the list of callback URLs.
     * 
     */
    @PolicyResourceProperty(name="defaultRedirectUri", flag="unknown_defaultRedirectUri")
    private String value_defaultRedirectUri;
    private boolean unknown_defaultRedirectUri;
    public String defaultRedirectUri() {
        if (!unknown_defaultRedirectUri) return value_defaultRedirectUri;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.defaultRedirectUri' is not present");
    }

    /**
     * Enables the propagation of additional user context data.
     * 
     */
    @PolicyResourceProperty(name="enablePropagateAdditionalUserContextData", flag="unknown_enablePropagateAdditionalUserContextData")
    private Boolean value_enablePropagateAdditionalUserContextData;
    private boolean unknown_enablePropagateAdditionalUserContextData;
    public Boolean enablePropagateAdditionalUserContextData() {
        if (!unknown_enablePropagateAdditionalUserContextData) return value_enablePropagateAdditionalUserContextData;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.enablePropagateAdditionalUserContextData' is not present");
    }

    /**
     * Enables or disables token revocation.
     * 
     */
    @PolicyResourceProperty(name="enableTokenRevocation", flag="unknown_enableTokenRevocation")
    private Boolean value_enableTokenRevocation;
    private boolean unknown_enableTokenRevocation;
    public Boolean enableTokenRevocation() {
        if (!unknown_enableTokenRevocation) return value_enableTokenRevocation;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.enableTokenRevocation' is not present");
    }

    /**
     * List of authentication flows. The available options include ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, USER_PASSWORD_AUTH, ALLOW_ADMIN_USER_PASSWORD_AUTH, ALLOW_CUSTOM_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_USER_SRP_AUTH, and ALLOW_REFRESH_TOKEN_AUTH.
     * 
     */
    @PolicyResourceProperty(name="explicitAuthFlows", flag="unknown_explicitAuthFlows")
    private List<String> value_explicitAuthFlows;
    private boolean unknown_explicitAuthFlows;
    public List<String> explicitAuthFlows() {
        if (!unknown_explicitAuthFlows) return value_explicitAuthFlows;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.explicitAuthFlows' is not present");
    }

    /**
     * Time limit, between 5 minutes and 1 day, after which the ID token is no longer valid and cannot be used. By default, the unit is hours. The unit can be overridden by a value in `token_validity_units.id_token`.
     * 
     */
    @PolicyResourceProperty(name="idTokenValidity", flag="unknown_idTokenValidity")
    private Integer value_idTokenValidity;
    private boolean unknown_idTokenValidity;
    public Integer idTokenValidity() {
        if (!unknown_idTokenValidity) return value_idTokenValidity;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.idTokenValidity' is not present");
    }

    /**
     * List of allowed logout URLs for the identity providers. `allowed_oauth_flows_user_pool_client` must be set to `true` before you can configure this option.
     * 
     */
    @PolicyResourceProperty(name="logoutUrls", flag="unknown_logoutUrls")
    private List<String> value_logoutUrls;
    private boolean unknown_logoutUrls;
    public List<String> logoutUrls() {
        if (!unknown_logoutUrls) return value_logoutUrls;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.logoutUrls' is not present");
    }

    /**
     * Regular expression that matches the name of the existing User Pool Client to be managed. It must only match one User Pool Client.
     * 
     */
    @PolicyResourceProperty(name="namePattern", flag="unknown_namePattern")
    private String value_namePattern;
    private boolean unknown_namePattern;
    public String namePattern() {
        if (!unknown_namePattern) return value_namePattern;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.namePattern' is not present");
    }

    /**
     * String that matches the beginning of the name of the  existing User Pool Client to be managed. It must match only one User Pool Client.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.namePrefix' is not present");
    }

    /**
     * Setting determines the errors and responses returned by Cognito APIs when a user does not exist in the user pool during authentication, account confirmation, and password recovery.
     * 
     */
    @PolicyResourceProperty(name="preventUserExistenceErrors", flag="unknown_preventUserExistenceErrors")
    private String value_preventUserExistenceErrors;
    private boolean unknown_preventUserExistenceErrors;
    public String preventUserExistenceErrors() {
        if (!unknown_preventUserExistenceErrors) return value_preventUserExistenceErrors;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.preventUserExistenceErrors' is not present");
    }

    /**
     * List of user pool attributes that the application client can read from.
     * 
     */
    @PolicyResourceProperty(name="readAttributes", flag="unknown_readAttributes")
    private List<String> value_readAttributes;
    private boolean unknown_readAttributes;
    public List<String> readAttributes() {
        if (!unknown_readAttributes) return value_readAttributes;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.readAttributes' is not present");
    }

    /**
     * Time limit, between 60 minutes and 10 years, after which the refresh token is no longer valid and cannot be used. By default, the unit is days. The unit can be overridden by a value in `token_validity_units.refresh_token`.
     * 
     */
    @PolicyResourceProperty(name="refreshTokenValidity", flag="unknown_refreshTokenValidity")
    private Integer value_refreshTokenValidity;
    private boolean unknown_refreshTokenValidity;
    public Integer refreshTokenValidity() {
        if (!unknown_refreshTokenValidity) return value_refreshTokenValidity;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.refreshTokenValidity' is not present");
    }

    /**
     * List of provider names for the identity providers that are supported on this client. It uses the `provider_name` attribute of the `aws.cognito.IdentityProvider` resource(s), or the equivalent string(s).
     * 
     */
    @PolicyResourceProperty(name="supportedIdentityProviders", flag="unknown_supportedIdentityProviders")
    private List<String> value_supportedIdentityProviders;
    private boolean unknown_supportedIdentityProviders;
    public List<String> supportedIdentityProviders() {
        if (!unknown_supportedIdentityProviders) return value_supportedIdentityProviders;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.supportedIdentityProviders' is not present");
    }

    /**
     * Configuration block for representing the validity times in units. See details below. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="tokenValidityUnits", flag="unknown_tokenValidityUnits")
    private ManagedUserPoolClientTokenValidityUnitsArgs value_tokenValidityUnits;
    private boolean unknown_tokenValidityUnits;
    public ManagedUserPoolClientTokenValidityUnitsArgs tokenValidityUnits() {
        if (!unknown_tokenValidityUnits) return value_tokenValidityUnits;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.tokenValidityUnits' is not present");
    }

    /**
     * User pool that the client belongs to.
     * 
     */
    @PolicyResourceProperty(name="userPoolId", flag="unknown_userPoolId")
    private String value_userPoolId;
    private boolean unknown_userPoolId;
    public String userPoolId() {
        if (!unknown_userPoolId) return value_userPoolId;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.userPoolId' is not present");
    }

    /**
     * List of user pool attributes that the application client can write to.
     * 
     */
    @PolicyResourceProperty(name="writeAttributes", flag="unknown_writeAttributes")
    private List<String> value_writeAttributes;
    private boolean unknown_writeAttributes;
    public List<String> writeAttributes() {
        if (!unknown_writeAttributes) return value_writeAttributes;
        throw new UndeferrableValueException("Value 'ManagedUserPoolClientArgs.writeAttributes' is not present");
    }

}
