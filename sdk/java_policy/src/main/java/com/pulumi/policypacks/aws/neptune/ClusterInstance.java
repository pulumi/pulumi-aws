// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.neptune;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:neptune/clusterInstance:ClusterInstance")
public final class ClusterInstance extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The hostname of the instance. See also `endpoint` and `port`.
     * 
     */
    @PolicyResourceProperty(name="address", flag="unknown_address")
    private String value_address;
    private boolean unknown_address;
    public String address() {
        if (!unknown_address) return value_address;
        throw new UndeferrableValueException("Value 'ClusterInstance.address' is not present");
    }

    /**
     * Specifies whether any instance modifications
     * are applied immediately, or during the next maintenance window. Default is`false`.
     * 
     */
    @PolicyResourceProperty(name="applyImmediately", flag="unknown_applyImmediately")
    private Boolean value_applyImmediately;
    private boolean unknown_applyImmediately;
    public Boolean applyImmediately() {
        if (!unknown_applyImmediately) return value_applyImmediately;
        throw new UndeferrableValueException("Value 'ClusterInstance.applyImmediately' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of neptune instance
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ClusterInstance.arn' is not present");
    }

    /**
     * Indicates that minor engine upgrades will be applied automatically to the instance during the maintenance window. Default is `true`.
     * 
     */
    @PolicyResourceProperty(name="autoMinorVersionUpgrade", flag="unknown_autoMinorVersionUpgrade")
    private @Nullable Boolean value_autoMinorVersionUpgrade;
    private boolean unknown_autoMinorVersionUpgrade;
    public @Nullable Boolean autoMinorVersionUpgrade() {
        if (!unknown_autoMinorVersionUpgrade) return value_autoMinorVersionUpgrade;
        throw new UndeferrableValueException("Value 'ClusterInstance.autoMinorVersionUpgrade' is not present");
    }

    /**
     * The EC2 Availability Zone that the neptune instance is created in.
     * 
     */
    @PolicyResourceProperty(name="availabilityZone", flag="unknown_availabilityZone")
    private String value_availabilityZone;
    private boolean unknown_availabilityZone;
    public String availabilityZone() {
        if (!unknown_availabilityZone) return value_availabilityZone;
        throw new UndeferrableValueException("Value 'ClusterInstance.availabilityZone' is not present");
    }

    /**
     * The identifier of the `aws.neptune.Cluster` in which to launch this instance.
     * 
     */
    @PolicyResourceProperty(name="clusterIdentifier", flag="unknown_clusterIdentifier")
    private String value_clusterIdentifier;
    private boolean unknown_clusterIdentifier;
    public String clusterIdentifier() {
        if (!unknown_clusterIdentifier) return value_clusterIdentifier;
        throw new UndeferrableValueException("Value 'ClusterInstance.clusterIdentifier' is not present");
    }

    /**
     * The region-unique, immutable identifier for the neptune instance.
     * 
     */
    @PolicyResourceProperty(name="dbiResourceId", flag="unknown_dbiResourceId")
    private String value_dbiResourceId;
    private boolean unknown_dbiResourceId;
    public String dbiResourceId() {
        if (!unknown_dbiResourceId) return value_dbiResourceId;
        throw new UndeferrableValueException("Value 'ClusterInstance.dbiResourceId' is not present");
    }

    /**
     * The connection endpoint in `address:port` format.
     * 
     */
    @PolicyResourceProperty(name="endpoint", flag="unknown_endpoint")
    private String value_endpoint;
    private boolean unknown_endpoint;
    public String endpoint() {
        if (!unknown_endpoint) return value_endpoint;
        throw new UndeferrableValueException("Value 'ClusterInstance.endpoint' is not present");
    }

    /**
     * The name of the database engine to be used for the neptune instance. Defaults to `neptune`. Valid Values: `neptune`.
     * 
     */
    @PolicyResourceProperty(name="engine", flag="unknown_engine")
    private @Nullable String value_engine;
    private boolean unknown_engine;
    public @Nullable String engine() {
        if (!unknown_engine) return value_engine;
        throw new UndeferrableValueException("Value 'ClusterInstance.engine' is not present");
    }

    /**
     * The neptune engine version. Currently configuring this argumnet has no effect.
     * 
     */
    @PolicyResourceProperty(name="engineVersion", flag="unknown_engineVersion")
    private String value_engineVersion;
    private boolean unknown_engineVersion;
    public String engineVersion() {
        if (!unknown_engineVersion) return value_engineVersion;
        throw new UndeferrableValueException("Value 'ClusterInstance.engineVersion' is not present");
    }

    /**
     * The identifier for the neptune instance, if omitted, this provider will assign a random, unique identifier.
     * 
     */
    @PolicyResourceProperty(name="identifier", flag="unknown_identifier")
    private String value_identifier;
    private boolean unknown_identifier;
    public String identifier() {
        if (!unknown_identifier) return value_identifier;
        throw new UndeferrableValueException("Value 'ClusterInstance.identifier' is not present");
    }

    /**
     * Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
     * 
     */
    @PolicyResourceProperty(name="identifierPrefix", flag="unknown_identifierPrefix")
    private String value_identifierPrefix;
    private boolean unknown_identifierPrefix;
    public String identifierPrefix() {
        if (!unknown_identifierPrefix) return value_identifierPrefix;
        throw new UndeferrableValueException("Value 'ClusterInstance.identifierPrefix' is not present");
    }

    /**
     * The instance class to use.
     * 
     */
    @PolicyResourceProperty(name="instanceClass", flag="unknown_instanceClass")
    private String value_instanceClass;
    private boolean unknown_instanceClass;
    public String instanceClass() {
        if (!unknown_instanceClass) return value_instanceClass;
        throw new UndeferrableValueException("Value 'ClusterInstance.instanceClass' is not present");
    }

    /**
     * The ARN for the KMS encryption key if one is set to the neptune cluster.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyArn", flag="unknown_kmsKeyArn")
    private String value_kmsKeyArn;
    private boolean unknown_kmsKeyArn;
    public String kmsKeyArn() {
        if (!unknown_kmsKeyArn) return value_kmsKeyArn;
        throw new UndeferrableValueException("Value 'ClusterInstance.kmsKeyArn' is not present");
    }

    /**
     * The name of the neptune parameter group to associate with this instance.
     * 
     */
    @PolicyResourceProperty(name="neptuneParameterGroupName", flag="unknown_neptuneParameterGroupName")
    private String value_neptuneParameterGroupName;
    private boolean unknown_neptuneParameterGroupName;
    public String neptuneParameterGroupName() {
        if (!unknown_neptuneParameterGroupName) return value_neptuneParameterGroupName;
        throw new UndeferrableValueException("Value 'ClusterInstance.neptuneParameterGroupName' is not present");
    }

    /**
     * A subnet group to associate with this neptune instance. **NOTE:** This must match the `neptune_subnet_group_name` of the attached `aws.neptune.Cluster`.
     * 
     */
    @PolicyResourceProperty(name="neptuneSubnetGroupName", flag="unknown_neptuneSubnetGroupName")
    private String value_neptuneSubnetGroupName;
    private boolean unknown_neptuneSubnetGroupName;
    public String neptuneSubnetGroupName() {
        if (!unknown_neptuneSubnetGroupName) return value_neptuneSubnetGroupName;
        throw new UndeferrableValueException("Value 'ClusterInstance.neptuneSubnetGroupName' is not present");
    }

    /**
     * The port on which the DB accepts connections. Defaults to `8182`.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private @Nullable Integer value_port;
    private boolean unknown_port;
    public @Nullable Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'ClusterInstance.port' is not present");
    }

    /**
     * The daily time range during which automated backups are created if automated backups are enabled. Eg: &#34;04:00-09:00&#34;
     * 
     */
    @PolicyResourceProperty(name="preferredBackupWindow", flag="unknown_preferredBackupWindow")
    private String value_preferredBackupWindow;
    private boolean unknown_preferredBackupWindow;
    public String preferredBackupWindow() {
        if (!unknown_preferredBackupWindow) return value_preferredBackupWindow;
        throw new UndeferrableValueException("Value 'ClusterInstance.preferredBackupWindow' is not present");
    }

    /**
     * The window to perform maintenance in.
     * Syntax: &#34;ddd:hh24:mi-ddd:hh24:mi&#34;. Eg: &#34;Mon:00:00-Mon:03:00&#34;.
     * 
     */
    @PolicyResourceProperty(name="preferredMaintenanceWindow", flag="unknown_preferredMaintenanceWindow")
    private String value_preferredMaintenanceWindow;
    private boolean unknown_preferredMaintenanceWindow;
    public String preferredMaintenanceWindow() {
        if (!unknown_preferredMaintenanceWindow) return value_preferredMaintenanceWindow;
        throw new UndeferrableValueException("Value 'ClusterInstance.preferredMaintenanceWindow' is not present");
    }

    /**
     * Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer.
     * 
     */
    @PolicyResourceProperty(name="promotionTier", flag="unknown_promotionTier")
    private @Nullable Integer value_promotionTier;
    private boolean unknown_promotionTier;
    public @Nullable Integer promotionTier() {
        if (!unknown_promotionTier) return value_promotionTier;
        throw new UndeferrableValueException("Value 'ClusterInstance.promotionTier' is not present");
    }

    /**
     * Bool to control if instance is publicly accessible. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="publiclyAccessible", flag="unknown_publiclyAccessible")
    private @Nullable Boolean value_publiclyAccessible;
    private boolean unknown_publiclyAccessible;
    public @Nullable Boolean publiclyAccessible() {
        if (!unknown_publiclyAccessible) return value_publiclyAccessible;
        throw new UndeferrableValueException("Value 'ClusterInstance.publiclyAccessible' is not present");
    }

    /**
     * Determines whether a final DB snapshot is created before the DB instance is deleted.
     * 
     */
    @PolicyResourceProperty(name="skipFinalSnapshot", flag="unknown_skipFinalSnapshot")
    private @Nullable Boolean value_skipFinalSnapshot;
    private boolean unknown_skipFinalSnapshot;
    public @Nullable Boolean skipFinalSnapshot() {
        if (!unknown_skipFinalSnapshot) return value_skipFinalSnapshot;
        throw new UndeferrableValueException("Value 'ClusterInstance.skipFinalSnapshot' is not present");
    }

    /**
     * Specifies whether the neptune cluster is encrypted.
     * 
     */
    @PolicyResourceProperty(name="storageEncrypted", flag="unknown_storageEncrypted")
    private Boolean value_storageEncrypted;
    private boolean unknown_storageEncrypted;
    public Boolean storageEncrypted() {
        if (!unknown_storageEncrypted) return value_storageEncrypted;
        throw new UndeferrableValueException("Value 'ClusterInstance.storageEncrypted' is not present");
    }

    /**
     * Storage type associated with the cluster `standard/iopt1`.
     * 
     */
    @PolicyResourceProperty(name="storageType", flag="unknown_storageType")
    private String value_storageType;
    private boolean unknown_storageType;
    public String storageType() {
        if (!unknown_storageType) return value_storageType;
        throw new UndeferrableValueException("Value 'ClusterInstance.storageType' is not present");
    }

    /**
     * A map of tags to assign to the instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ClusterInstance.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ClusterInstance.tagsAll' is not present");
    }

    /**
     * Boolean indicating if this instance is writable. `False` indicates this instance is a read replica.
     * 
     */
    @PolicyResourceProperty(name="writer", flag="unknown_writer")
    private Boolean value_writer;
    private boolean unknown_writer;
    public Boolean writer() {
        if (!unknown_writer) return value_writer;
        throw new UndeferrableValueException("Value 'ClusterInstance.writer' is not present");
    }

}
