// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elastictranscoder.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.String;
import javax.annotation.Nullable;


public final class PresetVideoWatermark {

    /**
     * The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
     * 
     */
    private @Nullable UndeferrableValue<String> horizontalAlign;

    public @Nullable String horizontalAlign() {
        if (horizontalAlign == null) return null;
        return horizontalAlign.getValue("PresetVideoWatermark.horizontalAlign");
    }

    /**
     * The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
     * 
     */
    private @Nullable UndeferrableValue<String> horizontalOffset;

    public @Nullable String horizontalOffset() {
        if (horizontalOffset == null) return null;
        return horizontalOffset.getValue("PresetVideoWatermark.horizontalOffset");
    }

    /**
     * A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
     * 
     */
    private @Nullable UndeferrableValue<String> id;

    public @Nullable String id() {
        if (id == null) return null;
        return id.getValue("PresetVideoWatermark.id");
    }

    /**
     * The maximum height of the watermark.
     * 
     */
    private @Nullable UndeferrableValue<String> maxHeight;

    public @Nullable String maxHeight() {
        if (maxHeight == null) return null;
        return maxHeight.getValue("PresetVideoWatermark.maxHeight");
    }

    /**
     * The maximum width of the watermark.
     * 
     */
    private @Nullable UndeferrableValue<String> maxWidth;

    public @Nullable String maxWidth() {
        if (maxWidth == null) return null;
        return maxWidth.getValue("PresetVideoWatermark.maxWidth");
    }

    /**
     * A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
     * 
     */
    private @Nullable UndeferrableValue<String> opacity;

    public @Nullable String opacity() {
        if (opacity == null) return null;
        return opacity.getValue("PresetVideoWatermark.opacity");
    }

    /**
     * A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
     * 
     */
    private @Nullable UndeferrableValue<String> sizingPolicy;

    public @Nullable String sizingPolicy() {
        if (sizingPolicy == null) return null;
        return sizingPolicy.getValue("PresetVideoWatermark.sizingPolicy");
    }

    /**
     * A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
     * 
     */
    private @Nullable UndeferrableValue<String> target;

    public @Nullable String target() {
        if (target == null) return null;
        return target.getValue("PresetVideoWatermark.target");
    }

    /**
     * The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
     * 
     */
    private @Nullable UndeferrableValue<String> verticalAlign;

    public @Nullable String verticalAlign() {
        if (verticalAlign == null) return null;
        return verticalAlign.getValue("PresetVideoWatermark.verticalAlign");
    }

    /**
     * The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
     * 
     */
    private @Nullable UndeferrableValue<String> verticalOffset;

    public @Nullable String verticalOffset() {
        if (verticalOffset == null) return null;
        return verticalOffset.getValue("PresetVideoWatermark.verticalOffset");
    }

}
