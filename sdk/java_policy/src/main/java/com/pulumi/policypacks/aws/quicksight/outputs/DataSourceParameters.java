// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersAmazonElasticsearch;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersAthena;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersAurora;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersAuroraPostgresql;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersAwsIotAnalytics;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersDatabricks;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersJira;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersMariaDb;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersMysql;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersOracle;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersPostgresql;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersPresto;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersRds;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersRedshift;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersS3;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersServiceNow;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersSnowflake;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersSpark;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersSqlServer;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersTeradata;
import com.pulumi.policypacks.aws.quicksight.outputs.DataSourceParametersTwitter;
import javax.annotation.Nullable;


public final class DataSourceParameters {

    /**
     * Parameters for connecting to Amazon Elasticsearch.
     * 
     */
    @PolicyResourceProperty(name="amazonElasticsearch", flag="unknown_amazonElasticsearch")
    private @Nullable DataSourceParametersAmazonElasticsearch value_amazonElasticsearch;
    private boolean unknown_amazonElasticsearch;
    public @Nullable DataSourceParametersAmazonElasticsearch amazonElasticsearch() {
        if (!unknown_amazonElasticsearch) return value_amazonElasticsearch;
        throw new UndeferrableValueException("Value 'DataSourceParameters.amazonElasticsearch' is not present");
    }

    /**
     * Parameters for connecting to Athena.
     * 
     */
    @PolicyResourceProperty(name="athena", flag="unknown_athena")
    private @Nullable DataSourceParametersAthena value_athena;
    private boolean unknown_athena;
    public @Nullable DataSourceParametersAthena athena() {
        if (!unknown_athena) return value_athena;
        throw new UndeferrableValueException("Value 'DataSourceParameters.athena' is not present");
    }

    /**
     * Parameters for connecting to Aurora MySQL.
     * 
     */
    @PolicyResourceProperty(name="aurora", flag="unknown_aurora")
    private @Nullable DataSourceParametersAurora value_aurora;
    private boolean unknown_aurora;
    public @Nullable DataSourceParametersAurora aurora() {
        if (!unknown_aurora) return value_aurora;
        throw new UndeferrableValueException("Value 'DataSourceParameters.aurora' is not present");
    }

    /**
     * Parameters for connecting to Aurora Postgresql.
     * 
     */
    @PolicyResourceProperty(name="auroraPostgresql", flag="unknown_auroraPostgresql")
    private @Nullable DataSourceParametersAuroraPostgresql value_auroraPostgresql;
    private boolean unknown_auroraPostgresql;
    public @Nullable DataSourceParametersAuroraPostgresql auroraPostgresql() {
        if (!unknown_auroraPostgresql) return value_auroraPostgresql;
        throw new UndeferrableValueException("Value 'DataSourceParameters.auroraPostgresql' is not present");
    }

    /**
     * Parameters for connecting to AWS IOT Analytics.
     * 
     */
    @PolicyResourceProperty(name="awsIotAnalytics", flag="unknown_awsIotAnalytics")
    private @Nullable DataSourceParametersAwsIotAnalytics value_awsIotAnalytics;
    private boolean unknown_awsIotAnalytics;
    public @Nullable DataSourceParametersAwsIotAnalytics awsIotAnalytics() {
        if (!unknown_awsIotAnalytics) return value_awsIotAnalytics;
        throw new UndeferrableValueException("Value 'DataSourceParameters.awsIotAnalytics' is not present");
    }

    /**
     * Parameters for connecting to Databricks.
     * 
     */
    @PolicyResourceProperty(name="databricks", flag="unknown_databricks")
    private @Nullable DataSourceParametersDatabricks value_databricks;
    private boolean unknown_databricks;
    public @Nullable DataSourceParametersDatabricks databricks() {
        if (!unknown_databricks) return value_databricks;
        throw new UndeferrableValueException("Value 'DataSourceParameters.databricks' is not present");
    }

    /**
     * Parameters for connecting to Jira.
     * 
     */
    @PolicyResourceProperty(name="jira", flag="unknown_jira")
    private @Nullable DataSourceParametersJira value_jira;
    private boolean unknown_jira;
    public @Nullable DataSourceParametersJira jira() {
        if (!unknown_jira) return value_jira;
        throw new UndeferrableValueException("Value 'DataSourceParameters.jira' is not present");
    }

    /**
     * Parameters for connecting to MariaDB.
     * 
     */
    @PolicyResourceProperty(name="mariaDb", flag="unknown_mariaDb")
    private @Nullable DataSourceParametersMariaDb value_mariaDb;
    private boolean unknown_mariaDb;
    public @Nullable DataSourceParametersMariaDb mariaDb() {
        if (!unknown_mariaDb) return value_mariaDb;
        throw new UndeferrableValueException("Value 'DataSourceParameters.mariaDb' is not present");
    }

    /**
     * Parameters for connecting to MySQL.
     * 
     */
    @PolicyResourceProperty(name="mysql", flag="unknown_mysql")
    private @Nullable DataSourceParametersMysql value_mysql;
    private boolean unknown_mysql;
    public @Nullable DataSourceParametersMysql mysql() {
        if (!unknown_mysql) return value_mysql;
        throw new UndeferrableValueException("Value 'DataSourceParameters.mysql' is not present");
    }

    /**
     * Parameters for connecting to Oracle.
     * 
     */
    @PolicyResourceProperty(name="oracle", flag="unknown_oracle")
    private @Nullable DataSourceParametersOracle value_oracle;
    private boolean unknown_oracle;
    public @Nullable DataSourceParametersOracle oracle() {
        if (!unknown_oracle) return value_oracle;
        throw new UndeferrableValueException("Value 'DataSourceParameters.oracle' is not present");
    }

    /**
     * Parameters for connecting to Postgresql.
     * 
     */
    @PolicyResourceProperty(name="postgresql", flag="unknown_postgresql")
    private @Nullable DataSourceParametersPostgresql value_postgresql;
    private boolean unknown_postgresql;
    public @Nullable DataSourceParametersPostgresql postgresql() {
        if (!unknown_postgresql) return value_postgresql;
        throw new UndeferrableValueException("Value 'DataSourceParameters.postgresql' is not present");
    }

    /**
     * Parameters for connecting to Presto.
     * 
     */
    @PolicyResourceProperty(name="presto", flag="unknown_presto")
    private @Nullable DataSourceParametersPresto value_presto;
    private boolean unknown_presto;
    public @Nullable DataSourceParametersPresto presto() {
        if (!unknown_presto) return value_presto;
        throw new UndeferrableValueException("Value 'DataSourceParameters.presto' is not present");
    }

    /**
     * Parameters for connecting to RDS.
     * 
     */
    @PolicyResourceProperty(name="rds", flag="unknown_rds")
    private @Nullable DataSourceParametersRds value_rds;
    private boolean unknown_rds;
    public @Nullable DataSourceParametersRds rds() {
        if (!unknown_rds) return value_rds;
        throw new UndeferrableValueException("Value 'DataSourceParameters.rds' is not present");
    }

    /**
     * Parameters for connecting to Redshift.
     * 
     */
    @PolicyResourceProperty(name="redshift", flag="unknown_redshift")
    private @Nullable DataSourceParametersRedshift value_redshift;
    private boolean unknown_redshift;
    public @Nullable DataSourceParametersRedshift redshift() {
        if (!unknown_redshift) return value_redshift;
        throw new UndeferrableValueException("Value 'DataSourceParameters.redshift' is not present");
    }

    /**
     * Parameters for connecting to S3.
     * 
     */
    @PolicyResourceProperty(name="s3", flag="unknown_s3")
    private @Nullable DataSourceParametersS3 value_s3;
    private boolean unknown_s3;
    public @Nullable DataSourceParametersS3 s3() {
        if (!unknown_s3) return value_s3;
        throw new UndeferrableValueException("Value 'DataSourceParameters.s3' is not present");
    }

    /**
     * Parameters for connecting to ServiceNow.
     * 
     */
    @PolicyResourceProperty(name="serviceNow", flag="unknown_serviceNow")
    private @Nullable DataSourceParametersServiceNow value_serviceNow;
    private boolean unknown_serviceNow;
    public @Nullable DataSourceParametersServiceNow serviceNow() {
        if (!unknown_serviceNow) return value_serviceNow;
        throw new UndeferrableValueException("Value 'DataSourceParameters.serviceNow' is not present");
    }

    /**
     * Parameters for connecting to Snowflake.
     * 
     */
    @PolicyResourceProperty(name="snowflake", flag="unknown_snowflake")
    private @Nullable DataSourceParametersSnowflake value_snowflake;
    private boolean unknown_snowflake;
    public @Nullable DataSourceParametersSnowflake snowflake() {
        if (!unknown_snowflake) return value_snowflake;
        throw new UndeferrableValueException("Value 'DataSourceParameters.snowflake' is not present");
    }

    /**
     * Parameters for connecting to Spark.
     * 
     */
    @PolicyResourceProperty(name="spark", flag="unknown_spark")
    private @Nullable DataSourceParametersSpark value_spark;
    private boolean unknown_spark;
    public @Nullable DataSourceParametersSpark spark() {
        if (!unknown_spark) return value_spark;
        throw new UndeferrableValueException("Value 'DataSourceParameters.spark' is not present");
    }

    /**
     * Parameters for connecting to SQL Server.
     * 
     */
    @PolicyResourceProperty(name="sqlServer", flag="unknown_sqlServer")
    private @Nullable DataSourceParametersSqlServer value_sqlServer;
    private boolean unknown_sqlServer;
    public @Nullable DataSourceParametersSqlServer sqlServer() {
        if (!unknown_sqlServer) return value_sqlServer;
        throw new UndeferrableValueException("Value 'DataSourceParameters.sqlServer' is not present");
    }

    /**
     * Parameters for connecting to Teradata.
     * 
     */
    @PolicyResourceProperty(name="teradata", flag="unknown_teradata")
    private @Nullable DataSourceParametersTeradata value_teradata;
    private boolean unknown_teradata;
    public @Nullable DataSourceParametersTeradata teradata() {
        if (!unknown_teradata) return value_teradata;
        throw new UndeferrableValueException("Value 'DataSourceParameters.teradata' is not present");
    }

    /**
     * Parameters for connecting to Twitter.
     * 
     */
    @PolicyResourceProperty(name="twitter", flag="unknown_twitter")
    private @Nullable DataSourceParametersTwitter value_twitter;
    private boolean unknown_twitter;
    public @Nullable DataSourceParametersTwitter twitter() {
        if (!unknown_twitter) return value_twitter;
        throw new UndeferrableValueException("Value 'DataSourceParameters.twitter' is not present");
    }

}
