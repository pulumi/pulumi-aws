// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.eks.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


public final class IdentityProviderConfigOidc {

    /**
     * Client ID for the OpenID Connect identity provider.
     * 
     */
    @PolicyResourceProperty(name="clientId", flag="unknown_clientId")
    private String value_clientId;
    private boolean unknown_clientId;
    public String clientId() {
        if (!unknown_clientId) return value_clientId;
        throw new UndeferrableValueException("Value 'IdentityProviderConfigOidc.clientId' is not present");
    }

    /**
     * The JWT claim that the provider will use to return groups.
     * 
     */
    @PolicyResourceProperty(name="groupsClaim", flag="unknown_groupsClaim")
    private @Nullable String value_groupsClaim;
    private boolean unknown_groupsClaim;
    public @Nullable String groupsClaim() {
        if (!unknown_groupsClaim) return value_groupsClaim;
        throw new UndeferrableValueException("Value 'IdentityProviderConfigOidc.groupsClaim' is not present");
    }

    /**
     * A prefix that is prepended to group claims e.g., `oidc:`.
     * 
     */
    @PolicyResourceProperty(name="groupsPrefix", flag="unknown_groupsPrefix")
    private @Nullable String value_groupsPrefix;
    private boolean unknown_groupsPrefix;
    public @Nullable String groupsPrefix() {
        if (!unknown_groupsPrefix) return value_groupsPrefix;
        throw new UndeferrableValueException("Value 'IdentityProviderConfigOidc.groupsPrefix' is not present");
    }

    /**
     * The name of the identity provider config.
     * 
     */
    @PolicyResourceProperty(name="identityProviderConfigName", flag="unknown_identityProviderConfigName")
    private String value_identityProviderConfigName;
    private boolean unknown_identityProviderConfigName;
    public String identityProviderConfigName() {
        if (!unknown_identityProviderConfigName) return value_identityProviderConfigName;
        throw new UndeferrableValueException("Value 'IdentityProviderConfigOidc.identityProviderConfigName' is not present");
    }

    /**
     * Issuer URL for the OpenID Connect identity provider.
     * 
     */
    @PolicyResourceProperty(name="issuerUrl", flag="unknown_issuerUrl")
    private String value_issuerUrl;
    private boolean unknown_issuerUrl;
    public String issuerUrl() {
        if (!unknown_issuerUrl) return value_issuerUrl;
        throw new UndeferrableValueException("Value 'IdentityProviderConfigOidc.issuerUrl' is not present");
    }

    /**
     * The key value pairs that describe required claims in the identity token.
     * 
     */
    @PolicyResourceProperty(name="requiredClaims", flag="unknown_requiredClaims")
    private @Nullable Map<String,String> value_requiredClaims;
    private boolean unknown_requiredClaims;
    public @Nullable Map<String,String> requiredClaims() {
        if (!unknown_requiredClaims) return value_requiredClaims;
        throw new UndeferrableValueException("Value 'IdentityProviderConfigOidc.requiredClaims' is not present");
    }

    /**
     * The JWT claim that the provider will use as the username.
     * 
     */
    @PolicyResourceProperty(name="usernameClaim", flag="unknown_usernameClaim")
    private @Nullable String value_usernameClaim;
    private boolean unknown_usernameClaim;
    public @Nullable String usernameClaim() {
        if (!unknown_usernameClaim) return value_usernameClaim;
        throw new UndeferrableValueException("Value 'IdentityProviderConfigOidc.usernameClaim' is not present");
    }

    /**
     * A prefix that is prepended to username claims.
     * 
     */
    @PolicyResourceProperty(name="usernamePrefix", flag="unknown_usernamePrefix")
    private @Nullable String value_usernamePrefix;
    private boolean unknown_usernamePrefix;
    public @Nullable String usernamePrefix() {
        if (!unknown_usernamePrefix) return value_usernamePrefix;
        throw new UndeferrableValueException("Value 'IdentityProviderConfigOidc.usernamePrefix' is not present");
    }

}
