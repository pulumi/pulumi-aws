// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.inputs.ThemeConfigurationArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.ThemePermissionArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:quicksight/theme:Theme")
public final class ThemeArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * AWS account ID.
     * 
     */
    @PolicyResourceProperty(name="awsAccountId", flag="unknown_awsAccountId")
    private String value_awsAccountId;
    private boolean unknown_awsAccountId;
    public String awsAccountId() {
        if (!unknown_awsAccountId) return value_awsAccountId;
        throw new UndeferrableValueException("Value 'ThemeArgs.awsAccountId' is not present");
    }

    /**
     * The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use ListThemes or choose Themes from within an analysis.
     * 
     */
    @PolicyResourceProperty(name="baseThemeId", flag="unknown_baseThemeId")
    private String value_baseThemeId;
    private boolean unknown_baseThemeId;
    public String baseThemeId() {
        if (!unknown_baseThemeId) return value_baseThemeId;
        throw new UndeferrableValueException("Value 'ThemeArgs.baseThemeId' is not present");
    }

    /**
     * The theme configuration, which contains the theme display properties. See configuration.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="configuration", flag="unknown_configuration")
    private ThemeConfigurationArgs value_configuration;
    private boolean unknown_configuration;
    public ThemeConfigurationArgs configuration() {
        if (!unknown_configuration) return value_configuration;
        throw new UndeferrableValueException("Value 'ThemeArgs.configuration' is not present");
    }

    /**
     * Display name of the theme.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'ThemeArgs.name' is not present");
    }

    /**
     * A set of resource permissions on the theme. Maximum of 64 items. See permissions.
     * 
     */
    @PolicyResourceProperty(name="permissions", flag="unknown_permissions")
    private List<ThemePermissionArgs> value_permissions;
    private boolean unknown_permissions;
    public List<ThemePermissionArgs> permissions() {
        if (!unknown_permissions) return value_permissions;
        throw new UndeferrableValueException("Value 'ThemeArgs.permissions' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ThemeArgs.tags' is not present");
    }

    /**
     * Identifier of the theme.
     * 
     */
    @PolicyResourceProperty(name="themeId", flag="unknown_themeId")
    private String value_themeId;
    private boolean unknown_themeId;
    public String themeId() {
        if (!unknown_themeId) return value_themeId;
        throw new UndeferrableValueException("Value 'ThemeArgs.themeId' is not present");
    }

    /**
     * A description of the current theme version being created/updated.
     * 
     */
    @PolicyResourceProperty(name="versionDescription", flag="unknown_versionDescription")
    private String value_versionDescription;
    private boolean unknown_versionDescription;
    public String versionDescription() {
        if (!unknown_versionDescription) return value_versionDescription;
        throw new UndeferrableValueException("Value 'ThemeArgs.versionDescription' is not present");
    }

}
