// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.opsworks;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.opsworks.outputs.InstanceEbsBlockDevice;
import com.pulumi.policypacks.aws.opsworks.outputs.InstanceEphemeralBlockDevice;
import com.pulumi.policypacks.aws.opsworks.outputs.InstanceRootBlockDevice;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:opsworks/instance:Instance")
public final class Instance extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * OpsWorks agent to install. Default is `INHERIT`.
     * 
     */
    @PolicyResourceProperty(name="agentVersion", flag="unknown_agentVersion")
    private @Nullable String value_agentVersion;
    private boolean unknown_agentVersion;
    public @Nullable String agentVersion() {
        if (!unknown_agentVersion) return value_agentVersion;
        throw new UndeferrableValueException("Value 'Instance.agentVersion' is not present");
    }

    /**
     * AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
     * 
     */
    @PolicyResourceProperty(name="amiId", flag="unknown_amiId")
    private String value_amiId;
    private boolean unknown_amiId;
    public String amiId() {
        if (!unknown_amiId) return value_amiId;
        throw new UndeferrableValueException("Value 'Instance.amiId' is not present");
    }

    /**
     * Machine architecture for created instances.  Valid values are `x86_64` or `i386`. The default is `x86_64`.
     * 
     */
    @PolicyResourceProperty(name="architecture", flag="unknown_architecture")
    private @Nullable String value_architecture;
    private boolean unknown_architecture;
    public @Nullable String architecture() {
        if (!unknown_architecture) return value_architecture;
        throw new UndeferrableValueException("Value 'Instance.architecture' is not present");
    }

    /**
     * Creates load-based or time-based instances.  Valid values are `load`, `timer`.
     * 
     */
    @PolicyResourceProperty(name="autoScalingType", flag="unknown_autoScalingType")
    private @Nullable String value_autoScalingType;
    private boolean unknown_autoScalingType;
    public @Nullable String autoScalingType() {
        if (!unknown_autoScalingType) return value_autoScalingType;
        throw new UndeferrableValueException("Value 'Instance.autoScalingType' is not present");
    }

    /**
     * Name of the availability zone where instances will be created by default.
     * 
     */
    @PolicyResourceProperty(name="availabilityZone", flag="unknown_availabilityZone")
    private String value_availabilityZone;
    private boolean unknown_availabilityZone;
    public String availabilityZone() {
        if (!unknown_availabilityZone) return value_availabilityZone;
        throw new UndeferrableValueException("Value 'Instance.availabilityZone' is not present");
    }

    /**
     * Time that the instance was created.
     * 
     */
    @PolicyResourceProperty(name="createdAt", flag="unknown_createdAt")
    private String value_createdAt;
    private boolean unknown_createdAt;
    public String createdAt() {
        if (!unknown_createdAt) return value_createdAt;
        throw new UndeferrableValueException("Value 'Instance.createdAt' is not present");
    }

    /**
     * Whether to delete EBS volume on deletion. Default is `true`.
     * 
     */
    @PolicyResourceProperty(name="deleteEbs", flag="unknown_deleteEbs")
    private @Nullable Boolean value_deleteEbs;
    private boolean unknown_deleteEbs;
    public @Nullable Boolean deleteEbs() {
        if (!unknown_deleteEbs) return value_deleteEbs;
        throw new UndeferrableValueException("Value 'Instance.deleteEbs' is not present");
    }

    /**
     * Whether to delete the Elastic IP on deletion.
     * 
     */
    @PolicyResourceProperty(name="deleteEip", flag="unknown_deleteEip")
    private @Nullable Boolean value_deleteEip;
    private boolean unknown_deleteEip;
    public @Nullable Boolean deleteEip() {
        if (!unknown_deleteEip) return value_deleteEip;
        throw new UndeferrableValueException("Value 'Instance.deleteEip' is not present");
    }

    /**
     * Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
     * 
     */
    @PolicyResourceProperty(name="ebsBlockDevices", flag="unknown_ebsBlockDevices")
    private List<InstanceEbsBlockDevice> value_ebsBlockDevices;
    private boolean unknown_ebsBlockDevices;
    public List<InstanceEbsBlockDevice> ebsBlockDevices() {
        if (!unknown_ebsBlockDevices) return value_ebsBlockDevices;
        throw new UndeferrableValueException("Value 'Instance.ebsBlockDevices' is not present");
    }

    /**
     * Whether the launched EC2 instance will be EBS-optimized.
     * 
     */
    @PolicyResourceProperty(name="ebsOptimized", flag="unknown_ebsOptimized")
    private @Nullable Boolean value_ebsOptimized;
    private boolean unknown_ebsOptimized;
    public @Nullable Boolean ebsOptimized() {
        if (!unknown_ebsOptimized) return value_ebsOptimized;
        throw new UndeferrableValueException("Value 'Instance.ebsOptimized' is not present");
    }

    /**
     * EC2 instance ID.
     * 
     */
    @PolicyResourceProperty(name="ec2InstanceId", flag="unknown_ec2InstanceId")
    private String value_ec2InstanceId;
    private boolean unknown_ec2InstanceId;
    public String ec2InstanceId() {
        if (!unknown_ec2InstanceId) return value_ec2InstanceId;
        throw new UndeferrableValueException("Value 'Instance.ec2InstanceId' is not present");
    }

    /**
     * ECS cluster&#39;s ARN for container instances.
     * 
     */
    @PolicyResourceProperty(name="ecsClusterArn", flag="unknown_ecsClusterArn")
    private String value_ecsClusterArn;
    private boolean unknown_ecsClusterArn;
    public String ecsClusterArn() {
        if (!unknown_ecsClusterArn) return value_ecsClusterArn;
        throw new UndeferrableValueException("Value 'Instance.ecsClusterArn' is not present");
    }

    /**
     * Instance Elastic IP address.
     * 
     */
    @PolicyResourceProperty(name="elasticIp", flag="unknown_elasticIp")
    private String value_elasticIp;
    private boolean unknown_elasticIp;
    public String elasticIp() {
        if (!unknown_elasticIp) return value_elasticIp;
        throw new UndeferrableValueException("Value 'Instance.elasticIp' is not present");
    }

    /**
     * Configuration block for ephemeral (also known as &#34;Instance Store&#34;) volumes on the instance. See Block Devices below.
     * 
     */
    @PolicyResourceProperty(name="ephemeralBlockDevices", flag="unknown_ephemeralBlockDevices")
    private List<InstanceEphemeralBlockDevice> value_ephemeralBlockDevices;
    private boolean unknown_ephemeralBlockDevices;
    public List<InstanceEphemeralBlockDevice> ephemeralBlockDevices() {
        if (!unknown_ephemeralBlockDevices) return value_ephemeralBlockDevices;
        throw new UndeferrableValueException("Value 'Instance.ephemeralBlockDevices' is not present");
    }

    /**
     * Instance&#39;s host name.
     * 
     */
    @PolicyResourceProperty(name="hostname", flag="unknown_hostname")
    private String value_hostname;
    private boolean unknown_hostname;
    public String hostname() {
        if (!unknown_hostname) return value_hostname;
        throw new UndeferrableValueException("Value 'Instance.hostname' is not present");
    }

    /**
     * For registered instances, infrastructure class: ec2 or on-premises.
     * 
     */
    @PolicyResourceProperty(name="infrastructureClass", flag="unknown_infrastructureClass")
    private String value_infrastructureClass;
    private boolean unknown_infrastructureClass;
    public String infrastructureClass() {
        if (!unknown_infrastructureClass) return value_infrastructureClass;
        throw new UndeferrableValueException("Value 'Instance.infrastructureClass' is not present");
    }

    /**
     * Controls where to install OS and package updates when the instance boots.  Default is `true`.
     * 
     */
    @PolicyResourceProperty(name="installUpdatesOnBoot", flag="unknown_installUpdatesOnBoot")
    private @Nullable Boolean value_installUpdatesOnBoot;
    private boolean unknown_installUpdatesOnBoot;
    public @Nullable Boolean installUpdatesOnBoot() {
        if (!unknown_installUpdatesOnBoot) return value_installUpdatesOnBoot;
        throw new UndeferrableValueException("Value 'Instance.installUpdatesOnBoot' is not present");
    }

    /**
     * ARN of the instance&#39;s IAM profile.
     * 
     */
    @PolicyResourceProperty(name="instanceProfileArn", flag="unknown_instanceProfileArn")
    private String value_instanceProfileArn;
    private boolean unknown_instanceProfileArn;
    public String instanceProfileArn() {
        if (!unknown_instanceProfileArn) return value_instanceProfileArn;
        throw new UndeferrableValueException("Value 'Instance.instanceProfileArn' is not present");
    }

    /**
     * Type of instance to start.
     * 
     */
    @PolicyResourceProperty(name="instanceType", flag="unknown_instanceType")
    private @Nullable String value_instanceType;
    private boolean unknown_instanceType;
    public @Nullable String instanceType() {
        if (!unknown_instanceType) return value_instanceType;
        throw new UndeferrableValueException("Value 'Instance.instanceType' is not present");
    }

    /**
     * ID of the last service error.
     * 
     */
    @PolicyResourceProperty(name="lastServiceErrorId", flag="unknown_lastServiceErrorId")
    private String value_lastServiceErrorId;
    private boolean unknown_lastServiceErrorId;
    public String lastServiceErrorId() {
        if (!unknown_lastServiceErrorId) return value_lastServiceErrorId;
        throw new UndeferrableValueException("Value 'Instance.lastServiceErrorId' is not present");
    }

    /**
     * List of the layers the instance will belong to.
     * 
     */
    @PolicyResourceProperty(name="layerIds", flag="unknown_layerIds")
    private List<String> value_layerIds;
    private boolean unknown_layerIds;
    public List<String> layerIds() {
        if (!unknown_layerIds) return value_layerIds;
        throw new UndeferrableValueException("Value 'Instance.layerIds' is not present");
    }

    /**
     * Name of operating system that will be installed.
     * 
     */
    @PolicyResourceProperty(name="os", flag="unknown_os")
    private String value_os;
    private boolean unknown_os;
    public String os() {
        if (!unknown_os) return value_os;
        throw new UndeferrableValueException("Value 'Instance.os' is not present");
    }

    /**
     * Instance&#39;s platform.
     * 
     */
    @PolicyResourceProperty(name="platform", flag="unknown_platform")
    private String value_platform;
    private boolean unknown_platform;
    public String platform() {
        if (!unknown_platform) return value_platform;
        throw new UndeferrableValueException("Value 'Instance.platform' is not present");
    }

    /**
     * Private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you&#39;ve enabled DNS hostnames for your VPC.
     * 
     */
    @PolicyResourceProperty(name="privateDns", flag="unknown_privateDns")
    private String value_privateDns;
    private boolean unknown_privateDns;
    public String privateDns() {
        if (!unknown_privateDns) return value_privateDns;
        throw new UndeferrableValueException("Value 'Instance.privateDns' is not present");
    }

    /**
     * Private IP address assigned to the instance.
     * 
     */
    @PolicyResourceProperty(name="privateIp", flag="unknown_privateIp")
    private String value_privateIp;
    private boolean unknown_privateIp;
    public String privateIp() {
        if (!unknown_privateIp) return value_privateIp;
        throw new UndeferrableValueException("Value 'Instance.privateIp' is not present");
    }

    /**
     * Public DNS name assigned to the instance. For EC2-VPC, this is only available if you&#39;ve enabled DNS hostnames for your VPC.
     * 
     */
    @PolicyResourceProperty(name="publicDns", flag="unknown_publicDns")
    private String value_publicDns;
    private boolean unknown_publicDns;
    public String publicDns() {
        if (!unknown_publicDns) return value_publicDns;
        throw new UndeferrableValueException("Value 'Instance.publicDns' is not present");
    }

    /**
     * Public IP address assigned to the instance, if applicable.
     * 
     */
    @PolicyResourceProperty(name="publicIp", flag="unknown_publicIp")
    private String value_publicIp;
    private boolean unknown_publicIp;
    public String publicIp() {
        if (!unknown_publicIp) return value_publicIp;
        throw new UndeferrableValueException("Value 'Instance.publicIp' is not present");
    }

    /**
     * For registered instances, who performed the registration.
     * 
     */
    @PolicyResourceProperty(name="registeredBy", flag="unknown_registeredBy")
    private String value_registeredBy;
    private boolean unknown_registeredBy;
    public String registeredBy() {
        if (!unknown_registeredBy) return value_registeredBy;
        throw new UndeferrableValueException("Value 'Instance.registeredBy' is not present");
    }

    /**
     * Instance&#39;s reported AWS OpsWorks Stacks agent version.
     * 
     */
    @PolicyResourceProperty(name="reportedAgentVersion", flag="unknown_reportedAgentVersion")
    private String value_reportedAgentVersion;
    private boolean unknown_reportedAgentVersion;
    public String reportedAgentVersion() {
        if (!unknown_reportedAgentVersion) return value_reportedAgentVersion;
        throw new UndeferrableValueException("Value 'Instance.reportedAgentVersion' is not present");
    }

    /**
     * For registered instances, the reported operating system family.
     * 
     */
    @PolicyResourceProperty(name="reportedOsFamily", flag="unknown_reportedOsFamily")
    private String value_reportedOsFamily;
    private boolean unknown_reportedOsFamily;
    public String reportedOsFamily() {
        if (!unknown_reportedOsFamily) return value_reportedOsFamily;
        throw new UndeferrableValueException("Value 'Instance.reportedOsFamily' is not present");
    }

    /**
     * For registered instances, the reported operating system name.
     * 
     */
    @PolicyResourceProperty(name="reportedOsName", flag="unknown_reportedOsName")
    private String value_reportedOsName;
    private boolean unknown_reportedOsName;
    public String reportedOsName() {
        if (!unknown_reportedOsName) return value_reportedOsName;
        throw new UndeferrableValueException("Value 'Instance.reportedOsName' is not present");
    }

    /**
     * For registered instances, the reported operating system version.
     * 
     */
    @PolicyResourceProperty(name="reportedOsVersion", flag="unknown_reportedOsVersion")
    private String value_reportedOsVersion;
    private boolean unknown_reportedOsVersion;
    public String reportedOsVersion() {
        if (!unknown_reportedOsVersion) return value_reportedOsVersion;
        throw new UndeferrableValueException("Value 'Instance.reportedOsVersion' is not present");
    }

    /**
     * Configuration block for the root block device of the instance. See Block Devices below.
     * 
     */
    @PolicyResourceProperty(name="rootBlockDevices", flag="unknown_rootBlockDevices")
    private List<InstanceRootBlockDevice> value_rootBlockDevices;
    private boolean unknown_rootBlockDevices;
    public List<InstanceRootBlockDevice> rootBlockDevices() {
        if (!unknown_rootBlockDevices) return value_rootBlockDevices;
        throw new UndeferrableValueException("Value 'Instance.rootBlockDevices' is not present");
    }

    /**
     * Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
     * 
     */
    @PolicyResourceProperty(name="rootDeviceType", flag="unknown_rootDeviceType")
    private String value_rootDeviceType;
    private boolean unknown_rootDeviceType;
    public String rootDeviceType() {
        if (!unknown_rootDeviceType) return value_rootDeviceType;
        throw new UndeferrableValueException("Value 'Instance.rootDeviceType' is not present");
    }

    /**
     * Root device volume ID.
     * 
     */
    @PolicyResourceProperty(name="rootDeviceVolumeId", flag="unknown_rootDeviceVolumeId")
    private String value_rootDeviceVolumeId;
    private boolean unknown_rootDeviceVolumeId;
    public String rootDeviceVolumeId() {
        if (!unknown_rootDeviceVolumeId) return value_rootDeviceVolumeId;
        throw new UndeferrableValueException("Value 'Instance.rootDeviceVolumeId' is not present");
    }

    /**
     * Associated security groups.
     * 
     */
    @PolicyResourceProperty(name="securityGroupIds", flag="unknown_securityGroupIds")
    private List<String> value_securityGroupIds;
    private boolean unknown_securityGroupIds;
    public List<String> securityGroupIds() {
        if (!unknown_securityGroupIds) return value_securityGroupIds;
        throw new UndeferrableValueException("Value 'Instance.securityGroupIds' is not present");
    }

    /**
     * SSH key&#39;s Deep Security Agent (DSA) fingerprint.
     * 
     */
    @PolicyResourceProperty(name="sshHostDsaKeyFingerprint", flag="unknown_sshHostDsaKeyFingerprint")
    private String value_sshHostDsaKeyFingerprint;
    private boolean unknown_sshHostDsaKeyFingerprint;
    public String sshHostDsaKeyFingerprint() {
        if (!unknown_sshHostDsaKeyFingerprint) return value_sshHostDsaKeyFingerprint;
        throw new UndeferrableValueException("Value 'Instance.sshHostDsaKeyFingerprint' is not present");
    }

    /**
     * SSH key&#39;s RSA fingerprint.
     * 
     */
    @PolicyResourceProperty(name="sshHostRsaKeyFingerprint", flag="unknown_sshHostRsaKeyFingerprint")
    private String value_sshHostRsaKeyFingerprint;
    private boolean unknown_sshHostRsaKeyFingerprint;
    public String sshHostRsaKeyFingerprint() {
        if (!unknown_sshHostRsaKeyFingerprint) return value_sshHostRsaKeyFingerprint;
        throw new UndeferrableValueException("Value 'Instance.sshHostRsaKeyFingerprint' is not present");
    }

    /**
     * Name of the SSH keypair that instances will have by default.
     * 
     */
    @PolicyResourceProperty(name="sshKeyName", flag="unknown_sshKeyName")
    private String value_sshKeyName;
    private boolean unknown_sshKeyName;
    public String sshKeyName() {
        if (!unknown_sshKeyName) return value_sshKeyName;
        throw new UndeferrableValueException("Value 'Instance.sshKeyName' is not present");
    }

    /**
     * Identifier of the stack the instance will belong to.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="stackId", flag="unknown_stackId")
    private String value_stackId;
    private boolean unknown_stackId;
    public String stackId() {
        if (!unknown_stackId) return value_stackId;
        throw new UndeferrableValueException("Value 'Instance.stackId' is not present");
    }

    /**
     * Desired state of the instance. Valid values are `running` or `stopped`.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private @Nullable String value_state;
    private boolean unknown_state;
    public @Nullable String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'Instance.state' is not present");
    }

    /**
     * Instance status. Will be one of `booting`, `connection_lost`, `online`, `pending`, `rebooting`, `requested`, `running_setup`, `setup_failed`, `shutting_down`, `start_failed`, `stop_failed`, `stopped`, `stopping`, `terminated`, or `terminating`.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'Instance.status' is not present");
    }

    /**
     * Subnet ID to attach to.
     * 
     */
    @PolicyResourceProperty(name="subnetId", flag="unknown_subnetId")
    private String value_subnetId;
    private boolean unknown_subnetId;
    public String subnetId() {
        if (!unknown_subnetId) return value_subnetId;
        throw new UndeferrableValueException("Value 'Instance.subnetId' is not present");
    }

    /**
     * Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
     * 
     */
    @PolicyResourceProperty(name="tenancy", flag="unknown_tenancy")
    private String value_tenancy;
    private boolean unknown_tenancy;
    public String tenancy() {
        if (!unknown_tenancy) return value_tenancy;
        throw new UndeferrableValueException("Value 'Instance.tenancy' is not present");
    }

    /**
     * Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.
     * 
     */
    @PolicyResourceProperty(name="virtualizationType", flag="unknown_virtualizationType")
    private String value_virtualizationType;
    private boolean unknown_virtualizationType;
    public String virtualizationType() {
        if (!unknown_virtualizationType) return value_virtualizationType;
        throw new UndeferrableValueException("Value 'Instance.virtualizationType' is not present");
    }

}
