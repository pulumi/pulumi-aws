// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lightsail/keyPair:KeyPair")
public final class KeyPair extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the Lightsail key pair.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("KeyPair.arn");
    }

    /**
     * The MD5 public key fingerprint for the encrypted private key.
     * 
     */
    private UndeferrableValue<String> encryptedFingerprint;

    public String encryptedFingerprint() {
        if (encryptedFingerprint == null) return null;
        return encryptedFingerprint.getValue("KeyPair.encryptedFingerprint");
    }

    /**
     * the private key material, base 64 encoded and encrypted with the given `pgp_key`. This is only populated when creating a new key and `pgp_key` is supplied.
     * 
     */
    private UndeferrableValue<String> encryptedPrivateKey;

    public String encryptedPrivateKey() {
        if (encryptedPrivateKey == null) return null;
        return encryptedPrivateKey.getValue("KeyPair.encryptedPrivateKey");
    }

    /**
     * The MD5 public key fingerprint as specified in section 4 of RFC 4716.
     * 
     */
    private UndeferrableValue<String> fingerprint;

    public String fingerprint() {
        if (fingerprint == null) return null;
        return fingerprint.getValue("KeyPair.fingerprint");
    }

    /**
     * The name of the Lightsail Key Pair. If omitted, a unique name will be generated by this provider
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("KeyPair.name");
    }

    private UndeferrableValue<String> namePrefix;

    public String namePrefix() {
        if (namePrefix == null) return null;
        return namePrefix.getValue("KeyPair.namePrefix");
    }

    /**
     * An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair
     * 
     */
    private @Nullable UndeferrableValue<String> pgpKey;

    public @Nullable String pgpKey() {
        if (pgpKey == null) return null;
        return pgpKey.getValue("KeyPair.pgpKey");
    }

    /**
     * the private key, base64 encoded. This is only populated when creating a new key, and when no `pgp_key` is provided.
     * 
     */
    private UndeferrableValue<String> privateKey;

    public String privateKey() {
        if (privateKey == null) return null;
        return privateKey.getValue("KeyPair.privateKey");
    }

    /**
     * The public key material. This public key will be imported into Lightsail
     * 
     */
    private UndeferrableValue<String> publicKey;

    public String publicKey() {
        if (publicKey == null) return null;
        return publicKey.getValue("KeyPair.publicKey");
    }

    /**
     * A map of tags to assign to the collection. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * &gt; **NOTE:** a PGP key is not required, however it is strongly encouraged. Without a PGP key, the private key material will be stored in state unencrypted.`pgp_key` is ignored if `public_key` is supplied.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("KeyPair.tags");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("KeyPair.tagsAll");
    }

}
