// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lightsail/keyPair:KeyPair")
public final class KeyPair extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The ARN of the Lightsail key pair.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'KeyPair.arn' is not present");
    }

    /**
     * The MD5 public key fingerprint for the encrypted private key.
     * 
     */
    @PolicyResourceProperty(name="encryptedFingerprint", flag="unknown_encryptedFingerprint")
    private String value_encryptedFingerprint;
    private boolean unknown_encryptedFingerprint;
    public String encryptedFingerprint() {
        if (!unknown_encryptedFingerprint) return value_encryptedFingerprint;
        throw new UndeferrableValueException("Value 'KeyPair.encryptedFingerprint' is not present");
    }

    /**
     * the private key material, base 64 encoded and encrypted with the given `pgp_key`. This is only populated when creating a new key and `pgp_key` is supplied.
     * 
     */
    @PolicyResourceProperty(name="encryptedPrivateKey", flag="unknown_encryptedPrivateKey")
    private String value_encryptedPrivateKey;
    private boolean unknown_encryptedPrivateKey;
    public String encryptedPrivateKey() {
        if (!unknown_encryptedPrivateKey) return value_encryptedPrivateKey;
        throw new UndeferrableValueException("Value 'KeyPair.encryptedPrivateKey' is not present");
    }

    /**
     * The MD5 public key fingerprint as specified in section 4 of RFC 4716.
     * 
     */
    @PolicyResourceProperty(name="fingerprint", flag="unknown_fingerprint")
    private String value_fingerprint;
    private boolean unknown_fingerprint;
    public String fingerprint() {
        if (!unknown_fingerprint) return value_fingerprint;
        throw new UndeferrableValueException("Value 'KeyPair.fingerprint' is not present");
    }

    /**
     * The name of the Lightsail Key Pair. If omitted, a unique name will be generated by this provider
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'KeyPair.name' is not present");
    }

    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'KeyPair.namePrefix' is not present");
    }

    /**
     * An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair
     * 
     */
    @PolicyResourceProperty(name="pgpKey", flag="unknown_pgpKey")
    private @Nullable String value_pgpKey;
    private boolean unknown_pgpKey;
    public @Nullable String pgpKey() {
        if (!unknown_pgpKey) return value_pgpKey;
        throw new UndeferrableValueException("Value 'KeyPair.pgpKey' is not present");
    }

    /**
     * the private key, base64 encoded. This is only populated when creating a new key, and when no `pgp_key` is provided.
     * 
     */
    @PolicyResourceProperty(name="privateKey", flag="unknown_privateKey")
    private String value_privateKey;
    private boolean unknown_privateKey;
    public String privateKey() {
        if (!unknown_privateKey) return value_privateKey;
        throw new UndeferrableValueException("Value 'KeyPair.privateKey' is not present");
    }

    /**
     * The public key material. This public key will be imported into Lightsail
     * 
     */
    @PolicyResourceProperty(name="publicKey", flag="unknown_publicKey")
    private String value_publicKey;
    private boolean unknown_publicKey;
    public String publicKey() {
        if (!unknown_publicKey) return value_publicKey;
        throw new UndeferrableValueException("Value 'KeyPair.publicKey' is not present");
    }

    /**
     * A map of tags to assign to the collection. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * &gt; **NOTE:** a PGP key is not required, however it is strongly encouraged. Without a PGP key, the private key material will be stored in state unencrypted.`pgp_key` is ignored if `public_key` is supplied.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'KeyPair.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'KeyPair.tagsAll' is not present");
    }

}
