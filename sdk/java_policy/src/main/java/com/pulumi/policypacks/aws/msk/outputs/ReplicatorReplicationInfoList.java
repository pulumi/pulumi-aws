// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.msk.outputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.msk.outputs.ReplicatorReplicationInfoListConsumerGroupReplication;
import com.pulumi.policypacks.aws.msk.outputs.ReplicatorReplicationInfoListTopicReplication;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class ReplicatorReplicationInfoList {

    /**
     * Configuration relating to consumer group replication.
     * 
     */
    @PolicyResourceProperty(name="consumerGroupReplications", flag="unknown_consumerGroupReplications")
    private List<ReplicatorReplicationInfoListConsumerGroupReplication> value_consumerGroupReplications;
    private boolean unknown_consumerGroupReplications;
    public List<ReplicatorReplicationInfoListConsumerGroupReplication> consumerGroupReplications() {
        if (!unknown_consumerGroupReplications) return value_consumerGroupReplications;
        throw new UndeferrableValueException("Value 'ReplicatorReplicationInfoList.consumerGroupReplications' is not present");
    }

    @PolicyResourceProperty(name="sourceKafkaClusterAlias", flag="unknown_sourceKafkaClusterAlias")
    private @Nullable String value_sourceKafkaClusterAlias;
    private boolean unknown_sourceKafkaClusterAlias;
    public @Nullable String sourceKafkaClusterAlias() {
        if (!unknown_sourceKafkaClusterAlias) return value_sourceKafkaClusterAlias;
        throw new UndeferrableValueException("Value 'ReplicatorReplicationInfoList.sourceKafkaClusterAlias' is not present");
    }

    /**
     * The ARN of the source Kafka cluster.
     * 
     */
    @PolicyResourceProperty(name="sourceKafkaClusterArn", flag="unknown_sourceKafkaClusterArn")
    private String value_sourceKafkaClusterArn;
    private boolean unknown_sourceKafkaClusterArn;
    public String sourceKafkaClusterArn() {
        if (!unknown_sourceKafkaClusterArn) return value_sourceKafkaClusterArn;
        throw new UndeferrableValueException("Value 'ReplicatorReplicationInfoList.sourceKafkaClusterArn' is not present");
    }

    /**
     * The type of compression to use writing records to target Kafka cluster.
     * 
     */
    @PolicyResourceProperty(name="targetCompressionType", flag="unknown_targetCompressionType")
    private String value_targetCompressionType;
    private boolean unknown_targetCompressionType;
    public String targetCompressionType() {
        if (!unknown_targetCompressionType) return value_targetCompressionType;
        throw new UndeferrableValueException("Value 'ReplicatorReplicationInfoList.targetCompressionType' is not present");
    }

    @PolicyResourceProperty(name="targetKafkaClusterAlias", flag="unknown_targetKafkaClusterAlias")
    private @Nullable String value_targetKafkaClusterAlias;
    private boolean unknown_targetKafkaClusterAlias;
    public @Nullable String targetKafkaClusterAlias() {
        if (!unknown_targetKafkaClusterAlias) return value_targetKafkaClusterAlias;
        throw new UndeferrableValueException("Value 'ReplicatorReplicationInfoList.targetKafkaClusterAlias' is not present");
    }

    /**
     * The ARN of the target Kafka cluster.
     * 
     */
    @PolicyResourceProperty(name="targetKafkaClusterArn", flag="unknown_targetKafkaClusterArn")
    private String value_targetKafkaClusterArn;
    private boolean unknown_targetKafkaClusterArn;
    public String targetKafkaClusterArn() {
        if (!unknown_targetKafkaClusterArn) return value_targetKafkaClusterArn;
        throw new UndeferrableValueException("Value 'ReplicatorReplicationInfoList.targetKafkaClusterArn' is not present");
    }

    /**
     * Configuration relating to topic replication.
     * 
     */
    @PolicyResourceProperty(name="topicReplications", flag="unknown_topicReplications")
    private List<ReplicatorReplicationInfoListTopicReplication> value_topicReplications;
    private boolean unknown_topicReplications;
    public List<ReplicatorReplicationInfoListTopicReplication> topicReplications() {
        if (!unknown_topicReplications) return value_topicReplications;
        throw new UndeferrableValueException("Value 'ReplicatorReplicationInfoList.topicReplications' is not present");
    }

}
