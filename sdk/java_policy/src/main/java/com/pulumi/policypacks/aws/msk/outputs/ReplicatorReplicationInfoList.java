// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.msk.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.msk.outputs.ReplicatorReplicationInfoListConsumerGroupReplication;
import com.pulumi.policypacks.aws.msk.outputs.ReplicatorReplicationInfoListTopicReplication;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class ReplicatorReplicationInfoList {

    /**
     * Configuration relating to consumer group replication.
     * 
     */
    private UndeferrableValue<List<ReplicatorReplicationInfoListConsumerGroupReplication>> consumerGroupReplications;

    public List<ReplicatorReplicationInfoListConsumerGroupReplication> consumerGroupReplications() {
        if (consumerGroupReplications == null) return null;
        return consumerGroupReplications.getValue("ReplicatorReplicationInfoList.consumerGroupReplications");
    }

    private @Nullable UndeferrableValue<String> sourceKafkaClusterAlias;

    public @Nullable String sourceKafkaClusterAlias() {
        if (sourceKafkaClusterAlias == null) return null;
        return sourceKafkaClusterAlias.getValue("ReplicatorReplicationInfoList.sourceKafkaClusterAlias");
    }

    /**
     * The ARN of the source Kafka cluster.
     * 
     */
    private UndeferrableValue<String> sourceKafkaClusterArn;

    public String sourceKafkaClusterArn() {
        if (sourceKafkaClusterArn == null) return null;
        return sourceKafkaClusterArn.getValue("ReplicatorReplicationInfoList.sourceKafkaClusterArn");
    }

    /**
     * The type of compression to use writing records to target Kafka cluster.
     * 
     */
    private UndeferrableValue<String> targetCompressionType;

    public String targetCompressionType() {
        if (targetCompressionType == null) return null;
        return targetCompressionType.getValue("ReplicatorReplicationInfoList.targetCompressionType");
    }

    private @Nullable UndeferrableValue<String> targetKafkaClusterAlias;

    public @Nullable String targetKafkaClusterAlias() {
        if (targetKafkaClusterAlias == null) return null;
        return targetKafkaClusterAlias.getValue("ReplicatorReplicationInfoList.targetKafkaClusterAlias");
    }

    /**
     * The ARN of the target Kafka cluster.
     * 
     */
    private UndeferrableValue<String> targetKafkaClusterArn;

    public String targetKafkaClusterArn() {
        if (targetKafkaClusterArn == null) return null;
        return targetKafkaClusterArn.getValue("ReplicatorReplicationInfoList.targetKafkaClusterArn");
    }

    /**
     * Configuration relating to topic replication.
     * 
     */
    private UndeferrableValue<List<ReplicatorReplicationInfoListTopicReplication>> topicReplications;

    public List<ReplicatorReplicationInfoListTopicReplication> topicReplications() {
        if (topicReplications == null) return null;
        return topicReplications.getValue("ReplicatorReplicationInfoList.topicReplications");
    }

}
