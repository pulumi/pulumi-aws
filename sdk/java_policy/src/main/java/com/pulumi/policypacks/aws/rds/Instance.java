// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rds;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.rds.outputs.InstanceBlueGreenUpdate;
import com.pulumi.policypacks.aws.rds.outputs.InstanceListenerEndpoint;
import com.pulumi.policypacks.aws.rds.outputs.InstanceMasterUserSecret;
import com.pulumi.policypacks.aws.rds.outputs.InstanceRestoreToPointInTime;
import com.pulumi.policypacks.aws.rds.outputs.InstanceS3Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rds/instance:Instance")
public final class Instance extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Specifies the DNS address of the DB instance.
     * 
     */
    @PolicyResourceProperty(name="address", flag="unknown_address")
    private String value_address;
    private boolean unknown_address;
    public String address() {
        if (!unknown_address) return value_address;
        throw new UndeferrableValueException("Value 'Instance.address' is not present");
    }

    /**
     * The allocated storage in gibibytes. If `max_allocated_storage` is configured, this argument represents the initial storage allocation and differences from the configuration will be ignored automatically when Storage Autoscaling occurs. If `replicate_source_db` is set, the value is ignored during the creation of the instance.
     * 
     */
    @PolicyResourceProperty(name="allocatedStorage", flag="unknown_allocatedStorage")
    private Integer value_allocatedStorage;
    private boolean unknown_allocatedStorage;
    public Integer allocatedStorage() {
        if (!unknown_allocatedStorage) return value_allocatedStorage;
        throw new UndeferrableValueException("Value 'Instance.allocatedStorage' is not present");
    }

    /**
     * Indicates that major version
     * upgrades are allowed. Changing this parameter does not result in an outage and
     * the change is asynchronously applied as soon as possible.
     * 
     */
    @PolicyResourceProperty(name="allowMajorVersionUpgrade", flag="unknown_allowMajorVersionUpgrade")
    private @Nullable Boolean value_allowMajorVersionUpgrade;
    private boolean unknown_allowMajorVersionUpgrade;
    public @Nullable Boolean allowMajorVersionUpgrade() {
        if (!unknown_allowMajorVersionUpgrade) return value_allowMajorVersionUpgrade;
        throw new UndeferrableValueException("Value 'Instance.allowMajorVersionUpgrade' is not present");
    }

    /**
     * Specifies whether any database modifications
     * are applied immediately, or during the next maintenance window. Default is
     * `false`. See [Amazon RDS Documentation for more
     * information.](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html)
     * 
     */
    @PolicyResourceProperty(name="applyImmediately", flag="unknown_applyImmediately")
    private @Nullable Boolean value_applyImmediately;
    private boolean unknown_applyImmediately;
    public @Nullable Boolean applyImmediately() {
        if (!unknown_applyImmediately) return value_applyImmediately;
        throw new UndeferrableValueException("Value 'Instance.applyImmediately' is not present");
    }

    /**
     * The ARN of the RDS instance.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Instance.arn' is not present");
    }

    /**
     * Indicates that minor engine upgrades
     * will be applied automatically to the DB instance during the maintenance window.
     * Defaults to true.
     * 
     */
    @PolicyResourceProperty(name="autoMinorVersionUpgrade", flag="unknown_autoMinorVersionUpgrade")
    private @Nullable Boolean value_autoMinorVersionUpgrade;
    private boolean unknown_autoMinorVersionUpgrade;
    public @Nullable Boolean autoMinorVersionUpgrade() {
        if (!unknown_autoMinorVersionUpgrade) return value_autoMinorVersionUpgrade;
        throw new UndeferrableValueException("Value 'Instance.autoMinorVersionUpgrade' is not present");
    }

    /**
     * The AZ for the RDS instance.
     * 
     */
    @PolicyResourceProperty(name="availabilityZone", flag="unknown_availabilityZone")
    private String value_availabilityZone;
    private boolean unknown_availabilityZone;
    public String availabilityZone() {
        if (!unknown_availabilityZone) return value_availabilityZone;
        throw new UndeferrableValueException("Value 'Instance.availabilityZone' is not present");
    }

    /**
     * The days to retain backups for.
     * Must be between `0` and `35`.
     * Default is `0`.
     * Must be greater than `0` if the database is used as a source for a [Read Replica][instance-replication],
     * uses low-downtime updates,
     * or will use [RDS Blue/Green deployments][blue-green].
     * 
     */
    @PolicyResourceProperty(name="backupRetentionPeriod", flag="unknown_backupRetentionPeriod")
    private Integer value_backupRetentionPeriod;
    private boolean unknown_backupRetentionPeriod;
    public Integer backupRetentionPeriod() {
        if (!unknown_backupRetentionPeriod) return value_backupRetentionPeriod;
        throw new UndeferrableValueException("Value 'Instance.backupRetentionPeriod' is not present");
    }

    /**
     * Specifies where automated backups and manual snapshots are stored. Possible values are `region` (default) and `outposts`. See [Working with Amazon RDS on AWS Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html) for more information.
     * 
     */
    @PolicyResourceProperty(name="backupTarget", flag="unknown_backupTarget")
    private String value_backupTarget;
    private boolean unknown_backupTarget;
    public String backupTarget() {
        if (!unknown_backupTarget) return value_backupTarget;
        throw new UndeferrableValueException("Value 'Instance.backupTarget' is not present");
    }

    /**
     * The daily time range (in UTC) during which automated backups are created if they are enabled.
     * Example: &#34;09:46-10:16&#34;. Must not overlap with `maintenance_window`.
     * 
     */
    @PolicyResourceProperty(name="backupWindow", flag="unknown_backupWindow")
    private String value_backupWindow;
    private boolean unknown_backupWindow;
    public String backupWindow() {
        if (!unknown_backupWindow) return value_backupWindow;
        throw new UndeferrableValueException("Value 'Instance.backupWindow' is not present");
    }

    /**
     * Enables low-downtime updates using [RDS Blue/Green deployments][blue-green].
     * See `blue_green_update` below.
     * 
     */
    @PolicyResourceProperty(name="blueGreenUpdate", flag="unknown_blueGreenUpdate")
    private @Nullable InstanceBlueGreenUpdate value_blueGreenUpdate;
    private boolean unknown_blueGreenUpdate;
    public @Nullable InstanceBlueGreenUpdate blueGreenUpdate() {
        if (!unknown_blueGreenUpdate) return value_blueGreenUpdate;
        throw new UndeferrableValueException("Value 'Instance.blueGreenUpdate' is not present");
    }

    /**
     * The identifier of the CA certificate for the DB instance.
     * 
     */
    @PolicyResourceProperty(name="caCertIdentifier", flag="unknown_caCertIdentifier")
    private String value_caCertIdentifier;
    private boolean unknown_caCertIdentifier;
    public String caCertIdentifier() {
        if (!unknown_caCertIdentifier) return value_caCertIdentifier;
        throw new UndeferrableValueException("Value 'Instance.caCertIdentifier' is not present");
    }

    /**
     * The character set name to use for DB encoding in Oracle and Microsoft SQL instances (collation).
     * This can&#39;t be changed.
     * See [Oracle Character Sets Supported in Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.OracleCharacterSets.html) or
     * [Server-Level Collation for Microsoft SQL Server](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.SQLServer.CommonDBATasks.Collation.html) for more information.
     * Cannot be set  with `replicate_source_db`, `restore_to_point_in_time`, `s3_import`, or `snapshot_identifier`.
     * 
     */
    @PolicyResourceProperty(name="characterSetName", flag="unknown_characterSetName")
    private String value_characterSetName;
    private boolean unknown_characterSetName;
    public String characterSetName() {
        if (!unknown_characterSetName) return value_characterSetName;
        throw new UndeferrableValueException("Value 'Instance.characterSetName' is not present");
    }

    /**
     * Copy all Instance `tags` to snapshots. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="copyTagsToSnapshot", flag="unknown_copyTagsToSnapshot")
    private @Nullable Boolean value_copyTagsToSnapshot;
    private boolean unknown_copyTagsToSnapshot;
    public @Nullable Boolean copyTagsToSnapshot() {
        if (!unknown_copyTagsToSnapshot) return value_copyTagsToSnapshot;
        throw new UndeferrableValueException("Value 'Instance.copyTagsToSnapshot' is not present");
    }

    /**
     * The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.
     * 
     */
    @PolicyResourceProperty(name="customIamInstanceProfile", flag="unknown_customIamInstanceProfile")
    private @Nullable String value_customIamInstanceProfile;
    private boolean unknown_customIamInstanceProfile;
    public @Nullable String customIamInstanceProfile() {
        if (!unknown_customIamInstanceProfile) return value_customIamInstanceProfile;
        throw new UndeferrableValueException("Value 'Instance.customIamInstanceProfile' is not present");
    }

    /**
     * Indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. See [CoIP for RDS on Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html#rds-on-outposts.coip) for more information.
     * 
     * &gt; **NOTE:** Removing the `replicate_source_db` attribute from an existing RDS
     * Replicate database managed by the provider will promote the database to a fully
     * standalone database.
     * 
     */
    @PolicyResourceProperty(name="customerOwnedIpEnabled", flag="unknown_customerOwnedIpEnabled")
    private @Nullable Boolean value_customerOwnedIpEnabled;
    private boolean unknown_customerOwnedIpEnabled;
    public @Nullable Boolean customerOwnedIpEnabled() {
        if (!unknown_customerOwnedIpEnabled) return value_customerOwnedIpEnabled;
        throw new UndeferrableValueException("Value 'Instance.customerOwnedIpEnabled' is not present");
    }

    /**
     * The mode of Database Insights that is enabled for the instance. Valid values: `standard`, `advanced` .
     * 
     */
    @PolicyResourceProperty(name="databaseInsightsMode", flag="unknown_databaseInsightsMode")
    private String value_databaseInsightsMode;
    private boolean unknown_databaseInsightsMode;
    public String databaseInsightsMode() {
        if (!unknown_databaseInsightsMode) return value_databaseInsightsMode;
        throw new UndeferrableValueException("Value 'Instance.databaseInsightsMode' is not present");
    }

    /**
     * The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Note that this does not apply for Oracle or SQL Server engines. See the [AWS documentation](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/create-db-instance.html) for more details on what applies for those engines. If you are providing an Oracle db name, it needs to be in all upper case. Cannot be specified for a replica.
     * 
     */
    @PolicyResourceProperty(name="dbName", flag="unknown_dbName")
    private String value_dbName;
    private boolean unknown_dbName;
    public String dbName() {
        if (!unknown_dbName) return value_dbName;
        throw new UndeferrableValueException("Value 'Instance.dbName' is not present");
    }

    /**
     * Name of DB subnet group.
     * DB instance will be created in the VPC associated with the DB subnet group.
     * If unspecified, will be created in the `default` Subnet Group.
     * When working with read replicas created in the same region, defaults to the Subnet Group Name of the source DB.
     * When working with read replicas created in a different region, defaults to the `default` Subnet Group.
     * See [DBSubnetGroupName in API action CreateDBInstanceReadReplica](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstanceReadReplica.html) for additional read replica constraints.
     * 
     */
    @PolicyResourceProperty(name="dbSubnetGroupName", flag="unknown_dbSubnetGroupName")
    private String value_dbSubnetGroupName;
    private boolean unknown_dbSubnetGroupName;
    public String dbSubnetGroupName() {
        if (!unknown_dbSubnetGroupName) return value_dbSubnetGroupName;
        throw new UndeferrableValueException("Value 'Instance.dbSubnetGroupName' is not present");
    }

    /**
     * Use a dedicated log volume (DLV) for the DB instance. Requires Provisioned IOPS. See the [AWS documentation](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.dlv) for more details.
     * 
     */
    @PolicyResourceProperty(name="dedicatedLogVolume", flag="unknown_dedicatedLogVolume")
    private @Nullable Boolean value_dedicatedLogVolume;
    private boolean unknown_dedicatedLogVolume;
    public @Nullable Boolean dedicatedLogVolume() {
        if (!unknown_dedicatedLogVolume) return value_dedicatedLogVolume;
        throw new UndeferrableValueException("Value 'Instance.dedicatedLogVolume' is not present");
    }

    /**
     * Specifies whether to remove automated backups immediately after the DB instance is deleted. Default is `true`.
     * 
     */
    @PolicyResourceProperty(name="deleteAutomatedBackups", flag="unknown_deleteAutomatedBackups")
    private @Nullable Boolean value_deleteAutomatedBackups;
    private boolean unknown_deleteAutomatedBackups;
    public @Nullable Boolean deleteAutomatedBackups() {
        if (!unknown_deleteAutomatedBackups) return value_deleteAutomatedBackups;
        throw new UndeferrableValueException("Value 'Instance.deleteAutomatedBackups' is not present");
    }

    /**
     * If the DB instance should have deletion protection enabled. The database can&#39;t be deleted when this value is set to `true`. The default is `false`.
     * 
     */
    @PolicyResourceProperty(name="deletionProtection", flag="unknown_deletionProtection")
    private @Nullable Boolean value_deletionProtection;
    private boolean unknown_deletionProtection;
    public @Nullable Boolean deletionProtection() {
        if (!unknown_deletionProtection) return value_deletionProtection;
        throw new UndeferrableValueException("Value 'Instance.deletionProtection' is not present");
    }

    /**
     * The ID of the Directory Service Active Directory domain to create the instance in. Conflicts with `domain_fqdn`, `domain_ou`, `domain_auth_secret_arn` and a `domain_dns_ips`.
     * 
     */
    @PolicyResourceProperty(name="domain", flag="unknown_domain")
    private @Nullable String value_domain;
    private boolean unknown_domain;
    public @Nullable String domain() {
        if (!unknown_domain) return value_domain;
        throw new UndeferrableValueException("Value 'Instance.domain' is not present");
    }

    /**
     * The ARN for the Secrets Manager secret with the self managed Active Directory credentials for the user joining the domain. Conflicts with `domain` and `domain_iam_role_name`.
     * 
     */
    @PolicyResourceProperty(name="domainAuthSecretArn", flag="unknown_domainAuthSecretArn")
    private @Nullable String value_domainAuthSecretArn;
    private boolean unknown_domainAuthSecretArn;
    public @Nullable String domainAuthSecretArn() {
        if (!unknown_domainAuthSecretArn) return value_domainAuthSecretArn;
        throw new UndeferrableValueException("Value 'Instance.domainAuthSecretArn' is not present");
    }

    /**
     * The IPv4 DNS IP addresses of your primary and secondary self managed Active Directory domain controllers. Two IP addresses must be provided. If there isn&#39;t a secondary domain controller, use the IP address of the primary domain controller for both entries in the list. Conflicts with `domain` and `domain_iam_role_name`.
     * 
     */
    @PolicyResourceProperty(name="domainDnsIps", flag="unknown_domainDnsIps")
    private @Nullable List<String> value_domainDnsIps;
    private boolean unknown_domainDnsIps;
    public @Nullable List<String> domainDnsIps() {
        if (!unknown_domainDnsIps) return value_domainDnsIps;
        throw new UndeferrableValueException("Value 'Instance.domainDnsIps' is not present");
    }

    /**
     * The fully qualified domain name (FQDN) of the self managed Active Directory domain. Conflicts with `domain` and `domain_iam_role_name`.
     * 
     */
    @PolicyResourceProperty(name="domainFqdn", flag="unknown_domainFqdn")
    private String value_domainFqdn;
    private boolean unknown_domainFqdn;
    public String domainFqdn() {
        if (!unknown_domainFqdn) return value_domainFqdn;
        throw new UndeferrableValueException("Value 'Instance.domainFqdn' is not present");
    }

    /**
     * The name of the IAM role to be used when making API calls to the Directory Service. Conflicts with `domain_fqdn`, `domain_ou`, `domain_auth_secret_arn` and a `domain_dns_ips`.
     * 
     */
    @PolicyResourceProperty(name="domainIamRoleName", flag="unknown_domainIamRoleName")
    private @Nullable String value_domainIamRoleName;
    private boolean unknown_domainIamRoleName;
    public @Nullable String domainIamRoleName() {
        if (!unknown_domainIamRoleName) return value_domainIamRoleName;
        throw new UndeferrableValueException("Value 'Instance.domainIamRoleName' is not present");
    }

    /**
     * The self managed Active Directory organizational unit for your DB instance to join. Conflicts with `domain` and `domain_iam_role_name`.
     * 
     */
    @PolicyResourceProperty(name="domainOu", flag="unknown_domainOu")
    private @Nullable String value_domainOu;
    private boolean unknown_domainOu;
    public @Nullable String domainOu() {
        if (!unknown_domainOu) return value_domainOu;
        throw new UndeferrableValueException("Value 'Instance.domainOu' is not present");
    }

    /**
     * Set of log types to enable for exporting to CloudWatch logs. If omitted, no logs will be exported. For supported values, see the EnableCloudwatchLogsExports.member.N parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html).
     * 
     */
    @PolicyResourceProperty(name="enabledCloudwatchLogsExports", flag="unknown_enabledCloudwatchLogsExports")
    private @Nullable List<String> value_enabledCloudwatchLogsExports;
    private boolean unknown_enabledCloudwatchLogsExports;
    public @Nullable List<String> enabledCloudwatchLogsExports() {
        if (!unknown_enabledCloudwatchLogsExports) return value_enabledCloudwatchLogsExports;
        throw new UndeferrableValueException("Value 'Instance.enabledCloudwatchLogsExports' is not present");
    }

    /**
     * The connection endpoint in `address:port` format.
     * 
     */
    @PolicyResourceProperty(name="endpoint", flag="unknown_endpoint")
    private String value_endpoint;
    private boolean unknown_endpoint;
    public String endpoint() {
        if (!unknown_endpoint) return value_endpoint;
        throw new UndeferrableValueException("Value 'Instance.endpoint' is not present");
    }

    /**
     * The database engine to use. For supported values, see the Engine parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html). Note that for Amazon Aurora instances the engine must match the DB cluster&#39;s engine&#39;. For information on the difference between the available Aurora MySQL engines see [Comparison between Aurora MySQL 1 and Aurora MySQL 2](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AuroraMySQL.Updates.20180206.html) in the Amazon RDS User Guide.
     * 
     */
    @PolicyResourceProperty(name="engine", flag="unknown_engine")
    private String value_engine;
    private boolean unknown_engine;
    public String engine() {
        if (!unknown_engine) return value_engine;
        throw new UndeferrableValueException("Value 'Instance.engine' is not present");
    }

    /**
     * The life cycle type for this DB instance. This setting applies only to RDS for MySQL and RDS for PostgreSQL. Valid values are `open-source-rds-extended-support`, `open-source-rds-extended-support-disabled`. Default value is `open-source-rds-extended-support`. [Using Amazon RDS Extended Support]: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html
     * 
     */
    @PolicyResourceProperty(name="engineLifecycleSupport", flag="unknown_engineLifecycleSupport")
    private String value_engineLifecycleSupport;
    private boolean unknown_engineLifecycleSupport;
    public String engineLifecycleSupport() {
        if (!unknown_engineLifecycleSupport) return value_engineLifecycleSupport;
        throw new UndeferrableValueException("Value 'Instance.engineLifecycleSupport' is not present");
    }

    /**
     * The engine version to use. If `auto_minor_version_upgrade` is enabled, you can provide a prefix of the version such as `8.0` (for `8.0.36`). The actual engine version used is returned in the attribute `engine_version_actual`, see Attribute Reference below. For supported values, see the EngineVersion parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html). Note that for Amazon Aurora instances the engine version must match the DB cluster&#39;s engine version&#39;.
     * 
     */
    @PolicyResourceProperty(name="engineVersion", flag="unknown_engineVersion")
    private String value_engineVersion;
    private boolean unknown_engineVersion;
    public String engineVersion() {
        if (!unknown_engineVersion) return value_engineVersion;
        throw new UndeferrableValueException("Value 'Instance.engineVersion' is not present");
    }

    /**
     * The running version of the database.
     * 
     */
    @PolicyResourceProperty(name="engineVersionActual", flag="unknown_engineVersionActual")
    private String value_engineVersionActual;
    private boolean unknown_engineVersionActual;
    public String engineVersionActual() {
        if (!unknown_engineVersionActual) return value_engineVersionActual;
        throw new UndeferrableValueException("Value 'Instance.engineVersionActual' is not present");
    }

    /**
     * The name of your final DB snapshot
     * when this DB instance is deleted. Must be provided if `skip_final_snapshot` is
     * set to `false`. The value must begin with a letter, only contain alphanumeric characters and hyphens, and not end with a hyphen or contain two consecutive hyphens. Must not be provided when deleting a read replica.
     * 
     */
    @PolicyResourceProperty(name="finalSnapshotIdentifier", flag="unknown_finalSnapshotIdentifier")
    private @Nullable String value_finalSnapshotIdentifier;
    private boolean unknown_finalSnapshotIdentifier;
    public @Nullable String finalSnapshotIdentifier() {
        if (!unknown_finalSnapshotIdentifier) return value_finalSnapshotIdentifier;
        throw new UndeferrableValueException("Value 'Instance.finalSnapshotIdentifier' is not present");
    }

    /**
     * Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
     * 
     */
    @PolicyResourceProperty(name="hostedZoneId", flag="unknown_hostedZoneId")
    private String value_hostedZoneId;
    private boolean unknown_hostedZoneId;
    public String hostedZoneId() {
        if (!unknown_hostedZoneId) return value_hostedZoneId;
        throw new UndeferrableValueException("Value 'Instance.hostedZoneId' is not present");
    }

    /**
     * Specifies whether mappings of AWS Identity and Access Management (IAM) accounts to database
     * accounts is enabled.
     * 
     */
    @PolicyResourceProperty(name="iamDatabaseAuthenticationEnabled", flag="unknown_iamDatabaseAuthenticationEnabled")
    private @Nullable Boolean value_iamDatabaseAuthenticationEnabled;
    private boolean unknown_iamDatabaseAuthenticationEnabled;
    public @Nullable Boolean iamDatabaseAuthenticationEnabled() {
        if (!unknown_iamDatabaseAuthenticationEnabled) return value_iamDatabaseAuthenticationEnabled;
        throw new UndeferrableValueException("Value 'Instance.iamDatabaseAuthenticationEnabled' is not present");
    }

    /**
     * The name of the RDS instance, if omitted, this provider will assign a random, unique identifier. Required if `restore_to_point_in_time` is specified.
     * 
     */
    @PolicyResourceProperty(name="identifier", flag="unknown_identifier")
    private String value_identifier;
    private boolean unknown_identifier;
    public String identifier() {
        if (!unknown_identifier) return value_identifier;
        throw new UndeferrableValueException("Value 'Instance.identifier' is not present");
    }

    /**
     * Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
     * 
     */
    @PolicyResourceProperty(name="identifierPrefix", flag="unknown_identifierPrefix")
    private String value_identifierPrefix;
    private boolean unknown_identifierPrefix;
    public String identifierPrefix() {
        if (!unknown_identifierPrefix) return value_identifierPrefix;
        throw new UndeferrableValueException("Value 'Instance.identifierPrefix' is not present");
    }

    /**
     * The instance type of the RDS instance.
     * 
     */
    @PolicyResourceProperty(name="instanceClass", flag="unknown_instanceClass")
    private String value_instanceClass;
    private boolean unknown_instanceClass;
    public String instanceClass() {
        if (!unknown_instanceClass) return value_instanceClass;
        throw new UndeferrableValueException("Value 'Instance.instanceClass' is not present");
    }

    /**
     * The amount of provisioned IOPS. Setting this implies a
     * storage_type of &#34;io1&#34; or &#34;io2&#34;. Can only be set when `storage_type` is `&#34;io1&#34;`, `&#34;io2` or `&#34;gp3&#34;`.
     * Cannot be specified for gp3 storage if the `allocated_storage` value is below a per-`engine` threshold.
     * See the [RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#gp3-storage) for details.
     * 
     */
    @PolicyResourceProperty(name="iops", flag="unknown_iops")
    private Integer value_iops;
    private boolean unknown_iops;
    public Integer iops() {
        if (!unknown_iops) return value_iops;
        throw new UndeferrableValueException("Value 'Instance.iops' is not present");
    }

    /**
     * The ARN for the KMS encryption key. If creating an
     * encrypted replica, set this to the destination KMS ARN.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'Instance.kmsKeyId' is not present");
    }

    /**
     * The latest time, in UTC [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8), to which a database can be restored with point-in-time restore.
     * 
     */
    @PolicyResourceProperty(name="latestRestorableTime", flag="unknown_latestRestorableTime")
    private String value_latestRestorableTime;
    private boolean unknown_latestRestorableTime;
    public String latestRestorableTime() {
        if (!unknown_latestRestorableTime) return value_latestRestorableTime;
        throw new UndeferrableValueException("Value 'Instance.latestRestorableTime' is not present");
    }

    /**
     * License model information for this DB instance. Valid values for this field are as follows:
     * * RDS for MariaDB: `general-public-license`
     * * RDS for Microsoft SQL Server: `license-included`
     * * RDS for MySQL: `general-public-license`
     * * RDS for Oracle: `bring-your-own-license | license-included`
     * * RDS for PostgreSQL: `postgresql-license`
     * 
     */
    @PolicyResourceProperty(name="licenseModel", flag="unknown_licenseModel")
    private String value_licenseModel;
    private boolean unknown_licenseModel;
    public String licenseModel() {
        if (!unknown_licenseModel) return value_licenseModel;
        throw new UndeferrableValueException("Value 'Instance.licenseModel' is not present");
    }

    /**
     * Specifies the listener connection endpoint for SQL Server Always On. See endpoint below.
     * 
     */
    @PolicyResourceProperty(name="listenerEndpoints", flag="unknown_listenerEndpoints")
    private List<InstanceListenerEndpoint> value_listenerEndpoints;
    private boolean unknown_listenerEndpoints;
    public List<InstanceListenerEndpoint> listenerEndpoints() {
        if (!unknown_listenerEndpoints) return value_listenerEndpoints;
        throw new UndeferrableValueException("Value 'Instance.listenerEndpoints' is not present");
    }

    /**
     * The window to perform maintenance in.
     * Syntax: &#34;ddd:hh24:mi-ddd:hh24:mi&#34;. Eg: &#34;Mon:00:00-Mon:03:00&#34;. See [RDS
     * Maintenance Window
     * docs](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow)
     * for more information.
     * 
     */
    @PolicyResourceProperty(name="maintenanceWindow", flag="unknown_maintenanceWindow")
    private String value_maintenanceWindow;
    private boolean unknown_maintenanceWindow;
    public String maintenanceWindow() {
        if (!unknown_maintenanceWindow) return value_maintenanceWindow;
        throw new UndeferrableValueException("Value 'Instance.maintenanceWindow' is not present");
    }

    /**
     * Set to true to allow RDS to manage the master user password in Secrets Manager. Cannot be set if `password` or `password_wo` is provided.
     * 
     */
    @PolicyResourceProperty(name="manageMasterUserPassword", flag="unknown_manageMasterUserPassword")
    private @Nullable Boolean value_manageMasterUserPassword;
    private boolean unknown_manageMasterUserPassword;
    public @Nullable Boolean manageMasterUserPassword() {
        if (!unknown_manageMasterUserPassword) return value_manageMasterUserPassword;
        throw new UndeferrableValueException("Value 'Instance.manageMasterUserPassword' is not present");
    }

    /**
     * The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If not specified, the default KMS key for your Amazon Web Services account is used.
     * 
     */
    @PolicyResourceProperty(name="masterUserSecretKmsKeyId", flag="unknown_masterUserSecretKmsKeyId")
    private String value_masterUserSecretKmsKeyId;
    private boolean unknown_masterUserSecretKmsKeyId;
    public String masterUserSecretKmsKeyId() {
        if (!unknown_masterUserSecretKmsKeyId) return value_masterUserSecretKmsKeyId;
        throw new UndeferrableValueException("Value 'Instance.masterUserSecretKmsKeyId' is not present");
    }

    /**
     * A block that specifies the master user secret. Only available when `manage_master_user_password` is set to true. Documented below.
     * 
     */
    @PolicyResourceProperty(name="masterUserSecrets", flag="unknown_masterUserSecrets")
    private List<InstanceMasterUserSecret> value_masterUserSecrets;
    private boolean unknown_masterUserSecrets;
    public List<InstanceMasterUserSecret> masterUserSecrets() {
        if (!unknown_masterUserSecrets) return value_masterUserSecrets;
        throw new UndeferrableValueException("Value 'Instance.masterUserSecrets' is not present");
    }

    /**
     * Specifies the maximum storage (in GiB) that Amazon RDS can automatically scale to for this DB instance. By default, Storage Autoscaling is disabled. To enable Storage Autoscaling, set `max_allocated_storage` to **greater than or equal to** `allocated_storage`. Setting `max_allocated_storage` to 0 explicitly disables Storage Autoscaling. When configured, changes to `allocated_storage` will be automatically ignored as the storage can dynamically scale.
     * 
     */
    @PolicyResourceProperty(name="maxAllocatedStorage", flag="unknown_maxAllocatedStorage")
    private @Nullable Integer value_maxAllocatedStorage;
    private boolean unknown_maxAllocatedStorage;
    public @Nullable Integer maxAllocatedStorage() {
        if (!unknown_maxAllocatedStorage) return value_maxAllocatedStorage;
        throw new UndeferrableValueException("Value 'Instance.maxAllocatedStorage' is not present");
    }

    /**
     * The interval, in seconds, between points
     * when Enhanced Monitoring metrics are collected for the DB instance. To disable
     * collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid
     * Values: 0, 1, 5, 10, 15, 30, 60.
     * 
     */
    @PolicyResourceProperty(name="monitoringInterval", flag="unknown_monitoringInterval")
    private @Nullable Integer value_monitoringInterval;
    private boolean unknown_monitoringInterval;
    public @Nullable Integer monitoringInterval() {
        if (!unknown_monitoringInterval) return value_monitoringInterval;
        throw new UndeferrableValueException("Value 'Instance.monitoringInterval' is not present");
    }

    /**
     * The ARN for the IAM role that permits RDS
     * to send enhanced monitoring metrics to CloudWatch Logs. You can find more
     * information on the [AWS
     * Documentation](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html)
     * what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances.
     * 
     */
    @PolicyResourceProperty(name="monitoringRoleArn", flag="unknown_monitoringRoleArn")
    private String value_monitoringRoleArn;
    private boolean unknown_monitoringRoleArn;
    public String monitoringRoleArn() {
        if (!unknown_monitoringRoleArn) return value_monitoringRoleArn;
        throw new UndeferrableValueException("Value 'Instance.monitoringRoleArn' is not present");
    }

    /**
     * Specifies if the RDS instance is multi-AZ
     * 
     */
    @PolicyResourceProperty(name="multiAz", flag="unknown_multiAz")
    private Boolean value_multiAz;
    private boolean unknown_multiAz;
    public Boolean multiAz() {
        if (!unknown_multiAz) return value_multiAz;
        throw new UndeferrableValueException("Value 'Instance.multiAz' is not present");
    }

    /**
     * @deprecated
     * This property has been deprecated. Please use &#39;dbName&#39; instead.
     * 
     */
    @Deprecated /* This property has been deprecated. Please use 'dbName' instead. */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private @Nullable String value_name;
    private boolean unknown_name;
    public @Nullable String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Instance.name' is not present");
    }

    /**
     * The national character set is used in the NCHAR, NVARCHAR2, and NCLOB data types for Oracle instances. This can&#39;t be changed. See [Oracle Character Sets
     * Supported in Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.OracleCharacterSets.html).
     * 
     */
    @PolicyResourceProperty(name="ncharCharacterSetName", flag="unknown_ncharCharacterSetName")
    private String value_ncharCharacterSetName;
    private boolean unknown_ncharCharacterSetName;
    public String ncharCharacterSetName() {
        if (!unknown_ncharCharacterSetName) return value_ncharCharacterSetName;
        throw new UndeferrableValueException("Value 'Instance.ncharCharacterSetName' is not present");
    }

    /**
     * The network type of the DB instance. Valid values: `IPV4`, `DUAL`.
     * 
     */
    @PolicyResourceProperty(name="networkType", flag="unknown_networkType")
    private String value_networkType;
    private boolean unknown_networkType;
    public String networkType() {
        if (!unknown_networkType) return value_networkType;
        throw new UndeferrableValueException("Value 'Instance.networkType' is not present");
    }

    /**
     * Name of the DB option group to associate.
     * 
     */
    @PolicyResourceProperty(name="optionGroupName", flag="unknown_optionGroupName")
    private String value_optionGroupName;
    private boolean unknown_optionGroupName;
    public String optionGroupName() {
        if (!unknown_optionGroupName) return value_optionGroupName;
        throw new UndeferrableValueException("Value 'Instance.optionGroupName' is not present");
    }

    /**
     * Name of the DB parameter group to associate.
     * 
     */
    @PolicyResourceProperty(name="parameterGroupName", flag="unknown_parameterGroupName")
    private String value_parameterGroupName;
    private boolean unknown_parameterGroupName;
    public String parameterGroupName() {
        if (!unknown_parameterGroupName) return value_parameterGroupName;
        throw new UndeferrableValueException("Value 'Instance.parameterGroupName' is not present");
    }

    /**
     * Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. Cannot be set if `manage_master_user_password` is set to `true`.
     * 
     */
    @PolicyResourceProperty(name="password", flag="unknown_password")
    private @Nullable String value_password;
    private boolean unknown_password;
    public @Nullable String password() {
        if (!unknown_password) return value_password;
        throw new UndeferrableValueException("Value 'Instance.password' is not present");
    }

    /**
     * Specifies whether Performance Insights are enabled. Defaults to false.
     * 
     */
    @PolicyResourceProperty(name="performanceInsightsEnabled", flag="unknown_performanceInsightsEnabled")
    private @Nullable Boolean value_performanceInsightsEnabled;
    private boolean unknown_performanceInsightsEnabled;
    public @Nullable Boolean performanceInsightsEnabled() {
        if (!unknown_performanceInsightsEnabled) return value_performanceInsightsEnabled;
        throw new UndeferrableValueException("Value 'Instance.performanceInsightsEnabled' is not present");
    }

    /**
     * The ARN for the KMS key to encrypt Performance Insights data. When specifying `performance_insights_kms_key_id`, `performance_insights_enabled` needs to be set to true. Once KMS key is set, it can never be changed.
     * 
     */
    @PolicyResourceProperty(name="performanceInsightsKmsKeyId", flag="unknown_performanceInsightsKmsKeyId")
    private String value_performanceInsightsKmsKeyId;
    private boolean unknown_performanceInsightsKmsKeyId;
    public String performanceInsightsKmsKeyId() {
        if (!unknown_performanceInsightsKmsKeyId) return value_performanceInsightsKmsKeyId;
        throw new UndeferrableValueException("Value 'Instance.performanceInsightsKmsKeyId' is not present");
    }

    /**
     * Amount of time in days to retain Performance Insights data. Valid values are `7`, `731` (2 years) or a multiple of `31`. When specifying `performance_insights_retention_period`, `performance_insights_enabled` needs to be set to true. Defaults to &#39;7&#39;.
     * 
     */
    @PolicyResourceProperty(name="performanceInsightsRetentionPeriod", flag="unknown_performanceInsightsRetentionPeriod")
    private Integer value_performanceInsightsRetentionPeriod;
    private boolean unknown_performanceInsightsRetentionPeriod;
    public Integer performanceInsightsRetentionPeriod() {
        if (!unknown_performanceInsightsRetentionPeriod) return value_performanceInsightsRetentionPeriod;
        throw new UndeferrableValueException("Value 'Instance.performanceInsightsRetentionPeriod' is not present");
    }

    /**
     * The port on which the DB accepts connections.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'Instance.port' is not present");
    }

    /**
     * Bool to control if instance is publicly
     * accessible. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="publiclyAccessible", flag="unknown_publiclyAccessible")
    private @Nullable Boolean value_publiclyAccessible;
    private boolean unknown_publiclyAccessible;
    public @Nullable Boolean publiclyAccessible() {
        if (!unknown_publiclyAccessible) return value_publiclyAccessible;
        throw new UndeferrableValueException("Value 'Instance.publiclyAccessible' is not present");
    }

    /**
     * Specifies whether the replica is in either `mounted` or `open-read-only` mode. This attribute
     * is only supported by Oracle instances. Oracle replicas operate in `open-read-only` mode unless otherwise specified. See [Working with Oracle Read Replicas](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html) for more information.
     * 
     */
    @PolicyResourceProperty(name="replicaMode", flag="unknown_replicaMode")
    private String value_replicaMode;
    private boolean unknown_replicaMode;
    public String replicaMode() {
        if (!unknown_replicaMode) return value_replicaMode;
        throw new UndeferrableValueException("Value 'Instance.replicaMode' is not present");
    }

    @PolicyResourceProperty(name="replicas", flag="unknown_replicas")
    private List<String> value_replicas;
    private boolean unknown_replicas;
    public List<String> replicas() {
        if (!unknown_replicas) return value_replicas;
        throw new UndeferrableValueException("Value 'Instance.replicas' is not present");
    }

    /**
     * Specifies that this resource is a Replica database, and to use this value as the source database.
     * If replicating an Amazon RDS Database Instance in the same region, use the `identifier` of the source DB, unless also specifying the `db_subnet_group_name`.
     * If specifying the `db_subnet_group_name` in the same region, use the `arn` of the source DB.
     * If replicating an Instance in a different region, use the `arn` of the source DB.
     * Note that if you are creating a cross-region replica of an encrypted database you will also need to specify a `kms_key_id`.
     * See [DB Instance Replication][instance-replication] and [Working with PostgreSQL and MySQL Read Replicas](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html) for more information on using Replication.
     * 
     */
    @PolicyResourceProperty(name="replicateSourceDb", flag="unknown_replicateSourceDb")
    private @Nullable String value_replicateSourceDb;
    private boolean unknown_replicateSourceDb;
    public @Nullable String replicateSourceDb() {
        if (!unknown_replicateSourceDb) return value_replicateSourceDb;
        throw new UndeferrableValueException("Value 'Instance.replicateSourceDb' is not present");
    }

    /**
     * The RDS Resource ID of this instance.
     * 
     */
    @PolicyResourceProperty(name="resourceId", flag="unknown_resourceId")
    private String value_resourceId;
    private boolean unknown_resourceId;
    public String resourceId() {
        if (!unknown_resourceId) return value_resourceId;
        throw new UndeferrableValueException("Value 'Instance.resourceId' is not present");
    }

    /**
     * A configuration block for restoring a DB instance to an arbitrary point in time.
     * Requires the `identifier` argument to be set with the name of the new DB instance to be created.
     * See Restore To Point In Time below for details.
     * 
     */
    @PolicyResourceProperty(name="restoreToPointInTime", flag="unknown_restoreToPointInTime")
    private @Nullable InstanceRestoreToPointInTime value_restoreToPointInTime;
    private boolean unknown_restoreToPointInTime;
    public @Nullable InstanceRestoreToPointInTime restoreToPointInTime() {
        if (!unknown_restoreToPointInTime) return value_restoreToPointInTime;
        throw new UndeferrableValueException("Value 'Instance.restoreToPointInTime' is not present");
    }

    /**
     * Restore from a Percona Xtrabackup in S3.  See [Importing Data into an Amazon RDS MySQL DB Instance](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html)
     * 
     */
    @PolicyResourceProperty(name="s3Import", flag="unknown_s3Import")
    private @Nullable InstanceS3Import value_s3Import;
    private boolean unknown_s3Import;
    public @Nullable InstanceS3Import s3Import() {
        if (!unknown_s3Import) return value_s3Import;
        throw new UndeferrableValueException("Value 'Instance.s3Import' is not present");
    }

    /**
     * Determines whether a final DB snapshot is
     * created before the DB instance is deleted. If true is specified, no DBSnapshot
     * is created. If false is specified, a DB snapshot is created before the DB
     * instance is deleted, using the value from `final_snapshot_identifier`. Default
     * is `false`.
     * 
     */
    @PolicyResourceProperty(name="skipFinalSnapshot", flag="unknown_skipFinalSnapshot")
    private @Nullable Boolean value_skipFinalSnapshot;
    private boolean unknown_skipFinalSnapshot;
    public @Nullable Boolean skipFinalSnapshot() {
        if (!unknown_skipFinalSnapshot) return value_skipFinalSnapshot;
        throw new UndeferrableValueException("Value 'Instance.skipFinalSnapshot' is not present");
    }

    /**
     * Specifies whether or not to create this database from a snapshot.
     * This corresponds to the snapshot ID you&#39;d find in the RDS console, e.g: rds:production-2015-06-26-06-05.
     * 
     */
    @PolicyResourceProperty(name="snapshotIdentifier", flag="unknown_snapshotIdentifier")
    private String value_snapshotIdentifier;
    private boolean unknown_snapshotIdentifier;
    public String snapshotIdentifier() {
        if (!unknown_snapshotIdentifier) return value_snapshotIdentifier;
        throw new UndeferrableValueException("Value 'Instance.snapshotIdentifier' is not present");
    }

    /**
     * The RDS instance status.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'Instance.status' is not present");
    }

    /**
     * Specifies whether the DB instance is
     * encrypted. Note that if you are creating a cross-region read replica this field
     * is ignored and you should instead declare `kms_key_id` with a valid ARN. The
     * default is `false` if not specified.
     * 
     */
    @PolicyResourceProperty(name="storageEncrypted", flag="unknown_storageEncrypted")
    private @Nullable Boolean value_storageEncrypted;
    private boolean unknown_storageEncrypted;
    public @Nullable Boolean storageEncrypted() {
        if (!unknown_storageEncrypted) return value_storageEncrypted;
        throw new UndeferrableValueException("Value 'Instance.storageEncrypted' is not present");
    }

    /**
     * The storage throughput value for the DB instance. Can only be set when `storage_type` is `&#34;gp3&#34;`. Cannot be specified if the `allocated_storage` value is below a per-`engine` threshold. See the [RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#gp3-storage) for details.
     * 
     */
    @PolicyResourceProperty(name="storageThroughput", flag="unknown_storageThroughput")
    private Integer value_storageThroughput;
    private boolean unknown_storageThroughput;
    public Integer storageThroughput() {
        if (!unknown_storageThroughput) return value_storageThroughput;
        throw new UndeferrableValueException("Value 'Instance.storageThroughput' is not present");
    }

    /**
     * One of &#34;standard&#34; (magnetic), &#34;gp2&#34; (general
     * purpose SSD), &#34;gp3&#34; (general purpose SSD that needs `iops` independently)
     * &#34;io1&#34; (provisioned IOPS SSD) or &#34;io2&#34; (block express storage provisioned IOPS
     * SSD). The default is &#34;io1&#34; if `iops` is specified, &#34;gp2&#34; if not.
     * 
     */
    @PolicyResourceProperty(name="storageType", flag="unknown_storageType")
    private String value_storageType;
    private boolean unknown_storageType;
    public String storageType() {
        if (!unknown_storageType) return value_storageType;
        throw new UndeferrableValueException("Value 'Instance.storageType' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Instance.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Instance.tagsAll' is not present");
    }

    /**
     * Time zone of the DB instance. `timezone` is currently
     * only supported by Microsoft SQL Server. The `timezone` can only be set on
     * creation. See [MSSQL User
     * Guide](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone)
     * for more information.
     * 
     */
    @PolicyResourceProperty(name="timezone", flag="unknown_timezone")
    private String value_timezone;
    private boolean unknown_timezone;
    public String timezone() {
        if (!unknown_timezone) return value_timezone;
        throw new UndeferrableValueException("Value 'Instance.timezone' is not present");
    }

    /**
     * Whether to upgrade the storage file system configuration on the read replica.
     * Can only be set with `replicate_source_db`.
     * 
     */
    @PolicyResourceProperty(name="upgradeStorageConfig", flag="unknown_upgradeStorageConfig")
    private @Nullable Boolean value_upgradeStorageConfig;
    private boolean unknown_upgradeStorageConfig;
    public @Nullable Boolean upgradeStorageConfig() {
        if (!unknown_upgradeStorageConfig) return value_upgradeStorageConfig;
        throw new UndeferrableValueException("Value 'Instance.upgradeStorageConfig' is not present");
    }

    /**
     * (Required unless a `snapshot_identifier` or `replicate_source_db`
     * is provided) Username for the master DB user. Cannot be specified for a replica.
     * 
     */
    @PolicyResourceProperty(name="username", flag="unknown_username")
    private String value_username;
    private boolean unknown_username;
    public String username() {
        if (!unknown_username) return value_username;
        throw new UndeferrableValueException("Value 'Instance.username' is not present");
    }

    /**
     * List of VPC security groups to
     * associate.
     * 
     */
    @PolicyResourceProperty(name="vpcSecurityGroupIds", flag="unknown_vpcSecurityGroupIds")
    private List<String> value_vpcSecurityGroupIds;
    private boolean unknown_vpcSecurityGroupIds;
    public List<String> vpcSecurityGroupIds() {
        if (!unknown_vpcSecurityGroupIds) return value_vpcSecurityGroupIds;
        throw new UndeferrableValueException("Value 'Instance.vpcSecurityGroupIds' is not present");
    }

}
