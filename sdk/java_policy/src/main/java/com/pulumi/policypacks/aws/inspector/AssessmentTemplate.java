// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.inspector;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.inspector.outputs.AssessmentTemplateEventSubscription;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:inspector/assessmentTemplate:AssessmentTemplate")
public final class AssessmentTemplate extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The template assessment ARN.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'AssessmentTemplate.arn' is not present");
    }

    /**
     * The duration of the inspector run.
     * 
     */
    @PolicyResourceProperty(name="duration", flag="unknown_duration")
    private Integer value_duration;
    private boolean unknown_duration;
    public Integer duration() {
        if (!unknown_duration) return value_duration;
        throw new UndeferrableValueException("Value 'AssessmentTemplate.duration' is not present");
    }

    /**
     * A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
     * 
     */
    @PolicyResourceProperty(name="eventSubscriptions", flag="unknown_eventSubscriptions")
    private @Nullable List<AssessmentTemplateEventSubscription> value_eventSubscriptions;
    private boolean unknown_eventSubscriptions;
    public @Nullable List<AssessmentTemplateEventSubscription> eventSubscriptions() {
        if (!unknown_eventSubscriptions) return value_eventSubscriptions;
        throw new UndeferrableValueException("Value 'AssessmentTemplate.eventSubscriptions' is not present");
    }

    /**
     * The name of the assessment template.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'AssessmentTemplate.name' is not present");
    }

    /**
     * The rules to be used during the run.
     * 
     */
    @PolicyResourceProperty(name="rulesPackageArns", flag="unknown_rulesPackageArns")
    private List<String> value_rulesPackageArns;
    private boolean unknown_rulesPackageArns;
    public List<String> rulesPackageArns() {
        if (!unknown_rulesPackageArns) return value_rulesPackageArns;
        throw new UndeferrableValueException("Value 'AssessmentTemplate.rulesPackageArns' is not present");
    }

    /**
     * Key-value map of tags for the Inspector assessment template. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'AssessmentTemplate.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'AssessmentTemplate.tagsAll' is not present");
    }

    /**
     * The assessment target ARN to attach the template to.
     * 
     */
    @PolicyResourceProperty(name="targetArn", flag="unknown_targetArn")
    private String value_targetArn;
    private boolean unknown_targetArn;
    public String targetArn() {
        if (!unknown_targetArn) return value_targetArn;
        throw new UndeferrableValueException("Value 'AssessmentTemplate.targetArn' is not present");
    }

}
