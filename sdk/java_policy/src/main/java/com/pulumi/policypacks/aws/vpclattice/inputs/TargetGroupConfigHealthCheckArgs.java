// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.vpclattice.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.vpclattice.inputs.TargetGroupConfigHealthCheckMatcherArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class TargetGroupConfigHealthCheckArgs {

    /**
     * Indicates whether health checking is enabled. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> enabled;

    public Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("TargetGroupConfigHealthCheckArgs.enabled");
    }

    /**
     * The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
     * 
     */
    private UndeferrableValue<Integer> healthCheckIntervalSeconds;

    public Integer healthCheckIntervalSeconds() {
        if (healthCheckIntervalSeconds == null) return null;
        return healthCheckIntervalSeconds.getValue("TargetGroupConfigHealthCheckArgs.healthCheckIntervalSeconds");
    }

    /**
     * The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
     * * ` healthy_threshold_count  ` - (Optional) The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5.
     * 
     */
    private UndeferrableValue<Integer> healthCheckTimeoutSeconds;

    public Integer healthCheckTimeoutSeconds() {
        if (healthCheckTimeoutSeconds == null) return null;
        return healthCheckTimeoutSeconds.getValue("TargetGroupConfigHealthCheckArgs.healthCheckTimeoutSeconds");
    }

    private UndeferrableValue<Integer> healthyThresholdCount;

    public Integer healthyThresholdCount() {
        if (healthyThresholdCount == null) return null;
        return healthyThresholdCount.getValue("TargetGroupConfigHealthCheckArgs.healthyThresholdCount");
    }

    /**
     * The codes to use when checking for a successful response from a target. These are called _Success codes_ in the console.
     * 
     */
    private UndeferrableValue<TargetGroupConfigHealthCheckMatcherArgs> matcher;

    public TargetGroupConfigHealthCheckMatcherArgs matcher() {
        if (matcher == null) return null;
        return matcher.getValue("TargetGroupConfigHealthCheckArgs.matcher");
    }

    /**
     * The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is `/`. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
     * 
     */
    private UndeferrableValue<String> path;

    public String path() {
        if (path == null) return null;
        return path.getValue("TargetGroupConfigHealthCheckArgs.path");
    }

    /**
     * The port used when performing health checks on targets. The default setting is the port that a target receives traffic on.
     * 
     */
    private UndeferrableValue<Integer> port;

    public Integer port() {
        if (port == null) return null;
        return port.getValue("TargetGroupConfigHealthCheckArgs.port");
    }

    /**
     * The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS`.
     * 
     */
    private UndeferrableValue<String> protocol;

    public String protocol() {
        if (protocol == null) return null;
        return protocol.getValue("TargetGroupConfigHealthCheckArgs.protocol");
    }

    /**
     * The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2`. The default is `HTTP1`.
     * 
     */
    private UndeferrableValue<String> protocolVersion;

    public String protocolVersion() {
        if (protocolVersion == null) return null;
        return protocolVersion.getValue("TargetGroupConfigHealthCheckArgs.protocolVersion");
    }

    /**
     * The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
     * 
     */
    private UndeferrableValue<Integer> unhealthyThresholdCount;

    public Integer unhealthyThresholdCount() {
        if (unhealthyThresholdCount == null) return null;
        return unhealthyThresholdCount.getValue("TargetGroupConfigHealthCheckArgs.unhealthyThresholdCount");
    }

}
