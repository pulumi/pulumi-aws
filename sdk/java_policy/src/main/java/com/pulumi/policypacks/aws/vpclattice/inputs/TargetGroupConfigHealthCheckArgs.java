// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.vpclattice.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.vpclattice.inputs.TargetGroupConfigHealthCheckMatcherArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class TargetGroupConfigHealthCheckArgs {

    /**
     * Indicates whether health checking is enabled. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private Boolean value_enabled;
    private boolean unknown_enabled;
    public Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'TargetGroupConfigHealthCheckArgs.enabled' is not present");
    }

    /**
     * The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
     * 
     */
    @PolicyResourceProperty(name="healthCheckIntervalSeconds", flag="unknown_healthCheckIntervalSeconds")
    private Integer value_healthCheckIntervalSeconds;
    private boolean unknown_healthCheckIntervalSeconds;
    public Integer healthCheckIntervalSeconds() {
        if (!unknown_healthCheckIntervalSeconds) return value_healthCheckIntervalSeconds;
        throw new UndeferrableValueException("Value 'TargetGroupConfigHealthCheckArgs.healthCheckIntervalSeconds' is not present");
    }

    /**
     * The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
     * * ` healthy_threshold_count  ` - (Optional) The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5.
     * 
     */
    @PolicyResourceProperty(name="healthCheckTimeoutSeconds", flag="unknown_healthCheckTimeoutSeconds")
    private Integer value_healthCheckTimeoutSeconds;
    private boolean unknown_healthCheckTimeoutSeconds;
    public Integer healthCheckTimeoutSeconds() {
        if (!unknown_healthCheckTimeoutSeconds) return value_healthCheckTimeoutSeconds;
        throw new UndeferrableValueException("Value 'TargetGroupConfigHealthCheckArgs.healthCheckTimeoutSeconds' is not present");
    }

    @PolicyResourceProperty(name="healthyThresholdCount", flag="unknown_healthyThresholdCount")
    private Integer value_healthyThresholdCount;
    private boolean unknown_healthyThresholdCount;
    public Integer healthyThresholdCount() {
        if (!unknown_healthyThresholdCount) return value_healthyThresholdCount;
        throw new UndeferrableValueException("Value 'TargetGroupConfigHealthCheckArgs.healthyThresholdCount' is not present");
    }

    /**
     * The codes to use when checking for a successful response from a target. These are called _Success codes_ in the console.
     * 
     */
    @PolicyResourceProperty(name="matcher", flag="unknown_matcher")
    private TargetGroupConfigHealthCheckMatcherArgs value_matcher;
    private boolean unknown_matcher;
    public TargetGroupConfigHealthCheckMatcherArgs matcher() {
        if (!unknown_matcher) return value_matcher;
        throw new UndeferrableValueException("Value 'TargetGroupConfigHealthCheckArgs.matcher' is not present");
    }

    /**
     * The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is `/`. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
     * 
     */
    @PolicyResourceProperty(name="path", flag="unknown_path")
    private String value_path;
    private boolean unknown_path;
    public String path() {
        if (!unknown_path) return value_path;
        throw new UndeferrableValueException("Value 'TargetGroupConfigHealthCheckArgs.path' is not present");
    }

    /**
     * The port used when performing health checks on targets. The default setting is the port that a target receives traffic on.
     * 
     */
    @PolicyResourceProperty(name="port", flag="unknown_port")
    private Integer value_port;
    private boolean unknown_port;
    public Integer port() {
        if (!unknown_port) return value_port;
        throw new UndeferrableValueException("Value 'TargetGroupConfigHealthCheckArgs.port' is not present");
    }

    /**
     * The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS`.
     * 
     */
    @PolicyResourceProperty(name="protocol", flag="unknown_protocol")
    private String value_protocol;
    private boolean unknown_protocol;
    public String protocol() {
        if (!unknown_protocol) return value_protocol;
        throw new UndeferrableValueException("Value 'TargetGroupConfigHealthCheckArgs.protocol' is not present");
    }

    /**
     * The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2`. The default is `HTTP1`.
     * 
     */
    @PolicyResourceProperty(name="protocolVersion", flag="unknown_protocolVersion")
    private String value_protocolVersion;
    private boolean unknown_protocolVersion;
    public String protocolVersion() {
        if (!unknown_protocolVersion) return value_protocolVersion;
        throw new UndeferrableValueException("Value 'TargetGroupConfigHealthCheckArgs.protocolVersion' is not present");
    }

    /**
     * The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
     * 
     */
    @PolicyResourceProperty(name="unhealthyThresholdCount", flag="unknown_unhealthyThresholdCount")
    private Integer value_unhealthyThresholdCount;
    private boolean unknown_unhealthyThresholdCount;
    public Integer unhealthyThresholdCount() {
        if (!unknown_unhealthyThresholdCount) return value_unhealthyThresholdCount;
        throw new UndeferrableValueException("Value 'TargetGroupConfigHealthCheckArgs.unhealthyThresholdCount' is not present");
    }

}
