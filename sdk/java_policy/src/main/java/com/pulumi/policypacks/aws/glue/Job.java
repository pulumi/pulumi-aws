// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.glue.outputs.JobCommand;
import com.pulumi.policypacks.aws.glue.outputs.JobExecutionProperty;
import com.pulumi.policypacks.aws.glue.outputs.JobNotificationProperty;
import com.pulumi.policypacks.aws.glue.outputs.JobSourceControlDetails;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:glue/job:Job")
public final class Job extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of Glue Job
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Job.arn");
    }

    /**
     * The command of the job. Defined below.
     * 
     */
    private UndeferrableValue<JobCommand> command;

    public JobCommand command() {
        if (command == null) return null;
        return command.getValue("Job.command");
    }

    /**
     * The list of connections used for this job.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> connections;

    public @Nullable List<String> connections() {
        if (connections == null) return null;
        return connections.getValue("Job.connections");
    }

    /**
     * The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> defaultArguments;

    public @Nullable Map<String,String> defaultArguments() {
        if (defaultArguments == null) return null;
        return defaultArguments.getValue("Job.defaultArguments");
    }

    /**
     * Description of the job.
     * 
     */
    private @Nullable UndeferrableValue<String> description;

    public @Nullable String description() {
        if (description == null) return null;
        return description.getValue("Job.description");
    }

    /**
     * Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: `FLEX`, `STANDARD`.
     * 
     */
    private @Nullable UndeferrableValue<String> executionClass;

    public @Nullable String executionClass() {
        if (executionClass == null) return null;
        return executionClass.getValue("Job.executionClass");
    }

    /**
     * Execution property of the job. Defined below.
     * 
     */
    private UndeferrableValue<JobExecutionProperty> executionProperty;

    public JobExecutionProperty executionProperty() {
        if (executionProperty == null) return null;
        return executionProperty.getValue("Job.executionProperty");
    }

    /**
     * The version of glue to use, for example &#34;1.0&#34;. Ray jobs should set this to 4.0 or greater. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
     * 
     */
    private UndeferrableValue<String> glueVersion;

    public String glueVersion() {
        if (glueVersion == null) return null;
        return glueVersion.getValue("Job.glueVersion");
    }

    /**
     * Specifies whether job run queuing is enabled for the job runs for this job. A value of true means job run queuing is enabled for the job runs. If false or not populated, the job runs will not be considered for queueing.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> jobRunQueuingEnabled;

    public @Nullable Boolean jobRunQueuingEnabled() {
        if (jobRunQueuingEnabled == null) return null;
        return jobRunQueuingEnabled.getValue("Job.jobRunQueuingEnabled");
    }

    /**
     * Specifies the day of the week and hour for the maintenance window for streaming jobs.
     * 
     */
    private @Nullable UndeferrableValue<String> maintenanceWindow;

    public @Nullable String maintenanceWindow() {
        if (maintenanceWindow == null) return null;
        return maintenanceWindow.getValue("Job.maintenanceWindow");
    }

    /**
     * The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `number_of_workers` and `worker_type` arguments instead with `glue_version` `2.0` and above.
     * 
     */
    private UndeferrableValue<Double> maxCapacity;

    public Double maxCapacity() {
        if (maxCapacity == null) return null;
        return maxCapacity.getValue("Job.maxCapacity");
    }

    /**
     * The maximum number of times to retry this job if it fails.
     * 
     */
    private @Nullable UndeferrableValue<Integer> maxRetries;

    public @Nullable Integer maxRetries() {
        if (maxRetries == null) return null;
        return maxRetries.getValue("Job.maxRetries");
    }

    /**
     * The name you assign to this job. It must be unique in your account.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("Job.name");
    }

    /**
     * Non-overridable arguments for this job, specified as name-value pairs.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> nonOverridableArguments;

    public @Nullable Map<String,String> nonOverridableArguments() {
        if (nonOverridableArguments == null) return null;
        return nonOverridableArguments.getValue("Job.nonOverridableArguments");
    }

    /**
     * Notification property of the job. Defined below.
     * 
     */
    private UndeferrableValue<JobNotificationProperty> notificationProperty;

    public JobNotificationProperty notificationProperty() {
        if (notificationProperty == null) return null;
        return notificationProperty.getValue("Job.notificationProperty");
    }

    /**
     * The number of workers of a defined workerType that are allocated when a job runs.
     * 
     */
    private UndeferrableValue<Integer> numberOfWorkers;

    public Integer numberOfWorkers() {
        if (numberOfWorkers == null) return null;
        return numberOfWorkers.getValue("Job.numberOfWorkers");
    }

    /**
     * The ARN of the IAM role associated with this job.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("Job.roleArn");
    }

    /**
     * The name of the Security Configuration to be associated with the job.
     * 
     */
    private @Nullable UndeferrableValue<String> securityConfiguration;

    public @Nullable String securityConfiguration() {
        if (securityConfiguration == null) return null;
        return securityConfiguration.getValue("Job.securityConfiguration");
    }

    /**
     * The details for a source control configuration for a job, allowing synchronization of job artifacts to or from a remote repository. Defined below.
     * 
     */
    private @Nullable UndeferrableValue<JobSourceControlDetails> sourceControlDetails;

    public @Nullable JobSourceControlDetails sourceControlDetails() {
        if (sourceControlDetails == null) return null;
        return sourceControlDetails.getValue("Job.sourceControlDetails");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Job.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Job.tagsAll");
    }

    /**
     * The job timeout in minutes. The default is 2880 minutes (48 hours) for `glueetl` and `pythonshell` jobs, and null (unlimited) for `gluestreaming` jobs.
     * 
     */
    private UndeferrableValue<Integer> timeout;

    public Integer timeout() {
        if (timeout == null) return null;
        return timeout.getValue("Job.timeout");
    }

    /**
     * The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
     * * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
     * * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
     * * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
     * * For the G.4X worker type, each worker maps to 4 DPU (16 vCPUs, 64 GB of memory) with 256GB disk (approximately 235GB free), and provides 1 executor per worker. Recommended for memory-intensive jobs. Only available for Glue version 3.0. Available AWS Regions: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Canada (Central), Europe (Frankfurt), Europe (Ireland), and Europe (Stockholm).
     * * For the G.8X worker type, each worker maps to 8 DPU (32 vCPUs, 128 GB of memory) with 512GB disk (approximately 487GB free), and provides 1 executor per worker. Recommended for memory-intensive jobs. Only available for Glue version 3.0. Available AWS Regions: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Canada (Central), Europe (Frankfurt), Europe (Ireland), and Europe (Stockholm).
     * * For the G.025X worker type, each worker maps to 0.25 DPU (2 vCPU, 4GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for low volume streaming jobs. Only available for Glue version 3.0.
     * * For the Z.2X worker type, each worker maps to 2 M-DPU (8vCPU, 64 GB of m emory, 128 GB disk), and provides up to 8 Ray workers based on the autoscaler.
     * 
     */
    private UndeferrableValue<String> workerType;

    public String workerType() {
        if (workerType == null) return null;
        return workerType.getValue("Job.workerType");
    }

}
