// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.glue.inputs.MLTransformInputRecordTableArgs;
import com.pulumi.policypacks.aws.glue.inputs.MLTransformParametersArgs;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:glue/mLTransform:MLTransform")
public final class MLTransformArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Description of the ML Transform.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("MLTransformArgs.description");
    }

    /**
     * The version of glue to use, for example &#34;1.0&#34;. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
     * 
     */
    private UndeferrableValue<String> glueVersion;

    public String glueVersion() {
        if (glueVersion == null) return null;
        return glueVersion.getValue("MLTransformArgs.glueVersion");
    }

    /**
     * A list of AWS Glue table definitions used by the transform. see Input Record Tables.
     * 
     */
    private UndeferrableValue<List<MLTransformInputRecordTableArgs>> inputRecordTables;

    public List<MLTransformInputRecordTableArgs> inputRecordTables() {
        if (inputRecordTables == null) return null;
        return inputRecordTables.getValue("MLTransformArgs.inputRecordTables");
    }

    /**
     * The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from `2` to `100` DPUs; the default is `10`. `max_capacity` is a mutually exclusive option with `number_of_workers` and `worker_type`.
     * 
     */
    private UndeferrableValue<Double> maxCapacity;

    public Double maxCapacity() {
        if (maxCapacity == null) return null;
        return maxCapacity.getValue("MLTransformArgs.maxCapacity");
    }

    /**
     * The maximum number of times to retry this ML Transform if it fails.
     * 
     */
    private UndeferrableValue<Integer> maxRetries;

    public Integer maxRetries() {
        if (maxRetries == null) return null;
        return maxRetries.getValue("MLTransformArgs.maxRetries");
    }

    /**
     * The name you assign to this ML Transform. It must be unique in your account.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("MLTransformArgs.name");
    }

    /**
     * The number of workers of a defined `worker_type` that are allocated when an ML Transform runs. Required with `worker_type`.
     * 
     */
    private UndeferrableValue<Integer> numberOfWorkers;

    public Integer numberOfWorkers() {
        if (numberOfWorkers == null) return null;
        return numberOfWorkers.getValue("MLTransformArgs.numberOfWorkers");
    }

    /**
     * The algorithmic parameters that are specific to the transform type used. Conditionally dependent on the transform type. see Parameters.
     * 
     */
    private UndeferrableValue<MLTransformParametersArgs> parameters;

    public MLTransformParametersArgs parameters() {
        if (parameters == null) return null;
        return parameters.getValue("MLTransformArgs.parameters");
    }

    /**
     * The ARN of the IAM role associated with this ML Transform.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("MLTransformArgs.roleArn");
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("MLTransformArgs.tags");
    }

    /**
     * The ML Transform timeout in minutes. The default is 2880 minutes (48 hours).
     * 
     */
    private UndeferrableValue<Integer> timeout;

    public Integer timeout() {
        if (timeout == null) return null;
        return timeout.getValue("MLTransformArgs.timeout");
    }

    /**
     * The type of predefined worker that is allocated when an ML Transform runs. Accepts a value of `Standard`, `G.1X`, or `G.2X`. Required with `number_of_workers`.
     * 
     */
    private UndeferrableValue<String> workerType;

    public String workerType() {
        if (workerType == null) return null;
        return workerType.getValue("MLTransformArgs.workerType");
    }

}
