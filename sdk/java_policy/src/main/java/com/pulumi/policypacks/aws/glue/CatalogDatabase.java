// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.glue.outputs.CatalogDatabaseCreateTableDefaultPermission;
import com.pulumi.policypacks.aws.glue.outputs.CatalogDatabaseFederatedDatabase;
import com.pulumi.policypacks.aws.glue.outputs.CatalogDatabaseTargetDatabase;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:glue/catalogDatabase:CatalogDatabase")
public final class CatalogDatabase extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the Glue Catalog Database.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'CatalogDatabase.arn' is not present");
    }

    /**
     * ID of the Glue Catalog to create the database in. If omitted, this defaults to the AWS Account ID.
     * 
     */
    @PolicyResourceProperty(name="catalogId", flag="unknown_catalogId")
    private String value_catalogId;
    private boolean unknown_catalogId;
    public String catalogId() {
        if (!unknown_catalogId) return value_catalogId;
        throw new UndeferrableValueException("Value 'CatalogDatabase.catalogId' is not present");
    }

    /**
     * Creates a set of default permissions on the table for principals. See `create_table_default_permission` below.
     * 
     */
    @PolicyResourceProperty(name="createTableDefaultPermissions", flag="unknown_createTableDefaultPermissions")
    private List<CatalogDatabaseCreateTableDefaultPermission> value_createTableDefaultPermissions;
    private boolean unknown_createTableDefaultPermissions;
    public List<CatalogDatabaseCreateTableDefaultPermission> createTableDefaultPermissions() {
        if (!unknown_createTableDefaultPermissions) return value_createTableDefaultPermissions;
        throw new UndeferrableValueException("Value 'CatalogDatabase.createTableDefaultPermissions' is not present");
    }

    /**
     * Description of the database.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'CatalogDatabase.description' is not present");
    }

    /**
     * Configuration block that references an entity outside the AWS Glue Data Catalog. See `federated_database` below.
     * 
     */
    @PolicyResourceProperty(name="federatedDatabase", flag="unknown_federatedDatabase")
    private @Nullable CatalogDatabaseFederatedDatabase value_federatedDatabase;
    private boolean unknown_federatedDatabase;
    public @Nullable CatalogDatabaseFederatedDatabase federatedDatabase() {
        if (!unknown_federatedDatabase) return value_federatedDatabase;
        throw new UndeferrableValueException("Value 'CatalogDatabase.federatedDatabase' is not present");
    }

    /**
     * Location of the database (for example, an HDFS path).
     * 
     */
    @PolicyResourceProperty(name="locationUri", flag="unknown_locationUri")
    private String value_locationUri;
    private boolean unknown_locationUri;
    public String locationUri() {
        if (!unknown_locationUri) return value_locationUri;
        throw new UndeferrableValueException("Value 'CatalogDatabase.locationUri' is not present");
    }

    /**
     * Name of the database. The acceptable characters are lowercase letters, numbers, and the underscore character.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'CatalogDatabase.name' is not present");
    }

    /**
     * List of key-value pairs that define parameters and properties of the database.
     * 
     */
    @PolicyResourceProperty(name="parameters", flag="unknown_parameters")
    private @Nullable Map<String,String> value_parameters;
    private boolean unknown_parameters;
    public @Nullable Map<String,String> parameters() {
        if (!unknown_parameters) return value_parameters;
        throw new UndeferrableValueException("Value 'CatalogDatabase.parameters' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'CatalogDatabase.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'CatalogDatabase.tagsAll' is not present");
    }

    /**
     * Configuration block for a target database for resource linking. See `target_database` below.
     * 
     */
    @PolicyResourceProperty(name="targetDatabase", flag="unknown_targetDatabase")
    private @Nullable CatalogDatabaseTargetDatabase value_targetDatabase;
    private boolean unknown_targetDatabase;
    public @Nullable CatalogDatabaseTargetDatabase targetDatabase() {
        if (!unknown_targetDatabase) return value_targetDatabase;
        throw new UndeferrableValueException("Value 'CatalogDatabase.targetDatabase' is not present");
    }

}
