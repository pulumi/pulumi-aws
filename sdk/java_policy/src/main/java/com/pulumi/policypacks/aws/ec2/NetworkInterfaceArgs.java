// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.inputs.NetworkInterfaceAttachmentArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/networkInterface:NetworkInterface")
public final class NetworkInterfaceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Configuration block to define the attachment of the ENI. See Attachment below for more details!
     * 
     */
    private UndeferrableValue<List<NetworkInterfaceAttachmentArgs>> attachments;

    public List<NetworkInterfaceAttachmentArgs> attachments() {
        if (attachments == null) return null;
        return attachments.getValue("NetworkInterfaceArgs.attachments");
    }

    /**
     * Description for the network interface.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("NetworkInterfaceArgs.description");
    }

    /**
     * Enables assigning a primary IPv6 Global Unicast Address (GUA) to the network interface (ENI) in dual-stack or IPv6-only subnets. This ensures the instance attached to the ENI retains a consistent IPv6 address. Once enabled, the first IPv6 GUA becomes the primary IPv6 address and cannot be disabled. The primary IPv6 address remains assigned until the instance is terminated or the ENI is detached. Enabling and subsequent disabling forces recreation of the ENI.
     * 
     */
    private UndeferrableValue<Boolean> enablePrimaryIpv6;

    public Boolean enablePrimaryIpv6() {
        if (enablePrimaryIpv6 == null) return null;
        return enablePrimaryIpv6.getValue("NetworkInterfaceArgs.enablePrimaryIpv6");
    }

    /**
     * Type of network interface to create. Set to `efa` for Elastic Fabric Adapter. Changing `interface_type` will cause the resource to be destroyed and re-created.
     * 
     */
    private UndeferrableValue<String> interfaceType;

    public String interfaceType() {
        if (interfaceType == null) return null;
        return interfaceType.getValue("NetworkInterfaceArgs.interfaceType");
    }

    /**
     * Number of IPv4 prefixes that AWS automatically assigns to the network interface.
     * 
     */
    private UndeferrableValue<Integer> ipv4PrefixCount;

    public Integer ipv4PrefixCount() {
        if (ipv4PrefixCount == null) return null;
        return ipv4PrefixCount.getValue("NetworkInterfaceArgs.ipv4PrefixCount");
    }

    /**
     * One or more IPv4 prefixes assigned to the network interface.
     * 
     */
    private UndeferrableValue<List<String>> ipv4Prefixes;

    public List<String> ipv4Prefixes() {
        if (ipv4Prefixes == null) return null;
        return ipv4Prefixes.getValue("NetworkInterfaceArgs.ipv4Prefixes");
    }

    /**
     * Number of IPv6 addresses to assign to a network interface. You can&#39;t use this option if specifying specific `ipv6_addresses`. If your subnet has the AssignIpv6AddressOnCreation attribute set to `true`, you can specify `0` to override this setting.
     * 
     */
    private UndeferrableValue<Integer> ipv6AddressCount;

    public Integer ipv6AddressCount() {
        if (ipv6AddressCount == null) return null;
        return ipv6AddressCount.getValue("NetworkInterfaceArgs.ipv6AddressCount");
    }

    /**
     * Whether `ipv6_address_list` is allowed and controls the IPs to assign to the ENI and `ipv6_addresses` and `ipv6_address_count` become read-only. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> ipv6AddressListEnabled;

    public Boolean ipv6AddressListEnabled() {
        if (ipv6AddressListEnabled == null) return null;
        return ipv6AddressListEnabled.getValue("NetworkInterfaceArgs.ipv6AddressListEnabled");
    }

    /**
     * List of private IPs to assign to the ENI in sequential order.
     * 
     */
    private UndeferrableValue<List<String>> ipv6AddressLists;

    public List<String> ipv6AddressLists() {
        if (ipv6AddressLists == null) return null;
        return ipv6AddressLists.getValue("NetworkInterfaceArgs.ipv6AddressLists");
    }

    /**
     * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Addresses are assigned without regard to order. You can&#39;t use this option if you&#39;re specifying `ipv6_address_count`.
     * 
     */
    private UndeferrableValue<List<String>> ipv6Addresses;

    public List<String> ipv6Addresses() {
        if (ipv6Addresses == null) return null;
        return ipv6Addresses.getValue("NetworkInterfaceArgs.ipv6Addresses");
    }

    /**
     * Number of IPv6 prefixes that AWS automatically assigns to the network interface.
     * 
     */
    private UndeferrableValue<Integer> ipv6PrefixCount;

    public Integer ipv6PrefixCount() {
        if (ipv6PrefixCount == null) return null;
        return ipv6PrefixCount.getValue("NetworkInterfaceArgs.ipv6PrefixCount");
    }

    /**
     * One or more IPv6 prefixes assigned to the network interface.
     * 
     */
    private UndeferrableValue<List<String>> ipv6Prefixes;

    public List<String> ipv6Prefixes() {
        if (ipv6Prefixes == null) return null;
        return ipv6Prefixes.getValue("NetworkInterfaceArgs.ipv6Prefixes");
    }

    private UndeferrableValue<String> privateIp;

    public String privateIp() {
        if (privateIp == null) return null;
        return privateIp.getValue("NetworkInterfaceArgs.privateIp");
    }

    /**
     * Whether `private_ip_list` is allowed and controls the IPs to assign to the ENI and `private_ips` and `private_ips_count` become read-only. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> privateIpListEnabled;

    public Boolean privateIpListEnabled() {
        if (privateIpListEnabled == null) return null;
        return privateIpListEnabled.getValue("NetworkInterfaceArgs.privateIpListEnabled");
    }

    /**
     * List of private IPs to assign to the ENI in sequential order. Requires setting `private_ip_list_enabled` to `true`.
     * 
     */
    private UndeferrableValue<List<String>> privateIpLists;

    public List<String> privateIpLists() {
        if (privateIpLists == null) return null;
        return privateIpLists.getValue("NetworkInterfaceArgs.privateIpLists");
    }

    /**
     * List of private IPs to assign to the ENI without regard to order.
     * 
     */
    private UndeferrableValue<List<String>> privateIps;

    public List<String> privateIps() {
        if (privateIps == null) return null;
        return privateIps.getValue("NetworkInterfaceArgs.privateIps");
    }

    /**
     * Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + `private_ips_count`, as a primary private IP will be assiged to an ENI by default.
     * 
     */
    private UndeferrableValue<Integer> privateIpsCount;

    public Integer privateIpsCount() {
        if (privateIpsCount == null) return null;
        return privateIpsCount.getValue("NetworkInterfaceArgs.privateIpsCount");
    }

    /**
     * List of security group IDs to assign to the ENI.
     * 
     */
    private UndeferrableValue<List<String>> securityGroups;

    public List<String> securityGroups() {
        if (securityGroups == null) return null;
        return securityGroups.getValue("NetworkInterfaceArgs.securityGroups");
    }

    /**
     * Whether to enable source destination checking for the ENI. Default true.
     * 
     */
    private UndeferrableValue<Boolean> sourceDestCheck;

    public Boolean sourceDestCheck() {
        if (sourceDestCheck == null) return null;
        return sourceDestCheck.getValue("NetworkInterfaceArgs.sourceDestCheck");
    }

    /**
     * Subnet ID to create the ENI in.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> subnetId;

    public String subnetId() {
        if (subnetId == null) return null;
        return subnetId.getValue("NetworkInterfaceArgs.subnetId");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("NetworkInterfaceArgs.tags");
    }

}
