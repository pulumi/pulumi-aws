// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.outputs.LaunchConfigurationEbsBlockDevice;
import com.pulumi.policypacks.aws.ec2.outputs.LaunchConfigurationEphemeralBlockDevice;
import com.pulumi.policypacks.aws.ec2.outputs.LaunchConfigurationMetadataOptions;
import com.pulumi.policypacks.aws.ec2.outputs.LaunchConfigurationRootBlockDevice;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/launchConfiguration:LaunchConfiguration")
public final class LaunchConfiguration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name of the launch configuration.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.arn' is not present");
    }

    /**
     * Associate a public ip address with an instance in a VPC.
     * 
     */
    @PolicyResourceProperty(name="associatePublicIpAddress", flag="unknown_associatePublicIpAddress")
    private @Nullable Boolean value_associatePublicIpAddress;
    private boolean unknown_associatePublicIpAddress;
    public @Nullable Boolean associatePublicIpAddress() {
        if (!unknown_associatePublicIpAddress) return value_associatePublicIpAddress;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.associatePublicIpAddress' is not present");
    }

    /**
     * Additional EBS block devices to attach to the instance. See Block Devices below for details.
     * 
     */
    @PolicyResourceProperty(name="ebsBlockDevices", flag="unknown_ebsBlockDevices")
    private List<LaunchConfigurationEbsBlockDevice> value_ebsBlockDevices;
    private boolean unknown_ebsBlockDevices;
    public List<LaunchConfigurationEbsBlockDevice> ebsBlockDevices() {
        if (!unknown_ebsBlockDevices) return value_ebsBlockDevices;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.ebsBlockDevices' is not present");
    }

    /**
     * If true, the launched EC2 instance will be EBS-optimized.
     * 
     */
    @PolicyResourceProperty(name="ebsOptimized", flag="unknown_ebsOptimized")
    private Boolean value_ebsOptimized;
    private boolean unknown_ebsOptimized;
    public Boolean ebsOptimized() {
        if (!unknown_ebsOptimized) return value_ebsOptimized;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.ebsOptimized' is not present");
    }

    /**
     * Enables/disables detailed monitoring. This is enabled by default.
     * 
     */
    @PolicyResourceProperty(name="enableMonitoring", flag="unknown_enableMonitoring")
    private @Nullable Boolean value_enableMonitoring;
    private boolean unknown_enableMonitoring;
    public @Nullable Boolean enableMonitoring() {
        if (!unknown_enableMonitoring) return value_enableMonitoring;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.enableMonitoring' is not present");
    }

    /**
     * Customize Ephemeral (also known as &#34;Instance Store&#34;) volumes on the instance. See Block Devices below for details.
     * 
     */
    @PolicyResourceProperty(name="ephemeralBlockDevices", flag="unknown_ephemeralBlockDevices")
    private @Nullable List<LaunchConfigurationEphemeralBlockDevice> value_ephemeralBlockDevices;
    private boolean unknown_ephemeralBlockDevices;
    public @Nullable List<LaunchConfigurationEphemeralBlockDevice> ephemeralBlockDevices() {
        if (!unknown_ephemeralBlockDevices) return value_ephemeralBlockDevices;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.ephemeralBlockDevices' is not present");
    }

    /**
     * The name attribute of the IAM instance profile to associate with launched instances.
     * 
     */
    @PolicyResourceProperty(name="iamInstanceProfile", flag="unknown_iamInstanceProfile")
    private @Nullable String value_iamInstanceProfile;
    private boolean unknown_iamInstanceProfile;
    public @Nullable String iamInstanceProfile() {
        if (!unknown_iamInstanceProfile) return value_iamInstanceProfile;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.iamInstanceProfile' is not present");
    }

    /**
     * The EC2 image ID to launch.
     * 
     */
    @PolicyResourceProperty(name="imageId", flag="unknown_imageId")
    private String value_imageId;
    private boolean unknown_imageId;
    public String imageId() {
        if (!unknown_imageId) return value_imageId;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.imageId' is not present");
    }

    /**
     * The size of instance to launch.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="instanceType", flag="unknown_instanceType")
    private String value_instanceType;
    private boolean unknown_instanceType;
    public String instanceType() {
        if (!unknown_instanceType) return value_instanceType;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.instanceType' is not present");
    }

    /**
     * The key name that should be used for the instance.
     * 
     */
    @PolicyResourceProperty(name="keyName", flag="unknown_keyName")
    private String value_keyName;
    private boolean unknown_keyName;
    public String keyName() {
        if (!unknown_keyName) return value_keyName;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.keyName' is not present");
    }

    /**
     * The metadata options for the instance.
     * 
     */
    @PolicyResourceProperty(name="metadataOptions", flag="unknown_metadataOptions")
    private LaunchConfigurationMetadataOptions value_metadataOptions;
    private boolean unknown_metadataOptions;
    public LaunchConfigurationMetadataOptions metadataOptions() {
        if (!unknown_metadataOptions) return value_metadataOptions;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.metadataOptions' is not present");
    }

    /**
     * The name of the launch configuration. If you leave this blank, this provider will auto-generate a unique name. Conflicts with `name_prefix`.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.name' is not present");
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.namePrefix' is not present");
    }

    /**
     * The tenancy of the instance. Valid values are `default` or `dedicated`, see [AWS&#39;s Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html) for more details.
     * 
     */
    @PolicyResourceProperty(name="placementTenancy", flag="unknown_placementTenancy")
    private @Nullable String value_placementTenancy;
    private boolean unknown_placementTenancy;
    public @Nullable String placementTenancy() {
        if (!unknown_placementTenancy) return value_placementTenancy;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.placementTenancy' is not present");
    }

    /**
     * Customize details about the root block device of the instance. See Block Devices below for details.
     * 
     */
    @PolicyResourceProperty(name="rootBlockDevice", flag="unknown_rootBlockDevice")
    private LaunchConfigurationRootBlockDevice value_rootBlockDevice;
    private boolean unknown_rootBlockDevice;
    public LaunchConfigurationRootBlockDevice rootBlockDevice() {
        if (!unknown_rootBlockDevice) return value_rootBlockDevice;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.rootBlockDevice' is not present");
    }

    /**
     * A list of associated security group IDS.
     * 
     */
    @PolicyResourceProperty(name="securityGroups", flag="unknown_securityGroups")
    private @Nullable List<String> value_securityGroups;
    private boolean unknown_securityGroups;
    public @Nullable List<String> securityGroups() {
        if (!unknown_securityGroups) return value_securityGroups;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.securityGroups' is not present");
    }

    /**
     * The maximum price to use for reserving spot instances.
     * 
     */
    @PolicyResourceProperty(name="spotPrice", flag="unknown_spotPrice")
    private @Nullable String value_spotPrice;
    private boolean unknown_spotPrice;
    public @Nullable String spotPrice() {
        if (!unknown_spotPrice) return value_spotPrice;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.spotPrice' is not present");
    }

    /**
     * The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `user_data_base64` instead.
     * 
     */
    @PolicyResourceProperty(name="userData", flag="unknown_userData")
    private @Nullable String value_userData;
    private boolean unknown_userData;
    public @Nullable String userData() {
        if (!unknown_userData) return value_userData;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.userData' is not present");
    }

    /**
     * Can be used instead of `user_data` to pass base64-encoded binary data directly. Use this instead of `user_data` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
     * 
     */
    @PolicyResourceProperty(name="userDataBase64", flag="unknown_userDataBase64")
    private @Nullable String value_userDataBase64;
    private boolean unknown_userDataBase64;
    public @Nullable String userDataBase64() {
        if (!unknown_userDataBase64) return value_userDataBase64;
        throw new UndeferrableValueException("Value 'LaunchConfiguration.userDataBase64' is not present");
    }

}
