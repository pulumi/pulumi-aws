// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudsearch.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


public final class DomainIndexField {

    /**
     * The analysis scheme you want to use for a `text` field. The analysis scheme specifies the language-specific text processing options that are used during indexing.
     * 
     */
    private @Nullable UndeferrableValue<String> analysisScheme;

    public @Nullable String analysisScheme() {
        if (analysisScheme == null) return null;
        return analysisScheme.getValue("DomainIndexField.analysisScheme");
    }

    /**
     * The default value for the field. This value is used when no value is specified for the field in the document data.
     * 
     */
    private @Nullable UndeferrableValue<String> defaultValue;

    public @Nullable String defaultValue() {
        if (defaultValue == null) return null;
        return defaultValue.getValue("DomainIndexField.defaultValue");
    }

    /**
     * You can get facet information by enabling this.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> facet;

    public @Nullable Boolean facet() {
        if (facet == null) return null;
        return facet.getValue("DomainIndexField.facet");
    }

    /**
     * You can highlight information.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> highlight;

    public @Nullable Boolean highlight() {
        if (highlight == null) return null;
        return highlight.getValue("DomainIndexField.highlight");
    }

    /**
     * A unique name for the field. Field names must begin with a letter and be at least 1 and no more than 64 characters long. The allowed characters are: `a`-`z` (lower-case letters), `0`-`9`, and `_` (underscore). The name `score` is reserved and cannot be used as a field name.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("DomainIndexField.name");
    }

    /**
     * You can enable returning the value of all searchable fields.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> return_;

    public @Nullable Boolean return_() {
        if (return_ == null) return null;
        return return_.getValue("DomainIndexField.return_");
    }

    /**
     * You can set whether this index should be searchable or not.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> search;

    public @Nullable Boolean search() {
        if (search == null) return null;
        return search.getValue("DomainIndexField.search");
    }

    /**
     * You can enable the property to be sortable.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> sort;

    public @Nullable Boolean sort() {
        if (sort == null) return null;
        return sort.getValue("DomainIndexField.sort");
    }

    /**
     * A comma-separated list of source fields to map to the field. Specifying a source field copies data from one field to another, enabling you to use the same source data in different ways by configuring different options for the fields.
     * 
     */
    private @Nullable UndeferrableValue<String> sourceFields;

    public @Nullable String sourceFields() {
        if (sourceFields == null) return null;
        return sourceFields.getValue("DomainIndexField.sourceFields");
    }

    /**
     * The field type. Valid values: `date`, `date-array`, `double`, `double-array`, `int`, `int-array`, `literal`, `literal-array`, `text`, `text-array`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("DomainIndexField.type");
    }

}
