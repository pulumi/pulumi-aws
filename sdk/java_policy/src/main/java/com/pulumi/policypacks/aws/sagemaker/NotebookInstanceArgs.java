// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.sagemaker;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.sagemaker.inputs.NotebookInstanceInstanceMetadataServiceConfigurationArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:sagemaker/notebookInstance:NotebookInstance")
public final class NotebookInstanceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * A list of Elastic Inference (EI) instance types to associate with this notebook instance. See [Elastic Inference Accelerator](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html) for more details. Valid values: `ml.eia1.medium`, `ml.eia1.large`, `ml.eia1.xlarge`, `ml.eia2.medium`, `ml.eia2.large`, `ml.eia2.xlarge`.
     * 
     * @deprecated
     * accelerator_types is deprecated. Use instance_type instead.
     * 
     */
    @Deprecated /* accelerator_types is deprecated. Use instance_type instead. */
    private UndeferrableValue<List<String>> acceleratorTypes;

    public List<String> acceleratorTypes() {
        if (acceleratorTypes == null) return null;
        return acceleratorTypes.getValue("NotebookInstanceArgs.acceleratorTypes");
    }

    /**
     * An array of up to three Git repositories to associate with the notebook instance.
     * These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in [AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance.
     * 
     */
    private UndeferrableValue<List<String>> additionalCodeRepositories;

    public List<String> additionalCodeRepositories() {
        if (additionalCodeRepositories == null) return null;
        return additionalCodeRepositories.getValue("NotebookInstanceArgs.additionalCodeRepositories");
    }

    /**
     * The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in [AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository.
     * 
     */
    private UndeferrableValue<String> defaultCodeRepository;

    public String defaultCodeRepository() {
        if (defaultCodeRepository == null) return null;
        return defaultCodeRepository.getValue("NotebookInstanceArgs.defaultCodeRepository");
    }

    /**
     * Set to `Disabled` to disable internet access to notebook. Requires `security_groups` and `subnet_id` to be set. Supported values: `Enabled` (Default) or `Disabled`. If set to `Disabled`, the notebook instance will be able to access resources only in your VPC, and will not be able to connect to Amazon SageMaker AI training and endpoint services unless your configure a NAT Gateway in your VPC.
     * 
     */
    private UndeferrableValue<String> directInternetAccess;

    public String directInternetAccess() {
        if (directInternetAccess == null) return null;
        return directInternetAccess.getValue("NotebookInstanceArgs.directInternetAccess");
    }

    /**
     * Information on the IMDS configuration of the notebook instance. Conflicts with `instance_metadata_service_configuration`. see details below.
     * 
     */
    private UndeferrableValue<NotebookInstanceInstanceMetadataServiceConfigurationArgs> instanceMetadataServiceConfiguration;

    public NotebookInstanceInstanceMetadataServiceConfigurationArgs instanceMetadataServiceConfiguration() {
        if (instanceMetadataServiceConfiguration == null) return null;
        return instanceMetadataServiceConfiguration.getValue("NotebookInstanceArgs.instanceMetadataServiceConfiguration");
    }

    /**
     * The name of ML compute instance type.
     * 
     */
    private UndeferrableValue<String> instanceType;

    public String instanceType() {
        if (instanceType == null) return null;
        return instanceType.getValue("NotebookInstanceArgs.instanceType");
    }

    /**
     * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker AI uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("NotebookInstanceArgs.kmsKeyId");
    }

    /**
     * The name of a lifecycle configuration to associate with the notebook instance.
     * 
     */
    private UndeferrableValue<String> lifecycleConfigName;

    public String lifecycleConfigName() {
        if (lifecycleConfigName == null) return null;
        return lifecycleConfigName.getValue("NotebookInstanceArgs.lifecycleConfigName");
    }

    /**
     * The name of the notebook instance (must be unique).
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("NotebookInstanceArgs.name");
    }

    /**
     * The platform identifier of the notebook instance runtime environment. This value can be either `notebook-al1-v1`, `notebook-al2-v1`, `notebook-al2-v2`, or `notebook-al2-v3`, depending on which version of Amazon Linux you require.
     * 
     */
    private UndeferrableValue<String> platformIdentifier;

    public String platformIdentifier() {
        if (platformIdentifier == null) return null;
        return platformIdentifier.getValue("NotebookInstanceArgs.platformIdentifier");
    }

    /**
     * The ARN of the IAM role to be used by the notebook instance which allows SageMaker AI to call other services on your behalf.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("NotebookInstanceArgs.roleArn");
    }

    /**
     * Whether root access is `Enabled` or `Disabled` for users of the notebook instance. The default value is `Enabled`.
     * 
     */
    private UndeferrableValue<String> rootAccess;

    public String rootAccess() {
        if (rootAccess == null) return null;
        return rootAccess.getValue("NotebookInstanceArgs.rootAccess");
    }

    /**
     * The associated security groups.
     * 
     */
    private UndeferrableValue<List<String>> securityGroups;

    public List<String> securityGroups() {
        if (securityGroups == null) return null;
        return securityGroups.getValue("NotebookInstanceArgs.securityGroups");
    }

    /**
     * The VPC subnet ID.
     * 
     */
    private UndeferrableValue<String> subnetId;

    public String subnetId() {
        if (subnetId == null) return null;
        return subnetId.getValue("NotebookInstanceArgs.subnetId");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("NotebookInstanceArgs.tags");
    }

    /**
     * The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB.
     * 
     */
    private UndeferrableValue<Integer> volumeSize;

    public Integer volumeSize() {
        if (volumeSize == null) return null;
        return volumeSize.getValue("NotebookInstanceArgs.volumeSize");
    }

}
