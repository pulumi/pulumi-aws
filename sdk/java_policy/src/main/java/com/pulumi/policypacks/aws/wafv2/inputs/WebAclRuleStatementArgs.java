// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.wafv2.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementAndStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementByteMatchStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementGeoMatchStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementIpSetReferenceStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementLabelMatchStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementManagedRuleGroupStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementNotStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementOrStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementRateBasedStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementRegexMatchStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementRegexPatternSetReferenceStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementRuleGroupReferenceStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementSizeConstraintStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementSqliMatchStatementArgs;
import com.pulumi.policypacks.aws.wafv2.inputs.WebAclRuleStatementXssMatchStatementArgs;
import javax.annotation.Nullable;


public final class WebAclRuleStatementArgs {

    /**
     * Logical rule statement used to combine other rule statements with AND logic. See `and_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementAndStatementArgs> andStatement;

    public WebAclRuleStatementAndStatementArgs andStatement() {
        if (andStatement == null) return null;
        return andStatement.getValue("WebAclRuleStatementArgs.andStatement");
    }

    /**
     * Rule statement that defines a string match search for AWS WAF to apply to web requests. See `byte_match_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementByteMatchStatementArgs> byteMatchStatement;

    public WebAclRuleStatementByteMatchStatementArgs byteMatchStatement() {
        if (byteMatchStatement == null) return null;
        return byteMatchStatement.getValue("WebAclRuleStatementArgs.byteMatchStatement");
    }

    /**
     * Rule statement used to identify web requests based on country of origin. See `geo_match_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementGeoMatchStatementArgs> geoMatchStatement;

    public WebAclRuleStatementGeoMatchStatementArgs geoMatchStatement() {
        if (geoMatchStatement == null) return null;
        return geoMatchStatement.getValue("WebAclRuleStatementArgs.geoMatchStatement");
    }

    /**
     * Rule statement used to detect web requests coming from particular IP addresses or address ranges. See `ip_set_reference_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementIpSetReferenceStatementArgs> ipSetReferenceStatement;

    public WebAclRuleStatementIpSetReferenceStatementArgs ipSetReferenceStatement() {
        if (ipSetReferenceStatement == null) return null;
        return ipSetReferenceStatement.getValue("WebAclRuleStatementArgs.ipSetReferenceStatement");
    }

    /**
     * Rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. See `label_match_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementLabelMatchStatementArgs> labelMatchStatement;

    public WebAclRuleStatementLabelMatchStatementArgs labelMatchStatement() {
        if (labelMatchStatement == null) return null;
        return labelMatchStatement.getValue("WebAclRuleStatementArgs.labelMatchStatement");
    }

    /**
     * Rule statement used to run the rules that are defined in a managed rule group.  This statement can not be nested. See `managed_rule_group_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementManagedRuleGroupStatementArgs> managedRuleGroupStatement;

    public WebAclRuleStatementManagedRuleGroupStatementArgs managedRuleGroupStatement() {
        if (managedRuleGroupStatement == null) return null;
        return managedRuleGroupStatement.getValue("WebAclRuleStatementArgs.managedRuleGroupStatement");
    }

    /**
     * Logical rule statement used to negate the results of another rule statement. See `not_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementNotStatementArgs> notStatement;

    public WebAclRuleStatementNotStatementArgs notStatement() {
        if (notStatement == null) return null;
        return notStatement.getValue("WebAclRuleStatementArgs.notStatement");
    }

    /**
     * Logical rule statement used to combine other rule statements with OR logic. See `or_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementOrStatementArgs> orStatement;

    public WebAclRuleStatementOrStatementArgs orStatement() {
        if (orStatement == null) return null;
        return orStatement.getValue("WebAclRuleStatementArgs.orStatement");
    }

    /**
     * Rate-based rule tracks the rate of requests for each originating `IP address`, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any `5-minute` time span. This statement can not be nested. See `rate_based_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementRateBasedStatementArgs> rateBasedStatement;

    public WebAclRuleStatementRateBasedStatementArgs rateBasedStatement() {
        if (rateBasedStatement == null) return null;
        return rateBasedStatement.getValue("WebAclRuleStatementArgs.rateBasedStatement");
    }

    /**
     * Rule statement used to search web request components for a match against a single regular expression. See `regex_match_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementRegexMatchStatementArgs> regexMatchStatement;

    public WebAclRuleStatementRegexMatchStatementArgs regexMatchStatement() {
        if (regexMatchStatement == null) return null;
        return regexMatchStatement.getValue("WebAclRuleStatementArgs.regexMatchStatement");
    }

    /**
     * Rule statement used to search web request components for matches with regular expressions. See `regex_pattern_set_reference_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementRegexPatternSetReferenceStatementArgs> regexPatternSetReferenceStatement;

    public WebAclRuleStatementRegexPatternSetReferenceStatementArgs regexPatternSetReferenceStatement() {
        if (regexPatternSetReferenceStatement == null) return null;
        return regexPatternSetReferenceStatement.getValue("WebAclRuleStatementArgs.regexPatternSetReferenceStatement");
    }

    /**
     * Rule statement used to run the rules that are defined in an WAFv2 Rule Group. See `rule_group_reference_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementRuleGroupReferenceStatementArgs> ruleGroupReferenceStatement;

    public WebAclRuleStatementRuleGroupReferenceStatementArgs ruleGroupReferenceStatement() {
        if (ruleGroupReferenceStatement == null) return null;
        return ruleGroupReferenceStatement.getValue("WebAclRuleStatementArgs.ruleGroupReferenceStatement");
    }

    /**
     * Rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (&gt;) or less than (&lt;). See `size_constraint_statement` below for more details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementSizeConstraintStatementArgs> sizeConstraintStatement;

    public WebAclRuleStatementSizeConstraintStatementArgs sizeConstraintStatement() {
        if (sizeConstraintStatement == null) return null;
        return sizeConstraintStatement.getValue("WebAclRuleStatementArgs.sizeConstraintStatement");
    }

    /**
     * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See `sqli_match_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementSqliMatchStatementArgs> sqliMatchStatement;

    public WebAclRuleStatementSqliMatchStatementArgs sqliMatchStatement() {
        if (sqliMatchStatement == null) return null;
        return sqliMatchStatement.getValue("WebAclRuleStatementArgs.sqliMatchStatement");
    }

    /**
     * Rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See `xss_match_statement` below for details.
     * 
     */
    private UndeferrableValue<WebAclRuleStatementXssMatchStatementArgs> xssMatchStatement;

    public WebAclRuleStatementXssMatchStatementArgs xssMatchStatement() {
        if (xssMatchStatement == null) return null;
        return xssMatchStatement.getValue("WebAclRuleStatementArgs.xssMatchStatement");
    }

}
