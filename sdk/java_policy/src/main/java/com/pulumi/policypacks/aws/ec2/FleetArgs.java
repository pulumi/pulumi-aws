// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.inputs.FleetFleetInstanceSetArgs;
import com.pulumi.policypacks.aws.ec2.inputs.FleetLaunchTemplateConfigArgs;
import com.pulumi.policypacks.aws.ec2.inputs.FleetOnDemandOptionsArgs;
import com.pulumi.policypacks.aws.ec2.inputs.FleetSpotOptionsArgs;
import com.pulumi.policypacks.aws.ec2.inputs.FleetTargetCapacitySpecificationArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/fleet:Fleet")
public final class FleetArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Reserved.
     * 
     */
    private UndeferrableValue<String> context;

    public String context() {
        if (context == null) return null;
        return context.getValue("FleetArgs.context");
    }

    /**
     * Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`. Supported only for fleets of type `maintain`.
     * 
     */
    private UndeferrableValue<String> excessCapacityTerminationPolicy;

    public String excessCapacityTerminationPolicy() {
        if (excessCapacityTerminationPolicy == null) return null;
        return excessCapacityTerminationPolicy.getValue("FleetArgs.excessCapacityTerminationPolicy");
    }

    /**
     * Information about the instances that were launched by the fleet. Available only when `type` is set to `instant`.
     * 
     */
    private UndeferrableValue<List<FleetFleetInstanceSetArgs>> fleetInstanceSets;

    public List<FleetFleetInstanceSetArgs> fleetInstanceSets() {
        if (fleetInstanceSets == null) return null;
        return fleetInstanceSets.getValue("FleetArgs.fleetInstanceSets");
    }

    /**
     * The state of the EC2 Fleet.
     * 
     */
    private UndeferrableValue<String> fleetState;

    public String fleetState() {
        if (fleetState == null) return null;
        return fleetState.getValue("FleetArgs.fleetState");
    }

    /**
     * The number of units fulfilled by this request compared to the set target capacity.
     * 
     */
    private UndeferrableValue<Double> fulfilledCapacity;

    public Double fulfilledCapacity() {
        if (fulfilledCapacity == null) return null;
        return fulfilledCapacity.getValue("FleetArgs.fulfilledCapacity");
    }

    /**
     * The number of units fulfilled by this request compared to the set target On-Demand capacity.
     * 
     */
    private UndeferrableValue<Double> fulfilledOnDemandCapacity;

    public Double fulfilledOnDemandCapacity() {
        if (fulfilledOnDemandCapacity == null) return null;
        return fulfilledOnDemandCapacity.getValue("FleetArgs.fulfilledOnDemandCapacity");
    }

    /**
     * Nested argument containing EC2 Launch Template configurations. Defined below.
     * 
     */
    private UndeferrableValue<List<FleetLaunchTemplateConfigArgs>> launchTemplateConfigs;

    public List<FleetLaunchTemplateConfigArgs> launchTemplateConfigs() {
        if (launchTemplateConfigs == null) return null;
        return launchTemplateConfigs.getValue("FleetArgs.launchTemplateConfigs");
    }

    /**
     * Nested argument containing On-Demand configurations. Defined below.
     * 
     */
    private UndeferrableValue<FleetOnDemandOptionsArgs> onDemandOptions;

    public FleetOnDemandOptionsArgs onDemandOptions() {
        if (onDemandOptions == null) return null;
        return onDemandOptions.getValue("FleetArgs.onDemandOptions");
    }

    /**
     * Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`. Supported only for fleets of type `maintain`.
     * 
     */
    private UndeferrableValue<Boolean> replaceUnhealthyInstances;

    public Boolean replaceUnhealthyInstances() {
        if (replaceUnhealthyInstances == null) return null;
        return replaceUnhealthyInstances.getValue("FleetArgs.replaceUnhealthyInstances");
    }

    /**
     * Nested argument containing Spot configurations. Defined below.
     * 
     */
    private UndeferrableValue<FleetSpotOptionsArgs> spotOptions;

    public FleetSpotOptionsArgs spotOptions() {
        if (spotOptions == null) return null;
        return spotOptions.getValue("FleetArgs.spotOptions");
    }

    /**
     * Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("FleetArgs.tags");
    }

    /**
     * Nested argument containing target capacity configurations. Defined below.
     * 
     */
    private UndeferrableValue<FleetTargetCapacitySpecificationArgs> targetCapacitySpecification;

    public FleetTargetCapacitySpecificationArgs targetCapacitySpecification() {
        if (targetCapacitySpecification == null) return null;
        return targetCapacitySpecification.getValue("FleetArgs.targetCapacitySpecification");
    }

    /**
     * Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> terminateInstances;

    public Boolean terminateInstances() {
        if (terminateInstances == null) return null;
        return terminateInstances.getValue("FleetArgs.terminateInstances");
    }

    /**
     * Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> terminateInstancesWithExpiration;

    public Boolean terminateInstancesWithExpiration() {
        if (terminateInstancesWithExpiration == null) return null;
        return terminateInstancesWithExpiration.getValue("FleetArgs.terminateInstancesWithExpiration");
    }

    /**
     * The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`, `instant`. Defaults to `maintain`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("FleetArgs.type");
    }

    /**
     * The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
     * 
     */
    private UndeferrableValue<String> validFrom;

    public String validFrom() {
        if (validFrom == null) return null;
        return validFrom.getValue("FleetArgs.validFrom");
    }

    /**
     * The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
     * 
     */
    private UndeferrableValue<String> validUntil;

    public String validUntil() {
        if (validUntil == null) return null;
        return validUntil.getValue("FleetArgs.validUntil");
    }

}
