// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersAmazonElasticsearchArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersAthenaArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersAuroraArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersAuroraPostgresqlArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersAwsIotAnalyticsArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersDatabricksArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersJiraArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersMariaDbArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersMysqlArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersOracleArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersPostgresqlArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersPrestoArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersRdsArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersRedshiftArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersS3Args;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersServiceNowArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersSnowflakeArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersSparkArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersSqlServerArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersTeradataArgs;
import com.pulumi.policypacks.aws.quicksight.inputs.DataSourceParametersTwitterArgs;
import javax.annotation.Nullable;


public final class DataSourceParametersArgs {

    /**
     * Parameters for connecting to Amazon Elasticsearch.
     * 
     */
    private UndeferrableValue<DataSourceParametersAmazonElasticsearchArgs> amazonElasticsearch;

    public DataSourceParametersAmazonElasticsearchArgs amazonElasticsearch() {
        if (amazonElasticsearch == null) return null;
        return amazonElasticsearch.getValue("DataSourceParametersArgs.amazonElasticsearch");
    }

    /**
     * Parameters for connecting to Athena.
     * 
     */
    private UndeferrableValue<DataSourceParametersAthenaArgs> athena;

    public DataSourceParametersAthenaArgs athena() {
        if (athena == null) return null;
        return athena.getValue("DataSourceParametersArgs.athena");
    }

    /**
     * Parameters for connecting to Aurora MySQL.
     * 
     */
    private UndeferrableValue<DataSourceParametersAuroraArgs> aurora;

    public DataSourceParametersAuroraArgs aurora() {
        if (aurora == null) return null;
        return aurora.getValue("DataSourceParametersArgs.aurora");
    }

    /**
     * Parameters for connecting to Aurora Postgresql.
     * 
     */
    private UndeferrableValue<DataSourceParametersAuroraPostgresqlArgs> auroraPostgresql;

    public DataSourceParametersAuroraPostgresqlArgs auroraPostgresql() {
        if (auroraPostgresql == null) return null;
        return auroraPostgresql.getValue("DataSourceParametersArgs.auroraPostgresql");
    }

    /**
     * Parameters for connecting to AWS IOT Analytics.
     * 
     */
    private UndeferrableValue<DataSourceParametersAwsIotAnalyticsArgs> awsIotAnalytics;

    public DataSourceParametersAwsIotAnalyticsArgs awsIotAnalytics() {
        if (awsIotAnalytics == null) return null;
        return awsIotAnalytics.getValue("DataSourceParametersArgs.awsIotAnalytics");
    }

    /**
     * Parameters for connecting to Databricks.
     * 
     */
    private UndeferrableValue<DataSourceParametersDatabricksArgs> databricks;

    public DataSourceParametersDatabricksArgs databricks() {
        if (databricks == null) return null;
        return databricks.getValue("DataSourceParametersArgs.databricks");
    }

    /**
     * Parameters for connecting to Jira.
     * 
     */
    private UndeferrableValue<DataSourceParametersJiraArgs> jira;

    public DataSourceParametersJiraArgs jira() {
        if (jira == null) return null;
        return jira.getValue("DataSourceParametersArgs.jira");
    }

    /**
     * Parameters for connecting to MariaDB.
     * 
     */
    private UndeferrableValue<DataSourceParametersMariaDbArgs> mariaDb;

    public DataSourceParametersMariaDbArgs mariaDb() {
        if (mariaDb == null) return null;
        return mariaDb.getValue("DataSourceParametersArgs.mariaDb");
    }

    /**
     * Parameters for connecting to MySQL.
     * 
     */
    private UndeferrableValue<DataSourceParametersMysqlArgs> mysql;

    public DataSourceParametersMysqlArgs mysql() {
        if (mysql == null) return null;
        return mysql.getValue("DataSourceParametersArgs.mysql");
    }

    /**
     * Parameters for connecting to Oracle.
     * 
     */
    private UndeferrableValue<DataSourceParametersOracleArgs> oracle;

    public DataSourceParametersOracleArgs oracle() {
        if (oracle == null) return null;
        return oracle.getValue("DataSourceParametersArgs.oracle");
    }

    /**
     * Parameters for connecting to Postgresql.
     * 
     */
    private UndeferrableValue<DataSourceParametersPostgresqlArgs> postgresql;

    public DataSourceParametersPostgresqlArgs postgresql() {
        if (postgresql == null) return null;
        return postgresql.getValue("DataSourceParametersArgs.postgresql");
    }

    /**
     * Parameters for connecting to Presto.
     * 
     */
    private UndeferrableValue<DataSourceParametersPrestoArgs> presto;

    public DataSourceParametersPrestoArgs presto() {
        if (presto == null) return null;
        return presto.getValue("DataSourceParametersArgs.presto");
    }

    /**
     * Parameters for connecting to RDS.
     * 
     */
    private UndeferrableValue<DataSourceParametersRdsArgs> rds;

    public DataSourceParametersRdsArgs rds() {
        if (rds == null) return null;
        return rds.getValue("DataSourceParametersArgs.rds");
    }

    /**
     * Parameters for connecting to Redshift.
     * 
     */
    private UndeferrableValue<DataSourceParametersRedshiftArgs> redshift;

    public DataSourceParametersRedshiftArgs redshift() {
        if (redshift == null) return null;
        return redshift.getValue("DataSourceParametersArgs.redshift");
    }

    /**
     * Parameters for connecting to S3.
     * 
     */
    private UndeferrableValue<DataSourceParametersS3Args> s3;

    public DataSourceParametersS3Args s3() {
        if (s3 == null) return null;
        return s3.getValue("DataSourceParametersArgs.s3");
    }

    /**
     * Parameters for connecting to ServiceNow.
     * 
     */
    private UndeferrableValue<DataSourceParametersServiceNowArgs> serviceNow;

    public DataSourceParametersServiceNowArgs serviceNow() {
        if (serviceNow == null) return null;
        return serviceNow.getValue("DataSourceParametersArgs.serviceNow");
    }

    /**
     * Parameters for connecting to Snowflake.
     * 
     */
    private UndeferrableValue<DataSourceParametersSnowflakeArgs> snowflake;

    public DataSourceParametersSnowflakeArgs snowflake() {
        if (snowflake == null) return null;
        return snowflake.getValue("DataSourceParametersArgs.snowflake");
    }

    /**
     * Parameters for connecting to Spark.
     * 
     */
    private UndeferrableValue<DataSourceParametersSparkArgs> spark;

    public DataSourceParametersSparkArgs spark() {
        if (spark == null) return null;
        return spark.getValue("DataSourceParametersArgs.spark");
    }

    /**
     * Parameters for connecting to SQL Server.
     * 
     */
    private UndeferrableValue<DataSourceParametersSqlServerArgs> sqlServer;

    public DataSourceParametersSqlServerArgs sqlServer() {
        if (sqlServer == null) return null;
        return sqlServer.getValue("DataSourceParametersArgs.sqlServer");
    }

    /**
     * Parameters for connecting to Teradata.
     * 
     */
    private UndeferrableValue<DataSourceParametersTeradataArgs> teradata;

    public DataSourceParametersTeradataArgs teradata() {
        if (teradata == null) return null;
        return teradata.getValue("DataSourceParametersArgs.teradata");
    }

    /**
     * Parameters for connecting to Twitter.
     * 
     */
    private UndeferrableValue<DataSourceParametersTwitterArgs> twitter;

    public DataSourceParametersTwitterArgs twitter() {
        if (twitter == null) return null;
        return twitter.getValue("DataSourceParametersArgs.twitter");
    }

}
