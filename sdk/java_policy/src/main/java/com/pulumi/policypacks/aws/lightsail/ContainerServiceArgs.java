// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lightsail.inputs.ContainerServicePrivateRegistryAccessArgs;
import com.pulumi.policypacks.aws.lightsail.inputs.ContainerServicePublicDomainNamesArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lightsail/containerService:ContainerService")
public final class ContainerServiceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * A Boolean value indicating whether the container service is disabled. Defaults to `false`.
     * 
     */
    private UndeferrableValue<Boolean> isDisabled;

    public Boolean isDisabled() {
        if (isDisabled == null) return null;
        return isDisabled.getValue("ContainerServiceArgs.isDisabled");
    }

    /**
     * The name for the container service. Names must be of length 1 to 63, and be
     * unique within each AWS Region in your Lightsail account.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ContainerServiceArgs.name");
    }

    /**
     * The power specification for the container service. The power specifies the amount of memory,
     * the number of vCPUs, and the monthly price of each node of the container service.
     * Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
     * 
     */
    private UndeferrableValue<String> power;

    public String power() {
        if (power == null) return null;
        return power.getValue("ContainerServiceArgs.power");
    }

    /**
     * An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
     * 
     */
    private UndeferrableValue<ContainerServicePrivateRegistryAccessArgs> privateRegistryAccess;

    public ContainerServicePrivateRegistryAccessArgs privateRegistryAccess() {
        if (privateRegistryAccess == null) return null;
        return privateRegistryAccess.getValue("ContainerServiceArgs.privateRegistryAccess");
    }

    /**
     * The public domain names to use with the container service, such as example.com
     * and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
     * specify are used when you create a deployment with a container configured as the public endpoint of your container
     * service. If you don&#39;t specify public domain names, then you can use the default domain of the container service.
     * Defined below.
     * 
     */
    private UndeferrableValue<ContainerServicePublicDomainNamesArgs> publicDomainNames;

    public ContainerServicePublicDomainNamesArgs publicDomainNames() {
        if (publicDomainNames == null) return null;
        return publicDomainNames.getValue("ContainerServiceArgs.publicDomainNames");
    }

    /**
     * The scale specification for the container service. The scale specifies the allocated compute
     * nodes of the container service.
     * 
     */
    private UndeferrableValue<Integer> scale;

    public Integer scale() {
        if (scale == null) return null;
        return scale.getValue("ContainerServiceArgs.scale");
    }

    /**
     * Map of container service tags. To create a key-only tag, use an empty string as the value. To tag at launch, specify the tags in the Launch Template. If
     * configured with a provider
     * `default_tags` configuration block
     * present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ContainerServiceArgs.tags");
    }

}
