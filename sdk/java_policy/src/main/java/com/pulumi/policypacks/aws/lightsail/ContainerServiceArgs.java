// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lightsail;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lightsail.inputs.ContainerServicePrivateRegistryAccessArgs;
import com.pulumi.policypacks.aws.lightsail.inputs.ContainerServicePublicDomainNamesArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lightsail/containerService:ContainerService")
public final class ContainerServiceArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * A Boolean value indicating whether the container service is disabled. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="isDisabled", flag="unknown_isDisabled")
    private Boolean value_isDisabled;
    private boolean unknown_isDisabled;
    public Boolean isDisabled() {
        if (!unknown_isDisabled) return value_isDisabled;
        throw new UndeferrableValueException("Value 'ContainerServiceArgs.isDisabled' is not present");
    }

    /**
     * The name for the container service. Names must be of length 1 to 63, and be
     * unique within each AWS Region in your Lightsail account.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'ContainerServiceArgs.name' is not present");
    }

    /**
     * The power specification for the container service. The power specifies the amount of memory,
     * the number of vCPUs, and the monthly price of each node of the container service.
     * Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
     * 
     */
    @PolicyResourceProperty(name="power", flag="unknown_power")
    private String value_power;
    private boolean unknown_power;
    public String power() {
        if (!unknown_power) return value_power;
        throw new UndeferrableValueException("Value 'ContainerServiceArgs.power' is not present");
    }

    /**
     * An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See Private Registry Access below for more details.
     * 
     */
    @PolicyResourceProperty(name="privateRegistryAccess", flag="unknown_privateRegistryAccess")
    private ContainerServicePrivateRegistryAccessArgs value_privateRegistryAccess;
    private boolean unknown_privateRegistryAccess;
    public ContainerServicePrivateRegistryAccessArgs privateRegistryAccess() {
        if (!unknown_privateRegistryAccess) return value_privateRegistryAccess;
        throw new UndeferrableValueException("Value 'ContainerServiceArgs.privateRegistryAccess' is not present");
    }

    /**
     * The public domain names to use with the container service, such as example.com
     * and www.example.com. You can specify up to four public domain names for a container service. The domain names that you
     * specify are used when you create a deployment with a container configured as the public endpoint of your container
     * service. If you don&#39;t specify public domain names, then you can use the default domain of the container service.
     * Defined below.
     * 
     */
    @PolicyResourceProperty(name="publicDomainNames", flag="unknown_publicDomainNames")
    private ContainerServicePublicDomainNamesArgs value_publicDomainNames;
    private boolean unknown_publicDomainNames;
    public ContainerServicePublicDomainNamesArgs publicDomainNames() {
        if (!unknown_publicDomainNames) return value_publicDomainNames;
        throw new UndeferrableValueException("Value 'ContainerServiceArgs.publicDomainNames' is not present");
    }

    /**
     * The scale specification for the container service. The scale specifies the allocated compute
     * nodes of the container service.
     * 
     */
    @PolicyResourceProperty(name="scale", flag="unknown_scale")
    private Integer value_scale;
    private boolean unknown_scale;
    public Integer scale() {
        if (!unknown_scale) return value_scale;
        throw new UndeferrableValueException("Value 'ContainerServiceArgs.scale' is not present");
    }

    /**
     * Map of container service tags. To create a key-only tag, use an empty string as the value. To tag at launch, specify the tags in the Launch Template. If
     * configured with a provider
     * `default_tags` configuration block
     * present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ContainerServiceArgs.tags' is not present");
    }

}
