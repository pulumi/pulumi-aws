// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2clientvpn;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2clientvpn.inputs.EndpointAuthenticationOptionArgs;
import com.pulumi.policypacks.aws.ec2clientvpn.inputs.EndpointClientConnectOptionsArgs;
import com.pulumi.policypacks.aws.ec2clientvpn.inputs.EndpointClientLoginBannerOptionsArgs;
import com.pulumi.policypacks.aws.ec2clientvpn.inputs.EndpointConnectionLogOptionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2clientvpn/endpoint:Endpoint")
public final class EndpointArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Information about the authentication method to be used to authenticate clients.
     * 
     */
    private UndeferrableValue<List<EndpointAuthenticationOptionArgs>> authenticationOptions;

    public List<EndpointAuthenticationOptionArgs> authenticationOptions() {
        if (authenticationOptions == null) return null;
        return authenticationOptions.getValue("EndpointArgs.authenticationOptions");
    }

    /**
     * The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
     * 
     */
    private UndeferrableValue<String> clientCidrBlock;

    public String clientCidrBlock() {
        if (clientCidrBlock == null) return null;
        return clientCidrBlock.getValue("EndpointArgs.clientCidrBlock");
    }

    /**
     * The options for managing connection authorization for new client connections.
     * 
     */
    private UndeferrableValue<EndpointClientConnectOptionsArgs> clientConnectOptions;

    public EndpointClientConnectOptionsArgs clientConnectOptions() {
        if (clientConnectOptions == null) return null;
        return clientConnectOptions.getValue("EndpointArgs.clientConnectOptions");
    }

    /**
     * Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
     * 
     */
    private UndeferrableValue<EndpointClientLoginBannerOptionsArgs> clientLoginBannerOptions;

    public EndpointClientLoginBannerOptionsArgs clientLoginBannerOptions() {
        if (clientLoginBannerOptions == null) return null;
        return clientLoginBannerOptions.getValue("EndpointArgs.clientLoginBannerOptions");
    }

    /**
     * Information about the client connection logging options.
     * 
     */
    private UndeferrableValue<EndpointConnectionLogOptionsArgs> connectionLogOptions;

    public EndpointConnectionLogOptionsArgs connectionLogOptions() {
        if (connectionLogOptions == null) return null;
        return connectionLogOptions.getValue("EndpointArgs.connectionLogOptions");
    }

    /**
     * A brief description of the Client VPN endpoint.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("EndpointArgs.description");
    }

    /**
     * Indicates whether the client VPN session is disconnected after the maximum `session_timeout_hours` is reached. If `true`, users are prompted to reconnect client VPN. If `false`, client VPN attempts to reconnect automatically. The default value is `false`.
     * 
     */
    private UndeferrableValue<Boolean> disconnectOnSessionTimeout;

    public Boolean disconnectOnSessionTimeout() {
        if (disconnectOnSessionTimeout == null) return null;
        return disconnectOnSessionTimeout.getValue("EndpointArgs.disconnectOnSessionTimeout");
    }

    /**
     * Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
     * 
     */
    private UndeferrableValue<List<String>> dnsServers;

    public List<String> dnsServers() {
        if (dnsServers == null) return null;
        return dnsServers.getValue("EndpointArgs.dnsServers");
    }

    /**
     * The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
     * 
     */
    private UndeferrableValue<List<String>> securityGroupIds;

    public List<String> securityGroupIds() {
        if (securityGroupIds == null) return null;
        return securityGroupIds.getValue("EndpointArgs.securityGroupIds");
    }

    /**
     * Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
     * 
     */
    private UndeferrableValue<String> selfServicePortal;

    public String selfServicePortal() {
        if (selfServicePortal == null) return null;
        return selfServicePortal.getValue("EndpointArgs.selfServicePortal");
    }

    /**
     * The ARN of the ACM server certificate.
     * 
     */
    private UndeferrableValue<String> serverCertificateArn;

    public String serverCertificateArn() {
        if (serverCertificateArn == null) return null;
        return serverCertificateArn.getValue("EndpointArgs.serverCertificateArn");
    }

    /**
     * The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
     * 
     */
    private UndeferrableValue<Integer> sessionTimeoutHours;

    public Integer sessionTimeoutHours() {
        if (sessionTimeoutHours == null) return null;
        return sessionTimeoutHours.getValue("EndpointArgs.sessionTimeoutHours");
    }

    /**
     * Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
     * 
     */
    private UndeferrableValue<Boolean> splitTunnel;

    public Boolean splitTunnel() {
        if (splitTunnel == null) return null;
        return splitTunnel.getValue("EndpointArgs.splitTunnel");
    }

    /**
     * A mapping of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("EndpointArgs.tags");
    }

    /**
     * The transport protocol to be used by the VPN session. Default value is `udp`.
     * 
     */
    private UndeferrableValue<String> transportProtocol;

    public String transportProtocol() {
        if (transportProtocol == null) return null;
        return transportProtocol.getValue("EndpointArgs.transportProtocol");
    }

    /**
     * The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
     * 
     */
    private UndeferrableValue<String> vpcId;

    public String vpcId() {
        if (vpcId == null) return null;
        return vpcId.getValue("EndpointArgs.vpcId");
    }

    /**
     * The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
     * 
     */
    private UndeferrableValue<Integer> vpnPort;

    public Integer vpnPort() {
        if (vpnPort == null) return null;
        return vpnPort.getValue("EndpointArgs.vpnPort");
    }

}
