// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.efs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.efs.inputs.FileSystemLifecyclePolicyArgs;
import com.pulumi.policypacks.aws.efs.inputs.FileSystemProtectionArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:efs/fileSystem:FileSystem")
public final class FileSystemArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * the AWS Availability Zone in which to create the file system. Used to create a file system that uses One Zone storage classes. See [user guide](https://docs.aws.amazon.com/efs/latest/ug/availability-durability.html) for more information.
     * 
     */
    private UndeferrableValue<String> availabilityZoneName;

    public String availabilityZoneName() {
        if (availabilityZoneName == null) return null;
        return availabilityZoneName.getValue("FileSystemArgs.availabilityZoneName");
    }

    /**
     * A unique name (a maximum of 64 characters are allowed)
     * used as reference when creating the Elastic File System to ensure idempotent file
     * system creation. By default generated by this provider. See [Elastic File System]
     * user guide for more information.
     * 
     */
    private UndeferrableValue<String> creationToken;

    public String creationToken() {
        if (creationToken == null) return null;
        return creationToken.getValue("FileSystemArgs.creationToken");
    }

    /**
     * If true, the disk will be encrypted.
     * 
     */
    private UndeferrableValue<Boolean> encrypted;

    public Boolean encrypted() {
        if (encrypted == null) return null;
        return encrypted.getValue("FileSystemArgs.encrypted");
    }

    /**
     * The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("FileSystemArgs.kmsKeyId");
    }

    /**
     * A file system [lifecycle policy](https://docs.aws.amazon.com/efs/latest/ug/API_LifecyclePolicy.html) object. See `lifecycle_policy` block below for details.
     * 
     */
    private UndeferrableValue<List<FileSystemLifecyclePolicyArgs>> lifecyclePolicies;

    public List<FileSystemLifecyclePolicyArgs> lifecyclePolicies() {
        if (lifecyclePolicies == null) return null;
        return lifecyclePolicies.getValue("FileSystemArgs.lifecyclePolicies");
    }

    /**
     * The file system performance mode. Can be either `&#34;generalPurpose&#34;` or `&#34;maxIO&#34;` (Default: `&#34;generalPurpose&#34;`).
     * 
     */
    private UndeferrableValue<String> performanceMode;

    public String performanceMode() {
        if (performanceMode == null) return null;
        return performanceMode.getValue("FileSystemArgs.performanceMode");
    }

    /**
     * A file system [protection](https://docs.aws.amazon.com/efs/latest/ug/API_FileSystemProtectionDescription.html) object. See `protection` block below for details.
     * 
     */
    private UndeferrableValue<FileSystemProtectionArgs> protection;

    public FileSystemProtectionArgs protection() {
        if (protection == null) return null;
        return protection.getValue("FileSystemArgs.protection");
    }

    /**
     * The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughput_mode` set to `provisioned`.
     * 
     */
    private UndeferrableValue<Double> provisionedThroughputInMibps;

    public Double provisionedThroughputInMibps() {
        if (provisionedThroughputInMibps == null) return null;
        return provisionedThroughputInMibps.getValue("FileSystemArgs.provisionedThroughputInMibps");
    }

    /**
     * A map of tags to assign to the file system. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("FileSystemArgs.tags");
    }

    /**
     * Throughput mode for the file system. Defaults to `bursting`. Valid values: `bursting`, `provisioned`, or `elastic`. When using `provisioned`, also set `provisioned_throughput_in_mibps`.
     * 
     */
    private UndeferrableValue<String> throughputMode;

    public String throughputMode() {
        if (throughputMode == null) return null;
        return throughputMode.getValue("FileSystemArgs.throughputMode");
    }

}
