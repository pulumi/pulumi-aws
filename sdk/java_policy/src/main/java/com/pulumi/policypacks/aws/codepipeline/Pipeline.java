// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codepipeline;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.codepipeline.outputs.PipelineArtifactStore;
import com.pulumi.policypacks.aws.codepipeline.outputs.PipelineStage;
import com.pulumi.policypacks.aws.codepipeline.outputs.PipelineTrigger;
import com.pulumi.policypacks.aws.codepipeline.outputs.PipelineTriggerAll;
import com.pulumi.policypacks.aws.codepipeline.outputs.PipelineVariable;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:codepipeline/pipeline:Pipeline")
public final class Pipeline extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Codepipeline ARN.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Pipeline.arn");
    }

    /**
     * One or more artifact_store blocks. Artifact stores are documented below.
     * 
     */
    private UndeferrableValue<List<PipelineArtifactStore>> artifactStores;

    public List<PipelineArtifactStore> artifactStores() {
        if (artifactStores == null) return null;
        return artifactStores.getValue("Pipeline.artifactStores");
    }

    /**
     * The method that the pipeline will use to handle multiple executions. The default mode is `SUPERSEDED`. For value values, refer to the [AWS documentation](https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_PipelineDeclaration.html#CodePipeline-Type-PipelineDeclaration-executionMode).
     * 
     * **Note:** `QUEUED` or `PARALLEL` mode can only be used with V2 pipelines.
     * 
     */
    private @Nullable UndeferrableValue<String> executionMode;

    public @Nullable String executionMode() {
        if (executionMode == null) return null;
        return executionMode.getValue("Pipeline.executionMode");
    }

    /**
     * The name of the pipeline.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("Pipeline.name");
    }

    /**
     * Type of the pipeline. Possible values are: `V1` and `V2`. Default value is `V1`.
     * 
     */
    private @Nullable UndeferrableValue<String> pipelineType;

    public @Nullable String pipelineType() {
        if (pipelineType == null) return null;
        return pipelineType.getValue("Pipeline.pipelineType");
    }

    /**
     * A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("Pipeline.roleArn");
    }

    /**
     * A stage block. Stages are documented below.
     * 
     */
    private UndeferrableValue<List<PipelineStage>> stages;

    public List<PipelineStage> stages() {
        if (stages == null) return null;
        return stages.getValue("Pipeline.stages");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Pipeline.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Pipeline.tagsAll");
    }

    /**
     * A list of all triggers present on the pipeline, including default triggers added by AWS for `V2` pipelines which omit an explicit `trigger` definition.
     * 
     */
    private UndeferrableValue<List<PipelineTriggerAll>> triggerAlls;

    public List<PipelineTriggerAll> triggerAlls() {
        if (triggerAlls == null) return null;
        return triggerAlls.getValue("Pipeline.triggerAlls");
    }

    /**
     * A trigger block. Valid only when `pipeline_type` is `V2`. Triggers are documented below.
     * 
     */
    private @Nullable UndeferrableValue<List<PipelineTrigger>> triggers;

    public @Nullable List<PipelineTrigger> triggers() {
        if (triggers == null) return null;
        return triggers.getValue("Pipeline.triggers");
    }

    /**
     * A pipeline-level variable block. Valid only when `pipeline_type` is `V2`. Variable are documented below.
     * 
     */
    private @Nullable UndeferrableValue<List<PipelineVariable>> variables;

    public @Nullable List<PipelineVariable> variables() {
        if (variables == null) return null;
        return variables.getValue("Pipeline.variables");
    }

}
