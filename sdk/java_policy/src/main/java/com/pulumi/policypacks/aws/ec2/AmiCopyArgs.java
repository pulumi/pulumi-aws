// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.inputs.AmiCopyEbsBlockDeviceArgs;
import com.pulumi.policypacks.aws.ec2.inputs.AmiCopyEphemeralBlockDeviceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/amiCopy:AmiCopy")
public final class AmiCopyArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Date and time to deprecate the AMI. If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
     * 
     */
    @PolicyResourceProperty(name="deprecationTime", flag="unknown_deprecationTime")
    private String value_deprecationTime;
    private boolean unknown_deprecationTime;
    public String deprecationTime() {
        if (!unknown_deprecationTime) return value_deprecationTime;
        throw new UndeferrableValueException("Value 'AmiCopyArgs.deprecationTime' is not present");
    }

    /**
     * Longer, human-readable description for the AMI.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'AmiCopyArgs.description' is not present");
    }

    /**
     * ARN of the Outpost to which to copy the AMI.
     * Only specify this parameter when copying an AMI from an AWS Region to an Outpost. The AMI must be in the Region of the destination Outpost.
     * 
     */
    @PolicyResourceProperty(name="destinationOutpostArn", flag="unknown_destinationOutpostArn")
    private String value_destinationOutpostArn;
    private boolean unknown_destinationOutpostArn;
    public String destinationOutpostArn() {
        if (!unknown_destinationOutpostArn) return value_destinationOutpostArn;
        throw new UndeferrableValueException("Value 'AmiCopyArgs.destinationOutpostArn' is not present");
    }

    /**
     * Nested block describing an EBS block device that should be
     * attached to created instances. The structure of this block is described below.
     * 
     */
    @PolicyResourceProperty(name="ebsBlockDevices", flag="unknown_ebsBlockDevices")
    private List<AmiCopyEbsBlockDeviceArgs> value_ebsBlockDevices;
    private boolean unknown_ebsBlockDevices;
    public List<AmiCopyEbsBlockDeviceArgs> ebsBlockDevices() {
        if (!unknown_ebsBlockDevices) return value_ebsBlockDevices;
        throw new UndeferrableValueException("Value 'AmiCopyArgs.ebsBlockDevices' is not present");
    }

    /**
     * Whether the destination snapshots of the copied image should be encrypted. Defaults to `false`
     * 
     */
    @PolicyResourceProperty(name="encrypted", flag="unknown_encrypted")
    private Boolean value_encrypted;
    private boolean unknown_encrypted;
    public Boolean encrypted() {
        if (!unknown_encrypted) return value_encrypted;
        throw new UndeferrableValueException("Value 'AmiCopyArgs.encrypted' is not present");
    }

    /**
     * Nested block describing an ephemeral block device that
     * should be attached to created instances. The structure of this block is described below.
     * 
     */
    @PolicyResourceProperty(name="ephemeralBlockDevices", flag="unknown_ephemeralBlockDevices")
    private List<AmiCopyEphemeralBlockDeviceArgs> value_ephemeralBlockDevices;
    private boolean unknown_ephemeralBlockDevices;
    public List<AmiCopyEphemeralBlockDeviceArgs> ephemeralBlockDevices() {
        if (!unknown_ephemeralBlockDevices) return value_ephemeralBlockDevices;
        throw new UndeferrableValueException("Value 'AmiCopyArgs.ephemeralBlockDevices' is not present");
    }

    /**
     * Full ARN of the KMS Key to use when encrypting the snapshots of an image during a copy operation. If not specified, then the default AWS KMS Key will be used
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'AmiCopyArgs.kmsKeyId' is not present");
    }

    /**
     * Region-unique name for the AMI.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'AmiCopyArgs.name' is not present");
    }

    /**
     * Id of the AMI to copy. This id must be valid in the region
     * given by `source_ami_region`.
     * 
     */
    @PolicyResourceProperty(name="sourceAmiId", flag="unknown_sourceAmiId")
    private String value_sourceAmiId;
    private boolean unknown_sourceAmiId;
    public String sourceAmiId() {
        if (!unknown_sourceAmiId) return value_sourceAmiId;
        throw new UndeferrableValueException("Value 'AmiCopyArgs.sourceAmiId' is not present");
    }

    /**
     * Region from which the AMI will be copied. This may be the
     * same as the AWS provider region in order to create a copy within the same region.
     * 
     */
    @PolicyResourceProperty(name="sourceAmiRegion", flag="unknown_sourceAmiRegion")
    private String value_sourceAmiRegion;
    private boolean unknown_sourceAmiRegion;
    public String sourceAmiRegion() {
        if (!unknown_sourceAmiRegion) return value_sourceAmiRegion;
        throw new UndeferrableValueException("Value 'AmiCopyArgs.sourceAmiRegion' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'AmiCopyArgs.tags' is not present");
    }

}
