// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.iam;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:iam/serverCertificate:ServerCertificate")
public final class ServerCertificate extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) specifying the server certificate.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ServerCertificate.arn' is not present");
    }

    /**
     * The contents of the public key certificate in
     * PEM-encoded format.
     * 
     */
    @PolicyResourceProperty(name="certificateBody", flag="unknown_certificateBody")
    private String value_certificateBody;
    private boolean unknown_certificateBody;
    public String certificateBody() {
        if (!unknown_certificateBody) return value_certificateBody;
        throw new UndeferrableValueException("Value 'ServerCertificate.certificateBody' is not present");
    }

    /**
     * The contents of the certificate chain.
     * This is typically a concatenation of the PEM-encoded public key certificates
     * of the chain.
     * 
     */
    @PolicyResourceProperty(name="certificateChain", flag="unknown_certificateChain")
    private @Nullable String value_certificateChain;
    private boolean unknown_certificateChain;
    public @Nullable String certificateChain() {
        if (!unknown_certificateChain) return value_certificateChain;
        throw new UndeferrableValueException("Value 'ServerCertificate.certificateChain' is not present");
    }

    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) on which the certificate is set to expire.
     * 
     */
    @PolicyResourceProperty(name="expiration", flag="unknown_expiration")
    private String value_expiration;
    private boolean unknown_expiration;
    public String expiration() {
        if (!unknown_expiration) return value_expiration;
        throw new UndeferrableValueException("Value 'ServerCertificate.expiration' is not present");
    }

    /**
     * The name of the Server Certificate. Do not include the path in this value. If omitted, the provider will assign a random, unique name.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'ServerCertificate.name' is not present");
    }

    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     * 
     */
    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'ServerCertificate.namePrefix' is not present");
    }

    /**
     * The IAM path for the server certificate.  If it is not
     * included, it defaults to a slash (/). If this certificate is for use with
     * AWS CloudFront, the path must be in format `/cloudfront/your_path_here`.
     * See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more details on IAM Paths.
     * 
     */
    @PolicyResourceProperty(name="path", flag="unknown_path")
    private @Nullable String value_path;
    private boolean unknown_path;
    public @Nullable String path() {
        if (!unknown_path) return value_path;
        throw new UndeferrableValueException("Value 'ServerCertificate.path' is not present");
    }

    /**
     * The contents of the private key in PEM-encoded format.
     * 
     */
    @PolicyResourceProperty(name="privateKey", flag="unknown_privateKey")
    private String value_privateKey;
    private boolean unknown_privateKey;
    public String privateKey() {
        if (!unknown_privateKey) return value_privateKey;
        throw new UndeferrableValueException("Value 'ServerCertificate.privateKey' is not present");
    }

    /**
     * Map of resource tags for the server certificate. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     * &gt; **NOTE:** AWS performs behind-the-scenes modifications to some certificate files if they do not adhere to a specific format. These modifications will result in this provider forever believing that it needs to update the resources since the local and AWS file contents will not match after theses modifications occur. In order to prevent this from happening you must ensure that all your PEM-encoded files use UNIX line-breaks and that `certificate_body` contains only one certificate. All other certificates should go in `certificate_chain`. It is common for some Certificate Authorities to issue certificate files that have DOS line-breaks and that are actually multiple certificates concatenated together in order to form a full certificate chain.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ServerCertificate.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ServerCertificate.tagsAll' is not present");
    }

    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) when the server certificate was uploaded.
     * 
     */
    @PolicyResourceProperty(name="uploadDate", flag="unknown_uploadDate")
    private String value_uploadDate;
    private boolean unknown_uploadDate;
    public String uploadDate() {
        if (!unknown_uploadDate) return value_uploadDate;
        throw new UndeferrableValueException("Value 'ServerCertificate.uploadDate' is not present");
    }

}
