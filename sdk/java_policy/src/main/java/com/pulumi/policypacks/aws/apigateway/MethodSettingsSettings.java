// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigateway;

import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;


public final class MethodSettingsSettings {

    /**
     * Whether the cached responses are encrypted.
     * 
     */
    public Boolean cacheDataEncrypted;



    /**
     * Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
     * 
     */
    public Integer cacheTtlInSeconds;



    /**
     * Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
     * 
     */
    public Boolean cachingEnabled;



    /**
     * Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
     * 
     */
    public Boolean dataTraceEnabled;



    /**
     * Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
     * 
     */
    public String loggingLevel;



    /**
     * Whether Amazon CloudWatch metrics are enabled for this method.
     * 
     */
    public Boolean metricsEnabled;



    /**
     * Whether authorization is required for a cache invalidation request.
     * 
     */
    public Boolean requireAuthorizationForCacheControl;



    /**
     * Throttling burst limit. Default: `-1` (throttling disabled).
     * 
     */
    public Integer throttlingBurstLimit;



    /**
     * Throttling rate limit. Default: `-1` (throttling disabled).
     * 
     */
    public Double throttlingRateLimit;



    /**
     * How to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
     * 
     */
    public String unauthorizedCacheControlHeaderStrategy;



}
