// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.glue.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class ClassifierCsvClassifierArgs {

    /**
     * Enables the processing of files that contain only one column.
     * 
     */
    private UndeferrableValue<Boolean> allowSingleColumn;

    public Boolean allowSingleColumn() {
        if (allowSingleColumn == null) return null;
        return allowSingleColumn.getValue("ClassifierCsvClassifierArgs.allowSingleColumn");
    }

    /**
     * Indicates whether the CSV file contains a header. This can be one of &#34;ABSENT&#34;, &#34;PRESENT&#34;, or &#34;UNKNOWN&#34;.
     * 
     */
    private UndeferrableValue<String> containsHeader;

    public String containsHeader() {
        if (containsHeader == null) return null;
        return containsHeader.getValue("ClassifierCsvClassifierArgs.containsHeader");
    }

    /**
     * Enables the custom datatype to be configured.
     * 
     */
    private UndeferrableValue<Boolean> customDatatypeConfigured;

    public Boolean customDatatypeConfigured() {
        if (customDatatypeConfigured == null) return null;
        return customDatatypeConfigured.getValue("ClassifierCsvClassifierArgs.customDatatypeConfigured");
    }

    /**
     * A list of supported custom datatypes. Valid values are `BINARY`, `BOOLEAN`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `INT`, `LONG`, `SHORT`, `STRING`, `TIMESTAMP`.
     * 
     */
    private UndeferrableValue<List<String>> customDatatypes;

    public List<String> customDatatypes() {
        if (customDatatypes == null) return null;
        return customDatatypes.getValue("ClassifierCsvClassifierArgs.customDatatypes");
    }

    /**
     * The delimiter used in the CSV to separate columns.
     * 
     */
    private UndeferrableValue<String> delimiter;

    public String delimiter() {
        if (delimiter == null) return null;
        return delimiter.getValue("ClassifierCsvClassifierArgs.delimiter");
    }

    /**
     * Specifies whether to trim column values.
     * 
     */
    private UndeferrableValue<Boolean> disableValueTrimming;

    public Boolean disableValueTrimming() {
        if (disableValueTrimming == null) return null;
        return disableValueTrimming.getValue("ClassifierCsvClassifierArgs.disableValueTrimming");
    }

    /**
     * A list of strings representing column names.
     * 
     */
    private UndeferrableValue<List<String>> headers;

    public List<String> headers() {
        if (headers == null) return null;
        return headers.getValue("ClassifierCsvClassifierArgs.headers");
    }

    /**
     * A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
     * 
     */
    private UndeferrableValue<String> quoteSymbol;

    public String quoteSymbol() {
        if (quoteSymbol == null) return null;
        return quoteSymbol.getValue("ClassifierCsvClassifierArgs.quoteSymbol");
    }

    /**
     * The SerDe for processing CSV. Valid values are `OpenCSVSerDe`, `LazySimpleSerDe`, `None`.
     * 
     */
    private UndeferrableValue<String> serde;

    public String serde() {
        if (serde == null) return null;
        return serde.getValue("ClassifierCsvClassifierArgs.serde");
    }

}
