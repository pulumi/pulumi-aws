// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.msk;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.msk.inputs.ClusterBrokerNodeGroupInfoArgs;
import com.pulumi.policypacks.aws.msk.inputs.ClusterClientAuthenticationArgs;
import com.pulumi.policypacks.aws.msk.inputs.ClusterConfigurationInfoArgs;
import com.pulumi.policypacks.aws.msk.inputs.ClusterEncryptionInfoArgs;
import com.pulumi.policypacks.aws.msk.inputs.ClusterLoggingInfoArgs;
import com.pulumi.policypacks.aws.msk.inputs.ClusterOpenMonitoringArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:msk/cluster:Cluster")
public final class ClusterArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Configuration block for the broker nodes of the Kafka cluster.
     * 
     */
    private UndeferrableValue<ClusterBrokerNodeGroupInfoArgs> brokerNodeGroupInfo;

    public ClusterBrokerNodeGroupInfoArgs brokerNodeGroupInfo() {
        if (brokerNodeGroupInfo == null) return null;
        return brokerNodeGroupInfo.getValue("ClusterArgs.brokerNodeGroupInfo");
    }

    /**
     * Configuration block for specifying a client authentication. See below.
     * 
     */
    private UndeferrableValue<ClusterClientAuthenticationArgs> clientAuthentication;

    public ClusterClientAuthenticationArgs clientAuthentication() {
        if (clientAuthentication == null) return null;
        return clientAuthentication.getValue("ClusterArgs.clientAuthentication");
    }

    /**
     * Name of the MSK cluster.
     * 
     */
    private UndeferrableValue<String> clusterName;

    public String clusterName() {
        if (clusterName == null) return null;
        return clusterName.getValue("ClusterArgs.clusterName");
    }

    /**
     * Configuration block for specifying a MSK Configuration to attach to Kafka brokers. See below.
     * 
     */
    private UndeferrableValue<ClusterConfigurationInfoArgs> configurationInfo;

    public ClusterConfigurationInfoArgs configurationInfo() {
        if (configurationInfo == null) return null;
        return configurationInfo.getValue("ClusterArgs.configurationInfo");
    }

    /**
     * Configuration block for specifying encryption. See below.
     * 
     */
    private UndeferrableValue<ClusterEncryptionInfoArgs> encryptionInfo;

    public ClusterEncryptionInfoArgs encryptionInfo() {
        if (encryptionInfo == null) return null;
        return encryptionInfo.getValue("ClusterArgs.encryptionInfo");
    }

    /**
     * Specify the desired enhanced MSK CloudWatch monitoring level. See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
     * 
     */
    private UndeferrableValue<String> enhancedMonitoring;

    public String enhancedMonitoring() {
        if (enhancedMonitoring == null) return null;
        return enhancedMonitoring.getValue("ClusterArgs.enhancedMonitoring");
    }

    /**
     * Specify the desired Kafka software version.
     * 
     */
    private UndeferrableValue<String> kafkaVersion;

    public String kafkaVersion() {
        if (kafkaVersion == null) return null;
        return kafkaVersion.getValue("ClusterArgs.kafkaVersion");
    }

    /**
     * Configuration block for streaming broker logs to Cloudwatch/S3/Kinesis Firehose. See below.
     * 
     */
    private UndeferrableValue<ClusterLoggingInfoArgs> loggingInfo;

    public ClusterLoggingInfoArgs loggingInfo() {
        if (loggingInfo == null) return null;
        return loggingInfo.getValue("ClusterArgs.loggingInfo");
    }

    /**
     * The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
     * 
     */
    private UndeferrableValue<Integer> numberOfBrokerNodes;

    public Integer numberOfBrokerNodes() {
        if (numberOfBrokerNodes == null) return null;
        return numberOfBrokerNodes.getValue("ClusterArgs.numberOfBrokerNodes");
    }

    /**
     * Configuration block for JMX and Node monitoring for the MSK cluster. See below.
     * 
     */
    private UndeferrableValue<ClusterOpenMonitoringArgs> openMonitoring;

    public ClusterOpenMonitoringArgs openMonitoring() {
        if (openMonitoring == null) return null;
        return openMonitoring.getValue("ClusterArgs.openMonitoring");
    }

    /**
     * Controls storage mode for supported storage tiers. Valid values are: `LOCAL` or `TIERED`.
     * 
     */
    private UndeferrableValue<String> storageMode;

    public String storageMode() {
        if (storageMode == null) return null;
        return storageMode.getValue("ClusterArgs.storageMode");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ClusterArgs.tags");
    }

}
