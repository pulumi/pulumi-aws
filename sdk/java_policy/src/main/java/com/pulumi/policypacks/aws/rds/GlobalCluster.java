// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rds;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.rds.outputs.GlobalClusterGlobalClusterMember;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rds/globalCluster:GlobalCluster")
public final class GlobalCluster extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * RDS Global Cluster Amazon Resource Name (ARN).
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'GlobalCluster.arn' is not present");
    }

    /**
     * Name for an automatically created database on cluster creation. Pulumi will only perform drift detection if a configuration value is provided.
     * 
     */
    @PolicyResourceProperty(name="databaseName", flag="unknown_databaseName")
    private String value_databaseName;
    private boolean unknown_databaseName;
    public String databaseName() {
        if (!unknown_databaseName) return value_databaseName;
        throw new UndeferrableValueException("Value 'GlobalCluster.databaseName' is not present");
    }

    /**
     * If the Global Cluster should have deletion protection enabled. The database can&#39;t be deleted when this value is set to `true`. The default is `false`.
     * 
     */
    @PolicyResourceProperty(name="deletionProtection", flag="unknown_deletionProtection")
    private @Nullable Boolean value_deletionProtection;
    private boolean unknown_deletionProtection;
    public @Nullable Boolean deletionProtection() {
        if (!unknown_deletionProtection) return value_deletionProtection;
        throw new UndeferrableValueException("Value 'GlobalCluster.deletionProtection' is not present");
    }

    /**
     * Writer endpoint for the new global database cluster. This endpoint always points to the writer DB instance in the current primary cluster.
     * 
     */
    @PolicyResourceProperty(name="endpoint", flag="unknown_endpoint")
    private String value_endpoint;
    private boolean unknown_endpoint;
    public String endpoint() {
        if (!unknown_endpoint) return value_endpoint;
        throw new UndeferrableValueException("Value 'GlobalCluster.endpoint' is not present");
    }

    /**
     * Name of the database engine to be used for this DB cluster. The provider will only perform drift detection if a configuration value is provided. Valid values: `aurora`, `aurora-mysql`, `aurora-postgresql`. Defaults to `aurora`. Conflicts with `source_db_cluster_identifier`.
     * 
     */
    @PolicyResourceProperty(name="engine", flag="unknown_engine")
    private String value_engine;
    private boolean unknown_engine;
    public String engine() {
        if (!unknown_engine) return value_engine;
        throw new UndeferrableValueException("Value 'GlobalCluster.engine' is not present");
    }

    /**
     * The life cycle type for this DB instance. This setting applies only to Aurora PostgreSQL-based global databases. Valid values are `open-source-rds-extended-support`, `open-source-rds-extended-support-disabled`. Default value is `open-source-rds-extended-support`. [Using Amazon RDS Extended Support]: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html
     * 
     */
    @PolicyResourceProperty(name="engineLifecycleSupport", flag="unknown_engineLifecycleSupport")
    private String value_engineLifecycleSupport;
    private boolean unknown_engineLifecycleSupport;
    public String engineLifecycleSupport() {
        if (!unknown_engineLifecycleSupport) return value_engineLifecycleSupport;
        throw new UndeferrableValueException("Value 'GlobalCluster.engineLifecycleSupport' is not present");
    }

    /**
     * Engine version of the Aurora global database. The `engine`, `engine_version`, and `instance_class` (on the `aws.rds.ClusterInstance`) must together support global databases. See [Using Amazon Aurora global databases](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html) for more information. By upgrading the engine version, the provider will upgrade cluster members. **NOTE:** To avoid an `inconsistent final plan` error while upgrading, use the `lifecycle` `ignore_changes` for `engine_version` meta argument on the associated `aws.rds.Cluster` resource as shown above in Upgrading Engine Versions example.
     * 
     */
    @PolicyResourceProperty(name="engineVersion", flag="unknown_engineVersion")
    private String value_engineVersion;
    private boolean unknown_engineVersion;
    public String engineVersion() {
        if (!unknown_engineVersion) return value_engineVersion;
        throw new UndeferrableValueException("Value 'GlobalCluster.engineVersion' is not present");
    }

    @PolicyResourceProperty(name="engineVersionActual", flag="unknown_engineVersionActual")
    private String value_engineVersionActual;
    private boolean unknown_engineVersionActual;
    public String engineVersionActual() {
        if (!unknown_engineVersionActual) return value_engineVersionActual;
        throw new UndeferrableValueException("Value 'GlobalCluster.engineVersionActual' is not present");
    }

    /**
     * Enable to remove DB Cluster members from Global Cluster on destroy. Required with `source_db_cluster_identifier`.
     * 
     */
    @PolicyResourceProperty(name="forceDestroy", flag="unknown_forceDestroy")
    private @Nullable Boolean value_forceDestroy;
    private boolean unknown_forceDestroy;
    public @Nullable Boolean forceDestroy() {
        if (!unknown_forceDestroy) return value_forceDestroy;
        throw new UndeferrableValueException("Value 'GlobalCluster.forceDestroy' is not present");
    }

    /**
     * Global cluster identifier.
     * 
     */
    @PolicyResourceProperty(name="globalClusterIdentifier", flag="unknown_globalClusterIdentifier")
    private String value_globalClusterIdentifier;
    private boolean unknown_globalClusterIdentifier;
    public String globalClusterIdentifier() {
        if (!unknown_globalClusterIdentifier) return value_globalClusterIdentifier;
        throw new UndeferrableValueException("Value 'GlobalCluster.globalClusterIdentifier' is not present");
    }

    /**
     * Set of objects containing Global Cluster members.
     * 
     */
    @PolicyResourceProperty(name="globalClusterMembers", flag="unknown_globalClusterMembers")
    private List<GlobalClusterGlobalClusterMember> value_globalClusterMembers;
    private boolean unknown_globalClusterMembers;
    public List<GlobalClusterGlobalClusterMember> globalClusterMembers() {
        if (!unknown_globalClusterMembers) return value_globalClusterMembers;
        throw new UndeferrableValueException("Value 'GlobalCluster.globalClusterMembers' is not present");
    }

    /**
     * AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed.
     * 
     */
    @PolicyResourceProperty(name="globalClusterResourceId", flag="unknown_globalClusterResourceId")
    private String value_globalClusterResourceId;
    private boolean unknown_globalClusterResourceId;
    public String globalClusterResourceId() {
        if (!unknown_globalClusterResourceId) return value_globalClusterResourceId;
        throw new UndeferrableValueException("Value 'GlobalCluster.globalClusterResourceId' is not present");
    }

    /**
     * Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. The provider cannot perform drift detection of this value. **NOTE:** After initial creation, this argument can be removed and replaced with `engine` and `engine_version`. This allows upgrading the engine version of the Global Cluster.
     * 
     */
    @PolicyResourceProperty(name="sourceDbClusterIdentifier", flag="unknown_sourceDbClusterIdentifier")
    private String value_sourceDbClusterIdentifier;
    private boolean unknown_sourceDbClusterIdentifier;
    public String sourceDbClusterIdentifier() {
        if (!unknown_sourceDbClusterIdentifier) return value_sourceDbClusterIdentifier;
        throw new UndeferrableValueException("Value 'GlobalCluster.sourceDbClusterIdentifier' is not present");
    }

    /**
     * Specifies whether the DB cluster is encrypted. The default is `false` unless `source_db_cluster_identifier` is specified and encrypted. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @PolicyResourceProperty(name="storageEncrypted", flag="unknown_storageEncrypted")
    private Boolean value_storageEncrypted;
    private boolean unknown_storageEncrypted;
    public Boolean storageEncrypted() {
        if (!unknown_storageEncrypted) return value_storageEncrypted;
        throw new UndeferrableValueException("Value 'GlobalCluster.storageEncrypted' is not present");
    }

    /**
     * A map of tags to assign to the DB cluster. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'GlobalCluster.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'GlobalCluster.tagsAll' is not present");
    }

}
