// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.directoryservice;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:directoryservice/trust:Trust")
public final class Trust extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Set of IPv4 addresses for the DNS server associated with the remote Directory.
     * Can contain between 1 and 4 values.
     * 
     */
    @PolicyResourceProperty(name="conditionalForwarderIpAddrs", flag="unknown_conditionalForwarderIpAddrs")
    private @Nullable List<String> value_conditionalForwarderIpAddrs;
    private boolean unknown_conditionalForwarderIpAddrs;
    public @Nullable List<String> conditionalForwarderIpAddrs() {
        if (!unknown_conditionalForwarderIpAddrs) return value_conditionalForwarderIpAddrs;
        throw new UndeferrableValueException("Value 'Trust.conditionalForwarderIpAddrs' is not present");
    }

    /**
     * Date and time when the Trust was created.
     * 
     */
    @PolicyResourceProperty(name="createdDateTime", flag="unknown_createdDateTime")
    private String value_createdDateTime;
    private boolean unknown_createdDateTime;
    public String createdDateTime() {
        if (!unknown_createdDateTime) return value_createdDateTime;
        throw new UndeferrableValueException("Value 'Trust.createdDateTime' is not present");
    }

    /**
     * Whether to delete the conditional forwarder when deleting the Trust relationship.
     * 
     */
    @PolicyResourceProperty(name="deleteAssociatedConditionalForwarder", flag="unknown_deleteAssociatedConditionalForwarder")
    private Boolean value_deleteAssociatedConditionalForwarder;
    private boolean unknown_deleteAssociatedConditionalForwarder;
    public Boolean deleteAssociatedConditionalForwarder() {
        if (!unknown_deleteAssociatedConditionalForwarder) return value_deleteAssociatedConditionalForwarder;
        throw new UndeferrableValueException("Value 'Trust.deleteAssociatedConditionalForwarder' is not present");
    }

    /**
     * ID of the Directory.
     * 
     */
    @PolicyResourceProperty(name="directoryId", flag="unknown_directoryId")
    private String value_directoryId;
    private boolean unknown_directoryId;
    public String directoryId() {
        if (!unknown_directoryId) return value_directoryId;
        throw new UndeferrableValueException("Value 'Trust.directoryId' is not present");
    }

    /**
     * Date and time when the Trust was last updated.
     * 
     */
    @PolicyResourceProperty(name="lastUpdatedDateTime", flag="unknown_lastUpdatedDateTime")
    private String value_lastUpdatedDateTime;
    private boolean unknown_lastUpdatedDateTime;
    public String lastUpdatedDateTime() {
        if (!unknown_lastUpdatedDateTime) return value_lastUpdatedDateTime;
        throw new UndeferrableValueException("Value 'Trust.lastUpdatedDateTime' is not present");
    }

    /**
     * Fully qualified domain name of the remote Directory.
     * 
     */
    @PolicyResourceProperty(name="remoteDomainName", flag="unknown_remoteDomainName")
    private String value_remoteDomainName;
    private boolean unknown_remoteDomainName;
    public String remoteDomainName() {
        if (!unknown_remoteDomainName) return value_remoteDomainName;
        throw new UndeferrableValueException("Value 'Trust.remoteDomainName' is not present");
    }

    /**
     * Whether to enable selective authentication.
     * Valid values are `Enabled` and `Disabled`.
     * Default value is `Disabled`.
     * 
     */
    @PolicyResourceProperty(name="selectiveAuth", flag="unknown_selectiveAuth")
    private String value_selectiveAuth;
    private boolean unknown_selectiveAuth;
    public String selectiveAuth() {
        if (!unknown_selectiveAuth) return value_selectiveAuth;
        throw new UndeferrableValueException("Value 'Trust.selectiveAuth' is not present");
    }

    /**
     * Date and time when the Trust state in `trust_state` was last updated.
     * 
     */
    @PolicyResourceProperty(name="stateLastUpdatedDateTime", flag="unknown_stateLastUpdatedDateTime")
    private String value_stateLastUpdatedDateTime;
    private boolean unknown_stateLastUpdatedDateTime;
    public String stateLastUpdatedDateTime() {
        if (!unknown_stateLastUpdatedDateTime) return value_stateLastUpdatedDateTime;
        throw new UndeferrableValueException("Value 'Trust.stateLastUpdatedDateTime' is not present");
    }

    /**
     * The direction of the Trust relationship.
     * Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
     * 
     */
    @PolicyResourceProperty(name="trustDirection", flag="unknown_trustDirection")
    private String value_trustDirection;
    private boolean unknown_trustDirection;
    public String trustDirection() {
        if (!unknown_trustDirection) return value_trustDirection;
        throw new UndeferrableValueException("Value 'Trust.trustDirection' is not present");
    }

    /**
     * Password for the Trust.
     * Does not need to match the passwords for either Directory.
     * Can contain upper- and lower-case letters, numbers, and punctuation characters.
     * May be up to 128 characters long.
     * 
     */
    @PolicyResourceProperty(name="trustPassword", flag="unknown_trustPassword")
    private String value_trustPassword;
    private boolean unknown_trustPassword;
    public String trustPassword() {
        if (!unknown_trustPassword) return value_trustPassword;
        throw new UndeferrableValueException("Value 'Trust.trustPassword' is not present");
    }

    /**
     * State of the Trust relationship.
     * One of `Created`, `VerifyFailed`,`Verified`, `UpdateFailed`,`Updated`,`Deleted`, or `Failed`.
     * 
     */
    @PolicyResourceProperty(name="trustState", flag="unknown_trustState")
    private String value_trustState;
    private boolean unknown_trustState;
    public String trustState() {
        if (!unknown_trustState) return value_trustState;
        throw new UndeferrableValueException("Value 'Trust.trustState' is not present");
    }

    /**
     * Reason for the Trust state set in `trust_state`.
     * 
     */
    @PolicyResourceProperty(name="trustStateReason", flag="unknown_trustStateReason")
    private String value_trustStateReason;
    private boolean unknown_trustStateReason;
    public String trustStateReason() {
        if (!unknown_trustStateReason) return value_trustStateReason;
        throw new UndeferrableValueException("Value 'Trust.trustStateReason' is not present");
    }

    /**
     * Type of the Trust relationship.
     * Valid values are `Forest` and `External`.
     * Default value is `Forest`.
     * 
     */
    @PolicyResourceProperty(name="trustType", flag="unknown_trustType")
    private String value_trustType;
    private boolean unknown_trustType;
    public String trustType() {
        if (!unknown_trustType) return value_trustType;
        throw new UndeferrableValueException("Value 'Trust.trustType' is not present");
    }

}
