// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.lakeformation;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.lakeformation.inputs.PermissionsDataCellsFilterArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.PermissionsDataLocationArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.PermissionsDatabaseArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.PermissionsLfTagArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.PermissionsLfTagPolicyArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.PermissionsTableArgs;
import com.pulumi.policypacks.aws.lakeformation.inputs.PermissionsTableWithColumnsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:lakeformation/permissions:Permissions")
public final class PermissionsArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
     * 
     */
    @PolicyResourceProperty(name="catalogId", flag="unknown_catalogId")
    private String value_catalogId;
    private boolean unknown_catalogId;
    public String catalogId() {
        if (!unknown_catalogId) return value_catalogId;
        throw new UndeferrableValueException("Value 'PermissionsArgs.catalogId' is not present");
    }

    /**
     * Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
     * 
     */
    @PolicyResourceProperty(name="catalogResource", flag="unknown_catalogResource")
    private Boolean value_catalogResource;
    private boolean unknown_catalogResource;
    public Boolean catalogResource() {
        if (!unknown_catalogResource) return value_catalogResource;
        throw new UndeferrableValueException("Value 'PermissionsArgs.catalogResource' is not present");
    }

    /**
     * Configuration block for a data cells filter resource. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="dataCellsFilter", flag="unknown_dataCellsFilter")
    private PermissionsDataCellsFilterArgs value_dataCellsFilter;
    private boolean unknown_dataCellsFilter;
    public PermissionsDataCellsFilterArgs dataCellsFilter() {
        if (!unknown_dataCellsFilter) return value_dataCellsFilter;
        throw new UndeferrableValueException("Value 'PermissionsArgs.dataCellsFilter' is not present");
    }

    /**
     * Configuration block for a data location resource. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="dataLocation", flag="unknown_dataLocation")
    private PermissionsDataLocationArgs value_dataLocation;
    private boolean unknown_dataLocation;
    public PermissionsDataLocationArgs dataLocation() {
        if (!unknown_dataLocation) return value_dataLocation;
        throw new UndeferrableValueException("Value 'PermissionsArgs.dataLocation' is not present");
    }

    /**
     * Configuration block for a database resource. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="database", flag="unknown_database")
    private PermissionsDatabaseArgs value_database;
    private boolean unknown_database;
    public PermissionsDatabaseArgs database() {
        if (!unknown_database) return value_database;
        throw new UndeferrableValueException("Value 'PermissionsArgs.database' is not present");
    }

    /**
     * Configuration block for an LF-tag resource. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="lfTag", flag="unknown_lfTag")
    private PermissionsLfTagArgs value_lfTag;
    private boolean unknown_lfTag;
    public PermissionsLfTagArgs lfTag() {
        if (!unknown_lfTag) return value_lfTag;
        throw new UndeferrableValueException("Value 'PermissionsArgs.lfTag' is not present");
    }

    /**
     * Configuration block for an LF-tag policy resource. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="lfTagPolicy", flag="unknown_lfTagPolicy")
    private PermissionsLfTagPolicyArgs value_lfTagPolicy;
    private boolean unknown_lfTagPolicy;
    public PermissionsLfTagPolicyArgs lfTagPolicy() {
        if (!unknown_lfTagPolicy) return value_lfTagPolicy;
        throw new UndeferrableValueException("Value 'PermissionsArgs.lfTagPolicy' is not present");
    }

    /**
     * List of permissions granted to the principal. Valid values may include `ALL`, `ALTER`, `ASSOCIATE`, `CREATE_DATABASE`, `CREATE_TABLE`, `DATA_LOCATION_ACCESS`, `DELETE`, `DESCRIBE`, `DROP`, `INSERT`, and `SELECT`. For details on each permission, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
     * 
     */
    @PolicyResourceProperty(name="permissions", flag="unknown_permissions")
    private List<String> value_permissions;
    private boolean unknown_permissions;
    public List<String> permissions() {
        if (!unknown_permissions) return value_permissions;
        throw new UndeferrableValueException("Value 'PermissionsArgs.permissions' is not present");
    }

    /**
     * Subset of `permissions` which the principal can pass.
     * 
     */
    @PolicyResourceProperty(name="permissionsWithGrantOptions", flag="unknown_permissionsWithGrantOptions")
    private List<String> value_permissionsWithGrantOptions;
    private boolean unknown_permissionsWithGrantOptions;
    public List<String> permissionsWithGrantOptions() {
        if (!unknown_permissionsWithGrantOptions) return value_permissionsWithGrantOptions;
        throw new UndeferrableValueException("Value 'PermissionsArgs.permissionsWithGrantOptions' is not present");
    }

    /**
     * Principal to be granted the permissions on the resource. Supported principals include `IAM_ALLOWED_PRINCIPALS` (see Default Behavior and `IAMAllowedPrincipals` above), IAM roles, users, groups, Federated Users, SAML groups and users, QuickSight groups, OUs, and organizations as well as AWS account IDs for cross-account permissions. For more information, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
     * 
     * &gt; **NOTE:** We highly recommend that the `principal` _NOT_ be a Lake Formation administrator (granted using `aws.lakeformation.DataLakeSettings`). The entity (e.g., IAM role) running the deployment will most likely need to be a Lake Formation administrator. As such, the entity will have implicit permissions and does not need permissions granted through this resource.
     * 
     * One of the following is required:
     * 
     */
    @PolicyResourceProperty(name="principal", flag="unknown_principal")
    private String value_principal;
    private boolean unknown_principal;
    public String principal() {
        if (!unknown_principal) return value_principal;
        throw new UndeferrableValueException("Value 'PermissionsArgs.principal' is not present");
    }

    /**
     * Configuration block for a table resource. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="table", flag="unknown_table")
    private PermissionsTableArgs value_table;
    private boolean unknown_table;
    public PermissionsTableArgs table() {
        if (!unknown_table) return value_table;
        throw new UndeferrableValueException("Value 'PermissionsArgs.table' is not present");
    }

    /**
     * Configuration block for a table with columns resource. Detailed below.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="tableWithColumns", flag="unknown_tableWithColumns")
    private PermissionsTableWithColumnsArgs value_tableWithColumns;
    private boolean unknown_tableWithColumns;
    public PermissionsTableWithColumnsArgs tableWithColumns() {
        if (!unknown_tableWithColumns) return value_tableWithColumns;
        throw new UndeferrableValueException("Value 'PermissionsArgs.tableWithColumns' is not present");
    }

}
