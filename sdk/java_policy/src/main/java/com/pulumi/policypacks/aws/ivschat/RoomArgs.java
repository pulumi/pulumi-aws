// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ivschat;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ivschat.inputs.RoomMessageReviewHandlerArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ivschat/room:Room")
public final class RoomArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * List of Logging Configuration
     * ARNs to attach to the room.
     * 
     */
    private UndeferrableValue<List<String>> loggingConfigurationIdentifiers;

    public List<String> loggingConfigurationIdentifiers() {
        if (loggingConfigurationIdentifiers == null) return null;
        return loggingConfigurationIdentifiers.getValue("RoomArgs.loggingConfigurationIdentifiers");
    }

    /**
     * Maximum number of characters in a single
     * message. Messages are expected to be UTF-8 encoded and this limit applies
     * specifically to rune/code-point count, not number of bytes.
     * 
     */
    private UndeferrableValue<Integer> maximumMessageLength;

    public Integer maximumMessageLength() {
        if (maximumMessageLength == null) return null;
        return maximumMessageLength.getValue("RoomArgs.maximumMessageLength");
    }

    /**
     * Maximum number of messages per
     * second that can be sent to the room (by all clients).
     * 
     */
    private UndeferrableValue<Integer> maximumMessageRatePerSecond;

    public Integer maximumMessageRatePerSecond() {
        if (maximumMessageRatePerSecond == null) return null;
        return maximumMessageRatePerSecond.getValue("RoomArgs.maximumMessageRatePerSecond");
    }

    /**
     * Configuration information for optional
     * review of messages.
     * 
     */
    private UndeferrableValue<RoomMessageReviewHandlerArgs> messageReviewHandler;

    public RoomMessageReviewHandlerArgs messageReviewHandler() {
        if (messageReviewHandler == null) return null;
        return messageReviewHandler.getValue("RoomArgs.messageReviewHandler");
    }

    /**
     * Room name.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("RoomArgs.name");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("RoomArgs.tags");
    }

}
