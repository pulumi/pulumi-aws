// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.route53;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.route53.outputs.ResolverRuleTargetIp;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:route53/resolverRule:ResolverRule")
public final class ResolverRule extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN (Amazon Resource Name) for the resolver rule.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ResolverRule.arn' is not present");
    }

    /**
     * DNS queries for this domain name are forwarded to the IP addresses that are specified using `target_ip`.
     * 
     */
    @PolicyResourceProperty(name="domainName", flag="unknown_domainName")
    private String value_domainName;
    private boolean unknown_domainName;
    public String domainName() {
        if (!unknown_domainName) return value_domainName;
        throw new UndeferrableValueException("Value 'ResolverRule.domainName' is not present");
    }

    /**
     * Friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'ResolverRule.name' is not present");
    }

    /**
     * When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.
     * 
     */
    @PolicyResourceProperty(name="ownerId", flag="unknown_ownerId")
    private String value_ownerId;
    private boolean unknown_ownerId;
    public String ownerId() {
        if (!unknown_ownerId) return value_ownerId;
        throw new UndeferrableValueException("Value 'ResolverRule.ownerId' is not present");
    }

    /**
     * ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using `target_ip`.
     * This argument should only be specified for `FORWARD` type rules.
     * 
     */
    @PolicyResourceProperty(name="resolverEndpointId", flag="unknown_resolverEndpointId")
    private @Nullable String value_resolverEndpointId;
    private boolean unknown_resolverEndpointId;
    public @Nullable String resolverEndpointId() {
        if (!unknown_resolverEndpointId) return value_resolverEndpointId;
        throw new UndeferrableValueException("Value 'ResolverRule.resolverEndpointId' is not present");
    }

    /**
     * Rule type. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
     * 
     */
    @PolicyResourceProperty(name="ruleType", flag="unknown_ruleType")
    private String value_ruleType;
    private boolean unknown_ruleType;
    public String ruleType() {
        if (!unknown_ruleType) return value_ruleType;
        throw new UndeferrableValueException("Value 'ResolverRule.ruleType' is not present");
    }

    /**
     * Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
     * Values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
     * 
     */
    @PolicyResourceProperty(name="shareStatus", flag="unknown_shareStatus")
    private String value_shareStatus;
    private boolean unknown_shareStatus;
    public String shareStatus() {
        if (!unknown_shareStatus) return value_shareStatus;
        throw new UndeferrableValueException("Value 'ResolverRule.shareStatus' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ResolverRule.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ResolverRule.tagsAll' is not present");
    }

    /**
     * Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
     * This argument should only be specified for `FORWARD` type rules.
     * 
     */
    @PolicyResourceProperty(name="targetIps", flag="unknown_targetIps")
    private @Nullable List<ResolverRuleTargetIp> value_targetIps;
    private boolean unknown_targetIps;
    public @Nullable List<ResolverRuleTargetIp> targetIps() {
        if (!unknown_targetIps) return value_targetIps;
        throw new UndeferrableValueException("Value 'ResolverRule.targetIps' is not present");
    }

}
