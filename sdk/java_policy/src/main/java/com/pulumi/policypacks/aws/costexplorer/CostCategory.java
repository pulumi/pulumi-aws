// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.costexplorer;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.costexplorer.outputs.CostCategoryRule;
import com.pulumi.policypacks.aws.costexplorer.outputs.CostCategorySplitChargeRule;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:costexplorer/costCategory:CostCategory")
public final class CostCategory extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the cost category.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'CostCategory.arn' is not present");
    }

    /**
     * Default value for the cost category.
     * 
     */
    @PolicyResourceProperty(name="defaultValue", flag="unknown_defaultValue")
    private @Nullable String value_defaultValue;
    private boolean unknown_defaultValue;
    public @Nullable String defaultValue() {
        if (!unknown_defaultValue) return value_defaultValue;
        throw new UndeferrableValueException("Value 'CostCategory.defaultValue' is not present");
    }

    /**
     * Effective end data of your Cost Category.
     * 
     */
    @PolicyResourceProperty(name="effectiveEnd", flag="unknown_effectiveEnd")
    private String value_effectiveEnd;
    private boolean unknown_effectiveEnd;
    public String effectiveEnd() {
        if (!unknown_effectiveEnd) return value_effectiveEnd;
        throw new UndeferrableValueException("Value 'CostCategory.effectiveEnd' is not present");
    }

    /**
     * The Cost Category&#39;s effective start date. It can only be a billing start date (first day of the month). If the date isn&#39;t provided, it&#39;s the first day of the current month. Dates can&#39;t be before the previous twelve months, or in the future. For example `2022-11-01T00:00:00Z`.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="effectiveStart", flag="unknown_effectiveStart")
    private String value_effectiveStart;
    private boolean unknown_effectiveStart;
    public String effectiveStart() {
        if (!unknown_effectiveStart) return value_effectiveStart;
        throw new UndeferrableValueException("Value 'CostCategory.effectiveStart' is not present");
    }

    /**
     * Unique name for the Cost Category.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'CostCategory.name' is not present");
    }

    /**
     * Rule schema version in this particular Cost Category.
     * 
     */
    @PolicyResourceProperty(name="ruleVersion", flag="unknown_ruleVersion")
    private String value_ruleVersion;
    private boolean unknown_ruleVersion;
    public String ruleVersion() {
        if (!unknown_ruleVersion) return value_ruleVersion;
        throw new UndeferrableValueException("Value 'CostCategory.ruleVersion' is not present");
    }

    /**
     * Configuration block for the Cost Category rules used to categorize costs. See below.
     * 
     */
    @PolicyResourceProperty(name="rules", flag="unknown_rules")
    private List<CostCategoryRule> value_rules;
    private boolean unknown_rules;
    public List<CostCategoryRule> rules() {
        if (!unknown_rules) return value_rules;
        throw new UndeferrableValueException("Value 'CostCategory.rules' is not present");
    }

    /**
     * Configuration block for the split charge rules used to allocate your charges between your Cost Category values. See below.
     * 
     */
    @PolicyResourceProperty(name="splitChargeRules", flag="unknown_splitChargeRules")
    private @Nullable List<CostCategorySplitChargeRule> value_splitChargeRules;
    private boolean unknown_splitChargeRules;
    public @Nullable List<CostCategorySplitChargeRule> splitChargeRules() {
        if (!unknown_splitChargeRules) return value_splitChargeRules;
        throw new UndeferrableValueException("Value 'CostCategory.splitChargeRules' is not present");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'CostCategory.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'CostCategory.tagsAll' is not present");
    }

}
