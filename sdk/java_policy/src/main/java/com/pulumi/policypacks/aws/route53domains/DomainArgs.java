// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.route53domains;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.route53domains.inputs.DomainAdminContactArgs;
import com.pulumi.policypacks.aws.route53domains.inputs.DomainBillingContactArgs;
import com.pulumi.policypacks.aws.route53domains.inputs.DomainNameServerArgs;
import com.pulumi.policypacks.aws.route53domains.inputs.DomainRegistrantContactArgs;
import com.pulumi.policypacks.aws.route53domains.inputs.DomainTechContactArgs;
import com.pulumi.policypacks.aws.route53domains.inputs.DomainTimeoutsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:route53domains/domain:Domain")
public final class DomainArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Details about the domain administrative contact. See Contact Blocks for more details.
     * 
     */
    private UndeferrableValue<DomainAdminContactArgs> adminContact;

    public DomainAdminContactArgs adminContact() {
        if (adminContact == null) return null;
        return adminContact.getValue("DomainArgs.adminContact");
    }

    /**
     * Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
     * 
     */
    private UndeferrableValue<Boolean> adminPrivacy;

    public Boolean adminPrivacy() {
        if (adminPrivacy == null) return null;
        return adminPrivacy.getValue("DomainArgs.adminPrivacy");
    }

    /**
     * Whether the domain registration is set to renew automatically. Default: `true`.
     * 
     */
    private UndeferrableValue<Boolean> autoRenew;

    public Boolean autoRenew() {
        if (autoRenew == null) return null;
        return autoRenew.getValue("DomainArgs.autoRenew");
    }

    /**
     * Details about the domain billing contact. See Contact Blocks for more details.
     * 
     */
    private UndeferrableValue<List<DomainBillingContactArgs>> billingContacts;

    public List<DomainBillingContactArgs> billingContacts() {
        if (billingContacts == null) return null;
        return billingContacts.getValue("DomainArgs.billingContacts");
    }

    /**
     * Whether domain billing contact information is concealed from WHOIS queries. Default: `true`.
     * 
     */
    private UndeferrableValue<Boolean> billingPrivacy;

    public Boolean billingPrivacy() {
        if (billingPrivacy == null) return null;
        return billingPrivacy.getValue("DomainArgs.billingPrivacy");
    }

    /**
     * The name of the domain.
     * 
     */
    private UndeferrableValue<String> domainName;

    public String domainName() {
        if (domainName == null) return null;
        return domainName.getValue("DomainArgs.domainName");
    }

    /**
     * The number of years that you want to register the domain for. Domains are registered for a minimum of one year. Increasing the duration renews the domain.
     * 
     */
    private UndeferrableValue<Integer> durationInYears;

    public Integer durationInYears() {
        if (durationInYears == null) return null;
        return durationInYears.getValue("DomainArgs.durationInYears");
    }

    /**
     * The list of nameservers for the domain. See `name_server` Blocks for more details.
     * 
     */
    private UndeferrableValue<List<DomainNameServerArgs>> nameServers;

    public List<DomainNameServerArgs> nameServers() {
        if (nameServers == null) return null;
        return nameServers.getValue("DomainArgs.nameServers");
    }

    /**
     * Details about the domain registrant. See Contact Blocks for more details.
     * 
     */
    private UndeferrableValue<DomainRegistrantContactArgs> registrantContact;

    public DomainRegistrantContactArgs registrantContact() {
        if (registrantContact == null) return null;
        return registrantContact.getValue("DomainArgs.registrantContact");
    }

    /**
     * Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
     * 
     */
    private UndeferrableValue<Boolean> registrantPrivacy;

    public Boolean registrantPrivacy() {
        if (registrantPrivacy == null) return null;
        return registrantPrivacy.getValue("DomainArgs.registrantPrivacy");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DomainArgs.tags");
    }

    /**
     * Details about the domain technical contact. See Contact Blocks for more details.
     * 
     */
    private UndeferrableValue<DomainTechContactArgs> techContact;

    public DomainTechContactArgs techContact() {
        if (techContact == null) return null;
        return techContact.getValue("DomainArgs.techContact");
    }

    /**
     * Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
     * 
     */
    private UndeferrableValue<Boolean> techPrivacy;

    public Boolean techPrivacy() {
        if (techPrivacy == null) return null;
        return techPrivacy.getValue("DomainArgs.techPrivacy");
    }

    private UndeferrableValue<DomainTimeoutsArgs> timeouts;

    public DomainTimeoutsArgs timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("DomainArgs.timeouts");
    }

    /**
     * Whether the domain is locked for transfer. Default: `true`.
     * 
     */
    private UndeferrableValue<Boolean> transferLock;

    public Boolean transferLock() {
        if (transferLock == null) return null;
        return transferLock.getValue("DomainArgs.transferLock");
    }

}
