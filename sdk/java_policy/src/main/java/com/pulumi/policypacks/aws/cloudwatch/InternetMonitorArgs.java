// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudwatch.inputs.InternetMonitorHealthEventsConfigArgs;
import com.pulumi.policypacks.aws.cloudwatch.inputs.InternetMonitorInternetMeasurementsLogDeliveryArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudwatch/internetMonitor:InternetMonitor")
public final class InternetMonitorArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there&#39;s an internet issue that affects your application end users. See Health Events Config below.
     * 
     */
    @PolicyResourceProperty(name="healthEventsConfig", flag="unknown_healthEventsConfig")
    private InternetMonitorHealthEventsConfigArgs value_healthEventsConfig;
    private boolean unknown_healthEventsConfig;
    public InternetMonitorHealthEventsConfigArgs healthEventsConfig() {
        if (!unknown_healthEventsConfig) return value_healthEventsConfig;
        throw new UndeferrableValueException("Value 'InternetMonitorArgs.healthEventsConfig' is not present");
    }

    /**
     * Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
     * 
     */
    @PolicyResourceProperty(name="internetMeasurementsLogDelivery", flag="unknown_internetMeasurementsLogDelivery")
    private InternetMonitorInternetMeasurementsLogDeliveryArgs value_internetMeasurementsLogDelivery;
    private boolean unknown_internetMeasurementsLogDelivery;
    public InternetMonitorInternetMeasurementsLogDeliveryArgs internetMeasurementsLogDelivery() {
        if (!unknown_internetMeasurementsLogDelivery) return value_internetMeasurementsLogDelivery;
        throw new UndeferrableValueException("Value 'InternetMonitorArgs.internetMeasurementsLogDelivery' is not present");
    }

    /**
     * The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
     * 
     */
    @PolicyResourceProperty(name="maxCityNetworksToMonitor", flag="unknown_maxCityNetworksToMonitor")
    private Integer value_maxCityNetworksToMonitor;
    private boolean unknown_maxCityNetworksToMonitor;
    public Integer maxCityNetworksToMonitor() {
        if (!unknown_maxCityNetworksToMonitor) return value_maxCityNetworksToMonitor;
        throw new UndeferrableValueException("Value 'InternetMonitorArgs.maxCityNetworksToMonitor' is not present");
    }

    /**
     * The name of the monitor.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="monitorName", flag="unknown_monitorName")
    private String value_monitorName;
    private boolean unknown_monitorName;
    public String monitorName() {
        if (!unknown_monitorName) return value_monitorName;
        throw new UndeferrableValueException("Value 'InternetMonitorArgs.monitorName' is not present");
    }

    /**
     * The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
     * 
     */
    @PolicyResourceProperty(name="resources", flag="unknown_resources")
    private List<String> value_resources;
    private boolean unknown_resources;
    public List<String> resources() {
        if (!unknown_resources) return value_resources;
        throw new UndeferrableValueException("Value 'InternetMonitorArgs.resources' is not present");
    }

    /**
     * The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'InternetMonitorArgs.status' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'InternetMonitorArgs.tags' is not present");
    }

    /**
     * The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
     * 
     */
    @PolicyResourceProperty(name="trafficPercentageToMonitor", flag="unknown_trafficPercentageToMonitor")
    private Integer value_trafficPercentageToMonitor;
    private boolean unknown_trafficPercentageToMonitor;
    public Integer trafficPercentageToMonitor() {
        if (!unknown_trafficPercentageToMonitor) return value_trafficPercentageToMonitor;
        throw new UndeferrableValueException("Value 'InternetMonitorArgs.trafficPercentageToMonitor' is not present");
    }

}
