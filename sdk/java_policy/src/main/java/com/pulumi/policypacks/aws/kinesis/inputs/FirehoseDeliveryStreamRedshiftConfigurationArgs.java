// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesis.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationArgs;
import com.pulumi.policypacks.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationSecretsManagerConfigurationArgs;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamRedshiftConfigurationArgs {

    /**
     * The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;

    public FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs cloudwatchLoggingOptions() {
        if (cloudwatchLoggingOptions == null) return null;
        return cloudwatchLoggingOptions.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.cloudwatchLoggingOptions");
    }

    /**
     * The jdbcurl of the redshift cluster.
     * 
     */
    private UndeferrableValue<String> clusterJdbcurl;

    public String clusterJdbcurl() {
        if (clusterJdbcurl == null) return null;
        return clusterJdbcurl.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.clusterJdbcurl");
    }

    /**
     * Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
     * 
     */
    private UndeferrableValue<String> copyOptions;

    public String copyOptions() {
        if (copyOptions == null) return null;
        return copyOptions.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.copyOptions");
    }

    /**
     * The data table columns that will be targeted by the copy command.
     * 
     */
    private UndeferrableValue<String> dataTableColumns;

    public String dataTableColumns() {
        if (dataTableColumns == null) return null;
        return dataTableColumns.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.dataTableColumns");
    }

    /**
     * The name of the table in the redshift cluster that the s3 bucket will copy to.
     * 
     */
    private UndeferrableValue<String> dataTableName;

    public String dataTableName() {
        if (dataTableName == null) return null;
        return dataTableName.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.dataTableName");
    }

    /**
     * The password for the username above. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    private UndeferrableValue<String> password;

    public String password() {
        if (password == null) return null;
        return password.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.password");
    }

    /**
     * The data processing configuration.  See `processing_configuration` block below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs> processingConfiguration;

    public FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs processingConfiguration() {
        if (processingConfiguration == null) return null;
        return processingConfiguration.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.processingConfiguration");
    }

    /**
     * The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
     * 
     */
    private UndeferrableValue<Integer> retryDuration;

    public Integer retryDuration() {
        if (retryDuration == null) return null;
        return retryDuration.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.retryDuration");
    }

    /**
     * The arn of the role the stream assumes.
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.roleArn");
    }

    /**
     * The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
     * `secrets_manager_configuration` - (Optional) The Secrets Manager configuration. See `secrets_manager_configuration` block below for details. This value is required if `username` and `password` are not provided.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs> s3BackupConfiguration;

    public FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs s3BackupConfiguration() {
        if (s3BackupConfiguration == null) return null;
        return s3BackupConfiguration.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.s3BackupConfiguration");
    }

    /**
     * The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
     * 
     */
    private UndeferrableValue<String> s3BackupMode;

    public String s3BackupMode() {
        if (s3BackupMode == null) return null;
        return s3BackupMode.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.s3BackupMode");
    }

    /**
     * The S3 Configuration. See s3_configuration below for details.
     * 
     */
    private UndeferrableValue<FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationArgs> s3Configuration;

    public FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationArgs s3Configuration() {
        if (s3Configuration == null) return null;
        return s3Configuration.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.s3Configuration");
    }

    private UndeferrableValue<FirehoseDeliveryStreamRedshiftConfigurationSecretsManagerConfigurationArgs> secretsManagerConfiguration;

    public FirehoseDeliveryStreamRedshiftConfigurationSecretsManagerConfigurationArgs secretsManagerConfiguration() {
        if (secretsManagerConfiguration == null) return null;
        return secretsManagerConfiguration.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.secretsManagerConfiguration");
    }

    /**
     * The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions. This value is required if `secrets_manager_configuration` is not provided.
     * 
     */
    private UndeferrableValue<String> username;

    public String username() {
        if (username == null) return null;
        return username.getValue("FirehoseDeliveryStreamRedshiftConfigurationArgs.username");
    }

}
