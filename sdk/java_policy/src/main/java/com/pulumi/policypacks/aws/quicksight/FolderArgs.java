// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.quicksight;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.quicksight.inputs.FolderPermissionArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:quicksight/folder:Folder")
public final class FolderArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * AWS account ID.
     * 
     */
    private UndeferrableValue<String> awsAccountId;

    public String awsAccountId() {
        if (awsAccountId == null) return null;
        return awsAccountId.getValue("FolderArgs.awsAccountId");
    }

    /**
     * Identifier for the folder.
     * 
     */
    private UndeferrableValue<String> folderId;

    public String folderId() {
        if (folderId == null) return null;
        return folderId.getValue("FolderArgs.folderId");
    }

    /**
     * The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
     * 
     */
    private UndeferrableValue<String> folderType;

    public String folderType() {
        if (folderType == null) return null;
        return folderType.getValue("FolderArgs.folderType");
    }

    /**
     * Display name for the folder.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("FolderArgs.name");
    }

    /**
     * The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
     * 
     */
    private UndeferrableValue<String> parentFolderArn;

    public String parentFolderArn() {
        if (parentFolderArn == null) return null;
        return parentFolderArn.getValue("FolderArgs.parentFolderArn");
    }

    /**
     * A set of resource permissions on the folder. Maximum of 64 items. See permissions.
     * 
     */
    private UndeferrableValue<List<FolderPermissionArgs>> permissions;

    public List<FolderPermissionArgs> permissions() {
        if (permissions == null) return null;
        return permissions.getValue("FolderArgs.permissions");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("FolderArgs.tags");
    }

}
