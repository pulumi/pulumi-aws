// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codecommit.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class TriggerTrigger {

    /**
     * The branches that will be included in the trigger configuration. If no branches   are specified, the trigger will apply to all branches.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> branches;

    public @Nullable List<String> branches() {
        if (branches == null) return null;
        return branches.getValue("TriggerTrigger.branches");
    }

    /**
     * Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.
     * 
     */
    private @Nullable UndeferrableValue<String> customData;

    public @Nullable String customData() {
        if (customData == null) return null;
        return customData.getValue("TriggerTrigger.customData");
    }

    /**
     * The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).
     * 
     */
    private UndeferrableValue<String> destinationArn;

    public String destinationArn() {
        if (destinationArn == null) return null;
        return destinationArn.getValue("TriggerTrigger.destinationArn");
    }

    /**
     * The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS). If no events are specified, the trigger will run for all repository events. Event types include: `all`, `updateReference`, `createReference`, `deleteReference`.
     * 
     */
    private UndeferrableValue<List<String>> events;

    public List<String> events() {
        if (events == null) return null;
        return events.getValue("TriggerTrigger.events");
    }

    /**
     * The name of the trigger.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("TriggerTrigger.name");
    }

}
