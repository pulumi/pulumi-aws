// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.VpnConnectionRoute;
import com.pulumi.policypacks.aws.ec2.VpnConnectionTunnel1LogOptions;
import com.pulumi.policypacks.aws.ec2.VpnConnectionTunnel2LogOptions;
import com.pulumi.policypacks.aws.ec2.VpnConnectionVgwTelemetry;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;


@PolicyResourceType(type="aws:ec2/vpnConnection:VpnConnection")
public final class VpnConnection extends com.pulumi.resources.PolicyResource {

    /**
     * Amazon Resource Name (ARN) of the VPN Connection.
     * 
     */
    public String arn;



    /**
     * The ARN of the core network.
     * 
     */
    public String coreNetworkArn;



    /**
     * The ARN of the core network attachment.
     * 
     */
    public String coreNetworkAttachmentArn;



    /**
     * The configuration information for the VPN connection&#39;s customer gateway (in the native XML format).
     * 
     */
    public String customerGatewayConfiguration;



    /**
     * The ID of the customer gateway.
     * 
     */
    public String customerGatewayId;



    /**
     * Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
     * 
     */
    public Boolean enableAcceleration;



    /**
     * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    public String localIpv4NetworkCidr;



    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    public String localIpv6NetworkCidr;



    /**
     * Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are `PublicIpv4 | PrivateIpv4`
     * 
     */
    public String outsideIpAddressType;



    /**
     * The IPv4 CIDR on the AWS side of the VPN connection.
     * 
     */
    public String remoteIpv4NetworkCidr;



    /**
     * The IPv6 CIDR on the AWS side of the VPN connection.
     * 
     */
    public String remoteIpv6NetworkCidr;



    /**
     * The static routes associated with the VPN connection. Detailed below.
     * 
     */
    public List<VpnConnectionRoute> routes;



    /**
     * Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don&#39;t support BGP.
     * 
     */
    public Boolean staticRoutesOnly;



    /**
     * Tags to apply to the connection. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Map<String,String> tags;



    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Map<String,String> tagsAll;



    /**
     * When associated with an EC2 Transit Gateway (`transit_gateway_id` argument), the attachment ID. See also the `aws.ec2.Tag` resource for tagging the EC2 Transit Gateway VPN Attachment.
     * 
     */
    public String transitGatewayAttachmentId;



    /**
     * The ID of the EC2 Transit Gateway.
     * 
     */
    public String transitGatewayId;



    /**
     * . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
     * 
     */
    public String transportTransitGatewayAttachmentId;



    /**
     * The public IP address of the first VPN tunnel.
     * 
     */
    public String tunnel1Address;



    /**
     * The bgp asn number of the first VPN tunnel.
     * 
     */
    public String tunnel1BgpAsn;



    /**
     * The bgp holdtime of the first VPN tunnel.
     * 
     */
    public Integer tunnel1BgpHoldtime;



    /**
     * The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
     * 
     */
    public String tunnel1CgwInsideAddress;



    /**
     * The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    public String tunnel1DpdTimeoutAction;



    /**
     * The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    public Integer tunnel1DpdTimeoutSeconds;



    /**
     * Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are `true | false`.
     * 
     */
    public Boolean tunnel1EnableTunnelLifecycleControl;



    /**
     * The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    public List<String> tunnel1IkeVersions;



    /**
     * The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    public String tunnel1InsideCidr;



    /**
     * The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    public String tunnel1InsideIpv6Cidr;



    /**
     * Options for logging VPN tunnel activity. See Log Options below for more details.
     * 
     */
    public VpnConnectionTunnel1LogOptions tunnel1LogOptions;



    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    public List<Integer> tunnel1Phase1DhGroupNumbers;



    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    public List<String> tunnel1Phase1EncryptionAlgorithms;



    /**
     * One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    public List<String> tunnel1Phase1IntegrityAlgorithms;



    /**
     * The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    public Integer tunnel1Phase1LifetimeSeconds;



    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    public List<Integer> tunnel1Phase2DhGroupNumbers;



    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    public List<String> tunnel1Phase2EncryptionAlgorithms;



    /**
     * List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    public List<String> tunnel1Phase2IntegrityAlgorithms;



    /**
     * The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    public Integer tunnel1Phase2LifetimeSeconds;



    /**
     * The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    public String tunnel1PresharedKey;



    /**
     * The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    public Integer tunnel1RekeyFuzzPercentage;



    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel1_phase2_lifetime_seconds`.
     * 
     */
    public Integer tunnel1RekeyMarginTimeSeconds;



    /**
     * The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    public Integer tunnel1ReplayWindowSize;



    /**
     * The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    public String tunnel1StartupAction;



    /**
     * The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
     * 
     */
    public String tunnel1VgwInsideAddress;



    /**
     * The public IP address of the second VPN tunnel.
     * 
     */
    public String tunnel2Address;



    /**
     * The bgp asn number of the second VPN tunnel.
     * 
     */
    public String tunnel2BgpAsn;



    /**
     * The bgp holdtime of the second VPN tunnel.
     * 
     */
    public Integer tunnel2BgpHoldtime;



    /**
     * The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
     * 
     */
    public String tunnel2CgwInsideAddress;



    /**
     * The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    public String tunnel2DpdTimeoutAction;



    /**
     * The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    public Integer tunnel2DpdTimeoutSeconds;



    /**
     * Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are `true | false`.
     * 
     */
    public Boolean tunnel2EnableTunnelLifecycleControl;



    /**
     * The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    public List<String> tunnel2IkeVersions;



    /**
     * The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    public String tunnel2InsideCidr;



    /**
     * The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    public String tunnel2InsideIpv6Cidr;



    /**
     * Options for logging VPN tunnel activity. See Log Options below for more details.
     * 
     */
    public VpnConnectionTunnel2LogOptions tunnel2LogOptions;



    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    public List<Integer> tunnel2Phase1DhGroupNumbers;



    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    public List<String> tunnel2Phase1EncryptionAlgorithms;



    /**
     * One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    public List<String> tunnel2Phase1IntegrityAlgorithms;



    /**
     * The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    public Integer tunnel2Phase1LifetimeSeconds;



    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    public List<Integer> tunnel2Phase2DhGroupNumbers;



    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    public List<String> tunnel2Phase2EncryptionAlgorithms;



    /**
     * List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    public List<String> tunnel2Phase2IntegrityAlgorithms;



    /**
     * The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    public Integer tunnel2Phase2LifetimeSeconds;



    /**
     * The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    public String tunnel2PresharedKey;



    /**
     * The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    public Integer tunnel2RekeyFuzzPercentage;



    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel2_phase2_lifetime_seconds`.
     * 
     */
    public Integer tunnel2RekeyMarginTimeSeconds;



    /**
     * The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    public Integer tunnel2ReplayWindowSize;



    /**
     * The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    public String tunnel2StartupAction;



    /**
     * The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
     * 
     */
    public String tunnel2VgwInsideAddress;



    /**
     * Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
     * 
     */
    public String tunnelInsideIpVersion;



    /**
     * The type of VPN connection. The only type AWS supports at this time is &#34;ipsec.1&#34;.
     * 
     */
    public String type;



    /**
     * Telemetry for the VPN tunnels. Detailed below.
     * 
     */
    public List<VpnConnectionVgwTelemetry> vgwTelemetries;



    /**
     * The ID of the Virtual Private Gateway.
     * 
     */
    public String vpnGatewayId;



}
