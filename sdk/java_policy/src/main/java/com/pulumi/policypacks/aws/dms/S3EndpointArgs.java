// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dms;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:dms/s3Endpoint:S3Endpoint")
public final class S3EndpointArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Whether to add column name information to the .csv output file. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="addColumnName", flag="unknown_addColumnName")
    private Boolean value_addColumnName;
    private boolean unknown_addColumnName;
    public Boolean addColumnName() {
        if (!unknown_addColumnName) return value_addColumnName;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.addColumnName' is not present");
    }

    /**
     * Whether to add padding. Default is `false`. (Ignored for source endpoints.)
     * 
     */
    @PolicyResourceProperty(name="addTrailingPaddingCharacter", flag="unknown_addTrailingPaddingCharacter")
    private Boolean value_addTrailingPaddingCharacter;
    private boolean unknown_addTrailingPaddingCharacter;
    public Boolean addTrailingPaddingCharacter() {
        if (!unknown_addTrailingPaddingCharacter) return value_addTrailingPaddingCharacter;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.addTrailingPaddingCharacter' is not present");
    }

    /**
     * S3 object prefix.
     * 
     */
    @PolicyResourceProperty(name="bucketFolder", flag="unknown_bucketFolder")
    private String value_bucketFolder;
    private boolean unknown_bucketFolder;
    public String bucketFolder() {
        if (!unknown_bucketFolder) return value_bucketFolder;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.bucketFolder' is not present");
    }

    /**
     * S3 bucket name.
     * 
     */
    @PolicyResourceProperty(name="bucketName", flag="unknown_bucketName")
    private String value_bucketName;
    private boolean unknown_bucketName;
    public String bucketName() {
        if (!unknown_bucketName) return value_bucketName;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.bucketName' is not present");
    }

    /**
     * Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `none`, `private`, `public-read`, `public-read-write`, `authenticated-read`, `aws-exec-read`, `bucket-owner-read`, and `bucket-owner-full-control`. Default is `none`.
     * 
     */
    @PolicyResourceProperty(name="cannedAclForObjects", flag="unknown_cannedAclForObjects")
    private String value_cannedAclForObjects;
    private boolean unknown_cannedAclForObjects;
    public String cannedAclForObjects() {
        if (!unknown_cannedAclForObjects) return value_cannedAclForObjects;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.cannedAclForObjects' is not present");
    }

    /**
     * Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="cdcInsertsAndUpdates", flag="unknown_cdcInsertsAndUpdates")
    private Boolean value_cdcInsertsAndUpdates;
    private boolean unknown_cdcInsertsAndUpdates;
    public Boolean cdcInsertsAndUpdates() {
        if (!unknown_cdcInsertsAndUpdates) return value_cdcInsertsAndUpdates;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.cdcInsertsAndUpdates' is not present");
    }

    /**
     * Whether to write insert operations to .csv or .parquet output files. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="cdcInsertsOnly", flag="unknown_cdcInsertsOnly")
    private Boolean value_cdcInsertsOnly;
    private boolean unknown_cdcInsertsOnly;
    public Boolean cdcInsertsOnly() {
        if (!unknown_cdcInsertsOnly) return value_cdcInsertsOnly;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.cdcInsertsOnly' is not present");
    }

    /**
     * Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. (AWS default is `60`.)
     * 
     */
    @PolicyResourceProperty(name="cdcMaxBatchInterval", flag="unknown_cdcMaxBatchInterval")
    private Integer value_cdcMaxBatchInterval;
    private boolean unknown_cdcMaxBatchInterval;
    public Integer cdcMaxBatchInterval() {
        if (!unknown_cdcMaxBatchInterval) return value_cdcMaxBatchInterval;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.cdcMaxBatchInterval' is not present");
    }

    /**
     * Minimum file size condition as defined in kilobytes to output a file to Amazon S3. (AWS default is 32000 KB.)
     * 
     */
    @PolicyResourceProperty(name="cdcMinFileSize", flag="unknown_cdcMinFileSize")
    private Integer value_cdcMinFileSize;
    private boolean unknown_cdcMinFileSize;
    public Integer cdcMinFileSize() {
        if (!unknown_cdcMinFileSize) return value_cdcMinFileSize;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.cdcMinFileSize' is not present");
    }

    /**
     * Folder path of CDC files. If `cdc_path` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
     * 
     */
    @PolicyResourceProperty(name="cdcPath", flag="unknown_cdcPath")
    private String value_cdcPath;
    private boolean unknown_cdcPath;
    public String cdcPath() {
        if (!unknown_cdcPath) return value_cdcPath;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.cdcPath' is not present");
    }

    /**
     * ARN for the certificate.
     * 
     */
    @PolicyResourceProperty(name="certificateArn", flag="unknown_certificateArn")
    private String value_certificateArn;
    private boolean unknown_certificateArn;
    public String certificateArn() {
        if (!unknown_certificateArn) return value_certificateArn;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.certificateArn' is not present");
    }

    /**
     * Set to compress target files. Valid values are `GZIP` and `NONE`. Default is `NONE`. (Ignored for source endpoints.)
     * 
     */
    @PolicyResourceProperty(name="compressionType", flag="unknown_compressionType")
    private String value_compressionType;
    private boolean unknown_compressionType;
    public String compressionType() {
        if (!unknown_compressionType) return value_compressionType;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.compressionType' is not present");
    }

    /**
     * Delimiter used to separate columns in the source files. Default is `,`.
     * 
     */
    @PolicyResourceProperty(name="csvDelimiter", flag="unknown_csvDelimiter")
    private String value_csvDelimiter;
    private boolean unknown_csvDelimiter;
    public String csvDelimiter() {
        if (!unknown_csvDelimiter) return value_csvDelimiter;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.csvDelimiter' is not present");
    }

    /**
     * Only applies if output files for a CDC load are written in .csv format. If `use_csv_no_sup_value` is set to `true`, string to use for all columns not included in the supplemental log. If you do not specify a string value, DMS uses the null value for these columns regardless of `use_csv_no_sup_value`. (Ignored for source endpoints.)
     * 
     */
    @PolicyResourceProperty(name="csvNoSupValue", flag="unknown_csvNoSupValue")
    private String value_csvNoSupValue;
    private boolean unknown_csvNoSupValue;
    public String csvNoSupValue() {
        if (!unknown_csvNoSupValue) return value_csvNoSupValue;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.csvNoSupValue' is not present");
    }

    /**
     * String to as null when writing to the target. (AWS default is `NULL`.)
     * 
     */
    @PolicyResourceProperty(name="csvNullValue", flag="unknown_csvNullValue")
    private String value_csvNullValue;
    private boolean unknown_csvNullValue;
    public String csvNullValue() {
        if (!unknown_csvNullValue) return value_csvNullValue;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.csvNullValue' is not present");
    }

    /**
     * Delimiter used to separate rows in the source files. Default is newline (_i.e._, `\n`).
     * 
     */
    @PolicyResourceProperty(name="csvRowDelimiter", flag="unknown_csvRowDelimiter")
    private String value_csvRowDelimiter;
    private boolean unknown_csvRowDelimiter;
    public String csvRowDelimiter() {
        if (!unknown_csvRowDelimiter) return value_csvRowDelimiter;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.csvRowDelimiter' is not present");
    }

    /**
     * Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`.  (Ignored for source endpoints -- only `csv` is valid.)
     * 
     */
    @PolicyResourceProperty(name="dataFormat", flag="unknown_dataFormat")
    private String value_dataFormat;
    private boolean unknown_dataFormat;
    public String dataFormat() {
        if (!unknown_dataFormat) return value_dataFormat;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.dataFormat' is not present");
    }

    /**
     * Size of one data page in bytes. (AWS default is 1 MiB, _i.e._, `1048576`.)
     * 
     */
    @PolicyResourceProperty(name="dataPageSize", flag="unknown_dataPageSize")
    private Integer value_dataPageSize;
    private boolean unknown_dataPageSize;
    public Integer dataPageSize() {
        if (!unknown_dataPageSize) return value_dataPageSize;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.dataPageSize' is not present");
    }

    /**
     * Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. (AWS default is `SLASH`.) (Ignored for source endpoints.)
     * 
     */
    @PolicyResourceProperty(name="datePartitionDelimiter", flag="unknown_datePartitionDelimiter")
    private String value_datePartitionDelimiter;
    private boolean unknown_datePartitionDelimiter;
    public String datePartitionDelimiter() {
        if (!unknown_datePartitionDelimiter) return value_datePartitionDelimiter;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.datePartitionDelimiter' is not present");
    }

    /**
     * Partition S3 bucket folders based on transaction commit dates. Default is `false`. (Ignored for source endpoints.)
     * 
     */
    @PolicyResourceProperty(name="datePartitionEnabled", flag="unknown_datePartitionEnabled")
    private Boolean value_datePartitionEnabled;
    private boolean unknown_datePartitionEnabled;
    public Boolean datePartitionEnabled() {
        if (!unknown_datePartitionEnabled) return value_datePartitionEnabled;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.datePartitionEnabled' is not present");
    }

    /**
     * Date format to use during folder partitioning. Use this parameter when `date_partition_enabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. (AWS default is `YYYYMMDD`.) (Ignored for source endpoints.)
     * 
     */
    @PolicyResourceProperty(name="datePartitionSequence", flag="unknown_datePartitionSequence")
    private String value_datePartitionSequence;
    private boolean unknown_datePartitionSequence;
    public String datePartitionSequence() {
        if (!unknown_datePartitionSequence) return value_datePartitionSequence;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.datePartitionSequence' is not present");
    }

    /**
     * Convert the current UTC time to a timezone. The conversion occurs when a date partition folder is created and a CDC filename is generated. The timezone format is Area/Location (_e.g._, `Europe/Paris`). Use this when `date_partition_enabled` is `true`. (Ignored for source endpoints.)
     * 
     */
    @PolicyResourceProperty(name="datePartitionTimezone", flag="unknown_datePartitionTimezone")
    private String value_datePartitionTimezone;
    private boolean unknown_datePartitionTimezone;
    public String datePartitionTimezone() {
        if (!unknown_datePartitionTimezone) return value_datePartitionTimezone;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.datePartitionTimezone' is not present");
    }

    /**
     * Undocumented argument for use as directed by AWS Support.
     * 
     */
    @PolicyResourceProperty(name="detachTargetOnLobLookupFailureParquet", flag="unknown_detachTargetOnLobLookupFailureParquet")
    private Boolean value_detachTargetOnLobLookupFailureParquet;
    private boolean unknown_detachTargetOnLobLookupFailureParquet;
    public Boolean detachTargetOnLobLookupFailureParquet() {
        if (!unknown_detachTargetOnLobLookupFailureParquet) return value_detachTargetOnLobLookupFailureParquet;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.detachTargetOnLobLookupFailureParquet' is not present");
    }

    /**
     * Maximum size in bytes of an encoded dictionary page of a column. (AWS default is 1 MiB, _i.e._, `1048576`.)
     * 
     */
    @PolicyResourceProperty(name="dictPageSizeLimit", flag="unknown_dictPageSizeLimit")
    private Integer value_dictPageSizeLimit;
    private boolean unknown_dictPageSizeLimit;
    public Integer dictPageSizeLimit() {
        if (!unknown_dictPageSizeLimit) return value_dictPageSizeLimit;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.dictPageSizeLimit' is not present");
    }

    /**
     * Whether to enable statistics for Parquet pages and row groups. Default is `true`.
     * 
     */
    @PolicyResourceProperty(name="enableStatistics", flag="unknown_enableStatistics")
    private Boolean value_enableStatistics;
    private boolean unknown_enableStatistics;
    public Boolean enableStatistics() {
        if (!unknown_enableStatistics) return value_enableStatistics;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.enableStatistics' is not present");
    }

    /**
     * Type of encoding to use. Value values are `rle_dictionary`, `plain`, and `plain_dictionary`. (AWS default is `rle_dictionary`.)
     * 
     */
    @PolicyResourceProperty(name="encodingType", flag="unknown_encodingType")
    private String value_encodingType;
    private boolean unknown_encodingType;
    public String encodingType() {
        if (!unknown_encodingType) return value_encodingType;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.encodingType' is not present");
    }

    /**
     * Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are `SSE_S3` and `SSE_KMS`. (AWS default is `SSE_S3`.) (Ignored for source endpoints -- only `SSE_S3` is valid.)
     * 
     */
    @PolicyResourceProperty(name="encryptionMode", flag="unknown_encryptionMode")
    private String value_encryptionMode;
    private boolean unknown_encryptionMode;
    public String encryptionMode() {
        if (!unknown_encryptionMode) return value_encryptionMode;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.encryptionMode' is not present");
    }

    /**
     * Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
     * 
     */
    @PolicyResourceProperty(name="endpointId", flag="unknown_endpointId")
    private String value_endpointId;
    private boolean unknown_endpointId;
    public String endpointId() {
        if (!unknown_endpointId) return value_endpointId;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.endpointId' is not present");
    }

    /**
     * Type of endpoint. Valid values are `source`, `target`.
     * 
     */
    @PolicyResourceProperty(name="endpointType", flag="unknown_endpointType")
    private String value_endpointType;
    private boolean unknown_endpointType;
    public String endpointType() {
        if (!unknown_endpointType) return value_endpointType;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.endpointType' is not present");
    }

    /**
     * Bucket owner to prevent sniping. Value is an AWS account ID.
     * 
     */
    @PolicyResourceProperty(name="expectedBucketOwner", flag="unknown_expectedBucketOwner")
    private String value_expectedBucketOwner;
    private boolean unknown_expectedBucketOwner;
    public String expectedBucketOwner() {
        if (!unknown_expectedBucketOwner) return value_expectedBucketOwner;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.expectedBucketOwner' is not present");
    }

    /**
     * JSON document that describes how AWS DMS should interpret the data.
     * 
     */
    @PolicyResourceProperty(name="externalTableDefinition", flag="unknown_externalTableDefinition")
    private String value_externalTableDefinition;
    private boolean unknown_externalTableDefinition;
    public String externalTableDefinition() {
        if (!unknown_externalTableDefinition) return value_externalTableDefinition;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.externalTableDefinition' is not present");
    }

    /**
     * Whether to integrate AWS Glue Data Catalog with an Amazon S3 target. See [Using AWS Glue Data Catalog with an Amazon S3 target for AWS DMS](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.GlueCatalog) for more information. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="glueCatalogGeneration", flag="unknown_glueCatalogGeneration")
    private Boolean value_glueCatalogGeneration;
    private boolean unknown_glueCatalogGeneration;
    public Boolean glueCatalogGeneration() {
        if (!unknown_glueCatalogGeneration) return value_glueCatalogGeneration;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.glueCatalogGeneration' is not present");
    }

    /**
     * When this value is set to `1`, DMS ignores the first row header in a .csv file. (AWS default is `0`.)
     * 
     */
    @PolicyResourceProperty(name="ignoreHeaderRows", flag="unknown_ignoreHeaderRows")
    private Integer value_ignoreHeaderRows;
    private boolean unknown_ignoreHeaderRows;
    public Integer ignoreHeaderRows() {
        if (!unknown_ignoreHeaderRows) return value_ignoreHeaderRows;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.ignoreHeaderRows' is not present");
    }

    /**
     * Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="includeOpForFullLoad", flag="unknown_includeOpForFullLoad")
    private Boolean value_includeOpForFullLoad;
    private boolean unknown_includeOpForFullLoad;
    public Boolean includeOpForFullLoad() {
        if (!unknown_includeOpForFullLoad) return value_includeOpForFullLoad;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.includeOpForFullLoad' is not present");
    }

    /**
     * ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kms_key_arn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyArn", flag="unknown_kmsKeyArn")
    private String value_kmsKeyArn;
    private boolean unknown_kmsKeyArn;
    public String kmsKeyArn() {
        if (!unknown_kmsKeyArn) return value_kmsKeyArn;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.kmsKeyArn' is not present");
    }

    /**
     * Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. (AWS default is 1 GB, _i.e._, `1048576`.)
     * 
     */
    @PolicyResourceProperty(name="maxFileSize", flag="unknown_maxFileSize")
    private Integer value_maxFileSize;
    private boolean unknown_maxFileSize;
    public Integer maxFileSize() {
        if (!unknown_maxFileSize) return value_maxFileSize;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.maxFileSize' is not present");
    }

    /**
     * Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`. (Ignored for source endpoints.)
     * 
     */
    @PolicyResourceProperty(name="parquetTimestampInMillisecond", flag="unknown_parquetTimestampInMillisecond")
    private Boolean value_parquetTimestampInMillisecond;
    private boolean unknown_parquetTimestampInMillisecond;
    public Boolean parquetTimestampInMillisecond() {
        if (!unknown_parquetTimestampInMillisecond) return value_parquetTimestampInMillisecond;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.parquetTimestampInMillisecond' is not present");
    }

    /**
     * Version of the .parquet file format. Valid values are `parquet-1-0` and `parquet-2-0`. (AWS default is `parquet-1-0`.) (Ignored for source endpoints.)
     * 
     */
    @PolicyResourceProperty(name="parquetVersion", flag="unknown_parquetVersion")
    private String value_parquetVersion;
    private boolean unknown_parquetVersion;
    public String parquetVersion() {
        if (!unknown_parquetVersion) return value_parquetVersion;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.parquetVersion' is not present");
    }

    /**
     * Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdc_path`. Default is `false`. (Ignored for source endpoints.)
     * 
     */
    @PolicyResourceProperty(name="preserveTransactions", flag="unknown_preserveTransactions")
    private Boolean value_preserveTransactions;
    private boolean unknown_preserveTransactions;
    public Boolean preserveTransactions() {
        if (!unknown_preserveTransactions) return value_preserveTransactions;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.preserveTransactions' is not present");
    }

    /**
     * For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
     * 
     */
    @PolicyResourceProperty(name="rfc4180", flag="unknown_rfc4180")
    private Boolean value_rfc4180;
    private boolean unknown_rfc4180;
    public Boolean rfc4180() {
        if (!unknown_rfc4180) return value_rfc4180;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.rfc4180' is not present");
    }

    /**
     * Number of rows in a row group. (AWS default is `10000`.)
     * 
     */
    @PolicyResourceProperty(name="rowGroupLength", flag="unknown_rowGroupLength")
    private Integer value_rowGroupLength;
    private boolean unknown_rowGroupLength;
    public Integer rowGroupLength() {
        if (!unknown_rowGroupLength) return value_rowGroupLength;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.rowGroupLength' is not present");
    }

    /**
     * When `encryption_mode` is `SSE_KMS`, ARN for the AWS KMS key. (Ignored for source endpoints -- only `SSE_S3` `encryption_mode` is valid.)
     * 
     */
    @PolicyResourceProperty(name="serverSideEncryptionKmsKeyId", flag="unknown_serverSideEncryptionKmsKeyId")
    private String value_serverSideEncryptionKmsKeyId;
    private boolean unknown_serverSideEncryptionKmsKeyId;
    public String serverSideEncryptionKmsKeyId() {
        if (!unknown_serverSideEncryptionKmsKeyId) return value_serverSideEncryptionKmsKeyId;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.serverSideEncryptionKmsKeyId' is not present");
    }

    /**
     * ARN of the IAM role with permissions to the S3 Bucket.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="serviceAccessRoleArn", flag="unknown_serviceAccessRoleArn")
    private String value_serviceAccessRoleArn;
    private boolean unknown_serviceAccessRoleArn;
    public String serviceAccessRoleArn() {
        if (!unknown_serviceAccessRoleArn) return value_serviceAccessRoleArn;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.serviceAccessRoleArn' is not present");
    }

    /**
     * SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`. (AWS default is `none`.)
     * 
     */
    @PolicyResourceProperty(name="sslMode", flag="unknown_sslMode")
    private String value_sslMode;
    private boolean unknown_sslMode;
    public String sslMode() {
        if (!unknown_sslMode) return value_sslMode;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.sslMode' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.tags' is not present");
    }

    /**
     * Column to add with timestamp information to the endpoint data for an Amazon S3 target.
     * 
     */
    @PolicyResourceProperty(name="timestampColumnName", flag="unknown_timestampColumnName")
    private String value_timestampColumnName;
    private boolean unknown_timestampColumnName;
    public String timestampColumnName() {
        if (!unknown_timestampColumnName) return value_timestampColumnName;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.timestampColumnName' is not present");
    }

    /**
     * Whether to use `csv_no_sup_value` for columns not included in the supplemental log. (Ignored for source endpoints.)
     * 
     */
    @PolicyResourceProperty(name="useCsvNoSupValue", flag="unknown_useCsvNoSupValue")
    private Boolean value_useCsvNoSupValue;
    private boolean unknown_useCsvNoSupValue;
    public Boolean useCsvNoSupValue() {
        if (!unknown_useCsvNoSupValue) return value_useCsvNoSupValue;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.useCsvNoSupValue' is not present");
    }

    /**
     * When set to `true`, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to `true`, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time.When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
     * 
     */
    @PolicyResourceProperty(name="useTaskStartTimeForFullLoadTimestamp", flag="unknown_useTaskStartTimeForFullLoadTimestamp")
    private Boolean value_useTaskStartTimeForFullLoadTimestamp;
    private boolean unknown_useTaskStartTimeForFullLoadTimestamp;
    public Boolean useTaskStartTimeForFullLoadTimestamp() {
        if (!unknown_useTaskStartTimeForFullLoadTimestamp) return value_useTaskStartTimeForFullLoadTimestamp;
        throw new UndeferrableValueException("Value 'S3EndpointArgs.useTaskStartTimeForFullLoadTimestamp' is not present");
    }

}
