// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dms;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:dms/s3Endpoint:S3Endpoint")
public final class S3EndpointArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Whether to add column name information to the .csv output file. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> addColumnName;

    public Boolean addColumnName() {
        if (addColumnName == null) return null;
        return addColumnName.getValue("S3EndpointArgs.addColumnName");
    }

    /**
     * Whether to add padding. Default is `false`. (Ignored for source endpoints.)
     * 
     */
    private UndeferrableValue<Boolean> addTrailingPaddingCharacter;

    public Boolean addTrailingPaddingCharacter() {
        if (addTrailingPaddingCharacter == null) return null;
        return addTrailingPaddingCharacter.getValue("S3EndpointArgs.addTrailingPaddingCharacter");
    }

    /**
     * S3 object prefix.
     * 
     */
    private UndeferrableValue<String> bucketFolder;

    public String bucketFolder() {
        if (bucketFolder == null) return null;
        return bucketFolder.getValue("S3EndpointArgs.bucketFolder");
    }

    /**
     * S3 bucket name.
     * 
     */
    private UndeferrableValue<String> bucketName;

    public String bucketName() {
        if (bucketName == null) return null;
        return bucketName.getValue("S3EndpointArgs.bucketName");
    }

    /**
     * Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `none`, `private`, `public-read`, `public-read-write`, `authenticated-read`, `aws-exec-read`, `bucket-owner-read`, and `bucket-owner-full-control`. Default is `none`.
     * 
     */
    private UndeferrableValue<String> cannedAclForObjects;

    public String cannedAclForObjects() {
        if (cannedAclForObjects == null) return null;
        return cannedAclForObjects.getValue("S3EndpointArgs.cannedAclForObjects");
    }

    /**
     * Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> cdcInsertsAndUpdates;

    public Boolean cdcInsertsAndUpdates() {
        if (cdcInsertsAndUpdates == null) return null;
        return cdcInsertsAndUpdates.getValue("S3EndpointArgs.cdcInsertsAndUpdates");
    }

    /**
     * Whether to write insert operations to .csv or .parquet output files. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> cdcInsertsOnly;

    public Boolean cdcInsertsOnly() {
        if (cdcInsertsOnly == null) return null;
        return cdcInsertsOnly.getValue("S3EndpointArgs.cdcInsertsOnly");
    }

    /**
     * Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. (AWS default is `60`.)
     * 
     */
    private UndeferrableValue<Integer> cdcMaxBatchInterval;

    public Integer cdcMaxBatchInterval() {
        if (cdcMaxBatchInterval == null) return null;
        return cdcMaxBatchInterval.getValue("S3EndpointArgs.cdcMaxBatchInterval");
    }

    /**
     * Minimum file size condition as defined in kilobytes to output a file to Amazon S3. (AWS default is 32000 KB.)
     * 
     */
    private UndeferrableValue<Integer> cdcMinFileSize;

    public Integer cdcMinFileSize() {
        if (cdcMinFileSize == null) return null;
        return cdcMinFileSize.getValue("S3EndpointArgs.cdcMinFileSize");
    }

    /**
     * Folder path of CDC files. If `cdc_path` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
     * 
     */
    private UndeferrableValue<String> cdcPath;

    public String cdcPath() {
        if (cdcPath == null) return null;
        return cdcPath.getValue("S3EndpointArgs.cdcPath");
    }

    /**
     * ARN for the certificate.
     * 
     */
    private UndeferrableValue<String> certificateArn;

    public String certificateArn() {
        if (certificateArn == null) return null;
        return certificateArn.getValue("S3EndpointArgs.certificateArn");
    }

    /**
     * Set to compress target files. Valid values are `GZIP` and `NONE`. Default is `NONE`. (Ignored for source endpoints.)
     * 
     */
    private UndeferrableValue<String> compressionType;

    public String compressionType() {
        if (compressionType == null) return null;
        return compressionType.getValue("S3EndpointArgs.compressionType");
    }

    /**
     * Delimiter used to separate columns in the source files. Default is `,`.
     * 
     */
    private UndeferrableValue<String> csvDelimiter;

    public String csvDelimiter() {
        if (csvDelimiter == null) return null;
        return csvDelimiter.getValue("S3EndpointArgs.csvDelimiter");
    }

    /**
     * Only applies if output files for a CDC load are written in .csv format. If `use_csv_no_sup_value` is set to `true`, string to use for all columns not included in the supplemental log. If you do not specify a string value, DMS uses the null value for these columns regardless of `use_csv_no_sup_value`. (Ignored for source endpoints.)
     * 
     */
    private UndeferrableValue<String> csvNoSupValue;

    public String csvNoSupValue() {
        if (csvNoSupValue == null) return null;
        return csvNoSupValue.getValue("S3EndpointArgs.csvNoSupValue");
    }

    /**
     * String to as null when writing to the target. (AWS default is `NULL`.)
     * 
     */
    private UndeferrableValue<String> csvNullValue;

    public String csvNullValue() {
        if (csvNullValue == null) return null;
        return csvNullValue.getValue("S3EndpointArgs.csvNullValue");
    }

    /**
     * Delimiter used to separate rows in the source files. Default is newline (_i.e._, `\n`).
     * 
     */
    private UndeferrableValue<String> csvRowDelimiter;

    public String csvRowDelimiter() {
        if (csvRowDelimiter == null) return null;
        return csvRowDelimiter.getValue("S3EndpointArgs.csvRowDelimiter");
    }

    /**
     * Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`.  (Ignored for source endpoints -- only `csv` is valid.)
     * 
     */
    private UndeferrableValue<String> dataFormat;

    public String dataFormat() {
        if (dataFormat == null) return null;
        return dataFormat.getValue("S3EndpointArgs.dataFormat");
    }

    /**
     * Size of one data page in bytes. (AWS default is 1 MiB, _i.e._, `1048576`.)
     * 
     */
    private UndeferrableValue<Integer> dataPageSize;

    public Integer dataPageSize() {
        if (dataPageSize == null) return null;
        return dataPageSize.getValue("S3EndpointArgs.dataPageSize");
    }

    /**
     * Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. (AWS default is `SLASH`.) (Ignored for source endpoints.)
     * 
     */
    private UndeferrableValue<String> datePartitionDelimiter;

    public String datePartitionDelimiter() {
        if (datePartitionDelimiter == null) return null;
        return datePartitionDelimiter.getValue("S3EndpointArgs.datePartitionDelimiter");
    }

    /**
     * Partition S3 bucket folders based on transaction commit dates. Default is `false`. (Ignored for source endpoints.)
     * 
     */
    private UndeferrableValue<Boolean> datePartitionEnabled;

    public Boolean datePartitionEnabled() {
        if (datePartitionEnabled == null) return null;
        return datePartitionEnabled.getValue("S3EndpointArgs.datePartitionEnabled");
    }

    /**
     * Date format to use during folder partitioning. Use this parameter when `date_partition_enabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. (AWS default is `YYYYMMDD`.) (Ignored for source endpoints.)
     * 
     */
    private UndeferrableValue<String> datePartitionSequence;

    public String datePartitionSequence() {
        if (datePartitionSequence == null) return null;
        return datePartitionSequence.getValue("S3EndpointArgs.datePartitionSequence");
    }

    /**
     * Convert the current UTC time to a timezone. The conversion occurs when a date partition folder is created and a CDC filename is generated. The timezone format is Area/Location (_e.g._, `Europe/Paris`). Use this when `date_partition_enabled` is `true`. (Ignored for source endpoints.)
     * 
     */
    private UndeferrableValue<String> datePartitionTimezone;

    public String datePartitionTimezone() {
        if (datePartitionTimezone == null) return null;
        return datePartitionTimezone.getValue("S3EndpointArgs.datePartitionTimezone");
    }

    /**
     * Undocumented argument for use as directed by AWS Support.
     * 
     */
    private UndeferrableValue<Boolean> detachTargetOnLobLookupFailureParquet;

    public Boolean detachTargetOnLobLookupFailureParquet() {
        if (detachTargetOnLobLookupFailureParquet == null) return null;
        return detachTargetOnLobLookupFailureParquet.getValue("S3EndpointArgs.detachTargetOnLobLookupFailureParquet");
    }

    /**
     * Maximum size in bytes of an encoded dictionary page of a column. (AWS default is 1 MiB, _i.e._, `1048576`.)
     * 
     */
    private UndeferrableValue<Integer> dictPageSizeLimit;

    public Integer dictPageSizeLimit() {
        if (dictPageSizeLimit == null) return null;
        return dictPageSizeLimit.getValue("S3EndpointArgs.dictPageSizeLimit");
    }

    /**
     * Whether to enable statistics for Parquet pages and row groups. Default is `true`.
     * 
     */
    private UndeferrableValue<Boolean> enableStatistics;

    public Boolean enableStatistics() {
        if (enableStatistics == null) return null;
        return enableStatistics.getValue("S3EndpointArgs.enableStatistics");
    }

    /**
     * Type of encoding to use. Value values are `rle_dictionary`, `plain`, and `plain_dictionary`. (AWS default is `rle_dictionary`.)
     * 
     */
    private UndeferrableValue<String> encodingType;

    public String encodingType() {
        if (encodingType == null) return null;
        return encodingType.getValue("S3EndpointArgs.encodingType");
    }

    /**
     * Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are `SSE_S3` and `SSE_KMS`. (AWS default is `SSE_S3`.) (Ignored for source endpoints -- only `SSE_S3` is valid.)
     * 
     */
    private UndeferrableValue<String> encryptionMode;

    public String encryptionMode() {
        if (encryptionMode == null) return null;
        return encryptionMode.getValue("S3EndpointArgs.encryptionMode");
    }

    /**
     * Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
     * 
     */
    private UndeferrableValue<String> endpointId;

    public String endpointId() {
        if (endpointId == null) return null;
        return endpointId.getValue("S3EndpointArgs.endpointId");
    }

    /**
     * Type of endpoint. Valid values are `source`, `target`.
     * 
     */
    private UndeferrableValue<String> endpointType;

    public String endpointType() {
        if (endpointType == null) return null;
        return endpointType.getValue("S3EndpointArgs.endpointType");
    }

    /**
     * Bucket owner to prevent sniping. Value is an AWS account ID.
     * 
     */
    private UndeferrableValue<String> expectedBucketOwner;

    public String expectedBucketOwner() {
        if (expectedBucketOwner == null) return null;
        return expectedBucketOwner.getValue("S3EndpointArgs.expectedBucketOwner");
    }

    /**
     * JSON document that describes how AWS DMS should interpret the data.
     * 
     */
    private UndeferrableValue<String> externalTableDefinition;

    public String externalTableDefinition() {
        if (externalTableDefinition == null) return null;
        return externalTableDefinition.getValue("S3EndpointArgs.externalTableDefinition");
    }

    /**
     * Whether to integrate AWS Glue Data Catalog with an Amazon S3 target. See [Using AWS Glue Data Catalog with an Amazon S3 target for AWS DMS](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.GlueCatalog) for more information. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> glueCatalogGeneration;

    public Boolean glueCatalogGeneration() {
        if (glueCatalogGeneration == null) return null;
        return glueCatalogGeneration.getValue("S3EndpointArgs.glueCatalogGeneration");
    }

    /**
     * When this value is set to `1`, DMS ignores the first row header in a .csv file. (AWS default is `0`.)
     * 
     */
    private UndeferrableValue<Integer> ignoreHeaderRows;

    public Integer ignoreHeaderRows() {
        if (ignoreHeaderRows == null) return null;
        return ignoreHeaderRows.getValue("S3EndpointArgs.ignoreHeaderRows");
    }

    /**
     * Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> includeOpForFullLoad;

    public Boolean includeOpForFullLoad() {
        if (includeOpForFullLoad == null) return null;
        return includeOpForFullLoad.getValue("S3EndpointArgs.includeOpForFullLoad");
    }

    /**
     * ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kms_key_arn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
     * 
     */
    private UndeferrableValue<String> kmsKeyArn;

    public String kmsKeyArn() {
        if (kmsKeyArn == null) return null;
        return kmsKeyArn.getValue("S3EndpointArgs.kmsKeyArn");
    }

    /**
     * Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. (AWS default is 1 GB, _i.e._, `1048576`.)
     * 
     */
    private UndeferrableValue<Integer> maxFileSize;

    public Integer maxFileSize() {
        if (maxFileSize == null) return null;
        return maxFileSize.getValue("S3EndpointArgs.maxFileSize");
    }

    /**
     * Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`. (Ignored for source endpoints.)
     * 
     */
    private UndeferrableValue<Boolean> parquetTimestampInMillisecond;

    public Boolean parquetTimestampInMillisecond() {
        if (parquetTimestampInMillisecond == null) return null;
        return parquetTimestampInMillisecond.getValue("S3EndpointArgs.parquetTimestampInMillisecond");
    }

    /**
     * Version of the .parquet file format. Valid values are `parquet-1-0` and `parquet-2-0`. (AWS default is `parquet-1-0`.) (Ignored for source endpoints.)
     * 
     */
    private UndeferrableValue<String> parquetVersion;

    public String parquetVersion() {
        if (parquetVersion == null) return null;
        return parquetVersion.getValue("S3EndpointArgs.parquetVersion");
    }

    /**
     * Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdc_path`. Default is `false`. (Ignored for source endpoints.)
     * 
     */
    private UndeferrableValue<Boolean> preserveTransactions;

    public Boolean preserveTransactions() {
        if (preserveTransactions == null) return null;
        return preserveTransactions.getValue("S3EndpointArgs.preserveTransactions");
    }

    /**
     * For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
     * 
     */
    private UndeferrableValue<Boolean> rfc4180;

    public Boolean rfc4180() {
        if (rfc4180 == null) return null;
        return rfc4180.getValue("S3EndpointArgs.rfc4180");
    }

    /**
     * Number of rows in a row group. (AWS default is `10000`.)
     * 
     */
    private UndeferrableValue<Integer> rowGroupLength;

    public Integer rowGroupLength() {
        if (rowGroupLength == null) return null;
        return rowGroupLength.getValue("S3EndpointArgs.rowGroupLength");
    }

    /**
     * When `encryption_mode` is `SSE_KMS`, ARN for the AWS KMS key. (Ignored for source endpoints -- only `SSE_S3` `encryption_mode` is valid.)
     * 
     */
    private UndeferrableValue<String> serverSideEncryptionKmsKeyId;

    public String serverSideEncryptionKmsKeyId() {
        if (serverSideEncryptionKmsKeyId == null) return null;
        return serverSideEncryptionKmsKeyId.getValue("S3EndpointArgs.serverSideEncryptionKmsKeyId");
    }

    /**
     * ARN of the IAM role with permissions to the S3 Bucket.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> serviceAccessRoleArn;

    public String serviceAccessRoleArn() {
        if (serviceAccessRoleArn == null) return null;
        return serviceAccessRoleArn.getValue("S3EndpointArgs.serviceAccessRoleArn");
    }

    /**
     * SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`. (AWS default is `none`.)
     * 
     */
    private UndeferrableValue<String> sslMode;

    public String sslMode() {
        if (sslMode == null) return null;
        return sslMode.getValue("S3EndpointArgs.sslMode");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("S3EndpointArgs.tags");
    }

    /**
     * Column to add with timestamp information to the endpoint data for an Amazon S3 target.
     * 
     */
    private UndeferrableValue<String> timestampColumnName;

    public String timestampColumnName() {
        if (timestampColumnName == null) return null;
        return timestampColumnName.getValue("S3EndpointArgs.timestampColumnName");
    }

    /**
     * Whether to use `csv_no_sup_value` for columns not included in the supplemental log. (Ignored for source endpoints.)
     * 
     */
    private UndeferrableValue<Boolean> useCsvNoSupValue;

    public Boolean useCsvNoSupValue() {
        if (useCsvNoSupValue == null) return null;
        return useCsvNoSupValue.getValue("S3EndpointArgs.useCsvNoSupValue");
    }

    /**
     * When set to `true`, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to `true`, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time.When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
     * 
     */
    private UndeferrableValue<Boolean> useTaskStartTimeForFullLoadTimestamp;

    public Boolean useTaskStartTimeForFullLoadTimestamp() {
        if (useTaskStartTimeForFullLoadTimestamp == null) return null;
        return useTaskStartTimeForFullLoadTimestamp.getValue("S3EndpointArgs.useTaskStartTimeForFullLoadTimestamp");
    }

}
