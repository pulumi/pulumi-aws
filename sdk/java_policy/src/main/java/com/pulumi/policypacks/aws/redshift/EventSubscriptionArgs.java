// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.redshift;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:redshift/eventSubscription:EventSubscription")
public final class EventSubscriptionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * A boolean flag to enable/disable the subscription. Defaults to `true`.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private Boolean value_enabled;
    private boolean unknown_enabled;
    public Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'EventSubscriptionArgs.enabled' is not present");
    }

    /**
     * A list of event categories for a SourceType that you want to subscribe to. See https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html or run `aws redshift describe-event-categories`.
     * 
     */
    @PolicyResourceProperty(name="eventCategories", flag="unknown_eventCategories")
    private List<String> value_eventCategories;
    private boolean unknown_eventCategories;
    public List<String> eventCategories() {
        if (!unknown_eventCategories) return value_eventCategories;
        throw new UndeferrableValueException("Value 'EventSubscriptionArgs.eventCategories' is not present");
    }

    /**
     * The name of the Redshift event subscription.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'EventSubscriptionArgs.name' is not present");
    }

    /**
     * The event severity to be published by the notification subscription. Valid options are `INFO` or `ERROR`. Default value of `INFO`.
     * 
     */
    @PolicyResourceProperty(name="severity", flag="unknown_severity")
    private String value_severity;
    private boolean unknown_severity;
    public String severity() {
        if (!unknown_severity) return value_severity;
        throw new UndeferrableValueException("Value 'EventSubscriptionArgs.severity' is not present");
    }

    /**
     * The ARN of the SNS topic to send events to.
     * 
     */
    @PolicyResourceProperty(name="snsTopicArn", flag="unknown_snsTopicArn")
    private String value_snsTopicArn;
    private boolean unknown_snsTopicArn;
    public String snsTopicArn() {
        if (!unknown_snsTopicArn) return value_snsTopicArn;
        throw new UndeferrableValueException("Value 'EventSubscriptionArgs.snsTopicArn' is not present");
    }

    /**
     * A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a `source_type` must also be specified.
     * 
     */
    @PolicyResourceProperty(name="sourceIds", flag="unknown_sourceIds")
    private List<String> value_sourceIds;
    private boolean unknown_sourceIds;
    public List<String> sourceIds() {
        if (!unknown_sourceIds) return value_sourceIds;
        throw new UndeferrableValueException("Value 'EventSubscriptionArgs.sourceIds' is not present");
    }

    /**
     * The type of source that will be generating the events. Valid options are `cluster`, `cluster-parameter-group`, `cluster-security-group`, `cluster-snapshot`, or `scheduled-action`. If not set, all sources will be subscribed to.
     * 
     */
    @PolicyResourceProperty(name="sourceType", flag="unknown_sourceType")
    private String value_sourceType;
    private boolean unknown_sourceType;
    public String sourceType() {
        if (!unknown_sourceType) return value_sourceType;
        throw new UndeferrableValueException("Value 'EventSubscriptionArgs.sourceType' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'EventSubscriptionArgs.tags' is not present");
    }

}
