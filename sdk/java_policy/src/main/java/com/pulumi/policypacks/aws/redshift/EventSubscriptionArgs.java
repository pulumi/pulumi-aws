// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.redshift;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:redshift/eventSubscription:EventSubscription")
public final class EventSubscriptionArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * A boolean flag to enable/disable the subscription. Defaults to `true`.
     * 
     */
    private UndeferrableValue<Boolean> enabled;

    public Boolean enabled() {
        if (enabled == null) return null;
        return enabled.getValue("EventSubscriptionArgs.enabled");
    }

    /**
     * A list of event categories for a SourceType that you want to subscribe to. See https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html or run `aws redshift describe-event-categories`.
     * 
     */
    private UndeferrableValue<List<String>> eventCategories;

    public List<String> eventCategories() {
        if (eventCategories == null) return null;
        return eventCategories.getValue("EventSubscriptionArgs.eventCategories");
    }

    /**
     * The name of the Redshift event subscription.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("EventSubscriptionArgs.name");
    }

    /**
     * The event severity to be published by the notification subscription. Valid options are `INFO` or `ERROR`. Default value of `INFO`.
     * 
     */
    private UndeferrableValue<String> severity;

    public String severity() {
        if (severity == null) return null;
        return severity.getValue("EventSubscriptionArgs.severity");
    }

    /**
     * The ARN of the SNS topic to send events to.
     * 
     */
    private UndeferrableValue<String> snsTopicArn;

    public String snsTopicArn() {
        if (snsTopicArn == null) return null;
        return snsTopicArn.getValue("EventSubscriptionArgs.snsTopicArn");
    }

    /**
     * A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a `source_type` must also be specified.
     * 
     */
    private UndeferrableValue<List<String>> sourceIds;

    public List<String> sourceIds() {
        if (sourceIds == null) return null;
        return sourceIds.getValue("EventSubscriptionArgs.sourceIds");
    }

    /**
     * The type of source that will be generating the events. Valid options are `cluster`, `cluster-parameter-group`, `cluster-security-group`, `cluster-snapshot`, or `scheduled-action`. If not set, all sources will be subscribed to.
     * 
     */
    private UndeferrableValue<String> sourceType;

    public String sourceType() {
        if (sourceType == null) return null;
        return sourceType.getValue("EventSubscriptionArgs.sourceType");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("EventSubscriptionArgs.tags");
    }

}
