// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.fsx.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.fsx.inputs.FileCacheLustreConfigurationLogConfigurationArgs;
import com.pulumi.policypacks.aws.fsx.inputs.FileCacheLustreConfigurationMetadataConfigurationArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


public final class FileCacheLustreConfigurationArgs {

    /**
     * Specifies the cache deployment type. The only supported value is `CACHE_1`.
     * 
     */
    private UndeferrableValue<String> deploymentType;

    public String deploymentType() {
        if (deploymentType == null) return null;
        return deploymentType.getValue("FileCacheLustreConfigurationArgs.deploymentType");
    }

    private UndeferrableValue<List<FileCacheLustreConfigurationLogConfigurationArgs>> logConfigurations;

    public List<FileCacheLustreConfigurationLogConfigurationArgs> logConfigurations() {
        if (logConfigurations == null) return null;
        return logConfigurations.getValue("FileCacheLustreConfigurationArgs.logConfigurations");
    }

    /**
     * The configuration for a Lustre MDT (Metadata Target) storage volume. See the `metadata_configuration` block.
     * 
     */
    private UndeferrableValue<List<FileCacheLustreConfigurationMetadataConfigurationArgs>> metadataConfigurations;

    public List<FileCacheLustreConfigurationMetadataConfigurationArgs> metadataConfigurations() {
        if (metadataConfigurations == null) return null;
        return metadataConfigurations.getValue("FileCacheLustreConfigurationArgs.metadataConfigurations");
    }

    private UndeferrableValue<String> mountName;

    public String mountName() {
        if (mountName == null) return null;
        return mountName.getValue("FileCacheLustreConfigurationArgs.mountName");
    }

    /**
     * Provisions the amount of read and write throughput for each 1 tebibyte (TiB) of cache storage capacity, in MB/s/TiB. The only supported value is `1000`.
     * 
     */
    private UndeferrableValue<Integer> perUnitStorageThroughput;

    public Integer perUnitStorageThroughput() {
        if (perUnitStorageThroughput == null) return null;
        return perUnitStorageThroughput.getValue("FileCacheLustreConfigurationArgs.perUnitStorageThroughput");
    }

    /**
     * A recurring weekly time, in the format `D:HH:MM`. `D` is the day of the week, for which `1` represents Monday and `7` represents Sunday. `HH` is the zero-padded hour of the day (0-23), and `MM` is the zero-padded minute of the hour. For example, 1:05:00 specifies maintenance at 5 AM Monday. See the [ISO week date](https://en.wikipedia.org/wiki/ISO_week_date) for more information.
     * 
     */
    private UndeferrableValue<String> weeklyMaintenanceStartTime;

    public String weeklyMaintenanceStartTime() {
        if (weeklyMaintenanceStartTime == null) return null;
        return weeklyMaintenanceStartTime.getValue("FileCacheLustreConfigurationArgs.weeklyMaintenanceStartTime");
    }

}
