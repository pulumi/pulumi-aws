// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ecs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ecs.outputs.TaskSetCapacityProviderStrategy;
import com.pulumi.policypacks.aws.ecs.outputs.TaskSetLoadBalancer;
import com.pulumi.policypacks.aws.ecs.outputs.TaskSetNetworkConfiguration;
import com.pulumi.policypacks.aws.ecs.outputs.TaskSetScale;
import com.pulumi.policypacks.aws.ecs.outputs.TaskSetServiceRegistries;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ecs/taskSet:TaskSet")
public final class TaskSet extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) that identifies the task set.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'TaskSet.arn' is not present");
    }

    /**
     * The capacity provider strategy to use for the service. Can be one or more.  Defined below.
     * 
     */
    @PolicyResourceProperty(name="capacityProviderStrategies", flag="unknown_capacityProviderStrategies")
    private @Nullable List<TaskSetCapacityProviderStrategy> value_capacityProviderStrategies;
    private boolean unknown_capacityProviderStrategies;
    public @Nullable List<TaskSetCapacityProviderStrategy> capacityProviderStrategies() {
        if (!unknown_capacityProviderStrategies) return value_capacityProviderStrategies;
        throw new UndeferrableValueException("Value 'TaskSet.capacityProviderStrategies' is not present");
    }

    /**
     * The short name or ARN of the cluster that hosts the service to create the task set in.
     * 
     */
    @PolicyResourceProperty(name="cluster", flag="unknown_cluster")
    private String value_cluster;
    private boolean unknown_cluster;
    public String cluster() {
        if (!unknown_cluster) return value_cluster;
        throw new UndeferrableValueException("Value 'TaskSet.cluster' is not present");
    }

    /**
     * The external ID associated with the task set.
     * 
     */
    @PolicyResourceProperty(name="externalId", flag="unknown_externalId")
    private String value_externalId;
    private boolean unknown_externalId;
    public String externalId() {
        if (!unknown_externalId) return value_externalId;
        throw new UndeferrableValueException("Value 'TaskSet.externalId' is not present");
    }

    /**
     * Whether to allow deleting the task set without waiting for scaling down to 0. You can force a task set to delete even if it&#39;s in the process of scaling a resource. Normally, the provider drains all the tasks before deleting the task set. This bypasses that behavior and potentially leaves resources dangling.
     * 
     */
    @PolicyResourceProperty(name="forceDelete", flag="unknown_forceDelete")
    private @Nullable Boolean value_forceDelete;
    private boolean unknown_forceDelete;
    public @Nullable Boolean forceDelete() {
        if (!unknown_forceDelete) return value_forceDelete;
        throw new UndeferrableValueException("Value 'TaskSet.forceDelete' is not present");
    }

    /**
     * The launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
     * 
     */
    @PolicyResourceProperty(name="launchType", flag="unknown_launchType")
    private String value_launchType;
    private boolean unknown_launchType;
    public String launchType() {
        if (!unknown_launchType) return value_launchType;
        throw new UndeferrableValueException("Value 'TaskSet.launchType' is not present");
    }

    /**
     * Details on load balancers that are used with a task set. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="loadBalancers", flag="unknown_loadBalancers")
    private @Nullable List<TaskSetLoadBalancer> value_loadBalancers;
    private boolean unknown_loadBalancers;
    public @Nullable List<TaskSetLoadBalancer> loadBalancers() {
        if (!unknown_loadBalancers) return value_loadBalancers;
        throw new UndeferrableValueException("Value 'TaskSet.loadBalancers' is not present");
    }

    /**
     * The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="networkConfiguration", flag="unknown_networkConfiguration")
    private @Nullable TaskSetNetworkConfiguration value_networkConfiguration;
    private boolean unknown_networkConfiguration;
    public @Nullable TaskSetNetworkConfiguration networkConfiguration() {
        if (!unknown_networkConfiguration) return value_networkConfiguration;
        throw new UndeferrableValueException("Value 'TaskSet.networkConfiguration' is not present");
    }

    /**
     * The platform version on which to run your service. Only applicable for `launch_type` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
     * 
     */
    @PolicyResourceProperty(name="platformVersion", flag="unknown_platformVersion")
    private String value_platformVersion;
    private boolean unknown_platformVersion;
    public String platformVersion() {
        if (!unknown_platformVersion) return value_platformVersion;
        throw new UndeferrableValueException("Value 'TaskSet.platformVersion' is not present");
    }

    /**
     * A floating-point percentage of the desired number of tasks to place and keep running in the task set. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="scale", flag="unknown_scale")
    private TaskSetScale value_scale;
    private boolean unknown_scale;
    public TaskSetScale scale() {
        if (!unknown_scale) return value_scale;
        throw new UndeferrableValueException("Value 'TaskSet.scale' is not present");
    }

    /**
     * The short name or ARN of the ECS service.
     * 
     */
    @PolicyResourceProperty(name="service", flag="unknown_service")
    private String value_service;
    private boolean unknown_service;
    public String service() {
        if (!unknown_service) return value_service;
        throw new UndeferrableValueException("Value 'TaskSet.service' is not present");
    }

    /**
     * The service discovery registries for the service. The maximum number of `service_registries` blocks is `1`. Detailed below.
     * 
     */
    @PolicyResourceProperty(name="serviceRegistries", flag="unknown_serviceRegistries")
    private @Nullable TaskSetServiceRegistries value_serviceRegistries;
    private boolean unknown_serviceRegistries;
    public @Nullable TaskSetServiceRegistries serviceRegistries() {
        if (!unknown_serviceRegistries) return value_serviceRegistries;
        throw new UndeferrableValueException("Value 'TaskSet.serviceRegistries' is not present");
    }

    /**
     * The stability status. This indicates whether the task set has reached a steady state.
     * 
     */
    @PolicyResourceProperty(name="stabilityStatus", flag="unknown_stabilityStatus")
    private String value_stabilityStatus;
    private boolean unknown_stabilityStatus;
    public String stabilityStatus() {
        if (!unknown_stabilityStatus) return value_stabilityStatus;
        throw new UndeferrableValueException("Value 'TaskSet.stabilityStatus' is not present");
    }

    /**
     * The status of the task set.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'TaskSet.status' is not present");
    }

    /**
     * A map of tags to assign to the file system. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copy_tags_to_backups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'TaskSet.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'TaskSet.tagsAll' is not present");
    }

    /**
     * The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="taskDefinition", flag="unknown_taskDefinition")
    private String value_taskDefinition;
    private boolean unknown_taskDefinition;
    public String taskDefinition() {
        if (!unknown_taskDefinition) return value_taskDefinition;
        throw new UndeferrableValueException("Value 'TaskSet.taskDefinition' is not present");
    }

    /**
     * The ID of the task set.
     * 
     */
    @PolicyResourceProperty(name="taskSetId", flag="unknown_taskSetId")
    private String value_taskSetId;
    private boolean unknown_taskSetId;
    public String taskSetId() {
        if (!unknown_taskSetId) return value_taskSetId;
        throw new UndeferrableValueException("Value 'TaskSet.taskSetId' is not present");
    }

    /**
     * Whether the provider should wait until the task set has reached `STEADY_STATE`.
     * 
     */
    @PolicyResourceProperty(name="waitUntilStable", flag="unknown_waitUntilStable")
    private @Nullable Boolean value_waitUntilStable;
    private boolean unknown_waitUntilStable;
    public @Nullable Boolean waitUntilStable() {
        if (!unknown_waitUntilStable) return value_waitUntilStable;
        throw new UndeferrableValueException("Value 'TaskSet.waitUntilStable' is not present");
    }

    /**
     * Wait timeout for task set to reach `STEADY_STATE`. Valid time units include `ns`, `us` (or `µs`), `ms`, `s`, `m`, and `h`. Default `10m`.
     * 
     */
    @PolicyResourceProperty(name="waitUntilStableTimeout", flag="unknown_waitUntilStableTimeout")
    private @Nullable String value_waitUntilStableTimeout;
    private boolean unknown_waitUntilStableTimeout;
    public @Nullable String waitUntilStableTimeout() {
        if (!unknown_waitUntilStableTimeout) return value_waitUntilStableTimeout;
        throw new UndeferrableValueException("Value 'TaskSet.waitUntilStableTimeout' is not present");
    }

}
