// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.s3.inputs;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.policypacks.aws.s3.inputs.BucketV2LifecycleRuleExpirationArgs;
import com.pulumi.policypacks.aws.s3.inputs.BucketV2LifecycleRuleNoncurrentVersionExpirationArgs;
import com.pulumi.policypacks.aws.s3.inputs.BucketV2LifecycleRuleNoncurrentVersionTransitionArgs;
import com.pulumi.policypacks.aws.s3.inputs.BucketV2LifecycleRuleTransitionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


public final class BucketV2LifecycleRuleArgs {

    /**
     * Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     * 
     */
    @PolicyResourceProperty(name="abortIncompleteMultipartUploadDays", flag="unknown_abortIncompleteMultipartUploadDays")
    private Integer value_abortIncompleteMultipartUploadDays;
    private boolean unknown_abortIncompleteMultipartUploadDays;
    public Integer abortIncompleteMultipartUploadDays() {
        if (!unknown_abortIncompleteMultipartUploadDays) return value_abortIncompleteMultipartUploadDays;
        throw new UndeferrableValueException("Value 'BucketV2LifecycleRuleArgs.abortIncompleteMultipartUploadDays' is not present");
    }

    /**
     * Specifies lifecycle rule status.
     * 
     */
    @PolicyResourceProperty(name="enabled", flag="unknown_enabled")
    private Boolean value_enabled;
    private boolean unknown_enabled;
    public Boolean enabled() {
        if (!unknown_enabled) return value_enabled;
        throw new UndeferrableValueException("Value 'BucketV2LifecycleRuleArgs.enabled' is not present");
    }

    /**
     * Specifies a period in the object&#39;s expire. See Expiration below for details.
     * 
     */
    @PolicyResourceProperty(name="expirations", flag="unknown_expirations")
    private List<BucketV2LifecycleRuleExpirationArgs> value_expirations;
    private boolean unknown_expirations;
    public List<BucketV2LifecycleRuleExpirationArgs> expirations() {
        if (!unknown_expirations) return value_expirations;
        throw new UndeferrableValueException("Value 'BucketV2LifecycleRuleArgs.expirations' is not present");
    }

    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    @PolicyResourceProperty(name="id", flag="unknown_id")
    private String value_id;
    private boolean unknown_id;
    public String id() {
        if (!unknown_id) return value_id;
        throw new UndeferrableValueException("Value 'BucketV2LifecycleRuleArgs.id' is not present");
    }

    /**
     * Specifies when noncurrent object versions expire. See Noncurrent Version Expiration below for details.
     * 
     */
    @PolicyResourceProperty(name="noncurrentVersionExpirations", flag="unknown_noncurrentVersionExpirations")
    private List<BucketV2LifecycleRuleNoncurrentVersionExpirationArgs> value_noncurrentVersionExpirations;
    private boolean unknown_noncurrentVersionExpirations;
    public List<BucketV2LifecycleRuleNoncurrentVersionExpirationArgs> noncurrentVersionExpirations() {
        if (!unknown_noncurrentVersionExpirations) return value_noncurrentVersionExpirations;
        throw new UndeferrableValueException("Value 'BucketV2LifecycleRuleArgs.noncurrentVersionExpirations' is not present");
    }

    /**
     * Specifies when noncurrent object versions transitions. See Noncurrent Version Transition below for details.
     * 
     */
    @PolicyResourceProperty(name="noncurrentVersionTransitions", flag="unknown_noncurrentVersionTransitions")
    private List<BucketV2LifecycleRuleNoncurrentVersionTransitionArgs> value_noncurrentVersionTransitions;
    private boolean unknown_noncurrentVersionTransitions;
    public List<BucketV2LifecycleRuleNoncurrentVersionTransitionArgs> noncurrentVersionTransitions() {
        if (!unknown_noncurrentVersionTransitions) return value_noncurrentVersionTransitions;
        throw new UndeferrableValueException("Value 'BucketV2LifecycleRuleArgs.noncurrentVersionTransitions' is not present");
    }

    /**
     * Object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    @PolicyResourceProperty(name="prefix", flag="unknown_prefix")
    private String value_prefix;
    private boolean unknown_prefix;
    public String prefix() {
        if (!unknown_prefix) return value_prefix;
        throw new UndeferrableValueException("Value 'BucketV2LifecycleRuleArgs.prefix' is not present");
    }

    /**
     * Specifies object tags key and value.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'BucketV2LifecycleRuleArgs.tags' is not present");
    }

    /**
     * Specifies a period in the object&#39;s transitions. See Transition below for details.
     * 
     */
    @PolicyResourceProperty(name="transitions", flag="unknown_transitions")
    private List<BucketV2LifecycleRuleTransitionArgs> value_transitions;
    private boolean unknown_transitions;
    public List<BucketV2LifecycleRuleTransitionArgs> transitions() {
        if (!unknown_transitions) return value_transitions;
        throw new UndeferrableValueException("Value 'BucketV2LifecycleRuleArgs.transitions' is not present");
    }

}
