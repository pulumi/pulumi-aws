// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.dms;

import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;


public final class EndpointKafkaSettings {

    /**
     * Kafka broker location. Specify in the form broker-hostname-or-ip:port.
     * 
     */
    public String broker;



    /**
     * Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. Default is `false`.
     * 
     */
    public Boolean includeControlDetails;



    /**
     * Include NULL and empty columns for records migrated to the endpoint. Default is `false`.
     * 
     */
    public Boolean includeNullAndEmpty;



    /**
     * Shows the partition value within the Kafka message output unless the partition type is `schema-table-type`. Default is `false`.
     * 
     */
    public Boolean includePartitionValue;



    /**
     * Includes any data definition language (DDL) operations that change the table in the control data, such as `rename-table`, `drop-table`, `add-column`, `drop-column`, and `rename-column`. Default is `false`.
     * 
     */
    public Boolean includeTableAlterOperations;



    /**
     * Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for `transaction_id`, previous `transaction_id`, and `transaction_record_id` (the record offset within a transaction). Default is `false`.
     * 
     */
    public Boolean includeTransactionDetails;



    /**
     * Output format for the records created on the endpoint. Message format is `JSON` (default) or `JSON_UNFORMATTED` (a single line with no tab).
     * 
     */
    public String messageFormat;



    /**
     * Maximum size in bytes for records created on the endpoint Default is `1,000,000`.
     * 
     */
    public Integer messageMaxBytes;



    /**
     * Set this optional parameter to true to avoid adding a &#39;0x&#39; prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a &#39;0x&#39; prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the `no_hex_prefix` endpoint setting to enable migration of RAW data type columns without adding the `&#39;0x&#39;` prefix.
     * 
     */
    public Boolean noHexPrefix;



    /**
     * Prefixes schema and table names to partition values, when the partition type is `primary-key-type`. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. Default is `false`.
     * 
     */
    public Boolean partitionIncludeSchemaTable;



    /**
     * For SASL/SSL authentication, AWS DMS supports the `scram-sha-512` mechanism by default. AWS DMS versions 3.5.0 and later also support the PLAIN mechanism. To use the PLAIN mechanism, set this parameter to `plain`.
     * 
     */
    public String saslMechanism;



    /**
     * Secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
     * 
     */
    public String saslPassword;



    /**
     * Secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
     * 
     */
    public String saslUsername;



    /**
     * Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include `ssl-encryption`, `ssl-authentication`, and `sasl-ssl`. `sasl-ssl` requires `sasl_username` and `sasl_password`.
     * 
     */
    public String securityProtocol;



    /**
     * ARN for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.
     * 
     */
    public String sslCaCertificateArn;



    /**
     * ARN of the client certificate used to securely connect to a Kafka target endpoint.
     * 
     */
    public String sslClientCertificateArn;



    /**
     * ARN for the client private key used to securely connect to a Kafka target endpoint.
     * 
     */
    public String sslClientKeyArn;



    /**
     * Password for the client private key used to securely connect to a Kafka target endpoint.
     * 
     */
    public String sslClientKeyPassword;



    /**
     * Kafka topic for migration. Default is `kafka-default-topic`.
     * 
     */
    public String topic;



}
