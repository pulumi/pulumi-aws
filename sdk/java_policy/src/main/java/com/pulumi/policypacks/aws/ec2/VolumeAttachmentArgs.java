// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/volumeAttachment:VolumeAttachment")
public final class VolumeAttachmentArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The device name to expose to the instance (for
     * example, `/dev/sdh` or `xvdh`).  See [Device Naming on Linux Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html#available-ec2-device-names) and [Device Naming on Windows Instances](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/device_naming.html#available-ec2-device-names) for more information.
     * 
     */
    private UndeferrableValue<String> deviceName;

    public String deviceName() {
        if (deviceName == null) return null;
        return deviceName.getValue("VolumeAttachmentArgs.deviceName");
    }

    /**
     * Set to `true` if you want to force the
     * volume to detach. Useful if previous attempts failed, but use this option only
     * as a last resort, as this can result in **data loss**. See
     * [Detaching an Amazon EBS Volume from an Instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html) for more information.
     * 
     */
    private UndeferrableValue<Boolean> forceDetach;

    public Boolean forceDetach() {
        if (forceDetach == null) return null;
        return forceDetach.getValue("VolumeAttachmentArgs.forceDetach");
    }

    /**
     * ID of the Instance to attach to
     * 
     */
    private UndeferrableValue<String> instanceId;

    public String instanceId() {
        if (instanceId == null) return null;
        return instanceId.getValue("VolumeAttachmentArgs.instanceId");
    }

    /**
     * Set this to true if you do not wish
     * to detach the volume from the instance to which it is attached at destroy
     * time, and instead just remove the attachment from this provider state. This is
     * useful when destroying an instance which has volumes created by some other
     * means attached.
     * 
     */
    private UndeferrableValue<Boolean> skipDestroy;

    public Boolean skipDestroy() {
        if (skipDestroy == null) return null;
        return skipDestroy.getValue("VolumeAttachmentArgs.skipDestroy");
    }

    /**
     * Set this to true to ensure that the target instance is stopped
     * before trying to detach the volume. Stops the instance, if it is not already stopped.
     * 
     */
    private UndeferrableValue<Boolean> stopInstanceBeforeDetaching;

    public Boolean stopInstanceBeforeDetaching() {
        if (stopInstanceBeforeDetaching == null) return null;
        return stopInstanceBeforeDetaching.getValue("VolumeAttachmentArgs.stopInstanceBeforeDetaching");
    }

    /**
     * ID of the Volume to be attached
     * 
     */
    private UndeferrableValue<String> volumeId;

    public String volumeId() {
        if (volumeId == null) return null;
        return volumeId.getValue("VolumeAttachmentArgs.volumeId");
    }

}
