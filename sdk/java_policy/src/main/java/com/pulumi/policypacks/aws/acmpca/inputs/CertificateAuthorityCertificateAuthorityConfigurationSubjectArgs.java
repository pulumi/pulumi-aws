// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.acmpca.inputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.String;
import javax.annotation.Nullable;


public final class CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs {

    /**
     * Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    private UndeferrableValue<String> commonName;

    public String commonName() {
        if (commonName == null) return null;
        return commonName.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.commonName");
    }

    /**
     * Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
     * 
     */
    private UndeferrableValue<String> country;

    public String country() {
        if (country == null) return null;
        return country.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.country");
    }

    /**
     * Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    private UndeferrableValue<String> distinguishedNameQualifier;

    public String distinguishedNameQualifier() {
        if (distinguishedNameQualifier == null) return null;
        return distinguishedNameQualifier.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.distinguishedNameQualifier");
    }

    /**
     * Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
     * 
     */
    private UndeferrableValue<String> generationQualifier;

    public String generationQualifier() {
        if (generationQualifier == null) return null;
        return generationQualifier.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.generationQualifier");
    }

    /**
     * First name. Must be less than or equal to 16 characters in length.
     * 
     */
    private UndeferrableValue<String> givenName;

    public String givenName() {
        if (givenName == null) return null;
        return givenName.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.givenName");
    }

    /**
     * Concatenation that typically contains the first letter of the `given_name`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.
     * 
     */
    private UndeferrableValue<String> initials;

    public String initials() {
        if (initials == null) return null;
        return initials.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.initials");
    }

    /**
     * Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
     * 
     */
    private UndeferrableValue<String> locality;

    public String locality() {
        if (locality == null) return null;
        return locality.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.locality");
    }

    /**
     * Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
     * 
     */
    private UndeferrableValue<String> organization;

    public String organization() {
        if (organization == null) return null;
        return organization.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.organization");
    }

    /**
     * Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
     * 
     */
    private UndeferrableValue<String> organizationalUnit;

    public String organizationalUnit() {
        if (organizationalUnit == null) return null;
        return organizationalUnit.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.organizationalUnit");
    }

    /**
     * Typically a shortened version of a longer `given_name`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
     * 
     */
    private UndeferrableValue<String> pseudonym;

    public String pseudonym() {
        if (pseudonym == null) return null;
        return pseudonym.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.pseudonym");
    }

    /**
     * State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
     * 
     */
    private UndeferrableValue<String> state;

    public String state() {
        if (state == null) return null;
        return state.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.state");
    }

    /**
     * Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
     * 
     */
    private UndeferrableValue<String> surname;

    public String surname() {
        if (surname == null) return null;
        return surname.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.surname");
    }

    /**
     * Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    private UndeferrableValue<String> title;

    public String title() {
        if (title == null) return null;
        return title.getValue("CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.title");
    }

}
