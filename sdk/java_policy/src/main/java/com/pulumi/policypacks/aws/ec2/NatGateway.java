// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/natGateway:NatGateway")
public final class NatGateway extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Allocation ID of the Elastic IP address for the NAT Gateway. Required for `connectivity_type` of `public`.
     * 
     */
    @PolicyResourceProperty(name="allocationId", flag="unknown_allocationId")
    private @Nullable String value_allocationId;
    private boolean unknown_allocationId;
    public @Nullable String allocationId() {
        if (!unknown_allocationId) return value_allocationId;
        throw new UndeferrableValueException("Value 'NatGateway.allocationId' is not present");
    }

    /**
     * The association ID of the Elastic IP address that&#39;s associated with the NAT Gateway. Only available when `connectivity_type` is `public`.
     * 
     */
    @PolicyResourceProperty(name="associationId", flag="unknown_associationId")
    private String value_associationId;
    private boolean unknown_associationId;
    public String associationId() {
        if (!unknown_associationId) return value_associationId;
        throw new UndeferrableValueException("Value 'NatGateway.associationId' is not present");
    }

    /**
     * Connectivity type for the NAT Gateway. Valid values are `private` and `public`. Defaults to `public`.
     * 
     */
    @PolicyResourceProperty(name="connectivityType", flag="unknown_connectivityType")
    private @Nullable String value_connectivityType;
    private boolean unknown_connectivityType;
    public @Nullable String connectivityType() {
        if (!unknown_connectivityType) return value_connectivityType;
        throw new UndeferrableValueException("Value 'NatGateway.connectivityType' is not present");
    }

    /**
     * The ID of the network interface associated with the NAT Gateway.
     * 
     */
    @PolicyResourceProperty(name="networkInterfaceId", flag="unknown_networkInterfaceId")
    private String value_networkInterfaceId;
    private boolean unknown_networkInterfaceId;
    public String networkInterfaceId() {
        if (!unknown_networkInterfaceId) return value_networkInterfaceId;
        throw new UndeferrableValueException("Value 'NatGateway.networkInterfaceId' is not present");
    }

    /**
     * The private IPv4 address to assign to the NAT Gateway. If you don&#39;t provide an address, a private IPv4 address will be automatically assigned.
     * 
     */
    @PolicyResourceProperty(name="privateIp", flag="unknown_privateIp")
    private String value_privateIp;
    private boolean unknown_privateIp;
    public String privateIp() {
        if (!unknown_privateIp) return value_privateIp;
        throw new UndeferrableValueException("Value 'NatGateway.privateIp' is not present");
    }

    /**
     * The Elastic IP address associated with the NAT Gateway.
     * 
     */
    @PolicyResourceProperty(name="publicIp", flag="unknown_publicIp")
    private String value_publicIp;
    private boolean unknown_publicIp;
    public String publicIp() {
        if (!unknown_publicIp) return value_publicIp;
        throw new UndeferrableValueException("Value 'NatGateway.publicIp' is not present");
    }

    /**
     * A list of secondary allocation EIP IDs for this NAT Gateway.
     * 
     */
    @PolicyResourceProperty(name="secondaryAllocationIds", flag="unknown_secondaryAllocationIds")
    private @Nullable List<String> value_secondaryAllocationIds;
    private boolean unknown_secondaryAllocationIds;
    public @Nullable List<String> secondaryAllocationIds() {
        if (!unknown_secondaryAllocationIds) return value_secondaryAllocationIds;
        throw new UndeferrableValueException("Value 'NatGateway.secondaryAllocationIds' is not present");
    }

    /**
     * [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
     * 
     */
    @PolicyResourceProperty(name="secondaryPrivateIpAddressCount", flag="unknown_secondaryPrivateIpAddressCount")
    private Integer value_secondaryPrivateIpAddressCount;
    private boolean unknown_secondaryPrivateIpAddressCount;
    public Integer secondaryPrivateIpAddressCount() {
        if (!unknown_secondaryPrivateIpAddressCount) return value_secondaryPrivateIpAddressCount;
        throw new UndeferrableValueException("Value 'NatGateway.secondaryPrivateIpAddressCount' is not present");
    }

    /**
     * A list of secondary private IPv4 addresses to assign to the NAT Gateway.
     * 
     */
    @PolicyResourceProperty(name="secondaryPrivateIpAddresses", flag="unknown_secondaryPrivateIpAddresses")
    private List<String> value_secondaryPrivateIpAddresses;
    private boolean unknown_secondaryPrivateIpAddresses;
    public List<String> secondaryPrivateIpAddresses() {
        if (!unknown_secondaryPrivateIpAddresses) return value_secondaryPrivateIpAddresses;
        throw new UndeferrableValueException("Value 'NatGateway.secondaryPrivateIpAddresses' is not present");
    }

    /**
     * The Subnet ID of the subnet in which to place the NAT Gateway.
     * 
     */
    @PolicyResourceProperty(name="subnetId", flag="unknown_subnetId")
    private String value_subnetId;
    private boolean unknown_subnetId;
    public String subnetId() {
        if (!unknown_subnetId) return value_subnetId;
        throw new UndeferrableValueException("Value 'NatGateway.subnetId' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'NatGateway.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'NatGateway.tagsAll' is not present");
    }

}
