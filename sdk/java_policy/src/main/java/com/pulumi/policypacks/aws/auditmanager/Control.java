// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.auditmanager;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.auditmanager.outputs.ControlControlMappingSource;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:auditmanager/control:Control")
public final class Control extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Recommended actions to carry out if the control isn&#39;t fulfilled.
     * 
     */
    @PolicyResourceProperty(name="actionPlanInstructions", flag="unknown_actionPlanInstructions")
    private @Nullable String value_actionPlanInstructions;
    private boolean unknown_actionPlanInstructions;
    public @Nullable String actionPlanInstructions() {
        if (!unknown_actionPlanInstructions) return value_actionPlanInstructions;
        throw new UndeferrableValueException("Value 'Control.actionPlanInstructions' is not present");
    }

    /**
     * Title of the action plan for remediating the control.
     * 
     */
    @PolicyResourceProperty(name="actionPlanTitle", flag="unknown_actionPlanTitle")
    private @Nullable String value_actionPlanTitle;
    private boolean unknown_actionPlanTitle;
    public @Nullable String actionPlanTitle() {
        if (!unknown_actionPlanTitle) return value_actionPlanTitle;
        throw new UndeferrableValueException("Value 'Control.actionPlanTitle' is not present");
    }

    /**
     * Amazon Resource Name (ARN) of the control.
     * * `control_mapping_sources.*.source_id` - Unique identifier for the source.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Control.arn' is not present");
    }

    /**
     * Data mapping sources. See `control_mapping_sources` below.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="controlMappingSources", flag="unknown_controlMappingSources")
    private @Nullable List<ControlControlMappingSource> value_controlMappingSources;
    private boolean unknown_controlMappingSources;
    public @Nullable List<ControlControlMappingSource> controlMappingSources() {
        if (!unknown_controlMappingSources) return value_controlMappingSources;
        throw new UndeferrableValueException("Value 'Control.controlMappingSources' is not present");
    }

    /**
     * Description of the control.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Control.description' is not present");
    }

    /**
     * Name of the control.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Control.name' is not present");
    }

    /**
     * A map of tags to assign to the control. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Control.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Control.tagsAll' is not present");
    }

    /**
     * Steps to follow to determine if the control is satisfied.
     * 
     */
    @PolicyResourceProperty(name="testingInformation", flag="unknown_testingInformation")
    private @Nullable String value_testingInformation;
    private boolean unknown_testingInformation;
    public @Nullable String testingInformation() {
        if (!unknown_testingInformation) return value_testingInformation;
        throw new UndeferrableValueException("Value 'Control.testingInformation' is not present");
    }

    /**
     * Type of control, such as a custom control or a standard control.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'Control.type' is not present");
    }

}
