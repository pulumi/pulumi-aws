// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.auditmanager;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.auditmanager.outputs.ControlControlMappingSource;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:auditmanager/control:Control")
public final class Control extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Recommended actions to carry out if the control isn&#39;t fulfilled.
     * 
     */
    private @Nullable UndeferrableValue<String> actionPlanInstructions;

    public @Nullable String actionPlanInstructions() {
        if (actionPlanInstructions == null) return null;
        return actionPlanInstructions.getValue("Control.actionPlanInstructions");
    }

    /**
     * Title of the action plan for remediating the control.
     * 
     */
    private @Nullable UndeferrableValue<String> actionPlanTitle;

    public @Nullable String actionPlanTitle() {
        if (actionPlanTitle == null) return null;
        return actionPlanTitle.getValue("Control.actionPlanTitle");
    }

    /**
     * Amazon Resource Name (ARN) of the control.
     * * `control_mapping_sources.*.source_id` - Unique identifier for the source.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Control.arn");
    }

    /**
     * Data mapping sources. See `control_mapping_sources` below.
     * 
     * The following arguments are optional:
     * 
     */
    private @Nullable UndeferrableValue<List<ControlControlMappingSource>> controlMappingSources;

    public @Nullable List<ControlControlMappingSource> controlMappingSources() {
        if (controlMappingSources == null) return null;
        return controlMappingSources.getValue("Control.controlMappingSources");
    }

    /**
     * Description of the control.
     * 
     */
    private @Nullable UndeferrableValue<String> description;

    public @Nullable String description() {
        if (description == null) return null;
        return description.getValue("Control.description");
    }

    /**
     * Name of the control.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("Control.name");
    }

    /**
     * A map of tags to assign to the control. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Control.tags");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Control.tagsAll");
    }

    /**
     * Steps to follow to determine if the control is satisfied.
     * 
     */
    private @Nullable UndeferrableValue<String> testingInformation;

    public @Nullable String testingInformation() {
        if (testingInformation == null) return null;
        return testingInformation.getValue("Control.testingInformation");
    }

    /**
     * Type of control, such as a custom control or a standard control.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("Control.type");
    }

}
