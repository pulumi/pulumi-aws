// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.datasync.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;


public final class TaskOptions {

    /**
     * A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
     * 
     */
    private @Nullable UndeferrableValue<String> atime;

    public @Nullable String atime() {
        if (atime == null) return null;
        return atime.getValue("TaskOptions.atime");
    }

    /**
     * Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
     * 
     */
    private @Nullable UndeferrableValue<Integer> bytesPerSecond;

    public @Nullable Integer bytesPerSecond() {
        if (bytesPerSecond == null) return null;
        return bytesPerSecond.getValue("TaskOptions.bytesPerSecond");
    }

    /**
     * Group identifier of the file&#39;s owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
     * 
     */
    private @Nullable UndeferrableValue<String> gid;

    public @Nullable String gid() {
        if (gid == null) return null;
        return gid.getValue("TaskOptions.gid");
    }

    /**
     * Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
     * 
     */
    private @Nullable UndeferrableValue<String> logLevel;

    public @Nullable String logLevel() {
        if (logLevel == null) return null;
        return logLevel.getValue("TaskOptions.logLevel");
    }

    /**
     * A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
     * 
     */
    private @Nullable UndeferrableValue<String> mtime;

    public @Nullable String mtime() {
        if (mtime == null) return null;
        return mtime.getValue("TaskOptions.mtime");
    }

    /**
     * Specifies whether object tags are maintained when transferring between object storage systems. If you want your DataSync task to ignore object tags, specify the NONE value. Valid values: `PRESERVE`, `NONE`. Default value: `PRESERVE`.
     * 
     */
    private @Nullable UndeferrableValue<String> objectTags;

    public @Nullable String objectTags() {
        if (objectTags == null) return null;
        return objectTags.getValue("TaskOptions.objectTags");
    }

    /**
     * Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
     * 
     */
    private @Nullable UndeferrableValue<String> overwriteMode;

    public @Nullable String overwriteMode() {
        if (overwriteMode == null) return null;
        return overwriteMode.getValue("TaskOptions.overwriteMode");
    }

    /**
     * Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
     * 
     */
    private @Nullable UndeferrableValue<String> posixPermissions;

    public @Nullable String posixPermissions() {
        if (posixPermissions == null) return null;
        return posixPermissions.getValue("TaskOptions.posixPermissions");
    }

    /**
     * Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
     * 
     */
    private @Nullable UndeferrableValue<String> preserveDeletedFiles;

    public @Nullable String preserveDeletedFiles() {
        if (preserveDeletedFiles == null) return null;
        return preserveDeletedFiles.getValue("TaskOptions.preserveDeletedFiles");
    }

    /**
     * Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
     * 
     */
    private @Nullable UndeferrableValue<String> preserveDevices;

    public @Nullable String preserveDevices() {
        if (preserveDevices == null) return null;
        return preserveDevices.getValue("TaskOptions.preserveDevices");
    }

    /**
     * Determines which components of the SMB security descriptor are copied from source to destination objects. This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations, or between two Amazon FSx for Windows File Server locations. Valid values: `NONE`, `OWNER_DACL`, `OWNER_DACL_SACL`. Default: `OWNER_DACL`.
     * 
     */
    private @Nullable UndeferrableValue<String> securityDescriptorCopyFlags;

    public @Nullable String securityDescriptorCopyFlags() {
        if (securityDescriptorCopyFlags == null) return null;
        return securityDescriptorCopyFlags.getValue("TaskOptions.securityDescriptorCopyFlags");
    }

    /**
     * Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
     * 
     */
    private @Nullable UndeferrableValue<String> taskQueueing;

    public @Nullable String taskQueueing() {
        if (taskQueueing == null) return null;
        return taskQueueing.getValue("TaskOptions.taskQueueing");
    }

    /**
     * Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
     * 
     */
    private @Nullable UndeferrableValue<String> transferMode;

    public @Nullable String transferMode() {
        if (transferMode == null) return null;
        return transferMode.getValue("TaskOptions.transferMode");
    }

    /**
     * User identifier of the file&#39;s owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
     * 
     */
    private @Nullable UndeferrableValue<String> uid;

    public @Nullable String uid() {
        if (uid == null) return null;
        return uid.getValue("TaskOptions.uid");
    }

    /**
     * Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
     * 
     */
    private @Nullable UndeferrableValue<String> verifyMode;

    public @Nullable String verifyMode() {
        if (verifyMode == null) return null;
        return verifyMode.getValue("TaskOptions.verifyMode");
    }

}
