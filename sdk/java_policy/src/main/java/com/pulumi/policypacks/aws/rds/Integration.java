// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.rds;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.rds.outputs.IntegrationTimeouts;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:rds/integration:Integration")
public final class Integration extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Set of non-secret keyâ€“value pairs that contains additional contextual information about the data.
     * For more information, see the [User Guide](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context).
     * You can only include this parameter if you specify the `kms_key_id` parameter.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> additionalEncryptionContext;

    public @Nullable Map<String,String> additionalEncryptionContext() {
        if (additionalEncryptionContext == null) return null;
        return additionalEncryptionContext.getValue("Integration.additionalEncryptionContext");
    }

    /**
     * ARN of the Integration.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("Integration.arn");
    }

    /**
     * Data filters for the integration.
     * These filters determine which tables from the source database are sent to the target Amazon Redshift data warehouse.
     * The value should match the syntax from the AWS CLI which includes an `include:` or `exclude:` prefix before a filter expression.
     * Multiple expressions are separated by a comma.
     * See the [Amazon RDS data filtering guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/zero-etl.filtering.html) for additional details.
     * 
     */
    private UndeferrableValue<String> dataFilter;

    public String dataFilter() {
        if (dataFilter == null) return null;
        return dataFilter.getValue("Integration.dataFilter");
    }

    /**
     * Name of the integration.
     * 
     */
    private UndeferrableValue<String> integrationName;

    public String integrationName() {
        if (integrationName == null) return null;
        return integrationName.getValue("Integration.integrationName");
    }

    /**
     * KMS key identifier for the key to use to encrypt the integration.
     * If you don&#39;t specify an encryption key, RDS uses a default AWS owned key.
     * If you use the default AWS owned key, you should ignore `kms_key_id` parameter by using `lifecycle` parameter to avoid unintended change after the first creation.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("Integration.kmsKeyId");
    }

    /**
     * ARN of the database to use as the source for replication.
     * 
     */
    private UndeferrableValue<String> sourceArn;

    public String sourceArn() {
        if (sourceArn == null) return null;
        return sourceArn.getValue("Integration.sourceArn");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("Integration.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("Integration.tagsAll");
    }

    /**
     * ARN of the Redshift data warehouse to use as the target for replication.
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> targetArn;

    public String targetArn() {
        if (targetArn == null) return null;
        return targetArn.getValue("Integration.targetArn");
    }

    private @Nullable UndeferrableValue<IntegrationTimeouts> timeouts;

    public @Nullable IntegrationTimeouts timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("Integration.timeouts");
    }

}
