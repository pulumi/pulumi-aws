// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.mskconnect;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.mskconnect.outputs.ConnectorCapacity;
import com.pulumi.policypacks.aws.mskconnect.outputs.ConnectorKafkaCluster;
import com.pulumi.policypacks.aws.mskconnect.outputs.ConnectorKafkaClusterClientAuthentication;
import com.pulumi.policypacks.aws.mskconnect.outputs.ConnectorKafkaClusterEncryptionInTransit;
import com.pulumi.policypacks.aws.mskconnect.outputs.ConnectorLogDelivery;
import com.pulumi.policypacks.aws.mskconnect.outputs.ConnectorPlugin;
import com.pulumi.policypacks.aws.mskconnect.outputs.ConnectorWorkerConfiguration;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:mskconnect/connector:Connector")
public final class Connector extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) of the connector.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Connector.arn' is not present");
    }

    /**
     * Information about the capacity allocated to the connector. See `capacity` Block for details.
     * 
     */
    @PolicyResourceProperty(name="capacity", flag="unknown_capacity")
    private ConnectorCapacity value_capacity;
    private boolean unknown_capacity;
    public ConnectorCapacity capacity() {
        if (!unknown_capacity) return value_capacity;
        throw new UndeferrableValueException("Value 'Connector.capacity' is not present");
    }

    /**
     * A map of keys to values that represent the configuration for the connector.
     * 
     */
    @PolicyResourceProperty(name="connectorConfiguration", flag="unknown_connectorConfiguration")
    private Map<String,String> value_connectorConfiguration;
    private boolean unknown_connectorConfiguration;
    public Map<String,String> connectorConfiguration() {
        if (!unknown_connectorConfiguration) return value_connectorConfiguration;
        throw new UndeferrableValueException("Value 'Connector.connectorConfiguration' is not present");
    }

    /**
     * A summary description of the connector.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Connector.description' is not present");
    }

    /**
     * Specifies which Apache Kafka cluster to connect to. See `kafka_cluster` Block for details.
     * 
     */
    @PolicyResourceProperty(name="kafkaCluster", flag="unknown_kafkaCluster")
    private ConnectorKafkaCluster value_kafkaCluster;
    private boolean unknown_kafkaCluster;
    public ConnectorKafkaCluster kafkaCluster() {
        if (!unknown_kafkaCluster) return value_kafkaCluster;
        throw new UndeferrableValueException("Value 'Connector.kafkaCluster' is not present");
    }

    /**
     * Details of the client authentication used by the Apache Kafka cluster. See `kafka_cluster_client_authentication` Block for details.
     * 
     */
    @PolicyResourceProperty(name="kafkaClusterClientAuthentication", flag="unknown_kafkaClusterClientAuthentication")
    private ConnectorKafkaClusterClientAuthentication value_kafkaClusterClientAuthentication;
    private boolean unknown_kafkaClusterClientAuthentication;
    public ConnectorKafkaClusterClientAuthentication kafkaClusterClientAuthentication() {
        if (!unknown_kafkaClusterClientAuthentication) return value_kafkaClusterClientAuthentication;
        throw new UndeferrableValueException("Value 'Connector.kafkaClusterClientAuthentication' is not present");
    }

    /**
     * Details of encryption in transit to the Apache Kafka cluster. See `kafka_cluster_encryption_in_transit` Block for details.
     * 
     */
    @PolicyResourceProperty(name="kafkaClusterEncryptionInTransit", flag="unknown_kafkaClusterEncryptionInTransit")
    private ConnectorKafkaClusterEncryptionInTransit value_kafkaClusterEncryptionInTransit;
    private boolean unknown_kafkaClusterEncryptionInTransit;
    public ConnectorKafkaClusterEncryptionInTransit kafkaClusterEncryptionInTransit() {
        if (!unknown_kafkaClusterEncryptionInTransit) return value_kafkaClusterEncryptionInTransit;
        throw new UndeferrableValueException("Value 'Connector.kafkaClusterEncryptionInTransit' is not present");
    }

    /**
     * The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster&#39;s version and the plugins.
     * 
     */
    @PolicyResourceProperty(name="kafkaconnectVersion", flag="unknown_kafkaconnectVersion")
    private String value_kafkaconnectVersion;
    private boolean unknown_kafkaconnectVersion;
    public String kafkaconnectVersion() {
        if (!unknown_kafkaconnectVersion) return value_kafkaconnectVersion;
        throw new UndeferrableValueException("Value 'Connector.kafkaconnectVersion' is not present");
    }

    /**
     * Details about log delivery. See `log_delivery` Block for details.
     * 
     */
    @PolicyResourceProperty(name="logDelivery", flag="unknown_logDelivery")
    private @Nullable ConnectorLogDelivery value_logDelivery;
    private boolean unknown_logDelivery;
    public @Nullable ConnectorLogDelivery logDelivery() {
        if (!unknown_logDelivery) return value_logDelivery;
        throw new UndeferrableValueException("Value 'Connector.logDelivery' is not present");
    }

    /**
     * The name of the connector.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Connector.name' is not present");
    }

    /**
     * Specifies which plugins to use for the connector. See `plugin` Block for details.
     * 
     */
    @PolicyResourceProperty(name="plugins", flag="unknown_plugins")
    private List<ConnectorPlugin> value_plugins;
    private boolean unknown_plugins;
    public List<ConnectorPlugin> plugins() {
        if (!unknown_plugins) return value_plugins;
        throw new UndeferrableValueException("Value 'Connector.plugins' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="serviceExecutionRoleArn", flag="unknown_serviceExecutionRoleArn")
    private String value_serviceExecutionRoleArn;
    private boolean unknown_serviceExecutionRoleArn;
    public String serviceExecutionRoleArn() {
        if (!unknown_serviceExecutionRoleArn) return value_serviceExecutionRoleArn;
        throw new UndeferrableValueException("Value 'Connector.serviceExecutionRoleArn' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Connector.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Connector.tagsAll' is not present");
    }

    /**
     * The current version of the connector.
     * 
     */
    @PolicyResourceProperty(name="version", flag="unknown_version")
    private String value_version;
    private boolean unknown_version;
    public String version() {
        if (!unknown_version) return value_version;
        throw new UndeferrableValueException("Value 'Connector.version' is not present");
    }

    /**
     * Specifies which worker configuration to use with the connector. See `worker_configuration` Block for details.
     * 
     */
    @PolicyResourceProperty(name="workerConfiguration", flag="unknown_workerConfiguration")
    private @Nullable ConnectorWorkerConfiguration value_workerConfiguration;
    private boolean unknown_workerConfiguration;
    public @Nullable ConnectorWorkerConfiguration workerConfiguration() {
        if (!unknown_workerConfiguration) return value_workerConfiguration;
        throw new UndeferrableValueException("Value 'Connector.workerConfiguration' is not present");
    }

}
