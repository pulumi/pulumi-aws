// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.macie2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.macie2.inputs.ClassificationJobS3JobDefinitionArgs;
import com.pulumi.policypacks.aws.macie2.inputs.ClassificationJobScheduleFrequencyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:macie2/classificationJob:ClassificationJob")
public final class ClassificationJobArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The custom data identifiers to use for data analysis and classification.
     * 
     */
    private UndeferrableValue<List<String>> customDataIdentifierIds;

    public List<String> customDataIdentifierIds() {
        if (customDataIdentifierIds == null) return null;
        return customDataIdentifierIds.getValue("ClassificationJobArgs.customDataIdentifierIds");
    }

    /**
     * A custom description of the job. The description can contain as many as 200 characters.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("ClassificationJobArgs.description");
    }

    /**
     * Specifies whether to analyze all existing, eligible objects immediately after the job is created.
     * 
     */
    private UndeferrableValue<Boolean> initialRun;

    public Boolean initialRun() {
        if (initialRun == null) return null;
        return initialRun.getValue("ClassificationJobArgs.initialRun");
    }

    /**
     * The status for the job. Valid values are: `CANCELLED`, `RUNNING` and `USER_PAUSED`
     * 
     */
    private UndeferrableValue<String> jobStatus;

    public String jobStatus() {
        if (jobStatus == null) return null;
        return jobStatus.getValue("ClassificationJobArgs.jobStatus");
    }

    /**
     * The schedule for running the job. Valid values are: `ONE_TIME` - Run the job only once. If you specify this value, don&#39;t specify a value for the `schedule_frequency` property. `SCHEDULED` - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the `schedule_frequency` property to define the recurrence pattern for the job.
     * 
     */
    private UndeferrableValue<String> jobType;

    public String jobType() {
        if (jobType == null) return null;
        return jobType.getValue("ClassificationJobArgs.jobType");
    }

    /**
     * A custom name for the job. The name can contain as many as 500 characters. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ClassificationJobArgs.name");
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    private UndeferrableValue<String> namePrefix;

    public String namePrefix() {
        if (namePrefix == null) return null;
        return namePrefix.getValue("ClassificationJobArgs.namePrefix");
    }

    /**
     * The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
     * 
     */
    private UndeferrableValue<ClassificationJobS3JobDefinitionArgs> s3JobDefinition;

    public ClassificationJobS3JobDefinitionArgs s3JobDefinition() {
        if (s3JobDefinition == null) return null;
        return s3JobDefinition.getValue("ClassificationJobArgs.s3JobDefinition");
    }

    /**
     * The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
     * 
     */
    private UndeferrableValue<Integer> samplingPercentage;

    public Integer samplingPercentage() {
        if (samplingPercentage == null) return null;
        return samplingPercentage.getValue("ClassificationJobArgs.samplingPercentage");
    }

    /**
     * The recurrence pattern for running the job. To run the job only once, don&#39;t specify a value for this property and set the value for the `job_type` property to `ONE_TIME`. (documented below)
     * 
     */
    private UndeferrableValue<ClassificationJobScheduleFrequencyArgs> scheduleFrequency;

    public ClassificationJobScheduleFrequencyArgs scheduleFrequency() {
        if (scheduleFrequency == null) return null;
        return scheduleFrequency.getValue("ClassificationJobArgs.scheduleFrequency");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ClassificationJobArgs.tags");
    }

}
