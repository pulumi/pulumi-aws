// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudwatch.outputs.MetricStreamExcludeFilter;
import com.pulumi.policypacks.aws.cloudwatch.outputs.MetricStreamIncludeFilter;
import com.pulumi.policypacks.aws.cloudwatch.outputs.MetricStreamStatisticsConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudwatch/metricStream:MetricStream")
public final class MetricStream extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the metric stream.
     * 
     */
    private UndeferrableValue<String> arn;

    public String arn() {
        if (arn == null) return null;
        return arn.getValue("MetricStream.arn");
    }

    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the metric stream was created.
     * 
     */
    private UndeferrableValue<String> creationDate;

    public String creationDate() {
        if (creationDate == null) return null;
        return creationDate.getValue("MetricStream.creationDate");
    }

    /**
     * List of exclusive metric filters. If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces and the conditional metric names that you specify here. If you don&#39;t specify metric names or provide empty metric names whole metric namespace is excluded. Conflicts with `include_filter`.
     * 
     */
    private @Nullable UndeferrableValue<List<MetricStreamExcludeFilter>> excludeFilters;

    public @Nullable List<MetricStreamExcludeFilter> excludeFilters() {
        if (excludeFilters == null) return null;
        return excludeFilters.getValue("MetricStream.excludeFilters");
    }

    /**
     * ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
     * 
     */
    private UndeferrableValue<String> firehoseArn;

    public String firehoseArn() {
        if (firehoseArn == null) return null;
        return firehoseArn.getValue("MetricStream.firehoseArn");
    }

    /**
     * List of inclusive metric filters. If you specify this parameter, the stream sends only the conditional metric names from the metric namespaces that you specify here. If you don&#39;t specify metric names or provide empty metric names whole metric namespace is included. Conflicts with `exclude_filter`.
     * 
     */
    private @Nullable UndeferrableValue<List<MetricStreamIncludeFilter>> includeFilters;

    public @Nullable List<MetricStreamIncludeFilter> includeFilters() {
        if (includeFilters == null) return null;
        return includeFilters.getValue("MetricStream.includeFilters");
    }

    /**
     * If you are creating a metric stream in a monitoring account, specify true to include metrics from source accounts that are linked to this monitoring account, in the metric stream. The default is false. For more information about linking accounts, see [CloudWatch cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html).
     * 
     */
    private @Nullable UndeferrableValue<Boolean> includeLinkedAccountsMetrics;

    public @Nullable Boolean includeLinkedAccountsMetrics() {
        if (includeLinkedAccountsMetrics == null) return null;
        return includeLinkedAccountsMetrics.getValue("MetricStream.includeLinkedAccountsMetrics");
    }

    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the metric stream was last updated.
     * 
     */
    private UndeferrableValue<String> lastUpdateDate;

    public String lastUpdateDate() {
        if (lastUpdateDate == null) return null;
        return lastUpdateDate.getValue("MetricStream.lastUpdateDate");
    }

    /**
     * Friendly name of the metric stream. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("MetricStream.name");
    }

    /**
     * Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    private UndeferrableValue<String> namePrefix;

    public String namePrefix() {
        if (namePrefix == null) return null;
        return namePrefix.getValue("MetricStream.namePrefix");
    }

    /**
     * Output format for the stream. Possible values are `json`, `opentelemetry0.7`, and `opentelemetry1.0`. For more information about output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html).
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> outputFormat;

    public String outputFormat() {
        if (outputFormat == null) return null;
        return outputFormat.getValue("MetricStream.outputFormat");
    }

    /**
     * ARN of the IAM role that this metric stream will use to access Amazon Kinesis Firehose resources. For more information about role permissions, see [Trust between CloudWatch and Kinesis Data Firehose](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-trustpolicy.html).
     * 
     */
    private UndeferrableValue<String> roleArn;

    public String roleArn() {
        if (roleArn == null) return null;
        return roleArn.getValue("MetricStream.roleArn");
    }

    /**
     * State of the metric stream. Possible values are `running` and `stopped`.
     * 
     */
    private UndeferrableValue<String> state;

    public String state() {
        if (state == null) return null;
        return state.getValue("MetricStream.state");
    }

    /**
     * For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream&#39;s `output_format`. If the OutputFormat is `json`, you can stream any additional statistic that is supported by CloudWatch, listed in [CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html). If the OutputFormat is `opentelemetry0.7` or `opentelemetry1.0`, you can stream percentile statistics (p99 etc.). See details below.
     * 
     */
    private @Nullable UndeferrableValue<List<MetricStreamStatisticsConfiguration>> statisticsConfigurations;

    public @Nullable List<MetricStreamStatisticsConfiguration> statisticsConfigurations() {
        if (statisticsConfigurations == null) return null;
        return statisticsConfigurations.getValue("MetricStream.statisticsConfigurations");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private @Nullable UndeferrableValue<Map<String,String>> tags;

    public @Nullable Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("MetricStream.tags");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    private UndeferrableValue<Map<String,String>> tagsAll;

    public Map<String,String> tagsAll() {
        if (tagsAll == null) return null;
        return tagsAll.getValue("MetricStream.tagsAll");
    }

}
