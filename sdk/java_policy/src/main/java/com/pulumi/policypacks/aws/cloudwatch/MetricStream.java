// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.cloudwatch.outputs.MetricStreamExcludeFilter;
import com.pulumi.policypacks.aws.cloudwatch.outputs.MetricStreamIncludeFilter;
import com.pulumi.policypacks.aws.cloudwatch.outputs.MetricStreamStatisticsConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudwatch/metricStream:MetricStream")
public final class MetricStream extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * ARN of the metric stream.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'MetricStream.arn' is not present");
    }

    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the metric stream was created.
     * 
     */
    @PolicyResourceProperty(name="creationDate", flag="unknown_creationDate")
    private String value_creationDate;
    private boolean unknown_creationDate;
    public String creationDate() {
        if (!unknown_creationDate) return value_creationDate;
        throw new UndeferrableValueException("Value 'MetricStream.creationDate' is not present");
    }

    /**
     * List of exclusive metric filters. If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces and the conditional metric names that you specify here. If you don&#39;t specify metric names or provide empty metric names whole metric namespace is excluded. Conflicts with `include_filter`.
     * 
     */
    @PolicyResourceProperty(name="excludeFilters", flag="unknown_excludeFilters")
    private @Nullable List<MetricStreamExcludeFilter> value_excludeFilters;
    private boolean unknown_excludeFilters;
    public @Nullable List<MetricStreamExcludeFilter> excludeFilters() {
        if (!unknown_excludeFilters) return value_excludeFilters;
        throw new UndeferrableValueException("Value 'MetricStream.excludeFilters' is not present");
    }

    /**
     * ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream.
     * 
     */
    @PolicyResourceProperty(name="firehoseArn", flag="unknown_firehoseArn")
    private String value_firehoseArn;
    private boolean unknown_firehoseArn;
    public String firehoseArn() {
        if (!unknown_firehoseArn) return value_firehoseArn;
        throw new UndeferrableValueException("Value 'MetricStream.firehoseArn' is not present");
    }

    /**
     * List of inclusive metric filters. If you specify this parameter, the stream sends only the conditional metric names from the metric namespaces that you specify here. If you don&#39;t specify metric names or provide empty metric names whole metric namespace is included. Conflicts with `exclude_filter`.
     * 
     */
    @PolicyResourceProperty(name="includeFilters", flag="unknown_includeFilters")
    private @Nullable List<MetricStreamIncludeFilter> value_includeFilters;
    private boolean unknown_includeFilters;
    public @Nullable List<MetricStreamIncludeFilter> includeFilters() {
        if (!unknown_includeFilters) return value_includeFilters;
        throw new UndeferrableValueException("Value 'MetricStream.includeFilters' is not present");
    }

    /**
     * If you are creating a metric stream in a monitoring account, specify true to include metrics from source accounts that are linked to this monitoring account, in the metric stream. The default is false. For more information about linking accounts, see [CloudWatch cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html).
     * 
     */
    @PolicyResourceProperty(name="includeLinkedAccountsMetrics", flag="unknown_includeLinkedAccountsMetrics")
    private @Nullable Boolean value_includeLinkedAccountsMetrics;
    private boolean unknown_includeLinkedAccountsMetrics;
    public @Nullable Boolean includeLinkedAccountsMetrics() {
        if (!unknown_includeLinkedAccountsMetrics) return value_includeLinkedAccountsMetrics;
        throw new UndeferrableValueException("Value 'MetricStream.includeLinkedAccountsMetrics' is not present");
    }

    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the metric stream was last updated.
     * 
     */
    @PolicyResourceProperty(name="lastUpdateDate", flag="unknown_lastUpdateDate")
    private String value_lastUpdateDate;
    private boolean unknown_lastUpdateDate;
    public String lastUpdateDate() {
        if (!unknown_lastUpdateDate) return value_lastUpdateDate;
        throw new UndeferrableValueException("Value 'MetricStream.lastUpdateDate' is not present");
    }

    /**
     * Friendly name of the metric stream. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'MetricStream.name' is not present");
    }

    /**
     * Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'MetricStream.namePrefix' is not present");
    }

    /**
     * Output format for the stream. Possible values are `json`, `opentelemetry0.7`, and `opentelemetry1.0`. For more information about output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html).
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="outputFormat", flag="unknown_outputFormat")
    private String value_outputFormat;
    private boolean unknown_outputFormat;
    public String outputFormat() {
        if (!unknown_outputFormat) return value_outputFormat;
        throw new UndeferrableValueException("Value 'MetricStream.outputFormat' is not present");
    }

    /**
     * ARN of the IAM role that this metric stream will use to access Amazon Kinesis Firehose resources. For more information about role permissions, see [Trust between CloudWatch and Kinesis Data Firehose](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-trustpolicy.html).
     * 
     */
    @PolicyResourceProperty(name="roleArn", flag="unknown_roleArn")
    private String value_roleArn;
    private boolean unknown_roleArn;
    public String roleArn() {
        if (!unknown_roleArn) return value_roleArn;
        throw new UndeferrableValueException("Value 'MetricStream.roleArn' is not present");
    }

    /**
     * State of the metric stream. Possible values are `running` and `stopped`.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private String value_state;
    private boolean unknown_state;
    public String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'MetricStream.state' is not present");
    }

    /**
     * For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream&#39;s `output_format`. If the OutputFormat is `json`, you can stream any additional statistic that is supported by CloudWatch, listed in [CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html). If the OutputFormat is `opentelemetry0.7` or `opentelemetry1.0`, you can stream percentile statistics (p99 etc.). See details below.
     * 
     */
    @PolicyResourceProperty(name="statisticsConfigurations", flag="unknown_statisticsConfigurations")
    private @Nullable List<MetricStreamStatisticsConfiguration> value_statisticsConfigurations;
    private boolean unknown_statisticsConfigurations;
    public @Nullable List<MetricStreamStatisticsConfiguration> statisticsConfigurations() {
        if (!unknown_statisticsConfigurations) return value_statisticsConfigurations;
        throw new UndeferrableValueException("Value 'MetricStream.statisticsConfigurations' is not present");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'MetricStream.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'MetricStream.tagsAll' is not present");
    }

}
