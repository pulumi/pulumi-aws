// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.batch;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.batch.outputs.ComputeEnvironmentComputeResources;
import com.pulumi.policypacks.aws.batch.outputs.ComputeEnvironmentEksConfiguration;
import com.pulumi.policypacks.aws.batch.outputs.ComputeEnvironmentUpdatePolicy;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:batch/computeEnvironment:ComputeEnvironment")
public final class ComputeEnvironment extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) of the compute environment.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.arn' is not present");
    }

    /**
     * The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. If omitted, the provider will assign a random, unique name.
     * 
     */
    @PolicyResourceProperty(name="computeEnvironmentName", flag="unknown_computeEnvironmentName")
    private String value_computeEnvironmentName;
    private boolean unknown_computeEnvironmentName;
    public String computeEnvironmentName() {
        if (!unknown_computeEnvironmentName) return value_computeEnvironmentName;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.computeEnvironmentName' is not present");
    }

    /**
     * Creates a unique compute environment name beginning with the specified prefix. Conflicts with `compute_environment_name`.
     * 
     */
    @PolicyResourceProperty(name="computeEnvironmentNamePrefix", flag="unknown_computeEnvironmentNamePrefix")
    private String value_computeEnvironmentNamePrefix;
    private boolean unknown_computeEnvironmentNamePrefix;
    public String computeEnvironmentNamePrefix() {
        if (!unknown_computeEnvironmentNamePrefix) return value_computeEnvironmentNamePrefix;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.computeEnvironmentNamePrefix' is not present");
    }

    /**
     * Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
     * 
     */
    @PolicyResourceProperty(name="computeResources", flag="unknown_computeResources")
    private @Nullable ComputeEnvironmentComputeResources value_computeResources;
    private boolean unknown_computeResources;
    public @Nullable ComputeEnvironmentComputeResources computeResources() {
        if (!unknown_computeResources) return value_computeResources;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.computeResources' is not present");
    }

    /**
     * The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
     * 
     */
    @PolicyResourceProperty(name="ecsClusterArn", flag="unknown_ecsClusterArn")
    private String value_ecsClusterArn;
    private boolean unknown_ecsClusterArn;
    public String ecsClusterArn() {
        if (!unknown_ecsClusterArn) return value_ecsClusterArn;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.ecsClusterArn' is not present");
    }

    /**
     * Details for the Amazon EKS cluster that supports the compute environment. See details below.
     * 
     */
    @PolicyResourceProperty(name="eksConfiguration", flag="unknown_eksConfiguration")
    private @Nullable ComputeEnvironmentEksConfiguration value_eksConfiguration;
    private boolean unknown_eksConfiguration;
    public @Nullable ComputeEnvironmentEksConfiguration eksConfiguration() {
        if (!unknown_eksConfiguration) return value_eksConfiguration;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.eksConfiguration' is not present");
    }

    /**
     * The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
     * 
     */
    @PolicyResourceProperty(name="serviceRole", flag="unknown_serviceRole")
    private String value_serviceRole;
    private boolean unknown_serviceRole;
    public String serviceRole() {
        if (!unknown_serviceRole) return value_serviceRole;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.serviceRole' is not present");
    }

    /**
     * The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
     * 
     */
    @PolicyResourceProperty(name="state", flag="unknown_state")
    private @Nullable String value_state;
    private boolean unknown_state;
    public @Nullable String state() {
        if (!unknown_state) return value_state;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.state' is not present");
    }

    /**
     * The current status of the compute environment (for example, CREATING or VALID).
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.status' is not present");
    }

    /**
     * A short, human-readable string to provide additional details about the current status of the compute environment.
     * 
     */
    @PolicyResourceProperty(name="statusReason", flag="unknown_statusReason")
    private String value_statusReason;
    private boolean unknown_statusReason;
    public String statusReason() {
        if (!unknown_statusReason) return value_statusReason;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.statusReason' is not present");
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.tagsAll' is not present");
    }

    /**
     * The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.
     * 
     */
    @PolicyResourceProperty(name="type", flag="unknown_type")
    private String value_type;
    private boolean unknown_type;
    public String type() {
        if (!unknown_type) return value_type;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.type' is not present");
    }

    /**
     * Specifies the infrastructure update policy for the compute environment. See details below.
     * 
     */
    @PolicyResourceProperty(name="updatePolicy", flag="unknown_updatePolicy")
    private @Nullable ComputeEnvironmentUpdatePolicy value_updatePolicy;
    private boolean unknown_updatePolicy;
    public @Nullable ComputeEnvironmentUpdatePolicy updatePolicy() {
        if (!unknown_updatePolicy) return value_updatePolicy;
        throw new UndeferrableValueException("Value 'ComputeEnvironment.updatePolicy' is not present");
    }

}
