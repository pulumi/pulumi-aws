// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ecrpublic;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ecrpublic.outputs.RepositoryCatalogData;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ecrpublic/repository:Repository")
public final class Repository extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Full ARN of the repository.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Repository.arn' is not present");
    }

    /**
     * Catalog data configuration for the repository. See below for schema.
     * 
     */
    @PolicyResourceProperty(name="catalogData", flag="unknown_catalogData")
    private @Nullable RepositoryCatalogData value_catalogData;
    private boolean unknown_catalogData;
    public @Nullable RepositoryCatalogData catalogData() {
        if (!unknown_catalogData) return value_catalogData;
        throw new UndeferrableValueException("Value 'Repository.catalogData' is not present");
    }

    @PolicyResourceProperty(name="forceDestroy", flag="unknown_forceDestroy")
    private @Nullable Boolean value_forceDestroy;
    private boolean unknown_forceDestroy;
    public @Nullable Boolean forceDestroy() {
        if (!unknown_forceDestroy) return value_forceDestroy;
        throw new UndeferrableValueException("Value 'Repository.forceDestroy' is not present");
    }

    /**
     * The registry ID where the repository was created.
     * 
     */
    @PolicyResourceProperty(name="registryId", flag="unknown_registryId")
    private String value_registryId;
    private boolean unknown_registryId;
    public String registryId() {
        if (!unknown_registryId) return value_registryId;
        throw new UndeferrableValueException("Value 'Repository.registryId' is not present");
    }

    /**
     * Name of the repository.
     * 
     */
    @PolicyResourceProperty(name="repositoryName", flag="unknown_repositoryName")
    private String value_repositoryName;
    private boolean unknown_repositoryName;
    public String repositoryName() {
        if (!unknown_repositoryName) return value_repositoryName;
        throw new UndeferrableValueException("Value 'Repository.repositoryName' is not present");
    }

    /**
     * The URI of the repository.
     * 
     */
    @PolicyResourceProperty(name="repositoryUri", flag="unknown_repositoryUri")
    private String value_repositoryUri;
    private boolean unknown_repositoryUri;
    public String repositoryUri() {
        if (!unknown_repositoryUri) return value_repositoryUri;
        throw new UndeferrableValueException("Value 'Repository.repositoryUri' is not present");
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Repository.tags' is not present");
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Repository.tagsAll' is not present");
    }

}
