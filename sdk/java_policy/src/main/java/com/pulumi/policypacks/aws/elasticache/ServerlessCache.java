// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticache;

import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticache.ServerlessCacheCacheUsageLimits;
import com.pulumi.policypacks.aws.elasticache.ServerlessCacheEndpoint;
import com.pulumi.policypacks.aws.elasticache.ServerlessCacheReaderEndpoint;
import com.pulumi.policypacks.aws.elasticache.ServerlessCacheTimeouts;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;


@PolicyResourceType(type="aws:elasticache/serverlessCache:ServerlessCache")
public final class ServerlessCache extends com.pulumi.resources.PolicyResource {

    /**
     * The Amazon Resource Name (ARN) of the serverless cache.
     * 
     */
    public String arn;



    /**
     * Sets the cache usage limits for storage and ElastiCache Processing Units for the cache. See `cache_usage_limits` Block for details.
     * 
     */
    public ServerlessCacheCacheUsageLimits cacheUsageLimits;



    /**
     * Timestamp of when the serverless cache was created.
     * 
     */
    public String createTime;



    /**
     * The daily time that snapshots will be created from the new serverless cache. Only supported for engine types `&#34;redis&#34;` or `&#34;valkey&#34;`. Defaults to `0`.
     * 
     */
    public String dailySnapshotTime;



    /**
     * User-provided description for the serverless cache. The default is NULL.
     * 
     */
    public String description;



    /**
     * Represents the information required for client programs to connect to a cache node. See `endpoint` Block for details.
     * 
     */
    public List<ServerlessCacheEndpoint> endpoints;



    /**
     * Name of the cache engine to be used for this cache cluster. Valid values are `memcached`, `redis` or `valkey`.
     * 
     */
    public String engine;



    /**
     * The name and version number of the engine the serverless cache is compatible with.
     * 
     */
    public String fullEngineVersion;



    /**
     * ARN of the customer managed key for encrypting the data at rest. If no KMS key is provided, a default service key is used.
     * 
     */
    public String kmsKeyId;



    /**
     * The version of the cache engine that will be used to create the serverless cache.
     * See [Describe Cache Engine Versions](https://docs.aws.amazon.com/cli/latest/reference/elasticache/describe-cache-engine-versions.html) in the AWS Documentation for supported versions.
     * 
     */
    public String majorEngineVersion;



    /**
     * The Cluster name which serves as a unique identifier to the serverless cache
     * 
     * The following arguments are optional:
     * 
     */
    public String name;



    /**
     * Represents the information required for client programs to connect to a cache node. See `reader_endpoint` Block for details.
     * 
     */
    public List<ServerlessCacheReaderEndpoint> readerEndpoints;



    /**
     * A list of the one or more VPC security groups to be associated with the serverless cache. The security group will authorize traffic access for the VPC end-point (private-link). If no other information is given this will be the VPCâ€™s Default Security Group that is associated with the cluster VPC end-point.
     * 
     */
    public List<String> securityGroupIds;



    /**
     * The list of ARN(s) of the snapshot that the new serverless cache will be created from. Available for Redis only.
     * 
     */
    public List<String> snapshotArnsToRestores;



    /**
     * The number of snapshots that will be retained for the serverless cache that is being created. As new snapshots beyond this limit are added, the oldest snapshots will be deleted on a rolling basis. Available for Redis only.
     * 
     */
    public Integer snapshotRetentionLimit;



    /**
     * The current status of the serverless cache. The allowed values are CREATING, AVAILABLE, DELETING, CREATE-FAILED and MODIFYING.
     * 
     */
    public String status;



    /**
     * A list of the identifiers of the subnets where the VPC endpoint for the serverless cache will be deployed. All the subnetIds must belong to the same VPC.
     * 
     */
    public List<String> subnetIds;



    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Map<String,String> tags;



    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    public Map<String,String> tagsAll;



    public ServerlessCacheTimeouts timeouts;



    /**
     * The identifier of the UserGroup to be associated with the serverless cache. Available for Redis only. Default is NULL.
     * 
     */
    public String userGroupId;



}
