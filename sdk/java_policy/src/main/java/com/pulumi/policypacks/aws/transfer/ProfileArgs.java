// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.transfer;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:transfer/profile:Profile")
public final class ProfileArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The As2Id is the AS2 name as defined in the RFC 4130. For inbound ttransfers this is the AS2 From Header for the AS2 messages sent from the partner. For Outbound messages this is the AS2 To Header for the AS2 messages sent to the partner. his ID cannot include spaces.
     * 
     */
    @PolicyResourceProperty(name="as2Id", flag="unknown_as2Id")
    private String value_as2Id;
    private boolean unknown_as2Id;
    public String as2Id() {
        if (!unknown_as2Id) return value_as2Id;
        throw new UndeferrableValueException("Value 'ProfileArgs.as2Id' is not present");
    }

    /**
     * The list of certificate Ids from the imported certificate operation.
     * 
     */
    @PolicyResourceProperty(name="certificateIds", flag="unknown_certificateIds")
    private List<String> value_certificateIds;
    private boolean unknown_certificateIds;
    public List<String> certificateIds() {
        if (!unknown_certificateIds) return value_certificateIds;
        throw new UndeferrableValueException("Value 'ProfileArgs.certificateIds' is not present");
    }

    /**
     * The profile type should be LOCAL or PARTNER.
     * 
     */
    @PolicyResourceProperty(name="profileType", flag="unknown_profileType")
    private String value_profileType;
    private boolean unknown_profileType;
    public String profileType() {
        if (!unknown_profileType) return value_profileType;
        throw new UndeferrableValueException("Value 'ProfileArgs.profileType' is not present");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'ProfileArgs.tags' is not present");
    }

}
