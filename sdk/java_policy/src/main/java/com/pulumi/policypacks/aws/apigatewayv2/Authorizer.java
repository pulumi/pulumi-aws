// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigatewayv2;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.apigatewayv2.outputs.AuthorizerJwtConfiguration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apigatewayv2/authorizer:Authorizer")
public final class Authorizer extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * API identifier.
     * 
     */
    @PolicyResourceProperty(name="apiId", flag="unknown_apiId")
    private String value_apiId;
    private boolean unknown_apiId;
    public String apiId() {
        if (!unknown_apiId) return value_apiId;
        throw new UndeferrableValueException("Value 'Authorizer.apiId' is not present");
    }

    /**
     * Required credentials as an IAM role for API Gateway to invoke the authorizer.
     * Supported only for `REQUEST` authorizers.
     * 
     */
    @PolicyResourceProperty(name="authorizerCredentialsArn", flag="unknown_authorizerCredentialsArn")
    private @Nullable String value_authorizerCredentialsArn;
    private boolean unknown_authorizerCredentialsArn;
    public @Nullable String authorizerCredentialsArn() {
        if (!unknown_authorizerCredentialsArn) return value_authorizerCredentialsArn;
        throw new UndeferrableValueException("Value 'Authorizer.authorizerCredentialsArn' is not present");
    }

    /**
     * Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
     * Valid values: `1.0`, `2.0`.
     * 
     */
    @PolicyResourceProperty(name="authorizerPayloadFormatVersion", flag="unknown_authorizerPayloadFormatVersion")
    private @Nullable String value_authorizerPayloadFormatVersion;
    private boolean unknown_authorizerPayloadFormatVersion;
    public @Nullable String authorizerPayloadFormatVersion() {
        if (!unknown_authorizerPayloadFormatVersion) return value_authorizerPayloadFormatVersion;
        throw new UndeferrableValueException("Value 'Authorizer.authorizerPayloadFormatVersion' is not present");
    }

    /**
     * Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
     * If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to `300`.
     * Supported only for HTTP API Lambda authorizers.
     * 
     */
    @PolicyResourceProperty(name="authorizerResultTtlInSeconds", flag="unknown_authorizerResultTtlInSeconds")
    private Integer value_authorizerResultTtlInSeconds;
    private boolean unknown_authorizerResultTtlInSeconds;
    public Integer authorizerResultTtlInSeconds() {
        if (!unknown_authorizerResultTtlInSeconds) return value_authorizerResultTtlInSeconds;
        throw new UndeferrableValueException("Value 'Authorizer.authorizerResultTtlInSeconds' is not present");
    }

    /**
     * Authorizer type. Valid values: `JWT`, `REQUEST`.
     * Specify `REQUEST` for a Lambda function using incoming request parameters.
     * For HTTP APIs, specify `JWT` to use JSON Web Tokens.
     * 
     */
    @PolicyResourceProperty(name="authorizerType", flag="unknown_authorizerType")
    private String value_authorizerType;
    private boolean unknown_authorizerType;
    public String authorizerType() {
        if (!unknown_authorizerType) return value_authorizerType;
        throw new UndeferrableValueException("Value 'Authorizer.authorizerType' is not present");
    }

    /**
     * Authorizer&#39;s Uniform Resource Identifier (URI).
     * For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invoke_arn` attribute of the `aws.lambda.Function` resource.
     * Supported only for `REQUEST` authorizers. Must be between 1 and 2048 characters in length.
     * 
     */
    @PolicyResourceProperty(name="authorizerUri", flag="unknown_authorizerUri")
    private @Nullable String value_authorizerUri;
    private boolean unknown_authorizerUri;
    public @Nullable String authorizerUri() {
        if (!unknown_authorizerUri) return value_authorizerUri;
        throw new UndeferrableValueException("Value 'Authorizer.authorizerUri' is not present");
    }

    /**
     * Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
     * Supported only for HTTP APIs.
     * 
     */
    @PolicyResourceProperty(name="enableSimpleResponses", flag="unknown_enableSimpleResponses")
    private @Nullable Boolean value_enableSimpleResponses;
    private boolean unknown_enableSimpleResponses;
    public @Nullable Boolean enableSimpleResponses() {
        if (!unknown_enableSimpleResponses) return value_enableSimpleResponses;
        throw new UndeferrableValueException("Value 'Authorizer.enableSimpleResponses' is not present");
    }

    /**
     * Identity sources for which authorization is requested.
     * For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
     * For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
     * 
     */
    @PolicyResourceProperty(name="identitySources", flag="unknown_identitySources")
    private @Nullable List<String> value_identitySources;
    private boolean unknown_identitySources;
    public @Nullable List<String> identitySources() {
        if (!unknown_identitySources) return value_identitySources;
        throw new UndeferrableValueException("Value 'Authorizer.identitySources' is not present");
    }

    /**
     * Configuration of a JWT authorizer. Required for the `JWT` authorizer type.
     * Supported only for HTTP APIs.
     * 
     */
    @PolicyResourceProperty(name="jwtConfiguration", flag="unknown_jwtConfiguration")
    private @Nullable AuthorizerJwtConfiguration value_jwtConfiguration;
    private boolean unknown_jwtConfiguration;
    public @Nullable AuthorizerJwtConfiguration jwtConfiguration() {
        if (!unknown_jwtConfiguration) return value_jwtConfiguration;
        throw new UndeferrableValueException("Value 'Authorizer.jwtConfiguration' is not present");
    }

    /**
     * Name of the authorizer. Must be between 1 and 128 characters in length.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Authorizer.name' is not present");
    }

}
