// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.apigatewayv2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.apigatewayv2.outputs.AuthorizerJwtConfiguration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:apigatewayv2/authorizer:Authorizer")
public final class Authorizer extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * API identifier.
     * 
     */
    private UndeferrableValue<String> apiId;

    public String apiId() {
        if (apiId == null) return null;
        return apiId.getValue("Authorizer.apiId");
    }

    /**
     * Required credentials as an IAM role for API Gateway to invoke the authorizer.
     * Supported only for `REQUEST` authorizers.
     * 
     */
    private @Nullable UndeferrableValue<String> authorizerCredentialsArn;

    public @Nullable String authorizerCredentialsArn() {
        if (authorizerCredentialsArn == null) return null;
        return authorizerCredentialsArn.getValue("Authorizer.authorizerCredentialsArn");
    }

    /**
     * Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
     * Valid values: `1.0`, `2.0`.
     * 
     */
    private @Nullable UndeferrableValue<String> authorizerPayloadFormatVersion;

    public @Nullable String authorizerPayloadFormatVersion() {
        if (authorizerPayloadFormatVersion == null) return null;
        return authorizerPayloadFormatVersion.getValue("Authorizer.authorizerPayloadFormatVersion");
    }

    /**
     * Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
     * If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to `300`.
     * Supported only for HTTP API Lambda authorizers.
     * 
     */
    private UndeferrableValue<Integer> authorizerResultTtlInSeconds;

    public Integer authorizerResultTtlInSeconds() {
        if (authorizerResultTtlInSeconds == null) return null;
        return authorizerResultTtlInSeconds.getValue("Authorizer.authorizerResultTtlInSeconds");
    }

    /**
     * Authorizer type. Valid values: `JWT`, `REQUEST`.
     * Specify `REQUEST` for a Lambda function using incoming request parameters.
     * For HTTP APIs, specify `JWT` to use JSON Web Tokens.
     * 
     */
    private UndeferrableValue<String> authorizerType;

    public String authorizerType() {
        if (authorizerType == null) return null;
        return authorizerType.getValue("Authorizer.authorizerType");
    }

    /**
     * Authorizer&#39;s Uniform Resource Identifier (URI).
     * For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invoke_arn` attribute of the `aws.lambda.Function` resource.
     * Supported only for `REQUEST` authorizers. Must be between 1 and 2048 characters in length.
     * 
     */
    private @Nullable UndeferrableValue<String> authorizerUri;

    public @Nullable String authorizerUri() {
        if (authorizerUri == null) return null;
        return authorizerUri.getValue("Authorizer.authorizerUri");
    }

    /**
     * Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
     * Supported only for HTTP APIs.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> enableSimpleResponses;

    public @Nullable Boolean enableSimpleResponses() {
        if (enableSimpleResponses == null) return null;
        return enableSimpleResponses.getValue("Authorizer.enableSimpleResponses");
    }

    /**
     * Identity sources for which authorization is requested.
     * For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
     * For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
     * 
     */
    private @Nullable UndeferrableValue<List<String>> identitySources;

    public @Nullable List<String> identitySources() {
        if (identitySources == null) return null;
        return identitySources.getValue("Authorizer.identitySources");
    }

    /**
     * Configuration of a JWT authorizer. Required for the `JWT` authorizer type.
     * Supported only for HTTP APIs.
     * 
     */
    private @Nullable UndeferrableValue<AuthorizerJwtConfiguration> jwtConfiguration;

    public @Nullable AuthorizerJwtConfiguration jwtConfiguration() {
        if (jwtConfiguration == null) return null;
        return jwtConfiguration.getValue("Authorizer.jwtConfiguration");
    }

    /**
     * Name of the authorizer. Must be between 1 and 128 characters in length.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("Authorizer.name");
    }

}
