// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.elasticache;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.elasticache.inputs.ServerlessCacheCacheUsageLimitsArgs;
import com.pulumi.policypacks.aws.elasticache.inputs.ServerlessCacheTimeoutsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:elasticache/serverlessCache:ServerlessCache")
public final class ServerlessCacheArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Sets the cache usage limits for storage and ElastiCache Processing Units for the cache. See `cache_usage_limits` Block for details.
     * 
     */
    private UndeferrableValue<ServerlessCacheCacheUsageLimitsArgs> cacheUsageLimits;

    public ServerlessCacheCacheUsageLimitsArgs cacheUsageLimits() {
        if (cacheUsageLimits == null) return null;
        return cacheUsageLimits.getValue("ServerlessCacheArgs.cacheUsageLimits");
    }

    /**
     * The daily time that snapshots will be created from the new serverless cache. Only supported for engine types `&#34;redis&#34;` or `&#34;valkey&#34;`. Defaults to `0`.
     * 
     */
    private UndeferrableValue<String> dailySnapshotTime;

    public String dailySnapshotTime() {
        if (dailySnapshotTime == null) return null;
        return dailySnapshotTime.getValue("ServerlessCacheArgs.dailySnapshotTime");
    }

    /**
     * User-provided description for the serverless cache. The default is NULL.
     * 
     */
    private UndeferrableValue<String> description;

    public String description() {
        if (description == null) return null;
        return description.getValue("ServerlessCacheArgs.description");
    }

    /**
     * Name of the cache engine to be used for this cache cluster. Valid values are `memcached`, `redis` or `valkey`.
     * 
     */
    private UndeferrableValue<String> engine;

    public String engine() {
        if (engine == null) return null;
        return engine.getValue("ServerlessCacheArgs.engine");
    }

    /**
     * ARN of the customer managed key for encrypting the data at rest. If no KMS key is provided, a default service key is used.
     * 
     */
    private UndeferrableValue<String> kmsKeyId;

    public String kmsKeyId() {
        if (kmsKeyId == null) return null;
        return kmsKeyId.getValue("ServerlessCacheArgs.kmsKeyId");
    }

    /**
     * The version of the cache engine that will be used to create the serverless cache.
     * See [Describe Cache Engine Versions](https://docs.aws.amazon.com/cli/latest/reference/elasticache/describe-cache-engine-versions.html) in the AWS Documentation for supported versions.
     * 
     */
    private UndeferrableValue<String> majorEngineVersion;

    public String majorEngineVersion() {
        if (majorEngineVersion == null) return null;
        return majorEngineVersion.getValue("ServerlessCacheArgs.majorEngineVersion");
    }

    /**
     * The Cluster name which serves as a unique identifier to the serverless cache
     * 
     * The following arguments are optional:
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ServerlessCacheArgs.name");
    }

    /**
     * A list of the one or more VPC security groups to be associated with the serverless cache. The security group will authorize traffic access for the VPC end-point (private-link). If no other information is given this will be the VPCâ€™s Default Security Group that is associated with the cluster VPC end-point.
     * 
     */
    private UndeferrableValue<List<String>> securityGroupIds;

    public List<String> securityGroupIds() {
        if (securityGroupIds == null) return null;
        return securityGroupIds.getValue("ServerlessCacheArgs.securityGroupIds");
    }

    /**
     * The list of ARN(s) of the snapshot that the new serverless cache will be created from. Available for Redis only.
     * 
     */
    private UndeferrableValue<List<String>> snapshotArnsToRestores;

    public List<String> snapshotArnsToRestores() {
        if (snapshotArnsToRestores == null) return null;
        return snapshotArnsToRestores.getValue("ServerlessCacheArgs.snapshotArnsToRestores");
    }

    /**
     * The number of snapshots that will be retained for the serverless cache that is being created. As new snapshots beyond this limit are added, the oldest snapshots will be deleted on a rolling basis. Available for Redis only.
     * 
     */
    private UndeferrableValue<Integer> snapshotRetentionLimit;

    public Integer snapshotRetentionLimit() {
        if (snapshotRetentionLimit == null) return null;
        return snapshotRetentionLimit.getValue("ServerlessCacheArgs.snapshotRetentionLimit");
    }

    /**
     * A list of the identifiers of the subnets where the VPC endpoint for the serverless cache will be deployed. All the subnetIds must belong to the same VPC.
     * 
     */
    private UndeferrableValue<List<String>> subnetIds;

    public List<String> subnetIds() {
        if (subnetIds == null) return null;
        return subnetIds.getValue("ServerlessCacheArgs.subnetIds");
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("ServerlessCacheArgs.tags");
    }

    private UndeferrableValue<ServerlessCacheTimeoutsArgs> timeouts;

    public ServerlessCacheTimeoutsArgs timeouts() {
        if (timeouts == null) return null;
        return timeouts.getValue("ServerlessCacheArgs.timeouts");
    }

    /**
     * The identifier of the UserGroup to be associated with the serverless cache. Available for Redis only. Default is NULL.
     * 
     */
    private UndeferrableValue<String> userGroupId;

    public String userGroupId() {
        if (userGroupId == null) return null;
        return userGroupId.getValue("ServerlessCacheArgs.userGroupId");
    }

}
