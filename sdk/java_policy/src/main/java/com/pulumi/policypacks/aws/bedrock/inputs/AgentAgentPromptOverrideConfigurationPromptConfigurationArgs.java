// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.bedrock.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.bedrock.inputs.AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfigurationArgs;
import java.lang.String;
import java.util.List;


public final class AgentAgentPromptOverrideConfigurationPromptConfigurationArgs {

    /**
     * prompt template with which to replace the default prompt template. You can use placeholder variables in the base prompt template to customize the prompt. For more information, see [Prompt template placeholder variables](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-placeholders.html).
     * 
     */
    private UndeferrableValue<String> basePromptTemplate;

    public String basePromptTemplate() {
        if (basePromptTemplate == null) return null;
        return basePromptTemplate.getValue("AgentAgentPromptOverrideConfigurationPromptConfigurationArgs.basePromptTemplate");
    }

    /**
     * Inference parameters to use when the agent invokes a foundation model in the part of the agent sequence defined by the `prompt_type`. For more information, see [Inference parameters for foundation models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html). See `inference_configuration` Block for details.
     * 
     */
    private UndeferrableValue<List<AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfigurationArgs>> inferenceConfigurations;

    public List<AgentAgentPromptOverrideConfigurationPromptConfigurationInferenceConfigurationArgs> inferenceConfigurations() {
        if (inferenceConfigurations == null) return null;
        return inferenceConfigurations.getValue("AgentAgentPromptOverrideConfigurationPromptConfigurationArgs.inferenceConfigurations");
    }

    /**
     * Whether to override the default parser Lambda function when parsing the raw foundation model output in the part of the agent sequence defined by the `prompt_type`. If you set the argument as `OVERRIDDEN`, the `override_lambda` argument in the `prompt_override_configuration` block must be specified with the ARN of a Lambda function. Valid values: `DEFAULT`, `OVERRIDDEN`.
     * 
     */
    private UndeferrableValue<String> parserMode;

    public String parserMode() {
        if (parserMode == null) return null;
        return parserMode.getValue("AgentAgentPromptOverrideConfigurationPromptConfigurationArgs.parserMode");
    }

    /**
     * Whether to override the default prompt template for this `prompt_type`. Set this argument to `OVERRIDDEN` to use the prompt that you provide in the `base_prompt_template`. If you leave it as `DEFAULT`, the agent uses a default prompt template. Valid values: `DEFAULT`, `OVERRIDDEN`.
     * 
     */
    private UndeferrableValue<String> promptCreationMode;

    public String promptCreationMode() {
        if (promptCreationMode == null) return null;
        return promptCreationMode.getValue("AgentAgentPromptOverrideConfigurationPromptConfigurationArgs.promptCreationMode");
    }

    /**
     * Whether to allow the agent to carry out the step specified in the `prompt_type`. If you set this argument to `DISABLED`, the agent skips that step. Valid Values: `ENABLED`, `DISABLED`.
     * 
     */
    private UndeferrableValue<String> promptState;

    public String promptState() {
        if (promptState == null) return null;
        return promptState.getValue("AgentAgentPromptOverrideConfigurationPromptConfigurationArgs.promptState");
    }

    /**
     * Step in the agent sequence that this prompt configuration applies to. Valid values: `PRE_PROCESSING`, `ORCHESTRATION`, `POST_PROCESSING`, `KNOWLEDGE_BASE_RESPONSE_GENERATION`.
     * 
     */
    private UndeferrableValue<String> promptType;

    public String promptType() {
        if (promptType == null) return null;
        return promptType.getValue("AgentAgentPromptOverrideConfigurationPromptConfigurationArgs.promptType");
    }

}
