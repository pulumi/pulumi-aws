// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/natGateway:NatGateway")
public final class NatGatewayArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The Allocation ID of the Elastic IP address for the NAT Gateway. Required for `connectivity_type` of `public`.
     * 
     */
    private UndeferrableValue<String> allocationId;

    public String allocationId() {
        if (allocationId == null) return null;
        return allocationId.getValue("NatGatewayArgs.allocationId");
    }

    /**
     * Connectivity type for the NAT Gateway. Valid values are `private` and `public`. Defaults to `public`.
     * 
     */
    private UndeferrableValue<String> connectivityType;

    public String connectivityType() {
        if (connectivityType == null) return null;
        return connectivityType.getValue("NatGatewayArgs.connectivityType");
    }

    /**
     * The private IPv4 address to assign to the NAT Gateway. If you don&#39;t provide an address, a private IPv4 address will be automatically assigned.
     * 
     */
    private UndeferrableValue<String> privateIp;

    public String privateIp() {
        if (privateIp == null) return null;
        return privateIp.getValue("NatGatewayArgs.privateIp");
    }

    /**
     * A list of secondary allocation EIP IDs for this NAT Gateway.
     * 
     */
    private UndeferrableValue<List<String>> secondaryAllocationIds;

    public List<String> secondaryAllocationIds() {
        if (secondaryAllocationIds == null) return null;
        return secondaryAllocationIds.getValue("NatGatewayArgs.secondaryAllocationIds");
    }

    /**
     * [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
     * 
     */
    private UndeferrableValue<Integer> secondaryPrivateIpAddressCount;

    public Integer secondaryPrivateIpAddressCount() {
        if (secondaryPrivateIpAddressCount == null) return null;
        return secondaryPrivateIpAddressCount.getValue("NatGatewayArgs.secondaryPrivateIpAddressCount");
    }

    /**
     * A list of secondary private IPv4 addresses to assign to the NAT Gateway.
     * 
     */
    private UndeferrableValue<List<String>> secondaryPrivateIpAddresses;

    public List<String> secondaryPrivateIpAddresses() {
        if (secondaryPrivateIpAddresses == null) return null;
        return secondaryPrivateIpAddresses.getValue("NatGatewayArgs.secondaryPrivateIpAddresses");
    }

    /**
     * The Subnet ID of the subnet in which to place the NAT Gateway.
     * 
     */
    private UndeferrableValue<String> subnetId;

    public String subnetId() {
        if (subnetId == null) return null;
        return subnetId.getValue("NatGatewayArgs.subnetId");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("NatGatewayArgs.tags");
    }

}
