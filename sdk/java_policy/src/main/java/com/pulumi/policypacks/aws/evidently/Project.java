// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.evidently;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.evidently.outputs.ProjectDataDelivery;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:evidently/project:Project")
public final class Project extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The number of ongoing experiments currently in the project.
     * 
     */
    @PolicyResourceProperty(name="activeExperimentCount", flag="unknown_activeExperimentCount")
    private Integer value_activeExperimentCount;
    private boolean unknown_activeExperimentCount;
    public Integer activeExperimentCount() {
        if (!unknown_activeExperimentCount) return value_activeExperimentCount;
        throw new UndeferrableValueException("Value 'Project.activeExperimentCount' is not present");
    }

    /**
     * The number of ongoing launches currently in the project.
     * 
     */
    @PolicyResourceProperty(name="activeLaunchCount", flag="unknown_activeLaunchCount")
    private Integer value_activeLaunchCount;
    private boolean unknown_activeLaunchCount;
    public Integer activeLaunchCount() {
        if (!unknown_activeLaunchCount) return value_activeLaunchCount;
        throw new UndeferrableValueException("Value 'Project.activeLaunchCount' is not present");
    }

    /**
     * The ARN of the project.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Project.arn' is not present");
    }

    /**
     * The date and time that the project is created.
     * 
     */
    @PolicyResourceProperty(name="createdTime", flag="unknown_createdTime")
    private String value_createdTime;
    private boolean unknown_createdTime;
    public String createdTime() {
        if (!unknown_createdTime) return value_createdTime;
        throw new UndeferrableValueException("Value 'Project.createdTime' is not present");
    }

    /**
     * A block that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view. See below.
     * 
     */
    @PolicyResourceProperty(name="dataDelivery", flag="unknown_dataDelivery")
    private @Nullable ProjectDataDelivery value_dataDelivery;
    private boolean unknown_dataDelivery;
    public @Nullable ProjectDataDelivery dataDelivery() {
        if (!unknown_dataDelivery) return value_dataDelivery;
        throw new UndeferrableValueException("Value 'Project.dataDelivery' is not present");
    }

    /**
     * Specifies the description of the project.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Project.description' is not present");
    }

    /**
     * The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.
     * 
     */
    @PolicyResourceProperty(name="experimentCount", flag="unknown_experimentCount")
    private Integer value_experimentCount;
    private boolean unknown_experimentCount;
    public Integer experimentCount() {
        if (!unknown_experimentCount) return value_experimentCount;
        throw new UndeferrableValueException("Value 'Project.experimentCount' is not present");
    }

    /**
     * The number of features currently in the project.
     * 
     */
    @PolicyResourceProperty(name="featureCount", flag="unknown_featureCount")
    private Integer value_featureCount;
    private boolean unknown_featureCount;
    public Integer featureCount() {
        if (!unknown_featureCount) return value_featureCount;
        throw new UndeferrableValueException("Value 'Project.featureCount' is not present");
    }

    /**
     * The date and time that the project was most recently updated.
     * 
     */
    @PolicyResourceProperty(name="lastUpdatedTime", flag="unknown_lastUpdatedTime")
    private String value_lastUpdatedTime;
    private boolean unknown_lastUpdatedTime;
    public String lastUpdatedTime() {
        if (!unknown_lastUpdatedTime) return value_lastUpdatedTime;
        throw new UndeferrableValueException("Value 'Project.lastUpdatedTime' is not present");
    }

    /**
     * The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.
     * 
     */
    @PolicyResourceProperty(name="launchCount", flag="unknown_launchCount")
    private Integer value_launchCount;
    private boolean unknown_launchCount;
    public Integer launchCount() {
        if (!unknown_launchCount) return value_launchCount;
        throw new UndeferrableValueException("Value 'Project.launchCount' is not present");
    }

    /**
     * A name for the project.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Project.name' is not present");
    }

    /**
     * The current state of the project. Valid values are `AVAILABLE` and `UPDATING`.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'Project.status' is not present");
    }

    /**
     * Tags to apply to the project. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Project.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Project.tagsAll' is not present");
    }

}
