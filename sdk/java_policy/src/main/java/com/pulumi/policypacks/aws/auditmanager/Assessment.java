// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.auditmanager;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.auditmanager.outputs.AssessmentAssessmentReportsDestination;
import com.pulumi.policypacks.aws.auditmanager.outputs.AssessmentRole;
import com.pulumi.policypacks.aws.auditmanager.outputs.AssessmentRolesAll;
import com.pulumi.policypacks.aws.auditmanager.outputs.AssessmentScope;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:auditmanager/assessment:Assessment")
public final class Assessment extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * Amazon Resource Name (ARN) of the assessment.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'Assessment.arn' is not present");
    }

    /**
     * Assessment report storage destination configuration. See `assessment_reports_destination` below.
     * 
     */
    @PolicyResourceProperty(name="assessmentReportsDestination", flag="unknown_assessmentReportsDestination")
    private @Nullable AssessmentAssessmentReportsDestination value_assessmentReportsDestination;
    private boolean unknown_assessmentReportsDestination;
    public @Nullable AssessmentAssessmentReportsDestination assessmentReportsDestination() {
        if (!unknown_assessmentReportsDestination) return value_assessmentReportsDestination;
        throw new UndeferrableValueException("Value 'Assessment.assessmentReportsDestination' is not present");
    }

    /**
     * Description of the assessment.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private @Nullable String value_description;
    private boolean unknown_description;
    public @Nullable String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'Assessment.description' is not present");
    }

    /**
     * Unique identifier of the framework the assessment will be created from.
     * 
     */
    @PolicyResourceProperty(name="frameworkId", flag="unknown_frameworkId")
    private String value_frameworkId;
    private boolean unknown_frameworkId;
    public String frameworkId() {
        if (!unknown_frameworkId) return value_frameworkId;
        throw new UndeferrableValueException("Value 'Assessment.frameworkId' is not present");
    }

    /**
     * Name of the assessment.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'Assessment.name' is not present");
    }

    /**
     * List of roles for the assessment. See `roles` below.
     * 
     */
    @PolicyResourceProperty(name="roles", flag="unknown_roles")
    private List<AssessmentRole> value_roles;
    private boolean unknown_roles;
    public List<AssessmentRole> roles() {
        if (!unknown_roles) return value_roles;
        throw new UndeferrableValueException("Value 'Assessment.roles' is not present");
    }

    /**
     * Complete list of all roles with access to the assessment. This includes both roles explicitly configured via the `roles` block, and any roles which have access to all Audit Manager assessments by default.
     * 
     */
    @PolicyResourceProperty(name="rolesAlls", flag="unknown_rolesAlls")
    private List<AssessmentRolesAll> value_rolesAlls;
    private boolean unknown_rolesAlls;
    public List<AssessmentRolesAll> rolesAlls() {
        if (!unknown_rolesAlls) return value_rolesAlls;
        throw new UndeferrableValueException("Value 'Assessment.rolesAlls' is not present");
    }

    /**
     * Amazon Web Services accounts and services that are in scope for the assessment. See `scope` below.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="scope", flag="unknown_scope")
    private @Nullable AssessmentScope value_scope;
    private boolean unknown_scope;
    public @Nullable AssessmentScope scope() {
        if (!unknown_scope) return value_scope;
        throw new UndeferrableValueException("Value 'Assessment.scope' is not present");
    }

    /**
     * Status of the assessment. Valid values are `ACTIVE` and `INACTIVE`.
     * 
     */
    @PolicyResourceProperty(name="status", flag="unknown_status")
    private String value_status;
    private boolean unknown_status;
    public String status() {
        if (!unknown_status) return value_status;
        throw new UndeferrableValueException("Value 'Assessment.status' is not present");
    }

    /**
     * A map of tags to assign to the assessment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'Assessment.tags' is not present");
    }

    /**
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'Assessment.tagsAll' is not present");
    }

}
