// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.ec2;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.ec2.enums.InstancePlatform;
import com.pulumi.policypacks.aws.ec2.enums.InstanceType;
import com.pulumi.policypacks.aws.ec2.enums.Tenancy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:ec2/capacityReservation:CapacityReservation")
public final class CapacityReservationArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The Availability Zone in which to create the Capacity Reservation.
     * 
     */
    private UndeferrableValue<String> availabilityZone;

    public String availabilityZone() {
        if (availabilityZone == null) return null;
        return availabilityZone.getValue("CapacityReservationArgs.availabilityZone");
    }

    /**
     * Indicates whether the Capacity Reservation supports EBS-optimized instances.
     * 
     */
    private UndeferrableValue<Boolean> ebsOptimized;

    public Boolean ebsOptimized() {
        if (ebsOptimized == null) return null;
        return ebsOptimized.getValue("CapacityReservationArgs.ebsOptimized");
    }

    /**
     * The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
     * 
     */
    private UndeferrableValue<String> endDate;

    public String endDate() {
        if (endDate == null) return null;
        return endDate.getValue("CapacityReservationArgs.endDate");
    }

    /**
     * Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
     * 
     */
    private UndeferrableValue<String> endDateType;

    public String endDateType() {
        if (endDateType == null) return null;
        return endDateType.getValue("CapacityReservationArgs.endDateType");
    }

    /**
     * Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
     * 
     */
    private UndeferrableValue<Boolean> ephemeralStorage;

    public Boolean ephemeralStorage() {
        if (ephemeralStorage == null) return null;
        return ephemeralStorage.getValue("CapacityReservationArgs.ephemeralStorage");
    }

    /**
     * The number of instances for which to reserve capacity.
     * 
     */
    private UndeferrableValue<Integer> instanceCount;

    public Integer instanceCount() {
        if (instanceCount == null) return null;
        return instanceCount.getValue("CapacityReservationArgs.instanceCount");
    }

    /**
     * Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
     * 
     */
    private UndeferrableValue<String> instanceMatchCriteria;

    public String instanceMatchCriteria() {
        if (instanceMatchCriteria == null) return null;
        return instanceMatchCriteria.getValue("CapacityReservationArgs.instanceMatchCriteria");
    }

    /**
     * The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
     * 
     */
    private UndeferrableValue<String> instancePlatform;

    public String instancePlatform() {
        if (instancePlatform == null) return null;
        return instancePlatform.getValue("CapacityReservationArgs.instancePlatform");
    }

    /**
     * The instance type for which to reserve capacity.
     * 
     */
    private UndeferrableValue<String> instanceType;

    public String instanceType() {
        if (instanceType == null) return null;
        return instanceType.getValue("CapacityReservationArgs.instanceType");
    }

    /**
     * The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
     * 
     */
    private UndeferrableValue<String> outpostArn;

    public String outpostArn() {
        if (outpostArn == null) return null;
        return outpostArn.getValue("CapacityReservationArgs.outpostArn");
    }

    /**
     * The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation.
     * 
     */
    private UndeferrableValue<String> placementGroupArn;

    public String placementGroupArn() {
        if (placementGroupArn == null) return null;
        return placementGroupArn.getValue("CapacityReservationArgs.placementGroupArn");
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("CapacityReservationArgs.tags");
    }

    /**
     * Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
     * 
     */
    private UndeferrableValue<String> tenancy;

    public String tenancy() {
        if (tenancy == null) return null;
        return tenancy.getValue("CapacityReservationArgs.tenancy");
    }

}
