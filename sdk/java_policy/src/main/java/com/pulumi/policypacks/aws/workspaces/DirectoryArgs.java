// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.workspaces;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.workspaces.inputs.DirectorySamlPropertiesArgs;
import com.pulumi.policypacks.aws.workspaces.inputs.DirectorySelfServicePermissionsArgs;
import com.pulumi.policypacks.aws.workspaces.inputs.DirectoryWorkspaceAccessPropertiesArgs;
import com.pulumi.policypacks.aws.workspaces.inputs.DirectoryWorkspaceCreationPropertiesArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:workspaces/directory:Directory")
public final class DirectoryArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The directory identifier for registration in WorkSpaces service.
     * 
     */
    private UndeferrableValue<String> directoryId;

    public String directoryId() {
        if (directoryId == null) return null;
        return directoryId.getValue("DirectoryArgs.directoryId");
    }

    /**
     * The identifiers of the IP access control groups associated with the directory.
     * 
     */
    private UndeferrableValue<List<String>> ipGroupIds;

    public List<String> ipGroupIds() {
        if (ipGroupIds == null) return null;
        return ipGroupIds.getValue("DirectoryArgs.ipGroupIds");
    }

    /**
     * Configuration of SAML authentication integration. Defined below.
     * 
     */
    private UndeferrableValue<DirectorySamlPropertiesArgs> samlProperties;

    public DirectorySamlPropertiesArgs samlProperties() {
        if (samlProperties == null) return null;
        return samlProperties.getValue("DirectoryArgs.samlProperties");
    }

    /**
     * Permissions to enable or disable self-service capabilities. Defined below.
     * 
     */
    private UndeferrableValue<DirectorySelfServicePermissionsArgs> selfServicePermissions;

    public DirectorySelfServicePermissionsArgs selfServicePermissions() {
        if (selfServicePermissions == null) return null;
        return selfServicePermissions.getValue("DirectoryArgs.selfServicePermissions");
    }

    /**
     * The identifiers of the subnets where the directory resides.
     * 
     */
    private UndeferrableValue<List<String>> subnetIds;

    public List<String> subnetIds() {
        if (subnetIds == null) return null;
        return subnetIds.getValue("DirectoryArgs.subnetIds");
    }

    /**
     * A map of tags assigned to the WorkSpaces directory. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    private UndeferrableValue<Map<String,String>> tags;

    public Map<String,String> tags() {
        if (tags == null) return null;
        return tags.getValue("DirectoryArgs.tags");
    }

    /**
     * Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
     * 
     */
    private UndeferrableValue<DirectoryWorkspaceAccessPropertiesArgs> workspaceAccessProperties;

    public DirectoryWorkspaceAccessPropertiesArgs workspaceAccessProperties() {
        if (workspaceAccessProperties == null) return null;
        return workspaceAccessProperties.getValue("DirectoryArgs.workspaceAccessProperties");
    }

    /**
     * Default properties that are used for creating WorkSpaces. Defined below.
     * 
     */
    private UndeferrableValue<DirectoryWorkspaceCreationPropertiesArgs> workspaceCreationProperties;

    public DirectoryWorkspaceCreationPropertiesArgs workspaceCreationProperties() {
        if (workspaceCreationProperties == null) return null;
        return workspaceCreationProperties.getValue("DirectoryArgs.workspaceCreationProperties");
    }

}
