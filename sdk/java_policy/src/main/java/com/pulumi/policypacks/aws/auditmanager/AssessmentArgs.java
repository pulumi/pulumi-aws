// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.auditmanager;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import com.pulumi.policypacks.aws.auditmanager.inputs.AssessmentAssessmentReportsDestinationArgs;
import com.pulumi.policypacks.aws.auditmanager.inputs.AssessmentRoleArgs;
import com.pulumi.policypacks.aws.auditmanager.inputs.AssessmentScopeArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:auditmanager/assessment:Assessment")
public final class AssessmentArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * Assessment report storage destination configuration. See `assessment_reports_destination` below.
     * 
     */
    @PolicyResourceProperty(name="assessmentReportsDestination", flag="unknown_assessmentReportsDestination")
    private AssessmentAssessmentReportsDestinationArgs value_assessmentReportsDestination;
    private boolean unknown_assessmentReportsDestination;
    public AssessmentAssessmentReportsDestinationArgs assessmentReportsDestination() {
        if (!unknown_assessmentReportsDestination) return value_assessmentReportsDestination;
        throw new UndeferrableValueException("Value 'AssessmentArgs.assessmentReportsDestination' is not present");
    }

    /**
     * Description of the assessment.
     * 
     */
    @PolicyResourceProperty(name="description", flag="unknown_description")
    private String value_description;
    private boolean unknown_description;
    public String description() {
        if (!unknown_description) return value_description;
        throw new UndeferrableValueException("Value 'AssessmentArgs.description' is not present");
    }

    /**
     * Unique identifier of the framework the assessment will be created from.
     * 
     */
    @PolicyResourceProperty(name="frameworkId", flag="unknown_frameworkId")
    private String value_frameworkId;
    private boolean unknown_frameworkId;
    public String frameworkId() {
        if (!unknown_frameworkId) return value_frameworkId;
        throw new UndeferrableValueException("Value 'AssessmentArgs.frameworkId' is not present");
    }

    /**
     * Name of the assessment.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'AssessmentArgs.name' is not present");
    }

    /**
     * List of roles for the assessment. See `roles` below.
     * 
     */
    @PolicyResourceProperty(name="roles", flag="unknown_roles")
    private List<AssessmentRoleArgs> value_roles;
    private boolean unknown_roles;
    public List<AssessmentRoleArgs> roles() {
        if (!unknown_roles) return value_roles;
        throw new UndeferrableValueException("Value 'AssessmentArgs.roles' is not present");
    }

    /**
     * Amazon Web Services accounts and services that are in scope for the assessment. See `scope` below.
     * 
     * The following arguments are optional:
     * 
     */
    @PolicyResourceProperty(name="scope", flag="unknown_scope")
    private AssessmentScopeArgs value_scope;
    private boolean unknown_scope;
    public AssessmentScopeArgs scope() {
        if (!unknown_scope) return value_scope;
        throw new UndeferrableValueException("Value 'AssessmentArgs.scope' is not present");
    }

    /**
     * A map of tags to assign to the assessment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'AssessmentArgs.tags' is not present");
    }

}
