// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.codebuild.outputs;

import com.pulumi.core.UndeferrableValue;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;


public final class ProjectArtifacts {

    /**
     * Artifact identifier. Must be the same specified inside the AWS CodeBuild build
     * specification.
     * 
     */
    private @Nullable UndeferrableValue<String> artifactIdentifier;

    public @Nullable String artifactIdentifier() {
        if (artifactIdentifier == null) return null;
        return artifactIdentifier.getValue("ProjectArtifacts.artifactIdentifier");
    }

    /**
     * Specifies the bucket owner&#39;s access for objects that another account uploads to
     * their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these
     * objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`,
     * `READ_ONLY`, and `FULL`. your CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission
     * allows CodeBuild to modify the access control list for the bucket.
     * 
     */
    private @Nullable UndeferrableValue<String> bucketOwnerAccess;

    public @Nullable String bucketOwnerAccess() {
        if (bucketOwnerAccess == null) return null;
        return bucketOwnerAccess.getValue("ProjectArtifacts.bucketOwnerAccess");
    }

    /**
     * Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`,
     * this value is ignored. Defaults to `false`.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> encryptionDisabled;

    public @Nullable Boolean encryptionDisabled() {
        if (encryptionDisabled == null) return null;
        return encryptionDisabled.getValue("ProjectArtifacts.encryptionDisabled");
    }

    /**
     * Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or
     * `NO_ARTIFACTS`, this value is ignored. If `type` is set to `S3`, this is the name of the output bucket.
     * 
     */
    private @Nullable UndeferrableValue<String> location;

    public @Nullable String location() {
        if (location == null) return null;
        return location.getValue("ProjectArtifacts.location");
    }

    /**
     * Name of the project. If `type` is set to `S3`, this is the name of the output artifact object
     * 
     */
    private @Nullable UndeferrableValue<String> name;

    public @Nullable String name() {
        if (name == null) return null;
        return name.getValue("ProjectArtifacts.name");
    }

    /**
     * Namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values
     * are `BUILD_ID`, `NONE`.
     * 
     */
    private @Nullable UndeferrableValue<String> namespaceType;

    public @Nullable String namespaceType() {
        if (namespaceType == null) return null;
        return namespaceType.getValue("ProjectArtifacts.namespaceType");
    }

    /**
     * Whether a name specified in the build specification overrides the artifact name.
     * 
     */
    private @Nullable UndeferrableValue<Boolean> overrideArtifactName;

    public @Nullable Boolean overrideArtifactName() {
        if (overrideArtifactName == null) return null;
        return overrideArtifactName.getValue("ProjectArtifacts.overrideArtifactName");
    }

    /**
     * Type of build output artifact to create. If `type` is set to `S3`, valid values are `NONE`,
     * `ZIP`
     * 
     */
    private @Nullable UndeferrableValue<String> packaging;

    public @Nullable String packaging() {
        if (packaging == null) return null;
        return packaging.getValue("ProjectArtifacts.packaging");
    }

    /**
     * If `type` is set to `S3`, this is the path to the output artifact.
     * 
     */
    private @Nullable UndeferrableValue<String> path;

    public @Nullable String path() {
        if (path == null) return null;
        return path.getValue("ProjectArtifacts.path");
    }

    /**
     * Build output artifact&#39;s type. Valid values: `CODEPIPELINE`, `NO_ARTIFACTS`, `S3`.
     * 
     */
    private UndeferrableValue<String> type;

    public String type() {
        if (type == null) return null;
        return type.getValue("ProjectArtifacts.type");
    }

}
