// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.cloudwatch;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:cloudwatch/logGroup:LogGroup")
public final class LogGroupArgs extends com.pulumi.resources.PolicyResourceInput {

    /**
     * The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group,
     * AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires
     * permissions for the CMK whenever the encrypted data is requested.
     * 
     */
    @PolicyResourceProperty(name="kmsKeyId", flag="unknown_kmsKeyId")
    private String value_kmsKeyId;
    private boolean unknown_kmsKeyId;
    public String kmsKeyId() {
        if (!unknown_kmsKeyId) return value_kmsKeyId;
        throw new UndeferrableValueException("Value 'LogGroupArgs.kmsKeyId' is not present");
    }

    /**
     * Specified the log class of the log group. Possible values are: `STANDARD` or `INFREQUENT_ACCESS`.
     * 
     */
    @PolicyResourceProperty(name="logGroupClass", flag="unknown_logGroupClass")
    private String value_logGroupClass;
    private boolean unknown_logGroupClass;
    public String logGroupClass() {
        if (!unknown_logGroupClass) return value_logGroupClass;
        throw new UndeferrableValueException("Value 'LogGroupArgs.logGroupClass' is not present");
    }

    /**
     * The name of the log group. If omitted, this provider will assign a random, unique name.
     * 
     */
    @PolicyResourceProperty(name="name", flag="unknown_name")
    private String value_name;
    private boolean unknown_name;
    public String name() {
        if (!unknown_name) return value_name;
        throw new UndeferrableValueException("Value 'LogGroupArgs.name' is not present");
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    @PolicyResourceProperty(name="namePrefix", flag="unknown_namePrefix")
    private String value_namePrefix;
    private boolean unknown_namePrefix;
    public String namePrefix() {
        if (!unknown_namePrefix) return value_namePrefix;
        throw new UndeferrableValueException("Value 'LogGroupArgs.namePrefix' is not present");
    }

    /**
     * Specifies the number of days
     * you want to retain log events in the specified log group.  Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, 3653, and 0.
     * If you select 0, the events in the log group are always retained and never expire.
     * 
     */
    @PolicyResourceProperty(name="retentionInDays", flag="unknown_retentionInDays")
    private Integer value_retentionInDays;
    private boolean unknown_retentionInDays;
    public Integer retentionInDays() {
        if (!unknown_retentionInDays) return value_retentionInDays;
        throw new UndeferrableValueException("Value 'LogGroupArgs.retentionInDays' is not present");
    }

    /**
     * Set to true if you do not wish the log group (and any logs it may contain) to be deleted at destroy time, and instead just remove the log group from the state.
     * 
     */
    @PolicyResourceProperty(name="skipDestroy", flag="unknown_skipDestroy")
    private Boolean value_skipDestroy;
    private boolean unknown_skipDestroy;
    public Boolean skipDestroy() {
        if (!unknown_skipDestroy) return value_skipDestroy;
        throw new UndeferrableValueException("Value 'LogGroupArgs.skipDestroy' is not present");
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private Map<String,String> value_tags;
    private boolean unknown_tags;
    public Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'LogGroupArgs.tags' is not present");
    }

}
