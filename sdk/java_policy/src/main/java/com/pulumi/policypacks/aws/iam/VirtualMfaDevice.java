// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.iam;

import com.pulumi.core.UndeferrableValueException;
import com.pulumi.core.annotations.PolicyResourceProperty;
import com.pulumi.core.annotations.PolicyResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;


@PolicyResourceType(type="aws:iam/virtualMfaDevice:VirtualMfaDevice")
public final class VirtualMfaDevice extends com.pulumi.resources.PolicyResourceOutput {

    /**
     * The Amazon Resource Name (ARN) specifying the virtual mfa device.
     * 
     */
    @PolicyResourceProperty(name="arn", flag="unknown_arn")
    private String value_arn;
    private boolean unknown_arn;
    public String arn() {
        if (!unknown_arn) return value_arn;
        throw new UndeferrableValueException("Value 'VirtualMfaDevice.arn' is not present");
    }

    /**
     * The base32 seed defined as specified in [RFC3548](https://tools.ietf.org/html/rfc3548.txt). The `base_32_string_seed` is base64-encoded.
     * 
     */
    @PolicyResourceProperty(name="base32StringSeed", flag="unknown_base32StringSeed")
    private String value_base32StringSeed;
    private boolean unknown_base32StringSeed;
    public String base32StringSeed() {
        if (!unknown_base32StringSeed) return value_base32StringSeed;
        throw new UndeferrableValueException("Value 'VirtualMfaDevice.base32StringSeed' is not present");
    }

    /**
     * The date and time when the virtual MFA device was enabled.
     * 
     */
    @PolicyResourceProperty(name="enableDate", flag="unknown_enableDate")
    private String value_enableDate;
    private boolean unknown_enableDate;
    public String enableDate() {
        if (!unknown_enableDate) return value_enableDate;
        throw new UndeferrableValueException("Value 'VirtualMfaDevice.enableDate' is not present");
    }

    /**
     * The path for the virtual MFA device.
     * 
     */
    @PolicyResourceProperty(name="path", flag="unknown_path")
    private @Nullable String value_path;
    private boolean unknown_path;
    public @Nullable String path() {
        if (!unknown_path) return value_path;
        throw new UndeferrableValueException("Value 'VirtualMfaDevice.path' is not present");
    }

    /**
     * A QR code PNG image that encodes `otpauth://totp/$virtualMFADeviceName{@literal @}$AccountName?secret=$Base32String` where `$virtualMFADeviceName` is one of the create call arguments. AccountName is the user name if set (otherwise, the account ID), and Base32String is the seed in base32 format.
     * 
     */
    @PolicyResourceProperty(name="qrCodePng", flag="unknown_qrCodePng")
    private String value_qrCodePng;
    private boolean unknown_qrCodePng;
    public String qrCodePng() {
        if (!unknown_qrCodePng) return value_qrCodePng;
        throw new UndeferrableValueException("Value 'VirtualMfaDevice.qrCodePng' is not present");
    }

    /**
     * Map of resource tags for the virtual mfa device. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @PolicyResourceProperty(name="tags", flag="unknown_tags")
    private @Nullable Map<String,String> value_tags;
    private boolean unknown_tags;
    public @Nullable Map<String,String> tags() {
        if (!unknown_tags) return value_tags;
        throw new UndeferrableValueException("Value 'VirtualMfaDevice.tags' is not present");
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     * @deprecated
     * Please use `tags` instead.
     * 
     */
    @Deprecated /* Please use `tags` instead. */
    @PolicyResourceProperty(name="tagsAll", flag="unknown_tagsAll")
    private Map<String,String> value_tagsAll;
    private boolean unknown_tagsAll;
    public Map<String,String> tagsAll() {
        if (!unknown_tagsAll) return value_tagsAll;
        throw new UndeferrableValueException("Value 'VirtualMfaDevice.tagsAll' is not present");
    }

    /**
     * The associated IAM User name if the virtual MFA device is enabled.
     * 
     */
    @PolicyResourceProperty(name="userName", flag="unknown_userName")
    private String value_userName;
    private boolean unknown_userName;
    public String userName() {
        if (!unknown_userName) return value_userName;
        throw new UndeferrableValueException("Value 'VirtualMfaDevice.userName' is not present");
    }

    /**
     * The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.
     * 
     */
    @PolicyResourceProperty(name="virtualMfaDeviceName", flag="unknown_virtualMfaDeviceName")
    private String value_virtualMfaDeviceName;
    private boolean unknown_virtualMfaDeviceName;
    public String virtualMfaDeviceName() {
        if (!unknown_virtualMfaDeviceName) return value_virtualMfaDeviceName;
        throw new UndeferrableValueException("Value 'VirtualMfaDevice.virtualMfaDeviceName' is not present");
    }

}
