// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationArgs;
import com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationArgs;
import com.pulumi.policypacks.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs {

    /**
     * Describes an application&#39;s checkpointing configuration.
     * 
     */
    private UndeferrableValue<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationArgs> checkpointConfiguration;

    public ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationArgs checkpointConfiguration() {
        if (checkpointConfiguration == null) return null;
        return checkpointConfiguration.getValue("ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs.checkpointConfiguration");
    }

    /**
     * Describes configuration parameters for CloudWatch logging for an application.
     * 
     */
    private UndeferrableValue<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationArgs> monitoringConfiguration;

    public ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationArgs monitoringConfiguration() {
        if (monitoringConfiguration == null) return null;
        return monitoringConfiguration.getValue("ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs.monitoringConfiguration");
    }

    /**
     * Describes parameters for how an application executes multiple tasks simultaneously.
     * 
     */
    private UndeferrableValue<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs> parallelismConfiguration;

    public ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationArgs parallelismConfiguration() {
        if (parallelismConfiguration == null) return null;
        return parallelismConfiguration.getValue("ApplicationApplicationConfigurationFlinkApplicationConfigurationArgs.parallelismConfiguration");
    }

}
