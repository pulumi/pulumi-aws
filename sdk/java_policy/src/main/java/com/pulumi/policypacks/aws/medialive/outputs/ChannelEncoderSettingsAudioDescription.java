// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.policypacks.aws.medialive.outputs;

import com.pulumi.core.UndeferrableValue;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelEncoderSettingsAudioDescriptionCodecSettings;
import com.pulumi.policypacks.aws.medialive.outputs.ChannelEncoderSettingsAudioDescriptionRemixSettings;
import java.lang.String;
import javax.annotation.Nullable;


public final class ChannelEncoderSettingsAudioDescription {

    /**
     * Advanced audio normalization settings. See Audio Normalization Settings for more details.
     * 
     */
    private @Nullable UndeferrableValue<ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings> audioNormalizationSettings;

    public @Nullable ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings audioNormalizationSettings() {
        if (audioNormalizationSettings == null) return null;
        return audioNormalizationSettings.getValue("ChannelEncoderSettingsAudioDescription.audioNormalizationSettings");
    }

    /**
     * The name of the audio selector used as the source for this AudioDescription.
     * 
     */
    private UndeferrableValue<String> audioSelectorName;

    public String audioSelectorName() {
        if (audioSelectorName == null) return null;
        return audioSelectorName.getValue("ChannelEncoderSettingsAudioDescription.audioSelectorName");
    }

    /**
     * Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
     * 
     */
    private @Nullable UndeferrableValue<String> audioType;

    public @Nullable String audioType() {
        if (audioType == null) return null;
        return audioType.getValue("ChannelEncoderSettingsAudioDescription.audioType");
    }

    /**
     * Determined how audio type is determined.
     * 
     */
    private @Nullable UndeferrableValue<String> audioTypeControl;

    public @Nullable String audioTypeControl() {
        if (audioTypeControl == null) return null;
        return audioTypeControl.getValue("ChannelEncoderSettingsAudioDescription.audioTypeControl");
    }

    /**
     * Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
     * 
     */
    private @Nullable UndeferrableValue<ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings> audioWatermarkSettings;

    public @Nullable ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings audioWatermarkSettings() {
        if (audioWatermarkSettings == null) return null;
        return audioWatermarkSettings.getValue("ChannelEncoderSettingsAudioDescription.audioWatermarkSettings");
    }

    /**
     * Audio codec settings. See Audio Codec Settings for more details.
     * 
     */
    private @Nullable UndeferrableValue<ChannelEncoderSettingsAudioDescriptionCodecSettings> codecSettings;

    public @Nullable ChannelEncoderSettingsAudioDescriptionCodecSettings codecSettings() {
        if (codecSettings == null) return null;
        return codecSettings.getValue("ChannelEncoderSettingsAudioDescription.codecSettings");
    }

    private @Nullable UndeferrableValue<String> languageCode;

    public @Nullable String languageCode() {
        if (languageCode == null) return null;
        return languageCode.getValue("ChannelEncoderSettingsAudioDescription.languageCode");
    }

    private @Nullable UndeferrableValue<String> languageCodeControl;

    public @Nullable String languageCodeControl() {
        if (languageCodeControl == null) return null;
        return languageCodeControl.getValue("ChannelEncoderSettingsAudioDescription.languageCodeControl");
    }

    /**
     * The name of this audio description.
     * 
     */
    private UndeferrableValue<String> name;

    public String name() {
        if (name == null) return null;
        return name.getValue("ChannelEncoderSettingsAudioDescription.name");
    }

    private @Nullable UndeferrableValue<ChannelEncoderSettingsAudioDescriptionRemixSettings> remixSettings;

    public @Nullable ChannelEncoderSettingsAudioDescriptionRemixSettings remixSettings() {
        if (remixSettings == null) return null;
        return remixSettings.getValue("ChannelEncoderSettingsAudioDescription.remixSettings");
    }

    /**
     * Stream name RTMP destinations (URLs of type rtmp://)
     * 
     */
    private @Nullable UndeferrableValue<String> streamName;

    public @Nullable String streamName() {
        if (streamName == null) return null;
        return streamName.getValue("ChannelEncoderSettingsAudioDescription.streamName");
    }

}
